uint64_t MLFewShotSoundClassifier.write(to:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  int64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *ML24MLFewShotSoundClassifierV5write2toy10Foundation3URLV_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAJSiTf3nnnpk_nTf1cn_n;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;

  v61 = v1;
  v63 = v2;
  v62 = a1;
  v3 = *(void *)(*(void *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) - 8) + 64);
  v4 = alloca(v3);
  v5 = alloca(v3);
  v55 = &v51;
  v56 = type metadata accessor for Model(0);
  v6 = *(void *)(v56 - 8);
  v7 = *(void *)(v6 + 64);
  v8 = alloca(v7);
  v9 = alloca(v7);
  v53 = &v51;
  v10 = type metadata accessor for URL(0);
  v11 = *(void *)(v10 - 8);
  v12 = *(void *)(v11 + 64);
  v13 = alloca(v12);
  v14 = alloca(v12);
  v15 = v61;
  result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v62, 0xD000000000000016, (unint64_t)("total_item_count" + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v15)
  {
    v58 = v6;
    v60 = 0;
    v59 = &v51;
    v62 = v10;
    v61 = v11;
    v54 = type metadata accessor for MLFewShotSoundClassifier(0);
    v57 = *(id *)((char *)v63 + *(int *)(v54 + 48));
    v17 = [v57 trainingDataEmbeddings];
    v18 = v17;
    v19 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    v21 = v20 & 0xFFFFFFFFFFFFF8;
    if ((v20 & 0x4000000000000001) != 0)
    {
      if (v20) {
        v21 = v20;
      }
      swift_bridgeObjectRetain(v20);
      v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v22 = *(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
    }
    if (v22)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v20 & 0xC000000000000003) == 0, v20);
      if ((v20 & 0xC000000000000003) != 0) {
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
      }
      else {
        v23 = *(id *)(v20 + 32);
      }
      v24 = v23;
      swift_bridgeObjectRelease(v20);
      v25 = [v24 shape];
      v26 = v25;

      v27 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
      v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

      v29 = [v57 exemplar];
      v30 = v29;
      v31 = v60;
      v32 = (char *)UnsafeBufferPointer.init(_:)(v30, &type metadata for Float);
      if (v31)
      {
        (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(v59, v62);
        return swift_bridgeObjectRelease(v28);
      }
      else
      {
        v60 = specialized _copyCollectionToContiguousArray<A>(_:)(v32, v33);
        v39 = v54;
        v40 = v63;
        outlined init with copy of MLTrainingSessionParameters((uint64_t)v63 + *(int *)(v54 + 40), (uint64_t)v55, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        v63 = *(void **)((char *)v40 + *(int *)(v39 + 32));
        [v52 inferenceWindowSize];
        v41 = v52[0];
        ML24MLFewShotSoundClassifierV5write2toy10Foundation3URLV_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAJSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5074_s8CreateML24MLFewShotSoundClassifierV5write2toy10Foundation3URLV_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAJSiTf3nnnpk_nTf1cn_n(v28);
        swift_bridgeObjectRelease(v28);
        v43 = v53;
        v44 = (uint64_t)v63;
        v45 = v41;
        v46 = (uint64_t)v55;
        v63 = ML24MLFewShotSoundClassifierV5write2toy10Foundation3URLV_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAJSiTf3nnnpk_nTf1cn_n;
        MLFewShotSoundClassifier.TemporalClassifier.pipeline(classLabels:inferenceWindowSize:framewiseEmbeddingShape:exemplar:)(v44, v45, (uint64_t)ML24MLFewShotSoundClassifierV5write2toy10Foundation3URLV_tKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAJSiTf3nnnpk_nTf1cn_n, v60);
        outlined destroy of MLFewShotSoundClassifier.TemporalClassifier(v46, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v63);
        v47 = v59;
        Model.write(to:)(v59);
        v48 = v43;
        v49 = v61;
        v50 = v62;
        (*(void (**)(uint64_t *, uint64_t))(v58 + 8))(v48, v56);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(v49 + 8))(v47, v50);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v20);
      v34 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v34, 0, 0);
      *(void *)v35 = 0xD000000000000037;
      *(void *)(v35 + 8) = "FewShotSoundClassifier" + 0x8000000000000000;
      *(_OWORD *)(v35 + 16) = 0;
      *(_OWORD *)(v35 + 32) = 0;
      *(unsigned char *)(v35 + 48) = 2;
      swift_willThrow(&type metadata for MLCreateError, v34, v35, v36, v37, v38);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v61 + 8))(v59, v62);
    }
  }
  return result;
}

uint64_t outlined destroy of NeuralNetwork?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t outlined destroy of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MLImageClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v27 = v2;
  uint64_t v28 = a1;
  uint64_t v29 = v1;
  uint64_t v3 = *(void *)(type metadata accessor for MLImageClassifier(0) - 8);
  int64_t v4 = *(void *)(v3 + 64);
  v5 = alloca(v4);
  v6 = alloca(v4);
  uint64_t v7 = *(void *)(type metadata accessor for MLImageClassifier.DataSource(0) - 8);
  int64_t v8 = *(void *)(v7 + 64);
  v9 = alloca(v8);
  v10 = alloca(v8);
  v26 = v24;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v24, type metadata accessor for MLImageClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v27, (uint64_t)v24, type metadata accessor for MLImageClassifier);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = ~*(unsigned __int8 *)(v7 + 80) & (v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v3 + 80);
  int64_t v14 = ~v13 & (v12 + v13 + v8);
  uint64_t v15 = swift_allocObject(&unk_399FD8, v14 + v4, v13 | v11 | 7);
  outlined init with take of MLClassifierMetrics((uint64_t)v26, v15 + v12, type metadata accessor for MLImageClassifier.DataSource);
  outlined init with take of MLClassifierMetrics((uint64_t)v24, v15 + v14, type metadata accessor for MLImageClassifier);
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLImageClassifier.evaluation(on:), v15);
  uint64_t v17 = v16;
  swift_release();
  uint64_t v25 = v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(predicted: String, label: String)]);
  uint64_t v19 = lazy protocol witness table accessor for type [(predicted: String, label: String)] and conformance [A]();
  uint64_t v20 = v29;
  ClassificationMetrics.init<A>(_:)(&v25, &type metadata for String, v18, &protocol witness table for String, v19);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  uint64_t v22 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v20, v22, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  void v7[4];

  v7[0] = v1;
  uint64_t v2 = type metadata accessor for MLImageClassifier.DataSource(0);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  int64_t v4 = alloca(v3);
  v5 = alloca(v3);
  v7[0] = a1;
  swift_storeEnumTagMultiPayload(v7, v2, 2);
  swift_bridgeObjectRetain(a1);
  MLImageClassifier.evaluation(on:)((uint64_t)v7);
  return outlined destroy of MLImageClassifier.DataSource((uint64_t)v7);
}

uint64_t closure #1 in MLImageClassifier.evaluation(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  v3[3] = a2;
  v3[2] = a1;
  uint64_t v4 = *(void *)(type metadata accessor for MLImageClassifier(0) - 8);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v3[6] = v5;
  v3[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in MLImageClassifier.evaluation(on:), 0, 0);
}

uint64_t closure #1 in MLImageClassifier.evaluation(on:)()
{
  uint64_t v1 = static _ImageUtilities.getImageURLsAndLabels(from:)(*(void *)(v0 + 24));
  char v2 = v1;
  uint64_t v3 = specialized _NativeDictionary.mapValues<A>(_:)(v1);
  swift_bridgeObjectRelease(v2);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v14 = (uint64_t)v3;
  uint64_t v6 = *(void *)(v0 + 40);
  outlined init with copy of MLTrainingSessionParameters(*(void *)(v0 + 32), v4, type metadata accessor for MLImageClassifier);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~*(unsigned __int8 *)(v6 + 80) & (v7 + 16);
  uint64_t v9 = swift_allocObject(&unk_39A000, v8 + v5, v7 | 7);
  outlined init with take of MLClassifierMetrics(v4, v9 + v8, type metadata accessor for MLImageClassifier);
  v10 = specialized _NativeDictionary.mapValues<A>(_:)(v14, (uint64_t (*)(uint64_t))partial apply for implicit closure #2 in implicit closure #1 in closure #1 in MLImageClassifier.evaluation(on:));
  swift_release();
  swift_release();
  uint64_t v12 = *(void **)(v0 + 16);
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v13 = specialized Sequence.flatMap<A>(_:)((uint64_t)v10);
  swift_release();
  *uint64_t v12 = v13;
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14E5C4()
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.DataSource(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v2 + 80) & (v35 + 16);
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v39 = type metadata accessor for MLImageClassifier(0);
  uint64_t v5 = *(void *)(v39 - 8);
  uint64_t v36 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v6 = ~v36 & (v36 + v4);
  uint64_t v37 = *(void *)(v5 + 64);
  uint64_t v38 = v0;
  uint64_t v7 = (void *)(v0 + v3);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v1);
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease(*v7);
  }
  else if (EnumCaseMultiPayload <= 1)
  {
    uint64_t v9 = type metadata accessor for URL(0);
    (*(void (**)(void *, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  }
  v10 = (void *)(v0 + v6);

  if (*(void *)(v0 + v6 + 48)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v10 + 3);
  }
  uint64_t v11 = v39;
  if (v10[10]) {
    __swift_destroy_boxed_opaque_existential_1Tm(v10 + 7);
  }
  uint64_t v12 = (char *)v10 + *(int *)(v39 + 24);
  uint64_t v42 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v13 = swift_getEnumCaseMultiPayload(v12, v42);
  switch(v13)
  {
    case 2:
      swift_errorRelease(*(void *)v12);
      break;
    case 1:
      uint64_t v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v16 = &v12[*(int *)(v40 + 20)];
      uint64_t v17 = type metadata accessor for DataFrame(0);
      uint64_t v18 = v16;
      uint64_t v19 = *(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8);
      v19(v18, v17);
      uint64_t v20 = v17;
      uint64_t v11 = v39;
      v19(&v12[*(int *)(v40 + 24)], v20);
      break;
    case 0:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v12, v14) == 1) {
        uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(v15);
      (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v12, v21);
      break;
  }
  uint64_t v22 = (char *)v10 + *(int *)(v11 + 28);
  int v23 = swift_getEnumCaseMultiPayload(v22, v42);
  switch(v23)
  {
    case 2:
      swift_errorRelease(*(void *)v22);
      break;
    case 1:
      uint64_t v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v26 = &v22[*(int *)(v41 + 20)];
      uint64_t v27 = type metadata accessor for DataFrame(0);
      v43 = *(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8);
      uint64_t v28 = v26;
      uint64_t v11 = v39;
      v43(v28, v27);
      v43(&v22[*(int *)(v41 + 24)], v27);
      break;
    case 0:
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v22, v24) == 1) {
        uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(v25);
      (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v22, v29);
      break;
  }
  v30 = (char *)v10 + *(int *)(v11 + 32);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v32 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1) {
    v32 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
  (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v30, v33);
  return swift_deallocObject(v38, v37 + v6, v36 | v35 | 7);
}

uint64_t partial apply for closure #1 in MLImageClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLImageClassifier.DataSource(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 16);
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MLImageClassifier(0) - 8) + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_3A927C);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLImageClassifier.evaluation(on:)(a1, v1 + v4, v1 + ((v6 + v5) & ~v6));
}

uint64_t outlined destroy of MLImageClassifier.DataSource(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLImageClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t sub_14ED56()
{
  v32 = (int *)type metadata accessor for MLImageClassifier(0);
  uint64_t v1 = *((void *)v32 - 1);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 16);
  uint64_t v29 = *(void *)(v1 + 64);
  uint64_t v4 = (void *)(v3 + v0);

  uint64_t v28 = v0;
  if (*(void *)(v0 + v3 + 48)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v4 + 3);
  }
  if (v4[10]) {
    __swift_destroy_boxed_opaque_existential_1Tm(v4 + 7);
  }
  uint64_t v5 = (char *)v4 + v32[6];
  uint64_t v33 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v33);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v5);
      break;
    case 1:
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v35 = v2;
      uint64_t v9 = &v5[*(int *)(v30 + 20)];
      uint64_t v10 = type metadata accessor for DataFrame(0);
      uint64_t v31 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
      uint64_t v11 = v9;
      uint64_t v2 = v35;
      v31(v11, v10);
      v31(&v5[*(int *)(v30 + 24)], v10);
      break;
    case 0:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v5, v7) == 1) {
        uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(v8);
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v5, v12);
      break;
  }
  int v13 = (char *)v4 + v32[7];
  int v14 = swift_getEnumCaseMultiPayload(v13, v33);
  switch(v14)
  {
    case 2:
      swift_errorRelease(*(void *)v13);
      break;
    case 1:
      uint64_t v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v17 = &v13[*(int *)(v34 + 20)];
      uint64_t v36 = v2;
      uint64_t v18 = type metadata accessor for DataFrame(0);
      uint64_t v19 = v17;
      uint64_t v20 = *(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8);
      v20(v19, v18);
      uint64_t v21 = v18;
      uint64_t v2 = v36;
      v20(&v13[*(int *)(v34 + 24)], v21);
      break;
    case 0:
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v13, v15) == 1) {
        uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(v16);
      (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v13, v22);
      break;
  }
  int v23 = (char *)v4 + v32[8];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  uint64_t v25 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1) {
    uint64_t v25 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  }
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(v25);
  (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v23, v26);
  return swift_deallocObject(v28, v29 + v3, v2 | 7);
}

void *partial apply for implicit closure #2 in implicit closure #1 in closure #1 in MLImageClassifier.evaluation(on:)(uint64_t a1)
{
  return MLImageClassifier.performRequests(_:)(a1);
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v4 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = (void *)v4;
  uint64_t v7 = ~(-1 << v5);
  if (v5 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v31 = a1;
  unint64_t v8 = *(void *)(a1 + 64) & v7;
  int64_t v30 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = 0;
  uint64_t v29 = (void *)v4;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      uint64_t v28 = (v8 - 1) & v8;
      int64_t v27 = v9;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_17;
    }
    BOOL v12 = __OFADD__(1, v9);
    int64_t v13 = v9 + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v30) {
      return v6;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13 + 64);
    if (!v14) {
      break;
    }
LABEL_16:
    _BitScanForward64(&v16, v14);
    uint64_t v28 = v14 & (v14 - 1);
    int64_t v27 = v13;
    unint64_t v11 = v16 + (v13 << 6);
LABEL_17:
    uint64_t v17 = *(void *)(v31 + 48);
    uint64_t v23 = *(void *)(v17 + 16 * v11);
    uint64_t v18 = *(void *)(*(void *)(v31 + 56) + 8 * v11);
    uint64_t v26 = *(void *)(v17 + 16 * v11 + 8);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v18);
    uint64_t v24 = a2(v18);
    swift_bridgeObjectRelease(v18);
    if (v2)
    {
      swift_bridgeObjectRelease(v26);
      uint64_t v6 = v29;
      swift_release();
      return v6;
    }
    uint64_t v6 = v29;
    v29[(v11 >> 6) + 8] |= 1 << v11;
    uint64_t v19 = v29[6];
    *(void *)(v19 + 16 * v11) = v23;
    *(void *)(v19 + 16 * v11 + 8) = v26;
    *(void *)(v29[7] + 8 * v11) = v24;
    uint64_t v20 = v29[2];
    BOOL v12 = __OFADD__(1, v20);
    uint64_t v21 = v20 + 1;
    if (v12) {
      BUG();
    }
    v29[2] = v21;
    int64_t v9 = v27;
    unint64_t v8 = v28;
  }
  int64_t v15 = v13 + 1;
  if (v13 + 1 >= v30) {
    return v6;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v13 + 72);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v30) {
    return v6;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v13 + 80);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 3;
  if (v13 + 3 >= v30) {
    return v6;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v13 + 88);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v15;
    goto LABEL_16;
  }
  v13 += 3;
  while (1)
  {
    BOOL v12 = __OFADD__(1, v13++);
    if (v12) {
      BUG();
    }
    if (v13 >= v30) {
      return v6;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13 + 64);
    if (v14) {
      goto LABEL_16;
    }
  }
}

void *initializeBufferWithCopyOfBuffer for MLLinearRegressor.Model(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = a2[1];
    v3[1] = v6;
    uint64_t v7 = a2[2];
    swift_bridgeObjectRetain(v6);
    if (v7)
    {
      v3[2] = v7;
      v3[3] = a2[3];
      uint64_t v8 = a2[4];
      v3[4] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v3[4] = a2[4];
      *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
    }
    uint64_t v10 = *(int *)(a3 + 24);
    unint64_t v11 = (char *)v3 + v10;
    BOOL v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for BaseLinearRegressorModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return v3;
}

uint64_t destroy for MLLinearRegressor.Model(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v3 = a1[2];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[4]);
  }
  int v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for BaseLinearRegressorModel(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
}

void *initializeWithCopy for MLLinearRegressor.Model(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  a1[1] = v5;
  uint64_t v6 = a2[2];
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = a2[4];
    a1[4] = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    a1[4] = a2[4];
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for BaseLinearRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

void *assignWithCopy for MLLinearRegressor.Model(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a2 + 2;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (v8)
  {
    if (v9)
    {
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v8);
      a1[3] = a2[3];
      uint64_t v10 = a2[4];
      uint64_t v11 = a1[4];
      a1[4] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      outlined destroy of FeatureVectorizer<Double>.Transformer((uint64_t)(a1 + 2));
      _OWORD *v6 = *v7;
      a1[4] = a2[4];
    }
  }
  else if (v9)
  {
    a1[2] = v9;
    a1[3] = a2[3];
    uint64_t v12 = a2[4];
    a1[4] = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    a1[4] = a2[4];
    _OWORD *v6 = *v7;
  }
  uint64_t v13 = *(int *)(a3 + 24);
  unint64_t v14 = (char *)a1 + v13;
  int64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for BaseLinearRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t initializeWithTake for MLLinearRegressor.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v3 = *(int *)(a3 + 24);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = v3 + a2;
  uint64_t v6 = type metadata accessor for BaseLinearRegressorModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v4, v5, v6);
  return a1;
}

void *assignWithTake for MLLinearRegressor.Model(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a2 + 2;
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = a2[2];
    if (v9)
    {
      a1[2] = v9;
      swift_bridgeObjectRelease(v8);
      a1[3] = a2[3];
      uint64_t v10 = a1[4];
      a1[4] = a2[4];
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      outlined destroy of FeatureVectorizer<Double>.Transformer((uint64_t)(a1 + 2));
      _OWORD *v6 = *v7;
      a1[4] = a2[4];
    }
  }
  else
  {
    a1[4] = a2[4];
    _OWORD *v6 = *v7;
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for BaseLinearRegressorModel(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14F638);
}

uint64_t sub_14F638(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*(void *)(a1 + 8) & 0xFFFFFFFF00000001) == 0) {
      return (*(void *)(a1 + 8) >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for BaseLinearRegressorModel(0);
    return __swift_getEnumTagSinglePayload(*(int *)(a3 + 24) + a1, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14F6C0);
}

uint64_t sub_14F6C0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for BaseLinearRegressorModel(0);
    return __swift_storeEnumTagSinglePayload(*(int *)(a4 + 24) + a1, a2, a2, v5);
  }
  return result;
}

uint64_t type metadata accessor for MLLinearRegressor.Model(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLLinearRegressor.Model;
  if (!type metadata singleton initialization cache for MLLinearRegressor.Model) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLLinearRegressor.Model);
  }
  return result;
}

uint64_t type metadata completion function for MLLinearRegressor.Model(uint64_t a1)
{
  v3[0] = &unk_34C298;
  v3[1] = &unk_34C2B0;
  uint64_t result = type metadata accessor for BaseLinearRegressorModel(319);
  if (v2 <= 0x3F)
  {
    v3[2] = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t MLLinearRegressor.Model.applied(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a3;
  uint64_t v32 = a2;
  uint64_t v27 = v3;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v31 = *(void *)(v26 - 8);
  int64_t v6 = *(void *)(v31 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v28 = &v25;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  uint64_t v29 = *(void *)(v30 - 8);
  int64_t v9 = *(void *)(v29 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v12 = v5[2];
  if (!v12)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, "ressorModel.swift" + 0x8000000000000000, "CreateML/MLLinearRegressor.Model.swift", 38, 2, 25, 0);
    BUG();
  }
  uint64_t result = specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(a1, 1u, v12, v5[3], v5[4]);
  if (!v4)
  {
    uint64_t v33 = 0;
    type metadata accessor for MLLinearRegressor.Model(0);
    uint64_t v34 = &v25;
    uint64_t v14 = BaseLinearRegressorModel.applied(features:eventHandler:)(&v25, v32, v36);
    uint64_t v36 = *v5;
    uint64_t v15 = v5[1];
    uint64_t v35 = v14;
    swift_bridgeObjectRetain(v15);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<Double>);
    uint64_t v17 = lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>(&lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<Double>, (uint64_t)&protocol conformance descriptor for ContiguousArray<A>);
    uint64_t v18 = v28;
    Column.init<A>(name:contents:)(v36, v15, &v35, &type metadata for Double, v16, v17);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
    uint64_t v20 = type metadata accessor for AnyColumn(0);
    uint64_t v21 = swift_allocObject(v19, ((*(unsigned __int8 *)(*(void *)(v20 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v20 - 8) + 80))+ *(void *)(*(void *)(v20 - 8) + 72), *(unsigned __int8 *)(*(void *)(v20 - 8) + 80) | 7);
    *(void *)(v21 + 16) = 1;
    *(void *)(v21 + 24) = 2;
    uint64_t v22 = v26;
    Column.eraseToAnyColumn()(v26);
    uint64_t v35 = v21;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
    uint64_t v24 = lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn], (uint64_t)&protocol conformance descriptor for [A]);
    DataFrame.init<A>(columns:)(&v35, v23, v24);
    (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v18, v22);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v29 + 8))(v34, v30);
  }
  return result;
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance MLLinearRegressor.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MLLinearRegressor.Model.applied(to:eventHandler:)(a2, a3, a4);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t base witness table accessor for Transformer in MLLinearRegressor.Model()
{
  return lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model();
}

uint64_t lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model()
{
  uint64_t result = lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model)
  {
    uint64_t v1 = type metadata accessor for MLLinearRegressor.Model(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLLinearRegressor.Model, v1);
    lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLActionClassifier.PersistentParameters(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    int64_t v6 = a3;
    uint64_t v7 = type metadata accessor for MLActionClassifier.DataSource(0);
    v96 = v6;
    uint64_t v103 = v7;
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        uint64_t v8 = type metadata accessor for URL(0);
        int64_t v9 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
        v9(a1, a2, v8);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v9((uint64_t *)((char *)a1 + v10[12]), a2 + v10[12], v8);
        uint64_t v11 = v10[16];
        *(uint64_t *)((char *)a1 + v11) = *(void *)(a2 + v11);
        uint64_t v12 = *(void *)(a2 + v11 + 8);
        *(uint64_t *)((char *)v4 + v11 + 8) = v12;
        uint64_t v13 = v10[20];
        *(uint64_t *)((char *)v4 + v13) = *(void *)(a2 + v13);
        uint64_t v14 = *(void *)(a2 + v13 + 8);
        *(uint64_t *)((char *)v4 + v13 + 8) = v14;
        uint64_t v15 = v10[24];
        *(uint64_t *)((char *)v4 + v15) = *(void *)(a2 + v15);
        uint64_t v16 = *(void *)(a2 + v15 + 8);
        *(uint64_t *)((char *)v4 + v15 + 8) = v16;
        uint64_t v17 = v10[28];
        *(uint64_t *)((char *)v4 + v17) = *(void *)(a2 + v17);
        uint64_t v18 = *(void *)(a2 + v17 + 8);
        *(uint64_t *)((char *)v4 + v17 + 8) = v18;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v16);
        LOBYTE(v12) = v18;
        int64_t v6 = v96;
        swift_bridgeObjectRetain(v12);
        a1 = v4;
        uint64_t v19 = v103;
        uint64_t v20 = 0;
        goto LABEL_13;
      case 1u:
        uint64_t v22 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        uint64_t v92 = 1;
        goto LABEL_7;
      case 2u:
        uint64_t v23 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        uint64_t v92 = 2;
LABEL_7:
        uint64_t v20 = v92;
        uint64_t v19 = v7;
        goto LABEL_13;
      case 3u:
        uint64_t v24 = *(void *)a2;
        uint64_t v25 = v6;
        char v26 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v26);
        *a1 = v24;
        *((unsigned char *)a1 + 8) = v26;
        a1[2] = *(void *)(a2 + 16);
        uint64_t v27 = *(void *)(a2 + 24);
        v4[3] = v27;
        v4[4] = *(void *)(a2 + 32);
        uint64_t v28 = *(void *)(a2 + 40);
        v4[5] = v28;
        v4[6] = *(void *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 56);
        v4[7] = v29;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        LOBYTE(v27) = v29;
        int64_t v6 = v25;
        swift_bridgeObjectRetain(v27);
        uint64_t v93 = 3;
        goto LABEL_12;
      case 4u:
        uint64_t v30 = *(void *)a2;
        char v31 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v31);
        *a1 = v30;
        *((unsigned char *)a1 + 8) = v31;
        a1[2] = *(void *)(a2 + 16);
        uint64_t v32 = *(void *)(a2 + 24);
        v4[3] = v32;
        v4[4] = *(void *)(a2 + 32);
        uint64_t v33 = *(void *)(a2 + 40);
        v4[5] = v33;
        v4[6] = *(void *)(a2 + 48);
        uint64_t v34 = *(void *)(a2 + 56);
        v4[7] = v34;
        v4[8] = *(void *)(a2 + 64);
        uint64_t v35 = *(void *)(a2 + 72);
        v4[9] = v35;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        LOBYTE(v32) = v34;
        int64_t v6 = v96;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v35);
        uint64_t v93 = 4;
        goto LABEL_12;
      case 5u:
        uint64_t v36 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
        uint64_t v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v38 = v37[12];
        *(uint64_t *)((char *)a1 + v38) = *(void *)(a2 + v38);
        uint64_t v39 = *(void *)(a2 + v38 + 8);
        *(uint64_t *)((char *)v4 + v38 + 8) = v39;
        uint64_t v40 = v37[16];
        *(uint64_t *)((char *)v4 + v40) = *(void *)(a2 + v40);
        uint64_t v41 = *(void *)(a2 + v40 + 8);
        *(uint64_t *)((char *)v4 + v40 + 8) = v41;
        uint64_t v42 = v37[20];
        *(uint64_t *)((char *)v4 + v42) = *(void *)(a2 + v42);
        v43 = v6;
        uint64_t v44 = *(void *)(a2 + v42 + 8);
        *(uint64_t *)((char *)v4 + v42 + 8) = v44;
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v41);
        LOBYTE(v39) = v44;
        int64_t v6 = v43;
        swift_bridgeObjectRetain(v39);
        uint64_t v93 = 5;
        goto LABEL_12;
      case 6u:
        uint64_t v45 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
        v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v47 = v46[12];
        *(uint64_t *)((char *)a1 + v47) = *(void *)(a2 + v47);
        uint64_t v48 = *(void *)(a2 + v47 + 8);
        *(uint64_t *)((char *)v4 + v47 + 8) = v48;
        uint64_t v49 = v46[16];
        *(uint64_t *)((char *)v4 + v49) = *(void *)(a2 + v49);
        uint64_t v50 = *(void *)(a2 + v49 + 8);
        *(uint64_t *)((char *)v4 + v49 + 8) = v50;
        uint64_t v51 = v46[20];
        *(uint64_t *)((char *)v4 + v51) = *(void *)(a2 + v51);
        uint64_t v52 = *(void *)(a2 + v51 + 8);
        *(uint64_t *)((char *)v4 + v51 + 8) = v52;
        uint64_t v53 = v46[24];
        *(uint64_t *)((char *)v4 + v53) = *(void *)(a2 + v53);
        uint64_t v54 = *(void *)(a2 + v53 + 8);
        *(uint64_t *)((char *)v4 + v53 + 8) = v54;
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v50);
        LOBYTE(v48) = v52;
        int64_t v6 = v96;
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v54);
        uint64_t v93 = 6;
LABEL_12:
        uint64_t v20 = v93;
        a1 = v4;
        uint64_t v19 = v103;
LABEL_13:
        swift_storeEnumTagMultiPayload(a1, v19, v20);
        uint64_t v55 = v6[5];
        v56 = (char *)v4 + v55;
        uint64_t v57 = a2 + v55;
        uint64_t v58 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
        if (swift_getEnumCaseMultiPayload(v57, v58) != 1) {
          JUMPOUT(0x14FF97);
        }
        uint64_t v97 = v58;
        switch(swift_getEnumCaseMultiPayload(v57, v103))
        {
          case 0u:
            uint64_t v98 = type metadata accessor for URL(0);
            v94 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v98 - 8) + 16);
            v94(v56, v57, v98);
            v59 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
            v94(&v56[v59[12]], v57 + v59[12], v98);
            uint64_t v60 = v59[16];
            *(void *)&v56[v60] = *(void *)(v57 + v60);
            uint64_t v61 = *(void *)(v57 + v60 + 8);
            *(void *)&v56[v60 + 8] = v61;
            uint64_t v62 = v59[20];
            *(void *)&v56[v62] = *(void *)(v57 + v62);
            uint64_t v99 = *(void *)(v57 + v62 + 8);
            *(void *)&v56[v62 + 8] = v99;
            uint64_t v63 = v59[24];
            *(void *)&v56[v63] = *(void *)(v57 + v63);
            uint64_t v95 = *(void *)(v57 + v63 + 8);
            *(void *)&v56[v63 + 8] = v95;
            uint64_t v64 = v59[28];
            *(void *)&v56[v64] = *(void *)(v57 + v64);
            uint64_t v65 = *(void *)(v57 + v64 + 8);
            *(void *)&v56[v64 + 8] = v65;
            swift_bridgeObjectRetain(v61);
            swift_bridgeObjectRetain(v99);
            swift_bridgeObjectRetain(v95);
            swift_bridgeObjectRetain(v65);
            JUMPOUT(0x14FF92);
          case 1u:
            uint64_t v66 = type metadata accessor for URL(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v56, v57, v66);
            swift_storeEnumTagMultiPayload(v56, v103, 1);
            break;
          case 2u:
            uint64_t v67 = type metadata accessor for URL(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v56, v57, v67);
            swift_storeEnumTagMultiPayload(v56, v103, 2);
            break;
          case 3u:
            uint64_t v100 = *(void *)v57;
            char v68 = *(unsigned char *)(v57 + 8);
            outlined copy of Result<_DataTable, Error>(*(void *)v57, v68);
            *(void *)v56 = v100;
            v56[8] = v68;
            *((void *)v56 + 2) = *(void *)(v57 + 16);
            uint64_t v69 = *(void *)(v57 + 24);
            *((void *)v56 + 3) = v69;
            *((void *)v56 + 4) = *(void *)(v57 + 32);
            uint64_t v70 = *(void *)(v57 + 40);
            *((void *)v56 + 5) = v70;
            *((void *)v56 + 6) = *(void *)(v57 + 48);
            uint64_t v71 = *(void *)(v57 + 56);
            *((void *)v56 + 7) = v71;
            swift_bridgeObjectRetain(v69);
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v71);
            swift_storeEnumTagMultiPayload(v56, v103, 3);
            break;
          case 4u:
            uint64_t v101 = *(void *)v57;
            char v72 = *(unsigned char *)(v57 + 8);
            outlined copy of Result<_DataTable, Error>(*(void *)v57, v72);
            *(void *)v56 = v101;
            v56[8] = v72;
            *((void *)v56 + 2) = *(void *)(v57 + 16);
            uint64_t v73 = *(void *)(v57 + 24);
            *((void *)v56 + 3) = v73;
            *((void *)v56 + 4) = *(void *)(v57 + 32);
            *((void *)v56 + 5) = *(void *)(v57 + 40);
            *((void *)v56 + 6) = *(void *)(v57 + 48);
            *((void *)v56 + 7) = *(void *)(v57 + 56);
            *((void *)v56 + 8) = *(void *)(v57 + 64);
            *((void *)v56 + 9) = *(void *)(v57 + 72);
            swift_bridgeObjectRetain(v73);
            JUMPOUT(0x1500D3);
          case 5u:
            uint64_t v74 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16))(v56, v57, v74);
            v75 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
            uint64_t v76 = v75[12];
            *(void *)&v56[v76] = *(void *)(v57 + v76);
            uint64_t v77 = *(void *)(v57 + v76 + 8);
            *(void *)&v56[v76 + 8] = v77;
            uint64_t v78 = v75[16];
            *(void *)&v56[v78] = *(void *)(v57 + v78);
            uint64_t v79 = *(void *)(v57 + v78 + 8);
            *(void *)&v56[v78 + 8] = v79;
            uint64_t v80 = v75[20];
            *(void *)&v56[v80] = *(void *)(v57 + v80);
            uint64_t v81 = *(void *)(v57 + v80 + 8);
            *(void *)&v56[v80 + 8] = v81;
            swift_bridgeObjectRetain(v77);
            swift_bridgeObjectRetain(v79);
            swift_bridgeObjectRetain(v81);
            swift_storeEnumTagMultiPayload(v56, v103, 5);
            break;
          case 6u:
            uint64_t v82 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16))(v56, v57, v82);
            v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
            uint64_t v84 = v83[12];
            *(void *)&v56[v84] = *(void *)(v57 + v84);
            uint64_t v85 = *(void *)(v57 + v84 + 8);
            *(void *)&v56[v84 + 8] = v85;
            uint64_t v86 = v83[16];
            *(void *)&v56[v86] = *(void *)(v57 + v86);
            uint64_t v87 = *(void *)(v57 + v86 + 8);
            *(void *)&v56[v86 + 8] = v87;
            uint64_t v88 = v83[20];
            *(void *)&v56[v88] = *(void *)(v57 + v88);
            uint64_t v102 = *(void *)(v57 + v88 + 8);
            *(void *)&v56[v88 + 8] = v102;
            uint64_t v89 = v83[24];
            *(void *)&v56[v89] = *(void *)(v57 + v89);
            uint64_t v90 = *(void *)(v57 + v89 + 8);
            *(void *)&v56[v89 + 8] = v90;
            swift_bridgeObjectRetain(v85);
            swift_bridgeObjectRetain(v87);
            swift_bridgeObjectRetain(v102);
            swift_bridgeObjectRetain(v90);
            swift_storeEnumTagMultiPayload(v56, v103, 6);
            break;
          case 7u:
            JUMPOUT(0x15029CLL);
        }
        swift_storeEnumTagMultiPayload(v56, v97, 1);
        *(uint64_t *)((char *)v4 + v96[6]) = *(void *)(a2 + v96[6]);
        *(uint64_t *)((char *)v4 + v96[7]) = *(void *)(a2 + v96[7]);
        *(uint64_t *)((char *)v4 + v96[8]) = *(void *)(a2 + v96[8]);
        *(uint64_t *)((char *)v4 + v96[9]) = *(void *)(a2 + v96[9]);
        *(uint64_t *)((char *)v4 + v96[10]) = *(void *)(a2 + v96[10]);
        break;
    }
  }
  return v4;
}

uint64_t destroy for MLActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = type metadata accessor for MLActionClassifier.DataSource(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL(0);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v7(a1, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v7(a1 + v8[12], v6);
      uint64_t v2 = a2;
      swift_bridgeObjectRelease(*(void *)(a1 + v8[16] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v8[20] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v8[24] + 8));
      uint64_t v9 = v8[28];
      goto LABEL_8;
    case 1u:
    case 2u:
      uint64_t v5 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      swift_bridgeObjectRelease(*(void *)(a1 + 40));
      uint64_t v10 = *(void *)(a1 + 56);
      goto LABEL_9;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      swift_bridgeObjectRelease(*(void *)(a1 + 40));
      swift_bridgeObjectRelease(*(void *)(a1 + 56));
      uint64_t v10 = *(void *)(a1 + 72);
      goto LABEL_9;
    case 5u:
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(void *)(a1 + v12[12] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v12[16] + 8));
      uint64_t v9 = v12[20];
      goto LABEL_8;
    case 6u:
      uint64_t v13 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease(*(void *)(a1 + v14[12] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v14[16] + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + v14[20] + 8));
      uint64_t v9 = v14[24];
LABEL_8:
      uint64_t v10 = *(void *)(a1 + v9 + 8);
LABEL_9:
      swift_bridgeObjectRelease(v10);
      break;
    default:
      break;
  }
  uint64_t v15 = *(int *)(v2 + 20) + a1;
  uint64_t v16 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload(v15, v16);
  if (result == 1)
  {
    uint64_t result = swift_getEnumCaseMultiPayload(v15, v4);
    switch((int)result)
    {
      case 0:
        uint64_t v19 = type metadata accessor for URL(0);
        uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
        v20(v15, v19);
        uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v20(v15 + v21[12], v19);
        swift_bridgeObjectRelease(*(void *)(v15 + v21[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v21[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v21[24] + 8));
        uint64_t v22 = v21[28];
        goto LABEL_19;
      case 1:
      case 2:
        uint64_t v18 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v15, v18);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)v15, *(_DWORD *)(v15 + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + 24));
        swift_bridgeObjectRelease(*(void *)(v15 + 40));
        return swift_bridgeObjectRelease(*(void *)(v15 + 56));
      case 4:
        outlined consume of Result<_DataTable, Error>(*(void *)v15, *(_DWORD *)(v15 + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + 24));
        swift_bridgeObjectRelease(*(void *)(v15 + 40));
        swift_bridgeObjectRelease(*(void *)(v15 + 56));
        return swift_bridgeObjectRelease(*(void *)(v15 + 72));
      case 5:
        uint64_t v23 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v15, v23);
        uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v15 + v24[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v24[16] + 8));
        uint64_t v22 = v24[20];
        goto LABEL_19;
      case 6:
        uint64_t v25 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v15, v25);
        char v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v15 + v26[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v26[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v15 + v26[20] + 8));
        uint64_t v22 = v26[24];
LABEL_19:
        uint64_t result = swift_bridgeObjectRelease(*(void *)(v15 + v22 + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t initializeWithCopy for MLActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for MLActionClassifier.DataSource(0);
  uint64_t v97 = v5;
  switch(swift_getEnumCaseMultiPayload(a2, v5))
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL(0);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v7(a1 + v8[12], a2 + v8[12], v6);
      uint64_t v9 = v8[16];
      *(void *)(a1 + v9) = *(void *)(a2 + v9);
      uint64_t v10 = *(void *)(a2 + v9 + 8);
      *(void *)(a1 + v9 + 8) = v10;
      uint64_t v11 = v8[20];
      *(void *)(a1 + v11) = *(void *)(a2 + v11);
      uint64_t v12 = *(void *)(a2 + v11 + 8);
      *(void *)(a1 + v11 + 8) = v12;
      uint64_t v13 = v8[24];
      *(void *)(a1 + v13) = *(void *)(a2 + v13);
      uint64_t v14 = *(void *)(a2 + v13 + 8);
      *(void *)(a1 + v13 + 8) = v14;
      uint64_t v15 = v8[28];
      *(void *)(a1 + v15) = *(void *)(a2 + v15);
      uint64_t v16 = *(void *)(a2 + v15 + 8);
      *(void *)(a1 + v15 + 8) = v16;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v16);
      uint64_t v17 = a1;
      uint64_t v18 = v97;
      uint64_t v19 = 0;
      break;
    case 1u:
      uint64_t v20 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
      uint64_t v90 = 1;
      goto LABEL_8;
    case 2u:
      uint64_t v21 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
      uint64_t v90 = 2;
      goto LABEL_8;
    case 3u:
      uint64_t v22 = *(void *)a2;
      char v23 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v23);
      *(void *)a1 = v22;
      *(unsigned char *)(a1 + 8) = v23;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v25 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v25;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v26 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      uint64_t v90 = 3;
      goto LABEL_8;
    case 4u:
      uint64_t v27 = *(void *)a2;
      char v28 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v28);
      *(void *)a1 = v27;
      *(unsigned char *)(a1 + 8) = v28;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v29 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v29;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v30 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v30;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v31 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v31;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      uint64_t v32 = *(void *)(a2 + 72);
      *(void *)(a1 + 72) = v32;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      uint64_t v91 = 4;
      goto LABEL_10;
    case 5u:
      uint64_t v33 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
      uint64_t v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v35 = v34[12];
      *(void *)(a1 + v35) = *(void *)(a2 + v35);
      uint64_t v36 = *(void *)(a2 + v35 + 8);
      *(void *)(a1 + v35 + 8) = v36;
      uint64_t v37 = v34[16];
      *(void *)(a1 + v37) = *(void *)(a2 + v37);
      uint64_t v38 = *(void *)(a2 + v37 + 8);
      *(void *)(a1 + v37 + 8) = v38;
      uint64_t v39 = v34[20];
      *(void *)(a1 + v39) = *(void *)(a2 + v39);
      uint64_t v40 = *(void *)(a2 + v39 + 8);
      *(void *)(a1 + v39 + 8) = v40;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v40);
      uint64_t v90 = 5;
LABEL_8:
      uint64_t v19 = v90;
      uint64_t v17 = a1;
      uint64_t v18 = v5;
      break;
    case 6u:
      uint64_t v41 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
      uint64_t v42 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v43 = v42[12];
      *(void *)(a1 + v43) = *(void *)(a2 + v43);
      uint64_t v44 = *(void *)(a2 + v43 + 8);
      *(void *)(a1 + v43 + 8) = v44;
      uint64_t v45 = v42[16];
      *(void *)(a1 + v45) = *(void *)(a2 + v45);
      uint64_t v46 = *(void *)(a2 + v45 + 8);
      *(void *)(a1 + v45 + 8) = v46;
      uint64_t v47 = v42[20];
      *(void *)(a1 + v47) = *(void *)(a2 + v47);
      uint64_t v48 = *(void *)(a2 + v47 + 8);
      *(void *)(a1 + v47 + 8) = v48;
      uint64_t v49 = v42[24];
      *(void *)(a1 + v49) = *(void *)(a2 + v49);
      uint64_t v50 = *(void *)(a2 + v49 + 8);
      *(void *)(a1 + v49 + 8) = v50;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v50);
      uint64_t v91 = 6;
LABEL_10:
      uint64_t v19 = v91;
      uint64_t v17 = a1;
      uint64_t v18 = v97;
      break;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  uint64_t v51 = a3[5];
  uint64_t v52 = (char *)(a1 + v51);
  uint64_t v53 = a2 + v51;
  uint64_t v54 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v53, v54) == 1)
  {
    uint64_t v93 = v54;
    switch(swift_getEnumCaseMultiPayload(v53, v97))
    {
      case 0u:
        uint64_t v95 = type metadata accessor for URL(0);
        uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16);
        v98(v52, v53, v95);
        uint64_t v55 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v98(&v52[v55[12]], v53 + v55[12], v95);
        uint64_t v56 = v55[16];
        *(void *)&v52[v56] = *(void *)(v53 + v56);
        uint64_t v57 = *(void *)(v53 + v56 + 8);
        *(void *)&v52[v56 + 8] = v57;
        uint64_t v58 = v55[20];
        *(void *)&v52[v58] = *(void *)(v53 + v58);
        uint64_t v99 = *(void *)(v53 + v58 + 8);
        *(void *)&v52[v58 + 8] = v99;
        uint64_t v59 = v55[24];
        *(void *)&v52[v59] = *(void *)(v53 + v59);
        uint64_t v96 = *(void *)(v53 + v59 + 8);
        *(void *)&v52[v59 + 8] = v96;
        uint64_t v60 = v55[28];
        *(void *)&v52[v60] = *(void *)(v53 + v60);
        uint64_t v61 = *(void *)(v53 + v60 + 8);
        *(void *)&v52[v60 + 8] = v61;
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRetain(v96);
        swift_bridgeObjectRetain(v61);
        JUMPOUT(0x150B26);
      case 1u:
        uint64_t v62 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v52, v53, v62);
        uint64_t v63 = 1;
        uint64_t v64 = v52;
        uint64_t v65 = v97;
        goto LABEL_25;
      case 2u:
        type metadata accessor for URL(0);
        JUMPOUT(0x150B65);
      case 3u:
        uint64_t v66 = *(void *)v53;
        char v100 = *(unsigned char *)(v53 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)v53, v100);
        *(void *)uint64_t v52 = v66;
        v52[8] = v100;
        *((void *)v52 + 2) = *(void *)(v53 + 16);
        uint64_t v67 = *(void *)(v53 + 24);
        *((void *)v52 + 3) = v67;
        *((void *)v52 + 4) = *(void *)(v53 + 32);
        uint64_t v68 = *(void *)(v53 + 40);
        *((void *)v52 + 5) = v68;
        *((void *)v52 + 6) = *(void *)(v53 + 48);
        uint64_t v69 = *(void *)(v53 + 56);
        *((void *)v52 + 7) = v69;
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRetain(v69);
        uint64_t v92 = 3;
        goto LABEL_24;
      case 4u:
        uint64_t v70 = *(void *)v53;
        char v101 = *(unsigned char *)(v53 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)v53, v101);
        *(void *)uint64_t v52 = v70;
        v52[8] = v101;
        *((void *)v52 + 2) = *(void *)(v53 + 16);
        uint64_t v71 = *(void *)(v53 + 24);
        *((void *)v52 + 3) = v71;
        *((void *)v52 + 4) = *(void *)(v53 + 32);
        *((void *)v52 + 5) = *(void *)(v53 + 40);
        *((void *)v52 + 6) = *(void *)(v53 + 48);
        *((void *)v52 + 7) = *(void *)(v53 + 56);
        *((void *)v52 + 8) = *(void *)(v53 + 64);
        *((void *)v52 + 9) = *(void *)(v53 + 72);
        swift_bridgeObjectRetain(v71);
        JUMPOUT(0x150C69);
      case 5u:
        uint64_t v72 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v52, v53, v72);
        uint64_t v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v74 = v73[12];
        *(void *)&v52[v74] = *(void *)(v53 + v74);
        uint64_t v75 = *(void *)(v53 + v74 + 8);
        *(void *)&v52[v74 + 8] = v75;
        uint64_t v76 = v73[16];
        *(void *)&v52[v76] = *(void *)(v53 + v76);
        uint64_t v77 = *(void *)(v53 + v76 + 8);
        *(void *)&v52[v76 + 8] = v77;
        uint64_t v78 = v73[20];
        *(void *)&v52[v78] = *(void *)(v53 + v78);
        uint64_t v79 = *(void *)(v53 + v78 + 8);
        *(void *)&v52[v78 + 8] = v79;
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v79);
        uint64_t v92 = 5;
        goto LABEL_24;
      case 6u:
        uint64_t v80 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(v52, v53, v80);
        uint64_t v81 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v82 = v81[12];
        *(void *)&v52[v82] = *(void *)(v53 + v82);
        uint64_t v83 = *(void *)(v53 + v82 + 8);
        *(void *)&v52[v82 + 8] = v83;
        uint64_t v84 = v81[16];
        *(void *)&v52[v84] = *(void *)(v53 + v84);
        uint64_t v102 = *(void *)(v53 + v84 + 8);
        *(void *)&v52[v84 + 8] = v102;
        uint64_t v85 = v81[20];
        *(void *)&v52[v85] = *(void *)(v53 + v85);
        uint64_t v86 = *(void *)(v53 + v85 + 8);
        *(void *)&v52[v85 + 8] = v86;
        uint64_t v87 = v81[24];
        *(void *)&v52[v87] = *(void *)(v53 + v87);
        uint64_t v88 = *(void *)(v53 + v87 + 8);
        *(void *)&v52[v87 + 8] = v88;
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRetain(v102);
        swift_bridgeObjectRetain(v86);
        swift_bridgeObjectRetain(v88);
        uint64_t v92 = 6;
LABEL_24:
        uint64_t v63 = v92;
        uint64_t v64 = v52;
        uint64_t v65 = v97;
LABEL_25:
        swift_storeEnumTagMultiPayload(v64, v65, v63);
        swift_storeEnumTagMultiPayload(v52, v93, 1);
        break;
    }
  }
  else
  {
    memcpy(v52, (const void *)v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

void *assignWithCopy for MLActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = (void *)a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLActionClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLActionClassifier.DataSource(0);
    uint64_t v84 = v6;
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        v90(a1, a2, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v90(a1 + v8[12], a2 + v8[12], v7);
        uint64_t v9 = v8[16];
        *(void *)(a1 + v9) = *(void *)(a2 + v9);
        uint64_t v10 = *(void *)(a2 + v9 + 8);
        *(void *)((char *)v5 + v9 + 8) = v10;
        uint64_t v11 = v8[20];
        *(void *)((char *)v5 + v11) = *(void *)(a2 + v11);
        uint64_t v91 = *(void *)(a2 + v11 + 8);
        *(void *)((char *)v5 + v11 + 8) = v91;
        uint64_t v12 = v8[24];
        *(void *)((char *)v5 + v12) = *(void *)(a2 + v12);
        uint64_t v13 = *(void *)(a2 + v12 + 8);
        *(void *)((char *)v5 + v12 + 8) = v13;
        uint64_t v14 = v8[28];
        *(void *)((char *)v5 + v14) = *(void *)(a2 + v14);
        uint64_t v15 = *(void *)(a2 + v14 + 8);
        *(void *)((char *)v5 + v14 + 8) = v15;
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v91);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v15);
        a1 = (uint64_t)v5;
        uint64_t v16 = v84;
        uint64_t v17 = 0;
        goto LABEL_12;
      case 1u:
        uint64_t v18 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v78 = 1;
        goto LABEL_6;
      case 2u:
        uint64_t v19 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v78 = 2;
LABEL_6:
        uint64_t v17 = v78;
        uint64_t v16 = v6;
        goto LABEL_12;
      case 3u:
        uint64_t v20 = *(void *)a2;
        char v21 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v21);
        *(void *)a1 = v20;
        *(unsigned char *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        v5[3] = v22;
        v5[4] = *(void *)(a2 + 32);
        uint64_t v23 = *(void *)(a2 + 40);
        v5[5] = v23;
        v5[6] = *(void *)(a2 + 48);
        uint64_t v24 = *(void *)(a2 + 56);
        v5[7] = v24;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        uint64_t v79 = 3;
        goto LABEL_11;
      case 4u:
        uint64_t v25 = *(void *)a2;
        char v26 = *(unsigned char *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(void *)a2, v26);
        *(void *)a1 = v25;
        *(unsigned char *)(a1 + 8) = v26;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v27 = *(void *)(a2 + 24);
        v5[3] = v27;
        v5[4] = *(void *)(a2 + 32);
        uint64_t v28 = *(void *)(a2 + 40);
        v5[5] = v28;
        v5[6] = *(void *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 56);
        v5[7] = v29;
        v5[8] = *(void *)(a2 + 64);
        uint64_t v92 = *(void *)(a2 + 72);
        v5[9] = v92;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v92);
        uint64_t v79 = 4;
        goto LABEL_11;
      case 5u:
        uint64_t v30 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v32 = v31[12];
        *(void *)(a1 + v32) = *(void *)(a2 + v32);
        uint64_t v33 = *(void *)(a2 + v32 + 8);
        *(void *)((char *)v5 + v32 + 8) = v33;
        uint64_t v34 = v31[16];
        *(void *)((char *)v5 + v34) = *(void *)(a2 + v34);
        uint64_t v35 = *(void *)(a2 + v34 + 8);
        *(void *)((char *)v5 + v34 + 8) = v35;
        uint64_t v36 = v31[20];
        *(void *)((char *)v5 + v36) = *(void *)(a2 + v36);
        uint64_t v37 = *(void *)(a2 + v36 + 8);
        *(void *)((char *)v5 + v36 + 8) = v37;
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v37);
        uint64_t v79 = 5;
        goto LABEL_11;
      case 6u:
        uint64_t v38 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v40 = v39[12];
        *(void *)(a1 + v40) = *(void *)(a2 + v40);
        uint64_t v41 = *(void *)(a2 + v40 + 8);
        *(void *)((char *)v5 + v40 + 8) = v41;
        uint64_t v42 = v39[16];
        *(void *)((char *)v5 + v42) = *(void *)(a2 + v42);
        uint64_t v93 = *(void *)(a2 + v42 + 8);
        *(void *)((char *)v5 + v42 + 8) = v93;
        uint64_t v43 = v39[20];
        *(void *)((char *)v5 + v43) = *(void *)(a2 + v43);
        uint64_t v44 = *(void *)(a2 + v43 + 8);
        *(void *)((char *)v5 + v43 + 8) = v44;
        uint64_t v45 = v39[24];
        *(void *)((char *)v5 + v45) = *(void *)(a2 + v45);
        uint64_t v46 = *(void *)(a2 + v45 + 8);
        *(void *)((char *)v5 + v45 + 8) = v46;
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v93);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v46);
        uint64_t v79 = 6;
LABEL_11:
        uint64_t v17 = v79;
        a1 = (uint64_t)v5;
        uint64_t v16 = v84;
LABEL_12:
        swift_storeEnumTagMultiPayload(a1, v16, v17);
        v94 = a3;
        uint64_t v47 = a3[5];
        uint64_t v48 = (char *)v5 + v47;
        uint64_t v49 = a2 + v47;
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v48, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
        uint64_t v50 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
        if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
        {
          uint64_t v80 = v50;
          unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, v84);
          switch(EnumCaseMultiPayload)
          {
            case 0u:
              uint64_t v85 = type metadata accessor for URL(0);
              uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16);
              v82(v48, v49, v85);
              uint64_t v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
              v82(&v48[v52[12]], v49 + v52[12], v85);
              uint64_t v53 = v52[16];
              *(void *)&v48[v53] = *(void *)(v49 + v53);
              uint64_t v54 = *(void *)(v49 + v53 + 8);
              *(void *)&v48[v53 + 8] = v54;
              uint64_t v55 = v52[20];
              *(void *)&v48[v55] = *(void *)(v49 + v55);
              uint64_t v86 = *(void *)(v49 + v55 + 8);
              *(void *)&v48[v55 + 8] = v86;
              uint64_t v56 = v52[24];
              *(void *)&v48[v56] = *(void *)(v49 + v56);
              uint64_t v83 = *(void *)(v49 + v56 + 8);
              *(void *)&v48[v56 + 8] = v83;
              uint64_t v57 = v52[28];
              *(void *)&v48[v57] = *(void *)(v49 + v57);
              uint64_t v58 = *(void *)(v49 + v57 + 8);
              *(void *)&v48[v57 + 8] = v58;
              swift_bridgeObjectRetain(v54);
              swift_bridgeObjectRetain(v86);
              char v59 = v83;
              goto LABEL_23;
            case 1u:
            case 2u:
              uint64_t v51 = type metadata accessor for URL(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v48, v49, v51);
              goto LABEL_24;
            case 3u:
              uint64_t v87 = *(void *)v49;
              char v60 = *(unsigned char *)(v49 + 8);
              outlined copy of Result<_DataTable, Error>(*(void *)v49, v60);
              *(void *)uint64_t v48 = v87;
              v48[8] = v60;
              *((void *)v48 + 2) = *(void *)(v49 + 16);
              *((void *)v48 + 3) = *(void *)(v49 + 24);
              *((void *)v48 + 4) = *(void *)(v49 + 32);
              JUMPOUT(0x151360);
            case 4u:
              uint64_t v88 = *(void *)v49;
              char v61 = *(unsigned char *)(v49 + 8);
              outlined copy of Result<_DataTable, Error>(*(void *)v49, v61);
              *(void *)uint64_t v48 = v88;
              v48[8] = v61;
              *((void *)v48 + 2) = *(void *)(v49 + 16);
              uint64_t v62 = *(void *)(v49 + 24);
              *((void *)v48 + 3) = v62;
              *((void *)v48 + 4) = *(void *)(v49 + 32);
              uint64_t v63 = *(void *)(v49 + 40);
              *((void *)v48 + 5) = v63;
              *((void *)v48 + 6) = *(void *)(v49 + 48);
              uint64_t v89 = *(void *)(v49 + 56);
              *((void *)v48 + 7) = v89;
              *((void *)v48 + 8) = *(void *)(v49 + 64);
              uint64_t v58 = *(void *)(v49 + 72);
              *((void *)v48 + 9) = v58;
              goto LABEL_22;
            case 5u:
              uint64_t v64 = type metadata accessor for DataFrame(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(v48, v49, v64);
              uint64_t v65 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
              uint64_t v66 = v65[12];
              *(void *)&v48[v66] = *(void *)(v49 + v66);
              uint64_t v67 = *(void *)(v49 + v66 + 8);
              *(void *)&v48[v66 + 8] = v67;
              uint64_t v68 = v65[16];
              *(void *)&v48[v68] = *(void *)(v49 + v68);
              uint64_t v69 = *(void *)(v49 + v68 + 8);
              *(void *)&v48[v68 + 8] = v69;
              uint64_t v70 = v65[20];
              *(void *)&v48[v70] = *(void *)(v49 + v70);
              uint64_t v58 = *(void *)(v49 + v70 + 8);
              *(void *)&v48[v70 + 8] = v58;
              swift_bridgeObjectRetain(v67);
              char v59 = v69;
              goto LABEL_23;
            case 6u:
              uint64_t v71 = type metadata accessor for DataFrame(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16))(v48, v49, v71);
              uint64_t v72 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
              uint64_t v73 = v72[12];
              *(void *)&v48[v73] = *(void *)(v49 + v73);
              uint64_t v62 = *(void *)(v49 + v73 + 8);
              *(void *)&v48[v73 + 8] = v62;
              uint64_t v74 = v72[16];
              *(void *)&v48[v74] = *(void *)(v49 + v74);
              uint64_t v63 = *(void *)(v49 + v74 + 8);
              *(void *)&v48[v74 + 8] = v63;
              uint64_t v75 = v72[20];
              *(void *)&v48[v75] = *(void *)(v49 + v75);
              uint64_t v89 = *(void *)(v49 + v75 + 8);
              *(void *)&v48[v75 + 8] = v89;
              uint64_t v76 = v72[24];
              *(void *)&v48[v76] = *(void *)(v49 + v76);
              uint64_t v58 = *(void *)(v49 + v76 + 8);
              *(void *)&v48[v76 + 8] = v58;
LABEL_22:
              swift_bridgeObjectRetain(v62);
              swift_bridgeObjectRetain(v63);
              char v59 = v89;
LABEL_23:
              swift_bridgeObjectRetain(v59);
              swift_bridgeObjectRetain(v58);
LABEL_24:
              a3 = v94;
              swift_storeEnumTagMultiPayload(v48, v84, EnumCaseMultiPayload);
              swift_storeEnumTagMultiPayload(v48, v80, 1);
              break;
            case 7u:
              JUMPOUT(0x151598);
          }
        }
        else
        {
          memcpy(v48, (const void *)v49, *(void *)(*(void *)(v50 - 8) + 64));
          a3 = v94;
        }
        return result;
    }
  }
  *(void *)((char *)v5 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)((char *)v5 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)((char *)v5 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)((char *)v5 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)((char *)v5 + a3[10]) = *(void *)(a2 + a3[10]);
  return v5;
}

char *initializeWithTake for MLActionClassifier.PersistentParameters(char *__dst, char *__src, int *a3)
{
  uint64_t v6 = type metadata accessor for MLActionClassifier.DataSource(0);
  uint64_t v38 = v6;
  switch(swift_getEnumCaseMultiPayload(__src, v6))
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL(0);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v39(__dst, __src, v7);
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v39(&__dst[v8[12]], &__src[v8[12]], v7);
      *(_OWORD *)&__dst[v8[16]] = *(_OWORD *)&__src[v8[16]];
      *(_OWORD *)&__dst[v8[20]] = *(_OWORD *)&__src[v8[20]];
      *(_OWORD *)&__dst[v8[24]] = *(_OWORD *)&__src[v8[24]];
      *(_OWORD *)&__dst[v8[28]] = *(_OWORD *)&__src[v8[28]];
      uint64_t v9 = v38;
      uint64_t v10 = 0;
      goto LABEL_9;
    case 1u:
      uint64_t v11 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
      uint64_t v33 = 1;
      goto LABEL_8;
    case 2u:
      uint64_t v12 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
      uint64_t v33 = 2;
      goto LABEL_8;
    case 5u:
      uint64_t v13 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
      uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&__dst[v14[12]] = *(_OWORD *)&__src[v14[12]];
      *(_OWORD *)&__dst[v14[16]] = *(_OWORD *)&__src[v14[16]];
      *(_OWORD *)&__dst[v14[20]] = *(_OWORD *)&__src[v14[20]];
      uint64_t v33 = 5;
      goto LABEL_8;
    case 6u:
      uint64_t v15 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
      uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      *(_OWORD *)&__dst[v16[12]] = *(_OWORD *)&__src[v16[12]];
      *(_OWORD *)&__dst[v16[16]] = *(_OWORD *)&__src[v16[16]];
      *(_OWORD *)&__dst[v16[20]] = *(_OWORD *)&__src[v16[20]];
      *(_OWORD *)&__dst[v16[24]] = *(_OWORD *)&__src[v16[24]];
      uint64_t v33 = 6;
LABEL_8:
      uint64_t v10 = v33;
      uint64_t v9 = v6;
LABEL_9:
      swift_storeEnumTagMultiPayload(__dst, v9, v10);
      break;
    default:
      memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v40 = a3;
  uint64_t v17 = a3[5];
  uint64_t v18 = &__dst[v17];
  uint64_t v19 = &__src[v17];
  uint64_t v20 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    uint64_t v35 = v20;
    switch(swift_getEnumCaseMultiPayload(v19, v38))
    {
      case 0u:
        uint64_t v37 = type metadata accessor for URL(0);
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
        v36(v18, v19, v37);
        char v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v36(&v18[v21[12]], &v19[v21[12]], v37);
        *(_OWORD *)&v18[v21[16]] = *(_OWORD *)&v19[v21[16]];
        *(_OWORD *)&v18[v21[20]] = *(_OWORD *)&v19[v21[20]];
        *(_OWORD *)&v18[v21[24]] = *(_OWORD *)&v19[v21[24]];
        *(_OWORD *)&v18[v21[28]] = *(_OWORD *)&v19[v21[28]];
        uint64_t v22 = v18;
        uint64_t v23 = v38;
        uint64_t v24 = 0;
        goto LABEL_20;
      case 1u:
        uint64_t v26 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v18, v19, v26);
        uint64_t v34 = 1;
        goto LABEL_19;
      case 2u:
        uint64_t v27 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v18, v19, v27);
        uint64_t v34 = 2;
        goto LABEL_19;
      case 5u:
        uint64_t v28 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v18, v19, v28);
        uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v18[v29[12]] = *(_OWORD *)&v19[v29[12]];
        *(_OWORD *)&v18[v29[16]] = *(_OWORD *)&v19[v29[16]];
        *(_OWORD *)&v18[v29[20]] = *(_OWORD *)&v19[v29[20]];
        uint64_t v34 = 5;
        goto LABEL_19;
      case 6u:
        uint64_t v30 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v18, v19, v30);
        uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v18[v31[12]] = *(_OWORD *)&v19[v31[12]];
        *(_OWORD *)&v18[v31[16]] = *(_OWORD *)&v19[v31[16]];
        *(_OWORD *)&v18[v31[20]] = *(_OWORD *)&v19[v31[20]];
        *(_OWORD *)&v18[v31[24]] = *(_OWORD *)&v19[v31[24]];
        uint64_t v34 = 6;
LABEL_19:
        uint64_t v24 = v34;
        uint64_t v22 = v18;
        uint64_t v23 = v38;
LABEL_20:
        swift_storeEnumTagMultiPayload(v22, v23, v24);
        break;
      default:
        memcpy(v18, v19, *(void *)(*(void *)(v38 - 8) + 64));
        break;
    }
    uint64_t v25 = v40;
    swift_storeEnumTagMultiPayload(v18, v35, 1);
  }
  else
  {
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    uint64_t v25 = v40;
  }
  *(void *)&__dst[v25[6]] = *(void *)&__src[v25[6]];
  *(void *)&__dst[v25[7]] = *(void *)&__src[v25[7]];
  *(void *)&__dst[v25[8]] = *(void *)&__src[v25[8]];
  *(void *)&__dst[v25[9]] = *(void *)&__src[v25[9]];
  *(void *)&__dst[v25[10]] = *(void *)&__src[v25[10]];
  return __dst;
}

char *assignWithTake for MLActionClassifier.PersistentParameters(char *__dst, char *__src, int *a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLActionClassifier.DataSource);
    uint64_t v6 = type metadata accessor for MLActionClassifier.DataSource(0);
    uint64_t v38 = v6;
    switch(swift_getEnumCaseMultiPayload(__src, v6))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
        v39(__dst, __src, v7);
        uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v39(&__dst[v8[12]], &__src[v8[12]], v7);
        *(_OWORD *)&__dst[v8[16]] = *(_OWORD *)&__src[v8[16]];
        *(_OWORD *)&__dst[v8[20]] = *(_OWORD *)&__src[v8[20]];
        *(_OWORD *)&__dst[v8[24]] = *(_OWORD *)&__src[v8[24]];
        *(_OWORD *)&__dst[v8[28]] = *(_OWORD *)&__src[v8[28]];
        uint64_t v9 = v38;
        uint64_t v10 = 0;
        goto LABEL_10;
      case 1u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
        uint64_t v33 = 1;
        goto LABEL_9;
      case 2u:
        uint64_t v12 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
        uint64_t v33 = 2;
        goto LABEL_9;
      case 5u:
        uint64_t v13 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(__dst, __src, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&__dst[v14[12]] = *(_OWORD *)&__src[v14[12]];
        *(_OWORD *)&__dst[v14[16]] = *(_OWORD *)&__src[v14[16]];
        *(_OWORD *)&__dst[v14[20]] = *(_OWORD *)&__src[v14[20]];
        uint64_t v33 = 5;
        goto LABEL_9;
      case 6u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
        uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&__dst[v16[12]] = *(_OWORD *)&__src[v16[12]];
        *(_OWORD *)&__dst[v16[16]] = *(_OWORD *)&__src[v16[16]];
        *(_OWORD *)&__dst[v16[20]] = *(_OWORD *)&__src[v16[20]];
        *(_OWORD *)&__dst[v16[24]] = *(_OWORD *)&__src[v16[24]];
        uint64_t v33 = 6;
LABEL_9:
        uint64_t v10 = v33;
        uint64_t v9 = v6;
LABEL_10:
        swift_storeEnumTagMultiPayload(__dst, v9, v10);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    uint64_t v40 = a3;
    uint64_t v17 = a3[5];
    uint64_t v18 = &__dst[v17];
    uint64_t v19 = &__src[v17];
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v18, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    uint64_t v20 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      uint64_t v37 = v20;
      switch(swift_getEnumCaseMultiPayload(v19, v38))
      {
        case 0u:
          uint64_t v35 = type metadata accessor for URL(0);
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
          char v21 = v18;
          v36(v18, v19, v35);
          uint64_t v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v36(&v21[v22[12]], &v19[v22[12]], v35);
          *(_OWORD *)&v21[v22[16]] = *(_OWORD *)&v19[v22[16]];
          *(_OWORD *)&v21[v22[20]] = *(_OWORD *)&v19[v22[20]];
          *(_OWORD *)&v21[v22[24]] = *(_OWORD *)&v19[v22[24]];
          *(_OWORD *)&v21[v22[28]] = *(_OWORD *)&v19[v22[28]];
          uint64_t v23 = v21;
          uint64_t v24 = v38;
          uint64_t v25 = 0;
          goto LABEL_21;
        case 1u:
          uint64_t v26 = type metadata accessor for URL(0);
          char v21 = v18;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v18, v19, v26);
          uint64_t v34 = 1;
          goto LABEL_20;
        case 2u:
          uint64_t v27 = type metadata accessor for URL(0);
          char v21 = v18;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v18, v19, v27);
          uint64_t v34 = 2;
          goto LABEL_20;
        case 5u:
          uint64_t v28 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v18, v19, v28);
          uint64_t v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v18[v29[12]] = *(_OWORD *)&v19[v29[12]];
          *(_OWORD *)&v18[v29[16]] = *(_OWORD *)&v19[v29[16]];
          char v21 = v18;
          *(_OWORD *)&v18[v29[20]] = *(_OWORD *)&v19[v29[20]];
          uint64_t v34 = 5;
          goto LABEL_20;
        case 6u:
          uint64_t v30 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v18, v19, v30);
          uint64_t v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v18[v31[12]] = *(_OWORD *)&v19[v31[12]];
          *(_OWORD *)&v18[v31[16]] = *(_OWORD *)&v19[v31[16]];
          *(_OWORD *)&v18[v31[20]] = *(_OWORD *)&v19[v31[20]];
          char v21 = v18;
          *(_OWORD *)&v18[v31[24]] = *(_OWORD *)&v19[v31[24]];
          uint64_t v34 = 6;
LABEL_20:
          uint64_t v25 = v34;
          uint64_t v23 = v18;
          uint64_t v24 = v38;
LABEL_21:
          swift_storeEnumTagMultiPayload(v23, v24, v25);
          break;
        default:
          char v21 = v18;
          memcpy(v18, v19, *(void *)(*(void *)(v38 - 8) + 64));
          break;
      }
      a3 = v40;
      swift_storeEnumTagMultiPayload(v21, v37, 1);
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
      a3 = v40;
    }
  }
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  *(void *)&__dst[a3[9]] = *(void *)&__src[a3[9]];
  *(void *)&__dst[a3[10]] = *(void *)&__src[a3[10]];
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_151F1D);
}

uint64_t sub_151F1D(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLActionClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) != a2)
  {
    uint64_t v5 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
    uint64_t v4 = *(int *)(a3 + 20) + a1;
  }
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MLActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_151F84);
}

uint64_t sub_151F84(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLActionClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) != a3)
  {
    uint64_t v7 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
    uint64_t v6 = *(int *)(a4 + 20) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
}

uint64_t type metadata accessor for MLActionClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLActionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLActionClassifier.PersistentParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLActionClassifier.PersistentParameters);
  }
  return result;
}

uint64_t type metadata completion function for MLActionClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLActionClassifier.DataSource(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[7] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

NSURL *MLActionClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t *a1)
{
  uint64_t v174 = v2;
  v171 = a1;
  uint64_t v3 = v1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  v159 = &v143;
  uint64_t v154 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v154 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  v147 = &v143;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.DataSource?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v158 = (uint64_t)&v143;
  uint64_t v152 = type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v13 = *(void *)(*(void *)(v152 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v143 = (uint64_t)&v143;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v160 = (uint64_t)&v143;
  uint64_t v145 = type metadata accessor for DataFrame(0);
  uint64_t v144 = *(void *)(v145 - 8);
  int64_t v18 = *(void *)(v144 + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  v146 = &v143;
  uint64_t v172 = type metadata accessor for URL(0);
  uint64_t v173 = *(void *)(v172 - 8);
  int64_t v21 = *(void *)(v173 + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  v153 = &v143;
  uint64_t v24 = alloca(v21);
  uint64_t v25 = alloca(v21);
  v165 = &v143;
  uint64_t v26 = alloca(v21);
  uint64_t v27 = alloca(v21);
  v164 = &v143;
  uint64_t v28 = alloca(v21);
  uint64_t v29 = alloca(v21);
  uint64_t v30 = alloca(v21);
  uint64_t v31 = alloca(v21);
  uint64_t v32 = (int *)type metadata accessor for MLActionClassifier.PersistentParameters(0);
  uint64_t v33 = v3;
  uint64_t v155 = v32[6];
  *(void *)(v3 + v155) = 32;
  unint64_t v156 = v32[7];
  *(void *)(v3 + v156) = 80;
  uint64_t v157 = v32[8];
  *(void *)(v3 + v157) = 30;
  uint64_t v34 = v32[9];
  uint64_t v166 = v33;
  *(void *)(v33 + v34) = 0x403E000000000000;
  v177 = &v143;
  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v35 = v174;
  uint64_t v36 = Data.init(contentsOf:options:)(&v143, 0);
  uint64_t v174 = v35;
  if (v35)
  {
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v173 + 8);
    uint64_t v39 = v172;
    v38((uint64_t)v171, v172);
    v38((uint64_t)&v143, v39);
    v38((uint64_t)v177, v39);
    return __stack_chk_guard;
  }
  uint64_t v148 = v34;
  v161 = v32;
  uint64_t v41 = *(void (**)(uint64_t *, uint64_t))(v173 + 8);
  unint64_t v42 = v37;
  uint64_t v43 = v36;
  v41(&v143, v172);
  uint64_t v44 = objc_opt_self(NSPropertyListSerialization);
  uint64_t v169 = v43;
  unint64_t v168 = v42;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v182 = 0;
  id v46 = [v44 propertyListWithData:isa options:0 format:0 error:&v182];
  id v47 = v46;

  id v48 = v182;
  if (!v47)
  {
    uint64_t v74 = v48;
    _convertNSErrorToError(_:)(v48);

    swift_willThrow(v74, "propertyListWithData:options:format:error:", v75, v76, v77, v78);
    outlined consume of Data._Representation(v169, v168);
    uint64_t v79 = v172;
    v41(v171, v172);
    v41(v177, v79);
    return __stack_chk_guard;
  }
  uint64_t v49 = (void (*)(uint64_t, uint64_t))v41;
  _bridgeAnyObjectToAny(_:)(v47);
  swift_unknownObjectRelease(v47);
  outlined init with copy of Any((uint64_t)v205, (uint64_t)&v182);
  uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  char v50 = swift_dynamicCast(v204, &v182, (char *)&type metadata for Any + 8, v162, 6);
  uint64_t v51 = v177;
  if (!v50)
  {
    uint64_t v80 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v80, 0, 0);
    *(void *)uint64_t v81 = 0xD000000000000037;
    *(void *)(v81 + 8) = "parameters.plist" + 0x8000000000000000;
    *(_OWORD *)(v81 + 16) = 0;
    *(_OWORD *)(v81 + 32) = 0;
    *(unsigned char *)(v81 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v80, v81, v82, v83, v84);
    outlined consume of Data._Representation(v169, v168);
    uint64_t v85 = v172;
    v49((uint64_t)v171, v172);
    __swift_destroy_boxed_opaque_existential_1Tm(v205);
    v49((uint64_t)v51, v85);
    return __stack_chk_guard;
  }
  v170 = (char *)&type metadata for Any + 8;
  v167 = v49;
  uint64_t v52 = v204[0];
  specialized Dictionary.subscript.getter(0x69735F6863746162, 0xEA0000000000657ALL, v204[0]);
  if (!v185)
  {
    swift_bridgeObjectRelease(v52);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    uint64_t v53 = v51;
    goto LABEL_27;
  }
  uint64_t v175 = v52;
  uint64_t v53 = v51;
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6)) {
    goto LABEL_22;
  }
  uint64_t v54 = v204[0];
  char v55 = v175;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v175);
  if (!v185)
  {
    swift_bridgeObjectRelease(v55);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6))
  {
LABEL_22:
    swift_bridgeObjectRelease(v175);
LABEL_27:
    uint64_t v86 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v86, 0, 0);
    *(void *)uint64_t v87 = 0xD00000000000003FLL;
    *(void *)(v87 + 8) = "labeled_directories" + 0x8000000000000000;
    *(_OWORD *)(v87 + 16) = 0;
    *(_OWORD *)(v87 + 32) = 0;
    *(unsigned char *)(v87 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v86, v87, v88, v89, v90);
    outlined consume of Data._Representation(v169, v168);
    uint64_t v91 = v172;
    uint64_t v92 = (void (*)(uint64_t *, uint64_t))v167;
    v167((uint64_t)v171, v172);
    __swift_destroy_boxed_opaque_existential_1Tm(v205);
    v92(v53, v91);
    return __stack_chk_guard;
  }
  uint64_t v56 = v204[0];
  char v57 = v175;
  specialized Dictionary.subscript.getter(0x6D6172665F6D756ELL, 0xEA00000000007365, v175);
  if (!v185) {
    goto LABEL_25;
  }
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v175);
    uint64_t v53 = v177;
    goto LABEL_27;
  }
  uint64_t v163 = v204[0];
  char v57 = v175;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("Empty training input." + 0x8000000000000000), v175);
  if (!v185) {
    goto LABEL_25;
  }
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Int, 6))
  {
LABEL_29:
    swift_bridgeObjectRelease(v175);
    goto LABEL_26;
  }
  uint64_t v149 = v204[0];
  char v57 = v175;
  specialized Dictionary.subscript.getter(0x7246746567726174, 0xEF65746152656D61, v175);
  if (!v185)
  {
LABEL_25:
    swift_bridgeObjectRelease(v57);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
LABEL_26:
    uint64_t v53 = v177;
    goto LABEL_27;
  }
  uint64_t v58 = v170;
  if (!swift_dynamicCast(v204, &v182, v170, &type metadata for Double, 6)) {
    goto LABEL_29;
  }
  uint64_t v150 = v204[0];
  uint64_t v59 = v166;
  *(void *)(v166 + v155) = v54;
  *(void *)(v59 + v156) = v56;
  *(void *)(v59 + v157) = v163;
  char v60 = v164;
  URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
  char v61 = v175;
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v175);
  if (v204[3])
  {
    if (swift_dynamicCast(&v182, v204, v58, v162, 6))
    {
      uint64_t v62 = (uint64_t)v182;
      uint64_t v63 = v153;
      uint64_t v64 = v60;
      uint64_t v65 = v172;
      uint64_t v173 = *(void *)(v173 + 16);
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v173)(v153, v64, v172);
      uint64_t v66 = (uint64_t)v63;
      uint64_t v67 = v158;
      MLActionClassifier.DataSource.init(dictionary:tableFile:)(v62, v66);
      if (__swift_getEnumTagSinglePayload(v67, 1, v152) == 1)
      {
        swift_bridgeObjectRelease(v61);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v67, &demangling cache variable for type metadata for MLActionClassifier.DataSource?);
        uint64_t v68 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v68, 0, 0);
        *(void *)uint64_t v69 = 0xD000000000000035;
        *(void *)(v69 + 8) = "o load validation data." + 0x8000000000000000;
        *(_OWORD *)(v69 + 16) = 0;
        *(_OWORD *)(v69 + 32) = 0;
        *(unsigned char *)(v69 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v68, v69, v70, v71, v72);
        outlined consume of Data._Representation(v169, v168);
        uint64_t v73 = (void (*)(uint64_t *, uint64_t))v167;
        v167((uint64_t)v171, v65);
        v73(v164, v65);
        __swift_destroy_boxed_opaque_existential_1Tm(v205);
        v73(v177, v65);
        return __stack_chk_guard;
      }
      uint64_t v125 = v160;
      outlined init with take of MLClassifierMetrics(v67, v160, type metadata accessor for MLActionClassifier.DataSource);
      uint64_t v122 = v125;
      uint64_t v123 = v166;
      uint64_t v124 = v166;
      goto LABEL_44;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v204, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v93 = v177;
  v94 = v165;
  uint64_t v95 = v172;
  uint64_t v173 = *(void *)(v173 + 16);
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v173)(v165, v60, v172);
  LOBYTE(v182) = 1;
  *(_DWORD *)((char *)&v182 + 1) = *(_DWORD *)v181;
  HIDWORD(v182) = *(_DWORD *)&v181[3];
  uint64_t v183 = 44;
  unint64_t v184 = 0xE100000000000000;
  uint64_t v185 = 0;
  char v176 = 1;
  unint64_t v186 = 0xE000000000000000;
  uint64_t v187 = 92;
  unint64_t v188 = 0xE100000000000000;
  char v189 = 1;
  *(_DWORD *)v190 = *(_DWORD *)v180;
  *(_DWORD *)&v190[3] = *(_DWORD *)&v180[3];
  uint64_t v191 = 34;
  unint64_t v192 = 0xE100000000000000;
  char v193 = 1;
  *(_DWORD *)&v194[3] = *(_DWORD *)&v179[3];
  *(_DWORD *)v194 = *(_DWORD *)v179;
  v195 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  uint64_t v196 = 10;
  unint64_t v197 = 0xE100000000000000;
  long long v198 = 0;
  char v199 = 1;
  *(_DWORD *)v200 = *(_DWORD *)v178;
  *(_DWORD *)&v200[3] = *(_DWORD *)&v178[3];
  uint64_t v201 = 0;
  uint64_t v96 = v174;
  MLDataTable.init(contentsOf:options:)(v94, &v182);
  uint64_t v174 = v96;
  if (v96)
  {
    outlined consume of Data._Representation(v169, v168);
    swift_bridgeObjectRelease(v175);
    uint64_t v97 = (void (*)(uint64_t *, uint64_t))v167;
    v167((uint64_t)v171, v95);
    v97(v60, v95);
    __swift_destroy_boxed_opaque_existential_1Tm(v205);
    uint64_t v98 = v93;
LABEL_33:
    v97(v98, v95);
    return __stack_chk_guard;
  }
  id v182 = v202;
  LOBYTE(v183) = v203;
  uint64_t v99 = v146;
  DataFrame.init(_:)((uint64_t)&v182);
  uint64_t v100 = DataFrame.columns.getter(&v182, &v182);
  char v101 = v100;
  uint64_t v102 = v174;
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v100);
  uint64_t v174 = v102;
  swift_bridgeObjectRelease(v101);
  uint64_t v104 = 0x7472617473;
  char v105 = specialized Sequence<>.contains(_:)(0x7472617473, 0xE500000000000000, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  swift_bridgeObjectRelease((_BYTE)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  if ((v105 & 1) == 0) {
    uint64_t v104 = 0;
  }
  uint64_t v155 = v104;
  unint64_t v106 = 0;
  if (v105) {
    unint64_t v106 = 0xE500000000000000;
  }
  unint64_t v156 = v106;
  uint64_t v107 = DataFrame.columns.getter(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n, 0xE500000000000000);
  char v108 = v107;
  uint64_t v109 = v174;
  v110 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v107);
  uint64_t v174 = v109;
  swift_bridgeObjectRelease(v108);
  uint64_t v111 = 6581861;
  char v112 = specialized Sequence<>.contains(_:)(6581861, 0xE300000000000000, v110);
  swift_bridgeObjectRelease((_BYTE)v110);
  unint64_t v113 = 0;
  if ((v112 & 1) == 0) {
    uint64_t v111 = 0;
  }
  uint64_t v157 = v111;
  if (v112) {
    unint64_t v113 = 0xE300000000000000;
  }
  v165 = (uint64_t *)v113;
  v114 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  uint64_t v151 = v114[12];
  uint64_t v163 = v114[16];
  uint64_t v160 = v114[20];
  uint64_t v158 = v114[24];
  uint64_t v115 = v143;
  uint64_t v116 = v145;
  uint64_t v117 = v144;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v144 + 16))(v143, v99, v145);
  uint64_t v118 = v151;
  *(void *)(v115 + v151) = 0x7461506F65646976;
  *(void *)(v115 + v118 + 8) = 0xE900000000000068;
  (*(void (**)(uint64_t *, uint64_t))(v117 + 8))(v99, v116);
  uint64_t v119 = v163;
  *(void *)(v115 + v163) = 0x6C6562616CLL;
  *(void *)(v115 + v119 + 8) = 0xE500000000000000;
  uint64_t v120 = v160;
  *(void *)(v115 + v160) = v155;
  *(void *)(v115 + v120 + 8) = v156;
  uint64_t v121 = v158;
  *(void *)(v115 + v158) = v157;
  *(void *)(v115 + v121 + 8) = v165;
  swift_storeEnumTagMultiPayload(v115, v152, 6);
  uint64_t v122 = v115;
  uint64_t v123 = v166;
  uint64_t v124 = v166;
LABEL_44:
  outlined init with take of MLClassifierMetrics(v122, v124, type metadata accessor for MLActionClassifier.DataSource);
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v175);
  if (!v185)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
    goto LABEL_49;
  }
  if (!swift_dynamicCast(v204, &v182, v170, v162, 6))
  {
LABEL_49:
    v136 = v161;
    swift_storeEnumTagMultiPayload(v123 + v161[5], v154, 2);
    goto LABEL_50;
  }
  uint64_t v126 = v204[0];
  uint64_t v127 = (uint64_t)v153;
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v173)(v153, v177, v172);
  uint64_t v128 = (uint64_t)v159;
  MLActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v126, v127);
  if (__swift_getEnumTagSinglePayload(v128, 1, v154) == 1)
  {
    swift_bridgeObjectRelease(v175);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v159, &demangling cache variable for type metadata for MLActionClassifier.ModelParameters.ValidationData?);
    uint64_t v129 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v173 = 0;
    uint64_t v130 = v129;
    swift_allocError(&type metadata for MLCreateError, v129, 0, 0);
    *(void *)uint64_t v131 = 0xD000000000000037;
    v135 = "ion Classification algorithm." + 0x8000000000000000;
    goto LABEL_56;
  }
  uint64_t v142 = (uint64_t)v147;
  outlined init with take of MLClassifierMetrics((uint64_t)v159, (uint64_t)v147, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  v136 = v161;
  uint64_t v123 = v166;
  outlined init with take of MLClassifierMetrics(v142, v166 + v161[5], type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
LABEL_50:
  *(void *)(v123 + v136[10]) = v149;
  *(void *)(v123 + v148) = v150;
  char v137 = v175;
  specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v175);
  swift_bridgeObjectRelease(v137);
  if (v185)
  {
    if (swift_dynamicCast(v204, &v182, v170, v162, 6))
    {
      MLActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v204[0]);
      if ((_BYTE)v182 != 1)
      {
        outlined consume of Data._Representation(v169, v168);
        uint64_t v95 = v172;
        uint64_t v97 = (void (*)(uint64_t *, uint64_t))v167;
        v167((uint64_t)v171, v172);
        v97(v164, v95);
        __swift_destroy_boxed_opaque_existential_1Tm(v205);
        uint64_t v98 = v177;
        goto LABEL_33;
      }
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v182, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v130 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v130, 0, 0);
  *(void *)uint64_t v131 = 0xD000000000000028;
  v135 = "rRegressor.Model.swift" + 0x8000000000000000;
  LOBYTE(v132) = 1;
  uint64_t v173 = v132;
LABEL_56:
  uint64_t v138 = v172;
  v139 = v177;
  *(void *)(v131 + 8) = v135;
  *(_OWORD *)(v131 + 16) = 0;
  *(_OWORD *)(v131 + 32) = 0;
  *(unsigned char *)(v131 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v130, v131, v132, v133, v134);
  outlined consume of Data._Representation(v169, v168);
  v140 = (void (*)(uint64_t *, uint64_t))v167;
  v167((uint64_t)v171, v138);
  v140(v164, v138);
  __swift_destroy_boxed_opaque_existential_1Tm(v205);
  v140(v139, v138);
  uint64_t v141 = v166;
  outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLActionClassifier.DataSource);
  if ((_BYTE)v173) {
    outlined destroy of MLActivityClassifier.ModelParameters(v161[5] + v141, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  }
  return __stack_chk_guard;
}

uint64_t MLActionClassifier.DataSource.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v130 = a2;
  uint64_t v4 = v2;
  int64_t v5 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v123 = &v85;
  *(void *)&long long v118 = type metadata accessor for DataFrame(0);
  uint64_t v8 = *(void *)(v118 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v122 = &v85;
  uint64_t v132 = type metadata accessor for URL(0);
  uint64_t v131 = *(void *)(v132 - 8);
  int64_t v12 = *(void *)(v131 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v124 = &v85;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v17 = type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  int64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  if (*(void *)(a1 + 16))
  {
    uint64_t v119 = &v85;
    uint64_t v115 = &v85;
    uint64_t v128 = v17;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
    if (v24)
    {
      uint64_t v126 = v4;
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v23, (uint64_t)&v86);
      uint64_t v127 = (char *)&type metadata for Any + 8;
      if (swift_dynamicCast(&v129, &v86, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        uint64_t v25 = (char *)*((void *)&v129 + 1);
        if (v129 == __PAIR128__(0xE900000000000079, 0x726F746365726964))
        {
          swift_bridgeObjectRelease(121);
LABEL_16:
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          uint64_t v4 = v126;
          if (v89)
          {
            char v32 = swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6);
            uint64_t v17 = v128;
            if (v32)
            {
              long long v33 = v129;
              specialized Dictionary.subscript.getter(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, a1);
              if (v89)
              {
                if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                {
                  uint64_t v34 = *((void *)&v129 + 1);
                  uint64_t v123 = (uint64_t *)v129;
                  specialized Dictionary.subscript.getter(0x6F635F6F65646976, 0xEC0000006E6D756CLL, a1);
                  if (v89)
                  {
                    if (!swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                    {
                      char v46 = v34;
LABEL_62:
                      swift_bridgeObjectRelease(v46);
                      swift_bridgeObjectRelease(BYTE8(v33));
                      swift_bridgeObjectRelease(a1);
                      goto LABEL_63;
                    }
                    *(void *)&long long v118 = v34;
                    uint64_t v35 = (uint64_t *)*((void *)&v129 + 1);
                    uint64_t v124 = (uint64_t *)v129;
                    specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
                    if (v89)
                    {
                      uint64_t v122 = v35;
                      if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                      {
                        long long v108 = v129;
                        specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
                        if (v89)
                        {
                          if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                          {
                            uint64_t v36 = *((void *)&v129 + 1);
                            uint64_t v109 = v129;
LABEL_76:
                            uint64_t v110 = v36;
                            specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
                            swift_bridgeObjectRelease(a1);
                            if (v89)
                            {
                              if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                              {
                                uint64_t v62 = *((void *)&v129 + 1);
                                uint64_t v63 = v129;
                              }
                              else
                              {
                                uint64_t v63 = 0;
                                uint64_t v62 = 0;
                              }
                              uint64_t v107 = v62;
                              uint64_t v106 = v63;
                            }
                            else
                            {
                              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                              uint64_t v106 = 0;
                              uint64_t v107 = 0;
                            }
                            uint64_t v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
                            uint64_t v52 = (uint64_t)v119;
                            uint64_t v65 = v64[16];
                            uint64_t v117 = v64[20];
                            uint64_t v116 = v64[24];
                            uint64_t v127 = (char *)v64[28];
                            URL.init(fileURLWithPath:)(v33, *((void *)&v33 + 1));
                            swift_bridgeObjectRelease(BYTE8(v33));
                            char v66 = v118;
                            URL.init(fileURLWithPath:)(v123, v118);
                            swift_bridgeObjectRelease(v66);
                            (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
                            *(void *)(v52 + v65) = v124;
                            *(void *)(v52 + v65 + 8) = v122;
                            *(_OWORD *)(v52 + v117) = v108;
                            uint64_t v67 = v116;
                            *(void *)(v52 + v116) = v109;
                            *(void *)(v52 + v67 + 8) = v110;
                            uint64_t v68 = v127;
                            *(void *)&v127[v52] = v106;
                            *(void *)&v68[v52 + 8] = v107;
                            uint64_t v56 = v52;
                            uint64_t v17 = v128;
                            uint64_t v57 = v128;
                            uint64_t v55 = 0;
                            goto LABEL_83;
                          }
                        }
                        else
                        {
                          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                        }
                        uint64_t v109 = 0;
                        uint64_t v36 = 0;
                        goto LABEL_76;
                      }
                      swift_bridgeObjectRelease((_BYTE)v122);
                      char v46 = v118;
                      goto LABEL_62;
                    }
                    swift_bridgeObjectRelease((_BYTE)v35);
                    char v45 = v118;
                  }
                  else
                  {
                    char v45 = v34;
                  }
                  swift_bridgeObjectRelease(v45);
                  swift_bridgeObjectRelease(BYTE8(v33));
                  swift_bridgeObjectRelease(a1);
                  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
LABEL_63:
                  uint64_t v17 = v128;
                  (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
                  unsigned int v29 = 1;
                  uint64_t v4 = v126;
                  return __swift_storeEnumTagSinglePayload(v4, v29, 1, v17);
                }
                swift_bridgeObjectRelease(BYTE8(v33));
                swift_bridgeObjectRelease(a1);
              }
              else
              {
                swift_bridgeObjectRelease(BYTE8(v33));
                swift_bridgeObjectRelease(a1);
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v4 = v126;
              goto LABEL_10;
            }
            swift_bridgeObjectRelease(a1);
LABEL_50:
            uint64_t v26 = v130;
            uint64_t v28 = v131;
            uint64_t v27 = v132;
            goto LABEL_11;
          }
          swift_bridgeObjectRelease(a1);
LABEL_49:
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
          uint64_t v17 = v128;
          goto LABEL_50;
        }
        uint64_t v31 = v129;
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x726F746365726964, 0xE900000000000079, v129, *((void *)&v129 + 1), 0))
        {
          swift_bridgeObjectRelease((_BYTE)v25);
          goto LABEL_16;
        }
        if (v31 == 0xD000000000000013)
        {
          unint64_t v37 = "session_id_column" + 0x8000000000000000;
          if (v25 == "session_id_column" + 0x8000000000000000) {
            goto LABEL_32;
          }
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, "session_id_column" + 0x8000000000000000, v31, v25, 0))
        {
          LOBYTE(v37) = (_BYTE)v25;
LABEL_32:
          swift_bridgeObjectRelease((_BYTE)v37);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          swift_bridgeObjectRelease(a1);
          uint64_t v4 = v126;
          if (!v89) {
            goto LABEL_49;
          }
          char v38 = swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6);
          uint64_t v17 = v128;
          if (!v38) {
            goto LABEL_50;
          }
          char v39 = BYTE8(v129);
          uint64_t v40 = (uint64_t)v119;
          URL.init(fileURLWithPath:)(v129, *((void *)&v129 + 1));
          swift_bridgeObjectRelease(v39);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
          swift_storeEnumTagMultiPayload(v40, v17, 1);
LABEL_35:
          uint64_t v41 = (uint64_t)v115;
          outlined init with take of MLClassifierMetrics(v40, (uint64_t)v115, type metadata accessor for MLActionClassifier.DataSource);
LABEL_36:
          outlined init with take of MLClassifierMetrics(v41, v4, type metadata accessor for MLActionClassifier.DataSource);
          unsigned int v29 = 0;
          return __swift_storeEnumTagSinglePayload(v4, v29, 1, v17);
        }
        if (v31 == 0x5F64656C6562616CLL && v25 == (char *)0xED000073656C6966)
        {
          char v42 = 102;
LABEL_46:
          swift_bridgeObjectRelease(v42);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          swift_bridgeObjectRelease(a1);
          uint64_t v4 = v126;
          if (!v89) {
            goto LABEL_49;
          }
          char v43 = swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6);
          uint64_t v17 = v128;
          if (!v43) {
            goto LABEL_50;
          }
          char v44 = BYTE8(v129);
          uint64_t v40 = (uint64_t)v119;
          URL.init(fileURLWithPath:)(v129, *((void *)&v129 + 1));
          swift_bridgeObjectRelease(v44);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
          swift_storeEnumTagMultiPayload(v40, v17, 2);
          goto LABEL_35;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x5F64656C6562616CLL, 0xED000073656C6966, v31, v25, 0))
        {
          char v42 = (char)v25;
          goto LABEL_46;
        }
        if (v31 == 0xD000000000000016 && v25 == "start_time_column" + 0x8000000000000000)
        {
          unsigned __int8 v47 = "start_time_column";
LABEL_60:
          swift_bridgeObjectRelease(v47);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v131 + 16))(&v85, v130, v132);
          LOBYTE(v86) = 1;
          *(_DWORD *)((char *)&v86 + 1) = *(_DWORD *)v111;
          HIDWORD(v86) = *(_DWORD *)&v111[3];
          uint64_t v87 = 44;
          unint64_t v88 = 0xE100000000000000;
          uint64_t v89 = 0;
          char v125 = 1;
          unint64_t v90 = 0xE000000000000000;
          uint64_t v91 = 92;
          unint64_t v92 = 0xE100000000000000;
          char v93 = 1;
          *(_DWORD *)v94 = *(_DWORD *)v112;
          *(_DWORD *)&v94[3] = *(_DWORD *)&v112[3];
          uint64_t v95 = 34;
          unint64_t v96 = 0xE100000000000000;
          char v97 = 1;
          *(_DWORD *)&v98[3] = *(_DWORD *)&v113[3];
          *(_DWORD *)uint64_t v98 = *(_DWORD *)v113;
          uint64_t v99 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
          uint64_t v100 = 10;
          unint64_t v101 = 0xE100000000000000;
          long long v102 = 0;
          char v103 = 1;
          *(_DWORD *)uint64_t v104 = v114[0];
          *(_DWORD *)&v104[3] = *(_DWORD *)((char *)v114 + 3);
          uint64_t v105 = 0;
          MLDataTable.init(contentsOf:options:)(&v85, &v86);
          uint64_t v4 = v126;
          uint64_t v120 = v129;
          LOBYTE(v121) = BYTE8(v129);
          static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v120, 0x746E696F7079656BLL, (void *)0xE900000000000073, 0.0);
          specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("labeled_keypoints_data" + 0x8000000000000000), a1);
          if (v89)
          {
            if (!swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
            {
LABEL_101:
              swift_bridgeObjectRelease(a1);
              goto LABEL_102;
            }
            uint64_t v48 = *((void *)&v129 + 1);
            uint64_t v49 = v129;
            specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
            if (v89)
            {
              if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
              {
                uint64_t v50 = *((void *)&v129 + 1);
                uint64_t v123 = (uint64_t *)v129;
                specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, a1);
                swift_bridgeObjectRelease(a1);
                if (v89)
                {
                  if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                  {
                    long long v118 = v129;
                    uint64_t v51 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
                    uint64_t v127 = (char *)v51[12];
                    uint64_t v122 = (uint64_t *)v51[16];
                    uint64_t v124 = (uint64_t *)v51[20];
                    uint64_t v86 = v120;
                    LOBYTE(v87) = v121;
                    outlined copy of Result<_DataTable, Error>(v120, v121);
                    uint64_t v52 = (uint64_t)v119;
                    DataFrame.init(_:)((uint64_t)&v86);
                    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
                    outlined consume of Result<_DataTable, Error>(v120, v121);
                    uint64_t v53 = v127;
                    *(void *)&v127[v52] = v49;
                    *(void *)&v53[v52 + 8] = v48;
                    uint64_t v54 = v122;
                    *(uint64_t *)((char *)v122 + v52) = (uint64_t)v123;
                    *(uint64_t *)((char *)v54 + v52 + 8) = v50;
                    *(_OWORD *)((char *)v124 + v52) = v118;
                    uint64_t v55 = 5;
                    uint64_t v56 = v52;
                    uint64_t v17 = v128;
                    uint64_t v57 = v128;
LABEL_83:
                    swift_storeEnumTagMultiPayload(v56, v57, v55);
                    uint64_t v69 = v52;
                    uint64_t v41 = (uint64_t)v115;
                    outlined init with take of MLClassifierMetrics(v69, (uint64_t)v115, type metadata accessor for MLActionClassifier.DataSource);
LABEL_84:
                    uint64_t v4 = v126;
                    goto LABEL_36;
                  }
                  swift_bridgeObjectRelease(v50);
                  swift_bridgeObjectRelease(v48);
                }
                else
                {
                  swift_bridgeObjectRelease(v50);
                  swift_bridgeObjectRelease(v48);
                  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                }
                uint64_t v4 = v126;
                goto LABEL_102;
              }
              swift_bridgeObjectRelease(v48);
              goto LABEL_101;
            }
            swift_bridgeObjectRelease(v48);
          }
          swift_bridgeObjectRelease(a1);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
LABEL_102:
          uint64_t v17 = v128;
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
          outlined consume of Result<_DataTable, Error>(v120, v121);
          goto LABEL_12;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, "start_time_column" + 0x8000000000000000, v31, v25, 0))
        {
          unsigned __int8 v47 = v25;
          goto LABEL_60;
        }
        if (v31 == 0xD000000000000012 && v25 == "augmentation_options" + 0x8000000000000000)
        {
          swift_bridgeObjectRelease(("augmentation_options" + 0x8000000000000000));
          uint64_t v4 = v126;
          uint64_t v58 = v130;
          uint64_t v59 = v131;
          uint64_t v60 = v132;
          uint64_t v61 = (uint64_t)v123;
        }
        else
        {
          char v70 = (char)v25;
          char v71 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, "augmentation_options" + 0x8000000000000000, v31, v25, 0);
          swift_bridgeObjectRelease(v70);
          BOOL v72 = (v71 & 1) == 0;
          uint64_t v4 = v126;
          uint64_t v58 = v130;
          uint64_t v59 = v131;
          uint64_t v60 = v132;
          uint64_t v61 = (uint64_t)v123;
          if (v72)
          {
            (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
            swift_bridgeObjectRelease(a1);
            goto LABEL_89;
          }
        }
        uint64_t v73 = v124;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v59 + 16))(v124, v58, v60);
        LOBYTE(v86) = 1;
        *(_DWORD *)((char *)&v86 + 1) = v120;
        HIDWORD(v86) = *(_DWORD *)((char *)&v120 + 3);
        uint64_t v87 = 44;
        unint64_t v88 = 0xE100000000000000;
        uint64_t v89 = 0;
        LOBYTE(v114[0]) = 1;
        unint64_t v90 = 0xE000000000000000;
        uint64_t v91 = 92;
        unint64_t v92 = 0xE100000000000000;
        char v93 = 1;
        *(_DWORD *)v94 = *(_DWORD *)v111;
        *(_DWORD *)&v94[3] = *(_DWORD *)&v111[3];
        uint64_t v95 = 34;
        unint64_t v96 = 0xE100000000000000;
        char v97 = 1;
        *(_DWORD *)&v98[3] = *(_DWORD *)&v112[3];
        *(_DWORD *)uint64_t v98 = *(_DWORD *)v112;
        uint64_t v99 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
        uint64_t v100 = 10;
        unint64_t v101 = 0xE100000000000000;
        long long v102 = 0;
        char v103 = 1;
        *(_DWORD *)uint64_t v104 = *(_DWORD *)v113;
        *(_DWORD *)&v104[3] = *(_DWORD *)&v113[3];
        uint64_t v105 = 0;
        MLDataTable.init(contentsOf:options:)(v73, &v86);
        uint64_t v86 = v129;
        LOBYTE(v87) = BYTE8(v129);
        DataFrame.init(_:)((uint64_t)&v86);
        uint64_t v74 = v61;
        unsigned int v29 = 1;
        uint64_t v75 = v118;
        __swift_storeEnumTagSinglePayload(v74, 0, 1, v118);
        uint64_t v76 = v75;
        uint64_t v77 = (uint64_t)v123;
        if (__swift_getEnumTagSinglePayload((uint64_t)v123, 1, v76) == 1)
        {
          swift_bridgeObjectRelease(a1);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for DataFrame?);
LABEL_89:
          unsigned int v29 = 1;
LABEL_90:
          uint64_t v17 = v128;
          return __swift_storeEnumTagSinglePayload(v4, v29, 1, v17);
        }
        uint64_t v123 = *(uint64_t **)(v8 + 32);
        ((void (*)(uint64_t *, uint64_t, void))v123)(v122, v77, v118);
        specialized Dictionary.subscript.getter(0x6F635F6F65646976, 0xEC0000006E6D756CLL, a1);
        if (v89)
        {
          if (!swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
          {
LABEL_109:
            swift_bridgeObjectRelease(a1);
            goto LABEL_110;
          }
          uint64_t v124 = (uint64_t *)*((void *)&v129 + 1);
          uint64_t v119 = (uint64_t *)v129;
          specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
          if (v89)
          {
            if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
            {
              long long v108 = v129;
              specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
              if (v89)
              {
                if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                {
                  uint64_t v78 = *((void *)&v129 + 1);
                  uint64_t v116 = v129;
                  goto LABEL_113;
                }
              }
              else
              {
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v116 = 0;
              uint64_t v78 = 0;
LABEL_113:
              uint64_t v117 = v78;
              specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
              swift_bridgeObjectRelease(a1);
              (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
              if (v89)
              {
                if (swift_dynamicCast(&v129, &v86, v127, &type metadata for String, 6))
                {
                  uint64_t v79 = *((void *)&v129 + 1);
                  uint64_t v132 = v129;
LABEL_118:
                  uint64_t v131 = v79;
                  uint64_t v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
                  uint64_t v81 = v80[12];
                  uint64_t v82 = v80[16];
                  uint64_t v83 = v80[20];
                  uint64_t v84 = v80[24];
                  uint64_t v41 = (uint64_t)v115;
                  ((void (*)(uint64_t *, uint64_t *, void))v123)(v115, v122, v118);
                  *(void *)(v41 + v81) = v119;
                  *(void *)(v41 + v81 + 8) = v124;
                  *(_OWORD *)(v41 + v82) = v108;
                  *(void *)(v41 + v83) = v116;
                  *(void *)(v41 + v83 + 8) = v117;
                  *(void *)(v41 + v84) = v132;
                  *(void *)(v41 + v84 + 8) = v131;
                  uint64_t v17 = v128;
                  swift_storeEnumTagMultiPayload(v41, v128, 6);
                  goto LABEL_84;
                }
              }
              else
              {
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
              }
              uint64_t v132 = 0;
              uint64_t v79 = 0;
              goto LABEL_118;
            }
            swift_bridgeObjectRelease((_BYTE)v124);
            goto LABEL_109;
          }
          swift_bridgeObjectRelease((_BYTE)v124);
        }
        swift_bridgeObjectRelease(a1);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
LABEL_110:
        (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
        (*(void (**)(uint64_t *, void))(v8 + 8))(v122, v118);
        uint64_t v4 = v126;
        goto LABEL_90;
      }
      swift_bridgeObjectRelease(a1);
      uint64_t v4 = v126;
    }
    else
    {
      swift_bridgeObjectRelease(a1);
    }
    uint64_t v17 = v128;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }
LABEL_10:
  uint64_t v26 = v130;
  uint64_t v27 = v132;
  uint64_t v28 = v131;
LABEL_11:
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
LABEL_12:
  unsigned int v29 = 1;
  return __swift_storeEnumTagSinglePayload(v4, v29, 1, v17);
}

uint64_t MLActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v41 = &v40;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.DataSource?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v13 = type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  char v42 = &v40;
  uint64_t v55 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v17 = *(void *)(*(void *)(v55 - 8) + 64);
  int64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v50 = &v40;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_10;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v21 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v53 = v4;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v44);
  uint64_t v51 = (uint64_t)&type metadata for Any + 8;
  if (!swift_dynamicCast(&v48, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    uint64_t v4 = v53;
    goto LABEL_10;
  }
  uint64_t v52 = v6;
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  if ((v48 != 1701736302 || v49 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, v48, v49, 0) & 1) == 0)
  {
    if (v22 == 0x756F735F61746164 && v23 == 0xEB00000000656372)
    {
      char v29 = 114;
LABEL_18:
      swift_bridgeObjectRelease(v29);
      uint64_t v6 = v52;
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v30, 6))
        {
          uint64_t v51 = v48;
          uint64_t v31 = (uint64_t)v41;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v41, v54, v5);
          uint64_t v32 = v40;
          MLActionClassifier.DataSource.init(dictionary:tableFile:)(v51, v31);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v33 = v32;
          unsigned int v24 = 1;
          if (__swift_getEnumTagSinglePayload(v33, 1, v13) != 1)
          {
            uint64_t v37 = v33;
            uint64_t v38 = (uint64_t)v42;
            outlined init with take of MLClassifierMetrics(v37, (uint64_t)v42, type metadata accessor for MLActionClassifier.DataSource);
            uint64_t v39 = v38;
            uint64_t v26 = (uint64_t)v50;
            outlined init with take of MLClassifierMetrics(v39, (uint64_t)v50, type metadata accessor for MLActionClassifier.DataSource);
            uint64_t v25 = v55;
            goto LABEL_8;
          }
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v33, &demangling cache variable for type metadata for MLActionClassifier.DataSource?);
          uint64_t v27 = 1;
          uint64_t v4 = v53;
LABEL_11:
          uint64_t v25 = v55;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v4 = v53;
      goto LABEL_24;
    }
    uint64_t v43 = v22;
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x756F735F61746164, 0xEB00000000656372, v22, v23, 0))
    {
      char v29 = v23;
      goto LABEL_18;
    }
    if (v43 == 0x74696C7073 && v23 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0);
      uint64_t v4 = v53;
      uint64_t v6 = v52;
      goto LABEL_30;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696C7073, 0xE500000000000000, v43, v23, 0);
    swift_bridgeObjectRelease(v23);
    uint64_t v4 = v53;
    uint64_t v6 = v52;
    if (v34)
    {
LABEL_30:
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v35, 6))
        {
          MLSplitStrategy.init(dictionary:)(v48);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v25 = v55;
          if (!v46)
          {
            __int16 v36 = v45;
            uint64_t v26 = (uint64_t)v50;
            *(_OWORD *)uint64_t v50 = v44;
            *(unsigned char *)(v26 + 16) = v36;
            *(unsigned char *)(v26 + 17) = HIBYTE(v36) & 1;
            unsigned int v24 = 0;
            goto LABEL_8;
          }
LABEL_25:
          uint64_t v27 = 1;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
LABEL_24:
      uint64_t v25 = v55;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
      goto LABEL_25;
    }
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
    swift_bridgeObjectRelease(a1);
    uint64_t v27 = 1;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v5);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v23);
  unsigned int v24 = 2;
  uint64_t v25 = v55;
  uint64_t v26 = (uint64_t)v50;
LABEL_8:
  swift_storeEnumTagMultiPayload(v26, v25, v24);
  uint64_t v4 = v53;
  outlined init with take of MLClassifierMetrics(v26, v53, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  uint64_t v27 = 0;
  return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
}

uint64_t MLActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (!*(void *)(a1 + 16)
    || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x687469726F676C61, 0xE90000000000006DLL), (v4 & 1) == 0))
  {
    long long v10 = 0;
    long long v9 = 0;
    swift_bridgeObjectRelease(a1);
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v9);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v10 + 1))
  {
LABEL_9:
    uint64_t result = outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  uint64_t result = swift_dynamicCast(&v11, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_BYTE)result)
  {
LABEL_10:
    char v7 = 1;
    goto LABEL_11;
  }
  char v6 = v12;
  if (v11 != 0x6E63677473 || v12 != 0xE500000000000000)
  {
    char v7 = 0;
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E63677473, 0xE500000000000000, v11, v12, 0);
    uint64_t result = swift_bridgeObjectRelease(v6);
    if (v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t result = swift_bridgeObjectRelease(0);
  char v7 = 0;
LABEL_11:
  *uint64_t v2 = v7;
  return result;
}

NSURL *MLActionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v94 = v1;
  uint64_t v3 = v2;
  uint64_t v87 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  uint64_t v80 = &v75;
  uint64_t v77 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v77 - 8) + 64);
  char v8 = alloca(v7);
  long long v9 = alloca(v7);
  uint64_t v78 = &v75;
  uint64_t v93 = type metadata accessor for URL(0);
  uint64_t v95 = *(void *)(v93 - 8);
  int64_t v10 = *(void *)(v95 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v76 = &v75;
  uint64_t v13 = alloca(v10);
  int64_t v14 = alloca(v10);
  uint64_t v75 = (uint64_t)&v75;
  uint64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  uint64_t v89 = &v75;
  uint64_t v92 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  int64_t v17 = *(void *)(*(void *)(v92 - 8) + 64);
  int64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v86 = &v75;
  unint64_t v20 = alloca(v17);
  char v21 = alloca(v17);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v22, v98);
  *(void *)(inited + 16) = 8;
  *(void *)(inited + 24) = 16;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v24 = MLActionClassifier.DataSource.dictionary.getter();
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 72) = v88;
  *(void *)(inited + 48) = v24;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v25 = (int *)type metadata accessor for MLActionClassifier.PersistentParameters(0);
  uint64_t v79 = v3 + v25[5];
  outlined init with copy of MLTrainingSessionParameters(v79, (uint64_t)&v75, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  uint64_t v81 = v25[6];
  uint64_t v26 = *(void *)(v3 + v81);
  uint64_t v82 = v25[7];
  uint64_t v27 = *(void *)(v3 + v82);
  uint64_t v83 = v25[8];
  uint64_t v28 = *(void *)(v3 + v83);
  uint64_t v84 = v25[10];
  uint64_t v29 = *(void *)(v3 + v84);
  uint64_t v85 = v25[9];
  uint64_t v30 = *(void *)(v3 + v85);
  uint64_t v31 = (int *)v92;
  *(uint64_t *)((char *)&v75 + *(int *)(v92 + 20)) = v26;
  *(uint64_t *)((char *)&v75 + v31[6]) = v27;
  *(uint64_t *)((char *)&v75 + v31[7]) = v28;
  *(uint64_t *)((char *)&v75 + v31[8]) = v29;
  *(uint64_t *)((char *)&v75 + v31[10]) = v30;
  uint64_t v32 = MLActionClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v75, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  uint64_t v33 = v88;
  *(void *)(inited + 120) = v88;
  *(void *)(inited + 96) = v32;
  *(void *)(inited + 128) = 0x69735F6863746162;
  *(void *)(inited + 136) = 0xEA0000000000657ALL;
  uint64_t v34 = *(void *)(v3 + v81);
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v34;
  *(void *)(inited + 176) = 0x6D6172665F6D756ELL;
  *(void *)(inited + 184) = 0xEA00000000007365;
  uint64_t v35 = *(void *)(v3 + v83);
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v35;
  strcpy((char *)(inited + 224), "max_iterations");
  *(unsigned char *)(inited + 239) = -18;
  uint64_t v36 = *(void *)(v3 + v82);
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 240) = v36;
  *(void *)(inited + 272) = 0xD000000000000014;
  *(void *)(inited + 280) = "Empty training input." + 0x8000000000000000;
  uint64_t v37 = *(void *)(v3 + v84);
  *(void *)(inited + 312) = &type metadata for Int;
  *(void *)(inited + 288) = v37;
  *(void *)(inited + 320) = 0x687469726F676C61;
  *(void *)(inited + 328) = 0xE90000000000006DLL;
  uint64_t v38 = MLActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 360) = v33;
  *(void *)(inited + 336) = v38;
  *(void *)(inited + 368) = 0x7246746567726174;
  *(void *)(inited + 376) = 0xEF65746152656D61;
  uint64_t v88 = v3;
  __m128 v39 = (__m128)*(unint64_t *)(v3 + v85);
  *(void *)(inited + 408) = &type metadata for Double;
  *(void *)(inited + 384) = v39.i64[0];
  LOBYTE(inited) = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v40 = objc_opt_self(NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(inited);
  id v96 = 0;
  id v42 = [v40 dataWithPropertyList:isa format:200 options:0 error:&v96];
  id v43 = v42;

  id v44 = v96;
  if (!v43)
  {
    uint64_t v50 = v44;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v50, "dataWithPropertyList:format:options:error:", v51, v52, v53, v54);
    return __stack_chk_guard;
  }
  uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
  unint64_t v47 = v46;

  uint64_t v48 = (uint64_t)v89;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v49 = v94;
  Data.write(to:options:)(v48, 0, v45, v47);
  if (!v49)
  {
    uint64_t v91 = v45;
    unint64_t v90 = v47;
    uint64_t v94 = 0;
    uint64_t v95 = *(void *)(v95 + 8);
    *(double *)v39.i64 = ((double (*)(uint64_t, uint64_t))v95)(v48, v93);
    MLActionClassifier.DataSource.table.getter(v39);
    char v55 = v97;
    if (v97 == -1)
    {
      uint64_t v58 = v94;
    }
    else
    {
      uint64_t v89 = (uint64_t *)v96;
      v97 &= 1u;
      uint64_t v56 = v75;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      uint64_t v57 = v94;
      MLDataTable.write(to:)(v56);
      uint64_t v58 = v57;
      if (v57)
      {
        ((void (*)(uint64_t, uint64_t))v95)(v56, v93);
        outlined consume of Data._Representation(v91, v90);
        char v59 = v55;
        uint64_t v60 = (uint64_t)v89;
LABEL_15:
        outlined consume of MLDataTable?(v60, v59);
        return __stack_chk_guard;
      }
      ((void (*)(uint64_t, uint64_t))v95)(v56, v93);
      outlined consume of MLDataTable?((uint64_t)v89, v55);
    }
    uint64_t v61 = (uint64_t)v86;
    outlined init with copy of MLTrainingSessionParameters(v79, (uint64_t)v86, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    uint64_t v62 = *(void *)(v88 + v82);
    uint64_t v63 = *(void *)(v88 + v83);
    uint64_t v64 = *(void *)(v88 + v84);
    __m128 v65 = (__m128)*(unint64_t *)(v88 + v85);
    char v66 = (int *)v92;
    *(void *)(v61 + *(int *)(v92 + 20)) = *(void *)(v88 + v81);
    *(void *)(v61 + v66[6]) = v62;
    *(void *)(v61 + v66[7]) = v63;
    *(void *)(v61 + v66[8]) = v64;
    *(void *)(v61 + v66[10]) = v65.i64[0];
    uint64_t v67 = v61;
    uint64_t v68 = (uint64_t)v78;
    outlined init with copy of MLTrainingSessionParameters(v67, (uint64_t)v78, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v68, v77);
    uint64_t v70 = (uint64_t)v76;
    uint64_t v94 = v58;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v71 = (uint64_t)v80;
      outlined init with take of MLClassifierMetrics(v68, (uint64_t)v80, type metadata accessor for MLActionClassifier.DataSource);
      MLActionClassifier.DataSource.table.getter(v65);
      outlined destroy of MLActivityClassifier.ModelParameters(v71, type metadata accessor for MLActionClassifier.DataSource);
      id v72 = v96;
      char v73 = v97;
    }
    else
    {
      char v73 = -1;
      id v72 = 0;
    }
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v86, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    if (v73 == -1)
    {
      outlined consume of Data._Representation(v91, v90);
      return __stack_chk_guard;
    }
    id v96 = v72;
    char v97 = v73 & 1;
    uint64_t v92 = (uint64_t)v72;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
    MLDataTable.write(to:)(v70);
    ((void (*)(uint64_t, uint64_t))v95)(v70, v93);
    outlined consume of Data._Representation(v91, v90);
    char v59 = v73;
    uint64_t v60 = v92;
    goto LABEL_15;
  }
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v48, v93);
  outlined consume of Data._Representation(v45, v47);
  return __stack_chk_guard;
}

uint64_t MLActionClassifier.DataSource.dictionary.getter()
{
  uint64_t v82 = type metadata accessor for URL(0);
  uint64_t v81 = *(uint64_t **)(v82 - 8);
  int64_t v1 = v81[8];
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  int64_t v4 = alloca(v1);
  uint64_t v5 = alloca(v1);
  uint64_t v78 = &v56;
  char v6 = alloca(v1);
  int64_t v7 = alloca(v1);
  uint64_t v8 = type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v56, type metadata accessor for MLActionClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v56, v8))
  {
    case 0u:
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v13 = (char *)&v56 + v12[12];
      long long v73 = *(_OWORD *)((char *)&v56 + v12[16]);
      long long v72 = *(_OWORD *)((char *)&v56 + v12[20]);
      uint64_t v14 = v12[24];
      uint64_t v76 = *(uint64_t **)((char *)&v56 + v14);
      uint64_t v74 = *(uint64_t **)((char *)&v56 + v14 + 8);
      uint64_t v15 = v12[28];
      uint64_t v75 = *(uint64_t **)((char *)&v56 + v15);
      uint64_t v77 = *(uint64_t **)((char *)&v56 + v15 + 8);
      uint64_t v16 = (void (*)(uint64_t *, uint64_t *, uint64_t))v81[4];
      uint64_t v17 = v82;
      v16(&v56, &v56, v82);
      v16(v78, (uint64_t *)v13, v17);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v19 = swift_allocObject(v18, 272, 7);
      *(void *)(v19 + 16) = 5;
      *(void *)(v19 + 24) = 10;
      *(void *)(v19 + 32) = 1684957547;
      *(void *)(v19 + 40) = 0xE400000000000000;
      *(void *)(v19 + 72) = &type metadata for String;
      *(void *)(v19 + 48) = 0x726F746365726964;
      *(void *)(v19 + 56) = 0xE900000000000079;
      *(void *)(v19 + 80) = 1752457584;
      *(void *)(v19 + 88) = 0xE400000000000000;
      uint64_t v79 = &v56;
      uint64_t v20 = URL.path.getter(v18);
      *(void *)(v19 + 120) = &type metadata for String;
      *(void *)(v19 + 96) = v20;
      *(void *)(v19 + 104) = v21;
      *(void *)(v19 + 128) = 0x697461746F6E6E61;
      *(void *)(v19 + 136) = 0xEF656C69665F6E6FLL;
      *(void *)(v19 + 168) = v17;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v19 + 144));
      uint64_t v23 = v78;
      uint64_t v24 = v81;
      ((void (*)(void *, uint64_t *, uint64_t))v81[2])(boxed_opaque_existential_1, v78, v17);
      strcpy((char *)(v19 + 176), "video_column");
      *(unsigned char *)(v19 + 189) = 0;
      *(_WORD *)(v19 + 190) = -5120;
      *(void *)(v19 + 216) = &type metadata for String;
      *(_OWORD *)(v19 + 192) = v73;
      strcpy((char *)(v19 + 224), "label_column");
      *(unsigned char *)(v19 + 237) = 0;
      *(_WORD *)(v19 + 238) = -5120;
      *(void *)(v19 + 264) = &type metadata for String;
      *(_OWORD *)(v19 + 240) = v72;
      uint64_t v80 = Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      if (v74)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v76;
        uint64_t v70 = v74;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0xD000000000000011, (uint64_t)("labeled_video_data" + 0x8000000000000000));
      }
      if (v77)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v75;
        uint64_t v70 = v77;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0x656D69745F646E65, 0xEF6E6D756C6F635FLL);
      }
      uint64_t v25 = (void (*)(uint64_t *, uint64_t))v24[1];
      v25(v23, v17);
      v25(v79, v17);
      goto LABEL_19;
    case 1u:
      uint64_t v26 = v81;
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v81[4])(&v56, &v56, v82);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (void *)swift_initStackObject(v27, v68);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0xD000000000000013;
      uint64_t v29 = "session_id_column" + 0x8000000000000000;
      goto LABEL_9;
    case 2u:
      uint64_t v26 = v81;
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v81[4])(&v56, &v56, v82);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (void *)swift_initStackObject(v27, v67);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0x5F64656C6562616CLL;
      uint64_t v29 = (char *)0xED000073656C6966;
LABEL_9:
      inited[7] = v29;
      inited[10] = 1752457584;
      inited[11] = 0xE400000000000000;
      uint64_t v30 = URL.path.getter(v27);
      inited[15] = &type metadata for String;
      inited[12] = v30;
      inited[13] = v31;
      uint64_t v32 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      ((void (*)(uint64_t *, uint64_t))v26[1])(&v56, v82);
      return v32;
    case 3u:
      uint64_t v33 = v58;
      uint64_t v34 = v59;
      uint64_t v35 = v60;
      uint64_t v36 = v61;
      uint64_t v82 = v62;
      uint64_t v81 = v63;
      outlined consume of Result<_DataTable, Error>(v56, v57);
      goto LABEL_13;
    case 4u:
      uint64_t v81 = v58;
      uint64_t v37 = v59;
      uint64_t v82 = v60;
      uint64_t v78 = v61;
      uint64_t v77 = (uint64_t *)v62;
      uint64_t v38 = v63;
      uint64_t v79 = v64;
      __m128 v39 = v65;
      outlined consume of Result<_DataTable, Error>(v56, v57);
      goto LABEL_15;
    case 5u:
      uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      uint64_t v41 = v40[12];
      uint64_t v33 = *(uint64_t **)((char *)&v56 + v41);
      uint64_t v34 = *(uint64_t *)((char *)&v56 + v41 + 8);
      uint64_t v42 = v40[16];
      uint64_t v35 = *(uint64_t *)((char *)&v56 + v42);
      uint64_t v36 = *(uint64_t **)((char *)&v56 + v42 + 8);
      uint64_t v43 = v40[20];
      uint64_t v82 = *(uint64_t *)((char *)&v56 + v43);
      uint64_t v81 = *(uint64_t **)((char *)&v56 + v43 + 8);
      uint64_t v44 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v44 - 8) + 8))(&v56, v44);
LABEL_13:
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v46 = swift_initStackObject(v45, &v56);
      *(void *)(v46 + 16) = 4;
      *(void *)(v46 + 24) = 8;
      *(void *)(v46 + 32) = 1684957547;
      *(void *)(v46 + 40) = 0xE400000000000000;
      *(void *)(v46 + 72) = &type metadata for String;
      *(void *)(v46 + 48) = 0xD000000000000016;
      *(void *)(v46 + 56) = "start_time_column" + 0x8000000000000000;
      *(void *)(v46 + 80) = 0xD000000000000011;
      *(void *)(v46 + 88) = "labeled_keypoints_data" + 0x8000000000000000;
      *(void *)(v46 + 120) = &type metadata for String;
      *(void *)(v46 + 96) = v33;
      *(void *)(v46 + 104) = v34;
      strcpy((char *)(v46 + 128), "label_column");
      *(unsigned char *)(v46 + 141) = 0;
      *(_WORD *)(v46 + 142) = -5120;
      *(void *)(v46 + 168) = &type metadata for String;
      *(void *)(v46 + 144) = v35;
      *(void *)(v46 + 152) = v36;
      strcpy((char *)(v46 + 176), "feature_column");
      *(unsigned char *)(v46 + 191) = -18;
      *(void *)(v46 + 216) = &type metadata for String;
      *(void *)(v46 + 192) = v82;
      *(void *)(v46 + 200) = v81;
      uint64_t v32 = Dictionary.init(dictionaryLiteral:)(v46, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      break;
    case 6u:
      unint64_t v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v48 = v47[12];
      uint64_t v81 = *(uint64_t **)((char *)&v56 + v48);
      uint64_t v37 = *(uint64_t *)((char *)&v56 + v48 + 8);
      uint64_t v49 = v47[16];
      uint64_t v82 = *(uint64_t *)((char *)&v56 + v49);
      uint64_t v78 = *(uint64_t **)((char *)&v56 + v49 + 8);
      uint64_t v50 = v47[20];
      uint64_t v77 = *(uint64_t **)((char *)&v56 + v50);
      uint64_t v38 = *(uint64_t **)((char *)&v56 + v50 + 8);
      uint64_t v51 = v47[24];
      uint64_t v79 = *(uint64_t **)((char *)&v56 + v51);
      __m128 v39 = *(uint64_t **)((char *)&v56 + v51 + 8);
      uint64_t v52 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v52 - 8) + 8))(&v56, v52);
LABEL_15:
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v54 = swift_initStackObject(v53, v66);
      *(void *)(v54 + 16) = 3;
      *(void *)(v54 + 24) = 6;
      *(void *)(v54 + 32) = 1684957547;
      *(void *)(v54 + 40) = 0xE400000000000000;
      *(void *)(v54 + 72) = &type metadata for String;
      *(void *)(v54 + 48) = 0xD000000000000012;
      *(void *)(v54 + 56) = "augmentation_options" + 0x8000000000000000;
      strcpy((char *)(v54 + 80), "video_column");
      *(unsigned char *)(v54 + 93) = 0;
      *(_WORD *)(v54 + 94) = -5120;
      *(void *)(v54 + 120) = &type metadata for String;
      *(void *)(v54 + 96) = v81;
      *(void *)(v54 + 104) = v37;
      strcpy((char *)(v54 + 128), "label_column");
      *(unsigned char *)(v54 + 141) = 0;
      *(_WORD *)(v54 + 142) = -5120;
      *(void *)(v54 + 168) = &type metadata for String;
      *(void *)(v54 + 144) = v82;
      *(void *)(v54 + 152) = v78;
      uint64_t v80 = Dictionary.init(dictionaryLiteral:)(v54, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      if (v38)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v77;
        uint64_t v70 = v38;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0xD000000000000011, (uint64_t)("labeled_video_data" + 0x8000000000000000));
      }
      if (v39)
      {
        uint64_t v71 = &type metadata for String;
        uint64_t v69 = v79;
        uint64_t v70 = v39;
        specialized Dictionary.subscript.setter((uint64_t)&v69, 0x656D69745F646E65, 0xEF6E6D756C6F635FLL);
      }
LABEL_19:
      uint64_t v32 = v80;
      break;
  }
  return v32;
}

uint64_t MLActionClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  int64_t v1 = *(void *)(*(void *)(type metadata accessor for MLActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  char v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v23, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v23, v4);
  if (!EnumCaseMultiPayload)
  {
    char v13 = v24;
    char v14 = v25;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    long long v31 = v23;
    uint64_t inited = (void *)swift_initStackObject(v15, &v23);
    inited[2] = 2;
    inited[3] = 4;
    inited[4] = 1684957547;
    inited[5] = 0xE400000000000000;
    inited[9] = &type metadata for String;
    inited[6] = 0x74696C7073;
    inited[7] = 0xE500000000000000;
    inited[10] = 1635017060;
    inited[11] = 0xE400000000000000;
    long long v28 = v31;
    char v29 = v13;
    char v30 = v14;
    uint64_t v17 = MLSplitStrategy.dictionary.getter();
    inited[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[12] = v17;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = inited;
    return Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, v18, &protocol witness table for String);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v21 = (void *)swift_initStackObject(v20, v27);
    v21[2] = 1;
    v21[3] = 2;
    v21[4] = 1684957547;
    v21[5] = 0xE400000000000000;
    v21[9] = &type metadata for String;
    v21[6] = 1701736302;
    v21[7] = 0xE400000000000000;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = v21;
    return Dictionary.init(dictionaryLiteral:)(v19, &type metadata for String, v18, &protocol witness table for String);
  }
  outlined init with take of MLClassifierMetrics((uint64_t)&v23, (uint64_t)&v23, type metadata accessor for MLActionClassifier.DataSource);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  int64_t v10 = (void *)swift_initStackObject(v9, v26);
  v10[2] = 2;
  v10[3] = 4;
  v10[4] = 1684957547;
  v10[5] = 0xE400000000000000;
  v10[9] = &type metadata for String;
  v10[6] = 0x756F735F61746164;
  v10[7] = 0xEB00000000656372;
  v10[10] = 1635017060;
  v10[11] = 0xE400000000000000;
  uint64_t v11 = MLActionClassifier.DataSource.dictionary.getter();
  v10[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v10[12] = v11;
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v23, type metadata accessor for MLActionClassifier.DataSource);
  return v12;
}

uint64_t MLActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = (void *)swift_initStackObject(v0, v3);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = 0x687469726F676C61;
  inited[5] = 0xE90000000000006DLL;
  inited[9] = &type metadata for String;
  inited[6] = 0x6E63677473;
  inited[7] = 0xE500000000000000;
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

void *MLActionClassifier.DataSource.table.getter(__m128 a1)
{
  uint64_t v91 = v2;
  uint64_t v92 = v1;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v3 = *(void *)(v80 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  int64_t v5 = alloca(v4);
  char v6 = alloca(v4);
  uint64_t v74 = &v72;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  long long v73 = &v72;
  uint64_t v82 = type metadata accessor for AnyColumn(0);
  uint64_t v79 = *(void *)(v82 - 8);
  int64_t v10 = *(void *)(v79 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v75 = &v72;
  char v13 = alloca(v10);
  char v14 = alloca(v10);
  uint64_t v83 = &v72;
  uint64_t v15 = type metadata accessor for DataFrame(0);
  uint64_t v85 = *(void *)(v15 - 8);
  int64_t v16 = *(void *)(v85 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v87 = &v72;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v86 = &v72;
  uint64_t v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  long long v23 = alloca(v16);
  char v24 = alloca(v16);
  unint64_t v90 = &v72;
  uint64_t v25 = type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
  uint64_t v27 = alloca(v26);
  long long v28 = alloca(v26);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v91, (uint64_t)&v72, type metadata accessor for MLActionClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v72, v25))
  {
    case 0u:
      char v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      long long v31 = (char *)&v72 + v30[12];
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[16] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[20] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[24] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v30[28] + 8));
      uint64_t v32 = type metadata accessor for URL(0);
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8);
      v33(v31, v32);
      v33((char *)&v72, v32);
      goto LABEL_15;
    case 1u:
    case 2u:
      uint64_t v29 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v29 - 8) + 8))(&v72, v29);
LABEL_15:
      uint64_t result = v92;
      *uint64_t v92 = 0;
      *((unsigned char *)result + 8) = -1;
      return result;
    case 3u:
      uint64_t v34 = v72;
      char v35 = (char)v73;
      char v36 = v77;
      char v37 = v79;
      swift_bridgeObjectRelease((_BYTE)v75);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      uint64_t v88 = v34;
      char v89 = v35 & 1;
      outlined copy of Result<_DataTable, Error>(v34, v35);
      static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v88, 0x746E696F7079656BLL, (void *)0xE900000000000073, *(double *)a1.i64);
      outlined consume of Result<_DataTable, Error>(v34, v35);
      goto LABEL_10;
    case 4u:
      uint64_t v38 = v72;
      LOBYTE(v91) = (_BYTE)v73;
      char v39 = v77;
      char v40 = v79;
      char v41 = v81;
      swift_bridgeObjectRelease((_BYTE)v75);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v40);
      uint64_t result = v92;
      *uint64_t v92 = v38;
      *((unsigned char *)result + 8) = (_BYTE)v91;
      return result;
    case 5u:
      uint64_t v81 = v3;
      uint64_t v87 = &v72;
      uint64_t v43 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v43[12] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v43[16] + 8));
      uint64_t v44 = v43[20];
      uint64_t v45 = *(uint64_t *)((char *)&v72 + v44);
      uint64_t v46 = *(void **)((char *)&v72 + v44 + 8);
      uint64_t v86 = (uint64_t *)v15;
      uint64_t v47 = v15;
      uint64_t v48 = v45;
      uint64_t v49 = v85;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v85 + 32))(v90, &v72, v47);
      uint64_t v50 = v83;
      uint64_t v84 = v48;
      uint64_t v91 = v46;
      DataFrame.subscript.getter(v48, v46);
      uint64_t v51 = (void *)AnyColumn.wrappedElementType.getter();
      uint64_t v52 = *(void (**)(uint64_t *, uint64_t))(v79 + 8);
      v52(v50, v82);
      if (v51 == &type metadata for String)
      {
        uint64_t v76 = v52;
        uint64_t v61 = v74;
        DataFrame.subscript.getter(v84, v91, &type metadata for String);
        uint64_t v62 = (uint64_t)v73;
        Column<A>.parseAsJSONArrays()();
        (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v61, v80);
        uint64_t v65 = v82;
        __swift_storeEnumTagSinglePayload(v62, 0, 1, v82);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v62, 1, v65);
        char v55 = v90;
        if (EnumTagSinglePayload == 1)
        {
          uint64_t v67 = v62;
          uint64_t v56 = (uint64_t)v87;
          uint64_t v54 = v86;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v67, &demangling cache variable for type metadata for AnyColumn?);
          uint64_t v53 = v85;
        }
        else
        {
          uint64_t v68 = v75;
          uint64_t v69 = v79;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v79 + 32))(v75, v62, v65);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v69 + 16))(v83, v68, v65);
          uint64_t v70 = v91;
          swift_bridgeObjectRetain((_BYTE)v91);
          DataFrame.subscript.setter(v83, v84, v70);
          char v55 = v90;
          v76(v68, v65);
          uint64_t v56 = (uint64_t)v87;
          uint64_t v53 = v85;
          uint64_t v54 = v86;
        }
      }
      else
      {
        uint64_t v53 = v49;
        uint64_t v54 = v86;
        char v55 = v90;
        uint64_t v56 = (uint64_t)v87;
      }
      *(double *)a1.i64 = (*(double (**)(uint64_t, uint64_t *, uint64_t *))(v53 + 16))(v56, v55, v54);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v56, 0, a1);
      uint64_t v88 = v77;
      char v89 = v78;
      char v71 = (char)v91;
      static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(&v88, v84, v91, *(double *)a1.i64);
      (*(void (**)(uint64_t *, uint64_t *))(v53 + 8))(v55, v54);
      swift_bridgeObjectRelease(v71);
      uint64_t v64 = v92;
      uint64_t result = (void *)v88;
      char v63 = v89;
      goto LABEL_16;
    case 6u:
      char v57 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[12] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[16] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[20] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v72 + v57[24] + 8));
      uint64_t v58 = v86;
      uint64_t v59 = v85;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v85 + 32))(v86, &v72, v15);
      uint64_t v60 = (uint64_t)v87;
      *(double *)a1.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v59 + 16))(v87, v58, v15);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v60, 0, a1);
      (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v58, v15);
LABEL_10:
      uint64_t result = (void *)v88;
      char v63 = v89;
      uint64_t v64 = v92;
LABEL_16:
      *uint64_t v64 = (uint64_t)result;
      *((unsigned char *)v64 + 8) = v63;
      return result;
  }
}

uint64_t type metadata completion function for Either(uint64_t a1)
{
  uint64_t v1 = swift_checkMetadataState(319, *(void *)(a1 + 16));
  uint64_t v2 = v1;
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v1 - 8) + 64;
    uint64_t v2 = swift_checkMetadataState(319, *(void *)(a1 + 24));
    if (v6 <= 0x3F)
    {
      v8[1] = *(void *)(v2 - 8) + 64;
      uint64_t v2 = 0;
      swift_initEnumMetadataMultiPayload(a1, 0, 2, v8, v4, v5);
    }
  }
  return v2;
}

void *initializeBufferWithCopyOfBuffer for Either(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v4 - 8);
  if (*(void *)(v7 + 64) > v6) {
    unint64_t v6 = *(void *)(v7 + 64);
  }
  unsigned int v8 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v7 + 80));
  if (v8 > 7 || v6 + 1 > 0x18 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *a1 = *(void *)a2;
    swift_retain(v12);
    return (void *)(v12 + ((v8 + 16) & ~v8));
  }
  else
  {
    unsigned int v9 = a2[v6];
    if (v9 >= 2)
    {
      uint64_t v10 = 4;
      if (v6 < 4) {
        uint64_t v10 = v6;
      }
      switch(v10)
      {
        case 0:
          break;
        case 1:
          int v11 = *a2;
          goto LABEL_15;
        case 2:
          int v11 = *(unsigned __int16 *)a2;
          goto LABEL_15;
        case 3:
          int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_15;
        case 4:
          int v11 = *(_DWORD *)a2;
LABEL_15:
          if (v6 < 4) {
            v11 |= (v9 - 2) << (8 * v6);
          }
          unsigned int v9 = v11 + 2;
          break;
      }
    }
    if (v9 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v4);
      *((unsigned char *)a1 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)a1 + v6) = 0;
    }
  }
  return a1;
}

uint64_t destroy for Either(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v3 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(v4 - 8);
  if (*(void *)(v7 + 64) > v6) {
    unint64_t v6 = *(void *)(v7 + 64);
  }
  unsigned int v8 = a1[v6];
  if (v8 >= 2)
  {
    uint64_t v9 = 4;
    if (v6 < 4) {
      uint64_t v9 = v6;
    }
    switch(v9)
    {
      case 0:
        break;
      case 1:
        int v10 = *a1;
        goto LABEL_11;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_11;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_11;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_11:
        if (v6 < 4) {
          v10 |= (v8 - 2) << (8 * v6);
        }
        unsigned int v8 = v10 + 2;
        break;
    }
  }
  if (v8 == 1)
  {
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v3 = v4;
  }
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v3);
}

uint64_t initializeWithCopy for Either(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(v5 - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  unsigned int v10 = a2[v7];
  if (v10 >= 2)
  {
    uint64_t v11 = 4;
    if (v7 < 4) {
      uint64_t v11 = v7;
    }
    switch(v11)
    {
      case 0:
        break;
      case 1:
        int v12 = *a2;
        goto LABEL_11;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_11;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_11;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_11:
        if (v7 < 4) {
          v12 |= (v10 - 2) << (8 * v7);
        }
        unsigned int v10 = v12 + 2;
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v4 = v5;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v4);
  *(unsigned char *)(a1 + v7) = v10 == 1;
  return a1;
}

unsigned __int8 *assignWithCopy for Either(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v4 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(void *)(v5 - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(v8 + 64);
    }
    unsigned int v9 = a1[v7];
    uint64_t v10 = 4;
    if (v9 < 2)
    {
LABEL_8:
      int v12 = a2;
    }
    else
    {
      uint64_t v11 = v7;
      if (v7 >= 4) {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 0:
          goto LABEL_8;
        case 1:
          int v13 = *a1;
          break;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          break;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
          int v13 = *(_DWORD *)a1;
          break;
      }
      int v12 = a2;
      if (v7 < 4) {
        v13 |= (v9 - 2) << (8 * v7);
      }
      uint64_t v10 = (v13 + 2);
      unsigned int v9 = v10;
    }
    BOOL v14 = v9 == 1;
    uint64_t v15 = *(void *)(v4 - 8);
    uint64_t v24 = *(void *)(v5 - 8);
    if (v14) {
      uint64_t v15 = *(void *)(v5 - 8);
    }
    uint64_t v16 = v4;
    if (v14) {
      uint64_t v16 = v5;
    }
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 8))(a1, v16, v10);
    uint64_t v17 = v12;
    unsigned int v18 = v12[v7];
    if (v18 < 2)
    {
LABEL_24:
      uint64_t v20 = v5;
      uint64_t v21 = v24;
    }
    else
    {
      uint64_t v19 = 4;
      if (v7 < 4) {
        uint64_t v19 = v7;
      }
      switch(v19)
      {
        case 0:
          goto LABEL_24;
        case 1:
          int v22 = *v17;
          break;
        case 2:
          int v22 = *(unsigned __int16 *)v17;
          break;
        case 3:
          int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          break;
        case 4:
          int v22 = *(_DWORD *)v17;
          break;
      }
      uint64_t v20 = v5;
      uint64_t v21 = v24;
      if (v7 < 4) {
        v22 |= (v18 - 2) << (8 * v7);
      }
      unsigned int v18 = v22 + 2;
    }
    if (v18 == 1)
    {
      uint64_t v6 = v21;
      uint64_t v4 = v20;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, v17, v4);
    a1[v7] = v18 == 1;
  }
  return a1;
}

uint64_t initializeWithTake for Either(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(v5 - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  unsigned int v10 = a2[v7];
  if (v10 >= 2)
  {
    uint64_t v11 = 4;
    if (v7 < 4) {
      uint64_t v11 = v7;
    }
    switch(v11)
    {
      case 0:
        break;
      case 1:
        int v12 = *a2;
        goto LABEL_11;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_11;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_11;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_11:
        if (v7 < 4) {
          v12 |= (v10 - 2) << (8 * v7);
        }
        unsigned int v10 = v12 + 2;
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v4 = v5;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v4);
  *(unsigned char *)(a1 + v7) = v10 == 1;
  return a1;
}

unsigned __int8 *assignWithTake for Either(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v4 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(void *)(v5 - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(v8 + 64);
    }
    unsigned int v9 = a1[v7];
    uint64_t v10 = 4;
    if (v9 < 2)
    {
LABEL_8:
      int v12 = a2;
    }
    else
    {
      uint64_t v11 = v7;
      if (v7 >= 4) {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 0:
          goto LABEL_8;
        case 1:
          int v13 = *a1;
          break;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          break;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
          int v13 = *(_DWORD *)a1;
          break;
      }
      int v12 = a2;
      if (v7 < 4) {
        v13 |= (v9 - 2) << (8 * v7);
      }
      uint64_t v10 = (v13 + 2);
      unsigned int v9 = v10;
    }
    BOOL v14 = v9 == 1;
    uint64_t v15 = *(void *)(v4 - 8);
    uint64_t v24 = *(void *)(v5 - 8);
    if (v14) {
      uint64_t v15 = *(void *)(v5 - 8);
    }
    uint64_t v16 = v4;
    if (v14) {
      uint64_t v16 = v5;
    }
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 8))(a1, v16, v10);
    uint64_t v17 = v12;
    unsigned int v18 = v12[v7];
    if (v18 < 2)
    {
LABEL_24:
      uint64_t v20 = v5;
      uint64_t v21 = v24;
    }
    else
    {
      uint64_t v19 = 4;
      if (v7 < 4) {
        uint64_t v19 = v7;
      }
      switch(v19)
      {
        case 0:
          goto LABEL_24;
        case 1:
          int v22 = *v17;
          break;
        case 2:
          int v22 = *(unsigned __int16 *)v17;
          break;
        case 3:
          int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          break;
        case 4:
          int v22 = *(_DWORD *)v17;
          break;
      }
      uint64_t v20 = v5;
      uint64_t v21 = v24;
      if (v7 < 4) {
        v22 |= (v18 - 2) << (8 * v7);
      }
      unsigned int v18 = v22 + 2;
    }
    if (v18 == 1)
    {
      uint64_t v6 = v21;
      uint64_t v4 = v20;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, v17, v4);
    a1[v7] = v18 == 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Either(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  if ((v3 + 1) > 3)
  {
LABEL_6:
    int v5 = a1[v4];
    goto LABEL_14;
  }
  unsigned int v7 = ((~(-1 << (8 * v4)) + a2 - 254) >> (8 * v4)) + 1;
  if (v7 > 0xFFFF)
  {
    int v5 = *(_DWORD *)&a1[v4];
  }
  else
  {
    if (v7 <= 0xFF)
    {
      if (v7 < 2) {
        goto LABEL_22;
      }
      goto LABEL_6;
    }
    int v5 = *(unsigned __int16 *)&a1[v4];
  }
LABEL_14:
  if (v5)
  {
    int v8 = (v5 - 1) << (8 * v4);
    int v9 = 0;
    if (v4 >= 4) {
      int v8 = 0;
    }
    if (v4)
    {
      int v10 = 4;
      if (v4 < 4) {
        int v10 = v4;
      }
      switch(v10)
      {
        case 1:
          int v9 = *a1;
          break;
        case 2:
          int v9 = *(unsigned __int16 *)a1;
          break;
        case 3:
          int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
          int v9 = *(_DWORD *)a1;
          break;
      }
    }
    return (v8 | v9) + 255;
  }
LABEL_22:
  unsigned int v11 = a1[v3];
  uint64_t result = 0;
  if (v11 >= 2) {
    return (v11 ^ 0xFF) + 1;
  }
  return result;
}

unint64_t storeEnumTagSinglePayload for Either(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t result = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v5 > result) {
    unint64_t result = v5;
  }
  unint64_t v6 = result + 1;
  unsigned int v7 = 0;
  if (a3 >= 0xFF)
  {
    if (v6 > 3)
    {
      int v12 = 1;
LABEL_11:
      unsigned int v7 = v12;
      goto LABEL_12;
    }
    unsigned int v8 = ((~(-1 << (8 * v6)) + a3 - 254) >> (8 * v6)) + 1;
    if (v8 > 0xFFFF)
    {
      int v12 = 4;
      goto LABEL_11;
    }
    unsigned int v7 = 2;
    if (v8 < 0x100) {
      unsigned int v7 = v8 >= 2;
    }
  }
LABEL_12:
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v6 >= 4)
    {
      int v10 = 1;
      __bzero(a1, result + 1);
      *(_DWORD *)a1 = v9;
      unint64_t result = v7;
      switch(v7)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_28;
        case 2u:
          goto LABEL_30;
        case 3u:
          goto LABEL_32;
        case 4u:
          goto LABEL_29;
      }
    }
    int v10 = (v9 >> (8 * v6)) + 1;
    if (result != -1)
    {
      int v11 = ~(-1 << (8 * v6)) & v9;
      unint64_t result = __bzero(a1, result + 1);
      if (v6 != 3)
      {
        if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
          switch(v7)
          {
            case 0u:
              return result;
            case 1u:
              goto LABEL_28;
            case 2u:
              goto LABEL_30;
            case 3u:
              goto LABEL_32;
            case 4u:
              goto LABEL_29;
          }
        }
        *(unsigned char *)a1 = v11;
        switch(v7)
        {
          case 0u:
            return result;
          case 1u:
            goto LABEL_28;
          case 2u:
            goto LABEL_30;
          case 3u:
            goto LABEL_32;
          case 4u:
            goto LABEL_29;
        }
      }
      *(_WORD *)a1 = v11;
      *(unsigned char *)(a1 + 2) = BYTE2(v11);
      switch(v7)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_28;
        case 2u:
          goto LABEL_30;
        case 3u:
          goto LABEL_32;
        case 4u:
          goto LABEL_29;
      }
    }
    switch(v7)
    {
      case 0u:
        return result;
      case 1u:
LABEL_28:
        *(unsigned char *)(a1 + v6) = v10;
        break;
      case 2u:
LABEL_30:
        *(_WORD *)(a1 + v6) = v10;
        break;
      case 3u:
LABEL_32:
        BUG();
      case 4u:
LABEL_29:
        *(_DWORD *)(a1 + v6) = v10;
        break;
    }
  }
  else
  {
    switch(v7)
    {
      case 0u:
        goto LABEL_23;
      case 1u:
        *(unsigned char *)(a1 + v6) = 0;
        goto LABEL_23;
      case 2u:
        *(_WORD *)(a1 + v6) = 0;
        goto LABEL_23;
      case 3u:
        goto LABEL_32;
      case 4u:
        *(_DWORD *)(a1 + v6) = 0;
LABEL_23:
        if (a2) {
          *(unsigned char *)(a1 + result) = -(char)a2;
        }
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for Either(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64) > v2) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  }
  uint64_t result = a1[v2];
  if (result >= 2)
  {
    uint64_t v4 = 4;
    if (v2 < 4) {
      uint64_t v4 = v2;
    }
    switch(v4)
    {
      case 0:
        return result;
      case 1:
        int v5 = *a1;
        goto LABEL_11;
      case 2:
        int v5 = *(unsigned __int16 *)a1;
        goto LABEL_11;
      case 3:
        int v5 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_11;
      case 4:
        int v5 = *(_DWORD *)a1;
LABEL_11:
        if (v2 < 4) {
          v5 |= (result - 2) << (8 * v2);
        }
        uint64_t result = (v5 + 2);
        break;
    }
  }
  return result;
}

unint64_t destructiveInjectEnumTag for Either(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v4 = *(void *)(a3 + 24);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(*(void *)(v4 - 8) + 64) > v5) {
      unint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
    }
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      int v7 = v6 & ~(-1 << (8 * v5));
      *(unsigned char *)(a1 + v5) = (v6 >> (8 * v5)) + 2;
      unint64_t result = __bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v7;
        *(unsigned char *)(a1 + 2) = BYTE2(v7);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *(unsigned char *)a1 = v7;
      }
    }
    else
    {
      *(unsigned char *)(a1 + v5) = 2;
      unint64_t result = __bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    unint64_t result = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > result) {
      unint64_t result = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    }
    *(unsigned char *)(a1 + result) = a2;
  }
  return result;
}

uint64_t type metadata accessor for Either(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Either);
}

void *initializeBufferWithCopyOfBuffer for MLActivityClassifier.Configuration(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v12 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v5 = a2[5];
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v6 = a2[7];
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = a2[8];
    uint64_t v19 = a2[9];
    *(void *)(a1 + 72) = v19;
    uint64_t v7 = *(int *)(a3 + 44);
    __dst = (void *)(a1 + v7);
    unsigned int v8 = (char *)a2 + v7;
    char v9 = v5;
    uint64_t v10 = type metadata accessor for DataFrame(0);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v19);
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(__dst, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(__dst, v8, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v10);
    }
    uint64_t v13 = *(int *)(a3 + 48);
    BOOL v14 = (char *)v3 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v13, 1, v10))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v14, v15, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for MLActivityClassifier.Configuration(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  uint64_t v2 = (uint64_t)a1 + *(int *)(a2 + 44);
  uint64_t v3 = type metadata accessor for DataFrame(0);
  if (!__swift_getEnumTagSinglePayload(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  }
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 48);
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v3);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for MLActivityClassifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v14;
  uint64_t v5 = *(int *)(a3 + 44);
  __dst = (void *)(a1 + v5);
  uint64_t v6 = (const void *)(a2 + v5);
  uint64_t v15 = type metadata accessor for DataFrame(0);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v14);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v15))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(__dst, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v6, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v15);
  }
  uint64_t v8 = *(int *)(a3 + 48);
  char v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(v8 + a2);
  if (__swift_getEnumTagSinglePayload(v8 + a2, 1, v15))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for MLActivityClassifier.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  long long v28 = a3;
  uint64_t v11 = a3[11];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DataFrame(0);
  __dst = (void *)v12;
  LODWORD(v12) = __swift_getEnumTagSinglePayload(v12, 1, v14);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (v12)
  {
    if (EnumTagSinglePayload)
    {
      size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v17 = __dst;
LABEL_6:
      memcpy(v17, v13, v16);
      goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(__dst, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v14);
  }
  else
  {
    uint64_t v18 = *(void *)(v14 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v18 + 8))(__dst, v14);
      size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v17 = __dst;
      goto LABEL_6;
    }
    (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(__dst, v13, v14);
  }
LABEL_9:
  uint64_t v19 = v28[12];
  uint64_t v20 = (const void *)(v19 + a2);
  uint64_t v29 = (void *)(a1 + v19);
  int v21 = __swift_getEnumTagSinglePayload(a1 + v19, 1, v14);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v29, v20, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v14);
      return a1;
    }
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    uint64_t v24 = v29;
  }
  else
  {
    uint64_t v25 = *(void *)(v14 - 8);
    if (!v22)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 24))(v29, v20, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v29, v14);
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    uint64_t v24 = v29;
  }
  memcpy(v24, v20, v23);
  return a1;
}

uint64_t initializeWithTake for MLActivityClassifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v3 = *(int *)(a3 + 44);
  uint64_t v4 = (void *)(a1 + v3);
  uint64_t v5 = (const void *)(a2 + v3);
  uint64_t v6 = type metadata accessor for DataFrame(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v4, v5, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(v4, v5, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 48);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(v8 + a2);
  if (__swift_getEnumTagSinglePayload(v8 + a2, 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  return a1;
}

uint64_t assignWithTake for MLActivityClassifier.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v7);
  uint64_t v25 = a3;
  uint64_t v8 = a3[11];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for DataFrame(0);
  __dst = (void *)v9;
  LODWORD(v9) = __swift_getEnumTagSinglePayload(v9, 1, v11);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (EnumTagSinglePayload)
    {
      size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v14 = __dst;
LABEL_6:
      memcpy(v14, v10, v13);
      goto LABEL_9;
    }
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v11);
  }
  else
  {
    uint64_t v15 = *(void *)(v11 - 8);
    if (EnumTagSinglePayload)
    {
      (*(void (**)(void *, uint64_t))(v15 + 8))(__dst, v11);
      size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                  - 8)
                      + 64);
      uint64_t v14 = __dst;
      goto LABEL_6;
    }
    (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(__dst, v10, v11);
  }
LABEL_9:
  uint64_t v16 = v25[12];
  uint64_t v17 = (const void *)(v16 + a2);
  int64_t v26 = (void *)(a1 + v16);
  int v18 = __swift_getEnumTagSinglePayload(a1 + v16, 1, v11);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v11);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v26, v17, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v11);
      return a1;
    }
    size_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    int v21 = v26;
  }
  else
  {
    uint64_t v22 = *(void *)(v11 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v26, v17, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v26, v11);
    size_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                                - 8)
                    + 64);
    int v21 = v26;
  }
  memcpy(v21, v17, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActivityClassifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1579A0);
}

uint64_t sub_1579A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*(void *)(a1 + 40) & 0xFFFFFFFF00000001) == 0) {
      return (*(void *)(a1 + 40) >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    return __swift_getEnumTagSinglePayload(*(int *)(a3 + 44) + a1, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLActivityClassifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_157A1E);
}

uint64_t sub_157A1E(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 40) = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    return __swift_storeEnumTagSinglePayload(*(int *)(a4 + 44) + a1, a2, a2, v5);
  }
  return result;
}

uint64_t type metadata accessor for MLActivityClassifier.Configuration(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLActivityClassifier.Configuration;
  if (!type metadata singleton initialization cache for MLActivityClassifier.Configuration) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLActivityClassifier.Configuration);
  }
  return result;
}

uint64_t type metadata completion function for MLActivityClassifier.Configuration(uint64_t a1)
{
  v3[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v3[1] = "\t";
  v3[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v3[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v3[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v3[5] = &unk_34C388;
  v3[6] = &unk_34C388;
  uint64_t result = type metadata accessor for DataFrame?(319);
  if (v2 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t v5 = v4;
    swift_initStructMetadata(a1, 256, 9, v3, a1 + 16);
    return 0;
  }
  return result;
}

MLModel __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> NLModel.asCoreML()()
{
  char v63 = v0;
  uint64_t v74 = (void *)type metadata accessor for UUID(0);
  uint64_t v64 = *(v74 - 1);
  int64_t v1 = *(void *)(v64 + 64);
  unint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v65 = &v62;
  uint64_t v4 = (void *)type metadata accessor for URL(0);
  uint64_t v69 = *(v4 - 1);
  int64_t v5 = *(void *)(v69 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  char v66 = &v62;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v70 = &v62;
  uint64_t v10 = alloca(v5);
  uint64_t v11 = alloca(v5);
  uint64_t v12 = alloca(v5);
  size_t v13 = alloca(v5);
  uint64_t v75 = &v62;
  uint64_t v14 = alloca(v5);
  uint64_t v15 = alloca(v5);
  uint64_t v72 = &v62;
  uint64_t v16 = objc_opt_self(NSFileManager);
  id v17 = [v16 defaultManager];
  id v73 = v17;
  NSFileManager.createTemporaryModelDirectory()();
  if (v18)
  {

    return (MLModel)v4;
  }
  uint64_t v68 = 0;
  NSFileManager.temporaryModelDirectory.getter();
  int v19 = v65;
  UUID.init()();
  uint64_t v67 = UUID.uuidString.getter();
  char v71 = v4;
  uint64_t v21 = v20;
  (*(void (**)(uint64_t *, void *))(v64 + 8))(v19, v74);
  URL.appendingPathComponent(_:)(v67, v21);
  swift_bridgeObjectRelease(v21);
  URL.appendingPathExtension(_:)(0x6C65646F6D6C6DLL, 0xE700000000000000);
  uint64_t v22 = *(uint64_t (**)(uint64_t *, void *))(v69 + 8);
  size_t v23 = (NSURL *)v22(&v62, v71);
  URL._bridgeToObjectiveC()(v23);
  uint64_t v25 = v24;
  uint64_t v26 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  id v76 = 0;
  uint64_t v27 = v26;
  char v28 = outlined bridged method (mnbnnn) of @objc NLModel.writeMLModel(to:options:)((uint64_t)v25, v26, (uint64_t)&v76, v63);

  id v29 = v76;
  if (!v28)
  {
    id v45 = v76;
    _convertNSErrorToError(_:)(v29);

    swift_willThrow(v45, v27, v46, v47, v48, v49);
    uint64_t v50 = v75;
    uint64_t v4 = v71;
    uint64_t v51 = v71;
LABEL_9:
    v22(v50, v51);
    v22(v72, v4);
    return (MLModel)v4;
  }
  uint64_t v74 = v22;
  char v30 = objc_opt_self(MLModel);
  long long v31 = (NSURL *)v29;
  URL._bridgeToObjectiveC()(v31);
  uint64_t v33 = v32;
  id v76 = 0;
  id v34 = [v30 compileModelAtURL:v32 error:&v76];
  id v35 = v34;

  id v36 = v76;
  if (!v35)
  {
    id v52 = v76;
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v52, "compileModelAtURL:error:", v53, v54, v55, v56);
    id v57 = v73;
    uint64_t v58 = v75;
    $defer #1 () in NLModel.asCoreML()(v73);

    uint64_t v50 = v58;
    uint64_t v4 = v71;
    uint64_t v51 = v71;
    uint64_t v22 = (uint64_t (*)(uint64_t *, void *))v74;
    goto LABEL_9;
  }
  char v37 = v70;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v36;

  type metadata accessor for NLModel(0, &lazy cache variable for type metadata for MLModel, MLModel_ptr);
  uint64_t v38 = (uint64_t)v66;
  char v39 = v71;
  (*(void (**)(uint64_t *, uint64_t *, void *))(v69 + 16))(v66, v37, v71);
  uint64_t v40 = v68;
  char v41 = @nonobjc MLModel.__allocating_init(contentsOf:)(v38);
  if (v40)
  {
    ((void (*)(uint64_t *, void *))v74)(v70, v39);
    id v42 = v73;
    uint64_t v43 = v75;
    $defer #1 () in NLModel.asCoreML()(v73);

    uint64_t v44 = v43;
    uint64_t v4 = v74;
    ((void (*)(uint64_t *, void *))v74)(v44, v39);
    ((void (*)(uint64_t *, void *))v4)(v72, v39);
  }
  else
  {
    uint64_t v4 = v41;
    ((void (*)(uint64_t *, void *))v74)(v70, v39);
    id v60 = v73;
    $defer #1 () in NLModel.asCoreML()(v73);

    uint64_t v61 = (void (*)(uint64_t *, void *))v74;
    ((void (*)(uint64_t *, void *))v74)(v75, v39);
    v61(v72, v39);
  }
  return (MLModel)v4;
}

uint64_t NLModel.write(to:defaultName:metadata:)(uint64_t a1, uint64_t a2, unint64_t a3, long long *a4)
{
  uint64_t v23 = v4;
  uint64_t v21 = v5;
  unint64_t v19 = a3;
  uint64_t v20 = a2;
  uint64_t v7 = type metadata accessor for URL(0);
  uint64_t v8 = *(void *)(v7 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  long long v15 = *a4;
  long long v16 = a4[1];
  long long v17 = a4[2];
  long long v18 = a4[3];
  uint64_t v22 = *((void *)a4 + 8);
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, a2, v19, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v4)
  {
    uint64_t v23 = v8;
    v13[0] = v15;
    v13[1] = v16;
    v13[2] = v17;
    v13[3] = v18;
    uint64_t v14 = v22;
    NLModel.writeModel(to:metadata:)((uint64_t)v13, (uint64_t)v13);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v23 + 8))(v13, v7);
  }
  return result;
}

uint64_t NLModel.write(toFile:defaultName:metadata:)(Swift::String a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v21 = v4;
  v22._object = v5;
  uint64_t string = (uint64_t)a1._object;
  v22._countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v23 = type metadata accessor for URL(0);
  uint64_t v9 = *(void *)(v23 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  long long v17 = *(_OWORD *)a4;
  long long v18 = *(_OWORD *)(a4 + 16);
  long long v19 = *(_OWORD *)(a4 + 32);
  long long v20 = *(_OWORD *)(a4 + 48);
  uint64_t v24 = *(void *)(a4 + 64);
  uint64_t v26 = v15;
  uint64_t string = a2;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, a2, a3);
  if (!v4)
  {
    uint64_t v14 = v23;
    v15[0] = v17;
    v15[1] = v18;
    v15[2] = v19;
    v15[3] = v20;
    uint64_t v16 = v24;
    NLModel.write(to:defaultName:metadata:)((uint64_t)v26, string, (unint64_t)a3, v15);
    return (*(uint64_t (**)(long long *, uint64_t))(v9 + 8))(v26, v14);
  }
  return result;
}

NSURL *$defer #1 () in NLModel.asCoreML()(id a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  unint64_t v2 = v1;
  id v8 = 0;
  unsigned __int8 v3 = [a1 removeItemAtURL:v1 error:&v8];

  id v4 = v8;
  if (v3) {
    return (NSURL *)v8;
  }
  id v6 = v8;
  uint64_t v7 = _convertNSErrorToError(_:)(v4);

  swift_willThrow();
  swift_errorRelease(v7);
  return __stack_chk_guard;
}

NSURL *NLModel.writeModel(to:metadata:)(uint64_t a1, uint64_t a2)
{
  id v23 = v2;
  unsigned __int8 v3 = __stack_chk_guard;
  id v4 = *(void **)(a2 + 8);
  if (v4)
  {
    uint64_t v22 = *(void *)(a2 + 64);
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v21 = *(_OWORD *)(a2 + 16);
    uint64_t v5 = *(void **)a2;
    type metadata accessor for NLModel(0, &lazy cache variable for type metadata for NLModel, NLModel_ptr);
    v24[0] = v5;
    v24[1] = v4;
    long long v25 = v21;
    long long v26 = *(_OWORD *)(a2 + 32);
    long long v27 = v20;
    uint64_t v28 = v22;
    unsigned __int8 v3 = (NSURL *)static NLModel.buildMetadataOptions(_:)((uint64_t *)v24);
    id v6 = v3;
  }
  else
  {
    id v6 = 0;
  }
  URL._bridgeToObjectiveC()(v3);
  uint64_t v9 = v8;
  if (v6)
  {
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((_BYTE)v6);
  }
  else
  {
    v10.super.Class isa = 0;
  }
  v24[0] = 0;
  uint64_t v11 = v9;
  unsigned __int8 v12 = [v23 writeMLModelToURL:v9 options:v10.super.isa error:v24];

  id v13 = v24[0];
  if (v12)
  {
    v24[0];
  }
  else
  {
    id v15 = v24[0];
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v15, "writeMLModelToURL:options:error:", v16, v17, v18, v19);
  }
  return __stack_chk_guard;
}

void *static NLModel.buildMetadataOptions(_:)(uint64_t *a1)
{
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v18 = a1[4];
  uint64_t v15 = a1[5];
  uint64_t v16 = a1[6];
  uint64_t v17 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v22 = _swiftEmptyDictionarySingleton;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MLModelDescriptionKey);
  uint64_t v20 = v3;
  AnyHashable.init<A>(_:)(&v19, &type metadata for String, &protocol witness table for String);
  long long v21 = &type metadata for String;
  uint64_t v19 = v1;
  uint64_t v20 = v2;
  swift_bridgeObjectRetain(v2);
  specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)v11);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MLModelVersionStringKey);
  uint64_t v20 = v4;
  AnyHashable.init<A>(_:)(&v19, &type metadata for String, &protocol witness table for String);
  long long v21 = &type metadata for String;
  uint64_t v19 = v16;
  uint64_t v20 = v17;
  uint64_t v5 = v15;
  swift_bridgeObjectRetain(v17);
  specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)v11);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MLModelAuthorKey);
  uint64_t v20 = v6;
  AnyHashable.init<A>(_:)(&v19, &type metadata for String, &protocol witness table for String);
  long long v21 = &type metadata for String;
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  swift_bridgeObjectRetain(v14);
  specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)v11);
  if (v5)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MLModelLicenseKey);
    uint64_t v20 = v7;
    swift_bridgeObjectRetain(v5);
    AnyHashable.init<A>(_:)(&v19, &type metadata for String, &protocol witness table for String);
    long long v21 = &type metadata for String;
    uint64_t v19 = v18;
    uint64_t v20 = v5;
    specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)v11);
  }
  uint64_t v8 = v12;
  if (v12)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MLModelCreatorDefinedKey);
    uint64_t v20 = v9;
    swift_bridgeObjectRetain(v8);
    AnyHashable.init<A>(_:)(&v19, &type metadata for String, &protocol witness table for String);
    long long v21 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    uint64_t v19 = v8;
    specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)v11);
  }
  return v22;
}

uint64_t outlined bridged method (mnbnnn) of @objc NLModel.writeMLModel(to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  LODWORD(a4) = [a4 writeMLModelToURL:a1 options:isa error:a3];

  return a4;
}

uint64_t type metadata accessor for NLModel(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v4);
    *a2 = result;
  }
  return result;
}

BOOL specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 & *v2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  BOOL result = v3 != a2;
  *a1 = a2;
  return result;
}

{
  return specialized OptionSet<>.insert(_:)(a1, a2);
}

void specialized OptionSet<>.formUnion(_:)(uint64_t a1)
{
  *v1 |= a1;
}

{
  specialized OptionSet<>.formUnion(_:)(a1);
}

uint64_t static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(unsigned char *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v35 = v4;
  uint64_t v5 = *(void *)a1;
  v38._object = a1;
  char v6 = a1[8];
  uint64_t v40 = v5;
  char v41 = v6;
  v38._countAndFlagsBits = a2;
  v7._countAndFlagsBits = a2;
  *(void *)&long long v36 = a3;
  v7._object = a3;
  MLDataTable.subscript.getter(v7);
  if (BYTE8(v37) == 1)
  {
    outlined consume of Result<_DataTable, Error>(v37, 1);
  }
  else
  {
    swift_retain();
    _UntypedColumn.type.getter();
    outlined consume of Result<_DataTable, Error>(v37, 0);
    outlined consume of Result<_DataTable, Error>(v37, 0);
    if ((_BYTE)v40 == 3)
    {
      *(void *)&long long v37 = v5;
      BYTE8(v37) = v6;
      v8._countAndFlagsBits = v38._countAndFlagsBits;
      v8._object = (void *)v36;
      MLDataTable.subscript.getter(v8);
      specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, v40, v41);
      outlined consume of Result<_DataTable, Error>(v40, v41);
      uint64_t v39 = v5;
      LOBYTE(v42) = v6;
      char v9 = *((unsigned char *)v38._object + 8);
      uint64_t v40 = *(void *)v38._object;
      char v41 = v9;
      v8._countAndFlagsBits = v38._countAndFlagsBits;
      v8._object = (void *)v36;
      MLDataTable.subscript.getter(v8);
      uint64_t v10 = v5;
      uint64_t v11 = -1;
      if (!v6)
      {
        swift_retain();
        uint64_t v11 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v10, 0);
      }
      outlined consume of Result<_DataTable, Error>(v10, v6);
      int v42 = v42;
      specialized MLDataColumn.dropMissing()(v39, v42);
      uint64_t v12 = -1;
      if (!v41)
      {
        outlined copy of Result<_DataTable, Error>(v40, 0);
        uint64_t v12 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v40, 0);
      }
      outlined consume of Result<_DataTable, Error>(v40, v41);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v14 = v11 - v12;
      if (v13) {
        BUG();
      }
      if (v14)
      {
        *(void *)&long long v37 = 0;
        *((void *)&v37 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(236);
        v15._countAndFlagsBits = 0xD00000000000003DLL;
        v15._object = "validation_confusion" + 0x8000000000000000;
        String.append(_:)(v15);
        uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v18 = (char)v17;
        v15._countAndFlagsBits = v16;
        v15._object = v17;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v18);
        v15._countAndFlagsBits = 0xD00000000000006BLL;
        v15._object = "mn into MLMultiArray format. " + 0x8000000000000000;
        String.append(_:)(v15);
        uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v21 = (char)v20;
        v15._countAndFlagsBits = v19;
        v15._object = v20;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v21);
        v15._object = (void *)0xE200000000000000;
        v15._countAndFlagsBits = 8236;
        String.append(_:)(v15);
        uint64_t v40 = 18;
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v24 = (char)v23;
        v15._countAndFlagsBits = v22;
        v15._object = v23;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v24);
        v15._object = "ld have a dimension of [1, " + 0x8000000000000000;
        v15._countAndFlagsBits = 0xD00000000000003CLL;
        String.append(_:)(v15);
        v15._object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v15._object, 0, 0);
        *(_OWORD *)uint64_t v25 = v37;
        *(_OWORD *)(v25 + 16) = 0;
        *(_OWORD *)(v25 + 32) = 0;
        *(unsigned char *)(v25 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v15._object, v25, v26, v27, v28);
        return outlined consume of Result<_DataTable, Error>(v39, v42);
      }
      swift_bridgeObjectRetain(v36);
      specialized MLDataTable.subscript.setter(v39, v42, v38._countAndFlagsBits, v36);
    }
  }
  char v30 = *((unsigned char *)v38._object + 8);
  *(void *)&long long v37 = *(void *)v38._object;
  BYTE8(v37) = v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v31, v34);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v38._countAndFlagsBits;
  char v33 = v36;
  inited[5] = v36;
  LOBYTE(v40) = 5;
  swift_bridgeObjectRetain(v33);
  static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v37, (unint64_t)inited, (char *)&v40, a4);
  swift_setDeallocating(inited);
  return specialized _ContiguousArrayStorage.__deallocating_deinit();
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger(0);
  __swift_allocate_value_buffer(v0, static MLActionClassifier.logger);
  __swift_project_value_buffer(v0, (uint64_t)static MLActionClassifier.logger);
  return Logger.init(subsystem:category:)(0xD000000000000012, "Target Frame Rate" + 0x8000000000000000, 0xD000000000000012, &unk_34C420 + 0x8000000000000000);
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger(0);
  __swift_allocate_value_buffer(v0, static MLHandActionClassifier.logger);
  __swift_project_value_buffer(v0, (uint64_t)static MLHandActionClassifier.logger);
  return Logger.init(subsystem:category:)(0xD000000000000012, "Target Frame Rate" + 0x8000000000000000, 0xD000000000000016, &unk_34D5F0 + 0x8000000000000000);
}

uint64_t static MLActionClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLActionClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

id MLActionClassifier.model.getter()
{
  return *(id *)(*(void *)v0 + 24);
}

uint64_t MLActionClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLActionClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 20), v2, type metadata accessor for MLActionClassifier.ModelParameters);
}

uint64_t type metadata accessor for MLActionClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLActionClassifier;
  if (!type metadata singleton initialization cache for MLActionClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLActionClassifier);
  }
  return result;
}

uint64_t MLActionClassifier.trainingMetrics.getter(double a1)
{
  return _Model.makeClassifierMetrics(onTraining:onValidation:)(1, 2, a1);
}

uint64_t MLActionClassifier.validationMetrics.getter(double a1)
{
  return _Model.makeClassifierMetrics(onTraining:onValidation:)(2, 1, a1);
}

uint64_t MLActionClassifier.Prediction.frameRange.getter()
{
  return *(void *)v0;
}

void MLActionClassifier.Prediction.frameRange.setter(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

void (*MLActionClassifier.Prediction.frameRange.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLActionClassifier.Prediction.results.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t MLActionClassifier.Prediction.results.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

void (*MLActionClassifier.Prediction.results.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLActionClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, __m128 a3)
{
  uint64_t v53 = v4;
  v37[1] = v3;
  uint64_t v51 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  uint64_t v39 = *(void *)(v51 - 8);
  int64_t v38 = *(void *)(v39 + 64);
  uint64_t v5 = alloca(v38);
  char v6 = alloca(v38);
  int v42 = v37;
  uint64_t v7 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  char v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v47 = (uint64_t)v37;
  int64_t v11 = *(void *)(*(void *)(type metadata accessor for MLActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v12 = alloca(v11);
  BOOL v13 = alloca(v11);
  uint64_t v40 = v37;
  uint64_t v14 = v53;
  MLActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v54, &v43, a3);
  if (v14)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a2, type metadata accessor for MLActionClassifier.ModelParameters);
    return outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLActionClassifier.DataSource);
  }
  uint64_t v41 = v7;
  uint64_t v50 = a2;
  uint64_t v53 = 0;
  uint64_t v48 = a1;
  uint64_t v16 = v54;
  uint64_t v45 = v43;
  char v57 = v44;
  int v17 = v55;
  if (v55 == 0xFF)
  {
    uint64_t v49 = v54;
    uint64_t v20 = v53;
    MLActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((__m128)0x403E000000000000uLL);
    uint64_t v19 = v20;
  }
  else
  {
    type metadata accessor for MLActionClassifier.FeatureExtractor();
    uint64_t v43 = v16;
    char v44 = v17 & 1;
    uint64_t v49 = *(void *)(v50 + *(int *)(v51 + 40));
    outlined copy of Result<_DataTable, Error>(v16, v17);
    uint64_t v18 = v53;
    static MLActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:)((uint64_t)&v43, *(double *)&v49);
    uint64_t v19 = v18;
    if (v18)
    {
      outlined consume of MLDataTable?(v45, v57);
      outlined consume of MLDataTable?(v16, v17);
      outlined destroy of MLActivityClassifier.ModelParameters(v50, type metadata accessor for MLActionClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLActionClassifier.DataSource);
      return outlined consume of MLDataTable?(v16, v17);
    }
    uint64_t v49 = v16;
    outlined consume of MLDataTable?(v16, v17);
  }
  char v56 = v55;
  int v52 = v17;
  char v21 = v57;
  uint64_t v22 = v45;
  uint64_t v46 = v54;
  if (v57 == -1)
  {
    uint64_t v23 = v47;
    outlined init with copy of MLTrainingSessionParameters(v50, v47, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload(v23, v41) != 1)
    {
      uint64_t v53 = v19;
      outlined destroy of MLActivityClassifier.ModelParameters(v23, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
      uint64_t empty = tc_v1_sframe_create_empty(0);
      if (!empty) {
        BUG();
      }
      uint64_t v26 = empty;
      uint64_t v47 = 0;
      uint64_t v27 = type metadata accessor for CMLTable();
      uint64_t v28 = swift_allocObject(v27, 24, 7);
      *(void *)(v28 + 16) = v26;
      uint64_t v29 = type metadata accessor for _DataTable();
      swift_allocObject(v29, 40, 7);
      uint64_t v51 = _DataTable.init(impl:)(v28);
      goto LABEL_15;
    }
    uint64_t v24 = (uint64_t)v40;
    outlined init with take of MLClassifierMetrics(v23, (uint64_t)v40, type metadata accessor for MLActionClassifier.DataSource);
    MLActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((__m128)0x403E000000000000uLL);
    uint64_t v53 = 0;
    outlined destroy of MLActivityClassifier.ModelParameters(v24, type metadata accessor for MLActionClassifier.DataSource);
  }
  else
  {
    type metadata accessor for MLActionClassifier.FeatureExtractor();
    uint64_t v43 = v22;
    char v44 = v21 & 1;
    static MLActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:)((uint64_t)&v43, *(double *)(v50 + *(int *)(v51 + 40)));
    uint64_t v53 = 0;
  }
  uint64_t v30 = v54;
  uint64_t v51 = v54;
  LOBYTE(v30) = v55;
  uint64_t v47 = v30;
LABEL_15:
  outlined init with copy of MLTrainingSessionParameters(v50, (uint64_t)v42, type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v31 = *(unsigned __int8 *)(v39 + 80);
  uint64_t v32 = ~*(unsigned __int8 *)(v39 + 80) & (v31 + 41);
  uint64_t v33 = swift_allocObject(&unk_39A098, v32 + v38, v31 | 7);
  uint64_t v34 = v46;
  *(void *)(v33 + 16) = v46;
  char v35 = v56;
  *(unsigned char *)(v33 + 24) = v56 & 1;
  *(void *)(v33 + 32) = v51;
  *(unsigned char *)(v33 + 40) = v47 & 1;
  outlined init with take of MLClassifierMetrics((uint64_t)v42, v33 + v32, type metadata accessor for MLActionClassifier.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v34, v35);
  LOBYTE(v32) = v47;
  outlined copy of Result<_DataTable, Error>(v51, v47);
  uint64_t v36 = v53;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLActionClassifier.init(trainingData:parameters:), v33);
  uint64_t v53 = v36;
  swift_release();
  outlined consume of MLDataTable?(v45, v57);
  outlined consume of MLDataTable?(v49, v52);
  outlined consume of Result<_DataTable, Error>(v51, v32);
  outlined consume of Result<_DataTable, Error>(v46, v35);
  outlined destroy of MLActivityClassifier.ModelParameters(v50, type metadata accessor for MLActionClassifier.ModelParameters);
  return outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLActionClassifier.DataSource);
}

uint64_t closure #1 in MLActionClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 72) = a6;
  *(unsigned char *)(v6 + 26) = a5;
  *(void *)(v6 + 64) = a4;
  *(unsigned char *)(v6 + 25) = a3;
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 48) = a1;
  char v8 = a3 & 1;
  char v9 = a5 & 1;
  uint64_t v10 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  *(void *)(v6 + 80) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Result<_DataTable, Error>(a2, v8);
  outlined copy of Result<_DataTable, Error>(a4, v9);
  return swift_task_switch(closure #1 in MLActionClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLActionClassifier.init(trainingData:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  char v3 = *(unsigned char *)(v0 + 25);
  char v4 = *(unsigned char *)(v0 + 26);
  uint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = *(void *)(v0 + 56);
  *(unsigned char *)(v0 + 24) = v3 & 1;
  *(void *)(v0 + 32) = v5;
  *(unsigned char *)(v0 + 40) = v4 & 1;
  outlined init with copy of MLTrainingSessionParameters(v2, v1, type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v6 = (void *)swift_task_alloc(dword_3A9654);
  *(void *)(v0 + 88) = v6;
  void *v6 = v0;
  v6[1] = closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(void *)(v0 + 48), v0 + 16, v0 + 32, *(void *)(v0 + 80));
}

uint64_t MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 32) = *(void *)a2;
  *(unsigned char *)(v4 + 84) = *(unsigned char *)(a2 + 8);
  *(void *)(v4 + 40) = *(void *)a3;
  *(unsigned char *)(v4 + 85) = *(unsigned char *)(a3 + 8);
  return swift_task_switch(MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:), 0, 0);
}

uint64_t MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  uint64_t v20 = v0 | 0x1000000000000000;
  uint64_t v19 = v1;
  char v2 = *(unsigned char *)(v1 + 85);
  uint64_t v3 = *(void *)(v1 + 40);
  char v4 = *(unsigned char *)(v1 + 84);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v17 = *(void *)(v1 + 32);
  char v18 = v4;
  uint64_t v15 = v3;
  char v16 = v2;
  uint64_t v6 = static MLActionClassifier.convertParameters(_:trainingFeatures:validationFeatures:)(v5, (uint64_t)&v17, (uint64_t)&v15);
  *(void *)(v1 + 48) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  outlined consume of Result<_DataTable, Error>(*(void *)(v1 + 40), *(unsigned char *)(v1 + 85));
  uint64_t v10 = *(int *)(type metadata accessor for MLActionClassifier(0) + 20);
  *(_DWORD *)(v1 + 80) = v10;
  outlined init with copy of MLTrainingSessionParameters(v9, v10 + v8, type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v11 = type metadata accessor for _Model();
  swift_allocObject(v11, 48, 7);
  uint64_t v12 = dword_3AABDC;
  swift_retain();
  BOOL v13 = (void *)swift_task_alloc(v12);
  *(void *)(v1 + 56) = v13;
  *BOOL v13 = v1;
  v13[1] = MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  return _Model.init(type:parameters:modelOptions:)(22, v7, 0);
}

{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  int v3;
  Swift::String v4;
  float v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  **(void **)(v0 + 16) = *(void *)(v0 + 72);
  if (AnalyticsReporter.init()())
  {
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = *(unsigned char *)(v0 + 84);
    outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 24), type metadata accessor for MLActionClassifier.ModelParameters);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v6, v7);
  }
  else
  {
    uint64_t v1 = *(unsigned __int8 *)(v0 + 84);
    char v2 = *(void *)(v0 + 32);
    uint64_t v3 = MLDataTable.size.getter();
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_actionClassifier, (Swift::String)__PAIR128__((unint64_t)("nClassifier.swift" + 0x8000000000000000), 0xD000000000000010), (float)v3);
    v4._countAndFlagsBits = 0x6C6562616CLL;
    v4._object = (void *)0xE500000000000000;
    MLDataTable.subscript.getter(v4);
    outlined consume of Result<_DataTable, Error>(v2, v1);
    MLUntypedColumn.dropDuplicates()(v2, v1);
    outlined consume of Result<_DataTable, Error>(v12, v13);
    if (v15)
    {
      outlined consume of Result<_DataTable, Error>(v14, 1);
      uint64_t v5 = -1.0;
    }
    else
    {
      swift_retain();
      uint64_t v8 = CMLColumn.size.getter();
      outlined consume of Result<_DataTable, Error>(v14, 0);
      outlined consume of Result<_DataTable, Error>(v14, 0);
      uint64_t v5 = (float)v8;
    }
    uint64_t v9 = *(void *)(v0 + 24);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_actionClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), v5);
    uint64_t v10 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_actionClassifier, (Swift::String)__PAIR128__(0xEE00736E6F697461, 0x726574492078614DLL), (float)(int)*(void *)(v9 + v10[6]));
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_actionClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Labels" + 0x8000000000000000), 0xD000000000000016), (float)(int)*(void *)(v9 + v10[7]));
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_actionClassifier, (Swift::String)__PAIR128__(0xEA0000000000657ALL, 0x6953206863746142), (float)(int)*(void *)(v9 + v10[5]));
    swift_release();
    outlined destroy of MLActivityClassifier.ModelParameters(v9, type metadata accessor for MLActionClassifier.ModelParameters);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(void *)(v0 + 16) + *(int *)(v0 + 80);
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLActionClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v2, type metadata accessor for MLActionClassifier.ModelParameters);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 56);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    outlined consume of Result<_DataTable, Error>(*(void *)(v4 + 32), *(unsigned char *)(v4 + 84));
    uint64_t v6 = MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  else
  {
    *(void *)(v4 + 72) = a1;
    uint64_t v6 = MLActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t static MLActionClassifier.convertParameters(_:trainingFeatures:validationFeatures:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = v3;
  uint64_t v28 = a1;
  uint64_t v29 = type metadata accessor for _Model.Parameters(0);
  int64_t v5 = *(void *)(*(void *)(v29 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v27 = &v25;
  uint64_t v30 = *(int **)a2;
  char v8 = *(unsigned char *)(a2 + 8);
  uint64_t v32 = *(void *)a3;
  char v9 = *(unsigned char *)(a3 + 8);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v11 = empty;
  uint64_t v12 = type metadata accessor for CMLParameters();
  uint64_t v13 = swift_allocObject(v12, 24, 7);
  *(void *)(v13 + 16) = v11;
  uint64_t v14 = v13;
  uint64_t v25 = (uint64_t)v30;
  char v26 = v8 & 1;
  uint64_t v15 = v31;
  CMLParameters.setTraining(table:)(&v25);
  if (!v15)
  {
    uint64_t v25 = v32;
    char v26 = v9 & 1;
    CMLParameters.setValidation(table:)(&v25);
    uint64_t v17 = v14;
    uint64_t v31 = type metadata accessor for CMLFeatureValue();
    uint64_t v18 = CMLFeatureValue.__allocating_init(_:)(0x6C6562616CLL, 0xE500000000000000);
    CMLParameters.add(key:featureValue:)(75, v18);
    swift_release();
    uint64_t v19 = CMLFeatureValue.__allocating_init(_:)(0x746E696F7079656BLL, 0xE900000000000073);
    CMLParameters.add(key:featureValue:)(73, v19);
    swift_release();
    uint64_t v20 = CMLFeatureValue.__allocating_init(_:)(0x5F6E6F6973736573, 0xEA00000000006469);
    CMLParameters.add(key:featureValue:)(74, v20);
    swift_release();
    uint64_t v21 = v28;
    uint64_t v32 = MLActionClassifier.ModelParameters.getOptions()(v20);
    uint64_t v30 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
    uint64_t v22 = v27;
    *uint64_t v27 = *(void *)(v21 + v30[6]);
    swift_storeEnumTagMultiPayload(v22, v29, 0);
    uint64_t v23 = v32;
    CMLDictionary.add(_:)((uint64_t)v22);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v22, type metadata accessor for _Model.Parameters);
    *uint64_t v22 = *(void *)(v28 + v30[5]);
    swift_storeEnumTagMultiPayload(v22, v29, 1);
    CMLDictionary.add(_:)((uint64_t)v22);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v22, type metadata accessor for _Model.Parameters);
    *uint64_t v22 = *(void *)(v28 + v30[7]);
    swift_storeEnumTagMultiPayload(v22, v29, 23);
    CMLDictionary.add(_:)((uint64_t)v22);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v22, type metadata accessor for _Model.Parameters);
    swift_retain();
    uint64_t v24 = CMLFeatureValue.__allocating_init(_:)(v23);
    uint64_t v14 = v17;
    CMLParameters.add(key:featureValue:)(47, v24);
    swift_release();
  }
  swift_release();
  return v14;
}

uint64_t MLActionClassifier.init(model:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[4] = a3;
  v3[3] = a2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for _Model();
  swift_allocObject(v4, 48, 7);
  uint64_t v5 = dword_3AABE4;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v3[5] = v6;
  void *v6 = v3;
  v6[1] = MLActionClassifier.init(model:parameters:);
  return _Model.init(impl:)(a2);
}

uint64_t MLActionClassifier.init(model:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = MLActionClassifier.init(model:parameters:);
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    uint64_t v6 = MLActionClassifier.init(model:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t MLActionClassifier.init(model:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void **)(v0 + 16);
  swift_release();
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for MLActionClassifier(0);
  outlined init with take of MLClassifierMetrics(v2, (uint64_t)v3 + *(int *)(v4 + 20), type metadata accessor for MLActionClassifier.ModelParameters);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for MLActionClassifier.ModelParameters);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLActionClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v20 = v1;
  uint64_t v22 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v22 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v21 = &v20;
  uint64_t v6 = *(void *)(type metadata accessor for MLCheckpoint(0) - 8);
  int64_t v7 = *(void *)(v6 + 64);
  char v8 = alloca(v7);
  char v9 = alloca(v7);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v20, type metadata accessor for MLCheckpoint);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = ~*(unsigned __int8 *)(v6 + 80) & (v10 + 16);
  uint64_t v12 = swift_allocObject(&unk_39A0C0, v11 + v7, v10 | 7);
  outlined init with take of MLClassifierMetrics((uint64_t)&v20, v12 + v11, type metadata accessor for MLCheckpoint);
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLActionClassifier.init(checkpoint:), v12);
  if (v2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLCheckpoint);
    return swift_release();
  }
  else
  {
    uint64_t v15 = v13;
    swift_release();
    char v16 = v20;
    *uint64_t v20 = v15;
    uint64_t v17 = (uint64_t)v21;
    *uint64_t v21 = 0;
    *(_WORD *)(v17 + 16) = 256;
    swift_storeEnumTagMultiPayload(v17, v22, 0);
    uint64_t v23 = 1;
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLCheckpoint);
    uint64_t v18 = (uint64_t)v16 + *(int *)(type metadata accessor for MLActionClassifier(0) + 20);
    outlined init with take of MLClassifierMetrics(v17, v18, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    uint64_t v19 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
    *(void *)(v19[5] + v18) = 32;
    *(void *)(v19[6] + v18) = 80;
    *(void *)(v19[7] + v18) = 30;
    *(void *)(v19[8] + v18) = v23;
    uint64_t result = v19[10];
    *(void *)(result + v18) = 0x403E000000000000;
  }
  return result;
}

void *static MLActionClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static MLActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLActionClassifier>);
    int64_t v7 = (void *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    return specialized MLJob.init(_:)(v7, v5);
  }
  return result;
}

void *static MLActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = v3;
  uint64_t v26 = a2;
  uint64_t v24 = a1;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v25 = &v21;
  char v8 = alloca(v5);
  char v9 = alloca(v5);
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLActionClassifier.ModelParameters(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  outlined init with copy of MLTrainingSessionParameters(v24, (uint64_t)&v21, type metadata accessor for MLActionClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)&v21, type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v26 = a3;
  outlined init with copy of MLTrainingSessionParameters(a3, (uint64_t)&v21, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v16 = type metadata accessor for ActionClassifierTrainingSessionDelegate(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = v23;
  uint64_t result = ActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)((uint64_t)&v21, (uint64_t)&v21, (uint64_t)&v21);
  if (!v17)
  {
    v22[3] = v16;
    v22[4] = &protocol witness table for ActionClassifierTrainingSessionDelegate;
    v22[0] = result;
    uint64_t v19 = (uint64_t)v25;
    outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)v25, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLActionClassifier>);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    return (void *)specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v22, v19, 22);
  }
  return result;
}

void *static MLActionClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLActionClassifier>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

void *static MLActionClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v12 = v11;
  int64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for ActionClassifierTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = ActionClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    v11[3] = v7;
    v11[4] = &protocol witness table for ActionClassifierTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLActionClassifier>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return (void *)specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 22);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLActionClassifier.resume(_:)(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v56 = a5;
  char v57 = a4;
  uint64_t v62 = a3;
  LODWORD(v60) = a2;
  uint64_t v61 = (uint64_t *)a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLActionClassifier, Error>);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v58 = &v50;
  uint64_t v12 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v19 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v24 = alloca(v21);
  uint64_t v25 = alloca(v21);
  uint64_t v26 = alloca(v21);
  uint64_t v27 = alloca(v21);
  if (v60)
  {
    uint64_t v34 = (uint64_t)v61;
    uint64_t v50 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload(&v50, v5, 1);
    swift_errorRetain(v34);
    v57(&v50);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v50, &demangling cache variable for type metadata for Result<MLActionClassifier, Error>);
  }
  else
  {
    uint64_t v28 = *(void *)(v20 + 64);
    unsigned __int8 v55 = &v50;
    uint64_t v54 = (int *)v19;
    uint64_t v60 = v12;
    uint64_t v53 = v20;
    uint64_t v61 = &v50;
    uint64_t v59 = &v50;
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + v62, (uint64_t)v51);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v30 = type metadata accessor for ActionClassifierTrainingSessionDelegate(0);
    uint64_t result = swift_dynamicCast(&v52, v51, v29, v30, 6);
    if ((_BYTE)result)
    {
      uint64_t v62 = v52;
      uint64_t v32 = v52 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
      swift_beginAccess(v52 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, v51, 0, 0);
      outlined init with copy of MLActionClassifier.PersistentParameters?(v32, (uint64_t)&v50);
      uint64_t v33 = (int *)v60;
      if (__swift_getEnumTagSinglePayload((uint64_t)&v50, 1, v60))
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v50, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
        return swift_release();
      }
      else
      {
        outlined init with copy of MLTrainingSessionParameters((uint64_t)&v50, (uint64_t)&v50, type metadata accessor for MLActionClassifier.PersistentParameters);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v50, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
        uint64_t v35 = (uint64_t)v55;
        outlined init with copy of MLTrainingSessionParameters((uint64_t)&v51[v33[5] - 8], (uint64_t)v55, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
        uint64_t v36 = *(void *)&v51[v33[7] - 8];
        uint64_t v37 = *(void *)&v51[v33[8] - 8];
        uint64_t v38 = *(void *)&v51[v33[10] - 8];
        uint64_t v39 = *(void *)&v51[v33[9] - 8];
        uint64_t v40 = v54;
        *(void *)(v35 + v54[5]) = *(void *)&v51[v33[6] - 8];
        *(void *)(v35 + v40[6]) = v36;
        *(void *)(v35 + v40[7]) = v37;
        *(void *)(v35 + v40[8]) = v38;
        *(void *)(v35 + v40[10]) = v39;
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v50, type metadata accessor for MLActionClassifier.PersistentParameters);
        uint64_t v41 = (uint64_t)v59;
        outlined init with take of MLClassifierMetrics(v35, (uint64_t)v59, type metadata accessor for MLActionClassifier.ModelParameters);
        uint64_t v42 = type metadata accessor for TaskPriority(0);
        __swift_storeEnumTagSinglePayload((uint64_t)v58, 1, 1, v42);
        uint64_t v43 = v41;
        uint64_t v44 = (uint64_t)v61;
        outlined init with copy of MLTrainingSessionParameters(v43, (uint64_t)v61, type metadata accessor for MLActionClassifier.ModelParameters);
        uint64_t v45 = *(unsigned __int8 *)(v53 + 80);
        uint64_t v46 = v62;
        uint64_t v47 = ~*(unsigned __int8 *)(v53 + 80) & (v45 + 40);
        unint64_t v48 = (v28 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v49 = swift_allocObject(&unk_39A168, v48 + 16, v45 | 7);
        *(_OWORD *)(v49 + 16) = 0;
        *(void *)(v49 + 32) = v46;
        outlined init with take of MLClassifierMetrics(v44, v49 + v47, type metadata accessor for MLActionClassifier.ModelParameters);
        *(void *)(v49 + v48) = v57;
        *(void *)(v49 + v48 + 8) = v56;
        swift_retain();
        swift_retain();
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v58, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:), v49);
        swift_release();
        swift_release();
        return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v59, type metadata accessor for MLActionClassifier.ModelParameters);
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a7;
  v7[4] = a6;
  v7[3] = a5;
  v7[2] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLActionClassifier, Error>);
  v7[6] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)()
{
  uint64_t v1 = swift_task_alloc(32);
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  int64_t v2 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v3 = (void *)swift_task_alloc(dword_3AC624);
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:);
  return ((uint64_t (*)(void, void *, uint64_t))v2)(*(void *)(v0 + 48), &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:), v1);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t))(v0 + 32))(v1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Result<MLActionClassifier, Error>);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[4] = a3;
  v3[3] = a2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model);
  outlined init with copy of MLTrainingSessionParameters(v0[4], v0[5], type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v2 = dword_3A964C;
  swift_retain();
  uint64_t v3 = (uint64_t **)swift_task_alloc(v2);
  v0[6] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = (uint64_t *)closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:);
  return MLActionClassifier.init(model:parameters:)(v0[2], v1, v0[5]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:), 0, 0);
  }
  swift_task_dealloc(*(void *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static MLActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v28 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v5, v23);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x746E696F7079656BLL;
  *(void *)(inited + 40) = 0xE900000000000073;
  uint64_t v31 = a1;
  uint64_t v24 = &v31;
  swift_bridgeObjectRetain(a1);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v9 = v8;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v9 & 1;
  *(void *)(inited + 64) = 0x6C6562616CLL;
  *(void *)(inited + 72) = 0xE500000000000000;
  uint64_t v31 = a2;
  uint64_t v25 = &v31;
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v12 = v11;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 80) = v10;
  *(unsigned char *)(inited + 88) = v12 & 1;
  *(void *)(inited + 96) = 0x5F6E6F6973736573;
  *(void *)(inited + 104) = 0xEA00000000006469;
  uint64_t v31 = v30;
  uint64_t v26 = &v31;
  swift_bridgeObjectRetain(v30);
  uint64_t v13 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v15 = v14;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 112) = v13;
  *(unsigned char *)(inited + 120) = v15 & 1;
  *(void *)(inited + 128) = 0x7461506F65646976;
  *(void *)(inited + 136) = 0xE900000000000068;
  uint64_t v31 = v29;
  uint64_t v27 = &v31;
  swift_bridgeObjectRetain(v29);
  uint64_t v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v18 = v17;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 144) = v16;
  *(unsigned char *)(inited + 152) = v18 & 1;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v19);
  uint64_t result = v31;
  char v21 = v32;
  uint64_t v22 = v28;
  *uint64_t v28 = v31;
  *((unsigned char *)v22 + 8) = v21;
  return result;
}

void *closure #1 in static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 3)
  {
    uint64_t v2 = *(void *)a1;
    return static MLActionClassifier.convertSequenceToMultiArray(value:)(&v2);
  }
  else
  {
    *uint64_t result = 0;
  }
  return result;
}

void *static MLActionClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1)
{
  long long v108 = v1;
  uint64_t v2 = *a1;
  v99[0] = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(3);
  id v3 = objc_allocWithZone((Class)NSNumber);
  [v3 initWithInteger:1];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  uint64_t v4 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4);
  specialized ContiguousArray._endMutation()(v4);
  id v5 = objc_allocWithZone((Class)NSNumber);
  [v5 initWithInteger:3];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  uint64_t v6 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6);
  specialized ContiguousArray._endMutation()(v6);
  id v7 = objc_allocWithZone((Class)NSNumber);
  [v7 initWithInteger:18];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8);
  specialized ContiguousArray._endMutation()(v8);
  objc_allocWithZone((Class)MLMultiArray);
  uint64_t v9 = 0;
  id v10 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
  if (v10)
  {
    id v11 = v10;
    uint64_t v101 = UnsafeMutableBufferPointer.init(_:)(v11, &type metadata for Double);
    swift_retain();
    uint64_t v12 = CMLSequence.size.getter();
    uint64_t v13 = specialized RandomAccessCollection<>.distance(from:to:)(0, v12);
    swift_release();
    if (v13 == 1)
    {
      v99[7] = v2;
      double v14 = 0.0;
      long long v100 = 0;
      swift_retain();
      id v116 = v11;
      while (1)
      {
        specialized EnumeratedSequence.Iterator.next()(v14);
        uint64_t v15 = (uint64_t)v103;
        uint64_t v16 = v104;
        char v17 = v105;
        char v18 = v106;
        uint64_t v109 = v104;
        unint64_t v114 = (unint64_t)v103;
        if (v106 != 3) {
          break;
        }
        outlined copy of MLDataValue(v104, v105, 3u);
        outlined copy of MLDataValue(v16, v17, 3u);
        uint64_t v107 = v17;
        uint64_t v19 = CMLSequence.size.getter();
        char v17 = v107;
        uint64_t v20 = specialized RandomAccessCollection<>.distance(from:to:)(0, v19);
        outlined consume of (offset: Int, element: MLDataValue)?(v15, v16, v17, 3);
        if (v20 != 3)
        {

          swift_release();
          uint64_t v98 = v114;
          outlined consume of (offset: Int, element: MLDataValue)?(v114, v16, v17, 3);
          char v18 = 3;
          char v97 = v16;
LABEL_72:
          outlined consume of (offset: Int, element: MLDataValue)?(v98, v97, v17, v18);
          goto LABEL_63;
        }
        outlined copy of MLDataValue(v16, v17, 3u);
        if (CMLSequence.size.getter())
        {
          uint64_t v21 = 0;
          uint64_t v22 = v109;
          while (1)
          {
            int64_t v102 = v21;
            swift_retain();
            uint64_t v23 = CMLSequence.value(at:)(v21);
            uint64_t v24 = v114;
            uint64_t v25 = v107;
            outlined consume of (offset: Int, element: MLDataValue)?(v114, v22, v107, 3);
            if (v9)
            {
LABEL_89:
              swift_unexpectedError(v9, "CreateML/SequenceType.swift", 27, 1);
              BUG();
            }
            MLDataValue.init(_:)(v23, v14);
            unint64_t v113 = v103;
            uint64_t v110 = v104;
            char v26 = (char)v105;
            swift_retain();
            double v117 = COERCE_DOUBLE(CMLSequence.size.getter());
            outlined consume of (offset: Int, element: MLDataValue)?(v24, v22, v25, 3);
            if (v102 >= *(uint64_t *)&v117) {
              BUG();
            }
            uint64_t v27 = v113;
            uint64_t v28 = v110;
            if (v26 != 3) {
              break;
            }
            outlined copy of MLDataValue(v113, v110, 3u);
            outlined copy of MLDataValue(v27, v28, 3u);
            uint64_t v29 = CMLSequence.size.getter();
            if (CMLSequence.size.getter() < 0) {
              BUG();
            }
            uint64_t v30 = v27;
            uint64_t v31 = CMLSequence.size.getter();
            outlined consume of MLDataValue(v30, v28, 3);
            if (v29 < 0 || v31 < v29) {
              BUG();
            }
            if (v29 != 18)
            {
              uint64_t v27 = v113;
              uint64_t v28 = v110;
              outlined consume of MLDataValue(v113, v110, 3);
              char v26 = 3;
              uint64_t v25 = v107;
              break;
            }
            char v32 = v113;
            swift_retain();
            if (CMLSequence.size.getter())
            {
              uint64_t v33 = 0;
              while (1)
              {
                swift_retain();
                uint64_t v34 = CMLSequence.value(at:)(v33);
                outlined consume of MLDataValue(v32, v110, 3);
                if (v9) {
                  goto LABEL_89;
                }
                switch(CMLFeatureValue.type.getter())
                {
                  case 0u:
                    int64_t v35 = v33;
                    uint64_t v36 = *(void *)(v34 + 16);
                    swift_retain();
                    double v117 = COERCE_DOUBLE(specialized handling<A, B>(_:_:)(v36));
                    swift_release();
                    uint64_t v112 = 0;
                    swift_release();
                    uint64_t v115 = 0;
                    uint64_t v37 = 0;
                    goto LABEL_24;
                  case 1u:
                    int64_t v35 = v33;
                    uint64_t v46 = *(void *)(v34 + 16);
                    swift_retain();
                    specialized handling<A, B>(_:_:)(v46);
                    double v117 = v14;
                    swift_release();
                    uint64_t v112 = 0;
                    uint64_t v47 = swift_release();
                    LOBYTE(v47) = 1;
                    goto LABEL_31;
                  case 2u:
                    int64_t v35 = v33;
                    swift_retain();
                    Swift::String v43 = CMLFeatureValue.stringValue()();
                    double v117 = *(double *)&v43._countAndFlagsBits;
                    object = v43._object;
                    swift_release();
                    if (v44)
                    {
                      swift_errorRelease(v44);
                      BUG();
                    }
                    uint64_t v115 = object;
                    uint64_t v112 = 0;
                    uint64_t v37 = swift_release();
                    LOBYTE(v37) = 2;
LABEL_24:
                    uint64_t v111 = v37;
                    goto LABEL_33;
                  case 3u:
                    int64_t v35 = v33;
                    uint64_t v48 = *(void *)(v34 + 16);
                    swift_retain();
                    uint64_t v49 = specialized handling<A, B>(_:_:)(v48);
                    if (!v49) {
                      BUG();
                    }
                    uint64_t v112 = 0;
                    swift_release_n(v34);
                    uint64_t v50 = type metadata accessor for CMLSequence();
                    uint64_t v47 = swift_allocObject(v50, 25, 7);
                    *(void *)(v47 + 16) = v49;
                    double v117 = *(double *)&v47;
                    *(unsigned char *)(v47 + 24) = 1;
                    LOBYTE(v47) = 3;
                    goto LABEL_31;
                  case 4u:
                    int64_t v35 = v33;
                    uint64_t v38 = *(void *)(v34 + 16);
                    swift_retain();
                    uint64_t v39 = specialized handling<A, B>(_:_:)(v38);
                    if (!v39) {
                      BUG();
                    }
                    uint64_t v112 = 0;
                    uint64_t v40 = type metadata accessor for CMLDictionary();
                    uint64_t v41 = swift_allocObject(v40, 24, 7);
                    *(void *)(v41 + 16) = v39;
                    v99[0] = v41;
                    v99[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
                    v99[2] = 0;
                    v99[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
                    v99[4] = 0;
                    v99[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
                    v99[6] = 0;
                    swift_retain();
                    double v117 = COERCE_DOUBLE(specialized Dictionary.init<A>(uniqueKeysWithValues:)(v99));
                    swift_release();
                    uint64_t v42 = swift_release_n(v34);
                    LOBYTE(v42) = 4;
                    uint64_t v111 = v42;
                    uint64_t v115 = 0;
                    char v32 = v113;
                    goto LABEL_33;
                  case 5u:
                    uint64_t v112 = 0;
                    int64_t v35 = v33;
                    uint64_t v51 = swift_release();
                    LOBYTE(v51) = 6;
                    uint64_t v111 = v51;
                    double v117 = 0.0;
                    goto LABEL_32;
                  case 6u:
                    int64_t v35 = v33;
                    swift_retain();
                    MLDataValue.MultiArrayType.init(from:)(v34);
                    double v117 = *(double *)&v103;
                    if (!v103) {
                      BUG();
                    }
                    uint64_t v112 = 0;
                    uint64_t v47 = swift_release();
                    LOBYTE(v47) = 5;
LABEL_31:
                    uint64_t v111 = v47;
LABEL_32:
                    uint64_t v115 = 0;
LABEL_33:
                    swift_retain();
                    uint64_t v52 = CMLSequence.size.getter();
                    outlined consume of MLDataValue(v32, v110, 3);
                    if (v35 >= v52) {
                      BUG();
                    }
                    unint64_t v53 = v35;
                    id v54 = [v116 strides];
                    id v55 = v54;
                    uint64_t v56 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
                    uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v56);

                    if ((v57 & 0xC000000000000003) != 0)
                    {
                      id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v57);
                    }
                    else
                    {
                      if (!*(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8))) {
                        BUG();
                      }
                      id v58 = *(id *)(v57 + 32);
                    }
                    uint64_t v59 = v58;
                    swift_bridgeObjectRelease(v57);
                    unint64_t v60 = (unint64_t)[v59 integerValue];

                    unint64_t v62 = v60;
                    uint64_t v61 = v114 * v60;
                    if (!is_mul_ok(v114, v62)) {
                      BUG();
                    }
                    id v63 = [v116 strides];
                    id v64 = v63;
                    uint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v56);

                    if ((v65 & 0xC000000000000003) != 0)
                    {
                      id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v65);
                    }
                    else
                    {
                      if (*(void *)((char *)&dword_10 + (v65 & 0xFFFFFFFFFFFFF8)) < 2uLL) {
                        BUG();
                      }
                      id v66 = *(id *)(v65 + 40);
                    }
                    uint64_t v67 = v66;
                    swift_bridgeObjectRelease(v65);
                    unint64_t v68 = (unint64_t)[v67 integerValue];

                    unint64_t v70 = v68;
                    unint64_t v69 = v102 * v68;
                    if (!is_mul_ok(v102, v70)) {
                      BUG();
                    }
                    BOOL v71 = __OFADD__(v69, v61);
                    unint64_t v72 = v69 + v61;
                    if (v71) {
                      BUG();
                    }
                    id v73 = [v116 strides];
                    id v74 = v73;
                    uint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, v56);

                    if ((v75 & 0xC000000000000003) != 0)
                    {
                      id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v75);
                    }
                    else
                    {
                      if (*(void *)((char *)&dword_10 + (v75 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                        BUG();
                      }
                      id v76 = *(id *)(v75 + 48);
                    }
                    swift_bridgeObjectRelease(v75);
                    unint64_t v77 = (unint64_t)[v76 integerValue];

                    unint64_t v79 = v77;
                    unint64_t v78 = v53 * v77;
                    if (!is_mul_ok(v53, v79)) {
                      BUG();
                    }
                    BOOL v71 = __OFADD__(v78, v72);
                    unint64_t v80 = v78 + v72;
                    if (v71) {
                      BUG();
                    }
                    if ((_BYTE)v111)
                    {
                      char v32 = v113;
                      if (v111 != 1)
                      {
                        outlined consume of MLDataValue(*(void **)&v117, v115, v111);
                        uint64_t v88 = v110;
                        outlined consume of MLDataValue(v32, v110, 3);
                        outlined consume of MLDataValue(v32, v88, 3);
                        uint64_t v89 = v114;
                        unint64_t v90 = v109;
                        uint64_t v91 = v107;
                        outlined consume of (offset: Int, element: MLDataValue)?(v114, v109, v107, 3);
                        outlined consume of (offset: Int, element: MLDataValue)?(v89, v90, v91, 3);

                        outlined consume of MLDataValue(v113, v88, 3);
                        uint64_t v92 = v89;
                        uint64_t v93 = v90;
                        uint64_t v94 = v91;
                        goto LABEL_69;
                      }
                      unint64_t v81 = v53;
                      *(double *)(v101 + 8 * v80) = v117;
                    }
                    else
                    {
                      double v14 = (double)SLODWORD(v117);
                      *(double *)(v101 + 8 * v80) = (double)SLODWORD(v117);
                      char v32 = v113;
                      unint64_t v81 = v53;
                    }
                    uint64_t v33 = v81 + 1;
                    uint64_t v82 = CMLSequence.size.getter();
                    uint64_t v9 = v112;
                    if (v33 == v82)
                    {
                      uint64_t v83 = v110;
                      outlined consume of MLDataValue(v32, v110, 3);
                      outlined consume of MLDataValue(v32, v83, 3);
                      outlined consume of MLDataValue(v32, v83, 3);
                      goto LABEL_58;
                    }
                    break;
                }
              }
            }
            uint64_t v84 = v110;
            outlined consume of MLDataValue(v32, v110, 3);
            outlined consume of MLDataValue(v32, v84, 3);
            swift_release();
LABEL_58:
            uint64_t v21 = v102 + 1;
            uint64_t v22 = v109;
            if (v21 == CMLSequence.size.getter()) {
              goto LABEL_61;
            }
          }
          outlined consume of MLDataValue(v27, v28, v26);
          uint64_t v95 = v114;
          id v96 = v109;
          outlined consume of (offset: Int, element: MLDataValue)?(v114, v109, v25, 3);
          outlined consume of (offset: Int, element: MLDataValue)?(v95, v96, v25, 3);

          uint64_t v92 = v95;
          uint64_t v93 = v96;
          uint64_t v94 = v25;
LABEL_69:
          outlined consume of (offset: Int, element: MLDataValue)?(v92, v93, v94, 3);
          swift_release();
          goto LABEL_63;
        }
        uint64_t v22 = v109;
LABEL_61:
        uint64_t v85 = v114;
        uint64_t v86 = v107;
        outlined consume of (offset: Int, element: MLDataValue)?(v114, v22, v107, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v85, v22, v86, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v85, v22, v86, 3);
      }
      if (v106 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v116);
        uint64_t result = v103;
        *long long v108 = v103;
        return result;
      }

      swift_release();
      char v97 = v109;
      uint64_t v98 = v114;
      goto LABEL_72;
    }
  }
LABEL_63:
  uint64_t result = v108;
  *long long v108 = 0;
  return result;
}

void *MLActionClassifier.prediction(from:)(void *a1)
{
  id v2 = *(id *)(*(void *)v1 + 24);
  id v3 = MLActionClassifier.modelPrediction(on:using:)(a1, v2);

  return v3;
}

void *MLActionClassifier.modelPrediction(on:using:)(void *a1, void *a2)
{
  uint64_t v4 = v3 + *(int *)(type metadata accessor for MLActionClassifier(0) + 20);
  id v5 = (void *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  uint64_t v6 = static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, kCMTimeZero.value, *(void *)&kCMTimeZero.timescale, kCMTimeZero.epoch, kCMTimeIndefinite.value, *(void *)&kCMTimeIndefinite.timescale, *(double *)(*((int *)v5 + 10) + v4), kCMTimeIndefinite.epoch);
  if (!v2)
  {
    uint64_t v22 = v5;
    uint64_t v25 = v6[2];
    if (v25)
    {
      uint64_t v20 = v6;
      specialized ContiguousArray.reserveCapacity(_:)(v25);
      id v7 = 0;
      do
      {
        uint64_t v8 = v20[(void)v7 + 4];
        id v7 = (void (__cdecl *)(id))((char *)v7 + 1);
        v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        uint64_t v9 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9);
        specialized ContiguousArray._endMutation()(v9);
      }
      while (v25 != v7);
      swift_bridgeObjectRelease((_BYTE)v20);
    }
    else
    {
      swift_bridgeObjectRelease((_BYTE)v6);
    }
    uint64_t v10 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)((uint64_t)_swiftEmptyArrayStorage, *(void *)(v4 + *((int *)v22 + 7)), 18);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    uint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      char v24 = v10;
      uint64_t v13 = (_OWORD *)(v10 + 40);
      id v5 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v26 = v12;
        long long v21 = *v13;
        id v14 = *((id *)v13 - 1);
        MLActionClassifier.modelPrediction(on:using:)(v14, a2);
        uint64_t v23 = v15;
        if (!swift_isUniquelyReferenced_nonNull_native(v5)) {
          id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, (uint64_t)v5);
        }
        unint64_t v16 = v5[2];
        unint64_t v17 = v16 + 1;
        if (v5[3] >> 1 <= v16)
        {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5[3] >= 2uLL, v16 + 1, 1, (uint64_t)v5);
          unint64_t v17 = v16 + 1;
          id v5 = v19;
        }
        v5[2] = v17;
        uint64_t v18 = 3 * v16;
        *(_OWORD *)&v5[v18 + 4] = v21;
        v5[v18 + 6] = v23;

        uint64_t v13 = (_OWORD *)((char *)v13 + 24);
        uint64_t v12 = v26 - 1;
      }
      while (v26 != 1);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      swift_bridgeObjectRelease(v10);
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void *MLActionClassifier.predictions(from:)(uint64_t a1)
{
  v3[2] = v1;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML18MLActionClassifierV10PredictionVGsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #1 in MLActionClassifier.predictions(from:), v3, a1);
}

void *closure #1 in MLActionClassifier.predictions(from:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = v3;
  id v5 = *(id *)(*(void *)a2 + 24);
  uint64_t v6 = MLActionClassifier.modelPrediction(on:using:)(a1, v5);

  if (v4)
  {
    uint64_t result = a3;
    *a3 = v4;
  }
  else
  {
    uint64_t result = v9;
    void *v9 = v6;
  }
  return result;
}

void MLActionClassifier.modelPrediction(on:using:)(void *a1, void *a2)
{
  id v4 = [a1 shape];
  id v5 = v4;
  uint64_t v77 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v77);

  if ((v6 & 0x4000000000000001) != 0)
  {
    uint64_t v70 = v6 & 0xFFFFFFFFFFFFF8;
    if (v6) {
      uint64_t v70 = v6;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v70);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease(v6);
  if (v7 != 3) {
    goto LABEL_26;
  }
  id v8 = [a1 shape];
  id v9 = v8;
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v77);

  uint64_t v11 = *(int *)(type metadata accessor for MLActionClassifier(0) + 20) + v3;
  uint64_t v12 = *(void *)(*(int *)(type metadata accessor for MLActionClassifier.ModelParameters(0) + 28) + v11);
  v96[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(3);
  id v13 = objc_allocWithZone((Class)NSNumber);
  [v13 initWithInteger:v12];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  uint64_t v14 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14);
  specialized ContiguousArray._endMutation()(v14);
  id v15 = objc_allocWithZone((Class)NSNumber);
  [v15 initWithInteger:3];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  uint64_t v16 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16);
  specialized ContiguousArray._endMutation()(v16);
  id v17 = objc_allocWithZone((Class)NSNumber);
  [v17 initWithInteger:18];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  uint64_t v18 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18);
  specialized ContiguousArray._endMutation()(v18);
  LOBYTE(v18) = specialized static Array<A>.== infix(_:_:)(v10, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v10);
  swift_release();
  if (v18)
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (void *)swift_initStackObject(v19, v97);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = 0x7365736F70;
    inited[5] = 0xE500000000000000;
    long long v21 = objc_opt_self(MLFeatureValue);
    id v22 = [v21 featureValueWithMultiArray:a1];
    id v23 = v22;
    inited[9] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLFeatureValue, MLFeatureValue_ptr);
    inited[6] = v23;
    uint64_t v24 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    objc_allocWithZone((Class)MLDictionaryFeatureProvider);
    id v25 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)(v24);
    if (!v2)
    {
      uint64_t v26 = v25;
      v96[0] = 0;
      id v27 = [a2 predictionFromFeatures:v25 error:v96];
      id v28 = v27;
      id v29 = v96[0];
      if (v28)
      {
        id v75 = v26;
        uint64_t v30 = v28;
        v96[0];
        NSString v31 = String._bridgeToObjectiveC()();
        id v76 = v30;
        id v32 = [v30 featureValueForName:v31];
        id v33 = v32;

        if (v33)
        {
          id v34 = [v33 dictionaryValue];
          id v35 = v34;

          uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v35, &type metadata for AnyHashable, v77, &protocol witness table for AnyHashable);
          int64_t v37 = *(void *)(v36 + 16);
          if (v37)
          {
            uint64_t v82 = _swiftEmptyArrayStorage;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
            int64_t v38 = specialized Dictionary.startIndex.getter(v36);
            if (v38 < 0 || v38 >= 1 << *(unsigned char *)(v36 + 32)) {
LABEL_35:
            }
              BUG();
            unint64_t v80 = (void *)(v36 + 64);
            uint64_t v73 = v36;
            while (1)
            {
              id v74 = (char *)v37;
              unint64_t v40 = (unint64_t)v38 >> 6;
              uint64_t v41 = v80[(unint64_t)v38 >> 6];
              if (!_bittest64(&v41, v38)) {
                BUG();
              }
              if (v39 != *(_DWORD *)(v36 + 36)) {
                BUG();
              }
              uint64_t v71 = 1 << v38;
              int v72 = v39;
              int64_t v42 = v38;
              outlined init with copy of AnyHashable(*(void *)(v36 + 48) + 40 * v38, (uint64_t)v96);
              int64_t v78 = v42;
              Swift::String v43 = *(void **)(*(void *)(v36 + 56) + 8 * v42);
              v96[5] = v43;
              outlined init with copy of AnyHashable((uint64_t)v96, (uint64_t)v93);
              uint64_t v95 = v43;
              uint64_t v91 = v94;
              id v92 = v43;
              v90[1] = v93[1];
              v90[0] = v93[0];
              id v44 = v43;
              v44;
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v96, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v90, (uint64_t)v85);
              id v87 = v92;
              uint64_t v45 = *(void *)&v85[0];
              v88[0] = v85[0];
              v88[1] = v85[1];
              uint64_t v89 = v86;
              swift_dynamicCast(v81, v88, &type metadata for AnyHashable, &type metadata for String, 7);
              outlined init with copy of AnyHashable((uint64_t)v90, (uint64_t)v83);
              id v84 = v92;
              [v92 doubleValue];
              outlined destroy of AnyHashable((uint64_t)v83);
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v90, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              uint64_t v46 = v81[0];
              uint64_t v47 = v81[1];
              uint64_t v48 = v82;
              if (swift_isUniquelyReferenced_nonNull_native(v82))
              {
                uint64_t v49 = v48;
              }
              else
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1);
                uint64_t v49 = v82;
              }
              unint64_t v50 = v49[2];
              int64_t v51 = v50 + 1;
              uint64_t v52 = v78;
              if (v49[3] >> 1 <= v50)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49[3] >= 2uLL, v51, 1);
                int64_t v51 = v50 + 1;
                uint64_t v52 = v78;
                uint64_t v49 = v82;
              }
              v49[2] = v51;
              uint64_t v53 = 3 * v50;
              v49[v53 + 4] = v46;
              v49[v53 + 5] = v47;
              v49[v53 + 6] = v45;
              uint64_t v36 = v73;
              uint64_t v54 = -1 << *(unsigned char *)(v73 + 32);
              if (v52 >= -v54) {
                BUG();
              }
              if ((v71 & v80[v40]) == 0) {
                BUG();
              }
              if (v72 != *(_DWORD *)(v73 + 36)) {
                BUG();
              }
              int64_t v38 = _HashTable.occupiedBucket(after:)(v52, v80, ~v54);
              int64_t v37 = (int64_t)(v74 - 1);
              if (v74 == (unsigned char *)&dword_0 + 1) {
                break;
              }
              if (v38 >= 0)
              {
                int v39 = *(_DWORD *)(v73 + 36);
                if (v38 < 1 << *(unsigned char *)(v73 + 32)) {
                  continue;
                }
              }
              goto LABEL_35;
            }
            swift_bridgeObjectRelease(v73);
            swift_unknownObjectRelease(v76);
          }
          else
          {
            swift_bridgeObjectRelease(v36);
            swift_unknownObjectRelease(v76);
          }
        }
        else
        {
          uint64_t v65 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v65, 0, 0);
          *(void *)uint64_t v66 = 0xD000000000000028;
          *(void *)(v66 + 8) = "labelProbabilities" + 0x8000000000000000;
          *(_OWORD *)(v66 + 16) = 0;
          *(_OWORD *)(v66 + 32) = 0;
          *(unsigned char *)(v66 + 48) = 0;
          swift_willThrow(&type metadata for MLCreateError, v65, v66, v67, v68, v69);

          swift_unknownObjectRelease(v30);
        }
      }
      else
      {
        id v60 = v96[0];
        _convertNSErrorToError(_:)(v29);

        swift_willThrow(v60, "predictionFromFeatures:error:", v61, v62, v63, v64);
      }
    }
  }
  else
  {
LABEL_26:
    uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
    *(void *)uint64_t v56 = 0xD000000000000025;
    *(void *)(v56 + 8) = "rt requested type" + 0x8000000000000000;
    *(_OWORD *)(v56 + 16) = 0;
    *(_OWORD *)(v56 + 32) = 0;
    *(unsigned char *)(v56 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v55, v56, v57, v58, v59);
  }
}

uint64_t MLActionClassifier.evaluation(on:)()
{
  uint64_t v3 = v0;
  MLActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((__m128)0x403E000000000000uLL);
  if (v1)
  {
    *uint64_t v3 = v1;
    uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload(v3, v4, 2);
  }
  else
  {
    uint64_t v6 = v8;
    uint64_t v11 = v3;
    char v7 = v9;
    uint64_t v10 = *v2;
    v9 &= 1u;
    outlined copy of Result<_DataTable, Error>(v8, v7);
    _Model.classifierEvaluation(_:)((uint64_t)&v8, 30.0);
    outlined consume of Result<_DataTable, Error>(v6, v7);
    return outlined consume of Result<_DataTable, Error>(v6, v7);
  }
}

uint64_t MLActionClassifier.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v2 = *(void *)(a2 + 64);
  v6[0] = *(_OWORD *)a2;
  v6[1] = *(_OWORD *)(a2 + 16);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = *(_OWORD *)(a2 + 48);
  uint64_t v7 = v2;
  MLActionClassifier.addActionClassifierSpecificMetadata(_:)((uint64_t *)v6);
  uint64_t v3 = v8[0];
  uint64_t v11 = v8[1];
  uint64_t v12 = v8[2];
  uint64_t v13 = v8[3];
  uint64_t v14 = v8[4];
  uint64_t v15 = v8[5];
  uint64_t v10 = v8[6];
  uint64_t v16 = v8[7];
  uint64_t v4 = v8[8];
  _Model.write(to:metadata:)(v9, v8);
  return outlined consume of MLModelMetadata?(v3, v11, v12, v13, v14, v15, v10, v16, v4);
}

char *MLActionClassifier.addActionClassifierSpecificMetadata(_:)(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for MLActionClassifier(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  uint64_t v10 = a1[1];
  if (v10)
  {
    v147 = (int *)v4;
    uint64_t v149 = v2;
    uint64_t v127 = v3;
    uint64_t v136 = *a1;
    uint64_t v11 = a1[2];
    uint64_t v12 = a1[3];
    uint64_t v133 = a1[4];
    uint64_t v134 = a1[5];
    v135 = (char *)a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = a1[8];
    uint64_t v145 = v13;
    uint64_t v131 = v11;
    if (!v14)
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t inited = (void *)swift_initStackObject(v41, v126);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 0xD000000000000016;
      inited[5] = "Number of Labels" + 0x8000000000000000;
      v149 += v147[5];
      uint64_t v43 = v149;
      v147 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
      v150[0] = *(void *)(v147[7] + v43);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v145);
      char v44 = v134;
      outlined copy of MLModelMetadata?(v136, v10, v131, v12, v133, v134, (uint64_t)v135, v145, 0);
      swift_bridgeObjectRetain(v44);
      inited[6] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      inited[7] = v45;
      inited[8] = 0xD000000000000011;
      inited[9] = "lassification algorithm." + 0x8000000000000000;
      unint64_t v40 = v145;
      inited[10] = Double.description.getter(*(double *)(v147[10] + v149));
      inited[11] = v46;
      uint64_t v148 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String, &protocol witness table for String);
LABEL_35:
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      uint64_t v114 = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease_n(v10, 2, v115, v116, v117);
      swift_bridgeObjectRelease_n(v12, 2, v118, v119, v120);
      swift_bridgeObjectRelease_n(v114, 2, v121, v122, v123);
      uint64_t v3 = v127;
      *uint64_t v127 = v136;
      v3[1] = v10;
      v3[2] = v131;
      v3[3] = v12;
      void v3[4] = v133;
      v3[5] = v114;
      uint64_t result = v135;
      v3[6] = (uint64_t)v135;
      uint64_t v33 = v148;
      goto LABEL_36;
    }
    uint64_t v144 = &v124;
    long long v129 = &v124;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    uint64_t v128 = v10;
    uint64_t v15 = v10;
    uint64_t v143 = v12;
    char v16 = v134;
    outlined copy of MLModelMetadata?(v136, v15, v11, v12, v133, v134, (uint64_t)v135, v13, v14);
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = specialized Dictionary.subscript.getter(0xD000000000000016, (uint64_t)("Number of Labels" + 0x8000000000000000), v14);
    uint64_t v142 = v14;
    if (!v18)
    {
      uint64_t v47 = v149 + v147[5];
      v150[0] = *(void *)(*(int *)(type metadata accessor for MLActionClassifier.ModelParameters(0) + 28) + v47);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      uint64_t v50 = v49;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      v150[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v50, 0xD000000000000016, (uint64_t)("Number of Labels" + 0x8000000000000000), isUniquelyReferenced_nonNull_native);
      uint64_t v52 = v150[0];
      swift_bridgeObjectRelease(0);
      goto LABEL_19;
    }
    int64_t v19 = v18;
    uint64_t v138 = "Number of Labels" + 0x8000000000000000;
    char v137 = (char *)0xD000000000000016;
    uint64_t v20 = v149 + v147[5];
    uint64_t v148 = v17;
    uint64_t v21 = type metadata accessor for MLActionClassifier.ModelParameters(0);
    uint64_t v22 = *(int *)(v21 + 28);
    v150[0] = *(void *)(v22 + v20);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = v24;
    if (v148 == v23 && v19 == v24)
    {
      swift_bridgeObjectRelease(v19);
      char v26 = v25;
    }
    else
    {
      uint64_t v139 = v21;
      char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v148, v19, v23, v24, 0);
      swift_bridgeObjectRelease(v25);
      if ((v53 & 1) == 0)
      {
        *(void *)v140 = v22;
        if (one-time initialization token for logger != -1) {
          swift_once(&one-time initialization token for logger, one-time initialization function for logger);
        }
        uint64_t v54 = type metadata accessor for Logger(0);
        __swift_project_value_buffer(v54, (uint64_t)static MLActionClassifier.logger);
        uint64_t v55 = (uint64_t)v144;
        outlined init with copy of MLTrainingSessionParameters(v149, (uint64_t)v144, type metadata accessor for MLActionClassifier);
        swift_bridgeObjectRetain(v19);
        uint64_t v56 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        int v58 = v57;
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v59 = swift_slowAlloc(22, -1);
          *(_DWORD *)type = v58;
          uint64_t v60 = v59;
          os_log_t v141 = (os_log_t)swift_slowAlloc(32, -1);
          v150[0] = (uint64_t)v141;
          *(_DWORD *)uint64_t v60 = 136315394;
          os_log_t log = v56;
          swift_bridgeObjectRetain(v19);
          uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v19, v150);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v60 + 4, v60 + 12);
          swift_bridgeObjectRelease_n(v19, 3, v61, v62, v63);
          *(_WORD *)(v60 + 12) = 2048;
          uint64_t v64 = *(void *)(*(int *)(v139 + 28) + v147[5] + v55);
          outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLActionClassifier);
          uint64_t v146 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v60 + 14, v60 + 22);
          os_log_t v65 = log;
          _os_log_impl(&dword_0, log, type[0], "Prediction window size %s is set incorrectly, change it to %ld frames.", (uint8_t *)v60, 0x16u);
          os_log_t v66 = v141;
          swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v60, -1, -1);
        }
        else
        {
          outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLActionClassifier);

          swift_bridgeObjectRelease_n(v19, 2, v67, v68, v69);
        }
        v150[0] = *(void *)(v20 + *(void *)v140);
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        uint64_t v72 = v71;
        uint64_t v73 = v142;
        char v74 = swift_isUniquelyReferenced_nonNull_native(v142);
        v150[0] = v73;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v72, (uint64_t)v137, (uint64_t)v138, v74);
        uint64_t v52 = v150[0];
        swift_bridgeObjectRelease(0);
LABEL_19:
        uint64_t v75 = specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("lassification algorithm." + 0x8000000000000000), v52);
        unint64_t v40 = v145;
        if (v76)
        {
          int64_t v77 = v76;
          char v137 = "lassification algorithm." + 0x8000000000000000;
          uint64_t v148 = v52;
          uint64_t v78 = v149 + v147[5];
          uint64_t v144 = (uint64_t *)v75;
          uint64_t v138 = (char *)type metadata accessor for MLActionClassifier.ModelParameters(0);
          uint64_t v79 = *((int *)v138 + 10);
          uint64_t v80 = Double.description.getter(*(double *)(v79 + v78));
          char v82 = v81;
          if (v144 != (uint64_t *)v80 || v77 != v81)
          {
            char v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v144, v77, v80, v81, 0);
            swift_bridgeObjectRelease(v82);
            if (v91)
            {
              char v92 = v77;
            }
            else
            {
              uint64_t v139 = v79;
              if (one-time initialization token for logger != -1) {
                swift_once(&one-time initialization token for logger, one-time initialization function for logger);
              }
              uint64_t v93 = type metadata accessor for Logger(0);
              __swift_project_value_buffer(v93, (uint64_t)static MLActionClassifier.logger);
              uint64_t v94 = (uint64_t)v129;
              outlined init with copy of MLTrainingSessionParameters(v149, (uint64_t)v129, type metadata accessor for MLActionClassifier);
              swift_bridgeObjectRetain(v77);
              uint64_t v95 = (os_log_s *)Logger.logObject.getter();
              os_log_type_t v96 = static os_log_type_t.info.getter();
              int v97 = v96;
              if (os_log_type_enabled(v95, v96))
              {
                uint64_t v101 = swift_slowAlloc(22, -1);
                *(_DWORD *)v140 = v97;
                uint64_t v102 = v101;
                uint64_t v149 = swift_slowAlloc(32, -1);
                v150[0] = v149;
                *(_DWORD *)uint64_t v102 = 136315394;
                os_log_t v141 = v95;
                swift_bridgeObjectRetain(v77);
                uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v144, v77, v150);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v102 + 4, v102 + 12);
                swift_bridgeObjectRelease_n(v77, 3, v103, v104, v105);
                *(_WORD *)(v102 + 12) = 2048;
                uint64_t v146 = *(void *)(*((int *)v138 + 10) + v147[5] + v94);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v102 + 14, v102 + 22);
                outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLActionClassifier);
                os_log_t v106 = v141;
                _os_log_impl(&dword_0, v141, v140[0], "Target frame rate %s is set incorrectly, change it to %f.", (uint8_t *)v102, 0x16u);
                uint64_t v107 = v149;
                swift_arrayDestroy(v149, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v107, -1, -1);
                swift_slowDealloc(v102, -1, -1);
                os_log_t v108 = v106;
              }
              else
              {
                swift_bridgeObjectRelease_n(v77, 2, v98, v99, v100);
                outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLActionClassifier);
                os_log_t v108 = v95;
              }

              uint64_t v109 = v148;
              uint64_t v110 = Double.description.getter(*(double *)(v78 + v139));
              uint64_t v112 = v111;
              char v113 = swift_isUniquelyReferenced_nonNull_native(v109);
              v150[0] = v109;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v110, v112, 0xD000000000000011, (uint64_t)v137, v113);
              uint64_t v148 = v150[0];
              char v92 = 0;
            }
            swift_bridgeObjectRelease(v92);
            uint64_t v12 = v143;
            unint64_t v40 = v145;
            goto LABEL_34;
          }
          swift_bridgeObjectRelease(v77);
          char v83 = v82;
        }
        else
        {
          uint64_t v84 = v147[5] + v149;
          uint64_t v85 = type metadata accessor for MLActionClassifier.ModelParameters(0);
          uint64_t v86 = Double.description.getter(*(double *)(*(int *)(v85 + 40) + v84));
          uint64_t v88 = v87;
          char v89 = swift_isUniquelyReferenced_nonNull_native(v52);
          v150[0] = v52;
          uint64_t v90 = v86;
          unint64_t v40 = v145;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v90, v88, 0xD000000000000011, (uint64_t)("lassification algorithm." + 0x8000000000000000), v89);
          uint64_t v148 = v150[0];
          char v83 = 0;
        }
        swift_bridgeObjectRelease(v83);
        uint64_t v12 = v143;
LABEL_34:
        swift_bridgeObjectRelease(v142);
        uint64_t v10 = v128;
        goto LABEL_35;
      }
      char v26 = v19;
    }
    swift_bridgeObjectRelease(v26);
    uint64_t v52 = v142;
    goto LABEL_19;
  }
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  id v28 = (void *)swift_initStackObject(v27, v125);
  v28[2] = 2;
  v28[3] = 4;
  v28[4] = 0xD000000000000016;
  v28[5] = "Number of Labels" + 0x8000000000000000;
  uint64_t v29 = *(int *)(v4 + 20) + v2;
  uint64_t v30 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  v150[0] = *(void *)(*(int *)(v30 + 28) + v29);
  v28[6] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v28[7] = v31;
  v28[8] = 0xD000000000000011;
  v28[9] = "lassification algorithm." + 0x8000000000000000;
  v28[10] = Double.description.getter(*(double *)(*(int *)(v30 + 40) + v29));
  v28[11] = v32;
  uint64_t v33 = Dictionary.init(dictionaryLiteral:)(v28, &type metadata for String, &type metadata for String, &protocol witness table for String);
  id v34 = NSFullUserName();
  id v35 = v34;
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  *uint64_t v3 = v36;
  v3[1] = v38;
  v3[2] = 0xD000000000000033;
  uint64_t result = "RandomForestRegressor" + 0x8000000000000000;
  v3[3] = (uint64_t)("RandomForestRegressor" + 0x8000000000000000);
  *((_OWORD *)v3 + 2) = 0;
  v3[6] = 49;
  unint64_t v40 = 0xE100000000000000;
LABEL_36:
  void v3[7] = v40;
  v3[8] = v33;
  return result;
}

uint64_t MLActionClassifier.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t a3)
{
  int64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v3 = *(void *)(a3 + 64);
  v8[0] = *(_OWORD *)a3;
  v8[1] = *(_OWORD *)(a3 + 16);
  v8[2] = *(_OWORD *)(a3 + 32);
  v8[3] = *(_OWORD *)(a3 + 48);
  uint64_t v9 = v3;
  MLActionClassifier.addActionClassifierSpecificMetadata(_:)((uint64_t *)v8);
  long long v21 = v10;
  uint64_t v4 = v11;
  uint64_t v22 = v12;
  uint64_t v23 = v13;
  uint64_t v24 = v14;
  uint64_t v20 = v15;
  uint64_t v25 = v16;
  uint64_t v5 = v17;
  v6._countAndFlagsBits = v19;
  v6._object = v18;
  _Model.write(toFile:metadata:)(v6, &v10);
  return outlined consume of MLModelMetadata?(v21, *((uint64_t *)&v21 + 1), v4, v22, v23, v24, v20, v25, v5);
}

unint64_t MLActionClassifier.description.getter(double a1)
{
  return MLActionClassifier.debugDescription.getter(a1);
}

unint64_t MLActionClassifier.debugDescription.getter(double a1)
{
  v36._object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v36._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  v36._uint64_t countAndFlagsBits = (uint64_t)&v26;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  Swift::String v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  v29._object = &v26;
  uint64_t v8 = alloca(v5);
  uint64_t v9 = alloca(v5);
  long long v10 = alloca(v5);
  uint64_t v11 = alloca(v5);
  unint64_t v30 = ModelType.description.getter(*(_DWORD *)(*(void *)v1 + 32));
  uint64_t v34 = v12;
  type metadata accessor for MLActionClassifier(0);
  v29._uint64_t countAndFlagsBits = MLActionClassifier.ModelParameters.description.getter();
  uint64_t v31 = v13;
  _Model.makeClassifierMetrics(onTraining:onValidation:)(1, 2, a1);
  v28._uint64_t countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
  v28._object = v14;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v26, type metadata accessor for MLClassifierMetrics);
  _Model.makeClassifierMetrics(onTraining:onValidation:)(2, 1, a1);
  uint64_t countAndFlagsBits = v36._countAndFlagsBits;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)&v26, v36._countAndFlagsBits, type metadata accessor for MLClassifierMetrics.Contents);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(countAndFlagsBits, v36._object);
  outlined destroy of MLActivityClassifier.ModelParameters(countAndFlagsBits, type metadata accessor for MLClassifierMetrics.Contents);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v26, type metadata accessor for MLClassifierMetrics);
  object = v29._object;
  _Model.makeClassifierMetrics(onTraining:onValidation:)(2, 1, a1);
  v36._uint64_t countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
  v36._object = v17;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)object, type metadata accessor for MLClassifierMetrics);
  unint64_t v32 = v30;
  uint64_t v33 = v34;
  int64_t v18 = v31;
  swift_bridgeObjectRetain(v34);
  v19._uint64_t countAndFlagsBits = 0x656D617261500A0ALL;
  v19._object = (void *)0xED00000A73726574;
  String.append(_:)(v19);
  char v20 = v33;
  swift_bridgeObjectRetain(v33);
  v19._uint64_t countAndFlagsBits = v29._countAndFlagsBits;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v27._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v27._object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char v21 = (char)v28._object;
  String.append(_:)(v28);
  char v22 = (char)v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v22);
  if (EnumCaseMultiPayload > 1)
  {
    char v23 = (char)v36._object;
  }
  else
  {
    v27._uint64_t countAndFlagsBits = 0xD000000000000020;
    v27._object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    char v23 = (char)v36._object;
    String.append(_:)(v36);
    char v24 = (char)v27._object;
    String.append(_:)(v27);
    swift_bridgeObjectRelease((_BYTE)v18);
    LOBYTE(v18) = v21;
    char v21 = v24;
  }
  swift_bridgeObjectRelease((_BYTE)v18);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v34);
  return v32;
}

NSAttributedString MLActionClassifier.playgroundDescription.getter(double a1)
{
  int64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v4._uint64_t countAndFlagsBits = MLActionClassifier.debugDescription.getter(a1);
  v4._object = v5;
  result.super.Class isa = NSAttributedString.__allocating_init(string:)(v4).super.isa;
  v2[3].super.Class isa = (Class)v3;
  v2->super.Class isa = result.super.isa;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLActionClassifier(double a1)
{
  return MLActionClassifier.description.getter(a1);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLActionClassifier(double a1)
{
  return MLActionClassifier.debugDescription.getter(a1);
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLActionClassifier(double a1)
{
  return MLActionClassifier.playgroundDescription.getter(a1);
}

uint64_t sub_15D762()
{
  uint64_t v1 = *(void *)(type metadata accessor for MLActionClassifier.ModelParameters(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 41);
  uint64_t v4 = *(void *)(v1 + 64);
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
  uint64_t v5 = v3 + v0;
  uint64_t v6 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v3 + v0, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v3 + v0, v7))
    {
      case 0u:
        uint64_t v17 = type metadata accessor for URL(0);
        int64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
        v18(v3 + v0, v17);
        uint64_t v19 = v4;
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v18(v5 + v9[12], v17);
        swift_bridgeObjectRelease(*(void *)(v5 + v9[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v9[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v9[24] + 8));
        uint64_t v10 = v9[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v3 + v0, v8);
        return swift_deallocObject(v0, v4 + v3, v2 | 7);
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        uint64_t v11 = *(void *)(v5 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        swift_bridgeObjectRelease(*(void *)(v5 + 56));
        uint64_t v11 = *(void *)(v5 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v3 + v0, v12);
        uint64_t v19 = v4;
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v5 + v13[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v13[16] + 8));
        uint64_t v10 = v13[20];
        goto LABEL_9;
      case 6u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v3 + v0, v14);
        uint64_t v19 = v4;
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[20] + 8));
        uint64_t v10 = v15[24];
LABEL_9:
        uint64_t v4 = v19;
        uint64_t v11 = *(void *)(v5 + v10 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v11);
        break;
      default:
        return swift_deallocObject(v0, v4 + v3, v2 | 7);
    }
  }
  return swift_deallocObject(v0, v4 + v3, v2 | 7);
}

uint64_t partial apply for closure #1 in MLActionClassifier.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLActionClassifier.ModelParameters(0);
  char v9 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  char v10 = *(unsigned char *)(v1 + 40);
  uint64_t v6 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 41));
  uint64_t v7 = (void *)swift_task_alloc(dword_3A955C);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLActionClassifier.init(trainingData:parameters:)(a1, v4, v9, v5, v10, v6);
}

uint64_t sub_15DA6F()
{
  uint64_t v11 = v0;
  uint64_t v1 = type metadata accessor for MLCheckpoint(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ~*(unsigned __int8 *)(v2 + 80) & (v3 + 16);
  uint64_t v5 = v4 + v0;
  uint64_t v6 = *(void *)(v2 + 64) + v4;
  uint64_t v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  uint64_t v8 = v5 + *(int *)(v1 + 28);
  uint64_t v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(*(int *)(v1 + 32) + v5));
  return swift_deallocObject(v11, v6, v3 | 7);
}

uint64_t partial apply for closure #1 in MLActionClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLCheckpoint(0);
  uint64_t v4 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 16));
  uint64_t v5 = (void *)swift_task_alloc(dword_3A956C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLStyleTransfer.init(checkpoint:)(a1, v4);
}

void *partial apply for closure #1 in MLActionClassifier.predictions(from:)(void *a1, void *a2)
{
  return closure #1 in MLActionClassifier.predictions(from:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLActionClassifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
    swift_retain();
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      uint64_t v10 = type metadata accessor for MLActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v10);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          uint64_t v40 = type metadata accessor for URL(0);
          uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
          v47(v7, v8, v40);
          uint64_t v43 = v10;
          uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v47(&v7[v12[12]], &v8[v12[12]], v40);
          uint64_t v13 = v12[16];
          *(void *)&v7[v13] = *(void *)&v8[v13];
          uint64_t v14 = *(void *)&v8[v13 + 8];
          *(void *)&v7[v13 + 8] = v14;
          uint64_t v15 = v12[20];
          *(void *)&v7[v15] = *(void *)&v8[v15];
          uint64_t v48 = *(void *)&v8[v15 + 8];
          *(void *)&v7[v15 + 8] = v48;
          uint64_t v16 = v12[24];
          *(void *)&v7[v16] = *(void *)&v8[v16];
          uint64_t v41 = *(void *)&v8[v16 + 8];
          *(void *)&v7[v16 + 8] = v41;
          uint64_t v17 = v12[28];
          *(void *)&v7[v17] = *(void *)&v8[v17];
          goto LABEL_12;
        case 1u:
        case 2u:
          uint64_t v11 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
          goto LABEL_15;
        case 3u:
          uint64_t v44 = v10;
          uint64_t v18 = *(void *)v8;
          char v49 = v8[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v8, v49);
          *(void *)uint64_t v7 = v18;
          v7[8] = v49;
          *((void *)v7 + 2) = *((void *)v8 + 2);
          uint64_t v19 = *((void *)v8 + 3);
          *((void *)v7 + 3) = v19;
          *((void *)v7 + 4) = *((void *)v8 + 4);
          uint64_t v20 = *((void *)v8 + 5);
          *((void *)v7 + 5) = v20;
          *((void *)v7 + 6) = *((void *)v8 + 6);
          uint64_t v50 = *((void *)v8 + 7);
          *((void *)v7 + 7) = v50;
          swift_bridgeObjectRetain(v19);
          LOBYTE(v19) = v20;
          uint64_t v10 = v44;
          swift_bridgeObjectRetain(v19);
          char v21 = v50;
          goto LABEL_14;
        case 4u:
          uint64_t v45 = v10;
          uint64_t v22 = *(void *)v8;
          char v51 = v8[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v8, v51);
          *(void *)uint64_t v7 = v22;
          v7[8] = v51;
          *((void *)v7 + 2) = *((void *)v8 + 2);
          uint64_t v23 = *((void *)v8 + 3);
          *((void *)v7 + 3) = v23;
          *((void *)v7 + 4) = *((void *)v8 + 4);
          uint64_t v24 = *((void *)v8 + 5);
          *((void *)v7 + 5) = v24;
          *((void *)v7 + 6) = *((void *)v8 + 6);
          uint64_t v52 = *((void *)v8 + 7);
          *((void *)v7 + 7) = v52;
          *((void *)v7 + 8) = *((void *)v8 + 8);
          uint64_t v42 = *((void *)v8 + 9);
          *((void *)v7 + 9) = v42;
          swift_bridgeObjectRetain(v23);
          LOBYTE(v23) = v24;
          uint64_t v10 = v45;
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v52);
          char v21 = v42;
          goto LABEL_14;
        case 5u:
          uint64_t v25 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v7, v8, v25);
          uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v27 = v26[12];
          *(void *)&v7[v27] = *(void *)&v8[v27];
          uint64_t v28 = *(void *)&v8[v27 + 8];
          *(void *)&v7[v27 + 8] = v28;
          uint64_t v29 = v26[16];
          *(void *)&v7[v29] = *(void *)&v8[v29];
          uint64_t v53 = *(void *)&v8[v29 + 8];
          *(void *)&v7[v29 + 8] = v53;
          uint64_t v30 = v26[20];
          *(void *)&v7[v30] = *(void *)&v8[v30];
          uint64_t v43 = v10;
          uint64_t v31 = *(void *)&v8[v30 + 8];
          *(void *)&v7[v30 + 8] = v31;
          swift_bridgeObjectRetain(v28);
          char v32 = v53;
          goto LABEL_13;
        case 6u:
          uint64_t v33 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v7, v8, v33);
          uint64_t v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v35 = v34[12];
          *(void *)&v7[v35] = *(void *)&v8[v35];
          uint64_t v14 = *(void *)&v8[v35 + 8];
          *(void *)&v7[v35 + 8] = v14;
          uint64_t v36 = v34[16];
          *(void *)&v7[v36] = *(void *)&v8[v36];
          uint64_t v48 = *(void *)&v8[v36 + 8];
          *(void *)&v7[v36 + 8] = v48;
          uint64_t v37 = v34[20];
          *(void *)&v7[v37] = *(void *)&v8[v37];
          uint64_t v41 = *(void *)&v8[v37 + 8];
          *(void *)&v7[v37 + 8] = v41;
          uint64_t v17 = v34[24];
          *(void *)&v7[v17] = *(void *)&v8[v17];
          uint64_t v43 = v10;
LABEL_12:
          uint64_t v31 = *(void *)&v8[v17 + 8];
          *(void *)&v7[v17 + 8] = v31;
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v48);
          char v32 = v41;
LABEL_13:
          swift_bridgeObjectRetain(v32);
          char v21 = v31;
          uint64_t v10 = v43;
LABEL_14:
          swift_bridgeObjectRetain(v21);
LABEL_15:
          swift_storeEnumTagMultiPayload(v7, v10, EnumCaseMultiPayload);
          swift_storeEnumTagMultiPayload(v7, v9, 1);
          break;
      }
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v38 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
    *(void *)&v7[v38[5]] = *(void *)&v8[v38[5]];
    *(void *)&v7[v38[6]] = *(void *)&v8[v38[6]];
    *(void *)&v7[v38[7]] = *(void *)&v8[v38[7]];
    *(void *)&v7[v38[8]] = *(void *)&v8[v38[8]];
    *(void *)&v7[v38[10]] = *(void *)&v8[v38[10]];
  }
  return v5;
}

uint64_t destroy for MLActionClassifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  uint64_t result = swift_getEnumCaseMultiPayload(v2, v3);
  if (result == 1)
  {
    uint64_t v5 = type metadata accessor for MLActionClassifier.DataSource(0);
    uint64_t result = swift_getEnumCaseMultiPayload(v2, v5);
    switch((int)result)
    {
      case 0:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
        v8(v2, v7);
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(v2 + v9[12], v7);
        swift_bridgeObjectRelease(*(void *)(v2 + v9[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + v9[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + v9[24] + 8));
        uint64_t v10 = v9[28];
        goto LABEL_10;
      case 1:
      case 2:
        uint64_t v6 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v2, v6);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(void *)v2, *(_DWORD *)(v2 + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + 24));
        swift_bridgeObjectRelease(*(void *)(v2 + 40));
        return swift_bridgeObjectRelease(*(void *)(v2 + 56));
      case 4:
        outlined consume of Result<_DataTable, Error>(*(void *)v2, *(_DWORD *)(v2 + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + 24));
        swift_bridgeObjectRelease(*(void *)(v2 + 40));
        swift_bridgeObjectRelease(*(void *)(v2 + 56));
        return swift_bridgeObjectRelease(*(void *)(v2 + 72));
      case 5:
        uint64_t v11 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v2, v11);
        uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v2 + v12[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + v12[16] + 8));
        uint64_t v10 = v12[20];
        goto LABEL_10;
      case 6:
        uint64_t v13 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v2, v13);
        uint64_t v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v2 + v14[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + v14[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v2 + v14[20] + 8));
        uint64_t v10 = v14[24];
LABEL_10:
        uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v10 + 8));
        break;
      default:
        return result;
    }
  }
  return result;
}

void *initializeWithCopy for MLActionClassifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  swift_retain();
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    uint64_t v8 = type metadata accessor for MLActionClassifier.DataSource(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v8);
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        uint64_t v39 = type metadata accessor for URL(0);
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
        v45(v5, v6, v39);
        uint64_t v42 = v8;
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v45(&v5[v10[12]], &v6[v10[12]], v39);
        uint64_t v11 = v10[16];
        *(void *)&v5[v11] = *(void *)&v6[v11];
        uint64_t v12 = *(void *)&v6[v11 + 8];
        *(void *)&v5[v11 + 8] = v12;
        uint64_t v13 = v10[20];
        *(void *)&v5[v13] = *(void *)&v6[v13];
        uint64_t v46 = *(void *)&v6[v13 + 8];
        *(void *)&v5[v13 + 8] = v46;
        uint64_t v14 = v10[24];
        *(void *)&v5[v14] = *(void *)&v6[v14];
        uint64_t v40 = *(void *)&v6[v14 + 8];
        *(void *)&v5[v14 + 8] = v40;
        uint64_t v15 = v10[28];
        *(void *)&v5[v15] = *(void *)&v6[v15];
        goto LABEL_10;
      case 1u:
      case 2u:
        uint64_t v9 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v5, v6, v9);
        goto LABEL_13;
      case 3u:
        uint64_t v43 = v8;
        uint64_t v16 = *(void *)v6;
        char v47 = v6[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v6, v47);
        *(void *)uint64_t v5 = v16;
        v5[8] = v47;
        *((void *)v5 + 2) = *((void *)v6 + 2);
        uint64_t v17 = *((void *)v6 + 3);
        *((void *)v5 + 3) = v17;
        *((void *)v5 + 4) = *((void *)v6 + 4);
        uint64_t v18 = *((void *)v6 + 5);
        *((void *)v5 + 5) = v18;
        *((void *)v5 + 6) = *((void *)v6 + 6);
        uint64_t v48 = *((void *)v6 + 7);
        *((void *)v5 + 7) = v48;
        swift_bridgeObjectRetain(v17);
        LOBYTE(v17) = v18;
        uint64_t v8 = v43;
        swift_bridgeObjectRetain(v17);
        char v19 = v48;
        goto LABEL_12;
      case 4u:
        uint64_t v44 = v8;
        uint64_t v20 = *(void *)v6;
        char v49 = v6[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v6, v49);
        *(void *)uint64_t v5 = v20;
        v5[8] = v49;
        *((void *)v5 + 2) = *((void *)v6 + 2);
        uint64_t v21 = *((void *)v6 + 3);
        *((void *)v5 + 3) = v21;
        *((void *)v5 + 4) = *((void *)v6 + 4);
        uint64_t v22 = *((void *)v6 + 5);
        *((void *)v5 + 5) = v22;
        *((void *)v5 + 6) = *((void *)v6 + 6);
        uint64_t v50 = *((void *)v6 + 7);
        *((void *)v5 + 7) = v50;
        *((void *)v5 + 8) = *((void *)v6 + 8);
        uint64_t v41 = *((void *)v6 + 9);
        *((void *)v5 + 9) = v41;
        swift_bridgeObjectRetain(v21);
        LOBYTE(v21) = v22;
        uint64_t v8 = v44;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v50);
        char v19 = v41;
        goto LABEL_12;
      case 5u:
        uint64_t v23 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v5, v6, v23);
        uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v25 = v24[12];
        *(void *)&v5[v25] = *(void *)&v6[v25];
        uint64_t v26 = *(void *)&v6[v25 + 8];
        *(void *)&v5[v25 + 8] = v26;
        uint64_t v27 = v24[16];
        *(void *)&v5[v27] = *(void *)&v6[v27];
        uint64_t v51 = *(void *)&v6[v27 + 8];
        *(void *)&v5[v27 + 8] = v51;
        uint64_t v28 = v24[20];
        *(void *)&v5[v28] = *(void *)&v6[v28];
        uint64_t v42 = v8;
        uint64_t v29 = *(void *)&v6[v28 + 8];
        *(void *)&v5[v28 + 8] = v29;
        swift_bridgeObjectRetain(v26);
        char v30 = v51;
        goto LABEL_11;
      case 6u:
        uint64_t v31 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v5, v6, v31);
        char v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v33 = v32[12];
        *(void *)&v5[v33] = *(void *)&v6[v33];
        uint64_t v12 = *(void *)&v6[v33 + 8];
        *(void *)&v5[v33 + 8] = v12;
        uint64_t v34 = v32[16];
        *(void *)&v5[v34] = *(void *)&v6[v34];
        uint64_t v46 = *(void *)&v6[v34 + 8];
        *(void *)&v5[v34 + 8] = v46;
        uint64_t v35 = v32[20];
        *(void *)&v5[v35] = *(void *)&v6[v35];
        uint64_t v40 = *(void *)&v6[v35 + 8];
        *(void *)&v5[v35 + 8] = v40;
        uint64_t v15 = v32[24];
        *(void *)&v5[v15] = *(void *)&v6[v15];
        uint64_t v42 = v8;
LABEL_10:
        uint64_t v29 = *(void *)&v6[v15 + 8];
        *(void *)&v5[v15 + 8] = v29;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v46);
        char v30 = v40;
LABEL_11:
        swift_bridgeObjectRetain(v30);
        char v19 = v29;
        uint64_t v8 = v42;
LABEL_12:
        swift_bridgeObjectRetain(v19);
LABEL_13:
        swift_storeEnumTagMultiPayload(v5, v8, EnumCaseMultiPayload);
        swift_storeEnumTagMultiPayload(v5, v7, 1);
        break;
    }
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v36 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  *(void *)&v5[v36[5]] = *(void *)&v6[v36[5]];
  *(void *)&v5[v36[6]] = *(void *)&v6[v36[6]];
  *(void *)&v5[v36[7]] = *(void *)&v6[v36[7]];
  *(void *)&v5[v36[8]] = *(void *)&v6[v36[8]];
  *(void *)&v5[v36[10]] = *(void *)&v6[v36[10]];
  return a1;
}

void *assignWithCopy for MLActionClassifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v6, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    uint64_t v8 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      uint64_t v9 = type metadata accessor for MLActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v9);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          uint64_t v40 = type metadata accessor for URL(0);
          uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
          v46(v6, v7, v40);
          uint64_t v43 = v9;
          uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v46(&v6[v11[12]], &v7[v11[12]], v40);
          uint64_t v12 = v11[16];
          *(void *)&v6[v12] = *(void *)&v7[v12];
          uint64_t v13 = *(void *)&v7[v12 + 8];
          *(void *)&v6[v12 + 8] = v13;
          uint64_t v14 = v11[20];
          *(void *)&v6[v14] = *(void *)&v7[v14];
          uint64_t v47 = *(void *)&v7[v14 + 8];
          *(void *)&v6[v14 + 8] = v47;
          uint64_t v15 = v11[24];
          *(void *)&v6[v15] = *(void *)&v7[v15];
          uint64_t v41 = *(void *)&v7[v15 + 8];
          *(void *)&v6[v15 + 8] = v41;
          uint64_t v16 = v11[28];
          *(void *)&v6[v16] = *(void *)&v7[v16];
          goto LABEL_11;
        case 1u:
        case 2u:
          uint64_t v10 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v6, v7, v10);
          goto LABEL_14;
        case 3u:
          uint64_t v44 = v9;
          uint64_t v17 = *(void *)v7;
          char v48 = v7[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v7, v48);
          *(void *)uint64_t v6 = v17;
          v6[8] = v48;
          *((void *)v6 + 2) = *((void *)v7 + 2);
          uint64_t v18 = *((void *)v7 + 3);
          *((void *)v6 + 3) = v18;
          *((void *)v6 + 4) = *((void *)v7 + 4);
          uint64_t v19 = *((void *)v7 + 5);
          *((void *)v6 + 5) = v19;
          *((void *)v6 + 6) = *((void *)v7 + 6);
          uint64_t v49 = *((void *)v7 + 7);
          *((void *)v6 + 7) = v49;
          swift_bridgeObjectRetain(v18);
          LOBYTE(v18) = v19;
          uint64_t v9 = v44;
          swift_bridgeObjectRetain(v18);
          char v20 = v49;
          goto LABEL_13;
        case 4u:
          uint64_t v45 = v9;
          uint64_t v21 = *(void *)v7;
          char v50 = v7[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v7, v50);
          *(void *)uint64_t v6 = v21;
          v6[8] = v50;
          *((void *)v6 + 2) = *((void *)v7 + 2);
          uint64_t v22 = *((void *)v7 + 3);
          *((void *)v6 + 3) = v22;
          *((void *)v6 + 4) = *((void *)v7 + 4);
          uint64_t v23 = *((void *)v7 + 5);
          *((void *)v6 + 5) = v23;
          *((void *)v6 + 6) = *((void *)v7 + 6);
          uint64_t v51 = *((void *)v7 + 7);
          *((void *)v6 + 7) = v51;
          *((void *)v6 + 8) = *((void *)v7 + 8);
          uint64_t v42 = *((void *)v7 + 9);
          *((void *)v6 + 9) = v42;
          swift_bridgeObjectRetain(v22);
          LOBYTE(v22) = v23;
          uint64_t v9 = v45;
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v51);
          char v20 = v42;
          goto LABEL_13;
        case 5u:
          uint64_t v24 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v6, v7, v24);
          uint64_t v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v26 = v25[12];
          *(void *)&v6[v26] = *(void *)&v7[v26];
          uint64_t v27 = *(void *)&v7[v26 + 8];
          *(void *)&v6[v26 + 8] = v27;
          uint64_t v28 = v25[16];
          *(void *)&v6[v28] = *(void *)&v7[v28];
          uint64_t v52 = *(void *)&v7[v28 + 8];
          *(void *)&v6[v28 + 8] = v52;
          uint64_t v29 = v25[20];
          *(void *)&v6[v29] = *(void *)&v7[v29];
          uint64_t v43 = v9;
          uint64_t v30 = *(void *)&v7[v29 + 8];
          *(void *)&v6[v29 + 8] = v30;
          swift_bridgeObjectRetain(v27);
          char v31 = v52;
          goto LABEL_12;
        case 6u:
          uint64_t v32 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v6, v7, v32);
          uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v34 = v33[12];
          *(void *)&v6[v34] = *(void *)&v7[v34];
          uint64_t v13 = *(void *)&v7[v34 + 8];
          *(void *)&v6[v34 + 8] = v13;
          uint64_t v35 = v33[16];
          *(void *)&v6[v35] = *(void *)&v7[v35];
          uint64_t v47 = *(void *)&v7[v35 + 8];
          *(void *)&v6[v35 + 8] = v47;
          uint64_t v36 = v33[20];
          *(void *)&v6[v36] = *(void *)&v7[v36];
          uint64_t v41 = *(void *)&v7[v36 + 8];
          *(void *)&v6[v36 + 8] = v41;
          uint64_t v16 = v33[24];
          *(void *)&v6[v16] = *(void *)&v7[v16];
          uint64_t v43 = v9;
LABEL_11:
          uint64_t v30 = *(void *)&v7[v16 + 8];
          *(void *)&v6[v16 + 8] = v30;
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v47);
          char v31 = v41;
LABEL_12:
          swift_bridgeObjectRetain(v31);
          char v20 = v30;
          uint64_t v9 = v43;
LABEL_13:
          swift_bridgeObjectRetain(v20);
LABEL_14:
          swift_storeEnumTagMultiPayload(v6, v9, EnumCaseMultiPayload);
          swift_storeEnumTagMultiPayload(v6, v8, 1);
          break;
      }
    }
    else
    {
      memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
    }
  }
  uint64_t v37 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  *(void *)&v6[v37[5]] = *(void *)&v7[v37[5]];
  *(void *)&v6[v37[6]] = *(void *)&v7[v37[6]];
  *(void *)&v6[v37[7]] = *(void *)&v7[v37[7]];
  *(void *)&v6[v37[8]] = *(void *)&v7[v37[8]];
  *(void *)&v6[v37[10]] = *(void *)&v7[v37[10]];
  return a1;
}

void *initializeWithTake for MLActionClassifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    uint64_t v8 = type metadata accessor for MLActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v6, v8))
    {
      case 0u:
        uint64_t v23 = type metadata accessor for URL(0);
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
        v24(v5, v6, v23);
        uint64_t v22 = v8;
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v24(&v5[v9[12]], &v6[v9[12]], v23);
        *(_OWORD *)&v5[v9[16]] = *(_OWORD *)&v6[v9[16]];
        *(_OWORD *)&v5[v9[20]] = *(_OWORD *)&v6[v9[20]];
        *(_OWORD *)&v5[v9[24]] = *(_OWORD *)&v6[v9[24]];
        *(_OWORD *)&v5[v9[28]] = *(_OWORD *)&v6[v9[28]];
        uint64_t v10 = v5;
        uint64_t v11 = v22;
        uint64_t v12 = 0;
        goto LABEL_11;
      case 1u:
        uint64_t v13 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v5, v6, v13);
        uint64_t v21 = 1;
        goto LABEL_10;
      case 2u:
        uint64_t v14 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v5, v6, v14);
        uint64_t v21 = 2;
        goto LABEL_10;
      case 5u:
        uint64_t v15 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v5, v6, v15);
        uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v5[v16[12]] = *(_OWORD *)&v6[v16[12]];
        *(_OWORD *)&v5[v16[16]] = *(_OWORD *)&v6[v16[16]];
        *(_OWORD *)&v5[v16[20]] = *(_OWORD *)&v6[v16[20]];
        uint64_t v21 = 5;
        goto LABEL_10;
      case 6u:
        uint64_t v17 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v5, v6, v17);
        uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v5[v18[12]] = *(_OWORD *)&v6[v18[12]];
        *(_OWORD *)&v5[v18[16]] = *(_OWORD *)&v6[v18[16]];
        *(_OWORD *)&v5[v18[20]] = *(_OWORD *)&v6[v18[20]];
        *(_OWORD *)&v5[v18[24]] = *(_OWORD *)&v6[v18[24]];
        uint64_t v21 = 6;
LABEL_10:
        uint64_t v12 = v21;
        uint64_t v10 = v5;
        uint64_t v11 = v8;
LABEL_11:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v19 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  *(void *)&v5[v19[5]] = *(void *)&v6[v19[5]];
  *(void *)&v5[v19[6]] = *(void *)&v6[v19[6]];
  *(void *)&v5[v19[7]] = *(void *)&v6[v19[7]];
  *(void *)&v5[v19[8]] = *(void *)&v6[v19[8]];
  *(void *)&v5[v19[10]] = *(void *)&v6[v19[10]];
  return a1;
}

void *assignWithTake for MLActionClassifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v6, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    uint64_t v8 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      uint64_t v9 = type metadata accessor for MLActionClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(v7, v9))
      {
        case 0u:
          uint64_t v24 = type metadata accessor for URL(0);
          uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32);
          v25(v6, v7, v24);
          uint64_t v23 = v9;
          uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v25(&v6[v10[12]], &v7[v10[12]], v24);
          *(_OWORD *)&v6[v10[16]] = *(_OWORD *)&v7[v10[16]];
          *(_OWORD *)&v6[v10[20]] = *(_OWORD *)&v7[v10[20]];
          *(_OWORD *)&v6[v10[24]] = *(_OWORD *)&v7[v10[24]];
          *(_OWORD *)&v6[v10[28]] = *(_OWORD *)&v7[v10[28]];
          uint64_t v11 = v6;
          uint64_t v12 = v23;
          uint64_t v13 = 0;
          goto LABEL_12;
        case 1u:
          uint64_t v14 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v6, v7, v14);
          uint64_t v22 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v15 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v6, v7, v15);
          uint64_t v22 = 2;
          goto LABEL_11;
        case 5u:
          uint64_t v16 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v6, v7, v16);
          uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v6[v17[12]] = *(_OWORD *)&v7[v17[12]];
          *(_OWORD *)&v6[v17[16]] = *(_OWORD *)&v7[v17[16]];
          *(_OWORD *)&v6[v17[20]] = *(_OWORD *)&v7[v17[20]];
          uint64_t v22 = 5;
          goto LABEL_11;
        case 6u:
          uint64_t v18 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v6, v7, v18);
          uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v6[v19[12]] = *(_OWORD *)&v7[v19[12]];
          *(_OWORD *)&v6[v19[16]] = *(_OWORD *)&v7[v19[16]];
          *(_OWORD *)&v6[v19[20]] = *(_OWORD *)&v7[v19[20]];
          *(_OWORD *)&v6[v19[24]] = *(_OWORD *)&v7[v19[24]];
          uint64_t v22 = 6;
LABEL_11:
          uint64_t v13 = v22;
          uint64_t v11 = v6;
          uint64_t v12 = v9;
LABEL_12:
          swift_storeEnumTagMultiPayload(v11, v12, v13);
          break;
        default:
          memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(v6, v8, 1);
    }
    else
    {
      memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
    }
  }
  char v20 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  *(void *)&v6[v20[5]] = *(void *)&v7[v20[5]];
  *(void *)&v6[v20[6]] = *(void *)&v7[v20[6]];
  *(void *)&v6[v20[7]] = *(void *)&v7[v20[7]];
  *(void *)&v6[v20[8]] = *(void *)&v7[v20[8]];
  *(void *)&v6[v20[10]] = *(void *)&v7[v20[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15EF81);
}

uint64_t sub_15EF81(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLActionClassifier.ModelParameters(0);
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 20), a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15F008);
}

uint64_t sub_15F008(void *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLActionClassifier.ModelParameters(0);
    return __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v5);
  }
  return result;
}

uint64_t type metadata completion function for MLActionClassifier(uint64_t a1)
{
  v3[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for MLActionClassifier.ModelParameters(319);
  if (v2 <= 0x3F)
  {
    v3[1] = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MLActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for MLActionClassifier.Prediction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MLActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActionClassifier.Prediction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else {
      int v2 = (*(void *)(a1 + 16) & 0xFFFFFFFF00000001) != 0 ? -1 : *(void *)(a1 + 16) >> 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLActionClassifier.Prediction(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 + 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *(unsigned char *)(a1 + 24) = 0;
    }
    if (a2) {
      *(void *)(a1 + 16) = 2 * (a2 - 1);
    }
  }
}

ValueMetadata *type metadata accessor for MLActionClassifier.Prediction()
{
  return &type metadata for MLActionClassifier.Prediction;
}

uint64_t outlined init with copy of MLActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t sub_15F229()
{
  uint64_t v1 = *(void *)(type metadata accessor for MLActionClassifier.ModelParameters(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 40);
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v5 = v3 + v0;
  uint64_t v6 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v3 + v0, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v3 + v0, v7))
    {
      case 0u:
        uint64_t v17 = type metadata accessor for URL(0);
        uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
        v18(v3 + v0, v17);
        uint64_t v19 = v4;
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v18(v5 + v9[12], v17);
        swift_bridgeObjectRelease(*(void *)(v5 + v9[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v9[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v9[24] + 8));
        uint64_t v10 = v9[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v3 + v0, v8);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        uint64_t v11 = *(void *)(v5 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        swift_bridgeObjectRelease(*(void *)(v5 + 56));
        uint64_t v11 = *(void *)(v5 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v3 + v0, v12);
        uint64_t v19 = v4;
        uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v5 + v13[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v13[16] + 8));
        uint64_t v10 = v13[20];
        goto LABEL_9;
      case 6u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v3 + v0, v14);
        uint64_t v19 = v4;
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[20] + 8));
        uint64_t v10 = v15[24];
LABEL_9:
        uint64_t v4 = v19;
        uint64_t v11 = *(void *)(v5 + v10 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v11);
        break;
      default:
        break;
    }
  }
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MLActionClassifier.ModelParameters(0) - 8);
  uint64_t v4 = ~*(unsigned __int8 *)(v3 + 80) & (*(unsigned __int8 *)(v3 + 80) + 40);
  unint64_t v5 = (v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[4];
  uint64_t v7 = (uint64_t)v1 + v4;
  uint64_t v8 = *(void *)((char *)v1 + v5);
  uint64_t v9 = *(void *)((char *)v1 + v5 + 8);
  uint64_t v10 = (void *)swift_task_alloc(dword_3A962C);
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)(a1, v6, v12, v13, v7, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unint64_t v5 = (void *)swift_task_alloc(dword_3A963C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in closure #1 in closure #1 in closure #1 in static MLActionClassifier.resume(_:)(a1, v3, v4);
}

void *partial apply for closure #1 in static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1)
{
  return closure #1 in static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(a1);
}

uint64_t initializeWithCopy for MLActionClassifier.Prediction(uint64_t a1, uint64_t a2)
{
  return initializeBufferWithCopyOfBuffer for MLActionClassifier.Prediction(a1, a2);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLRandomForestClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(uint64_t a1)
{
  uint64_t v21 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v18 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  uint64_t v19 = &v17;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v17, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v2) == 1)
  {
    uint64_t v9 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
    uint64_t v10 = v21;
    uint64_t v11 = 1;
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v13 = v19;
    uint64_t v14 = v18;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 32))(v19, &v17, v2);
    uint64_t v15 = v21;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v14 + 16))(v21, v13, v2);
    uint64_t v20 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload(v15, v20, 2);
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, v2);
    uint64_t v10 = v15;
    uint64_t v11 = 0;
    uint64_t v12 = v20;
  }
  return __swift_storeEnumTagSinglePayload(v10, v11, 1, v12);
}

uint64_t MLRandomForestClassifier.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v9, &demangling cache variable for type metadata for Any?);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLRandomForestClassifier.ModelParameters.ValidationData.asTable()(a1);
  return outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLRandomForestClassifier.ModelParameters.validationData : MLRandomForestClassifier.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLRandomForestClassifier.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLRandomForestClassifier.ModelParameters.validationData : MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLRandomForestClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v20 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v19 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v15 = v3;
  uint64_t v8 = __swift_allocate_boxed_opaque_existential_1(&v13);
  uint64_t v9 = (uint64_t)v8;
  if (v7 == -1)
  {
    long long v13 = 0;
    __int16 v14 = 256;
    uint64_t v10 = v20;
  }
  else
  {
    uint64_t v18 = v8;
    uint64_t v16 = v19;
    char v17 = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v13 = v19;
      BYTE8(v13) = v7 & 1;
      int v12 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v19, v7);
      int v12 = 3;
    }
    unsigned int v2 = v12;
    uint64_t v10 = v20;
    uint64_t v9 = (uint64_t)v18;
  }
  swift_storeEnumTagMultiPayload(&v13, v3, v2);
  outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)&v13, v9);
  return outlined assign with take of Any?((uint64_t)&v13, v10);
}

uint64_t MLRandomForestClassifier.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

uint64_t outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.validationData.modify(uint64_t a1, __m128 a2))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v2;
  MLRandomForestClassifier.ModelParameters.validationData.getter(a2);
  return MLRandomForestClassifier.ModelParameters.validationData.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = v3;
  if ((a2 & 1) == 0) {
    return MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v6);
  }
  char v4 = v3;
  outlined copy of MLDataTable?(v2, v3);
  MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v6);
  return outlined consume of MLDataTable?(v2, v4);
}

uint64_t key path setter for MLRandomForestClassifier.ModelParameters.validation : MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0)
                             - 8)
                 + 64);
  char v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLRandomForestClassifier.ModelParameters.validation.setter((uint64_t)v6);
}

uint64_t MLRandomForestClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1);
}

void (*MLRandomForestClassifier.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  int64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  char v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, (uint64_t)(v2 + 2), &demangling cache variable for type metadata for Any?);
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLRandomForestClassifier.ModelParameters.validation.modify;
}

void MLRandomForestClassifier.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  size_t v4 = *(void **)(*(void *)a1 + 144);
  uint64_t v8 = *(void *)(*(void *)a1 + 128);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  if (a2)
  {
    outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v4);
    v2[11] = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)boxed_opaque_existential_1);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v8);
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    v2[15] = v5;
    char v7 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v7);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v8);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t MLRandomForestClassifier.ModelParameters.maxDepth.getter()
{
  return *(void *)(v0 + 32);
}

void MLRandomForestClassifier.ModelParameters.maxDepth.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)(v0 + 40);
}

void MLRandomForestClassifier.ModelParameters.maxIterations.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.minLossReduction.getter()
{
  return *(double *)(v0 + 48);
}

void MLRandomForestClassifier.ModelParameters.minLossReduction.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.minChildWeight.getter()
{
  return *(double *)(v0 + 56);
}

void MLRandomForestClassifier.ModelParameters.minChildWeight.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.randomSeed.getter()
{
  return *(void *)(v0 + 64);
}

void MLRandomForestClassifier.ModelParameters.randomSeed.setter(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.rowSubsample.getter()
{
  return *(double *)(v0 + 72);
}

void MLRandomForestClassifier.ModelParameters.rowSubsample.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.columnSubsample.getter()
{
  return *(double *)(v0 + 80);
}

void MLRandomForestClassifier.ModelParameters.columnSubsample.setter(double a1)
{
  *(double *)(v1 + 80) = a1;
}

void (*MLRandomForestClassifier.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v18 = a4;
  uint64_t v20 = a3;
  uint64_t v9 = v8;
  double v19 = a8;
  double v21 = a7;
  double v22 = a6;
  double v23 = a5;
  uint64_t v10 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  int v12 = alloca(v11);
  long long v13 = alloca(v11);
  *(_OWORD *)(v9 + 16) = 0;
  *(_OWORD *)uint64_t v9 = 0;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = v20;
  *(double *)(v9 + 48) = v23;
  *(double *)(v9 + 56) = v22;
  *(void *)(v9 + 64) = v18;
  *(double *)(v9 + 72) = v21;
  *(double *)(v9 + 80) = v19;
  outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(a1, (uint64_t)&v16);
  v17[3] = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)&v16, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v17, v9);
  return outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(a1);
}

uint64_t MLRandomForestClassifier.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v9 = *a1;
  char v10 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v8 + 16) = 0;
  *(_OWORD *)uint64_t v8 = 0;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  *(double *)(v8 + 48) = a5;
  *(double *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a4;
  *(double *)(v8 + 72) = a7;
  *(double *)(v8 + 80) = a8;
  uint64_t v12 = v9;
  char v13 = v10;
  return MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v12);
}

uint64_t MLRandomForestClassifier.ModelParameters.init(configuration:validation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLRandomForestClassifier.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  uint64_t v18 = v15;
  *(_OWORD *)(v3 + 16) = 0;
  *(_OWORD *)uint64_t v3 = 0;
  *(void *)(v3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(void *)(v3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  *(double *)(v3 + 48) = BoostedTreeConfiguration.minimumLossReduction.getter();
  *(double *)(v3 + 56) = BoostedTreeConfiguration.minimumChildWeight.getter();
  *(void *)(v3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  *(double *)(v3 + 72) = BoostedTreeConfiguration.rowSubsample.getter();
  *(double *)(v3 + 80) = BoostedTreeConfiguration.columnSubsample.getter();
  uint64_t v17 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLRandomForestClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v7) == 1)
  {
    uint64_t v11 = (uint64_t)v18;
    swift_storeEnumTagMultiPayload(v18, v7, 3);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v15, &demangling cache variable for type metadata for MLRandomForestClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    uint64_t v11 = (uint64_t)v18;
    outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v15, (uint64_t)v18);
  }
  v16[3] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(v11, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v16, v3);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v17, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v13 = type metadata accessor for BoostedTreeConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
}

uint64_t MLRandomForestClassifier.ModelParameters.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._object = (void *)0xE100000000000000;
  v2._uint64_t countAndFlagsBits = 10;
  String.append(_:)(v2);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  int64_t v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v2._uint64_t countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  v2._object = "ansformer have different types." + 0x8000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease("ansformer have different types." + 0x8000000000000000);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v2._uint64_t countAndFlagsBits = 0xD000000000000014;
  v2._object = "Max Iterations: " + 0x8000000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v5 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v5);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v2._object = "Min Loss Reduction: " + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v6 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v6);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v13._object);
  strcpy((char *)&v13, "Random Seed: ");
  HIWORD(v13._object) = -4864;
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  int64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v2._uint64_t countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v9 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v9);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v2._uint64_t countAndFlagsBits = 0x7362755320776F52;
  v2._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  char v10 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v10);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v2._object = "Min Child Weight: " + 0x8000000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  Double.write<A>(to:)(&v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._uint64_t countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v11 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v11);
  return 0x747065442078614DLL;
}

uint64_t MLRandomForestClassifier.ModelParameters.debugDescription.getter()
{
  return MLRandomForestClassifier.ModelParameters.description.getter();
}

uint64_t MLRandomForestClassifier.ModelParameters.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t result = MLRandomForestClassifier.ModelParameters.description.getter();
  v1[3] = (uint64_t)&type metadata for String;
  *uint64_t v1 = result;
  v1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRandomForestClassifier.ModelParameters()
{
  return MLRandomForestClassifier.ModelParameters.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLRandomForestClassifier.ModelParameters()
{
  return MLRandomForestClassifier.ModelParameters.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRandomForestClassifier.ModelParameters()
{
  return MLRandomForestClassifier.ModelParameters.playgroundDescription.getter();
}

uint64_t sub_1604FE(__m128 a1)
{
  return key path getter for MLRandomForestClassifier.ModelParameters.validationData : MLRandomForestClassifier.ModelParameters(a1);
}

uint64_t sub_160508(uint64_t a1)
{
  return key path setter for MLRandomForestClassifier.ModelParameters.validationData : MLRandomForestClassifier.ModelParameters(a1);
}

uint64_t sub_160512(uint64_t a1)
{
  return MLRandomForestClassifier.ModelParameters.validation.getter(a1);
}

uint64_t sub_160529(uint64_t a1)
{
  return key path setter for MLRandomForestClassifier.ModelParameters.validation : MLRandomForestClassifier.ModelParameters(a1);
}

uint64_t initializeWithCopy for MLRandomForestClassifier.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
  }
  else
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
  }
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

uint64_t assignWithCopy for MLRandomForestClassifier.ModelParameters(uint64_t a1, long long *a2)
{
  uint64_t v2 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      (**(void (***)(uint64_t, long long *))(v2 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v3 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)a1 = v3;
    goto LABEL_8;
  }
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  uint64_t result = a1;
  qmemcpy(a1, a2, 0x58uLL);
  return result;
}

uint64_t assignWithTake for MLRandomForestClassifier.ModelParameters(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)a1);
  }
  long long v2 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 88))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLRandomForestClassifier.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 88) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 24) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLRandomForestClassifier.ModelParameters()
{
  return &type metadata for MLRandomForestClassifier.ModelParameters;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.MLP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((v4 + 16) & ~v4));
    swift_retain(v8);
  }
  else
  {
    uint64_t v6 = type metadata accessor for Dense(0);
    Swift::String v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v7((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v6);
  }
  return v3;
}

uint64_t destroy for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for Dense(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v3)(a1 + *(int *)(a2 + 20), v2);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Dense(0);
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v5(a1 + *(int *)(a3 + 20), *(int *)(a3 + 20) + a2, v4);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Dense(0);
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  v5(a1 + *(int *)(a3 + 20), *(int *)(a3 + 20) + a2, v4);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Dense(0);
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v5(a1 + *(int *)(a3 + 20), *(int *)(a3 + 20) + a2, v4);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Dense(0);
  int v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  v5(a1 + *(int *)(a3 + 20), *(int *)(a3 + 20) + a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1609B2);
}

uint64_t sub_1609B2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Dense);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1609E3);
}

uint64_t sub_1609E3(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Dense);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.MLP(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.MLP, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.MLP);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.MLP(uint64_t a1)
{
  uint64_t result = type metadata accessor for Dense(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = v3[0];
    swift_initStructMetadata(a1, 256, 2, v3, a1 + 16);
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.CausalConv1D(_OWORD *a1, char *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *unint64_t v3 = *(void *)a2;
    unint64_t v3 = (void *)(v8 + ((v4 + 16) & ~v4));
    swift_retain(v8);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = type metadata accessor for Conv1D(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))((char *)a1 + v6, &a2[v6], v7);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)&a2[*(int *)(a3 + 24)];
  }
  return v3;
}

uint64_t destroy for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 20) + a1;
  uint64_t v3 = type metadata accessor for Conv1D(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
}

char *initializeWithCopy for MLFewShotSoundClassifier.CausalConv1D(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for Conv1D(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(&a1[v4], &a2[v4], v5);
  *(_DWORD *)&a1[*(int *)(a3 + 24)] = *(_DWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithCopy for MLFewShotSoundClassifier.CausalConv1D(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for Conv1D(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 24))(&a1[v4], &a2[v4], v5);
  *(_DWORD *)&a1[*(int *)(a3 + 24)] = *(_DWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for MLFewShotSoundClassifier.CausalConv1D(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for Conv1D(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(&a1[v4], &a2[v4], v5);
  *(_DWORD *)&a1[*(int *)(a3 + 24)] = *(_DWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for MLFewShotSoundClassifier.CausalConv1D(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for Conv1D(0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 40))(&a1[v4], &a2[v4], v5);
  *(_DWORD *)&a1[*(int *)(a3 + 24)] = *(_DWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_160CAF);
}

uint64_t sub_160CAF(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20) + a1;
  uint64_t v4 = type metadata accessor for Conv1D(0);
  return __swift_getEnumTagSinglePayload(v3, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_160CEB);
}

uint64_t sub_160CEB(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(int *)(a4 + 20) + a1;
  uint64_t v5 = type metadata accessor for Conv1D(0);
  return __swift_storeEnumTagSinglePayload(v4, a2, a2, v5);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1)
{
  v3[0] = &unk_34C528;
  uint64_t result = type metadata accessor for Conv1D(319);
  if (v2 <= 0x3F)
  {
    v3[1] = *(void *)(result - 8) + 64;
    v3[2] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 256, 3, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v18 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Conv2D(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)((char *)a1 + *(int *)(v7 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 20));
    uint64_t v8 = a3[5];
    uint64_t v24 = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    uint64_t v10 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    double v21 = a3;
    uint64_t v11 = *(int *)(v10 + 20);
    uint64_t v22 = type metadata accessor for Conv1D(0);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    v20(&v24[v11], &v9[v11], v22);
    *(_DWORD *)&v24[*(int *)(v10 + 24)] = *(_DWORD *)&v9[*(int *)(v10 + 24)];
    uint64_t v12 = v21[6];
    uint64_t v25 = (char *)a1 + v12;
    double v23 = (char *)a2 + v12;
    *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    v20((char *)a1 + v12 + *(int *)(v10 + 20), (char *)a2 + v12 + *(int *)(v10 + 20), v22);
    *(_DWORD *)&v25[*(int *)(v10 + 24)] = *(_DWORD *)&v23[*(int *)(v10 + 24)];
    uint64_t v13 = v21[7];
    uint64_t v26 = (char *)a1 + v13;
    __int16 v14 = (char *)a2 + v13;
    *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
    v20((char *)a1 + v13 + *(int *)(v10 + 20), (char *)a2 + v13 + *(int *)(v10 + 20), v22);
    *(_DWORD *)&v26[*(int *)(v10 + 24)] = *(_DWORD *)&v14[*(int *)(v10 + 24)];
    uint64_t v15 = v21[8];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
    v20((char *)a1 + v15 + *(int *)(v10 + 20), (char *)a2 + v15 + *(int *)(v10 + 20), v22);
    *(_DWORD *)&v16[*(int *)(v10 + 24)] = *(_DWORD *)&v17[*(int *)(v10 + 24)];
  }
  return v3;
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.LeakyConv2D);
}

uint64_t destroy for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = a1 + a2[5];
  uint64_t v4 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v5 = v3 + *(int *)(v4 + 20);
  uint64_t v6 = type metadata accessor for Conv1D(0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[6] + *(int *)(v4 + 20), v6);
  v7(a1 + a2[7] + *(int *)(v4 + 20), v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[8] + *(int *)(v4 + 20), v6);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  uint64_t v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  uint64_t v7 = a3[5];
  uint64_t v24 = a1 + v7;
  uint64_t v27 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v22 = v9 + v24;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  uint64_t v12 = v27 + v9;
  uint64_t v13 = v10;
  v11(v22, v12);
  *(_DWORD *)(*(int *)(v8 + 24) + v24) = *(_DWORD *)(*(int *)(v8 + 24) + v27);
  uint64_t v14 = a3[6];
  uint64_t v28 = a1 + v14;
  uint64_t v25 = a2 + v14;
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v21 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v14 + *(int *)(v8 + 20), a2 + v14 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v28) = *(_DWORD *)(*(int *)(v8 + 24) + v25);
  uint64_t v15 = a3[7];
  uint64_t v29 = a1 + v15;
  uint64_t v26 = a2 + v15;
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v29) = *(_DWORD *)(*(int *)(v8 + 24) + v26);
  uint64_t v16 = a3[8];
  uint64_t v17 = (_OWORD *)(a1 + v16);
  long long v18 = *(_OWORD *)(a2 + v16);
  uint64_t v19 = v16 + a2;
  *uint64_t v17 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v16 + *(int *)(v8 + 20), v19 + *(int *)(v8 + 20), v21);
  *(_DWORD *)((char *)v17 + *(int *)(v8 + 24)) = *(_DWORD *)(*(int *)(v8 + 24) + v19);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  uint64_t v7 = a3[5];
  uint64_t v24 = a1 + v7;
  uint64_t v27 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + v7 + 8) = *(void *)(a2 + v7 + 8);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v22 = v9 + v24;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  uint64_t v12 = v27 + v9;
  uint64_t v13 = v10;
  v11(v22, v12);
  *(_DWORD *)(*(int *)(v8 + 24) + v24) = *(_DWORD *)(*(int *)(v8 + 24) + v27);
  uint64_t v14 = a3[6];
  uint64_t v28 = a1 + v14;
  uint64_t v25 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  *(void *)(a1 + v14 + 8) = *(void *)(a2 + v14 + 8);
  uint64_t v21 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v14 + *(int *)(v8 + 20), a2 + v14 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v28) = *(_DWORD *)(*(int *)(v8 + 24) + v25);
  uint64_t v15 = a3[7];
  uint64_t v29 = a1 + v15;
  uint64_t v26 = a2 + v15;
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  *(void *)(a1 + v15 + 8) = *(void *)(a2 + v15 + 8);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v13);
  uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t))v11;
  *(_DWORD *)(*(int *)(v8 + 24) + v29) = *(_DWORD *)(*(int *)(v8 + 24) + v26);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(void *)(a1 + v17 + 8) = *(void *)(a2 + v17 + 8);
  v16(a1 + v17 + *(int *)(v8 + 20), a2 + v17 + *(int *)(v8 + 20), v21);
  *(_DWORD *)(*(int *)(v8 + 24) + v18) = *(_DWORD *)(*(int *)(v8 + 24) + v19);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  uint64_t v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  uint64_t v7 = a3[5];
  uint64_t v24 = a1 + v7;
  uint64_t v27 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v22 = v9 + v24;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  uint64_t v12 = v27 + v9;
  uint64_t v13 = v10;
  v11(v22, v12);
  *(_DWORD *)(*(int *)(v8 + 24) + v24) = *(_DWORD *)(*(int *)(v8 + 24) + v27);
  uint64_t v14 = a3[6];
  uint64_t v28 = a1 + v14;
  uint64_t v25 = a2 + v14;
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v21 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v14 + *(int *)(v8 + 20), a2 + v14 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v28) = *(_DWORD *)(*(int *)(v8 + 24) + v25);
  uint64_t v15 = a3[7];
  uint64_t v29 = a1 + v15;
  uint64_t v26 = a2 + v15;
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v29) = *(_DWORD *)(*(int *)(v8 + 24) + v26);
  uint64_t v16 = a3[8];
  uint64_t v17 = (_OWORD *)(a1 + v16);
  long long v18 = *(_OWORD *)(a2 + v16);
  uint64_t v19 = v16 + a2;
  *uint64_t v17 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v16 + *(int *)(v8 + 20), v19 + *(int *)(v8 + 20), v21);
  *(_DWORD *)((char *)v17 + *(int *)(v8 + 24)) = *(_DWORD *)(*(int *)(v8 + 24) + v19);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  uint64_t v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  uint64_t v7 = a3[5];
  uint64_t v24 = a1 + v7;
  uint64_t v27 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v22 = v9 + v24;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  uint64_t v12 = v27 + v9;
  uint64_t v13 = v10;
  v11(v22, v12);
  *(_DWORD *)(*(int *)(v8 + 24) + v24) = *(_DWORD *)(*(int *)(v8 + 24) + v27);
  uint64_t v14 = a3[6];
  uint64_t v28 = a1 + v14;
  uint64_t v25 = a2 + v14;
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v21 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v14 + *(int *)(v8 + 20), a2 + v14 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v28) = *(_DWORD *)(*(int *)(v8 + 24) + v25);
  uint64_t v15 = a3[7];
  uint64_t v29 = a1 + v15;
  uint64_t v26 = a2 + v15;
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v13);
  *(_DWORD *)(*(int *)(v8 + 24) + v29) = *(_DWORD *)(*(int *)(v8 + 24) + v26);
  uint64_t v16 = a3[8];
  uint64_t v17 = (_OWORD *)(a1 + v16);
  long long v18 = *(_OWORD *)(a2 + v16);
  uint64_t v19 = v16 + a2;
  *uint64_t v17 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(a1 + v16 + *(int *)(v8 + 20), v19 + *(int *)(v8 + 20), v21);
  *(_DWORD *)((char *)v17 + *(int *)(v8 + 24)) = *(_DWORD *)(*(int *)(v8 + 24) + v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16168D);
}

uint64_t sub_16168D(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3Tm(a1, a2, a3, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1616B6);
}

uint64_t sub_1616B6(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_4Tm(a1, a2, a3, a4, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(319);
  if (v2 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(319);
    if (v3 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = v5;
      uint64_t v7 = v5;
      uint64_t v8 = v5;
      swift_initStructMetadata(a1, 256, 5, &v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.LeakyConv2D(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v7 + ((v4 + 16) & ~v4));
    swift_retain(v7);
  }
  else
  {
    uint64_t v6 = type metadata accessor for Conv2D(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return v3;
}

uint64_t destroy for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for Conv2D(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_161919);
}

uint64_t sub_161919(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16194E);
}

uint64_t sub_16194E(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v2);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1)
{
  uint64_t result = type metadata accessor for Conv2D(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 256, 2, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.TemporalClassifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v32 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Conv2D(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)((char *)a1 + *(int *)(v7 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 20));
    uint64_t v37 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
    uint64_t v8 = v37[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v38 = (char *)a1 + v8;
    uint64_t v41 = (char *)a2 + v8;
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    uint64_t v10 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    uint64_t v11 = *(int *)(v10 + 20);
    uint64_t v36 = &v9[v11];
    uint64_t v12 = type metadata accessor for Conv1D(0);
    uint64_t v13 = *(void (**)(char *, char *))(*(void *)(v12 - 8) + 16);
    uint64_t v14 = &v41[v11];
    uint64_t v15 = v12;
    v13(v36, v14);
    uint64_t v16 = v13;
    *(_DWORD *)&v38[*(int *)(v10 + 24)] = *(_DWORD *)&v41[*(int *)(v10 + 24)];
    uint64_t v17 = v37[6];
    uint64_t v42 = (char *)a1 + v17;
    uint64_t v39 = (char *)a2 + v17;
    *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
    uint64_t v18 = v15;
    uint64_t v35 = v15;
    uint64_t v19 = v15;
    uint64_t v20 = (void (*)(char *, char *, uint64_t))v16;
    ((void (*)(char *, char *, uint64_t))v16)((char *)a1 + v17 + *(int *)(v10 + 20), (char *)a2 + v17 + *(int *)(v10 + 20), v19);
    *(_DWORD *)&v42[*(int *)(v10 + 24)] = *(_DWORD *)&v39[*(int *)(v10 + 24)];
    uint64_t v21 = v37[7];
    uint64_t v43 = (char *)a1 + v21;
    uint64_t v40 = (char *)a2 + v21;
    *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
    v20((char *)a1 + v21 + *(int *)(v10 + 20), (char *)a2 + v21 + *(int *)(v10 + 20), v18);
    uint64_t v22 = v20;
    *(_DWORD *)&v43[*(int *)(v10 + 24)] = *(_DWORD *)&v40[*(int *)(v10 + 24)];
    uint64_t v23 = v37[8];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
    v22((char *)a1 + v23 + *(int *)(v10 + 20), (char *)a2 + v23 + *(int *)(v10 + 20), v35);
    *(_DWORD *)&v24[*(int *)(v10 + 24)] = *(_DWORD *)&v25[*(int *)(v10 + 24)];
    uint64_t v26 = *(int *)(a3 + 20);
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for Dense(0);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
    v30(v27, v28, v29);
    uint64_t v31 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
    v30(&v27[*(int *)(v31 + 20)], &v28[*(int *)(v31 + 20)], v29);
  }
  return v4;
}

uint64_t destroy for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  unint64_t v3 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v4 = a1 + v3[5];
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v6 = v4 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for Conv1D(0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + v3[6] + *(int *)(v5 + 20), v7);
  v8(a1 + v3[7] + *(int *)(v5 + 20), v7);
  v8(a1 + v3[8] + *(int *)(v5 + 20), v7);
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = type metadata accessor for Dense(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  uint64_t v12 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v12 + 20), v10);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v5 + 20)) = *(_DWORD *)(a2 + *(int *)(v5 + 20));
  uint64_t v33 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v6 = v33[5];
  uint64_t v34 = a1 + v6;
  uint64_t v7 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v37 = v34 + v9;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  uint64_t v12 = v7 + v9;
  uint64_t v13 = v10;
  v11(v37, v12);
  uint64_t v14 = v11;
  *(_DWORD *)(*(int *)(v8 + 24) + v34) = *(_DWORD *)(*(int *)(v8 + 24) + v7);
  uint64_t v15 = v33[6];
  uint64_t v35 = (_OWORD *)(a1 + v15);
  uint64_t v38 = a2 + v15;
  *uint64_t v35 = *(_OWORD *)(a2 + v15);
  uint64_t v16 = v13;
  uint64_t v32 = v13;
  uint64_t v17 = v13;
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))v14;
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v17);
  *(_DWORD *)((char *)v35 + *(int *)(v8 + 24)) = *(_DWORD *)(*(int *)(v8 + 24) + v38);
  uint64_t v19 = v33[7];
  uint64_t v36 = a1 + v19;
  uint64_t v39 = a2 + v19;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v18(a1 + v19 + *(int *)(v8 + 20), a2 + v19 + *(int *)(v8 + 20), v16);
  uint64_t v20 = v18;
  *(_DWORD *)(*(int *)(v8 + 24) + v36) = *(_DWORD *)(*(int *)(v8 + 24) + v39);
  uint64_t v21 = v33[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  v20(a1 + v21 + *(int *)(v8 + 20), a2 + v21 + *(int *)(v8 + 20), v32);
  *(_DWORD *)(*(int *)(v8 + 24) + v22) = *(_DWORD *)(*(int *)(v8 + 24) + v23);
  uint64_t v24 = *(int *)(a3 + 20);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = v24 + a2;
  uint64_t v27 = type metadata accessor for Dense(0);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
  v28(v25, v26, v27);
  uint64_t v29 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v28(*(int *)(v29 + 20) + v25, *(int *)(v29 + 20) + v26, v27);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v5 + 20)) = *(_DWORD *)(a2 + *(int *)(v5 + 20));
  uint64_t v33 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v6 = v33[5];
  uint64_t v34 = a1 + v6;
  uint64_t v37 = a2 + v6;
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  *(void *)(a1 + v6 + 8) = *(void *)(a2 + v6 + 8);
  uint64_t v7 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v32 = v34 + v8;
  uint64_t v9 = type metadata accessor for Conv1D(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);
  uint64_t v11 = v37 + v8;
  uint64_t v12 = v9;
  v10(v32, v11);
  uint64_t v13 = v10;
  *(_DWORD *)(*(int *)(v7 + 24) + v34) = *(_DWORD *)(*(int *)(v7 + 24) + v37);
  uint64_t v14 = v33[6];
  uint64_t v38 = a1 + v14;
  uint64_t v35 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  *(void *)(a1 + v14 + 8) = *(void *)(a2 + v14 + 8);
  uint64_t v15 = v12;
  uint64_t v31 = v12;
  uint64_t v16 = v12;
  uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(a1 + v14 + *(int *)(v7 + 20), a2 + v14 + *(int *)(v7 + 20), v16);
  *(_DWORD *)(*(int *)(v7 + 24) + v38) = *(_DWORD *)(*(int *)(v7 + 24) + v35);
  uint64_t v18 = v33[7];
  uint64_t v39 = a1 + v18;
  uint64_t v36 = a2 + v18;
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  *(void *)(a1 + v18 + 8) = *(void *)(a2 + v18 + 8);
  v17(a1 + v18 + *(int *)(v7 + 20), a2 + v18 + *(int *)(v7 + 20), v15);
  uint64_t v19 = v17;
  *(_DWORD *)(*(int *)(v7 + 24) + v39) = *(_DWORD *)(*(int *)(v7 + 24) + v36);
  uint64_t v20 = v33[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  *(void *)(a1 + v20 + 8) = *(void *)(a2 + v20 + 8);
  v19(a1 + v20 + *(int *)(v7 + 20), a2 + v20 + *(int *)(v7 + 20), v31);
  *(_DWORD *)(*(int *)(v7 + 24) + v21) = *(_DWORD *)(*(int *)(v7 + 24) + v22);
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = v23 + a2;
  uint64_t v26 = type metadata accessor for Dense(0);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 24);
  v27(v24, v25, v26);
  uint64_t v28 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v27(*(int *)(v28 + 20) + v24, *(int *)(v28 + 20) + v25, v26);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v5 + 20)) = *(_DWORD *)(a2 + *(int *)(v5 + 20));
  uint64_t v33 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v6 = v33[5];
  uint64_t v34 = a1 + v6;
  uint64_t v7 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v37 = v34 + v9;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  uint64_t v12 = v7 + v9;
  uint64_t v13 = v10;
  v11(v37, v12);
  uint64_t v14 = v11;
  *(_DWORD *)(*(int *)(v8 + 24) + v34) = *(_DWORD *)(*(int *)(v8 + 24) + v7);
  uint64_t v15 = v33[6];
  uint64_t v35 = (_OWORD *)(a1 + v15);
  uint64_t v38 = a2 + v15;
  *uint64_t v35 = *(_OWORD *)(a2 + v15);
  uint64_t v16 = v13;
  uint64_t v32 = v13;
  uint64_t v17 = v13;
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))v14;
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v17);
  *(_DWORD *)((char *)v35 + *(int *)(v8 + 24)) = *(_DWORD *)(*(int *)(v8 + 24) + v38);
  uint64_t v19 = v33[7];
  uint64_t v36 = a1 + v19;
  uint64_t v39 = a2 + v19;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v18(a1 + v19 + *(int *)(v8 + 20), a2 + v19 + *(int *)(v8 + 20), v16);
  uint64_t v20 = v18;
  *(_DWORD *)(*(int *)(v8 + 24) + v36) = *(_DWORD *)(*(int *)(v8 + 24) + v39);
  uint64_t v21 = v33[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  v20(a1 + v21 + *(int *)(v8 + 20), a2 + v21 + *(int *)(v8 + 20), v32);
  *(_DWORD *)(*(int *)(v8 + 24) + v22) = *(_DWORD *)(*(int *)(v8 + 24) + v23);
  uint64_t v24 = *(int *)(a3 + 20);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = v24 + a2;
  uint64_t v27 = type metadata accessor for Dense(0);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  uint64_t v29 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v28(*(int *)(v29 + 20) + v25, *(int *)(v29 + 20) + v26, v27);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Conv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v5 + 20)) = *(_DWORD *)(a2 + *(int *)(v5 + 20));
  uint64_t v33 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v6 = v33[5];
  uint64_t v34 = a1 + v6;
  uint64_t v7 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v8 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v37 = v34 + v9;
  uint64_t v10 = type metadata accessor for Conv1D(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  uint64_t v12 = v7 + v9;
  uint64_t v13 = v10;
  v11(v37, v12);
  uint64_t v14 = v11;
  *(_DWORD *)(*(int *)(v8 + 24) + v34) = *(_DWORD *)(*(int *)(v8 + 24) + v7);
  uint64_t v15 = v33[6];
  uint64_t v35 = (_OWORD *)(a1 + v15);
  uint64_t v38 = a2 + v15;
  *uint64_t v35 = *(_OWORD *)(a2 + v15);
  uint64_t v16 = v13;
  uint64_t v32 = v13;
  uint64_t v17 = v13;
  uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))v14;
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(a1 + v15 + *(int *)(v8 + 20), a2 + v15 + *(int *)(v8 + 20), v17);
  *(_DWORD *)((char *)v35 + *(int *)(v8 + 24)) = *(_DWORD *)(*(int *)(v8 + 24) + v38);
  uint64_t v19 = v33[7];
  uint64_t v36 = a1 + v19;
  uint64_t v39 = a2 + v19;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v18(a1 + v19 + *(int *)(v8 + 20), a2 + v19 + *(int *)(v8 + 20), v16);
  uint64_t v20 = v18;
  *(_DWORD *)(*(int *)(v8 + 24) + v36) = *(_DWORD *)(*(int *)(v8 + 24) + v39);
  uint64_t v21 = v33[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  v20(a1 + v21 + *(int *)(v8 + 20), a2 + v21 + *(int *)(v8 + 20), v32);
  *(_DWORD *)(*(int *)(v8 + 24) + v22) = *(_DWORD *)(*(int *)(v8 + 24) + v23);
  uint64_t v24 = *(int *)(a3 + 20);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = v24 + a2;
  uint64_t v27 = type metadata accessor for Dense(0);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40);
  v28(v25, v26, v27);
  uint64_t v29 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v28(*(int *)(v29 + 20) + v25, *(int *)(v29 + 20) + v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1624E4);
}

uint64_t sub_1624E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3Tm(a1, a2, a3, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.MLP);
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t a1), uint64_t (*a5)(void))
{
  uint64_t v7 = a1;
  uint64_t v8 = a4(0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) != a2)
  {
    uint64_t v8 = a5(0);
    uint64_t v7 = *(int *)(a3 + 20) + a1;
  }
  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_162551);
}

uint64_t sub_162551(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_4Tm(a1, a2, a3, a4, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.MLP);
}

uint64_t __swift_store_extra_inhabitant_index_4Tm(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t a1), uint64_t (*a6)(void))
{
  uint64_t v9 = a1;
  uint64_t v10 = a5(0);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) != a3)
  {
    uint64_t v10 = a6(0);
    uint64_t v9 = *(int *)(a4 + 20) + a1;
  }
  return __swift_storeEnumTagSinglePayload(v9, a2, a2, v10);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.TemporalClassifier, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLFewShotSoundClassifier.MLP(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t MLFewShotSoundClassifier.TemporalClassifier.init(outputs:inputChannels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v21 = a1;
  uint64_t v22 = v2;
  uint64_t v23 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  int64_t v3 = *(void *)(*(void *)(v23 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v25 = &v20;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = type metadata accessor for ParameterInitializer(0);
  uint64_t v30 = type metadata accessor for ComputeDevice(0);
  __swift_storeEnumTagSinglePayload((uint64_t)&v20, 1, 1, v30);
  uint64_t v10 = static ParameterInitializer.randomNormal(mean:standardDeviation:seed:scalarType:on:)(0xFFFFFFFLL, 0, &type metadata for Float, &protocol witness table for Float, &v20, 0.0, 0.1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v20, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v11 = ((uint64_t (*)(void))static ParameterInitializer.zeros.getter)();
  __swift_storeEnumTagSinglePayload((uint64_t)&v20, 1, 1, v30);
  uint64_t v27 = v9;
  uint64_t v30 = static ParameterInitializer.glorotUniform(seed:scalarType:on:)(0xFFFFFFFLL, 0, &type metadata for Float, &protocol witness table for Float, &v20);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v20, &demangling cache variable for type metadata for ComputeDevice?);
  uint64_t v26 = ((uint64_t (*)(void))static ParameterInitializer.zeros.getter)();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLFewShotSoundClassifier.CausalConv1D>);
  uint64_t v13 = *(void *)(type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0) - 8);
  uint64_t v14 = swift_allocObject(v12, ((*(unsigned __int8 *)(v13 + 80) + 32) & ~*(unsigned __int8 *)(v13 + 80)) + 4 * *(void *)(v13 + 72), *(unsigned __int8 *)(v13 + 80) | 7);
  uint64_t v28 = v14;
  *(void *)(v14 + 16) = 4;
  *(void *)(v14 + 24) = 8;
  swift_retain();
  swift_retain();
  MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)(4, 5, 1, 1uLL, v10, v11, 0.1);
  swift_retain();
  swift_retain();
  MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)(8, 5, 1, 2uLL, v10, v11, 0.1);
  swift_retain();
  swift_retain();
  MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)(8, 5, 1, 4uLL, v10, v11, 0.1);
  swift_retain();
  uint64_t v29 = v11;
  swift_retain();
  MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)(8, 5, 1, 8uLL, v10, v11, 0.1);
  swift_retain();
  uint64_t v15 = static ParameterInitializer.zeros.getter(v10);
  uint64_t v16 = (uint64_t)v25;
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(10, v24, 1, 1, 1, 0, 0, 1, 1, 1, v10, v15);
  *(float *)(v16 + *(int *)(v23 + 20)) = LeakyReLU.init(alpha:)(0.1);
  MLFewShotSoundClassifier.ConvolutionalNetwork.init(causal:featureReduction:)(v28, v16);
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  uint64_t v17 = v30;
  swift_retain();
  uint64_t v18 = v26;
  swift_retain();
  Dense.init(unitCount:weightInitializer:biasInitializer:)(32, v17, v18);
  type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  swift_retain();
  Dense.init(unitCount:weightInitializer:biasInitializer:)(v21, v17, v18);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t MLFewShotSoundClassifier.CausalPadding.forward(_:)(uint64_t a1)
{
  return Layer.callAsFunction(_:)(a1, &type metadata for ZeroPad1D, &protocol witness table for ZeroPad1D);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.CausalPadding(uint64_t a1)
{
  return MLFewShotSoundClassifier.CausalPadding.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.CausalPadding(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.CausalPadding(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v29 = a4;
  unint64_t v31 = a3;
  uint64_t v24 = a2;
  float v30 = a6;
  uint64_t v8 = v6;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v25 = &v23;
  uint64_t v12 = type metadata accessor for Tensor(0);
  uint64_t v13 = *(void *)(v12 - 8);
  int64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  if (__OFSUB__(a1, 1)) {
    BUG();
  }
  if (!is_mul_ok(v31, a1 - 1)) {
    BUG();
  }
  uint64_t v27 = v12;
  uint64_t v17 = v13;
  uint64_t v26 = v13;
  *uint64_t v8 = ZeroPad1D.init(size:)(v31 * (a1 - 1), 0);
  v8[1] = v18;
  uint64_t v28 = v8;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(&v23, v29, v12);
  uint64_t v19 = (uint64_t)v25;
  outlined init with copy of Tensor?(a5, (uint64_t)v25);
  uint64_t v20 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v21 = v28;
  Conv1D.init(weight:bias:stride:padding:dilation:groupCount:)(&v23, v19, v24, 0, v31, 1);
  LODWORD(v31) = LeakyReLU.init(alpha:)(v30);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a5, &demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v27);
  uint64_t result = *(int *)(v20 + 24);
  *(_DWORD *)((char *)v21 + result) = v31;
  return result;
}

uint64_t MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v8 = v7;
  if (__OFSUB__(a2, 1)) {
    BUG();
  }
  if (!is_mul_ok(a4, a2 - 1)) {
    BUG();
  }
  *uint64_t v7 = ZeroPad1D.init(size:)(a4 * (a2 - 1), 0);
  v8[1] = v11;
  uint64_t v12 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  swift_retain();
  swift_retain();
  Conv1D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)(a1, a2, a3, 0, a4, 1, a5, a6);
  float v16 = LeakyReLU.init(alpha:)(a7);
  swift_release();
  swift_release();
  uint64_t result = *(int *)(v12 + 24);
  *(float *)((char *)v8 + result) = v16;
  return result;
}

uint64_t MLFewShotSoundClassifier.CausalConv1D.forward(_:)(uint64_t a1)
{
  uint64_t v16 = a1;
  uint64_t v14 = v1;
  uint64_t v3 = type metadata accessor for Tensor(0);
  uint64_t v15 = *(void *)(v3 - 8);
  int64_t v4 = *(void *)(v15 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  int v17 = *(_DWORD *)((char *)v2 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0) + 24));
  long long v13 = *v2;
  uint64_t v9 = lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
  Layer.callAsFunction(_:)(v16, &type metadata for MLFewShotSoundClassifier.CausalPadding, v9);
  uint64_t v10 = type metadata accessor for Conv1D(0);
  Layer.callAsFunction(_:)(&v13, v10, &protocol witness table for Conv1D);
  uint64_t v11 = *(void (**)(long long *, uint64_t))(v15 + 8);
  v11(&v13, v3);
  Layer.callAsFunction(_:)(&v13, &type metadata for LeakyReLU, &protocol witness table for LeakyReLU);
  return ((uint64_t (*)(long long *, uint64_t))v11)(&v13, v3);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.CausalConv1D(uint64_t a1)
{
  return MLFewShotSoundClassifier.CausalConv1D.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.CausalConv1D);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.CausalConv1D);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLFewShotSoundClassifier.MLP.forward(_:)(uint64_t a1)
{
  uint64_t v34 = v2;
  uint64_t v29 = a1;
  uint64_t v26 = v1;
  uint64_t v27 = type metadata accessor for Tensor(0);
  uint64_t v28 = *(void *)(v27 - 8);
  int64_t v3 = *(void *)(v28 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v32 = &v26;
  uint64_t v8 = alloca(v3);
  uint64_t v9 = alloca(v3);
  float v30 = &v26;
  uint64_t v10 = type metadata accessor for Dense(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v12 = v31;
  long long v13 = alloca(v11);
  uint64_t v14 = alloca(v11);
  uint64_t v33 = &v26;
  uint64_t v15 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(&v26, v2 + *(int *)(v15 + 20), v10);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TensorRangeExpression?>);
  uint64_t v17 = swift_allocObject(v16, 152, 7);
  LOBYTE(v12) = v17;
  *(void *)(v17 + 16) = 3;
  *(void *)(v17 + 24) = 6;
  *(_OWORD *)(v17 + 32) = 0;
  *(_OWORD *)(v17 + 48) = 0;
  *(_OWORD *)(v17 + 64) = 0;
  *(_OWORD *)(v17 + 80) = 0;
  *(_OWORD *)(v17 + 96) = 0;
  *(void *)(v17 + 136) = &type metadata for Int;
  *(void *)(v17 + 144) = &protocol witness table for Int;
  *(void *)(v17 + 112) = -1;
  Tensor.subscript.getter(v17);
  swift_bridgeObjectRelease(v12);
  uint64_t v18 = v32;
  Layer.callAsFunction(_:)(&v26, v10, &protocol witness table for Dense);
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t))(v28 + 8);
  uint64_t v20 = v27;
  v19(&v26, v27);
  uint64_t v21 = v30;
  relu(_:)(v18);
  v19(v18, v20);
  uint64_t v22 = v21;
  uint64_t v23 = v21;
  uint64_t v24 = v33;
  Layer.callAsFunction(_:)(v22, v10, &protocol witness table for Dense);
  v19(v23, v20);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 8))(v24, v10);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.MLP(uint64_t a1)
{
  return MLFewShotSoundClassifier.MLP.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, type metadata accessor for MLFewShotSoundClassifier.MLP, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.MLP);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, type metadata accessor for MLFewShotSoundClassifier.MLP, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.MLP);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLFewShotSoundClassifier.LeakyConv2D.forward(_:)(unint64_t a1, double a2)
{
  uint64_t v38 = v3;
  unint64_t v42 = a1;
  uint64_t v32 = v2;
  uint64_t v33 = type metadata accessor for Tensor(0);
  uint64_t v43 = *(void *)(v33 - 8);
  int64_t v4 = *(void *)(v43 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v34 = v30;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v41 = v30;
  uint64_t v9 = alloca(v4);
  uint64_t v10 = alloca(v4);
  uint64_t v37 = v30;
  int64_t v11 = alloca(v4);
  uint64_t v12 = alloca(v4);
  uint64_t v36 = v30;
  uint64_t v13 = type metadata accessor for TensorShape(0);
  uint64_t v14 = *(void *)(v13 - 8);
  int64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  Tensor.shape.getter();
  unint64_t v35 = TensorShape.subscript.getter(0);
  uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
  v18(v30, v13);
  Tensor.shape.getter();
  uint64_t v44 = TensorShape.subscript.getter(1);
  v18(v30, v13);
  Tensor.shape.getter();
  unint64_t v19 = TensorShape.subscript.getter(2);
  uint64_t v39 = v13;
  uint64_t v40 = v18;
  v18(v30, v13);
  Tensor.transposed(permutation:)(&outlined read-only object #0 of MLFewShotSoundClassifier.LeakyConv2D.forward(_:));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v21 = (void *)swift_allocObject(v20, 64, 7);
  v21[2] = 4;
  v21[3] = 8;
  unint64_t v42 = v19;
  if (!is_mul_ok(v19, v35)) {
    BUG();
  }
  v21[4] = v19 * v35;
  v21[5] = 1;
  v21[6] = v44;
  v21[7] = 1;
  TensorShape.init(_:)(v21, a2);
  uint64_t v44 = v20;
  uint64_t v22 = v37;
  Tensor.reshaped(to:)(v30);
  v40(v30, v39);
  unsigned int v31 = *(_DWORD *)(v38 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0) + 20));
  *(void *)&double v23 = v31;
  uint64_t v24 = type metadata accessor for Conv2D(0);
  uint64_t v25 = v34;
  Layer.callAsFunction(_:)(v22, v24, &protocol witness table for Conv2D);
  Layer.callAsFunction(_:)(v25, &type metadata for LeakyReLU, &protocol witness table for LeakyReLU);
  uint64_t v43 = *(void *)(v43 + 8);
  uint64_t v26 = v33;
  ((void (*)(unsigned char *, uint64_t))v43)(v25, v33);
  uint64_t v27 = (void *)swift_allocObject(v44, 56, 7);
  v27[2] = 3;
  v27[3] = 6;
  v27[4] = v35;
  v27[5] = v42;
  v27[6] = Conv2D.filterCount.getter();
  TensorShape.init(_:)(v27, v23);
  Tensor.reshaped(to:)(v30);
  v40(v30, v39);
  Tensor.transposed(permutation:)(&outlined read-only object #1 of MLFewShotSoundClassifier.LeakyConv2D.forward(_:));
  uint64_t v28 = (void (*)(unsigned char *, uint64_t))v43;
  ((void (*)(unsigned char *, uint64_t))v43)(v25, v26);
  v28(v41, v26);
  v28(v37, v26);
  return ((uint64_t (*)(unsigned char *, uint64_t))v28)(v36, v26);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.LeakyConv2D(unint64_t a1, double a2)
{
  return MLFewShotSoundClassifier.LeakyConv2D.forward(_:)(a1, a2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.LeakyConv2D);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.LeakyConv2D);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t MLFewShotSoundClassifier.ConvolutionalNetwork.init(causal:featureReduction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    BUG();
  }
  int64_t v6 = (int *)v4;
  uint64_t v12 = v3;
  uint64_t v7 = v3 + *(int *)(v4 + 20);
  uint64_t v8 = *(void *)(type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0) - 8);
  uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~*(unsigned __int8 *)(v8 + 80));
  outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v9, v7);
  if (v5 == 1) {
    BUG();
  }
  uint64_t v10 = *(void *)(v8 + 72);
  outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v10 + v9, v12 + v6[6]);
  if (v5 < 3) {
    BUG();
  }
  outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v9 + 2 * v10, v12 + v6[7]);
  if (v5 == 3) {
    BUG();
  }
  outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(3 * v10 + v9, v12 + v6[8]);
  swift_bridgeObjectRelease(a1);
  return outlined init with take of MLFewShotSoundClassifier.LeakyConv2D(a2, v12);
}

uint64_t MLFewShotSoundClassifier.ConvolutionalNetwork.forward(_:)(uint64_t a1)
{
  uint64_t v30 = v1;
  uint64_t v32 = type metadata accessor for Tensor(0);
  uint64_t v31 = *(void *)(v32 - 8);
  int64_t v3 = *(void *)(v31 + 64);
  uint64_t v4 = alloca(v3);
  unint64_t v5 = alloca(v3);
  uint64_t v36 = &v29;
  int64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v37 = &v29;
  uint64_t v8 = alloca(v3);
  uint64_t v9 = alloca(v3);
  uint64_t v38 = &v29;
  uint64_t v10 = alloca(v3);
  int64_t v11 = alloca(v3);
  uint64_t v12 = alloca(v3);
  uint64_t v13 = alloca(v3);
  uint64_t v39 = &v29;
  uint64_t v14 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  uint64_t v15 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.LeakyConv2D);
  Layer.callAsFunction(_:)(a1, v14, v15);
  uint64_t v40 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v34 = v2;
  uint64_t v16 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  uint64_t v41 = v16;
  uint64_t v17 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.CausalConv1D);
  uint64_t v35 = v17;
  uint64_t v33 = &v29;
  Layer.callAsFunction(_:)(v39, v16, v17);
  uint64_t v18 = v38;
  Layer.callAsFunction(_:)(&v29, v41, v17);
  unint64_t v19 = v37;
  uint64_t v20 = v18;
  uint64_t v21 = v41;
  uint64_t v22 = v35;
  Layer.callAsFunction(_:)(v20, v41, v35);
  Layer.callAsFunction(_:)(v19, v21, v22);
  uint64_t v23 = v32;
  uint64_t v24 = v31;
  (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v39, v32);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v24 + 32);
  uint64_t v26 = v30;
  v25(v30, v33, v23);
  uint64_t v27 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(0);
  v25(v26 + v27[5], v38, v23);
  v25(v26 + v27[6], v37, v23);
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t))v25)(v26 + v27[7], v36, v23);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1)
{
  return MLFewShotSoundClassifier.ConvolutionalNetwork.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t *MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:)(unint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v121 = v4;
  unint64_t v97 = a1;
  uint64_t v102 = v3;
  uint64_t v98 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  int64_t v5 = *(void *)(*(void *)(v98 - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v99 = &v97;
  uint64_t v114 = type metadata accessor for ScalarType(0);
  uint64_t v118 = *(void *)(v114 - 8);
  int64_t v8 = *(void *)(v118 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v123 = &v97;
  int64_t v11 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                              - 8)
                  + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v117 = &v97;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v119 = &v97;
  int64_t v17 = *(void *)(*(void *)(type metadata accessor for TensorShape(0) - 8) + 64);
  uint64_t v18 = alloca(v17);
  unint64_t v19 = alloca(v17);
  uint64_t v20 = type metadata accessor for Tensor(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v24 = v121;
  uint64_t v29 = BlobsFile.floatBlob(at:)(0, (uint64_t)a2, v25, v26, v27, v28);
  if (!v24)
  {
    uint64_t v121 = (uint64_t)v29;
    uint64_t v126 = &v97;
    uint64_t v115 = v20;
    uint64_t v122 = &v97;
    uint64_t v35 = v114;
    uint64_t v36 = BlobsFile.floatBlob(at:)(1, (uint64_t)a2, v30, v31, v32, v33);
    uint64_t v120 = (uint64_t)BlobsFile.floatBlob(at:)(2, (uint64_t)a2, v37, v38, v39, v40);
    uint64_t v45 = BlobsFile.floatBlob(at:)(3, (uint64_t)a2, v41, v42, v43, v44);
    char v50 = BlobsFile.floatBlob(at:)(4, (uint64_t)a2, v46, v47, v48, v49);
    uint64_t v116 = (uint64_t)v45;
    uint64_t v109 = v50;
    uint64_t v103 = BlobsFile.floatBlob(at:)(5, (uint64_t)a2, v51, v52, v53, v54);
    uint64_t v100 = BlobsFile.floatBlob(at:)(6, (uint64_t)a2, v55, v56, v57, v58);
    uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLFewShotSoundClassifier.CausalConv1D>);
    uint64_t v59 = *(void *)(type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0) - 8);
    uint64_t v110 = *(void *)(v59 + 72);
    uint64_t v60 = *(unsigned __int8 *)(v59 + 80);
    uint64_t v113 = (v60 + 32) & ~v60;
    uint64_t v61 = swift_allocObject(v125, v113 + 4 * v110, v60 | 7);
    *(void *)(v61 + 16) = 4;
    *(void *)(v61 + 24) = 8;
    uint64_t v101 = v61;
    v113 += v61;
    TensorShape.init(_:)(&outlined read-only object #0 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), a3);
    uint64_t v105 = specialized Collection.prefix(_:)(200, (uint64_t)v36);
    uint64_t v106 = v62;
    uint64_t v107 = v63;
    uint64_t v108 = v64;
    uint64_t v125 = type metadata accessor for ComputeDevice(0);
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    uint64_t v104 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Float>, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
    Tensor.init<A>(shape:scalars:on:)(v126, &v105, v119, v111);
    TensorShape.init(_:)(&outlined read-only object #1 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), a3);
    unsigned int v124 = enum case for ScalarType.float32(_:);
    uint64_t v118 = *(void *)(v118 + 104);
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, enum case for ScalarType.float32(_:), v35);
    uint64_t v65 = (uint64_t)v119;
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    uint64_t v66 = (uint64_t)v117;
    Tensor.init(zeros:scalarType:on:)(v126, v123, v65);
    __swift_storeEnumTagSinglePayload(v66, 0, 1, v115);
    uint64_t v67 = v113;
    MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(5, 1, 1uLL, (uint64_t)v122, (uint64_t)v117, 0.1);
    uint64_t v112 = v67 + v110;
    TensorShape.init(_:)(&outlined read-only object #2 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    uint64_t v105 = specialized Collection.prefix(_:)(160, v120);
    uint64_t v106 = v68;
    uint64_t v107 = v69;
    uint64_t v108 = v70;
    uint64_t v71 = (uint64_t)v119;
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    Tensor.init<A>(shape:scalars:on:)(v126, &v105, v71, v111);
    TensorShape.init(_:)(&outlined read-only object #3 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, v124, v114);
    uint64_t v72 = v71;
    __swift_storeEnumTagSinglePayload(v71, 1, 1, v125);
    uint64_t v73 = (uint64_t)v117;
    Tensor.init(zeros:scalarType:on:)(v126, v123, v72);
    __swift_storeEnumTagSinglePayload(v73, 0, 1, v115);
    MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(5, 1, 2uLL, (uint64_t)v122, v73, 0.1);
    uint64_t v112 = v113 + 2 * v110;
    TensorShape.init(_:)(&outlined read-only object #4 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    uint64_t v105 = v116;
    uint64_t v74 = (uint64_t)v119;
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v116 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], (uint64_t)&protocol conformance descriptor for [A]);
    Tensor.init<A>(shape:scalars:on:)(v126, &v105, v74, v120);
    TensorShape.init(_:)(&outlined read-only object #5 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, v124, v114);
    __swift_storeEnumTagSinglePayload(v74, 1, 1, v125);
    uint64_t v75 = (uint64_t)v117;
    Tensor.init(zeros:scalarType:on:)(v126, v123, v74);
    __swift_storeEnumTagSinglePayload(v75, 0, 1, v115);
    MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(5, 1, 4uLL, (uint64_t)v122, v75, 0.1);
    v113 += 3 * v110;
    int64_t v76 = v126;
    TensorShape.init(_:)(&outlined read-only object #6 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    uint64_t v105 = (uint64_t)v109;
    __swift_storeEnumTagSinglePayload(v74, 1, 1, v125);
    Tensor.init<A>(shape:scalars:on:)(v76, &v105, v74, v120);
    TensorShape.init(_:)(&outlined read-only object #7 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    int64_t v77 = v123;
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, v124, v114);
    __swift_storeEnumTagSinglePayload(v74, 1, 1, v125);
    uint64_t v78 = (uint64_t)v117;
    Tensor.init(zeros:scalarType:on:)(v126, v77, v119);
    __swift_storeEnumTagSinglePayload(v78, 0, 1, v115);
    MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(5, 1, 8uLL, (uint64_t)v122, v78, 0.1);
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v80 = (void *)swift_allocObject(v79, 64, 7);
    v80[2] = 4;
    v80[3] = 8;
    v80[4] = 10;
    v80[5] = 1;
    unint64_t v81 = v97;
    v80[6] = v97;
    v80[7] = 1;
    TensorShape.init(_:)(v80, COERCE_DOUBLE(1036831949));
    if (!is_mul_ok(0xAuLL, v81)) {
      BUG();
    }
    uint64_t v105 = specialized Collection.prefix(_:)(10 * v81, v121);
    uint64_t v106 = v82;
    uint64_t v107 = v83;
    uint64_t v108 = v84;
    uint64_t v85 = (uint64_t)v119;
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    Tensor.init<A>(shape:scalars:on:)(v126, &v105, v85, v111);
    TensorShape.init(_:)(&outlined read-only object #8 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), COERCE_DOUBLE(1036831949));
    uint64_t v86 = v123;
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, v124, v114);
    __swift_storeEnumTagSinglePayload(v85, 1, 1, v125);
    Tensor.init(zeros:scalarType:on:)(v126, v86, v85);
    uint64_t v87 = (uint64_t)v117;
    __swift_storeEnumTagSinglePayload((uint64_t)v117, 0, 1, v115);
    uint64_t v88 = (uint64_t)v99;
    Conv2D.init(weight:bias:stride:padding:dilation:groupCount:)(v122, v87, 1, 1, 0, 0, 1, 1, 1);
    HIDWORD(v89) = 0;
    *(float *)&double v89 = LeakyReLU.init(alpha:)(0.1);
    *(_DWORD *)(v88 + *(int *)(v98 + 20)) = LODWORD(v89);
    MLFewShotSoundClassifier.ConvolutionalNetwork.init(causal:featureReduction:)(v101, v88);
    uint64_t v90 = v126;
    TensorShape.init(_:)(&outlined read-only object #9 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), v89);
    uint64_t v105 = (uint64_t)v103;
    uint64_t v91 = (uint64_t)v119;
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    Tensor.init<A>(shape:scalars:on:)(v90, &v105, v91, v120);
    TensorShape.init(_:)(&outlined read-only object #10 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), v89);
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, v124, v114);
    uint64_t v92 = v91;
    __swift_storeEnumTagSinglePayload(v91, 1, 1, v125);
    uint64_t v93 = (uint64_t)v117;
    Tensor.init(zeros:scalarType:on:)(v126, v123, v92);
    __swift_storeEnumTagSinglePayload(v93, 0, 1, v115);
    uint64_t v121 = v102 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
    Dense.init(weight:bias:)(v122, v93);
    uint64_t v94 = v126;
    TensorShape.init(_:)(&outlined read-only object #11 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), v89);
    uint64_t v105 = (uint64_t)v100;
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 1, 1, v125);
    uint64_t v95 = (uint64_t)v119;
    Tensor.init<A>(shape:scalars:on:)(v94, &v105, v119, v120);
    TensorShape.init(_:)(&outlined read-only object #12 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:), v89);
    ((void (*)(unint64_t *, void, uint64_t))v118)(v123, v124, v114);
    __swift_storeEnumTagSinglePayload(v95, 1, 1, v125);
    uint64_t v96 = (uint64_t)v117;
    Tensor.init(zeros:scalarType:on:)(v126, v123, v95);
    __swift_storeEnumTagSinglePayload(v96, 0, 1, v115);
    type metadata accessor for MLFewShotSoundClassifier.MLP(0);
    Dense.init(weight:bias:)(v122, v96);
  }
  return outlined release of BlobsFile(a2);
}

uint64_t MLFewShotSoundClassifier.TemporalClassifier.forward(_:)(uint64_t a1)
{
  uint64_t v29 = v1;
  uint64_t v30 = type metadata accessor for Tensor(0);
  uint64_t v31 = *(void *)(v30 - 8);
  int64_t v2 = *(void *)(v31 + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v34 = &v29;
  int64_t v5 = alloca(v2);
  int64_t v6 = alloca(v2);
  uint64_t v33 = &v29;
  uint64_t v7 = alloca(v2);
  int64_t v8 = alloca(v2);
  uint64_t v35 = &v29;
  uint64_t v9 = alloca(v2);
  uint64_t v10 = alloca(v2);
  uint64_t v32 = &v29;
  int64_t v11 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(0);
  int64_t v12 = *(void *)(*((void *)v11 - 1) + 64);
  uint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v15 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  uint64_t v16 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
  Layer.callAsFunction(_:)(a1, v15, v16);
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  int64_t v17 = (char *)&v29 + v11[7];
  uint64_t v18 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  uint64_t v19 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, type metadata accessor for MLFewShotSoundClassifier.MLP, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.MLP);
  Layer.callAsFunction(_:)(v17, v18, v19);
  uint64_t v20 = v31;
  int64_t v21 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v31 + 16);
  uint64_t v22 = v30;
  v21(v35, &v29, v30);
  v21(v33, (uint64_t *)((char *)&v29 + v11[5]), v22);
  uint64_t v23 = (char *)&v29 + v11[6];
  uint64_t v24 = v22;
  v21(v34, (uint64_t *)v23, v22);
  outlined destroy of MLFewShotSoundClassifier.ConvolutionalNetwork.Output((uint64_t)&v29);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v20 + 32);
  uint64_t v26 = v29;
  v25(v29, v35, v24);
  uint64_t v27 = (int *)type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(0);
  v25(v26 + v27[5], v33, v24);
  v25(v26 + v27[6], v34, v24);
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t))v25)(v26 + v27[7], v32, v24);
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1)
{
  return MLFewShotSoundClassifier.TemporalClassifier.forward(_:)(a1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier);
  return Layer.place(on:)(a1, a2, v2);
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier);
  return Layer.placed(on:)(a1, a2, v2);
}

uint64_t base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.LeakyConv2D()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.LeakyConv2D);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.LeakyConv2D()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.LeakyConv2D);
}

uint64_t base witness table accessor for _Differentiable in MLFewShotSoundClassifier.LeakyConv2D()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.LeakyConv2D);
}

uint64_t base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

uint64_t base witness table accessor for _Differentiable in MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

uint64_t base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.CausalConv1D()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.CausalConv1D()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t base witness table accessor for _Differentiable in MLFewShotSoundClassifier.CausalConv1D()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.MLP()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, type metadata accessor for MLFewShotSoundClassifier.MLP, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.MLP);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.MLP()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, type metadata accessor for MLFewShotSoundClassifier.MLP, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.MLP);
}

uint64_t base witness table accessor for _Differentiable in MLFewShotSoundClassifier.MLP()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, type metadata accessor for MLFewShotSoundClassifier.MLP, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.MLP);
}

uint64_t base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.TemporalClassifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.TemporalClassifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t base witness table accessor for _Differentiable in MLFewShotSoundClassifier.TemporalClassifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier, (uint64_t)&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.ConvolutionalNetwork.Output, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output);
}

uint64_t outlined destroy of MLFewShotSoundClassifier.ConvolutionalNetwork.Output(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.TemporalClassifier.Output, (uint64_t)&nominal type descriptor for MLFewShotSoundClassifier.TemporalClassifier.Output);
}

uint64_t lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding()
{
  uint64_t result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding = result;
  }
  return result;
}

uint64_t *outlined release of BlobsFile(uint64_t *a1)
{
  uint64_t v1 = a1[10];
  outlined consume of Data._Representation(*a1, a1[1]);
  swift_bridgeObjectRelease(v1);
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result = a2 >> 62;
  if (a2 >> 62 != 1)
  {
    if (result != 2) {
      return result;
    }
    swift_release(a1);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.TemporalClassifier.Output(a1, a2, a3);
}

{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v8;

  uint64_t v3 = a1;
  uint64_t v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    int64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v4 + 16) & ~v4));
    swift_retain(v8);
  }
  else
  {
    int64_t v6 = type metadata accessor for Tensor(0);
    uint64_t v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v7((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v6);
    v7((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v6);
    v7((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v6);
  }
  return v3;
}

uint64_t destroy for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, int *a2)
{
  return destroy for MLFewShotSoundClassifier.TemporalClassifier.Output(a1, a2);
}

{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  uint64_t v2 = type metadata accessor for Tensor(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  v3(a1 + a2[5], v2);
  v3(a1 + a2[6], v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v3)(a1 + a2[7], v2);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for MLFewShotSoundClassifier.TemporalClassifier.Output(a1, a2, a3);
}

{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  uint64_t v4 = type metadata accessor for Tensor(0);
  int64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v5(a1 + a3[5], a2 + a3[5], v4);
  v5(a1 + a3[6], a2 + a3[6], v4);
  v5(a1 + a3[7], a3[7] + a2, v4);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for MLFewShotSoundClassifier.TemporalClassifier.Output(a1, a2, a3);
}

{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  uint64_t v4 = type metadata accessor for Tensor(0);
  int64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  v5(a1 + a3[5], a2 + a3[5], v4);
  v5(a1 + a3[6], a2 + a3[6], v4);
  v5(a1 + a3[7], a3[7] + a2, v4);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for MLFewShotSoundClassifier.TemporalClassifier.Output(a1, a2, a3);
}

{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  uint64_t v4 = type metadata accessor for Tensor(0);
  int64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v5(a1 + a3[5], a2 + a3[5], v4);
  v5(a1 + a3[6], a2 + a3[6], v4);
  v5(a1 + a3[7], a3[7] + a2, v4);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for MLFewShotSoundClassifier.TemporalClassifier.Output(a1, a2, a3);
}

{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  uint64_t v4 = type metadata accessor for Tensor(0);
  int64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  v5(a1 + a3[5], a2 + a3[5], v4);
  v5(a1 + a3[6], a2 + a3[6], v4);
  v5(a1 + a3[7], a3[7] + a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16480C);
}

uint64_t sub_16480C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16482E);
}

uint64_t sub_16482E(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_164B86);
}

uint64_t sub_164B86(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4(0);
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_164BC9);
}

uint64_t sub_164BC9(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a5(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v5);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1)
{
  uint64_t result = type metadata accessor for Tensor(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = v3[0];
    v3[2] = v3[0];
    void v3[3] = v3[0];
    swift_initStructMetadata(a1, 256, 4, v3, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLFewShotSoundClassifier.CausalPadding()
{
  return &type metadata for MLFewShotSoundClassifier.CausalPadding;
}

uint64_t base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.CausalPadding()
{
  return lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
}

uint64_t base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.CausalPadding()
{
  return lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
}

uint64_t base witness table accessor for _Differentiable in MLFewShotSoundClassifier.CausalPadding()
{
  return lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
}

uint64_t AppleDeveloperAssetStore.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8CreateML24AppleDeveloperAssetStore_localStoreURL;
  uint64_t v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for AppleDeveloperAssetStore()
{
  return type metadata accessor for AppleDeveloperAssetStore(0);
}

uint64_t type metadata accessor for AppleDeveloperAssetStore(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AppleDeveloperAssetStore;
  if (!type metadata singleton initialization cache for AppleDeveloperAssetStore) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleDeveloperAssetStore);
  }
  return result;
}

uint64_t type metadata completion function for AppleDeveloperAssetStore(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t AssetCoordinator.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1Tm((void *)(v0 + 56));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for AssetCoordinator()
{
  return objc_opt_self(_TtC8CreateML16AssetCoordinator);
}

char *initializeBufferWithCopyOfBuffer for MLActivityClassifier.DataSource.Columns(char *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (char *)(v5 + ((v4 + 16) & ~v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3[5];
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
    int64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v21(&a1[v6], (char *)a2 + v6, v7);
    uint64_t v8 = a3[6];
    __dst = &a1[v8];
    uint64_t v9 = (char *)a2 + v8;
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v7))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
      memcpy(__dst, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      v21(__dst, v9, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v7);
    }
    uint64_t v11 = a3[7];
    int64_t v12 = &a1[v11];
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    }
    uint64_t v16 = a3[8];
    int64_t v17 = &a1[v16];
    uint64_t v18 = (char *)a2 + v16;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v16, 1, v14))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v17, v18, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for MLActivityClassifier.DataSource.Columns(void *a1, int *a2)
{
  swift_bridgeObjectRelease(*a1);
  uint64_t v2 = (char *)a1 + a2[5];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  int v4 = *(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  uint64_t v5 = (uint64_t)a1 + a2[6];
  if (!__swift_getEnumTagSinglePayload(v5, 1, v3)) {
    v4((char *)v5, v3);
  }
  uint64_t v6 = (uint64_t)a1 + a2[7];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = (uint64_t)a1 + a2[8];
  uint64_t result = __swift_getEnumTagSinglePayload(v8, 1, v7);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  return result;
}

char *initializeWithCopy for MLActivityClassifier.DataSource.Columns(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  v22(&a1[v6], (char *)a2 + v6, v7);
  uint64_t v23 = a3;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (char *)a2 + v8;
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v7))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v22(v9, v10, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v7);
  }
  uint64_t v12 = *(int *)(v23 + 28);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = *(int *)(v23 + 32);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = (char *)a2 + v17;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v17, 1, v15))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v18, v19, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v15);
  }
  return a1;
}

uint64_t *assignWithCopy for MLActivityClassifier.DataSource.Columns(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v34 + 24);
  v32((char *)a1 + v7, (char *)a2 + v7, v8);
  uint64_t v33 = a3;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v8);
  int v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v8);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v10, v11, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(char *, char *, uint64_t)))(v34 + 8))(v10, v8, v14, v32);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v32(v10, v11, v8);
LABEL_7:
  uint64_t v16 = *(int *)(v33 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v22 = *(void *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v19);
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v17, v18, v19);
LABEL_13:
  uint64_t v24 = *(int *)(v33 + 32);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v24, 1, v19);
  int v28 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v19);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v19 - 8);
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v25, v26, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v19);
    goto LABEL_18;
  }
  if (v28)
  {
LABEL_18:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v25, v26, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v19);
  return a1;
}

char *initializeWithTake for MLActivityClassifier.DataSource.Columns(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  int v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32);
  v20(&a1[v4], &a2[v4], v5);
  uint64_t v21 = a3;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v5))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    v20(v7, v8, v5);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v5);
  }
  uint64_t v10 = *(int *)(v21 + 28);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  uint64_t v15 = *(int *)(v21 + 32);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v15], 1, v13))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v16, v17, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v13);
  }
  return a1;
}

uint64_t *assignWithTake for MLActivityClassifier.DataSource.Columns(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v33 + 40);
  v31((char *)a1 + v6, (char *)a2 + v6, v7);
  uint64_t v32 = a3;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v7);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v7);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v9, v10, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(char *, char *, uint64_t)))(v33 + 8))(v9, v7, v13, v31);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v31(v9, v10, v7);
LABEL_7:
  uint64_t v15 = *(int *)(v32 + 28);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  int v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v18);
  int v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v21 = *(void *)(v18 - 8);
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
LABEL_12:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
LABEL_13:
  uint64_t v23 = *(int *)(v32 + 32);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  int v26 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v23, 1, v18);
  int v27 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v18);
  if (!v26)
  {
    uint64_t v28 = *(void *)(v18 - 8);
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v24, v25, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v18);
    goto LABEL_18;
  }
  if (v27)
  {
LABEL_18:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v24, v25, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActivityClassifier.DataSource.Columns(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_165903);
}

uint64_t sub_165903(void *a1, unsigned int a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
    if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
    {
      uint64_t v6 = a3[5];
    }
    else
    {
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
      if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
      {
        uint64_t v6 = a3[6];
      }
      else
      {
        uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
        uint64_t v6 = a3[7];
      }
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v6, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLActivityClassifier.DataSource.Columns(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1659B6);
}

void sub_1659B6(void *a1, unsigned int a2, int a3, int *a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
    if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3)
    {
      uint64_t v7 = a4[5];
    }
    else
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?);
      if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3)
      {
        uint64_t v7 = a4[6];
      }
      else
      {
        uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?);
        uint64_t v7 = a4[7];
      }
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v7, a2, a2, v6);
  }
}

uint64_t type metadata accessor for MLActivityClassifier.DataSource.Columns(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLActivityClassifier.DataSource.Columns;
  if (!type metadata singleton initialization cache for MLActivityClassifier.DataSource.Columns) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLActivityClassifier.DataSource.Columns);
  }
  return result;
}

uint64_t type metadata completion function for MLActivityClassifier.DataSource.Columns(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Column<String>(319);
  if (v2 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for Column<String>?(319, &lazy cache variable for type metadata for Column<String>?, &demangling cache variable for type metadata for Column<String>);
    if (v3 <= 0x3F)
    {
      _OWORD v5[2] = *(void *)(result - 8) + 64;
      uint64_t result = type metadata accessor for Column<String>?(319, &lazy cache variable for type metadata for Column<Double>?, &demangling cache variable for type metadata for Column<Double>);
      if (v4 <= 0x3F)
      {
        uint64_t v6 = *(void *)(result - 8) + 64;
        uint64_t v7 = v6;
        swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Column<String>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for Column<String>;
  if (!lazy cache variable for type metadata for Column<String>)
  {
    uint64_t result = type metadata accessor for Column(a1, &type metadata for String);
    if (!v2) {
      lazy cache variable for type metadata for Column<String> = result;
    }
  }
  return result;
}

uint64_t type metadata accessor for Column<String>?(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    uint64_t result = type metadata accessor for Optional(a1, v4);
    if (!v5) {
      *a2 = result;
    }
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11TabularData6ColumnVySaySdGGs5NeverOTg5036_s8CreateML20MLActivityClassifierV10e143SourceO06gatherE15FromAnnotations12directoryURL18annotationFileName11labelColumn04fileP009startTimeP003endsP014featureColumns09timeStampP0AE0V0m35Foundation0K0V_S4SSgATSaySSGSStKF07D22E00P0VySaySdGGSSXEfU3_0I2ML0kL0V0eN0O7ColumnsVTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v3 = *(void *)(v31 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v32 = &v25;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v34 = *(void *)(v33 - 8);
  int64_t v7 = *(void *)(v34 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v39 = &v25;
  uint64_t v38 = v2;
  uint64_t v40 = _swiftEmptyArrayStorage;
  int64_t v37 = v10;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  uint64_t v11 = v40;
  uint64_t v12 = *(int *)(type metadata accessor for MLActivityClassifier.DataSource.Columns(0) + 20) + v41;
  uint64_t v35 = v3;
  uint64_t v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v13 = (void *)(a1 + 40);
  uint64_t v41 = v12;
  do
  {
    uint64_t v28 = v11;
    uint64_t v30 = *(v13 - 1);
    int v27 = v13;
    uint64_t v14 = *v13;
    uint64_t v15 = v32;
    uint64_t v16 = v31;
    v36(v32, v12, v31);
    uint64_t v29 = v14;
    swift_bridgeObjectRetain_n(v14, 2);
    uint64_t v17 = Column.count.getter(v16);
    (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v15, v16);
    if (v17 < 0) {
      BUG();
    }
    v26[0] = v17;
    v26[1] = _swiftEmptyArrayStorage;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<[Double]>);
    uint64_t v20 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type Repeated<[Double]> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<[Double]>, (uint64_t)&protocol conformance descriptor for Repeated<A>);
    uint64_t v21 = v29;
    Column.init<A>(name:contents:)(v30, v29, v26, v18, v19, v20);
    swift_bridgeObjectRelease(v21);
    uint64_t v11 = v28;
    uint64_t v40 = v28;
    unint64_t v22 = v28[2];
    if (v28[3] >> 1 <= v22)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28[3] >= 2uLL, v22 + 1, 1);
      uint64_t v11 = v40;
    }
    v11[2] = v22 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v34 + 32))((char *)v11+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v22, v39, v33);
    uint64_t v13 = v27 + 2;
    BOOL v23 = v37-- == 1;
    uint64_t v12 = v41;
  }
  while (!v23);
  return v11;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11TabularData6ColumnVySaySdGGs5NeverOTg5036_s8CreateML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v18 = *(void *)(v17 - 8);
  int64_t v3 = *(void *)(v18 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = v2;
  unint64_t v22 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  int64_t v7 = v22;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v8 = (void *)(a1 + 40);
  uint64_t v20 = &v13;
  do
  {
    uint64_t v15 = v8;
    int64_t v14 = v6;
    uint64_t v9 = *(v8 - 1);
    uint64_t v10 = *v8;
    swift_bridgeObjectRetain(*v8);
    DataFrame.subscript.getter(v9, v10, v19);
    swift_bridgeObjectRelease(v10);
    unint64_t v22 = v7;
    unint64_t v11 = v7[2];
    if (v7[3] >> 1 <= v11)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7[3] >= 2uLL, v11 + 1, 1);
      int64_t v7 = v22;
    }
    v7[2] = v11 + 1;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 32))((char *)v7+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v11, v20, v17);
    uint64_t v8 = v15 + 2;
    int64_t v6 = v14 - 1;
  }
  while (v14 != 1);
  return v7;
}

uint64_t MLActivityClassifier.DataSource.gatherData(featureColumns:labelColumn:recordingFileColumn:)(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5)
{
  v123._uint64_t object = a4;
  uint64_t v122 = a3;
  uint64_t v117 = v5;
  v123._uint64_t countAndFlagsBits = a2;
  uint64_t v119 = v6;
  uint64_t v118 = a5;
  uint64_t v124 = a1;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v114 = v109;
  uint64_t v116 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  int64_t v11 = *(void *)(*(void *)(v116 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v115 = v109;
  int64_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>?)
                              - 8)
                  + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v120 = v109;
  uint64_t v129 = type metadata accessor for AnyColumn(0);
  v127._uint64_t object = *(void **)(v129 - 8);
  int64_t v17 = *((void *)v127._object + 8);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v111 = v109;
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  *(void *)&long long v128 = v109;
  uint64_t v126 = type metadata accessor for DataFrame(0);
  uint64_t v125 = *(void *)(v126 - 8);
  int64_t v22 = *(void *)(v125 + 64);
  BOOL v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v132 = v109;
  uint64_t v130 = (void *)type metadata accessor for URL(0);
  ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n = (void *)*(v130 - 1);
  int64_t v25 = ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n[8];
  int v26 = alloca(v25);
  int v27 = alloca(v25);
  uint64_t v121 = v109;
  uint64_t v28 = alloca(v25);
  uint64_t v29 = alloca(v25);
  uint64_t v30 = type metadata accessor for MLActivityClassifier.DataSource(0);
  int64_t v31 = *(void *)(*(void *)(v30 - 8) + 64);
  uint64_t v32 = alloca(v31);
  uint64_t v33 = alloca(v31);
  v127._uint64_t countAndFlagsBits = v7;
  outlined init with copy of MLActivityClassifier.DataSource(v7, (uint64_t)v109);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v109, v30);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v46 = (uint64_t)v130;
    ((void (*)(char *, char *, void *))ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n[4])(v109, v109, v130);
    uint64_t object = (uint64_t)v123._object;
    if (!v118) {
      uint64_t object = 0x6E6964726F636572;
    }
    uint64_t v48 = 0xED0000656C694667;
    if (v118) {
      uint64_t v48 = (uint64_t)v118;
    }
    swift_bridgeObjectRetain(v118);
    MLActivityClassifier.DataSource.gatherDataFormLabeledDirectories(at:featureColumns:labelColumn:recordingFileColumn:)(v109, v124, v123._countAndFlagsBits, (void (*)(void, void, void))v122, (uint64_t *)object, v48);
    ((void (*)(char *, uint64_t))ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n[1])(v109, v46);
    uint64_t v45 = v48;
    return swift_bridgeObjectRelease(v45);
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v35 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String));
    uint64_t v36 = v35[12];
    v127._uint64_t object = *(void **)&v109[v36];
    int64_t v37 = *(void **)&v109[v36 + 8];
    uint64_t v38 = v35[16];
    uint64_t v126 = *(void *)&v109[v38];
    uint64_t v129 = *(void *)&v109[v38 + 8];
    uint64_t v39 = v35[20];
    uint64_t v125 = *(void *)&v109[v39];
    uint64_t v132 = *(char **)&v109[v39 + 8];
    uint64_t v40 = v35[24];
    uint64_t v120 = *(char **)&v109[v40];
    *(void *)&long long v128 = *(void *)&v109[v40 + 8];
    uint64_t v41 = (uint64_t)v121;
    ((void (*)(char *, char *, void *))ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n[4])(v121, v109, v130);
    uint64_t v42 = (uint64_t)v123._object;
    if (!v118) {
      uint64_t v42 = 0x6E6964726F636572;
    }
    uint64_t v43 = 0xED0000656C694667;
    if (v118) {
      uint64_t v43 = (uint64_t)v118;
    }
    swift_bridgeObjectRetain(v118);
    uint64_t v44 = v127._object;
    v127._uint64_t object = v37;
    MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(v41, (uint64_t)v44, (uint64_t)v37, (uint64_t *)v123._countAndFlagsBits, v122, v42, v43, v125, (uint64_t)v132, (uint64_t)v120, v128, v124, v126, v129);
    ((void (*)(uint64_t, void *))ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n[1])(v41, v130);
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(v127._object);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v132);
    uint64_t v45 = v128;
    return swift_bridgeObjectRelease(v45);
  }
  uint64_t v50 = (uint64_t)v132;
  (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v132, v109, v126);
  uint64_t countAndFlagsBits = v123._countAndFlagsBits;
  v52._uint64_t countAndFlagsBits = v123._countAndFlagsBits;
  uint64_t v53 = v122;
  v52._uint64_t object = v122;
  if ((specialized DataFrame.containsColumn<A>(_:_:)(v52) & 1) == 0)
  {
    *(void *)&long long v110 = 0;
    *((void *)&v110 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(*((void *)&v110 + 1));
    *(void *)&long long v110 = 0xD000000000000017;
    *((void *)&v110 + 1) = "assetFetcher" + 0x8000000000000000;
    v104._uint64_t countAndFlagsBits = countAndFlagsBits;
    v104._uint64_t object = v53;
    String.append(_:)(v104);
    v104._uint64_t object = (void *)0xE200000000000000;
    v104._uint64_t countAndFlagsBits = 11815;
    String.append(_:)(v104);
    long long v128 = v110;
    v104._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v104._object, 0, 0);
    *(_OWORD *)uint64_t v105 = v128;
    *(_OWORD *)(v105 + 16) = 0;
    *(_OWORD *)(v105 + 32) = 0;
    *(unsigned char *)(v105 + 48) = 0;
    swift_willThrow();
    uint64_t v106 = v50;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v106, v126);
  }
  uint64_t v54 = v124;
  uint64_t v55 = v50;
  if (*(void *)(v124 + 16))
  {
    uint64_t v56 = *(char **)(v124 + 16);
    swift_bridgeObjectRetain(v124);
    uint64_t v57 = (void *)(v54 + 40);
    uint64_t v113 = v56;
    uint64_t v58 = v56;
    do
    {
      uint64_t v59 = *(v57 - 1);
      ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n = v57;
      uint64_t v60 = (void *)*v57;
      swift_bridgeObjectRetain(*v57);
      uint64_t v130 = (void *)v59;
      v61._uint64_t countAndFlagsBits = v59;
      v61._uint64_t object = v60;
      Swift::Int_optional v62 = DataFrame.indexOfColumn(_:)(v61);
      if (v62.is_nil)
      {
        swift_bridgeObjectRelease(v60);
      }
      else
      {
        Swift::Int value = v62.value;
        v127._uint64_t countAndFlagsBits = (uint64_t)v60;
        uint64_t v64 = DataFrame.columns.getter();
        if (value < 0) {
          BUG();
        }
        uint64_t v65 = v64;
        if ((unint64_t)value >= *(void *)(v64 + 16)) {
          BUG();
        }
        uint64_t v121 = v58;
        uint64_t v66 = v127._object;
        uint64_t v67 = v129;
        (*((void (**)(void, uint64_t, uint64_t))v127._object + 2))(v128, ((*((unsigned __int8 *)v127._object + 80) + 32) & ~*((unsigned __int8 *)v127._object + 80))+ v64+ *((void *)v127._object + 9) * value, v129);
        swift_bridgeObjectRelease(v65);
        uint64_t v68 = AnyColumn.wrappedElementType.getter();
        uint64_t v69 = (void (*)(uint64_t, uint64_t))v66[1];
        uint64_t v70 = v128;
        v69(v128, v67);
        if (v68 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]))
        {
          uint64_t v71 = (uint64_t)v130;
          uint64_t v112 = v69;
          DataFrame.subscript.getter(v130, v127._countAndFlagsBits);
          uint64_t v72 = (uint64_t)v120;
          AnyColumn.convertedToDoubleArrays()();
          uint64_t v73 = v72;
          v112(v70, v129);
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
          if (__swift_getEnumTagSinglePayload(v73, 1, v74) == 1)
          {
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v73, &demangling cache variable for type metadata for Column<[Double]>?);
            BUG();
          }
          uint64_t v75 = v111;
          Column.eraseToAnyColumn()(v74);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v73, v74);
          DataFrame.subscript.setter(v75, v71, v127._countAndFlagsBits);
        }
        else
        {
          swift_bridgeObjectRelease(v127._countAndFlagsBits);
        }
        uint64_t v58 = v121;
      }
      uint64_t v57 = ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n
          + 2;
      --v58;
    }
    while (v58);
    uint64_t v76 = v124;
    swift_bridgeObjectRelease(v124);
    swift_bridgeObjectRetain(v76);
    int64_t v77 = (void *)(v76 + 40);
    while (1)
    {
      uint64_t v78 = *(v77 - 1);
      uint64_t v79 = (void *)*v77;
      swift_bridgeObjectRetain(*v77);
      v127._uint64_t countAndFlagsBits = v78;
      v80._uint64_t countAndFlagsBits = v78;
      v80._uint64_t object = v79;
      Swift::Int_optional v81 = DataFrame.indexOfColumn(_:)(v80);
      if (v81.is_nil) {
        break;
      }
      Swift::Int v82 = v81.value;
      uint64_t v83 = DataFrame.columns.getter();
      if (v82 < 0) {
        BUG();
      }
      uint64_t v84 = v83;
      if ((unint64_t)v82 >= *(void *)(v83 + 16)) {
        BUG();
      }
      uint64_t v130 = v77;
      uint64_t v85 = (void (**)(void, uint64_t))v127._object;
      uint64_t v86 = ((*((unsigned __int8 *)v127._object + 80) + 32) & ~*((unsigned __int8 *)v127._object + 80))
          + v83
          + *((void *)v127._object + 9) * v82;
      ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n = v79;
      uint64_t v87 = v129;
      (*((void (**)(void, uint64_t, uint64_t))v127._object + 2))(v128, v86, v129);
      swift_bridgeObjectRelease(v84);
      uint64_t v88 = AnyColumn.wrappedElementType.getter();
      uint64_t v89 = v87;
      uint64_t v79 = ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n;
      v85[1](v128, v89);
      uint64_t v90 = (uint64_t)v130;
      if (v88 != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double])) {
        break;
      }
      swift_bridgeObjectRelease(v79);
      int64_t v77 = (void *)(v90 + 16);
      BOOL v91 = v113-- == (unsigned char *)&dword_0 + 1;
      uint64_t v55 = (uint64_t)v132;
      if (v91)
      {
        uint64_t v54 = v124;
        swift_bridgeObjectRelease(v124);
        goto LABEL_34;
      }
    }
    swift_bridgeObjectRelease(v124);
    *(void *)&long long v110 = 0;
    *((void *)&v110 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(*((void *)&v110 + 1));
    *(void *)&long long v110 = 0xD000000000000019;
    *((void *)&v110 + 1) = "Missing labels column '" + 0x8000000000000000;
    v107._uint64_t countAndFlagsBits = v127._countAndFlagsBits;
    v107._uint64_t object = v79;
    String.append(_:)(v107);
    swift_bridgeObjectRelease(v79);
    v107._uint64_t object = (void *)0xE200000000000000;
    v107._uint64_t countAndFlagsBits = 11815;
    String.append(_:)(v107);
    long long v128 = v110;
    v107._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v107._object, 0, 0);
    *(_OWORD *)uint64_t v108 = v128;
    *(_OWORD *)(v108 + 16) = 0;
    *(_OWORD *)(v108 + 32) = 0;
    *(unsigned char *)(v108 + 48) = 0;
    swift_willThrow();
    uint64_t v106 = (uint64_t)v132;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v106, v126);
  }
LABEL_34:
  uint64_t v92 = v119;
  ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11TabularData6ColumnVySaySdGGs5NeverOTg5036_s8CreateML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n(v54, v55);
  *(void *)&long long v128 = v92;
  uint64_t v93 = v116;
  uint64_t v94 = v115;
  DataFrame.subscript.getter(v123._countAndFlagsBits, v122, &type metadata for String);
  uint64_t v95 = (uint64_t)v94 + *(int *)(v93 + 24);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v129 = v95;
  uint64_t v130 = (void *)v96;
  __swift_storeEnumTagSinglePayload(v95, 1, 1, v96);
  unint64_t v97 = (char *)v94 + *(int *)(v93 + 28);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v99 = (uint64_t)v97;
  uint64_t v100 = (uint64_t)v132;
  __swift_storeEnumTagSinglePayload(v99, 1, 1, v98);
  __swift_storeEnumTagSinglePayload((uint64_t)v94 + *(int *)(v116 + 32), 1, 1, v98);
  void *v94 = ML20MLActivityClassifierV10e87SourceO06gatherE014featureColumns11labelColumn013recordingFileK0AE0I0VSaySSG_S2SSgtKF07d3E00T16VySaySdGGSSXEfU_AG0E5FrameVTf1cn_n;
  uint64_t v101 = v118;
  if (v118)
  {
    v102._uint64_t countAndFlagsBits = (uint64_t)v123._object;
    v102._uint64_t object = v118;
    if (specialized DataFrame.containsColumn<A>(_:_:)(v102))
    {
      uint64_t v103 = (uint64_t)v114;
      DataFrame.subscript.getter(v123._object, v101, &type metadata for String);
      __swift_storeEnumTagSinglePayload(v103, 0, 1, (uint64_t)v130);
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v103, v129, &demangling cache variable for type metadata for Column<String>?);
    }
  }
  outlined init with take of MLActivityClassifier.DataSource.Columns((uint64_t)v115, v117);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v100, v126);
}

uint64_t MLActivityClassifier.DataSource.Columns.convertToTuriCore()()
{
  v252._uint64_t countAndFlagsBits = v1;
  int64_t v3 = v0;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v244 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v244 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  v241 = &v220;
  int64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  v232 = &v220;
  uint64_t v13 = alloca(v8);
  int64_t v14 = alloca(v8);
  v242 = &v220;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?)
                              - 8)
                  + 64);
  uint64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  v224 = &v220;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  v238 = &v220;
  uint64_t v20 = alloca(v15);
  uint64_t v21 = alloca(v15);
  unint64_t v255 = (unint64_t)&v220;
  if (!*(void *)(*v2 + 16))
  {
    uint64_t v36 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v36, 0, 0);
    *(void *)uint64_t v37 = 0xD000000000000035;
    *(void *)(v37 + 8) = "Prediction Window Size" + 0x8000000000000000;
    *(_OWORD *)(v37 + 16) = 0;
    *(_OWORD *)(v37 + 32) = 0;
    *(unsigned char *)(v37 + 48) = 0;
    return swift_willThrow();
  }
  v229 = &v220;
  uint64_t v240 = v7;
  v228 = v3;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataColumn<Double>);
  uint64_t v254 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v22, &protocol witness table for String);
  *(void *)&long long v253 = _swiftEmptyArrayStorage;
  BOOL v23 = alloca(24);
  uint64_t v24 = alloca(32);
  v222 = &v253;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void (*)(void, void, void))_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v26 = v25;
  swift_bridgeObjectRelease(v253);
  v251 = v2;
  LOBYTE(v257) = v26 & 1;
  *(void *)&long long v253 = _swiftEmptyArrayStorage;
  int v27 = alloca(24);
  uint64_t v28 = alloca(32);
  v222 = &v253;
  uint64_t v29 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v31 = v30;
  swift_bridgeObjectRelease(v253);
  LOBYTE(v256) = v31 & 1;
  uint64_t v32 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  uint64_t v230 = (uint64_t)v251 + *(int *)(v32 + 24);
  uint64_t v33 = v255;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v230, v255, &demangling cache variable for type metadata for Column<String>?);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v33, 1, v34);
  uint64_t v236 = v34;
  uint64_t v243 = v29;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v33, &demangling cache variable for type metadata for Column<String>?);
  }
  else
  {
    uint64_t v239 = specialized Collection.first.getter();
    uint64_t v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
    if (v40 != 2)
    {
      uint64_t v247 = v40;
      goto LABEL_8;
    }
  }
  uint64_t v239 = 0;
  uint64_t v247 = 0;
LABEL_8:
  v225 = (char *)v251 + *(int *)(v32 + 20);
  uint64_t v41 = Column.count.getter(v236);
  if (v41 < 0) {
    BUG();
  }
  if (!v41)
  {
    uint64_t v43 = v254;
    goto LABEL_107;
  }
  uint64_t v231 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = v254;
  uint64_t v44 = v251;
  uint64_t v226 = v41;
  do
  {
    if (v42 == v41) {
      BUG();
    }
    uint64_t v249 = v42;
    uint64_t v45 = *v44;
    int64_t v46 = *(void *)(*v44 + 16);
    uint64_t v254 = v43;
    if (v46)
    {
      *(void *)&long long v253 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v45);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46, 0);
      uint64_t v47 = (*(unsigned __int8 *)(v244 + 80) + 32) & ~*(unsigned __int8 *)(v244 + 80);
      uint64_t v250 = v45;
      uint64_t v48 = v45 + v47;
      v245 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v244 + 16);
      uint64_t v246 = *(void *)(v244 + 72);
      do
      {
        uint64_t v49 = v240;
        v245(v242, v48, v240);
        Column.subscript.getter(v249, v49);
        if (v233)
        {
          uint64_t v50 = *(void *)(v233 + 16);
          swift_bridgeObjectRelease(v233);
        }
        else
        {
          uint64_t v50 = 0;
        }
        (*(void (**)(uint64_t *, uint64_t))(v244 + 8))(v242, v49);
        uint64_t v51 = (void *)v253;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v253);
        unint64_t v255 = v46;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1);
          uint64_t v51 = (void *)v253;
        }
        unint64_t v53 = v51[2];
        unint64_t v54 = v51[3];
        unint64_t v55 = v53 + 1;
        if (v54 >> 1 <= v53)
        {
          uint64_t v234 = v50;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 >= 2, v53 + 1, 1);
          unint64_t v55 = v53 + 1;
          uint64_t v50 = v234;
          uint64_t v51 = (void *)v253;
        }
        v51[2] = v55;
        v51[v53 + 4] = v50;
        v48 += v246;
        int64_t v46 = v255 - 1;
      }
      while (v255 != 1);
      swift_bridgeObjectRelease(v250);
      uint64_t v43 = v254;
      uint64_t v44 = v251;
    }
    else
    {
      uint64_t v51 = _swiftEmptyArrayStorage;
    }
    unint64_t v56 = v51[2];
    if (v56)
    {
      uint64_t v57 = v51[4];
      if (v57)
      {
        uint64_t v58 = 0;
        while (v56 - 1 != v58)
        {
          unint64_t v59 = v58 + 1;
          BOOL v60 = v51[v58++ + 5] == 0;
          if (v60) {
            goto LABEL_140;
          }
        }
        if (v56 == 1)
        {
          uint64_t v237 = v51[4];
          uint64_t v43 = v254;
          uint64_t v44 = v251;
          goto LABEL_40;
        }
        uint64_t v43 = v254;
        uint64_t v44 = v251;
        if (v51[5] == v57)
        {
          if (v56 == 2)
          {
LABEL_39:
            uint64_t v237 = v51[4];
            goto LABEL_40;
          }
          uint64_t v61 = 0;
          while (1)
          {
            unint64_t v62 = v61 + 2;
            if (v61 + 2 >= v56) {
              BUG();
            }
            if (v51[v61 + 6] != v57) {
              break;
            }
            if (v56 - 2 == ++v61) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          unint64_t v62 = 1;
        }
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v247);
        *(void *)&long long v253 = 0;
        *((void *)&v253 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v204._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        v204._uint64_t object = "Extracting features for File " + 0x8000000000000000;
        String.append(_:)(v204);
        if (v62 >= *(void *)(*v251 + 16)) {
          BUG();
        }
        v205 = v232;
        unint64_t v206 = ((*(unsigned __int8 *)(v244 + 80) + 32) & ~*(unsigned __int8 *)(v244 + 80))
             + *v251
             + *(void *)(v244 + 72) * v62;
        uint64_t v207 = v240;
        uint64_t v208 = v244;
        (*(void (**)(uint64_t *, unint64_t, uint64_t))(v244 + 16))(v232, v206, v240);
        v252._uint64_t countAndFlagsBits = Column.name.getter(v207);
        unint64_t v255 = v209;
        v242 = *(uint64_t **)(v208 + 8);
        ((void (*)(uint64_t *, uint64_t))v242)(v205, v207);
        v210._uint64_t countAndFlagsBits = v252._countAndFlagsBits;
        unint64_t v211 = v255;
        v210._uint64_t object = (void *)v255;
        String.append(_:)(v210);
        swift_bridgeObjectRelease(v211);
        v210._uint64_t countAndFlagsBits = 0x20646E6120;
        v210._uint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v210);
        uint64_t v212 = (uint64_t)v229;
        specialized Collection.first.getter(*v251);
        if (__swift_getEnumTagSinglePayload(v212, 1, v207) == 1) {
          BUG();
        }
        swift_bridgeObjectRelease(v43);
        uint64_t v213 = Column.name.getter(v207);
        v215 = v214;
        ((void (*)(uint64_t, uint64_t))v242)(v212, v207);
        v216._uint64_t countAndFlagsBits = v213;
        v216._uint64_t object = v215;
        String.append(_:)(v216);
        swift_bridgeObjectRelease(v215);
        v216._uint64_t countAndFlagsBits = 0x20776F72206E6F20;
        v216._uint64_t object = (void *)0xE800000000000000;
        String.append(_:)(v216);
        uint64_t v233 = v249;
        uint64_t v217 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v219 = v218;
        v216._uint64_t countAndFlagsBits = v217;
        v216._uint64_t object = v218;
        String.append(_:)(v216);
        swift_bridgeObjectRelease(v219);
        v216._uint64_t object = "Label does not exist on row " + 0x8000000000000000;
        v216._uint64_t countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v216);
        Swift::String v201 = (Swift::String)v253;
      }
      else
      {
        unint64_t v59 = 0;
LABEL_140:
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v247);
        swift_bridgeObjectRelease(v254);
        *(void *)&long long v253 = 0;
        *((void *)&v253 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(57);
        v190._uint64_t countAndFlagsBits = 0x2065727574616546;
        v190._uint64_t object = (void *)0xEF206E6D756C6F63;
        String.append(_:)(v190);
        if (v59 >= *(void *)(*v251 + 16)) {
          BUG();
        }
        uint64_t v191 = v244;
        unint64_t v192 = v232;
        uint64_t v193 = ((*(unsigned __int8 *)(v244 + 80) + 32) & ~*(unsigned __int8 *)(v244 + 80))
             + *v251
             + *(void *)(v244 + 72) * v59;
        uint64_t v194 = v240;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v244 + 16))(v232, v193, v240);
        v252._uint64_t countAndFlagsBits = Column.name.getter(v194);
        uint64_t v196 = v195;
        (*(void (**)(uint64_t *, uint64_t))(v191 + 8))(v192, v194);
        v197._uint64_t countAndFlagsBits = v252._countAndFlagsBits;
        v197._uint64_t object = v196;
        String.append(_:)(v197);
        swift_bridgeObjectRelease(v196);
        v197._uint64_t countAndFlagsBits = 0xD000000000000011;
        v197._uint64_t object = "Swift/Dictionary.swift" + 0x8000000000000000;
        String.append(_:)(v197);
        uint64_t v233 = v249;
        uint64_t v198 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v200 = v199;
        v197._uint64_t countAndFlagsBits = v198;
        v197._uint64_t object = v199;
        String.append(_:)(v197);
        swift_bridgeObjectRelease(v200);
        v197._uint64_t object = "Label does not exist on row " + 0x8000000000000000;
        v197._uint64_t countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v197);
        Swift::String v201 = (Swift::String)v253;
      }
      Swift::String v252 = v201;
      uint64_t v202 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v202, 0, 0);
      *(Swift::String *)uint64_t v203 = v252;
      *(_OWORD *)(v203 + 16) = 0;
      *(_OWORD *)(v203 + 32) = 0;
      *(unsigned char *)(v203 + 48) = 1;
      swift_willThrow();
      char v188 = v256;
      uint64_t v189 = v243;
      goto LABEL_143;
    }
    uint64_t v237 = 0;
LABEL_40:
    swift_bridgeObjectRelease(v51);
    uint64_t v63 = *v44;
    uint64_t v64 = *(void *)(*v44 + 16);
    if (!v64) {
      goto LABEL_65;
    }
    uint64_t v65 = v244;
    uint64_t v66 = v63 + ((*(unsigned __int8 *)(v244 + 80) + 32) & ~*(unsigned __int8 *)(v244 + 80));
    uint64_t v227 = v63;
    swift_bridgeObjectRetain(v63);
    uint64_t v67 = v66;
    v222 = *(long long **)(v65 + 16);
    uint64_t v223 = *(void *)(v65 + 72);
    uint64_t v68 = v240;
    uint64_t v69 = v241;
    do
    {
      uint64_t v234 = v64;
      uint64_t v220 = v67;
      ((void (*)(uint64_t *, uint64_t, uint64_t))v222)(v69, v67, v68);
      Column.subscript.getter(v249, v68);
      uint64_t v70 = v253;
      if (!(void)v253)
      {
        swift_bridgeObjectRelease(v247);
        BUG();
      }
      uint64_t v221 = type metadata accessor for _UntypedColumn();
      swift_allocObject(v221, 24, 7);
      uint64_t countAndFlagsBits = v252._countAndFlagsBits;
      uint64_t v72 = specialized _UntypedColumn.init<A>(_:)(v70);
      uint64_t v246 = countAndFlagsBits;
      if (countAndFlagsBits) {
        uint64_t v235 = countAndFlagsBits;
      }
      else {
        uint64_t v235 = v72;
      }
      v252._uint64_t countAndFlagsBits = 0;
      uint64_t v73 = v254;
      uint64_t v74 = Column.name.getter(v68);
      uint64_t v76 = (void (*)(uint64_t *, uint64_t, uint64_t))v75;
      char v77 = swift_isUniquelyReferenced_nonNull_native(v73);
      *(void *)&long long v253 = v73;
      uint64_t v250 = v74;
      v245 = v76;
      unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v74, (uint64_t)v76);
      BOOL v80 = (v79 & 1) == 0;
      BOOL v81 = __OFADD__(*(void *)(v73 + 16), v80);
      Swift::Int v82 = *(void *)(v73 + 16) + v80;
      if (v81) {
        BUG();
      }
      char v83 = v79;
      unint64_t v255 = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLDataColumn<Double>>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v77, v82))
      {
        unint64_t v255 = specialized __RawDictionaryStorage.find<A>(_:)(v250, (uint64_t)v245);
        if ((v83 & 1) != (v84 & 1))
        {
LABEL_163:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v85 = (void *)v253;
      swift_bridgeObjectRelease(0x8000000000000000);
      if (v83)
      {
        uint64_t v86 = 16 * v255;
        uint64_t v87 = (void (*)(uint64_t *, uint64_t, uint64_t))v85;
      }
      else
      {
        swift_allocObject(v221, 24, 7);
        swift_bridgeObjectRetain((void (*)(uint64_t *, uint64_t, uint64_t))v85);
        uint64_t v88 = v252._countAndFlagsBits;
        uint64_t v89 = specialized _UntypedColumn.init<A>(_:)((uint64_t)_swiftEmptyArrayStorage);
        if (v88) {
          uint64_t v89 = v88;
        }
        v252._uint64_t countAndFlagsBits = 0;
        unint64_t v90 = v255;
        v85[(v255 >> 6) + 8] |= 1 << v255;
        uint64_t v91 = 16 * v90;
        uint64_t v92 = v85[6];
        *(void *)(v92 + v91) = v250;
        uint64_t v87 = v245;
        *(void *)(v92 + v91 + 8) = v245;
        uint64_t v93 = v85[7];
        *(void *)(v93 + v91) = v89;
        *(unsigned char *)(v93 + v91 + 8) = v88 != 0;
        uint64_t v94 = v85[2];
        BOOL v81 = __OFADD__(1, v94);
        uint64_t v95 = v94 + 1;
        if (v81) {
          BUG();
        }
        _OWORD v85[2] = v95;
        uint64_t v86 = v91;
      }
      swift_bridgeObjectRetain(v87);
      uint64_t v96 = v85[7];
      swift_bridgeObjectRelease((void (*)(uint64_t *, uint64_t, uint64_t))v85);
      uint64_t v97 = *(void *)(v96 + v86);
      char v98 = 1;
      BOOL v60 = *(unsigned char *)(v96 + v86 + 8) == 0;
      unint64_t v99 = v86;
      uint64_t v254 = (uint64_t)v85;
      if (!v60)
      {
        uint64_t v100 = v235;
        uint64_t v101 = v246;
        goto LABEL_62;
      }
      uint64_t v250 = v97;
      unint64_t v255 = v86;
      if (v246)
      {
        uint64_t v100 = v235;
        outlined copy of Result<_DataTable, Error>(v235, 1);
        outlined consume of Result<_DataTable, Error>(v250, 0);
        uint64_t v97 = v100;
LABEL_61:
        uint64_t v101 = v246;
        unint64_t v99 = v255;
        char v98 = 1;
        goto LABEL_62;
      }
      uint64_t v100 = v235;
      outlined copy of Result<_DataTable, Error>(v235, 0);
      uint64_t v102 = v250;
      outlined copy of Result<_DataTable, Error>(v250, 0);
      uint64_t v103 = v252._countAndFlagsBits;
      uint64_t v104 = _UntypedColumn.appending(contentsOf:)(v100);
      if (v103)
      {
        outlined consume of Result<_DataTable, Error>(v100, 0);
        outlined consume of Result<_DataTable, Error>(v102, 0);
        outlined consume of Result<_DataTable, Error>(v102, 0);
        uint64_t v97 = v103;
        v252._uint64_t countAndFlagsBits = 0;
        goto LABEL_61;
      }
      v252._uint64_t countAndFlagsBits = 0;
      uint64_t v108 = v104;
      outlined consume of Result<_DataTable, Error>(v100, 0);
      outlined consume of Result<_DataTable, Error>(v102, 0);
      outlined consume of Result<_DataTable, Error>(v102, 0);
      char v98 = 0;
      uint64_t v97 = v108;
      uint64_t v101 = v246;
      unint64_t v99 = v255;
LABEL_62:
      char v105 = v101 != 0;
      *(void *)(v96 + v99) = v97;
      *(unsigned char *)(v96 + v99 + 8) = v98;
      swift_bridgeObjectRelease(v245);
      uint64_t v69 = v241;
      uint64_t v106 = v240;
      (*(void (**)(uint64_t *, uint64_t))(v244 + 8))(v241, v240);
      uint64_t v107 = v100;
      uint64_t v68 = v106;
      outlined consume of Result<_DataTable, Error>(v107, v105);
      uint64_t v67 = v223 + v220;
      uint64_t v64 = v234 - 1;
    }
    while (v234 != 1);
    swift_bridgeObjectRelease(v227);
    uint64_t v43 = v254;
LABEL_65:
    Column.subscript.getter(v249, v236);
    uint64_t v109 = v237;
    if (v237 < 0) {
      BUG();
    }
    uint64_t v110 = *((void *)&v253 + 1);
    uint64_t v111 = *((void *)&v253 + 1);
    if (*((void *)&v253 + 1)) {
      uint64_t v110 = v253;
    }
    else {
      uint64_t v111 = 0xE000000000000000;
    }
    unint64_t v255 = type metadata accessor for _UntypedColumn();
    swift_allocObject(v255, 24, 7);
    uint64_t v112 = v252._countAndFlagsBits;
    uint64_t v113 = specialized _UntypedColumn.init<A>(_:)(v109, v110, v111);
    uint64_t v254 = v43;
    if (v112)
    {
      if ((_BYTE)v257)
      {
        outlined consume of Result<_DataTable, Error>(v112, 1);
        char v114 = 1;
      }
      else
      {
        outlined consume of Result<_DataTable, Error>((uint64_t)ML14_UntypedColumnC_s5Error_pTgm5, 0);
        char v114 = 1;
        uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void (*)(void, void, void))v112;
      }
LABEL_77:
      v252._uint64_t countAndFlagsBits = 0;
    }
    else
    {
      uint64_t v115 = v113;
      v252._uint64_t countAndFlagsBits = 0;
      if ((_BYTE)v257)
      {
        outlined consume of Result<_DataTable, Error>(v113, 0);
        char v114 = 1;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v113, 0);
        uint64_t v116 = (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5;
        outlined copy of Result<_DataTable, Error>((uint64_t)ML14_UntypedColumnC_s5Error_pTgm5, 0);
        uint64_t v117 = v252._countAndFlagsBits;
        uint64_t v118 = (void (*)(uint64_t *, uint64_t, uint64_t))_UntypedColumn.appending(contentsOf:)(v115);
        v252._uint64_t countAndFlagsBits = v117;
        if (v117)
        {
          outlined consume of Result<_DataTable, Error>(v115, 0);
          outlined consume of Result<_DataTable, Error>(v116, 0);
          outlined consume of Result<_DataTable, Error>(v116, 0);
          outlined consume of Result<_DataTable, Error>(v115, 0);
          char v114 = 1;
          uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void (*)(void, void, void))v252._countAndFlagsBits;
          goto LABEL_77;
        }
        v245 = v118;
        char v114 = 0;
        outlined consume of Result<_DataTable, Error>(v115, 0);
        outlined consume of Result<_DataTable, Error>(v116, 0);
        outlined consume of Result<_DataTable, Error>(v116, 0);
        outlined consume of Result<_DataTable, Error>(v115, 0);
        uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = (void (*)(void, void, void))v245;
      }
    }
    uint64_t v119 = (uint64_t)v238;
    LOBYTE(v257) = v114;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v230, (uint64_t)v238, &demangling cache variable for type metadata for Column<String>?);
    uint64_t v120 = v236;
    if (__swift_getEnumTagSinglePayload(v119, 1, v236) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v119, &demangling cache variable for type metadata for Column<String>?);
      uint64_t v121 = v247;
      goto LABEL_85;
    }
    uint64_t v122 = v120;
    Column.subscript.getter(v249, v120);
    uint64_t v123 = v253;
    uint64_t v124 = v119;
    uint64_t v125 = *((void *)&v253 + 1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 8))(v124, v122);
    uint64_t v121 = v247;
    if (v125)
    {
      if (!v247)
      {
        uint64_t v121 = v125;
        goto LABEL_89;
      }
      if (v123 == v239 && v125 == v247)
      {
        swift_bridgeObjectRelease(v125);
        goto LABEL_94;
      }
      char v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v123, v125, v239, v247, 0);
      swift_bridgeObjectRelease(v125);
      if ((v126 & 1) == 0)
      {
LABEL_89:
        swift_bridgeObjectRelease(v121);
        BOOL v81 = __OFADD__(1, v231++);
        if (v81) {
          BUG();
        }
        uint64_t v127 = (uint64_t)v224;
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v230, (uint64_t)v224, &demangling cache variable for type metadata for Column<String>?);
        uint64_t v128 = v236;
        if (__swift_getEnumTagSinglePayload(v127, 1, v236) == 1)
        {
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v127, &demangling cache variable for type metadata for Column<String>?);
          uint64_t v239 = 0;
          goto LABEL_92;
        }
        Column.subscript.getter(v249, v128);
        uint64_t v247 = *((void *)&v253 + 1);
        uint64_t v239 = v253;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v128 - 8) + 8))(v127, v128);
      }
    }
    else
    {
LABEL_85:
      swift_bridgeObjectRelease(0);
      if (v121) {
        goto LABEL_89;
      }
LABEL_92:
      uint64_t v247 = 0;
    }
LABEL_94:
    swift_allocObject(v255, 24, 7);
    uint64_t v129 = v252._countAndFlagsBits;
    uint64_t v130 = specialized _UntypedColumn.init<A>(_:)(v237, v231);
    if (v129)
    {
      uint64_t v44 = v251;
      if ((_BYTE)v256)
      {
        outlined consume of Result<_DataTable, Error>(v129, 1);
        char v131 = 1;
      }
      else
      {
        outlined consume of Result<_DataTable, Error>(v243, 0);
        char v131 = 1;
        uint64_t v243 = v129;
      }
      v252._uint64_t countAndFlagsBits = 0;
      uint64_t v43 = v254;
    }
    else
    {
      uint64_t v132 = v130;
      if ((_BYTE)v256)
      {
        v252._uint64_t countAndFlagsBits = 0;
        outlined consume of Result<_DataTable, Error>(v130, 0);
        char v131 = 1;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v130, 0);
        uint64_t v133 = v243;
        outlined copy of Result<_DataTable, Error>(v243, 0);
        uint64_t v134 = _UntypedColumn.appending(contentsOf:)(v132);
        v252._uint64_t countAndFlagsBits = 0;
        char v131 = 0;
        uint64_t v135 = v134;
        outlined consume of Result<_DataTable, Error>(v132, 0);
        outlined consume of Result<_DataTable, Error>(v133, 0);
        outlined consume of Result<_DataTable, Error>(v133, 0);
        outlined consume of Result<_DataTable, Error>(v132, 0);
        uint64_t v243 = v135;
      }
      uint64_t v43 = v254;
      uint64_t v44 = v251;
    }
    uint64_t v42 = v249 + 1;
    LOBYTE(v256) = v131;
    uint64_t v41 = v226;
  }
  while (v249 + 1 != v226);
LABEL_107:
  swift_bridgeObjectRelease(v247);
  uint64_t v136 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  uint64_t v137 = 1 << *(unsigned char *)(v43 + 32);
  unint64_t v255 = v136;
  uint64_t v138 = ~(-1 << v137);
  if (v137 >= 64) {
    uint64_t v138 = -1;
  }
  unint64_t v139 = *(void *)(v43 + 64) & v138;
  uint64_t v250 = (unint64_t)(v137 + 63) >> 6;
  uint64_t v140 = 0;
  uint64_t v254 = v43;
  while (1)
  {
    if (v139)
    {
      _BitScanForward64(&v141, v139);
      v241 = (uint64_t *)((v139 - 1) & v139);
      uint64_t v246 = v140;
      unint64_t v142 = v141 | (v140 << 6);
      goto LABEL_123;
    }
    BOOL v81 = __OFADD__(1, v140);
    uint64_t v143 = v140 + 1;
    if (v81) {
      BUG();
    }
    if (v143 >= v250) {
      goto LABEL_136;
    }
    unint64_t v144 = *(void *)(v43 + 8 * v143 + 64);
    if (!v144) {
      break;
    }
LABEL_122:
    _BitScanForward64(&v146, v144);
    v241 = (uint64_t *)(v144 & (v144 - 1));
    uint64_t v246 = v143;
    unint64_t v142 = v146 + (v143 << 6);
LABEL_123:
    uint64_t v147 = *(void *)(v43 + 48);
    uint64_t v148 = *(void *)(v43 + 56);
    uint64_t v149 = 16 * v142;
    uint64_t v150 = *(void *)(v147 + v149);
    uint64_t v151 = *(void *)(v147 + v149 + 8);
    uint64_t v152 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v148 + v149);
    int v153 = *(unsigned __int8 *)(v148 + v149 + 8);
    outlined copy of Result<_DataTable, Error>((uint64_t)v152, *(unsigned char *)(v148 + v149 + 8));
    v245 = v152;
    LODWORD(v249) = v153;
    outlined copy of Result<_DataTable, Error>((uint64_t)v152, v153);
    swift_bridgeObjectRetain(v151);
    unint64_t v154 = v255;
    char v155 = swift_isUniquelyReferenced_nonNull_native(v255);
    *(void *)&long long v253 = v154;
    uint64_t v244 = v150;
    v242 = (uint64_t *)v151;
    unint64_t v156 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v151);
    LOBYTE(v240) = v157;
    BOOL v158 = (v157 & 1) == 0;
    BOOL v81 = __OFADD__(*(void *)(v154 + 16), v158);
    Swift::Int v159 = *(void *)(v154 + 16) + v158;
    if (v81) {
      BUG();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLUntypedColumn>);
    Swift::Bool v160 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v155, v159);
    char v161 = v240;
    if (v160)
    {
      unint64_t v156 = specialized __RawDictionaryStorage.find<A>(_:)(v244, (uint64_t)v242);
      if ((v161 & 1) != (v162 & 1)) {
        goto LABEL_163;
      }
    }
    unint64_t v255 = v253;
    if (v161)
    {
      uint64_t v163 = *(void *)(v255 + 56);
      uint64_t v164 = 16 * v156;
      outlined consume of Result<_DataTable, Error>(*(void *)(v163 + v164), *(unsigned char *)(v163 + v164 + 8));
      v165 = v245;
      *(void *)(v163 + v164) = v245;
      char v166 = v249;
      *(unsigned char *)(v163 + v164 + 8) = v249 & 1;
      v167 = v165;
      uint64_t v168 = (uint64_t)v242;
    }
    else
    {
      uint64_t v169 = (void *)v255;
      *(void *)(v255 + 8 * (v156 >> 6) + 64) |= 1 << v156;
      uint64_t v170 = v169[6];
      uint64_t v171 = 16 * v156;
      *(void *)(v170 + v171) = v244;
      uint64_t v172 = (uint64_t)v242;
      *(void *)(v170 + v171 + 8) = v242;
      uint64_t v173 = v169[7];
      v167 = v245;
      *(void *)(v173 + v171) = v245;
      char v166 = v249;
      *(unsigned char *)(v173 + v171 + 8) = v249 & 1;
      uint64_t v174 = v169[2];
      BOOL v81 = __OFADD__(1, v174);
      uint64_t v175 = v174 + 1;
      if (v81) {
        BUG();
      }
      *(void *)(v255 + 16) = v175;
      uint64_t v168 = v172;
      swift_bridgeObjectRetain(v172);
    }
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(0x8000000000000000);
    outlined consume of Result<_DataTable, Error>((uint64_t)v167, v166);
    uint64_t v43 = v254;
    uint64_t v140 = v246;
    unint64_t v139 = (unint64_t)v241;
  }
  uint64_t v145 = v143 + 1;
  if (v143 + 1 >= v250) {
    goto LABEL_136;
  }
  unint64_t v144 = *(void *)(v43 + 8 * v143 + 72);
  if (v144) {
    goto LABEL_121;
  }
  uint64_t v145 = v143 + 2;
  if (v143 + 2 >= v250) {
    goto LABEL_136;
  }
  unint64_t v144 = *(void *)(v43 + 8 * v143 + 80);
  if (v144) {
    goto LABEL_121;
  }
  uint64_t v145 = v143 + 3;
  if (v143 + 3 >= v250) {
    goto LABEL_136;
  }
  unint64_t v144 = *(void *)(v43 + 8 * v143 + 88);
  if (v144)
  {
LABEL_121:
    uint64_t v143 = v145;
    goto LABEL_122;
  }
  v143 += 3;
  while (1)
  {
    BOOL v81 = __OFADD__(1, v143++);
    if (v81) {
      BUG();
    }
    if (v143 >= v250) {
      break;
    }
    unint64_t v144 = *(void *)(v43 + 8 * v143 + 64);
    if (v144) {
      goto LABEL_122;
    }
  }
LABEL_136:
  swift_release();
  char v176 = v257;
  uint64_t v177 = (uint64_t)ML14_UntypedColumnC_s5Error_pTgm5;
  outlined copy of Result<_DataTable, Error>((uint64_t)ML14_UntypedColumnC_s5Error_pTgm5, v257);
  unint64_t v178 = v255;
  char v179 = swift_isUniquelyReferenced_nonNull_native(v255);
  *(void *)&long long v253 = v178;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v177, v176, 0x6C6562616CLL, 0xE500000000000000, v179);
  uint64_t v180 = v253;
  swift_bridgeObjectRelease(0x8000000000000000);
  char v181 = v256;
  uint64_t v182 = v243;
  outlined copy of Result<_DataTable, Error>(v243, v256);
  char v183 = swift_isUniquelyReferenced_nonNull_native(v180);
  *(void *)&long long v253 = v180;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v182, v181, 0x5F6E6F6973736573, 0xEA00000000006469, v183);
  uint64_t v184 = v253;
  swift_bridgeObjectRelease(0x8000000000000000);
  uint64_t v185 = v252._countAndFlagsBits;
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v184);
  if (!v185)
  {
    char v186 = BYTE8(v253);
    uint64_t v187 = v228;
    void *v228 = v253;
    *((unsigned char *)v187 + 8) = v186;
  }
  char v188 = v181;
  uint64_t v189 = v182;
LABEL_143:
  outlined consume of Result<_DataTable, Error>(v189, v188);
  return outlined consume of Result<_DataTable, Error>((uint64_t)ML14_UntypedColumnC_s5Error_pTgm5, v257);
}

uint64_t MLActivityClassifier.DataSource.Columns.buildDataFrame()(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?)
                             - 8)
                 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v48 = &v45;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v58 = *(void *)(v57 - 8);
  int64_t v8 = *(void *)(v58 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v51 = &v45;
  int64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  Swift::String v52 = &v45;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?)
                              - 8)
                  + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v50 = &v45;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v53 = *(void *)(v49 - 8);
  int64_t v16 = *(void *)(v53 + 64);
  int64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  unint64_t v54 = &v45;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v59 = *(void *)(v19 - 8);
  int64_t v20 = *(void *)(v59 + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  DataFrame.init()(&demangling cache variable for type metadata for Column<[Double]>, a2, v23, v24);
  unint64_t v56 = v2;
  uint64_t v25 = *v2;
  uint64_t v26 = *(void *)(*v2 + 16);
  uint64_t v47 = &v45;
  if (v26)
  {
    uint64_t v27 = v25 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~*(unsigned __int8 *)(v59 + 80));
    uint64_t v45 = *(void (**)(void, uint64_t, uint64_t))(v59 + 16);
    uint64_t v46 = *(void *)(v59 + 72);
    uint64_t v55 = v25;
    swift_bridgeObjectRetain(v25);
    do
    {
      v45(&v45, v27, v19);
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      DataFrame.append<A>(column:)(&v45, v28);
      (*(void (**)(void (**)(void, uint64_t, uint64_t), uint64_t))(v59 + 8))(&v45, v19);
      v27 += v46;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease(v55);
  }
  uint64_t v29 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  char v30 = v56;
  DataFrame.append<A>(column:)((char *)v56 + *(int *)(v29 + 20), &type metadata for String);
  uint64_t v59 = v29;
  uint64_t v31 = (uint64_t)v50;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v30 + *(int *)(v29 + 24), (uint64_t)v50, &demangling cache variable for type metadata for Column<String>?);
  uint64_t v32 = v49;
  if (__swift_getEnumTagSinglePayload(v31, 1, v49) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v31, &demangling cache variable for type metadata for Column<String>?);
  }
  else
  {
    uint64_t v33 = v54;
    uint64_t v34 = v31;
    uint64_t v35 = v53;
    (*(void (**)(void, uint64_t, uint64_t))(v53 + 32))(v54, v34, v32);
    DataFrame.append<A>(column:)(v33, &type metadata for String);
    (*(void (**)(void (**)(void, void, void), uint64_t))(v35 + 8))(v33, v32);
  }
  uint64_t v36 = v57;
  uint64_t v37 = (uint64_t)v48;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v30 + *(int *)(v59 + 28), (uint64_t)v48, &demangling cache variable for type metadata for Column<Double>?);
  if (__swift_getEnumTagSinglePayload(v37, 1, v36) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v37, &demangling cache variable for type metadata for Column<Double>?);
  }
  else
  {
    uint64_t v38 = v52;
    uint64_t v39 = v58;
    (*(void (**)(void, uint64_t, uint64_t))(v58 + 32))(v52, v37, v36);
    DataFrame.append<A>(column:)(v38, &type metadata for Double);
    (*(void (**)(void (**)(void, void, void), uint64_t))(v39 + 8))(v38, v36);
    char v30 = v56;
  }
  uint64_t v40 = (uint64_t)v47;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v30 + *(int *)(v59 + 32), (uint64_t)v47, &demangling cache variable for type metadata for Column<Double>?);
  if (__swift_getEnumTagSinglePayload(v40, 1, v36) == 1) {
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v40, &demangling cache variable for type metadata for Column<Double>?);
  }
  uint64_t v42 = v51;
  uint64_t v43 = v40;
  uint64_t v44 = v58;
  (*(void (**)(void, uint64_t, uint64_t))(v58 + 32))(v51, v43, v36);
  DataFrame.append<A>(column:)(v42, &type metadata for Double);
  return (*(uint64_t (**)(void (**)(void, void, void), uint64_t))(v44 + 8))(v42, v36);
}

uint64_t MLActivityClassifier.DataSource.gatherDataFormLabeledDirectories(at:featureColumns:labelColumn:recordingFileColumn:)(char *a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, void), uint64_t *a5, uint64_t a6)
{
  v303 = a4;
  uint64_t v312 = a3;
  int64_t v8 = v6;
  uint64_t v300 = v7;
  uint64_t v317 = a6;
  v307 = a5;
  v306 = a1;
  uint64_t v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v248 = *(void *)(v270 - 8);
  int64_t v9 = *(void *)(v248 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  v285._uint64_t countAndFlagsBits = (uint64_t)&v247;
  uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  int64_t v12 = *(void *)(*(void *)(v249 - 8) + 64);
  int64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v250 = &v247;
  uint64_t v297 = type metadata accessor for CSVType(0);
  v299 = *(void **)(v297 - 8);
  int64_t v15 = v299[8];
  int64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  v287 = &v247;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  v259 = &v247;
  int64_t v20 = *(void *)(*(void *)(type metadata accessor for CSVReadingOptions(0) - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  v260 = &v247;
  uint64_t v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  uint64_t v274 = *(void *)(v273 - 8);
  int64_t v23 = *(void *)(v274 + 64);
  uint64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  v271 = &v247;
  uint64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  v277 = &v247;
  uint64_t v292 = type metadata accessor for JSONType(0);
  v294 = *(void **)(v292 - 8);
  int64_t v28 = v294[8];
  uint64_t v29 = alloca(v28);
  char v30 = alloca(v28);
  v288 = &v247;
  int64_t v31 = *(void *)(*(void *)(type metadata accessor for JSONReadingOptions(0) - 8) + 64);
  uint64_t v32 = alloca(v31);
  uint64_t v33 = alloca(v31);
  v261 = &v247;
  uint64_t v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
  uint64_t v276 = *(void *)(v275 - 8);
  int64_t v34 = *(void *)(v276 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  v272 = &v247;
  uint64_t v37 = alloca(v34);
  uint64_t v38 = alloca(v34);
  v278 = &v247;
  uint64_t v302 = type metadata accessor for DataFrame(0);
  uint64_t v301 = *(void *)(v302 - 8);
  int64_t v39 = *(void *)(v301 + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  v262 = &v247;
  uint64_t v42 = alloca(v39);
  uint64_t v43 = alloca(v39);
  v263 = &v247;
  uint64_t v44 = alloca(v39);
  uint64_t v45 = alloca(v39);
  v298 = &v247;
  uint64_t v283 = type metadata accessor for UTType(0);
  uint64_t v284 = *(void *)(v283 - 8);
  int64_t v46 = *(void *)(v284 + 64);
  uint64_t v47 = alloca(v46);
  uint64_t v48 = alloca(v46);
  v264 = &v247;
  uint64_t v320 = type metadata accessor for URL(0);
  uint64_t v321 = *(void *)(v320 - 8);
  int64_t v49 = *(void *)(v321 + 64);
  uint64_t v50 = alloca(v49);
  uint64_t v51 = alloca(v49);
  v281 = &v247;
  Swift::String v52 = alloca(v49);
  uint64_t v53 = alloca(v49);
  v282 = &v247;
  unint64_t v54 = alloca(v49);
  uint64_t v55 = alloca(v49);
  v309 = &v247;
  unint64_t v56 = alloca(v49);
  uint64_t v57 = alloca(v49);
  v313 = &v247;
  int64_t v58 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v59 = alloca(v58);
  BOOL v60 = alloca(v58);
  v280 = &v247;
  uint64_t v61 = alloca(v58);
  unint64_t v62 = alloca(v58);
  v290._uint64_t object = &v247;
  int64_t v63 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?)
                              - 8)
                  + 64);
  uint64_t v64 = alloca(v63);
  uint64_t v65 = alloca(v63);
  v305 = &v247;
  uint64_t v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v269 = *(void *)(v268 - 8);
  int64_t v66 = *(void *)(v269 + 64);
  uint64_t v67 = alloca(v66);
  uint64_t v68 = alloca(v66);
  uint64_t v308 = a2;
  uint64_t countAndFlagsBits = (char *)_swiftEmptyArrayStorage;
  int64_t v304 = *(void *)(a2 + 16);
  v315 = v8;
  if (v304)
  {
    *(void *)&long long v323 = _swiftEmptyArrayStorage;
    int64_t v70 = v304;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v304, 0);
    uint64_t countAndFlagsBits = (char *)v323;
    uint64_t v71 = (uint64_t *)(v308 + 40);
    v289 = &v247;
    do
    {
      uint64_t v322 = v70;
      _._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      v319 = (void (*)(char *, void, uint64_t))*(v71 - 1);
      uint64_t v72 = *v71;
      v295 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v72);
      unint64_t v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      uint64_t v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Double]]);
      uint64_t v73 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type [[Double]] and conformance [A], &demangling cache variable for type metadata for [[Double]], (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t countAndFlagsBits = (char *)_._countAndFlagsBits;
      Column.init<A>(name:contents:)(v319, v72, &v295, v316, v293, v73);
      *(void *)&long long v323 = countAndFlagsBits;
      unint64_t v74 = *((void *)countAndFlagsBits + 2);
      if (*((void *)countAndFlagsBits + 3) >> 1 <= v74)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)countAndFlagsBits + 3) >= 2uLL, v74 + 1, 1);
        uint64_t countAndFlagsBits = (char *)v323;
      }
      *((void *)countAndFlagsBits + 2) = v74 + 1;
      (*(void (**)(char *, char *, uint64_t))(v269 + 32))(&countAndFlagsBits[((*(unsigned __int8 *)(v269 + 80) + 32) & ~*(unsigned __int8 *)(v269 + 80))+ *(void *)(v269 + 72) * v74], v289, v268);
      v71 += 2;
      int64_t v70 = v322 - 1;
    }
    while (v322 != 1);
    int64_t v8 = v315;
  }
  _._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
  *(void *)&long long v323 = _swiftEmptyArrayStorage;
  uint64_t v322 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  uint64_t v75 = (char *)v8 + *(int *)(v322 + 20);
  uint64_t v76 = v303;
  swift_bridgeObjectRetain(v303);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v78 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  Swift::String v252 = v75;
  Column.init<A>(name:contents:)(v312, v76, &v323, &type metadata for String, v77, v78);
  *(void *)&long long v323 = _swiftEmptyArrayStorage;
  uint64_t v79 = v317;
  swift_bridgeObjectRetain(v317);
  uint64_t v80 = (uint64_t)v305;
  uint64_t v81 = v77;
  Swift::Int v82 = v315;
  Column.init<A>(name:contents:)(v307, v79, &v323, &type metadata for String, v81, v78);
  uint64_t v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  __swift_storeEnumTagSinglePayload(v80, 0, 1, v253);
  uint64_t v83 = v322;
  uint64_t v84 = v270;
  __swift_storeEnumTagSinglePayload((uint64_t)v82 + *(int *)(v322 + 28), 1, 1, v270);
  __swift_storeEnumTagSinglePayload((uint64_t)v82 + *(int *)(v83 + 32), 1, 1, v84);
  *Swift::Int v82 = _._countAndFlagsBits;
  uint64_t v85 = (uint64_t)v82 + *(int *)(v83 + 24);
  outlined init with take of DataFrame?((uint64_t)v305, v85, &demangling cache variable for type metadata for Column<String>?);
  uint64_t v86 = v300;
  uint64_t v87 = static _FileUtilities.getReadableSubdirectoriesOfDirectory(at:)();
  if (v86) {
    return outlined destroy of MLActivityClassifier.DataSource.Columns((uint64_t)v82);
  }
  uint64_t v88 = (uint64_t)v87;
  uint64_t v258 = v85;
  uint64_t v317 = 0;
  uint64_t v89 = v87[2];
  if (v89)
  {
    uint64_t v90 = v320;
    uint64_t v91 = v321;
    uint64_t object = v290._object;
  }
  else
  {
    swift_bridgeObjectRelease(v87);
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    uint64_t v91 = v321;
    uint64_t v94 = *(unsigned __int8 *)(v321 + 80);
    uint64_t v95 = ((int)v94 + 32) & ~*(unsigned __int8 *)(v321 + 80);
    uint64_t v88 = swift_allocObject(v93, v95 + *(void *)(v321 + 72), v94 | 7);
    *(void *)(v88 + 16) = 1;
    *(void *)(v88 + 24) = 2;
    uint64_t v90 = v320;
    (*(void (**)(uint64_t, char *, uint64_t))(v91 + 16))(v88 + v95, v306, v320);
    uint64_t v89 = *(void *)(v88 + 16);
    uint64_t object = v290._object;
    if (!v89)
    {
LABEL_87:
      __swift_storeEnumTagSinglePayload((uint64_t)object, 1, 1, v90);
      uint64_t v222 = v88;
      return swift_bridgeObjectRelease(v222);
    }
  }
  uint64_t v265 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~*(unsigned __int8 *)(v91 + 80);
  uint64_t v96 = v88 + v265;
  LODWORD(v293) = enum case for CSVType.double(_:);
  LODWORD(v289) = enum case for JSONType.double(_:);
  v307 = (uint64_t *)(v308 + 40);
  unint64_t v97 = 0;
  uint64_t v314 = v88;
  uint64_t v266 = v89;
  uint64_t v267 = v88 + v265;
  while (1)
  {
    if (v97 >= *(void *)(v88 + 16)) {
      BUG();
    }
    char v98 = *(void (**)(void, void, void))(v91 + 16);
    uint64_t v254 = *(void *)(v91 + 72);
    unint64_t v291 = v97;
    v303 = v98;
    v98(object, v96 + v97 * v254, v90);
    __swift_storeEnumTagSinglePayload((uint64_t)object, 0, 1, v90);
    if (__swift_getEnumTagSinglePayload((uint64_t)object, 1, v90) == 1)
    {
      uint64_t v222 = v314;
      return swift_bridgeObjectRelease(v222);
    }
    uint64_t v99 = (uint64_t)v313;
    int v256 = *(void (**)(char *, void *, uint64_t))(v91 + 32);
    v256(v313, object, v90);
    v290._uint64_t countAndFlagsBits = URL.lastPathComponent.getter();
    v318 = v100;
    uint64_t v101 = (uint64_t)v264;
    static UTType.text.getter();
    uint64_t v102 = v317;
    uint64_t v103 = static _FileUtilities.readableFiles(at:type:)(v99, v101);
    uint64_t v317 = v102;
    if (v102)
    {
      (*(void (**)(uint64_t, uint64_t))(v284 + 8))(v101, v283);
      swift_bridgeObjectRelease(v318);
      (*(void (**)(char *, uint64_t))(v321 + 8))(v313, v90);
      swift_bridgeObjectRelease(v314);
      Swift::Int v82 = v315;
      return outlined destroy of MLActivityClassifier.DataSource.Columns((uint64_t)v82);
    }
    uint64_t v104 = v103;
    (*(void (**)(uint64_t, uint64_t))(v284 + 8))(v101, v283);
    int v257 = v104[2];
    if (!v257)
    {
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v314);
      *(void *)&long long v323 = 0;
      *((void *)&v323 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      v233._uint64_t countAndFlagsBits = 0xD000000000000019;
      v233._uint64_t object = "are not properly constructed." + 0x8000000000000000;
      String.append(_:)(v233);
      v233._uint64_t countAndFlagsBits = v290._countAndFlagsBits;
      v233._uint64_t object = v318;
      String.append(_:)(v233);
      v233._uint64_t countAndFlagsBits = 0xD000000000000021;
      v285._uint64_t countAndFlagsBits = 0xD000000000000021;
      v233._uint64_t object = " one feature column." + 0x8000000000000000;
      String.append(_:)(v233);
      uint64_t v234 = (void *)*((void *)&v323 + 1);
      _._uint64_t countAndFlagsBits = v323;
      os_log_type_t v235 = static os_log_type_t.error.getter();
      v233._uint64_t countAndFlagsBits = _._countAndFlagsBits;
      v233._uint64_t object = v234;
      log(_:type:)(v233, v235);
      swift_bridgeObjectRelease(v234);
      *(void *)&long long v323 = 0;
      *((void *)&v323 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      v233._uint64_t countAndFlagsBits = 0xD000000000000019;
      v233._uint64_t object = "are not properly constructed." + 0x8000000000000000;
      String.append(_:)(v233);
      v233._uint64_t countAndFlagsBits = v290._countAndFlagsBits;
      uint64_t v236 = v318;
      v233._uint64_t object = v318;
      String.append(_:)(v233);
      swift_bridgeObjectRelease(v236);
      v233._uint64_t countAndFlagsBits = v285._countAndFlagsBits;
      v233._uint64_t object = " one feature column." + 0x8000000000000000;
      String.append(_:)(v233);
      Swift::String v285 = (Swift::String)v323;
      v233._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v233._object, 0, 0);
      *(Swift::String *)uint64_t v237 = v285;
      *(_OWORD *)(v237 + 16) = 0;
      *(_OWORD *)(v237 + 32) = 0;
      *(unsigned char *)(v237 + 48) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v321 + 8))(v313, v320);
      goto LABEL_92;
    }
    v310 = v104;
    unint64_t v255 = (char *)v104 + v265;
    unint64_t v105 = 0;
    uint64_t v106 = v309;
    uint64_t v107 = (uint64_t)v280;
    ++v291;
LABEL_17:
    if (v105 >= (unint64_t)v310[2]) {
      BUG();
    }
    unint64_t v279 = v105;
    uint64_t v108 = v320;
    v303(v107, &v255[v254 * v105], v320);
    __swift_storeEnumTagSinglePayload(v107, 0, 1, v108);
    if (__swift_getEnumTagSinglePayload(v107, 1, v108) != 1) {
      break;
    }
    swift_bridgeObjectRelease(v310);
    swift_bridgeObjectRelease(v318);
    uint64_t v90 = v108;
    uint64_t v220 = *(void (**)(char *, uint64_t))(v321 + 8);
LABEL_86:
    v220(v313, v90);
    unint64_t v97 = v291;
    uint64_t object = v290._object;
    uint64_t v88 = v314;
    uint64_t v96 = v267;
    uint64_t v91 = v321;
    if (v291 == v266) {
      goto LABEL_87;
    }
  }
  v256(v106, (void *)v107, v108);
  v109._uint64_t countAndFlagsBits = 0x6E6F736A2ELL;
  v109._uint64_t object = (void *)0xE500000000000000;
  uint64_t v251 = URL.absoluteString.getter();
  uint64_t v312 = v110;
  if (String.hasSuffix(_:)(v109))
  {
    v303(v282, v106, v108);
    int64_t v111 = v304;
    if (v304)
    {
      *(void *)&long long v323 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v304, 0);
      _._uint64_t countAndFlagsBits = v323;
      v319 = (void (*)(char *, void, uint64_t))v294[13];
      uint64_t v112 = v307;
      uint64_t v113 = v272;
      do
      {
        uint64_t v322 = v111;
        uint64_t v114 = *v112;
        uint64_t v115 = (char *)v113 + *(int *)(v275 + 48);
        *uint64_t v113 = *(v112 - 1);
        v113[1] = v114;
        v319(v115, v289, v292);
        *(void *)&long long v323 = _._countAndFlagsBits;
        unint64_t v116 = *(void *)(_._countAndFlagsBits + 16);
        unint64_t v316 = *(void *)(_._countAndFlagsBits + 24);
        unint64_t v117 = v316 >> 1;
        swift_bridgeObjectRetain(v114);
        if (v117 <= v116)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v316 >= 2, v116 + 1, 1);
          _._uint64_t countAndFlagsBits = v323;
        }
        uint64_t v118 = _._countAndFlagsBits;
        *(void *)(_._countAndFlagsBits + 16) = v116 + 1;
        uint64_t v119 = (uint64_t)v272;
        outlined init with take of DataFrame?((uint64_t)v272, v118+ ((*(unsigned __int8 *)(v276 + 80) + 32) & ~*(unsigned __int8 *)(v276 + 80))+ *(void *)(v276 + 72) * v116, &demangling cache variable for type metadata for (String, JSONType));
        v112 += 2;
        int64_t v111 = v322 - 1;
        uint64_t v113 = (void *)v119;
      }
      while (v322 != 1);
      uint64_t v129 = (void *)_._countAndFlagsBits;
    }
    else
    {
      uint64_t v129 = _swiftEmptyArrayStorage;
    }
    uint64_t v131 = v129[2];
    if (v131)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONType>);
      uint64_t v132 = (void *)static _DictionaryStorage.allocate(capacity:)(v131);
      uint64_t v133 = v129[2];
      v311 = v132;
      v305 = (char *)v133;
      if (v133)
      {
        uint64_t v134 = (uint64_t)v129;
        uint64_t v135 = v278;
        v306 = &v278[*(int *)(v275 + 48)];
        uint64_t v136 = v276;
        uint64_t v137 = v134 + ((*(unsigned __int8 *)(v276 + 80) + 32) & ~*(unsigned __int8 *)(v276 + 80));
        _._uint64_t countAndFlagsBits = v134;
        swift_bridgeObjectRetain_n(v134, 2);
        uint64_t v300 = *(void *)(v136 + 72);
        uint64_t v138 = v135;
        unint64_t v139 = 0;
        while (1)
        {
          outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v137, (uint64_t)v138, &demangling cache variable for type metadata for (String, JSONType));
          BOOL v140 = __OFADD__(1, v139);
          unint64_t v141 = v139 + 1;
          if (v140) {
            BUG();
          }
          unint64_t v316 = v141;
          v319 = (void (*)(char *, void, uint64_t))v137;
          uint64_t v143 = *((void *)v138 + 1);
          *(void *)&long long v323 = *(void *)v138;
          uint64_t v142 = v323;
          *((void *)&v323 + 1) = v143;
          uint64_t v322 = v294[4];
          ((void (*)(char *, char *, uint64_t))v322)(v288, v306, v292);
          unint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v143);
          BOOL v146 = (v145 & 1) == 0;
          BOOL v140 = __OFADD__(v132[2], v146);
          uint64_t v147 = v132[2] + v146;
          if (v140) {
            BUG();
          }
          char v148 = v145;
          if (v132[3] < v147)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v147, 1u);
            uint64_t v132 = v311;
            unint64_t v144 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v143);
            if ((v148 & 1) != (v149 & 1)) {
              goto LABEL_111;
            }
          }
          if (v148) {
            break;
          }
          v132[(v144 >> 6) + 8] |= 1 << v144;
          uint64_t v150 = v132[6];
          uint64_t v151 = 16 * v144;
          *(void *)(v150 + v151) = v142;
          *(void *)(v150 + v151 + 8) = v143;
          ((void (*)(unint64_t, char *, uint64_t))v322)(v132[7] + v294[9] * v144, v288, v292);
          uint64_t v155 = v132[2];
          BOOL v140 = __OFADD__(1, v155);
          uint64_t v156 = v155 + 1;
          uint64_t v138 = v278;
          if (v140) {
            BUG();
          }
          v132[2] = v156;
          uint64_t v137 = (uint64_t)v319 + v300;
          unint64_t v139 = v316;
          if ((char *)v316 == v305)
          {
            swift_bridgeObjectRelease_n(_._countAndFlagsBits, 3, v152, v153, v154);
            goto LABEL_58;
          }
        }
        uint64_t v238 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
        swift_willThrow();
        uint64_t v286 = v238;
        swift_errorRetain(v238);
        uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast(&demangling cache variable for type metadata for Error, &v286, v239, &type metadata for _MergeError, 0))
        {
          uint64_t v240 = _._countAndFlagsBits;
          swift_bridgeObjectRelease(_._countAndFlagsBits);
          v241 = v288;
          uint64_t v242 = v292;
          uint64_t v243 = v294;
          goto LABEL_113;
        }
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v132 = &_swiftEmptyDictionarySingleton;
      v311 = &_swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v129);
LABEL_58:
    uint64_t v182 = v261;
    JSONReadingOptions.init()();
    uint64_t v183 = v308;
    swift_bridgeObjectRetain(v308);
    uint64_t v184 = v263;
    uint64_t v185 = v317;
    DataFrame.init(contentsOfJSONFile:columns:types:options:)(v282, v183, v132, v182);
  }
  else
  {
    v303(v281, v106, v108);
    int64_t v120 = v304;
    if (v304)
    {
      *(void *)&long long v323 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v304, 0);
      _._uint64_t countAndFlagsBits = v323;
      v319 = (void (*)(char *, void, uint64_t))v299[13];
      uint64_t v121 = v307;
      uint64_t v122 = v271;
      do
      {
        uint64_t v322 = v120;
        uint64_t v123 = *v121;
        uint64_t v124 = (char *)v122 + *(int *)(v273 + 48);
        *uint64_t v122 = *(v121 - 1);
        v122[1] = v123;
        v319(v124, v293, v297);
        *(void *)&long long v323 = _._countAndFlagsBits;
        unint64_t v125 = *(void *)(_._countAndFlagsBits + 16);
        unint64_t v316 = *(void *)(_._countAndFlagsBits + 24);
        unint64_t v126 = v316 >> 1;
        swift_bridgeObjectRetain(v123);
        if (v126 <= v125)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v316 >= 2, v125 + 1, 1);
          _._uint64_t countAndFlagsBits = v323;
        }
        uint64_t v127 = _._countAndFlagsBits;
        *(void *)(_._countAndFlagsBits + 16) = v125 + 1;
        uint64_t v128 = (uint64_t)v271;
        outlined init with take of DataFrame?((uint64_t)v271, v127+ ((*(unsigned __int8 *)(v274 + 80) + 32) & ~*(unsigned __int8 *)(v274 + 80))+ *(void *)(v274 + 72) * v125, &demangling cache variable for type metadata for (String, CSVType));
        v121 += 2;
        int64_t v120 = v322 - 1;
        uint64_t v122 = (void *)v128;
      }
      while (v322 != 1);
      uint64_t v130 = (void *)_._countAndFlagsBits;
    }
    else
    {
      uint64_t v130 = _swiftEmptyArrayStorage;
    }
    uint64_t v157 = v130[2];
    if (v157)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CSVType>);
      BOOL v158 = (void *)static _DictionaryStorage.allocate(capacity:)(v157);
      uint64_t v159 = v130[2];
      v311 = v158;
      v305 = (char *)v159;
      if (v159)
      {
        uint64_t v160 = (uint64_t)v130;
        char v161 = v277;
        v306 = &v277[*(int *)(v273 + 48)];
        uint64_t v162 = v274;
        uint64_t v163 = v160 + ((*(unsigned __int8 *)(v274 + 80) + 32) & ~*(unsigned __int8 *)(v274 + 80));
        _._uint64_t countAndFlagsBits = v160;
        swift_bridgeObjectRetain_n(v160, 2);
        uint64_t v300 = *(void *)(v162 + 72);
        uint64_t v164 = v161;
        unint64_t v165 = 0;
        while (1)
        {
          outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v163, (uint64_t)v164, &demangling cache variable for type metadata for (String, CSVType));
          BOOL v140 = __OFADD__(1, v165);
          unint64_t v166 = v165 + 1;
          if (v140) {
            BUG();
          }
          unint64_t v316 = v166;
          v319 = (void (*)(char *, void, uint64_t))v163;
          uint64_t v168 = *((void *)v164 + 1);
          *(void *)&long long v323 = *(void *)v164;
          uint64_t v167 = v323;
          *((void *)&v323 + 1) = v168;
          uint64_t v322 = v299[4];
          ((void (*)(char *, char *, uint64_t))v322)(v287, v306, v297);
          unint64_t v169 = specialized __RawDictionaryStorage.find<A>(_:)(v167, v168);
          BOOL v171 = (v170 & 1) == 0;
          BOOL v140 = __OFADD__(v158[2], v171);
          uint64_t v172 = v158[2] + v171;
          if (v140) {
            BUG();
          }
          char v173 = v170;
          if (v158[3] < v172)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v172, 1u);
            unint64_t v169 = specialized __RawDictionaryStorage.find<A>(_:)(v167, v168);
            if ((v173 & 1) != (v174 & 1))
            {
LABEL_111:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              BUG();
            }
          }
          if (v173) {
            break;
          }
          BOOL v158 = v311;
          v311[(v169 >> 6) + 8] |= 1 << v169;
          uint64_t v175 = v158[6];
          uint64_t v176 = 16 * v169;
          *(void *)(v175 + v176) = v167;
          *(void *)(v175 + v176 + 8) = v168;
          ((void (*)(unint64_t, char *, uint64_t))v322)(v158[7] + v299[9] * v169, v287, v297);
          uint64_t v180 = v158[2];
          BOOL v140 = __OFADD__(1, v180);
          uint64_t v181 = v180 + 1;
          uint64_t v164 = v277;
          if (v140) {
            BUG();
          }
          v158[2] = v181;
          uint64_t v163 = (uint64_t)v319 + v300;
          unint64_t v165 = v316;
          if ((char *)v316 == v305)
          {
            swift_bridgeObjectRelease_n(_._countAndFlagsBits, 3, v177, v178, v179);
            goto LABEL_61;
          }
        }
        uint64_t v238 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
        swift_willThrow();
        uint64_t v286 = v238;
        swift_errorRetain(v238);
        uint64_t v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast(&demangling cache variable for type metadata for Error, &v286, v244, &type metadata for _MergeError, 0))
        {
          uint64_t v240 = _._countAndFlagsBits;
          swift_bridgeObjectRelease(_._countAndFlagsBits);
          v241 = v287;
          uint64_t v242 = v297;
          uint64_t v243 = v299;
LABEL_113:
          ((void (*)(char *, uint64_t))v243[1])(v241, v242);
          uint64_t v246 = *((void *)&v323 + 1);
          swift_bridgeObjectRelease(v240);
          swift_bridgeObjectRelease(v246);
          swift_errorRelease(v286);
          swift_unexpectedError(v238, "Swift/Dictionary.swift", 22, 1, 489);
          BUG();
        }
LABEL_110:
        v295 = 0;
        unint64_t v296 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v245._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        v245._uint64_t object = "Swift/NativeDictionary.swift" + 0x8000000000000000;
        String.append(_:)(v245);
        _print_unlocked<A, B>(_:_:)(&v323, &v295, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v245._uint64_t countAndFlagsBits = 39;
        v245._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v245);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v295, v296, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
        BUG();
      }
    }
    else
    {
      BOOL v158 = &_swiftEmptyDictionarySingleton;
      v311 = &_swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v130);
LABEL_61:
    _._uint64_t countAndFlagsBits = (uint64_t)specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v322 = (uint64_t)specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    char v186 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
    uint64_t v187 = v259;
    ((void (*)(char *, void, uint64_t))v299[13])(v259, v293, v297);
    char v188 = v260;
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, _._countAndFlagsBits, v322, v186, v187, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
    uint64_t v189 = v308;
    swift_bridgeObjectRetain(v308);
    uint64_t v184 = v262;
    uint64_t v185 = v317;
    DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v281, v189, 0, 0, 1, v158, v188);
  }
  if (v185)
  {
    swift_bridgeObjectRelease(v312);
    swift_bridgeObjectRelease(v318);
    uint64_t v223 = *(void (**)(char *, uint64_t))(v321 + 8);
    uint64_t v224 = v320;
    v223(v309, v320);
    swift_bridgeObjectRelease(v310);
    v223(v313, v224);
    swift_bridgeObjectRelease(v314);
    goto LABEL_92;
  }
  Swift::String v190 = v298;
  uint64_t v191 = v302;
  (*(void (**)(char *, char *, uint64_t))(v301 + 32))(v298, v184, v302);
  if (DataFrameProtocol.isEmpty.getter(v191, &protocol witness table for DataFrame))
  {
    swift_bridgeObjectRelease(v314);
    swift_bridgeObjectRelease(v310);
    swift_bridgeObjectRelease(v312);
    swift_bridgeObjectRelease(v318);
    uint64_t v225 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v225, 0, 0);
    *(void *)uint64_t v226 = 0xD000000000000034;
    *(void *)(v226 + 8) = "n the same feature columns." + 0x8000000000000000;
    *(_OWORD *)(v226 + 16) = 0;
    *(_OWORD *)(v226 + 32) = 0;
    *(unsigned char *)(v226 + 48) = 0;
    swift_willThrow();
    uint64_t v227 = v190;
    goto LABEL_91;
  }
  uint64_t v192 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v192);
  uint64_t v317 = 0;
  swift_bridgeObjectRelease(v192);
  uint64_t v194 = Set.init(minimumCapacity:)(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2], &type metadata for String, &protocol witness table for String);
  v295 = (void *)v194;
  uint64_t v195 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n[2];
  if (v195)
  {
    _._uint64_t countAndFlagsBits = (uint64_t)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n;
    uint64_t v196 = MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n
         + 5;
    do
    {
      uint64_t v197 = *(v196 - 1);
      uint64_t v198 = *v196;
      swift_bridgeObjectRetain(*v196);
      specialized Set._Variant.insert(_:)((uint64_t *)&v323, v197, v198);
      swift_bridgeObjectRelease(*((void *)&v323 + 1));
      v196 += 2;
      --v195;
    }
    while (v195);
    swift_bridgeObjectRelease(_._countAndFlagsBits);
    _._uint64_t countAndFlagsBits = (uint64_t)v295;
  }
  else
  {
    _._uint64_t countAndFlagsBits = v194;
    swift_bridgeObjectRelease(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  }
  swift_bridgeObjectRetain(v308);
  int64_t v199 = v304;
  uint64_t v200 = Set.init(minimumCapacity:)(v304, &type metadata for String, &protocol witness table for String);
  v295 = (void *)v200;
  Swift::String v201 = v307;
  int64_t v202 = v199;
  if (v199)
  {
    do
    {
      uint64_t v203 = *(v201 - 1);
      uint64_t v204 = *v201;
      swift_bridgeObjectRetain(*v201);
      specialized Set._Variant.insert(_:)((uint64_t *)&v323, v203, v204);
      swift_bridgeObjectRelease(*((void *)&v323 + 1));
      v201 += 2;
      --v202;
    }
    while (v202);
    swift_bridgeObjectRelease(v308);
    uint64_t v205 = (uint64_t)v295;
  }
  else
  {
    uint64_t v205 = v200;
    swift_bridgeObjectRelease(v308);
  }
  uint64_t v206 = _._countAndFlagsBits;
  char v207 = specialized static Set.== infix(_:_:)(_._countAndFlagsBits, v205);
  swift_bridgeObjectRelease(v206);
  swift_bridgeObjectRelease(v205);
  if (v207)
  {
    if (v304)
    {
      uint64_t v208 = v307;
      unint64_t v209 = 0;
      do
      {
        uint64_t v210 = *(v208 - 1);
        _._uint64_t countAndFlagsBits = (uint64_t)v208;
        uint64_t v211 = *v208;
        swift_bridgeObjectRetain(*v208);
        DataFrame.subscript.getter(v210, v211, &type metadata for Double);
        swift_bridgeObjectRelease(v211);
        *(void *)&long long v323 = 0;
        uint64_t v212 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
        uint64_t v213 = v270;
        uint64_t v214 = v285._countAndFlagsBits;
        OptionalColumnProtocol.filled(with:)(&v323, v270, v212);
        (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v214, v213);
        uint64_t v215 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
        uint64_t v216 = dispatch thunk of Sequence._copyToContiguousArray()(v249, v215);
        *(void *)&long long v323 = v216;
        uint64_t v217 = v315;
        v218 = (void *)*v315;
        if (!swift_isUniquelyReferenced_nonNull_native(*v315)) {
          v218 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v218);
        }
        if (v209 >= v218[2]) {
          BUG();
        }
        uint64_t v322 = v209 + 1;
        v319 = (void (*)(char *, void, uint64_t))v216;
        Column.append(_:)(&v323, v268);
        swift_release(v319);
        *uint64_t v217 = v218;
        uint64_t v208 = (uint64_t *)(_._countAndFlagsBits + 16);
        unint64_t v209 = v322;
      }
      while (v304 != v322);
    }
    *(void *)&long long v323 = v290._countAndFlagsBits;
    *((void *)&v323 + 1) = v318;
    uint64_t v219 = v253;
    Column.append(_:)(&v323, v253);
    if (__swift_getEnumTagSinglePayload(v258, 1, v219))
    {
      swift_bridgeObjectRelease(v312);
      (*(void (**)(char *, uint64_t))(v301 + 8))(v298, v302);
      uint64_t v220 = *(void (**)(char *, uint64_t))(v321 + 8);
      uint64_t v106 = v309;
      v220(v309, v320);
    }
    else
    {
      *(void *)&long long v323 = v251;
      uint64_t v221 = v312;
      *((void *)&v323 + 1) = v312;
      Column.append(_:)(&v323, v219);
      (*(void (**)(char *, uint64_t))(v301 + 8))(v298, v302);
      uint64_t v220 = *(void (**)(char *, uint64_t))(v321 + 8);
      uint64_t v106 = v309;
      v220(v309, v320);
      swift_bridgeObjectRelease(v221);
    }
    unint64_t v105 = v279 + 1;
    uint64_t v107 = (uint64_t)v280;
    if ((void (__cdecl *)(id))(v279 + 1) == v257)
    {
      uint64_t v90 = v320;
      __swift_storeEnumTagSinglePayload((uint64_t)v280, 1, 1, v320);
      swift_bridgeObjectRelease(v310);
      swift_bridgeObjectRelease(v318);
      goto LABEL_86;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease(v314);
  swift_bridgeObjectRelease(v310);
  swift_bridgeObjectRelease(v312);
  swift_bridgeObjectRelease(v318);
  uint64_t v228 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v228, 0, 0);
  *(void *)uint64_t v229 = 0xD00000000000003BLL;
  *(void *)(v229 + 8) = "Missing features column '" + 0x8000000000000000;
  *(_OWORD *)(v229 + 16) = 0;
  *(_OWORD *)(v229 + 32) = 0;
  *(unsigned char *)(v229 + 48) = 0;
  swift_willThrow();
  uint64_t v227 = v298;
LABEL_91:
  (*(void (**)(char *, uint64_t))(v301 + 8))(v227, v302);
  uint64_t v230 = *(void (**)(char *, uint64_t))(v321 + 8);
  uint64_t v231 = v320;
  v230(v309, v320);
  v230(v313, v231);
LABEL_92:
  Swift::Int v82 = v315;
  return outlined destroy of MLActivityClassifier.DataSource.Columns((uint64_t)v82);
}

uint64_t MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v308 = a4;
  unint64_t v315 = a3;
  uint64_t v286 = v14;
  unint64_t v303 = v15;
  uint64_t v267 = v16;
  uint64_t v302 = a6;
  uint64_t v312 = a5;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v292 = &v262;
  uint64_t v277 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v20 = *(void *)(v277 - 8);
  int64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = alloca(v21);
  int64_t v23 = alloca(v21);
  v278 = &v262;
  uint64_t v288 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v289 = *(void *)(v288 - 8);
  int64_t v24 = *(void *)(v289 + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v269 = &v262;
  uint64_t v27 = alloca(v24);
  int64_t v28 = alloca(v24);
  uint64_t v283 = &v262;
  uint64_t v310 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v284 = *(void *)(v310 - 8);
  int64_t v29 = *(void *)(v284 + 64);
  char v30 = alloca(v29);
  int64_t v31 = alloca(v29);
  uint64_t v293 = &v262;
  uint64_t v32 = alloca(v29);
  uint64_t v33 = alloca(v29);
  v295 = &v262;
  int64_t v34 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?)
                              - 8)
                  + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  unint64_t v279 = &v262;
  uint64_t v37 = alloca(v34);
  uint64_t v38 = alloca(v34);
  v280 = &v262;
  int64_t v39 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>?)
                              - 8)
                  + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  v281 = &v262;
  uint64_t v294 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v290 = *(void *)(v294 - 8);
  int64_t v42 = *(void *)(v290 + 64);
  uint64_t v43 = alloca(v42);
  uint64_t v44 = alloca(v42);
  unint64_t v291 = &v262;
  uint64_t v282 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  int64_t v45 = *(void *)(*(void *)(v282 - 8) + 64);
  int64_t v46 = alloca(v45);
  uint64_t v47 = alloca(v45);
  uint64_t v301 = &v262;
  uint64_t v300 = type metadata accessor for CSVType(0);
  uint64_t v275 = *(void *)(v300 - 8);
  int64_t v48 = *(void *)(v275 + 64);
  int64_t v49 = alloca(v48);
  uint64_t v50 = alloca(v48);
  uint64_t v273 = &v262;
  int64_t v51 = *(void *)(*(void *)(type metadata accessor for CSVReadingOptions(0) - 8) + 64);
  Swift::String v52 = alloca(v51);
  uint64_t v53 = alloca(v51);
  v272 = &v262;
  int64_t v54 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CSVType?)
                              - 8)
                  + 64);
  uint64_t v55 = alloca(v54);
  unint64_t v56 = alloca(v54);
  uint64_t v297 = &v262;
  int64_t v57 = *(void *)(*(void *)(type metadata accessor for JSONReadingOptions(0) - 8) + 64);
  int64_t v58 = alloca(v57);
  uint64_t v59 = alloca(v57);
  v299 = &v262;
  int64_t v60 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for JSONType?)
                              - 8)
                  + 64);
  uint64_t v61 = alloca(v60);
  unint64_t v62 = alloca(v60);
  uint64_t v314 = &v262;
  uint64_t v311 = type metadata accessor for DataFrame(0);
  uint64_t v304 = *(void *)(v311 - 8);
  int64_t v63 = *(void *)(v304 + 64);
  uint64_t v64 = alloca(v63);
  uint64_t v65 = alloca(v63);
  Swift::String v285 = &v262;
  int64_t v66 = alloca(v63);
  uint64_t v67 = alloca(v63);
  v287 = &v262;
  uint64_t v68 = alloca(v63);
  uint64_t v69 = alloca(v63);
  uint64_t v274 = &v262;
  int64_t v70 = alloca(v63);
  uint64_t v71 = alloca(v63);
  v271 = &v262;
  uint64_t v72 = alloca(v63);
  uint64_t v73 = alloca(v63);
  v309 = &v262;
  uint64_t v306 = type metadata accessor for URL(0);
  uint64_t v307 = *(void *)(v306 - 8);
  int64_t v74 = *(void *)(v307 + 64);
  uint64_t v75 = alloca(v74);
  uint64_t v76 = alloca(v74);
  uint64_t v270 = &v262;
  uint64_t v77 = alloca(v74);
  uint64_t v78 = alloca(v74);
  unint64_t v296 = &v262;
  uint64_t v79 = alloca(v74);
  uint64_t v80 = alloca(v74);
  v313 = &v262;
  uint64_t v81 = alloca(v74);
  Swift::Int v82 = alloca(v74);
  uint64_t v268 = a1;
  URL.appendingPathComponent(_:)(a2, v315);
  v305 = &v262;
  uint64_t v83 = URL.pathExtension.getter();
  uint64_t v85 = v84;
  uint64_t v276 = v20;
  if (v83 == 1852797802 && v84 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
  }
  else
  {
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, 1852797802, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v85);
    if ((v86 & 1) == 0)
    {
      uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>);
      uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
      uint64_t v143 = *(void *)(v142 - 8);
      uint64_t v144 = v142;
      unint64_t v315 = v142;
      v313 = *(uint64_t **)(v143 + 72);
      uint64_t v145 = *(unsigned __int8 *)(v143 + 80);
      uint64_t v146 = ((int)v145 + 32) & ~*(unsigned __int8 *)(v143 + 80);
      uint64_t v147 = swift_allocObject(v141, v146 + 2 * (void)v313, v145 | 7);
      *(void *)(v147 + 16) = 2;
      *(void *)(v147 + 24) = 4;
      uint64_t v148 = v147 + v146;
      uint64_t v149 = v147 + v146 + *(int *)(v144 + 48);
      *(void *)(v147 + v146) = v308;
      *(void *)(v147 + v146 + 8) = v312;
      LODWORD(v314) = enum case for CSVType.string(_:);
      uint64_t v150 = *(void **)(v275 + 104);
      uint64_t v151 = v300;
      ((void (*)(uint64_t, void, uint64_t))v150)(v149, enum case for CSVType.string(_:), v300);
      uint64_t v152 = v313;
      uint64_t v153 = (char *)v313 + *(int *)(v315 + 48) + v148;
      *(uint64_t *)((char *)v313 + v148) = v302;
      *(uint64_t *)((char *)v152 + v148 + 8) = a7;
      ((void (*)(char *, void, uint64_t))v150)(v153, v314, v151);
      swift_bridgeObjectRetain(v312);
      swift_bridgeObjectRetain(a7);
      v298[0] = Dictionary.init(dictionaryLiteral:)(v147, &type metadata for String, v151, &protocol witness table for String);
      v313 = v150;
      if (a9)
      {
        uint64_t v154 = (uint64_t)v297;
        ((void (*)(uint64_t *, void, uint64_t))v150)(v297, enum case for CSVType.double(_:), v151);
        __swift_storeEnumTagSinglePayload(v154, 0, 1, v151);
        swift_bridgeObjectRetain(a9);
        specialized Dictionary.subscript.setter(v154, a8, a9);
      }
      uint64_t v155 = a10;
      if (a11)
      {
        uint64_t v156 = (uint64_t)v297;
        uint64_t v157 = v300;
        ((void (*)(uint64_t *, void, uint64_t))v313)(v297, enum case for CSVType.double(_:), v300);
        __swift_storeEnumTagSinglePayload(v156, 0, 1, v157);
        swift_bridgeObjectRetain(a11);
        uint64_t v158 = v156;
        uint64_t v155 = a10;
        specialized Dictionary.subscript.setter(v158, a10, a11);
      }
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v307 + 16))(v296, v305, v306);
      uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
      uint64_t inited = (void *)swift_initStackObject(v159, &v263);
      inited[2] = 4;
      inited[3] = 8;
      inited[4] = v308;
      char v161 = v312;
      inited[5] = v312;
      uint64_t v162 = v302;
      inited[6] = v302;
      inited[7] = a7;
      inited[8] = a8;
      inited[9] = a9;
      inited[10] = v155;
      uint64_t v163 = v161;
      inited[11] = a11;
      swift_bridgeObjectRetain(a11);
      if (v163)
      {
        swift_bridgeObjectRetain_n(v163, 2);
        swift_bridgeObjectRetain(a7);
        swift_bridgeObjectRetain(a9);
        uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
        unint64_t v165 = v164[2];
        unint64_t v166 = v164[3];
        if (v166 >> 1 <= v165) {
          uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v166 >= 2, v165 + 1, 1, (uint64_t)v164);
        }
        v164[2] = v165 + 1;
        uint64_t v167 = 2 * v165;
        v164[v167 + 4] = v308;
        v164[v167 + 5] = v312;
        uint64_t v162 = inited[6];
        uint64_t v168 = inited[7];
      }
      else
      {
        swift_bridgeObjectRetain(a7);
        swift_bridgeObjectRetain(a9);
        uint64_t v168 = a7;
        uint64_t v164 = _swiftEmptyArrayStorage;
      }
      if (v168)
      {
        unint64_t v315 = v162;
        swift_bridgeObjectRetain(v168);
        if (!swift_isUniquelyReferenced_nonNull_native(v164)) {
          uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1, (uint64_t)v164);
        }
        unint64_t v169 = v164[2];
        unint64_t v170 = v164[3];
        int64_t v171 = v169 + 1;
        if (v170 >> 1 <= v169)
        {
          uint64_t v314 = (uint64_t *)(v169 + 1);
          v259 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v170 >= 2, v171, 1, (uint64_t)v164);
          int64_t v171 = (int64_t)v314;
          uint64_t v164 = v259;
        }
        v164[2] = v171;
        uint64_t v172 = 2 * v169;
        v164[v172 + 4] = v315;
        v164[v172 + 5] = v168;
      }
      uint64_t v173 = inited[9];
      if (v173)
      {
        unint64_t v315 = inited[8];
        swift_bridgeObjectRetain(v173);
        if (!swift_isUniquelyReferenced_nonNull_native(v164)) {
          uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1, (uint64_t)v164);
        }
        unint64_t v174 = v164[2];
        unint64_t v175 = v164[3];
        int64_t v176 = v174 + 1;
        if (v175 >> 1 <= v174)
        {
          uint64_t v314 = (uint64_t *)(v174 + 1);
          v260 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v175 >= 2, v176, 1, (uint64_t)v164);
          int64_t v176 = (int64_t)v314;
          uint64_t v164 = v260;
        }
        v164[2] = v176;
        uint64_t v177 = 2 * v174;
        v164[v177 + 4] = v315;
        v164[v177 + 5] = v173;
      }
      uint64_t v178 = inited[11];
      if (v178)
      {
        unint64_t v315 = inited[10];
        swift_bridgeObjectRetain(v178);
        if (!swift_isUniquelyReferenced_nonNull_native(v164)) {
          uint64_t v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1, (uint64_t)v164);
        }
        unint64_t v179 = v164[2];
        unint64_t v180 = v164[3];
        int64_t v181 = v179 + 1;
        if (v180 >> 1 <= v179)
        {
          uint64_t v314 = (uint64_t *)(v179 + 1);
          v261 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v180 >= 2, v181, 1, (uint64_t)v164);
          int64_t v181 = (int64_t)v314;
          uint64_t v164 = v261;
        }
        v164[2] = v181;
        uint64_t v182 = 2 * v179;
        v164[v182 + 4] = v315;
        v164[v182 + 5] = v178;
      }
      swift_setDeallocating(inited);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      unint64_t v315 = v298[0];
      uint64_t v314 = default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
      v299 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      uint64_t v183 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      uint64_t v184 = v273;
      ((void (*)(uint64_t *, void, uint64_t))v313)(v273, enum case for CSVType.double(_:), v300);
      uint64_t v185 = v272;
      CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, v314, v299, v183, v184, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
      char v186 = v274;
      uint64_t v187 = v303;
      DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v296, v164, 0, 0, 1, v315, v185);
      if (!v187)
      {
        uint64_t v138 = v309;
        unint64_t v139 = v309;
        BOOL v140 = v186;
        goto LABEL_65;
      }
LABEL_63:
      char v188 = v305;
      uint64_t v189 = v306;
      uint64_t v190 = v307;
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v190 + 8))(v188, v189);
    }
  }
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, JSONType)>);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
  uint64_t v89 = *(void *)(v88 - 8);
  uint64_t v90 = v88;
  uint64_t v297 = (uint64_t *)v88;
  unint64_t v315 = *(void *)(v89 + 72);
  uint64_t v91 = *(unsigned __int8 *)(v89 + 80);
  uint64_t v92 = ((int)v91 + 32) & ~*(unsigned __int8 *)(v89 + 80);
  uint64_t v93 = swift_allocObject(v87, v92 + 2 * v315, v91 | 7);
  uint64_t v300 = v93;
  *(void *)(v93 + 16) = 2;
  *(void *)(v93 + 24) = 4;
  unint64_t v296 = (uint64_t *)(v92 + v93);
  uint64_t v94 = v92 + v93 + *(int *)(v90 + 48);
  *(void *)(v93 + v92) = v308;
  *(void *)(v93 + v92 + 8) = v312;
  LODWORD(v92) = enum case for JSONType.string(_:);
  uint64_t v95 = type metadata accessor for JSONType(0);
  uint64_t v96 = *(void (**)(void, void, void))(*(void *)(v95 - 8) + 104);
  v96(v94, v92, v95);
  uint64_t v97 = v315;
  char v98 = v296;
  uint64_t v99 = (char *)v296 + v315 + *((int *)v297 + 12);
  *(uint64_t *)((char *)v296 + v315) = v302;
  *(uint64_t *)((char *)v98 + v97 + 8) = a7;
  unint64_t v315 = (unint64_t)v96;
  v96(v99, v92, v95);
  swift_bridgeObjectRetain(v312);
  uint64_t v100 = v95;
  swift_bridgeObjectRetain(a7);
  v298[0] = Dictionary.init(dictionaryLiteral:)(v300, &type metadata for String, v95, &protocol witness table for String);
  if (a9)
  {
    uint64_t v101 = (uint64_t)v314;
    ((void (*)(uint64_t *, void, uint64_t))v315)(v314, enum case for JSONType.double(_:), v95);
    __swift_storeEnumTagSinglePayload(v101, 0, 1, v95);
    swift_bridgeObjectRetain(a9);
    specialized Dictionary.subscript.setter(v101, a8, a9);
    uint64_t v100 = v95;
  }
  uint64_t v102 = v315;
  if (a11)
  {
    uint64_t v103 = (uint64_t)v314;
    ((void (*)(uint64_t *, void, uint64_t))v315)(v314, enum case for JSONType.double(_:), v100);
    __swift_storeEnumTagSinglePayload(v103, 0, 1, v100);
    swift_bridgeObjectRetain(a11);
    specialized Dictionary.subscript.setter(v103, a10, a11);
  }
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v307 + 16))(v313, v305, v306, v102);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  unint64_t v105 = (void *)swift_initStackObject(v104, &v266);
  v105[2] = 4;
  v105[3] = 8;
  v105[4] = v308;
  uint64_t v106 = v312;
  v105[5] = v312;
  uint64_t v107 = v302;
  v105[6] = v302;
  uint64_t v108 = a7;
  v105[7] = a7;
  v105[8] = a8;
  v105[9] = a9;
  v105[10] = a10;
  unint64_t v315 = (unint64_t)v105;
  v105[11] = a11;
  swift_bridgeObjectRetain(a11);
  if (v106)
  {
    swift_bridgeObjectRetain_n(v106, 2);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    Swift::String v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v110 = v109[2];
    unint64_t v111 = v109[3];
    if (v111 >> 1 <= v110) {
      Swift::String v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v111 >= 2, v110 + 1, 1, (uint64_t)v109);
    }
    uint64_t v112 = (void *)v315;
    v109[2] = v110 + 1;
    uint64_t v113 = 2 * v110;
    v109[v113 + 4] = v308;
    v109[v113 + 5] = v312;
    uint64_t v114 = v112[6];
    uint64_t v108 = v112[7];
  }
  else
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    Swift::String v109 = _swiftEmptyArrayStorage;
    uint64_t v114 = v107;
    uint64_t v112 = (void *)v315;
  }
  if (v108)
  {
    swift_bridgeObjectRetain(v108);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v109);
    unint64_t v315 = v114;
    if (!isUniquelyReferenced_nonNull_native) {
      Swift::String v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, (uint64_t)v109);
    }
    unint64_t v116 = v109[2];
    unint64_t v117 = v109[3];
    int64_t v118 = v116 + 1;
    if (v117 >> 1 <= v116)
    {
      uint64_t v314 = (uint64_t *)(v116 + 1);
      int v256 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v117 >= 2, v118, 1, (uint64_t)v109);
      int64_t v118 = (int64_t)v314;
      Swift::String v109 = v256;
    }
    v109[2] = v118;
    uint64_t v119 = 2 * v116;
    v109[v119 + 4] = v315;
    v109[v119 + 5] = v108;
  }
  uint64_t v120 = v112[9];
  if (v120)
  {
    uint64_t v121 = v112[8];
    swift_bridgeObjectRetain(v112[9]);
    char v122 = swift_isUniquelyReferenced_nonNull_native(v109);
    unint64_t v315 = v121;
    if (!v122) {
      Swift::String v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, (uint64_t)v109);
    }
    unint64_t v123 = v109[2];
    unint64_t v124 = v109[3];
    int64_t v125 = v123 + 1;
    if (v124 >> 1 <= v123)
    {
      uint64_t v314 = (uint64_t *)(v123 + 1);
      int v257 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 >= 2, v125, 1, (uint64_t)v109);
      int64_t v125 = (int64_t)v314;
      Swift::String v109 = v257;
    }
    v109[2] = v125;
    uint64_t v126 = 2 * v123;
    v109[v126 + 4] = v315;
    v109[v126 + 5] = v120;
  }
  uint64_t v127 = v112[11];
  if (v127)
  {
    uint64_t v128 = v112[10];
    swift_bridgeObjectRetain(v112[11]);
    char v129 = swift_isUniquelyReferenced_nonNull_native(v109);
    uint64_t v314 = (uint64_t *)v128;
    if (!v129) {
      Swift::String v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, (uint64_t)v109);
    }
    unint64_t v130 = v109[2];
    unint64_t v131 = v109[3];
    int64_t v132 = v130 + 1;
    if (v131 >> 1 <= v130)
    {
      unint64_t v315 = v130 + 1;
      uint64_t v258 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v131 >= 2, v132, 1, (uint64_t)v109);
      int64_t v132 = v315;
      Swift::String v109 = v258;
    }
    unint64_t v315 = (unint64_t)v109;
    v109[2] = v132;
    uint64_t v133 = 2 * v130;
    v109[v133 + 4] = v314;
    v109[v133 + 5] = v127;
  }
  else
  {
    unint64_t v315 = (unint64_t)v109;
  }
  swift_setDeallocating(v112);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v134 = v298[0];
  uint64_t v135 = v299;
  JSONReadingOptions.init()();
  uint64_t v136 = v271;
  uint64_t v137 = v303;
  DataFrame.init(contentsOfJSONFile:columns:types:options:)(v313, v315, v134, v135);
  if (v137) {
    goto LABEL_63;
  }
  uint64_t v138 = v309;
  unint64_t v139 = v309;
  BOOL v140 = v136;
LABEL_65:
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v304 + 32))(v139, v140, v311);
  if (!*(void *)(a12 + 16))
  {
    uint64_t v218 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v218, 0, 0);
    *(void *)uint64_t v219 = 0xD00000000000003DLL;
    *(void *)(v219 + 8) = " less than end times." + 0x8000000000000000;
    *(_OWORD *)(v219 + 16) = 0;
    *(_OWORD *)(v219 + 32) = 0;
    *(unsigned char *)(v219 + 48) = 0;
    swift_willThrow();
    (*(void (**)(uint64_t *, uint64_t))(v307 + 8))(v305, v306);
LABEL_77:
    char v188 = v138;
    goto LABEL_78;
  }
  v313 = 0;
  unsigned int v191 = 1;
  v298[0] = _swiftEmptyArrayStorage;
  uint64_t v192 = (int *)v282;
  uint64_t v193 = v301;
  v299 = (uint64_t *)((char *)v301 + *(int *)(v282 + 20));
  unint64_t v315 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v194 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  Column.init<A>(name:contents:)(0x6C6562616CLL, 0xE500000000000000, v298, &type metadata for String, v315, v194);
  uint64_t v314 = (uint64_t *)((char *)v193 + v192[6]);
  __swift_storeEnumTagSinglePayload((uint64_t)v314, 1, 1, v294);
  unint64_t v303 = (unint64_t)v193 + v192[7];
  uint64_t v195 = v310;
  __swift_storeEnumTagSinglePayload(v303, 1, 1, v310);
  unint64_t v315 = (unint64_t)v193 + v192[8];
  __swift_storeEnumTagSinglePayload(v315, 1, 1, v195);
  *uint64_t v193 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v196 = v291;
  DataFrame.subscript.getter(v308, v312, &type metadata for String);
  uint64_t v197 = v294;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v290 + 40))(v299, v196, v294);
  uint64_t v198 = (uint64_t)v281;
  DataFrame.subscript.getter(v302, a7, &type metadata for String);
  __swift_storeEnumTagSinglePayload(v198, 0, 1, v197);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v198, (uint64_t)v314, &demangling cache variable for type metadata for Column<String>?);
  uint64_t v199 = 1;
  uint64_t v200 = (uint64_t)v280;
  if (a9)
  {
    DataFrame.subscript.getter(a8, a9, &type metadata for Double);
    uint64_t v199 = 0;
  }
  __swift_storeEnumTagSinglePayload(v200, v199, 1, v310);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v200, v303, &demangling cache variable for type metadata for Column<Double>?);
  uint64_t v201 = (uint64_t)v279;
  if (a11)
  {
    DataFrame.subscript.getter(a10, a11, &type metadata for Double);
    unsigned int v191 = 0;
  }
  __swift_storeEnumTagSinglePayload(v201, v191, 1, v310);
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v201, v315, &demangling cache variable for type metadata for Column<Double>?);
  int64_t v202 = v301;
  uint64_t v203 = v313;
  ML20MLActivityClassifierV10e143SourceO06gatherE15FromAnnotations12directoryURL18annotationFileName11labelColumn04fileP009startTimeP003endsP014featureColumns09timeStampP0AE0V0m35Foundation0K0V_S4SSgATSaySSGSStKF07D22E00P0VySaySdGGSSXEfU3_0I2ML0kL0V0eN0O7ColumnsVTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_11TabularData6ColumnVySaySdGGs5NeverOTg5036_s8CreateML20MLActivityClassifierV10e143SourceO06gatherE15FromAnnotations12directoryURL18annotationFileName11labelColumn04fileP009startTimeP003endsP014featureColumns09timeStampP0AE0V0m35Foundation0K0V_S4SSgATSaySSGSStKF07D22E00P0VySaySdGGSSXEfU3_0I2ML0kL0V0eN0O7ColumnsVTf1cn_n(a12, (uint64_t)v301);
  swift_bridgeObjectRelease(*v202);
  uint64_t *v202 = (uint64_t)ML20MLActivityClassifierV10e143SourceO06gatherE15FromAnnotations12directoryURL18annotationFileName11labelColumn04fileP009startTimeP003endsP014featureColumns09timeStampP0AE0V0m35Foundation0K0V_S4SSgATSaySSGSStKF07D22E00P0VySaySdGGSSXEfU3_0I2ML0kL0V0eN0O7ColumnsVTf1cn_n;
  v313 = v203;
  if (a9)
  {
    uint64_t v138 = v309;
    if (a11)
    {
      DataFrame.subscript.getter(a8, a9, &type metadata for Double);
      uint64_t v205 = v293;
      DataFrame.subscript.getter(a10, a11, &type metadata for Double);
      uint64_t v206 = v285;
      char v207 = v138;
      uint64_t v208 = v304;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v304 + 16))(v285, v207, v311);
      uint64_t v312 = &v262;
      unint64_t v209 = alloca(32);
      uint64_t v210 = alloca(32);
      v264 = v295;
      uint64_t v265 = v205;
      uint64_t v211 = v283;
      uint64_t v212 = v313;
      DataFrame.filter(_:)(partial apply for closure #6 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:));
      v313 = v212;
      (*(void (**)(uint64_t *, uint64_t))(v208 + 8))(v206, v311);
      uint64_t v213 = v208;
      uint64_t v214 = v287;
      DataFrame.init(_:)(v211);
      uint64_t v215 = *(void (**)(void, void))(v284 + 8);
      uint64_t v216 = v310;
      v215(v293, v310);
      v215(v295, v216);
      uint64_t v217 = v214;
      uint64_t v138 = v309;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v213 + 40))(v309, v217, v311);
    }
  }
  else
  {
    uint64_t v138 = v309;
  }
  uint64_t v220 = v278;
  DataFrame.rows.getter();
  BOOL v221 = specialized Collection.isEmpty.getter();
  (*(void (**)(uint64_t *, uint64_t))(v276 + 8))(v220, v277);
  if (v221)
  {
    uint64_t v222 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v222, 0, 0);
    *(void *)uint64_t v223 = 0xD000000000000035;
    *(void *)(v223 + 8) = "lder or add data." + 0x8000000000000000;
    *(_OWORD *)(v223 + 16) = 0;
    *(_OWORD *)(v223 + 32) = 0;
    *(unsigned char *)(v223 + 48) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t *, uint64_t))(v307 + 8))(v305, v306);
    outlined destroy of MLActivityClassifier.DataSource.Columns((uint64_t)v301);
    goto LABEL_77;
  }
  uint64_t v225 = v291;
  DataFrame.subscript.getter(v302, a7, &type metadata for String);
  v298[0] = 0;
  v298[1] = 0xE000000000000000;
  uint64_t v226 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v227 = v294;
  OptionalColumnProtocol.filled(with:)(v298, v294, v226);
  (*(void (**)(uint64_t *, uint64_t))(v290 + 8))(v225, v227);
  uint64_t v228 = specialized Set.init<A>(_:)();
  uint64_t v229 = 1 << *(unsigned char *)(v228 + 32);
  uint64_t v230 = ~(-1 << v229);
  if (v229 >= 64) {
    uint64_t v230 = -1;
  }
  uint64_t v314 = (uint64_t *)v228;
  unint64_t v231 = *(void *)(v228 + 56) & v230;
  uint64_t v310 = (unint64_t)(v229 + 63) >> 6;
  uint64_t v232 = 0;
  Swift::String v233 = v313;
  uint64_t v234 = v309;
  while (1)
  {
    if (v231)
    {
      v313 = v233;
      _BitScanForward64(&v235, v231);
      unint64_t v303 = (v231 - 1) & v231;
      unint64_t v315 = v232;
      unint64_t v236 = v235 | (v232 << 6);
      goto LABEL_96;
    }
    BOOL v237 = __OFADD__(1, v232);
    uint64_t v238 = v232 + 1;
    if (v237) {
      BUG();
    }
    if (v238 >= v310) {
      goto LABEL_104;
    }
    unint64_t v239 = v314[v238 + 7];
    if (!v239) {
      break;
    }
LABEL_95:
    _BitScanForward64(&v241, v239);
    v313 = v233;
    unint64_t v303 = v239 & (v239 - 1);
    unint64_t v315 = v238;
    unint64_t v236 = v241 + (v238 << 6);
LABEL_96:
    uint64_t v242 = v314[6];
    uint64_t v243 = 16 * v236;
    uint64_t v308 = *(uint64_t **)(v242 + v243);
    uint64_t v244 = v308;
    Swift::String v245 = *(uint64_t **)(v242 + v243 + 8);
    uint64_t v246 = v287;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v304 + 16))(v287, v234, v311);
    uint64_t v312 = &v262;
    char v247 = alloca(32);
    uint64_t v248 = alloca(32);
    v264 = v244;
    uint64_t v265 = v245;
    swift_bridgeObjectRetain(v245);
    uint64_t v249 = (uint64_t)v269;
    uint64_t v250 = v313;
    DataFrame.filter<A>(on:_:_:)(v302, a7, &type metadata for String, partial apply for closure #7 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:), &v262, &type metadata for String);
    v313 = v250;
    uint64_t v312 = *(uint64_t **)(v304 + 8);
    ((void (*)(uint64_t *, uint64_t))v312)(v246, v311);
    uint64_t v251 = (uint64_t)v270;
    URL.appendingPathComponent(_:)(v308, v245);
    swift_bridgeObjectRelease(v245);
    Swift::String v252 = v313;
    MLActivityClassifier.DataSource.gatherData(from:annotations:featureColumns:timeStampColumn:result:)(v251, v249, a12, a13, a14, v301);
    Swift::String v233 = v252;
    if (v252)
    {
      uint64_t v253 = *(void (**)(void, void))(v307 + 8);
      uint64_t v254 = v251;
      uint64_t v255 = v306;
      v253(v254, v306);
      (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v249, v288);
      swift_release(v314);
      v253(v305, v255);
      outlined destroy of MLActivityClassifier.DataSource.Columns((uint64_t)v301);
      return ((uint64_t (*)(uint64_t *, uint64_t))v312)(v309, v311);
    }
    (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v251, v306);
    (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v249, v288);
    uint64_t v234 = v309;
    uint64_t v232 = v315;
    unint64_t v231 = v303;
  }
  uint64_t v240 = v238 + 1;
  if (v238 + 1 >= v310) {
    goto LABEL_104;
  }
  unint64_t v239 = v314[v238 + 8];
  if (v239) {
    goto LABEL_94;
  }
  uint64_t v240 = v238 + 2;
  if (v238 + 2 >= v310) {
    goto LABEL_104;
  }
  unint64_t v239 = v314[v238 + 9];
  if (v239) {
    goto LABEL_94;
  }
  uint64_t v240 = v238 + 3;
  if (v238 + 3 >= v310) {
    goto LABEL_104;
  }
  unint64_t v239 = v314[v238 + 10];
  if (v239)
  {
LABEL_94:
    uint64_t v238 = v240;
    goto LABEL_95;
  }
  v238 += 3;
  while (1)
  {
    BOOL v237 = __OFADD__(1, v238++);
    if (v237) {
      BUG();
    }
    if (v238 >= v310) {
      break;
    }
    unint64_t v239 = v314[v238 + 7];
    if (v239) {
      goto LABEL_95;
    }
  }
LABEL_104:
  swift_release(v314);
  (*(void (**)(uint64_t *, uint64_t))(v307 + 8))(v305, v306);
  outlined init with take of MLActivityClassifier.DataSource.Columns((uint64_t)v301, v286);
  char v188 = v234;
LABEL_78:
  uint64_t v189 = v311;
  uint64_t v190 = v304;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v190 + 8))(v188, v189);
}

BOOL closure #6 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v53 = *(double *)&a3;
  uint64_t v48 = a2;
  double v54 = *(double *)&a1;
  uint64_t v51 = type metadata accessor for DataFrame.Row(0);
  uint64_t v55 = *(void *)(v51 - 8);
  int64_t v3 = *(void *)(v55 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v45 = v41;
  uint64_t v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  uint64_t v43 = v41;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v9 = *(void *)(v8 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  int64_t v11 = alloca(v10);
  int64_t v12 = alloca(v10);
  int64_t v49 = v41;
  int64_t v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  Swift::String v52 = v41;
  uint64_t v15 = alloca(v10);
  uint64_t v16 = alloca(v10);
  uint64_t v17 = DataFrame.Row.index.getter();
  Column.subscript.getter(v17, v8);
  char v18 = v57;
  uint64_t v58 = v9;
  uint64_t v19 = *(void (**)(void *, void, uint64_t))(v9 + 16);
  uint64_t v50 = v41;
  int64_t v46 = v19;
  v19(v41, *(void *)&v53, v8);
  uint64_t v20 = v55;
  int64_t v21 = v43;
  uint64_t v47 = *(void (**)(void *, void, uint64_t))(v55 + 16);
  v47(v43, *(void *)&v54, v51);
  if (v18)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v51;
    uint64_t v55 = *(void *)(v20 + 8);
    ((void (*)(void *, uint64_t))v55)(v22, v51);
    uint64_t v58 = *(void *)(v58 + 8);
    ((void (*)(void *, uint64_t))v58)(v50, v8);
    int64_t v24 = v46;
    v46(v52, v48, v8);
    uint64_t v25 = v45;
    v47(v45, *(void *)&v54, v23);
    v24(v49, *(void *)&v53, v8);
    uint64_t v26 = v23;
    uint64_t v27 = v25;
    int64_t v28 = v52;
LABEL_4:
    uint64_t v44 = v8;
    uint64_t v33 = v8;
    int64_t v34 = (void (*)(void *, uint64_t))v58;
    ((void (*)(void *, uint64_t))v58)(v49, v33);
    ((void (*)(void *, uint64_t))v55)(v27, v26);
    v34(v28, v44);
    return 0;
  }
  uint64_t v29 = DataFrame.Row.index.getter();
  char v30 = v50;
  Column.subscript.getter(v29, v8);
  uint64_t v55 = *(void *)(v20 + 8);
  ((void (*)(void *, uint64_t))v55)(v21, v51);
  uint64_t v58 = *(void *)(v58 + 8);
  ((void (*)(void *, uint64_t))v58)(v30, v8);
  LOBYTE(v50) = v57;
  int64_t v31 = v46;
  v46(v52, v48, v8);
  uint64_t v27 = v45;
  uint64_t v32 = v51;
  v47(v45, *(void *)&v54, v51);
  v31(v49, *(void *)&v53, v8);
  uint64_t v26 = v32;
  int64_t v28 = v52;
  if ((_BYTE)v50) {
    goto LABEL_4;
  }
  uint64_t v36 = v27;
  uint64_t v37 = DataFrame.Row.index.getter();
  Column.subscript.getter(v37, v8);
  if (v57) {
    BUG();
  }
  double v53 = v56;
  uint64_t v38 = DataFrame.Row.index.getter();
  int64_t v39 = v49;
  Column.subscript.getter(v38, v8);
  if (v42) {
    BUG();
  }
  double v54 = *(double *)&v41[1];
  uint64_t v40 = (void (*)(void *, uint64_t))v58;
  ((void (*)(void *, uint64_t))v58)(v39, v8);
  ((void (*)(void *, uint64_t))v55)(v36, v51);
  v40(v52, v8);
  return v54 > v53;
}

char closure #7 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a1;
  if (v6 != a2) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, a2, a3, 0);
  }
  char result = 1;
  if (v5 != a3) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, a2, a3, 0);
  }
  return result;
}

uint64_t MLActivityClassifier.DataSource.gatherData(from:annotations:featureColumns:timeStampColumn:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v259 = v6;
  uint64_t v266 = a6;
  uint64_t v272 = a4;
  uint64_t v243 = a2;
  uint64_t v261 = a1;
  uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnSlice<Double>);
  uint64_t v226 = *(void *)(v225 - 8);
  int64_t v9 = *(void *)(v226 + 64);
  int64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v227 = &v225;
  uint64_t v228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<ColumnSlice<Double>>);
  int64_t v12 = *(void *)(*(void *)(v228 - 8) + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v229 = &v225;
  uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v230 = *(void *)(v248 - 8);
  int64_t v15 = *(void *)(v230 + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  unint64_t v231 = &v225;
  int64_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>?)
                              - 8)
                  + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v250 = &v225;
  int64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v232 = &v225;
  uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultIndices<DataFrame.Rows>);
  int64_t v23 = *(void *)(*(void *)(v257 - 8) + 64);
  int64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v244 = &v225;
  uint64_t v249 = type metadata accessor for DataFrame.Rows(0);
  uint64_t v254 = *(void *)(v249 - 8);
  int64_t v26 = *(void *)(v254 + 64);
  uint64_t v27 = alloca(v26);
  int64_t v28 = alloca(v26);
  char v247 = &v225;
  uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DefaultIndices<DataFrame.Rows>>);
  int64_t v29 = *(void *)(*(void *)(v245 - 8) + 64);
  char v30 = alloca(v29);
  int64_t v31 = alloca(v29);
  uint64_t v246 = &v225;
  uint64_t v32 = alloca(v29);
  uint64_t v33 = alloca(v29);
  uint64_t v265 = &v225;
  uint64_t v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<Double>>);
  int64_t v34 = *(void *)(*(void *)(v240 - 8) + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  unint64_t v239 = &v225;
  uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v275 = *(void *)(v278 - 8);
  int64_t v37 = *(void *)(v275 + 64);
  uint64_t v38 = alloca(v37);
  int64_t v39 = alloca(v37);
  uint64_t v40 = alloca(v37);
  uint64_t v41 = alloca(v37);
  Swift::String v252 = &v225;
  char v42 = alloca(v37);
  uint64_t v43 = alloca(v37);
  unint64_t v241 = &v225;
  uint64_t v44 = alloca(v37);
  int64_t v45 = alloca(v37);
  uint64_t v251 = &v225;
  int64_t v46 = alloca(v37);
  uint64_t v47 = alloca(v37);
  uint64_t v255 = &v225;
  uint64_t v48 = alloca(v37);
  int64_t v49 = alloca(v37);
  uint64_t v283 = &v225;
  uint64_t v233 = type metadata accessor for Order(0);
  uint64_t v234 = *(void *)(v233 - 8);
  int64_t v50 = *(void *)(v234 + 64);
  uint64_t v51 = alloca(v50);
  Swift::String v52 = alloca(v50);
  unint64_t v235 = &v225;
  uint64_t v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  unint64_t v270 = *(void *)(v268 - 8);
  int64_t v53 = *(void *)(v270 + 64);
  double v54 = alloca(v53);
  uint64_t v55 = alloca(v53);
  uint64_t v276 = &v225;
  uint64_t v279 = type metadata accessor for CSVType(0);
  uint64_t v253 = *(void *)(v279 - 8);
  int64_t v56 = *(void *)(v253 + 64);
  char v57 = alloca(v56);
  uint64_t v58 = alloca(v56);
  BOOL v237 = &v225;
  int64_t v59 = *(void *)(*(void *)(type metadata accessor for CSVReadingOptions(0) - 8) + 64);
  int64_t v60 = alloca(v59);
  uint64_t v61 = alloca(v59);
  unint64_t v236 = &v225;
  uint64_t v274 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
  double v267 = *(double *)(v274 - 8);
  int64_t v62 = *(void *)(*(void *)&v267 + 64);
  int64_t v63 = alloca(v62);
  uint64_t v64 = alloca(v62);
  double v282 = COERCE_DOUBLE(&v225);
  int64_t v65 = *(void *)(*(void *)(type metadata accessor for JSONReadingOptions(0) - 8) + 64);
  int64_t v66 = alloca(v65);
  uint64_t v67 = alloca(v65);
  v256._uint64_t countAndFlagsBits = (uint64_t)&v225;
  *(void *)&long long v277 = type metadata accessor for URL(0);
  uint64_t v68 = *(void *)(v277 - 8);
  int64_t v69 = *(void *)(v68 + 64);
  int64_t v70 = alloca(v69);
  uint64_t v71 = alloca(v69);
  v260 = &v225;
  uint64_t v72 = alloca(v69);
  uint64_t v73 = alloca(v69);
  uint64_t v269 = &v225;
  uint64_t v258 = type metadata accessor for DataFrame(0);
  v256._uint64_t object = *(void **)(v258 - 8);
  int64_t v74 = *((void *)v256._object + 8);
  uint64_t v75 = alloca(v74);
  uint64_t v76 = alloca(v74);
  uint64_t v238 = &v225;
  uint64_t v77 = alloca(v74);
  uint64_t v78 = alloca(v74);
  uint64_t v262 = &v225;
  uint64_t v79 = alloca(v74);
  uint64_t v80 = alloca(v74);
  v271 = &v225;
  uint64_t v264 = a5;
  swift_bridgeObjectRetain_n(a5, 2);
  swift_bridgeObjectRetain(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a3);
  Swift::Int v82 = (void *)a3;
  if (!isUniquelyReferenced_nonNull_native) {
    Swift::Int v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a3 + 16) + 1, 1, a3);
  }
  v263 = (void *)a3;
  unint64_t v83 = v82[2];
  v280 = v82;
  unint64_t v84 = v82[3];
  uint64_t v242 = &v225;
  if (v84 >> 1 <= v83) {
    v280 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v84 >= 2, v83 + 1, 1, (uint64_t)v280);
  }
  uint64_t v85 = v280;
  v280[2] = v83 + 1;
  uint64_t v86 = 2 * v83;
  v85[v86 + 4] = v272;
  uint64_t v87 = v264;
  v85[v86 + 5] = v264;
  swift_bridgeObjectRelease(v87);
  uint64_t v88 = URL.pathExtension.getter();
  uint64_t v90 = v89;
  if (v88 == 1852797802 && v89 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    uint64_t v91 = v262;
  }
  else
  {
    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, 1852797802, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v90);
    uint64_t v91 = v262;
    if ((v92 & 1) == 0)
    {
      (*(void (**)(uint64_t *, uint64_t, void))(v68 + 16))(v260, v261, v277);
      uint64_t v107 = v264;
      swift_bridgeObjectRetain_n(v264, 2);
      uint64_t v108 = v263;
      swift_bridgeObjectRetain(v263);
      if (!swift_isUniquelyReferenced_nonNull_native(v108)) {
        uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108[2] + 1, 1, (uint64_t)v108);
      }
      unint64_t v109 = v108[2];
      uint64_t v110 = v272;
      if (v108[3] >> 1 <= v109)
      {
        uint64_t v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v108[3] >= 2uLL, v109 + 1, 1, (uint64_t)v108);
        uint64_t v110 = v272;
        uint64_t v108 = v223;
      }
      v108[2] = v109 + 1;
      uint64_t v111 = 2 * v109;
      v108[v111 + 4] = v110;
      v263 = v108;
      v108[v111 + 5] = v107;
      swift_bridgeObjectRelease(v107);
      uint64_t v112 = v280;
      int64_t v113 = v280[2];
      if (v113)
      {
        *(void *)&v273[0] = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113, 0);
        uint64_t v114 = *(void *)&v273[0];
        LODWORD(v282) = enum case for CSVType.double(_:);
        uint64_t v274 = *(void *)(v253 + 104);
        uint64_t v115 = v112 + 5;
        unint64_t v116 = v276;
        do
        {
          double v284 = *(double *)&v115;
          *(void *)&long long v277 = v113;
          uint64_t v117 = *v115;
          int64_t v118 = (char *)v116 + *(int *)(v268 + 48);
          *unint64_t v116 = *(v115 - 1);
          v116[1] = v117;
          ((void (*)(char *, void, uint64_t))v274)(v118, LODWORD(v282), v279);
          *(void *)&v273[0] = v114;
          unint64_t v119 = *(void *)(v114 + 16);
          double v267 = *(double *)(v114 + 24);
          unint64_t v120 = *(void *)&v267 >> 1;
          swift_bridgeObjectRetain(v117);
          if (v120 <= v119)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)&v267 >= 2uLL, v119 + 1, 1);
            uint64_t v114 = *(void *)&v273[0];
          }
          *(void *)(v114 + 16) = v119 + 1;
          unint64_t v116 = v276;
          outlined init with take of DataFrame?((uint64_t)v276, v114+ ((*(unsigned __int8 *)(v270 + 80) + 32) & ~*(unsigned __int8 *)(v270 + 80))+ *(void *)(v270 + 72) * v119, &demangling cache variable for type metadata for (String, CSVType));
          int64_t v113 = v277 - 1;
          uint64_t v115 = (uint64_t *)(*(void *)&v284 + 16);
        }
        while ((void)v277 != 1);
        swift_bridgeObjectRelease(v280);
        unsigned int v121 = LODWORD(v282);
        char v122 = (void *)v114;
      }
      else
      {
        swift_bridgeObjectRelease(v280);
        unsigned int v121 = enum case for CSVType.double(_:);
        char v122 = _swiftEmptyArrayStorage;
      }
      *(void *)&long long v277 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v122);
      double v284 = COERCE_DOUBLE(default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)());
      unint64_t v123 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      unint64_t v124 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      int64_t v125 = v237;
      (*(void (**)(uint64_t *, void, uint64_t))(v253 + 104))(v237, v121, v279);
      uint64_t v126 = v236;
      CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(1, *(void *)&v284, v123, v124, v125, 1, 1, 0, 44, 0xE100000000000000, 92, 0xE100000000000000);
      uint64_t v91 = v238;
      uint64_t v105 = v259;
      DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)(v260, v263, 0, 0, 1, v277, v126);
      uint64_t result = v224;
      goto LABEL_29;
    }
  }
  (*(void (**)(uint64_t *, uint64_t, void))(v68 + 16))(v269, v261, v277);
  uint64_t v93 = v280;
  int64_t v94 = v280[2];
  if (v94)
  {
    *(void *)&v273[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v280);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v94, 0);
    uint64_t v95 = *(void **)&v273[0];
    LODWORD(v279) = enum case for JSONType.double(_:);
    uint64_t v276 = (uint64_t *)type metadata accessor for JSONType(0);
    uint64_t v268 = *(void *)(*(v276 - 1) + 104);
    uint64_t v96 = v93 + 5;
    double v97 = v282;
    do
    {
      double v284 = *(double *)&v96;
      *(void *)&long long v277 = v94;
      uint64_t v98 = *v96;
      uint64_t v99 = (char *)(*(void *)&v97 + *(int *)(v274 + 48));
      **(void **)&double v97 = *(v96 - 1);
      *(void *)(*(void *)&v97 + 8) = v98;
      ((void (*)(char *, void, uint64_t *))v268)(v99, v279, v276);
      *(void *)&v273[0] = v95;
      unint64_t v100 = v95[2];
      unint64_t v270 = v95[3];
      unint64_t v101 = v270 >> 1;
      swift_bridgeObjectRetain(v98);
      if (v101 <= v100)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v270 >= 2, v100 + 1, 1);
        uint64_t v95 = *(void **)&v273[0];
      }
      v95[2] = v100 + 1;
      double v97 = v282;
      outlined init with take of DataFrame?(*(uint64_t *)&v282, (uint64_t)v95+ ((*(unsigned __int8 *)(*(void *)&v267 + 80) + 32) & ~*(unsigned __int8 *)(*(void *)&v267 + 80))+ *(void *)(*(void *)&v267 + 72) * v100, &demangling cache variable for type metadata for (String, JSONType));
      int64_t v94 = v277 - 1;
      uint64_t v96 = (uint64_t *)(*(void *)&v284 + 16);
    }
    while ((void)v277 != 1);
    uint64_t v93 = v280;
    swift_bridgeObjectRelease(v280);
    uint64_t v91 = v262;
    uint64_t v102 = v95;
  }
  else
  {
    uint64_t v102 = _swiftEmptyArrayStorage;
  }
  uint64_t v103 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v102);
  uint64_t countAndFlagsBits = v256._countAndFlagsBits;
  JSONReadingOptions.init()();
  uint64_t v105 = v259;
  uint64_t result = DataFrame.init(contentsOfJSONFile:columns:types:options:)(v269, v93, v103, countAndFlagsBits);
LABEL_29:
  if (v105) {
    return result;
  }
  v260 = 0;
  (*((void (**)(uint64_t *, uint64_t *, uint64_t))v256._object + 4))(v271, v91, v258);
  uint64_t v127 = v235;
  uint64_t v128 = v233;
  uint64_t v129 = v234;
  (*(void (**)(uint64_t *, void, uint64_t))(v234 + 104))(v235, enum case for Order.ascending(_:), v233);
  DataFrame.sort<A>(on:_:order:)(v272, v264, &type metadata for Double, v127, &type metadata for Double, &protocol witness table for Double);
  (*(void (**)(uint64_t *, uint64_t))(v129 + 8))(v127, v128);
  unint64_t v130 = v271;
  if (DataFrameProtocol.isEmpty.getter(v258, &protocol witness table for DataFrame))
  {
    uint64_t v131 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v131, 0, 0);
    *(void *)uint64_t v132 = 0xD000000000000021;
    *(void *)(v132 + 8) = "tent with the sensor data in '" + 0x8000000000000000;
    *(_OWORD *)(v132 + 16) = 0;
    *(_OWORD *)(v132 + 32) = 0;
    *(unsigned char *)(v132 + 48) = 0;
    swift_willThrow();
    return (*((uint64_t (**)(uint64_t *, uint64_t))v256._object + 1))(v130, v258);
  }
  uint64_t v269 = v265;
  uint64_t v133 = v283;
  DataFrame.subscript.getter(v272, v264, &type metadata for Double);
  uint64_t v134 = v133;
  uint64_t v135 = v278;
  v280 = *(void **)(v275 + 16);
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v280)(v255, v134, v278);
  uint64_t v136 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v137 = (uint64_t)v239;
  dispatch thunk of Sequence.makeIterator()(v135, v136);
  *(void *)&double v284 = v137 + *(int *)(v240 + 36);
  *(void *)&long long v277 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
  while (1)
  {
    uint64_t v138 = **(void **)&v284;
    dispatch thunk of Collection.endIndex.getter(v135, v277);
    if (v138 == *(void *)&v273[0]) {
      break;
    }
    double v139 = v284;
    BOOL v140 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v273, *(void *)&v284, v135, v277);
    LOBYTE(v282) = *(unsigned char *)(v141 + 8);
    v140(v273, 0);
    uint64_t v142 = v255;
    ((void (*)(uint64_t *, uint64_t, uint64_t))v280)(v255, v137, v135);
    dispatch thunk of Collection.formIndex(after:)(*(void *)&v139, v135, v277);
    uint64_t v274 = *(void *)(v275 + 8);
    ((void (*)(uint64_t *, uint64_t))v274)(v142, v135);
    if (LOBYTE(v282) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v137, &demangling cache variable for type metadata for IndexingIterator<Column<Double>>);
      *(void *)&v273[0] = 0;
      *((void *)&v273[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease(*((void *)&v273[0] + 1));
      *(void *)&v273[0] = 0xD000000000000021;
      *((void *)&v273[0] + 1) = " at least one feature column." + 0x8000000000000000;
      v143._uint64_t countAndFlagsBits = URL.absoluteString.getter();
      uint64_t object = v143._object;
      String.append(_:)(v143);
      swift_bridgeObjectRelease(object);
      v145._uint64_t object = (void *)0xE200000000000000;
      v145._uint64_t countAndFlagsBits = 11815;
      String.append(_:)(v145);
      long long v277 = v273[0];
      v145._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v145._object, 0, 0);
      *(_OWORD *)uint64_t v146 = v277;
      *(_OWORD *)(v146 + 16) = 0;
      *(_OWORD *)(v146 + 32) = 0;
      *(unsigned char *)(v146 + 48) = 0;
      swift_willThrow();
      ((void (*)(uint64_t *, uint64_t))v274)(v283, v135);
      goto LABEL_36;
    }
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v137, &demangling cache variable for type metadata for IndexingIterator<Column<Double>>);
  uint64_t v147 = v247;
  DataFrame.Slice.rows.getter();
  uint64_t v148 = (uint64_t)v244;
  uint64_t v149 = v249;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v254 + 16))(v244, v147, v249);
  *(void *)&double v284 = *(int *)(v257 + 36);
  uint64_t v272 = lazy protocol witness table accessor for type DataFrame.Rows and conformance DataFrame.Rows();
  dispatch thunk of Collection.startIndex.getter(v149, v272);
  dispatch thunk of Collection.endIndex.getter(v149, v272);
  (*(void (**)(uint64_t *, uint64_t))(v254 + 8))(v147, v149);
  uint64_t v150 = (uint64_t)v246;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v148, (uint64_t)v246, &demangling cache variable for type metadata for DefaultIndices<DataFrame.Rows>);
  uint64_t v151 = *(void *)(v148 + *(void *)&v284);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v148, &demangling cache variable for type metadata for DefaultIndices<DataFrame.Rows>);
  uint64_t v152 = v245;
  *(void *)(v150 + *(int *)(v245 + 36)) = v151;
  uint64_t v153 = v150;
  uint64_t v154 = (uint64_t)v269;
  outlined init with take of DataFrame?(v153, (uint64_t)v269, &demangling cache variable for type metadata for IndexingIterator<DefaultIndices<DataFrame.Rows>>);
  uint64_t v155 = *(int *)(v152 + 36);
  uint64_t v156 = *(void *)(v154 + v155);
  uint64_t v264 = *(int *)(v257 + 40);
  uint64_t v276 = (uint64_t *)v156;
  if (v156 == *(void *)(v154 + v264))
  {
LABEL_40:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v154, &demangling cache variable for type metadata for IndexingIterator<DefaultIndices<DataFrame.Rows>>);
    (*(void (**)(uint64_t *, uint64_t))(v275 + 8))(v283, v278);
    return (*((uint64_t (**)(uint64_t *, uint64_t))v256._object + 1))(v271, v258);
  }
  uint64_t v157 = (void *)*v266;
  if (!swift_isUniquelyReferenced_nonNull_native(*v266)) {
    uint64_t v157 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v157);
  }
  uint64_t v265 = (uint64_t *)((char *)v265 + v155);
  uint64_t v158 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  uint64_t v262 = (void *)((char *)v266 + *(int *)(v158 + 20));
  v263 = (void *)v158;
  uint64_t v259 = (uint64_t)v266 + *(int *)(v158 + 28);
  *uint64_t v266 = v157;
  uint64_t v159 = v265;
  uint64_t v160 = (uint64_t)v276;
  while (1)
  {
    dispatch thunk of Collection.formIndex(after:)(v159, v249, v272);
    uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
    Column.subscript.getter(v160, v161);
    unint64_t v162 = *((void *)&v273[0] + 1);
    unsigned long long v163 = v273[0];
    v256._uint64_t countAndFlagsBits = v163 >> 64;
    uint64_t v268 = v163;
    if (!*((void *)&v273[0] + 1)) {
      unint64_t v162 = 0xE000000000000000;
    }
    unint64_t v270 = v162;
    uint64_t v164 = (uint64_t)v232;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v259, (uint64_t)v232, &demangling cache variable for type metadata for Column<Double>?);
    uint64_t v165 = v278;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v164, 1, v278);
    uint64_t v276 = (uint64_t *)v160;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v164, &demangling cache variable for type metadata for Column<Double>?);
LABEL_50:
      uint64_t v170 = Column.startIndex.getter(v165);
      uint64_t v171 = v278;
      uint64_t v279 = v170;
      goto LABEL_63;
    }
    uint64_t v167 = v251;
    uint64_t v168 = v164;
    uint64_t v169 = v275;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v275 + 32))(v251, v168, v165);
    Column.subscript.getter(v160, v165);
    if (BYTE8(v273[0]))
    {
      (*(void (**)(uint64_t *, uint64_t))(v169 + 8))(v167, v165);
      goto LABEL_50;
    }
    double v282 = *(double *)v273;
    uint64_t v172 = v277;
    dispatch thunk of Collection.startIndex.getter(v165, v277);
    dispatch thunk of Collection.endIndex.getter(v165, v172);
    char v173 = 1;
    if (*(void *)&v281 == *(void *)&v273[0])
    {
      uint64_t v279 = 0;
    }
    else
    {
      uint64_t v174 = v278;
      uint64_t v175 = v277;
      while (1)
      {
        int64_t v176 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v273, &v281, v174, v175);
        double v284 = *(double *)v177;
        char v178 = *(unsigned char *)(v177 + 8);
        v176(v273, 0);
        if (v178) {
          BUG();
        }
        if (v284 >= v282) {
          break;
        }
        unint64_t v179 = v283;
        uint64_t v174 = v278;
        uint64_t v175 = v277;
        dispatch thunk of Collection.formIndex(after:)(&v281, v278, v277);
        dispatch thunk of Collection.endIndex.getter(v174, v175);
        if (*(void *)&v281 == *(void *)&v273[0])
        {
          uint64_t v279 = 0;
          unint64_t v180 = v179;
          char v173 = 1;
          goto LABEL_60;
        }
      }
      uint64_t v279 = *(void *)&v281;
      char v173 = 0;
    }
    unint64_t v180 = v283;
LABEL_60:
    int64_t v181 = v241;
    uint64_t v182 = v278;
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v280)(v241, v180, v278);
    BOOL v183 = v173 == 0;
    uint64_t v184 = v251;
    if (!v183) {
      uint64_t v279 = Column.endIndex.getter(v182);
    }
    uint64_t v185 = *(void (**)(uint64_t *, uint64_t))(v275 + 8);
    v185(v181, v182);
    v185(v184, v182);
    uint64_t v171 = v182;
LABEL_63:
    uint64_t v186 = (uint64_t)v250;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v266 + *((int *)v263 + 8), (uint64_t)v250, &demangling cache variable for type metadata for Column<Double>?);
    if (__swift_getEnumTagSinglePayload(v186, 1, v171) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v186, &demangling cache variable for type metadata for Column<Double>?);
      goto LABEL_67;
    }
    uint64_t v187 = v252;
    uint64_t v188 = v186;
    uint64_t v189 = v275;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v275 + 32))(v252, v188, v171);
    Column.subscript.getter(v276, v171);
    if (BYTE8(v273[0]))
    {
      (*(void (**)(uint64_t *, uint64_t))(v189 + 8))(v187, v171);
LABEL_67:
      uint64_t v190 = Column.endIndex.getter(v171);
      uint64_t v191 = v190 - 1;
      if (__OFSUB__(v190, 1)) {
        BUG();
      }
      goto LABEL_78;
    }
    double v267 = *(double *)v273;
    dispatch thunk of Collection.endIndex.getter(v171, v277);
    while (1)
    {
      uint64_t v192 = v278;
      uint64_t v193 = v277;
      dispatch thunk of Collection.startIndex.getter(v278, v277);
      double v282 = v281;
      uint64_t v274 = *(void *)&v273[0];
      if (*(void *)&v281 == *(void *)&v273[0]) {
        break;
      }
      uint64_t v194 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, (uint64_t)&protocol conformance descriptor for Column<A>);
      dispatch thunk of BidirectionalCollection.formIndex(before:)(&v281, v192, v194);
      uint64_t v195 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v273, &v281, v192, v193);
      double v284 = *(double *)v196;
      char v197 = *(unsigned char *)(v196 + 8);
      v195(v273, 0);
      if (v197) {
        BUG();
      }
      if (v267 >= v284)
      {
        uint64_t v191 = *(void *)&v281;
        goto LABEL_75;
      }
    }
    uint64_t v191 = 0;
LABEL_75:
    uint64_t v198 = v242;
    uint64_t v199 = v278;
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v280)(v242, v283, v278);
    if (*(void *)&v282 == v274) {
      uint64_t v191 = Column.startIndex.getter(v199);
    }
    uint64_t v200 = *(void (**)(uint64_t *, uint64_t))(v275 + 8);
    v200(v198, v199);
    v200(v252, v199);
LABEL_78:
    if (v191 < v279) {
      break;
    }
    uint64_t v268 = v191;
    swift_bridgeObjectRelease(v270);
    uint64_t v201 = (void *)*v266;
    unint64_t v270 = *(void *)(*v266 + 16);
    if (v270)
    {
      if (!swift_isUniquelyReferenced_nonNull_native(v201)) {
        uint64_t v201 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v201);
      }
      *uint64_t v266 = v201;
      double v202 = 0.0;
      do
      {
        if (*(void *)&v202 >= v201[2]) {
          BUG();
        }
        uint64_t v203 = v230;
        uint64_t v274 = (*(unsigned __int8 *)(v230 + 80) + 32) & ~*(unsigned __int8 *)(v230 + 80);
        uint64_t v204 = *(void *)(v230 + 72);
        double v284 = v202;
        *(void *)&double v267 = *(void *)&v202 * v204;
        uint64_t v205 = v231;
        uint64_t v206 = (char *)v201 + v274 + *(void *)&v202 * v204;
        uint64_t v207 = v248;
        (*(void (**)(uint64_t *, char *, uint64_t))(v230 + 16))(v231, v206, v248);
        double v282 = COERCE_DOUBLE(Column.name.getter(v207));
        uint64_t v209 = v208;
        (*(void (**)(uint64_t *, uint64_t))(v203 + 8))(v205, v207);
        uint64_t v210 = v255;
        DataFrame.subscript.getter(*(void *)&v282, v209, &type metadata for Double);
        uint64_t v211 = v278;
        swift_bridgeObjectRelease(v209);
        *(void *)&v273[0] = v268;
        dispatch thunk of Collection.index(after:)(v273, v211, v277);
        uint64_t v212 = v227;
        Column.subscript.getter(v279, *(void *)&v281, v211);
        (*(void (**)(uint64_t *, uint64_t))(v275 + 8))(v210, v211);
        *(void *)&v273[0] = 0;
        uint64_t v213 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type ColumnSlice<Double> and conformance ColumnSlice<A>, &demangling cache variable for type metadata for ColumnSlice<Double>, (uint64_t)&protocol conformance descriptor for ColumnSlice<A>);
        uint64_t v214 = v225;
        OptionalColumnProtocol.filled(with:)(v273, v225, v213);
        (*(void (**)(uint64_t *, uint64_t))(v226 + 8))(v212, v214);
        uint64_t v215 = lazy protocol witness table accessor for type [[Double]] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<ColumnSlice<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<ColumnSlice<Double>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
        *(void *)&v273[0] = dispatch thunk of Sequence._copyToContiguousArray()(v228, v215);
        uint64_t v201 = (void *)*v266;
        if (!swift_isUniquelyReferenced_nonNull_native(*v266)) {
          uint64_t v201 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v201);
        }
        if (*(void *)&v284 >= v201[2]) {
          BUG();
        }
        *(void *)&double v202 = *(void *)&v284 + 1;
        Column.subscript.setter(v273, v276, v248);
        *uint64_t v266 = v201;
      }
      while (v270 != *(void *)&v202);
    }
    uint64_t v159 = v265;
    uint64_t v160 = *v265;
    uint64_t v154 = (uint64_t)v269;
    if (*v265 == *(uint64_t *)((char *)v269 + v264)) {
      goto LABEL_40;
    }
  }
  uint64_t v216 = v268;
  if (!v256._countAndFlagsBits) {
    uint64_t v216 = 0;
  }
  *(void *)&v273[0] = 0;
  *((void *)&v273[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  v217._uint64_t countAndFlagsBits = 0xD000000000000025;
  v217._uint64_t object = "e is missing in '" + 0x8000000000000000;
  String.append(_:)(v217);
  v217._uint64_t countAndFlagsBits = v216;
  unint64_t v218 = v270;
  v217._uint64_t object = (void *)v270;
  String.append(_:)(v217);
  swift_bridgeObjectRelease(v218);
  v217._uint64_t object = "d time for activity '" + 0x8000000000000000;
  v217._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v217);
  uint64_t v219 = URL.absoluteString.getter();
  BOOL v221 = v220;
  v217._uint64_t countAndFlagsBits = v219;
  v217._uint64_t object = v220;
  String.append(_:)(v217);
  swift_bridgeObjectRelease(v221);
  v217._uint64_t object = (void *)0xE200000000000000;
  v217._uint64_t countAndFlagsBits = 11815;
  String.append(_:)(v217);
  long long v277 = v273[0];
  v217._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v217._object, 0, 0);
  *(_OWORD *)uint64_t v222 = v277;
  *(_OWORD *)(v222 + 16) = 0;
  *(_OWORD *)(v222 + 32) = 0;
  *(unsigned char *)(v222 + 48) = 0;
  swift_willThrow();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v269, &demangling cache variable for type metadata for IndexingIterator<DefaultIndices<DataFrame.Rows>>);
  (*(void (**)(uint64_t *, uint64_t))(v275 + 8))(v283, v278);
LABEL_36:
  unint64_t v130 = v271;
  return (*((uint64_t (**)(uint64_t *, uint64_t))v256._object + 1))(v130, v258);
}

uint64_t outlined init with copy of MLActivityClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLActivityClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of MLActivityClassifier.DataSource.Columns(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLActivityClassifier.DataSource.Columns(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLActivityClassifier.DataSource.Columns(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

char partial apply for closure #7 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(uint64_t *a1)
{
  return closure #7 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL partial apply for closure #6 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(uint64_t a1)
{
  return closure #6 in MLActivityClassifier.DataSource.gatherDataFromAnnotations(directoryURL:annotationFileName:labelColumn:fileColumn:startTimeColumn:endTimeColumn:featureColumns:timeStampColumn:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type DataFrame.Rows and conformance DataFrame.Rows()
{
  uint64_t result = lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows;
  if (!lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows)
  {
    uint64_t v1 = type metadata accessor for DataFrame.Rows(255);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DataFrame.Rows, v1);
    lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [[Double]] and conformance [A](uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t static MLHandActionClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t static MLHandActionClassifier.__Defaults.maximumIterations.getter()
{
  return 80;
}

uint64_t static MLHandActionClassifier.__Defaults.predictionWindowSize.getter()
{
  return 30;
}

double static MLHandActionClassifier.__Defaults.targetFrameRate.getter()
{
  return 30.0;
}

uint64_t static MLHandActionClassifier.__Defaults.sessionIdColumnName.getter()
{
  return 0x5F6E6F6973736573;
}

uint64_t static MLHandActionClassifier.__Defaults.featureColumnName.getter()
{
  return 0x746E696F7079656BLL;
}

uint64_t static MLHandActionClassifier.__Defaults.labelColumnName.getter()
{
  return 0x6C6562616CLL;
}

uint64_t static MLHandActionClassifier.__Defaults.videoColumnName.getter()
{
  return 0x7461506F65646976;
}

uint64_t static MLHandActionClassifier.__Defaults.startTimeColumnName.getter()
{
  return 0x7472617473;
}

uint64_t static MLHandActionClassifier.__Defaults.endTimeColumnName.getter()
{
  return 6581861;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.__Defaults()
{
  return &type metadata for MLHandActionClassifier.__Defaults;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50113_s8CreateML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v10 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v1 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (v1)
  {
    int64_t v2 = 0;
    if (v1 > 0) {
      int64_t v2 = v1;
    }
    uint64_t v12 = v1;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v1;
    if (v1 < 0) {
      BUG();
    }
    uint64_t v4 = 0;
    do
    {
      if (v3 == v4) {
        BUG();
      }
      if ((a1 & 0xC000000000000003) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      id v11 = [v5 integerValue];

      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = v7 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v7)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v7 + 1, 1);
        unint64_t v8 = v7 + 1;
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v8;
      _swiftEmptyArrayStorage[v7 + 4] = v11;
      uint64_t v3 = v12;
    }
    while (v12 != v4);
  }
  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SSs5NeverOTg5148_s8CreateML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    BOOL v3 = 0;
    uint64_t v4 = *(void *)(type metadata accessor for URL(0) - 8);
    uint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 32) & ~*(unsigned __int8 *)(v4 + 80)) + a1;
    uint64_t v13 = *(void *)(v4 + 72);
    do
    {
      int64_t v12 = v1;
      uint64_t v6 = URL.path.getter(v3);
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      int64_t v9 = v8 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v8)
      {
        BOOL v3 = _swiftEmptyArrayStorage[3] >= 2uLL;
        uint64_t v14 = v6;
        uint64_t v15 = v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3, v9, 1);
        uint64_t v7 = v15;
        uint64_t v6 = v14;
      }
      _swiftEmptyArrayStorage[2] = v9;
      uint64_t v10 = 2 * v8;
      _swiftEmptyArrayStorage[v10 + 4] = v6;
      _swiftEmptyArrayStorage[v10 + 5] = v7;
      v5 += v13;
      int64_t v1 = v12 - 1;
    }
    while (v12 != 1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t specialized MLDataColumn.dropMissing()(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    v17[0] = a1;
    swift_errorRetain(a1);
    outlined copy of Result<_DataTable, Error>(a1, 1);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = _getErrorEmbeddedNSError<A>(_:)(v17, v6, &protocol self-conformance witness table for Error);
    if (v7)
    {
      uint64_t v8 = v7;
      outlined consume of Result<_DataTable, Error>(a1, 1);
    }
    else
    {
      uint64_t v8 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
      *uint64_t v16 = v17[0];
    }
    uint64_t result = outlined consume of Result<_DataTable, Error>(a1, 1);
    char v10 = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 16);
    outlined copy of Result<_DataTable, Error>(a1, 0);
    uint64_t v5 = specialized handling<A, B>(_:_:)(v4);
    uint64_t v9 = v5;
    if (!v5) {
      BUG();
    }
    char v10 = 0;
    uint64_t v11 = type metadata accessor for CMLColumn();
    uint64_t v12 = swift_allocObject(v11, 24, 7);
    *(void *)(v12 + 16) = v9;
    uint64_t v13 = v12;
    uint64_t v14 = type metadata accessor for _UntypedColumn();
    uint64_t v8 = swift_allocObject(v14, 24, 7);
    *(void *)(v8 + 16) = v13;
    uint64_t result = outlined consume of Result<_DataTable, Error>(a1, 0);
  }
  *(void *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v10;
  return result;
}

uint64_t specialized MLDataTable.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  MLDataTable.willMutate()();
  uint64_t v9 = a1;
  char v10 = a2 & 1;
  MLDataTable.setColumnImpl(newColumn:named:)((uint64_t)&v9, a3, a4);
  swift_bridgeObjectRelease(a4);
  uint64_t result = outlined consume of Result<_DataTable, Error>(a1, a2);
  if (!*(unsigned char *)(v4 + 8))
  {
    uint64_t v8 = *(void *)v4;
    outlined copy of Result<_DataTable, Error>(v8, 0);
    _DataTable.columnNamesDidChange()();
    return outlined consume of Result<_DataTable, Error>(v8, 0);
  }
  return result;
}

void (__cdecl **static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)(uint64_t a1))(id)
{
  uint64_t v38 = v1;
  uint64_t v34 = a1;
  uint64_t v2 = type metadata accessor for URL(0);
  id v41 = *(id *)(v2 - 8);
  int64_t v33 = *((void *)v41 + 8);
  uint64_t v3 = alloca(v33);
  uint64_t v4 = alloca(v33);
  uint64_t v35 = (void (*)(id *, uint64_t))*((void *)v41 + 2);
  uint64_t v5 = v2;
  uint64_t v37 = v2;
  v35(&v32, a1);
  uint64_t v6 = type metadata accessor for VNImageOption(0);
  uint64_t v7 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  LOBYTE(v6) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v6, (char *)&type metadata for Any + 8, v7);
  objc_allocWithZone((Class)VNImageRequestHandler);
  uint64_t v36 = &v32;
  id v32 = @nonobjc VNImageRequestHandler.init(url:options:)((uint64_t)&v32, v6);
  uint64_t v39 = swift_allocObject(&unk_39A358, 24, 7);
  *(void *)(v39 + 16) = _swiftEmptyArrayStorage;
  uint64_t v42 = swift_allocObject(&unk_39A380, 24, 7);
  *(void *)(v42 + 16) = 0;
  uint64_t v40 = swift_allocObject(&unk_39A3A8, 24, 7);
  *(void *)(v40 + 16) = 0;
  ((void (*)(id *, uint64_t, uint64_t))v35)(&v32, v34, v5);
  uint64_t v8 = *((unsigned __int8 *)v41 + 80);
  uint64_t v9 = ~*((unsigned __int8 *)v41 + 80) & (v8 + 24);
  unint64_t v10 = (v33 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject(&unk_39A470, v11 + 8, v8 | 7);
  *(void *)(v12 + 16) = v42;
  (*((void (**)(uint64_t, id *, uint64_t))v41 + 4))(v12 + v9, v36, v37);
  *(void *)(v12 + v10) = v40;
  *(void *)(v12 + v11) = v39;
  objc_allocWithZone((Class)VNDetectHumanHandPoseRequest);
  swift_retain();
  swift_retain();
  swift_retain();
  id v13 = @nonobjc VNDetectHumanBodyPoseRequest.init(completionHandler:)((uint64_t)partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:), v12, (uint64_t)&block_descriptor_7);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = (void *)swift_allocObject(v14, 40, 7);
  v15[2] = 1;
  v15[3] = 3;
  long long v15[4] = v13;
  v44[0] = v15;
  specialized Array._endMutation()();
  LOBYTE(v10) = v44[0];
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNRequest, VNRequest_ptr);
  id v41 = v13;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  v44[0] = 0;
  id v17 = v32;
  LOBYTE(v12) = [v32 performRequests:isa error:v44];

  int64_t v18 = (void (__cdecl **)(id))v44[0];
  if ((_BYTE)v12)
  {
    uint64_t v19 = v39;
    uint64_t v20 = (uint64_t *)(v42 + 16);
    swift_beginAccess(v42 + 16, v44, 0, 0);
    uint64_t v21 = *v20;
    if (!v21)
    {
      v18;

      swift_beginAccess(v19 + 16, v43, 0, 0);
      int64_t v18 = *(void (__cdecl ***)(id))(v19 + 16);
      swift_bridgeObjectRetain((_BYTE)v18);
      swift_release();
      swift_release();
      swift_release();
      return v18;
    }
    v18;
    swift_errorRetain(v21);
    swift_willThrow(v21, v44, v22, v23, v24, v25);

    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    id v26 = v44[0];
    _convertNSErrorToError(_:)(v18);
    int64_t v18 = &objc_release;

    swift_willThrow(v26, "performRequests:error:", v27, v28, v29, v30);
    swift_release();
    swift_release();
    swift_release();
  }
  return v18;
}

uint64_t static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  int64_t v84 = a2;
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v74 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v74 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (!a2) {
    BUG();
  }
  if (v6 == 0x8000000000000000 && a2 == -1) {
    BUG();
  }
  uint64_t v78 = a3;
  if (v6 / a2 < 0) {
    BUG();
  }
  uint64_t v7 = v6 / a2;
  uint64_t v77 = v6 % a2;
  Swift::Int v83 = v6;
  if (v6 / a2)
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    uint64_t v8 = a1;
    uint64_t v9 = a1;
    if ((a1 & 1) == 0) {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFF8;
    }
    uint64_t v81 = v9;
    unint64_t v10 = 0;
    uint64_t v82 = a1 & 0xFFFFFFFFFFFFF8;
    uint64_t v76 = (a1 & 0xFFFFFFFFFFFFF8) + 32;
    uint64_t v91 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v87 = v7;
    while (1)
    {
      if (v10 == v7) {
        BUG();
      }
      uint64_t v11 = a2 * v10;
      if (!is_mul_ok(a2, v10)) {
        BUG();
      }
      if (__OFADD__(a2, v11)) {
        BUG();
      }
      if (a2 + v11 < v11) {
        BUG();
      }
      int64_t v89 = a2 + v11;
      unint64_t v75 = v10;
      unint64_t v92 = a2 * v10;
      if ((v8 & 0x4000000000000001) != 0)
      {
        swift_bridgeObjectRetain(v8);
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v81);
        swift_bridgeObjectRelease(v8);
        uint64_t v11 = v92;
      }
      else
      {
        uint64_t v12 = *(void *)(v82 + 16);
      }
      if (v12 < v11) {
        BUG();
      }
      if (v11 < 0) {
        BUG();
      }
      if ((a1 & 0x4000000000000001) != 0)
      {
        swift_bridgeObjectRetain(a1);
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v81);
        swift_bridgeObjectRelease(a1);
      }
      else
      {
        uint64_t v13 = *(void *)(v82 + 16);
      }
      if (v13 < v89) {
        BUG();
      }
      uint64_t v14 = a1;
      if ((a1 & 0xC000000000000003) != 0 && v92 != v89)
      {
        if (v92 >= v89) {
          BUG();
        }
        int64_t v15 = v84;
        Swift::Int v16 = v92;
        do
        {
          _ArrayBuffer._typeCheckSlowPath(_:)(v16);
          uint64_t v14 = a1;
          ++v16;
          --v15;
        }
        while (v15);
      }
      if ((v14 & 0x4000000000000001) != 0)
      {
        char v17 = v14;
        swift_bridgeObjectRetain(v14);
        int64_t v18 = (void *)_CocoaArrayWrapper.subscript.getter(v92, v89, v81);
        uint64_t v79 = v19;
        id v85 = v20;
        unint64_t v22 = v21;
        swift_bridgeObjectRelease(v17);
      }
      else
      {
        unint64_t v22 = 2 * v89 + 1;
        swift_bridgeObjectRetain(v14);
        int64_t v18 = (void *)v82;
        uint64_t v79 = v76;
        id v85 = (id)v92;
      }
      if (v22)
      {
        unint64_t v80 = v22;
        uint64_t v25 = type metadata accessor for __ContiguousArrayStorageBase(0);
        swift_unknownObjectRetain_n(v18, 2);
        uint64_t v26 = v25;
        uint64_t v27 = (void *)swift_dynamicCastClass(v18, v25);
        if (!v27)
        {
          swift_unknownObjectRelease(v18);
          uint64_t v27 = _swiftEmptyArrayStorage;
        }
        uint64_t v24 = v18;
        uint64_t v28 = v27[2];
        swift_release();
        if (__OFSUB__(v80 >> 1, v85)) {
          BUG();
        }
        if (v28 == (v80 >> 1) - (void)v85)
        {
          uint64_t v29 = swift_dynamicCastClass(v24, v26);
          LOBYTE(v18) = v29;
          if (!v29)
          {
            swift_unknownObjectRelease(v24);
            int64_t v18 = _swiftEmptyArrayStorage;
          }
          goto LABEL_40;
        }
        int64_t v18 = v24;
        swift_unknownObjectRelease(v24);
        unint64_t v22 = v80;
      }
      unsigned __int8 v23 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v18, v79, (uint64_t)v85, v22);
      uint64_t v24 = v18;
      LOBYTE(v18) = v23;
LABEL_40:
      swift_unknownObjectRelease(v24);
      id v30 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)((char)v18, 0, 65600);
      id v86 = v30;
      if (swift_isUniquelyReferenced_nonNull_native(v91)) {
        int64_t v31 = v91;
      }
      else {
        int64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v91 + 2) + 1, 1, (uint64_t)v91);
      }
      unint64_t v32 = *((void *)v31 + 2);
      int64_t v33 = v32 + 1;
      if (*((void *)v31 + 3) >> 1 <= v32) {
        int64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v31 + 3) >= 2uLL, v33, 1, (uint64_t)v31);
      }
      *((void *)v31 + 2) = v33;
      uint64_t v34 = 24 * v32;
      *(void *)&v31[v34 + 32] = v86;
      *(void *)&v31[v34 + 40] = v92;
      uint64_t v91 = v31;
      *(void *)&v31[v34 + 48] = v89;

      unint64_t v10 = v75 + 1;
      uint64_t v7 = v87;
      uint64_t v8 = a1;
      a2 = v84;
      if (v75 + 1 == v87) {
        goto LABEL_49;
      }
    }
  }
  uint64_t v91 = (char *)_swiftEmptyArrayStorage;
LABEL_49:
  if (v77 <= 0) {
    return (uint64_t)v91;
  }
  unint64_t v36 = v7;
  Swift::Int v35 = a2 * v7;
  if (!is_mul_ok(a2, v36)) {
    BUG();
  }
  BOOL v37 = __OFSUB__(a2, v77);
  int64_t v38 = a2 - v77;
  if (v37) {
    BUG();
  }
  Swift::Int v88 = v35;
  specialized ContiguousArray.reserveCapacity(_:)(3);
  id v39 = objc_allocWithZone((Class)NSNumber);
  id v40 = [v39 initWithInteger:v38];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v41 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v40);
  specialized ContiguousArray._endMutation()();
  id v42 = objc_allocWithZone((Class)NSNumber);
  id v43 = [v42 initWithInteger:3];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v44 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v43);
  specialized ContiguousArray._endMutation()();
  id v45 = objc_allocWithZone((Class)NSNumber);
  id v46 = [v45 initWithInteger:v78];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v47 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v46);
  specialized ContiguousArray._endMutation()();
  objc_allocWithZone((Class)MLMultiArray);
  id v48 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
  if (v3) {
    return swift_bridgeObjectRelease((_BYTE)v91);
  }
  id v49 = v48;
  static _VideoUtilities.resetMultiArray(_:with:)(v48, 0.0);
  if (v83 < v88) {
    BUG();
  }
  uint64_t v93 = v49;
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v51 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v51 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v52 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (v52 < v88) {
    BUG();
  }
  if (v88 < 0) {
    BUG();
  }
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v53 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v53 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v54 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (v54 < v83) {
    BUG();
  }
  uint64_t v55 = a1;
  if ((a1 & 0xC000000000000003) != 0 && v88 != v83)
  {
    if (v88 >= (unint64_t)v83) {
      BUG();
    }
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    Swift::Int v56 = v88;
    do
    {
      _ArrayBuffer._typeCheckSlowPath(_:)(v56);
      uint64_t v55 = a1;
      ++v56;
    }
    while (v83 != v56);
  }
  uint64_t v57 = v55 & 0xFFFFFFFFFFFFF8;
  if ((v55 & 0x4000000000000001) != 0)
  {
    if (v55) {
      uint64_t v57 = v55;
    }
    swift_bridgeObjectRetain(v55);
    uint64_t v57 = _CocoaArrayWrapper.subscript.getter(v88, v83, v57);
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    unint64_t v90 = v62;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v59 = v57 + 32;
    unint64_t v90 = 2 * v83 + 1;
    swift_bridgeObjectRetain(v55);
    uint64_t v61 = v88;
  }
  unint64_t v63 = (unint64_t)specialized Array.init<A>(_:)(v57, v59, v61, v90);
  id v94 = v93;
  swift_bridgeObjectRetain(v63);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v64 = *(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFF8));
  unint64_t v65 = *(void *)((char *)&dword_18 + (v63 & 0xFFFFFFFFFFFFF8));
  if (v65 >> 1 <= v64) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 >= 2, v64 + 1, 1);
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v94);
  specialized Array._endMutation()();
  swift_bridgeObjectRelease(v63);
  id v66 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(v63, 0, 65600);
  id v67 = v66;
  uint64_t v68 = v91;
  if (!swift_isUniquelyReferenced_nonNull_native(v91)) {
    uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v91 + 2) + 1, 1, (uint64_t)v91);
  }
  Swift::Int v69 = v83;
  unint64_t v70 = *((void *)v68 + 2);
  uint64_t v71 = v68;
  if (*((void *)v68 + 3) >> 1 <= v70)
  {
    uint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v68 + 3) >= 2uLL, v70 + 1, 1, (uint64_t)v68);
    Swift::Int v69 = v83;
  }
  uint64_t v72 = v71;
  *((void *)v71 + 2) = v70 + 1;
  uint64_t v73 = 24 * v70;
  *(void *)&v72[v73 + 32] = v67;
  *(void *)&v72[v73 + 40] = v88;
  *(void *)&v72[v73 + 48] = v69;

  return (uint64_t)v72;
}

uint64_t static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  uint64_t v42 = v5;
  uint64_t v46 = a4;
  uint64_t v6 = *(void *)a1;
  v45._uint64_t object = a1;
  char v7 = a1[8];
  uint64_t v49 = v6;
  char v50 = v7;
  v45._uint64_t countAndFlagsBits = a2;
  v8._uint64_t countAndFlagsBits = a2;
  *(void *)&long long v44 = a3;
  v8._uint64_t object = a3;
  MLDataTable.subscript.getter(v8);
  if (BYTE8(v48) == 1)
  {
    outlined consume of Result<_DataTable, Error>(v48, 1);
LABEL_15:
    char v27 = *((unsigned char *)v45._object + 8);
    *(void *)&long long v48 = *(void *)v45._object;
    BYTE8(v48) = v27;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = (void *)swift_initStackObject(v28, v41);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = v45._countAndFlagsBits;
    char v30 = v44;
    inited[5] = v44;
    LOBYTE(v49) = 5;
    swift_bridgeObjectRetain(v30);
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v48, (unint64_t)inited, (char *)&v49, a5);
    swift_setDeallocating(inited);
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  swift_retain();
  _UntypedColumn.type.getter();
  outlined consume of Result<_DataTable, Error>(v48, 0);
  outlined consume of Result<_DataTable, Error>(v48, 0);
  if ((_BYTE)v49 != 3) {
    goto LABEL_15;
  }
  *(void *)&long long v48 = v6;
  BYTE8(v48) = v7;
  uint64_t countAndFlagsBits = v45._countAndFlagsBits;
  v10._uint64_t countAndFlagsBits = v45._countAndFlagsBits;
  v10._uint64_t object = (void *)v44;
  MLDataTable.subscript.getter(v10);
  uint64_t v11 = v49;
  char v12 = v50;
  uint64_t v13 = swift_allocObject(&unk_39A308, 24, 7);
  LOBYTE(v10._countAndFlagsBits) = v46;
  *(void *)(v13 + 16) = v46;
  swift_bridgeObjectRetain(v10._countAndFlagsBits);
  specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:), v13, v11, v12);
  swift_release();
  outlined consume of Result<_DataTable, Error>(v11, v12);
  uint64_t v47 = v48;
  LOBYTE(v51) = BYTE8(v48);
  char v14 = *((unsigned char *)v45._object + 8);
  uint64_t v49 = *(void *)v45._object;
  char v50 = v14;
  v10._uint64_t countAndFlagsBits = countAndFlagsBits;
  v10._uint64_t object = (void *)v44;
  MLDataTable.subscript.getter(v10);
  uint64_t v15 = -1;
  if (!BYTE8(v48))
  {
    swift_retain();
    uint64_t v15 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v48, 0);
  }
  uint64_t v43 = v15;
  outlined consume of Result<_DataTable, Error>(v48, SBYTE8(v48));
  int v51 = v51;
  specialized MLDataColumn.dropMissing()(v47, v51);
  uint64_t v16 = -1;
  if (!v50)
  {
    outlined copy of Result<_DataTable, Error>(v49, 0);
    uint64_t v16 = CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v49, 0);
  }
  outlined consume of Result<_DataTable, Error>(v49, v50);
  if (__OFSUB__(v43, v16)) {
    BUG();
  }
  if (v43 == v16)
  {
    swift_bridgeObjectRetain(v44);
    specialized MLDataTable.subscript.setter(v47, v51, v45._countAndFlagsBits, v44);
    goto LABEL_15;
  }
  *(void *)&long long v48 = 0;
  *((void *)&v48 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(236);
  v17._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
  v17._uint64_t object = "validation_confusion" + 0x8000000000000000;
  String.append(_:)(v17);
  uint64_t v49 = v43 - v16;
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v20 = (char)v19;
  v17._uint64_t countAndFlagsBits = v18;
  v17._uint64_t object = v19;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v20);
  v17._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  v17._uint64_t object = "mn into MLMultiArray format. " + 0x8000000000000000;
  String.append(_:)(v17);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v46 & 0xC000000000000003) == 0, v46);
  if ((v46 & 0xC000000000000003) != 0) {
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v46);
  }
  else {
    id v21 = *(id *)(v46 + 40);
  }
  unint64_t v22 = v21;
  id v23 = [v21 integerValue];

  uint64_t v49 = (uint64_t)v23;
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  LOBYTE(v23) = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease((_BYTE)v23);
  v25._uint64_t object = (void *)0xE200000000000000;
  v25._uint64_t countAndFlagsBits = 8236;
  String.append(_:)(v25);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v46 & 0xC000000000000003) == 0, v46);
  if ((v46 & 0xC000000000000003) != 0) {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v46);
  }
  else {
    id v26 = *(id *)(v46 + 48);
  }
  unint64_t v32 = v26;
  uint64_t v33 = v47;
  id v34 = [v26 integerValue];

  uint64_t v49 = (uint64_t)v34;
  v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  LOBYTE(v34) = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease((_BYTE)v34);
  v36._uint64_t object = "ld have a dimension of [1, " + 0x8000000000000000;
  v36._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v36);
  v36._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v36._object, 0, 0);
  *(_OWORD *)uint64_t v37 = v48;
  *(_OWORD *)(v37 + 16) = 0;
  *(_OWORD *)(v37 + 32) = 0;
  *(unsigned char *)(v37 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v36._object, v37, v38, v39, v40);
  return outlined consume of Result<_DataTable, Error>(v33, v51);
}

uint64_t static _VideoUtilities.getSecondsFromTimeString(_:)(long long a1)
{
  v32._uint64_t countAndFlagsBits = a1;
  long long v31 = a1;
  *(void *)&long long v33 = *((void *)&a1 + 1);
  v30[0] = 58;
  v30[1] = 0xE100000000000000;
  uint64_t v1 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = (void *)StringProtocol.components<A>(separatedBy:)(v30, &type metadata for String, &type metadata for String, v1, v1);
  uint64_t v3 = v2[2];
  switch(v3)
  {
    case 3:
      unint64_t v8 = v2[4];
      uint64_t v9 = v2[5];
      swift_bridgeObjectRetain(v9);
      uint64_t v34 = specialized Double.init<A>(_:)(v8, v9);
      if (v10) {
        goto LABEL_16;
      }
      if (v2[2] < 2uLL) {
        BUG();
      }
      unint64_t v11 = v2[6];
      uint64_t v12 = v2[7];
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = (void *)specialized Double.init<A>(_:)(v11, v12);
      if (v14) {
        goto LABEL_16;
      }
      v32._uint64_t object = v13;
      if (v2[2] < 3uLL) {
        BUG();
      }
      unint64_t v15 = v2[8];
      uint64_t v16 = v2[9];
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease((_BYTE)v2);
      uint64_t result = specialized Double.init<A>(_:)(v15, v16);
      if (v17) {
        goto LABEL_17;
      }
      break;
    case 2:
      unint64_t v18 = v2[4];
      uint64_t v19 = v2[5];
      swift_bridgeObjectRetain(v19);
      uint64_t v20 = specialized Double.init<A>(_:)(v18, v19);
      if (v21) {
        goto LABEL_16;
      }
      uint64_t v34 = v20;
      if (v2[2] < 2uLL) {
        BUG();
      }
      unint64_t v22 = v2[6];
      uint64_t v23 = v2[7];
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease((_BYTE)v2);
      uint64_t result = specialized Double.init<A>(_:)(v22, v23);
      if (v24) {
        goto LABEL_17;
      }
      break;
    case 1:
      unint64_t v4 = v2[4];
      uint64_t v5 = v2[5];
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRelease((_BYTE)v2);
      uint64_t result = specialized Double.init<A>(_:)(v4, v5);
      if ((v7 & 1) == 0) {
        return result;
      }
LABEL_17:
      *(void *)&long long v31 = 0;
      *((void *)&v31 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(153);
      v25._uint64_t object = " expects strings." + 0x8000000000000000;
      v25._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      String.append(_:)(v25);
      v25._uint64_t countAndFlagsBits = v32._countAndFlagsBits;
      v25._uint64_t object = (void *)v33;
      String.append(_:)(v25);
      v25._uint64_t object = "Unsupported time string format " + 0x8000000000000000;
      v25._uint64_t countAndFlagsBits = 0xD000000000000078;
      String.append(_:)(v25);
      long long v33 = v31;
      v25._uint64_t object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v25._object, 0, 0);
      *(_OWORD *)uint64_t v26 = v33;
      *(_OWORD *)(v26 + 16) = 0;
      *(_OWORD *)(v26 + 32) = 0;
      *(unsigned char *)(v26 + 48) = 0;
      return swift_willThrow(&type metadata for MLCreateError, v25._object, v26, v27, v28, v29);
    default:
LABEL_16:
      swift_bridgeObjectRelease((_BYTE)v2);
      goto LABEL_17;
  }
  return result;
}

id static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, CMTimeValue a2, uint64_t a3, CMTimeEpoch a4, CMTimeValue a5, uint64_t a6, double a7, CMTimeEpoch a8)
{
  uint64_t v79 = v8;
  double v82 = a7;
  *(void *)&end.timescale = a6;
  end.CMTimeValue value = a5;
  end.epoch = a4;
  uint64_t start = a3;
  v77.CMTimeValue value = a2;
  id v81 = a1;
  uint64_t v9 = type metadata accessor for URL(0);
  char v10 = *(void **)(v9 - 8);
  int64_t v71 = v10[8];
  id v83 = v10;
  unint64_t v11 = alloca(v71);
  uint64_t v12 = alloca(v71);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNVideoProcessor, VNVideoProcessor_ptr);
  uint64_t v72 = (void (*)(int64_t *, id, uint64_t))v10[2];
  uint64_t v73 = &v71;
  uint64_t v74 = v9;
  v72(&v71, v81, v9);
  v77.epoch = (CMTimeEpoch)VNVideoProcessor.__allocating_init(url:)((uint64_t)&v71);
  *(void *)&v77.timescale = swift_allocObject(&unk_39A358, 24, 7);
  *(void *)(*(void *)&v77.timescale + 16) = _swiftEmptyArrayStorage;
  uint64_t v80 = swift_allocObject(&unk_39A380, 24, 7);
  *(void *)(v80 + 16) = 0;
  uint64_t v78 = swift_allocObject(&unk_39A3A8, 24, 7);
  *(void *)(v78 + 16) = 0;
  v72(&v71, v81, v9);
  uint64_t v13 = *((unsigned __int8 *)v83 + 80);
  uint64_t v14 = ~*((unsigned __int8 *)v83 + 80) & (v13 + 24);
  unint64_t v15 = (v71 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject(&unk_39A3D0, v16 + 8, v13 | 7);
  *(void *)(v17 + 16) = v80;
  (*((void (**)(uint64_t, int64_t *, uint64_t))v83 + 4))(v17 + v14, v73, v74);
  *(void *)(v17 + v15) = v78;
  *(void *)(v17 + v16) = *(void *)&v77.timescale;
  objc_allocWithZone((Class)VNDetectHumanHandPoseRequest);
  swift_retain();
  swift_retain();
  swift_retain();
  id v18 = @nonobjc VNDetectHumanBodyPoseRequest.init(completionHandler:)((uint64_t)partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:), v17, (uint64_t)&block_descriptor_7);
  id v83 = v18;
  if (v82 >= 0.01)
  {
    double v23 = v82;
  }
  else
  {
    v88.start.CMTimeValue value = 0;
    *(void *)&v88.start.timescale = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v19._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v19._char object = " frames with no hand in view." + 0x8000000000000000;
    String.append(_:)(v19);
    Double.write<A>(to:)(&v88, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v19._char object = "Invalid target frame rate " + 0x8000000000000000;
    v19._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v19);
    Double.write<A>(to:)(&v88, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v19._uint64_t countAndFlagsBits = 0x776F6E2073706620;
    v19._char object = (void *)0xE90000000000002ELL;
    String.append(_:)(v19);
    char v21 = *(void **)&v88.start.timescale;
    CMTimeValue value = v88.start.value;
    os_log_type_t v22 = static os_log_type_t.default.getter(0x776F6E2073706620);
    v19._uint64_t countAndFlagsBits = value;
    v19._char object = v21;
    log(_:type:)(v19, v22);
    LOBYTE(v19._countAndFlagsBits) = (_BYTE)v21;
    id v18 = v83;
    swift_bridgeObjectRelease(v19._countAndFlagsBits);
    double v23 = 30.0;
  }
  double v82 = 1.0 / v23;
  id v24 = objc_allocWithZone((Class)VNVideoProcessorRequestProcessingOptions);
  Swift::String v25 = [v24 init];
  id v26 = objc_allocWithZone((Class)VNVideoProcessorTimeIntervalCadence);
  id v27 = [v26 initWithTimeInterval:v82];
  [v25 setCadence:v27];

  v88.start.CMTimeValue value = 0;
  epoch = (void *)v77.epoch;
  unsigned __int8 v29 = [(id)v77.epoch addRequest:v18 processingOptions:v25 error:&v88];
  CMTimeValue v30 = v88.start.value;
  if (v29)
  {
    (id)v88.start.value;
    v90.CMTimeValue value = v77.value;
    *(void *)&v90.timescale = start;
    v90.epoch = end.epoch;
    *(void *)&v89.timescale = *(void *)&end.timescale;
    v89.epoch = a8;
    v89.CMTimeValue value = end.value;
    CMTimeRange.init(start:end:)(&v84, v90, v89);
    uint64_t v86 = 0;
    CMTimeRange v88 = v84;
    unsigned __int8 v34 = [epoch analyzeTimeRange:&v86 v31 v32 v33 v84.start.value *(void *)&v84.start.timescale v84.start.epoch v84.duration.value *(void *)&v84.duration.timescale v84.duration.epoch];
    Swift::String v35 = epoch;
    id v36 = (id)v86;
    if (v34)
    {
      *(void *)&double v37 = v80 + 16;
      uint64_t v38 = (uint64_t *)(v78 + 16);
      swift_beginAccess(v78 + 16, &v88, 0, 0);
      if (*v38 <= 0)
      {
        v36;
      }
      else
      {
        double v82 = v37;
        uint64_t v86 = 0;
        unint64_t v87 = 0xE000000000000000;
        v36;
        _StringGuts.grow(_:)(44);
        unint64_t v39 = v87;
        swift_bridgeObjectRelease(v87);
        uint64_t v86 = 0x206F65646956;
        unint64_t v87 = 0xE600000000000000;
        v40._uint64_t countAndFlagsBits = URL.path.getter(v39);
        char object = (char)v40._object;
        String.append(_:)(v40);
        swift_bridgeObjectRelease(object);
        v42._uint64_t countAndFlagsBits = 0x2073616820;
        v42._char object = (void *)0xE500000000000000;
        String.append(_:)(v42);
        v85[0] = *v38;
        v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v44 = (char)v43._object;
        String.append(_:)(v43);
        swift_bridgeObjectRelease(v44);
        v42._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v42._char object = " cannot be empty." + 0x8000000000000000;
        String.append(_:)(v42);
        uint64_t v45 = v86;
        uint64_t v46 = (void *)v87;
        os_log_type_t v47 = static os_log_type_t.info.getter();
        v42._uint64_t countAndFlagsBits = v45;
        double v37 = v82;
        v42._char object = v46;
        log(_:type:)(v42, v47);
        swift_bridgeObjectRelease((_BYTE)v46);
      }
      swift_beginAccess(*(void *)&v37, &v86, 0, 0);
      uint64_t v62 = **(void **)&v37;
      if (!**(void **)&v37)
      {
        uint64_t v69 = *(void *)&v77.timescale;
        uint64_t v70 = *(void *)&v77.timescale + 16;

        swift_beginAccess(v70, v85, 0, 0);
        id v55 = *(id *)(v69 + 16);
        swift_bridgeObjectRetain((_BYTE)v55);
        swift_release();
        swift_release();
        swift_release();
        return v55;
      }
      uint64_t v63 = **(void **)&v37;
      swift_errorRetain(**(void **)&v37);
      swift_willThrow(v63, &v86, v64, v65, v66, v67);
      id v55 = v25;
      uint64_t v79 = v62;
      Swift::String v25 = (void *)v77.epoch;
      epoch = v83;
    }
    else
    {
      id v56 = (id)v86;
      uint64_t v57 = _convertNSErrorToError(_:)(v36);

      uint64_t v79 = v57;
      swift_willThrow(v56, "analyzeTimeRange:error:", v58, v59, v60, v61);
      id v55 = v83;
      epoch = v35;
    }
  }
  else
  {
    id v48 = (id)v88.start.value;
    id v81 = v25;
    uint64_t v49 = v48;
    uint64_t v50 = _convertNSErrorToError(_:)(v30);

    uint64_t v79 = v50;
    swift_willThrow(v49, "addRequest:processingOptions:error:", v51, v52, v53, v54);
    id v55 = v18;
    Swift::String v25 = v81;
  }
  swift_release();
  swift_release();
  swift_release();

  return v55;
}

void (__cdecl **static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, CMTimeValue a2, uint64_t a3, CMTimeEpoch a4, CMTimeValue a5, uint64_t a6, double a7, CMTimeEpoch a8))(id)
{
  uint64_t v79 = v8;
  *(double *)&id v83 = a7;
  *(void *)&end.timescale = a6;
  end.CMTimeValue value = a5;
  end.epoch = a4;
  uint64_t start = a3;
  v77.CMTimeValue value = a2;
  id v81 = a1;
  uint64_t v9 = type metadata accessor for URL(0);
  char v10 = *(void **)(v9 - 8);
  int64_t v71 = v10[8];
  id v82 = v10;
  unint64_t v11 = alloca(v71);
  uint64_t v12 = alloca(v71);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNVideoProcessor, VNVideoProcessor_ptr);
  uint64_t v72 = (void (*)(int64_t *, id, uint64_t))v10[2];
  uint64_t v73 = &v71;
  uint64_t v74 = v9;
  v72(&v71, v81, v9);
  v77.epoch = (CMTimeEpoch)VNVideoProcessor.__allocating_init(url:)((uint64_t)&v71);
  *(void *)&v77.timescale = swift_allocObject(&unk_39A358, 24, 7);
  *(void *)(*(void *)&v77.timescale + 16) = _swiftEmptyArrayStorage;
  uint64_t v80 = swift_allocObject(&unk_39A380, 24, 7);
  *(void *)(v80 + 16) = 0;
  uint64_t v78 = swift_allocObject(&unk_39A3A8, 24, 7);
  *(void *)(v78 + 16) = 0;
  v72(&v71, v81, v9);
  uint64_t v13 = *((unsigned __int8 *)v82 + 80);
  uint64_t v14 = ~*((unsigned __int8 *)v82 + 80) & (v13 + 24);
  unint64_t v15 = (v71 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject(&unk_39A420, v16 + 8, v13 | 7);
  *(void *)(v17 + 16) = v80;
  (*((void (**)(uint64_t, int64_t *, uint64_t))v82 + 4))(v17 + v14, v73, v74);
  *(void *)(v17 + v15) = v78;
  *(void *)(v17 + v16) = *(void *)&v77.timescale;
  objc_allocWithZone((Class)VNDetectHumanBodyPoseRequest);
  swift_retain();
  swift_retain();
  swift_retain();
  id v18 = @nonobjc VNDetectHumanBodyPoseRequest.init(completionHandler:)((uint64_t)partial apply for closure #1 in static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:), v17, (uint64_t)&block_descriptor_24);
  [v18 setRevision:1];
  id v82 = v18;
  if (*(double *)&v83 >= 0.01)
  {
    double v22 = *(double *)&v83;
  }
  else
  {
    v88.start.CMTimeValue value = 0;
    *(void *)&v88.start.timescale = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v19._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v19._char object = " frames with no hand in view." + 0x8000000000000000;
    String.append(_:)(v19);
    Double.write<A>(to:)(&v88, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v19._char object = "Invalid target frame rate " + 0x8000000000000000;
    v19._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v19);
    Double.write<A>(to:)(&v88, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v19._uint64_t countAndFlagsBits = 0x776F6E2073706620;
    v19._char object = (void *)0xE90000000000002ELL;
    String.append(_:)(v19);
    Swift::String v20 = *(Swift::String *)&v88.start.value;
    id v18 = v82;
    os_log_type_t v21 = static os_log_type_t.default.getter(0x776F6E2073706620);
    log(_:type:)(v20, v21);
    swift_bridgeObjectRelease(v20._object);
    double v22 = 30.0;
  }
  *(double *)&id v83 = 1.0 / v22;
  id v23 = objc_allocWithZone((Class)VNVideoProcessorRequestProcessingOptions);
  id v24 = [v23 init];
  id v25 = objc_allocWithZone((Class)VNVideoProcessorTimeIntervalCadence);
  id v26 = [v25 initWithTimeInterval:*(double *)&v83];
  [v24 setCadence:v26];

  v88.start.CMTimeValue value = 0;
  epoch = (void *)v77.epoch;
  unsigned __int8 v28 = [(id)v77.epoch addRequest:v18 processingOptions:v24 error:&v88];
  CMTimeValue value = v88.start.value;
  if (v28)
  {
    id v83 = v24;
    (id)v88.start.value;
    v90.CMTimeValue value = v77.value;
    *(void *)&v90.timescale = start;
    v90.epoch = end.epoch;
    *(void *)&v89.timescale = *(void *)&end.timescale;
    v89.epoch = a8;
    v89.CMTimeValue value = end.value;
    CMTimeRange.init(start:end:)(&v84, v90, v89);
    uint64_t v86 = 0;
    CMTimeRange v88 = v84;
    unsigned __int8 v33 = [epoch analyzeTimeRange:&v86 error:v30, v31, v32, v84.start.value, *(void *)&v84.start.timescale, v84.start.epoch, v84.duration.value, *(void *)&v84.duration.timescale, v84.duration.epoch];
    id v34 = (id)v86;
    if (v33)
    {
      Swift::String v35 = (uint64_t *)(v80 + 16);
      id v36 = (uint64_t *)(v78 + 16);
      swift_beginAccess(v78 + 16, &v88, 0, 0);
      if (*v36 <= 0)
      {
        v34;
      }
      else
      {
        uint64_t v86 = 0;
        unint64_t v87 = 0xE000000000000000;
        v34;
        _StringGuts.grow(_:)(46);
        unint64_t v37 = v87;
        swift_bridgeObjectRelease(v87);
        uint64_t v86 = 0x206F65646956;
        unint64_t v87 = 0xE600000000000000;
        v38._uint64_t countAndFlagsBits = URL.path.getter(v37);
        char object = (char)v38._object;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(object);
        v40._uint64_t countAndFlagsBits = 0x2073616820;
        v40._char object = (void *)0xE500000000000000;
        String.append(_:)(v40);
        v85[0] = *v36;
        v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v42 = (char)v41._object;
        String.append(_:)(v41);
        swift_bridgeObjectRelease(v42);
        v40._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
        v40._char object = "seconds.fraction format." + 0x8000000000000000;
        String.append(_:)(v40);
        uint64_t v43 = v86;
        char v44 = (void *)v87;
        os_log_type_t v45 = static os_log_type_t.info.getter();
        v40._uint64_t countAndFlagsBits = v43;
        v40._char object = v44;
        log(_:type:)(v40, v45);
        swift_bridgeObjectRelease((_BYTE)v44);
      }
      swift_beginAccess(v35, &v86, 0, 0);
      uint64_t v60 = *v35;
      id v61 = v83;
      if (!*v35)
      {
        uint64_t v69 = *(void *)&v77.timescale;
        uint64_t v70 = *(void *)&v77.timescale + 16;

        swift_beginAccess(v70, v85, 0, 0);
        uint64_t v67 = *(void (__cdecl ***)(id))(v69 + 16);
        swift_bridgeObjectRetain((_BYTE)v67);
        swift_release();
        swift_release();
        swift_release();
        return v67;
      }
      uint64_t v62 = *v35;
      swift_errorRetain(*v35);
      swift_willThrow(v62, &v86, v63, v64, v65, v66);
      id v52 = v61;
      uint64_t v79 = v60;
      id v24 = (void *)v77.epoch;
      id v53 = v82;
    }
    else
    {
      id v54 = (id)v86;
      uint64_t v55 = _convertNSErrorToError(_:)(v34);

      uint64_t v79 = v55;
      swift_willThrow(v54, "analyzeTimeRange:error:", v56, v57, v58, v59);
      id v52 = v82;
      id v53 = epoch;
      id v24 = v83;
    }
  }
  else
  {
    id v81 = (id)v88.start.value;
    uint64_t v46 = _convertNSErrorToError(_:)(value);
    id v47 = v81;

    uint64_t v79 = v46;
    swift_willThrow(v47, "addRequest:processingOptions:error:", v48, v49, v50, v51);
    id v52 = v18;
    id v53 = epoch;
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t v67 = &objc_release;

  return v67;
}

uint64_t static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v38 = v7;
  v35._uint64_t countAndFlagsBits = a6;
  unsigned __int8 v33 = a5;
  v35._char object = a4;
  uint64_t v36 = a2;
  uint64_t v9 = *(void *)a1;
  Swift::String v40 = (uint64_t *)a1;
  int v10 = *(_DWORD *)(a1 + 8);
  uint64_t v31 = v9;
  char v32 = v10 & 1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v11, v30);
  inited[2] = 3;
  inited[3] = 6;
  inited[4] = v36;
  uint64_t v13 = v9;
  inited[5] = a3;
  inited[6] = v35._object;
  uint64_t v14 = v33;
  inited[7] = v33;
  inited[8] = v35._countAndFlagsBits;
  inited[9] = a7;
  uint64_t v37 = v13;
  int v39 = v10;
  outlined copy of Result<_DataTable, Error>(v13, v10);
  named = a3;
  swift_bridgeObjectRetain((_BYTE)a3);
  swift_bridgeObjectRetain((_BYTE)v14);
  swift_bridgeObjectRetain((_BYTE)a7);
  uint64_t v15 = v38;
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v31, 0x2065727574616546, (void *)0xEC00000061746164, (uint64_t)inited);
  if (v15)
  {
    outlined consume of Result<_DataTable, Error>(v37, v39);
    swift_setDeallocating(inited);
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    uint64_t v38 = 0;
    outlined consume of Result<_DataTable, Error>(v37, v39);
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v17 = v40;
    MLDataTable.willMutate()();
    v18._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
    v18._char object = (void *)0xEA00000000006469;
    v19._uint64_t countAndFlagsBits = v36;
    v19._char object = named;
    MLDataTable.renameImpl(named:to:)(v19, v18);
    if (!*((unsigned char *)v17 + 8))
    {
      uint64_t v20 = *v40;
      outlined copy of Result<_DataTable, Error>(*v40, 0);
      _DataTable.columnNamesDidChange()();
      outlined consume of Result<_DataTable, Error>(v20, 0);
    }
    os_log_type_t v21 = v40;
    MLDataTable.willMutate()();
    v22._uint64_t countAndFlagsBits = 0x746E696F7079656BLL;
    v22._char object = (void *)0xE900000000000073;
    v23._uint64_t countAndFlagsBits = (uint64_t)v35._object;
    v23._char object = v14;
    MLDataTable.renameImpl(named:to:)(v23, v22);
    uint64_t countAndFlagsBits = v35._countAndFlagsBits;
    if (!*((unsigned char *)v21 + 8))
    {
      uint64_t v25 = *v40;
      outlined copy of Result<_DataTable, Error>(*v40, 0);
      _DataTable.columnNamesDidChange()();
      outlined consume of Result<_DataTable, Error>(v25, 0);
    }
    id v26 = v40;
    MLDataTable.willMutate()();
    v27._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v27._char object = (void *)0xE500000000000000;
    v28._uint64_t countAndFlagsBits = countAndFlagsBits;
    v28._char object = a7;
    uint64_t result = MLDataTable.renameImpl(named:to:)(v28, v27);
    if (!*((unsigned char *)v26 + 8))
    {
      uint64_t v29 = *v40;
      outlined copy of Result<_DataTable, Error>(*v40, 0);
      _DataTable.columnNamesDidChange()();
      return outlined consume of Result<_DataTable, Error>(v29, 0);
    }
  }
  return result;
}

uint64_t static _VideoUtilities.generateVideoTable(_:)(uint64_t a1)
{
  uint64_t v46 = v1;
  swift_bridgeObjectRetain(a1);
  uint64_t v48 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  specialized MutableCollection<>.sort(by:)(&v48);
  if (v2)
  {
    swift_release();
    BUG();
  }
  swift_bridgeObjectRelease(a1);
  uint64_t v44 = v48[2];
  if (!v44)
  {
    swift_release();
    unint64_t v4 = _swiftEmptyArrayStorage;
    id v54 = _swiftEmptyArrayStorage;
    goto LABEL_47;
  }
  uint64_t v52 = a1;
  uint64_t v51 = 0;
  id v47 = v48;
  os_log_type_t v45 = v48 + 4;
  uint64_t v3 = 0;
  unint64_t v4 = _swiftEmptyArrayStorage;
  id v54 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v50 = v4;
    uint64_t v43 = v3;
    uint64_t v5 = v45[2 * v3];
    uint64_t v6 = v45[2 * v3 + 1];
    uint64_t v7 = *(void *)(v52 + 16);
    swift_bridgeObjectRetain(v6);
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (v7)
    {
      swift_bridgeObjectRetain(v6);
      unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v10)
      {
        uint64_t v8 = *(void **)(*(void *)(v52 + 56) + 8 * v9);
        swift_bridgeObjectRetain((_BYTE)v8);
      }
      swift_bridgeObjectRelease(v6);
    }
    uint64_t v11 = v51;
    ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SSs5NeverOTg5148_s8CreateML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n((uint64_t)v8);
    uint64_t v51 = v11;
    swift_bridgeObjectRelease((_BYTE)v8);
    uint64_t v49 = ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n;
    uint64_t v13 = ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n[2];
    if (!v13)
    {
      swift_bridgeObjectRelease(v6);
      uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_15:
      uint64_t v17 = v54;
      goto LABEL_16;
    }
    uint64_t v14 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v13);
    v14[2] = v13;
    v14[4] = v5;
    v14[5] = v6;
    if (v13 == 1) {
      goto LABEL_15;
    }
    v14[6] = v5;
    id v53 = v14;
    v14[7] = v6;
    if (v13 != 2)
    {
      uint64_t v15 = v13 - 2;
      unint64_t v16 = v53 + 9;
      do
      {
        *(v16 - 1) = v5;
        *unint64_t v16 = v6;
        swift_bridgeObjectRetain(v6);
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v17 = v54;
    uint64_t v14 = v53;
LABEL_16:
    uint64_t v18 = v14[2];
    int64_t v19 = v17[2];
    int64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      BUG();
    }
    id v53 = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    if (!isUniquelyReferenced_nonNull_native || v17[3] >> 1 < v20)
    {
      if (v19 > v20) {
        int64_t v20 = v19;
      }
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v20, 1, (uint64_t)v17);
    }
    unint64_t v4 = v50;
    char v22 = (char)v53;
    if (v53[2])
    {
      uint64_t v23 = v17[2];
      if ((v17[3] >> 1) - v23 < v18) {
        BUG();
      }
      unint64_t v24 = (unint64_t)&v17[2 * v23 + 4];
      if ((unint64_t)(v53 + 4) < v24 + 16 * v18 && v24 < (unint64_t)&v53[2 * v18 + 4])
      {
LABEL_56:
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 1);
        BUG();
      }
      swift_arrayInitWithCopy(v24, v53 + 4, v18, &type metadata for String);
      char v22 = (char)v53;
      if (v18)
      {
        BOOL v25 = __OFADD__(v17[2], v18);
        uint64_t v26 = v17[2] + v18;
        if (v25) {
          BUG();
        }
        v17[2] = v26;
      }
    }
    else if (v18)
    {
      BUG();
    }
    id v54 = v17;
    swift_bridgeObjectRelease(v22);
    uint64_t v27 = v49[2];
    int64_t v28 = v4[2];
    int64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      BUG();
    }
    char v30 = swift_isUniquelyReferenced_nonNull_native(v4);
    if (!v30 || v4[3] >> 1 < v29)
    {
      if (v28 > v29) {
        int64_t v29 = v28;
      }
      unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30, v29, 1, (uint64_t)v4);
    }
    char v31 = (char)v49;
    if (v49[2])
    {
      uint64_t v32 = v4[2];
      if ((v4[3] >> 1) - v32 < v27) {
        BUG();
      }
      unint64_t v33 = (unint64_t)&v4[2 * v32 + 4];
      if ((unint64_t)(v49 + 4) < v33 + 16 * v27 && v33 < (unint64_t)&v49[2 * v27 + 4]) {
        goto LABEL_56;
      }
      swift_arrayInitWithCopy(v33, v49 + 4, v27, &type metadata for String);
      if (v27)
      {
        BOOL v25 = __OFADD__(v4[2], v27);
        uint64_t v34 = v4[2] + v27;
        if (v25) {
          BUG();
        }
        v4[2] = v34;
      }
    }
    else if (v27)
    {
      BUG();
    }
    uint64_t v3 = v43 + 1;
    swift_bridgeObjectRelease(v31);
  }
  while (v43 + 1 != v44);
  swift_release();
LABEL_47:
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  uint64_t inited = (void *)swift_initStackObject(v35, v42);
  inited[2] = 2;
  inited[3] = 4;
  inited[4] = 0x6C6562616CLL;
  inited[5] = 0xE500000000000000;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  inited[9] = v37;
  uint64_t v38 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  inited[10] = v38;
  inited[6] = v54;
  inited[11] = 0x7461506F65646976;
  inited[12] = 0xE900000000000068;
  inited[16] = v37;
  inited[17] = v38;
  inited[13] = v4;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v39, &protocol witness table for String);
  return MLDataTable.init(dictionary:)(v40);
}

uint64_t static _VideoUtilities.validateVideoInput(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v27 = v9;
  uint64_t v30 = a6;
  Swift::String _ = a5;
  v29._uint64_t countAndFlagsBits = a4;
  v29._char object = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  uint64_t v12 = (void *)swift_allocObject(v29._object, 40, 7);
  char v13 = (char)v12;
  v12[2] = 1;
  v12[3] = 2;
  v12[4] = &type metadata for String;
  v14._uint64_t countAndFlagsBits = a2;
  v14._char object = a3;
  uint64_t v31 = a1;
  DataFrame.validateColumnTypes(_:_:context:)(v14, (Swift::OpaquePointer)v12, (Swift::String)__PAIR128__(0xEA00000000006874, 0x6170206F65646956));
  uint64_t result = swift_bridgeObjectRelease(v13);
  if (!v16)
  {
    uint64_t v17 = (void *)swift_allocObject(v29._object, 40, 7);
    char v18 = (char)v17;
    v17[2] = 1;
    v17[3] = 2;
    void v17[4] = &type metadata for String;
    v19._uint64_t countAndFlagsBits = v29._countAndFlagsBits;
    v19._char object = _;
    DataFrame.validateColumnTypes(_:_:context:)(v19, (Swift::OpaquePointer)v17, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
    uint64_t result = swift_bridgeObjectRelease(v18);
    if (!v20)
    {
      if (a7)
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = (void *)swift_initStackObject(v21, v26);
        inited[2] = 1;
        inited[3] = 2;
        inited[4] = v30;
        inited[5] = a7;
        swift_bridgeObjectRetain(a7);
        DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xEA0000000000656DLL, 0x6974207472617453));
        if (v23)
        {
LABEL_8:
          swift_setDeallocating(inited);
          return specialized _ContiguousArrayStorage.__deallocating_deinit();
        }
        swift_setDeallocating(inited);
        uint64_t result = specialized _ContiguousArrayStorage.__deallocating_deinit();
      }
      if (!a9) {
        return result;
      }
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = (void *)swift_initStackObject(v24, v25);
      inited[2] = 1;
      inited[3] = 2;
      inited[4] = a8;
      inited[5] = a9;
      swift_bridgeObjectRetain(a9);
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE800000000000000, 0x656D697420646E45));
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v37 = v10;
  uint64_t v33 = a6;
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v12 = *(void *)a1;
  char v44 = *(unsigned char *)(a1 + 8);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v39, v27);
  inited[2] = 1;
  inited[3] = 2;
  uint64_t v32 = a2;
  inited[4] = a2;
  inited[5] = a3;
  uint64_t v38 = v12;
  uint64_t v40 = v12;
  char v14 = v44;
  char v41 = v44;
  swift_bridgeObjectRetain(a3);
  uint64_t v15 = v37;
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v40, 0x7461506F65646976, (void *)0xE900000000000068, (uint64_t)inited);
  if (v15) {
    goto LABEL_4;
  }
  uint64_t v34 = a3;
  uint64_t v37 = 0;
  uint64_t v40 = v38;
  char v41 = v14;
  uint64_t v16 = (void *)swift_initStackObject(v39, v28);
  v16[2] = 1;
  v16[3] = 2;
  void v16[4] = v36;
  char v17 = v35;
  v16[5] = v35;
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = v37;
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v40, 0x6C6562616CLL, (void *)0xE500000000000000, (uint64_t)v16);
  if (v18)
  {
    swift_setDeallocating(v16);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_4:
    swift_setDeallocating(inited);
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  swift_setDeallocating(v16);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v40 = v38;
  char v41 = v14;
  uint64_t v20 = (void *)swift_initStackObject(v39, v29);
  v20[2] = 1;
  v20[3] = 2;
  v20[4] = v32;
  char v21 = v34;
  v20[5] = v34;
  char v42 = 2;
  char v43 = 2;
  swift_bridgeObjectRetain(v21);
  static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(&v40, (unint64_t)v20, &v42, v36, v35, &v43, a7);
  char v22 = v14;
  uint64_t v23 = v38;
  swift_setDeallocating(v20);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (a8)
  {
    uint64_t v40 = v23;
    char v24 = v22;
    char v41 = v22;
    BOOL v25 = (void *)swift_initStackObject(v39, v31);
    v25[2] = 1;
    v25[3] = 2;
    v25[4] = v33;
    v25[5] = a8;
    swift_bridgeObjectRetain(a8);
    static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v40, 0xD000000000000011, " a person from an observation." + 0x8000000000000000, (uint64_t)v25);
    swift_setDeallocating(v25);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t result = v38;
  }
  else
  {
    uint64_t result = v23;
    char v24 = v22;
  }
  if (a10)
  {
    uint64_t v40 = result;
    char v41 = v24;
    uint64_t v26 = (void *)swift_initStackObject(v39, v30);
    void v26[2] = 1;
    v26[3] = 2;
    v26[4] = a9;
    v26[5] = a10;
    swift_bridgeObjectRetain(a10);
    static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v40, 0x656D697420646E65, (void *)0xEF6E6D756C6F6320, (uint64_t)v26);
    swift_setDeallocating(v26);
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  return result;
}

uint64_t static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, double a7, void *named, Swift::String a9)
{
  uint64_t v35 = v9;
  v34._uint64_t countAndFlagsBits = a6;
  v34._char object = a5;
  uint64_t v33 = a3;
  uint64_t v11 = *(void *)a1;
  uint64_t v32 = a1;
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v29 = v11;
  char v30 = v12;
  outlined copy of Result<_DataTable, Error>(v11, v12);
  v31._uint64_t countAndFlagsBits = a2;
  v31._char object = a4;
  static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v29, a2, (uint64_t)v33, (uint64_t)a4, (uint64_t)v34._object, v34._countAndFlagsBits, a7, (uint64_t)named, a9._countAndFlagsBits, (uint64_t)a9._object);
  uint64_t result = outlined consume of Result<_DataTable, Error>(v11, v12);
  if (!v9)
  {
    uint64_t countAndFlagsBits = v34._countAndFlagsBits;
    uint64_t v35 = 0;
    char object = v34._object;
    uint64_t v16 = v32;
    if (named)
    {
      MLDataTable.willMutate()();
      v17._uint64_t countAndFlagsBits = 0x7472617473;
      v18._uint64_t countAndFlagsBits = countAndFlagsBits;
      v18._char object = named;
      v17._char object = (void *)0xE500000000000000;
      MLDataTable.renameImpl(named:to:)(v18, v17);
      if (!*(unsigned char *)(v16 + 8))
      {
        uint64_t v19 = *(void *)v16;
        outlined copy of Result<_DataTable, Error>(*(void *)v16, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v19, 0);
      }
    }
    uint64_t v20 = v31._object;
    if (a9._object)
    {
      MLDataTable.willMutate()();
      v21._char object = (void *)0xE300000000000000;
      v21._uint64_t countAndFlagsBits = 6581861;
      MLDataTable.renameImpl(named:to:)(a9, v21);
      if (!*(unsigned char *)(v16 + 8))
      {
        uint64_t v22 = *(void *)v16;
        outlined copy of Result<_DataTable, Error>(*(void *)v16, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v22, 0);
      }
    }
    MLDataTable.willMutate()();
    v23._uint64_t countAndFlagsBits = 0x7461506F65646976;
    v23._char object = (void *)0xE900000000000068;
    v24._uint64_t countAndFlagsBits = v31._countAndFlagsBits;
    v24._char object = v33;
    MLDataTable.renameImpl(named:to:)(v24, v23);
    if (!*(unsigned char *)(v16 + 8))
    {
      uint64_t v25 = *(void *)v16;
      outlined copy of Result<_DataTable, Error>(*(void *)v16, 0);
      _DataTable.columnNamesDidChange()();
      outlined consume of Result<_DataTable, Error>(v25, 0);
    }
    MLDataTable.willMutate()();
    v26._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v27._uint64_t countAndFlagsBits = (uint64_t)v20;
    v27._char object = object;
    v26._char object = (void *)0xE500000000000000;
    uint64_t result = MLDataTable.renameImpl(named:to:)(v27, v26);
    if (!*(unsigned char *)(v16 + 8))
    {
      uint64_t v28 = *(void *)v16;
      outlined copy of Result<_DataTable, Error>(*(void *)v16, 0);
      _DataTable.columnNamesDidChange()();
      return outlined consume of Result<_DataTable, Error>(v28, 0);
    }
  }
  return result;
}

void *static _VideoUtilities.getVideoURLsAndAnnotations(from:)(uint64_t a1, __m128 a2)
{
  *(void *)&long long v173 = v3;
  *(void *)int64_t v181 = a1;
  unsigned long long v163 = v2;
  v176._char object = (void *)type metadata accessor for DataFrame(0);
  v183._uint64_t countAndFlagsBits = *((void *)v176._object - 1);
  int64_t v4 = *(void *)(v183._countAndFlagsBits + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v171 = &v144;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  v174._uint64_t countAndFlagsBits = (uint64_t)&v144;
  uint64_t v9 = type metadata accessor for UTType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  char v12 = alloca(v11);
  char v13 = alloca(v11);
  *(void *)uint64_t v175 = &v144;
  char v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  v176._uint64_t countAndFlagsBits = (uint64_t)&v144;
  uint64_t named = type metadata accessor for URL(0);
  *(void *)uint64_t v182 = *(void *)(named - 8);
  int64_t v16 = *(void *)(*(void *)v182 + 64);
  Swift::String v17 = alloca(v16);
  Swift::String v18 = alloca(v16);
  uint64_t v172 = &v144;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  v174._char object = &v144;
  Swift::String v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  uint64_t v170 = &v144;
  Swift::String v23 = alloca(v16);
  Swift::String v24 = alloca(v16);
  *(void *)uint64_t v177 = &v144;
  uint64_t v25 = alloca(v16);
  Swift::String v26 = alloca(v16);
  v178._char object = &v144;
  Swift::String v27 = alloca(v16);
  uint64_t v28 = alloca(v16);
  v178._uint64_t countAndFlagsBits = (uint64_t)&v144;
  uint64_t v29 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v30 = *(void *)(*(void *)(v29 - 8) + 64);
  Swift::String v31 = alloca(v30);
  uint64_t v32 = alloca(v30);
  outlined init with copy of MLHandActionClassifier.DataSource(*(uint64_t *)v181, (uint64_t)&v144);
  switch(swift_getEnumCaseMultiPayload(&v144, v29))
  {
    case 0u:
      uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      Swift::String v34 = (void **)((char *)&v144 + v33[12]);
      uint64_t v35 = v33[16];
      v178._uint64_t countAndFlagsBits = *(uint64_t *)((char *)&v144 + v35);
      *(void *)int64_t v181 = *(void **)((char *)&v144 + v35 + 8);
      uint64_t v36 = v33[20];
      *(void *)uint64_t v175 = *(void **)((char *)&v144 + v36);
      v183._uint64_t countAndFlagsBits = *(uint64_t *)((char *)&v144 + v36 + 8);
      uint64_t v37 = v33[24];
      v176._uint64_t countAndFlagsBits = *(uint64_t *)((char *)&v144 + v37);
      v178._char object = *(void **)((char *)&v144 + v37 + 8);
      uint64_t v38 = v33[28];
      v174._uint64_t countAndFlagsBits = *(uint64_t *)((char *)&v144 + v38);
      v176._char object = *(void **)((char *)&v144 + v38 + 8);
      uint64_t v39 = *(void (**)(void **, void **, uint64_t))(*(void *)v182 + 32);
      uint64_t v40 = named;
      v39(*(void ***)v177, &v144, named);
      char v41 = v170;
      v39(v170, v34, v40);
      char object = v174._object;
      (*(void (**)(void *, void **, uint64_t))(*(void *)v182 + 16))(v174._object, v41, v40);
      LOBYTE(v145) = 1;
      *(_DWORD *)((char *)&v145 + 1) = *(_DWORD *)v164;
      DWORD1(v145) = *(_DWORD *)&v164[3];
      *((void *)&v145 + 1) = 44;
      unint64_t v146 = 0xE100000000000000;
      uint64_t v147 = 0;
      char v179 = 1;
      unint64_t v148 = 0xE000000000000000;
      uint64_t v149 = 92;
      uint64_t v150 = (void *)0xE100000000000000;
      LOBYTE(v151) = 1;
      *(_DWORD *)((char *)&v151 + 1) = *(_DWORD *)v165;
      HIDWORD(v151) = *(_DWORD *)&v165[3];
      uint64_t v152 = 34;
      unint64_t v153 = 0xE100000000000000;
      char v154 = 1;
      *(_DWORD *)&v155[3] = *(_DWORD *)&v166[3];
      *(_DWORD *)uint64_t v155 = *(_DWORD *)v166;
      uint64_t v156 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      uint64_t v157 = 10;
      unint64_t v158 = 0xE100000000000000;
      long long v159 = 0;
      char v160 = 1;
      *(_DWORD *)uint64_t v161 = *(_DWORD *)v167;
      *(_DWORD *)&v161[3] = *(_DWORD *)&v167[3];
      uint64_t v162 = 0;
      uint64_t v43 = v173;
      MLDataTable.init(contentsOf:options:)(object, &v145);
      char v44 = v41;
      if (v43)
      {
        os_log_type_t v45 = *(void (**)(void **, uint64_t))(*(void *)v182 + 8);
        v45(v41, v40);
        swift_bridgeObjectRelease(v183._countAndFlagsBits);
        swift_bridgeObjectRelease(v181[0]);
        swift_bridgeObjectRelease(v178._object);
        swift_bridgeObjectRelease(v176._object);
        return (void *)((uint64_t (*)(void, uint64_t))v45)(*(void *)v177, v40);
      }
      *(void *)&long long v173 = 0;
      v183._char object = v168;
      LOBYTE(v184) = v169;
      v89._uint64_t countAndFlagsBits = v178._countAndFlagsBits;
      v89._char object = *(void **)v181;
      MLDataTable.subscript.getter(v89);
      CMTime v90 = (void *)v145;
      char v91 = BYTE8(v145);
      if (BYTE8(v145)
        || (outlined copy of Result<_DataTable, Error>(v145, 0),
            v174._char object = v90,
            _UntypedColumn.type.getter(),
            CMTime v90 = v174._object,
            outlined consume of Result<_DataTable, Error>((uint64_t)v174._object, 0),
            (_BYTE)v168 != 2))
      {
        outlined consume of Result<_DataTable, Error>((uint64_t)v90, v91);
        swift_bridgeObjectRelease(v183._countAndFlagsBits);
        swift_bridgeObjectRelease(v178._object);
        swift_bridgeObjectRelease(v176._object);
        *(void *)&long long v145 = 0;
        *((void *)&v145 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease(BYTE8(v145));
        *(void *)&long long v145 = 0x206E6D756C6F43;
        *((void *)&v145 + 1) = 0xE700000000000000;
        v129._uint64_t countAndFlagsBits = v178._countAndFlagsBits;
        char v130 = v181[0];
        v129._char object = *(void **)v181;
        String.append(_:)(v129);
        swift_bridgeObjectRelease(v130);
        v129._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v129);
        long long v173 = v145;
        v129._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v129._object, 0, 0);
        *(_OWORD *)uint64_t v131 = v173;
        *(_OWORD *)(v131 + 16) = 0;
        *(_OWORD *)(v131 + 32) = 0;
        *(unsigned char *)(v131 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v129._object, v131, v132, v133, v134);
        unsigned int v121 = *(void (**)(void **, uint64_t))(*(void *)v182 + 8);
        unint64_t v123 = v44;
        uint64_t v122 = named;
        goto LABEL_31;
      }
      outlined copy of Result<_DataTable, Error>((uint64_t)v90, 0);
      _UntypedColumn.valueAtIndex(index:)(0, 0.0);
      unint64_t v93 = *((void *)&v145 + 1);
      uint64_t v92 = v145;
      if ((_BYTE)v146 != 2)
      {
        outlined consume of MLDataValue((void *)v145, *((void **)&v145 + 1), v146);
        uint64_t v92 = 0;
        unint64_t v93 = 0xE000000000000000;
      }
      outlined consume of Result<_DataTable, Error>((uint64_t)v174._object, 0);
      *(void *)&long long v145 = v92;
      *((void *)&v145 + 1) = v93;
      uint64_t v94 = String.init<A>(_:)(&v145, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      char v96 = v95;
      URL.init(fileURLWithPath:)(v94, v95);
      swift_bridgeObjectRelease(v96);
      double v97 = objc_opt_self(NSFileManager);
      id v98 = [v97 defaultManager];
      id v99 = v98;
      URL.path.getter(v98);
      char v101 = v100;
      NSString v102 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v101);
      unsigned __int8 v103 = [v99 fileExistsAtPath:v102];

      if (!v103)
      {
        uint64_t v104 = v174._object;
        outlined copy of Result<_DataTable, Error>((uint64_t)v174._object, 0);
        uint64_t v105 = specialized Array<A>.init(_:)((uint64_t)v104, 0, 0.0);
        uint64_t v106 = alloca(24);
        uint64_t v107 = alloca(32);
        *((void *)&v145 + 1) = *(void *)v177;
        uint64_t v108 = v173;
        unint64_t v109 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((void (*)(void *))partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:), (uint64_t)&v144, (uint64_t)v105);
        *(void *)&long long v173 = v108;
        swift_bridgeObjectRelease((_BYTE)v105);
        uint64_t v171 = &v144;
        *(void *)&long long v145 = v109;
        uint64_t v110 = alloca(24);
        uint64_t v111 = alloca(24);
        *((void *)&v145 + 1) = &v145;
        uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
        char v114 = v113;
        swift_bridgeObjectRelease(v145);
        uint64_t v115 = *(void *)v181;
        swift_bridgeObjectRetain(v181[0]);
        MLDataTable.willMutate()();
        *(void *)&long long v145 = ML14_UntypedColumnC_s5Error_pTgm5;
        BYTE8(v145) = v114 & 1;
        MLDataTable.setColumnImpl(newColumn:named:)((uint64_t)&v145, v178._countAndFlagsBits, v115);
        swift_bridgeObjectRelease(v115);
        outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v114);
        if (!(_BYTE)v184)
        {
          unint64_t v116 = v183._object;
          outlined copy of Result<_DataTable, Error>((uint64_t)v183._object, 0);
          _DataTable.columnNamesDidChange()();
          outlined consume of Result<_DataTable, Error>((uint64_t)v116, 0);
        }
      }
      uint64_t v117 = v173;
      char v118 = v181[0];
      char v119 = (char)v176._object;
      v142._char object = v176._object;
      v142._uint64_t countAndFlagsBits = v174._countAndFlagsBits;
      char v120 = (char)v178._object;
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v183._object, v178._countAndFlagsBits, *(void **)v181, *(void **)v175, (void *)v183._countAndFlagsBits, v176._countAndFlagsBits, 0.0, v178._object, v142);
      if (v117)
      {
        swift_bridgeObjectRelease(v118);
        swift_bridgeObjectRelease(v183._countAndFlagsBits);
        swift_bridgeObjectRelease(v120);
        swift_bridgeObjectRelease(v119);
        outlined consume of Result<_DataTable, Error>((uint64_t)v174._object, 0);
        unsigned int v121 = *(void (**)(void **, uint64_t))(*(void *)v182 + 8);
        uint64_t v122 = named;
        v121(v172, named);
        unint64_t v123 = v170;
LABEL_31:
        v121(v123, v122);
        v121(*(void ***)v177, v122);
        return (void *)outlined consume of Result<_DataTable, Error>((uint64_t)v183._object, v184);
      }
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v183._countAndFlagsBits);
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(v119);
      outlined consume of Result<_DataTable, Error>((uint64_t)v174._object, 0);
      double v139 = *(void (**)(void **, uint64_t))(*(void *)v182 + 8);
      uint64_t v140 = named;
      v139(v172, named);
      v139(v170, v140);
      v139(*(void ***)v177, v140);
LABEL_14:
      uint64_t result = v183._object;
      char v77 = v184;
      uint64_t v78 = v163;
      *unsigned long long v163 = v183._object;
      *((unsigned char *)v78 + 8) = v77;
      return result;
    case 1u:
      v183._uint64_t countAndFlagsBits = v9;
      *(void *)int64_t v181 = v10;
      id v47 = v178._object;
      uint64_t v48 = named;
      uint64_t v49 = *(void *)v182;
      (*(void (**)(void *, void **, uint64_t))(*(void *)v182 + 32))(v178._object, &v144, named);
      uint64_t v50 = *(void **)v175;
      static UTType.movie.getter();
      uint64_t v51 = v173;
      uint64_t v52 = static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)((uint64_t)v47, (uint64_t)v50);
      if (v51)
      {
        (*(void (**)(void, uint64_t))(*(void *)v181 + 8))(*(void *)v175, v183._countAndFlagsBits);
        return (void *)(*(uint64_t (**)(void *, uint64_t))(v49 + 8))(v178._object, v48);
      }
      uint64_t v124 = (uint64_t)v52;
      (*(void (**)(void, uint64_t))(*(void *)v181 + 8))(*(void *)v175, v183._countAndFlagsBits);
      static _VideoUtilities.generateVideoTable(_:)(v124);
      swift_bridgeObjectRelease(v124);
      uint64_t v135 = v145;
      char v136 = BYTE8(v145);
      v183._char object = (void *)v145;
      LOBYTE(v184) = BYTE8(v145) & 1;
      BYTE8(v145) &= 1u;
      outlined copy of Result<_DataTable, Error>(v145, v136);
      static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v145, 0x7461506F65646976, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000, 0, 0.0, 0, 0, 0);
      outlined consume of Result<_DataTable, Error>(v135, v136);
      uint64_t v138 = (uint64_t)v178._object;
      goto LABEL_33;
    case 2u:
      v183._uint64_t countAndFlagsBits = v9;
      *(void *)int64_t v181 = v10;
      uint64_t countAndFlagsBits = v178._countAndFlagsBits;
      uint64_t v54 = named;
      uint64_t v55 = *(void *)v182;
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v182 + 32))(v178._countAndFlagsBits, &v144, named);
      uint64_t v56 = v176._countAndFlagsBits;
      static UTType.movie.getter();
      uint64_t v57 = v173;
      uint64_t v58 = static _FileUtilities.collectFilesLabeledByFileName(at:type:)(countAndFlagsBits, v56);
      if (v57)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v181 + 8))(v176._countAndFlagsBits, v183._countAndFlagsBits);
        return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v178._countAndFlagsBits, v54);
      }
      uint64_t v125 = v58;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v181 + 8))(v176._countAndFlagsBits, v183._countAndFlagsBits);
      static _VideoUtilities.generateVideoTable(_:)(v125);
      swift_bridgeObjectRelease(v125);
      uint64_t v137 = v145;
      LOBYTE(v125) = BYTE8(v145);
      v183._char object = (void *)v145;
      LOBYTE(v184) = BYTE8(v145) & 1;
      BYTE8(v145) &= 1u;
      outlined copy of Result<_DataTable, Error>(v145, v125);
      static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v145, 0x7461506F65646976, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000, 0, 0.0, 0, 0, 0);
      outlined consume of Result<_DataTable, Error>(v137, v125);
      uint64_t v138 = v178._countAndFlagsBits;
LABEL_33:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v182 + 8))(v138, named);
      goto LABEL_14;
    case 3u:
      char v59 = v146;
      char v60 = v148;
      char v61 = (char)v150;
      outlined consume of Result<_DataTable, Error>((uint64_t)v144, v145);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v59);
      goto LABEL_12;
    case 4u:
      uint64_t named = *((void *)&v145 + 1);
      uint64_t v62 = (void *)v146;
      v176._char object = v147;
      uint64_t v63 = v148;
      *(void *)uint64_t v177 = v149;
      v178._char object = v150;
      v183._uint64_t countAndFlagsBits = v151;
      uint64_t v64 = (void *)v152;
      v183._char object = v144;
      LOBYTE(v184) = v145 & 1;
      *(void *)int64_t v181 = v144;
      v182[0] = v145;
      outlined copy of Result<_DataTable, Error>((uint64_t)v144, v145);
      uint64_t v65 = named;
      uint64_t named = v63;
      uint64_t v66 = (void *)v63;
      uint64_t v67 = v173;
      v141._char object = v64;
      v141._uint64_t countAndFlagsBits = v183._countAndFlagsBits;
      char v68 = (char)v178._object;
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v183._object, v65, v62, v176._object, v66, *(uint64_t *)v177, *(double *)a2.i64, v178._object, v141);
      if (!v67)
      {
        swift_bridgeObjectRelease((_BYTE)v62);
        swift_bridgeObjectRelease(named);
        swift_bridgeObjectRelease((_BYTE)v64);
        swift_bridgeObjectRelease(v68);
        outlined consume of Result<_DataTable, Error>(*(uint64_t *)v181, v182[0]);
        goto LABEL_14;
      }
      swift_bridgeObjectRelease((_BYTE)v62);
      swift_bridgeObjectRelease(named);
      swift_bridgeObjectRelease((_BYTE)v64);
      swift_bridgeObjectRelease(v68);
      outlined consume of Result<_DataTable, Error>(*(uint64_t *)v181, v182[0]);
      return (void *)outlined consume of Result<_DataTable, Error>((uint64_t)v183._object, v184);
    case 5u:
      uint64_t v69 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease(*(void **)((char *)&v144 + v69[12] + 8));
      swift_bridgeObjectRelease(*(void **)((char *)&v144 + v69[16] + 8));
      swift_bridgeObjectRelease(*(void **)((char *)&v144 + v69[20] + 8));
      (*(void (**)(void **, void *))(v183._countAndFlagsBits + 8))(&v144, v176._object);
LABEL_12:
      uint64_t empty = tc_v1_sframe_create_empty(0);
      if (!empty) {
        BUG();
      }
      uint64_t v71 = empty;
      uint64_t v72 = type metadata accessor for CMLTable();
      uint64_t v73 = swift_allocObject(v72, 24, 7);
      *(void *)(v73 + 16) = v71;
      uint64_t v74 = type metadata accessor for _DataTable();
      swift_allocObject(v74, 40, 7);
      v183._char object = (void *)_DataTable.init(impl:)(v73);
      LOBYTE(v184) = 0;
      os_log_type_t v75 = static os_log_type_t.info.getter();
      v76._uint64_t countAndFlagsBits = 0xD0000000000000A7;
      v76._char object = "array has unexpected dimension." + 0x8000000000000000;
      log(_:type:)(v76, v75);
      goto LABEL_14;
    case 6u:
      uint64_t v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      uint64_t v80 = v79[12];
      v178._char object = *(void **)((char *)&v144 + v80);
      *(void *)uint64_t v182 = *(void **)((char *)&v144 + v80 + 8);
      uint64_t v81 = v79[16];
      v178._uint64_t countAndFlagsBits = *(uint64_t *)((char *)&v144 + v81);
      *(void *)int64_t v181 = *(void **)((char *)&v144 + v81 + 8);
      uint64_t v82 = v79[20];
      *(void *)uint64_t v175 = *(void **)((char *)&v144 + v82);
      uint64_t named = *(uint64_t *)((char *)&v144 + v82 + 8);
      uint64_t v83 = v79[24];
      v176._uint64_t countAndFlagsBits = *(uint64_t *)((char *)&v144 + v83);
      *(void *)uint64_t v177 = *(void **)((char *)&v144 + v83 + 8);
      uint64_t v84 = v174._countAndFlagsBits;
      id v85 = v176._object;
      uint64_t v86 = v183._countAndFlagsBits;
      (*(void (**)(uint64_t, void **, void *))(v183._countAndFlagsBits + 32))(v174._countAndFlagsBits, &v144, v176._object);
      uint64_t v87 = (uint64_t)v171;
      *(double *)a2.i64 = (*(double (**)(void **, uint64_t, void *))(v86 + 16))(v171, v84, v85);
      uint64_t v88 = v173;
      MLDataTable.init(_:convertArraysToShapedArrays:)(v87, 0, a2);
      if (v88)
      {
        (*(void (**)(uint64_t, void *))(v183._countAndFlagsBits + 8))(v174._countAndFlagsBits, v176._object);
        swift_bridgeObjectRelease(v181[0]);
        swift_bridgeObjectRelease(v182[0]);
        swift_bridgeObjectRelease(named);
        return (void *)swift_bridgeObjectRelease(v177[0]);
      }
      uint64_t v126 = v174._countAndFlagsBits;
      v183._char object = (void *)v145;
      LOBYTE(v184) = BYTE8(v145);
      char v127 = v177[0];
      v143._char object = *(void **)v177;
      v143._uint64_t countAndFlagsBits = v176._countAndFlagsBits;
      char v128 = named;
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v183._object, (uint64_t)v178._object, *(void **)v182, (void *)v178._countAndFlagsBits, *(void **)v181, *(uint64_t *)v175, *(double *)a2.i64, (void *)named, v143);
      (*(void (**)(uint64_t, void *))(v183._countAndFlagsBits + 8))(v126, v176._object);
      swift_bridgeObjectRelease(v182[0]);
      swift_bridgeObjectRelease(v181[0]);
      swift_bridgeObjectRelease(v127);
      swift_bridgeObjectRelease(v128);
      goto LABEL_14;
  }
}

uint64_t *closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:)(void *a1)
{
  int64_t v11 = v1;
  uint64_t v2 = type metadata accessor for URL(0);
  uint64_t v12 = *(void *)(v2 - 8);
  int64_t v3 = *(void *)(v12 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  URL.appendingPathComponent(_:)(*a1, a1[1]);
  uint64_t v6 = URL.path.getter();
  uint64_t v8 = v7;
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(&v10, v2);
  uint64_t result = v11;
  *int64_t v11 = v6;
  result[1] = v8;
  return result;
}

void static _VideoUtilities.renameVideoColumns(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *_, uint64_t a8, void *a9)
{
  uint64_t v12 = a9;
  v13._char object = _;
  if (_)
  {
    v14._uint64_t countAndFlagsBits = 0x7472617473;
    v13._uint64_t countAndFlagsBits = a6;
    v14._char object = (void *)0xE500000000000000;
    DataFrame.renameColumn(_:to:)(v13, v14);
    uint64_t v12 = a9;
  }
  if (v12)
  {
    v15._uint64_t countAndFlagsBits = a8;
    v16._char object = (void *)0xE300000000000000;
    v16._uint64_t countAndFlagsBits = 6581861;
    v15._char object = v12;
    DataFrame.renameColumn(_:to:)(v15, v16);
  }
  v17._uint64_t countAndFlagsBits = 0x7461506F65646976;
  v17._char object = (void *)0xE900000000000068;
  v18._uint64_t countAndFlagsBits = a2;
  v18._char object = a3;
  DataFrame.renameColumn(_:to:)(v18, v17);
  v19._uint64_t countAndFlagsBits = 0x6C6562616CLL;
  v18._uint64_t countAndFlagsBits = a4;
  v18._char object = a5;
  v19._char object = (void *)0xE500000000000000;
  DataFrame.renameColumn(_:to:)(v18, v19);
}

void static _VideoUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v18 = v7;
  v21._char object = a6;
  v23._uint64_t countAndFlagsBits = a4;
  uint64_t v22 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v10, v17);
  inited[2] = 3;
  inited[3] = 6;
  v21._uint64_t countAndFlagsBits = a2;
  inited[4] = a2;
  inited[5] = a3;
  inited[6] = v23._countAndFlagsBits;
  inited[7] = a5;
  inited[8] = v21._object;
  inited[9] = a7;
  Swift::String _ = a3;
  swift_bridgeObjectRetain((_BYTE)a3);
  Swift::String v19 = a5;
  swift_bridgeObjectRetain((_BYTE)a5);
  swift_bridgeObjectRetain((_BYTE)a7);
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xEC00000061746164, 0x2065727574616546));
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (!v12)
  {
    v13._uint64_t countAndFlagsBits = 0x5F6E6F6973736573;
    v13._char object = (void *)0xEA00000000006469;
    v14._uint64_t countAndFlagsBits = v21._countAndFlagsBits;
    v14._char object = _;
    DataFrame.renameColumn(_:to:)(v14, v13);
    v15._uint64_t countAndFlagsBits = 0x746E696F7079656BLL;
    v15._char object = (void *)0xE900000000000073;
    v14._uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    v14._char object = v19;
    DataFrame.renameColumn(_:to:)(v14, v15);
    v16._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v16._char object = (void *)0xE500000000000000;
    v14._uint64_t countAndFlagsBits = (uint64_t)v21._object;
    v14._char object = a7;
    DataFrame.renameColumn(_:to:)(v14, v16);
  }
}

void *static _VideoUtilities.videoURLsPerClass(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v49 = type metadata accessor for URL(0);
  uint64_t v50 = *(void *)(v49 - 8);
  int64_t v3 = *(void *)(v50 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  char v60 = &v47;
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  outlined init with copy of MLHandActionClassifier.DataSource(a1, (uint64_t)&v47);
  if (swift_getEnumCaseMultiPayload(&v47, v6) == 3)
  {
    char v10 = v50;
    char v11 = v52;
    char v12 = (char)v54;
    outlined consume of Result<_DataTable, Error>(v47, v48);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    return _swiftEmptyDictionarySingleton;
  }
  else
  {
    static _VideoUtilities.getVideoURLsAndAnnotations(from:)(a1, a2);
    if (v2)
    {
      Swift::String v13 = v2;
      swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)&v47);
    }
    else
    {
      uint64_t v63 = &v47;
      uint64_t v59 = 0;
      Swift::String v14 = v65;
      unsigned int v15 = v66;
      outlined copy of Result<_DataTable, Error>((uint64_t)v65, v66);
      v16._uint64_t countAndFlagsBits = 0x6C6562616CLL;
      v16._char object = (void *)0xE500000000000000;
      specialized MLDataTable.subscript.getter(v16, (uint64_t)v14, v15, v17, v18);
      uint64_t v62 = v14;
      outlined consume of Result<_DataTable, Error>((uint64_t)v14, v15);
      uint64_t v19 = v74;
      char v20 = v75;
      specialized MLDataColumn.dropDuplicates()(v74, v75);
      outlined consume of Result<_DataTable, Error>(v19, v20);
      Swift::String v21 = specialized Array<A>.init(_:)((uint64_t)v65, v66, *(double *)a2.i64);
      uint64_t v22 = v21[2];
      int v73 = v15;
      uint64_t v56 = v22;
      if (v22)
      {
        uint64_t v58 = v21 + 4;
        Swift::String v13 = _swiftEmptyDictionarySingleton;
        unint64_t v23 = 0;
        uint64_t v57 = v21;
        do
        {
          if (v23 >= v21[2]) {
            BUG();
          }
          uint64_t v51 = v13;
          unint64_t v52 = v23;
          char v61 = (void *)v58[2 * v23];
          uint64_t v24 = v58[2 * v23 + 1];
          uint64_t v25 = v62;
          uint64_t v65 = v62;
          char v26 = v73;
          LOBYTE(v66) = v73;
          outlined copy of Result<_DataTable, Error>((uint64_t)v62, v73);
          swift_bridgeObjectRetain(v24);
          v27._uint64_t countAndFlagsBits = 0x6C6562616CLL;
          v27._char object = (void *)0xE500000000000000;
          MLDataTable.subscript.getter(v27);
          outlined consume of Result<_DataTable, Error>((uint64_t)v25, v26);
          uint64_t v28 = (uint64_t)v69;
          LODWORD(v76) = v70;
          uint64_t v71 = (uint64_t)v69;
          char v72 = v70;
          uint64_t v67 = &type metadata for String;
          char v68 = &protocol witness table for String;
          uint64_t v65 = v61;
          uint64_t v66 = v24;
          uint64_t v53 = v24;
          swift_bridgeObjectRetain(v24);
          static MLUntypedColumn.== infix(_:_:)((uint64_t)&v71, &v65);
          outlined consume of Result<_DataTable, Error>(v28, v76);
          __swift_destroy_boxed_opaque_existential_1Tm(&v65);
          uint64_t v76 = v74;
          LOBYTE(v24) = v75;
          uint64_t v69 = v25;
          unsigned __int8 v70 = v26;
          uint64_t v71 = v74;
          char v72 = v75;
          outlined copy of Result<_DataTable, Error>((uint64_t)v25, v26);
          MLDataTable.subscript.getter((uint64_t)&v71);
          outlined consume of Result<_DataTable, Error>(v76, v24);
          outlined consume of Result<_DataTable, Error>((uint64_t)v25, v26);
          uint64_t v29 = v65;
          LODWORD(v24) = v66;
          outlined copy of Result<_DataTable, Error>((uint64_t)v65, v66);
          v27._uint64_t countAndFlagsBits = 0x7461506F65646976;
          v27._char object = (void *)0xE900000000000068;
          specialized MLDataTable.subscript.getter(v27, (uint64_t)v29, v24, v30, v31);
          uint64_t v54 = v29;
          int v64 = v24;
          outlined consume of Result<_DataTable, Error>((uint64_t)v29, v24);
          uint64_t v32 = v74;
          LOBYTE(v24) = v75;
          specialized MLDataColumn.dropDuplicates()(v74, v75);
          outlined consume of Result<_DataTable, Error>(v32, v24);
          uint64_t v33 = specialized Array<A>.init(_:)((uint64_t)v65, v66, *(double *)a2.i64);
          Swift::String v34 = v33;
          int64_t v35 = v33[2];
          if (v35)
          {
            uint64_t v65 = _swiftEmptyArrayStorage;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
            uint64_t v36 = v65;
            uint64_t v55 = v34;
            uint64_t v37 = v34 + 5;
            uint64_t v38 = v35;
            do
            {
              uint64_t v76 = v38;
              uint64_t v48 = *(v37 - 1);
              uint64_t v39 = *v37;
              swift_bridgeObjectRetain(*v37);
              uint64_t v40 = v76;
              URL.init(fileURLWithPath:)(v48, v39);
              swift_bridgeObjectRelease(v39);
              uint64_t v65 = v36;
              unint64_t v41 = v36[2];
              unint64_t v42 = v41 + 1;
              if (v36[3] >> 1 <= v41)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36[3] >= 2uLL, v41 + 1, 1);
                unint64_t v42 = v41 + 1;
                uint64_t v40 = v76;
                uint64_t v36 = v65;
              }
              v36[2] = v42;
              (*(void (**)(char *, uint64_t *, uint64_t))(v50 + 32))((char *)v36+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v41, v60, v49);
              v37 += 2;
              uint64_t v38 = v40 - 1;
            }
            while (v38);
            swift_bridgeObjectRelease((_BYTE)v55);
          }
          else
          {
            swift_bridgeObjectRelease((_BYTE)v33);
            uint64_t v36 = _swiftEmptyArrayStorage;
          }
          unint64_t v23 = v52 + 1;
          uint64_t v43 = v51;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
          uint64_t v65 = v43;
          LOBYTE(v43) = v53;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v36, (uint64_t)v61, v53, isUniquelyReferenced_nonNull_native);
          Swift::String v13 = v65;
          swift_bridgeObjectRelease((_BYTE)v43);
          swift_bridgeObjectRelease(0);
          outlined consume of Result<_DataTable, Error>((uint64_t)v54, v64);
          Swift::String v21 = v57;
        }
        while (v23 != v56);
        swift_bridgeObjectRelease((_BYTE)v57);
      }
      else
      {
        swift_bridgeObjectRelease((_BYTE)v21);
        Swift::String v13 = _swiftEmptyDictionarySingleton;
      }
      uint64_t v45 = (uint64_t)v63;
      outlined consume of Result<_DataTable, Error>((uint64_t)v62, v73);
      outlined destroy of MLHandActionClassifier.DataSource(v45);
    }
  }
  return v13;
}

void *static _VideoUtilities.keypointsToMultiArray(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)a1;
  uint64_t v3 = a1 & 0xFFFFFFFFFFFFF8;
  if ((a1 & 0x4000000000000001) != 0)
  {
    if (a1) {
      uint64_t v3 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (v4 <= 0)
  {
    uint64_t v40 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(3);
    id v15 = objc_allocWithZone((Class)NSNumber);
    [v15 initWithInteger:1];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
    uint64_t v16 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16);
    specialized ContiguousArray._endMutation()(v16);
    id v17 = objc_allocWithZone((Class)NSNumber);
    [v17 initWithInteger:3];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
    uint64_t v18 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18);
    specialized ContiguousArray._endMutation()(v18);
    id v19 = objc_allocWithZone((Class)NSNumber);
    [v19 initWithInteger:18];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    uint64_t v20 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20);
    specialized ContiguousArray._endMutation()(v20);
    uint64_t v2 = _swiftEmptyArrayStorage;
    objc_allocWithZone((Class)MLMultiArray);
    id v21 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
    if (!v1)
    {
      uint64_t v2 = v21;
      uint64_t v22 = UnsafeMutableBufferPointer.init(_:)(v2, &type metadata for Double);
      specialized UnsafeMutableBufferPointer.initialize(repeating:)(v22, v32, 0.0);
    }
  }
  else
  {
    uint64_t v5 = static _VideoUtilities.pickSinglePerson(_:)(a1);
    if (!v1)
    {
      if (v5)
      {
        uint64_t v40 = 0;
        uint64_t v6 = v5;
        id v7 = [v5 keypointsMultiArrayAndReturnError:&v40];
        uint64_t v8 = v7;
        uint64_t v9 = v40;
        if (v8)
        {
          uint64_t v2 = v8;
          id v39 = v6;
          v40;
          id v10 = [v2 shape];
          id v11 = v10;
          uint64_t v12 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
          uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

          ML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50113_s8CreateML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm(v13);
          swift_bridgeObjectRelease(v13);
          LOBYTE(v13) = specialized static Array<A>.== infix(_:_:)((uint64_t)ML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm, (uint64_t)&outlined read-only object #0 of static _VideoUtilities.keypointsToMultiArray(_:));
          swift_bridgeObjectRelease((_BYTE)ML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm);
          if (v13)
          {
          }
          else
          {
            uint64_t v33 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v33, 0, 0);
            *(void *)uint64_t v34 = 0xD00000000000002FLL;
            *(void *)(v34 + 8) = " a hand from an observation." + 0x8000000000000000;
            *(_OWORD *)(v34 + 16) = 0;
            *(_OWORD *)(v34 + 32) = 0;
            *(unsigned char *)(v34 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v33, v34, v35, v36, v37);
          }
        }
        else
        {
          uint64_t v2 = v40;
          _convertNSErrorToError(_:)(v9);

          swift_willThrow(v2, "keypointsMultiArrayAndReturnError:", v28, v29, v30, v31);
        }
      }
      else
      {
        uint64_t v23 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v23, 0, 0);
        *(void *)uint64_t v24 = 0xD00000000000002ELL;
        *(void *)(v24 + 8) = "est for current frame from " + 0x8000000000000000;
        *(_OWORD *)(v24 + 16) = 0;
        *(_OWORD *)(v24 + 32) = 0;
        *(unsigned char *)(v24 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v23, v24, v25, v26, v27);
      }
    }
  }
  return v2;
}

void specialized UnsafeMutableBufferPointer.initialize(repeating:)(uint64_t a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (a2 < 0) {
      BUG();
    }
    if (a2)
    {
      __m128i si128 = _mm_load_si128((const __m128i *)&xmmword_348AD0);
      uint64_t v4 = 0;
      __m128i v5 = _mm_load_si128((const __m128i *)&xmmword_346D80);
      __m128i v6 = _mm_xor_si128(_mm_shuffle_epi32((__m128i)(unint64_t)(a2 - 1), 68), v5);
      __m128i v7 = _mm_load_si128(&xmmword_348AE0);
      do
      {
        __m128i v8 = _mm_xor_si128(si128, v5);
        __m128i v9 = _mm_cmpgt_epi32(v8, v6);
        __m128i v10 = _mm_or_si128(_mm_shuffle_epi32(v9, 245), _mm_and_si128(_mm_shuffle_epi32(_mm_cmpeq_epi32(v8, v6), 245), v9));
        if (~_mm_cvtsi128_si32(v10)) {
          *(double *)(a1 + 8 * v4) = a3;
        }
        if (_mm_extract_epi8(_mm_xor_si128(v10, (__m128i)-1), 8)) {
          *(double *)(a1 + 8 * v4 + 8) = a3;
        }
        v4 += 2;
        __m128i si128 = _mm_add_epi64(si128, v7);
      }
      while (((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) != v4);
    }
  }
}

void *static _VideoUtilities.handKeypointsToMultiArray(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)a1;
  uint64_t v3 = a1 & 0xFFFFFFFFFFFFF8;
  if ((a1 & 0x4000000000000001) != 0)
  {
    if (a1) {
      uint64_t v3 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (v4 <= 0)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(3);
    id v15 = objc_allocWithZone((Class)NSNumber);
    id v16 = [v15 initWithInteger:1];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v17 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
    specialized ContiguousArray._endMutation()();
    id v18 = objc_allocWithZone((Class)NSNumber);
    id v19 = [v18 initWithInteger:3];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v20 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v19);
    specialized ContiguousArray._endMutation()();
    id v21 = objc_allocWithZone((Class)NSNumber);
    id v22 = [v21 initWithInteger:21];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v23 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v22);
    specialized ContiguousArray._endMutation()();
    uint64_t v2 = _swiftEmptyArrayStorage;
    objc_allocWithZone((Class)MLMultiArray);
    id v24 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
    if (!v1)
    {
      uint64_t v2 = v24;
      uint64_t v25 = UnsafeMutableBufferPointer.init(_:)(v2, &type metadata for Double);
      specialized UnsafeMutableBufferPointer.initialize(repeating:)(v25, v35, 0.0);
    }
  }
  else
  {
    __m128i v5 = static _VideoUtilities.pickSinglePerson(_:)(a1);
    if (!v1)
    {
      if (v5)
      {
        uint64_t v43 = 0;
        __m128i v6 = v5;
        id v7 = [v5 keypointsMultiArrayAndReturnError:&v43];
        __m128i v8 = v7;
        __m128i v9 = v43;
        if (v8)
        {
          uint64_t v2 = v8;
          id v42 = v6;
          v43;
          id v10 = [v2 shape];
          id v11 = v10;
          uint64_t v12 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
          uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

          ML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50113_s8CreateML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm(v13);
          swift_bridgeObjectRelease(v13);
          LOBYTE(v13) = specialized static Array<A>.== infix(_:_:)((uint64_t)ML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm, (uint64_t)&outlined read-only object #0 of static _VideoUtilities.handKeypointsToMultiArray(_:));
          swift_bridgeObjectRelease((_BYTE)ML15_VideoUtilitiesV21keypointsToMultiArrayySo07MLMultiH0CSaySo29VNRecognizedPointsObservationCGKFZSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAKSiTf3nnnpk_nTf1cn_nTm);
          if (v13)
          {
          }
          else
          {
            uint64_t v36 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v36, 0, 0);
            *(void *)uint64_t v37 = 0xD00000000000002FLL;
            *(void *)(v37 + 8) = " a hand from an observation." + 0x8000000000000000;
            *(_OWORD *)(v37 + 16) = 0;
            *(_OWORD *)(v37 + 32) = 0;
            *(unsigned char *)(v37 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v36, v37, v38, v39, v40);
          }
        }
        else
        {
          uint64_t v2 = v43;
          _convertNSErrorToError(_:)(v9);

          swift_willThrow(v2, "keypointsMultiArrayAndReturnError:", v31, v32, v33, v34);
        }
      }
      else
      {
        uint64_t v26 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v26, 0, 0);
        *(void *)uint64_t v27 = 0xD00000000000002CLL;
        *(void *)(v27 + 8) = "t keypoints to MlMultiArray." + 0x8000000000000000;
        *(_OWORD *)(v27 + 16) = 0;
        *(_OWORD *)(v27 + 32) = 0;
        *(unsigned char *)(v27 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v26, v27, v28, v29, v30);
      }
    }
  }
  return v2;
}

void *static _VideoUtilities.pickSinglePerson(_:)(uint64_t a1)
{
  uint64_t v15 = v1;
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFF8;
  if ((a1 & 0x4000000000000001) != 0)
  {
    if (a1) {
      uint64_t v2 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(a1);
  }
  uint64_t v4 = a1;
  if (v3)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000003) == 0, a1);
    if ((a1 & 0xC000000000000003) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    }
    else {
      id v5 = *(id *)(a1 + 32);
    }
    __m128i v6 = v5;
    if (v3 == 1)
    {
LABEL_14:
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      uint64_t v7 = 5;
      uint64_t v14 = v3;
      while (1)
      {
        uint64_t v8 = v7 - 4;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v7 - 4, (v4 & 0xC000000000000003) == 0, v4);
        id v9 = (v4 & 0xC000000000000003) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v4)
           : *(id *)(v4 + 8 * v7);
        id v10 = v9;
        BOOL v11 = __OFADD__(1, v8);
        uint64_t v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        static _VideoUtilities.measurePersonSize(_:)(v6);
        if (v15) {
          break;
        }
        static _VideoUtilities.measurePersonSize(_:)(v10);
        uint64_t v15 = 0;

        ++v7;
        uint64_t v4 = a1;
        if (v12 == v14) {
          goto LABEL_14;
        }
      }

      swift_bridgeObjectRelease(a1);
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    return 0;
  }
  return v6;
}

uint64_t static _VideoUtilities.resetMultiArray(_:with:)(void *a1, double a2)
{
  id v3 = a1;
  uint64_t result = UnsafeMutableBufferPointer.init(_:)(v3, &type metadata for Double);
  if (!v2 && result)
  {
    if (v5 < 0) {
      BUG();
    }
    if (v5)
    {
      unint64_t v7 = (v5 + 1) & 0xFFFFFFFFFFFFFFFELL;
      __m128i v8 = _mm_shuffle_epi32((__m128i)(unint64_t)(v5 - 1), 68);
      __m128i si128 = _mm_load_si128((const __m128i *)&xmmword_348AD0);
      uint64_t v10 = 0;
      __m128i v11 = _mm_load_si128((const __m128i *)&xmmword_346D80);
      __m128i v12 = _mm_xor_si128(v8, v11);
      __m128i v13 = _mm_load_si128(&xmmword_348AE0);
      do
      {
        __m128i v14 = _mm_xor_si128(si128, v11);
        __m128i v15 = _mm_cmpgt_epi32(v14, v12);
        __m128i v16 = _mm_or_si128(_mm_shuffle_epi32(v15, 245), _mm_and_si128(_mm_shuffle_epi32(_mm_cmpeq_epi32(v14, v12), 245), v15));
        if (~_mm_cvtsi128_si32(v16)) {
          *(double *)(result + 8 * v10) = a2;
        }
        if (_mm_extract_epi8(_mm_xor_si128(v16, (__m128i)-1), 8)) {
          *(double *)(result + 8 * v10 + 8) = a2;
        }
        v10 += 2;
        __m128i si128 = _mm_add_epi64(si128, v13);
      }
      while (v7 != v10);
    }
  }
  return result;
}

NSURL *VNVideoProcessor.__allocating_init(url:)(uint64_t a1)
{
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v2 = (NSURL *)objc_allocWithZone(ObjCClassFromMetadata);
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  uint64_t v5 = [(NSURL *)v2 initWithURL:v3];

  uint64_t v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return v5;
}

void closure #1 in static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(uint64_t))
{
  __m128i v8 = (uint64_t *)(a3 + 16);
  if (a2)
  {
    swift_beginAccess(v8, &v34, 1, 0);
    uint64_t v9 = *v8;
    *__m128i v8 = a2;
    swift_errorRetain(a2);
    uint64_t v10 = v9;
LABEL_12:
    swift_errorRelease(v10);
    return;
  }
  *(void *)&long long v35 = a6;
  uint64_t v12 = outlined bridged method (pb) of @objc VNRequest.results.getter(a1);
  if (!v12
    || (char v13 = v12, v14 = (uint64_t)specialized _arrayConditionalCast<A, B>(_:)(v12), swift_bridgeObjectRelease(v13), !v14))
  {
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v17._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    v17._char object = a7;
    String.append(_:)(v17);
    uint64_t v18 = type metadata accessor for URL(0);
    uint64_t v19 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    LOBYTE(v18) = (_BYTE)v21;
    v17._uint64_t countAndFlagsBits = v20;
    v17._char object = v21;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    v17._uint64_t countAndFlagsBits = 46;
    v17._char object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    long long v35 = v34;
    uint64_t v22 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v23 = swift_allocError(&type metadata for MLCreateError, v22, 0, 0);
    *(_OWORD *)uint64_t v24 = v34;
    *(_OWORD *)(v24 + 16) = 0;
    *(_OWORD *)(v24 + 32) = 0;
    *(unsigned char *)(v24 + 48) = 0;
    swift_beginAccess(v8, &v34, 1, 0);
    uint64_t v10 = *v8;
    *__m128i v8 = v23;
    goto LABEL_12;
  }
  if ((v14 & 0x4000000000000001) != 0)
  {
    uint64_t v31 = v14 & 0xFFFFFFFFFFFFF8;
    if (v14) {
      uint64_t v31 = v14;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    uint64_t v15 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8));
  }
  if (!v15)
  {
    __m128i v16 = (void *)(a5 + 16);
    swift_beginAccess(v16, v32, 1, 0);
    if (__OFADD__(1, *v16)) {
      BUG();
    }
    ++*v16;
  }
  uint64_t v25 = (void *)a8(v14);
  uint64_t v26 = (uint64_t *)(v35 + 16);
  swift_bridgeObjectRelease(v14);
  id v27 = v25;
  MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v27);
  uint64_t v28 = v33;
  swift_beginAccess(v26, &v34, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v29 = *(void *)(*v26 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
  uint64_t v30 = *v26;
  *(void *)(v30 + 16) = v29 + 1;
  *(void *)(v30 + 8 * v29 + 32) = v28;
  swift_endAccess(&v34);
}

NSURL *static _VideoUtilities.measurePersonSize(_:)(id a1)
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v30 = 0;
  id v2 = [a1 recognizedPointsForGroupKey:v1 error:&v30];
  id v3 = v2;

  id v4 = v30;
  if (!v3)
  {
    id v21 = v30;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v21, "recognizedPointsForGroupKey:error:", v22, v23, v24, v25);
    return __stack_chk_guard;
  }
  int64_t v5 = 0;
  uint64_t v28 = type metadata accessor for VNRecognizedPointKey(0);
  uint64_t v6 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNRecognizedPoint, VNRecognizedPoint_ptr);
  uint64_t v7 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, v28, v6, v7);
  v4;

  uint64_t v9 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v10 = ~(-1 << v9);
  if (v9 >= 64) {
    uint64_t v10 = -1;
  }
  unint64_t v11 = *(void *)(v8 + 64) & v10;
  int64_t v29 = (unint64_t)(v9 + 63) >> 6;
  __m128d v12 = (__m128d)xmmword_34CB40;
  __m128d v13 = (__m128d)xmmword_34CB50;
  while (1)
  {
    if (v11)
    {
      _BitScanForward64(&v14, v11);
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v5 << 6);
      goto LABEL_16;
    }
    int64_t v16 = v5 + 1;
    if (__OFADD__(1, v5)) {
      BUG();
    }
    if (v16 >= v29) {
      break;
    }
    unint64_t i = *(void *)(v8 + 8 * v16 + 64);
    if (i)
    {
      ++v5;
    }
    else
    {
      v5 += 2;
      if (v16 + 1 >= v29) {
        break;
      }
      unint64_t i = *(void *)(v8 + 8 * v16 + 72);
      if (!i)
      {
        int64_t v5 = v16 + 2;
        if (v16 + 2 >= v29) {
          break;
        }
        unint64_t i = *(void *)(v8 + 8 * v16 + 80);
        if (!i)
        {
          int64_t v5 = v16 + 3;
          if (v16 + 3 >= v29) {
            break;
          }
          for (unint64_t i = *(void *)(v8 + 8 * v16 + 88); !i; unint64_t i = *(void *)(v8 + 8 * v5 + 64))
          {
            if (__OFADD__(1, v5++)) {
              BUG();
            }
            if (v5 >= v29) {
              goto LABEL_25;
            }
          }
        }
      }
    }
    _BitScanForward64(&v18, i);
    unint64_t v11 = i & (i - 1);
    unint64_t v15 = v18 + (v5 << 6);
LABEL_16:
    id v19 = *(id *)(*(void *)(v8 + 56) + 8 * v15);
    [v19 confidence];
    if (*(float *)v13.f64 > 0.2)
    {
      [v19 location];
      [v19 location];
      [v19 location];
      [v19 location];
      __m128d v27 = v12;

      __m128d v12 = _mm_min_pd(v12, _mm_unpacklo_pd(v12, v13));
      __m128d v13 = _mm_max_pd(v13, _mm_unpacklo_pd(v27, v13));
    }
    else
    {
    }
  }
LABEL_25:
  swift_release();
  return __stack_chk_guard;
}

uint64_t specialized Double.init<A>(_:)(unint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v12[2] = v14;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(partial apply for closure #1 in closure #1 in Double.init<A>(_:), v12, a1, a2, &type metadata for Bool);
    swift_bridgeObjectRelease(a2);
    char v7 = v13[0];
  }
  else
  {
    id v3 = alloca(32);
    id v4 = alloca(32);
    v12[0] = partial apply for closure #1 in closure #1 in Double.init<A>(_:);
    v12[1] = v12;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      char v7 = (a1 > 0x20u || (v8 = 0x100003E01, !_bittest64(&v8, a1)))
        && (uint64_t v9 = (unsigned char *)_swift_stdlib_strtod_clocale(v13, v14)) != 0
        && *v9 == 0;
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
        uint64_t v6 = v11;
      }
      char v7 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v5, v6, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease(a2);
    }
  }
  if (v7) {
    return v14[0];
  }
  else {
    return 0;
  }
}

void closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(uint64_t a1, uint64_t a2)
{
  v5[0] = (uint64_t)v2;
  if (*(unsigned char *)(a1 + 16) == 3)
  {
    id v4 = *(void **)(a1 + 8);
    v5[0] = *(void *)a1;
    id v3 = (void *)v5[0];
    swift_retain();
    static _VideoUtilities.convertKeypointsSequenceToMultiArray(value:keypointsShape:)(v5, a2);
    outlined consume of MLDataValue(v3, v4, 3);
  }
  else
  {
    *id v2 = 0;
  }
}

id static _VideoUtilities.convertKeypointsSequenceToMultiArray(value:keypointsShape:)(uint64_t *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v4 = *a1;
  objc_allocWithZone((Class)MLMultiArray);
  swift_bridgeObjectRetain(a2);
  uint64_t v5 = 0;
  id result = @nonobjc MLMultiArray.init(shape:dataType:)(a2, 65600);
  if (result)
  {
    uint64_t v115 = a2;
    id v7 = result;
    uint64_t v109 = UnsafeMutableBufferPointer.init(_:)(v7, &type metadata for Double);
    id v126 = v7;
    unint64_t v116 = v3;
    swift_retain();
    uint64_t v8 = CMLSequence.size.getter();
    uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
    swift_release();
    if (v9 == 1)
    {
      uint64_t v107 = v4;
      double v10 = 0.0;
      long long v108 = 0;
      uint64_t v106 = v115 & 0xFFFFFFFFFFFFF8;
      swift_retain();
      while (1)
      {
        specialized EnumeratedSequence.Iterator.next()(v10);
        uint64_t v11 = (uint64_t)v111;
        __m128d v12 = v112;
        __m128d v13 = v113;
        char v14 = v114;
        uint64_t v117 = v113;
        uint64_t v124 = v112;
        unint64_t v121 = (unint64_t)v111;
        if (v114 != 3)
        {
          if (v114 == 255)
          {
            swift_release();
            MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v126);
            id result = v111;
            *unint64_t v116 = v111;
            return result;
          }

          swift_release();
          char v101 = v117;
          NSString v102 = v124;
          uint64_t v103 = v121;
          goto LABEL_81;
        }
        char v15 = (v115 & 0xC000000000000003) == 0;
        outlined copy of MLDataValue(v112, v113, 3u);
        outlined copy of MLDataValue(v12, v13, 3u);
        uint64_t v16 = CMLSequence.size.getter();
        int64_t v118 = specialized RandomAccessCollection<>.distance(from:to:)(0, v16);
        Swift::String v17 = v13;
        uint64_t v18 = v115;
        outlined consume of (offset: Int, element: MLDataValue)?(v11, v12, v17, 3);
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, v15, v18);
        if ((v18 & 0xC000000000000003) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v18);
        }
        else {
          id v19 = *(id *)(v18 + 40);
        }
        uint64_t v20 = v19;
        id v21 = [v19 integerValue];

        if ((id)v118 != v21)
        {

          swift_release();
          uint64_t v103 = v121;
          NSString v102 = v124;
          char v101 = v117;
          outlined consume of (offset: Int, element: MLDataValue)?(v121, v124, v117, 3);
          char v14 = 3;
LABEL_81:
          outlined consume of (offset: Int, element: MLDataValue)?(v103, v102, v101, v14);
          goto LABEL_78;
        }
        uint64_t v22 = v117;
        outlined copy of MLDataValue(v124, v117, 3u);
        if (CMLSequence.size.getter()) {
          break;
        }
        uint64_t v24 = v124;
LABEL_69:
        uint64_t v90 = v121;
        outlined consume of (offset: Int, element: MLDataValue)?(v121, v24, v22, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v90, v24, v22, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v90, v24, v22, 3);
      }
      uint64_t v23 = 0;
      uint64_t v24 = v124;
      while (1)
      {
        int64_t v110 = v23;
        swift_retain();
        uint64_t v25 = CMLSequence.value(at:)(v23);
        uint64_t v26 = v121;
        outlined consume of (offset: Int, element: MLDataValue)?(v121, v24, v22, 3);
        if (v5)
        {
LABEL_99:
          swift_unexpectedError(v5, "CreateML/SequenceType.swift", 27, 1, 36);
          BUG();
        }
        MLDataValue.init(_:)(v25, v10);
        uint64_t v125 = v111;
        char v119 = v112;
        char v27 = (char)v113;
        swift_retain();
        int64_t v118 = CMLSequence.size.getter();
        outlined consume of (offset: Int, element: MLDataValue)?(v26, v24, v22, 3);
        if (v110 >= v118) {
          BUG();
        }
        if (v27 != 3) {
          break;
        }
        uint64_t v28 = v125;
        int64_t v29 = v119;
        outlined copy of MLDataValue(v125, v119, 3u);
        outlined copy of MLDataValue(v28, v29, 3u);
        uint64_t v30 = CMLSequence.size.getter();
        if (CMLSequence.size.getter() < 0) {
          BUG();
        }
        uint64_t v31 = CMLSequence.size.getter();
        outlined consume of MLDataValue(v28, v29, 3);
        if (v30 < 0 || v31 < v30) {
          BUG();
        }
        uint64_t v32 = v29;
        if ((v115 & 0xC000000000000003) != 0)
        {
          id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v115);
        }
        else
        {
          if (*(void *)(v106 + 16) < 3uLL) {
            BUG();
          }
          id v33 = *(id *)(v115 + 48);
        }
        long long v34 = v33;
        id v35 = [v33 integerValue];

        if ((id)v30 != v35)
        {
          outlined consume of MLDataValue(v125, v32, 3);
          char v27 = 3;
          break;
        }
        uint64_t v36 = v125;
        swift_retain();
        if (CMLSequence.size.getter())
        {
          uint64_t v37 = 0;
          id v38 = v126;
          while (1)
          {
            swift_retain();
            int64_t v118 = v37;
            uint64_t v39 = CMLSequence.value(at:)(v37);
            outlined consume of MLDataValue(v36, v119, 3);
            if (v5) {
              goto LABEL_99;
            }
            switch(CMLFeatureValue.type.getter())
            {
              case 0u:
                uint64_t v40 = *(void *)(v39 + 16);
                swift_retain();
                double v123 = COERCE_DOUBLE(specialized handling<A, B>(_:_:)(v40));
                swift_release();
                swift_release();
                char object = 0;
                uint64_t v120 = 0;
                goto LABEL_36;
              case 1u:
                uint64_t v49 = *(void *)(v39 + 16);
                swift_retain();
                specialized handling<A, B>(_:_:)(v49);
                double v123 = v10;
                swift_release();
                uint64_t v50 = swift_release();
                LOBYTE(v50) = 1;
                goto LABEL_35;
              case 2u:
                swift_retain();
                Swift::String v46 = CMLFeatureValue.stringValue()();
                double v123 = *(double *)&v46._countAndFlagsBits;
                char object = v46._object;
                swift_release();
                if (v47)
                {
                  swift_errorRelease(v47);
                  BUG();
                }
                uint64_t v48 = swift_release();
                LOBYTE(v48) = 2;
                uint64_t v120 = v48;
                goto LABEL_41;
              case 3u:
                uint64_t v51 = *(void *)(v39 + 16);
                swift_retain();
                uint64_t v52 = specialized handling<A, B>(_:_:)(v51);
                if (!v52) {
                  BUG();
                }
                swift_release_n(v39);
                uint64_t v53 = type metadata accessor for CMLSequence();
                uint64_t v50 = swift_allocObject(v53, 25, 7);
                *(void *)(v50 + 16) = v52;
                double v123 = *(double *)&v50;
                *(unsigned char *)(v50 + 24) = 1;
                LOBYTE(v50) = 3;
LABEL_35:
                uint64_t v120 = v50;
                char object = 0;
                goto LABEL_36;
              case 4u:
                uint64_t v41 = *(void *)(v39 + 16);
                swift_retain();
                uint64_t v42 = specialized handling<A, B>(_:_:)(v41);
                if (!v42) {
                  BUG();
                }
                uint64_t v43 = type metadata accessor for CMLDictionary();
                uint64_t v44 = swift_allocObject(v43, 24, 7);
                *(void *)(v44 + 16) = v42;
                v104[0] = v44;
                v104[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
                v104[2] = 0;
                v104[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
                v104[4] = 0;
                v104[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
                v104[6] = 0;
                swift_retain();
                double v123 = COERCE_DOUBLE(specialized Dictionary.init<A>(uniqueKeysWithValues:)(v104));
                swift_release();
                uint64_t v45 = swift_release_n(v39);
                LOBYTE(v45) = 4;
                uint64_t v120 = v45;
                char object = 0;
                id v38 = v126;
LABEL_36:
                uint64_t v36 = v125;
                goto LABEL_41;
              case 5u:
                uint64_t v54 = swift_release();
                LOBYTE(v54) = 6;
                uint64_t v120 = v54;
                double v123 = 0.0;
                goto LABEL_40;
              case 6u:
                swift_retain();
                MLDataValue.MultiArrayType.init(from:)(v39);
                double v123 = *(double *)&v111;
                if (!v111) {
                  BUG();
                }
                uint64_t v55 = swift_release();
                LOBYTE(v55) = 5;
                uint64_t v120 = v55;
LABEL_40:
                char object = 0;
LABEL_41:
                swift_retain();
                uint64_t v56 = v36;
                uint64_t v57 = CMLSequence.size.getter();
                outlined consume of MLDataValue(v56, v119, 3);
                if (v118 >= v57) {
                  BUG();
                }
                uint64_t v105 = 0;
                id v58 = [v38 strides];
                id v59 = v58;
                uint64_t v60 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
                uint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v60);

                if ((v61 & 0xC000000000000003) != 0)
                {
                  id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v61);
                }
                else
                {
                  if (!*(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFF8))) {
                    BUG();
                  }
                  id v62 = *(id *)(v61 + 32);
                }
                uint64_t v63 = v62;
                swift_bridgeObjectRelease(v61);
                unint64_t v64 = (unint64_t)[v63 integerValue];

                unint64_t v66 = v64;
                uint64_t v65 = v121 * v64;
                if (!is_mul_ok(v121, v66)) {
                  BUG();
                }
                id v67 = [v38 strides];
                id v68 = v67;
                uint64_t v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v60);

                if ((v69 & 0xC000000000000003) != 0)
                {
                  id v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v69);
                }
                else
                {
                  if (*(void *)((char *)&dword_10 + (v69 & 0xFFFFFFFFFFFFF8)) < 2uLL) {
                    BUG();
                  }
                  id v70 = *(id *)(v69 + 40);
                }
                uint64_t v71 = v70;
                swift_bridgeObjectRelease(v69);
                unint64_t v72 = (unint64_t)[v71 integerValue];

                unint64_t v74 = v72;
                unint64_t v73 = v110 * v72;
                if (!is_mul_ok(v110, v74)) {
                  BUG();
                }
                BOOL v75 = __OFADD__(v73, v65);
                unint64_t v76 = v73 + v65;
                if (v75) {
                  BUG();
                }
                id v77 = [v126 strides];
                id v78 = v77;
                uint64_t v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v78, v60);

                if ((v79 & 0xC000000000000003) != 0)
                {
                  id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v79);
                }
                else
                {
                  if (*(void *)((char *)&dword_10 + (v79 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                    BUG();
                  }
                  id v80 = *(id *)(v79 + 48);
                }
                swift_bridgeObjectRelease(v79);
                unint64_t v81 = (unint64_t)[v80 integerValue];

                unint64_t v83 = v81;
                unint64_t v82 = v118 * v81;
                if (!is_mul_ok(v118, v83)) {
                  BUG();
                }
                BOOL v75 = __OFADD__(v82, v76);
                unint64_t v84 = v82 + v76;
                if (v75) {
                  BUG();
                }
                if ((_BYTE)v120)
                {
                  id v85 = v126;
                  uint64_t v36 = v125;
                  if (v120 != 1)
                  {
                    outlined consume of MLDataValue(*(void **)&v123, object, v120);
                    char v91 = v119;
                    outlined consume of MLDataValue(v36, v119, 3);
                    outlined consume of MLDataValue(v36, v91, 3);
                    uint64_t v92 = v121;
                    unint64_t v93 = v124;
                    uint64_t v94 = v117;
                    outlined consume of (offset: Int, element: MLDataValue)?(v121, v124, v117, 3);
                    outlined consume of (offset: Int, element: MLDataValue)?(v92, v93, v94, 3);

                    outlined consume of MLDataValue(v36, v91, 3);
                    uint64_t v95 = v92;
                    char v96 = v93;
                    double v97 = v94;
                    goto LABEL_77;
                  }
                  *(double *)(v109 + 8 * v84) = v123;
                }
                else
                {
                  double v10 = (double)SLODWORD(v123);
                  *(double *)(v109 + 8 * v84) = (double)SLODWORD(v123);
                  id v85 = v126;
                  uint64_t v36 = v125;
                }
                uint64_t v37 = v118 + 1;
                BOOL v86 = v37 == CMLSequence.size.getter();
                id v38 = v85;
                uint64_t v5 = v105;
                if (v86)
                {
                  uint64_t v87 = v119;
                  outlined consume of MLDataValue(v36, v119, 3);
                  outlined consume of MLDataValue(v36, v87, 3);
                  outlined consume of MLDataValue(v36, v87, 3);
                  goto LABEL_66;
                }
                break;
            }
          }
        }
        uint64_t v88 = v119;
        outlined consume of MLDataValue(v36, v119, 3);
        outlined consume of MLDataValue(v36, v88, 3);
        swift_release();
LABEL_66:
        uint64_t v23 = v110 + 1;
        uint64_t v24 = v124;
        uint64_t v89 = CMLSequence.size.getter();
        uint64_t v22 = v117;
        if (v23 == v89) {
          goto LABEL_69;
        }
      }
      outlined consume of MLDataValue(v125, v119, v27);
      uint64_t v98 = v121;
      id v99 = v124;
      char v100 = v117;
      outlined consume of (offset: Int, element: MLDataValue)?(v121, v124, v117, 3);
      outlined consume of (offset: Int, element: MLDataValue)?(v98, v99, v100, 3);

      uint64_t v95 = v98;
      char v96 = v99;
      double v97 = v100;
LABEL_77:
      outlined consume of (offset: Int, element: MLDataValue)?(v95, v96, v97, 3);
      swift_release();
    }
    else
    {
    }
LABEL_78:
    id result = v116;
    *unint64_t v116 = 0;
  }
  else
  {
    *id v3 = 0;
  }
  return result;
}

uint64_t specialized MLUntypedColumn.map<A>(skipUndefined:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v21 = a1;
  uint64_t v19 = v5;
  uint64_t v9 = swift_allocObject(&unk_39A330, 32, 7);
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  if (a5)
  {
    uint64_t v20 = a4;
    outlined copy of Result<_DataTable, Error>(a4, 1);
    swift_retain();
    outlined copy of Result<_DataTable, Error>(a4, 1);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v11 = _getErrorEmbeddedNSError<A>(_:)(&v20, v10, &protocol self-conformance witness table for Error);
    if (v11)
    {
      uint64_t v12 = v11;
      outlined consume of Result<_DataTable, Error>(a4, 1);
    }
    else
    {
      uint64_t v12 = swift_allocError(v10, &protocol self-conformance witness table for Error, 0, 0);
      *Swift::String v17 = v20;
    }
    char v16 = 1;
    uint64_t v15 = a4;
  }
  else
  {
    swift_retain();
    outlined copy of Result<_DataTable, Error>(a4, 0);
    uint64_t v13 = CMLColumn.apply(transform:type:skipUndefined:)((uint64_t)partial apply for specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:), v9, 6, v21);
    uint64_t v14 = type metadata accessor for _UntypedColumn();
    uint64_t v12 = swift_allocObject(v14, 24, 7);
    *(void *)(v12 + 16) = v13;
    uint64_t v15 = a4;
    char v16 = 0;
  }
  outlined consume of Result<_DataTable, Error>(v15, v16);
  swift_release();
  uint64_t result = v19;
  *(void *)uint64_t v19 = v12;
  *(unsigned char *)(v19 + 8) = a5 & 1;
  return result;
}

uint64_t specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1, void (*a2)(void *), double a3)
{
  swift_retain();
  MLDataValue.init(_:)(a1, a3);
  id v3 = (void *)v10[0];
  char v4 = v11;
  uint64_t v15 = (void *)v10[1];
  a2(v10);
  uint64_t v5 = v14;
  if (v14)
  {
    uint64_t v12 = &type metadata for MLDataValue.MultiArrayType;
    uint64_t v13 = &protocol witness table for MLDataValue.MultiArrayType;
    v10[0] = v14;
    __swift_project_boxed_opaque_existential_0Tm(v10, (uint64_t)&type metadata for MLDataValue.MultiArrayType);
    id v6 = v5;
    uint64_t v7 = MLDataValue.MultiArrayType.featureValue.getter();
    __swift_destroy_boxed_opaque_existential_1Tm(v10);
    outlined consume of MLDataValue(v3, v15, v4);

    return v7;
  }
  else
  {
    type metadata accessor for CMLFeatureValue();
    uint64_t v9 = CMLFeatureValue.__allocating_init()(0);
    outlined consume of MLDataValue(v3, v15, v4);
    return v9;
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed VNRequest, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  char v4 = *(void (**)(id, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v6 = a2;
  id v7 = a3;
  v4(v6, a3);
  swift_release(v5);
}

id @nonobjc VNDetectHumanBodyPoseRequest.init(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    aBlock[4] = a1;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed VNRequest, @guaranteed Error?) -> ();
    aBlock[3] = a3;
    char v4 = _Block_copy(aBlock);
    swift_release();
  }
  else
  {
    char v4 = 0;
  }
  id v5 = [v3 initWithCompletionHandler:v4];
  _Block_release(v4);
  return v5;
}

uint64_t sub_1747E3()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(uint64_t a1)
{
  closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_174815()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1, double a2)
{
  return specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(a1, *(void (**)(void *))(v2 + 16), a2);
}

void outlined consume of (offset: Int, element: MLDataValue)?(uint64_t a1, void *a2, void *a3, char a4)
{
  if (a4 != -1) {
    outlined consume of MLDataValue(a2, a3, a4);
  }
}

BOOL closure #1 in closure #1 in Double.init<A>(_:)(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = *a1;
  result = (v3 > 0x20 || (uint64_t v4 = 0x100003E01, !_bittest64(&v4, v3)))
        && (id v6 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v6 == 0;
  *uint64_t v2 = result;
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v2);
  return v2[16] != 0xFF;
}

{
  unsigned char v2[56];

  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v2);
  return specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)((uint64_t)v2);
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v12);
  unint64_t v3 = (void *)v12[0];
  uint64_t v4 = (void *)v12[1];
  uint64_t v16 = v12[2];
  uint64_t v14 = (void *)v12[3];
  uint64_t v15 = (void *)v12[4];
  unsigned __int8 v17 = v13;
  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v11);
  if (v11[16] == 0xFF) {
    BUG();
  }
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  unsigned __int8 v5 = v16;
  *(unsigned char *)(v2 + 16) = v16;
  id v6 = v14;
  *(void *)(v2 + 24) = v14;
  id v7 = v15;
  *(void *)(v2 + 32) = v15;
  uint64_t v8 = v3;
  unsigned __int8 v9 = v17;
  *(unsigned char *)(v2 + 40) = v17;
  outlined copy of MLDataValue(v8, v4, v5);
  return outlined copy of MLDataValue(v6, v7, v9);
}

{
  unsigned char v2[64];

  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v2);
  return specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)((uint64_t)v2);
}

uint64_t outlined bridged method (pb) of @objc VNRequest.results.getter(void *a1)
{
  id v1 = [a1 results];
  id v2 = v1;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNObservation, VNObservation_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

uint64_t outlined init with take of (MLDataValue, MLDataValue)?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t sub_174A67()
{
  swift_errorRelease(*(void *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_174A83()
{
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_174AA4()
{
  return objectdestroy_14Tm();
}

uint64_t partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, uint64_t a2)
{
  return partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, a2, "v24@?0@\"VNRequest\"8@\"NSError\"16" + 0x8000000000000000, (uint64_t (*)(uint64_t))static _VideoUtilities.handKeypointsToMultiArray(_:));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return swift_retain(v2);
}

uint64_t block_destroy_helper_5(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t outlined init with copy of MLHandActionClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLHandActionClassifier.DataSource(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLHandActionClassifier.DataSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t *partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:)(void *a1)
{
  return closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:)(a1);
}

BOOL partial apply for closure #1 in closure #1 in Double.init<A>(_:)(unsigned __int8 *a1)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1);
}

char partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_174B87()
{
  return objectdestroy_14Tm();
}

uint64_t partial apply for closure #1 in static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, uint64_t a2)
{
  return partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, a2, " frames with no person in view." + 0x8000000000000000, (uint64_t (*)(uint64_t))static _VideoUtilities.keypointsToMultiArray(_:));
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  uint64_t result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    lazy protocol witness table cache variable for type [String] and conformance <A> [A] = result;
  }
  return result;
}

uint64_t sub_174C03()
{
  return objectdestroy_14Tm();
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v7 = type metadata accessor for URL(0);
  uint64_t v1 = *(void *)(v7 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v8 = v1;
  uint64_t v3 = ~v2 & (v2 + 24);
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v3, v7);
  swift_release(*(void *)(v0 + v4));
  swift_release(*(void *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = *(void *)(type metadata accessor for URL(0) - 8);
  uint64_t v8 = ~*(unsigned __int8 *)(v7 + 80) & (*(unsigned __int8 *)(v7 + 80) + 24);
  unint64_t v9 = (v8 + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in static _VideoUtilities.getHumanKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, a2, *(void *)(v4 + 16), v4 + v8, *(void *)(v4 + v9), *(void *)(v4 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), a3, a4);
  return v11;
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  return block_copy_helper_5(a1, a2);
}

uint64_t sub_174D40()
{
  return sub_1747E3();
}

uint64_t block_destroy_helper_23(uint64_t a1)
{
  return block_destroy_helper_5(a1);
}

uint64_t MLFewShotSoundClassifier.validationData(features:labels:device:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v24 = a2;
  v21[5] = v3;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarType?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  unint64_t v9 = alloca(v7);
  uint64_t v22 = type metadata accessor for Tensor(0);
  int64_t v10 = *(void *)(*(void *)(v22 - 8) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v23 = v19;
  unsigned __int8 v13 = alloca(v10);
  uint64_t v14 = alloca(v10);
  v20[2] = v5;
  v20[3] = a3;
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5((void (*)(id *))partial apply for closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:), v20, (uint64_t)v24);
  v21[2] = a3;
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5((void (*)(id *))partial apply for closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:), v21, a1);
  uint64_t v16 = type metadata accessor for ScalarType(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v16);
  Tensor.init(concatenating:alongAxis:scalarType:)(v15, 0, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v16);
  unsigned __int8 v17 = v23;
  Tensor.init(stacking:alongAxis:scalarType:)(v24, 0, v19);
  return DataSample.init(features:labels:)(v19, v17, v22, v22);
}

uint64_t closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(uint64_t *a1, void *a2, void (*a3)(void *, uint64_t))
{
  uint64_t v53 = a3;
  id v50 = a2;
  uint64_t v43 = v3;
  uint64_t v38 = type metadata accessor for FloatingPointRoundingRule(0);
  uint64_t v39 = *(void *)(v38 - 8);
  int64_t v4 = *(void *)(v39 + 64);
  uint64_t v5 = alloca(v4);
  id v6 = alloca(v4);
  uint64_t v40 = &v37;
  id v52 = (id)type metadata accessor for ScalarType(0);
  uint64_t v41 = *((void *)v52 - 1);
  int64_t v7 = *(void *)(v41 + 64);
  uint64_t v8 = alloca(v7);
  unint64_t v9 = alloca(v7);
  uint64_t v42 = &v37;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v44 = type metadata accessor for Tensor(0);
  uint64_t v48 = *(void *)(v44 - 8);
  int64_t v13 = *(void *)(v48 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v51 = &v37;
  uint64_t v16 = alloca(v13);
  unsigned __int8 v17 = alloca(v13);
  uint64_t v47 = &v37;
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  uint64_t v49 = &v37;
  uint64_t v20 = alloca(v13);
  int v21 = alloca(v13);
  uint64_t v22 = *a1;
  uint64_t v23 = (void *)a1[1];
  uint64_t v24 = type metadata accessor for ComputeDevice(0);
  Swift::String v46 = *(void (**)(uint64_t *, void (*)(void, void), uint64_t))(*(void *)(v24 - 8) + 16);
  v46(&v37, (void (*)(void, void))v53, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)&v37, 0, 1, v24);
  uint64_t v45 = &v37;
  Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)(v22, v50, &v37, 1.0, 0.0);
  id v50 = v23;
  id v25 = MLMultiArray.cast(to:)((unsigned char *)&loc_1001D + 3);
  v46(&v37, (void (*)(void, void))v53, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)&v37, 0, 1, v24);
  id v52 = v25;
  uint64_t v26 = v47;
  Tensor.init(_:device:)(v52, &v37, COERCE_DOUBLE(1065353216), 0.0);
  char v27 = v49;
  Tensor.squeezingShape(at:)(&outlined read-only object #1 of closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:));
  uint64_t v28 = v48;
  uint64_t v29 = v44;
  uint64_t v53 = *(void (**)(void *, uint64_t))(v48 + 8);
  v53(v26, v44);
  uint64_t v30 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v28 + 16);
  v30(v26, v27, v29);
  uint64_t v31 = v51;
  uint64_t v32 = v45;
  v30(v51, v45, v29);
  id v33 = v32;
  DataSample.init(features:labels:)(v26, v31, v29, v29);
  long long v34 = v49;

  id v35 = (uint64_t (*)(uint64_t *, uint64_t))v53;
  v53(v34, v29);
  return v35(v33, v29);
}

uint64_t closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  v11[2] = v3;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  id v6 = alloca(v4);
  id v7 = [*a1 integerValue];
  uint64_t v8 = *(void *)(*(void *)(a2 + *(int *)(type metadata accessor for MLFewShotSoundClassifier(0) + 32)) + 16);
  uint64_t v9 = type metadata accessor for ComputeDevice(0);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v11, v12, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v9);
  return Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)(v7, v8, v11, 1.0, 0.0);
}

uint64_t partial apply for closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:)(id *a1)
{
  return closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:)(void **a1, uint64_t a2, double a3, double a4)
{
  uint64_t v38 = a2;
  uint64_t v37 = v4;
  uint64_t v29 = type metadata accessor for FloatingPointRoundingRule(0);
  uint64_t v30 = *(void *)(v29 - 8);
  int64_t v6 = *(void *)(v30 + 64);
  id v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v31 = &v28;
  uint64_t v34 = type metadata accessor for ScalarType(0);
  uint64_t v35 = *(void *)(v34 - 8);
  int64_t v9 = *(void *)(v35 + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v36 = &v28;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?)
                              - 8)
                  + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v32 = type metadata accessor for Tensor(0);
  uint64_t v33 = *(void *)(v32 - 8);
  int64_t v15 = *(void *)(v33 + 64);
  uint64_t v16 = alloca(v15);
  unsigned __int8 v17 = alloca(v15);
  uint64_t v39 = &v28;
  uint64_t v18 = *a1;
  id v19 = MLMultiArray.cast(to:)((unsigned char *)&loc_1001D + 3);
  if (v5)
  {
    swift_errorRelease(v5);
    uint64_t v20 = type metadata accessor for ComputeDevice(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(&v28, v38, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)&v28, 0, 1, v20);
    id v21 = v18;
    Tensor.init(_:device:)(v21, &v28, a3, a4);
    uint64_t v22 = v36;
    (*(void (**)(uint64_t *, void, uint64_t))(v35 + 104))(v36, enum case for ScalarType.float32(_:), v34);
    uint64_t v23 = v31;
    uint64_t v24 = v29;
    uint64_t v25 = v30;
    (*(void (**)(uint64_t *, void, uint64_t))(v30 + 104))(v31, enum case for FloatingPointRoundingRule.towardZero(_:), v29);
    Tensor.cast(to:roundingRule:)(v22, v23);
    (*(void (**)(uint64_t *, uint64_t))(v25 + 8))(v23, v24);
    (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v36, v34);
    (*(void (**)(uint64_t *, uint64_t))(v33 + 8))(v39, v32);
  }
  else
  {
    uint64_t v26 = v19;
    uint64_t v27 = type metadata accessor for ComputeDevice(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(&v28, v38, v27);
    __swift_storeEnumTagSinglePayload((uint64_t)&v28, 0, 1, v27);
    Tensor.init(_:device:)(v26, &v28, a3, a4);
  }
}

void partial apply for closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:)(void **a1, double a2, double a3)
{
  closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:)(a1, *(void *)(v3 + 16), a2, a3);
}

void *initializeBufferWithCopyOfBuffer for AnyTreeClassifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~v4));
    swift_retain(v11);
  }
  else
  {
    *(void *)a1 = *a2;
    uint64_t v5 = a2[1];
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 16) = v6;
    uint64_t v16 = a2[3];
    char v7 = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 24) = v16;
    *(unsigned char *)(a1 + 32) = v7;
    uint64_t v14 = a2[5];
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v15 = a2[7];
    *(void *)(a1 + 56) = v15;
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v13 = a1 + v8;
    uint64_t v9 = (uint64_t)a2 + v8;
    uint64_t v10 = type metadata accessor for BaseTreeClassifier(0);
    unsigned __int8 v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v17(v13, v9, v10);
  }
  return v3;
}

uint64_t destroy for AnyTreeClassifier(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  uint64_t v2 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for BaseTreeClassifier(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  uint64_t v13 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 32) = v5;
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v12;
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v6;
  uint64_t v7 = v6 + a2;
  uint64_t v8 = type metadata accessor for BaseTreeClassifier(0);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v14(v10, v7, v8);
  return a1;
}

uint64_t assignWithCopy for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = v16 + a2;
  uint64_t v19 = type metadata accessor for BaseTreeClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v3 = *(int *)(a3 + 32);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = v3 + a2;
  uint64_t v6 = type metadata accessor for BaseTreeClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v4, v5, v6);
  return a1;
}

uint64_t assignWithTake for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = v11 + a2;
  uint64_t v14 = type metadata accessor for BaseTreeClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_175962);
}

uint64_t sub_175962(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*(void *)(a1 + 8) & 0xFFFFFFFF00000001) == 0) {
      return (*(void *)(a1 + 8) >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for BaseTreeClassifier(0);
    return __swift_getEnumTagSinglePayload(*(int *)(a3 + 32) + a1, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1759EA);
}

uint64_t sub_1759EA(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v5 = type metadata accessor for BaseTreeClassifier(0);
    return __swift_storeEnumTagSinglePayload(*(int *)(a4 + 32) + a1, a2, a2, v5);
  }
  return result;
}

uint64_t type metadata accessor for AnyTreeClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for AnyTreeClassifier;
  if (!type metadata singleton initialization cache for AnyTreeClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnyTreeClassifier);
  }
  return result;
}

uint64_t type metadata completion function for AnyTreeClassifier(uint64_t a1)
{
  v3[0] = &unk_34CB78;
  v3[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v3[2] = &unk_34CB90;
  void v3[3] = &unk_34CBA8;
  uint64_t result = type metadata accessor for BaseTreeClassifier(319);
  if (v2 <= 0x3F)
  {
    void v3[4] = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in AnyTreeClassifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type AnyTreeClassifierModel and conformance AnyTreeClassifierModel, type metadata accessor for AnyTreeClassifierModel, (uint64_t)&protocol conformance descriptor for AnyTreeClassifierModel);
}

uint64_t AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a5;
  uint64_t v8 = v5;
  uint64_t v53 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v54 = *(void *)(v53 - 8);
  int64_t v9 = *(void *)(v54 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v55 = &v43;
  uint64_t v51 = type metadata accessor for BaseTreeClassifier(0);
  uint64_t v52 = *(void *)(v51 - 8);
  int64_t v12 = *(void *)(v52 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  id v58 = &v43;
  *(void *)uint64_t v8 = a2;
  uint64_t v15 = a1;
  *(void *)(v8 + 8) = a3;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = 0xD000000000000013;
  *(void *)(v8 + 56) = "raining samples." + 0x8000000000000000;
  int64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v56 = v8;
    v59[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a4);
    int64_t v47 = v16;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = (void *)v59[0];
    uint64_t v18 = specialized _NativeSet.startIndex.getter(a1);
    uint64_t v20 = v19;
    char v22 = v21 & 1;
    uint64_t v48 = a1;
    do
    {
      if (v18 < 0 || v18 >= 1 << *(unsigned char *)(v15 + 32)) {
        BUG();
      }
      uint64_t v23 = *(void *)(v15 + 8 * ((unint64_t)v18 >> 6) + 56);
      if (!_bittest64(&v23, v18)) {
        BUG();
      }
      if (*(_DWORD *)(v15 + 36) != v20) {
        BUG();
      }
      uint64_t v45 = v20;
      uint64_t v24 = *(void *)(v15 + 48);
      unint64_t v25 = *(void *)(v24 + 16 * v18 + 8);
      uint64_t v26 = *(void *)(v24 + 16 * v18);
      if (!v25) {
        uint64_t v26 = 0;
      }
      uint64_t v46 = v26;
      unint64_t v27 = v25;
      if (!v25) {
        unint64_t v27 = 0xE000000000000000;
      }
      v59[0] = (uint64_t)v17;
      unint64_t v28 = v17[2];
      unint64_t v29 = v17[3];
      uint64_t v44 = v17;
      unint64_t v49 = v29;
      unint64_t v30 = v29 >> 1;
      int64_t v57 = v28 + 1;
      swift_bridgeObjectRetain(v25);
      BOOL v31 = v30 <= v28;
      uint64_t v17 = v44;
      if (v31)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 >= 2, v57, 1);
        uint64_t v17 = (void *)v59[0];
      }
      v17[2] = v57;
      uint64_t v32 = 2 * v28;
      v17[v32 + 4] = v46;
      v17[v32 + 5] = v27;
      uint64_t v15 = v48;
      int64_t v33 = specialized _NativeSet.index(after:)(v18, v45, v22 & 1, v48);
      uint64_t v18 = v33;
      uint64_t v20 = v34;
      char v22 = v35 & 1;
      --v47;
    }
    while (v47);
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v33, v34, v35 & 1);
    swift_bridgeObjectRelease(v15);
    uint64_t v36 = v17;
    uint64_t v8 = v56;
  }
  else
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(a1);
    uint64_t v36 = _swiftEmptyArrayStorage;
  }
  v59[0] = (uint64_t)v36;
  swift_bridgeObjectRetain((_BYTE)v36);
  specialized MutableCollection<>.sort(by:)(v59, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease((_BYTE)v36);
  *(void *)(v8 + 24) = v59[0];
  *(unsigned char *)(v8 + 32) = 1;
  uint64_t v37 = v55;
  uint64_t v38 = v50;
  uint64_t v39 = v53;
  uint64_t v40 = v54;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v54 + 16))(v55, v50, v53);
  BaseTreeClassifier.init(configuration:)(v37);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
  uint64_t v41 = type metadata accessor for AnyTreeClassifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v52 + 32))(v8 + *(int *)(v41 + 32), v58, v51);
}

{
  uint64_t v5;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52[6];

  uint64_t v41 = a5;
  uint64_t v8 = v5;
  uint64_t v44 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v45 = *(void *)(v44 - 8);
  int64_t v9 = *(void *)(v45 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int64_t v47 = &v38;
  uint64_t v42 = type metadata accessor for BaseTreeClassifier(0);
  uint64_t v43 = *(void *)(v42 - 8);
  int64_t v12 = *(void *)(v43 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v51 = &v38;
  *(void *)uint64_t v8 = a2;
  *(void *)(v8 + 8) = a3;
  uint64_t v15 = a1;
  *(void *)(v8 + 16) = a4;
  int64_t v16 = *(void *)(a1 + 16);
  uint64_t v46 = a4;
  if (v16)
  {
    uint64_t v48 = v8;
    v52[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a4);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = (void *)v52[0];
    uint64_t v18 = specialized _NativeSet.startIndex.getter(a1);
    uint64_t v20 = v19;
    char v22 = v21 & 1;
    uint64_t v40 = a1;
    do
    {
      if (v18 < 0 || v18 >= 1 << *(unsigned char *)(v15 + 32)) {
        BUG();
      }
      uint64_t v23 = *(void *)(v15 + 8 * ((unint64_t)v18 >> 6) + 56);
      if (!_bittest64(&v23, v18)) {
        BUG();
      }
      if (*(_DWORD *)(v15 + 36) != v20) {
        BUG();
      }
      uint64_t v24 = *(void *)(v15 + 48);
      unint64_t v25 = *(unsigned char *)(v24 + 16 * v18 + 8) == 0;
      uint64_t v39 = v16;
      if (v25) {
        uint64_t v26 = *(void *)(v24 + 16 * v18);
      }
      else {
        uint64_t v26 = 0;
      }
      v52[0] = (uint64_t)v17;
      unint64_t v27 = v17[2];
      unint64_t v28 = v17[3];
      if (v28 >> 1 <= v27)
      {
        unint64_t v49 = v20;
        uint64_t v50 = v26;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 >= 2, v27 + 1, 1);
        uint64_t v26 = v50;
        LODWORD(v20) = v49;
        uint64_t v17 = (void *)v52[0];
      }
      v17[2] = v27 + 1;
      v17[v27 + 4] = v26;
      uint64_t v15 = v40;
      unint64_t v29 = specialized _NativeSet.index(after:)(v18, v20, v22 & 1, v40);
      uint64_t v18 = v29;
      uint64_t v20 = v30;
      char v22 = v31 & 1;
      int64_t v16 = v39 - 1;
    }
    while (v39 != 1);
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v29, v30, v31 & 1);
    swift_bridgeObjectRelease(v15);
    uint64_t v8 = v48;
  }
  else
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(a1);
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  v52[0] = (uint64_t)v17;
  swift_bridgeObjectRetain((_BYTE)v17);
  specialized MutableCollection<>.sort(by:)(v52, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease((_BYTE)v17);
  *(void *)(v8 + 24) = v52[0];
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = v46;
  *(void *)(v8 + 48) = 0xD000000000000013;
  *(void *)(v8 + 56) = "raining samples." + 0x8000000000000000;
  uint64_t v32 = v47;
  int64_t v33 = v41;
  uint64_t v34 = v44;
  char v35 = v45;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v45 + 16))(v47, v41, v44);
  BaseTreeClassifier.init(configuration:)(v32);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  uint64_t v36 = type metadata accessor for AnyTreeClassifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v43 + 32))(v8 + *(int *)(v36 + 32), v51, v42);
}

uint64_t AnyTreeClassifier.makeTransformer()()
{
  uint64_t v2 = v0;
  uint64_t v13 = type metadata accessor for BaseTreeClassifierModel(0);
  uint64_t v14 = *(void *)(v13 - 8);
  int64_t v3 = *(void *)(v14 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v17 = *v1;
  uint64_t v6 = v1[1];
  char v7 = *((unsigned char *)v1 + 32);
  uint64_t v15 = v1[3];
  uint64_t v18 = *(void *)(v15 + 16);
  type metadata accessor for AnyTreeClassifier(0);
  uint64_t v19 = v6;
  swift_bridgeObjectRetain(v6);
  int64_t v16 = &v12;
  BaseTreeClassifier.makeTransformer(classCount:featureCount:)(v18, 0);
  *(void *)uint64_t v2 = v17;
  *(void *)(v2 + 8) = v19;
  uint64_t v8 = type metadata accessor for AnyTreeClassifierModel(0);
  *(void *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v14 + 32))(v2 + *(int *)(v8 + 24), v16, v13);
  uint64_t v9 = *(int *)(v8 + 28);
  char v10 = v15;
  *(void *)(v2 + v9) = v15;
  *(unsigned char *)(v2 + v9 + 8) = v7 & 1;
  return swift_bridgeObjectRetain(v10);
}

uint64_t AnyTreeClassifier.update(_:with:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5[6] = v4;
  v5[5] = a4;
  v5[4] = a3;
  void v5[3] = a2;
  _OWORD v5[2] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  v5[10] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnyColumn(0);
  v5[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[12] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v11);
  v5[14] = swift_task_alloc(v11);
  return swift_task_switch(AnyTreeClassifier.update(_:with:eventHandler:), 0, 0);
}

uint64_t AnyTreeClassifier.update(_:with:eventHandler:)(double a1)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  ML16ColumnDescriptorVsAE_pTg5 = (void *)v2[2];
  uint64_t v4 = v2;
  if (!ML16ColumnDescriptorVsAE_pTg5)
  {
    unint64_t v30 = *(uint64_t **)(v1 + 16);
    uint64_t v12 = *(void *)(v1 + 24);
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 16);
    uint64_t v14 = swift_task_alloc(32);
    *(void *)(v14 + 16) = v12;
    swift_bridgeObjectRetain(v13);
    ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((void (*)(void *, uint64_t *))partial apply for closure #1 in FeatureVectorizer.fitted(to:), v14, v13);
    swift_bridgeObjectRelease(v13);
    swift_task_dealloc(v14);
    uint64_t v2 = v30;
    outlined consume of FeatureVectorizer<Float>.Transformer?(v30[2], v30[3], v30[4]);
    void v30[2] = (uint64_t)ML16ColumnDescriptorVsAE_pTg5;
    v30[3] = 0xD000000000000013;
    v30[4] = (uint64_t)("raining samples." + 0x8000000000000000);
    uint64_t v4 = *(uint64_t **)(v1 + 16);
  }
  uint64_t v20 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v5 = *(int *)(v20 + 28);
  uint64_t v6 = *(uint64_t *)((char *)v4 + v5);
  if (*(void *)(v6 + 16))
  {
    char v7 = *((unsigned char *)v4 + v5 + 8);
  }
  else
  {
    BOOL v31 = v2;
    uint64_t v33 = *(void *)(v1 + 112);
    uint64_t v37 = *(void *)(v1 + 88);
    uint64_t v15 = *(void *)(v1 + 80);
    DataFrame.subscript.getter(**(void **)(v1 + 48), *(void *)(*(void *)(v1 + 48) + 8));
    __swift_storeEnumTagSinglePayload(v15, 1, 1, v37);
    uint64_t v16 = static Labels.collected(from:_:)(v33, v15);
    uint64_t v28 = *(void *)(v1 + 112);
    uint64_t v34 = *(void *)(v1 + 96);
    uint64_t v17 = *(void *)(v1 + 88);
    uint64_t v38 = v16;
    LOBYTE(v15) = v19;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v1 + 80), &demangling cache variable for type metadata for AnyColumn?);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v28, v17);
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v5));
    char v7 = v15;
    uint64_t v6 = v38;
    *(uint64_t *)((char *)v4 + v5) = v38;
    *((unsigned char *)v4 + v5 + 8) = v15 & 1;
    uint64_t v2 = v31;
    ML16ColumnDescriptorVsAE_pTg5 = (void *)v31[2];
  }
  char v29 = v7;
  uint64_t v35 = v6;
  if (!ML16ColumnDescriptorVsAE_pTg5) {
    BUG();
  }
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(*(void *)(v1 + 24), 0, (uint64_t)ML16ColumnDescriptorVsAE_pTg5, v2[3], v2[4]);
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v25 = *(void *)(v1 + 96);
  uint64_t v26 = *(void *)(v1 + 88);
  uint64_t v21 = *(void *)(v1 + 72);
  uint64_t v32 = *(void *)(v1 + 64);
  uint64_t v27 = *(void *)(v1 + 56);
  uint64_t v22 = *(void *)(v1 + 40);
  uint64_t v23 = *(void *)(v1 + 32);
  uint64_t v24 = *(void *)(v1 + 16);
  DataFrame.subscript.getter(**(void **)(v1 + 48), *(void *)(*(void *)(v1 + 48) + 8));
  uint64_t v36 = Labels.encodeAnnotations(_:)(v8, v35, v29 & 1, a1);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v8, v26);
  type metadata accessor for AnyTreeClassifier(0);
  BaseTreeClassifier.update(_:features:annotations:eventHandler:)(v24 + *(int *)(v20 + 24), v21, v36, v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v21, v27);
  swift_bridgeObjectRelease((_BYTE)v36);
  uint64_t v9 = *(void *)(v1 + 104);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 80);
  swift_task_dealloc(*(void *)(v1 + 112));
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  return specialized MutableCollection<>.sort(by:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(void))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
}

uint64_t AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v105 = a4;
  uint64_t v97 = a3;
  uint64_t v8 = v6;
  uint64_t v103 = a2;
  uint64_t v92 = v7;
  uint64_t v87 = a6;
  uint64_t v88 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v89 = *(void *)(v88 - 8);
  int64_t v10 = *(void *)(v89 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  unint64_t v82 = &v79;
  uint64_t v81 = type metadata accessor for BaseTreeClassifier(0);
  uint64_t v80 = *(void *)(v81 - 8);
  int64_t v13 = *(void *)(v80 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  BOOL v86 = &v79;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v84 = *(void *)(v94 - 8);
  int64_t v16 = *(void *)(v84 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  unint64_t v83 = &v79;
  int64_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>)
                              - 8)
                  + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  id v99 = &v79;
  int64_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  id v85 = &v79;
  uint64_t v25 = alloca(v22);
  uint64_t v26 = alloca(v22);
  long long v108 = &v79;
  uint64_t v27 = type metadata accessor for AnyColumn(0);
  uint64_t v107 = *(void *)(v27 - 8);
  int64_t v28 = *(void *)(v107 + 64);
  char v29 = alloca(v28);
  unint64_t v30 = alloca(v28);
  char v100 = &v79;
  BOOL v31 = alloca(v28);
  uint64_t v32 = alloca(v28);
  unint64_t v93 = &v79;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v98 = *(void *)(v90 - 8);
  int64_t v33 = *(void *)(v98 + 64);
  uint64_t v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  char v91 = &v79;
  int64_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>)
                              - 8)
                  + 64);
  uint64_t v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v104 = &v79;
  *uint64_t v8 = v97;
  v8[1] = v105;
  _OWORD v8[2] = a5;
  void v8[5] = a5;
  v8[6] = 0xD000000000000013;
  uint64_t v95 = v8;
  v8[7] = (uint64_t)("raining samples." + 0x8000000000000000);
  swift_bridgeObjectRetain(a5);
  uint64_t v39 = AnyColumn.wrappedElementType.getter();
  uint64_t v40 = swift_dynamicCastMetatype(v39, &type metadata for String);
  uint64_t v106 = v27;
  uint64_t v96 = a1;
  if (v40)
  {
    uint64_t v105 = v40;
    uint64_t v41 = v91;
    double v42 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
    char v101 = 0;
    unint64_t v102 = 0xE000000000000000;
    uint64_t v43 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v44 = v90;
    uint64_t v97 = v43;
    OptionalColumnProtocol.filled(with:)(&v101, v90, v43);
    uint64_t v98 = *(void *)(v98 + 8);
    ((void (*)(uint64_t *, uint64_t, double))v98)(v41, v44, v42);
    uint64_t v45 = specialized Set.init<A>(_:)();
    uint64_t v46 = (uint64_t)v108;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v103, (uint64_t)v108, &demangling cache variable for type metadata for AnyColumn?);
    uint64_t v47 = v46;
    uint64_t v48 = v106;
    if (__swift_getEnumTagSinglePayload(v47, 1, v106) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v108, &demangling cache variable for type metadata for AnyColumn?);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v107 + 32))(v93, v108, v48);
      uint64_t v55 = v91;
      double v56 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
      char v101 = 0;
      unint64_t v102 = 0xE000000000000000;
      uint64_t v57 = v90;
      OptionalColumnProtocol.filled(with:)(&v101, v90, v97);
      ((void (*)(uint64_t *, uint64_t, double))v98)(v55, v57, v56);
      uint64_t v58 = specialized Set.init<A>(_:)();
      uint64_t v45 = specialized Set.union<A>(_:)(v58, v45);
      (*(void (**)(uint64_t *, uint64_t))(v107 + 8))(v93, v106);
    }
    swift_bridgeObjectRetain(v45);
    id v59 = specialized _copyCollectionToContiguousArray<A>(_:)(v45);
    swift_bridgeObjectRelease(v45);
    char v101 = v59;
    uint64_t v60 = v92;
    specialized MutableCollection<>.sort(by:)(&v101);
  }
  else
  {
    unint64_t v49 = v83;
    if (!swift_dynamicCastMetatype(v39, &type metadata for Int))
    {
      uint64_t v61 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v61, 0, 0);
      *(void *)uint64_t v62 = 0xD000000000000025;
      *(void *)(v62 + 8) = "start time column" + 0x8000000000000000;
      *(_OWORD *)(v62 + 16) = 0;
      *(_OWORD *)(v62 + 32) = 0;
      *(unsigned char *)(v62 + 48) = 1;
      swift_willThrow(&type metadata for MLCreateError, v61, v62, v63, v64, v65);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v103, &demangling cache variable for type metadata for AnyColumn?);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v96, v106);
      unint64_t v66 = v95;
      swift_bridgeObjectRelease(v95[1]);
      swift_bridgeObjectRelease(v66[2]);
      swift_bridgeObjectRelease(v66[5]);
      return swift_bridgeObjectRelease(v66[7]);
    }
    uint64_t v105 = 0;
    double v50 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
    char v101 = 0;
    uint64_t v51 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v52 = v94;
    long long v108 = (uint64_t *)v51;
    OptionalColumnProtocol.filled(with:)(&v101, v94, v51);
    uint64_t v104 = *(uint64_t **)(v84 + 8);
    ((void (*)(uint64_t *, uint64_t, double))v104)(v49, v52, v50);
    uint64_t v45 = (uint64_t)specialized Set.init<A>(_:)();
    uint64_t v53 = (uint64_t)v85;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v103, (uint64_t)v85, &demangling cache variable for type metadata for AnyColumn?);
    uint64_t v54 = v106;
    if (__swift_getEnumTagSinglePayload(v53, 1, v106) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for AnyColumn?);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v107 + 32))(v100, v53, v54);
      double v68 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
      char v101 = 0;
      uint64_t v69 = v94;
      OptionalColumnProtocol.filled(with:)(&v101, v94, v108);
      ((void (*)(uint64_t *, uint64_t, double))v104)(v49, v69, v68);
      id v70 = specialized Set.init<A>(_:)();
      uint64_t v45 = specialized Set.union<A>(_:)((uint64_t)v70, v45);
      (*(void (**)(uint64_t *, uint64_t))(v107 + 8))(v100, v106);
    }
    swift_bridgeObjectRetain(v45);
    uint64_t v71 = specialized _copyCollectionToContiguousArray<A>(_:)(v45);
    swift_bridgeObjectRelease(v45);
    char v101 = v71;
    uint64_t v60 = v92;
    specialized MutableCollection<>.sort(by:)(&v101);
  }
  uint64_t v72 = v105;
  if (v60)
  {
    swift_release();
    BUG();
  }
  long long v108 = 0;
  swift_bridgeObjectRelease(v45);
  unint64_t v73 = v95;
  v95[3] = (uint64_t)v101;
  *((unsigned char *)v73 + 32) = v72 != 0;
  unint64_t v74 = v82;
  uint64_t v75 = v87;
  uint64_t v76 = v88;
  uint64_t v77 = v89;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v89 + 16))(v82, v87, v88);
  BaseTreeClassifier.init(configuration:)(v74);
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v103, &demangling cache variable for type metadata for AnyColumn?);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v96, v106);
  uint64_t v78 = type metadata accessor for AnyTreeClassifier(0);
  return (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v80 + 32))((char *)v95 + *(int *)(v78 + 32), v86, v81);
}

uint64_t AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v98 = v6;
  uint64_t v77 = a4;
  uint64_t v78 = a3;
  uint64_t v86 = a2;
  uint64_t v97 = a1;
  unint64_t v73 = v5;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v95 = v70;
  uint64_t v85 = type metadata accessor for DataFrame(0);
  uint64_t v90 = *(void *)(v85 - 8);
  int64_t v11 = *(void *)(v90 + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v89 = v70;
  uint64_t v87 = type metadata accessor for BaseTreeClassifierModel(0);
  uint64_t v81 = *(void *)(v87 - 8);
  int64_t v14 = *(void *)(v81 + 64);
  uint64_t v15 = alloca(v14);
  int64_t v16 = alloca(v14);
  uint64_t v80 = v70;
  uint64_t v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  unint64_t v82 = v70;
  int64_t v19 = alloca(v14);
  uint64_t v20 = alloca(v14);
  uint64_t v88 = v70;
  uint64_t v75 = type metadata accessor for AnyColumn(0);
  uint64_t v72 = *(void *)(v75 - 8);
  int64_t v21 = *(void *)(v72 + 64);
  int64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v76 = v70;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  uint64_t v24 = *(void *)(v91 - 8);
  int64_t v25 = *(void *)(v24 + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v79 = v70;
  int64_t v28 = alloca(v25);
  char v29 = alloca(v25);
  uint64_t v96 = v70;
  uint64_t v30 = v7[5];
  uint64_t v84 = v7[6];
  unint64_t v74 = v7;
  uint64_t v31 = v7[7];
  uint64_t v71 = v97;
  swift_bridgeObjectRetain(v30);
  uint64_t v32 = v98;
  ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((void (*)(void *, uint64_t *))closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v70, v30);
  uint64_t result = swift_bridgeObjectRelease(v30);
  if (!v32)
  {
    uint64_t v92 = v24;
    swift_bridgeObjectRetain(v31);
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)((uint64_t)v97, 0, (uint64_t)ML16ColumnDescriptorVsAE_pTg5, v84, v31);
    uint64_t v98 = 0;
    uint64_t v94 = ML16ColumnDescriptorVsAE_pTg5;
    uint64_t v93 = v31;
    uint64_t v35 = v74;
    uint64_t v36 = v74[3];
    int v83 = *((unsigned __int8 *)v74 + 32);
    uint64_t v37 = (uint64_t)v76;
    DataFrame.subscript.getter(*v74, v74[1]);
    uint64_t v97 = Labels.encodeAnnotations(_:)(v37, v36, v83, a5);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v38(v37, v75);
    uint64_t v39 = (uint64_t)v95;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v86, (uint64_t)v95, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v40 = v85;
    if (__swift_getEnumTagSinglePayload(v39, 1, v85) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v39, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v41 = *(void *)(v35[3] + 16);
      type metadata accessor for AnyTreeClassifier(0);
      double v42 = v96;
      uint64_t v43 = v98;
      BaseTreeClassifier.fitted(features:annotations:classCount:eventHandler:)(v96, v97, v41, v78, v77);
      (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v42, v91);
      uint64_t v98 = v43;
      if (v43)
      {
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease((_BYTE)v94);
        return swift_bridgeObjectRelease((_BYTE)v97);
      }
      swift_bridgeObjectRelease((_BYTE)v97);
      unint64_t v49 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v81 + 32);
      v49(v88, v80, v87);
    }
    else
    {
      uint64_t v44 = v89;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v90 + 32))(v89, v39, v40);
      uint64_t v45 = (uint64_t)v44;
      char v46 = (char)v94;
      char v47 = v93;
      uint64_t v48 = v98;
      specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)(v45, 0, (uint64_t)v94, v84, v93);
      uint64_t v98 = v48;
      if (v48)
      {
        swift_bridgeObjectRelease(v47);
        swift_bridgeObjectRelease(v46);
        swift_bridgeObjectRelease((_BYTE)v97);
        (*(void (**)(unsigned char *, uint64_t))(v90 + 8))(v89, v40);
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v92 + 8))(v96, v91);
      }
      uint64_t v35 = v74;
      uint64_t v95 = (void *)v74[3];
      LODWORD(v86) = *((unsigned __int8 *)v74 + 32);
      uint64_t v50 = (uint64_t)v76;
      DataFrame.subscript.getter(*v74, v74[1]);
      uint64_t v95 = Labels.encodeAnnotations(_:)(v50, (uint64_t)v95, v86, a5);
      v38(v50, v75);
      uint64_t v51 = *(void *)(v35[3] + 16);
      type metadata accessor for AnyTreeClassifier(0);
      char v52 = (char)v97;
      uint64_t v53 = v51;
      uint64_t v54 = v79;
      uint64_t v55 = v98;
      BaseTreeClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)(v96, v97, v79, v95, v53, v78, v77);
      uint64_t v98 = v55;
      double v56 = v89;
      if (v55)
      {
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease((_BYTE)v94);
        swift_bridgeObjectRelease((_BYTE)v95);
        swift_bridgeObjectRelease(v52);
        uint64_t v57 = *(void (**)(unsigned char *, uint64_t))(v92 + 8);
        uint64_t v58 = v54;
        uint64_t v59 = v91;
        v57(v58, v91);
        (*(void (**)(unsigned char *, uint64_t))(v90 + 8))(v56, v85);
        return ((uint64_t (*)(unsigned char *, uint64_t))v57)(v96, v59);
      }
      swift_bridgeObjectRelease((_BYTE)v95);
      swift_bridgeObjectRelease(v52);
      uint64_t v60 = v54;
      uint64_t v61 = *(void (**)(unsigned char *, uint64_t))(v92 + 8);
      uint64_t v62 = v56;
      uint64_t v63 = v91;
      v61(v60, v91);
      (*(void (**)(unsigned char *, uint64_t))(v90 + 8))(v62, v85);
      v61(v96, v63);
      unint64_t v49 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v81 + 32);
      v49(v88, v82, v87);
    }
    uint64_t v97 = (void *)*v35;
    uint64_t v96 = (unsigned char *)v35[1];
    uint64_t v64 = type metadata accessor for AnyTreeClassifierModel(0);
    uint64_t v65 = v73;
    v49((unsigned char *)v73 + *(int *)(v64 + 24), v88, v87);
    uint64_t v66 = v35[3];
    char v67 = *((unsigned char *)v35 + 32);
    *uint64_t v65 = v97;
    char v68 = (char)v96;
    v65[1] = v96;
    v65[2] = v94;
    v65[3] = v84;
    v65[4] = v93;
    uint64_t v69 = *(int *)(v64 + 28);
    *(void *)((char *)v65 + v69) = v66;
    *((unsigned char *)v65 + v69 + 8) = v67;
    swift_bridgeObjectRetain(v66);
    return swift_bridgeObjectRetain(v68);
  }
  return result;
}

uint64_t AnyTreeClassifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = v2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v15 = a1;
  long long v13 = *(_OWORD *)(a1 + 16);
  uint64_t v14 = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
  uint64_t v6 = lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?();
  uint64_t result = ((uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dispatch thunk of EstimatorEncoder.encode<A>(_:))(&v13, v5, v6, v4, v17, v7);
  if (!v2)
  {
    uint64_t v9 = *(int *)(type metadata accessor for AnyTreeClassifierModel(0) + 24) + v15;
    uint64_t v17 = *(void *)(a2 + 24);
    uint64_t v16 = *(void *)(a2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(a2, v17);
    uint64_t v10 = type metadata accessor for BaseTreeClassifierModel(0);
    uint64_t v11 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseTreeClassifierModel and conformance BaseTreeClassifierModel, (uint64_t (*)(uint64_t))&type metadata accessor for BaseTreeClassifierModel, (uint64_t)&protocol conformance descriptor for BaseTreeClassifierModel);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)(v9, v10, v11, v17, v16, v12, v13, *((void *)&v13 + 1), v14);
  }
  return result;
}

uint64_t AnyTreeClassifier.decode(from:)(uint64_t a1)
{
  uint64_t v29 = v2;
  int64_t v22 = v3;
  int64_t v21 = v1;
  uint64_t v26 = type metadata accessor for BaseTreeClassifierModel(0);
  uint64_t v23 = *(void *)(v26 - 8);
  int64_t v4 = *(void *)(v23 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v27 = v20;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v9 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer, (uint64_t)&protocol conformance descriptor for FeatureVectorizer<A>.Transformer);
  uint64_t v10 = v29;
  uint64_t result = dispatch thunk of EstimatorDecoder.decode<A>(_:)(v7, v7, v9, v8, v30);
  if (!v10)
  {
    uint64_t v29 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v30 = v20[3];
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v28 = *(void *)(a1 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(a1, v12);
    uint64_t v13 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseTreeClassifierModel and conformance BaseTreeClassifierModel, (uint64_t (*)(uint64_t))&type metadata accessor for BaseTreeClassifierModel, (uint64_t)&protocol conformance descriptor for BaseTreeClassifierModel);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)(v26, v26, v13, v12, v28);
    uint64_t v14 = v22;
    uint64_t v28 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v15 = type metadata accessor for AnyTreeClassifierModel(0);
    uint64_t v16 = v21;
    (*(void (**)(char *, void *, uint64_t))(v23 + 32))((char *)v21 + *(int *)(v15 + 24), v27, v26);
    uint64_t v17 = v14[3];
    char v18 = *((unsigned char *)v14 + 32);
    *uint64_t v16 = v28;
    LOBYTE(v14) = v25;
    v16[1] = v25;
    v16[2] = v29;
    v16[3] = v24;
    void v16[4] = v30;
    uint64_t v19 = *(int *)(v15 + 28);
    *(void *)((char *)v16 + v19) = v17;
    *((unsigned char *)v16 + v19 + 8) = v18;
    swift_bridgeObjectRetain(v17);
    return swift_bridgeObjectRetain((_BYTE)v14);
  }
  return result;
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance AnyTreeClassifier(double a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(a3, a4, a5, a6, a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance AnyTreeClassifier(uint64_t a1, uint64_t a2)
{
  return AnyTreeClassifier.encode(_:to:)(a1, a2);
}

uint64_t protocol witness for SupervisedTabularEstimator.decode(from:) in conformance AnyTreeClassifier(uint64_t a1)
{
  return AnyTreeClassifier.decode(from:)(a1);
}

uint64_t base witness table accessor for SupervisedTabularEstimator in AnyTreeClassifier()
{
  return lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier, type metadata accessor for AnyTreeClassifier, (uint64_t)&protocol conformance descriptor for AnyTreeClassifier);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.makeTransformer() in conformance AnyTreeClassifier()
{
  return AnyTreeClassifier.makeTransformer()();
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_3A9EDC);
  *(void *)(v4 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return AnyTreeClassifier.update(_:with:eventHandler:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance AnyTreeClassifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance AnyTreeClassifier(a1, a2);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance AnyTreeClassifier(uint64_t a1)
{
  return protocol witness for SupervisedTabularEstimator.decode(from:) in conformance AnyTreeClassifier(a1);
}

int64_t specialized _NativeSet.index(after:)(uint64_t a1, int a2, char a3, uint64_t a4)
{
  return specialized _NativeSet.index(after:)(a1, a2, a3, a4);
}

{
  int64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (a3) {
    BUG();
  }
  uint64_t result = 1 << *(unsigned char *)(a4 + 32);
  if (a1 < 0 || result <= a1) {
    BUG();
  }
  uint64_t v6 = (unint64_t)a1 >> 6;
  uint64_t v7 = *(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56);
  uint64_t v8 = a1 & 0x3F;
  if (!_bittest64(&v7, v8)) {
    BUG();
  }
  if (*(_DWORD *)(a4 + 36) != a2) {
    BUG();
  }
  uint64_t v9 = (-2 << v8) & v7;
  if (v9)
  {
    _BitScanForward64(&v10, v9);
    return v10 | a1 & 0xFFFFFFFFFFFFFFC0;
  }
  uint64_t v11 = v6 + 1;
  uint64_t v12 = (unint64_t)(result + 63) >> 6;
  if (v6 + 1 < v12)
  {
    uint64_t v13 = *(void *)(a4 + 8 * v6 + 64);
    if (v13)
    {
LABEL_10:
      _BitScanForward64(&v14, v13);
      return v14 + (v11 << 6);
    }
    uint64_t v11 = v6 + 2;
    if (v6 + 2 < v12)
    {
      uint64_t v13 = *(void *)(a4 + 8 * v6 + 72);
      if (v13) {
        goto LABEL_10;
      }
      while (v6 + 3 < v12)
      {
        uint64_t v13 = *(void *)(a4 + 8 * v6++ + 80);
        if (v13)
        {
          uint64_t v11 = v6 + 2;
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  return specialized _NativeSet.startIndex.getter(a1);
}

{
  char v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(unsigned char *)(a1 + 32);
  uint64_t result = 1 << v1;
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v4 = 0;
LABEL_3:
    _BitScanForward64(&v5, v3);
    return v4 + v5;
  }
  if ((v1 & 0x3Fu) >= 7)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      uint64_t v4 = 64;
      goto LABEL_3;
    }
    uint64_t v4 = 64;
    uint64_t v6 = 9;
    while (v6 - 7 < (unint64_t)(result + 63) >> 6)
    {
      uint64_t v3 = *(void *)(a1 + 8 * v6);
      v4 += 64;
      ++v6;
      if (v3) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

unsigned char *assignWithCopy for MLRandomForestRegressor.ModelParameters.ValidationData(unsigned char *__dst, unsigned char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)__dst);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(void *)__src;
      char v6 = __src[8];
      outlined copy of Result<_DataTable, Error>(*(void *)__src, v6);
      *(void *)__dst = v5;
      __dst[8] = v6;
      swift_storeEnumTagMultiPayload(__dst, a3, 1);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLRandomForestRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLRandomForestRegressor.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLRandomForestRegressor.ModelParameters.ValidationData);
  }
  return result;
}

void *assignWithTake for MLRandomForestRegressor.ModelParameters.ValidationData(void *__dst, void *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)__dst);
    if (swift_getEnumCaseMultiPayload(__src, a3) == 2)
    {
      uint64_t v4 = type metadata accessor for DataFrame(0);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 32))(__dst, __src, v4);
      swift_storeEnumTagMultiPayload(__dst, a3, 2);
    }
    else
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  v5[0] = &unk_34CC80;
  v5[1] = &unk_34CC98;
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v4 <= 0x3F)
  {
    _OWORD v5[2] = *(void *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5, v2, v3);
    return 0;
  }
  return result;
}

uint64_t MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v55 = v3;
  uint64_t v57 = a3;
  double v56 = (uint64_t *)a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v58 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v58 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v50 = &v44;
  uint64_t v46 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v51 = *(void *)(v46 - 8);
  int64_t v9 = *(void *)(v51 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v48 = &v44;
  uint64_t v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  uint64_t v53 = &v44;
  uint64_t v14 = alloca(v9);
  uint64_t v15 = alloca(v9);
  char v52 = &v44;
  int64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                              - 8)
                  + 64);
  uint64_t v17 = alloca(v16);
  char v18 = alloca(v16);
  char v47 = &v44;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  unint64_t v49 = &v44;
  uint64_t v21 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(v4, (uint64_t)&v44);
  switch(swift_getEnumCaseMultiPayload(&v44, v21))
  {
    case 0u:
      uint64_t v58 = v5;
      uint64_t v25 = (uint64_t)v49;
      uint64_t v26 = (uint64_t)v52;
      DataFrame.randomSplit(strategy:)((uint64_t)v49, (uint64_t)v52, (uint64_t)&v44);
      uint64_t v27 = v53;
      uint64_t v28 = v46;
      uint64_t v57 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16);
      v57(v53, v26, v46);
      DataFrame.init(_:)(v27);
      uint64_t v29 = (uint64_t)v47;
      outlined init with copy of DataFrame.Slice?(v25, (uint64_t)v47);
      if (__swift_getEnumTagSinglePayload(v29, 1, v28) == 1)
      {
        __swift_storeEnumTagSinglePayload((uint64_t)v56, 1, 1, v58);
        uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v51 + 8);
      }
      else
      {
        uint64_t v40 = v53;
        uint64_t v41 = v51;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 32))(v53, v29, v28);
        double v42 = v48;
        v57(v48, (uint64_t)v40, v28);
        uint64_t v43 = (uint64_t)v56;
        DataFrame.init(_:)(v42);
        uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
        v30(v53, v28);
        __swift_storeEnumTagSinglePayload(v43, 0, 1, v58);
      }
      v30(v52, v28);
      return outlined destroy of DataFrame.Slice?((uint64_t)v49);
    case 1u:
      uint64_t v35 = v44;
      char v36 = v45;
      (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
      uint64_t v44 = v35;
      char v45 = v36;
      uint64_t v37 = (uint64_t)v56;
      DataFrame.init(_:)((uint64_t)&v44);
      uint64_t v33 = v37;
      goto LABEL_10;
    case 2u:
      uint64_t v31 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v58 + 32);
      v31(v50, &v44, v5);
      if (DataFrameProtocol.isEmpty.getter(v5, &protocol witness table for DataFrame))
      {
        uint64_t v32 = v58;
        (*(void (**)(uint64_t *, uint64_t))(v58 + 8))(v50, v5);
        (*(void (**)(uint64_t, void, uint64_t))(v32 + 16))(v54, v57, v5);
LABEL_7:
        uint64_t v33 = (uint64_t)v56;
        uint64_t v34 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
        uint64_t v38 = (uint64_t)v56;
        v31(v56, v50, v5);
        uint64_t v33 = v38;
LABEL_10:
        uint64_t v34 = 0;
      }
      return __swift_storeEnumTagSinglePayload(v33, v34, 1, v5);
    case 3u:
      (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v54, v57, v5);
      goto LABEL_7;
  }
}

uint64_t MLRandomForestRegressor.ModelParameters.ValidationData.table.getter(__m128 a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DataFrame(0);
  uint64_t v27 = *(void *)(v4 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v29 = &v25;
  uint64_t v8 = alloca(v5);
  int64_t v9 = alloca(v5);
  uint64_t v28 = &v25;
  uint64_t v10 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(v2, (uint64_t)&v25);
  uint64_t result = swift_getEnumCaseMultiPayload(&v25, v10);
  switch((int)result)
  {
    case 0:
      *(void *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 8) = -1;
      return result;
    case 1:
      uint64_t result = v25;
      char v15 = v26;
      goto LABEL_7;
    case 2:
      int64_t v16 = v28;
      uint64_t v17 = v27;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 32))(v28, &v25, v4);
      uint64_t v18 = (uint64_t)v29;
      *(double *)a1.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v29, v16, v4);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v18, 1, a1);
      (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v16, v4);
      uint64_t result = v30;
      char v15 = v31;
LABEL_7:
      *(void *)uint64_t v3 = result;
      *(unsigned char *)(v3 + 8) = v15;
      break;
    case 3:
      uint64_t v19 = v3;
      uint64_t empty = tc_v1_sframe_create_empty(0);
      if (!empty) {
        BUG();
      }
      uint64_t v21 = empty;
      uint64_t v22 = type metadata accessor for CMLTable();
      uint64_t v23 = swift_allocObject(v22, 24, 7);
      *(void *)(v23 + 16) = v21;
      uint64_t v24 = type metadata accessor for _DataTable();
      swift_allocObject(v24, 40, 7);
      uint64_t result = _DataTable.init(impl:)(v23);
      *(void *)uint64_t v19 = result;
      *(unsigned char *)(v19 + 8) = 0;
      break;
    case 4:
      JUMPOUT(0x1791D8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLActivityClassifier.DataBatcher(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~v4));
    swift_retain(v13);
  }
  else
  {
    uint64_t v6 = type metadata accessor for DataFrame(0);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = a3[5];
    *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
    uint64_t v8 = *(void *)((char *)a2 + v7 + 8);
    *(void *)((char *)v3 + v7 + 8) = v8;
    uint64_t v9 = a3[6];
    *(void *)((char *)v3 + v9) = *(void *)((char *)a2 + v9);
    uint64_t v10 = *(void *)((char *)a2 + v9 + 8);
    *(void *)((char *)v3 + v9 + 8) = v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = *(void *)((char *)a2 + v11);
    *(void *)((char *)v3 + v11) = v12;
    *(void *)((char *)v3 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *(void *)((char *)v3 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *(void *)((char *)v3 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    *((unsigned char *)v3 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)((char *)v3 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
  }
  return v3;
}

uint64_t destroy for MLActivityClassifier.DataBatcher(uint64_t a1, int *a2)
{
  uint64_t v2 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
}

uint64_t initializeWithCopy for MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  uint64_t v6 = a3[5];
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v7 = *(void *)(a2 + v6 + 8);
  *(void *)(a1 + v6 + 8) = v7;
  uint64_t v8 = a3[6];
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = *(void *)(a2 + v8 + 8);
  *(void *)(a1 + v8 + 8) = v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void *)(a2 + v10);
  *(void *)(a1 + v10) = v11;
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a1, a2, v5);
  uint64_t v6 = a3[5];
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v7 = *(void *)(a2 + v6 + 8);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  *(void *)(a1 + v6 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[6];
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = *(void *)(a2 + v9 + 8);
  uint64_t v11 = *(void *)(a1 + v9 + 8);
  *(void *)(a1 + v9 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void *)(a2 + v12);
  uint64_t v14 = *(void *)(a1 + v12);
  *(void *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a1, a2, v5);
  uint64_t v6 = a3[5];
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v7 = *(void *)(a1 + v6 + 8);
  *(void *)(a1 + v6 + 8) = *(void *)(a2 + v6 + 8);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = *(void *)(a1 + v8 + 8);
  *(void *)(a1 + v8 + 8) = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void *)(a1 + v10);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17964A);
}

uint64_t sub_17964A(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(a1, a2, v5);
  }
  if ((*(void *)(a1 + *(int *)(a3 + 20) + 8) & 0xFFFFFFFF00000001) == 0) {
    return (*(void *)(a1 + *(int *)(a3 + 20) + 8) >> 1) + 1;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1796D4);
}

uint64_t sub_1796D4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DataFrame(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, v6);
  }
  uint64_t result = *(int *)(a4 + 20);
  *(void *)(a1 + result + 8) = 2 * (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MLActivityClassifier.DataBatcher(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLActivityClassifier.DataBatcher;
  if (!type metadata singleton initialization cache for MLActivityClassifier.DataBatcher) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLActivityClassifier.DataBatcher);
  }
  return result;
}

uint64_t type metadata completion function for MLActivityClassifier.DataBatcher(uint64_t a1)
{
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v2 <= 0x3F)
  {
    v3[0] = *(void *)(result - 8) + 64;
    v3[1] = &unk_34CCD0;
    v3[2] = &unk_34CCD0;
    void v3[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v3[4] = &unk_34CCE8;
    void v3[5] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[6] = (char *)&value witness table for Builtin.Int64 + 64;
    void v3[7] = &unk_34CD00;
    v3[8] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 9, v3, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySSG_AF0E5FrameV5SliceVSgs5NeverOTg5(void (*a1)(long long *), uint64_t a2)
{
  uint64_t v60 = v2;
  uint64_t v48 = a2;
  unint64_t v49 = a1;
  uint64_t v51 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                  - 8);
  int64_t v4 = *(void *)(v51 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v61 = v45;
  uint64_t v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  char v52 = v45;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v56 = *(void *)(v9 - 8);
  int64_t v10 = *(void *)(v56 + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v57 = v45;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  int64_t v13 = *(void *)(*(void *)(v53 - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  uint64_t v62 = v45;
  uint64_t v63 = (uint64_t *)lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v16 = dispatch thunk of Sequence.underestimatedCount.getter(v9, v63);
  uint64_t v64 = _swiftEmptyArrayStorage;
  int64_t v17 = 0;
  if (v16 > 0) {
    int64_t v17 = v16;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  uint64_t v50 = *(void (**)(void *, uint64_t, uint64_t))(v56 + 16);
  v50(v57, v3, v9);
  uint64_t v59 = v9;
  uint64_t v18 = v9;
  uint64_t v19 = v16;
  dispatch thunk of Sequence.makeIterator()(v18, v63);
  if (v16 < 0) {
    BUG();
  }
  if (v16)
  {
    uint64_t v20 = (uint64_t)v62;
    uint64_t v21 = (void *)((char *)v62 + *(int *)(v53 + 36));
    uint64_t v22 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    char v47 = v21;
    uint64_t v63 = (uint64_t *)v22;
    while (1)
    {
      BOOL v23 = v19 == 0;
      uint64_t v24 = v19 - 1;
      if (v23) {
        BUG();
      }
      uint64_t v46 = v24;
      *(void *)&long long v55 = *v21;
      uint64_t v25 = v59;
      dispatch thunk of Collection.endIndex.getter(v59, v22);
      if ((void)v55 == v45[0]) {
        BUG();
      }
      uint64_t v58 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v45, v21, v25, v63);
      long long v55 = *v26;
      swift_bridgeObjectRetain(*((void *)v26 + 1));
      v58(v45, 0);
      uint64_t v27 = v57;
      v50(v57, v20, v25);
      dispatch thunk of Collection.formIndex(after:)(v21, v25, v63);
      (*(void (**)(void *, uint64_t))(v56 + 8))(v27, v25);
      long long v54 = v55;
      uint64_t v28 = v60;
      v49(&v54);
      if (v28) {
        break;
      }
      swift_bridgeObjectRelease(BYTE8(v54));
      uint64_t v29 = v64;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
      uint64_t v60 = 0;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1);
        uint64_t v29 = v64;
      }
      unint64_t v31 = v29[2];
      if (v29[3] >> 1 <= v31)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29[3] >= 2uLL, v31 + 1, 1);
        uint64_t v29 = v64;
      }
      v29[2] = v31 + 1;
      outlined init with take of DataFrame.Slice?((uint64_t)v61, (uint64_t)v29+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v31);
      uint64_t v19 = v46;
      uint64_t v20 = (uint64_t)v62;
      uint64_t v21 = v47;
      uint64_t v22 = (uint64_t)v63;
      if (!v46) {
        goto LABEL_16;
      }
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v62, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
    swift_release();
    return swift_bridgeObjectRelease(BYTE8(v54));
  }
  else
  {
    uint64_t v20 = (uint64_t)v62;
LABEL_16:
    uint64_t v32 = *(int *)(v53 + 36);
    uint64_t v33 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v34 = *(void *)(v20 + v32);
    uint64_t v58 = (void (*)(void *, void))v33;
    dispatch thunk of Collection.endIndex.getter(v59, v33);
    if (v34 == v45[0])
    {
LABEL_17:
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      return (uint64_t)v64;
    }
    else
    {
      char v36 = (uint64_t *)(v32 + v20);
      uint64_t v37 = v59;
      uint64_t v38 = (void (*)(void, void))v58;
      uint64_t v63 = v36;
      while (1)
      {
        uint64_t v39 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v45, v36, v37, v38);
        long long v55 = *v40;
        uint64_t v61 = (void *)*((void *)v40 + 1);
        swift_bridgeObjectRetain((_BYTE)v61);
        v39(v45, 0);
        uint64_t v41 = v57;
        v50(v57, (uint64_t)v62, v37);
        dispatch thunk of Collection.formIndex(after:)(v63, v37, v38);
        (*(void (**)(void *, uint64_t))(v56 + 8))(v41, v37);
        long long v54 = v55;
        uint64_t v42 = v60;
        v49(&v54);
        swift_bridgeObjectRelease((_BYTE)v61);
        if (v42) {
          break;
        }
        uint64_t v43 = v64;
        if (!swift_isUniquelyReferenced_nonNull_native(v64))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1);
          uint64_t v43 = v64;
        }
        uint64_t v60 = 0;
        unint64_t v44 = v43[2];
        if (v43[3] >> 1 <= v44)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43[3] >= 2uLL, v44 + 1, 1);
          uint64_t v43 = v64;
        }
        v43[2] = v44 + 1;
        outlined init with take of DataFrame.Slice?((uint64_t)v52, (uint64_t)v43+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v44);
        uint64_t v61 = (void *)*v63;
        uint64_t v20 = (uint64_t)v62;
        uint64_t v37 = v59;
        uint64_t v38 = (void (*)(void, void))v58;
        dispatch thunk of Collection.endIndex.getter(v59, v58);
        char v36 = v63;
        if (v61 == (void *)v45[0]) {
          goto LABEL_17;
        }
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v62, &demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      return swift_release();
    }
  }
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Algorithms15UniquedSequenceVy11TabularData6ColumnVySiGSiSgG_AI0H5FrameV5SliceVSgs5NeverOTg5(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v56 = v2;
  uint64_t v62 = v3;
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  uint64_t v47 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                  - 8);
  int64_t v4 = *(void *)(v47 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  long long v55 = v40;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v7 = *(void *)(v59 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = alloca(v8);
  int64_t v10 = alloca(v8);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<Int>>);
  int64_t v11 = *(void *)(*(void *)(v60 - 8) + 64);
  uint64_t v12 = alloca(v11);
  int64_t v13 = alloca(v11);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UniquedSequence<Column<Int>, Int?>.Iterator);
  int64_t v14 = *(void *)(*(void *)(v43 - 8) + 64);
  char v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  uint64_t v57 = v40;
  uint64_t v61 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v41 = v7;
  int64_t v17 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v18 = v62;
  uint64_t v19 = v59;
  unint64_t v44 = v17;
  v17(v40, v62, v59);
  uint64_t v58 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v42 = v40;
  dispatch thunk of Sequence.makeIterator()(v19, v58);
  uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UniquedSequence<Column<Int>, Int?>)
               + 52);
  uint64_t v48 = *(void *)(v18 + v20);
  uint64_t v21 = *(void *)(v18 + v20 + 8);
  swift_retain();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  uint64_t v23 = lazy protocol witness table accessor for type Int? and conformance <A> A?();
  uint64_t v24 = (uint64_t)v57;
  uint64_t v25 = v59;
  UniquedSequence.Iterator.init(base:projection:)((uint64_t)v40, v48, v21, v59, v22, v58, v23);
  uint64_t v26 = *(int *)(v60 + 36);
  uint64_t v27 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v62 = v26;
  uint64_t v28 = *(void *)(v24 + v26);
  uint64_t v60 = v27;
  dispatch thunk of Collection.endIndex.getter(v25, v27);
  if (v28 == v40[0])
  {
    uint64_t v29 = v24;
LABEL_3:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, &demangling cache variable for type metadata for UniquedSequence<Column<Int>, Int?>.Iterator);
    return (uint64_t)v61;
  }
  else
  {
    uint64_t v29 = v24;
    unint64_t v31 = (uint64_t *)(v24 + v62);
    uint64_t v32 = v59;
    while (1)
    {
      while (1)
      {
        uint64_t v33 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v40, v31, v32, v60);
        uint64_t v62 = *v34;
        LOBYTE(v58) = *((unsigned char *)v34 + 8);
        uint64_t v35 = v29;
        v33(v40, 0);
        char v36 = v42;
        v44(v42, v35, v32);
        dispatch thunk of Collection.formIndex(after:)(v31, v32, v60);
        (*(void (**)(void *, uint64_t))(v41 + 8))(v36, v32);
        uint64_t v51 = v62;
        char v52 = v58;
        (*(void (**)(uint64_t *))(v35 + *(int *)(v43 + 52)))(&v51);
        if (specialized Set._Variant.insert(_:)((uint64_t)v40, v53, v54)) {
          break;
        }
        uint64_t v62 = *v31;
        uint64_t v29 = v35;
        uint64_t v32 = v59;
        dispatch thunk of Collection.endIndex.getter(v59, v60);
        if (v62 == v40[0]) {
          goto LABEL_3;
        }
      }
      uint64_t v49 = v62;
      char v50 = v58;
      uint64_t v37 = v56;
      v46(&v49);
      if (v37) {
        break;
      }
      uint64_t v56 = 0;
      uint64_t v38 = v61;
      if (!swift_isUniquelyReferenced_nonNull_native(v61))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1);
        uint64_t v38 = v61;
      }
      unint64_t v39 = v38[2];
      if (v38[3] >> 1 <= v39)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38[3] >= 2uLL, v39 + 1, 1);
        uint64_t v38 = v61;
      }
      v38[2] = v39 + 1;
      outlined init with take of DataFrame.Slice?((uint64_t)v55, (uint64_t)v38+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v39);
      uint64_t v62 = *v31;
      uint64_t v29 = (uint64_t)v57;
      uint64_t v32 = v59;
      dispatch thunk of Collection.endIndex.getter(v59, v60);
      if (v62 == v40[0]) {
        goto LABEL_3;
      }
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v57, &demangling cache variable for type metadata for UniquedSequence<Column<Int>, Int?>.Iterator);
    return swift_release();
  }
}

uint64_t specialized Sequence.sorted(by:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(&v10, a1, v2);
  uint64_t v7 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t v10 = dispatch thunk of Sequence._copyToContiguousArray()(v2, v7);
  specialized MutableCollection<>.sort(by:)(&v10);
  uint64_t v8 = v10;
  if (v1) {
    swift_release();
  }
  return v8;
}

uint64_t MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, double a7, uint64_t a8, char a9, char a10)
{
  uint64_t v114 = a4;
  uint64_t v118 = a3;
  uint64_t v12 = v10;
  uint64_t v117 = a2;
  long long v108 = a6;
  unint64_t v116 = a5;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v95 = *(void *)(v96 - 8);
  int64_t v13 = *(void *)(v95 + 64);
  int64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  id v99 = &v93;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v97 = *(void *)(v98 - 8);
  int64_t v16 = *(void *)(v97 + 64);
  int64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  char v100 = &v93;
  uint64_t v106 = type metadata accessor for DataFrame(0);
  uint64_t v104 = *(void *)(v106 - 8);
  int64_t v19 = *(void *)(v104 + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v111 = (unint64_t *)&v93;
  uint64_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  unint64_t v102 = &v93;
  uint64_t v24 = (int *)type metadata accessor for MLActivityClassifier.DataBatcher(0);
  uint64_t v25 = v24[5];
  *(void *)(v12 + v25) = 0x5F6E6F6973736573;
  *(void *)(v12 + v25 + 8) = 0xEA00000000006469;
  uint64_t v26 = v24[6];
  *(void *)(v12 + v26) = 0x6C6562616CLL;
  uint64_t v101 = v26;
  *(void *)(v12 + v26 + 8) = 0xE500000000000000;
  int64_t v110 = v24;
  uint64_t v27 = v24[12];
  uint64_t v109 = v12;
  *(void *)(v12 + v27) = 0;
  uint64_t v103 = a1;
  uint64_t v28 = DataFrame.columns.getter(0, a2);
  LOBYTE(v12) = v28;
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v28);
  uint64_t v105 = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v107 = specialized Set.init<A>(_:)((uint64_t)MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  LOBYTE(v12) = v118;
  uint64_t v30 = specialized Set._Variant.remove(_:)(v117, v118);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease(v12);
  if (!v32)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, "f type String or Int." + 0x8000000000000000, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 52, 0);
    goto LABEL_34;
  }
  uint64_t v33 = v109;
  uint64_t v118 = *(void *)(v109 + v25 + 8);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v118);
  uint64_t v115 = v30;
  *(void *)(v33 + v25) = v30;
  uint64_t v94 = v25;
  uint64_t v117 = v32;
  *(void *)(v33 + v25 + 8) = v32;
  char v34 = v116;
  uint64_t v118 = specialized Set._Variant.remove(_:)(v114, v116);
  uint64_t v36 = v35;
  swift_bridgeObjectRelease(v34);
  if (!v36)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, "Session column not found" + 0x8000000000000000, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 56, 0);
LABEL_34:
    BUG();
  }
  uint64_t v37 = v33;
  uint64_t v38 = v101;
  uint64_t v39 = *(void *)(v33 + v101 + 8);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v39);
  *(void *)(v37 + v38) = v118;
  *(void *)(v37 + v38 + 8) = v36;
  uint64_t v40 = v108;
  uint64_t v114 = v36;
  if (!v108)
  {
    uint64_t v41 = v107;
    swift_bridgeObjectRetain_n(v107, 2);
    uint64_t v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
    swift_bridgeObjectRelease(v41);
    uint64_t v112 = v42;
    uint64_t v43 = v105;
    specialized MutableCollection<>.sort(by:)(&v112);
    uint64_t v105 = v43;
    if (v43)
    {
      swift_release();
      BUG();
    }
    swift_bridgeObjectRelease(v41);
    uint64_t v40 = v112;
  }
  unint64_t v44 = v110;
  *(void *)(v37 + v110[7]) = v40;
  *(void *)(v37 + v44[9]) = a8;
  int64_t v45 = v40[2];
  int64_t v46 = v45 + 2;
  if (__OFADD__(2, v45)) {
    BUG();
  }
  swift_bridgeObjectRetain_n(v40, 2);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v114);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
  uint64_t v48 = v40;
  if (!isUniquelyReferenced_nonNull_native || v40[3] >> 1 < v46)
  {
    if (v45 > v46) {
      int64_t v46 = v45;
    }
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v46, 1, (uint64_t)v40);
  }
  long long v108 = v48;
  unint64_t v49 = v40[2];
  unint64_t v116 = v40[3];
  unint64_t v50 = v116 >> 1;
  unint64_t v51 = v49 + 1;
  swift_bridgeObjectRetain(v117);
  if (v50 <= v49) {
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v116 >= 2, v49 + 1, 1, (uint64_t)v40);
  }
  v40[2] = v51;
  uint64_t v52 = 2 * v49;
  v40[v52 + 4] = v115;
  v40[v52 + 5] = v117;
  unint64_t v116 = v40[3];
  unint64_t v53 = v116 >> 1;
  int64_t v54 = v49 + 2;
  swift_bridgeObjectRetain(v114);
  if (v53 <= v51)
  {
    int64_t v55 = v54;
    uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v116 >= 2, v54, 1, (uint64_t)v40);
  }
  else
  {
    int64_t v55 = v54;
  }
  uint64_t v56 = v118;
  v40[2] = v55;
  uint64_t v57 = 2 * v51;
  v40[v57 + 4] = v56;
  uint64_t v58 = v114;
  v40[v57 + 5] = v114;
  swift_bridgeObjectRelease((_BYTE)v108);
  swift_bridgeObjectRelease(v117);
  swift_bridgeObjectRelease(v58);
  uint64_t v112 = v40;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  uint64_t v60 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v61 = v111;
  unint64_t v116 = v59;
  uint64_t v62 = v59;
  uint64_t v63 = v103;
  DataFrame.selecting<A>(columnNames:)(&v112, v62, v60);
  char v64 = (char)v40;
  uint64_t v65 = v108;
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRetain((_BYTE)v65);
  uint64_t v66 = v58;
  char v67 = v117;
  uint64_t v68 = v105;
  uint64_t v69 = static MLActivityClassifier.DataBatcher.preprocess(_:_:_:_:_:_:)((uint64_t)v102, v61, v65, v118, v66, v115, v117, a8, a9);
  uint64_t v115 = v68;
  if (v68)
  {
    swift_bridgeObjectRelease((_BYTE)v65);
    uint64_t v70 = v110[7];
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v114);
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    uint64_t v72 = v106;
    v71(v63, v106);
    v71((uint64_t)v111, v72);
    swift_bridgeObjectRelease(v107);
    uint64_t v73 = v109;
    swift_bridgeObjectRelease(*(void *)(v109 + v94 + 8));
    swift_bridgeObjectRelease(*(void *)(v73 + v101 + 8));
    return swift_bridgeObjectRelease(*(void *)(v73 + v70));
  }
  else
  {
    uint64_t v75 = v69;
    char v76 = (char)v65;
    uint64_t v77 = v104;
    uint64_t v78 = v111;
    uint64_t v79 = v106;
    uint64_t v111 = *(unint64_t **)(v104 + 8);
    ((void (*)(unint64_t *, uint64_t))v111)(v78, v106);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v117);
    uint64_t v80 = v109;
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v109, v102, v79);
    *(void *)(v80 + v110[8]) = v75;
    uint64_t v81 = v99;
    LOBYTE(v75) = v114;
    DataFrame.subscript.getter(v118, v114, v116);
    swift_bridgeObjectRelease(v75);
    unint64_t v82 = v100;
    uint64_t v83 = v96;
    uint64_t v84 = v115;
    Column.mapNonNil<A>(_:)(closure #1 in MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:), 0, v96, &type metadata for Int, a7);
    uint64_t v115 = v84;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v81, v83);
    uint64_t v85 = v98;
    Column<A>.max()(v98, &protocol witness table for Int);
    uint64_t v86 = v85;
    uint64_t v87 = 0;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v82, v86);
    if (!v113) {
      uint64_t v87 = v112;
    }
    BOOL v88 = __OFADD__(a8, v87);
    uint64_t v89 = (uint64_t)v87 + a8;
    if (v88) {
      BUG();
    }
    BOOL v88 = __OFSUB__(v89, 1);
    uint64_t v90 = v89 - 1;
    if (v88) {
      BUG();
    }
    if (!a8) {
      BUG();
    }
    if (v90 == 0x8000000000000000 && a8 == -1) {
      BUG();
    }
    ((void (*)(uint64_t, uint64_t))v111)(v103, v106);
    swift_bridgeObjectRelease(v107);
    uint64_t v91 = v110;
    uint64_t v92 = v109;
    *(void *)(v109 + v110[10]) = v90 / a8;
    uint64_t result = v91[11];
    *(unsigned char *)(v92 + result) = a10 & 1;
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t a1)
{
  int64_t v17 = closure #2 in static MLActivityClassifier.DataBatcher.preprocess(_:_:_:_:_:_:);
  uint64_t v18 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v3 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
  uint64_t result = dispatch thunk of MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)(partial apply for specialized closure #1 in MutableCollection<>.sort(by:), v16, (char *)&type metadata for () + 8, v2, v3);
  if (!v1 && (_BYTE)v25)
  {
    uint64_t v5 = specialized Sequence.sorted(by:)(a1);
    uint64_t v28 = 0;
    uint64_t v29 = v5;
    uint64_t v6 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
    dispatch thunk of Collection.indices.getter(v2, v6);
    uint64_t v7 = v25;
    uint64_t v27 = v26;
    if (v25 != v26)
    {
      uint64_t v8 = v29;
      if (v25 > v26) {
        BUG();
      }
      if (v25 >= v26) {
        BUG();
      }
      uint64_t v9 = *(void *)(v29 + 16);
      if (!v9) {
        return swift_bridgeObjectRelease(v8);
      }
      uint64_t v22 = v3;
      uint64_t v21 = v2;
      unint64_t v10 = 0;
      uint64_t v11 = 0;
      if (v9 > 0) {
        uint64_t v11 = v9;
      }
      uint64_t v20 = v11;
      uint64_t v12 = (unsigned char *)(v29 + 40);
      uint64_t v23 = v27 + ~v25;
      uint64_t v24 = v9;
      while (1)
      {
        if (v20 == v10) {
          BUG();
        }
        unint64_t v19 = v7 + v10;
        if (v10 >= *(void *)(v8 + 16)) {
          BUG();
        }
        uint64_t v13 = v7;
        char v14 = *v12;
        uint64_t v25 = *((void *)v12 - 1);
        LOBYTE(v26) = v14;
        dispatch thunk of MutableCollection.subscript.setter(&v25, &v19, v21, v22);
        if (v23 == v10) {
          break;
        }
        uint64_t v15 = v13 + v10 + 1;
        uint64_t v8 = v29;
        if (v15 < v13 || v15 >= v27) {
          BUG();
        }
        uint64_t v7 = v13;
        ++v10;
        v12 += 16;
        if (v24 == v10) {
          return swift_bridgeObjectRelease(v8);
        }
      }
    }
    LOBYTE(v8) = v29;
    return swift_bridgeObjectRelease(v8);
  }
  return result;
}

uint64_t static MLActivityClassifier.DataBatcher.preprocess(_:_:_:_:_:_:)(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v114 = v9;
  uint64_t v111 = a6;
  uint64_t v103 = a5;
  uint64_t v107 = a1;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v96 = *(void *)(v95 - 8);
  int64_t v13 = *(void *)(v96 + 64);
  char v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v97 = &v86;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UniquedSequence<Column<Int>, Int?>);
  int64_t v16 = *(void *)(*(void *)(v94 - 8) + 64);
  int64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  char v93 = &v86;
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of DataFrameProtocol.grouped(by:)>>.0);
  uint64_t v104 = *(void *)(v105 - 8);
  int64_t v19 = *(void *)(v104 + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v98 = &v86;
  uint64_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  unint64_t v102 = &v86;
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v108 = *(void *)(v109 - 8);
  int64_t v24 = *(void *)(v108 + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  int64_t v110 = &v86;
  uint64_t v99 = type metadata accessor for AnyColumn(0);
  uint64_t v27 = *(void *)(v99 - 8);
  int64_t v28 = *(void *)(v27 + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  char v100 = &v86;
  v115._char countAndFlagsBits = DataFrame.columns.getter(0, a2);
  if (!a3[2]) {
    BUG();
  }
  uint64_t v92 = a3[2];
  uint64_t v106 = a4;
  uint64_t v31 = a3[4];
  char v113 = a3;
  uint64_t v32 = (void *)a3[5];
  swift_bridgeObjectRetain((_BYTE)v32);
  v33._char countAndFlagsBits = v31;
  v33._char object = v32;
  uint64_t v112 = a2;
  Swift::Int_optional v34 = DataFrame.indexOfColumn(_:)(v33);
  Swift::Int value = v34.value;
  Swift::Bool is_nil = v34.is_nil;
  swift_bridgeObjectRelease((_BYTE)v32);
  if (is_nil) {
    BUG();
  }
  char countAndFlagsBits = v115._countAndFlagsBits;
  if (value < 0) {
    BUG();
  }
  if ((unint64_t)value >= *(void *)(v115._countAndFlagsBits + 16)) {
    BUG();
  }
  uint64_t v88 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~*(unsigned __int8 *)(v27 + 80);
  uint64_t v38 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v90 = *(void *)(v27 + 72);
  uint64_t v39 = v100;
  uint64_t v40 = v88 + v115._countAndFlagsBits + v90 * value;
  uint64_t v41 = v99;
  uint64_t v89 = v38;
  v38(v100, v40, v99);
  swift_bridgeObjectRelease(countAndFlagsBits);
  uint64_t v42 = AnyColumn.wrappedElementType.getter();
  uint64_t v43 = v41;
  uint64_t v91 = *(void (**)(unint64_t *, uint64_t))(v27 + 8);
  v91(v39, v41);
  uint64_t v44 = (uint64_t)v113;
  swift_bridgeObjectRetain((_BYTE)v113);
  int64_t v45 = (void **)(v44 + 40);
  uint64_t v101 = (unint64_t *)v42;
  do
  {
    v115._char countAndFlagsBits = (uint64_t)*(v45 - 1);
    int64_t v46 = *v45;
    uint64_t v47 = *v45;
    swift_bridgeObjectRetain(*v45);
    uint64_t v48 = DataFrame.columns.getter(v47, v43);
    v49._char countAndFlagsBits = v115._countAndFlagsBits;
    v49._char object = v46;
    Swift::Int_optional v50 = DataFrame.indexOfColumn(_:)(v49);
    if (v50.is_nil) {
      BUG();
    }
    if (v50.value < 0) {
      BUG();
    }
    if (v50.value >= *(void *)(v48 + 16)) {
      BUG();
    }
    unint64_t v51 = v100;
    v115._char countAndFlagsBits = (uint64_t)v46;
    uint64_t v52 = v99;
    v89(v100, v88 + v48 + v90 * v50.value, v99);
    swift_bridgeObjectRelease(v48);
    uint64_t v53 = AnyColumn.wrappedElementType.getter();
    uint64_t v43 = v52;
    v91(v51, v52);
    swift_bridgeObjectRelease(v115._countAndFlagsBits);
    int64_t v54 = v101;
    if ((unint64_t *)v53 != v101)
    {
      swift_bridgeObjectRelease((_BYTE)v113);
      uint64_t v61 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v61, 0, 0);
      *(void *)uint64_t v62 = 0xD000000000000037;
      uint64_t v66 = "Label column not found";
      goto LABEL_17;
    }
    v45 += 2;
    --v92;
  }
  while (v92);
  swift_bridgeObjectRelease((_BYTE)v113);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (v54 == (unint64_t *)v55
    || (uint64_t v56 = v55,
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]),
        v54 == (unint64_t *)v57))
  {
    uint64_t v67 = type metadata accessor for DataFrame(0);
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)(v67 - 8) + 16))(v107, v112, v67);
  }
  else
  {
    uint64_t v58 = v57;
    BOOL v59 = v54 == (unint64_t *)&type metadata for Double;
    uint64_t v60 = v54;
    int64_t v54 = v112;
    if (!v59 && v60 != (unint64_t *)&type metadata for Float)
    {
      uint64_t v61 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v61, 0, 0);
      *(void *)uint64_t v62 = 0xD000000000000040;
      uint64_t v66 = "pe in the training data";
LABEL_17:
      *(void *)(v62 + 8) = (unint64_t)v66 | 0x8000000000000000;
      *(_OWORD *)(v62 + 16) = 0;
      *(_OWORD *)(v62 + 32) = 0;
      *(unsigned char *)(v62 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v61, v62, v63, v64, v65);
      return (uint64_t)v54;
    }
    uint64_t v69 = (uint64_t)v110;
    DataFrame.subscript.getter(v111, a7, &type metadata for Int);
    v115._char countAndFlagsBits = v58;
    if (a9)
    {
      uint64_t v70 = v114;
      specialized MutableCollection<>.sort(by:)(v69);
      uint64_t v114 = v70;
    }
    uint64_t v71 = v101;
    if (swift_dynamicCastMetatype(v101, &type metadata for Double))
    {
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v73 = (void *)swift_allocObject(v72, 48, 7);
      v73[2] = 1;
      v73[3] = 2;
      v73[4] = v111;
      v73[5] = a7;
      uint64_t v74 = type metadata accessor for DataFrame(0);
      swift_bridgeObjectRetain(a7);
      DataFrameProtocol.grouped(by:)(v73, v74, &protocol witness table for DataFrame);
      swift_bridgeObjectRelease((_BYTE)v73);
      uint64_t v75 = (uint64_t)v93;
      (*(void (**)(unint64_t *, unint64_t *, uint64_t))(v108 + 16))(v93, v110, v109);
      uint64_t v76 = *(int *)(v94 + 52);
      *(void *)(v75 + v76) = specialized closure #1 in Sequence<>.uniqued();
      *(void *)(v75 + v76 + 8) = 0;
      int64_t v54 = v102;
      uint64_t v77 = v114;
      specialized static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)((uint64_t)v102, v75, (uint64_t)v113, v106, v103);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v75, &demangling cache variable for type metadata for UniquedSequence<Column<Int>, Int?>);
      (*(void (**)(unint64_t *, uint64_t))(v104 + 8))(v54, v105);
      (*(void (**)(unint64_t *, uint64_t))(v108 + 8))(v110, v109);
      if (!v77) {
        return v56;
      }
    }
    else
    {
      if (!swift_dynamicCastMetatype(v71, &type metadata for Float))
      {
        unint64_t v86 = 0;
        uint64_t v87 = (char *)0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease((_BYTE)v87);
        unint64_t v86 = 0xD000000000000015;
        uint64_t v87 = "ble], or [Float]" + 0x8000000000000000;
        v84._char countAndFlagsBits = _typeName(_:qualified:)(v71, 0);
        char object = (char)v84._object;
        String.append(_:)(v84);
        swift_bridgeObjectRelease(object);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v86, v87, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 204, 0);
        BUG();
      }
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v79 = (void *)swift_allocObject(v78, 48, 7);
      v79[2] = 1;
      v79[3] = 2;
      v79[4] = v111;
      v79[5] = a7;
      uint64_t v80 = type metadata accessor for DataFrame(0);
      swift_bridgeObjectRetain(a7);
      uint64_t v81 = (uint64_t)v98;
      int64_t v54 = v112;
      DataFrameProtocol.grouped(by:)(v79, v80, &protocol witness table for DataFrame);
      swift_bridgeObjectRelease((_BYTE)v79);
      uint64_t v82 = (uint64_t)v97;
      DataFrame.subscript.getter(v111, a7, &type metadata for String);
      uint64_t v83 = v114;
      specialized static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(v81, v82, (uint64_t)v113, v106, v103);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v82, v95);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v81, v105);
      (*(void (**)(unint64_t *, uint64_t))(v108 + 8))(v110, v109);
      if (!v83) {
        return v115._countAndFlagsBits;
      }
    }
  }
  return (uint64_t)v54;
}

uint64_t closure #1 in MLActivityClassifier.DataBatcher.init(input:sessionIdColumn:labelColumn:featureColumns:windowSize:sortSessions:mode:)(uint64_t a1)
{
  *(void *)uint64_t result = *(void *)(*(void *)a1 + 16);
  *(unsigned char *)(result + 8) = 0;
  return result;
}

uint64_t specialized static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v198 = v6;
  uint64_t v164 = a4;
  uint64_t v194 = a3;
  uint64_t v184 = a2;
  uint64_t v158 = v5;
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Double>>);
  int64_t v8 = *(void *)(*(void *)(v168 - 8) + 64);
  uint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  Swift::String v176 = v154;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v191 = v154;
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<Double>);
  uint64_t v187 = *(void **)(v195 - 8);
  int64_t v13 = v187[8];
  char v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  int64_t v181 = v154;
  int64_t v16 = alloca(v13);
  int64_t v17 = alloca(v13);
  uint64_t v189 = v154;
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
  int64_t v18 = *(void *)(*(void *)(v165 - 8) + 64);
  int64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v175 = v154;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v193 = v154;
  uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<String>);
  uint64_t v192 = *(void *)(v199 - 8);
  int64_t v23 = *(void *)(v192 + 64);
  int64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  char v179 = v154;
  uint64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  uint64_t v188 = v154;
  uint64_t v166 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                   - 8);
  int64_t v28 = *(void *)(v166 + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  uint64_t v167 = v154;
  uint64_t v174 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v172 = *(void *)(v174 - 8);
  int64_t v31 = *(void *)(v172 + 64);
  uint64_t v32 = alloca(v31);
  Swift::String v33 = alloca(v31);
  uint64_t v182 = v154;
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  uint64_t v180 = *(void *)(v178 - 8);
  int64_t v34 = *(void *)(v180 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v155 = v154;
  uint64_t v37 = alloca(v34);
  uint64_t v38 = alloca(v34);
  double v202 = v154;
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v170 = *(void *)(v173 - 8);
  int64_t v39 = *(void *)(v170 + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of DataFrameProtocol.grouped(by:)>>.0);
  v186[0] = type metadata accessor for DataFrame(255);
  v186[1] = &protocol witness table for DataFrame;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v186, &opaque type descriptor for <<opaque return type of DataFrameProtocol.grouped(by:)>>, 1);
  uint64_t v190 = a1;
  uint64_t v44 = dispatch thunk of RowGroupingProtocol.count.getter(v42, OpaqueTypeConformance2);
  swift_bridgeObjectRetain(a5);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  Swift::String v183 = v154;
  uint64_t v46 = v194;
  uint64_t v156 = a5;
  char v197 = (void (*)(void, void))v44;
  uint64_t v159 = v45;
  Column.init(name:capacity:)(v164, a5, v44, v45);
  int64_t v169 = *(void *)(v46 + 16);
  int64_t v47 = v169;
  if (v169)
  {
    v186[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v169, 0);
    uint64_t v48 = (char *)v186[0];
    Swift::String v49 = (uint64_t *)(v46 + 40);
    Swift::Int_optional v50 = (char *)v47;
    do
    {
      uint64_t v201 = v50;
      uint64_t v200 = (char *)*(v49 - 1);
      uint64_t v51 = *v49;
      swift_bridgeObjectRetain(*v49);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      Column.init(name:capacity:)(v200, v51, v197, v52);
      v186[0] = v48;
      unint64_t v53 = *((void *)v48 + 2);
      if (*((void *)v48 + 3) >> 1 <= v53)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v48 + 3) >= 2uLL, v53 + 1, 1);
        uint64_t v48 = (char *)v186[0];
      }
      *((void *)v48 + 2) = v53 + 1;
      (*(void (**)(char *, char *, uint64_t))(v180 + 32))(&v48[((*(unsigned __int8 *)(v180 + 80) + 32) & ~*(unsigned __int8 *)(v180 + 80)) + *(void *)(v180 + 72) * v53], v202, v178);
      v49 += 2;
      Swift::Int_optional v50 = v201 - 1;
    }
    while (v201 != (unsigned char *)&dword_0 + 1);
    uint64_t v196 = v48;
  }
  else
  {
    uint64_t v196 = _swiftEmptyArrayStorage;
  }
  int64_t v54 = alloca(24);
  uint64_t v55 = alloca(32);
  uint64_t v156 = v190;
  uint64_t v56 = v198;
  uint64_t v57 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Algorithms15UniquedSequenceVy11TabularData6ColumnVySiGSiSgG_AI0H5FrameV5SliceVSgs5NeverOTg5((void (*)(uint64_t *))partial apply for specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:), (uint64_t)v154);
  uint64_t v58 = v57;
  BOOL v59 = v56;
  uint64_t v60 = *(void *)(v57 + 16);
  uint64_t v61 = (uint64_t)v167;
  if (v60)
  {
    uint64_t v177 = v56;
    uint64_t v62 = ((*(unsigned __int8 *)(v166 + 80) + 32) & ~*(unsigned __int8 *)(v166 + 80)) + v57;
    uint64_t v157 = v194 + 32;
    unint64_t v63 = 0;
    uint64_t v64 = v199;
    uint64_t v65 = v174;
    uint64_t v185 = v57;
    uint64_t v162 = v60;
    uint64_t v163 = v62;
    while (1)
    {
      if (v63 >= *(void *)(v58 + 16)) {
        BUG();
      }
      uint64_t v66 = *(void *)(v166 + 72);
      uint64_t v184 = v63;
      outlined init with copy of DataFrame.Slice?(v62 + v63 * v66, v61);
      if (__swift_getEnumTagSinglePayload(v61, 1, v65) == 1)
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v61, &demangling cache variable for type metadata for DataFrame.Slice?);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, "Unknown column type: " + 0x8000000000000000, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 110, 0);
        BUG();
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v172 + 32))(v182, v61, v65);
      uint64_t v67 = v188;
      DataFrame.Slice.subscript.getter(v164, v156, &type metadata for String);
      double v202 = *(char **)(v192 + 16);
      ((void (*)(char *, char *, uint64_t))v202)(v179, v67, v64);
      uint64_t v68 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<String> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<String>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
      uint64_t v69 = (uint64_t)v193;
      uint64_t v198 = (void *)v68;
      dispatch thunk of Sequence.makeIterator()(v64, v68);
      uint64_t v70 = v64;
      uint64_t v71 = (char *)*(int *)(v165 + 36);
      uint64_t v72 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<String> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<String>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
      uint64_t v73 = v70;
      uint64_t v74 = v69;
      uint64_t v200 = v71;
      uint64_t v75 = *(void *)&v71[v69];
      uint64_t v76 = (char *)v72;
      dispatch thunk of Collection.endIndex.getter(v73, v72);
      if (v75 != v186[0]) {
        break;
      }
LABEL_16:
      uint64_t v201 = v76;
      ++v184;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v193, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
      uint64_t v84 = v199;
      ((void (*)(char *, char *, uint64_t))v202)(v179, v188, v199);
      uint64_t v85 = (uint64_t)v175;
      dispatch thunk of Sequence.makeIterator()(v84, v198);
      unint64_t v86 = (void *)(v85 + *(int *)(v165 + 36));
      uint64_t v198 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v87 = *v86;
        uint64_t v88 = v86;
        dispatch thunk of Collection.endIndex.getter(v199, v201);
        if (v87 == v186[0]) {
          break;
        }
        uint64_t v89 = v199;
        uint64_t v90 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v186, v88, v199, v201);
        char v197 = *(void (**)(void, void))v91;
        uint64_t v200 = *(char **)(v91 + 8);
        swift_bridgeObjectRetain((_BYTE)v200);
        v90(v186, 0);
        uint64_t v92 = v179;
        ((void (*)(char *, uint64_t, uint64_t))v202)(v179, v85, v89);
        dispatch thunk of Collection.formIndex(after:)(v88, v89, v201);
        char v93 = v92;
        uint64_t v94 = v200;
        (*(void (**)(char *, uint64_t))(v192 + 8))(v93, v89);
        unint64_t v86 = v88;
        if (v94)
        {
          uint64_t v95 = v198;
          if (!swift_isUniquelyReferenced_nonNull_native(v198)) {
            uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95[2] + 1, 1, (uint64_t)v95);
          }
          unint64_t v96 = v95[2];
          int64_t v97 = v96 + 1;
          uint64_t v85 = (uint64_t)v175;
          uint64_t v98 = v197;
          if (v95[3] >> 1 <= v96)
          {
            char v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v95[3] >= 2uLL, v97, 1, (uint64_t)v95);
            uint64_t v98 = v197;
            unint64_t v86 = v88;
            uint64_t v85 = (uint64_t)v175;
            uint64_t v95 = v100;
          }
          else
          {
            unint64_t v86 = v88;
          }
          v95[2] = v97;
          uint64_t v99 = 2 * v96;
          v95[v99 + 4] = v98;
          uint64_t v198 = v95;
          v95[v99 + 5] = v200;
        }
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v85, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
      char v101 = (char)v198;
      v186[0] = v198;
      Column.append(_:)(v186, v173);
      swift_bridgeObjectRelease(v101);
      uint64_t v64 = v199;
      uint64_t v161 = DiscontiguousColumnSlice.count.getter(v199);
      if (v169)
      {
        swift_bridgeObjectRetain(v194);
        unint64_t v102 = 0;
        uint64_t v103 = v195;
        uint64_t v104 = v189;
        while (1)
        {
          uint64_t v105 = *(void *)(v157 + 16 * v102);
          uint64_t v106 = v103;
          uint64_t v107 = *(void *)(v157 + 16 * v102 + 8);
          unint64_t v171 = v102;
          unint64_t v160 = v102 + 1;
          swift_bridgeObjectRetain_n(v107, 2);
          DataFrame.Slice.subscript.getter(v105, v107, &type metadata for Double);
          uint64_t v190 = v107;
          swift_bridgeObjectRelease(v107);
          uint64_t v200 = (char *)v187[2];
          ((void (*)(char *, char *, uint64_t))v200)(v181, v104, v106);
          uint64_t v108 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Double> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Double>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
          uint64_t v109 = (uint64_t)v191;
          char v197 = (void (*)(void, void))v108;
          dispatch thunk of Sequence.makeIterator()(v106, v108);
          uint64_t v201 = (char *)(v109 + *(int *)(v168 + 36));
          uint64_t v110 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Double> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Double>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
          while (1)
          {
            uint64_t v111 = *(void *)v201;
            dispatch thunk of Collection.endIndex.getter(v195, v110);
            if (v111 == v186[0]) {
              break;
            }
            uint64_t v112 = v195;
            char v113 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v186, v201, v195, v110);
            LOBYTE(v202) = *(unsigned char *)(v114 + 8);
            v113(v186, 0);
            Swift::String v115 = v181;
            ((void (*)(char *, char *, uint64_t))v200)(v181, v191, v112);
            dispatch thunk of Collection.formIndex(after:)(v201, v112, v110);
            uint64_t v116 = v112;
            uint64_t v117 = (void (*)(char *, uint64_t))v187[1];
            v117(v115, v116);
            if ((_BYTE)v202)
            {
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v191, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Double>>);
              swift_bridgeObjectRelease((_BYTE)v196);
              swift_bridgeObjectRelease(v185);
              swift_bridgeObjectRelease(v194);
              swift_bridgeObjectRelease(v190);
              uint64_t v134 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v134, 0, 0);
              *(void *)uint64_t v135 = 0xD00000000000001ALL;
              *(void *)(v135 + 8) = "Failed to look up group" + 0x8000000000000000;
              *(_OWORD *)(v135 + 16) = 0;
              *(_OWORD *)(v135 + 32) = 0;
              *(unsigned char *)(v135 + 48) = 0;
              swift_willThrow(&type metadata for MLCreateError, v134, v135, v136, v137, v138);
              v117(v189, v195);
              goto LABEL_49;
            }
          }
          uint64_t v201 = (char *)v110;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v191, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Double>>);
          uint64_t v118 = v195;
          ((void (*)(char *, char *, uint64_t))v200)(v181, v189, v195);
          uint64_t v119 = (uint64_t)v176;
          dispatch thunk of Sequence.makeIterator()(v118, v197);
          uint64_t v120 = (char *)(v119 + *(int *)(v168 + 36));
          uint64_t v198 = _swiftEmptyArrayStorage;
LABEL_32:
          uint64_t v121 = v195;
          while (1)
          {
            double v202 = *(char **)v120;
            uint64_t v122 = v120;
            dispatch thunk of Collection.endIndex.getter(v121, v201);
            if (v202 == (char *)v186[0]) {
              break;
            }
            double v123 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v186, v122, v121, v201);
            char v197 = *(void (**)(void, void))v124;
            LOBYTE(v202) = *(unsigned char *)(v124 + 8);
            v123(v186, 0);
            uint64_t v125 = v181;
            ((void (*)(char *, uint64_t, uint64_t))v200)(v181, v119, v121);
            dispatch thunk of Collection.formIndex(after:)(v122, v121, v201);
            ((void (*)(char *, uint64_t))v187[1])(v125, v121);
            uint64_t v120 = v122;
            if (!(_BYTE)v202)
            {
              double v202 = v122;
              id v126 = v198;
              if (!swift_isUniquelyReferenced_nonNull_native(v198)) {
                id v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v126[2] + 1, 1, (uint64_t)v126);
              }
              unint64_t v127 = v126[2];
              uint64_t v119 = (uint64_t)v176;
              uint64_t v120 = v202;
              char v128 = v197;
              if (v126[3] >> 1 <= v127)
              {
                Swift::String v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v126[3] >= 2uLL, v127 + 1, 1, (uint64_t)v126);
                char v128 = v197;
                uint64_t v120 = v202;
                uint64_t v119 = (uint64_t)v176;
                id v126 = v129;
              }
              v126[2] = v127 + 1;
              uint64_t v198 = v126;
              v126[v127 + 4] = v128;
              goto LABEL_32;
            }
          }
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v119, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Double>>);
          char v130 = (char)v198;
          if (v198[2] != v161) {
            break;
          }
          v186[0] = v198;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v196);
          uint64_t v64 = v199;
          uint64_t v103 = v195;
          uint64_t v132 = v189;
          if (isUniquelyReferenced_nonNull_native) {
            uint64_t v133 = v196;
          }
          else {
            uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v196);
          }
          if (v171 >= v133[2]) {
            BUG();
          }
          uint64_t v196 = v133;
          Column.append(_:)(v186, v178);
          swift_bridgeObjectRelease(v190);
          uint64_t v104 = v132;
          ((void (*)(char *, uint64_t))v187[1])(v132, v103);
          swift_bridgeObjectRelease((_BYTE)v198);
          unint64_t v102 = v160;
          if (v160 == v169)
          {
            swift_bridgeObjectRelease(v194);
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease((_BYTE)v196);
        swift_bridgeObjectRelease(v185);
        swift_bridgeObjectRelease(v194);
        swift_bridgeObjectRelease(v190);
        swift_bridgeObjectRelease(v130);
        uint64_t v149 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v149, 0, 0);
        *(void *)uint64_t v150 = 0xD000000000000036;
        *(void *)(v150 + 8) = "Feature values contain nil" + 0x8000000000000000;
        *(_OWORD *)(v150 + 16) = 0;
        *(_OWORD *)(v150 + 32) = 0;
        *(unsigned char *)(v150 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v149, v150, v151, v152, v153);
        ((void (*)(char *, uint64_t))v187[1])(v189, v195);
LABEL_49:
        (*(void (**)(char *, uint64_t))(v192 + 8))(v188, v199);
        goto LABEL_56;
      }
LABEL_47:
      (*(void (**)(char *, uint64_t))(v192 + 8))(v188, v64);
      uint64_t v65 = v174;
      (*(void (**)(char *, uint64_t))(v172 + 8))(v182, v174);
      unint64_t v63 = v184;
      uint64_t v61 = (uint64_t)v167;
      uint64_t v58 = v185;
      uint64_t v62 = v163;
      if (v184 == v162)
      {
        swift_bridgeObjectRelease(v185);
        BOOL v59 = v177;
        goto LABEL_51;
      }
    }
    v200 += v74;
    while (1)
    {
      uint64_t v77 = v199;
      char v197 = (void (*)(void, void))dispatch thunk of Collection.subscript.read(v186, v200, v199, v76);
      uint64_t v79 = *(void *)(v78 + 8);
      swift_bridgeObjectRetain(v79);
      v197(v186, 0);
      uint64_t v80 = v179;
      ((void (*)(char *, char *, uint64_t))v202)(v179, v193, v77);
      dispatch thunk of Collection.formIndex(after:)(v200, v77, v76);
      uint64_t v81 = v77;
      uint64_t v82 = *(void (**)(char *, uint64_t))(v192 + 8);
      v82(v80, v81);
      if (!v79) {
        break;
      }
      swift_bridgeObjectRelease(v79);
      uint64_t v83 = *(void *)v200;
      dispatch thunk of Collection.endIndex.getter(v199, v76);
      if (v83 == v186[0]) {
        goto LABEL_16;
      }
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v193, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
    swift_bridgeObjectRelease((_BYTE)v196);
    swift_bridgeObjectRelease(v185);
    uint64_t v143 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v143, 0, 0);
    *(void *)uint64_t v144 = 0xD000000000000038;
    *(void *)(v144 + 8) = "Swift/Integers.swift" + 0x8000000000000000;
    *(_OWORD *)(v144 + 16) = 0;
    *(_OWORD *)(v144 + 32) = 0;
    *(unsigned char *)(v144 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v143, v144, v145, v146, v147);
    v82(v188, v199);
LABEL_56:
    (*(void (**)(char *, uint64_t))(v172 + 8))(v182, v174);
  }
  else
  {
    swift_bridgeObjectRelease(v57);
LABEL_51:
    DataFrame.init()();
    DataFrame.append<A>(column:)(v183, v159);
    uint64_t v139 = v196[2];
    if (v139)
    {
      uint64_t v177 = v59;
      uint64_t v140 = (char *)v196 + ((*(unsigned __int8 *)(v180 + 80) + 32) & ~*(unsigned __int8 *)(v180 + 80));
      uint64_t v201 = *(char **)(v180 + 16);
      uint64_t v199 = *(void *)(v180 + 72);
      Swift::String v141 = v155;
      do
      {
        ((void (*)(char *, char *, uint64_t))v201)(v141, v140, v178);
        uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
        DataFrame.append<A>(column:)(v141, v142);
        (*(void (**)(char *, uint64_t))(v180 + 8))(v141, v178);
        v140 += v199;
        --v139;
      }
      while (v139);
    }
    swift_bridgeObjectRelease((_BYTE)v196);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v170 + 8))(v183, v173);
}

{
  uint64_t v5;
  void *v6;
  int64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int64_t v28;
  void *v29;
  void *v30;
  int64_t v31;
  void *v32;
  void *v33;
  int64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void (*v90)(void *, void);
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  void *v95;
  unint64_t v96;
  int64_t v97;
  void (*v98)(void, void);
  uint64_t v99;
  void *v100;
  char v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(void *, void);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  void (*v123)(void *, void);
  uint64_t v124;
  char *v125;
  void *v126;
  unint64_t v127;
  int v128;
  void *v129;
  char v130;
  char isUniquelyReferenced_nonNull_native;
  char *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154[8];
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  int64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  void *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  void v186[4];
  void *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void (*v197)(void, void);
  void *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;

  uint64_t v198 = v6;
  uint64_t v164 = a4;
  uint64_t v194 = a3;
  uint64_t v184 = a2;
  uint64_t v158 = v5;
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Float>>);
  int64_t v8 = *(void *)(*(void *)(v168 - 8) + 64);
  uint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  Swift::String v176 = v154;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  uint64_t v191 = v154;
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<Float>);
  uint64_t v187 = *(void **)(v195 - 8);
  int64_t v13 = v187[8];
  char v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  int64_t v181 = v154;
  int64_t v16 = alloca(v13);
  int64_t v17 = alloca(v13);
  uint64_t v189 = v154;
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
  int64_t v18 = *(void *)(*(void *)(v165 - 8) + 64);
  int64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v175 = v154;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v193 = v154;
  uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<String>);
  uint64_t v192 = *(void *)(v199 - 8);
  int64_t v23 = *(void *)(v192 + 64);
  int64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  char v179 = v154;
  uint64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  uint64_t v188 = v154;
  uint64_t v166 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?)
                   - 8);
  int64_t v28 = *(void *)(v166 + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  uint64_t v167 = v154;
  uint64_t v174 = type metadata accessor for DataFrame.Slice(0);
  uint64_t v172 = *(void *)(v174 - 8);
  int64_t v31 = *(void *)(v172 + 64);
  uint64_t v32 = alloca(v31);
  Swift::String v33 = alloca(v31);
  uint64_t v182 = v154;
  uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  uint64_t v180 = *(void *)(v178 - 8);
  int64_t v34 = *(void *)(v180 + 64);
  uint64_t v35 = alloca(v34);
  uint64_t v36 = alloca(v34);
  uint64_t v155 = v154;
  uint64_t v37 = alloca(v34);
  uint64_t v38 = alloca(v34);
  double v202 = v154;
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  uint64_t v170 = *(void *)(v173 - 8);
  int64_t v39 = *(void *)(v170 + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of DataFrameProtocol.grouped(by:)>>.0);
  v186[0] = type metadata accessor for DataFrame(255);
  v186[1] = &protocol witness table for DataFrame;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v186, &opaque type descriptor for <<opaque return type of DataFrameProtocol.grouped(by:)>>, 1);
  uint64_t v190 = a1;
  uint64_t v44 = dispatch thunk of RowGroupingProtocol.count.getter(v42, OpaqueTypeConformance2);
  swift_bridgeObjectRetain(a5);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  Swift::String v183 = v154;
  uint64_t v46 = v194;
  uint64_t v156 = a5;
  char v197 = (void (*)(void, void))v44;
  uint64_t v159 = v45;
  Column.init(name:capacity:)(v164, a5, v44, v45);
  int64_t v169 = *(void *)(v46 + 16);
  int64_t v47 = v169;
  if (v169)
  {
    v186[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v169, 0);
    uint64_t v48 = (char *)v186[0];
    Swift::String v49 = (uint64_t *)(v46 + 40);
    Swift::Int_optional v50 = (char *)v47;
    do
    {
      uint64_t v201 = v50;
      uint64_t v200 = (char *)*(v49 - 1);
      uint64_t v51 = *v49;
      swift_bridgeObjectRetain(*v49);
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      Column.init(name:capacity:)(v200, v51, v197, v52);
      v186[0] = v48;
      unint64_t v53 = *((void *)v48 + 2);
      if (*((void *)v48 + 3) >> 1 <= v53)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v48 + 3) >= 2uLL, v53 + 1, 1);
        uint64_t v48 = (char *)v186[0];
      }
      *((void *)v48 + 2) = v53 + 1;
      (*(void (**)(char *, char *, uint64_t))(v180 + 32))(&v48[((*(unsigned __int8 *)(v180 + 80) + 32) & ~*(unsigned __int8 *)(v180 + 80)) + *(void *)(v180 + 72) * v53], v202, v178);
      v49 += 2;
      Swift::Int_optional v50 = v201 - 1;
    }
    while (v201 != (unsigned char *)&dword_0 + 1);
    uint64_t v196 = v48;
  }
  else
  {
    uint64_t v196 = _swiftEmptyArrayStorage;
  }
  int64_t v54 = alloca(24);
  uint64_t v55 = alloca(32);
  uint64_t v156 = v190;
  uint64_t v56 = v198;
  uint64_t v57 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySSG_AF0E5FrameV5SliceVSgs5NeverOTg5((void (*)(long long *))partial apply for specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:), (uint64_t)v154);
  uint64_t v58 = v57;
  BOOL v59 = v56;
  uint64_t v60 = *(void *)(v57 + 16);
  uint64_t v61 = (uint64_t)v167;
  if (v60)
  {
    uint64_t v177 = v56;
    uint64_t v62 = ((*(unsigned __int8 *)(v166 + 80) + 32) & ~*(unsigned __int8 *)(v166 + 80)) + v57;
    uint64_t v157 = v194 + 32;
    unint64_t v63 = 0;
    uint64_t v64 = v199;
    uint64_t v65 = v174;
    uint64_t v185 = v57;
    uint64_t v162 = v60;
    uint64_t v163 = v62;
    while (1)
    {
      if (v63 >= *(void *)(v58 + 16)) {
        BUG();
      }
      uint64_t v66 = *(void *)(v166 + 72);
      uint64_t v184 = v63;
      outlined init with copy of DataFrame.Slice?(v62 + v63 * v66, v61);
      if (__swift_getEnumTagSinglePayload(v61, 1, v65) == 1)
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v61, &demangling cache variable for type metadata for DataFrame.Slice?);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, "Unknown column type: " + 0x8000000000000000, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 110, 0);
        BUG();
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v172 + 32))(v182, v61, v65);
      uint64_t v67 = v188;
      DataFrame.Slice.subscript.getter(v164, v156, &type metadata for String);
      double v202 = *(char **)(v192 + 16);
      ((void (*)(char *, char *, uint64_t))v202)(v179, v67, v64);
      uint64_t v68 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<String> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<String>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
      uint64_t v69 = (uint64_t)v193;
      uint64_t v198 = (void *)v68;
      dispatch thunk of Sequence.makeIterator()(v64, v68);
      uint64_t v70 = v64;
      uint64_t v71 = (char *)*(int *)(v165 + 36);
      uint64_t v72 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<String> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<String>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
      uint64_t v73 = v70;
      uint64_t v74 = v69;
      uint64_t v200 = v71;
      uint64_t v75 = *(void *)&v71[v69];
      uint64_t v76 = (char *)v72;
      dispatch thunk of Collection.endIndex.getter(v73, v72);
      if (v75 != v186[0]) {
        break;
      }
LABEL_16:
      uint64_t v201 = v76;
      ++v184;
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v193, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
      uint64_t v84 = v199;
      ((void (*)(char *, char *, uint64_t))v202)(v179, v188, v199);
      uint64_t v85 = (uint64_t)v175;
      dispatch thunk of Sequence.makeIterator()(v84, v198);
      unint64_t v86 = (void *)(v85 + *(int *)(v165 + 36));
      uint64_t v198 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v87 = *v86;
        uint64_t v88 = v86;
        dispatch thunk of Collection.endIndex.getter(v199, v201);
        if (v87 == v186[0]) {
          break;
        }
        uint64_t v89 = v199;
        uint64_t v90 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v186, v88, v199, v201);
        char v197 = *(void (**)(void, void))v91;
        uint64_t v200 = *(char **)(v91 + 8);
        swift_bridgeObjectRetain((_BYTE)v200);
        v90(v186, 0);
        uint64_t v92 = v179;
        ((void (*)(char *, uint64_t, uint64_t))v202)(v179, v85, v89);
        dispatch thunk of Collection.formIndex(after:)(v88, v89, v201);
        char v93 = v92;
        uint64_t v94 = v200;
        (*(void (**)(char *, uint64_t))(v192 + 8))(v93, v89);
        unint64_t v86 = v88;
        if (v94)
        {
          uint64_t v95 = v198;
          if (!swift_isUniquelyReferenced_nonNull_native(v198)) {
            uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95[2] + 1, 1, (uint64_t)v95);
          }
          unint64_t v96 = v95[2];
          int64_t v97 = v96 + 1;
          uint64_t v85 = (uint64_t)v175;
          uint64_t v98 = v197;
          if (v95[3] >> 1 <= v96)
          {
            char v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v95[3] >= 2uLL, v97, 1, (uint64_t)v95);
            uint64_t v98 = v197;
            unint64_t v86 = v88;
            uint64_t v85 = (uint64_t)v175;
            uint64_t v95 = v100;
          }
          else
          {
            unint64_t v86 = v88;
          }
          v95[2] = v97;
          uint64_t v99 = 2 * v96;
          v95[v99 + 4] = v98;
          uint64_t v198 = v95;
          v95[v99 + 5] = v200;
        }
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v85, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
      char v101 = (char)v198;
      v186[0] = v198;
      Column.append(_:)(v186, v173);
      swift_bridgeObjectRelease(v101);
      uint64_t v64 = v199;
      uint64_t v161 = DiscontiguousColumnSlice.count.getter(v199);
      if (v169)
      {
        swift_bridgeObjectRetain(v194);
        unint64_t v102 = 0;
        uint64_t v103 = v195;
        uint64_t v104 = v189;
        while (1)
        {
          uint64_t v105 = *(void *)(v157 + 16 * v102);
          uint64_t v106 = v103;
          uint64_t v107 = *(void *)(v157 + 16 * v102 + 8);
          unint64_t v171 = v102;
          unint64_t v160 = v102 + 1;
          swift_bridgeObjectRetain_n(v107, 2);
          DataFrame.Slice.subscript.getter(v105, v107, &type metadata for Float);
          uint64_t v190 = v107;
          swift_bridgeObjectRelease(v107);
          uint64_t v200 = (char *)v187[2];
          ((void (*)(char *, char *, uint64_t))v200)(v181, v104, v106);
          uint64_t v108 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Float> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Float>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
          uint64_t v109 = (uint64_t)v191;
          char v197 = (void (*)(void, void))v108;
          dispatch thunk of Sequence.makeIterator()(v106, v108);
          uint64_t v201 = (char *)(v109 + *(int *)(v168 + 36));
          uint64_t v110 = lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DiscontiguousColumnSlice<Float> and conformance DiscontiguousColumnSlice<A>, &demangling cache variable for type metadata for DiscontiguousColumnSlice<Float>, (uint64_t)&protocol conformance descriptor for DiscontiguousColumnSlice<A>);
          while (1)
          {
            uint64_t v111 = *(void *)v201;
            dispatch thunk of Collection.endIndex.getter(v195, v110);
            if (v111 == v186[0]) {
              break;
            }
            uint64_t v112 = v195;
            char v113 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v186, v201, v195, v110);
            LOBYTE(v202) = *(unsigned char *)(v114 + 4);
            v113(v186, 0);
            Swift::String v115 = v181;
            ((void (*)(char *, char *, uint64_t))v200)(v181, v191, v112);
            dispatch thunk of Collection.formIndex(after:)(v201, v112, v110);
            uint64_t v116 = v112;
            uint64_t v117 = (void (*)(char *, uint64_t))v187[1];
            v117(v115, v116);
            if ((_BYTE)v202)
            {
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v191, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Float>>);
              swift_bridgeObjectRelease((_BYTE)v196);
              swift_bridgeObjectRelease(v185);
              swift_bridgeObjectRelease(v194);
              swift_bridgeObjectRelease(v190);
              uint64_t v134 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v134, 0, 0);
              *(void *)uint64_t v135 = 0xD00000000000001ALL;
              *(void *)(v135 + 8) = "Failed to look up group" + 0x8000000000000000;
              *(_OWORD *)(v135 + 16) = 0;
              *(_OWORD *)(v135 + 32) = 0;
              *(unsigned char *)(v135 + 48) = 0;
              swift_willThrow(&type metadata for MLCreateError, v134, v135, v136, v137, v138);
              v117(v189, v195);
              goto LABEL_49;
            }
          }
          uint64_t v201 = (char *)v110;
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v191, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Float>>);
          uint64_t v118 = v195;
          ((void (*)(char *, char *, uint64_t))v200)(v181, v189, v195);
          uint64_t v119 = (uint64_t)v176;
          dispatch thunk of Sequence.makeIterator()(v118, v197);
          uint64_t v120 = (char *)(v119 + *(int *)(v168 + 36));
          uint64_t v198 = _swiftEmptyArrayStorage;
LABEL_32:
          uint64_t v121 = v195;
          while (1)
          {
            double v202 = *(char **)v120;
            uint64_t v122 = v120;
            dispatch thunk of Collection.endIndex.getter(v121, v201);
            if (v202 == (char *)v186[0]) {
              break;
            }
            double v123 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v186, v122, v121, v201);
            LODWORD(v197) = *(_DWORD *)v124;
            LOBYTE(v202) = *(unsigned char *)(v124 + 4);
            v123(v186, 0);
            uint64_t v125 = v181;
            ((void (*)(char *, uint64_t, uint64_t))v200)(v181, v119, v121);
            dispatch thunk of Collection.formIndex(after:)(v122, v121, v201);
            ((void (*)(char *, uint64_t))v187[1])(v125, v121);
            uint64_t v120 = v122;
            if (!(_BYTE)v202)
            {
              double v202 = v122;
              id v126 = v198;
              if (!swift_isUniquelyReferenced_nonNull_native(v198)) {
                id v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v126[2] + 1, 1, (uint64_t)v126);
              }
              unint64_t v127 = v126[2];
              uint64_t v119 = (uint64_t)v176;
              uint64_t v120 = v202;
              char v128 = (int)v197;
              if (v126[3] >> 1 <= v127)
              {
                Swift::String v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v126[3] >= 2uLL, v127 + 1, 1, (uint64_t)v126);
                char v128 = (int)v197;
                uint64_t v120 = v202;
                uint64_t v119 = (uint64_t)v176;
                id v126 = v129;
              }
              v126[2] = v127 + 1;
              uint64_t v198 = v126;
              *((_DWORD *)v126 + v127 + 8) = v128;
              goto LABEL_32;
            }
          }
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v119, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<Float>>);
          char v130 = (char)v198;
          if (v198[2] != v161) {
            break;
          }
          v186[0] = v198;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v196);
          uint64_t v64 = v199;
          uint64_t v103 = v195;
          uint64_t v132 = v189;
          if (isUniquelyReferenced_nonNull_native) {
            uint64_t v133 = v196;
          }
          else {
            uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v196);
          }
          if (v171 >= v133[2]) {
            BUG();
          }
          uint64_t v196 = v133;
          Column.append(_:)(v186, v178);
          swift_bridgeObjectRelease(v190);
          uint64_t v104 = v132;
          ((void (*)(char *, uint64_t))v187[1])(v132, v103);
          swift_bridgeObjectRelease((_BYTE)v198);
          unint64_t v102 = v160;
          if (v160 == v169)
          {
            swift_bridgeObjectRelease(v194);
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease((_BYTE)v196);
        swift_bridgeObjectRelease(v185);
        swift_bridgeObjectRelease(v194);
        swift_bridgeObjectRelease(v190);
        swift_bridgeObjectRelease(v130);
        uint64_t v149 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v149, 0, 0);
        *(void *)uint64_t v150 = 0xD000000000000036;
        *(void *)(v150 + 8) = "Feature values contain nil" + 0x8000000000000000;
        *(_OWORD *)(v150 + 16) = 0;
        *(_OWORD *)(v150 + 32) = 0;
        *(unsigned char *)(v150 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v149, v150, v151, v152, v153);
        ((void (*)(char *, uint64_t))v187[1])(v189, v195);
LABEL_49:
        (*(void (**)(char *, uint64_t))(v192 + 8))(v188, v199);
        goto LABEL_56;
      }
LABEL_47:
      (*(void (**)(char *, uint64_t))(v192 + 8))(v188, v64);
      uint64_t v65 = v174;
      (*(void (**)(char *, uint64_t))(v172 + 8))(v182, v174);
      unint64_t v63 = v184;
      uint64_t v61 = (uint64_t)v167;
      uint64_t v58 = v185;
      uint64_t v62 = v163;
      if (v184 == v162)
      {
        swift_bridgeObjectRelease(v185);
        BOOL v59 = v177;
        goto LABEL_51;
      }
    }
    v200 += v74;
    while (1)
    {
      uint64_t v77 = v199;
      char v197 = (void (*)(void, void))dispatch thunk of Collection.subscript.read(v186, v200, v199, v76);
      uint64_t v79 = *(void *)(v78 + 8);
      swift_bridgeObjectRetain(v79);
      v197(v186, 0);
      uint64_t v80 = v179;
      ((void (*)(char *, char *, uint64_t))v202)(v179, v193, v77);
      dispatch thunk of Collection.formIndex(after:)(v200, v77, v76);
      uint64_t v81 = v77;
      uint64_t v82 = *(void (**)(char *, uint64_t))(v192 + 8);
      v82(v80, v81);
      if (!v79) {
        break;
      }
      swift_bridgeObjectRelease(v79);
      uint64_t v83 = *(void *)v200;
      dispatch thunk of Collection.endIndex.getter(v199, v76);
      if (v83 == v186[0]) {
        goto LABEL_16;
      }
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v193, &demangling cache variable for type metadata for IndexingIterator<DiscontiguousColumnSlice<String>>);
    swift_bridgeObjectRelease((_BYTE)v196);
    swift_bridgeObjectRelease(v185);
    uint64_t v143 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v143, 0, 0);
    *(void *)uint64_t v144 = 0xD000000000000038;
    *(void *)(v144 + 8) = "Swift/Integers.swift" + 0x8000000000000000;
    *(_OWORD *)(v144 + 16) = 0;
    *(_OWORD *)(v144 + 32) = 0;
    *(unsigned char *)(v144 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v143, v144, v145, v146, v147);
    v82(v188, v199);
LABEL_56:
    (*(void (**)(char *, uint64_t))(v172 + 8))(v182, v174);
  }
  else
  {
    swift_bridgeObjectRelease(v57);
LABEL_51:
    DataFrame.init()();
    DataFrame.append<A>(column:)(v183, v159);
    uint64_t v139 = v196[2];
    if (v139)
    {
      uint64_t v177 = v59;
      uint64_t v140 = (char *)v196 + ((*(unsigned __int8 *)(v180 + 80) + 32) & ~*(unsigned __int8 *)(v180 + 80));
      uint64_t v201 = *(char **)(v180 + 16);
      uint64_t v199 = *(void *)(v180 + 72);
      Swift::String v141 = v155;
      do
      {
        ((void (*)(char *, char *, uint64_t))v201)(v141, v140, v178);
        uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        DataFrame.append<A>(column:)(v141, v142);
        (*(void (**)(char *, uint64_t))(v180 + 8))(v141, v178);
        v140 += v199;
        --v139;
      }
      while (v139);
    }
    swift_bridgeObjectRelease((_BYTE)v196);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v170 + 8))(v183, v173);
}

uint64_t specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[3] = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
  int64_t v4 = (void *)swift_allocObject(v3, 64, 7);
  v4[2] = 1;
  v4[3] = 2;
  v4[7] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  void v4[4] = a1;
  v4[5] = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of DataFrameProtocol.grouped(by:)>>.0);
  v8[0] = type metadata accessor for DataFrame(255);
  v8[1] = &protocol witness table for DataFrame;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of DataFrameProtocol.grouped(by:)>>, 1);
  dispatch thunk of RowGroupingProtocol.subscript.getter(v4, v5, OpaqueTypeConformance2);
  return swift_bridgeObjectRelease((_BYTE)v4);
}

uint64_t specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t a1, char a2, uint64_t a3)
{
  v8[3] = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
  uint64_t v4 = swift_allocObject(v3, 64, 7);
  *(void *)(v4 + 16) = 1;
  *(void *)(v4 + 24) = 2;
  *(void *)(v4 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  *(void *)(v4 + 32) = a1;
  *(unsigned char *)(v4 + 40) = a2 & 1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of DataFrameProtocol.grouped(by:)>>.0);
  v8[0] = type metadata accessor for DataFrame(255);
  v8[1] = &protocol witness table for DataFrame;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of DataFrameProtocol.grouped(by:)>>, 1);
  dispatch thunk of RowGroupingProtocol.subscript.getter(v4, v5, OpaqueTypeConformance2);
  return swift_bridgeObjectRelease(v4);
}

BOOL closure #2 in static MLActivityClassifier.DataBatcher.preprocess(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    BUG();
  }
  if (*(unsigned char *)(a2 + 8)) {
    BUG();
  }
  return *(void *)a1 < *(void *)a2;
}

uint64_t MLActivityClassifier.DataBatcher.generateBatch(startingAt:rowCount:seed:)(int64_t a1, uint64_t a2, int64_t a3)
{
  int64_t v22 = a3;
  uint64_t v20 = a2;
  int64_t v21 = a1;
  uint64_t v4 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  int64_t v18 = &v16;
  uint64_t v8 = *(void *)(v3 + *(int *)(v4 + 32));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype(v8, v9)) {
    return specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(v21, v20, v22);
  }
  uint64_t v19 = v4;
  uint64_t v11 = v22;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (!swift_dynamicCastMetatype(v8, v12))
  {
    uint64_t v13 = (uint64_t)v18;
    outlined init with copy of MLActivityClassifier.DataBatcher(v3, (uint64_t)v18);
    unint64_t v16 = 0;
    int64_t v17 = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease((_BYTE)v17);
    unint64_t v16 = 0xD000000000000016;
    int64_t v17 = "ityClassifier+Batching.swift" + 0x8000000000000000;
    v14._char countAndFlagsBits = _typeName(_:qualified:)(*(void *)(v13 + *(int *)(v19 + 32)), 0);
    char object = (char)v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v16, v17, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 334, 0);
    BUG();
  }
  return specialized MLActivityClassifier.DataBatcher.generateBatch<A>(startingAt:rowCount:seed:_:)(v21, v20, v11);
}

uint64_t MLActivityClassifier.DataBatcher.generateNextBatch(rowCount:seed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(type metadata accessor for MLActivityClassifier.DataBatcher(0) + 32));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype(v3, v4)) {
    return specialized MLActivityClassifier.DataBatcher.generateNextBatch<A>(rowCount:seed:_:)(a1, a2);
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (!swift_dynamicCastMetatype(v3, v6))
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0);
    v7._char countAndFlagsBits = _typeName(_:qualified:)(v3, 0);
    char object = (char)v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, "ityClassifier+Batching.swift" + 0x8000000000000000, "CreateML/MLActivityClassifier+Batching.swift", 44, 2, 348, 0);
    BUG();
  }
  return specialized MLActivityClassifier.DataBatcher.generateNextBatch<A>(rowCount:seed:_:)(a1, a2);
}

uint64_t outlined init with copy of MLActivityClassifier.DataBatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLActivityClassifier.DataBatcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t (*a1)(uint64_t *, uint64_t *))
{
  Swift::Int v3 = v2[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      BUG();
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
  }
  else
  {
    Swift::Int v89 = v4;
    uint64_t v88 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
    uint64_t v87 = v5;
    uint64_t v100 = v3;
    uint64_t v85 = v2;
    if (v3 > 0)
    {
      uint64_t v6 = *v2;
      uint64_t v86 = *v2 + 40;
      Swift::String v7 = (char *)_swiftEmptyArrayStorage;
      uint64_t v8 = 0;
      uint64_t v101 = *v2;
      while (1)
      {
        uint64_t v9 = v8;
        uint64_t v10 = v8 + 1;
        uint64_t v11 = v100;
        if (v8 + 1 < v100)
        {
          unint64_t v102 = v7;
          uint64_t v12 = 16 * v10;
          char v13 = *(unsigned char *)(v6 + v12 + 8);
          uint64_t v94 = *(void *)(v6 + v12);
          char v95 = v13;
          uint64_t v14 = 16 * v8;
          char v15 = *(unsigned char *)(v6 + 16 * v8 + 8);
          uint64_t v96 = *(void *)(v6 + 16 * v8);
          char v97 = v15;
          LOBYTE(v99) = a1(&v94, &v96);
          if (v1) {
            goto LABEL_102;
          }
          uint64_t v10 = v9 + 2;
          uint64_t v11 = v100;
          if (v9 + 2 < v100)
          {
            unint64_t v98 = v9;
            unint64_t v16 = (unsigned char *)(v86 + 16 * v9);
            while (1)
            {
              uint64_t v17 = v10;
              char v18 = *v16;
              uint64_t v94 = *((void *)v16 - 1);
              char v95 = v18;
              char v19 = *(v16 - 16);
              uint64_t v96 = *((void *)v16 - 3);
              char v97 = v19;
              unsigned __int8 v20 = a1(&v94, &v96);
              uint64_t v11 = v100;
              if ((v99 ^ v20)) {
                break;
              }
              ++v10;
              v16 += 16;
              if (v17 + 1 >= v100)
              {
                uint64_t v10 = v100;
                break;
              }
            }
            uint64_t v9 = v98;
          }
          uint64_t v6 = v101;
          if (v99)
          {
            if (v10 < v9) {
              BUG();
            }
            Swift::String v7 = v102;
            if (v10 > v9)
            {
              uint64_t v21 = 16 * v10 - 16;
              uint64_t v22 = v10;
              uint64_t v23 = v9;
              do
              {
                if (v23 != --v22)
                {
                  if (!v6) {
                    BUG();
                  }
                  int64_t v24 = (_OWORD *)(v6 + v14);
                  uint64_t v25 = *(void *)(v6 + v14);
                  char v26 = *(unsigned char *)(v6 + v14 + 8);
                  if (v14 != v21 || (uint64_t v6 = v101, (unint64_t)v24 >= v21 + v101 + 16))
                  {
                    uint64_t v6 = v101;
                    *int64_t v24 = *(_OWORD *)(v21 + v101);
                  }
                  *(void *)(v6 + v21) = v25;
                  *(unsigned char *)(v6 + v21 + 8) = v26 & 1;
                }
                ++v23;
                v21 -= 16;
                v14 += 16;
              }
              while (v23 < v22);
            }
          }
          else
          {
            Swift::String v7 = v102;
          }
        }
        if (v10 < v11)
        {
          if (__OFSUB__(v10, v9)) {
            BUG();
          }
          if (v10 - v9 < v89)
          {
            uint64_t v27 = v89 + v9;
            if (__OFADD__(v89, v9)) {
              BUG();
            }
            if (v27 >= v11) {
              uint64_t v27 = v11;
            }
            if (v27 < v9) {
              BUG();
            }
            if (v10 != v27)
            {
              unint64_t v102 = v7;
              uint64_t v67 = (char *)(v6 + 16 * v10);
              unint64_t v98 = v9;
              uint64_t v93 = v27;
              do
              {
                uint64_t v99 = v67;
                do
                {
                  char v68 = v67[8];
                  uint64_t v94 = *(void *)v67;
                  char v95 = v68;
                  char v69 = *(v67 - 8);
                  uint64_t v96 = *((void *)v67 - 2);
                  char v97 = v69;
                  char v70 = a1(&v94, &v96);
                  if (v1) {
                    goto LABEL_102;
                  }
                  if ((v70 & 1) == 0) {
                    break;
                  }
                  if (!v101) {
                    BUG();
                  }
                  uint64_t v71 = *(void *)v67;
                  char v72 = v67[8];
                  *(_OWORD *)uint64_t v67 = *((_OWORD *)v67 - 1);
                  *((void *)v67 - 2) = v71;
                  *(v67 - 8) = v72;
                  ++v9;
                  v67 -= 16;
                }
                while (v10 != v9);
                ++v10;
                uint64_t v67 = v99 + 16;
                uint64_t v9 = v98;
              }
              while (v10 != v93);
              uint64_t v10 = v93;
              Swift::String v7 = v102;
            }
          }
        }
        if (v10 < v9) {
          BUG();
        }
        int64_t v28 = v7;
        uint64_t v92 = v10;
        if (swift_isUniquelyReferenced_nonNull_native(v7)) {
          Swift::String v7 = v28;
        }
        else {
          Swift::String v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28);
        }
        unint64_t v29 = *((void *)v7 + 2);
        unint64_t v30 = v29 + 1;
        uint64_t v6 = v101;
        if (*((void *)v7 + 3) >> 1 <= v29)
        {
          uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*((void *)v7 + 3) >= 2uLL, v29 + 1, 1, v7);
          uint64_t v6 = v101;
          Swift::String v7 = v73;
        }
        *((void *)v7 + 2) = v30;
        uint64_t v31 = 16 * v29;
        *(void *)&v7[v31 + 32] = v9;
        *(void *)&v7[v31 + 40] = v92;
        if (v29) {
          break;
        }
        unint64_t v30 = 1;
LABEL_74:
        uint64_t v8 = v92;
        if (v92 >= v100) {
          goto LABEL_89;
        }
      }
      uint64_t v32 = v7 + 32;
      unint64_t v102 = v7;
      uint64_t v99 = v7 + 32;
      while (1)
      {
        unint64_t v33 = v30 - 1;
        if (v30 >= 4) {
          break;
        }
        if (v30 == 3)
        {
          uint64_t v34 = *((void *)v7 + 5);
          BOOL v35 = __OFSUB__(v34, *((void *)v7 + 4));
          uint64_t v36 = v34 - *((void *)v7 + 4);
          BOOL v37 = v35;
LABEL_48:
          if (v37) {
            BUG();
          }
          unint64_t v47 = v30 - 2;
          uint64_t v48 = 16 * (v30 - 2);
          uint64_t v49 = *(void *)&v32[v48 + 8];
          BOOL v35 = __OFSUB__(v49, *(void *)&v32[v48]);
          uint64_t v50 = v49 - *(void *)&v32[v48];
          BOOL v51 = v35;
          if (v35) {
            BUG();
          }
          uint64_t v52 = *(void *)&v32[16 * v33 + 8];
          BOOL v35 = __OFSUB__(v52, *(void *)&v32[16 * v33]);
          uint64_t v53 = v52 - *(void *)&v32[16 * v33];
          if (v35) {
            BUG();
          }
          if (__OFADD__(v53, v50)) {
            BUG();
          }
          if (v53 + v50 >= v36)
          {
            if (v36 >= v53) {
              unint64_t v47 = v30 - 1;
            }
            unint64_t v33 = v47;
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        uint64_t v54 = *((void *)v7 + 5);
        BOOL v35 = __OFSUB__(v54, *((void *)v7 + 4));
        uint64_t v50 = v54 - *((void *)v7 + 4);
        BOOL v51 = v35;
LABEL_57:
        if (v51) {
          BUG();
        }
        uint64_t v55 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v55, *(void *)&v32[16 * v33]);
        uint64_t v56 = v55 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v56 < v50) {
          goto LABEL_74;
        }
LABEL_65:
        if (v33 - 1 >= v30) {
          BUG();
        }
        if (!v6) {
          BUG();
        }
        uint64_t v59 = 16 * (v33 - 1);
        unint64_t v98 = v33;
        uint64_t v60 = &v32[16 * v33];
        uint64_t v61 = *(void *)&v32[v59];
        uint64_t v62 = *((void *)v60 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v6 + 16 * v61), (char *)(v6 + 16 * *(void *)v60), v6 + 16 * v62, v87, a1);
        if (v1) {
          goto LABEL_102;
        }
        uint64_t v63 = (uint64_t)v102;
        if (v62 < v61) {
          BUG();
        }
        unint64_t v64 = v98;
        if (v98 > *((void *)v102 + 2)) {
          BUG();
        }
        uint64_t v65 = &v99[v59];
        *(void *)uint64_t v65 = v61;
        *((void *)v65 + 1) = v62;
        unint64_t v66 = *(void *)(v63 + 16);
        if (v64 >= v66) {
          BUG();
        }
        unint64_t v30 = v66 - 1;
        memmove(v60, v60 + 16, 16 * (v66 - 1 - v64));
        uint64_t v32 = v99;
        Swift::String v7 = v102;
        *((void *)v102 + 2) = v66 - 1;
        uint64_t v6 = v101;
        if (v66 <= 2) {
          goto LABEL_74;
        }
      }
      uint64_t v38 = 16 * v30;
      uint64_t v39 = *(void *)&v32[16 * v30 - 56];
      BOOL v35 = __OFSUB__(v39, *(void *)&v32[16 * v30 - 64]);
      uint64_t v40 = v39 - *(void *)&v32[16 * v30 - 64];
      if (v35) {
        BUG();
      }
      uint64_t v41 = *(void *)&v32[v38 - 40];
      BOOL v35 = __OFSUB__(v41, *(void *)&v32[v38 - 48]);
      uint64_t v36 = v41 - *(void *)&v32[v38 - 48];
      BOOL v37 = v35;
      if (v35) {
        BUG();
      }
      unint64_t v42 = v30 - 2;
      uint64_t v43 = 16 * (v30 - 2);
      uint64_t v44 = *(void *)&v32[v43 + 8];
      BOOL v35 = __OFSUB__(v44, *(void *)&v32[v43]);
      uint64_t v45 = v44 - *(void *)&v32[v43];
      if (v35) {
        BUG();
      }
      BOOL v35 = __OFADD__(v36, v45);
      uint64_t v46 = v36 + v45;
      if (v35) {
        BUG();
      }
      if (v46 >= v40)
      {
        uint64_t v57 = *(void *)&v32[16 * v33 + 8];
        BOOL v35 = __OFSUB__(v57, *(void *)&v32[16 * v33]);
        uint64_t v58 = v57 - *(void *)&v32[16 * v33];
        if (v35) {
          BUG();
        }
        if (v36 >= v58) {
          unint64_t v42 = v30 - 1;
        }
        unint64_t v33 = v42;
        goto LABEL_65;
      }
      goto LABEL_48;
    }
    Swift::String v7 = (char *)_swiftEmptyArrayStorage;
    unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_89:
    if (v30 < 2)
    {
LABEL_104:
      swift_bridgeObjectRelease((_BYTE)v7);
      if (v100 < -1) {
        BUG();
      }
    }
    else
    {
      uint64_t v74 = *v85;
      uint64_t v90 = *v85;
      while (1)
      {
        unint64_t v75 = v30 - 2;
        if (v30 < 2) {
          BUG();
        }
        if (!v74) {
          BUG();
        }
        uint64_t v76 = 16 * v75;
        unint64_t v98 = v30 - 1;
        uint64_t v77 = 16 * (v30 - 1);
        uint64_t v78 = *(void *)&v7[16 * v75 + 32];
        unint64_t v102 = v7;
        uint64_t v79 = *(char **)&v7[v77 + 40];
        uint64_t v80 = *(void *)&v7[v77 + 32];
        uint64_t v101 = v78;
        uint64_t v99 = v79;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v74 + 16 * v78), (char *)(v74 + 16 * v80), v74 + 16 * (void)v79, v87, a1);
        if (v1) {
          break;
        }
        if ((uint64_t)v99 < v101) {
          BUG();
        }
        if (swift_isUniquelyReferenced_nonNull_native(v102)) {
          uint64_t v81 = v102;
        }
        else {
          uint64_t v81 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v102);
        }
        if (v75 >= *((void *)v81 + 2)) {
          BUG();
        }
        *(void *)&v81[v76 + 32] = v101;
        *(void *)&v81[v76 + 40] = v99;
        unint64_t v82 = *((void *)v81 + 2);
        if (v30 > v82) {
          BUG();
        }
        uint64_t v83 = &v81[v77 + 32];
        uint64_t v84 = v81;
        memmove(v83, &v81[16 * v30 + 32], 16 * (v82 - 1 - v98));
        Swift::String v7 = v84;
        *((void *)v84 + 2) = v82 - 1;
        unint64_t v30 = v82 - 1;
        uint64_t v74 = v90;
        if (v82 <= 2) {
          goto LABEL_104;
        }
      }
LABEL_102:
      swift_bridgeObjectRelease((_BYTE)v102);
      if (v100 < -1) {
        BUG();
      }
    }
    _OWORD v88[2] = 0;
    swift_bridgeObjectRelease((_BYTE)v88);
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t *))
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a1;
    uint64_t v15 = *v5;
    uint64_t v8 = *v5 + 16 * a3;
LABEL_4:
    uint64_t v16 = v8;
    while (1)
    {
      char v9 = *(unsigned char *)(v8 + 8);
      uint64_t v17 = *(void *)v8;
      char v18 = v9;
      char v10 = *(unsigned char *)(v8 - 8);
      uint64_t v19 = *(void *)(v8 - 16);
      char v20 = v10;
      char v11 = a4(&v17, &v19);
      if (v4) {
        break;
      }
      if (v11)
      {
        if (!v15) {
          BUG();
        }
        uint64_t v12 = *(void *)v8;
        char v13 = *(unsigned char *)(v8 + 8);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)(v8 - 16);
        *(void *)(v8 - 16) = v12;
        *(unsigned char *)(v8 - 8) = v13;
        ++v7;
        v8 -= 16;
        if (v6 != v7) {
          continue;
        }
      }
      ++v6;
      uint64_t v8 = v16 + 16;
      uint64_t v7 = a1;
      if (v6 != a2) {
        goto LABEL_4;
      }
      return;
    }
  }
}

char specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v48 = v5;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = v8 / 16;
  uint64_t v10 = (uint64_t)(a3 - (void)a2) / 16;
  uint64_t v49 = a1;
  if (v8 / 16 < v10)
  {
    uint64_t v11 = v8;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v9, a4);
    uint64_t v12 = a4;
    char v13 = &a4[16 * v9];
    if ((unint64_t)a2 < a3 && v11 >= 16)
    {
      uint64_t v14 = a2;
      uint64_t v15 = v48;
      unint64_t v42 = (unint64_t)v13;
      while (1)
      {
        uint64_t v16 = *(void *)v14;
        uint64_t v17 = v14;
        char v18 = v14[8];
        uint64_t v44 = v16;
        char v45 = v18;
        uint64_t v19 = v12;
        char v20 = v12[8];
        uint64_t v46 = *(void *)v12;
        char v47 = v20;
        char v21 = a5(&v44, &v46);
        if (v15)
        {
          uint64_t v37 = (uint64_t)(v42 - (void)v12) / 16;
          uint64_t v38 = v49;
          goto LABEL_35;
        }
        if (v21) {
          break;
        }
        uint64_t v22 = v12;
        v12 += 16;
        uint64_t v23 = v49;
        uint64_t v14 = v17;
        if (v49 != v19) {
          goto LABEL_10;
        }
LABEL_11:
        int64_t v24 = v23 + 16;
        char v13 = (char *)v42;
        if ((unint64_t)v12 >= v42) {
          goto LABEL_31;
        }
        uint64_t v49 = v24;
        if ((unint64_t)v14 >= a3)
        {
          uint64_t v48 = 0;
          goto LABEL_14;
        }
      }
      uint64_t v22 = v17;
      uint64_t v14 = v17 + 16;
      uint64_t v23 = v49;
      if (v49 == v17) {
        goto LABEL_11;
      }
LABEL_10:
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
      goto LABEL_11;
    }
LABEL_14:
    int64_t v24 = v49;
LABEL_32:
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, (v13 - v12) / 16, v24);
    return 1;
  }
  uint64_t v25 = (uint64_t)(a3 - (void)a2) / 16;
  uint64_t v43 = a3 - (void)a2;
  char v26 = a1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v10, a4);
  int64_t v24 = a2;
  unint64_t v27 = (unint64_t)v26;
  uint64_t v12 = a4;
  char v13 = &a4[16 * v25];
  if (v27 >= (unint64_t)a2 || v43 < 16) {
    goto LABEL_32;
  }
  int64_t v28 = (char *)(a3 - 16);
  uint64_t v29 = v48;
  while (1)
  {
    char v30 = *(v13 - 8);
    uint64_t v44 = *((void *)v13 - 2);
    char v45 = v30;
    uint64_t v31 = v24;
    char v32 = *(v24 - 8);
    uint64_t v46 = *((void *)v24 - 2);
    char v47 = v32;
    char v33 = a5(&v44, &v46);
    if (v29) {
      break;
    }
    uint64_t v34 = v28 + 16;
    uint64_t v12 = a4;
    if (v33)
    {
      BOOL v35 = v31 - 16;
      if (v34 == v31)
      {
        int64_t v24 = v31 - 16;
        if (v28 < v31) {
          goto LABEL_29;
        }
      }
      else
      {
        int64_t v24 = v31 - 16;
      }
    }
    else
    {
      BOOL v35 = v13 - 16;
      int64_t v24 = v31;
      if (v34 == v13)
      {
        BOOL v36 = v28 < v13;
        v13 -= 16;
        if (v36) {
          goto LABEL_29;
        }
      }
      else
      {
        v13 -= 16;
      }
    }
    *(_OWORD *)int64_t v28 = *(_OWORD *)v35;
LABEL_29:
    if (v24 > v49)
    {
      v28 -= 16;
      if (v13 > a4) {
        continue;
      }
    }
LABEL_31:
    uint64_t v48 = 0;
    goto LABEL_32;
  }
  uint64_t v12 = a4;
  uint64_t v37 = (v13 - a4) / 16;
  uint64_t v38 = v31;
LABEL_35:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v37, v38);
  return 1;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(*(void *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  uint64_t v22 = a2;
  String.hash(into:)(v20, a1);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = ~(-1 << *(unsigned char *)(v5 + 32));
  unint64_t v8 = v7 & v6;
  uint64_t v9 = *(void *)(v5 + 8 * ((v7 & (unint64_t)v6) >> 6) + 56);
  if (_bittest64(&v9, v8))
  {
    char v21 = v3;
    uint64_t v10 = *(void *)(v5 + 48);
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 16 * v8);
      uint64_t v12 = *(void *)(v10 + 16 * v8 + 8);
      if (v11 == a1 && v12 == v22) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, v22, 0)) {
        break;
      }
      unint64_t v8 = v7 & (v8 + 1);
      uint64_t v13 = *(void *)(v5 + 8 * (v8 >> 6) + 56);
      if (!_bittest64(&v13, v8)) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v5);
    uint64_t v15 = v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
    uint64_t v17 = *v15;
    v20[0] = *v15;
    *uint64_t v15 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeSet.copy()();
      uint64_t v17 = v20[0];
    }
    uint64_t v14 = *(void *)(*(void *)(v17 + 48) + 16 * v8);
    specialized _NativeSet._delete(at:)(v8);
    uint64_t v18 = *v15;
    *uint64_t v15 = v20[0];
    swift_bridgeObjectRelease(v18);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  return v14;
}

uint64_t specialized _NativeSet._delete(at:)(unint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = ~(-1 << *(unsigned char *)(v2 + 32));
  unint64_t v4 = v3 & (a1 + 1);
  uint64_t v5 = *(void *)(v2 + 8 * (v4 >> 6) + 56);
  if (_bittest64(&v5, v4))
  {
    int64_t v26 = a1;
    uint64_t v25 = v3;
    swift_retain(v2);
    uint64_t v6 = _HashTable.previousHole(before:)(a1, v2 + 56, v3);
    if (((1 << (v3 & (a1 + 1))) & *(void *)(v2 + 8 * (v4 >> 6) + 56)) != 0)
    {
      uint64_t v23 = v2 + 56;
      uint64_t v27 = v2;
      unint64_t v24 = v25 & (v6 + 1);
      do
      {
        uint64_t v7 = *(void *)(v2 + 40);
        uint64_t v8 = *(void *)(v2 + 48);
        uint64_t v9 = 16 * v4;
        uint64_t v10 = *(void *)(v8 + 16 * v4);
        uint64_t v11 = *(void *)(v8 + 16 * v4 + 8);
        Hasher.init(_seed:)(v7);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v22, v10);
        Swift::Int v12 = Hasher._finalize()();
        swift_bridgeObjectRelease(v11);
        uint64_t v13 = v25;
        unint64_t v14 = v25 & v12;
        unint64_t v15 = v26;
        if (v26 >= (uint64_t)v24)
        {
          if (v14 < v24) {
            goto LABEL_9;
          }
        }
        else if (v14 >= v24)
        {
          goto LABEL_10;
        }
        if (v26 >= (uint64_t)v14)
        {
LABEL_10:
          uint64_t v2 = v27;
          uint64_t v16 = *(void *)(v27 + 48);
          uint64_t v17 = (_OWORD *)(v16 + 16 * v26);
          if (v26 != v4 || (unint64_t v15 = v4, (unint64_t)v17 >= v16 + v9 + 16))
          {
            *uint64_t v17 = *(_OWORD *)(v9 + v16);
            unint64_t v15 = v4;
          }
          goto LABEL_13;
        }
LABEL_9:
        uint64_t v2 = v27;
LABEL_13:
        int64_t v26 = v15;
        unint64_t v4 = v13 & (v4 + 1);
        uint64_t v18 = *(void *)(v23 + 8 * (v4 >> 6));
      }
      while (_bittest64(&v18, v4));
    }
    *(void *)(v2 + 8 * ((unint64_t)v26 >> 6) + 56) &= (-1 << v26) - 1;
    swift_release(v2);
  }
  else
  {
    *(void *)(v2 + 56 + 8 * (a1 >> 6)) &= (-1 << a1) - 1;
  }
  uint64_t v19 = *(void *)(v2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t result = v19 - 1;
  if (v20) {
    BUG();
  }
  *(void *)(v2 + 16) = result;
  ++*(_DWORD *)(v2 + 36);
  return result;
}

uint64_t specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(*a1, a1[1], a2);
}

uint64_t specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), a2);
}

uint64_t specialized closure #1 in Sequence<>.uniqued()(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized closure #1 in Sequence<>.uniqued()(*a1);
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = v4 & 1;
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;

  uint64_t v2 = v1;
  uint64_t result = specialized closure #1 in Sequence<>.uniqued()(*a1, a1[1]);
  *uint64_t v2 = result;
  v2[1] = v4;
  return result;
}

void partial apply for specialized closure #1 in MutableCollection<>.sort(by:)()
{
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(*(uint64_t (**)(uint64_t *, uint64_t *))(v0 + 16));
}

uint64_t partial apply for specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t a1)
{
  return specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(a1, *(void *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  uint64_t result = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    lazy protocol witness table cache variable for type Int? and conformance <A> A? = result;
  }
  return result;
}

uint64_t outlined init with take of DataFrame.Slice?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t partial apply for specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(uint64_t *a1)
{
  return specialized closure #2 in static MLActivityClassifier.DataBatcher.aggregate<A, B, C, D>(groups:groupIds:featureNames:labelName:windowSize:_:)(a1, *(void *)(v1 + 16));
}

ValueMetadata *type metadata accessor for MLActivityClassifier.DataBatcher.Mode()
{
  return &type metadata for MLActivityClassifier.DataBatcher.Mode;
}

uint64_t base witness table accessor for Equatable in MLActivityClassifier.DataBatcher.Mode()
{
  return lazy protocol witness table accessor for type MLActivityClassifier.DataBatcher.Mode and conformance MLActivityClassifier.DataBatcher.Mode();
}

uint64_t lazy protocol witness table accessor for type MLActivityClassifier.DataBatcher.Mode and conformance MLActivityClassifier.DataBatcher.Mode()
{
  uint64_t result = lazy protocol witness table cache variable for type MLActivityClassifier.DataBatcher.Mode and conformance MLActivityClassifier.DataBatcher.Mode;
  if (!lazy protocol witness table cache variable for type MLActivityClassifier.DataBatcher.Mode and conformance MLActivityClassifier.DataBatcher.Mode)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLActivityClassifier.DataBatcher.Mode, &type metadata for MLActivityClassifier.DataBatcher.Mode);
    lazy protocol witness table cache variable for type MLActivityClassifier.DataBatcher.Mode and conformance MLActivityClassifier.DataBatcher.Mode = result;
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v13 = a1;
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFF8;
  if ((a3 & 0x4000000000000001) != 0)
  {
    if (a3) {
      uint64_t v5 = a3;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  }
  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(a3);
  }
  if (v6)
  {
    uint64_t v14 = v6;
    uint64_t v7 = 0;
    uint64_t v15 = v4;
    while (1)
    {
      if ((v4 & 0xC000000000000003) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      }
      else
      {
        uint64_t v8 = *(void *)(v4 + 8 * v7 + 32);
        swift_retain(v8);
      }
      if (__OFADD__(1, v7++)) {
        BUG();
      }
      uint64_t v12 = v8;
      char v10 = v13(&v12);
      if (v3)
      {
        swift_bridgeObjectRelease(v15);
        swift_release(v8);
        return v8;
      }
      if (v10) {
        break;
      }
      swift_release(v8);
      uint64_t v4 = v15;
      if (v7 == v14) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v15);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  return v8;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[3];
  unint64_t v3 = v0[4];
  if (v3)
  {
    _BitScanForward64(&v4, v3);
    uint64_t v5 = v3 & (v3 - 1);
    unint64_t v6 = v4 | (v2 << 6);
    int64_t v7 = v0[3];
LABEL_3:
    uint64_t v8 = 16 * v6;
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v10 = *(void *)(v1 + 56);
    uint64_t v11 = *(void *)(v9 + v8);
    uint64_t v12 = *(void *)(v9 + v8 + 8);
    uint64_t v13 = *(void *)(v10 + v8);
    uint64_t v14 = *(void *)(v10 + v8 + 8);
    v0[3] = v7;
    v0[4] = v5;
    unint64_t v24 = (void (*)(void *))v0[5];
    v23[0] = v11;
    v23[1] = v12;
    v23[2] = v13;
    v23[3] = v14;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    v24(v23);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
    return v23[4];
  }
  int64_t v16 = v2 + 1;
  if (__OFADD__(1, v2)) {
    BUG();
  }
  int64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
  if (v16 >= v17)
  {
    int64_t v21 = v0[3];
  }
  else
  {
    uint64_t v18 = v0[1];
    unint64_t v19 = *(void *)(v18 + 8 * v16);
    if (v19)
    {
      int64_t v7 = v2 + 1;
LABEL_8:
      _BitScanForward64(&v20, v19);
      uint64_t v5 = v19 & (v19 - 1);
      unint64_t v6 = v20 + (v7 << 6);
      goto LABEL_3;
    }
    int64_t v21 = v2 + 2;
    if (v2 + 2 >= v17)
    {
      int64_t v21 = v2 + 1;
    }
    else
    {
      unint64_t v19 = *(void *)(v18 + 8 * v16 + 8);
      if (v19)
      {
        int64_t v7 = v2 + 2;
        goto LABEL_8;
      }
      int64_t v7 = v2 + 3;
      if (v2 + 3 < v17)
      {
        unint64_t v19 = *(void *)(v18 + 8 * v16 + 16);
        if (v19) {
          goto LABEL_8;
        }
        int64_t v21 = v2 + 3;
        if (v2 + 4 < v17)
        {
          unint64_t v19 = *(void *)(v18 + 8 * v16 + 24);
          if (v19)
          {
            int64_t v7 = v2 + 4;
            goto LABEL_8;
          }
          int64_t v7 = v2 + 5;
          int64_t v21 = v2 + 4;
          if (v2 + 5 < v17)
          {
            unint64_t v19 = *(void *)(v18 + 8 * v16 + 32);
            if (v19) {
              goto LABEL_8;
            }
            int64_t v21 = v17 - 1;
            int64_t v22 = v2 + 6;
            while (v22 < v17)
            {
              unint64_t v19 = *(void *)(v18 + 8 * v22++);
              if (v19)
              {
                int64_t v7 = v22 - 1;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  v0[3] = v21;
  v0[4] = 0;
  return 0;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  int64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  uint64_t v2 = v0;
  unint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  int64_t v7 = v1[4];
  if (v7)
  {
    uint64_t v29 = v1[2];
    int64_t v28 = v4;
    uint64_t v27 = v2;
    _BitScanForward64(&v8, v7);
    uint64_t v9 = v7 & (v7 - 1);
    uint64_t v10 = v8 | (v6 << 6);
    char v30 = v6;
LABEL_3:
    uint64_t v11 = *(unsigned char *)(*(void *)(v3 + 48) + v10);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v25 + 8);
    LOBYTE(v25[0]) = v11;
    uint64_t v12 = v30;
    uint64_t v2 = v27;
    unint64_t v4 = v28;
    uint64_t v5 = v29;
    goto LABEL_11;
  }
  uint64_t v13 = v6 + 1;
  if (__OFADD__(1, v6)) {
    BUG();
  }
  uint64_t v14 = (unint64_t)(v5 + 64) >> 6;
  if (v13 >= v14)
  {
    uint64_t v12 = v1[3];
  }
  else
  {
    uint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
      int64_t v16 = v6 + 1;
LABEL_8:
      _BitScanForward64(&v17, v15);
      uint64_t v29 = v1[2];
      int64_t v28 = v4;
      uint64_t v27 = v2;
      uint64_t v9 = v15 & (v15 - 1);
      uint64_t v10 = v17 + (v16 << 6);
      char v30 = v16;
      goto LABEL_3;
    }
    uint64_t v12 = v6 + 2;
    if (v6 + 2 >= v14)
    {
      uint64_t v12 = v6 + 1;
    }
    else
    {
      uint64_t v15 = *(void *)(v4 + 8 * v13 + 8);
      if (v15)
      {
        int64_t v16 = v6 + 2;
        goto LABEL_8;
      }
      int64_t v16 = v6 + 3;
      if (v6 + 3 < v14)
      {
        uint64_t v15 = *(void *)(v4 + 8 * v13 + 16);
        if (v15) {
          goto LABEL_8;
        }
        uint64_t v12 = v6 + 3;
        if (v6 + 4 < v14)
        {
          uint64_t v15 = *(void *)(v4 + 8 * v13 + 24);
          if (v15)
          {
            int64_t v16 = v6 + 4;
            goto LABEL_8;
          }
          int64_t v16 = v6 + 5;
          uint64_t v12 = v6 + 4;
          if (v6 + 5 < v14)
          {
            uint64_t v15 = *(void *)(v4 + 8 * v13 + 32);
            if (v15) {
              goto LABEL_8;
            }
            uint64_t v12 = v14 - 1;
            unint64_t v20 = v6 + 6;
            while (v20 < v14)
            {
              uint64_t v15 = *(void *)(v4 + 8 * v20++);
              if (v15)
              {
                int64_t v16 = v20 - 1;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  memset(v25, 0, sizeof(v25));
  int64_t v26 = 0;
  uint64_t v9 = 0;
LABEL_11:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  v1[3] = v12;
  v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of DataFrame?((uint64_t)v25, (uint64_t)v23, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any)?);
  if (v24)
  {
    int64_t v22 = v24;
    v21[1] = v23[1];
    v21[0] = v23[0];
    v18(v21);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v21, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
  }
  else
  {
    *(_OWORD *)(v2 + 16) = 0;
    *(_OWORD *)uint64_t v2 = 0;
    *(void *)(v2 + 32) = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  void v20[6];
  void (*v21)(void *);

  uint64_t v1 = *v0;
  uint64_t v2 = v0[3];
  unint64_t v3 = v0[4];
  if (v3)
  {
    _BitScanForward64(&v4, v3);
    uint64_t v5 = v3 & (v3 - 1);
    unint64_t v6 = v4 | (v2 << 6);
    int64_t v7 = v0[3];
LABEL_3:
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = *(void *)(v8 + 16 * v6);
    uint64_t v10 = *(void *)(v8 + 16 * v6 + 8);
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v7;
    v0[4] = v5;
    int64_t v21 = (void (*)(void *))v0[5];
    v20[0] = v9;
    v20[1] = v10;
    v20[2] = v11;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    v21(v20);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    return v20[3];
  }
  uint64_t v13 = v2 + 1;
  if (__OFADD__(1, v2)) {
    BUG();
  }
  uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
  if (v13 >= v14)
  {
    uint64_t v18 = v0[3];
  }
  else
  {
    uint64_t v15 = v0[1];
    int64_t v16 = *(void *)(v15 + 8 * v13);
    if (v16)
    {
      int64_t v7 = v2 + 1;
LABEL_8:
      _BitScanForward64(&v17, v16);
      uint64_t v5 = v16 & (v16 - 1);
      unint64_t v6 = v17 + (v7 << 6);
      goto LABEL_3;
    }
    uint64_t v18 = v2 + 2;
    if (v2 + 2 >= v14)
    {
      uint64_t v18 = v2 + 1;
    }
    else
    {
      int64_t v16 = *(void *)(v15 + 8 * v13 + 8);
      if (v16)
      {
        int64_t v7 = v2 + 2;
        goto LABEL_8;
      }
      int64_t v7 = v2 + 3;
      if (v2 + 3 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v13 + 16);
        if (v16) {
          goto LABEL_8;
        }
        uint64_t v18 = v2 + 3;
        if (v2 + 4 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * v13 + 24);
          if (v16)
          {
            int64_t v7 = v2 + 4;
            goto LABEL_8;
          }
          int64_t v7 = v2 + 5;
          uint64_t v18 = v2 + 4;
          if (v2 + 5 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v13 + 32);
            if (v16) {
              goto LABEL_8;
            }
            uint64_t v18 = v14 - 1;
            unint64_t v19 = v2 + 6;
            while (v19 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v19++);
              if (v16)
              {
                int64_t v7 = v19 - 1;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  v0[3] = v18;
  v0[4] = 0;
  return 0;
}

uint64_t specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(void *, uint64_t *), uint64_t (*a8)(void, uint64_t), uint64_t *a9, uint64_t a10, uint64_t (*a11)(uint64_t *), uint64_t (*a12)(unsigned char *, void, void), void (*a13)(void *, uint64_t *), uint64_t (*a14)(uint64_t *))
{
  *(void *)&long long v230 = v14;
  uint64_t v226 = v15;
  uint64_t v207 = a5;
  uint64_t v209 = a4;
  uint64_t v229 = a3;
  v228._uint64_t countAndFlagsBits = a2;
  uint64_t v206 = a1;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  unint64_t v19 = alloca(v17);
  uint64_t v200 = v194;
  uint64_t v227 = type metadata accessor for Conv2D(0);
  uint64_t v208 = *(void *)(v227 - 8);
  int64_t v20 = *(void *)(v208 + 64);
  int64_t v21 = alloca(v20);
  int64_t v22 = alloca(v20);
  uint64_t v199 = v194;
  uint64_t v220 = a6;
  uint64_t v210 = a6(0);
  int64_t v23 = *(void *)(*(void *)(v210 - 8) + 64);
  unint64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  uint64_t v212 = v194;
  int64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  uint64_t v223 = v194;
  uint64_t v219 = type metadata accessor for Parameter(0);
  uint64_t v215 = *(void *)(v219 - 8);
  int64_t v28 = *(void *)(v215 + 64);
  uint64_t v29 = alloca(v28);
  char v30 = alloca(v28);
  uint64_t v204 = v194;
  uint64_t v31 = alloca(v28);
  char v32 = alloca(v28);
  uint64_t v214 = v194;
  char v33 = alloca(v28);
  uint64_t v34 = alloca(v28);
  uint64_t v225 = v194;
  uint64_t v232 = (unsigned char *)type metadata accessor for TensorShape(0);
  uint64_t v216 = (void *)*((void *)v232 - 1);
  int64_t v35 = v216[8];
  BOOL v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  v228._char object = v194;
  uint64_t v38 = alloca(v35);
  uint64_t v39 = alloca(v35);
  unint64_t v231 = v194;
  uint64_t v40 = alloca(v35);
  uint64_t v41 = alloca(v35);
  uint64_t v213 = type metadata accessor for Tensor(0);
  uint64_t v211 = *(void **)(v213 - 8);
  int64_t v42 = v211[8];
  uint64_t v43 = alloca(v42);
  uint64_t v44 = alloca(v42);
  unint64_t v218 = v194;
  char v45 = alloca(v42);
  uint64_t v46 = alloca(v42);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject(v47, v194);
  *(void *)(inited + 16) = 2;
  *(void *)(inited + 24) = 4;
  *(void *)&v221[0] = a2;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v49._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v49._char object = (void *)0xE700000000000000;
  String.append(_:)(v49);
  *(_OWORD *)(inited + 32) = v221[0];
  Conv2D.weight.getter();
  Tensor.shape.getter();
  uint64_t v50 = TensorShape.contiguousSize.getter();
  BOOL v51 = (void *)v216[1];
  double v202 = v194;
  uint64_t v216 = v51;
  ((void (*)(unsigned char *, unsigned char *))v51)(v194, v232);
  uint64_t v198 = v194;
  uint64_t v52 = v230;
  uint64_t v53 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v50, a7, (uint64_t)v197);
  uint64_t v224 = v52;
  uint64_t v54 = (void (*)(unsigned char *, uint64_t))v211[1];
  uint64_t v201 = v194;
  v54(v194, v213);
  *(void *)(inited + 48) = v53;
  *(void *)&v221[0] = v228._countAndFlagsBits;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v49._uint64_t countAndFlagsBits = 0x2E7468676965772ELL;
  v49._char object = (void *)0xED00006570616873;
  String.append(_:)(v49);
  uint64_t v211 = (void *)inited;
  *(_OWORD *)(inited + 56) = v221[0];
  uint64_t v55 = (uint64_t)v218;
  Conv2D.weight.getter();
  Tensor.shape.getter();
  v49._uint64_t countAndFlagsBits = v55;
  uint64_t v56 = (uint64_t)v232;
  uint64_t v203 = v54;
  v54(v49._countAndFlagsBits, v213);
  uint64_t v57 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))&type metadata accessor for TensorShape, (uint64_t)&protocol conformance descriptor for TensorShape);
  uint64_t v58 = dispatch thunk of Collection.count.getter(v56, v57);
  unint64_t v218 = (unsigned char *)v57;
  if (v58)
  {
    uint64_t v222 = _swiftEmptyArrayStorage;
    int64_t v59 = 0;
    if (v58 > 0) {
      int64_t v59 = v58;
    }
    uint64_t v60 = v58;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
    *(void *)&long long v230 = v222;
    dispatch thunk of Collection.startIndex.getter(v56, v57);
    if (v60 < 0) {
      BUG();
    }
    uint64_t v61 = v60;
    uint64_t v62 = (void *)v230;
    uint64_t v63 = (uint64_t)v232;
    do
    {
      *(void *)&long long v230 = v61;
      uint64_t v64 = v63;
      uint64_t v65 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v221, v217, v63, v57);
      uint64_t v67 = *v66;
      v65(v221, 0);
      uint64_t v222 = v62;
      char v68 = (unsigned char *)v57;
      uint64_t v69 = v64;
      unint64_t v70 = v62[2];
      unint64_t v71 = v62[3];
      int64_t v72 = v70 + 1;
      if (v71 >> 1 <= v70)
      {
        uint64_t v205 = v67;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 >= 2, v72, 1);
        LODWORD(v67) = v205;
        char v68 = v218;
        uint64_t v62 = v222;
      }
      v62[2] = v72;
      *(double *)&v62[v70 + 4] = (double)(int)v67;
      uint64_t v73 = v231;
      uint64_t v74 = v69;
      uint64_t v57 = (uint64_t)v68;
      dispatch thunk of Collection.formIndex(after:)(v217, v74, v68);
      uint64_t v61 = v230 - 1;
      uint64_t v63 = (uint64_t)v232;
    }
    while ((void)v230 != 1);
    unint64_t v75 = v73;
  }
  else
  {
    uint64_t v62 = _swiftEmptyArrayStorage;
    unint64_t v75 = v231;
    uint64_t v63 = v56;
  }
  ((void (*)(unsigned char *, uint64_t))v216)(v75, v63);
  uint64_t v76 = v211;
  v211[9] = v62;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  *(void *)&long long v230 = Dictionary.init(dictionaryLiteral:)(v76, &type metadata for String, v77, &protocol witness table for String);
  uint64_t v78 = v207;
  if (v207)
  {
    uint64_t v79 = v225;
    Conv2D.$weight.getter();
    unsigned int v80 = Parameter.id.getter(v76);
    uint64_t v81 = v79;
    uint64_t v82 = v226;
    (*(void (**)(unsigned char *, uint64_t))(v215 + 8))(v81, v219);
    uint64_t v83 = a8(v80, v78);
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = v226;
  }
  uint64_t v84 = v220;
  outlined init with copy of MLTrainingSessionParameters(v206, (uint64_t)v223, v220);
  uint64_t v85 = v199;
  uint64_t v86 = v82;
  uint64_t v87 = v208;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v208 + 16))(v199, v86, v227);
  if (v83)
  {
    uint64_t v225 = (unsigned char *)v83;
    (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v85, v227);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v223, v84);
  }
  else
  {
    uint64_t v88 = v225;
    Swift::Int v89 = v85;
    Conv2D.$weight.getter();
    uint64_t v90 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, v220, a10);
    uint64_t v91 = (uint64_t)v223;
    uint64_t v92 = Layer.parameterKeyPaths(recursively:)(1, v210, v90);
    unint64_t v231 = v194;
    uint64_t v93 = alloca(32);
    uint64_t v94 = alloca(32);
    uint64_t v195 = v91;
    uint64_t v196 = v88;
    uint64_t v95 = v224;
    uint64_t v96 = specialized Sequence.first(where:)(a11, (uint64_t)v194, v92);
    uint64_t v224 = v95;
    swift_bridgeObjectRelease(v92);
    (*(void (**)(unsigned char *, uint64_t))(v215 + 8))(v225, v219);
    (*(void (**)(unsigned char *, uint64_t))(v208 + 8))(v89, v227);
    outlined destroy of MLActivityClassifier.ModelParameters(v91, v220);
    if (!v96)
    {
      swift_bridgeObjectRelease(v230);
      *(void *)&v221[0] = 0;
      *((void *)&v221[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v183._char object = "zed in the observation" + 0x8000000000000000;
      v183._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v183);
      v183._uint64_t countAndFlagsBits = v228._countAndFlagsBits;
      v183._char object = v229;
      String.append(_:)(v183);
      v183._char object = ".optimizer.velocity.shape" + 0x8000000000000000;
      v183._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v183);
      long long v230 = v221[0];
      v183._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v183._object, 0, 0);
      *(_OWORD *)uint64_t v184 = v230;
      *(_OWORD *)(v184 + 16) = 0;
      *(_OWORD *)(v184 + 32) = 0;
      *(unsigned char *)(v184 + 48) = 2;
      swift_willThrow(&type metadata for MLCreateError, v183._object, v184, v185, v186, v187);
      return v92;
    }
    uint64_t v225 = (unsigned char *)v96;
  }
  uint64_t v97 = v230;
  *(void *)&v221[0] = v228._countAndFlagsBits;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v98._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v98._char object = (void *)0xE700000000000000;
  String.append(_:)(v98);
  char v99 = BYTE8(v221[0]);
  uint64_t v100 = a12(v225, *(void *)&v221[0], *((void *)&v221[0] + 1));
  swift_bridgeObjectRelease(v99);
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
  *(void *)&v221[0] = v97;
  uint64_t v102 = v224;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v100, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, v221);
  unint64_t v231 = (unsigned char *)v102;
  if (v102) {
    goto LABEL_45;
  }
  uint64_t v227 = *(void *)&v221[0];
  swift_bridgeObjectRelease(0);
  uint64_t v103 = v200;
  Conv2D.$bias.getter();
  uint64_t v104 = (uint64_t)v103;
  uint64_t v105 = (uint64_t)v103;
  uint64_t v106 = v219;
  if (__swift_getEnumTagSinglePayload(v105, 1, v219) != 1)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v215 + 32))(v214, v104, v106);
    *(void *)&v221[0] = v228._countAndFlagsBits;
    *((void *)&v221[0] + 1) = v229;
    swift_bridgeObjectRetain((_BYTE)v229);
    v107._uint64_t countAndFlagsBits = 0x736169622ELL;
    v107._char object = (void *)0xE500000000000000;
    String.append(_:)(v107);
    uint64_t v224 = *((void *)&v221[0] + 1);
    *(void *)&long long v230 = *(void *)&v221[0];
    uint64_t v108 = v201;
    Parameter.value.getter();
    uint64_t v109 = (uint64_t)v202;
    Tensor.shape.getter();
    uint64_t v110 = TensorShape.contiguousSize.getter();
    v107._uint64_t countAndFlagsBits = v109;
    uint64_t v111 = (uint64_t)v232;
    ((void (*)(uint64_t, unsigned char *))v216)(v107._countAndFlagsBits, v232);
    uint64_t v112 = alloca(24);
    char v113 = alloca(32);
    uint64_t v195 = (uint64_t)v108;
    uint64_t v114 = (uint64_t)v231;
    uint64_t v115 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v110, a13, (uint64_t)v194);
    uint64_t v223 = (unsigned char *)v114;
    v203(v108, v213);
    uint64_t v116 = v227;
    char v117 = swift_isUniquelyReferenced_nonNull_native(v227);
    *(void *)&v221[0] = v116;
    uint64_t v118 = v111;
    LOBYTE(v111) = v224;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v115, v230, v224, v117);
    uint64_t v213 = *(void *)&v221[0];
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(0);
    *(void *)&v221[0] = v228._countAndFlagsBits;
    *((void *)&v221[0] + 1) = v229;
    swift_bridgeObjectRetain((_BYTE)v229);
    v107._uint64_t countAndFlagsBits = 0x68732E736169622ELL;
    v107._char object = (void *)0xEB00000000657061;
    String.append(_:)(v107);
    uint64_t v227 = *((void *)&v221[0] + 1);
    uint64_t v224 = *(void *)&v221[0];
    Parameter.shape.getter();
    uint64_t v119 = v218;
    uint64_t v120 = dispatch thunk of Collection.count.getter(v118, v218);
    if (v120)
    {
      uint64_t v124 = v120;
      uint64_t v222 = _swiftEmptyArrayStorage;
      int64_t v125 = 0;
      if (v120 > 0) {
        int64_t v125 = v120;
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v125, 0);
      id v126 = v222;
      unint64_t v127 = v119;
      uint64_t v128 = (uint64_t)v232;
      dispatch thunk of Collection.startIndex.getter(v232, v127);
      if (v124 < 0) {
        BUG();
      }
      double v123 = v218;
      do
      {
        *(void *)&long long v230 = v124;
        Swift::String v129 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v221, v217, v128, v123);
        uint64_t v131 = (unsigned char *)*v130;
        v129(v221, 0);
        uint64_t v222 = v126;
        uint64_t v132 = v128;
        unint64_t v133 = v126[2];
        unint64_t v134 = v126[3];
        int64_t v135 = v133 + 1;
        uint64_t v136 = v126;
        if (v134 >> 1 <= v133)
        {
          unint64_t v231 = v131;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v134 >= 2, v135, 1);
          LODWORD(v131) = v231;
          uint64_t v132 = (uint64_t)v232;
          uint64_t v136 = v222;
        }
        unint64_t v231 = v136;
        v136[2] = v135;
        *(double *)&v136[v133 + 4] = (double)(int)v131;
        uint64_t v128 = v132;
        uint64_t v137 = v218;
        dispatch thunk of Collection.formIndex(after:)(v217, v132, v218);
        uint64_t v124 = v230 - 1;
        uint64_t v121 = v217;
        double v123 = v137;
        id v126 = v231;
      }
      while ((void)v230 != 1);
    }
    else
    {
      id v126 = _swiftEmptyArrayStorage;
      uint64_t v128 = (uint64_t)v232;
    }
    ((void (*)(void *, uint64_t, char *, uint64_t, unsigned char *))v216)(v228._object, v128, v121, v122, v123);
    uint64_t v138 = v213;
    char v139 = swift_isUniquelyReferenced_nonNull_native(v213);
    *(void *)&v221[0] = v138;
    LOBYTE(v138) = v227;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v126, v224, v227, v139);
    unint64_t v231 = *(unsigned char **)&v221[0];
    swift_bridgeObjectRelease(v138);
    swift_bridgeObjectRelease(0);
    uint64_t v140 = v207;
    Swift::String v141 = v214;
    uint64_t v142 = (uint64_t)v212;
    if (v207)
    {
      unsigned int v143 = Parameter.id.getter(0x8000000000000000);
      uint64_t v144 = a8(v143, v140);
    }
    else
    {
      uint64_t v144 = 0;
    }
    outlined init with copy of MLTrainingSessionParameters(v206, v142, v220);
    uint64_t v145 = v204;
    uint64_t v146 = v141;
    uint64_t v147 = v219;
    uint64_t v148 = v215;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v215 + 16))(v204, v146, v219);
    if (v144)
    {
      *(void *)&long long v230 = v144;
      uint64_t v232 = *(unsigned char **)(v148 + 8);
      ((void (*)(unsigned char *, uint64_t))v232)(v145, v147);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v212, v220);
    }
    else
    {
      uint64_t v149 = v220;
      uint64_t v150 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, v220, a10);
      uint64_t v151 = (uint64_t)v212;
      uint64_t v152 = Layer.parameterKeyPaths(recursively:)(1, v210, v150);
      uint64_t v232 = v194;
      uint64_t v153 = alloca(32);
      char v154 = alloca(32);
      uint64_t v195 = v151;
      uint64_t v196 = v145;
      uint64_t v155 = (uint64_t)v223;
      *(void *)&long long v230 = specialized Sequence.first(where:)(a14, (uint64_t)v194, v152);
      uint64_t v223 = (unsigned char *)v155;
      swift_bridgeObjectRelease(v152);
      uint64_t v156 = v145;
      uint64_t v92 = v219;
      uint64_t v232 = *(unsigned char **)(v215 + 8);
      ((void (*)(unsigned char *, uint64_t))v232)(v156, v219);
      outlined destroy of MLActivityClassifier.ModelParameters(v151, v149);
      if (!(void)v230)
      {
        swift_bridgeObjectRelease((_BYTE)v231);
        *(void *)&v221[0] = 0;
        *((void *)&v221[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v188._char object = "zed in the observation" + 0x8000000000000000;
        v188._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v188);
        v188._uint64_t countAndFlagsBits = v228._countAndFlagsBits;
        v188._char object = v229;
        String.append(_:)(v188);
        v188._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v188);
        long long v230 = v221[0];
        v188._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v188._object, 0, 0);
        *(_OWORD *)uint64_t v189 = v230;
        *(_OWORD *)(v189 + 16) = 0;
        *(_OWORD *)(v189 + 32) = 0;
        *(unsigned char *)(v189 + 48) = 2;
        swift_willThrow(&type metadata for MLCreateError, v188._object, v189, v190, v191, v192);
        swift_release();
        ((void (*)(unsigned char *, uint64_t))v232)(v214, v92);
        return v92;
      }
    }
    *(void *)&v221[0] = v228._countAndFlagsBits;
    *((void *)&v221[0] + 1) = v229;
    swift_bridgeObjectRetain((_BYTE)v229);
    v157._uint64_t countAndFlagsBits = 0x736169622ELL;
    v157._char object = (void *)0xE500000000000000;
    String.append(_:)(v157);
    char v158 = BYTE8(v221[0]);
    uint64_t v159 = a12((unsigned char *)v230, *(void *)&v221[0], *((void *)&v221[0] + 1));
    swift_bridgeObjectRelease(v158);
    unint64_t v160 = v231;
    unsigned __int8 v161 = swift_isUniquelyReferenced_nonNull_native(v231);
    *(void *)&v221[0] = v160;
    uint64_t v162 = (uint64_t)v223;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v159, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v161, v221);
    unint64_t v231 = (unsigned char *)v162;
    if (!v162)
    {
      uint64_t v227 = *(void *)&v221[0];
      swift_release();
      swift_bridgeObjectRelease(0);
      ((void (*)(unsigned char *, uint64_t))v232)(v214, v219);
      goto LABEL_39;
    }
LABEL_45:
    swift_bridgeObjectRelease(0);
    BUG();
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v104, &demangling cache variable for type metadata for Parameter?);
LABEL_39:
  *(void *)&v221[0] = v228._countAndFlagsBits;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v163._uint64_t countAndFlagsBits = 0x736564697274732ELL;
  v163._char object = (void *)0xE800000000000000;
  String.append(_:)(v163);
  v228._char object = (void *)*((void *)&v221[0] + 1);
  uint64_t v232 = *(unsigned char **)&v221[0];
  *(void *)&long long v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v164 = swift_allocObject(v230, 48, 7);
  *(void *)(v164 + 16) = 2;
  *(void *)(v164 + 24) = 4;
  *(double *)(v164 + 32) = (double)(int)Conv2D.stride.getter();
  Conv2D.stride.getter();
  *(double *)(v164 + 40) = (double)v165;
  uint64_t v166 = v227;
  char v167 = swift_isUniquelyReferenced_nonNull_native(v227);
  *(void *)&v221[0] = v166;
  v163._uint64_t countAndFlagsBits = v164;
  LOBYTE(v164) = v228._object;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v163._countAndFlagsBits, (uint64_t)v232, (uint64_t)v228._object, v167);
  uint64_t v232 = *(unsigned char **)&v221[0];
  swift_bridgeObjectRelease(v164);
  swift_bridgeObjectRelease(0);
  uint64_t countAndFlagsBits = v228._countAndFlagsBits;
  *(void *)&v221[0] = v228._countAndFlagsBits;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v163._uint64_t countAndFlagsBits = 0x676E69646461702ELL;
  v163._char object = (void *)0xE800000000000000;
  String.append(_:)(v163);
  uint64_t v169 = *((void *)&v221[0] + 1);
  v228._char object = *(void **)&v221[0];
  uint64_t v170 = swift_allocObject(v230, 48, 7);
  *(void *)(v170 + 16) = 2;
  *(void *)(v170 + 24) = 4;
  *(double *)(v170 + 32) = (double)(int)Conv2D.padding.getter();
  Conv2D.padding.getter();
  *(double *)(v170 + 40) = (double)v171;
  uint64_t v172 = (uint64_t)v232;
  char v173 = swift_isUniquelyReferenced_nonNull_native(v232);
  *(void *)&v221[0] = v172;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v170, (uint64_t)v228._object, v169, v173);
  uint64_t v232 = *(unsigned char **)&v221[0];
  swift_bridgeObjectRelease(v169);
  swift_bridgeObjectRelease(0);
  *(void *)&v221[0] = countAndFlagsBits;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v163._uint64_t countAndFlagsBits = 0x6F6974616C69642ELL;
  v163._char object = (void *)0xEA0000000000736ELL;
  String.append(_:)(v163);
  uint64_t v174 = *((void *)&v221[0] + 1);
  v228._char object = *(void **)&v221[0];
  uint64_t v175 = swift_allocObject(v230, 48, 7);
  *(void *)(v175 + 16) = 2;
  *(void *)(v175 + 24) = 4;
  *(double *)(v175 + 32) = (double)(int)Conv2D.dilation.getter();
  Conv2D.dilation.getter();
  *(double *)(v175 + 40) = (double)v176;
  uint64_t v177 = (uint64_t)v232;
  char v178 = swift_isUniquelyReferenced_nonNull_native(v232);
  *(void *)&v221[0] = v177;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v175, (uint64_t)v228._object, v174, v178);
  uint64_t v232 = *(unsigned char **)&v221[0];
  swift_bridgeObjectRelease(v174);
  swift_bridgeObjectRelease(0);
  *(void *)&v221[0] = v228._countAndFlagsBits;
  *((void *)&v221[0] + 1) = v229;
  swift_bridgeObjectRetain((_BYTE)v229);
  v163._char object = (void *)0xEB00000000746E75;
  v163._uint64_t countAndFlagsBits = 0x6F4370756F72672ELL;
  String.append(_:)(v163);
  uint64_t v179 = *((void *)&v221[0] + 1);
  v228._char object = *(void **)&v221[0];
  uint64_t v180 = swift_allocObject(v230, 40, 7);
  *(void *)(v180 + 16) = 1;
  *(void *)(v180 + 24) = 2;
  *(double *)(v180 + 32) = (double)(int)Conv2D.groupCount.getter();
  uint64_t v181 = (uint64_t)v232;
  char v182 = swift_isUniquelyReferenced_nonNull_native(v232);
  *(void *)&v221[0] = v181;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v180, (uint64_t)v228._object, v179, v182);
  uint64_t v92 = *(void *)&v221[0];
  swift_release();
  swift_bridgeObjectRelease(v179);
  swift_bridgeObjectRelease(0);
  return v92;
}

uint64_t specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void, uint64_t), uint64_t *a8, uint64_t a9, uint64_t (*a10)(uint64_t *), uint64_t (*a11)(uint64_t, void, void), uint64_t (*a12)(uint64_t *))
{
  uint64_t v226 = v12;
  uint64_t v217 = a5;
  uint64_t v203 = a4;
  long long v230 = a3;
  v233[0] = a2;
  uint64_t v201 = a1;
  uint64_t v194 = type metadata accessor for TensorShape(0);
  uint64_t v195 = *(void *)(v194 - 8);
  int64_t v15 = *(void *)(v195 + 64);
  int64_t v16 = alloca(v15);
  int64_t v17 = alloca(v15);
  uint64_t v212 = v177;
  uint64_t v236 = type metadata accessor for Parameter(0);
  uint64_t v204 = *(void *)(v236 - 8);
  int64_t v18 = *(void *)(v204 + 64);
  unint64_t v19 = alloca(v18);
  int64_t v20 = alloca(v18);
  uint64_t v205 = v177;
  int64_t v21 = alloca(v18);
  int64_t v22 = alloca(v18);
  uint64_t v225 = v177;
  uint64_t v222 = a6;
  uint64_t v207 = a6(0);
  int64_t v23 = *(void *)(*(void *)(v207 - 8) + 64);
  unint64_t v24 = alloca(v23);
  uint64_t v25 = alloca(v23);
  int64_t v26 = alloca(v23);
  uint64_t v27 = alloca(v23);
  uint64_t v219 = v177;
  uint64_t v208 = type metadata accessor for Tensor(0);
  uint64_t v202 = *(void *)(v208 - 8);
  int64_t v28 = *(void *)(v202 + 64);
  uint64_t v29 = alloca(v28);
  char v30 = alloca(v28);
  uint64_t v209 = v177;
  uint64_t v216 = type metadata accessor for LayerState(0);
  uint64_t v213 = *(void *)(v216 - 8);
  int64_t v31 = *(void *)(v213 + 64);
  char v32 = alloca(v31);
  char v33 = alloca(v31);
  uint64_t v214 = v177;
  uint64_t v34 = alloca(v31);
  int64_t v35 = alloca(v31);
  uint64_t v224 = v177;
  unint64_t v241 = _swiftEmptyDictionarySingleton;
  uint64_t v197 = type metadata accessor for LSTM(0);
  uint64_t v211 = v13;
  uint64_t v36 = Layer.namedParameterKeyPaths(recursively:)(1, v197, &protocol witness table for LSTM);
  uint64_t v193 = *(char **)(v36 + 16);
  if (!v193) {
    goto LABEL_52;
  }
  Swift::String v228 = v177;
  uint64_t v192 = v36 + 32;
  unint64_t v37 = 0;
  uint64_t v196 = "r key path for layer " + 0x8000000000000000;
  uint64_t v38 = v225;
  uint64_t v206 = v36;
  do
  {
    if (v37 >= *(void *)(v36 + 16)) {
      BUG();
    }
    uint64_t v227 = (char *)v37;
    v242._uint64_t countAndFlagsBits = *(void *)(v192 + 24 * v37);
    uint64_t v39 = *(void **)(v192 + 24 * v37 + 8);
    uint64_t v40 = *(void *)(v192 + 24 * v37 + 16);
    swift_retain_n(v40);
    swift_bridgeObjectRetain((_BYTE)v39);
    swift_getAtKeyPath(v211, v40);
    uint64_t v223 = v40;
    uint64_t v41 = v40;
    swift_release();
    int64_t v42 = v38;
    uint64_t v43 = (uint64_t)v209;
    Parameter.value.getter(v41);
    unint64_t v231 = v39;
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v43, v242._countAndFlagsBits, v39, v233[0], v230);
    uint64_t v191 = *(void (**)(uint64_t, uint64_t))(v202 + 8);
    v191(v43, v208);
    if (v217)
    {
      unsigned int v44 = Parameter.id.getter(v43);
      uint64_t v45 = a7(v44, v217);
    }
    else
    {
      uint64_t v45 = 0;
    }
    uint64_t v46 = v222;
    outlined init with copy of MLTrainingSessionParameters(v201, (uint64_t)v228, v222);
    uint64_t v47 = v205;
    uint64_t v48 = v42;
    uint64_t v49 = v204;
    (*(void (**)(void *, void *, uint64_t))(v204 + 16))(v205, v48, v236);
    if (v45)
    {
      uint64_t v232 = v45;
      uint64_t v229 = *(void (**)(void *, uint64_t))(v49 + 8);
      v229(v47, v236);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v228, v46);
    }
    else
    {
      uint64_t v50 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a8, v46, a9);
      uint64_t v51 = (uint64_t)v228;
      uint64_t v52 = Layer.parameterKeyPaths(recursively:)(1, v207, v50);
      uint64_t v53 = v205;
      char v54 = v52;
      v233[1] = (uint64_t)v177;
      uint64_t v55 = alloca(32);
      uint64_t v56 = alloca(32);
      uint64_t v178 = v51;
      uint64_t v179 = v205;
      uint64_t v57 = v226;
      uint64_t v58 = specialized Sequence.first(where:)(a12, (uint64_t)v177, v52);
      uint64_t v226 = v57;
      swift_bridgeObjectRelease(v54);
      uint64_t v229 = *(void (**)(void *, uint64_t))(v204 + 8);
      v229(v53, v236);
      outlined destroy of MLActivityClassifier.ModelParameters(v51, v222);
      if (!v58)
      {
        swift_bridgeObjectRelease(v206);
        swift_bridgeObjectRelease((_BYTE)v241);
        *(void *)&long long v239 = 0;
        *((void *)&v239 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v163._uint64_t countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v163);
        v163._uint64_t countAndFlagsBits = v233[0];
        v163._char object = v230;
        String.append(_:)(v163);
        v163._uint64_t countAndFlagsBits = 0x74656D6172617020;
        v163._char object = (void *)0xEB00000000207265;
        String.append(_:)(v163);
        v163._uint64_t countAndFlagsBits = v242._countAndFlagsBits;
        uint64_t v164 = v231;
        v163._char object = v231;
        String.append(_:)(v163);
        *(_OWORD *)&v233[1] = v239;
        v163._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v163._object, 0, 0);
        *(_OWORD *)uint64_t v165 = *(_OWORD *)&v233[1];
        *(_OWORD *)(v165 + 16) = 0;
        *(_OWORD *)(v165 + 32) = 0;
        *(unsigned char *)(v165 + 48) = 0;
        swift_bridgeObjectRelease((_BYTE)v164);
        swift_willThrow(v164, v163._object, v166, v167, v168, v169);
        swift_release();
        return ((uint64_t (*)(void *, uint64_t))v229)(v225, v236);
      }
      uint64_t v232 = v58;
    }
    ++v227;
    *(void *)&long long v239 = v233[0];
    *((void *)&v239 + 1) = v230;
    swift_bridgeObjectRetain((_BYTE)v230);
    v59._uint64_t countAndFlagsBits = 46;
    v59._char object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    v59._uint64_t countAndFlagsBits = v242._countAndFlagsBits;
    v59._char object = v231;
    String.append(_:)(v59);
    char v60 = BYTE8(v239);
    uint64_t v61 = a11(v232, v239, *((void *)&v239 + 1));
    swift_bridgeObjectRelease(v60);
    uint64_t v62 = v241;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v241);
    uint64_t v234 = v62;
    unint64_t v241 = (void *)0x8000000000000000;
    specialized LazyMapSequence.makeIterator()(v61, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0);
    uint64_t v215 = v182;
    v242._char object = v183;
    uint64_t v221 = v177[1];
    uint64_t v244 = v178;
    uint64_t v243 = v180;
    v233[1] = v181;
    uint64_t v218 = (uint64_t)v179;
    uint64_t v238 = (void (*)(long long *))((unint64_t)(v179 + 8) >> 6);
    uint64_t v210 = v61;
    swift_bridgeObjectRetain(v61);
    while (1)
    {
      LOBYTE(v237) = isUniquelyReferenced_nonNull_native;
      if (v233[1])
      {
        uint64_t v64 = v62;
        _BitScanForward64(&v65, v233[1]);
        v233[1] &= v233[1] - 1;
        unint64_t v66 = v65 | (v243 << 6);
        goto LABEL_32;
      }
      uint64_t v67 = v243 + 1;
      if (__OFADD__(1, v243)) {
        BUG();
      }
      if (v67 >= (uint64_t)v238) {
        goto LABEL_46;
      }
      unint64_t v68 = *(void *)(v244 + 8 * v67);
      if (!v68) {
        break;
      }
LABEL_17:
      uint64_t v243 = v67;
LABEL_31:
      _BitScanForward64(&v70, v68);
      uint64_t v64 = v62;
      v233[1] = v68 & (v68 - 1);
      unint64_t v66 = v70 + (v243 << 6);
LABEL_32:
      uint64_t v71 = *(void *)(v221 + 48);
      uint64_t v72 = *(void *)(v71 + 16 * v66 + 8);
      uint64_t v73 = *(void *)(*(void *)(v221 + 56) + 8 * v66);
      *(void *)&long long v239 = *(void *)(v71 + 16 * v66);
      *((void *)&v239 + 1) = v72;
      uint64_t v240 = v73;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v73);
      ((void (*)(long long *))v215)(&v239);
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(v72);
      uint64_t v74 = v199;
      unint64_t v235 = (void *)v200;
      uint64_t v220 = v198;
      unint64_t v75 = v64;
      unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v199);
      BOOL v78 = (v76 & 1) == 0;
      BOOL v79 = __OFADD__(v64[2], v78);
      uint64_t v80 = v64[2] + v78;
      if (v79) {
        BUG();
      }
      char v81 = v76;
      if (v75[3] >= v80)
      {
        if ((v237 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, v237);
        unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v220, v74);
        if ((v81 & 1) != (v82 & 1))
        {
LABEL_110:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v62 = v234;
      if (v81)
      {
        uint64_t v83 = *(void *)(v234[7] + 8 * v77);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRelease(v74);
        swift_bridgeObjectRelease((_BYTE)v235);
        uint64_t v84 = v62[7];
        swift_bridgeObjectRelease(*(void *)(v84 + 8 * v77));
        *(void *)(v84 + 8 * v77) = v83;
        char isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        v234[(v77 >> 6) + 8] |= 1 << v77;
        uint64_t v85 = v62[6];
        uint64_t v86 = 16 * v77;
        *(void *)(v85 + v86) = v220;
        *(void *)(v85 + v86 + 8) = v74;
        *(void *)(v62[7] + 8 * v77) = v235;
        uint64_t v87 = v62[2];
        BOOL v79 = __OFADD__(1, v87);
        uint64_t v88 = v87 + 1;
        if (v79) {
          BUG();
        }
        v62[2] = v88;
        char isUniquelyReferenced_nonNull_native = 1;
      }
    }
    uint64_t v69 = v243 + 2;
    if (v243 + 2 >= (uint64_t)v238) {
      goto LABEL_46;
    }
    unint64_t v68 = *(void *)(v244 + 8 * v67 + 8);
    if (v68) {
      goto LABEL_30;
    }
    uint64_t v69 = v243 + 3;
    if (v243 + 3 >= (uint64_t)v238) {
      goto LABEL_46;
    }
    unint64_t v68 = *(void *)(v244 + 8 * v67 + 16);
    if (v68) {
      goto LABEL_30;
    }
    uint64_t v69 = v243 + 4;
    if (v243 + 4 >= (uint64_t)v238) {
      goto LABEL_46;
    }
    unint64_t v68 = *(void *)(v244 + 8 * v67 + 24);
    if (v68) {
      goto LABEL_30;
    }
    uint64_t v69 = v243 + 5;
    if (v243 + 5 >= (uint64_t)v238) {
      goto LABEL_46;
    }
    unint64_t v68 = *(void *)(v244 + 8 * v67 + 32);
    if (v68) {
      goto LABEL_30;
    }
    uint64_t v69 = v243 + 6;
    if (v243 + 6 >= (uint64_t)v238) {
      goto LABEL_46;
    }
    unint64_t v68 = *(void *)(v244 + 8 * v67 + 40);
    if (v68) {
      goto LABEL_30;
    }
    uint64_t v69 = v243 + 7;
    if (v243 + 7 >= (uint64_t)v238) {
      goto LABEL_46;
    }
    unint64_t v68 = *(void *)(v244 + 8 * v67 + 48);
    if (v68)
    {
LABEL_30:
      uint64_t v243 = v69;
      goto LABEL_31;
    }
    uint64_t v89 = v243 + 8;
    while (v89 < (uint64_t)v238)
    {
      unint64_t v68 = *(void *)(v244 + 8 * v89++);
      if (v68)
      {
        uint64_t v67 = v89 - 1;
        goto LABEL_17;
      }
    }
LABEL_46:
    swift_bridgeObjectRelease(v210);
    outlined consume of [String : [Int]].Iterator._Variant(v221);
    swift_release();
    unint64_t v241 = v62;
    swift_bridgeObjectRelease(0);
    v90._uint64_t countAndFlagsBits = 0x6E65727275636572;
    v90._char object = (void *)0xEF74686769655774;
    uint64_t v91 = v231;
    Swift::Bool v92 = String.hasSuffix(_:)(v90);
    swift_bridgeObjectRelease((_BYTE)v91);
    if (v92)
    {
      uint64_t v93 = v209;
      Parameter.value.getter(v91);
      Tensor.shape.getter();
      v191((uint64_t)v93, v208);
      uint64_t v94 = TensorShape.dimensions.getter();
      uint64_t v95 = *(void *)(v94 + 16);
      swift_bridgeObjectRelease(v94);
      uint64_t v96 = 0x3FF0000000000000;
      if (v95 != 3) {
        uint64_t v96 = 0;
      }
      v233[1] = v96;
      int v97 = TensorShape.subscript.getter((v95 == 3) + 1);
      *(void *)&long long v239 = v233[0];
      Swift::String v98 = v230;
      *((void *)&v239 + 1) = v230;
      swift_bridgeObjectRetain((_BYTE)v230);
      v99._uint64_t countAndFlagsBits = 0x756F4374696E752ELL;
      v99._char object = (void *)0xEA0000000000746ELL;
      String.append(_:)(v99);
      uint64_t v100 = *((void *)&v239 + 1);
      unint64_t v235 = (void *)v239;
      uint64_t v237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v101 = swift_allocObject(v237, 40, 7);
      *(void *)(v101 + 16) = 1;
      *(void *)(v101 + 24) = 2;
      *(double *)(v101 + 32) = (double)v97;
      uint64_t v102 = v241;
      char v103 = swift_isUniquelyReferenced_nonNull_native(v241);
      *(void *)&long long v239 = v102;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v101, (uint64_t)v235, v100, v103);
      uint64_t v104 = v239;
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(0);
      *(void *)&long long v239 = 0;
      *((void *)&v239 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      LOBYTE(v101) = BYTE8(v239);
      swift_bridgeObjectRetain((_BYTE)v98);
      swift_bridgeObjectRelease(v101);
      *(void *)&long long v239 = v233[0];
      *((void *)&v239 + 1) = v98;
      v99._uint64_t countAndFlagsBits = 0xD000000000000010;
      v99._char object = v196;
      String.append(_:)(v99);
      uint64_t v106 = *((void *)&v239 + 1);
      uint64_t v105 = v239;
      Swift::String v107 = (void *)swift_allocObject(v237, 40, 7);
      v107[2] = 1;
      v107[3] = 2;
      v107[4] = v233[1];
      char v108 = swift_isUniquelyReferenced_nonNull_native(v104);
      *(void *)&long long v239 = v104;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v107, v105, v106, v108);
      unint64_t v241 = (void *)v239;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v106);
      swift_bridgeObjectRelease(0);
      (*(void (**)(void *, uint64_t))(v195 + 8))(v212, v194);
      uint64_t v38 = v225;
      v229(v225, v236);
    }
    else
    {
      uint64_t v38 = v225;
      v229(v225, v236);
      swift_release();
      swift_release();
    }
    unint64_t v37 = (unint64_t)v227;
    uint64_t v36 = v206;
  }
  while (v227 != v193);
LABEL_52:
  swift_bridgeObjectRelease(v36);
  uint64_t v109 = Layer.namedLayerStateKeyPaths(recursively:)(1, v197, &protocol witness table for LSTM);
  uint64_t v210 = *(void *)(v109 + 16);
  if (!v210) {
    goto LABEL_99;
  }
  uint64_t v223 = v109 + 32;
  unint64_t v110 = 0;
  uint64_t v218 = v109;
LABEL_54:
  if (v110 >= *(void *)(v109 + 16)) {
    BUG();
  }
  uint64_t v236 = v110;
  v233[1] = *(void *)(v223 + 24 * v110);
  uint64_t v111 = *(void **)(v223 + 24 * v110 + 8);
  uint64_t v112 = *(void *)(v223 + 24 * v110 + 16);
  swift_retain_n(v112);
  swift_bridgeObjectRetain((_BYTE)v111);
  swift_getAtKeyPath(v211, v112);
  swift_release();
  uint64_t v113 = (uint64_t)v209;
  LayerState.value.getter(v112);
  uint64_t v237 = (uint64_t)v111;
  Dictionary<>.updateValue(tensor:forKey:prefix:)(v113, v233[1], v111, v233[0], v230);
  (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v113, v208);
  uint64_t v232 = v112;
  if (v217)
  {
    uint64_t v114 = v224;
    unsigned int v115 = LayerState.id.getter();
    uint64_t v116 = a7(v115, v217);
  }
  else
  {
    uint64_t v116 = 0;
    uint64_t v114 = v224;
  }
  uint64_t v117 = (uint64_t)v219;
  uint64_t v118 = v222;
  outlined init with copy of MLTrainingSessionParameters(v201, (uint64_t)v219, v222);
  uint64_t v119 = v114;
  uint64_t v120 = v216;
  (*(void (**)(void *, void *, uint64_t))(v213 + 16))(v214, v119, v216);
  if (v116)
  {
    unint64_t v231 = (void *)v116;
    uint64_t v227 = *(char **)(v213 + 8);
    ((void (*)(void *, uint64_t))v227)(v214, v120);
    outlined destroy of MLActivityClassifier.ModelParameters(v117, v118);
LABEL_62:
    ++v236;
    *(void *)&long long v239 = v233[0];
    *((void *)&v239 + 1) = v230;
    swift_bridgeObjectRetain((_BYTE)v230);
    v130._uint64_t countAndFlagsBits = 46;
    v130._char object = (void *)0xE100000000000000;
    String.append(_:)(v130);
    v130._uint64_t countAndFlagsBits = v233[1];
    char v131 = v237;
    v130._char object = (void *)v237;
    String.append(_:)(v130);
    swift_bridgeObjectRelease(v131);
    char v132 = BYTE8(v239);
    uint64_t v133 = a11((uint64_t)v231, v239, *((void *)&v239 + 1));
    swift_bridgeObjectRelease(v132);
    unint64_t v134 = v241;
    char v135 = swift_isUniquelyReferenced_nonNull_native(v241);
    uint64_t v234 = v134;
    unint64_t v241 = (void *)0x8000000000000000;
    specialized LazyMapSequence.makeIterator()(v133, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0);
    uint64_t v238 = v189;
    uint64_t v221 = v190;
    uint64_t v215 = v184;
    uint64_t v244 = v185;
    v242._char object = v187;
    unint64_t v136 = v188;
    uint64_t v229 = v186;
    v242._uint64_t countAndFlagsBits = ((unint64_t)v186 + 64) >> 6;
    Swift::String v228 = (void *)v133;
    swift_bridgeObjectRetain(v133);
    while (1)
    {
      v233[1] = (uint64_t)v134;
      LOBYTE(v237) = v135;
      if (v136)
      {
        _BitScanForward64(&v137, v136);
        uint64_t v243 = (v136 - 1) & v136;
        unint64_t v138 = v137 | ((uint64_t)v242._object << 6);
        goto LABEL_83;
      }
      uint64_t v139 = (uint64_t)v242._object + 1;
      uint64_t v140 = v216;
      if (__OFADD__(1, v242._object)) {
        BUG();
      }
      if (v139 >= v242._countAndFlagsBits)
      {
LABEL_98:
        swift_bridgeObjectRelease((_BYTE)v228);
        outlined consume of [String : [Int]].Iterator._Variant(v215);
        swift_release();
        unint64_t v241 = v134;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease(0);
        ((void (*)(void *, uint64_t))v227)(v224, v140);
        unint64_t v110 = v236;
        uint64_t v109 = v218;
        if (v236 == v210)
        {
LABEL_99:
          swift_bridgeObjectRelease(v109);
          return (uint64_t)v241;
        }
        goto LABEL_54;
      }
      unint64_t v141 = *(void *)(v244 + 8 * v139);
      if (!v141)
      {
        uint64_t v142 = (char *)v242._object + 2;
        if ((uint64_t)v242._object + 2 >= v242._countAndFlagsBits) {
          goto LABEL_98;
        }
        unint64_t v141 = *(void *)(v244 + 8 * v139 + 8);
        if (v141) {
          goto LABEL_81;
        }
        uint64_t v142 = (char *)v242._object + 3;
        if ((uint64_t)v242._object + 3 >= v242._countAndFlagsBits) {
          goto LABEL_98;
        }
        unint64_t v141 = *(void *)(v244 + 8 * v139 + 16);
        if (v141) {
          goto LABEL_81;
        }
        uint64_t v142 = (char *)v242._object + 4;
        if ((uint64_t)v242._object + 4 >= v242._countAndFlagsBits) {
          goto LABEL_98;
        }
        unint64_t v141 = *(void *)(v244 + 8 * v139 + 24);
        if (v141) {
          goto LABEL_81;
        }
        uint64_t v142 = (char *)v242._object + 5;
        if ((uint64_t)v242._object + 5 >= v242._countAndFlagsBits) {
          goto LABEL_98;
        }
        unint64_t v141 = *(void *)(v244 + 8 * v139 + 32);
        if (v141) {
          goto LABEL_81;
        }
        uint64_t v142 = (char *)v242._object + 6;
        if ((uint64_t)v242._object + 6 >= v242._countAndFlagsBits) {
          goto LABEL_98;
        }
        unint64_t v141 = *(void *)(v244 + 8 * v139 + 40);
        if (v141) {
          goto LABEL_81;
        }
        uint64_t v142 = (char *)v242._object + 7;
        if ((uint64_t)v242._object + 7 >= v242._countAndFlagsBits) {
          goto LABEL_98;
        }
        unint64_t v141 = *(void *)(v244 + 8 * v139 + 48);
        if (v141)
        {
LABEL_81:
          v242._char object = v142;
          goto LABEL_82;
        }
        uint64_t v161 = (uint64_t)v242._object + 8;
        do
        {
          if (v161 >= v242._countAndFlagsBits) {
            goto LABEL_98;
          }
          unint64_t v141 = *(void *)(v244 + 8 * v161++);
        }
        while (!v141);
        uint64_t v139 = v161 - 1;
      }
      v242._char object = (void *)v139;
LABEL_82:
      _BitScanForward64(&v143, v141);
      uint64_t v243 = v141 & (v141 - 1);
      unint64_t v138 = v143 + ((uint64_t)v242._object << 6);
LABEL_83:
      uint64_t v144 = *(void *)(v215 + 48);
      uint64_t v145 = *(void *)(v144 + 16 * v138 + 8);
      uint64_t v146 = *(void *)(*(void *)(v215 + 56) + 8 * v138);
      *(void *)&long long v239 = *(void *)(v144 + 16 * v138);
      *((void *)&v239 + 1) = v145;
      uint64_t v240 = v146;
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRetain(v146);
      v238(&v239);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease(v145);
      uint64_t v147 = v199;
      unint64_t v235 = (void *)v200;
      uint64_t v220 = v198;
      uint64_t v148 = v233[1];
      unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v199);
      BOOL v151 = (v149 & 1) == 0;
      BOOL v79 = __OFADD__(*(void *)(v148 + 16), v151);
      uint64_t v152 = *(void *)(v148 + 16) + v151;
      if (v79) {
        BUG();
      }
      char v153 = v149;
      if (*(void *)(v148 + 24) >= v152)
      {
        if ((v237 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v152, v237);
        unint64_t v150 = specialized __RawDictionaryStorage.find<A>(_:)(v220, v147);
        if ((v153 & 1) != (v154 & 1)) {
          goto LABEL_110;
        }
      }
      unint64_t v134 = v234;
      if (v153)
      {
        uint64_t v155 = *(void *)(v234[7] + 8 * v150);
        swift_bridgeObjectRetain(v155);
        swift_bridgeObjectRelease(v147);
        swift_bridgeObjectRelease((_BYTE)v235);
        uint64_t v156 = v134[7];
        swift_bridgeObjectRelease(*(void *)(v156 + 8 * v150));
        *(void *)(v156 + 8 * v150) = v155;
      }
      else
      {
        v234[(v150 >> 6) + 8] |= 1 << v150;
        uint64_t v157 = v134[6];
        uint64_t v158 = 16 * v150;
        *(void *)(v157 + v158) = v220;
        *(void *)(v157 + v158 + 8) = v147;
        *(void *)(v134[7] + 8 * v150) = v235;
        uint64_t v159 = v134[2];
        BOOL v79 = __OFADD__(1, v159);
        uint64_t v160 = v159 + 1;
        if (v79) {
          BUG();
        }
        v134[2] = v160;
      }
      char v135 = 1;
      unint64_t v136 = v243;
    }
  }
  uint64_t v121 = v214;
  int v122 = LayerState.id.getter();
  uint64_t v123 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a8, v222, a9);
  uint64_t v124 = Layer.parameterKeyPaths(recursively:)(1, v207, v123);
  unint64_t v235 = v177;
  int64_t v125 = alloca(28);
  id v126 = alloca(32);
  uint64_t v178 = (uint64_t)v219;
  LODWORD(v179) = v122;
  uint64_t v127 = v226;
  uint64_t v128 = specialized Sequence.first(where:)(a10, (uint64_t)v177, v124);
  uint64_t v226 = v127;
  uint64_t v129 = v216;
  swift_bridgeObjectRelease(v124);
  uint64_t v227 = *(char **)(v213 + 8);
  ((void (*)(void *, uint64_t))v227)(v121, v129);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v219, v222);
  if (v128)
  {
    unint64_t v231 = (void *)v128;
    goto LABEL_62;
  }
  swift_bridgeObjectRelease(v218);
  swift_bridgeObjectRelease((_BYTE)v241);
  *(void *)&long long v239 = 0;
  *((void *)&v239 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v170._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v170);
  v170._uint64_t countAndFlagsBits = v233[0];
  v170._char object = v230;
  String.append(_:)(v170);
  v170._uint64_t countAndFlagsBits = 0x74656D6172617020;
  v170._char object = (void *)0xEB00000000207265;
  String.append(_:)(v170);
  v170._uint64_t countAndFlagsBits = v233[1];
  uint64_t v171 = v237;
  v170._char object = (void *)v237;
  String.append(_:)(v170);
  *(_OWORD *)&v233[1] = v239;
  v170._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v170._object, 0, 0);
  *(_OWORD *)uint64_t v172 = *(_OWORD *)&v233[1];
  *(_OWORD *)(v172 + 16) = 0;
  *(_OWORD *)(v172 + 32) = 0;
  *(unsigned char *)(v172 + 48) = 0;
  swift_bridgeObjectRelease(v171);
  swift_willThrow(v171, v170._object, v173, v174, v175, v176);
  swift_release();
  return ((uint64_t (*)(void *, uint64_t))v227)(v224, v216);
}

uint64_t specialized SGD.getParametersDictionary()()
{
  int v11 = *(unsigned __int8 *)(v0 + 12);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject(v1, v10);
  *(void *)(inited + 16) = 3;
  *(void *)(inited + 24) = 6;
  strcpy((char *)(inited + 32), "learningRate");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v4 = swift_allocObject(v3, 40, 7);
  *(void *)(v4 + 16) = 1;
  *(void *)(v4 + 24) = 2;
  *(double *)(v4 + 32) = *(float *)v0;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = 0x6D75746E656D6F6DLL;
  *(void *)(inited + 64) = 0xE800000000000000;
  uint64_t v5 = swift_allocObject(v3, 40, 7);
  *(void *)(v5 + 16) = 1;
  double v6 = *(float *)(v0 + 4);
  *(void *)(v5 + 24) = 2;
  *(double *)(v5 + 32) = v6;
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = ".isBidirectional" + 0x8000000000000000;
  uint64_t v7 = swift_allocObject(v3, 40, 7);
  *(void *)(v7 + 16) = 1;
  *(void *)(v7 + 24) = 2;
  *(double *)(v7 + 32) = (double)v11;
  *(void *)(inited + 96) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v8, &protocol witness table for String);
}

uint64_t specialized SGD.getStatesDictionary(for:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = a3;
  uint64_t v70 = a2;
  uint64_t v73 = a1;
  uint64_t v63 = type metadata accessor for TensorShape(0);
  uint64_t v67 = *(void *)(v63 - 8);
  int64_t v3 = *(void *)(v67 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  unint64_t v65 = v56;
  double v6 = alloca(v3);
  uint64_t v7 = alloca(v3);
  unint64_t v68 = v56;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for Tensor(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v72 = _swiftEmptyArrayStorage;
  uint64_t v71 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v16, &protocol witness table for String);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLHandActionClassifier.GraphCNNModel>);
  OptimizerStateDictionary.subscript.getter(v73, v17);
  if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v11) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v56, &demangling cache variable for type metadata for Tensor?);
    return v71;
  }
  else
  {
    unint64_t v66 = v56;
    uint64_t v61 = v11;
    uint64_t v62 = v12;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v56, v56, v11);
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    char v19 = v59;
    unint64_t v20 = v69;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRelease(v19);
    uint64_t v58 = v70;
    unint64_t v59 = v20;
    v21._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v21);
    uint64_t v73 = v58;
    unint64_t v60 = v59;
    uint64_t v22 = (uint64_t)v68;
    int64_t v23 = v66;
    Tensor.shape.getter();
    uint64_t v24 = TensorShape.contiguousSize.getter();
    uint64_t v25 = v63;
    uint64_t v67 = *(void *)(v67 + 8);
    ((void (*)(uint64_t, uint64_t))v67)(v22, v63);
    int64_t v26 = alloca(24);
    uint64_t v27 = alloca(32);
    uint64_t v57 = v23;
    uint64_t v28 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v24, (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)v56);
    uint64_t v29 = v25;
    uint64_t v30 = v71;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
    uint64_t v58 = v30;
    LOBYTE(v30) = v60;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v73, v60, isUniquelyReferenced_nonNull_native);
    uint64_t v71 = v58;
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(0);
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    LOBYTE(v30) = v59;
    unint64_t v32 = v69;
    swift_bridgeObjectRetain(v69);
    LOBYTE(v21._countAndFlagsBits) = v30;
    char v33 = v65;
    swift_bridgeObjectRelease(v21._countAndFlagsBits);
    uint64_t v58 = v70;
    unint64_t v59 = v32;
    v21._char object = ".optimizer.velocity" + 0x8000000000000000;
    v21._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v21);
    unint64_t v68 = (unsigned char *)v58;
    uint64_t v70 = v59;
    uint64_t v34 = v66;
    Tensor.shape.getter();
    uint64_t v73 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))&type metadata accessor for TensorShape, (uint64_t)&protocol conformance descriptor for TensorShape);
    uint64_t v35 = dispatch thunk of Collection.count.getter(v25, v73);
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v64 = _swiftEmptyArrayStorage;
      int64_t v37 = 0;
      if (v35 > 0) {
        int64_t v37 = v35;
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
      uint64_t v72 = v64;
      dispatch thunk of Collection.startIndex.getter(v25, v73);
      if (v36 < 0) {
        BUG();
      }
      uint64_t v69 = v36;
      uint64_t v38 = v72;
      uint64_t v39 = v73;
      uint64_t v40 = v25;
      do
      {
        uint64_t v41 = v40;
        int64_t v42 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read(&v58, &v57, v40, v39);
        uint64_t v72 = *v43;
        v42(&v58, 0);
        uint64_t v64 = v38;
        uint64_t v44 = v41;
        unint64_t v45 = v38[2];
        unint64_t v46 = v38[3];
        uint64_t v47 = v65;
        if (v46 >> 1 <= v45)
        {
          uint64_t v52 = v65;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 >= 2, v45 + 1, 1);
          uint64_t v47 = v52;
          uint64_t v44 = v63;
          uint64_t v38 = v64;
        }
        double v48 = (double)(int)v72;
        v38[2] = v45 + 1;
        *(double *)&v38[v45 + 4] = v48;
        uint64_t v49 = v44;
        uint64_t v50 = v73;
        dispatch thunk of Collection.formIndex(after:)(&v57, v44, v73);
        BOOL v51 = v69-- == 1;
        uint64_t v40 = v49;
        char v33 = v47;
        uint64_t v39 = v50;
      }
      while (!v51);
      uint64_t v72 = v38;
      uint64_t v34 = v66;
      uint64_t v29 = v40;
    }
    ((void (*)(unsigned char *, uint64_t))v67)(v33, v29);
    uint64_t v53 = v71;
    char v54 = swift_isUniquelyReferenced_nonNull_native(v71);
    uint64_t v58 = v53;
    LOBYTE(v53) = v70;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v72, (uint64_t)v68, v70, v54);
    uint64_t v18 = v58;
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(0);
    (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v34, v61);
  }
  return v18;
}

BOOL specialized closure #1 in Layer.parameterKeyPath(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v10[2] = a3;
  v10[3] = a2;
  uint64_t v3 = type metadata accessor for Parameter(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  double v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  swift_getAtKeyPath(a2, a1);
  int v8 = Parameter.id.getter();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v10, v3);
  return v8 == Parameter.id.getter();
}

BOOL specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t a1, uint64_t a2, int a3)
{
  int v11 = a3;
  void v10[2] = a2;
  uint64_t v3 = type metadata accessor for Parameter(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  double v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  swift_getAtKeyPath(a2, a1);
  int v8 = Parameter.id.getter();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v10, v3);
  return v8 == v11;
}

void *MLHandActionClassifier.GraphCNN.getCheckpointStatesDictionary()()
{
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer;
  swift_beginAccess(v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer, v9, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, (uint64_t)&v8, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  int64_t v5 = MLHandActionClassifier.GraphCNN.trainableSublayers()();
  LOBYTE(v4) = (_BYTE)v5;
  double v6 = specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)((uint64_t)&v8, (uint64_t)v5);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v8, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  swift_bridgeObjectRelease(v4);
  return v6;
}

void *specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)(uint64_t a1, uint64_t a2)
{
  uint64_t v181 = v2;
  uint64_t v4 = v3;
  uint64_t v169 = a2;
  uint64_t v175 = a1;
  unint64_t v173 = 0;
  uint64_t v5 = type metadata accessor for LSTM(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v158 = v127;
  uint64_t v10 = alloca(v7);
  int v11 = alloca(v7);
  uint64_t v157 = v127;
  uint64_t v152 = type metadata accessor for Dense(0);
  uint64_t v167 = *(void *)(v152 - 8);
  int64_t v12 = *(void *)(v167 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v156 = v127;
  int64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  char v154 = v127;
  uint64_t v148 = type metadata accessor for Conv2D(0);
  uint64_t v165 = *(void *)(v148 - 8);
  int64_t v17 = *(void *)(v165 + 64);
  uint64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  char v153 = v127;
  unint64_t v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  char v149 = v127;
  int64_t v22 = *(void *)(*(void *)(type metadata accessor for MLActivityClassifier.Model(0) - 8) + 64);
  int64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v171 = v127;
  uint64_t v25 = alloca(v22);
  int64_t v26 = alloca(v22);
  uint64_t v168 = v127;
  uint64_t v27 = alloca(v22);
  uint64_t v28 = alloca(v22);
  uint64_t v166 = v127;
  uint64_t v29 = alloca(v22);
  uint64_t v30 = alloca(v22);
  unint64_t v150 = v127;
  uint64_t v145 = type metadata accessor for BatchNorm(0);
  uint64_t v164 = *(void *)(v145 - 8);
  int64_t v31 = *(void *)(v164 + 64);
  unint64_t v32 = alloca(v31);
  char v33 = alloca(v31);
  BOOL v151 = v127;
  uint64_t v34 = alloca(v31);
  uint64_t v35 = alloca(v31);
  uint64_t v146 = v127;
  uint64_t v176 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v36 = (void *)specialized Adam.getParametersDictionary()();
  unint64_t v144 = *(void *)(v169 + 16);
  uint64_t v174 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v4;
  uint64_t v37 = v169;
  swift_bridgeObjectRetain(v169);
  swift_beginAccess(v174, v127, 0, 0);
  uint64_t v147 = v37 + 32;
  uint64_t v155 = v5;
  uint64_t v170 = v6;
  while (1)
  {
    uint64_t v184 = v36;
    if (v173 == v144)
    {
      memset(v138, 0, sizeof(v138));
      unint64_t v173 = v144;
    }
    else
    {
      if (v173 >= v144) {
        BUG();
      }
      unint64_t v38 = v173;
      unint64_t v39 = v173 + 1;
      outlined init with copy of TabularRegressionTask(v147 + 40 * v173, (uint64_t)v160);
      *(void *)&v138[0] = v38;
      outlined init with take of MLIdentifier(v160, (uint64_t)v138 + 8);
      unint64_t v173 = v39;
    }
    outlined init with take of DataFrame?((uint64_t)v138, (uint64_t)&v128, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
    if (!v130)
    {
      swift_bridgeObjectRelease((_BYTE)v176);
      swift_bridgeObjectRelease(v169);
      return v184;
    }
    uint64_t v40 = v128;
    outlined init with take of MLIdentifier(&v129, (uint64_t)v138);
    uint64_t v159 = 0x5F726579616CLL;
    *(void *)&v160[0] = 0xE600000000000000;
    uint64_t v139 = v40;
    v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v40) = v41._object;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v40);
    uint64_t v179 = v159;
    unint64_t v182 = *(void *)&v160[0];
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    uint64_t v43 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v42, &protocol witness table for String);
    outlined init with copy of TabularRegressionTask((uint64_t)v138, (uint64_t)&v159);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    unint64_t v45 = v146;
    uint64_t v46 = v145;
    if (!swift_dynamicCast(v146, &v159, v44, v145, 0)) {
      break;
    }
    swift_bridgeObjectRelease(v43);
    uint64_t v47 = v151;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v164 + 32))(v151, v45, v46);
    uint64_t v48 = (uint64_t)v150;
    outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v150, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v49 = (uint64_t)v176;
    swift_bridgeObjectRetain((_BYTE)v176);
    uint64_t v50 = v181;
    uint64_t v51 = specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v48, v179, (void *)v182, v175, v49, type metadata accessor for MLActivityClassifier.Model, (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(void))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(for:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized Adam.getStatesDictionary(for:name:), (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply);
    uint64_t v181 = v50;
    if (v50)
    {
      swift_bridgeObjectRelease(v182);
      swift_bridgeObjectRelease_n(v49, 2, v120, v121, v122);
      outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLActivityClassifier.Model);
      uint64_t v123 = v47;
      uint64_t v124 = v46;
      uint64_t v125 = v164;
      goto LABEL_63;
    }
    uint64_t v180 = v51;
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v49);
    outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v52 = v47;
    uint64_t v53 = v46;
    uint64_t v54 = v164;
LABEL_16:
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v52, v53);
LABEL_17:
    uint64_t v36 = v184;
    __swift_destroy_boxed_opaque_existential_1Tm(&v159);
    LOBYTE(v179) = swift_isUniquelyReferenced_nonNull_native(v36);
    uint64_t v172 = v36;
    char v79 = v180;
    specialized LazyMapSequence.makeIterator()(v180, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0);
    uint64_t v142 = v136;
    uint64_t v162 = v137;
    uint64_t v163 = v131;
    uint64_t v178 = v132;
    int64_t v183 = v134;
    unint64_t v182 = v135;
    uint64_t v143 = v133;
    int64_t v177 = (unint64_t)(v133 + 64) >> 6;
    swift_bridgeObjectRetain(v79);
    while (1)
    {
      if (v182)
      {
        uint64_t v80 = v36;
        _BitScanForward64(&v81, v182);
        v182 &= v182 - 1;
        unint64_t v82 = v81 | (v183 << 6);
        goto LABEL_36;
      }
      int64_t v83 = v183 + 1;
      if (__OFADD__(1, v183)) {
        BUG();
      }
      if (v83 >= v177) {
        goto LABEL_50;
      }
      unint64_t v84 = *(void *)(v178 + 8 * v83);
      if (!v84) {
        break;
      }
LABEL_23:
      int64_t v183 = v83;
LABEL_35:
      _BitScanForward64(&v86, v84);
      uint64_t v80 = v36;
      unint64_t v182 = v84 & (v84 - 1);
      unint64_t v82 = v86 + (v183 << 6);
LABEL_36:
      uint64_t v87 = *(void *)(v163 + 48);
      uint64_t v88 = *(void *)(v87 + 16 * v82 + 8);
      uint64_t v89 = *(void *)(*(void *)(v163 + 56) + 8 * v82);
      uint64_t v159 = *(void *)(v87 + 16 * v82);
      *(void *)&v160[0] = v88;
      *((void *)&v160[0] + 1) = v89;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v89);
      v142(&v159);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v88);
      uint64_t v90 = v140;
      uint64_t v184 = v141;
      uint64_t v161 = v139;
      uint64_t v91 = v80;
      unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v139, v140);
      BOOL v94 = (v92 & 1) == 0;
      BOOL v95 = __OFADD__(v91[2], v94);
      uint64_t v96 = v91[2] + v94;
      if (v95) {
        BUG();
      }
      char v97 = v92;
      if (v91[3] >= v96)
      {
        if ((v179 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v96, v179);
        unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v161, v90);
        if ((v97 & 1) != (v98 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v36 = v172;
      if (v97)
      {
        uint64_t v99 = *(void *)(v172[7] + 8 * v93);
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRelease(v90);
        swift_bridgeObjectRelease((_BYTE)v184);
        uint64_t v100 = v36[7];
        swift_bridgeObjectRelease(*(void *)(v100 + 8 * v93));
        *(void *)(v100 + 8 * v93) = v99;
        LOBYTE(v179) = 1;
      }
      else
      {
        v172[(v93 >> 6) + 8] |= 1 << v93;
        uint64_t v101 = v36[6];
        uint64_t v102 = 16 * v93;
        *(void *)(v101 + v102) = v161;
        *(void *)(v101 + v102 + 8) = v90;
        *(void *)(v36[7] + 8 * v93) = v184;
        uint64_t v103 = v36[2];
        BOOL v95 = __OFADD__(1, v103);
        uint64_t v104 = v103 + 1;
        if (v95) {
          BUG();
        }
        v36[2] = v104;
        LOBYTE(v179) = 1;
      }
    }
    int64_t v85 = v183 + 2;
    if (v183 + 2 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 8);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 3;
    if (v183 + 3 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 16);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 4;
    if (v183 + 4 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 24);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 5;
    if (v183 + 5 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 32);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 6;
    if (v183 + 6 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 40);
    if (v84)
    {
LABEL_34:
      int64_t v183 = v85;
      goto LABEL_35;
    }
    int64_t v105 = v183 + 7;
    while (v105 < v177)
    {
      unint64_t v84 = *(void *)(v178 + 8 * v105++);
      if (v84)
      {
        int64_t v83 = v105 - 1;
        goto LABEL_23;
      }
    }
LABEL_50:
    swift_bridgeObjectRelease(v180);
    outlined consume of [String : [Int]].Iterator._Variant(v163);
    swift_bridgeObjectRelease(0);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v138);
  }
  uint64_t v180 = v43;
  uint64_t v55 = v149;
  uint64_t v56 = v148;
  if (swift_dynamicCast(v149, &v159, v44, v148, 0))
  {
    swift_bridgeObjectRelease(v180);
    uint64_t v57 = v153;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v165 + 32))(v153, v55, v56);
    uint64_t v58 = (uint64_t)v166;
    outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v166, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v59 = (uint64_t)v176;
    swift_bridgeObjectRetain((_BYTE)v176);
    uint64_t v60 = v58;
    char v61 = v182;
    uint64_t v62 = v181;
    uint64_t v63 = specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v60, v179, (void *)v182, v175, v59, type metadata accessor for MLActivityClassifier.Model, (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(void, uint64_t))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t (*)(unsigned char *, void, void))specialized Adam.getStatesDictionary(for:name:), (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply);
    uint64_t v181 = v62;
    if (v62)
    {
      swift_bridgeObjectRelease_n(v59, 2, v64, v65, v66);
      swift_bridgeObjectRelease(v61);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v166, type metadata accessor for MLActivityClassifier.Model);
      uint64_t v123 = v57;
      uint64_t v124 = v56;
      uint64_t v125 = v165;
      goto LABEL_63;
    }
    uint64_t v180 = v63;
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v61);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v166, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v52 = v57;
    uint64_t v53 = v56;
    uint64_t v54 = v165;
    goto LABEL_16;
  }
  uint64_t v67 = v154;
  uint64_t v68 = v152;
  if (swift_dynamicCast(v154, &v159, v44, v152, 0))
  {
    swift_bridgeObjectRelease(v180);
    uint64_t v69 = v156;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v167 + 32))(v156, v67, v68);
    uint64_t v70 = (uint64_t)v168;
    outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v168, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v71 = (uint64_t)v176;
    swift_bridgeObjectRetain((_BYTE)v176);
    uint64_t v72 = v70;
    char v73 = v182;
    uint64_t v74 = v181;
    uint64_t v75 = specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v72, v179, (void *)v182, v175, v71, type metadata accessor for MLActivityClassifier.Model, (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(void, uint64_t))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t (*)(void *, void, void))specialized Adam.getStatesDictionary(for:name:), (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply);
    uint64_t v181 = v74;
    if (v74)
    {
      swift_bridgeObjectRelease_n(v71, 2, v76, v77, v78);
      swift_bridgeObjectRelease(v73);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v168, type metadata accessor for MLActivityClassifier.Model);
      uint64_t v123 = v69;
      uint64_t v124 = v68;
      uint64_t v125 = v167;
      goto LABEL_63;
    }
    uint64_t v180 = v75;
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v73);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v168, type metadata accessor for MLActivityClassifier.Model);
    uint64_t v52 = v69;
    uint64_t v53 = v68;
    uint64_t v54 = v167;
    goto LABEL_16;
  }
  uint64_t v106 = v157;
  uint64_t v107 = v44;
  uint64_t v108 = v155;
  if (!swift_dynamicCast(v157, &v159, v107, v155, 0))
  {
    swift_bridgeObjectRelease(v182);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease(v180);
  uint64_t v109 = v158;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 32))(v158, v106, v108);
  uint64_t v110 = (uint64_t)v171;
  outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v171, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v111 = (uint64_t)v176;
  swift_bridgeObjectRetain((_BYTE)v176);
  uint64_t v112 = v110;
  char v113 = v182;
  uint64_t v114 = v181;
  uint64_t v115 = specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v112, v179, (void *)v182, v175, v111, type metadata accessor for MLActivityClassifier.Model, (uint64_t (*)(void, uint64_t))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:), (uint64_t (*)(uint64_t, void, void))specialized Adam.getStatesDictionary(for:name:), (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply);
  uint64_t v181 = v114;
  if (!v114)
  {
    uint64_t v180 = v115;
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v113);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v171, type metadata accessor for MLActivityClassifier.Model);
    (*(void (**)(unsigned char *, uint64_t))(v170 + 8))(v109, v108);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease_n(v111, 2, v116, v117, v118);
  swift_bridgeObjectRelease(v113);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v171, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v123 = v109;
  uint64_t v124 = v108;
  uint64_t v125 = v170;
LABEL_63:
  (*(void (**)(unsigned char *, uint64_t))(v125 + 8))(v123, v124);
  uint64_t v119 = v184;
  __swift_destroy_boxed_opaque_existential_1Tm(v138);
  swift_bridgeObjectRelease((_BYTE)v119);
  swift_bridgeObjectRelease(v169);
  __swift_destroy_boxed_opaque_existential_1Tm(&v159);
  return v119;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  int64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned char *v45;
  uint64_t v46;
  unsigned char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned char *v55;
  uint64_t v56;
  unsigned char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned char *v67;
  uint64_t v68;
  unsigned char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  int64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char v92;
  unint64_t v93;
  BOOL v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  unsigned char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned char v127[24];
  uint64_t v128;
  long long v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  unint64_t v135;
  void (*v136)(uint64_t *);
  uint64_t v137;
  _OWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void (*v142)(uint64_t *);
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned char *v149;
  unsigned char *v150;
  unsigned char *v151;
  uint64_t v152;
  unsigned char *v153;
  unsigned char *v154;
  uint64_t v155;
  unsigned char *v156;
  unsigned char *v157;
  unsigned char *v158;
  uint64_t v159;
  long long v160[2];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned char *v166;
  uint64_t v167;
  unsigned char *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned char *v171;
  void *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  int64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int64_t v183;
  void *v184;

  uint64_t v181 = v2;
  uint64_t v4 = v3;
  uint64_t v169 = a2;
  uint64_t v175 = a1;
  unint64_t v173 = 0;
  uint64_t v5 = type metadata accessor for LSTM(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v158 = v127;
  uint64_t v10 = alloca(v7);
  int v11 = alloca(v7);
  uint64_t v157 = v127;
  uint64_t v152 = type metadata accessor for Dense(0);
  uint64_t v167 = *(void *)(v152 - 8);
  int64_t v12 = *(void *)(v167 + 64);
  int64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v156 = v127;
  int64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  char v154 = v127;
  uint64_t v148 = type metadata accessor for Conv2D(0);
  uint64_t v165 = *(void *)(v148 - 8);
  int64_t v17 = *(void *)(v165 + 64);
  uint64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  char v153 = v127;
  unint64_t v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  char v149 = v127;
  int64_t v22 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.GraphCNNModel(0) - 8) + 64);
  int64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v171 = v127;
  uint64_t v25 = alloca(v22);
  int64_t v26 = alloca(v22);
  uint64_t v168 = v127;
  uint64_t v27 = alloca(v22);
  uint64_t v28 = alloca(v22);
  uint64_t v166 = v127;
  uint64_t v29 = alloca(v22);
  uint64_t v30 = alloca(v22);
  unint64_t v150 = v127;
  uint64_t v145 = type metadata accessor for BatchNorm(0);
  uint64_t v164 = *(void *)(v145 - 8);
  int64_t v31 = *(void *)(v164 + 64);
  unint64_t v32 = alloca(v31);
  char v33 = alloca(v31);
  BOOL v151 = v127;
  uint64_t v34 = alloca(v31);
  uint64_t v35 = alloca(v31);
  uint64_t v146 = v127;
  uint64_t v176 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  uint64_t v36 = (void *)specialized SGD.getParametersDictionary()();
  unint64_t v144 = *(void *)(v169 + 16);
  uint64_t v174 = OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v4;
  uint64_t v37 = v169;
  swift_bridgeObjectRetain(v169);
  swift_beginAccess(v174, v127, 0, 0);
  uint64_t v147 = v37 + 32;
  uint64_t v155 = v5;
  uint64_t v170 = v6;
  while (1)
  {
    uint64_t v184 = v36;
    if (v173 == v144)
    {
      memset(v138, 0, sizeof(v138));
      unint64_t v173 = v144;
    }
    else
    {
      if (v173 >= v144) {
        BUG();
      }
      unint64_t v38 = v173;
      unint64_t v39 = v173 + 1;
      outlined init with copy of TabularRegressionTask(v147 + 40 * v173, (uint64_t)v160);
      *(void *)&v138[0] = v38;
      outlined init with take of MLIdentifier(v160, (uint64_t)v138 + 8);
      unint64_t v173 = v39;
    }
    outlined init with take of DataFrame?((uint64_t)v138, (uint64_t)&v128, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
    if (!v130)
    {
      swift_bridgeObjectRelease((_BYTE)v176);
      swift_bridgeObjectRelease(v169);
      return v184;
    }
    uint64_t v40 = v128;
    outlined init with take of MLIdentifier(&v129, (uint64_t)v138);
    uint64_t v159 = 0x5F726579616CLL;
    *(void *)&v160[0] = 0xE600000000000000;
    uint64_t v139 = v40;
    v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    LOBYTE(v40) = v41._object;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v40);
    uint64_t v179 = v159;
    unint64_t v182 = *(void *)&v160[0];
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    uint64_t v43 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v42, &protocol witness table for String);
    outlined init with copy of TabularRegressionTask((uint64_t)v138, (uint64_t)&v159);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    unint64_t v45 = v146;
    uint64_t v46 = v145;
    if (!swift_dynamicCast(v146, &v159, v44, v145, 0)) {
      break;
    }
    swift_bridgeObjectRelease(v43);
    uint64_t v47 = v151;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v164 + 32))(v151, v45, v46);
    uint64_t v48 = (uint64_t)v150;
    outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v150, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v49 = (uint64_t)v176;
    swift_bridgeObjectRetain((_BYTE)v176);
    uint64_t v50 = v181;
    uint64_t v51 = specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v48, v179, (void *)v182, v175, v49, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (void (*)(void *, uint64_t *))partial apply for closure #1 in Tensor.doubleArray(), (uint64_t (*)(void))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, specialized SGD.getStatesDictionary(for:name:), (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply);
    uint64_t v181 = v50;
    if (v50)
    {
      swift_bridgeObjectRelease(v182);
      swift_bridgeObjectRelease_n(v49, 2, v120, v121, v122);
      outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      uint64_t v123 = v47;
      uint64_t v124 = v46;
      uint64_t v125 = v164;
      goto LABEL_63;
    }
    uint64_t v180 = v51;
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v49);
    outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v52 = v47;
    uint64_t v53 = v46;
    uint64_t v54 = v164;
LABEL_16:
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v52, v53);
LABEL_17:
    uint64_t v36 = v184;
    __swift_destroy_boxed_opaque_existential_1Tm(&v159);
    LOBYTE(v179) = swift_isUniquelyReferenced_nonNull_native(v36);
    uint64_t v172 = v36;
    char v79 = v180;
    specialized LazyMapSequence.makeIterator()(v180, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0);
    uint64_t v142 = v136;
    uint64_t v162 = v137;
    uint64_t v163 = v131;
    uint64_t v178 = v132;
    int64_t v183 = v134;
    unint64_t v182 = v135;
    uint64_t v143 = v133;
    int64_t v177 = (unint64_t)(v133 + 64) >> 6;
    swift_bridgeObjectRetain(v79);
    while (1)
    {
      if (v182)
      {
        uint64_t v80 = v36;
        _BitScanForward64(&v81, v182);
        v182 &= v182 - 1;
        unint64_t v82 = v81 | (v183 << 6);
        goto LABEL_36;
      }
      int64_t v83 = v183 + 1;
      if (__OFADD__(1, v183)) {
        BUG();
      }
      if (v83 >= v177) {
        goto LABEL_50;
      }
      unint64_t v84 = *(void *)(v178 + 8 * v83);
      if (!v84) {
        break;
      }
LABEL_23:
      int64_t v183 = v83;
LABEL_35:
      _BitScanForward64(&v86, v84);
      uint64_t v80 = v36;
      unint64_t v182 = v84 & (v84 - 1);
      unint64_t v82 = v86 + (v183 << 6);
LABEL_36:
      uint64_t v87 = *(void *)(v163 + 48);
      uint64_t v88 = *(void *)(v87 + 16 * v82 + 8);
      uint64_t v89 = *(void *)(*(void *)(v163 + 56) + 8 * v82);
      uint64_t v159 = *(void *)(v87 + 16 * v82);
      *(void *)&v160[0] = v88;
      *((void *)&v160[0] + 1) = v89;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v89);
      v142(&v159);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v88);
      uint64_t v90 = v140;
      uint64_t v184 = v141;
      uint64_t v161 = v139;
      uint64_t v91 = v80;
      unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v139, v140);
      BOOL v94 = (v92 & 1) == 0;
      BOOL v95 = __OFADD__(v91[2], v94);
      uint64_t v96 = v91[2] + v94;
      if (v95) {
        BUG();
      }
      char v97 = v92;
      if (v91[3] >= v96)
      {
        if ((v179 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v96, v179);
        unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v161, v90);
        if ((v97 & 1) != (v98 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v36 = v172;
      if (v97)
      {
        uint64_t v99 = *(void *)(v172[7] + 8 * v93);
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRelease(v90);
        swift_bridgeObjectRelease((_BYTE)v184);
        uint64_t v100 = v36[7];
        swift_bridgeObjectRelease(*(void *)(v100 + 8 * v93));
        *(void *)(v100 + 8 * v93) = v99;
        LOBYTE(v179) = 1;
      }
      else
      {
        v172[(v93 >> 6) + 8] |= 1 << v93;
        uint64_t v101 = v36[6];
        uint64_t v102 = 16 * v93;
        *(void *)(v101 + v102) = v161;
        *(void *)(v101 + v102 + 8) = v90;
        *(void *)(v36[7] + 8 * v93) = v184;
        uint64_t v103 = v36[2];
        BOOL v95 = __OFADD__(1, v103);
        uint64_t v104 = v103 + 1;
        if (v95) {
          BUG();
        }
        v36[2] = v104;
        LOBYTE(v179) = 1;
      }
    }
    int64_t v85 = v183 + 2;
    if (v183 + 2 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 8);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 3;
    if (v183 + 3 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 16);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 4;
    if (v183 + 4 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 24);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 5;
    if (v183 + 5 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 32);
    if (v84) {
      goto LABEL_34;
    }
    int64_t v85 = v183 + 6;
    if (v183 + 6 >= v177) {
      goto LABEL_50;
    }
    unint64_t v84 = *(void *)(v178 + 8 * v83 + 40);
    if (v84)
    {
LABEL_34:
      int64_t v183 = v85;
      goto LABEL_35;
    }
    int64_t v105 = v183 + 7;
    while (v105 < v177)
    {
      unint64_t v84 = *(void *)(v178 + 8 * v105++);
      if (v84)
      {
        int64_t v83 = v105 - 1;
        goto LABEL_23;
      }
    }
LABEL_50:
    swift_bridgeObjectRelease(v180);
    outlined consume of [String : [Int]].Iterator._Variant(v163);
    swift_bridgeObjectRelease(0);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v138);
  }
  uint64_t v180 = v43;
  uint64_t v55 = v149;
  uint64_t v56 = v148;
  if (swift_dynamicCast(v149, &v159, v44, v148, 0))
  {
    swift_bridgeObjectRelease(v180);
    uint64_t v57 = v153;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v165 + 32))(v153, v55, v56);
    uint64_t v58 = (uint64_t)v166;
    outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v166, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v59 = (uint64_t)v176;
    swift_bridgeObjectRetain((_BYTE)v176);
    uint64_t v60 = v58;
    char v61 = v182;
    uint64_t v62 = v181;
    uint64_t v63 = specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v60, v179, (void *)v182, v175, v59, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(void, uint64_t))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t (*)(unsigned char *, void, void))specialized SGD.getStatesDictionary(for:name:), (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply);
    uint64_t v181 = v62;
    if (v62)
    {
      swift_bridgeObjectRelease_n(v59, 2, v64, v65, v66);
      swift_bridgeObjectRelease(v61);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v166, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      uint64_t v123 = v57;
      uint64_t v124 = v56;
      uint64_t v125 = v165;
      goto LABEL_63;
    }
    uint64_t v180 = v63;
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v61);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v166, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v52 = v57;
    uint64_t v53 = v56;
    uint64_t v54 = v165;
    goto LABEL_16;
  }
  uint64_t v67 = v154;
  uint64_t v68 = v152;
  if (swift_dynamicCast(v154, &v159, v44, v152, 0))
  {
    swift_bridgeObjectRelease(v180);
    uint64_t v69 = v156;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v167 + 32))(v156, v67, v68);
    uint64_t v70 = (uint64_t)v168;
    outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v168, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v71 = (uint64_t)v176;
    swift_bridgeObjectRetain((_BYTE)v176);
    uint64_t v72 = v70;
    char v73 = v182;
    uint64_t v74 = v181;
    uint64_t v75 = specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v72, v179, (void *)v182, v175, v71, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(void, uint64_t))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t (*)(void *, void, void))specialized SGD.getStatesDictionary(for:name:), (void (*)(void *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply);
    uint64_t v181 = v74;
    if (v74)
    {
      swift_bridgeObjectRelease_n(v71, 2, v76, v77, v78);
      swift_bridgeObjectRelease(v73);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v168, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      uint64_t v123 = v69;
      uint64_t v124 = v68;
      uint64_t v125 = v167;
      goto LABEL_63;
    }
    uint64_t v180 = v75;
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v73);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v168, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    uint64_t v52 = v69;
    uint64_t v53 = v68;
    uint64_t v54 = v167;
    goto LABEL_16;
  }
  uint64_t v106 = v157;
  uint64_t v107 = v44;
  uint64_t v108 = v155;
  if (!swift_dynamicCast(v157, &v159, v107, v155, 0))
  {
    swift_bridgeObjectRelease(v182);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease(v180);
  uint64_t v109 = v158;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 32))(v158, v106, v108);
  uint64_t v110 = (uint64_t)v171;
  outlined init with copy of MLTrainingSessionParameters(v174, (uint64_t)v171, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v111 = (uint64_t)v176;
  swift_bridgeObjectRetain((_BYTE)v176);
  uint64_t v112 = v110;
  char v113 = v182;
  uint64_t v114 = v181;
  uint64_t v115 = specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v112, v179, (void *)v182, v175, v111, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t (*)(void, uint64_t))specialized Dictionary.subscript.getter, &lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:), specialized SGD.getStatesDictionary(for:name:), (uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply);
  uint64_t v181 = v114;
  if (!v114)
  {
    uint64_t v180 = v115;
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v113);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v171, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    (*(void (**)(unsigned char *, uint64_t))(v170 + 8))(v109, v108);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease_n(v111, 2, v116, v117, v118);
  swift_bridgeObjectRelease(v113);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v171, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v123 = v109;
  uint64_t v124 = v108;
  uint64_t v125 = v170;
LABEL_63:
  (*(void (**)(unsigned char *, uint64_t))(v125 + 8))(v123, v124);
  uint64_t v119 = v184;
  __swift_destroy_boxed_opaque_existential_1Tm(v138);
  swift_bridgeObjectRelease((_BYTE)v119);
  swift_bridgeObjectRelease(v169);
  __swift_destroy_boxed_opaque_existential_1Tm(&v159);
  return v119;
}

void *specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter()
{
  uint64_t v35 = type metadata accessor for Parameter(0);
  uint64_t v36 = *(void *)(v35 - 8);
  int64_t v1 = *(void *)(v36 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v37 = &v32;
  uint64_t v4 = type metadata accessor for MLActivityClassifier.Model(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = OBJC_IVAR____TtCVV8CreateML20MLActivityClassifier7Trainer14ModelContainer_model + v0;
  swift_beginAccess(v8, v33, 0, 0);
  uint64_t v34 = v8;
  outlined init with copy of MLTrainingSessionParameters(v8, (uint64_t)&v32, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v9 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLActivityClassifier.Model and conformance MLActivityClassifier.Model, type metadata accessor for MLActivityClassifier.Model, (uint64_t)&protocol conformance descriptor for MLActivityClassifier.Model);
  uint64_t v10 = Layer.parameterKeyPaths(recursively:)(1, v4, v9);
  unint64_t v38 = &v32;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v32, type metadata accessor for MLActivityClassifier.Model);
  uint64_t v11 = v10 & 0xFFFFFFFFFFFFF8;
  if ((v10 & 0x4000000000000001) != 0)
  {
    if (v10) {
      uint64_t v11 = v10;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
  }
  int64_t v13 = _swiftEmptyDictionarySingleton;
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v39 = v10;
    uint64_t v40 = v12;
    do
    {
      if ((v10 & 0xC000000000000003) != 0)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v10);
      }
      else
      {
        uint64_t v15 = *(void *)(v10 + 8 * v14 + 32);
        swift_retain();
      }
      BOOL v16 = __OFADD__(1, v14);
      uint64_t v17 = v14 + 1;
      if (v16) {
        BUG();
      }
      uint64_t v41 = v17;
      uint64_t v18 = (uint64_t)v38;
      outlined init with copy of MLTrainingSessionParameters(v34, (uint64_t)v38, type metadata accessor for MLActivityClassifier.Model);
      swift_retain();
      uint64_t v19 = v15;
      unint64_t v20 = v37;
      swift_getAtKeyPath(v18, v19);
      uint64_t v42 = v19;
      swift_release();
      outlined destroy of MLActivityClassifier.ModelParameters(v18, type metadata accessor for MLActivityClassifier.Model);
      LODWORD(v18) = Parameter.id.getter();
      (*(void (**)(uint64_t *, uint64_t))(v36 + 8))(v20, v35);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      uint64_t v43 = v13;
      unsigned int v44 = v18;
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      BOOL v24 = (v22 & 1) == 0;
      BOOL v16 = __OFADD__(v13[2], v24);
      Swift::Int v25 = v13[2] + v24;
      if (v16) {
        BUG();
      }
      char v26 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, WritableKeyPath<MLActivityClassifier.Model, Parameter>>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25))
      {
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
        if ((v26 & 1) != (v27 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt32);
          BUG();
        }
      }
      int64_t v13 = v43;
      if (v26)
      {
        uint64_t v28 = v43[7];
        swift_release();
        *(void *)(v28 + 8 * v23) = v42;
        uint64_t v14 = v41;
      }
      else
      {
        v43[(v23 >> 6) + 8] |= 1 << v23;
        *(_DWORD *)(v13[6] + 4 * v23) = v44;
        *(void *)(v13[7] + 8 * v23) = v42;
        uint64_t v29 = v13[2];
        BOOL v16 = __OFADD__(1, v29);
        uint64_t v30 = v29 + 1;
        uint64_t v14 = v41;
        if (v16) {
          BUG();
        }
        void v13[2] = v30;
      }
      swift_bridgeObjectRelease(0);
      uint64_t v10 = v39;
    }
    while (v14 != v40);
  }
  swift_bridgeObjectRelease(v10);
  return v13;
}

{
  uint64_t v0;
  int64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  int64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  BOOL v24;
  Swift::Int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33[24];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;

  uint64_t v35 = type metadata accessor for Parameter(0);
  uint64_t v36 = *(void *)(v35 - 8);
  int64_t v1 = *(void *)(v36 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v37 = &v32;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model + v0;
  swift_beginAccess(v8, v33, 0, 0);
  uint64_t v34 = v8;
  outlined init with copy of MLTrainingSessionParameters(v8, (uint64_t)&v32, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v9 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v10 = Layer.parameterKeyPaths(recursively:)(1, v4, v9);
  unint64_t v38 = &v32;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v32, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  uint64_t v11 = v10 & 0xFFFFFFFFFFFFF8;
  if ((v10 & 0x4000000000000001) != 0)
  {
    if (v10) {
      uint64_t v11 = v10;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
  }
  int64_t v13 = _swiftEmptyDictionarySingleton;
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v39 = v10;
    uint64_t v40 = v12;
    do
    {
      if ((v10 & 0xC000000000000003) != 0)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v10);
      }
      else
      {
        uint64_t v15 = *(void *)(v10 + 8 * v14 + 32);
        swift_retain();
      }
      BOOL v16 = __OFADD__(1, v14);
      uint64_t v17 = v14 + 1;
      if (v16) {
        BUG();
      }
      uint64_t v41 = v17;
      uint64_t v18 = (uint64_t)v38;
      outlined init with copy of MLTrainingSessionParameters(v34, (uint64_t)v38, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      swift_retain();
      uint64_t v19 = v15;
      unint64_t v20 = v37;
      swift_getAtKeyPath(v18, v19);
      uint64_t v42 = v19;
      swift_release();
      outlined destroy of MLActivityClassifier.ModelParameters(v18, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      LODWORD(v18) = Parameter.id.getter(v18);
      (*(void (**)(uint64_t *, uint64_t))(v36 + 8))(v20, v35);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      uint64_t v43 = v13;
      unsigned int v44 = v18;
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      BOOL v24 = (v22 & 1) == 0;
      BOOL v16 = __OFADD__(v13[2], v24);
      Swift::Int v25 = v13[2] + v24;
      if (v16) {
        BUG();
      }
      char v26 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, WritableKeyPath<MLHandActionClassifier.GraphCNNModel, Parameter>>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25))
      {
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
        if ((v26 & 1) != (v27 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt32);
          BUG();
        }
      }
      int64_t v13 = v43;
      if (v26)
      {
        uint64_t v28 = v43[7];
        swift_release();
        *(void *)(v28 + 8 * v23) = v42;
        uint64_t v14 = v41;
      }
      else
      {
        v43[(v23 >> 6) + 8] |= 1 << v23;
        *(_DWORD *)(v13[6] + 4 * v23) = v44;
        *(void *)(v13[7] + 8 * v23) = v42;
        uint64_t v29 = v13[2];
        BOOL v16 = __OFADD__(1, v29);
        uint64_t v30 = v29 + 1;
        uint64_t v14 = v41;
        if (v16) {
          BUG();
        }
        void v13[2] = v30;
      }
      swift_bridgeObjectRelease(0);
      uint64_t v10 = v39;
    }
    while (v14 != v40);
  }
  swift_bridgeObjectRelease(v10);
  return v13;
}

uint64_t specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(void *, uint64_t *), uint64_t (*a8)(void), uint64_t *a9, uint64_t a10, uint64_t (*a11)(uint64_t *), uint64_t (*a12)(uint64_t, uint64_t, uint64_t), void (*a13)(void *, uint64_t *))
{
  uint64_t v240 = v13;
  uint64_t v227 = v14;
  uint64_t v198 = a5;
  uint64_t v208 = a4;
  v236._uint64_t countAndFlagsBits = a2;
  uint64_t v199 = a1;
  v236._char object = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, state: LayerState));
  uint64_t v212 = *((void *)v236._object - 1);
  int64_t v17 = *(void *)(v212 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v209 = &v180;
  unint64_t v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  uint64_t v218 = &v180;
  char v22 = alloca(v17);
  unint64_t v23 = alloca(v17);
  uint64_t v221 = &v180;
  uint64_t v210 = &v180;
  uint64_t v213 = 0;
  uint64_t v225 = a6;
  uint64_t v211 = a6(0);
  int64_t v24 = *(void *)(*(void *)(v211 - 8) + 64);
  Swift::Int v25 = alloca(v24);
  char v26 = alloca(v24);
  uint64_t v234 = &v180;
  uint64_t v214 = type metadata accessor for TensorShape(0);
  uint64_t v200 = *(void *)(v214 - 8);
  int64_t v27 = *(void *)(v200 + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  uint64_t v216 = &v180;
  uint64_t v30 = alloca(v27);
  int64_t v31 = alloca(v27);
  uint64_t v201 = &v180;
  uint64_t v215 = type metadata accessor for Tensor(0);
  uint64_t v202 = *(void *)(v215 - 8);
  int64_t v32 = *(void *)(v202 + 64);
  char v33 = alloca(v32);
  uint64_t v34 = alloca(v32);
  uint64_t v217 = &v180;
  uint64_t v35 = alloca(v32);
  uint64_t v36 = alloca(v32);
  uint64_t v203 = &v180;
  uint64_t v237 = type metadata accessor for Parameter(0);
  unint64_t v231 = *(void **)(v237 - 8);
  int64_t v37 = v231[8];
  unint64_t v38 = alloca(v37);
  uint64_t v39 = alloca(v37);
  uint64_t v220 = &v180;
  uint64_t v40 = alloca(v37);
  uint64_t v41 = alloca(v37);
  uint64_t v232 = &v180;
  uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, parameter: Parameter));
  uint64_t v246 = *(void *)(v233 - 8);
  int64_t v42 = *(void *)(v246 + 64);
  uint64_t v43 = alloca(v42);
  unsigned int v44 = alloca(v42);
  uint64_t v204 = &v180;
  unint64_t v45 = alloca(v42);
  uint64_t v46 = alloca(v42);
  uint64_t v223 = &v180;
  uint64_t v47 = alloca(v42);
  uint64_t v48 = alloca(v42);
  uint64_t v219 = &v180;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject(v49, v181);
  *(void *)(inited + 16) = 1;
  *(void *)(inited + 24) = 2;
  *(void *)&unsigned long long v241 = a2;
  unint64_t v235 = a3;
  *((void *)&v241 + 1) = a3;
  swift_bridgeObjectRetain((_BYTE)a3);
  v51._uint64_t countAndFlagsBits = 0x75746E656D6F6D2ELL;
  v51._char object = (void *)0xE90000000000006DLL;
  String.append(_:)(v51);
  *(_OWORD *)(inited + 32) = v241;
  v238[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v52 = swift_allocObject(v238[1], 40, 7);
  *(void *)(v52 + 16) = 1;
  *(void *)(v52 + 24) = 2;
  *(double *)(v52 + 32) = BatchNorm.momentum.getter();
  *(void *)(inited + 48) = v52;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v244 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v53, &protocol witness table for String);
  *(void *)&unsigned long long v241 = v236._countAndFlagsBits;
  *((void *)&v241 + 1) = v235;
  swift_bridgeObjectRetain((_BYTE)v235);
  v51._uint64_t countAndFlagsBits = 0x6E6F6C697370652ELL;
  v51._char object = (void *)0xE800000000000000;
  String.append(_:)(v51);
  uint64_t v54 = *((void *)&v241 + 1);
  uint64_t v245 = (void (**)(void, void, void))v241;
  uint64_t v55 = swift_allocObject(v238[1], 40, 7);
  *(void *)(v55 + 16) = 1;
  *(void *)(v55 + 24) = 2;
  *(double *)(v55 + 32) = BatchNorm.epsilon.getter();
  uint64_t v56 = v244;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v244);
  *(void *)&unsigned long long v241 = v56;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, (uint64_t)v245, v54, isUniquelyReferenced_nonNull_native);
  v238[1] = v241;
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, parameter: Parameter)>);
  uint64_t v59 = *(void *)(v246 + 72);
  uint64_t v60 = *(unsigned __int8 *)(v246 + 80);
  uint64_t v61 = ((int)v60 + 32) & ~*(unsigned __int8 *)(v246 + 80);
  uint64_t v62 = swift_allocObject(v58, v61 + 2 * v59, v60 | 7);
  *(void *)(v62 + 16) = 2;
  *(void *)(v62 + 24) = 4;
  uint64_t v63 = v62 + v61;
  *(void *)(v62 + v61) = 0x74657366666FLL;
  uint64_t v226 = v62;
  *(void *)(v62 + v61 + 8) = 0xE600000000000000;
  BatchNorm.$offset.getter();
  uint64_t v64 = v233;
  *(void *)(v59 + v63) = 0x656C616373;
  uint64_t v205 = v59;
  uint64_t v206 = v63;
  *(void *)(v59 + v63 + 8) = 0xE500000000000000;
  BatchNorm.$scale.getter();
  uint64_t v65 = (void *)v238[1];
  uint64_t v207 = (char *)v219 + *(int *)(v64 + 48);
  unint64_t v66 = 0;
  do
  {
    if (v66 >= *(void *)(v226 + 16)) {
      BUG();
    }
    uint64_t v67 = v219;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v206 + v205 * v66, (uint64_t)v219, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
    uint64_t v68 = (uint64_t)v223;
    char v247 = (uint64_t *)((char *)v223 + *(int *)(v233 + 48));
    uint64_t v69 = v247;
    uint64_t v70 = *v67;
    uint64_t v71 = (void (**)(void, void, void))v67[1];
    *uint64_t v223 = v70;
    *(void *)(v68 + 8) = v71;
    int64_t v248 = v231[4];
    uint64_t v72 = v237;
    ((void (*)(uint64_t *, char *))v248)(v69, v207);
    *(void *)&unsigned long long v241 = v236._countAndFlagsBits;
    *((void *)&v241 + 1) = v235;
    swift_bridgeObjectRetain((_BYTE)v235);
    swift_bridgeObjectRetain((_BYTE)v71);
    v73._uint64_t countAndFlagsBits = 46;
    v73._char object = (void *)0xE100000000000000;
    v238[1] = v65;
    String.append(_:)(v73);
    v238[0] = v70;
    v73._uint64_t countAndFlagsBits = v70;
    uint64_t v245 = v71;
    v73._char object = v71;
    String.append(_:)(v73);
    uint64_t v74 = *((void *)&v241 + 1);
    unsigned long long v75 = v241;
    uint64_t v246 = v75 >> 64;
    uint64_t v244 = v75;
    uint64_t v76 = (char *)v204 + *(int *)(v233 + 48);
    v73._char object = v247;
    char v247 = (uint64_t *)v231[2];
    ((void (*)(char *, void *, uint64_t))v247)(v76, v73._object, v72);
    v73._uint64_t countAndFlagsBits = (uint64_t)v232;
    ((void (*)(uint64_t *, char *, uint64_t))v248)(v232, v76, v72);
    LODWORD(v248) = Parameter.id.getter(v73._countAndFlagsBits);
    swift_bridgeObjectRetain(v74);
    uint64_t v77 = v203;
    Parameter.value.getter(v74);
    uint64_t v78 = v201;
    Tensor.shape.getter();
    uint64_t v79 = TensorShape.contiguousSize.getter();
    uint64_t v196 = *(void (**)(uint64_t *, uint64_t))(v200 + 8);
    v196(v78, v214);
    uint64_t v80 = alloca(24);
    unint64_t v81 = alloca(32);
    unint64_t v182 = v77;
    uint64_t v82 = v240;
    uint64_t v83 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v79, a7, (uint64_t)&v180);
    uint64_t v240 = v82;
    uint64_t v197 = *(void (**)(uint64_t *, uint64_t))(v202 + 8);
    v197(v77, v215);
    uint64_t v84 = v238[1];
    char v85 = swift_isUniquelyReferenced_nonNull_native(v238[1]);
    *(void *)&unsigned long long v241 = v84;
    LOBYTE(v84) = v246;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v83, v244, v246, v85);
    uint64_t v86 = v241;
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(0);
    if (v198) {
      uint64_t v87 = a8(v248);
    }
    else {
      uint64_t v87 = 0;
    }
    uint64_t v88 = v225;
    uint64_t v89 = v220;
    v238[1] = v86;
    outlined init with copy of MLTrainingSessionParameters(v199, (uint64_t)v234, v225);
    uint64_t v90 = v237;
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v247)(v89, v232, v237);
    if (v87)
    {
      uint64_t v230 = v87;
      uint64_t v224 = (void (*)(uint64_t *, uint64_t))v231[1];
      v224(v89, v90);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v234, v88);
    }
    else
    {
      uint64_t v91 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, v88, a10);
      uint64_t v92 = (uint64_t)v234;
      uint64_t v93 = Layer.parameterKeyPaths(recursively:)(1, v211, v91);
      char v247 = &v180;
      BOOL v94 = alloca(32);
      BOOL v95 = alloca(32);
      unint64_t v182 = (void *)v92;
      int64_t v183 = v89;
      uint64_t v96 = v240;
      uint64_t v230 = specialized Sequence.first(where:)(a11, (uint64_t)&v180, v93);
      swift_bridgeObjectRelease(v93);
      uint64_t v224 = (void (*)(uint64_t *, uint64_t))v231[1];
      v224(v89, v237);
      outlined destroy of MLActivityClassifier.ModelParameters(v92, v225);
      if (!v230)
      {
        swift_bridgeObjectRelease(v238[1]);
        swift_bridgeObjectRelease(v226);
        swift_bridgeObjectRelease(v246);
        *(void *)&unsigned long long v241 = 0;
        *((void *)&v241 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v174._char object = "zed in the observation" + 0x8000000000000000;
        v174._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v174);
        v174._uint64_t countAndFlagsBits = v236._countAndFlagsBits;
        v174._char object = v235;
        String.append(_:)(v174);
        v174._uint64_t countAndFlagsBits = 0x697373696D202C60;
        v174._char object = (void *)0xEC0000006020676ELL;
        String.append(_:)(v174);
        v174._uint64_t countAndFlagsBits = v238[0];
        char v175 = (char)v245;
        v174._char object = v245;
        String.append(_:)(v174);
        swift_bridgeObjectRelease(v175);
        v174._uint64_t countAndFlagsBits = 0x61702079656B2060;
        v174._char object = (void *)0xEB000000002E6874;
        String.append(_:)(v174);
        *(_OWORD *)&v238[1] = v241;
        v174._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v174._object, 0, 0);
        *(_OWORD *)uint64_t v176 = *(_OWORD *)&v238[1];
        *(_OWORD *)(v176 + 16) = 0;
        *(_OWORD *)(v176 + 32) = 0;
        *(unsigned char *)(v176 + 48) = 2;
        swift_willThrow(&type metadata for MLCreateError, v174._object, v176, v177, v178, v179);
        v224(v232, v237);
        return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v223, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
      }
      uint64_t v240 = v96;
    }
    swift_bridgeObjectRelease((_BYTE)v245);
    char v97 = v246;
    uint64_t v98 = a12(v230, v244, v246);
    swift_bridgeObjectRelease(v97);
    uint64_t v65 = (void *)v238[1];
    char v99 = swift_isUniquelyReferenced_nonNull_native(v238[1]);
    Swift::String v228 = v65;
    specialized LazyMapSequence.makeIterator()(v98, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0);
    uint64_t v222 = (void (*)(unsigned long long *))v189;
    v238[0] = v190;
    uint64_t v229 = v184;
    uint64_t v243 = v185;
    int64_t v248 = (int64_t)v187;
    unint64_t v100 = v188;
    uint64_t v195 = v186;
    int64_t v239 = (unint64_t)(v186 + 64) >> 6;
    uint64_t v194 = v98;
    swift_bridgeObjectRetain(v98);
    while (1)
    {
      v238[1] = v65;
      LOBYTE(v246) = v99;
      if (v100)
      {
        _BitScanForward64(&v101, v100);
        char v247 = (uint64_t *)((v100 - 1) & v100);
        unint64_t v102 = v101 | (v248 << 6);
        goto LABEL_31;
      }
      int64_t v103 = v248 + 1;
      if (__OFADD__(1, v248)) {
        BUG();
      }
      if (v103 >= v239) {
        goto LABEL_46;
      }
      unint64_t v104 = *(void *)(v243 + 8 * v103);
      if (!v104) {
        break;
      }
LABEL_16:
      int64_t v248 = v103;
LABEL_30:
      _BitScanForward64(&v106, v104);
      char v247 = (uint64_t *)(v104 & (v104 - 1));
      unint64_t v102 = v106 + (v248 << 6);
LABEL_31:
      uint64_t v107 = *(void *)(v229 + 48);
      uint64_t v108 = *(void *)(v107 + 16 * v102 + 8);
      uint64_t v109 = *(void *)(*(void *)(v229 + 56) + 8 * v102);
      *(void *)&unsigned long long v241 = *(void *)(v107 + 16 * v102);
      *((void *)&v241 + 1) = v108;
      uint64_t v242 = v109;
      swift_bridgeObjectRetain(v108);
      swift_bridgeObjectRetain(v109);
      v222(&v241);
      swift_bridgeObjectRelease(v109);
      swift_bridgeObjectRelease(v108);
      uint64_t v110 = v192;
      uint64_t v244 = v193;
      uint64_t v245 = v191;
      uint64_t v111 = v238[1];
      unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v191, v192);
      BOOL v114 = (v112 & 1) == 0;
      BOOL v115 = __OFADD__(*(void *)(v111 + 16), v114);
      uint64_t v116 = *(void *)(v111 + 16) + v114;
      if (v115) {
        BUG();
      }
      char v117 = v112;
      if (*(void *)(v111 + 24) >= v116)
      {
        if ((v246 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v116, v246);
        unint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v245, v110);
        if ((v117 & 1) != (v118 & 1))
        {
LABEL_73:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      uint64_t v65 = v228;
      if (v117)
      {
        uint64_t v119 = *(void *)(v228[7] + 8 * v113);
        swift_bridgeObjectRetain(v119);
        swift_bridgeObjectRelease(v110);
        swift_bridgeObjectRelease(v244);
        uint64_t v120 = v65[7];
        swift_bridgeObjectRelease(*(void *)(v120 + 8 * v113));
        *(void *)(v120 + 8 * v113) = v119;
      }
      else
      {
        v228[(v113 >> 6) + 8] |= 1 << v113;
        uint64_t v121 = v65[6];
        uint64_t v122 = 16 * v113;
        *(void *)(v121 + v122) = v245;
        *(void *)(v121 + v122 + 8) = v110;
        *(void *)(v65[7] + 8 * v113) = v244;
        uint64_t v123 = v65[2];
        BOOL v115 = __OFADD__(1, v123);
        uint64_t v124 = v123 + 1;
        if (v115) {
          BUG();
        }
        v65[2] = v124;
      }
      char v99 = 1;
      unint64_t v100 = (unint64_t)v247;
    }
    int64_t v105 = (char *)(v248 + 2);
    if (v248 + 2 >= v239) {
      goto LABEL_46;
    }
    unint64_t v104 = *(void *)(v243 + 8 * v103 + 8);
    if (v104) {
      goto LABEL_29;
    }
    int64_t v105 = (char *)(v248 + 3);
    if (v248 + 3 >= v239) {
      goto LABEL_46;
    }
    unint64_t v104 = *(void *)(v243 + 8 * v103 + 16);
    if (v104) {
      goto LABEL_29;
    }
    int64_t v105 = (char *)(v248 + 4);
    if (v248 + 4 >= v239) {
      goto LABEL_46;
    }
    unint64_t v104 = *(void *)(v243 + 8 * v103 + 24);
    if (v104) {
      goto LABEL_29;
    }
    int64_t v105 = (char *)(v248 + 5);
    if (v248 + 5 >= v239) {
      goto LABEL_46;
    }
    unint64_t v104 = *(void *)(v243 + 8 * v103 + 32);
    if (v104) {
      goto LABEL_29;
    }
    int64_t v105 = (char *)(v248 + 6);
    if (v248 + 6 >= v239) {
      goto LABEL_46;
    }
    unint64_t v104 = *(void *)(v243 + 8 * v103 + 40);
    if (v104) {
      goto LABEL_29;
    }
    int64_t v105 = (char *)(v248 + 7);
    if (v248 + 7 >= v239) {
      goto LABEL_46;
    }
    unint64_t v104 = *(void *)(v243 + 8 * v103 + 48);
    if (v104)
    {
LABEL_29:
      int64_t v248 = (int64_t)v105;
      goto LABEL_30;
    }
    int64_t v125 = v248 + 8;
    while (v125 < v239)
    {
      unint64_t v104 = *(void *)(v243 + 8 * v125++);
      if (v104)
      {
        int64_t v103 = v125 - 1;
        goto LABEL_16;
      }
    }
LABEL_46:
    swift_bridgeObjectRelease(v194);
    outlined consume of [String : [Int]].Iterator._Variant(v229);
    swift_release();
    swift_bridgeObjectRelease(0);
    swift_release();
    v224(v232, v237);
    uint64_t v126 = outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v223, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
    unint64_t v66 = 1;
    BOOL v127 = (v213 & 1) == 0;
    LOBYTE(v126) = 1;
    uint64_t v213 = v126;
  }
  while (v127);
  swift_setDeallocating(v226);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, state: LayerState)>);
  uint64_t v129 = *(void *)(v212 + 72);
  uint64_t v130 = *(unsigned __int8 *)(v212 + 80);
  uint64_t v131 = ((int)v130 + 32) & ~*(unsigned __int8 *)(v212 + 80);
  uint64_t v132 = swift_allocObject(v128, v131 + 2 * v129, v130 | 7);
  *(void *)(v132 + 16) = 2;
  *(void *)(v132 + 24) = 4;
  uint64_t v133 = (void (*)(void))(v132 + v131);
  *(void *)(v132 + v131) = 0x4D676E696E6E7572;
  v238[0] = v132;
  *(void *)(v132 + v131 + 8) = 0xEB000000006E6165;
  BatchNorm.$runningMean.getter();
  char object = (int *)v236._object;
  *(void *)((char *)v133 + v129) = 0x56676E696E6E7572;
  uint64_t v229 = v129;
  uint64_t v222 = (void (*)(unsigned long long *))v133;
  *(void *)((char *)v133 + v129 + 8) = 0xEF65636E61697261;
  BatchNorm.$runningVariance.getter();
  unint64_t v135 = (void *)v238[1];
  uint64_t v221 = (uint64_t *)((char *)v221 + object[12]);
  unint64_t v136 = 0;
  unint64_t v137 = 0;
  do
  {
    if (v137 >= *(void *)(v238[0] + 16)) {
      BUG();
    }
    int64_t v248 = (int64_t)v136;
    v238[1] = v135;
    unint64_t v138 = v210;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v222 + v229 * v137, (uint64_t)v210, &demangling cache variable for type metadata for (name: String, state: LayerState));
    uint64_t v139 = (uint64_t)v218;
    uint64_t v140 = (char *)v218 + *((int *)v236._object + 12);
    uint64_t v141 = *v138;
    uint64_t v142 = (void *)v138[1];
    uint64_t *v218 = *v138;
    uint64_t v143 = v141;
    *(void *)(v139 + 8) = v142;
    char v247 = (uint64_t *)type metadata accessor for LayerState(0);
    uint64_t v245 = (void (**)(void, void, void))*(v247 - 1);
    ((void (**)(char *, uint64_t *, uint64_t *))v245)[4](v140, v221, v247);
    *(void *)&unsigned long long v241 = v236._countAndFlagsBits;
    *((void *)&v241 + 1) = v235;
    swift_bridgeObjectRetain((_BYTE)v235);
    swift_bridgeObjectRetain((_BYTE)v142);
    v144._uint64_t countAndFlagsBits = 46;
    v144._char object = (void *)0xE100000000000000;
    String.append(_:)(v144);
    v144._uint64_t countAndFlagsBits = v143;
    v144._char object = v142;
    String.append(_:)(v144);
    uint64_t v246 = *((void *)&v241 + 1);
    uint64_t v244 = v241;
    uint64_t v145 = v209;
    uint64_t v146 = (char *)v209 + *((int *)v236._object + 12);
    *uint64_t v209 = v143;
    v145[1] = (uint64_t)v142;
    v144._char object = v140;
    uint64_t v147 = v247;
    uint64_t v148 = v245;
    ((void (**)(char *, void *, uint64_t *))v245)[2](v146, v144._object, v247);
    swift_bridgeObjectRelease((_BYTE)v142);
    LayerState.value.getter(v142);
    ((void (*)(char *, uint64_t *))v148[1])(v146, v147);
    Tensor.shape.getter();
    uint64_t v149 = TensorShape.dimensions.getter();
    uint64_t v150 = *(void *)(v149 + 16);
    if (v150)
    {
      uint64_t v151 = 0;
      uint64_t v152 = 1;
      uint64_t v153 = v240;
      do
      {
        unint64_t v154 = v152;
        v152 *= *(void *)(v149 + 8 * v151 + 32);
        if (!is_mul_ok(*(void *)(v149 + 8 * v151 + 32), v154)) {
          BUG();
        }
        ++v151;
      }
      while (v150 != v151);
    }
    else
    {
      uint64_t v152 = 1;
      uint64_t v153 = v240;
    }
    swift_bridgeObjectRelease(v149);
    v196(v216, v214);
    uint64_t v155 = alloca(24);
    uint64_t v156 = alloca(32);
    uint64_t v157 = v217;
    unint64_t v182 = v217;
    uint64_t v245 = (void (**)(void, void, void))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v152, a13, (uint64_t)&v180);
    uint64_t v240 = v153;
    v197(v157, v215);
    uint64_t v158 = v238[1];
    char v159 = swift_isUniquelyReferenced_nonNull_native(v238[1]);
    *(void *)&unsigned long long v241 = v158;
    unint64_t v160 = specialized __RawDictionaryStorage.find<A>(_:)(v244, v246);
    LOBYTE(v247) = v161;
    BOOL v162 = (v161 & 1) == 0;
    BOOL v115 = __OFADD__(*(void *)(v158 + 16), v162);
    Swift::Int v163 = *(void *)(v158 + 16) + v162;
    if (v115) {
      BUG();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
    Swift::Bool v164 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v159, v163);
    char v165 = (char)v247;
    if (v164)
    {
      unint64_t v160 = specialized __RawDictionaryStorage.find<A>(_:)(v244, v246);
      if ((v165 & 1) != (v166 & 1)) {
        goto LABEL_73;
      }
    }
    unint64_t v135 = (void *)v241;
    if (v165)
    {
      uint64_t v167 = *(void *)(v241 + 56);
      swift_bridgeObjectRelease(*(void *)(v167 + 8 * v160));
      *(void *)(v167 + 8 * v160) = v245;
      char v168 = v246;
    }
    else
    {
      *(void *)(v241 + 8 * (v160 >> 6) + 64) |= 1 << v160;
      uint64_t v169 = v135[6];
      uint64_t v170 = 16 * v160;
      *(void *)(v169 + v170) = v244;
      char v168 = v246;
      *(void *)(v169 + v170 + 8) = v246;
      *(void *)(v135[7] + 8 * v160) = v245;
      uint64_t v171 = v135[2];
      BOOL v115 = __OFADD__(1, v171);
      uint64_t v172 = v171 + 1;
      if (v115) {
        BUG();
      }
      v135[2] = v172;
      swift_bridgeObjectRetain(v168);
    }
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(0);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v218, &demangling cache variable for type metadata for (name: String, state: LayerState));
    unint64_t v137 = 1;
    LOBYTE(v136) = 1;
  }
  while ((v248 & 1) == 0);
  swift_setDeallocating(v238[0]);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return (uint64_t)v135;
}

uint64_t specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(void *, uint64_t *), uint64_t (*a8)(void, uint64_t), uint64_t *a9, uint64_t a10, uint64_t (*a11)(uint64_t *), uint64_t (*a12)(void *, void, void), void (*a13)(void *, uint64_t *), uint64_t (*a14)(uint64_t *))
{
  *(void *)&long long v216 = v14;
  uint64_t v215 = v15;
  uint64_t v196 = a5;
  uint64_t v193 = a4;
  uint64_t v213 = a3;
  v210._uint64_t countAndFlagsBits = a2;
  uint64_t v190 = a1;
  int64_t v17 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?)
                              - 8)
                  + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v185 = v180;
  uint64_t v212 = type metadata accessor for Dense(0);
  uint64_t v191 = *(void *)(v212 - 8);
  int64_t v20 = *(void *)(v191 + 64);
  Swift::String v21 = alloca(v20);
  char v22 = alloca(v20);
  uint64_t v192 = v180;
  v210._char object = a6;
  uint64_t v195 = ((uint64_t (*)(void))a6)(0);
  int64_t v23 = *(void *)(*(void *)(v195 - 8) + 64);
  int64_t v24 = alloca(v23);
  Swift::Int v25 = alloca(v23);
  uint64_t v197 = v180;
  char v26 = alloca(v23);
  int64_t v27 = alloca(v23);
  uint64_t v204 = v180;
  uint64_t v211 = type metadata accessor for Parameter(0);
  uint64_t v201 = *(void *)(v211 - 8);
  int64_t v28 = *(void *)(v201 + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  uint64_t v198 = v180;
  int64_t v31 = alloca(v28);
  int64_t v32 = alloca(v28);
  uint64_t v206 = v180;
  char v33 = alloca(v28);
  uint64_t v34 = alloca(v28);
  uint64_t v194 = v180;
  uint64_t v217 = type metadata accessor for TensorShape(0);
  uint64_t v205 = *(void (**)(uint64_t, uint64_t))(v217 - 8);
  int64_t v35 = *((void *)v205 + 8);
  uint64_t v36 = alloca(v35);
  int64_t v37 = alloca(v35);
  uint64_t v199 = v180;
  unint64_t v38 = alloca(v35);
  uint64_t v39 = alloca(v35);
  uint64_t v218 = v180;
  uint64_t v40 = alloca(v35);
  uint64_t v41 = alloca(v35);
  uint64_t v203 = type metadata accessor for Tensor(0);
  uint64_t v214 = *(void **)(v203 - 8);
  int64_t v42 = v214[8];
  uint64_t v43 = alloca(v42);
  unsigned int v44 = alloca(v42);
  uint64_t v208 = v180;
  unint64_t v45 = alloca(v42);
  uint64_t v46 = alloca(v42);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject(v47, v180);
  *(void *)(inited + 16) = 2;
  *(void *)(inited + 24) = 4;
  *(void *)&v202[0] = a2;
  *((void *)&v202[0] + 1) = v213;
  swift_bridgeObjectRetain((_BYTE)v213);
  v49._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v49._char object = (void *)0xE700000000000000;
  String.append(_:)(v49);
  *(_OWORD *)(inited + 32) = v202[0];
  Dense.weight.getter();
  Tensor.shape.getter();
  uint64_t v50 = TensorShape.contiguousSize.getter();
  Swift::String v51 = (void (*)(uint64_t, uint64_t))*((void *)v205 + 1);
  uint64_t v187 = v180;
  uint64_t v205 = v51;
  v51((uint64_t)v180, v217);
  uint64_t v184 = v180;
  uint64_t v52 = v216;
  uint64_t v53 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v50, a7, (uint64_t)v183);
  uint64_t v207 = v52;
  uint64_t v54 = (void (*)(unsigned char *, uint64_t))v214[1];
  uint64_t v186 = v180;
  v54(v180, v203);
  *(void *)(inited + 48) = v53;
  *(void *)&v202[0] = v210._countAndFlagsBits;
  *((void *)&v202[0] + 1) = v213;
  swift_bridgeObjectRetain((_BYTE)v213);
  v49._uint64_t countAndFlagsBits = 0x2E7468676965772ELL;
  v49._char object = (void *)0xED00006570616873;
  String.append(_:)(v49);
  uint64_t v214 = (void *)inited;
  *(_OWORD *)(inited + 56) = v202[0];
  uint64_t v55 = (uint64_t)v208;
  Dense.weight.getter();
  Tensor.shape.getter();
  v49._uint64_t countAndFlagsBits = v55;
  uint64_t v56 = v217;
  unint64_t v188 = v54;
  v54(v49._countAndFlagsBits, v203);
  uint64_t v57 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))&type metadata accessor for TensorShape, (uint64_t)&protocol conformance descriptor for TensorShape);
  uint64_t v58 = dispatch thunk of Collection.count.getter(v56, v57);
  uint64_t v208 = (unsigned char *)v57;
  if (v58)
  {
    uint64_t v209 = _swiftEmptyArrayStorage;
    int64_t v59 = 0;
    if (v58 > 0) {
      int64_t v59 = v58;
    }
    uint64_t v60 = v58;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
    *(void *)&long long v216 = v209;
    dispatch thunk of Collection.startIndex.getter(v56, v57);
    if (v60 < 0) {
      BUG();
    }
    uint64_t v61 = v60;
    uint64_t v62 = (void *)v216;
    uint64_t v63 = v217;
    do
    {
      *(void *)&long long v216 = v61;
      uint64_t v64 = v63;
      uint64_t v65 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v202, v200, v63, v57);
      uint64_t v67 = *v66;
      v65(v202, 0);
      uint64_t v209 = v62;
      uint64_t v68 = (unsigned char *)v57;
      uint64_t v69 = v64;
      unint64_t v70 = v62[2];
      unint64_t v71 = v62[3];
      int64_t v72 = v70 + 1;
      if (v71 >> 1 <= v70)
      {
        uint64_t v189 = v67;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 >= 2, v72, 1);
        LODWORD(v67) = v189;
        uint64_t v68 = v208;
        uint64_t v62 = v209;
      }
      v62[2] = v72;
      *(double *)&v62[v70 + 4] = (double)(int)v67;
      uint64_t v73 = (uint64_t)v218;
      uint64_t v74 = v69;
      uint64_t v57 = (uint64_t)v68;
      dispatch thunk of Collection.formIndex(after:)(v200, v74, v68);
      uint64_t v61 = v216 - 1;
      uint64_t v63 = v217;
    }
    while ((void)v216 != 1);
    uint64_t v75 = v73;
    uint64_t v76 = v62;
  }
  else
  {
    uint64_t v76 = _swiftEmptyArrayStorage;
    uint64_t v75 = (uint64_t)v218;
    uint64_t v63 = v56;
  }
  v205(v75, v63);
  uint64_t v77 = v214;
  v214[9] = v76;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  *(void *)&long long v216 = Dictionary.init(dictionaryLiteral:)(v77, &type metadata for String, v78, &protocol witness table for String);
  char object = (uint64_t (*)(uint64_t))v210._object;
  uint64_t v81 = v215;
  uint64_t v82 = v192;
  if (v196)
  {
    uint64_t v83 = v194;
    Dense.$weight.getter(v77, &type metadata for String, v79, v210._object);
    unsigned int v84 = Parameter.id.getter(v77);
    uint64_t v81 = v215;
    unsigned int v85 = v84;
    (*(void (**)(unsigned char *, uint64_t))(v201 + 8))(v83, v211);
    uint64_t v86 = a8(v85, v196);
    char object = (uint64_t (*)(uint64_t))v210._object;
    uint64_t v87 = (void *)v86;
  }
  else
  {
    uint64_t v87 = 0;
  }
  uint64_t v88 = object;
  outlined init with copy of MLTrainingSessionParameters(v190, (uint64_t)v204, object);
  uint64_t v89 = v81;
  uint64_t v90 = v191;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v191 + 16))(v82, v89, v212);
  if (v87)
  {
    uint64_t v214 = v87;
    (*(void (**)(unsigned char *, uint64_t))(v90 + 8))(v82, v212);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v204, v88);
  }
  else
  {
    uint64_t v93 = v194;
    Dense.$weight.getter(v82, v89, v91, v92);
    uint64_t v94 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, v88, a10);
    uint64_t v95 = (uint64_t)v204;
    uint64_t v96 = Layer.parameterKeyPaths(recursively:)(1, v195, v94);
    uint64_t v218 = v180;
    char v97 = alloca(32);
    uint64_t v98 = alloca(32);
    uint64_t v181 = v95;
    unint64_t v182 = v93;
    uint64_t v99 = v207;
    uint64_t v100 = specialized Sequence.first(where:)(a11, (uint64_t)v180, v96);
    uint64_t v207 = v99;
    swift_bridgeObjectRelease(v96);
    (*(void (**)(unsigned char *, uint64_t))(v201 + 8))(v93, v211);
    (*(void (**)(unsigned char *, uint64_t))(v191 + 8))(v192, v212);
    outlined destroy of MLActivityClassifier.ModelParameters(v95, (uint64_t (*)(void))v210._object);
    if (!v100)
    {
      swift_bridgeObjectRelease(v216);
      *(void *)&v202[0] = 0;
      *((void *)&v202[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v169._char object = "zed in the observation" + 0x8000000000000000;
      v169._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v169);
      v169._uint64_t countAndFlagsBits = v210._countAndFlagsBits;
      v169._char object = v213;
      String.append(_:)(v169);
      v169._char object = ".optimizer.velocity.shape" + 0x8000000000000000;
      v169._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v169);
      long long v216 = v202[0];
      v169._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v169._object, 0, 0);
      *(_OWORD *)uint64_t v170 = v216;
      *(_OWORD *)(v170 + 16) = 0;
      *(_OWORD *)(v170 + 32) = 0;
      *(unsigned char *)(v170 + 48) = 2;
      swift_willThrow(&type metadata for MLCreateError, v169._object, v170, v171, v172, v173);
      return v95;
    }
    uint64_t v214 = (void *)v100;
  }
  uint64_t v101 = v216;
  *(void *)&v202[0] = v210._countAndFlagsBits;
  *((void *)&v202[0] + 1) = v213;
  swift_bridgeObjectRetain((_BYTE)v213);
  v102._uint64_t countAndFlagsBits = 0x7468676965772ELL;
  v102._char object = (void *)0xE700000000000000;
  String.append(_:)(v102);
  char v103 = BYTE8(v202[0]);
  uint64_t v104 = a12(v214, *(void *)&v202[0], *((void *)&v202[0] + 1));
  swift_bridgeObjectRelease(v103);
  unsigned __int8 isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v101);
  *(void *)&v202[0] = v101;
  uint64_t v106 = v207;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v104, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, v202);
  if (v106) {
    goto LABEL_44;
  }
  uint64_t v95 = *(void *)&v202[0];
  swift_bridgeObjectRelease(0);
  uint64_t v107 = v185;
  Dense.$bias.getter();
  uint64_t v108 = (uint64_t)v107;
  uint64_t v109 = (uint64_t)v107;
  uint64_t v110 = v211;
  if (__swift_getEnumTagSinglePayload(v109, 1, v211) != 1)
  {
    *(void *)&long long v216 = v95;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v201 + 32))(v206, v108, v110);
    *(void *)&v202[0] = v210._countAndFlagsBits;
    *((void *)&v202[0] + 1) = v213;
    swift_bridgeObjectRetain((_BYTE)v213);
    v111._uint64_t countAndFlagsBits = 0x736169622ELL;
    v111._char object = (void *)0xE500000000000000;
    String.append(_:)(v111);
    uint64_t v215 = *((void *)&v202[0] + 1);
    uint64_t v218 = *(unsigned char **)&v202[0];
    char v112 = v186;
    Parameter.value.getter(0x736169622ELL);
    unint64_t v113 = v187;
    Tensor.shape.getter();
    uint64_t v114 = TensorShape.contiguousSize.getter();
    v205((uint64_t)v113, v217);
    BOOL v115 = alloca(24);
    uint64_t v116 = alloca(32);
    uint64_t v181 = (uint64_t)v112;
    uint64_t v117 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v114, a13, (uint64_t)v180);
    uint64_t v212 = 0;
    v188(v112, v203);
    uint64_t v118 = v216;
    char v119 = swift_isUniquelyReferenced_nonNull_native(v216);
    *(void *)&v202[0] = v118;
    LOBYTE(v118) = v215;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v117, (uint64_t)v218, v215, v119);
    uint64_t v203 = *(void *)&v202[0];
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(0);
    *(void *)&v202[0] = v210._countAndFlagsBits;
    *((void *)&v202[0] + 1) = v213;
    swift_bridgeObjectRetain((_BYTE)v213);
    v111._uint64_t countAndFlagsBits = 0x68732E736169622ELL;
    v111._char object = (void *)0xEB00000000657061;
    String.append(_:)(v111);
    uint64_t v204 = (unsigned char *)*((void *)&v202[0] + 1);
    uint64_t v207 = *(void *)&v202[0];
    uint64_t v120 = v199;
    Parameter.shape.getter();
    uint64_t v121 = v208;
    uint64_t v122 = dispatch thunk of Collection.count.getter(v217, v208);
    if (v122)
    {
      uint64_t v126 = v122;
      uint64_t v209 = _swiftEmptyArrayStorage;
      int64_t v127 = 0;
      if (v122 > 0) {
        int64_t v127 = v122;
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v127, 0);
      uint64_t v128 = v121;
      uint64_t v129 = v209;
      uint64_t v130 = v217;
      dispatch thunk of Collection.startIndex.getter(v217, v128);
      if (v126 < 0) {
        BUG();
      }
      uint64_t v215 = v126;
      int64_t v125 = v208;
      uint64_t v131 = v130;
      uint64_t v120 = v199;
      do
      {
        uint64_t v132 = v120;
        uint64_t v133 = v131;
        int64_t v134 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read(v202, v200, v131, v125);
        *(void *)&long long v216 = *v135;
        v134(v202, 0);
        uint64_t v209 = v129;
        uint64_t v136 = v133;
        unint64_t v137 = v129[2];
        int64_t v138 = v137 + 1;
        uint64_t v139 = (uint64_t)v129;
        if (v129[3] >> 1 <= v137)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129[3] >= 2uLL, v138, 1);
          uint64_t v136 = v217;
          uint64_t v132 = v199;
          uint64_t v139 = (uint64_t)v209;
        }
        uint64_t v218 = (unsigned char *)v139;
        double v140 = (double)(int)v216;
        *(void *)(v139 + 16) = v138;
        *(double *)(v139 + 8 * v137 + 32) = v140;
        uint64_t v141 = v136;
        uint64_t v142 = v208;
        dispatch thunk of Collection.formIndex(after:)(v200, v136, v208);
        BOOL v143 = v215-- == 1;
        uint64_t v131 = v141;
        uint64_t v120 = v132;
        int64_t v125 = v142;
        uint64_t v129 = v218;
      }
      while (!v143);
    }
    else
    {
      uint64_t v129 = _swiftEmptyArrayStorage;
      uint64_t v131 = v217;
    }
    ((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *))v205)(v120, v131, v123, v124, v125);
    uint64_t v144 = v203;
    char v145 = swift_isUniquelyReferenced_nonNull_native(v203);
    *(void *)&v202[0] = v144;
    uint64_t v146 = (uint64_t)v129;
    char v147 = (char)v204;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v146, v207, (uint64_t)v204, v145);
    uint64_t v217 = *(void *)&v202[0];
    swift_bridgeObjectRelease(v147);
    swift_bridgeObjectRelease(0);
    uint64_t v148 = v196;
    uint64_t v149 = v206;
    uint64_t v150 = (uint64_t)v197;
    if (v196)
    {
      unsigned int v151 = Parameter.id.getter(0x8000000000000000);
      uint64_t v152 = a8(v151, v148);
    }
    else
    {
      uint64_t v152 = 0;
    }
    uint64_t v153 = v211;
    outlined init with copy of MLTrainingSessionParameters(v190, v150, (uint64_t (*)(void))v210._object);
    uint64_t v154 = v201;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v201 + 16))(v198, v149, v153);
    if (v152)
    {
      *(void *)&long long v216 = v152;
      uint64_t v218 = *(unsigned char **)(v154 + 8);
      ((void (*)(unsigned char *, uint64_t))v218)(v198, v153);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v197, (uint64_t (*)(void))v210._object);
    }
    else
    {
      uint64_t v155 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a9, (uint64_t (*)(uint64_t))v210._object, a10);
      uint64_t v156 = (uint64_t)v197;
      uint64_t v157 = Layer.parameterKeyPaths(recursively:)(1, v195, v155);
      uint64_t v218 = v180;
      uint64_t v158 = alloca(32);
      char v159 = alloca(32);
      uint64_t v181 = v156;
      unint64_t v160 = v198;
      unint64_t v182 = v198;
      uint64_t v161 = v212;
      *(void *)&long long v216 = specialized Sequence.first(where:)(a14, (uint64_t)v180, v157);
      uint64_t v212 = v161;
      swift_bridgeObjectRelease(v157);
      uint64_t v95 = v211;
      uint64_t v218 = *(unsigned char **)(v154 + 8);
      ((void (*)(unsigned char *, uint64_t))v218)(v160, v211);
      outlined destroy of MLActivityClassifier.ModelParameters(v156, (uint64_t (*)(void))v210._object);
      if (!(void)v216)
      {
        swift_bridgeObjectRelease(v217);
        *(void *)&v202[0] = 0;
        *((void *)&v202[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v174._char object = "zed in the observation" + 0x8000000000000000;
        v174._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v174);
        v174._uint64_t countAndFlagsBits = v210._countAndFlagsBits;
        v174._char object = v213;
        String.append(_:)(v174);
        v174._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v174);
        long long v216 = v202[0];
        v174._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v174._object, 0, 0);
        *(_OWORD *)uint64_t v175 = v216;
        *(_OWORD *)(v175 + 16) = 0;
        *(_OWORD *)(v175 + 32) = 0;
        *(unsigned char *)(v175 + 48) = 2;
        swift_willThrow(&type metadata for MLCreateError, v174._object, v175, v176, v177, v178);
        swift_release();
        ((void (*)(unsigned char *, uint64_t))v218)(v206, v95);
        return v95;
      }
    }
    *(void *)&v202[0] = v210._countAndFlagsBits;
    *((void *)&v202[0] + 1) = v213;
    swift_bridgeObjectRetain((_BYTE)v213);
    v162._uint64_t countAndFlagsBits = 0x736169622ELL;
    v162._char object = (void *)0xE500000000000000;
    String.append(_:)(v162);
    char v163 = BYTE8(v202[0]);
    uint64_t v164 = a12((void *)v216, *(void *)&v202[0], *((void *)&v202[0] + 1));
    swift_bridgeObjectRelease(v163);
    uint64_t v165 = v217;
    unsigned __int8 v166 = swift_isUniquelyReferenced_nonNull_native(v217);
    *(void *)&v202[0] = v165;
    uint64_t v167 = v212;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v164, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v166, v202);
    if (!v167)
    {
      uint64_t v168 = *(void *)&v202[0];
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(0);
      ((void (*)(unsigned char *, uint64_t))v218)(v206, v211);
      return v168;
    }
LABEL_44:
    swift_bridgeObjectRelease(0);
    BUG();
  }
  swift_release();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v108, &demangling cache variable for type metadata for Parameter?);
  return v95;
}

uint64_t specialized Adam.getParametersDictionary()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  uint64_t inited = swift_initStackObject(v1, v14);
  *(void *)(inited + 16) = 6;
  *(void *)(inited + 24) = 12;
  strcpy((char *)(inited + 32), "learningRate");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v4 = swift_allocObject(v3, 40, 7);
  *(void *)(v4 + 16) = 1;
  *(void *)(v4 + 24) = 2;
  *(double *)(v4 + 32) = *v0;
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = 0x3161746562;
  *(void *)(inited + 64) = 0xE500000000000000;
  uint64_t v5 = swift_allocObject(v3, 40, 7);
  *(void *)(v5 + 16) = 1;
  *(void *)(v5 + 24) = 2;
  *(double *)(v5 + 32) = v0[1];
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = 0x3261746562;
  *(void *)(inited + 88) = 0xE500000000000000;
  uint64_t v6 = swift_allocObject(v3, 40, 7);
  *(void *)(v6 + 16) = 1;
  *(void *)(v6 + 24) = 2;
  *(double *)(v6 + 32) = v0[2];
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = 0x47534D4173657375;
  *(void *)(inited + 112) = 0xEB00000000646172;
  int64_t v7 = (void *)swift_allocObject(v3, 40, 7);
  v7[2] = 1;
  v7[3] = 2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  if (Adam.usesAMSGrad.getter(v8)) {
    uint64_t v9 = 0x3FF0000000000000;
  }
  else {
    uint64_t v9 = 0;
  }
  v7[4] = v9;
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = 0x6E6F6C69737065;
  *(void *)(inited + 136) = 0xE700000000000000;
  uint64_t v10 = swift_allocObject(v3, 40, 7);
  *(void *)(v10 + 16) = 1;
  *(void *)(v10 + 24) = 2;
  *(double *)(v10 + 32) = v0[3];
  *(void *)(inited + 144) = v10;
  strcpy((char *)(inited + 152), "gradientScale");
  *(_WORD *)(inited + 166) = -4864;
  uint64_t v11 = swift_allocObject(v3, 40, 7);
  *(void *)(v11 + 16) = 1;
  *(void *)(v11 + 24) = 2;
  *(double *)(v11 + 32) = *(float *)((char *)v0 + *(int *)(v8 + 56));
  *(void *)(inited + 168) = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v12, &protocol witness table for String);
}

uint64_t specialized Adam.getStatesDictionary(for:name:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v52 = a3;
  uint64_t v51 = a2;
  uint64_t v50 = a1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v48 = &v39;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?)
                             - 8)
                 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v47 = &v39;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v40 = &v39;
  uint64_t v12 = alloca(v7);
  uint64_t v13 = alloca(v7);
  uint64_t v14 = type metadata accessor for Tensor(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int64_t v16 = *(void *)(v15 + 64);
  int64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  unsigned int v44 = &v39;
  uint64_t v19 = alloca(v16);
  int64_t v20 = alloca(v16);
  int64_t v42 = &v39;
  Swift::String v21 = alloca(v16);
  char v22 = alloca(v16);
  uint64_t v43 = &v39;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v53 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v23, &protocol witness table for String);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLActivityClassifier.Model>);
  uint64_t v45 = v3;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>);
  OptimizerStateDictionary.subscript.getter(v50, v41);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&v39, 1, v14);
  uint64_t v49 = v15;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v39, &demangling cache variable for type metadata for Tensor?);
  }
  else
  {
    uint64_t v25 = (uint64_t)v43;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 32))(v43, &v39, v14);
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v25, v51, v52, 0x6D6F4D7473726966, (void *)0xEC00000073746E65);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v14);
  }
  uint64_t v26 = (uint64_t)v40;
  uint64_t v27 = v41;
  OptimizerStateDictionary.subscript.getter(v50, v41);
  if (__swift_getEnumTagSinglePayload(v26, 1, v14) == 1)
  {
    uint64_t v28 = v14;
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, &demangling cache variable for type metadata for Tensor?);
  }
  else
  {
    uint64_t v29 = (uint64_t)v42;
    uint64_t v30 = v26;
    uint64_t v31 = v49;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v49 + 32))(v42, v30, v14);
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v29, v51, v52, 0x6F4D646E6F636573, (void *)0xED000073746E656DLL);
    uint64_t v32 = v29;
    uint64_t v28 = v14;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v14);
  }
  uint64_t v33 = (uint64_t)v48;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(int *)(v46 + 72) + v45, (uint64_t)v48, &demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>?);
  if (__swift_getEnumTagSinglePayload(v33, 1, v27) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v33, &demangling cache variable for type metadata for OptimizerStateDictionary<MLActivityClassifier.Model>?);
    uint64_t v34 = (uint64_t)v47;
    __swift_storeEnumTagSinglePayload((uint64_t)v47, 1, 1, v28);
  }
  else
  {
    uint64_t v34 = (uint64_t)v47;
    OptimizerStateDictionary.subscript.getter(v50, v27);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v33, v27);
    if (__swift_getEnumTagSinglePayload(v34, 1, v28) != 1)
    {
      uint64_t v35 = (uint64_t)v44;
      uint64_t v36 = v34;
      uint64_t v37 = v49;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v49 + 32))(v44, v36, v28);
      Dictionary<>.updateValue(tensor:forKey:prefix:)(v35, v51, v52, 0xD000000000000014, "used as dictionary key" + 0x8000000000000000);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v28);
      return v53;
    }
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v34, &demangling cache variable for type metadata for Tensor?);
  return v53;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  if (v5 <= a1) {
    uint64_t v5 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  unsigned int v45 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)(v4, v5, a2);
  if (!*(void *)(v4 + 16)) {
    goto LABEL_40;
  }
  unsigned int v44 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v43 = (void *)(v4 + 64);
  uint64_t v8 = ~(-1 << v7);
  if (v7 >= 64) {
    uint64_t v8 = -1;
  }
  unint64_t v9 = *(void *)(v4 + 64) & v8;
  int64_t v41 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  int64_t v10 = 0;
  for (i = v4; ; uint64_t v4 = i)
  {
    if (v9)
    {
      _BitScanForward64(&v11, v9);
      uint64_t v12 = (v9 - 1) & v9;
      unint64_t v13 = v11 | (v10 << 6);
      goto LABEL_13;
    }
    BOOL v14 = __OFADD__(1, v10++);
    if (v14) {
      BUG();
    }
    if (v10 >= v41) {
      break;
    }
    uint64_t v15 = v43;
    unint64_t j = v43[v10];
    if (!j)
    {
      if (v10 + 1 >= v41)
      {
LABEL_33:
        swift_release();
        uint64_t v3 = v44;
        goto LABEL_35;
      }
      for (unint64_t j = v43[++v10]; !j; unint64_t j = v43[v10])
      {
        BOOL v14 = __OFADD__(1, v10++);
        if (v14) {
          BUG();
        }
        if (v10 >= v41) {
          goto LABEL_33;
        }
      }
    }
    _BitScanForward64(&v17, j);
    uint64_t v12 = j & (j - 1);
    unint64_t v13 = v17 + (v10 << 6);
LABEL_13:
    unint64_t v42 = v12;
    uint64_t v18 = *(void *)(v4 + 48);
    uint64_t v19 = *(void *)(v18 + 16 * v13);
    uint64_t v20 = *(void *)(v18 + 16 * v13 + 8);
    uint64_t v38 = *(void *)(*(void *)(v4 + 56) + 8 * v13);
    if ((v45 & 1) == 0) {
      swift_bridgeObjectRetain(v20);
    }
    Hasher.init(_seed:)(*(void *)(v6 + 40));
    uint64_t v39 = v20;
    String.hash(into:)(v37, v19);
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v6 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v6 + 8 * (v21 >> 6) + 64) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v24, v23);
      unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v26 = v19;
      unint64_t v9 = v42;
    }
    else
    {
      unint64_t v27 = (unint64_t)(63 - (-1 << *(unsigned char *)(v6 + 32))) >> 6;
      char v28 = 0;
      uint64_t v26 = v19;
      unint64_t v9 = v42;
      do
      {
        unint64_t v29 = v22 + 1;
        if (v22 + 1 == v27 && (v28 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v29 != v27) {
          unint64_t v22 = v29;
        }
        v28 |= v29 == v27;
        uint64_t v30 = *(void *)(v6 + 8 * v22 + 64);
      }
      while (v30 == -1);
      unint64_t v31 = ~v30;
      uint64_t v32 = 64;
      if (v31) {
        _BitScanForward64((unint64_t *)&v32, v31);
      }
      unint64_t v25 = v32 + (v22 << 6);
    }
    *(void *)(v6 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    uint64_t v33 = *(void *)(v6 + 48);
    uint64_t v34 = 16 * v25;
    *(void *)(v33 + v34) = v26;
    *(void *)(v33 + v34 + 8) = v39;
    *(void *)(*(void *)(v6 + 56) + 8 * v25) = v38;
    ++*(void *)(v6 + 16);
  }
  swift_release();
  uint64_t v3 = v44;
  uint64_t v15 = v43;
LABEL_35:
  if (v45)
  {
    uint64_t v35 = 1 << *(unsigned char *)(v4 + 32);
    if (v35 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v35 + 63) >> 6, (uint64_t)v15);
    }
    else {
      *uint64_t v15 = -1 << (1 << *(unsigned char *)(v4 + 32));
    }
    *(void *)(v4 + 16) = 0;
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(void))&type metadata accessor for CSVType, &demangling cache variable for type metadata for _DictionaryStorage<String, CSVType>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(void))&type metadata accessor for JSONType, &demangling cache variable for type metadata for _DictionaryStorage<String, JSONType>);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t result;
  char v42[72];
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  void *v49;
  unsigned int v50;
  uint64_t *v51;

  uint64_t v51 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLUntypedColumn>);
  uint64_t v50 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v39 = v51;
    goto LABEL_43;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v49 = (void *)(v3 + 64);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v8 = *(void *)(v3 + 64) & v7;
  unsigned int v44 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  unint64_t v9 = 0;
  uint64_t v43 = v3;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      uint64_t v46 = (v8 - 1) & v8;
      unint64_t v11 = v10 | (v9 << 6);
      uint64_t v48 = v9;
      goto LABEL_16;
    }
    uint64_t v12 = __OFADD__(1, v9);
    unint64_t v13 = v9 + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v44) {
      break;
    }
    uint64_t i = v49[v13];
    if (i)
    {
      uint64_t v15 = v13;
    }
    else
    {
      uint64_t v15 = v13 + 1;
      if (v13 + 1 >= v44) {
        break;
      }
      uint64_t i = v49[v13 + 1];
      if (!i)
      {
        uint64_t v15 = v13 + 2;
        if (v13 + 2 >= v44) {
          break;
        }
        for (uint64_t i = v49[v13 + 2]; !i; uint64_t i = v49[v15])
        {
          uint64_t v12 = __OFADD__(1, v15++);
          if (v12) {
            BUG();
          }
          if (v15 >= v44) {
            goto LABEL_36;
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    uint64_t v46 = i & (i - 1);
    uint64_t v48 = v15;
    unint64_t v11 = v16 + (v15 << 6);
LABEL_16:
    unint64_t v17 = *(void *)(v3 + 48);
    uint64_t v18 = *(void *)(v3 + 56);
    uint64_t v19 = 16 * v11;
    uint64_t v20 = *(void *)(v17 + v19);
    unint64_t v21 = *(void *)(v17 + v19 + 8);
    unsigned int v45 = *(void *)(v18 + v19);
    unint64_t v22 = *(unsigned char *)(v18 + v19 + 8);
    if ((v50 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21);
      outlined copy of Result<_DataTable, Error>(v45, v22);
    }
    Hasher.init(_seed:)(*(void *)(v5 + 40));
    uint64_t v47 = v20;
    String.hash(into:)(v42, v20);
    unint64_t v23 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
    unint64_t v24 = v23 >> 6;
    unint64_t v25 = ~*(void *)(v5 + 8 * (v23 >> 6) + 64) >> v23 << v23;
    if (v25)
    {
      _BitScanForward64(&v26, v25);
      unint64_t v27 = v26 | v23 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
      unint64_t v29 = 0;
      do
      {
        uint64_t v30 = v24 + 1;
        if (v24 + 1 == v28 && (v29 & 1) != 0) {
          BUG();
        }
        unint64_t v24 = 0;
        if (v30 != v28) {
          unint64_t v24 = v30;
        }
        v29 |= v30 == v28;
        unint64_t v31 = *(void *)(v5 + 8 * v24 + 64);
      }
      while (v31 == -1);
      uint64_t v32 = ~v31;
      uint64_t v33 = 64;
      if (v32) {
        _BitScanForward64((unint64_t *)&v33, v32);
      }
      unint64_t v27 = v33 + (v24 << 6);
    }
    uint64_t v34 = v47;
    uint64_t v35 = v48;
    *(void *)(v5 + 8 * (v27 >> 6) + 64) |= 1 << v27;
    uint64_t v36 = *(void *)(v5 + 48);
    uint64_t v37 = 16 * v27;
    *(void *)(v36 + v37) = v34;
    *(void *)(v36 + v37 + 8) = v21;
    uint64_t v38 = *(void *)(v5 + 56);
    *(void *)(v38 + v37) = v45;
    *(unsigned char *)(v38 + v37 + 8) = v22 & 1;
    ++*(void *)(v5 + 16);
    unint64_t v9 = v35;
    uint64_t v3 = v43;
    uint64_t v8 = v46;
  }
LABEL_36:
  swift_release();
  uint64_t v39 = v51;
  if (v50)
  {
    uint64_t v40 = 1 << *(unsigned char *)(v3 + 32);
    if (v40 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v40 + 63) >> 6, (uint64_t)v49);
    }
    else {
      *uint64_t v49 = -1 << (1 << *(unsigned char *)(v3 + 32));
    }
    *(void *)(v3 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v39 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t j;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t result;
  char v42[72];
  uint64_t i;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  void *v49;
  unsigned int v50;
  uint64_t *v51;

  uint64_t v51 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v50 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v39 = v51;
    goto LABEL_43;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v49 = (void *)(v3 + 64);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v8 = *(void *)(v3 + 64) & v7;
  unsigned int v44 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  unint64_t v9 = 0;
  for (i = v3; ; uint64_t v3 = i)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      uint64_t v48 = (v8 - 1) & v8;
      unint64_t v11 = v10 | (v9 << 6);
      uint64_t v47 = v9;
      goto LABEL_16;
    }
    uint64_t v12 = __OFADD__(1, v9);
    unint64_t v13 = v9 + 1;
    if (v12) {
      BUG();
    }
    if (v13 >= v44) {
      break;
    }
    unint64_t j = v49[v13];
    if (j)
    {
      uint64_t v15 = v13;
    }
    else
    {
      uint64_t v15 = v13 + 1;
      if (v13 + 1 >= v44) {
        break;
      }
      unint64_t j = v49[v13 + 1];
      if (!j)
      {
        uint64_t v15 = v13 + 2;
        if (v13 + 2 >= v44) {
          break;
        }
        for (unint64_t j = v49[v13 + 2]; !j; unint64_t j = v49[v15])
        {
          uint64_t v12 = __OFADD__(1, v15++);
          if (v12) {
            BUG();
          }
          if (v15 >= v44) {
            goto LABEL_36;
          }
        }
      }
    }
    _BitScanForward64(&v16, j);
    uint64_t v48 = j & (j - 1);
    uint64_t v47 = v15;
    unint64_t v11 = v16 + (v15 << 6);
LABEL_16:
    unint64_t v17 = 16 * v11;
    uint64_t v18 = *(void *)(v3 + 48);
    uint64_t v19 = *(void *)(v3 + 56);
    uint64_t v20 = *(void *)(v18 + v17);
    unint64_t v21 = *(void *)(v18 + v17 + 8);
    uint64_t v46 = *(void *)(v19 + v17);
    unsigned int v45 = *(void *)(v19 + v17 + 8);
    if ((v50 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v45);
    }
    Hasher.init(_seed:)(*(void *)(v5 + 40));
    String.hash(into:)(v42, v20);
    unint64_t v22 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
    unint64_t v23 = v22 >> 6;
    unint64_t v24 = ~*(void *)(v5 + 8 * (v22 >> 6) + 64) >> v22 << v22;
    if (v24)
    {
      _BitScanForward64(&v25, v24);
      uint64_t v26 = v25 | v22 & 0xFFFFFFFFFFFFFFC0;
      unint64_t v27 = v46;
      char v28 = v20;
    }
    else
    {
      unint64_t v29 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
      uint64_t v30 = 0;
      char v28 = v20;
      do
      {
        unint64_t v31 = v23 + 1;
        if (v23 + 1 == v29 && (v30 & 1) != 0) {
          BUG();
        }
        unint64_t v23 = 0;
        if (v31 != v29) {
          unint64_t v23 = v31;
        }
        v30 |= v31 == v29;
        uint64_t v32 = *(void *)(v5 + 8 * v23 + 64);
      }
      while (v32 == -1);
      uint64_t v33 = ~v32;
      uint64_t v34 = 64;
      if (v33) {
        _BitScanForward64((unint64_t *)&v34, v33);
      }
      uint64_t v26 = v34 + (v23 << 6);
      unint64_t v27 = v46;
    }
    uint64_t v35 = v47;
    uint64_t v8 = v48;
    *(void *)(v5 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    uint64_t v36 = *(void *)(v5 + 48);
    uint64_t v37 = 16 * v26;
    *(void *)(v36 + v37) = v28;
    *(void *)(v36 + v37 + 8) = v21;
    uint64_t v38 = *(void *)(v5 + 56);
    *(void *)(v38 + v37) = v27;
    *(void *)(v38 + v37 + 8) = v45;
    ++*(void *)(v5 + 16);
    unint64_t v9 = v35;
  }
LABEL_36:
  swift_release();
  uint64_t v39 = v51;
  if (v50)
  {
    uint64_t v40 = 1 << *(unsigned char *)(v3 + 32);
    if (v40 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v40 + 63) >> 6, (uint64_t)v49);
    }
    else {
      *uint64_t v49 = -1 << (1 << *(unsigned char *)(v3 + 32));
    }
    *(void *)(v3 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v39 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  void *v15;
  unint64_t j;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37[72];
  long long v38[2];
  int64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;

  unsigned int v44 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v42 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v34 = v44;
    goto LABEL_46;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  int64_t v41 = (void *)(v3 + 64);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v8 = *(void *)(v3 + 64) & v7;
  uint64_t v39 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v43 = v3;
  swift_retain();
  for (uint64_t i = 0; ; uint64_t i = v12)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (i << 6);
      uint64_t v12 = i;
      goto LABEL_16;
    }
    unint64_t v13 = __OFADD__(1, i);
    BOOL v14 = i + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v39) {
      break;
    }
    uint64_t v15 = v41;
    unint64_t j = v41[v14];
    if (j)
    {
      uint64_t v12 = v14;
    }
    else
    {
      uint64_t v12 = v14 + 1;
      if (v14 + 1 >= v39) {
        goto LABEL_38;
      }
      unint64_t j = v41[v14 + 1];
      if (!j)
      {
        uint64_t v12 = v14 + 2;
        if (v14 + 2 >= v39)
        {
LABEL_38:
          uint64_t v35 = v43;
          swift_release();
          uint64_t v34 = v44;
          goto LABEL_40;
        }
        for (unint64_t j = v41[v14 + 2]; !j; unint64_t j = v41[v12])
        {
          unint64_t v13 = __OFADD__(1, v12++);
          if (v13) {
            BUG();
          }
          if (v12 >= v39) {
            goto LABEL_38;
          }
        }
      }
    }
    _BitScanForward64(&v17, j);
    uint64_t v8 = j & (j - 1);
    unint64_t v11 = v17 + (v12 << 6);
LABEL_16:
    uint64_t v18 = *(void *)(v43 + 48);
    uint64_t v40 = *(void *)(v18 + 16 * v11);
    uint64_t v19 = *(void *)(v18 + 16 * v11 + 8);
    uint64_t v20 = (long long *)(*(void *)(v43 + 56) + 32 * v11);
    if (v42)
    {
      outlined init with take of Any(v20, v38);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v20, (uint64_t)v38);
      swift_bridgeObjectRetain(v19);
    }
    Hasher.init(_seed:)(*(void *)(v5 + 40));
    String.hash(into:)(v37, v40);
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v5 + 8 * (v21 >> 6) + 64) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v23, v23);
      unint64_t v24 = v23 | v21 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
      uint64_t v26 = 0;
      do
      {
        unint64_t v27 = v22 + 1;
        if (v22 + 1 == v25 && (v26 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v27 != v25) {
          unint64_t v22 = v27;
        }
        v26 |= v27 == v25;
        char v28 = *(void *)(v5 + 8 * v22 + 64);
      }
      while (v28 == -1);
      unint64_t v29 = ~v28;
      uint64_t v30 = 64;
      if (v29) {
        _BitScanForward64((unint64_t *)&v30, v29);
      }
      unint64_t v24 = v30 + (v22 << 6);
    }
    *(void *)(v5 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    unint64_t v31 = *(void *)(v5 + 48);
    uint64_t v32 = 16 * v24;
    *(void *)(v31 + v32) = v40;
    *(void *)(v31 + v32 + 8) = v19;
    outlined init with take of Any(v38, (_OWORD *)(*(void *)(v5 + 56) + 32 * v24));
    ++*(void *)(v5 + 16);
  }
  uint64_t v35 = v43;
  swift_release();
  uint64_t v34 = v44;
  uint64_t v15 = v41;
LABEL_40:
  if (v42)
  {
    uint64_t v36 = 1 << *(unsigned char *)(v35 + 32);
    if (v36 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, (uint64_t)v15);
    }
    else {
      *uint64_t v15 = -1 << (1 << *(unsigned char *)(v35 + 32));
    }
    *(void *)(v35 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_46:
  *uint64_t v34 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  unint64_t v16;
  long long *v17;
  int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t result;
  char v34[72];
  long long v35[2];
  int64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned __int8 v46;

  unsigned int v45 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  unsigned int v44 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    unint64_t v31 = v45;
    goto LABEL_56;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v43 = (void *)(v3 + 64);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v8 = *(void *)(v3 + 64) & v7;
  uint64_t v36 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  unint64_t v9 = 0;
  uint64_t v37 = "accuracy" + 0x8000000000000000;
  uint64_t v38 = "validationAccuracy" + 0x8000000000000000;
  uint64_t v39 = "stylizedImageURL" + 0x8000000000000000;
  uint64_t v40 = "rror" + 0x8000000000000000;
  int64_t v41 = "validationRootMeanSquaredError" + 0x8000000000000000;
  unint64_t v42 = v3;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      uint64_t v12 = v9;
      goto LABEL_16;
    }
    unint64_t v13 = __OFADD__(1, v9);
    BOOL v14 = v9 + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v36) {
      break;
    }
    uint64_t i = v43[v14];
    if (i)
    {
      uint64_t v12 = v14;
    }
    else
    {
      uint64_t v12 = v14 + 1;
      if (v14 + 1 >= v36) {
        break;
      }
      uint64_t i = v43[v14 + 1];
      if (!i)
      {
        uint64_t v12 = v14 + 2;
        if (v14 + 2 >= v36) {
          break;
        }
        for (uint64_t i = v43[v14 + 2]; !i; uint64_t i = v43[v12])
        {
          unint64_t v13 = __OFADD__(1, v12++);
          if (v13) {
            BUG();
          }
          if (v12 >= v36) {
            goto LABEL_49;
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    uint64_t v8 = i & (i - 1);
    unint64_t v11 = v16 + (v12 << 6);
LABEL_16:
    uint64_t v46 = *(unsigned char *)(*(void *)(v3 + 48) + v11);
    unint64_t v17 = (long long *)(*(void *)(v3 + 56) + 32 * v11);
    if (v44) {
      outlined init with take of Any(v17, v35);
    }
    else {
      outlined init with copy of Any((uint64_t)v17, (uint64_t)v35);
    }
    uint64_t v18 = v46;
    Hasher.init(_seed:)(*(void *)(v5 + 40));
    switch(v18)
    {
      case 0:
        uint64_t v19 = 1936945004;
        uint64_t v20 = 0;
        break;
      case 1:
        uint64_t v19 = 0x4C746E65746E6F63;
        uint64_t v20 = 111;
        break;
      case 2:
        uint64_t v19 = 0x736F4C656C797473;
        uint64_t v20 = 115;
        break;
      case 3:
        uint64_t v19 = 0x7963617275636361;
        uint64_t v20 = 0;
        break;
      case 4:
        uint64_t v19 = 0x69746164696C6176;
        uint64_t v20 = 111;
        break;
      case 5:
        uint64_t v19 = 0xD000000000000012;
        uint64_t v20 = (char)v37;
        break;
      case 6:
        uint64_t v19 = 0xD000000000000010;
        uint64_t v20 = (char)v38;
        break;
      case 7:
        uint64_t v19 = 0xD000000000000014;
        uint64_t v20 = (char)v39;
        break;
      case 8:
        uint64_t v19 = 0x456D756D6978616DLL;
        uint64_t v20 = 114;
        break;
      case 9:
        uint64_t v19 = 0xD00000000000001ELL;
        uint64_t v20 = (char)v40;
        break;
      case 10:
        uint64_t v19 = 0xD000000000000016;
        uint64_t v20 = (char)v41;
        break;
    }
    String.hash(into:)(v34, v19);
    swift_bridgeObjectRelease(v20);
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v5 + 8 * (v21 >> 6) + 64) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v23, v23);
      unint64_t v24 = v23 | v21 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
      uint64_t v26 = 0;
      do
      {
        unint64_t v27 = v22 + 1;
        if (v22 + 1 == v25 && (v26 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v27 != v25) {
          unint64_t v22 = v27;
        }
        v26 |= v27 == v25;
        char v28 = *(void *)(v5 + 8 * v22 + 64);
      }
      while (v28 == -1);
      unint64_t v29 = ~v28;
      uint64_t v30 = 64;
      if (v29) {
        _BitScanForward64((unint64_t *)&v30, v29);
      }
      unint64_t v24 = v30 + (v22 << 6);
    }
    uint64_t v3 = v42;
    *(void *)(v5 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    *(unsigned char *)(*(void *)(v5 + 48) + v24) = v46;
    outlined init with take of Any(v35, (_OWORD *)(*(void *)(v5 + 56) + 32 * v24));
    ++*(void *)(v5 + 16);
    unint64_t v9 = v12;
  }
LABEL_49:
  swift_release();
  unint64_t v31 = v45;
  if (v44)
  {
    uint64_t v32 = 1 << *(unsigned char *)(v3 + 32);
    if (v32 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, (uint64_t)v43);
    }
    else {
      void *v43 = -1 << (1 << *(unsigned char *)(v3 + 32));
    }
    *(void *)(v3 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_56:
  *unint64_t v31 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t result;
  char v36[72];
  int64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  unsigned int v47;
  char v48;

  uint64_t v46 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Double>);
  uint64_t v47 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v33 = v46;
    goto LABEL_53;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  unsigned int v45 = (void *)(v3 + 64);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v8 = *(void *)(v3 + 64) & v7;
  uint64_t v37 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  unint64_t v9 = 0;
  uint64_t v38 = "accuracy" + 0x8000000000000000;
  uint64_t v39 = "validationAccuracy" + 0x8000000000000000;
  uint64_t v40 = "stylizedImageURL" + 0x8000000000000000;
  int64_t v41 = "rror" + 0x8000000000000000;
  unint64_t v42 = "validationRootMeanSquaredError" + 0x8000000000000000;
  unsigned int v44 = v3;
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      uint64_t v12 = v9;
      goto LABEL_16;
    }
    unint64_t v13 = __OFADD__(1, v9);
    BOOL v14 = v9 + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v37) {
      break;
    }
    uint64_t i = v45[v14];
    if (i)
    {
      uint64_t v12 = v14;
    }
    else
    {
      uint64_t v12 = v14 + 1;
      if (v14 + 1 >= v37) {
        break;
      }
      uint64_t i = v45[v14 + 1];
      if (!i)
      {
        uint64_t v12 = v14 + 2;
        if (v14 + 2 >= v37) {
          break;
        }
        for (uint64_t i = v45[v14 + 2]; !i; uint64_t i = v45[v12])
        {
          unint64_t v13 = __OFADD__(1, v12++);
          if (v13) {
            BUG();
          }
          if (v12 >= v37) {
            goto LABEL_46;
          }
        }
      }
    }
    _BitScanForward64(&v16, i);
    uint64_t v8 = i & (i - 1);
    unint64_t v11 = v16 + (v12 << 6);
LABEL_16:
    unint64_t v17 = *(void *)(v3 + 56);
    uint64_t v18 = *(unsigned char *)(*(void *)(v3 + 48) + v11);
    uint64_t v43 = *(void *)(v17 + 8 * v11);
    Hasher.init(_seed:)(*(void *)(v5 + 40));
    uint64_t v48 = v18;
    switch(v18)
    {
      case 0:
        uint64_t v19 = 1936945004;
        uint64_t v20 = 0;
        break;
      case 1:
        uint64_t v19 = 0x4C746E65746E6F63;
        uint64_t v20 = 111;
        break;
      case 2:
        uint64_t v19 = 0x736F4C656C797473;
        uint64_t v20 = 115;
        break;
      case 3:
        uint64_t v19 = 0x7963617275636361;
        uint64_t v20 = 0;
        break;
      case 4:
        uint64_t v19 = 0x69746164696C6176;
        uint64_t v20 = 111;
        break;
      case 5:
        uint64_t v19 = 0xD000000000000012;
        uint64_t v20 = (char)v38;
        break;
      case 6:
        uint64_t v19 = 0xD000000000000010;
        uint64_t v20 = (char)v39;
        break;
      case 7:
        uint64_t v19 = 0xD000000000000014;
        uint64_t v20 = (char)v40;
        break;
      case 8:
        uint64_t v19 = 0x456D756D6978616DLL;
        uint64_t v20 = 114;
        break;
      case 9:
        uint64_t v19 = 0xD00000000000001ELL;
        uint64_t v20 = (char)v41;
        break;
      case 10:
        uint64_t v19 = 0xD000000000000016;
        uint64_t v20 = (char)v42;
        break;
    }
    String.hash(into:)(v36, v19);
    swift_bridgeObjectRelease(v20);
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v5 + 8 * (v21 >> 6) + 64) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v24, v23);
      unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
      unint64_t v27 = 0;
      do
      {
        char v28 = v22 + 1;
        if (v22 + 1 == v26 && (v27 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v28 != v26) {
          unint64_t v22 = v28;
        }
        v27 |= v28 == v26;
        unint64_t v29 = *(void *)(v5 + 8 * v22 + 64);
      }
      while (v29 == -1);
      uint64_t v30 = ~v29;
      unint64_t v31 = 64;
      if (v30) {
        _BitScanForward64((unint64_t *)&v31, v30);
      }
      unint64_t v25 = v31 + (v22 << 6);
    }
    uint64_t v3 = v44;
    uint64_t v32 = v43;
    *(void *)(v5 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    *(unsigned char *)(*(void *)(v5 + 48) + v25) = v48;
    *(void *)(*(void *)(v5 + 56) + 8 * v25) = v32;
    ++*(void *)(v5 + 16);
    unint64_t v9 = v12;
  }
LABEL_46:
  swift_release();
  uint64_t v33 = v46;
  if (v47)
  {
    uint64_t v34 = 1 << *(unsigned char *)(v3 + 32);
    if (v34 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v34 + 63) >> 6, (uint64_t)v45);
    }
    else {
      *unsigned int v45 = -1 << (1 << *(unsigned char *)(v3 + 32));
    }
    *(void *)(v3 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_53:
  *uint64_t v33 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  void *v15;
  unint64_t j;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41[72];
  int64_t v42;
  uint64_t v43;
  void *v44;
  int64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;

  uint64_t v49 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v47 = a2;
  uint64_t v5 = v3;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v38 = v49;
    goto LABEL_45;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v3 + 32);
  unsigned int v44 = (void *)(v3 + 64);
  uint64_t v8 = ~(-1 << v7);
  if (v7 >= 64) {
    uint64_t v8 = -1;
  }
  unint64_t v9 = *(void *)(v5 + 64) & v8;
  unint64_t v42 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v48 = v5;
  swift_retain();
  for (uint64_t i = 0; ; uint64_t i = v34)
  {
    if (v9)
    {
      _BitScanForward64(&v11, v9);
      uint64_t v46 = (v9 - 1) & v9;
      uint64_t v12 = v11 | (i << 6);
      unsigned int v45 = i;
      goto LABEL_16;
    }
    unint64_t v13 = __OFADD__(1, i);
    BOOL v14 = i + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v42) {
      break;
    }
    uint64_t v15 = v44;
    unint64_t j = v44[v14];
    if (j)
    {
      unint64_t v17 = v14;
    }
    else
    {
      unint64_t v17 = v14 + 1;
      if (v14 + 1 >= v42) {
        goto LABEL_37;
      }
      unint64_t j = v44[v14 + 1];
      if (!j)
      {
        unint64_t v17 = v14 + 2;
        if (v14 + 2 >= v42)
        {
LABEL_37:
          uint64_t v39 = v48;
          swift_release();
          uint64_t v38 = v49;
          goto LABEL_39;
        }
        for (unint64_t j = v44[v14 + 2]; !j; unint64_t j = v44[v17])
        {
          unint64_t v13 = __OFADD__(1, v17++);
          if (v13) {
            BUG();
          }
          if (v17 >= v42) {
            goto LABEL_37;
          }
        }
      }
    }
    _BitScanForward64(&v18, j);
    uint64_t v46 = j & (j - 1);
    unsigned int v45 = v17;
    uint64_t v12 = v18 + (v17 << 6);
LABEL_16:
    uint64_t v19 = *(void *)(v48 + 48);
    uint64_t v20 = *(void *)(v19 + 16 * v12);
    unint64_t v21 = *(void *)(v19 + 16 * v12 + 8);
    uint64_t v43 = *(void *)(*(void *)(v48 + 56) + 8 * v12);
    if ((v47 & 1) == 0) {
      swift_bridgeObjectRetain(v21);
    }
    Hasher.init(_seed:)(*(void *)(v6 + 40));
    String.hash(into:)(v41, v20);
    unint64_t v22 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v6 + 32));
    unint64_t v23 = v22 >> 6;
    unint64_t v24 = ~*(void *)(v6 + 8 * (v22 >> 6) + 64) >> v22 << v22;
    if (v24)
    {
      _BitScanForward64(&v25, v24);
      uint64_t v26 = v25 | v22 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = (unint64_t)(63 - (-1 << *(unsigned char *)(v6 + 32))) >> 6;
      char v28 = 0;
      do
      {
        unint64_t v29 = v23 + 1;
        if (v23 + 1 == v27 && (v28 & 1) != 0) {
          BUG();
        }
        unint64_t v23 = 0;
        if (v29 != v27) {
          unint64_t v23 = v29;
        }
        v28 |= v29 == v27;
        uint64_t v30 = *(void *)(v6 + 8 * v23 + 64);
      }
      while (v30 == -1);
      unint64_t v31 = ~v30;
      uint64_t v32 = 64;
      if (v31) {
        _BitScanForward64((unint64_t *)&v32, v31);
      }
      uint64_t v26 = v32 + (v23 << 6);
    }
    uint64_t v33 = v43;
    uint64_t v34 = v45;
    unint64_t v9 = v46;
    *(void *)(v6 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    uint64_t v35 = *(void *)(v6 + 48);
    uint64_t v36 = 16 * v26;
    *(void *)(v35 + v36) = v20;
    *(void *)(v35 + v36 + 8) = v21;
    *(void *)(*(void *)(v6 + 56) + 8 * v26) = v33;
    ++*(void *)(v6 + 16);
  }
  uint64_t v39 = v48;
  swift_release();
  uint64_t v38 = v49;
  uint64_t v15 = v44;
LABEL_39:
  if (v47)
  {
    uint64_t v40 = 1 << *(unsigned char *)(v39 + 32);
    if (v40 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v40 + 63) >> 6, (uint64_t)v15);
    }
    else {
      *uint64_t v15 = -1 << (1 << *(unsigned char *)(v39 + 32));
    }
    *(void *)(v39 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_45:
  *uint64_t v38 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t j;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t result;
  char v38[72];
  uint64_t i;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  uint64_t *v46;

  uint64_t v46 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Double]>);
  unsigned int v45 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v35 = v46;
    goto LABEL_43;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  unsigned int v44 = (void *)(v3 + 64);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  uint64_t v8 = *(void *)(v3 + 64) & v7;
  uint64_t v40 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  unint64_t v9 = 0;
  for (i = v3; ; uint64_t v3 = i)
  {
    if (v8)
    {
      _BitScanForward64(&v10, v8);
      uint64_t v43 = (v8 - 1) & v8;
      unint64_t v11 = v10 | (v9 << 6);
      uint64_t v12 = v9;
      goto LABEL_16;
    }
    unint64_t v13 = __OFADD__(1, v9);
    BOOL v14 = v9 + 1;
    if (v13) {
      BUG();
    }
    if (v14 >= v40) {
      break;
    }
    unint64_t j = v44[v14];
    if (j)
    {
      uint64_t v12 = v14;
    }
    else
    {
      uint64_t v12 = v14 + 1;
      if (v14 + 1 >= v40) {
        break;
      }
      unint64_t j = v44[v14 + 1];
      if (!j)
      {
        uint64_t v12 = v14 + 2;
        if (v14 + 2 >= v40) {
          break;
        }
        for (unint64_t j = v44[v14 + 2]; !j; unint64_t j = v44[v12])
        {
          unint64_t v13 = __OFADD__(1, v12++);
          if (v13) {
            BUG();
          }
          if (v12 >= v40) {
            goto LABEL_36;
          }
        }
      }
    }
    _BitScanForward64(&v16, j);
    uint64_t v43 = j & (j - 1);
    unint64_t v11 = v16 + (v12 << 6);
LABEL_16:
    unint64_t v17 = *(void *)(v3 + 48);
    uint64_t v18 = *(void *)(v3 + 56);
    uint64_t v19 = *(void *)(v17 + 16 * v11);
    uint64_t v20 = *(void *)(v17 + 16 * v11 + 8);
    int64_t v41 = *(void *)(v18 + 8 * v11);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v41);
    }
    Hasher.init(_seed:)(*(void *)(v5 + 40));
    unint64_t v42 = v19;
    String.hash(into:)(v38, v19);
    unint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
    unint64_t v22 = v21 >> 6;
    unint64_t v23 = ~*(void *)(v5 + 8 * (v21 >> 6) + 64) >> v21 << v21;
    if (v23)
    {
      _BitScanForward64(&v24, v23);
      unint64_t v25 = v24 | v21 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
      unint64_t v27 = 0;
      do
      {
        char v28 = v22 + 1;
        if (v22 + 1 == v26 && (v27 & 1) != 0) {
          BUG();
        }
        unint64_t v22 = 0;
        if (v28 != v26) {
          unint64_t v22 = v28;
        }
        v27 |= v28 == v26;
        unint64_t v29 = *(void *)(v5 + 8 * v22 + 64);
      }
      while (v29 == -1);
      uint64_t v30 = ~v29;
      unint64_t v31 = 64;
      if (v30) {
        _BitScanForward64((unint64_t *)&v31, v30);
      }
      unint64_t v25 = v31 + (v22 << 6);
    }
    uint64_t v32 = v42;
    uint64_t v8 = v43;
    *(void *)(v5 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    uint64_t v33 = *(void *)(v5 + 48);
    uint64_t v34 = 16 * v25;
    *(void *)(v33 + v34) = v32;
    *(void *)(v33 + v34 + 8) = v20;
    *(void *)(*(void *)(v5 + 56) + 8 * v25) = v41;
    ++*(void *)(v5 + 16);
    unint64_t v9 = v12;
  }
LABEL_36:
  swift_release();
  uint64_t v35 = v46;
  if (v45)
  {
    uint64_t v36 = 1 << *(unsigned char *)(v3 + 32);
    if (v36 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, (uint64_t)v44);
    }
    else {
      *unsigned int v44 = -1 << (1 << *(unsigned char *)(v3 + 32));
    }
    *(void *)(v3 + 16) = 0;
  }
  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v35 = v5;
  return result;
}

uint64_t *specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, unsigned int a2)
{
  uint64_t v46 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  unsigned int v52 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v51 = (void *)(v3 + 64);
    uint64_t v7 = ~(-1 << v6);
    if (v6 >= 64) {
      uint64_t v7 = -1;
    }
    unint64_t v8 = *(void *)(v3 + 64) & v7;
    int64_t v45 = (unint64_t)(v6 + 63) >> 6;
    swift_retain(v3);
    int64_t v9 = 0;
    while (1)
    {
      if (v8)
      {
        _BitScanForward64(&v10, v8);
        uint64_t v49 = (v8 - 1) & v8;
        unint64_t v11 = v10 | (v9 << 6);
        int64_t v12 = v9;
      }
      else
      {
        BOOL v13 = __OFADD__(1, v9);
        int64_t v14 = v9 + 1;
        if (v13) {
          BUG();
        }
        if (v14 >= v45)
        {
LABEL_44:
          swift_release(v3);
          if (v52)
          {
            uint64_t v38 = 1 << *(unsigned char *)(v3 + 32);
            if (v38 >= 64) {
              specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v38 + 63) >> 6, (uint64_t)v51);
            }
            else {
              *uint64_t v51 = -1 << v38;
            }
            *(void *)(v3 + 16) = 0;
          }
          break;
        }
        unint64_t i = v51[v14];
        if (i)
        {
          int64_t v12 = v14;
        }
        else
        {
          int64_t v12 = v14 + 1;
          if (v14 + 1 >= v45) {
            goto LABEL_44;
          }
          unint64_t i = v51[v14 + 1];
          if (!i)
          {
            int64_t v12 = v14 + 2;
            if (v14 + 2 >= v45) {
              goto LABEL_44;
            }
            for (unint64_t i = v51[v14 + 2]; !i; unint64_t i = v51[v12])
            {
              BOOL v13 = __OFADD__(1, v12++);
              if (v13) {
                BUG();
              }
              if (v12 >= v45) {
                goto LABEL_44;
              }
            }
          }
        }
        _BitScanForward64(&v16, i);
        uint64_t v49 = i & (i - 1);
        unint64_t v11 = v16 + (v12 << 6);
      }
      uint64_t v17 = 24 * v11;
      uint64_t v18 = *(void *)(v3 + 48);
      uint64_t v19 = v3;
      uint64_t v20 = *(void *)(v3 + 56);
      Swift::UInt64 v53 = *(void *)(v18 + v17);
      uint64_t v50 = *(void **)(v18 + v17 + 8);
      unsigned __int8 v54 = *(unsigned char *)(v18 + v17 + 16);
      int v21 = v54;
      uint64_t v47 = *(void **)(v20 + v17);
      uint64_t v48 = *(void **)(v20 + v17 + 8);
      unsigned __int8 v55 = *(unsigned char *)(v20 + v17 + 16);
      if ((v52 & 1) == 0)
      {
        outlined copy of MLDataValue((void *)v53, v50, v54);
        outlined copy of MLDataValue(v47, v48, v55);
      }
      Hasher.init(_seed:)(*(void *)(v5 + 40));
      switch(v21)
      {
        case 0:
          Swift::UInt v22 = v53;
          goto LABEL_25;
        case 1:
          Swift::UInt64 v23 = v53 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v53 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v23 = v53;
          }
          Hasher._combine(_:)(v23);
          goto LABEL_26;
        case 2:
          String.hash(into:)(v44, v53);
          goto LABEL_26;
        case 3:
          unint64_t v42 = 0xD000000000000026;
          uint64_t v43 = 381;
          int64_t v41 = "t be used as dictionary key" + 0x8000000000000000;
          goto LABEL_57;
        case 4:
          uint64_t v43 = 383;
          uint64_t v40 = "t be used as dictionary key";
          goto LABEL_55;
        case 5:
          uint64_t v43 = 385;
          uint64_t v40 = "CreateML/MLDataValue.swift";
LABEL_55:
          int64_t v41 = (char *)((unint64_t)v40 | 0x8000000000000000);
          unint64_t v42 = 0xD00000000000002BLL;
LABEL_57:
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v42, v41, "CreateML/MLDataValue.swift", 26, 2, v43, 0);
          BUG();
        case 6:
          Swift::UInt v22 = 1;
LABEL_25:
          Hasher._combine(_:)(v22);
LABEL_26:
          uint64_t v3 = v19;
          unint64_t v24 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
          unint64_t v25 = v24 >> 6;
          unint64_t v26 = ~*(void *)(v5 + 8 * (v24 >> 6) + 64) >> v24 << v24;
          if (v26)
          {
            _BitScanForward64(&v27, v26);
            unint64_t v28 = v27 | v24 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            unint64_t v29 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
            char v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              if (v25 + 1 == v29 && (v30 & 1) != 0) {
                BUG();
              }
              unint64_t v25 = 0;
              if (v31 != v29) {
                unint64_t v25 = v31;
              }
              v30 |= v31 == v29;
              uint64_t v32 = *(void *)(v5 + 8 * v25 + 64);
            }
            while (v32 == -1);
            unint64_t v33 = ~v32;
            uint64_t v34 = 64;
            if (v33) {
              _BitScanForward64((unint64_t *)&v34, v33);
            }
            unint64_t v28 = v34 + (v25 << 6);
          }
          uint64_t v35 = 24 * v28;
          *(void *)(v5 + 8 * (v28 >> 6) + 64) |= 1 << v28;
          uint64_t v36 = *(void *)(v5 + 48);
          *(void *)(v36 + v35) = v53;
          *(void *)(v36 + v35 + 8) = v50;
          *(unsigned char *)(v36 + v35 + 16) = v54;
          uint64_t v37 = *(void *)(v5 + 56);
          *(void *)(v37 + v35) = v47;
          *(void *)(v37 + v35 + 8) = v48;
          *(unsigned char *)(v37 + v35 + 16) = v55;
          ++*(void *)(v5 + 16);
          int64_t v9 = v12;
          unint64_t v8 = v49;
          break;
      }
    }
  }
  swift_release(v3);
  uint64_t result = v46;
  uint64_t *v46 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  Swift::UInt v21;
  Swift::UInt64 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *result;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char v42[72];
  uint64_t v43;
  int64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  unsigned int v49;
  Swift::UInt64 v50;
  unsigned __int8 v51;

  int64_t v45 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, Int>);
  uint64_t v49 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v48 = (void *)(v3 + 64);
    uint64_t v7 = ~(-1 << v6);
    if (v6 >= 64) {
      uint64_t v7 = -1;
    }
    unint64_t v8 = *(void *)(v3 + 64) & v7;
    unsigned int v44 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v8)
      {
        _BitScanForward64(&v10, v8);
        uint64_t v46 = (v8 - 1) & v8;
        unint64_t v11 = v10 | (v9 << 6);
        int64_t v12 = v9;
      }
      else
      {
        BOOL v13 = __OFADD__(1, v9);
        int64_t v14 = v9 + 1;
        if (v13) {
          BUG();
        }
        if (v14 >= v44)
        {
LABEL_44:
          swift_release();
          if (v49)
          {
            uint64_t v36 = 1 << *(unsigned char *)(v3 + 32);
            if (v36 >= 64) {
              specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, (uint64_t)v48);
            }
            else {
              *uint64_t v48 = -1 << v36;
            }
            *(void *)(v3 + 16) = 0;
          }
          break;
        }
        unint64_t i = v48[v14];
        if (i)
        {
          int64_t v12 = v14;
        }
        else
        {
          int64_t v12 = v14 + 1;
          if (v14 + 1 >= v44) {
            goto LABEL_44;
          }
          unint64_t i = v48[v14 + 1];
          if (!i)
          {
            int64_t v12 = v14 + 2;
            if (v14 + 2 >= v44) {
              goto LABEL_44;
            }
            for (unint64_t i = v48[v14 + 2]; !i; unint64_t i = v48[v12])
            {
              BOOL v13 = __OFADD__(1, v12++);
              if (v13) {
                BUG();
              }
              if (v12 >= v44) {
                goto LABEL_44;
              }
            }
          }
        }
        _BitScanForward64(&v16, i);
        uint64_t v46 = i & (i - 1);
        unint64_t v11 = v16 + (v12 << 6);
      }
      uint64_t v17 = *(void *)(v3 + 48);
      uint64_t v18 = v3;
      uint64_t v19 = *(void *)(v3 + 56);
      uint64_t v50 = *(void *)(v17 + 24 * v11);
      uint64_t v47 = *(void **)(v17 + 24 * v11 + 8);
      uint64_t v51 = *(unsigned char *)(v17 + 24 * v11 + 16);
      uint64_t v20 = v51;
      uint64_t v43 = *(void *)(v19 + 8 * v11);
      if ((v49 & 1) == 0) {
        outlined copy of MLDataValue((void *)v50, v47, v51);
      }
      Hasher.init(_seed:)(*(void *)(v5 + 40));
      switch(v20)
      {
        case 0:
          int v21 = v50;
          goto LABEL_25;
        case 1:
          Swift::UInt v22 = v50 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v50 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt v22 = v50;
          }
          Hasher._combine(_:)(v22);
          goto LABEL_26;
        case 2:
          String.hash(into:)(v42, v50);
          goto LABEL_26;
        case 3:
          uint64_t v40 = 0xD000000000000026;
          int64_t v41 = 381;
          uint64_t v39 = "t be used as dictionary key" + 0x8000000000000000;
          goto LABEL_57;
        case 4:
          int64_t v41 = 383;
          uint64_t v38 = "t be used as dictionary key";
          goto LABEL_55;
        case 5:
          int64_t v41 = 385;
          uint64_t v38 = "CreateML/MLDataValue.swift";
LABEL_55:
          uint64_t v39 = (char *)((unint64_t)v38 | 0x8000000000000000);
          uint64_t v40 = 0xD00000000000002BLL;
LABEL_57:
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v40, v39, "CreateML/MLDataValue.swift", 26, 2, v41, 0);
          BUG();
        case 6:
          int v21 = 1;
LABEL_25:
          Hasher._combine(_:)(v21);
LABEL_26:
          uint64_t v3 = v18;
          Swift::UInt64 v23 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v5 + 32));
          unint64_t v24 = v23 >> 6;
          unint64_t v25 = ~*(void *)(v5 + 8 * (v23 >> 6) + 64) >> v23 << v23;
          if (v25)
          {
            _BitScanForward64(&v26, v25);
            unint64_t v27 = v26 | v23 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            unint64_t v28 = (unint64_t)(63 - (-1 << *(unsigned char *)(v5 + 32))) >> 6;
            unint64_t v29 = 0;
            do
            {
              char v30 = v24 + 1;
              if (v24 + 1 == v28 && (v29 & 1) != 0) {
                BUG();
              }
              unint64_t v24 = 0;
              if (v30 != v28) {
                unint64_t v24 = v30;
              }
              v29 |= v30 == v28;
              unint64_t v31 = *(void *)(v5 + 8 * v24 + 64);
            }
            while (v31 == -1);
            uint64_t v32 = ~v31;
            unint64_t v33 = 64;
            if (v32) {
              _BitScanForward64((unint64_t *)&v33, v32);
            }
            unint64_t v27 = v33 + (v24 << 6);
          }
          *(void *)(v5 + 8 * (v27 >> 6) + 64) |= 1 << v27;
          uint64_t v34 = *(void *)(v5 + 48);
          uint64_t v35 = 24 * v27;
          *(void *)(v34 + v35) = v50;
          *(void *)(v34 + v35 + 8) = v47;
          *(unsigned char *)(v34 + v35 + 16) = v51;
          *(void *)(*(void *)(v5 + 56) + 8 * v27) = v43;
          ++*(void *)(v5 + 16);
          int64_t v9 = v12;
          unint64_t v8 = v46;
          break;
      }
    }
  }
  swift_release();
  uint64_t result = v45;
  *int64_t v45 = v5;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  BOOL v18;
  int64_t v19;
  void *v20;
  unint64_t i;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *result;
  uint64_t v42;
  char v43[72];
  uint64_t v44;
  int64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  unsigned int v58;
  char v59;

  uint64_t v3 = a1;
  uint64_t v51 = type metadata accessor for URL(0);
  unsigned int v52 = *(void *)(v51 - 8);
  uint64_t v4 = *(void *)(v52 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  Swift::UInt64 v53 = &v42;
  uint64_t v57 = v2;
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    uint64_t v3 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, URL>);
  unint64_t v8 = v7;
  int64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v7, v3, a2);
  if (!*(void *)(v7 + 16)) {
    goto LABEL_53;
  }
  unint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v56 = (void *)(v7 + 64);
  unint64_t v11 = ~(-1 << v10);
  if (v10 >= 64) {
    unint64_t v11 = -1;
  }
  int64_t v12 = *(void *)(v7 + 64) & v11;
  int64_t v45 = (unint64_t)(v10 + 63) >> 6;
  swift_retain();
  uint64_t v58 = a2;
  unsigned int v44 = 16 * (a2 & 1) + 16;
  BOOL v13 = 0;
  uint64_t v46 = "accuracy" + 0x8000000000000000;
  uint64_t v47 = "validationAccuracy" + 0x8000000000000000;
  uint64_t v48 = "stylizedImageURL" + 0x8000000000000000;
  uint64_t v49 = "rror" + 0x8000000000000000;
  uint64_t v50 = "validationRootMeanSquaredError" + 0x8000000000000000;
  unsigned __int8 v55 = v7;
  while (1)
  {
    if (v12)
    {
      _BitScanForward64(&v14, v12);
      uint64_t v15 = (v12 - 1) & v12;
      unint64_t v16 = v14 | (v13 << 6);
      uint64_t v17 = v13;
      goto LABEL_16;
    }
    uint64_t v18 = __OFADD__(1, v13);
    uint64_t v19 = v13 + 1;
    if (v18) {
      BUG();
    }
    if (v19 >= v45) {
      break;
    }
    uint64_t v20 = v56;
    unint64_t i = v56[v19];
    if (i)
    {
      uint64_t v17 = v19;
    }
    else
    {
      uint64_t v17 = v19 + 1;
      if (v19 + 1 >= v45) {
        goto LABEL_46;
      }
      unint64_t i = v56[v19 + 1];
      if (!i)
      {
        uint64_t v17 = v19 + 2;
        if (v19 + 2 >= v45)
        {
LABEL_46:
          swift_release();
          uint64_t v39 = v58;
          goto LABEL_48;
        }
        for (unint64_t i = v56[v19 + 2]; !i; unint64_t i = v56[v17])
        {
          uint64_t v18 = __OFADD__(1, v17++);
          if (v18) {
            BUG();
          }
          if (v17 >= v45) {
            goto LABEL_46;
          }
        }
      }
    }
    _BitScanForward64(&v22, i);
    uint64_t v15 = i & (i - 1);
    unint64_t v16 = v22 + (v17 << 6);
LABEL_16:
    Swift::UInt64 v23 = v8;
    unint64_t v24 = *(unsigned char *)(*(void *)(v8 + 48) + v16);
    unint64_t v25 = *(void *)(v52 + 72);
    (*(void (**)(uint64_t *, unint64_t, uint64_t))(v52 + v44))(v53, *(void *)(v23 + 56) + v25 * v16, v51);
    Hasher.init(_seed:)(*(void *)(v9 + 40));
    int64_t v59 = v24;
    unsigned __int8 v54 = v15;
    switch(v24)
    {
      case 0:
        unint64_t v26 = 1936945004;
        unint64_t v27 = 0;
        break;
      case 1:
        unint64_t v26 = 0x4C746E65746E6F63;
        unint64_t v27 = 111;
        break;
      case 2:
        unint64_t v26 = 0x736F4C656C797473;
        unint64_t v27 = 115;
        break;
      case 3:
        unint64_t v26 = 0x7963617275636361;
        unint64_t v27 = 0;
        break;
      case 4:
        unint64_t v26 = 0x69746164696C6176;
        unint64_t v27 = 111;
        break;
      case 5:
        unint64_t v26 = 0xD000000000000012;
        unint64_t v27 = (char)v46;
        break;
      case 6:
        unint64_t v26 = 0xD000000000000010;
        unint64_t v27 = (char)v47;
        break;
      case 7:
        unint64_t v26 = 0xD000000000000014;
        unint64_t v27 = (char)v48;
        break;
      case 8:
        unint64_t v26 = 0x456D756D6978616DLL;
        unint64_t v27 = 114;
        break;
      case 9:
        unint64_t v26 = 0xD00000000000001ELL;
        unint64_t v27 = (char)v49;
        break;
      case 10:
        unint64_t v26 = 0xD000000000000016;
        unint64_t v27 = (char)v50;
        break;
    }
    String.hash(into:)(v43, v26);
    swift_bridgeObjectRelease(v27);
    unint64_t v28 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v9 + 32));
    unint64_t v29 = v28 >> 6;
    char v30 = ~*(void *)(v9 + 8 * (v28 >> 6) + 64) >> v28 << v28;
    if (v30)
    {
      _BitScanForward64(&v31, v30);
      uint64_t v32 = v31 | v28 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v33 = (unint64_t)(63 - (-1 << *(unsigned char *)(v9 + 32))) >> 6;
      uint64_t v34 = 0;
      do
      {
        uint64_t v35 = v29 + 1;
        if (v29 + 1 == v33 && (v34 & 1) != 0) {
          BUG();
        }
        unint64_t v29 = 0;
        if (v35 != v33) {
          unint64_t v29 = v35;
        }
        v34 |= v35 == v33;
        uint64_t v36 = *(void *)(v9 + 8 * v29 + 64);
      }
      while (v36 == -1);
      uint64_t v37 = ~v36;
      uint64_t v38 = 64;
      if (v37) {
        _BitScanForward64((unint64_t *)&v38, v37);
      }
      uint64_t v32 = v38 + (v29 << 6);
    }
    unint64_t v8 = v55;
    int64_t v12 = v54;
    *(void *)(v9 + 8 * (v32 >> 6) + 64) |= 1 << v32;
    *(unsigned char *)(*(void *)(v9 + 48) + v32) = v59;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v52 + 32))(*(void *)(v9 + 56) + v32 * v25, v53, v51);
    ++*(void *)(v9 + 16);
    BOOL v13 = v17;
  }
  swift_release();
  uint64_t v39 = v58;
  uint64_t v20 = v56;
LABEL_48:
  if (v39)
  {
    uint64_t v40 = 1 << *(unsigned char *)(v8 + 32);
    if (v40 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v40 + 63) >> 6, (uint64_t)v20);
    }
    else {
      *uint64_t v20 = -1 << (1 << *(unsigned char *)(v8 + 32));
    }
    *(void *)(v8 + 16) = 0;
  }
LABEL_53:
  swift_release();
  uint64_t result = v57;
  *uint64_t v57 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t j;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *result;
  uint64_t i;
  void *v25;
  int64_t v26;
  uint64_t *v27;
  int64_t v28;
  uint64_t v29;
  char v30;

  unint64_t v27 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  if (v4 <= a1) {
    uint64_t v4 = a1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLRecommender.Identifier, Int>);
  char v30 = a2;
  unint64_t v29 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v4, a2);
  if (*(void *)(v3 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
    unint64_t v25 = (void *)(v3 + 64);
    uint64_t v6 = ~(-1 << v5);
    if (v5 >= 64) {
      uint64_t v6 = -1;
    }
    uint64_t v7 = *(void *)(v3 + 64) & v6;
    unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    unint64_t v8 = 0;
    for (i = v3; ; uint64_t v3 = i)
    {
      if (v7)
      {
        _BitScanForward64(&v9, v7);
        v7 &= v7 - 1;
        unint64_t v10 = v9 | (v8 << 6);
        unint64_t v28 = v8;
      }
      else
      {
        unint64_t v11 = __OFADD__(1, v8);
        int64_t v12 = v8 + 1;
        if (v11) {
          BUG();
        }
        if (v12 >= v26)
        {
LABEL_25:
          swift_release();
          if (v30)
          {
            Swift::UInt v22 = 1 << *(unsigned char *)(v3 + 32);
            if (v22 > 63) {
              specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v22 + 63) >> 6, (uint64_t)v25);
            }
            else {
              *unint64_t v25 = -1 << (1 << *(unsigned char *)(v3 + 32));
            }
            *(void *)(v3 + 16) = 0;
          }
          break;
        }
        unint64_t j = v25[v12];
        if (j)
        {
          int64_t v14 = v12;
        }
        else
        {
          int64_t v14 = v12 + 1;
          if (v12 + 1 >= v26) {
            goto LABEL_25;
          }
          unint64_t j = v25[v12 + 1];
          if (!j)
          {
            int64_t v14 = v12 + 2;
            if (v12 + 2 >= v26) {
              goto LABEL_25;
            }
            for (unint64_t j = v25[v12 + 2]; !j; unint64_t j = v25[v14])
            {
              unint64_t v11 = __OFADD__(1, v14++);
              if (v11) {
                BUG();
              }
              if (v14 >= v26) {
                goto LABEL_25;
              }
            }
          }
        }
        _BitScanForward64(&v15, j);
        uint64_t v7 = j & (j - 1);
        unint64_t v28 = v14;
        unint64_t v10 = v15 + (v14 << 6);
      }
      unint64_t v16 = *(void *)(v3 + 48);
      uint64_t v17 = *(void *)(v3 + 56);
      uint64_t v18 = *(void *)(v16 + 24 * v10);
      uint64_t v19 = *(void *)(v16 + 24 * v10 + 8);
      uint64_t v20 = *(void *)(v17 + 8 * v10);
      int v21 = *(unsigned char *)(v16 + 24 * v10 + 16);
      if ((v30 & 1) == 0) {
        outlined copy of MLRecommender.Identifier(*(void *)(v16 + 24 * v10), *(void *)(v16 + 24 * v10 + 8), *(unsigned char *)(v16 + 24 * v10 + 16));
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, v21, v20, v29);
      unint64_t v8 = v28;
    }
  }
  swift_release();
  uint64_t result = v27;
  *unint64_t v27 = v29;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, unsigned int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = a1;
  uint64_t v51 = a3(0);
  uint64_t v49 = *(void *)(v51 - 8);
  int64_t v7 = *(void *)(v49 + 64);
  unint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  unsigned int v52 = v46;
  uint64_t v56 = v4;
  uint64_t v10 = *v4;
  if (*(void *)(*v4 + 24) > a1) {
    uint64_t v6 = *(void *)(*v4 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(a4);
  unsigned int v54 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v10, v6, a2);
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_release(v11);
    uint64_t v43 = v56;
    goto LABEL_44;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  Swift::UInt64 v53 = (void *)(v11 + 64);
  uint64_t v14 = ~(-1 << v13);
  if (v13 >= 64) {
    uint64_t v14 = -1;
  }
  unint64_t v15 = *(void *)(v11 + 64) & v14;
  int64_t v47 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v55 = v11;
  swift_retain(v11);
  int64_t v16 = 0;
  while (1)
  {
    if (v15)
    {
      _BitScanForward64(&v17, v15);
      uint64_t v50 = (v15 - 1) & v15;
      unint64_t v18 = v17 | (v16 << 6);
      int64_t v19 = v16;
      goto LABEL_16;
    }
    BOOL v20 = __OFADD__(1, v16);
    int64_t v21 = v16 + 1;
    if (v20) {
      BUG();
    }
    if (v21 >= v47) {
      break;
    }
    unint64_t i = v53[v21];
    if (i)
    {
      int64_t v19 = v21;
    }
    else
    {
      int64_t v19 = v21 + 1;
      if (v21 + 1 >= v47) {
        break;
      }
      unint64_t i = v53[v21 + 1];
      if (!i)
      {
        int64_t v19 = v21 + 2;
        if (v21 + 2 >= v47) {
          break;
        }
        for (unint64_t i = v53[v21 + 2]; !i; unint64_t i = v53[v19])
        {
          BOOL v20 = __OFADD__(1, v19++);
          if (v20) {
            BUG();
          }
          if (v19 >= v47) {
            goto LABEL_37;
          }
        }
      }
    }
    _BitScanForward64(&v23, i);
    uint64_t v50 = i & (i - 1);
    unint64_t v18 = v23 + (v19 << 6);
LABEL_16:
    uint64_t v24 = *(void *)(v55 + 48);
    uint64_t v48 = *(void *)(v24 + 16 * v18);
    uint64_t v25 = *(void *)(v24 + 16 * v18 + 8);
    uint64_t v26 = *(void *)(v49 + 72);
    unint64_t v27 = *(void *)(v55 + 56) + v26 * v18;
    if (v54)
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v49 + 32))(v52, v27, v51);
    }
    else
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v49 + 16))(v52, v27, v51);
      swift_bridgeObjectRetain(v25);
    }
    Hasher.init(_seed:)(*(void *)(v12 + 40));
    String.hash(into:)(v46, v48);
    unint64_t v28 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v12 + 32));
    unint64_t v29 = v28 >> 6;
    unint64_t v30 = ~*(void *)(v12 + 8 * (v28 >> 6) + 64) >> v28 << v28;
    if (v30)
    {
      _BitScanForward64(&v31, v30);
      unint64_t v32 = v31 | v28 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v33 = (unint64_t)(63 - (-1 << *(unsigned char *)(v12 + 32))) >> 6;
      char v34 = 0;
      do
      {
        unint64_t v35 = v29 + 1;
        if (v29 + 1 == v33 && (v34 & 1) != 0) {
          BUG();
        }
        unint64_t v29 = 0;
        if (v35 != v33) {
          unint64_t v29 = v35;
        }
        v34 |= v35 == v33;
        uint64_t v36 = *(void *)(v12 + 8 * v29 + 64);
      }
      while (v36 == -1);
      unint64_t v37 = ~v36;
      uint64_t v38 = 64;
      if (v37) {
        _BitScanForward64((unint64_t *)&v38, v37);
      }
      unint64_t v32 = v38 + (v29 << 6);
    }
    *(void *)(v12 + 8 * (v32 >> 6) + 64) |= 1 << v32;
    uint64_t v39 = *(void *)(v12 + 48);
    unint64_t v40 = v32 * v26;
    uint64_t v41 = 16 * v32;
    *(void *)(v39 + v41) = v48;
    *(void *)(v39 + v41 + 8) = v25;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v49 + 32))(*(void *)(v12 + 56) + v40, v52, v51);
    ++*(void *)(v12 + 16);
    int64_t v16 = v19;
    unint64_t v15 = v50;
  }
LABEL_37:
  uint64_t v42 = v55;
  swift_release(v55);
  uint64_t v43 = v56;
  if (v54)
  {
    uint64_t v44 = 1 << *(unsigned char *)(v42 + 32);
    if (v44 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v44 + 63) >> 6, (uint64_t)v53);
    }
    else {
      *Swift::UInt64 v53 = -1 << (1 << *(unsigned char *)(v42 + 32));
    }
    *(void *)(v42 + 16) = 0;
  }
  uint64_t result = swift_release(v42);
LABEL_44:
  uint64_t *v43 = v12;
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  Hasher.init(_seed:)(*(void *)(a5 + 40));
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)(v11, a1);
  }
  Swift::Int v7 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(~(-1 << *(unsigned char *)(a5 + 32)) & v7, a5 + 64);
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v9 = *(void *)(a5 + 48);
  uint64_t v10 = 24 * result;
  *(void *)(v9 + v10) = a1;
  *(void *)(v9 + v10 + 8) = a2;
  *(unsigned char *)(v9 + v10 + 16) = a3 & 1;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = v12;
  ++*(void *)(a5 + 16);
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  return a2;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4)
{
  *a1 = a3;
  return outlined init with copy of Any(a4, a2);
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  return a2;
}

void *specialized LazyMapSequence.makeIterator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized LazyMapSequence.makeIterator()(a1, a2, a3);
}

{
  void *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = -(-1 << *(unsigned char *)(a1 + 32));
  uint64_t v5 = ~(-1 << v4);
  if (v4 >= 64) {
    uint64_t v5 = -1;
  }
  uint64_t v6 = *(void *)(a1 + 64) & v5;
  Swift::Int v7 = ~(-1 << *(unsigned char *)(a1 + 32));
  *unint64_t result = a1;
  result[1] = a1 + 64;
  result[2] = v7;
  result[3] = 0;
  result[4] = v6;
  result[5] = a2;
  result[6] = a3;
  return result;
}

BOOL specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t *a1, uint64_t a2, int a3)
{
  return specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(*a1, a2, a3);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6[0];
  *uint64_t v2 = result;
  v2[1] = v5;
  v2[2] = v4;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  long long v4;
  uint64_t v5;
  long long v6;

  uint64_t v2 = v1;
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(&v6, *a1, a1[1], a1[2], a1[3]);
  uint64_t v4 = v6;
  *(void *)uint64_t v2 = result;
  *(void *)(v2 + 8) = v5;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

uint64_t *partial apply for closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t *a2)
{
  return closure #1 in Tensor.doubleArray()(a1, a2, *(void *)(v2 + 16));
}

BOOL specialized closure #1 in Layer.parameterKeyPath(for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in Layer.parameterKeyPath(for:)(*a1, a2, a3);
}

BOOL partial apply for specialized closure #1 in Layer.parameterKeyPath(for:)(uint64_t *a1)
{
  return specialized closure #1 in Layer.parameterKeyPath(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t *a1)
{
  return specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(a1, *(void *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

{
  return partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(a1);
}

BOOL closure #1 in Layer.parameterKeyPath(for:)specialized partial apply(uint64_t *a1)
{
  return partial apply for specialized closure #1 in Layer.parameterKeyPath(for:)(a1);
}

uint64_t *closure #1 in Tensor.doubleArray()partial apply(uint64_t a1, uint64_t *a2)
{
  return partial apply for closure #1 in Tensor.doubleArray()(a1, a2);
}

{
  return partial apply for closure #1 in Tensor.doubleArray()(a1, a2);
}

char specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v7 = a3[4];
    uint64_t v8 = a3[5];
    if (v7 == a1 && v8 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0) {
      return 1;
    }
    if (v3 != 1)
    {
      uint64_t v10 = a3 + 7;
      uint64_t v11 = 1;
      while (1)
      {
        if (__OFADD__(1, v11++)) {
          BUG();
        }
        uint64_t v13 = *(v10 - 1);
        uint64_t v14 = *v10;
        if (v13 == a1 && v14 == a2) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a1, a2, 0)) {
          break;
        }
        v10 += 2;
        char result = 0;
        if (v11 == v3) {
          return result;
        }
      }
      return 1;
    }
  }
  return 0;
}

BOOL specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  BOOL result = 1;
  if (*(void *)(a2 + 32) == a1) {
    return result;
  }
  if (v2 == 1) {
    return 0;
  }
  uint64_t v4 = 5;
  do
  {
    uint64_t v5 = v4 - 4 + 1;
    if (__OFADD__(1, v4 - 4)) {
      BUG();
    }
    BOOL result = *(void *)(a2 + 8 * v4) == a1;
    if (*(void *)(a2 + 8 * v4) == a1) {
      break;
    }
    ++v4;
  }
  while (v5 != v2);
  return result;
}

uint64_t specialized DataFrame.containsColumn<A>(_:_:)(Swift::String a1)
{
  LODWORD(v1) = 0;
  uint64_t v15 = type metadata accessor for AnyColumn(0);
  uint64_t v2 = *(void *)(v15 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v16 = &v14;
  Swift::Int_optional v6 = DataFrame.indexOfColumn(_:)(a1);
  if (!v6.is_nil)
  {
    Swift::Int value = v6.value;
    uint64_t v8 = DataFrame.columns.getter();
    if (value < 0) {
      BUG();
    }
    uint64_t v1 = v8;
    if ((unint64_t)value >= *(void *)(v8 + 16)) {
      BUG();
    }
    uint64_t v9 = v16;
    uint64_t v10 = ((*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80)) + v8 + *(void *)(v2 + 72) * value;
    uint64_t v11 = v15;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v16, v10, v15);
    swift_bridgeObjectRelease(v1);
    uint64_t v12 = (void *)AnyColumn.wrappedElementType.getter();
    (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v9, v11);
    LOBYTE(v1) = v12 == &type metadata for String;
  }
  return v1;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  Swift::Int_optional v6;
  Swift::Int value;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  LODWORD(v1) = 0;
  uint64_t v15 = type metadata accessor for AnyColumn(0);
  uint64_t v2 = *(void *)(v15 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v16 = &v14;
  Swift::Int_optional v6 = DataFrame.indexOfColumn(_:)(a1);
  if (!v6.is_nil)
  {
    Swift::Int value = v6.value;
    uint64_t v8 = DataFrame.columns.getter();
    if (value < 0) {
      BUG();
    }
    uint64_t v1 = v8;
    if ((unint64_t)value >= *(void *)(v8 + 16)) {
      BUG();
    }
    uint64_t v9 = v16;
    uint64_t v10 = ((*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80)) + v8 + *(void *)(v2 + 72) * value;
    uint64_t v11 = v15;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v16, v10, v15);
    swift_bridgeObjectRelease(v1);
    uint64_t v12 = (void *)AnyColumn.wrappedElementType.getter();
    (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v9, v11);
    LOBYTE(v1) = v12 == &type metadata for Int;
  }
  return v1;
}

{
  unsigned int v1;
  uint64_t v2;
  int64_t v3;
  void *v4;
  void *v5;
  Swift::Int_optional v6;
  Swift::Int value;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  uint64_t v1 = 0;
  uint64_t v15 = type metadata accessor for AnyColumn(0);
  uint64_t v2 = *(void *)(v15 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  int64_t v16 = &v14;
  Swift::Int_optional v6 = DataFrame.indexOfColumn(_:)(a1);
  if (!v6.is_nil)
  {
    Swift::Int value = v6.value;
    uint64_t v8 = DataFrame.columns.getter(a1._countAndFlagsBits, a1._object);
    if (value < 0) {
      BUG();
    }
    uint64_t v1 = v8;
    if ((unint64_t)value >= *(void *)(v8 + 16)) {
      BUG();
    }
    uint64_t v9 = v16;
    uint64_t v10 = ((*(unsigned __int8 *)(v2 + 80) + 32) & ~*(unsigned __int8 *)(v2 + 80)) + v8 + *(void *)(v2 + 72) * value;
    uint64_t v11 = v15;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v16, v10, v15);
    swift_bridgeObjectRelease(v1);
    uint64_t v12 = AnyColumn.wrappedElementType.getter();
    (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v9, v11);
    LOBYTE(v1) = v12 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLDataValue]);
  }
  return v1;
}

uint64_t specialized _UntypedColumn.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v4 = tc_v1_flex_list_create(0);
  if (!v4) {
    BUG();
  }
  uint64_t v5 = v4;
  uint64_t v26 = v3;
  uint64_t v6 = type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject(v6, v19);
  *(void *)(inited + 16) = v5;
  uint64_t v25 = inited;
  *(unsigned char *)(inited + 24) = 1;
  if (a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v24 = a1;
    if (a1 > 0) {
      uint64_t v9 = a1;
    }
    uint64_t v23 = v9;
    do
    {
      if (v23 == v8) {
        BUG();
      }
      v21[3] = &type metadata for Int;
      v21[4] = &protocol witness table for Int;
      v21[0] = v22;
      uint64_t v10 = __swift_project_boxed_opaque_existential_0Tm(v21, (uint64_t)&type metadata for Int);
      uint64_t v11 = specialized handling<A, B>(_:_:)(*v10);
      if (v2)
      {
        swift_unexpectedError(v2, "CreateML/MLDataValueConvertible.swift", 37, 1, 100);
        BUG();
      }
      uint64_t v12 = v11;
      if (!v11) {
        BUG();
      }
      uint64_t v13 = type metadata accessor for CMLFeatureValue();
      swift_initStackObject(v13, v20);
      uint64_t v14 = CMLFeatureValue.init(rawValue:ownsValue:)(v12, 1);
      __swift_destroy_boxed_opaque_existential_1Tm(v21);
      CMLSequence.append(_:)(v14);
      ++v8;
      swift_release();
    }
    while (v24 != v8);
  }
  type metadata accessor for CMLColumn();
  uint64_t v15 = CMLColumn.__allocating_init(_:type:)(v25, 0);
  uint64_t v16 = v26;
  if (v2)
  {
    uint64_t v17 = type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance(v16, v17, 24, 7);
  }
  else
  {
    *(void *)(v26 + 16) = v15;
  }
  return v16;
}

uint64_t specialized _UntypedColumn.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v33 = a3;
  uint64_t v27 = a2;
  uint64_t v6 = tc_v1_flex_list_create(0);
  if (!v6) {
    BUG();
  }
  uint64_t v7 = v6;
  uint64_t v32 = v4;
  uint64_t v8 = type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject(v8, v23);
  *(void *)(inited + 16) = v7;
  uint64_t v31 = inited;
  *(unsigned char *)(inited + 24) = 1;
  if (a1)
  {
    uint64_t v10 = 0;
    uint64_t v29 = type metadata accessor for CMLFeatureValue();
    uint64_t v11 = 0;
    uint64_t v30 = a1;
    if (a1 > 0) {
      uint64_t v11 = a1;
    }
    uint64_t v28 = v11;
    do
    {
      if (v28 == v10) {
        BUG();
      }
      uint64_t v26 = v10;
      v24[3] = &type metadata for String;
      v24[4] = &protocol witness table for String;
      v24[0] = v27;
      uint64_t v25 = v5;
      uint64_t v12 = v33;
      v24[1] = v33;
      uint64_t v13 = __swift_project_boxed_opaque_existential_0Tm(v24, (uint64_t)&type metadata for String);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain_n(v12, 2);
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = v25;
      uint64_t v17 = CMLFeatureValue.__allocating_init(_:)(v14, v15);
      uint64_t v5 = v16;
      if (v16)
      {
        swift_unexpectedError(v16, "CreateML/MLDataValueConvertible.swift", 37, 1, 170);
        BUG();
      }
      uint64_t v18 = v17;
      __swift_destroy_boxed_opaque_existential_1Tm(v24);
      CMLSequence.append(_:)(v18);
      uint64_t v10 = v26 + 1;
      swift_release();
      swift_bridgeObjectRelease(v33);
    }
    while (v30 != v10);
  }
  swift_bridgeObjectRelease(v33);
  type metadata accessor for CMLColumn();
  uint64_t v19 = CMLColumn.__allocating_init(_:type:)(v31, 2);
  uint64_t v20 = v32;
  if (v5)
  {
    uint64_t v21 = type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance(v20, v21, 24, 7);
  }
  else
  {
    *(void *)(v32 + 16) = v19;
  }
  return v20;
}

uint64_t specialized _UntypedColumn.init<A>(_:)(uint64_t a1, double a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = tc_v1_flex_list_create(0);
  if (!v5) {
    BUG();
  }
  uint64_t v6 = v5;
  uint64_t v27 = v2;
  uint64_t v26 = v3;
  uint64_t v7 = type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject(v7, v21);
  *(void *)(inited + 16) = v6;
  uint64_t v25 = inited;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    uint64_t v9 = 0;
    uint64_t v24 = a1;
    while (1)
    {
      uint64_t v10 = *(void **)(v4 + 8 * v9 + 32);
      v22[3] = &type metadata for MLDataValue.MultiArrayType;
      v22[4] = &protocol witness table for MLDataValue.MultiArrayType;
      v22[0] = v10;
      __swift_project_boxed_opaque_existential_0Tm(v22, (uint64_t)&type metadata for MLDataValue.MultiArrayType);
      id v11 = v10;
      id v12 = v11;
      uint64_t v13 = MLDataValue.MultiArrayType.featureValue.getter();
      __swift_destroy_boxed_opaque_existential_1Tm(v22);
      uint64_t v14 = v27;
      CMLSequence.append(_:)(v13);
      uint64_t v27 = v14;
      if (v14) {
        break;
      }
      ++v9;
      swift_release();

      uint64_t v4 = v24;
      if (v23 == v9) {
        goto LABEL_6;
      }
    }
    swift_release();
    swift_setDeallocating(v25);
    uint64_t v18 = CMLFeatureValue.deinit(a2);
    swift_deallocClassInstance(v18, 25, 7);
    swift_bridgeObjectRelease(v24);

    uint64_t v17 = v26;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease(v4);
    type metadata accessor for CMLColumn();
    uint64_t v15 = v27;
    uint64_t v16 = CMLColumn.__allocating_init(_:type:)(v25, 6);
    if (!v15)
    {
      uint64_t v17 = v26;
      *(void *)(v26 + 16) = v16;
      return v17;
    }
    uint64_t v17 = v26;
  }
  uint64_t v19 = type metadata accessor for _UntypedColumn();
  swift_deallocPartialClassInstance(v17, v19, 24, 7);
  return v17;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[32];
  void v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v4 = v2;
  uint64_t v29 = v3;
  uint64_t v5 = tc_v1_flex_list_create(0);
  if (!v5) {
    BUG();
  }
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject(v7, v22);
  *(void *)(inited + 16) = v6;
  uint64_t v28 = inited;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v31 = a1;
  if (v26)
  {
    uint64_t v9 = a1;
    uint64_t v30 = v2;
    uint64_t v27 = lazy protocol witness table accessor for type [String : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Double] and conformance <> [A : B], &demangling cache variable for type metadata for [String : Double], (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0;
    while (1)
    {
      id v11 = *(void *)(v9 + 8 * v10 + 32);
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      uint64_t v25 = v27;
      v23[0] = v11;
      id v12 = *__swift_project_boxed_opaque_existential_0Tm(v23, v24);
      swift_bridgeObjectRetain_n(v11, 2);
      uint64_t v13 = specialized Dictionary<>.featureValue.getter(v12);
      __swift_destroy_boxed_opaque_existential_1Tm(v23);
      uint64_t v14 = v30;
      CMLSequence.append(_:)(v13);
      uint64_t v30 = v14;
      if (v14) {
        break;
      }
      ++v10;
      swift_release();
      swift_bridgeObjectRelease(v11);
      uint64_t v9 = v31;
      if (v26 == v10)
      {
        swift_bridgeObjectRelease(v31);
        uint64_t v15 = v29;
        uint64_t v4 = v30;
        goto LABEL_8;
      }
    }
    swift_release();
    swift_setDeallocating(v28);
    uint64_t v18 = CMLFeatureValue.deinit(a2);
    swift_deallocClassInstance(v18, 25, 7);
    swift_bridgeObjectRelease(v11);
    uint64_t v17 = v31;
    swift_bridgeObjectRelease(v31);
    uint64_t v15 = v29;
  }
  else
  {
    uint64_t v15 = v29;
LABEL_8:
    type metadata accessor for CMLColumn();
    uint64_t v16 = CMLColumn.__allocating_init(_:type:)(v28, 4);
    if (!v4)
    {
      uint64_t v20 = v16;
      swift_bridgeObjectRelease(v31);
      *(void *)(v15 + 16) = v20;
      return v15;
    }
    uint64_t v17 = v31;
  }
  swift_bridgeObjectRelease(v17);
  uint64_t v19 = type metadata accessor for _UntypedColumn();
  swift_deallocPartialClassInstance(v15, v19, 24, 7);
  return v15;
}

uint64_t static MLObjectDetectorMetrics.__evaluation(on:imageColumn:annotationColumn:predictionColumn:classes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v36 = v8;
  v32._uint64_t countAndFlagsBits = a6;
  uint64_t v31 = v7;
  uint64_t v34 = type metadata accessor for DataFrame(0);
  uint64_t v35 = *(void *)(v34 - 8);
  int64_t v11 = *(void *)(v35 + 64);
  id v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  char v14 = *(unsigned char *)(a1 + 8);
  uint64_t v29 = *(void *)a1;
  char v30 = v14;
  outlined copy of Result<_DataTable, Error>(v29, v14);
  DataFrame.init(_:)((uint64_t)&v29);
  v15._uint64_t countAndFlagsBits = a4;
  v15._char object = a5;
  if (specialized DataFrame.containsColumn<A>(_:_:)(v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLDataValue]);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLObjectDetector.ObjectAnnotation]);
    uint64_t v18 = v36;
    DataFrame.transformColumn<A, B>(_:_:)(a4, a5, specialized thunk for @callee_guaranteed (@guaranteed [MLDataValue]) -> (@owned [MLObjectDetector.ObjectAnnotation], @error @owned Error), 0, v16, v17);
    if (v18) {
      goto LABEL_8;
    }
    uint64_t v36 = 0;
  }
  uint64_t v33 = a4;
  v32._char object = a5;
  uint64_t countAndFlagsBits = v32._countAndFlagsBits;
  v20._uint64_t countAndFlagsBits = v32._countAndFlagsBits;
  v20._char object = a7;
  if (specialized DataFrame.containsColumn<A>(_:_:)(v20))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLDataValue]);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLObjectDetector.ObjectAnnotation]);
    uint64_t v23 = v36;
    DataFrame.transformColumn<A, B>(_:_:)(countAndFlagsBits, a7, specialized thunk for @callee_guaranteed (@guaranteed [MLDataValue]) -> (@owned [MLObjectDetector.ObjectAnnotation], @error @owned Error), 0, v21, v22);
    if (v23) {
      goto LABEL_8;
    }
    uint64_t v36 = 0;
    uint64_t countAndFlagsBits = v32._countAndFlagsBits;
  }
  uint64_t v24 = v36;
  static MLObjectDetectorMetrics.evaluation(on:annotationColumn:predictionColumn:)((uint64_t)&v28, v33, (uint64_t)v32._object, countAndFlagsBits, (uint64_t)a7);
  if (!v24)
  {
    uint64_t v25 = v34;
    uint64_t v26 = v35;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v26 + 8))(&v28, v25);
  }
LABEL_8:
  uint64_t v25 = v34;
  uint64_t v26 = v35;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v26 + 8))(&v28, v25);
}

uint64_t static MLObjectDetectorMetrics.evaluation(on:annotationColumn:predictionColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v67 = v6;
  uint64_t v64 = a5;
  uint64_t v65 = a4;
  uint64_t v68 = v5;
  uint64_t v8 = type metadata accessor for AnyColumn(0);
  uint64_t v76 = *(void *)(v8 - 8);
  int64_t v9 = *(void *)(v76 + 64);
  uint64_t v10 = alloca(v9);
  int64_t v11 = alloca(v9);
  uint64_t v74 = v61;
  id v12 = alloca(v9);
  uint64_t v13 = alloca(v9);
  char v14 = v61;
  uint64_t v15 = v8;
  uint64_t v66 = a1;
  DataFrame.subscript.getter(a2, a3);
  uint64_t v16 = lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
  uint64_t v17 = dispatch thunk of Collection.count.getter(v15, v16);
  uint64_t v18 = v76;
  uint64_t v19 = v17;
  Swift::String v20 = _swiftEmptyArrayStorage;
  unint64_t v70 = _swiftEmptyArrayStorage;
  uint64_t v69 = v15;
  uint64_t v72 = v16;
  if (v19)
  {
    uint64_t v79 = _swiftEmptyArrayStorage;
    int64_t v21 = 0;
    if (v19 > 0) {
      int64_t v21 = v19;
    }
    uint64_t v77 = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v78 = v61;
    dispatch thunk of Collection.startIndex.getter(v15, v16);
    uint64_t v22 = v77;
    if (v77 < 0) {
      BUG();
    }
    uint64_t v23 = v15;
    uint64_t v73 = (char *)&type metadata for Any + 8;
    while (1)
    {
      BOOL v24 = v22 == 0;
      uint64_t v25 = v22 - 1;
      if (v24) {
        BUG();
      }
      uint64_t v77 = v25;
      uint64_t v26 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v61, v75, v23, v16);
      outlined init with copy of Any?(v27, (uint64_t)v63);
      v26(v61, 0);
      outlined init with copy of Any?((uint64_t)v63, (uint64_t)v61);
      if (!v62) {
        break;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLObjectDetector.ObjectAnnotation]);
      if (!swift_dynamicCast(&v71, v61, v73, v28, 6)) {
        goto LABEL_16;
      }
      uint64_t v29 = v71;
      outlined destroy of Any?((uint64_t)v63);
      char v30 = v79;
      if (!swift_isUniquelyReferenced_nonNull_native(v79))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1);
        char v30 = v79;
      }
      unint64_t v31 = v30[2];
      if (v30[3] >> 1 <= v31)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30[3] >= 2uLL, v31 + 1, 1);
        char v30 = v79;
      }
      void v30[2] = v31 + 1;
      v30[v31 + 4] = v29;
      uint64_t v23 = v69;
      uint64_t v16 = v72;
      dispatch thunk of Collection.formIndex(after:)(v75, v69, v72);
      uint64_t v22 = v77;
      if (!v77)
      {
        Swift::String v20 = v30;
        uint64_t v15 = v23;
        uint64_t v18 = v76;
        char v14 = v78;
        goto LABEL_17;
      }
    }
    outlined destroy of Any?((uint64_t)v61);
LABEL_16:
    Swift::String v32 = v78;
    uint64_t v33 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v33, 0, 0);
    *(void *)uint64_t v34 = 0xD00000000000004CLL;
    *(void *)(v34 + 8) = "ce from prediction." + 0x8000000000000000;
    *(_OWORD *)(v34 + 16) = 0;
    *(_OWORD *)(v34 + 32) = 0;
    *(unsigned char *)(v34 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v33, v34, v35, v36, v37);
    outlined destroy of Any?((uint64_t)v63);
    swift_release();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v76 + 8))(v32, v23);
  }
  else
  {
LABEL_17:
    uint64_t v78 = v20;
    uint64_t v76 = *(void *)(v18 + 8);
    ((void (*)(unsigned char *, uint64_t))v76)(v14, v15);
    uint64_t v39 = v16;
    unint64_t v40 = v74;
    DataFrame.subscript.getter(v65, v64);
    uint64_t v41 = dispatch thunk of Collection.count.getter(v15, v39);
    if (v41)
    {
      uint64_t v79 = _swiftEmptyArrayStorage;
      int64_t v42 = 0;
      if (v41 > 0) {
        int64_t v42 = v41;
      }
      uint64_t v77 = v41;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
      dispatch thunk of Collection.startIndex.getter(v15, v39);
      uint64_t v43 = v77;
      if (v77 < 0) {
        BUG();
      }
      uint64_t v44 = v15;
      uint64_t v73 = (char *)&type metadata for Any + 8;
      while (1)
      {
        BOOL v24 = v43 == 0;
        uint64_t v45 = v43 - 1;
        if (v24) {
          BUG();
        }
        uint64_t v77 = v45;
        uint64_t v46 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read(v61, v75, v44, v72);
        outlined init with copy of Any?(v47, (uint64_t)v63);
        v46(v61, 0);
        outlined init with copy of Any?((uint64_t)v63, (uint64_t)v61);
        if (!v62) {
          break;
        }
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLObjectDetector.ObjectAnnotation]);
        char v49 = swift_dynamicCast(&v71, v61, v73, v48, 6);
        char v50 = (char)v78;
        if (!v49) {
          goto LABEL_32;
        }
        uint64_t v51 = v71;
        outlined destroy of Any?((uint64_t)v63);
        unsigned int v52 = v79;
        if (!swift_isUniquelyReferenced_nonNull_native(v79))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1);
          unsigned int v52 = v79;
        }
        unint64_t v53 = v52[2];
        if (v52[3] >> 1 <= v53)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52[3] >= 2uLL, v53 + 1, 1);
          unsigned int v52 = v79;
        }
        v52[2] = v53 + 1;
        v52[v53 + 4] = v51;
        unint64_t v40 = v74;
        uint64_t v44 = v69;
        dispatch thunk of Collection.formIndex(after:)(v75, v69, v72);
        uint64_t v43 = v77;
        if (!v77)
        {
          unint64_t v70 = v52;
          uint64_t v15 = v44;
          goto LABEL_33;
        }
      }
      outlined destroy of Any?((uint64_t)v61);
      char v50 = (char)v78;
LABEL_32:
      uint64_t v54 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v54, 0, 0);
      *(void *)uint64_t v55 = 0xD00000000000004CLL;
      *(void *)(v55 + 8) = "ctDetector.ObjectAnnotation." + 0x8000000000000000;
      *(_OWORD *)(v55 + 16) = 0;
      *(_OWORD *)(v55 + 32) = 0;
      *(unsigned char *)(v55 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v54, v55, v56, v57, v58);
      outlined destroy of Any?((uint64_t)v63);
      swift_bridgeObjectRelease(v50);
      swift_release();
      return ((uint64_t (*)(unsigned char *, uint64_t))v76)(v74, v44);
    }
    else
    {
LABEL_33:
      ((void (*)(unsigned char *, uint64_t))v76)(v40, v15);
      char v59 = (char)v78;
      char v60 = (char)v70;
      static MLObjectDetector.evaluation(on:detectedObjects:)((char)v78, (char)v70);
      swift_bridgeObjectRelease(v59);
      return swift_bridgeObjectRelease(v60);
    }
  }
}

void *closure #1 in static MLObjectDetectorMetrics.convertToObjectAnnotationFrame(_:annotationColumn:predictionColumn:)(uint64_t a1, __m128i a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = v2;
  BOOL v24 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  for (unint64_t i = (unsigned char *)(a1 + 48); ; i += 24)
  {
    int64_t v21 = v3;
    if (*i != 4) {
      BUG();
    }
    uint64_t v6 = (void *)*((void *)i - 2);
    uint64_t v7 = (void *)*((void *)i - 1);
    Swift::String v20 = v6;
    swift_bridgeObjectRetain_n(v6, 3);
    uint64_t v8 = v25;
    MLObjectDetector.DecodableAnnotation.init(from:)((uint64_t *)&v20, a2);
    uint64_t v25 = v8;
    if (v8) {
      break;
    }
    outlined consume of MLDataValue(v6, v7, 4);
    outlined consume of MLDataValue(v6, v7, 4);
    a2 = (__m128i)_mm_cvtps_pd(v18);
    __m128d v9 = _mm_cvtps_pd(v19);
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    BOOL v24 = v4;
    unint64_t v12 = v4[2];
    unint64_t v13 = v4[3];
    if (v13 >> 1 <= v12)
    {
      uint64_t v23 = v17;
      uint64_t v22 = v16;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 >= 2, v12 + 1, 1);
      uint64_t v11 = v23;
      uint64_t v10 = v22;
      uint64_t v4 = v24;
    }
    v4[2] = v12 + 1;
    uint64_t v14 = 7 * v12;
    v4[v14 + 4] = v10;
    v4[v14 + 5] = v11;
    *(__m128i *)&v4[v14 + 6] = a2;
    *(__m128d *)&v4[v14 + 8] = v9;
    v4[v14 + 10] = 0x3FF0000000000000;
    int64_t v3 = v21 - 1;
    if (v21 == 1) {
      return v4;
    }
  }
  outlined consume of MLDataValue(v6, v7, 4);
  outlined consume of MLDataValue(v6, v7, 4);
  swift_release();
  return v4;
}

void *specialized thunk for @callee_guaranteed (@guaranteed [MLDataValue]) -> (@owned [MLObjectDetector.ObjectAnnotation], @error @owned Error)(uint64_t *a1, __m128i a2)
{
  uint64_t v4 = v2;
  BOOL result = closure #1 in static MLObjectDetectorMetrics.convertToObjectAnnotationFrame(_:annotationColumn:predictionColumn:)(*a1, a2);
  if (!v3) {
    *uint64_t v4 = result;
  }
  return result;
}

uint64_t specialized thunk for @callee_guaranteed (@guaranteed [MLDataValue]) -> (@owned [MLObjectDetector.ObjectAnnotation], @error @owned Error)(uint64_t *a1, __m128i a2)
{
  uint64_t v4 = v2;
  uint64_t result = closure #2 in static MLObjectDetectorMetrics.convertToObjectAnnotationFrame(_:annotationColumn:predictionColumn:)(*a1, a2);
  if (!v3) {
    *uint64_t v4 = result;
  }
  return result;
}

uint64_t closure #2 in static MLObjectDetectorMetrics.convertToObjectAnnotationFrame(_:annotationColumn:predictionColumn:)(uint64_t a1, __m128i a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v42 = v2;
  double v41 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = (unsigned char *)(a1 + 48);
  while (1)
  {
    *(void *)&v40.f64[0] = result;
    if (*v5 != 4) {
      BUG();
    }
    uint64_t v6 = (void *)*((void *)v5 - 2);
    uint64_t v7 = v6[2];
    v43.f64[0] = *((double *)v5 - 1);
    outlined copy of MLDataValue(v6, *(void **)&v43.f64[0], 4u);
    if (!v7) {
      break;
    }
    swift_bridgeObjectRetain_n(v6, 2);
    *(void *)&long long v8 = 0x6E656469666E6F63;
    *((void *)&v8 + 1) = 0xEA00000000006563;
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, 2);
    if ((v10 & 1) == 0)
    {
      double v25 = v43.f64[0];
      outlined consume of MLDataValue(v6, *(void **)&v43.f64[0], 4);
      outlined consume of MLDataValue(v6, *(void **)&v25, 4);
      break;
    }
    int64_t v37 = v3;
    uint64_t v36 = v5;
    uint64_t v11 = v6[7];
    uint64_t v12 = 24 * v9;
    unint64_t v13 = *(void **)(v11 + v12);
    uint64_t v14 = *(void **)(v11 + v12 + 8);
    int v15 = *(unsigned __int8 *)(v11 + v12 + 16);
    outlined copy of MLDataValue(v13, v14, *(unsigned char *)(v11 + v12 + 16));
    outlined consume of MLDataValue(v6, *(void **)&v43.f64[0], 4);
    if (v15)
    {
      if (v15 == 2)
      {
        uint64_t v16 = specialized Double.init<A>(_:)((unint64_t)v13, (uint64_t)v14);
        a2 = _mm_loadl_epi64((const __m128i *)&qword_3478B0);
        if ((v17 & 1) == 0) {
          a2 = (__m128i)(unint64_t)v16;
        }
      }
      else if (v15 == 1)
      {
        a2 = (__m128i)(unint64_t)v13;
      }
      else
      {
        outlined consume of MLDataValue(v13, v14, v15);
        a2 = _mm_loadl_epi64((const __m128i *)&qword_3478B0);
      }
    }
    else
    {
      *(double *)a2.i64 = (double)(int)v13;
    }
    uint64_t v38 = a2.i64[0];
    uint64_t v35 = v6;
    uint64_t v18 = v42;
    MLObjectDetector.DecodableAnnotation.init(from:)((uint64_t *)&v35, a2);
    if (v18) {
      goto LABEL_22;
    }
    uint64_t v42 = 0;
    outlined consume of MLDataValue(v6, *(void **)&v43.f64[0], 4);
    __m128d v19 = _mm_cvtps_pd(v33);
    __m128d v20 = _mm_cvtps_pd(v34);
    uint64_t v21 = v31;
    uint64_t result = *(void *)&v40.f64[0];
    double v41 = v40.f64[0];
    unint64_t v22 = *(void *)(*(void *)&v40.f64[0] + 16);
    unint64_t v23 = *(void *)(*(void *)&v40.f64[0] + 24);
    if (v23 >> 1 <= v22)
    {
      uint64_t v39 = v31;
      __m128d v43 = v19;
      __m128d v40 = v20;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 >= 2, v22 + 1, 1);
      uint64_t v21 = v39;
      __m128d v20 = v40;
      __m128d v19 = v43;
      uint64_t result = *(void *)&v41;
    }
    *(void *)(result + 16) = v22 + 1;
    uint64_t v24 = 56 * v22;
    *(void *)(result + v24 + 32) = v21;
    *(void *)(result + v24 + 40) = v32;
    *(__m128d *)(result + v24 + 48) = v19;
    *(__m128d *)(result + v24 + 64) = v20;
    a2 = (__m128i)(unint64_t)v38;
    *(void *)(result + v24 + 80) = v38;
    uint64_t v5 = v36 + 24;
    int64_t v3 = v37 - 1;
    if (v37 == 1) {
      return result;
    }
  }
  uint64_t v26 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v26, 0, 0);
  *(void *)uint64_t v27 = 0xD000000000000023;
  *(void *)(v27 + 8) = " the regressor metrics" + 0x8000000000000000;
  *(_OWORD *)(v27 + 16) = 0;
  *(_OWORD *)(v27 + 32) = 0;
  *(unsigned char *)(v27 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v26, v27, v28, v29, v30);
LABEL_22:
  outlined consume of MLDataValue(v6, *(void **)&v43.f64[0], 4);
  return swift_release();
}

uint64_t static MLClassifierMetrics.__evaluation(on:labelColumn:predictionColumn:classes:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  v238._uint64_t countAndFlagsBits = a4;
  uint64_t v246 = a3;
  v241._char object = v7;
  v241._uint64_t countAndFlagsBits = a2;
  v253._uint64_t countAndFlagsBits = v8;
  uint64_t v248 = a6;
  uint64_t v11 = *(void *)a1;
  LOBYTE(v9) = *(unsigned char *)(a1 + 8);
  uint64_t v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v254, v225);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v238._countAndFlagsBits;
  inited[5] = a5;
  uint64_t v256 = v11;
  *(void *)&long long v251 = v11;
  *(void *)&long long v244 = v9;
  BYTE8(v251) = v9;
  swift_bridgeObjectRetain((_BYTE)a5);
  uint64_t countAndFlagsBits = v253._countAndFlagsBits;
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v251, 0x6974636964657250, (void *)0xEA00000000006E6FLL, (uint64_t)inited);
  if (countAndFlagsBits)
  {
    swift_setDeallocating(inited);
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  uint64_t v233 = a5;
  *(void *)&long long v251 = v256;
  BYTE8(v251) = v244;
  uint64_t v14 = (void *)swift_initStackObject(v254, v226);
  v14[2] = 1;
  v14[3] = 2;
  v14[4] = v241._countAndFlagsBits;
  char v15 = (char)v246;
  void v14[5] = v246;
  swift_bridgeObjectRetain(v15);
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v251, 0x6C6562614CLL, (void *)0xE500000000000000, (uint64_t)v14);
  swift_setDeallocating(v14);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  *(void *)&long long v251 = v256;
  BYTE8(v251) = v244;
  char v17 = (void *)swift_initStackObject(v254, v227);
  v17[2] = 1;
  v17[3] = 2;
  void v17[4] = v241._countAndFlagsBits;
  char v18 = (char)v246;
  v17[5] = v246;
  LOBYTE(v242._countAndFlagsBits) = 2;
  LOBYTE(v236) = 4;
  swift_bridgeObjectRetain(v18);
  static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)((uint64_t *)&v251, (unint64_t)v17, (char *)&v242, v238._countAndFlagsBits, (uint64_t)v233, (char *)&v236, a7);
  swift_setDeallocating(v17);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v243 = *(void *)(v248 + 16);
  if (!v243)
  {
    uint64_t v63 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v64 = swift_allocError(&type metadata for MLCreateError, v63, 0, 0);
    *(void *)uint64_t v65 = 0xD000000000000019;
    *(void *)(v65 + 8) = "lumn is invalid: '" + 0x8000000000000000;
    *(_OWORD *)(v65 + 16) = 0;
    *(_OWORD *)(v65 + 32) = 0;
    *(unsigned char *)(v65 + 48) = 0;
    char object = v241._object;
    *(void *)v241._char object = v64;
    uint64_t v67 = type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload(object, v67, 2);
  }
  uint64_t v257 = 0;
  *(void *)&long long v251 = v256;
  BYTE8(v251) = v244;
  outlined copy of Result<_DataTable, Error>(v256, v244);
  v19._uint64_t countAndFlagsBits = v241._countAndFlagsBits;
  v19._char object = v246;
  MLDataTable.subscript.getter(v19);
  uint64_t v20 = v242._countAndFlagsBits;
  char v21 = (char)v242._object;
  uint64_t v236 = v242._countAndFlagsBits;
  char v237 = (char)v242._object;
  MLUntypedColumn.dropDuplicates()(v19._countAndFlagsBits, v19._object);
  outlined consume of Result<_DataTable, Error>(v20, v21);
  if (BYTE8(v251)
    || (uint64_t v22 = v251,
        outlined copy of Result<_DataTable, Error>(v251, 0),
        uint64_t v23 = CMLColumn.size.getter(),
        outlined consume of Result<_DataTable, Error>(v22, 0),
        v23 < 0))
  {
    BUG();
  }
  uint64_t v247 = v22;
  if (v23)
  {
    Swift::Int v235 = v248 + 72;
    uint64_t v24 = 0;
    uint64_t v234 = "el's set of labels." + 0x8000000000000000;
    uint64_t v25 = v256;
    uint64_t v249 = (void *)v23;
    while (1)
    {
      if (v24 == v23) {
        BUG();
      }
      outlined copy of Result<_DataTable, Error>(v22, 0);
      v253._uint64_t countAndFlagsBits = v24;
      _UntypedColumn.valueAtIndex(index:)(v24, a7);
      outlined consume of Result<_DataTable, Error>(v22, 0);
      long long v26 = v251;
      if (v252 != 2)
      {
        outlined consume of MLDataValue((void *)v251, *((void **)&v251 + 1), v252);
        BUG();
      }
      long long v27 = *(_OWORD *)(v248 + 32);
      if (v251 != v27
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, *((void *)&v27 + 1), v251, *((void *)&v251 + 1), 0) & 1) == 0)
      {
        if (v243 == 1)
        {
          uint64_t v256 = v25;
          goto LABEL_18;
        }
        long long v35 = *(_OWORD *)(v248 + 48);
        if (v26 != v35
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, *((void *)&v35 + 1), v26, *((void *)&v26 + 1), 0) & 1) == 0)
        {
          break;
        }
      }
      outlined consume of MLDataValue((void *)v26, *((void **)&v26 + 1), 2);
LABEL_14:
      uint64_t v23 = (uint64_t)v249;
      uint64_t v24 = v253._countAndFlagsBits + 1;
      if ((void *)(v253._countAndFlagsBits + 1) == v249) {
        goto LABEL_45;
      }
    }
    uint64_t v256 = v25;
    if (v243 != 2)
    {
      Swift::Int v36 = v235;
      uint64_t v37 = 2;
      while (1)
      {
        BOOL v38 = __OFADD__(1, v37++);
        if (v38) {
          BUG();
        }
        long long v39 = *(_OWORD *)(v36 - 8);
        if (v26 == v39
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, *((void *)&v39 + 1), v26, *((void *)&v26 + 1), 0) & 1) != 0)
        {
          break;
        }
        v36 += 16;
        if (v37 == v243) {
          goto LABEL_18;
        }
      }
      outlined consume of MLDataValue((void *)v26, *((void **)&v26 + 1), 2);
      uint64_t v25 = v256;
      goto LABEL_40;
    }
LABEL_18:
    uint64_t v28 = swift_initStackObject(v254, v228);
    *(void *)(v28 + 16) = 1;
    *(void *)(v28 + 24) = 2;
    *(_OWORD *)(v28 + 32) = v26;
    uint64_t v29 = type metadata accessor for _UntypedColumn();
    swift_allocObject(v29, 24, 7);
    char v30 = v244;
    int v31 = v244;
    outlined copy of Result<_DataTable, Error>(v256, v244);
    swift_bridgeObjectRetain(v28);
    uint64_t v255 = v28;
    uint64_t v32 = v257;
    __m64 v33 = (void *)specialized _UntypedColumn.init<A>(_:)(v28);
    uint64_t v245 = v32;
    if (v32)
    {
      if ((v30 & 1) == 0)
      {
        *(void *)&long long v251 = 0;
        *((void *)&v251 + 1) = 0xE000000000000000;
        uint64_t v34 = v256;
        outlined copy of Result<_DataTable, Error>(v256, 0);
        _StringGuts.grow(_:)(85);
        v43._uint64_t countAndFlagsBits = 0xD000000000000052;
        v43._char object = v234;
        String.append(_:)(v43);
        v242._uint64_t countAndFlagsBits = 0;
        v242._char object = (void *)0xE000000000000000;
        uint64_t v236 = v32;
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        _print_unlocked<A, B>(_:_:)(&v236, &v242, v44, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        char v45 = (char)v242._object;
        String.append(_:)(v242);
        swift_bridgeObjectRelease(v45);
        v43._uint64_t countAndFlagsBits = 39;
        v43._char object = (void *)0xE100000000000000;
        String.append(_:)(v43);
        long long v244 = v251;
        v43._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v42 = swift_allocError(&type metadata for MLCreateError, v43._object, 0, 0);
        *(_OWORD *)uint64_t v46 = v244;
        a7 = 0.0;
        *(_OWORD *)(v46 + 16) = 0;
        *(_OWORD *)(v46 + 32) = 0;
        *(unsigned char *)(v46 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v43._object, v46, v47, v48, v49);
        outlined consume of Result<_DataTable, Error>(v34, 0);
        outlined consume of Result<_DataTable, Error>(v245, 1);
        uint64_t v50 = swift_bridgeObjectRelease(v255);
        LOBYTE(v50) = 1;
        *(void *)&long long v244 = v50;
        uint64_t v257 = 0;
LABEL_39:
        outlined consume of Result<_DataTable, Error>(v34, v31);
        outlined consume of Result<_DataTable, Error>(v34, v31);
        uint64_t v25 = v42;
LABEL_40:
        uint64_t v22 = v247;
        goto LABEL_14;
      }
      LODWORD(v253._object) = v31;
      __m64 v33 = (void *)v32;
      uint64_t v34 = v256;
    }
    else
    {
      LODWORD(v253._object) = v31;
      uint64_t v34 = v256;
      if ((v30 & 1) == 0)
      {
        uint64_t v51 = v33[2];
        unsigned int v52 = v33;
        outlined copy of Result<_DataTable, Error>(v256, 0);
        uint64_t v250 = v52;
        outlined copy of Result<_DataTable, Error>((uint64_t)v52, 0);
        swift_retain();
        uint64_t v53 = v245;
        uint64_t v54 = CMLTable.filtered(_:columnName:isExcluding:)(v51, v241._countAndFlagsBits, (uint64_t)v246, 1);
        if (v53)
        {
          swift_release();
          uint64_t v55 = v250;
          outlined consume of Result<_DataTable, Error>((uint64_t)v250, 0);
          outlined consume of Result<_DataTable, Error>(v34, 0);
          outlined consume of Result<_DataTable, Error>((uint64_t)v55, 0);
          uint64_t v56 = swift_bridgeObjectRelease(v255);
          LOBYTE(v56) = 1;
          *(void *)&long long v244 = v56;
          uint64_t v42 = v53;
          uint64_t v257 = 0;
        }
        else
        {
          uint64_t v60 = v54;
          uint64_t v257 = 0;
          *(void *)&long long v244 = 0;
          uint64_t v61 = v250;
          outlined consume of Result<_DataTable, Error>((uint64_t)v250, 0);
          swift_release();
          uint64_t v62 = type metadata accessor for _DataTable();
          swift_allocObject(v62, 40, 7);
          uint64_t v42 = _DataTable.init(impl:)(v60);
          outlined consume of Result<_DataTable, Error>(v34, 0);
          outlined consume of Result<_DataTable, Error>((uint64_t)v61, 0);
          swift_bridgeObjectRelease(v255);
        }
LABEL_38:
        LOBYTE(v31) = v253._object;
        goto LABEL_39;
      }
    }
    uint64_t v250 = v33;
    *(void *)&long long v251 = v34;
    swift_errorRetain(v34);
    outlined copy of Result<_DataTable, Error>(v34, 1);
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v41 = _getErrorEmbeddedNSError<A>(_:)(&v251, v40, &protocol self-conformance witness table for Error);
    if (v41)
    {
      uint64_t v42 = v41;
      outlined consume of Result<_DataTable, Error>(v34, 1);
    }
    else
    {
      uint64_t v42 = swift_allocError(v40, &protocol self-conformance witness table for Error, 0, 0);
      *uint64_t v57 = v251;
    }
    uint64_t v257 = 0;
    char v58 = v245 != 0;
    outlined consume of Result<_DataTable, Error>(v34, 1);
    outlined consume of Result<_DataTable, Error>((uint64_t)v250, v58);
    uint64_t v59 = swift_bridgeObjectRelease(v255);
    LOBYTE(v59) = 1;
    *(void *)&long long v244 = v59;
    goto LABEL_38;
  }
  uint64_t v25 = v256;
LABEL_45:
  *(void *)&long long v251 = v25;
  unsigned __int8 v68 = v244;
  char v69 = v244 & 1;
  BYTE8(v251) = v244 & 1;
  char v70 = v244;
  if (!MLDataTable.size.getter())
  {
    uint64_t v158 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v159 = swift_allocError(&type metadata for MLCreateError, v158, 0, 0);
    *(void *)uint64_t v160 = 0xD000000000000053;
    *(void *)(v160 + 8) = "te_classifier_metrics" + 0x8000000000000000;
    *(_OWORD *)(v160 + 16) = 0;
    *(_OWORD *)(v160 + 32) = 0;
    *(unsigned char *)(v160 + 48) = 0;
    outlined consume of Result<_DataTable, Error>(v247, 0);
    uint64_t v161 = v25;
    char v162 = v68;
    goto LABEL_125;
  }
  LOBYTE(v242._countAndFlagsBits) = v69;
  uint64_t v256 = v25;
  int v240 = v68;
  outlined copy of Result<_DataTable, Error>(v25, v70);
  uint64_t v232 = (void **)(v248 + 72);
  uint64_t v254 = 0;
  unsigned __int8 v71 = v68;
LABEL_47:
  if ((v71 & 1) == 0)
  {
    swift_retain();
    Swift::Int v77 = CMLTable.rows()();
    if (v78) {
      goto LABEL_156;
    }
    Swift::Int v79 = v77;
    uint64_t v234 = (char *)CMLTable.columns()();
    uint64_t v257 = v80;
    if (v80)
    {
LABEL_157:
      uint64_t v218 = "CreateML/MLDataTable.swift";
      uint64_t v219 = 26;
LABEL_159:
      uint64_t v220 = v257;
      goto LABEL_160;
    }
    char v76 = 0;
    outlined consume of Result<_DataTable, Error>(v256, 0);
    if (v254 == v79) {
      goto LABEL_127;
    }
    goto LABEL_60;
  }
  LOBYTE(v253._countAndFlagsBits) = v71;
  uint64_t v72 = v256;
  *(void *)&long long v251 = v256;
  outlined copy of Result<_DataTable, Error>(v256, 1);
  swift_errorRetain(v72);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v74 = _getErrorEmbeddedNSError<A>(_:)(&v251, v73, &protocol self-conformance witness table for Error);
  if (v74)
  {
    uint64_t v75 = v74;
    outlined consume of Result<_DataTable, Error>(v72, 1);
    char v76 = 1;
  }
  else
  {
    uint64_t v75 = swift_allocError(v73, &protocol self-conformance witness table for Error, 0, 0);
    *uint64_t v81 = v251;
    char v76 = v242._countAndFlagsBits;
  }
  outlined consume of Result<_DataTable, Error>(v72, 1);
  outlined consume of Result<(Int, Int), Error>(v75, (uint64_t)v234, 1);
  unsigned __int8 v71 = v253._countAndFlagsBits;
  if (v254)
  {
    if (v76)
    {
      uint64_t v82 = v256;
      outlined copy of Result<_DataTable, Error>(v256, 1);
      uint64_t v83 = tc_v1_flex_list_create(0);
      if (!v83) {
        BUG();
      }
      uint64_t v84 = v83;
      outlined consume of Result<_DataTable, Error>(v82, 1);
      uint64_t v85 = type metadata accessor for CMLSequence();
      uint64_t v86 = swift_allocObject(v85, 25, 7);
      *(void *)(v86 + 16) = v84;
      uint64_t v255 = v86;
      *(unsigned char *)(v86 + 24) = 1;
      uint64_t v87 = tc_v1_flex_list_create(0);
      if (!v87) {
        BUG();
      }
      uint64_t v88 = v87;
      uint64_t v89 = swift_allocObject(v85, 25, 7);
      *(void *)(v89 + 16) = v88;
      v253._char object = (void *)v89;
      *(unsigned char *)(v89 + 24) = 1;
      uint64_t v250 = _swiftEmptyDictionarySingleton;
      uint64_t v90 = v256;
      goto LABEL_66;
    }
LABEL_60:
    outlined copy of Result<_DataTable, Error>(v256, 0);
    swift_retain();
    uint64_t v91 = v257;
    uint64_t v92 = (void *)CMLTable.row(at:)(v254);
    if (v91)
    {
      swift_errorRelease(v91);
      swift_release();
      uint64_t v93 = tc_v1_flex_list_create(0);
      if (!v93) {
        BUG();
      }
      uint64_t v94 = v93;
      uint64_t v95 = type metadata accessor for CMLSequence();
      uint64_t v96 = swift_allocObject(v95, 25, 7);
      *(void *)(v96 + 16) = v94;
      v253._char object = (void *)v96;
      *(unsigned char *)(v96 + 24) = 1;
      uint64_t v257 = 0;
    }
    else
    {
      v253._char object = v92;
      uint64_t v257 = 0;
      swift_release();
    }
    uint64_t v97 = v256;
    uint64_t v98 = v256;
    outlined copy of Result<_DataTable, Error>(v256, 0);
    _DataTable.columnNames.getter(v98);
    outlined consume of Result<_DataTable, Error>(v97, 0);
    uint64_t v255 = v251;
    outlined copy of Result<_DataTable, Error>(v97, 0);
    uint64_t v99 = (void *)_DataTable.columnIndexes.getter();
    outlined consume of Result<_DataTable, Error>(v97, 0);
    outlined consume of Result<_DataTable, Error>(v97, 0);
    uint64_t v250 = v99;
    if ((v71 & 1) == 0)
    {
      swift_retain();
      Swift::Int v103 = CMLTable.rows()();
      if (v78)
      {
LABEL_156:
        uint64_t v218 = "CreateML/MLDataTable.swift";
        uint64_t v219 = 26;
        uint64_t v220 = v78;
        goto LABEL_160;
      }
      uint64_t v104 = v103;
      Swift::Int v235 = CMLTable.columns()();
      uint64_t v257 = v105;
      if (v105) {
        goto LABEL_157;
      }
      outlined consume of Result<_DataTable, Error>(v97, 0);
      goto LABEL_73;
    }
    uint64_t v90 = v97;
LABEL_66:
    *(void *)&long long v251 = v90;
    outlined copy of Result<_DataTable, Error>(v90, 1);
    swift_errorRetain(v90);
    uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v101 = _getErrorEmbeddedNSError<A>(_:)(&v251, v100, &protocol self-conformance witness table for Error);
    if (v101)
    {
      uint64_t v102 = v101;
      outlined consume of Result<_DataTable, Error>(v90, 1);
    }
    else
    {
      uint64_t v102 = swift_allocError(v100, &protocol self-conformance witness table for Error, 0, 0);
      *uint64_t v106 = v251;
    }
    outlined consume of Result<_DataTable, Error>(v90, 1);
    outlined consume of Result<(Int, Int), Error>(v102, v235, 1);
    uint64_t v104 = 0;
LABEL_73:
    uint64_t v107 = v255;
    uint64_t v108 = (uint64_t)v233;
    if (v254 >= v104) {
      BUG();
    }
    uint64_t v109 = v250;
    if (!v250[2]) {
      goto LABEL_119;
    }
    swift_bridgeObjectRetain((_BYTE)v233);
    swift_retain();
    swift_bridgeObjectRetain((_BYTE)v109);
    uint64_t v110 = v253._object;
    swift_retain();
    uint64_t v255 = v107;
    unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v238._countAndFlagsBits, v108);
    if ((v112 & 1) == 0)
    {
      swift_release_n(v110);
      swift_bridgeObjectRelease_n(v109, 2, v145, v146, v147);
      swift_release_n(v255);
      swift_bridgeObjectRelease(v108);
      goto LABEL_121;
    }
    unint64_t v113 = v110;
    uint64_t v114 = *(void *)(v109[7] + 8 * v111);
    swift_bridgeObjectRelease(v108);
    swift_retain_n(v113);
    uint64_t v115 = v257;
    uint64_t v116 = CMLSequence.value(at:)(v114);
    uint64_t v257 = v115;
    if (!v115)
    {
      swift_release();
      MLDataValue.init(_:)(v116, a7);
      swift_bridgeObjectRelease((_BYTE)v109);
      swift_release();
      swift_release_n(v113);
      if (v252 != 4)
      {
        outlined consume of MLDataValue((void *)v251, *((void **)&v251 + 1), v252);
LABEL_119:
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v109);
        goto LABEL_120;
      }
      uint64_t v117 = v251;
      if (*(void *)(v251 + 16) == v243)
      {
        uint64_t v118 = 1 << *(unsigned char *)(v251 + 32);
        uint64_t v119 = ~(-1 << v118);
        if (v118 >= 64) {
          uint64_t v119 = -1;
        }
        unint64_t v120 = *(void *)(v251 + 64) & v119;
        uint64_t v245 = (unint64_t)(v118 + 63) >> 6;
        uint64_t v121 = 0;
        uint64_t v122 = v248;
        for (i = v251; ; uint64_t v117 = i)
        {
          while (1)
          {
            if (v120)
            {
              _BitScanForward64(&v123, v120);
              v120 &= v120 - 1;
              unint64_t v124 = v123 | (v121 << 6);
            }
            else
            {
              BOOL v38 = __OFADD__(1, v121);
              uint64_t v125 = v121 + 1;
              if (v38) {
                BUG();
              }
              if (v125 >= v245)
              {
LABEL_122:
                swift_release();
                swift_bridgeObjectRelease((_BYTE)v250);
                swift_release();
LABEL_120:
                swift_release();
LABEL_121:
                ++v254;
                unsigned __int8 v71 = v242._countAndFlagsBits;
                goto LABEL_47;
              }
              unint64_t j = *(void *)(v117 + 8 * v125 + 64);
              if (j)
              {
                uint64_t v127 = v125;
              }
              else
              {
                uint64_t v127 = v125 + 1;
                if (v125 + 1 >= v245) {
                  goto LABEL_122;
                }
                unint64_t j = *(void *)(v117 + 8 * v125 + 72);
                if (!j)
                {
                  uint64_t v127 = v125 + 2;
                  if (v125 + 2 >= v245) {
                    goto LABEL_122;
                  }
                  unint64_t j = *(void *)(v117 + 8 * v125 + 80);
                  if (!j)
                  {
                    uint64_t v127 = v125 + 3;
                    if (v125 + 3 >= v245) {
                      goto LABEL_122;
                    }
                    for (unint64_t j = *(void *)(v117 + 8 * v125 + 88); !j; unint64_t j = *(void *)(v117 + 8 * v127 + 64))
                    {
                      BOOL v38 = __OFADD__(1, v127++);
                      if (v38) {
                        BUG();
                      }
                      if (v127 >= v245) {
                        goto LABEL_122;
                      }
                    }
                  }
                }
              }
              _BitScanForward64(&v128, j);
              unint64_t v120 = j & (j - 1);
              unint64_t v124 = v128 + (v127 << 6);
              uint64_t v121 = v127;
            }
            uint64_t v129 = *(void *)(v117 + 48);
            uint64_t v130 = 24 * v124;
            if (*(unsigned char *)(v129 + v130 + 16) == 2)
            {
              uint64_t v131 = *(void *)(v129 + v130);
              uint64_t v132 = *(void **)(v129 + v130 + 8);
              uint64_t v133 = *(void *)(v122 + 32);
              int64_t v134 = *(void **)(v122 + 40);
              if (v133 != v131 || v132 != v134)
              {
                v253._uint64_t countAndFlagsBits = v131;
                uint64_t v249 = v132;
                char v135 = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v134, v131, v132, 0);
                uint64_t v136 = v249;
                unint64_t v137 = (void *)v253._countAndFlagsBits;
                if ((v135 & 1) == 0)
                {
                  if (v243 == 1) {
                    goto LABEL_123;
                  }
                  uint64_t v122 = v248;
                  uint64_t v138 = *(void *)(v248 + 48);
                  uint64_t v139 = *(void **)(v248 + 56);
                  uint64_t v117 = i;
                  if (v138 != v253._countAndFlagsBits || v249 != v139)
                  {
                    char v140 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v139, v253._countAndFlagsBits, v249, 0);
                    uint64_t v136 = v249;
                    unint64_t v137 = (void *)v253._countAndFlagsBits;
                    if ((v140 & 1) == 0) {
                      break;
                    }
                  }
                }
              }
            }
          }
          if (v243 == 2) {
            break;
          }
          uint64_t v141 = v232;
          uint64_t v142 = 2;
          while (1)
          {
            BOOL v38 = __OFADD__(1, v142++);
            if (v38) {
              BUG();
            }
            BOOL v143 = *(v141 - 1);
            uint64_t v144 = *v141;
            if (v143 == v137 && v136 == v144) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)(v143, v144, v137, v136, 0)) {
              break;
            }
            v141 += 2;
            unint64_t v137 = (void *)v253._countAndFlagsBits;
            uint64_t v136 = v249;
            if (v142 == v243) {
              goto LABEL_123;
            }
          }
          uint64_t v122 = v248;
        }
LABEL_123:
        *(void *)&long long v251 = 0;
        *((void *)&v251 + 1) = 0xE000000000000000;
        uint64_t v148 = v137;
        uint64_t v149 = v136;
        outlined copy of MLDataValue(v137, v136, 2u);
        _StringGuts.grow(_:)(93);
        v150._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        v150._char object = "bels in the model." + 0x8000000000000000;
        String.append(_:)(v150);
        outlined copy of MLDataValue(v148, v149, 2u);
        v150._uint64_t countAndFlagsBits = (uint64_t)v148;
        v150._char object = v149;
        String.append(_:)(v150);
        outlined consume of MLDataValue(v148, v149, 2);
        v150._char object = "le has row(s) with label '" + 0x8000000000000000;
        v150._uint64_t countAndFlagsBits = 0xD000000000000031;
        String.append(_:)(v150);
        Swift::String v238 = (Swift::String)v251;
        uint64_t v151 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v152 = swift_allocError(&type metadata for MLCreateError, v151, 0, 0);
        *(Swift::String *)uint64_t v153 = v238;
        *(_OWORD *)(v153 + 16) = 0;
        *(_OWORD *)(v153 + 32) = 0;
        *(unsigned char *)(v153 + 48) = 0;
        outlined consume of MLDataValue((void *)v253._countAndFlagsBits, v149, 2);
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v250);
        swift_release();
        outlined consume of Result<_DataTable, Error>(v247, 0);
        uint64_t v154 = v256;
        outlined consume of Result<_DataTable, Error>(v256, v240);
        swift_release();
        outlined consume of Result<_DataTable, Error>(v154, v242._countAndFlagsBits);
        uint64_t v155 = v241._object;
        *(void *)v241._char object = v152;
        uint64_t v156 = v155;
        uint64_t v157 = type metadata accessor for MLClassifierMetrics.Contents(0);
      }
      else
      {
        outlined consume of MLDataValue((void *)v251, *((void **)&v251 + 1), 4);
        uint64_t v211 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        uint64_t v159 = swift_allocError(&type metadata for MLCreateError, v211, 0, 0);
        *(void *)uint64_t v212 = 0xD000000000000072;
        *(void *)(v212 + 8) = "maximumSecondMoments" + 0x8000000000000000;
        *(_OWORD *)(v212 + 16) = 0;
        *(_OWORD *)(v212 + 32) = 0;
        *(unsigned char *)(v212 + 48) = 0;
        swift_release();
        swift_bridgeObjectRelease((_BYTE)v250);
        swift_release();
        outlined consume of Result<_DataTable, Error>(v247, 0);
        uint64_t v213 = v256;
        outlined consume of Result<_DataTable, Error>(v256, v240);
        char v162 = v242._countAndFlagsBits;
        uint64_t v161 = v213;
LABEL_125:
        outlined consume of Result<_DataTable, Error>(v161, v162);
        char v163 = v241._object;
        *(void *)v241._char object = v159;
        uint64_t v156 = v163;
        uint64_t v157 = type metadata accessor for MLClassifierMetrics.Contents(0);
      }
      return swift_storeEnumTagMultiPayload(v156, v157, 2);
    }
    swift_release();
    uint64_t v218 = "CreateML/MLDataTable.Row.swift";
    uint64_t v219 = 30;
    goto LABEL_159;
  }
LABEL_127:
  char v164 = v76;
  uint64_t v165 = v256;
  outlined consume of Result<_DataTable, Error>(v256, v164);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  char v167 = v244;
  if (!empty) {
    BUG();
  }
  uint64_t v168 = empty;
  uint64_t v169 = type metadata accessor for CMLParameters();
  uint64_t v170 = swift_initStackObject(v169, v230);
  uint64_t v249 = (void *)v168;
  *(void *)(v170 + 16) = v168;
  if (v167)
  {
    outlined copy of Result<_DataTable, Error>(v165, 1);
    swift_willThrow(v165, 1, v221, v222, v223, v224);
    uint64_t v218 = "CreateML/_MLModelEvaluation.swift";
    uint64_t v219 = 33;
    uint64_t v220 = v165;
    goto LABEL_160;
  }
  uint64_t v171 = v170;
  uint64_t v172 = *(void *)(v165 + 16);
  swift_retain();
  uint64_t v254 = v171;
  uint64_t v173 = v257;
  CMLParameters.add(key:table:)(4, v172);
  uint64_t v174 = v173;
  if (v173)
  {
    swift_release();
    uint64_t v218 = "CreateML/_MLModelEvaluation.swift";
    uint64_t v219 = 33;
LABEL_165:
    uint64_t v220 = v174;
LABEL_160:
    swift_unexpectedError(v220, v218, v219, 1);
    BUG();
  }
  swift_release();
  uint64_t v175 = type metadata accessor for CMLFeatureValue();
  uint64_t v176 = (uint64_t)v246;
  swift_bridgeObjectRetain((_BYTE)v246);
  v253._uint64_t countAndFlagsBits = v175;
  uint64_t v177 = CMLFeatureValue.__allocating_init(_:)(v241._countAndFlagsBits, v176);
  CMLParameters.add(key:featureValue:)(5, v177);
  swift_release();
  uint64_t v178 = CMLFeatureValue.__allocating_init(_:)(0x74726F706572, 0xE600000000000000);
  CMLParameters.add(key:featureValue:)(29, v178);
  swift_release();
  v242._uint64_t countAndFlagsBits = v256;
  LOBYTE(v242._object) = 0;
  v179._uint64_t countAndFlagsBits = v238._countAndFlagsBits;
  v179._char object = v233;
  MLDataTable.subscript.getter(v179);
  uint64_t v180 = v251;
  if (BYTE8(v251))
  {
    outlined consume of Result<_DataTable, Error>(v251, 1);
    uint64_t v181 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v181, 0, 0);
    *(void *)uint64_t v182 = 0xD000000000000048;
    *(void *)(v182 + 8) = "lEvaluation.swift" + 0x8000000000000000;
    *(_OWORD *)(v182 + 16) = 0;
    *(_OWORD *)(v182 + 32) = 0;
    *(unsigned char *)(v182 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v181, v182, v183, v184, v185);
    swift_setDeallocating(v254);
    tc_v1_release(v249);
    outlined consume of Result<_DataTable, Error>(v247, 0);
    return outlined consume of Result<_DataTable, Error>(v256, 0);
  }
  uint64_t v186 = *(void *)(v251 + 16);
  swift_retain();
  CMLParameters.add(key:column:)(28, v186);
  uint64_t v257 = 0;
  swift_release();
  outlined consume of Result<_DataTable, Error>(v180, 0);
  uint64_t v187 = tc_v1_flex_dict_create(0);
  if (!v187) {
    BUG();
  }
  uint64_t v188 = v187;
  uint64_t v189 = type metadata accessor for CMLDictionary();
  uint64_t v190 = (void *)swift_initStackObject(v189, v231);
  v190[2] = v188;
  uint64_t v191 = tc_v1_flex_list_create(0);
  uint64_t v192 = v248;
  if (!v191) {
    BUG();
  }
  uint64_t v193 = v191;
  uint64_t v194 = type metadata accessor for CMLSequence();
  uint64_t v195 = swift_initStackObject(v194, v229);
  *(void *)(v195 + 16) = v193;
  *(void *)&long long v244 = v195;
  *(unsigned char *)(v195 + 24) = 1;
  swift_bridgeObjectRetain(v192);
  uint64_t v196 = 0;
  uint64_t v197 = (uint64_t *)(v192 + 40);
  uint64_t v246 = v190;
  do
  {
    v238._uint64_t countAndFlagsBits = v196 + 1;
    if (__OFADD__(1, v196)) {
      BUG();
    }
    uint64_t v198 = *v197;
    uint64_t v199 = *(v197 - 1);
    swift_bridgeObjectRetain_n(*v197, 2);
    uint64_t v200 = v257;
    uint64_t v201 = CMLFeatureValue.__allocating_init(_:)(v199, v198);
    if (v200)
    {
      uint64_t v218 = "CreateML/MLDataValueConvertible.swift";
      uint64_t v219 = 37;
      uint64_t v220 = v200;
      goto LABEL_160;
    }
    uint64_t v202 = v201;
    swift_bridgeObjectRelease(v198);
    CMLSequence.append(_:)(v202);
    uint64_t v257 = 0;
    swift_release();
    v197 += 2;
    uint64_t v196 = v238._countAndFlagsBits;
  }
  while (v238._countAndFlagsBits != v243);
  swift_bridgeObjectRelease(v248);
  uint64_t v203 = v244;
  swift_retain();
  uint64_t v204 = v257;
  uint64_t v205 = CMLFeatureValue.__allocating_init(_:)(v203);
  uint64_t v174 = v204;
  if (v204)
  {
    uint64_t v218 = "CreateML/_MLModelEvaluation.swift";
    uint64_t v219 = 33;
    goto LABEL_165;
  }
  uint64_t v206 = (uint64_t)v246;
  CMLDictionary.add(key:value:)(0x73657373616C63, 0xE700000000000000, v205);
  swift_release();
  uint64_t v207 = v206;
  uint64_t v208 = v254;
  CMLParameters.setOptions(dictionary:)(v207);
  uint64_t v209 = specialized String.withCString<A>(_:)((uint64_t (*)(void))partial apply for closure #1 in CMLCallFunction(name:arguments:), v208, 0xD000000000000025, (uint64_t)("d column of predictions." + 0x8000000000000000));
  uint64_t v257 = 0;
  uint64_t v210 = v256;
  uint64_t v214 = v209;
  type metadata accessor for _Model();
  static _Model.makeClassifierEvaluationMetrics(_:classes:)(v214, v248, a7);
  swift_release();
  swift_setDeallocating(v244);
  uint64_t v215 = CMLFeatureValue.deinit(a7);
  swift_deallocClassInstance(v215, 25, 7);
  long long v216 = v246;
  swift_setDeallocating(v246);
  tc_v1_release(v216[2]);
  uint64_t v217 = v254;
  swift_setDeallocating(v254);
  tc_v1_release(*(void *)(v217 + 16));
  outlined consume of Result<_DataTable, Error>(v247, 0);
  return outlined consume of Result<_DataTable, Error>(v210, 0);
}

uint64_t static MLRegressorMetrics.__evaluation(on:targetColumn:predictionColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, double a6)
{
  v35._uint64_t countAndFlagsBits = a4;
  v36._char object = a3;
  uint64_t v29 = v6;
  v36._uint64_t countAndFlagsBits = a2;
  v35._char object = a5;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)a1;
  char v37 = v8 & 1;
  outlined copy of Result<_DataTable, Error>(v7, v8);
  MLDataTable.subscript.getter((Swift::String)__PAIR128__((unint64_t)v36._object, a2));
  v36._uint64_t countAndFlagsBits = v7;
  int v34 = v8;
  outlined consume of Result<_DataTable, Error>(v7, v8);
  uint64_t v32 = v30;
  char v33 = v31;
  MLUntypedColumn.init(doubles:)((uint64_t)&v32);
  uint64_t v9 = v27;
  if (v28
    || (outlined copy of Result<_DataTable, Error>((uint64_t)v27, 0),
        v36._char object = v27,
        _UntypedColumn.type.getter(),
        uint64_t v9 = v36._object,
        outlined consume of Result<_DataTable, Error>((uint64_t)v36._object, 0),
        (_BYTE)v30 != 1))
  {
    outlined consume of Result<_DataTable, Error>((uint64_t)v9, v28);
    uint64_t v17 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v17, 0, 0);
    *(void *)uint64_t v18 = 0xD00000000000002FLL;
    *(void *)(v18 + 8) = "Provided classes is empty" + 0x8000000000000000;
    *(_OWORD *)(v18 + 16) = 0;
    *(_OWORD *)(v18 + 32) = 0;
    *(unsigned char *)(v18 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v17, v18, v19, v20, v21);
  }
  else
  {
    uint64_t countAndFlagsBits = v36._countAndFlagsBits;
    uint64_t v32 = v36._countAndFlagsBits;
    char v33 = v37;
    char v11 = v34;
    outlined copy of Result<_DataTable, Error>(v36._countAndFlagsBits, v34);
    MLDataTable.subscript.getter(v35);
    outlined consume of Result<_DataTable, Error>(countAndFlagsBits, v11);
    uint64_t v32 = v30;
    char v33 = v31;
    MLUntypedColumn.init(doubles:)((uint64_t)&v32);
    outlined copy of Result<_DataTable, Error>((uint64_t)v27, 0);
    _UntypedColumn.type.getter();
    outlined consume of Result<_DataTable, Error>((uint64_t)v27, 0);
    char object = v36._object;
    outlined copy of Result<_DataTable, Error>((uint64_t)v36._object, 0);
    unint64_t v13 = specialized Array<A>.init(_:)((uint64_t)object, 0, a6);
    outlined copy of Result<_DataTable, Error>((uint64_t)v27, 0);
    uint64_t v14 = specialized Array<A>.init(_:)((uint64_t)v27, 0, a6);
    v35._uint64_t countAndFlagsBits = static _MetricUtilities.rmse(target:prediction:)((uint64_t)v13, (uint64_t)v14);
    v35._char object = (void *)static _MetricUtilities.maximumError(target:prediction:)((uint64_t)v13, (uint64_t)v14);
    LOBYTE(v36._countAndFlagsBits) = v15;
    swift_bridgeObjectRelease((_BYTE)v14);
    swift_bridgeObjectRelease((_BYTE)v13);
    if (v36._countAndFlagsBits)
    {
      uint64_t v22 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v22, 0, 0);
      *(void *)uint64_t v23 = 0xD000000000000046;
      *(void *)(v23 + 8) = "onverted to doubles" + 0x8000000000000000;
      *(_OWORD *)(v23 + 16) = 0;
      *(_OWORD *)(v23 + 32) = 0;
      *(unsigned char *)(v23 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v22, v23, v24, v25, v26);
      outlined consume of Result<_DataTable, Error>((uint64_t)v27, 0);
      return outlined consume of Result<_DataTable, Error>((uint64_t)object, 0);
    }
    else
    {
      outlined consume of Result<_DataTable, Error>((uint64_t)object, 0);
      outlined consume of Result<_DataTable, Error>((uint64_t)v27, 0);
      uint64_t result = v29;
      *(void *)uint64_t v29 = v35._object;
      *(void *)(v29 + 8) = v35._countAndFlagsBits;
      *(unsigned char *)(v29 + 16) = 0;
    }
  }
  return result;
}

uint64_t specialized Dictionary<>.featureValue.getter(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = tc_v1_flex_dict_create(0);
  if (!v2) {
    BUG();
  }
  uint64_t v3 = v2;
  int64_t v4 = 0;
  uint64_t v5 = type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject(v5, v28);
  *(void *)(inited + 16) = v3;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~(-1 << v6);
  if (v6 >= 64) {
    uint64_t v7 = -1;
  }
  unint64_t v8 = *(void *)(a1 + 64) & v7;
  int64_t v34 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v8)
    {
      _BitScanForward64(&v9, v8);
      uint64_t v32 = (v8 - 1) & v8;
      int64_t v31 = v4;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_18;
    }
    BOOL v11 = __OFADD__(1, v4);
    int64_t v12 = v4 + 1;
    if (v11) {
      BUG();
    }
    if (v12 >= v34) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v1 + 8 * v12 + 64);
    if (!v13) {
      break;
    }
LABEL_17:
    _BitScanForward64(&v15, v13);
    uint64_t v32 = v13 & (v13 - 1);
    int64_t v31 = v12;
    unint64_t v10 = v15 + (v12 << 6);
LABEL_18:
    uint64_t v16 = *(void *)(v1 + 48);
    uint64_t v17 = *(void *)(v1 + 56);
    uint64_t v30 = *(void *)(v16 + 16 * v10);
    uint64_t v18 = *(void *)(v16 + 16 * v10 + 8);
    uint64_t v19 = *(void *)(v17 + 8 * v10);
    v29[3] = &type metadata for Double;
    v29[4] = &protocol witness table for Double;
    v29[0] = v19;
    v29[5] = *__swift_project_boxed_opaque_existential_0Tm(v29, (uint64_t)&type metadata for Double);
    swift_bridgeObjectRetain(v18);
    uint64_t v20 = specialized handling<A, B>(_:_:)();
    if (!v20) {
      BUG();
    }
    uint64_t v21 = v1;
    uint64_t v22 = type metadata accessor for CMLFeatureValue();
    swift_initStackObject(v22, v27);
    uint64_t v23 = CMLFeatureValue.init(rawValue:ownsValue:)(v20, 1);
    __swift_destroy_boxed_opaque_existential_1Tm(v29);
    CMLDictionary.add(key:value:)(v30, v18, v23);
    swift_release();
    swift_bridgeObjectRelease(v18);
    uint64_t v1 = v21;
    int64_t v4 = v31;
    unint64_t v8 = v32;
  }
  int64_t v14 = v12 + 1;
  if (v12 + 1 >= v34) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v1 + 8 * v12 + 72);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v12 + 2;
  if (v12 + 2 >= v34) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v1 + 8 * v12 + 80);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v12 + 3;
  if (v12 + 3 >= v34) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v1 + 8 * v12 + 88);
  if (v13)
  {
LABEL_16:
    int64_t v12 = v14;
    goto LABEL_17;
  }
  v12 += 3;
  while (1)
  {
    BOOL v11 = __OFADD__(1, v12++);
    if (v11) {
      BUG();
    }
    if (v12 >= v34) {
      break;
    }
    unint64_t v13 = *(void *)(v1 + 8 * v12 + 64);
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_25:
  swift_release();
  type metadata accessor for CMLFeatureValue();
  uint64_t v24 = inited;
  swift_retain();
  uint64_t v25 = CMLFeatureValue.__allocating_init(_:)(v24);
  swift_setDeallocating(v24);
  tc_v1_release(*(void *)(v24 + 16));
  return v25;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for _UntypedColumn();
  swift_allocObject(v2, 24, 7);
  swift_bridgeObjectRetain(a1);
  return a2(a1);
}

uint64_t outlined consume of Result<(Int, Int), Error>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease(a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLCallFunction(name:arguments:)(uint64_t a1)
{
  return closure #1 in CMLCallFunction(name:arguments:)(a1, v1);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

void MLLinearRegressor.Model.export(internalMetadata:)()
{
  uint64_t v111 = v1;
  uint64_t v91 = v0;
  uint64_t v93 = type metadata accessor for ModelKind(0);
  uint64_t v92 = *(void *)(v93 - 8);
  int64_t v3 = *(void *)(v92 + 64);
  int64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v94 = v82;
  uint64_t v97 = type metadata accessor for FeatureType(0);
  uint64_t v96 = *(void *)(v97 - 8);
  int64_t v6 = *(void *)(v96 + 64);
  uint64_t v7 = alloca(v6);
  unint64_t v8 = alloca(v6);
  uint64_t v98 = v82;
  int64_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?)
                             - 8)
                 + 64);
  unint64_t v10 = alloca(v9);
  BOOL v11 = alloca(v9);
  uint64_t v99 = v82;
  uint64_t v102 = type metadata accessor for Model(0);
  uint64_t v103 = *(void *)(v102 - 8);
  int64_t v12 = *(void *)(v103 + 64);
  unint64_t v13 = alloca(v12);
  int64_t v14 = alloca(v12);
  uint64_t v95 = v82;
  unint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v109 = v82;
  uint64_t v85 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v86 = *(void *)(v85 - 8);
  int64_t v17 = *(void *)(v86 + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v87 = v82;
  uint64_t v20 = type metadata accessor for UUID(0);
  uint64_t v88 = *(void *)(v20 - 8);
  int64_t v21 = *(void *)(v88 + 64);
  uint64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  uint64_t v89 = v82;
  uint64_t v107 = type metadata accessor for URL(0);
  uint64_t v106 = *(void *)(v107 - 8);
  int64_t v24 = *(void *)(v106 + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v90 = v82;
  long long v27 = alloca(v24);
  char v28 = alloca(v24);
  uint64_t v105 = v82;
  uint64_t v29 = alloca(v24);
  uint64_t v30 = alloca(v24);
  uint64_t v108 = v82;
  int64_t v31 = alloca(v24);
  uint64_t v32 = alloca(v24);
  uint64_t v33 = v2[2];
  if (!v33)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, "ressorModel.swift" + 0x8000000000000000, "CreateML/MLLinearRegressor.Model+CoreML.swift", 45, 2, 10, 0);
    BUG();
  }
  uint64_t v34 = v111;
  uint64_t v35 = specialized FeatureVectorizer.Transformer.exportEncoders()(v2[2], v2[3], v2[4]);
  if (!v34)
  {
    uint64_t v100 = v33;
    uint64_t v111 = v35;
    uint64_t v101 = v82;
    uint64_t v104 = v2;
    Swift::String v36 = objc_opt_self(NSFileManager);
    id v37 = [v36 defaultManager];
    id v38 = v37;
    NSFileManager.createTemporaryModelDirectory()();
    if (v39)
    {
      swift_bridgeObjectRelease(v111);
    }
    else
    {

      id v40 = [v36 defaultManager];
      id v41 = v40;
      NSFileManager.temporaryModelDirectory.getter();

      uint64_t v110 = 0;
      uint64_t v42 = v89;
      UUID.init()();
      uint64_t v43 = UUID.uuidString.getter();
      uint64_t v45 = v44;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v42, v20);
      uint64_t v83 = v43;
      uint64_t v84 = v45;
      uint64_t v46 = v87;
      uint64_t v47 = v85;
      uint64_t v48 = v86;
      (*(void (**)(char *, void, uint64_t))(v86 + 104))(v87, enum case for URL.DirectoryHint.inferFromPath(_:), v85);
      uint64_t v49 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v50 = v105;
      URL.appending<A>(component:directoryHint:)(&v83, v46, &type metadata for String, v49);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
      swift_bridgeObjectRelease(v84);
      uint64_t v51 = *(void (**)(char *, uint64_t))(v106 + 8);
      uint64_t v52 = v107;
      v51(v50, v107);
      uint64_t v53 = v101;
      uint64_t v54 = v108;
      URL.appendingPathExtension(_:)(0x6C65646F6D6C6D2ELL, 0xE800000000000000);
      v51(v54, v52);
      type metadata accessor for MLLinearRegressor.Model(0);
      uint64_t v55 = v110;
      BaseLinearRegressorModel.export(to:)(v53);
      if (v55)
      {
        v51(v53, v107);
        swift_bridgeObjectRelease(v111);
      }
      else
      {
        uint64_t v108 = (char *)v51;
        uint64_t v56 = v90;
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v90, v53, v107);
        Model.init(contentsOf:)(v56);
        uint64_t v110 = 0;
        uint64_t v57 = (uint64_t)v99;
        specialized BidirectionalCollection.last.getter(v111);
        uint64_t v58 = v102;
        if (__swift_getEnumTagSinglePayload(v57, 1, v102) == 1) {
          BUG();
        }
        uint64_t v59 = Model.outputs.getter(v57, 1);
        uint64_t v105 = *(char **)(v103 + 8);
        ((void (*)(uint64_t, uint64_t))v105)(v57, v58);
        Model.inputs.setter(v59);
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        uint64_t v61 = *(void *)(type metadata accessor for FeatureDescription(0) - 8);
        uint64_t v62 = swift_allocObject(v60, ((*(unsigned __int8 *)(v61 + 80) + 32) & ~*(unsigned __int8 *)(v61 + 80)) + *(void *)(v61 + 72), *(unsigned __int8 *)(v61 + 80) | 7);
        *(void *)(v62 + 16) = 1;
        *(void *)(v62 + 24) = 2;
        uint64_t v106 = *v104;
        uint64_t v63 = v104[1];
        swift_bridgeObjectRetain(v63);
        uint64_t v64 = v98;
        FeatureType.DoubleParameters.init(optional:)(0);
        (*(void (**)(char *, void, uint64_t))(v96 + 104))(v64, enum case for FeatureType.double(_:), v97);
        uint64_t v65 = v106;
        FeatureDescription.init(name:type:description:)(v106, v63, v64, 0, 0xE000000000000000);
        Model.outputs.setter(v62);
        swift_bridgeObjectRetain(v63);
        Model.predictedFeatureName.setter(v65, v63);
        uint64_t v66 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
        Model.metadata.setter(v66);
        uint64_t v67 = v95;
        Model.init()();
        Model.specificationVersion.setter(1);
        uint64_t v68 = v100;
        swift_bridgeObjectRetain(v100);
        uint64_t v69 = v110;
        ML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v68);
        uint64_t v110 = v69;
        swift_bridgeObjectRelease(v68);
        Model.inputs.setter(ML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n);
        uint64_t v71 = Model.outputs.getter(ML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n, v82);
        Model.outputs.setter(v71);
        uint64_t v72 = *v104;
        uint64_t v73 = v104[1];
        swift_bridgeObjectRetain(v73);
        Model.predictedFeatureName.setter(v72, v73);
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
        uint64_t v75 = *(unsigned __int8 *)(v103 + 80);
        uint64_t v76 = ((int)v75 + 32) & ~*(unsigned __int8 *)(v103 + 80);
        uint64_t v77 = v103;
        uint64_t v78 = swift_allocObject(v74, v76 + *(void *)(v103 + 72), v75 | 7);
        *(void *)(v78 + 16) = 1;
        *(void *)(v78 + 24) = 2;
        (*(void (**)(uint64_t, char *, uint64_t))(v77 + 16))(v78 + v76, v109, v102);
        uint64_t v83 = v111;
        specialized Array.append<A>(contentsOf:)(v78);
        Swift::Int v79 = v94;
        PipelineRegressorConfiguration.init(models:names:)(v83, _swiftEmptyArrayStorage);
        (*(void (**)(char *, void, uint64_t))(v92 + 104))(v79, enum case for ModelKind.pipelineRegressor(_:), v93);
        Model.kind.setter(v79);
        uint64_t v80 = v102;
        ((void (*)(char *, uint64_t))v105)(v109, v102);
        (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v91, v67, v80);
        uint64_t v81 = v101;
        $defer #1 () in TreeRegressorModel.export(internalMetadata:)();
        ((void (*)(char *, uint64_t))v108)(v81, v107);
      }
    }
  }
}

void *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.init(repeating:count:)(a1, a2, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized Array.init(repeating:count:)(a1, a2, &demangling cache variable for type metadata for [Double]);
}

{
  void *result;
  uint64_t i;

  if (a2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2);
  result[2] = a2;
  for (uint64_t i = 0; i != a2; ++i)
    result[i + 4] = a1;
  return result;
}

{
  return specialized Array.init(repeating:count:)(a1, a2, &demangling cache variable for type metadata for [Int]);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v6;

  int64_t v6 = specialized static Array._allocateUninitialized(_:)(a2);
  if (a2 < 0) {
    BUG();
  }
  if (a2)
  {
    int64_t v3 = v2;
    *uint64_t v2 = a1;
    if (a2 != 1)
    {
      v2[1] = a1;
      if (a2 != 2)
      {
        for (uint64_t i = 2; i != a2; ++i)
        {
          v3[i] = a1;
          swift_retain();
        }
      }
      swift_retain();
    }
  }
  else
  {
    swift_release();
  }
  specialized Array._endMutation()();
  return v6;
}

{
  return specialized Array.init(repeating:count:)(a1, a2, &demangling cache variable for type metadata for [String]);
}

{
  void *result;
  uint64_t i;

  if (a2 < 0) {
    BUG();
  }
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2);
  result[2] = a2;
  for (uint64_t i = 0; i != a2; ++i)
    result[i + 4] = a1;
  return result;
}

float *specialized Array.init(repeating:count:)(uint64_t a1, float a2)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a1) {
    return (float *)&_swiftEmptyArrayStorage;
  }
  uint64_t result = (float *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  *((void *)result + 2) = a1;
  for (uint64_t i = 0; i != a1; ++i)
    result[i + 8] = a2;
  return result;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (a3)
  {
    int64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3);
    uint64_t v5 = v4;
    v4[2] = a3;
    void v4[4] = a1;
    v4[5] = a2;
    if (a3 != 1)
    {
      void v4[6] = a1;
      v4[7] = a2;
      if (a3 != 2)
      {
        uint64_t v6 = a3 - 2;
        uint64_t v7 = v4 + 9;
        do
        {
          *(v7 - 1) = a1;
          *uint64_t v7 = a2;
          swift_bridgeObjectRetain(a2);
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      swift_bridgeObjectRetain(a2);
    }
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return &_swiftEmptyArrayStorage;
  }
  return v5;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, double a2)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  result[2] = a1;
  for (uint64_t i = 0; i != a1; ++i)
    *(double *)&result[i + 4] = a2;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(id a1, uint64_t a2)
{
  uint64_t v6 = specialized static Array._allocateUninitialized(_:)(a2);
  if (a2 < 0) {
    BUG();
  }
  if (a2)
  {
    int64_t v3 = v2;
    *uint64_t v2 = a1;
    if (a2 != 1)
    {
      v2[1] = a1;
      if (a2 != 2)
      {
        for (uint64_t i = 2; i != a2; ++i)
        {
          v3[i] = a1;
          a1;
        }
      }
      a1;
    }
  }
  else
  {
  }
  specialized Array._endMutation()();
  return v6;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v3);
  result[2] = v3;
  uint64_t v5 = result + 4;
  do
  {
    void *v5 = a1;
    *((unsigned char *)v5 + 8) = a2 & 1;
    v5 += 2;
    --v3;
  }
  while (v3);
  return result;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, double a3)
{
  if (a2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ItemStatistics<Double>);
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2);
  result[2] = a2;
  uint64_t v5 = (double *)(result + 4);
  do
  {
    *(void *)uint64_t v5 = a1;
    v5[1] = a3;
    v5 += 2;
    --v3;
  }
  while (v3);
  return result;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (a3 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ItemStatistics<PearsonSimilarity.ItemScore>);
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v5);
  result[2] = v5;
  uint64_t v7 = (double *)(result + 4);
  do
  {
    *(void *)uint64_t v7 = a1;
    *((void *)v7 + 1) = a2;
    v7[2] = a4;
    v7[3] = a5;
    v7 += 4;
    --v5;
  }
  while (v5);
  return result;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, double a2, double a3)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, Double));
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  result[2] = a1;
  uint64_t v5 = (double *)(result + 4);
  do
  {
    double *v5 = a2;
    v5[1] = a3;
    v5 += 2;
    --v3;
  }
  while (v3);
  return result;
}

void *specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 1);
    BUG();
  }
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v3 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2);
    int64_t v4 = v3;
    v3[2] = a2;
    void v3[4] = a1;
    if (a2 != 1)
    {
      void v3[5] = a1;
      if (a2 != 2)
      {
        uint64_t v5 = 0;
        do
        {
          v4[v5 + 6] = a1;
          swift_bridgeObjectRetain(a1);
          ++v5;
        }
        while (a2 - 2 != v5);
      }
      swift_bridgeObjectRetain(a1);
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init(_:)(MLMultiArray a1)
{
  Class isa = a1.super.isa;
  uint64_t v3 = v1;
  result._contents.super.Class isa = (Class)[(objc_class *)a1.super.isa dataType];
  if (result._contents.super.isa != (Class)((char *)&loc_1003E + 2))
  {
    uint64_t v68 = v3;
    id v5 = [(objc_class *)a1.super.isa shape];
    id v6 = v5;
    uint64_t v69 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v69);

    objc_allocWithZone((Class)MLMultiArray);
    id v8 = @nonobjc MLMultiArray.init(shape:dataType:)(v7, 65600);
    id v70 = v8;
    id v9 = [(objc_class *)a1.super.isa strides];
    Class v10 = a1.super.isa;
    uint64_t v11 = v69;
    id v12 = v9;
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v69);

    uint64_t v77 = v13;
    if ((v13 & 0x4000000000000001) != 0)
    {
      uint64_t v62 = v13 & 0xFFFFFFFFFFFFF8;
      if (v77) {
        uint64_t v62 = v77;
      }
      swift_bridgeObjectRetain(v77);
      uint64_t v63 = v62;
      uint64_t v13 = v77;
      uint64_t v75 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease(v77);
      uint64_t v14 = v75;
    }
    else
    {
      uint64_t v14 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8));
    }
    uint64_t v71 = v10;
    if (v14)
    {
      v80[0] = (uint64_t)_swiftEmptyArrayStorage;
      int64_t v15 = 0;
      if (v14 > 0) {
        int64_t v15 = v14;
      }
      uint64_t v72 = v14;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
      if (v72 < 0) {
        BUG();
      }
      uint64_t v16 = (void *)v80[0];
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = v16;
        if ((v13 & 0xC000000000000003) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v13);
        }
        else {
          id v19 = *(id *)(v13 + 8 * v17 + 32);
        }
        uint64_t v20 = v19;
        id v21 = [v19 integerValue];

        uint64_t v16 = v18;
        v80[0] = (uint64_t)v18;
        unint64_t v22 = v18[2];
        if (v16[3] >> 1 <= v22)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16[3] >= 2uLL, v22 + 1, 1);
          uint64_t v16 = (void *)v80[0];
        }
        ++v17;
        v16[2] = v22 + 1;
        v16[v22 + 4] = v21;
        uint64_t v13 = v77;
      }
      while (v72 != v17);
      uint64_t v66 = v16;
      swift_bridgeObjectRelease(v77);
      Class v10 = v71;
      uint64_t v11 = v69;
    }
    else
    {
      swift_bridgeObjectRelease(v13);
      uint64_t v66 = _swiftEmptyArrayStorage;
    }
    id v23 = [v70 strides];
    id v24 = v23;
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v11);

    uint64_t v78 = v25;
    if ((v25 & 0x4000000000000001) != 0)
    {
      uint64_t v64 = v25 & 0xFFFFFFFFFFFFF8;
      if (v78) {
        uint64_t v64 = v78;
      }
      swift_bridgeObjectRetain(v78);
      uint64_t v65 = v64;
      uint64_t v25 = v78;
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v78);
      uint64_t v26 = v76;
    }
    else
    {
      uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8));
    }
    if (v26)
    {
      v80[0] = (uint64_t)_swiftEmptyArrayStorage;
      int64_t v27 = 0;
      if (v26 > 0) {
        int64_t v27 = v26;
      }
      uint64_t v73 = v26;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
      if (v73 < 0) {
        BUG();
      }
      char v28 = (void *)v80[0];
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = v28;
        if ((v25 & 0xC000000000000003) != 0) {
          id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v25);
        }
        else {
          id v31 = *(id *)(v25 + 8 * v29 + 32);
        }
        uint64_t v32 = v31;
        id v33 = [v31 integerValue];

        char v28 = v30;
        v80[0] = (uint64_t)v30;
        unint64_t v34 = v30[2];
        if (v28[3] >> 1 <= v34)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28[3] >= 2uLL, v34 + 1, 1);
          char v28 = (void *)v80[0];
        }
        ++v29;
        v28[2] = v34 + 1;
        v28[v34 + 4] = v33;
        uint64_t v25 = v78;
      }
      while (v73 != v29);
      uint64_t v67 = v28;
      swift_bridgeObjectRelease(v78);
      Class v10 = v71;
      uint64_t v11 = v69;
      id v35 = [(objc_class *)v71 shape];
    }
    else
    {
      swift_bridgeObjectRelease(v25);
      uint64_t v67 = _swiftEmptyArrayStorage;
      id v35 = [(objc_class *)v10 shape];
    }
    id v36 = v35;
    uint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v11);

    uint64_t v38 = v37 & 0xFFFFFFFFFFFFF8;
    if ((v37 & 0x4000000000000001) != 0)
    {
      if (v37) {
        uint64_t v38 = v37;
      }
      swift_bridgeObjectRetain(v37);
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      uint64_t v39 = *(void *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8));
    }
    if (v39)
    {
      v80[0] = (uint64_t)_swiftEmptyArrayStorage;
      int64_t v40 = 0;
      if (v39 > 0) {
        int64_t v40 = v39;
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
      if (v39 < 0) {
        BUG();
      }
      id v41 = (void *)v80[0];
      uint64_t v42 = 0;
      uint64_t v74 = v37;
      uint64_t v79 = v39;
      do
      {
        if ((v37 & 0xC000000000000003) != 0) {
          id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v37);
        }
        else {
          id v43 = *(id *)(v37 + 8 * v42 + 32);
        }
        uint64_t v44 = v43;
        id v45 = [v43 integerValue];

        v80[0] = (uint64_t)v41;
        unint64_t v46 = v41[2];
        if (v41[3] >> 1 <= v46)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41[3] >= 2uLL, v46 + 1, 1);
          id v41 = (void *)v80[0];
        }
        ++v42;
        void v41[2] = v46 + 1;
        v41[v46 + 4] = v45;
        uint64_t v37 = v74;
      }
      while (v79 != v42);
      swift_bridgeObjectRelease(v74);
      Class v10 = v71;
    }
    else
    {
      swift_bridgeObjectRelease(v37);
      id v41 = _swiftEmptyArrayStorage;
    }
    BOOL v47 = specialized static Array<A>.== infix(_:_:)((uint64_t)v66, (uint64_t)v67);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v66);
    if (v47)
    {
      swift_bridgeObjectRelease(v41);
      uint64_t v48 = (char *)[(objc_class *)v10 count];
      if ((uint64_t)v48 < 0) {
        BUG();
      }
      if (v48)
      {
        uint64_t v49 = v48;
        for (uint64_t i = 0; i != v49; ++i)
        {
          id v51 = [(objc_class *)v71 objectAtIndexedSubscript:i];
          id v52 = v51;
          [v70 setObject:v52 atIndexedSubscript:i];
        }
        uint64_t v3 = v68;
        Class isa = (Class)v70;
        goto LABEL_61;
      }
      Class isa = (Class)v70;
    }
    else
    {
      if ((uint64_t)[(objc_class *)v10 count] > 0)
      {
        id v53 = objc_allocWithZone((Class)NSNumber);
        id v54 = [v53 initWithInteger:0];
        v80[0] = specialized Array.init(repeating:count:)(v54, v41[2]);
        do
        {
          uint64_t v55 = (void *)v80[0];
          swift_bridgeObjectRetain(v80[0]);
          Class v56 = Array._bridgeToObjectiveC()().super.isa;
          id v57 = [(objc_class *)v71 objectForKeyedSubscript:v56];
          id v58 = v57;

          [v58 doubleValue];
          id v59 = objc_allocWithZone((Class)NSNumber);
          id v60 = [v59 initWithDouble:x0];
          Class v61 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v55);
          [v70 setObject:v60 forKeyedSubscript:v61];
        }
        while ((incrementIndex #1 (shape:index:) in MLDataValue.MultiArrayType.init(_:)((uint64_t)v41, v80) & 1) != 0);

        swift_bridgeObjectRelease(v41);
        Class isa = (Class)v70;

        result._contents.super.Class isa = (Class)swift_bridgeObjectRelease(v80[0]);
        goto LABEL_60;
      }
      Class isa = (Class)v70;

      swift_bridgeObjectRelease(v41);
    }

LABEL_60:
    uint64_t v3 = v68;
  }
LABEL_61:
  *uint64_t v3 = isa;
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  BOOL result = 1;
  if (!v2 || a1 == a2) {
    return result;
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
    return 0;
  }
  uint64_t v4 = v2 - 1;
  uint64_t v5 = 0;
  do
  {
    BOOL result = v4 == v5;
    if (v4 == v5) {
      break;
    }
    BOOL v6 = *(void *)(a1 + 8 * v5 + 40) == *(void *)(a2 + 8 * v5 + 40);
    ++v5;
  }
  while (v6);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  BOOL result = 1;
  if (!v2 || a1 == a2) {
    return result;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 != 1)
  {
    uint64_t v4 = v2 - 2;
    uint64_t v5 = 0;
    do
    {
      BOOL result = *(_DWORD *)(a1 + 4 * v5 + 36) == *(_DWORD *)(a2 + 4 * v5 + 36);
      if (*(_DWORD *)(a1 + 4 * v5 + 36) != *(_DWORD *)(a2 + 4 * v5 + 36)) {
        break;
      }
    }
    while (v4 != v5++);
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v3 = a1[2];
  if (v3 != a2[2]) {
    return 0;
  }
  if (!v3 || a1 == a2) {
    goto LABEL_14;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  unint64_t v18 = v3;
  if (v6 != v8 || v7 != v9)
  {
    unsigned int v2 = 0;
    BOOL v10 = (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v8, v9, 0) & 1) == 0;
    unint64_t v3 = v18;
    if (v10) {
      return v2;
    }
  }
  if (v3 == 1)
  {
LABEL_14:
    LOBYTE(v2) = 1;
    return v2;
  }
  unint64_t v11 = 1;
  uint64_t v12 = 7;
  unsigned int v2 = 0;
  while (1)
  {
    if (v11 >= v3) {
      BUG();
    }
    uint64_t v13 = a1[v12 - 1];
    uint64_t v14 = a1[v12];
    uint64_t v15 = a2[v12 - 1];
    uint64_t v16 = a2[v12];
    if (v13 != v15 || v14 != v16)
    {
      BOOL v10 = (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0) & 1) == 0;
      unint64_t v3 = v18;
      if (v10) {
        return v2;
      }
    }
    ++v11;
    v12 += 2;
    if (v3 == v11) {
      goto LABEL_14;
    }
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16))
  {
    if (!v3 || a1 == a2)
    {
LABEL_51:
      LOBYTE(v2) = 1;
      return v2;
    }
    uint64_t v4 = 0;
    uint64_t v40 = *(void *)(a1 + 16);
    while (2)
    {
      uint64_t v5 = *(void *)(a1 + 32 * v4 + 32);
      uint64_t v6 = *(void *)(a1 + 32 * v4 + 40);
      uint64_t v7 = *(void **)(a1 + 32 * v4 + 48);
      int v8 = *(unsigned __int8 *)(a1 + 32 * v4 + 56);
      uint64_t v9 = *(void *)(a2 + 32 * v4 + 32);
      uint64_t v10 = *(void *)(a2 + 32 * v4 + 40);
      unint64_t v11 = *(void **)(a2 + 32 * v4 + 48);
      char v12 = *(unsigned char *)(a2 + 32 * v4 + 56);
      if (v5 == v9 && v6 == v10) {
        goto LABEL_8;
      }
      char v43 = *(unsigned char *)(a2 + 32 * v4 + 56);
      uint64_t v41 = v4;
      uint64_t v13 = *(void **)(a2 + 32 * v4 + 48);
      uint64_t v14 = v7;
      LODWORD(v2) = v10;
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
      LOBYTE(v10) = v2;
      char v12 = v43;
      uint64_t v7 = v14;
      unint64_t v11 = v13;
      uint64_t v4 = v41;
      uint64_t v3 = v40;
      if (v15)
      {
LABEL_8:
        switch(v8)
        {
          case 0:
            LODWORD(v2) = 0;
            if (!v12) {
              goto LABEL_16;
            }
            return v2;
          case 1:
            LODWORD(v2) = 0;
            if (v12 == 1) {
              goto LABEL_16;
            }
            return v2;
          case 2:
            LODWORD(v2) = 0;
            if (v12 == 2) {
              goto LABEL_16;
            }
            return v2;
          case 3:
            LODWORD(v2) = 0;
            if (v12 == 3)
            {
LABEL_16:
              if (v7 == v11) {
                goto LABEL_17;
              }
            }
            return v2;
          case 4:
            if (v12 != 4) {
              break;
            }
            unint64_t v16 = v7[2];
            if (v16 != v11[2]) {
              break;
            }
            if (!v16 || v7 == v11) {
              goto LABEL_17;
            }
            uint64_t v17 = v7[4];
            uint64_t v18 = v7[5];
            uint64_t v19 = v11[4];
            uint64_t v20 = v11[5];
            unint64_t v42 = v7[2];
            if (v17 != v19 || v18 != v20)
            {
              LODWORD(v2) = 0;
              uint64_t v21 = v4;
              unint64_t v22 = v11;
              id v23 = v7;
              char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0);
              uint64_t v7 = v23;
              unint64_t v11 = v22;
              uint64_t v4 = v21;
              uint64_t v3 = v40;
              BOOL v25 = (v24 & 1) == 0;
              unint64_t v16 = v42;
              if (v25) {
                return v2;
              }
            }
            if (v16 == 1) {
              goto LABEL_17;
            }
            uint64_t v2 = 56;
            unint64_t v26 = 1;
            while (1)
            {
              if (v26 >= v16) {
                BUG();
              }
              uint64_t v27 = *(void *)((char *)v7 + v2 - 8);
              uint64_t v28 = *(void *)((char *)v7 + v2);
              uint64_t v29 = *(void *)((char *)v11 + v2 - 8);
              uint64_t v30 = *(void *)((char *)v11 + v2);
              if (v27 != v29 || v28 != v30)
              {
                uint64_t v31 = v4;
                uint64_t v32 = v11;
                id v33 = v7;
                char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0);
                uint64_t v7 = v33;
                unint64_t v11 = v32;
                uint64_t v4 = v31;
                uint64_t v3 = v40;
                BOOL v25 = (v34 & 1) == 0;
                unint64_t v16 = v42;
                if (v25) {
                  break;
                }
              }
              ++v26;
              v2 += 16;
              if (v16 == v26) {
                goto LABEL_17;
              }
            }
            break;
          case 5:
            if (v12 != 5) {
              break;
            }
            uint64_t v2 = (uint64_t)v7;
            char v35 = v10;
            swift_bridgeObjectRetain(v6);
            outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v2, 5);
            swift_bridgeObjectRetain(v35);
            outlined copy of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v11, 5);
            char v36 = specialized static Array<A>.== infix(_:_:)(v2, v11);
            swift_bridgeObjectRelease(v35);
            outlined consume of ColumnDescriptor.ColumnTypeDescriptor((uint64_t)v11, 5);
            swift_bridgeObjectRelease(v6);
            outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v2, 5);
            uint64_t v3 = v40;
            if ((v36 & 1) == 0) {
              break;
            }
LABEL_17:
            if (++v4 == v3) {
              goto LABEL_51;
            }
            continue;
          case 6:
            switch((unint64_t)v7)
            {
              case 0uLL:
                LODWORD(v2) = 0;
                if (v12 == 6 && !v11) {
                  goto LABEL_17;
                }
                break;
              case 1uLL:
                LODWORD(v2) = 0;
                if (v12 == 6 && v11 == (void *)((char *)&dword_0 + 1)) {
                  goto LABEL_17;
                }
                break;
              case 2uLL:
                LODWORD(v2) = 0;
                if (v12 == 6 && v11 == (void *)((char *)&dword_0 + 2)) {
                  goto LABEL_17;
                }
                break;
              case 3uLL:
                LODWORD(v2) = 0;
                if (v12 == 6 && v11 == (void *)((char *)&dword_0 + 3)) {
                  goto LABEL_17;
                }
                break;
            }
            return v2;
        }
      }
      break;
    }
  }
  LODWORD(v2) = 0;
  return v2;
}

{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v24;

  uint64_t v3 = a1;
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v19 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v19 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
    uint64_t v4 = v20;
    uint64_t v3 = a1;
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if ((a2 & 0x4000000000000001) != 0)
  {
    uint64_t v21 = a2 & 0xFFFFFFFFFFFFF8;
    if (a2) {
      uint64_t v21 = a2;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a2);
    uint64_t v3 = a1;
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  }
  if (v4 == v5)
  {
    LOBYTE(v2) = 1;
    if (v4)
    {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFF8;
      if (v3) {
        uint64_t v6 = v3;
      }
      if ((v3 & 0x4000000000000001) == 0) {
        uint64_t v6 = (v3 & 0xFFFFFFFFFFFFF8) + 32;
      }
      uint64_t v7 = a2;
      if ((a2 & 1) == 0) {
        uint64_t v7 = a2 & 0xFFFFFFFFFFFFF8;
      }
      if ((a2 & 0x4000000000000001) == 0) {
        uint64_t v7 = (a2 & 0xFFFFFFFFFFFFF8) + 32;
      }
      if (v6 != v7)
      {
        if (v4 < 0) {
          BUG();
        }
        if ((v3 & 0xC000000000000003) != 0) {
          int v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
        }
        else {
          int v8 = *(id *)(v3 + 32);
        }
        unint64_t v22 = v8;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000003) == 0, a2);
        if ((a2 & 0xC000000000000003) != 0) {
          uint64_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
        }
        else {
          uint64_t v9 = *(id *)(a2 + 32);
        }
        uint64_t v10 = v9;
        uint64_t v2 = 0;
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
        char v24 = static NSObject.== infix(_:_:)(v22, v10);

        unint64_t v11 = v4;
        if (v24)
        {
          LOBYTE(v2) = 1;
          if (v4 != 1)
          {
            char v12 = 2;
            do
            {
              if (v12 - 1 >= v11) {
                BUG();
              }
              if ((a1 & 0xC000000000000003) != 0) {
                uint64_t v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 1, a1);
              }
              else {
                uint64_t v13 = *(id *)(a1 + 8 * v12 + 24);
              }
              uint64_t v14 = v13;
              if ((a2 & 0xC000000000000003) != 0)
              {
                char v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 1, a2);
              }
              else
              {
                if ((unint64_t)(v12 - 1) >= *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8))) {
                  BUG();
                }
                char v15 = *(id *)(a2 + 8 * v12 + 24);
              }
              unint64_t v16 = v15;
              uint64_t v2 = static NSObject.== infix(_:_:)(v14, v15);

              if ((v2 & 1) == 0) {
                break;
              }
              unint64_t v11 = v4;
            }
            while (v4 != v12++);
          }
        }
      }
    }
  }
  else
  {
    return 0;
  }
  return v2;
}

char specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2 != *(char **)(a2 + 16)) {
    return 0;
  }
  uint64_t v33 = a1;
  char result = 1;
  if (v2 && v33 != a2)
  {
    char v35 = v2;
    uint64_t v4 = *(void **)(v33 + 32);
    uint64_t v6 = *(char **)(v33 + 40);
    char v7 = *(unsigned char *)(v33 + 48);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v9 = *(void *)(a2 + 40);
    uint64_t v31 = a2;
    uint64_t v32 = 48;
    char v10 = *(unsigned char *)(a2 + 48);
    switch(v7)
    {
      case 0:
LABEL_12:
        unint64_t v11 = (void *)v9;
        if (v10) {
          goto LABEL_10;
        }
        outlined consume of MLDataValue(v4, v6, 0);
        outlined consume of MLDataValue((void *)v8, v11, 0);
        char result = 1;
        char v12 = v35;
        if (v4 != (void *)v8) {
          return 0;
        }
        goto LABEL_30;
      case 1:
LABEL_7:
        unint64_t v11 = (void *)v9;
        if (v10 != 1)
        {
LABEL_10:
          char v35 = v6;
          goto LABEL_11;
        }
        double v34 = *(double *)&v4;
        double v30 = *(double *)&v8;
        outlined consume of MLDataValue(v4, v6, 1);
        outlined consume of MLDataValue((void *)v8, v11, 1);
        char result = 1;
        char v12 = v35;
        if (v34 != v30) {
          return 0;
        }
        goto LABEL_30;
      case 2:
LABEL_32:
        if (v10 != 2)
        {
          char v35 = v6;
          unint64_t v11 = (void *)v9;
          swift_bridgeObjectRetain((_BYTE)v6);
LABEL_11:
          unint64_t v9 = (unint64_t)v11;
          goto LABEL_42;
        }
        if (v4 == (void *)v8 && v6 == (char *)v9)
        {
          char v13 = 2;
          outlined copy of MLDataValue(v4, v6, 2u);
          outlined copy of MLDataValue(v4, v6, 2u);
          outlined consume of MLDataValue(v4, v6, 2);
          uint64_t v14 = v4;
          goto LABEL_29;
        }
        char v15 = (char *)v9;
        LOBYTE(v34) = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v9, 0);
        char v16 = 2;
        outlined copy of MLDataValue((void *)v8, v15, 2u);
        outlined copy of MLDataValue(v4, v6, 2u);
        outlined consume of MLDataValue(v4, v6, 2);
        uint64_t v17 = (void *)v8;
        uint64_t v6 = v15;
        goto LABEL_19;
      case 3:
LABEL_34:
        char v23 = v7;
        char v24 = v6;
        if (v10 == 3)
        {
          uint64_t v28 = v4;
          uint64_t v29 = v8;
          char v19 = 3;
          uint64_t v20 = (void *)v9;
          outlined copy of MLDataValue((void *)v8, (void *)v9, 3u);
          outlined copy of MLDataValue(v4, v6, 3u);
          outlined copy of MLDataValue((void *)v8, v20, 3u);
          outlined copy of MLDataValue(v4, v6, 3u);
          char v21 = static MLDataValue.SequenceType.== infix(_:_:)(&v28, &v29);
          goto LABEL_24;
        }
        char v35 = v6;
        unint64_t v25 = v9;
        swift_retain();
        goto LABEL_38;
      case 4:
LABEL_36:
        char v23 = v7;
        char v24 = v6;
        if (v10 == 4)
        {
          char v19 = 4;
          uint64_t v20 = (void *)v9;
          outlined copy of MLDataValue((void *)v8, (void *)v9, 4u);
          outlined copy of MLDataValue(v4, v6, 4u);
          outlined copy of MLDataValue((void *)v8, v20, 4u);
          outlined copy of MLDataValue(v4, v6, 4u);
          char v21 = specialized static Dictionary<>.== infix(_:_:)((uint64_t)v4, v8);
LABEL_24:
          LOBYTE(v34) = v21;
          outlined consume of MLDataValue(v4, v24, v19);
          outlined consume of MLDataValue((void *)v8, v20, v19);
          outlined consume of MLDataValue((void *)v8, v20, v19);
          uint64_t v17 = v4;
          uint64_t v6 = v24;
          char v18 = v19;
          goto LABEL_20;
        }
        char v35 = v6;
        unint64_t v25 = v9;
        swift_bridgeObjectRetain((_BYTE)v4);
LABEL_38:
        unint64_t v9 = v25;
        char v7 = v23;
        goto LABEL_42;
      case 5:
LABEL_39:
        unint64_t v26 = (void *)v9;
        if (v10 != 5)
        {
          char v35 = v6;
          LOBYTE(v33) = v10;
          v4;
          unint64_t v9 = (unint64_t)v26;
          char v10 = v33;
          goto LABEL_42;
        }
        double v34 = COERCE_DOUBLE(type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject, NSObject_ptr));
        outlined copy of MLDataValue((void *)v8, v26, 5u);
        outlined copy of MLDataValue(v4, v6, 5u);
        outlined copy of MLDataValue((void *)v8, v26, 5u);
        outlined copy of MLDataValue(v4, v6, 5u);
        LOBYTE(v34) = static NSObject.== infix(_:_:)(v4, v8);
        char v16 = 5;
        outlined consume of MLDataValue(v4, v6, 5);
        outlined consume of MLDataValue((void *)v8, v26, 5);
        outlined consume of MLDataValue((void *)v8, v26, 5);
        uint64_t v17 = v4;
LABEL_19:
        char v18 = v16;
LABEL_20:
        outlined consume of MLDataValue(v17, v6, v18);
        char result = 1;
        char v12 = v35;
        if ((LOBYTE(v34) & 1) == 0) {
          return 0;
        }
        goto LABEL_30;
      case 6:
        while (2)
        {
          if (v10 != 6 || v8 | v9)
          {
            char v35 = v6;
LABEL_42:
            uint64_t v27 = (void *)v9;
            outlined copy of MLDataValue((void *)v8, (void *)v9, v10);
            outlined consume of MLDataValue(v4, v35, v7);
            outlined consume of MLDataValue((void *)v8, v27, v10);
            return 0;
          }
          char v13 = 6;
          outlined consume of MLDataValue(v4, v6, 6);
          uint64_t v14 = 0;
          uint64_t v6 = 0;
LABEL_29:
          outlined consume of MLDataValue(v14, v6, v13);
          char result = 1;
          char v12 = v35;
LABEL_30:
          unint64_t v22 = v12 - 1;
          if (v22)
          {
            char v35 = v22;
            uint64_t v4 = *(void **)(v33 + v32 + 24 - 16);
            uint64_t v6 = *(char **)(v33 + v32 + 24 - 8);
            char v7 = *(unsigned char *)(v33 + v32 + 24);
            uint64_t v8 = *(void *)(v31 + v32 + 24 - 16);
            unint64_t v9 = *(void *)(v31 + v32 + 24 - 8);
            v32 += 24;
            char v10 = *(unsigned char *)(v31 + v32);
            switch(v7)
            {
              case 0:
                goto LABEL_12;
              case 1:
                goto LABEL_7;
              case 2:
                goto LABEL_32;
              case 3:
                goto LABEL_34;
              case 4:
                goto LABEL_36;
              case 5:
                goto LABEL_39;
              case 6:
                continue;
            }
          }
          break;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  char result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, uint64_t);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void (*v27)(uint64_t *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  double v30 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v30 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  unint64_t v9 = &v23;
  char v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  char result = 1;
  if (v10)
  {
    unint64_t v26 = &v23;
    unint64_t v25 = v3;
    if (a1 != a2)
    {
      char v12 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~*(unsigned __int8 *)(v30 + 80);
      char v13 = v12 + a1;
      uint64_t v14 = v12 + a2;
      uint64_t v27 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16);
      uint64_t v28 = *(void *)(v30 + 72);
      char v15 = v10 - 1;
      uint64_t v29 = &v23;
      char v16 = v25;
      do
      {
        char v24 = v15;
        uint64_t v17 = v27;
        v27(v9, v13, v16);
        char v18 = v26;
        v17(v26, v14, v16);
        char v19 = lazy protocol witness table accessor for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>();
        uint64_t v31 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v18, v16, v19);
        uint64_t v20 = v14;
        char v21 = *(void (**)(uint64_t *, uint64_t))(v30 + 8);
        unint64_t v22 = v18;
        unint64_t v9 = v29;
        v21(v22, v16);
        v21(v9, v16);
        char result = v31;
        char v15 = v24 - 1;
        if ((v31 & 1) == 0) {
          break;
        }
        v13 += v28;
        uint64_t v14 = v28 + v20;
      }
      while (v24);
    }
  }
  return result;
}

id MLDataValue.MultiArrayType.mlMultiArray.getter()
{
  return *v0;
}

uint64_t MLDataValue.MultiArrayType.description.getter()
{
  return MLDataValue.MultiArrayType.description.getter((SEL *)&selRef_description);
}

id MLDataValue.MultiArrayType.dataValue.getter()
{
  uint64_t v2 = *v1;
  *(void *)uint64_t v0 = *v1;
  *(void *)(v0 + 8) = 0;
  *(unsigned char *)(v0 + 16) = 5;
  return v2;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init(shape:)(Swift::OpaquePointer shape)
{
  rawValue = shape._rawValue;
  uint64_t v3 = v1;
  uint64_t v11 = *((void *)shape._rawValue + 2);
  if (v11)
  {
    char v10 = v1;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = rawValue;
      uint64_t v6 = rawValue[v4++ + 4];
      id v7 = objc_allocWithZone((Class)NSNumber);
      [v7 initWithInteger:v6];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
      uint64_t v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      rawValue = v5;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8);
      specialized ContiguousArray._endMutation()(v8);
    }
    while (v11 != v4);
    swift_bridgeObjectRelease((_BYTE)v5);
    uint64_t v3 = v10;
  }
  else
  {
    swift_bridgeObjectRelease(shape._rawValue);
  }
  objc_allocWithZone((Class)MLMultiArray);
  result._contents.super.Class isa = (Class)@nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
  v3->_contents.super.Class isa = result._contents.super.isa;
  return result;
}

uint64_t incrementIndex #1 (shape:index:) in MLDataValue.MultiArrayType.init(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((*a2 & 0x4000000000000001) != 0)
  {
    uint64_t v30 = v3 & 0xFFFFFFFFFFFFF8;
    if (v3) {
      uint64_t v30 = *a2;
    }
    swift_bridgeObjectRetain(*a2);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  }
  BOOL v5 = __OFSUB__(v4, 1);
  unint64_t v6 = v4 - 1;
  if (v5) {
    BUG();
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    int64_t v31 = *(void *)(a1 + 16);
    do
    {
      uint64_t v7 = *a2;
      if ((*a2 & 0xC000000000000003) != 0)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
      }
      else
      {
        if (v6 >= *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8))) {
          BUG();
        }
        id v8 = *(id *)(v7 + 8 * v6 + 32);
      }
      unint64_t v9 = v8;
      char v10 = (char *)[v8 integerValue];

      BOOL v5 = __OFADD__(1, v10);
      uint64_t v11 = v10 + 1;
      if (v5) {
        BUG();
      }
      id v12 = objc_allocWithZone((Class)NSNumber);
      id v13 = [v12 initWithInteger:v11];
      uint64_t v14 = *a2;
      char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*a2);
      *a2 = v14;
      if (!isUniquelyReferenced_nonNull_bridgeObject || (v14 & 0x4000000000000001) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
        *a2 = v14;
      }
      uint64_t v16 = v14 & 0xFFFFFFFFFFFFF8;
      if (v6 >= *(void *)(v16 + 16)) {
        BUG();
      }
      uint64_t v17 = *(void **)(v16 + 8 * v6 + 32);
      *(void *)(v16 + 8 * v6 + 32) = v13;

      specialized Array._endMutation()();
      uint64_t v18 = *a2;
      if ((*a2 & 0xC000000000000003) != 0)
      {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v18);
      }
      else
      {
        if (v6 >= *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8))) {
          BUG();
        }
        id v19 = *(id *)(v18 + 8 * v6 + 32);
      }
      uint64_t v20 = v19;
      id v21 = [v19 integerValue];

      if ((uint64_t)v6 >= v31) {
        BUG();
      }
      LOBYTE(v21) = (uint64_t)v21 < *(void *)(a1 + 8 * v6 + 32);
      if ((_BYTE)v21) {
        break;
      }
      id v22 = objc_allocWithZone((Class)NSNumber);
      id v23 = [v22 initWithInteger:0];
      uint64_t v24 = *a2;
      char v25 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a2);
      *a2 = v24;
      if (!v25 || (v24 & 0x4000000000000001) != 0)
      {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
        *a2 = v24;
      }
      uint64_t v26 = v24 & 0xFFFFFFFFFFFFF8;
      if (v6 >= *(void *)(v26 + 16)) {
        BUG();
      }
      uint64_t v27 = *(void **)(v26 + 8 * v6 + 32);
      *(void *)(v26 + 8 * v6 + 32) = v23;

      specialized Array._endMutation()();
    }
    while (v6-- != 0);
  }
  return v21;
}

void MLDataValue.MultiArrayType.subscript.getter(uint64_t a1)
{
  id v2 = [*v1 objectAtIndexedSubscript:a1];
  id v3 = v2;
  [v3 doubleValue];
}

{
  void **v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  id v2 = *v1;
  id v13 = *(void *)(a1 + 16);
  if (v13)
  {
    id v12 = *v1;
    specialized ContiguousArray.reserveCapacity(_:)(v13);
    uint64_t v4 = 0;
    do
    {
      BOOL v5 = *(void *)(a1 + 8 * v4++ + 32);
      unint64_t v6 = objc_allocWithZone((Class)NSNumber);
      [v6 initWithInteger:v5];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      uint64_t v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7);
      specialized ContiguousArray._endMutation()(v7);
    }
    while (v13 != v4);
    LOBYTE(v8) = _swiftEmptyArrayStorage;
    id v2 = v12;
  }
  else
  {
    id v8 = _swiftEmptyArrayStorage;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_BYTE)v8);
  char v10 = [v2 objectForKeyedSubscript:isa];
  uint64_t v11 = v10;

  [v11 doubleValue];
}

uint64_t static MLDataValue.MultiArrayType.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject, NSObject_ptr);
  return static NSObject.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLDataValue.MultiArrayType(uint64_t *a1, uint64_t *a2)
{
  return static MLDataValue.MultiArrayType.== infix(_:_:)(a1, a2);
}

uint64_t MLDataValue.MultiArrayType.debugDescription.getter()
{
  return MLDataValue.MultiArrayType.description.getter((SEL *)&selRef_debugDescription);
}

uint64_t MLDataValue.MultiArrayType.description.getter(SEL *a1)
{
  id v2 = [*v1 *a1];
  id v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataValue.MultiArrayType()
{
  return MLDataValue.MultiArrayType.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataValue.MultiArrayType()
{
  return MLDataValue.MultiArrayType.debugDescription.getter();
}

unsigned char *static MLDataValue.MultiArrayType.dataValueType.getter()
{
  *CreateML::MLDataValue::MultiArrayType result = 5;
  return result;
}

void MLDataValue.MultiArrayType.init(from:)(uint64_t a1)
{
  id v3 = v1;
  uint64_t v4 = *(void **)a1;
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5 != 5)
  {
    outlined consume of MLDataValue(v4, *(void **)(a1 + 8), v5);
    uint64_t v4 = 0;
  }
  *id v3 = v4;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  id v3 = (NSNumber *)swift_allocObject(v2, 40, 7);
  v3[2].super.super.Class isa = (Class)(&dword_0 + 1);
  v3[3].super.super.Class isa = (Class)(&dword_0 + 3);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  v3[4].super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  specialized Array._endMutation()(1, &lazy cache variable for type metadata for NSNumber);
  objc_allocWithZone((Class)MLMultiArray);
  id v4 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)v3, 65568);
  if (!v4)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002ELL, "CreateML/MultiArrayType.swift" + 0x8000000000000000, "CreateML/MultiArrayType.swift", 29, 2, 108, 0);
    BUG();
  }
  MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v4);
  result._contents.super.Class isa = (Class)v3;
  *uint64_t v1 = v3;
  return result;
}

void *MLDataValue.MultiArrayType.init(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = swift_allocObject(&unk_39A580, 24, 7);
  uint64_t v4 = specialized handling<A, B>(_:_:)(*(void *)(a1 + 16));
  char v25 = v2;
  if (!v4) {
    BUG();
  }
  uint64_t v5 = type metadata accessor for CMLMultiArray();
  uint64_t v6 = swift_allocObject(v5, 24, 7);
  *(void *)(v6 + 16) = v4;
  uint64_t v27 = v3;
  *(void *)(v3 + 16) = v6;
  swift_retain(v6);
  uint64_t v7 = CMLMultiArray.data()();
  Swift::Int v8 = CMLMultiArray.dimensions()();
  if (v9)
  {
    swift_unexpectedError(v9, "CreateML/MultiArrayType.swift", 29, 1, 122);
    BUG();
  }
  uint64_t v10 = v8;
  uint64_t v11 = CMLMultiArray.shape()();
  uint64_t v12 = CMLMultiArray.strides()();
  if (v10 < 0) {
    BUG();
  }
  uint64_t v28 = v7;
  if (v10)
  {
    uint64_t v29 = v12;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    uint64_t v13 = 0;
    uint64_t v30 = v10;
    do
    {
      uint64_t v14 = *(void *)(v11 + 8 * v13++);
      id v15 = objc_allocWithZone((Class)NSNumber);
      id v16 = [v15 initWithUnsignedLongLong:v14];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v17 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
      specialized ContiguousArray._endMutation()();
    }
    while (v30 != v13);
    int64_t v31 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v30);
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)(v29 + 8 * v18++);
      id v20 = objc_allocWithZone((Class)NSNumber);
      id v21 = [v20 initWithLongLong:v19];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v22 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v21);
      specialized ContiguousArray._endMutation()();
    }
    while (v30 != v18);
  }
  objc_allocWithZone((Class)MLMultiArray);
  swift_retain(v27);
  id v23 = @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(v28, (uint64_t)_swiftEmptyArrayStorage, 65600, (uint64_t)_swiftEmptyArrayStorage, partial apply for closure #3 in MLDataValue.MultiArrayType.init(from:), v27);
  MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v23);
  swift_release(v27);
  swift_release(v6);
  swift_release(a1);
  CreateML::MLDataValue::MultiArrayType result = v31;
  *char v25 = v31;
  return result;
}

uint64_t closure #3 in MLDataValue.MultiArrayType.init(from:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess(a2 + 16, v4, 1, 0);
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  return swift_release(v2);
}

uint64_t MLDataValue.MultiArrayType.featureValue.getter()
{
  id v1 = *v0;
  id v43 = [v1 dataPointer];
  id v2 = [v1 shape];
  id v3 = v2;
  uint64_t v4 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v5 = v3;
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  uint64_t v49 = v6;
  if ((v6 & 0x4000000000000001) != 0)
  {
    uint64_t v40 = v49 & 0xFFFFFFFFFFFFF8;
    if (v49) {
      uint64_t v40 = v49;
    }
    swift_bridgeObjectRetain(v49);
    uint64_t v41 = v40;
    uint64_t v6 = v49;
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v49);
    uint64_t v7 = v47;
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
  }
  if (v7)
  {
    uint64_t v45 = v4;
    id v44 = v1;
    uint64_t v48 = _swiftEmptyArrayStorage;
    int64_t v8 = 0;
    if (v7 > 0) {
      int64_t v8 = v7;
    }
    uint64_t v47 = v7;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    if (v47 < 0) {
      BUG();
    }
    uint64_t v9 = v48;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v9;
      if ((v6 & 0xC000000000000003) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v6);
      }
      else {
        id v12 = *(id *)(v6 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      id v14 = [v12 unsignedLongLongValue];

      uint64_t v9 = v11;
      uint64_t v48 = v11;
      unint64_t v15 = v11[2];
      if (v9[3] >> 1 <= v15)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9[3] >= 2uLL, v15 + 1, 1);
        uint64_t v9 = v48;
      }
      ++v10;
      v9[2] = v15 + 1;
      v9[v15 + 4] = v14;
      uint64_t v6 = v49;
    }
    while (v47 != v10);
    unint64_t v46 = v9;
    swift_bridgeObjectRelease(v49);
    uint64_t v4 = v45;
    id v16 = [v44 strides];
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    unint64_t v46 = _swiftEmptyArrayStorage;
    id v16 = [v1 strides];
  }
  id v17 = v16;
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v4);

  uint64_t v19 = v18 & 0xFFFFFFFFFFFFF8;
  if ((v18 & 0x4000000000000001) != 0)
  {
    if (v18) {
      uint64_t v19 = v18;
    }
    swift_bridgeObjectRetain(v18);
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8));
  }
  if (v20)
  {
    uint64_t v48 = _swiftEmptyArrayStorage;
    int64_t v21 = 0;
    if (v20 > 0) {
      int64_t v21 = v20;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    if (v20 < 0) {
      BUG();
    }
    uint64_t v22 = v48;
    uint64_t v23 = 0;
    uint64_t v47 = v18;
    uint64_t v49 = v20;
    do
    {
      if ((v18 & 0xC000000000000003) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
      }
      else {
        id v24 = *(id *)(v18 + 8 * v23 + 32);
      }
      char v25 = v24;
      id v26 = [v24 longLongValue];

      uint64_t v48 = v22;
      unint64_t v27 = v22[2];
      if (v22[3] >> 1 <= v27)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22[3] >= 2uLL, v27 + 1, 1);
        uint64_t v22 = v48;
      }
      ++v23;
      v22[2] = v27 + 1;
      v22[v27 + 4] = v26;
      uint64_t v18 = v47;
    }
    while (v49 != v23);
    swift_bridgeObjectRelease(v47);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  uint64_t v28 = v46[2];
  swift_bridgeObjectRetain_n(v46, 2);
  swift_bridgeObjectRetain(v22);
  uint64_t v29 = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v28, (uint64_t)(v46 + 4), (uint64_t)(v22 + 4), (uint64_t)v43);
  if (!v29) {
    BUG();
  }
  uint64_t v30 = type metadata accessor for CMLMultiArray();
  uint64_t inited = swift_initStackObject(v30, v42);
  *(void *)(inited + 16) = v29;
  swift_bridgeObjectRelease_n(v22, 2, v32, v33, v34);
  swift_bridgeObjectRelease_n(v46, 3, v35, v36, v37);
  type metadata accessor for CMLFeatureValue();
  swift_retain(inited);
  uint64_t v38 = CMLFeatureValue.__allocating_init(_:)(inited);
  swift_release(inited);
  return v38;
}

unsigned char *protocol witness for static MLDataValueConvertible.dataValueType.getter in conformance MLDataValue.MultiArrayType()
{
  return static MLDataValue.MultiArrayType.dataValueType.getter();
}

void protocol witness for MLDataValueConvertible.init(from:) in conformance MLDataValue.MultiArrayType(uint64_t a1)
{
}

CreateML::MLDataValue::MultiArrayType protocol witness for MLDataValueConvertible.init() in conformance MLDataValue.MultiArrayType()
{
  return MLDataValue.MultiArrayType.init()();
}

id protocol witness for MLDataValueConvertible.dataValue.getter in conformance MLDataValue.MultiArrayType()
{
  return MLDataValue.MultiArrayType.dataValue.getter();
}

void *protocol witness for FeatureValueConvertible.init(from:) in conformance MLDataValue.MultiArrayType(uint64_t a1)
{
  return MLDataValue.MultiArrayType.init(from:)(a1);
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance MLDataValue.MultiArrayType()
{
  return MLDataValue.MultiArrayType.featureValue.getter();
}

id @nonobjc MLMultiArray.init(shape:dataType:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v8 = 0;
  id v4 = [v2 initWithShape:isa dataType:a2 error:&v8];

  id v5 = v8;
  if (v4)
  {
    v8;
  }
  else
  {
    id v6 = v8;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }
  return v4;
}

void *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 != __src || &__src[4 * a2] <= a3) {
    return memmove(a3, __src, 4 * a2);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 != __src || &__src[8 * a2] <= a3) {
    return memmove(a3, __src, 8 * a2);
  }
  return result;
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 != __src || &__src[8 * a2] <= a3) {
    return memmove(a3, __src, 8 * a2);
  }
  return result;
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 != __src || &__src[8 * a2] <= a3) {
    return memmove(a3, __src, 8 * a2);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 != __src || &__src[8 * a2] <= a3) {
    return memmove(a3, __src, 8 * a2);
  }
  return result;
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 != __src || &__src[4 * a2] <= a3) {
    return memmove(a3, __src, 4 * a2);
  }
  return result;
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)a2;
  if (a3 != __src || &__src[8 * a2] <= a3) {
    return memmove(a3, __src, 8 * a2);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(a2 << 6);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(a2 << 6);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(32 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

{
  char *result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = (char *)(16 * a2);
  if (a3 != __src || &result[(void)__src] <= a3) {
    return (char *)memmove(a3, __src, (size_t)result);
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Column<[Float]>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for Column<[Double]>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for URL);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, type metadata accessor for WeightedDataSample);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Tensor);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for MLProgram.Operation);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for FeatureDescription);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for NeuralNetwork.Layer);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, type metadata accessor for MLCheckpoint);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for ClassificationDistribution<String>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for ClassificationDistribution<Int>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for MLShapedArray<Double>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Model);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for FeatureVectorizerConfiguration.Input);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<String, [MLObjectDetector.NormalizedAnnotation]>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for MLShapedArray<Float>);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Event);
}

size_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 56 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 24 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 56 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 24 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 24 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 24 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 56 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 48 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 40 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 24 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(__src, a2, a3);
}

{
  size_t result;

  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  CreateML::MLDataValue::MultiArrayType result = 24 * a2;
  if (a3 != __src || &__src[result] <= a3) {
    return (size_t)memmove(a3, __src, result);
  }
  return result;
}

void *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, int64_t __len, char *__dst)
{
  CreateML::MLDataValue::MultiArrayType result = (void *)__len;
  if (__len < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (__dst != __src || &__src[__len] <= __dst) {
    return memmove(__dst, __src, __len);
  }
  return result;
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)__len;
  if (__len < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (__dst != __src || &__src[__len] <= __dst) {
    return memmove(__dst, __src, __len);
  }
  return result;
}

{
  void *result;

  CreateML::MLDataValue::MultiArrayType result = (void *)__len;
  if (__len < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (__dst != __src || &__src[__len] <= __dst) {
    return memmove(__dst, __src, __len);
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 < a1
    || (uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a4),
        a1 + a2 * *(void *)(*(void *)(result - 8) + 72) <= a3))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3, a1, a2, result);
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  if (a2 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 1);
    BUG();
  }
  if (a3 < a1 || (uint64_t result = a4(0), a1 + a2 * *(void *)(*(void *)(result - 8) + 72) <= a3))
  {
    uint64_t v7 = a4(0);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3, a1, a2, result);
  }
  return result;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(MLDataValue, MLDataValue)]?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(key: MLDataValue, value: MLDataValue)]?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLDataValue]?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<String?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Double?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Column<[Float]>>, &demangling cache variable for type metadata for Column<[Float]>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Column<[Double]>>, &demangling cache variable for type metadata for Column<[Double]>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RecommendationMetrics<MLRecommender.Identifier>>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>, &demangling cache variable for type metadata for (String, CSVType), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, JSONType)>, &demangling cache variable for type metadata for (String, JSONType), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(MLDataValue, Int)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DataFrame.Slice?>, &demangling cache variable for type metadata for DataFrame.Slice?, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(label: Int, keypoints: MLMultiArray)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, confidence: Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(label: String, confidence: Double)]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Float>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Interaction>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(tokens: [String], labels: [String])>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ColumnDescriptor>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ClassificationDistribution<String>>, &demangling cache variable for type metadata for ClassificationDistribution<String>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ClassificationDistribution<Int>>, &demangling cache variable for type metadata for ClassificationDistribution<Int>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<MLShapedArray<Double>, Int>>, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Double>, Int>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<MLShapedArray<Double>, String>>, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Double>, String>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Column<[Any?]>>, &demangling cache variable for type metadata for Column<[Any?]>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Column<String>>, &demangling cache variable for type metadata for Column<String>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLObjectDetector.DecodableAnnotation]?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLObjectDetector.NormalizedAnnotation>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLObjectDetector.ObjectAnnotation>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLObjectDetector.ObjectAnnotation]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Metadata>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NLLanguage>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(label: Int, embedding: MLMultiArray)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLRecommender.Identifier>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int, score: Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(precision: Double, recall: Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(item: MLRecommender.Identifier, score: Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(text: String, distance: Double)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<MLShapedArray<Float>, String>>, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<URL, String>>, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(predicted: String, label: String)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLActionClassifier.Prediction]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLHandActionClassifier.Prediction]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(text: String, label: String)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Double]>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLUntypedColumn>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, uint64_t a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(void))&type metadata accessor for URL, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<WeightedDataSample>, type metadata accessor for WeightedDataSample, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Tensor>, (uint64_t (*)(void))&type metadata accessor for Tensor, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLProgram.Value>, (uint64_t (*)(void))&type metadata accessor for MLProgram.Value, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>, (uint64_t (*)(void))&type metadata accessor for FeatureDescription, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NeuralNetwork.Layer>, (uint64_t (*)(void))&type metadata accessor for NeuralNetwork.Layer, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLLinearRegressor>, type metadata accessor for MLLinearRegressor, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLLogisticRegressionClassifier>, type metadata accessor for MLLogisticRegressionClassifier, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>, (uint64_t (*)(void))&type metadata accessor for AnyColumn, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ItemSimilarityRecommenderConfiguration.SimilarItems>, (uint64_t (*)(void))&type metadata accessor for ItemSimilarityRecommenderConfiguration.SimilarItems, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ItemSimilarityRecommenderConfiguration.ItemScore>, (uint64_t (*)(void))&type metadata accessor for ItemSimilarityRecommenderConfiguration.ItemScore, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = (uint64_t)result;
  return result;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<URL, String>>, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>, (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Float>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Interaction>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLObjectDetector.ObjectAnnotation>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MLRecommender.Identifier>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(text: String, label: String)>, (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, int64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, int64_t, void *), void (*a7)(uint64_t, int64_t, void *))
{
  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, 8 * v9 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size(v15) - 32);
    v15[2] = v13;
    v15[3] = 2 * (v16 / 8);
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release(a4);
  return v15;
}

{
  int64_t v9;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  long long v16;
  void *v17;
  uint64_t v18;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, 16 * v9 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size(v15) - 32);
    v15[2] = v13;
    v15[3] = 2 * (v16 / 16);
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release(a4);
  return v15;
}

{
  int64_t v9;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  long long v16;
  void *v17;
  uint64_t v18;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, 24 * v9 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size(v15) - 32);
    v15[2] = v13;
    v15[3] = 2 * (v16 / 24);
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release(a4);
  return v15;
}

{
  int64_t v9;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  long long v16;
  void *v17;
  uint64_t v18;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, 4 * v9 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size(v15) - 32);
    v15[2] = v13;
    v15[3] = 2 * (v16 / 4);
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release(a4);
  return v15;
}

{
  int64_t v9;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  long long v16;
  void *v17;
  uint64_t v18;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, 32 * v9 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size(v15) - 32);
    v15[2] = v13;
    v15[3] = 2 * (v16 / 32);
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

{
  int64_t v9;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  long long v16;
  void *v17;
  uint64_t v18;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, 56 * v9 + 32, 7);
    long long v16 = (uint64_t)(_swift_stdlib_malloc_size(v15) - 32);
    v15[2] = v13;
    v15[3] = 2 * (v16 / 56);
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release(a4);
  return v15;
}

{
  int64_t v9;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  void *v17;
  uint64_t v18;

  int64_t v9 = a2;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      int64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        int64_t v9 = v12;
      }
    }
  }
  int64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject(v14, v9 + 32, 7);
    long long v16 = _swift_stdlib_malloc_size(v15);
    v15[2] = v13;
    v15[3] = 2 * v16 - 64;
  }
  else
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  id v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (a1)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void (*a7)(unint64_t, uint64_t, unint64_t))
{
  uint64_t v9 = a2;
  char v10 = a1;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        uint64_t v9 = v12;
      }
    }
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v27 = a6;
    uint64_t v14 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
    uint64_t v15 = *(void *)(v14 + 72);
    uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = (void *)swift_allocObject(v26, v17 + v15 * v9, v16 | 7);
    size_t v19 = _swift_stdlib_malloc_size(v18);
    if (!v15) {
      BUG();
    }
    uint64_t v20 = v19 - v17;
    if (v20 == 0x8000000000000000 && v15 == -1) {
      BUG();
    }
    v18[2] = v13;
    v18[3] = 2 * (v20 / v15);
    a6 = v27;
    char v10 = a1;
  }
  else
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
  }
  int v21 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8) + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  unint64_t v23 = (unint64_t)v18 + v22;
  unint64_t v24 = a4 + v22;
  if (v10)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v24, v13, v23, a6);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v24, v13, v23);
  }
  swift_release(a4);
  return v18;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a3)
  {
    unint64_t v7 = *(void *)(a4 + 24);
    if ((uint64_t)(v7 >> 1) >= a2)
    {
      uint64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v8 > a2) {
        uint64_t v5 = v8;
      }
    }
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v5 <= v9) {
    uint64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    unint64_t v11 = (char *)swift_allocObject(v10, 8 * v5 + 32, 7);
    long long v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v12 / 8);
  }
  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v9, v13);
  }
  swift_release(a4);
  return v11;
}

{
  uint64_t v5;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  long long v12;
  char *v13;
  char *v14;

  uint64_t v5 = a2;
  if (a3)
  {
    unint64_t v7 = *(void *)(a4 + 24);
    if ((uint64_t)(v7 >> 1) >= a2)
    {
      uint64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v8 > a2) {
        uint64_t v5 = v8;
      }
    }
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v5 <= v9) {
    uint64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Recommendation<MLRecommender.Identifier, MLRecommender.Identifier>>);
    unint64_t v11 = (char *)swift_allocObject(v10, (v5 << 6) | 0x20, 7);
    long long v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v12 / 64);
  }
  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v14, v9, (unint64_t)v13);
  }
  swift_release();
  return v11;
}

{
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  long long v11;

  uint64_t v5 = a2;
  if (a3)
  {
    id v6 = *(void *)(a4 + 24);
    if ((uint64_t)(v6 >> 1) >= a2)
    {
      uint64_t v5 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 > a2) {
        uint64_t v5 = v7;
      }
    }
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v5 <= v8) {
    uint64_t v5 = *(void *)(a4 + 16);
  }
  if (v5)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject(v9, 8 * v5 + 32, 7);
    unint64_t v11 = (uint64_t)(_swift_stdlib_malloc_size(v10) - 32);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v11 / 8);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v10 + 32, (const void *)(a4 + 32), 8 * v8);
  }
  swift_release();
  return v10;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(unint64_t, uint64_t, unint64_t))
{
  unint64_t v7 = a6;
  uint64_t v9 = a2;
  char v10 = a1;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    if ((uint64_t)(v11 >> 1) >= a2)
    {
      uint64_t v9 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      a3 = 0x4000000000000000;
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v12 > a2) {
        uint64_t v9 = v12;
      }
    }
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v9 <= v13) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  if (v9)
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v30 = v7;
    uint64_t v14 = *(void *)(v7(0) - 8);
    uint64_t v15 = *(void *)(v14 + 72);
    uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = v17 + v15 * v9;
    size_t v19 = (void *)swift_allocObject(v29, v18, v16 | 7);
    size_t v20 = _swift_stdlib_malloc_size(v19);
    if (!v15) {
      BUG();
    }
    uint64_t v21 = v20 - v17;
    if (v21 == 0x8000000000000000 && v15 == -1) {
      BUG();
    }
    uint64_t v22 = v21 % v15;
    v19[2] = v13;
    v19[3] = 2 * (v21 / v15);
    unint64_t v7 = v30;
    char v10 = a1;
    uint64_t v23 = ((uint64_t (*)(void, uint64_t, uint64_t))v30)(0, v18, v22);
  }
  else
  {
    size_t v19 = _swiftEmptyArrayStorage;
    uint64_t v23 = ((uint64_t (*)(void, int64_t, uint64_t))a6)(0, a2, a3);
  }
  int v24 = *(unsigned __int8 *)(*(void *)(v23 - 8) + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  unint64_t v26 = (unint64_t)v19 + v25;
  unint64_t v27 = a4 + v25;
  if (v10)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v27, v13, v26, v7);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v27, v13, v26);
  }
  swift_release(a4);
  return v19;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(char *, uint64_t, char *))
{
  uint64_t v8 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      uint64_t v8 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        uint64_t v8 = v11;
      }
    }
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v8 <= v12) {
    uint64_t v8 = *(void *)(a4 + 16);
  }
  if (v8)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)swift_allocObject(v13, 40 * v8 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size(v14) - 32);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * (v15 / 40);
  }
  else
  {
    uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 32;
  uint64_t v17 = (char *)(a4 + 32);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v17, v12, v16);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a6(v17, v12, v16);
  }
  swift_release();
  return v14;
}

{
  uint64_t v8;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  long long v15;
  char *v16;
  char *v17;

  uint64_t v8 = a2;
  if (a3)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    if ((uint64_t)(v10 >> 1) >= a2)
    {
      uint64_t v8 = *(void *)(a4 + 24) >> 1;
    }
    else
    {
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
        BUG();
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 > a2) {
        uint64_t v8 = v11;
      }
    }
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v8 <= v12) {
    uint64_t v8 = *(void *)(a4 + 16);
  }
  if (v8)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)swift_allocObject(v13, 48 * v8 + 32, 7);
    long long v15 = (uint64_t)(_swift_stdlib_malloc_size(v14) - 32);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * (v15 / 48);
  }
  else
  {
    uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 32;
  uint64_t v17 = (char *)(a4 + 32);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v17, v12, v16);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a6(v17, v12, v16);
  }
  swift_release(a4);
  return v14;
}

uint64_t lazy protocol witness table accessor for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>()
{
  uint64_t result = lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>;
  if (!lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    lazy protocol witness table accessor for type URL and conformance URL();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> AnnotatedFeature<A, B>, v1);
    lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B> = result;
  }
  return result;
}

uint64_t sub_194C94()
{
  swift_release(*(void *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #3 in MLDataValue.MultiArrayType.init(from:)(uint64_t a1)
{
  return closure #3 in MLDataValue.MultiArrayType.init(from:)(a1, v1);
}

uint64_t (*ActionClassifierTrainingSessionDelegate.sourceTable.modify(uint64_t a1))()
{
  swift_beginAccess(OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable + v1, a1, 33, 0);
  return HandPoseClassifierTrainingSessionDelegate.sourceTable.modify;
}

void *ActionClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v33 = v1;
  uint64_t v31 = a1;
  v2[2] = 0xD000000000000017;
  uint64_t v32 = "training_accuracy" + 0x8000000000000000;
  v2[3] = "training_accuracy" + 0x8000000000000000;
  uint64_t v3 = (uint64_t)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
  uint64_t v4 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  uint64_t v26 = v3;
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  uint64_t v5 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable;
  *(void *)((char *)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable) = 0;
  uint64_t v27 = v5;
  *((unsigned char *)v2 + v5 + 8) = -1;
  *(void *)((char *)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = 0;
  uint64_t v28 = (char *)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
  static MLActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = (char *)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
  static MLActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v7 = empty;
  uint64_t v8 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_args;
  uint64_t v9 = type metadata accessor for CMLParameters();
  uint64_t v10 = swift_allocObject(v9, 24, 7);
  *(void *)(v10 + 16) = v7;
  uint64_t v30 = v8;
  *(void *)((char *)v2 + v8) = v10;
  uint64_t v11 = (uint64_t)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters;
  outlined init with copy of MLTrainingSessionParameters(v31, (uint64_t)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  if (((unint64_t)"training_accuracy" & 0x1000000000000000) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(name:), 0, 0xD000000000000017, v32, &type metadata for OpaquePointer);
    if (!v33)
    {
      uint64_t v33 = 0;
      uint64_t v16 = (uint64_t)v25;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v32 = (char *)v24;
    uint64_t v12 = alloca(32);
    uint64_t v13 = alloca(32);
    uint64_t v25 = closure #1 in CMLModel.init(name:);
    uint64_t v26 = 0;
    if (((unint64_t)"training_accuracy" & 0x2000000000000000) != 0)
    {
      v24[0] = 0xD000000000000017;
      v24[1] = (unint64_t)"training_accuracy" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v17 = v33;
      uint64_t v18 = specialized handling<A, B>(_:_:)((uint64_t)v24);
      if (!v17)
      {
        uint64_t v16 = v18;
        if (!v18) {
          BUG();
        }
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v14 = v33;
      uint64_t v15 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(((unint64_t)"training_accuracy" & 0xFFFFFFFFFFFFFFFLL) + 32, 23, (uint64_t (*)(uint64_t))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
      if (!v14)
      {
        uint64_t v16 = v15;
LABEL_9:
        uint64_t v33 = 0;
LABEL_10:
        uint64_t v20 = v31;
        uint64_t v21 = type metadata accessor for CMLModel();
        uint64_t v22 = swift_allocObject(v21, 24, 7);
        *(void *)(v22 + 16) = v16;
        outlined destroy of MLActivityClassifier.ModelParameters(v20, type metadata accessor for MLTrainingSessionParameters);
        *(void *)((char *)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model) = v22;
        return v2;
      }
    }
  }
  outlined destroy of MLActivityClassifier.ModelParameters(v31, type metadata accessor for MLTrainingSessionParameters);
  swift_bridgeObjectRelease(v2[3]);
  outlined destroy of MLActivityClassifier.ModelParameters(v11, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v26, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  outlined consume of MLDataTable?(*(void *)((char *)v2 + v27), *(_DWORD *)((char *)v2 + v27 + 8));
  outlined consume of Result<_DataTable, Error>(*(void *)v28, *((_DWORD *)v28 + 2));
  outlined consume of Result<_DataTable, Error>(*(void *)v29, *((_DWORD *)v29 + 2));
  swift_release();
  uint64_t v19 = type metadata accessor for ActionClassifierTrainingSessionDelegate(0);
  swift_deallocPartialClassInstance(v2, v19, *(unsigned int *)(*v2 + 48), *(unsigned __int16 *)(*v2 + 52));
  return v2;
}

void *ActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v174 = v3;
  uint64_t v166 = a3;
  uint64_t v165 = a2;
  uint64_t v167 = a1;
  uint64_t v146 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData(0);
  int64_t v5 = *(void *)(*(void *)(v146 - 8) + 64);
  id v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v145 = &v132;
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v150 = *(void *)(v151 - 8);
  int64_t v8 = *(void *)(v150 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v154 = &v132;
  uint64_t v142 = type metadata accessor for AnyColumn(0);
  uint64_t v141 = *(void *)(v142 - 8);
  int64_t v11 = *(void *)(v141 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  uint64_t v149 = &v132;
  uint64_t v14 = alloca(v11);
  uint64_t v15 = alloca(v11);
  BOOL v143 = &v132;
  uint64_t v159 = type metadata accessor for DataFrame(0);
  uint64_t v160 = *(void *)(v159 - 8);
  int64_t v16 = *(void *)(v160 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v144 = &v132;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  char v163 = &v132;
  uint64_t v21 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
  uint64_t v23 = alloca(v22);
  int v24 = alloca(v22);
  uint64_t v158 = (int *)&v132;
  uint64_t v172 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  int64_t v25 = *(void *)(*((void *)v172 - 1) + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v168 = (char *)&v132;
  char v164 = (uint64_t *)type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v28 = *(void *)(*(v164 - 1) + 64);
  uint64_t v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  char v140 = &v132;
  uint64_t v31 = alloca(v28);
  uint64_t v32 = alloca(v28);
  uint64_t v173 = &v132;
  uint64_t v33 = alloca(v28);
  uint64_t v34 = alloca(v28);
  char v162 = &v132;
  int64_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  uint64_t v169 = &v132;
  v4[2] = 0xD000000000000017;
  v4[3] = "training_accuracy" + 0x8000000000000000;
  uint64_t v171 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
  uint64_t v38 = (int *)v21;
  __swift_storeEnumTagSinglePayload((uint64_t)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, 1, 1, v21);
  uint64_t v39 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable;
  *(void *)((char *)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable) = 0;
  uint64_t v138 = v39;
  *((unsigned char *)v4 + v39 + 8) = -1;
  *(void *)((char *)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = 0;
  uint64_t v152 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
  static MLActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v148 = (void *)((char *)v4 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures);
  static MLActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v41 = empty;
  uint64_t v42 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_args;
  uint64_t v43 = type metadata accessor for CMLParameters();
  uint64_t v44 = swift_allocObject(v43, 24, 7);
  *(void *)(v44 + 16) = v41;
  uint64_t v170 = v4;
  uint64_t v139 = v42;
  *(void *)((char *)v4 + v42) = v44;
  uint64_t v45 = (uint64_t)v162;
  outlined init with copy of MLTrainingSessionParameters(v167, (uint64_t)v162, type metadata accessor for MLActionClassifier.DataSource);
  unint64_t v46 = v168;
  outlined init with copy of MLTrainingSessionParameters(v165, (uint64_t)v168, type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v137 = v38[6];
  uint64_t v153 = v38[7];
  uint64_t v157 = v38[8];
  uint64_t v161 = v38[9];
  uint64_t v47 = v158;
  *(void *)((char *)v158 + v161) = 0x403E000000000000;
  outlined init with take of MLClassifierMetrics(v45, (uint64_t)v47, type metadata accessor for MLActionClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v46, (uint64_t)v47 + v38[5], type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  uint64_t v48 = v172;
  *(void *)((char *)v47 + v137) = *(void *)&v46[v172[5]];
  *(void *)((char *)v47 + v157) = *(void *)&v46[v48[7]];
  *(void *)((char *)v47 + v153) = *(void *)&v46[v48[6]];
  *(void *)((char *)v47 + v38[10]) = *(void *)&v46[v48[8]];
  uint64_t v172 = *(int **)&v46[v48[10]];
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v46, type metadata accessor for MLActionClassifier.ModelParameters);
  __m128 v49 = (__m128)(unint64_t)v172;
  *(void *)((char *)v47 + v161) = v172;
  uint64_t v50 = (uint64_t)v169;
  outlined init with take of MLClassifierMetrics((uint64_t)v47, (uint64_t)v169, type metadata accessor for MLActionClassifier.PersistentParameters);
  uint64_t v158 = v38;
  __swift_storeEnumTagSinglePayload(v50, 0, 1, (uint64_t)v38);
  uint64_t v51 = v171;
  swift_beginAccess(v171, &v155, 33, 0);
  outlined assign with take of MLActionClassifier.PersistentParameters?(v50, v51);
  swift_endAccess(&v155);
  uint64_t v52 = v167;
  id v53 = v173;
  outlined init with copy of MLTrainingSessionParameters(v167, (uint64_t)v173, type metadata accessor for MLActionClassifier.DataSource);
  id v54 = v164;
  if (swift_getEnumCaseMultiPayload(v53, v164) != 3)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v53, type metadata accessor for MLActionClassifier.DataSource);
    uint64_t v64 = v52;
    uint64_t v65 = (uint64_t)v140;
    outlined init with copy of MLTrainingSessionParameters(v64, (uint64_t)v140, type metadata accessor for MLActionClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload(v65, v54) != 5)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v65, type metadata accessor for MLActionClassifier.DataSource);
      uint64_t v63 = v170;
      uint64_t v82 = v174;
      goto LABEL_16;
    }
    uint64_t v66 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    uint64_t v67 = v66[12];
    uint64_t v161 = *(void *)(v65 + v67);
    uint64_t v172 = *(int **)(v65 + v67 + 8);
    uint64_t v68 = v66[16];
    char v162 = *(uint64_t **)(v65 + v68);
    uint64_t v168 = *(char **)(v65 + v68 + 8);
    uint64_t v69 = v66[20];
    uint64_t v70 = *(void *)(v65 + v69);
    uint64_t v173 = *(uint64_t **)(v65 + v69 + 8);
    uint64_t v71 = v65;
    uint64_t v72 = v159;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v160 + 32))(v163, v71, v159);
    uint64_t v73 = v143;
    uint64_t v169 = (uint64_t *)v70;
    uint64_t v74 = v70;
    uint64_t v75 = v173;
    DataFrame.subscript.getter(v74, v173);
    uint64_t v76 = (void *)AnyColumn.wrappedElementType.getter();
    (*(void (**)(uint64_t *, uint64_t))(v141 + 8))(v73, v142);
    uint64_t v77 = v174;
    if (v76 == &type metadata for String)
    {
      DataFrame.subscript.getter(v169, v75, &type metadata for String);
      uint64_t v84 = v174;
      Column<A>.parseAsJSONArrays()();
      uint64_t v77 = v84;
      if (v84)
      {
        swift_bridgeObjectRelease((_BYTE)v75);
        swift_bridgeObjectRelease((_BYTE)v168);
        swift_bridgeObjectRelease((_BYTE)v172);
        outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
        outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
        outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
        (*(void (**)(uint64_t *, uint64_t))(v150 + 8))(v154, v151);
        uint64_t v85 = v163;
        LODWORD(v174) = 0;
        uint64_t v86 = v72;
        goto LABEL_15;
      }
      (*(void (**)(uint64_t *, uint64_t))(v150 + 8))(v154, v151);
      swift_bridgeObjectRetain((_BYTE)v75);
      DataFrame.subscript.setter(v149, v169, v75);
    }
    uint64_t v78 = (uint64_t)v144;
    uint64_t v79 = v163;
    uint64_t v80 = v72;
    uint64_t v81 = v160;
    *(double *)v49.i64 = (*(double (**)(uint64_t *, uint64_t *, uint64_t))(v160 + 16))(v144, v163, v80);
    MLDataTable.init(_:convertArraysToShapedArrays:)(v78, 0, v49);
    uint64_t v63 = v170;
    if (v77)
    {
      swift_bridgeObjectRelease((_BYTE)v173);
      swift_bridgeObjectRelease((_BYTE)v168);
      swift_bridgeObjectRelease((_BYTE)v172);
      outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
      LODWORD(v174) = 0;
      (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v79, v159);
      goto LABEL_42;
    }
    uint64_t v174 = 0;
    uint64_t v87 = v155;
    char v88 = v156;
    uint64_t v89 = v152;
    swift_beginAccess(v152, v133, 1, 0);
    uint64_t v90 = *(void *)v89;
    *(void *)uint64_t v89 = v87;
    int v91 = *(_DWORD *)(v89 + 8);
    *(unsigned char *)(v89 + 8) = v88;
    outlined consume of Result<_DataTable, Error>(v90, v91);
    swift_beginAccess(v89, &v155, 33, 0);
    uint64_t v92 = (uint64_t)v169;
    uint64_t v93 = v173;
    uint64_t v94 = v174;
    static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((unsigned char *)v89, (uint64_t)v169, v173, *(double *)v49.i64);
    uint64_t v82 = v94;
    if (!v94)
    {
      swift_endAccess(&v155);
      swift_beginAccess(v89, &v155, 33, 0);
      uint64_t v122 = (void *)v92;
      char v123 = (char)v172;
      unint64_t v124 = v93;
      char v125 = (char)v168;
      static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v89, v161, v172, v122, v124, (uint64_t)v162, v168);
      uint64_t v63 = v170;
      swift_endAccess(&v155);
      swift_bridgeObjectRelease((_BYTE)v173);
      swift_bridgeObjectRelease(v125);
      swift_bridgeObjectRelease(v123);
      (*(void (**)(uint64_t *, uint64_t))(v160 + 8))(v163, v159);
      goto LABEL_16;
    }
    LODWORD(v174) = 0;
    swift_endAccess(&v155);
    swift_bridgeObjectRelease((_BYTE)v93);
    swift_bridgeObjectRelease((_BYTE)v168);
    swift_bridgeObjectRelease((_BYTE)v172);
    outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
    uint64_t v85 = v163;
    uint64_t v86 = v159;
LABEL_15:
    (*(void (**)(uint64_t *, uint64_t))(v160 + 8))(v85, v86);
LABEL_41:
    uint64_t v63 = v170;
    goto LABEL_42;
  }
  uint64_t v55 = *v53;
  int v56 = *((_DWORD *)v53 + 2);
  uint64_t v153 = v53[2];
  uint64_t v172 = (int *)v53[3];
  uint64_t v161 = v53[4];
  char v162 = (uint64_t *)v53[5];
  uint64_t v168 = (char *)v53[6];
  uint64_t v173 = (uint64_t *)v53[7];
  uint64_t v57 = v152;
  swift_beginAccess(v152, v133, 1, 0);
  uint64_t v58 = *(void *)v57;
  *(void *)uint64_t v57 = v55;
  unsigned __int8 v59 = v56;
  char v60 = v56 & 1;
  int v61 = *(_DWORD *)(v57 + 8);
  *(unsigned char *)(v57 + 8) = v60;
  uint64_t v169 = (uint64_t *)v55;
  outlined copy of Result<_DataTable, Error>(v55, v59);
  outlined consume of Result<_DataTable, Error>(v58, v61);
  swift_beginAccess(v57, &v155, 33, 0);
  uint64_t v62 = v174;
  static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((unsigned char *)v57, (uint64_t)v168, v173, *(double *)v49.i64);
  if (v62)
  {
    LODWORD(v174) = 0;
    swift_endAccess(&v155);
    swift_bridgeObjectRelease((_BYTE)v172);
    swift_bridgeObjectRelease((_BYTE)v162);
    swift_bridgeObjectRelease((_BYTE)v173);
    outlined consume of Result<_DataTable, Error>((uint64_t)v169, v59);
    outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
    uint64_t v63 = v170;
LABEL_42:
    uint64_t v117 = v171;
    goto LABEL_43;
  }
  LODWORD(v157) = v59;
  swift_endAccess(&v155);
  swift_beginAccess(v57, &v155, 33, 0);
  char v83 = (char)v162;
  static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v57, v153, v172, v168, v173, v161, v162);
  uint64_t v82 = 0;
  uint64_t v63 = v170;
  swift_endAccess(&v155);
  swift_bridgeObjectRelease((_BYTE)v172);
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease((_BYTE)v173);
  outlined consume of Result<_DataTable, Error>((uint64_t)v169, v157);
LABEL_16:
  uint64_t v95 = v171;
  uint64_t v96 = v158;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v171, 1, (uint64_t)v158);
  uint64_t v174 = v82;
  if (EnumTagSinglePayload) {
    goto LABEL_25;
  }
  uint64_t v98 = v95 + v96[5];
  uint64_t v99 = (uint64_t)v145;
  outlined init with copy of MLTrainingSessionParameters(v98, (uint64_t)v145, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload(v99, v146) != 1)
  {
    uint64_t v106 = type metadata accessor for MLActionClassifier.ModelParameters.ValidationData;
LABEL_24:
    outlined destroy of MLActivityClassifier.ModelParameters(v99, v106);
    goto LABEL_25;
  }
  if (swift_getEnumCaseMultiPayload(v99, v164) != 3)
  {
    uint64_t v106 = type metadata accessor for MLActionClassifier.DataSource;
    goto LABEL_24;
  }
  uint64_t v100 = *(void *)v99;
  int v101 = *(_DWORD *)(v99 + 8);
  uint64_t v161 = *(void *)(v99 + 16);
  uint64_t v173 = *(uint64_t **)(v99 + 24);
  char v162 = *(uint64_t **)(v99 + 32);
  uint64_t v168 = *(char **)(v99 + 40);
  char v164 = *(uint64_t **)(v99 + 48);
  uint64_t v158 = *(int **)(v99 + 56);
  uint64_t v102 = v148;
  swift_beginAccess(v148, &v155, 1, 0);
  uint64_t v172 = (int *)*v102;
  *uint64_t v102 = v100;
  int v103 = *((_DWORD *)v102 + 2);
  *((unsigned char *)v102 + 8) = v101 & 1;
  uint64_t v169 = (uint64_t *)v100;
  outlined copy of Result<_DataTable, Error>(v100, v101);
  outlined consume of Result<_DataTable, Error>((uint64_t)v172, v103);
  swift_beginAccess(v102, v147, 33, 0);
  uint64_t v104 = v158;
  uint64_t v105 = v174;
  static MLActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v102, (uint64_t)v164, v158, *(double *)v49.i64);
  if (v105)
  {
    LODWORD(v174) = 0;
    swift_endAccess(v147);
    swift_bridgeObjectRelease((_BYTE)v173);
    swift_bridgeObjectRelease((_BYTE)v168);
    swift_bridgeObjectRelease((_BYTE)v104);
    outlined consume of Result<_DataTable, Error>((uint64_t)v169, v101);
    outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
    goto LABEL_41;
  }
  swift_endAccess(v147);
  swift_beginAccess(v102, v147, 33, 0);
  uint64_t v126 = (uint64_t)v102;
  char v127 = (char)v168;
  static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v126, v161, v173, v164, v104, (uint64_t)v162, v168);
  uint64_t v174 = 0;
  swift_endAccess(v147);
  swift_bridgeObjectRelease((_BYTE)v173);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease((_BYTE)v104);
  outlined consume of Result<_DataTable, Error>((uint64_t)v169, v101);
  uint64_t v63 = v170;
LABEL_25:
  outlined init with copy of MLTrainingSessionParameters(v166, (uint64_t)v63 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v107 = v63[2];
  uint64_t v108 = v63[3];
  if ((v108 & 0x1000000000000000) != 0 || !(v108 & 0x2000000000000000 | v107 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain(v63[3]);
    uint64_t v130 = v174;
    _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(name:), 0, v107, v108, &type metadata for OpaquePointer);
    if (v130)
    {
      swift_bridgeObjectRelease(v108);
      goto LABEL_34;
    }
    swift_bridgeObjectRelease(v108);
    uint64_t v119 = v136;
    goto LABEL_38;
  }
  char v164 = &v132;
  uint64_t v109 = alloca(32);
  uint64_t v110 = alloca(32);
  uint64_t v135 = 0;
  int64_t v134 = closure #1 in CMLModel.init(name:);
  if ((v108 & 0x2000000000000000) == 0)
  {
    if ((v107 & 0x1000000000000000) != 0)
    {
      uint64_t v111 = (v108 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v112 = v107 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v111 = _StringObject.sharedUTF8.getter(v107, v108);
      uint64_t v112 = v131;
    }
    swift_bridgeObjectRetain(v108);
    uint64_t v113 = v174;
    uint64_t v114 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v111, v112, (uint64_t (*)(uint64_t))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
    if (v113) {
      goto LABEL_33;
    }
    uint64_t v119 = v114;
    swift_bridgeObjectRelease(v108);
    uint64_t v63 = v170;
LABEL_38:
    uint64_t v120 = type metadata accessor for CMLModel();
    uint64_t v121 = swift_allocObject(v120, 24, 7);
    *(void *)(v121 + 16) = v119;
    outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
    *(void *)((char *)v63 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model) = v121;
    return v63;
  }
  v147[0] = v107;
  v147[1] = v108 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(v108);
  uint64_t v115 = v174;
  uint64_t v116 = specialized handling<A, B>(_:_:)((uint64_t)v147);
  if (!v115)
  {
    uint64_t v119 = v116;
    uint64_t v63 = v170;
    if (!v116) {
      BUG();
    }
    swift_bridgeObjectRelease(v108);
    goto LABEL_38;
  }
LABEL_33:
  swift_bridgeObjectRelease(v108);
  uint64_t v63 = v170;
LABEL_34:
  uint64_t v117 = v171;
  outlined destroy of MLActivityClassifier.ModelParameters(v166, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v165, type metadata accessor for MLActionClassifier.ModelParameters);
  uint64_t v118 = outlined destroy of MLActivityClassifier.ModelParameters(v167, type metadata accessor for MLActionClassifier.DataSource);
  LOBYTE(v118) = 1;
  LODWORD(v174) = v118;
LABEL_43:
  swift_bridgeObjectRelease(v63[3]);
  if ((_BYTE)v174) {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v63 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v117, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  outlined consume of MLDataTable?(*(void *)((char *)v63 + v138), *(_DWORD *)((char *)v63 + v138 + 8));
  outlined consume of Result<_DataTable, Error>(*(void *)v152, *(_DWORD *)(v152 + 8));
  outlined consume of Result<_DataTable, Error>(*v148, *((_DWORD *)v148 + 2));
  swift_release();
  uint64_t v128 = type metadata accessor for ActionClassifierTrainingSessionDelegate(0);
  swift_deallocPartialClassInstance(v63, v128, *(unsigned int *)(*v63 + 48), *(unsigned __int16 *)(*v63 + 52));
  return v63;
}

char ActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)(__m128 a1)
{
  type metadata accessor for MLActionClassifier.PersistentParameters(0);
  char result = MLActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v29, &v27, a1);
  if (!v1)
  {
    uint64_t v35 = v2;
    uint64_t v39 = v29;
    unsigned __int8 v4 = v30;
    uint64_t v5 = v27;
    char v6 = v30;
    int v40 = v28;
    uint64_t v31 = 0;
    if (v30 == 0xFF)
    {
      if (v28 != 0xFF)
      {
        int v41 = v30;
        uint64_t v15 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable;
        uint64_t v16 = v35;
        unsigned __int8 v17 = v28;
        swift_beginAccess(v35 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable, &v29, 1, 0);
        uint64_t v37 = *(void *)(v16 + v15);
        *(void *)(v16 + v15) = v5;
        int v38 = *(_DWORD *)(v16 + v15 + 8);
        *(unsigned char *)(v16 + v15 + 8) = v17;
        char v18 = v17 & 1;
        outlined copy of Result<_DataTable, Error>(v5, v18);
        outlined consume of MLDataTable?(v37, v38);
        *(void *)(v16 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
LABEL_13:
        uint64_t v32 = v5;
        char v33 = v18 != 0;
        Swift::Int v26 = MLDataTable.size.getter();
        outlined consume of MLDataTable?(v39, v41);
        outlined consume of MLDataTable?(v5, v40);
LABEL_16:
        char result = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceValidationRowCount;
        *(void *)(v16 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = v26;
        return result;
      }
      uint64_t v16 = v35;
      *(void *)(v35 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
LABEL_15:
      outlined consume of MLDataTable?(v39, v6);
      Swift::Int v26 = 0;
      goto LABEL_16;
    }
    uint64_t v37 = v27;
    int v41 = v30;
    char v7 = v30 & 1;
    uint64_t v8 = v35 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable;
    unsigned __int8 v42 = v28;
    LOBYTE(v38) = v30 & 1;
    if (v28 == 0xFF)
    {
      char v19 = v7 != 0;
      swift_beginAccess(v35 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable, &v29, 1, 0);
      uint64_t v20 = *(void *)v8;
      uint64_t v21 = v39;
      *(void *)uint64_t v8 = v39;
      LODWORD(v36) = *(_DWORD *)(v8 + 8);
      *(unsigned char *)(v8 + 8) = v4;
      uint64_t v10 = v21;
      outlined copy of MLDataTable?(v21, v41);
      outlined copy of Result<_DataTable, Error>(v10, v19);
      outlined consume of MLDataTable?(v20, v36);
    }
    else
    {
      swift_beginAccess(v35 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable, &v27, 1, 0);
      uint64_t v36 = *(void *)v8;
      uint64_t v9 = v39;
      *(void *)uint64_t v8 = v39;
      LODWORD(v34) = *(_DWORD *)(v8 + 8);
      *(unsigned char *)(v8 + 8) = v7;
      uint64_t v10 = v9;
      outlined copy of Result<_DataTable, Error>(v9, v7 != 0);
      outlined copy of MLDataTable?(v9, v41);
      outlined copy of MLDataTable?(v37, v40);
      outlined consume of MLDataTable?(v36, (char)v34);
      int64_t v11 = ActionClassifierTrainingSessionDelegate.sourceTable.modify((uint64_t)&v29);
      if (*(unsigned char *)(v12 + 8) != 0xFF)
      {
        LODWORD(v36) = v7 != 0;
        uint64_t v13 = v37;
        uint64_t v32 = v37;
        unsigned __int8 v14 = v42;
        uint64_t v34 = v11;
        char v33 = v42 & 1;
        MLDataTable.append(contentsOf:)((uint64_t)&v32);
        ((void (*)(uint64_t *, void))v34)(&v29, 0);
        outlined consume of MLDataTable?(v9, v41);
        outlined consume of MLDataTable?(v13, v40);
        outlined copy of Result<_DataTable, Error>(v9, v36);
        goto LABEL_11;
      }
      ((void (*)(uint64_t *, void))v11)(&v29, 0);
      outlined consume of MLDataTable?(v39, v41);
      outlined consume of MLDataTable?(v37, v40);
      uint64_t v10 = v39;
      outlined copy of Result<_DataTable, Error>(v39, v7 != 0);
    }
    unsigned __int8 v14 = v42;
LABEL_11:
    uint64_t v32 = v10;
    char v33 = (_BYTE)v38 != 0;
    uint64_t v22 = v10;
    Swift::Int v23 = MLDataTable.size.getter();
    char v24 = v41;
    outlined consume of MLDataTable?(v22, v41);
    uint64_t v25 = v35;
    *(void *)(v35 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = v23;
    uint64_t v16 = v25;
    char v6 = v24;
    if (v14 != 0xFF)
    {
      char v18 = v14 & 1;
      uint64_t v5 = v37;
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  return result;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActionClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v12 = v0;
  int64_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v3 = alloca(v2);
  unsigned __int8 v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  char v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, v11, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v9, (uint64_t)&v10, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v10, 1, v5) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v10, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)&v10, (uint64_t)&v10, type metadata accessor for MLActionClassifier.PersistentParameters);
  ActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)(v1);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v10, type metadata accessor for MLActionClassifier.PersistentParameters);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActionClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v196 = v1;
  uint64_t v217 = v2;
  uint64_t rawValue = (uint64_t)from._rawValue;
  uint64_t v208 = type metadata accessor for URL(0);
  uint64_t v207 = *(void *)(v208 - 8);
  int64_t v4 = *(void *)(v207 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v209 = &v157;
  char v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  uint64_t v203 = &v157;
  uint64_t v9 = alloca(v4);
  uint64_t v10 = alloca(v4);
  uint64_t v202 = &v157;
  int64_t v11 = alloca(v4);
  uint64_t v12 = alloca(v4);
  uint64_t v200 = &v157;
  uint64_t v13 = alloca(v4);
  unsigned __int8 v14 = alloca(v4);
  uint64_t v197 = &v157;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?)
                              - 8)
                  + 64);
  uint64_t v16 = alloca(v15);
  unsigned __int8 v17 = alloca(v15);
  uint64_t v198 = &v157;
  char v18 = alloca(v15);
  char v19 = alloca(v15);
  uint64_t v223 = &v157;
  uint64_t v218 = type metadata accessor for MLCheckpoint(0);
  uint64_t v199 = *(void *)(v218 - 8);
  int64_t v20 = *(void *)(v199 + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  long long v216 = &v157;
  Swift::Int v23 = alloca(v20);
  char v24 = alloca(v20);
  uint64_t v201 = &v157;
  uint64_t v25 = alloca(v20);
  Swift::Int v26 = alloca(v20);
  uint64_t v204 = &v157;
  uint64_t v27 = alloca(v20);
  unsigned __int8 v28 = alloca(v20);
  uint64_t v219 = &v157;
  int64_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  unsigned __int8 v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v32 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v33 = *(void *)(*(void *)(v32 - 8) + 64);
  uint64_t v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  uint64_t v36 = v217 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v217 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, v192, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v36, (uint64_t)&v157, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v157, 1, v32) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v157, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
    BUG();
  }
  outlined init with take of MLClassifierMetrics((uint64_t)&v157, (uint64_t)&v157, type metadata accessor for MLActionClassifier.PersistentParameters);
  uint64_t v37 = (uint64_t)v223;
  specialized BidirectionalCollection.last.getter(rawValue);
  uint64_t v38 = v218;
  if (__swift_getEnumTagSinglePayload(v37, 1, v218) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v37, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v39 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v39, 0, 0);
    *(void *)uint64_t v40 = 0xD00000000000001DLL;
    *(void *)(v40 + 8) = "reated." + 0x8000000000000000;
    *(_OWORD *)(v40 + 16) = 0;
    *(_OWORD *)(v40 + 32) = 0;
    *(unsigned char *)(v40 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v39, v40, v41, v42, v43);
    uint64_t v44 = &v157;
    goto LABEL_4;
  }
  uint64_t v222 = &v157;
  unint64_t v45 = 0xEB0000000064657ALL;
  uint64_t v213 = 0x6974636172747865;
  uint64_t v46 = 0x696C616974696E69;
  uint64_t v47 = v37;
  uint64_t v48 = (uint64_t)v219;
  outlined init with take of MLClassifierMetrics(v47, (uint64_t)v219, type metadata accessor for MLCheckpoint);
  uint64_t v212 = *(int *)(v38 + 20);
  uint64_t v49 = *(unsigned __int8 *)(v48 + v212);
  unint64_t v210 = 0xEA0000000000676ELL;
  switch(v49)
  {
    case 0:
      goto LABEL_10;
    case 1:
      swift_bridgeObjectRelease(110);
      uint64_t v50 = (uint64_t)v219;
      uint64_t v51 = (uint64_t)v204;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v219, (uint64_t)v204, type metadata accessor for MLCheckpoint);
      goto LABEL_11;
    case 2:
      uint64_t v46 = 0x676E696E69617274;
      unint64_t v45 = 0xE800000000000000;
      goto LABEL_10;
    case 3:
      uint64_t v46 = 0x697461756C617665;
      unint64_t v45 = 0xEA0000000000676ELL;
      goto LABEL_10;
    case 4:
      uint64_t v46 = 0x636E657265666E69;
      unint64_t v45 = 0xEB00000000676E69;
LABEL_10:
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v45, 0x6974636172747865, 0xEA0000000000676ELL, 0);
      swift_bridgeObjectRelease(v45);
      uint64_t v50 = (uint64_t)v219;
      uint64_t v51 = (uint64_t)v204;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v219, (uint64_t)v204, type metadata accessor for MLCheckpoint);
      if (v52)
      {
LABEL_11:
        outlined destroy of MLActivityClassifier.ModelParameters(v51, type metadata accessor for MLCheckpoint);
      }
      else
      {
        switch(*(unsigned char *)(v51 + *(int *)(v218 + 20)))
        {
          case 0:
            uint64_t v55 = 0x696C616974696E69;
            unint64_t v56 = 0xEB0000000064657ALL;
            break;
          case 1:
            uint64_t v55 = 0x6974636172747865;
            goto LABEL_21;
          case 2:
            swift_bridgeObjectRelease(0);
            goto LABEL_11;
          case 3:
            uint64_t v55 = 0x697461756C617665;
LABEL_21:
            unint64_t v56 = 0xEA0000000000676ELL;
            break;
          case 4:
            uint64_t v55 = 0x636E657265666E69;
            unint64_t v56 = 0xEB00000000676E69;
            break;
        }
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, 0x676E696E69617274, 0xE800000000000000, 0);
        swift_bridgeObjectRelease(v56);
        outlined destroy of MLActivityClassifier.ModelParameters(v51, type metadata accessor for MLCheckpoint);
        if ((v59 & 1) == 0)
        {
          uint64_t v60 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v60, 0, 0);
          *(void *)uint64_t v61 = 0xD00000000000003FLL;
          uint64_t v65 = "not been properly initialized.";
          goto LABEL_25;
        }
      }
      uint64_t v53 = (uint64_t)v222;
      id v54 = v196;
      ActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)(v3);
      uint64_t v223 = v54;
      if (v54)
      {
        outlined destroy of MLActivityClassifier.ModelParameters(v50, type metadata accessor for MLCheckpoint);
        uint64_t v44 = (uint64_t *)v53;
        goto LABEL_4;
      }
      break;
  }
  uint64_t v57 = 0x676E696E69617274;
  switch(*(unsigned char *)(v50 + v212))
  {
    case 0:
      unint64_t v58 = 0xEB0000000064657ALL;
      uint64_t v57 = 0x696C616974696E69;
      goto LABEL_31;
    case 1:
      swift_bridgeObjectRelease(110);
      goto LABEL_32;
    case 2:
      unint64_t v58 = 0xE800000000000000;
      goto LABEL_31;
    case 3:
      uint64_t v57 = 0x697461756C617665;
      unint64_t v58 = 0xEA0000000000676ELL;
      goto LABEL_31;
    case 4:
      uint64_t v57 = 0x636E657265666E69;
      unint64_t v58 = 0xEB00000000676E69;
LABEL_31:
      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 0x6974636172747865, 0xEA0000000000676ELL, 0);
      swift_bridgeObjectRelease(v58);
      if (v67)
      {
LABEL_32:
        uint64_t v68 = v197;
        URL.appendingPathComponent(_:)(0x676E696E69617274, 0xE800000000000000);
        char v220 = 1;
        LOBYTE(v158) = 1;
        uint64_t v159 = (uint64_t (*)(uint64_t))(&stru_20 + 12);
        unint64_t v160 = 0xE100000000000000;
        uint64_t v161 = 0;
        unint64_t v162 = 0xE000000000000000;
        uint64_t v163 = 92;
        unint64_t v164 = 0xE100000000000000;
        char v165 = 1;
        uint64_t v166 = 34;
        unint64_t v167 = 0xE100000000000000;
        char v168 = 1;
        uint64_t v169 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
        uint64_t v170 = 10;
        unint64_t v171 = 0xE100000000000000;
        long long v172 = 0;
        char v173 = 1;
        uint64_t v174 = 0;
        uint64_t v69 = v223;
        MLDataTable.init(contentsOf:options:)(v68, &v158);
        if (!v69)
        {
          uint64_t v81 = v205;
          LOBYTE(v218) = v206;
          uint64_t v223 = 0;
          uint64_t v82 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
          uint64_t v83 = v217;
          swift_beginAccess(v217 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures, v193, 1, 0);
          uint64_t v84 = *(void *)(v83 + v82);
          *(void *)(v83 + v82) = v81;
          uint64_t v85 = v83;
          uint64_t v86 = (uint64_t)v219;
          int v87 = *(_DWORD *)(v85 + v82 + 8);
          *(unsigned char *)(v85 + v82 + 8) = v218;
          outlined consume of Result<_DataTable, Error>(v84, v87);
          char v88 = v200;
          URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEA00000000006E6FLL);
          LOBYTE(v175) = 1;
          uint64_t v176 = 44;
          unint64_t v177 = 0xE100000000000000;
          uint64_t v178 = 0;
          char v221 = 1;
          unint64_t v179 = 0xE000000000000000;
          uint64_t v180 = 92;
          unint64_t v181 = 0xE100000000000000;
          char v182 = 1;
          uint64_t v183 = 34;
          unint64_t v184 = 0xE100000000000000;
          char v185 = 1;
          uint64_t v186 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
          uint64_t v187 = 10;
          unint64_t v188 = 0xE100000000000000;
          long long v189 = 0;
          char v190 = 1;
          uint64_t v191 = 0;
          uint64_t v89 = v223;
          MLDataTable.init(contentsOf:options:)(v88, &v175);
          if (!v89)
          {
            uint64_t v223 = 0;
            uint64_t v90 = v214;
            char v91 = v215;
            uint64_t v92 = v85;
            uint64_t v93 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
            swift_beginAccess(v92 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures, v194, 1, 0);
            uint64_t v94 = *(void *)(v92 + v93);
            *(void *)(v92 + v93) = v90;
            int v95 = *(_DWORD *)(v92 + v93 + 8);
            *(unsigned char *)(v92 + v93 + 8) = v91;
            uint64_t v50 = (uint64_t)v219;
            outlined consume of Result<_DataTable, Error>(v94, v95);
            uint64_t v96 = (uint64_t)v222;
            switch(*(unsigned char *)(v50 + v212))
            {
              case 0:
                goto LABEL_54;
              case 1:
                goto LABEL_66;
              case 2:
                goto LABEL_62;
              case 3:
                goto LABEL_63;
              case 4:
                goto LABEL_64;
            }
          }
          uint64_t v66 = v86;
          goto LABEL_60;
        }
        uint64_t v70 = v50;
LABEL_34:
        outlined destroy of MLActivityClassifier.ModelParameters(v70, type metadata accessor for MLCheckpoint);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v222, type metadata accessor for MLActionClassifier.PersistentParameters);
        return;
      }
      uint64_t v158 = rawValue;
      uint64_t v71 = *(void *)(rawValue + 16);
      char v72 = 1;
      if (!v71)
      {
        uint64_t v73 = 0;
        goto LABEL_51;
      }
      uint64_t v73 = v71 - 1;
      uint64_t v74 = v73 * *(void *)(v199 + 72)
          + ((*(unsigned __int8 *)(v199 + 80) + 32) & ~*(unsigned __int8 *)(v199 + 80))
          + rawValue;
      uint64_t rawValue = -*(void *)(v199 + 72);
      break;
  }
  while (2)
  {
    uint64_t v75 = (uint64_t)v216;
    outlined init with copy of MLTrainingSessionParameters(v74, (uint64_t)v216, type metadata accessor for MLCheckpoint);
    switch(*(unsigned char *)(v75 + *(int *)(v218 + 20)))
    {
      case 0:
        JUMPOUT(0x196D49);
      case 1:
        swift_bridgeObjectRelease(110);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v216, type metadata accessor for MLCheckpoint);
        goto LABEL_50;
      case 2:
        uint64_t v76 = v74;
        unint64_t v77 = 0xE800000000000000;
        uint64_t v78 = 0x676E696E69617274;
        goto LABEL_42;
      case 3:
        uint64_t v76 = v74;
        unint64_t v77 = 0xEA0000000000676ELL;
        uint64_t v78 = 0x697461756C617665;
LABEL_42:
        char v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v77, 0x6974636172747865, 0xEA0000000000676ELL, 0);
        swift_bridgeObjectRelease(v77);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v216, type metadata accessor for MLCheckpoint);
        if ((v79 & 1) == 0)
        {
          uint64_t v74 = rawValue + v76;
          if (v73-- == 0)
          {
            uint64_t v73 = 0;
            uint64_t v50 = (uint64_t)v219;
            char v72 = 1;
            goto LABEL_51;
          }
          continue;
        }
LABEL_50:
        char v72 = 0;
        uint64_t v50 = (uint64_t)v219;
LABEL_51:
        uint64_t v97 = alloca(24);
        uint64_t v98 = alloca(32);
        uint64_t v159 = (uint64_t (*)(uint64_t))&v158;
        uint64_t v99 = (uint64_t)v198;
        uint64_t v100 = v223;
        _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5((uint64_t (*)(void))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), (uint64_t)&v157, v73, v72, (uint64_t)v195);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v99, 1, v218);
        uint64_t v223 = v100;
        if (EnumTagSinglePayload != 1)
        {
          uint64_t v106 = (uint64_t)v201;
          outlined init with take of MLClassifierMetrics(v99, (uint64_t)v201, type metadata accessor for MLCheckpoint);
          uint64_t v107 = v202;
          URL.appendingPathComponent(_:)(0x676E696E69617274, 0xE800000000000000);
          char v220 = 1;
          LOBYTE(v158) = 1;
          uint64_t v159 = (uint64_t (*)(uint64_t))(&stru_20 + 12);
          unint64_t v160 = 0xE100000000000000;
          uint64_t v161 = 0;
          unint64_t v162 = 0xE000000000000000;
          uint64_t v163 = 92;
          unint64_t v164 = 0xE100000000000000;
          char v165 = 1;
          uint64_t v166 = 34;
          unint64_t v167 = 0xE100000000000000;
          char v168 = 1;
          uint64_t v169 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
          uint64_t v170 = 10;
          unint64_t v171 = 0xE100000000000000;
          long long v172 = 0;
          char v173 = 1;
          uint64_t v174 = 0;
          uint64_t v108 = v223;
          MLDataTable.init(contentsOf:options:)(v107, &v158);
          uint64_t v223 = v108;
          if (v108)
          {
            outlined destroy of MLActivityClassifier.ModelParameters(v106, type metadata accessor for MLCheckpoint);
            uint64_t v66 = v50;
            goto LABEL_60;
          }
          long long v216 = (uint64_t *)v205;
          LOBYTE(v218) = v206;
          uint64_t v109 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
          uint64_t v110 = v217;
          swift_beginAccess(v217 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures, v193, 1, 0);
          uint64_t v111 = *(void *)(v110 + v109);
          *(void *)(v110 + v109) = v216;
          int v112 = *(_DWORD *)(v110 + v109 + 8);
          *(unsigned char *)(v110 + v109 + 8) = v218;
          outlined consume of Result<_DataTable, Error>(v111, v112);
          uint64_t v113 = v203;
          URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEA00000000006E6FLL);
          LOBYTE(v175) = 1;
          uint64_t v176 = 44;
          unint64_t v177 = 0xE100000000000000;
          uint64_t v178 = 0;
          char v221 = 1;
          unint64_t v179 = 0xE000000000000000;
          uint64_t v180 = 92;
          unint64_t v181 = 0xE100000000000000;
          char v182 = 1;
          uint64_t v183 = 34;
          unint64_t v184 = 0xE100000000000000;
          char v185 = 1;
          uint64_t v186 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
          uint64_t v187 = 10;
          unint64_t v188 = 0xE100000000000000;
          long long v189 = 0;
          char v190 = 1;
          uint64_t v191 = 0;
          uint64_t v114 = v223;
          MLDataTable.init(contentsOf:options:)(v113, &v175);
          uint64_t v223 = v114;
          if (v114)
          {
            outlined destroy of MLActivityClassifier.ModelParameters(v106, type metadata accessor for MLCheckpoint);
            uint64_t v66 = (uint64_t)v219;
            goto LABEL_60;
          }
          outlined destroy of MLActivityClassifier.ModelParameters(v106, type metadata accessor for MLCheckpoint);
          uint64_t v115 = v214;
          char v116 = v215;
          uint64_t v117 = v110;
          uint64_t v118 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
          swift_beginAccess(v117 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures, v194, 1, 0);
          uint64_t v119 = *(void *)(v117 + v118);
          *(void *)(v117 + v118) = v115;
          int v120 = *(_DWORD *)(v117 + v118 + 8);
          *(unsigned char *)(v117 + v118 + 8) = v116;
          outlined consume of Result<_DataTable, Error>(v119, v120);
          uint64_t v50 = (uint64_t)v219;
          uint64_t v96 = (uint64_t)v222;
          switch(*((unsigned char *)v219 + v212))
          {
            case 0:
LABEL_54:
              uint64_t v213 = 0x696C616974696E69;
              unint64_t v105 = 0xEB0000000064657ALL;
              goto LABEL_65;
            case 1:
              goto LABEL_66;
            case 2:
LABEL_62:
              swift_bridgeObjectRelease(0);
              goto LABEL_67;
            case 3:
LABEL_63:
              uint64_t v213 = 0x697461756C617665;
              goto LABEL_66;
            case 4:
LABEL_64:
              uint64_t v213 = 0x636E657265666E69;
              unint64_t v105 = 0xEB00000000676E69;
LABEL_65:
              unint64_t v210 = v105;
LABEL_66:
              char v121 = v210;
              char v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v213, v210, 0x676E696E69617274, 0xE800000000000000, 0);
              swift_bridgeObjectRelease(v121);
              if ((v122 & 1) == 0) {
                goto LABEL_86;
              }
LABEL_67:
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v207 + 16))(v209, v50, v208);
              uint64_t v124 = URL.absoluteString.getter();
              char v125 = v123;
              if ((v123 & 0x1000000000000000) != 0 || !(v123 & 0x2000000000000000 | v124 & 0x1000000000000000))
              {
                uint64_t v155 = v223;
                _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(url:), 0, v124, v123, &type metadata for OpaquePointer);
                uint64_t v223 = v155;
                if (!v155) {
                  goto LABEL_74;
                }
                uint64_t v128 = (uint64_t)v222;
              }
              else
              {
                uint64_t v126 = alloca(32);
                char v127 = alloca(32);
                unint64_t v160 = 0;
                uint64_t v159 = closure #1 in CMLModel.init(url:);
                if ((v123 & 0x2000000000000000) != 0)
                {
                  uint64_t v175 = v124;
                  uint64_t v176 = v123 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v133 = v223;
                  uint64_t v134 = specialized handling<A, B>(_:_:)((uint64_t)&v175);
                  uint64_t v223 = v133;
                  uint64_t v128 = (uint64_t)v222;
                  if (!v133)
                  {
                    if (!v134) {
                      BUG();
                    }
                    uint64_t v205 = v134;
                    swift_bridgeObjectRelease(v125);
                    goto LABEL_79;
                  }
                }
                else
                {
                  uint64_t v128 = (uint64_t)v222;
                  if ((v124 & 0x1000000000000000) != 0)
                  {
                    uint64_t v129 = (v123 & 0xFFFFFFFFFFFFFFFLL) + 32;
                    uint64_t v130 = v124 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    uint64_t v129 = _StringObject.sharedUTF8.getter(v124, v123);
                    uint64_t v130 = v156;
                  }
                  uint64_t v131 = v223;
                  uint64_t v132 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v129, v130, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
                  uint64_t v223 = v131;
                  if (!v131)
                  {
                    uint64_t v205 = v132;
LABEL_74:
                    swift_bridgeObjectRelease(v125);
LABEL_79:
                    uint64_t v135 = v205;
                    (*(void (**)(uint64_t *, uint64_t))(v207 + 8))(v209, v208);
                    uint64_t v136 = type metadata accessor for CMLModel();
                    uint64_t v137 = swift_allocObject(v136, 24, 7);
                    *(void *)(v137 + 16) = v135;
                    uint64_t v138 = v217;
                    *(void *)(v217 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model) = v137;
                    swift_release();
                    uint64_t v139 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
                    swift_beginAccess(v138 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures, &v175, 0, 0);
                    if (*(unsigned char *)(v138 + v139 + 8))
                    {
                      uint64_t v140 = *(void *)(v138 + v139);
                      outlined copy of Result<_DataTable, Error>(v140, 1);
                      swift_willThrow(v140, 1, v141, v142, v143, v144);
                      uint64_t v66 = (uint64_t)v219;
                      goto LABEL_60;
                    }
                    uint64_t v218 = *(void *)(*(void *)(v138 + v139) + 16);
                    uint64_t v145 = v138;
                    uint64_t v146 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
                    swift_beginAccess(v145 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures, &v205, 0, 0);
                    if (!*(unsigned char *)(v145 + v146 + 8))
                    {
                      uint64_t v152 = *(void *)(*(void *)(v145 + v146) + 16);
                      swift_retain();
                      uint64_t v153 = v218;
                      swift_retain();
                      swift_retain();
                      uint64_t v154 = v223;
                      CMLModel.resume(data:_:)(v153, v152);
                      uint64_t v50 = (uint64_t)v219;
                      if (v154)
                      {
                        swift_release();
                        swift_release();
                        swift_release();
                        goto LABEL_26;
                      }
                      uint64_t v223 = 0;
                      swift_release();
                      swift_release();
                      swift_release();
                      uint64_t v96 = (uint64_t)v222;
LABEL_86:
                      outlined destroy of MLActivityClassifier.ModelParameters(v50, type metadata accessor for MLCheckpoint);
                      uint64_t v44 = (uint64_t *)v96;
                      goto LABEL_4;
                    }
                    uint64_t v147 = *(void *)(v145 + v146);
                    outlined copy of Result<_DataTable, Error>(v147, 1);
                    swift_willThrow(v147, 1, v148, v149, v150, v151);
                    uint64_t v70 = (uint64_t)v219;
                    goto LABEL_34;
                  }
                }
              }
              (*(void (**)(uint64_t *, uint64_t))(v207 + 8))(v209, v208);
              swift_bridgeObjectRelease(v125);
              outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v219, type metadata accessor for MLCheckpoint);
              uint64_t v44 = (uint64_t *)v128;
              goto LABEL_4;
          }
        }
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v99, &demangling cache variable for type metadata for MLCheckpoint?);
        uint64_t v102 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
        uint64_t v103 = v217;
        swift_beginAccess(v217 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures, &v158, 0, 0);
        char v104 = *(unsigned char *)(v103 + v102 + 8);
        uint64_t v175 = *(void *)(v103 + v102);
        LOBYTE(v176) = v104;
        if (MLDataTable.size.getter())
        {
          uint64_t v96 = (uint64_t)v222;
          switch(*(unsigned char *)(v50 + v212))
          {
            case 0:
              goto LABEL_54;
            case 1:
              goto LABEL_66;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_63;
            case 4:
              goto LABEL_64;
          }
        }
        uint64_t v60 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v60, 0, 0);
        *(void *)uint64_t v61 = 0xD000000000000028;
        uint64_t v65 = "erly initialized.";
LABEL_25:
        *(void *)(v61 + 8) = (unint64_t)v65 | 0x8000000000000000;
        *(_OWORD *)(v61 + 16) = 0;
        *(_OWORD *)(v61 + 32) = 0;
        *(unsigned char *)(v61 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v60, v61, v62, v63, v64);
LABEL_26:
        uint64_t v66 = v50;
LABEL_60:
        outlined destroy of MLActivityClassifier.ModelParameters(v66, type metadata accessor for MLCheckpoint);
        uint64_t v44 = v222;
LABEL_4:
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v44, type metadata accessor for MLActionClassifier.PersistentParameters);
        return;
      case 4:
        JUMPOUT(0x196D7ELL);
    }
  }
}

Swift::Int_optional __swiftcall ActionClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  switch(*(unsigned char *)phase)
  {
    case 0:
    case 3:
    case 4:
      char v2 = 1;
      Swift::Int v3 = 0;
      break;
    case 1:
      uint64_t v4 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable;
      uint64_t v5 = (uint64_t *)(OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable + v1);
      Swift::Int v3 = 0;
      swift_beginAccess(OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable + v1, v9, 0, 0);
      char v6 = *(unsigned char *)(v1 + v4 + 8);
      if (v6 != -1)
      {
        uint64_t v10 = *v5;
        char v11 = v6 & 1;
        Swift::Int v3 = MLDataTable.size.getter();
      }
      char v2 = 0;
      break;
    case 2:
      uint64_t v7 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters + v1;
      char v2 = 0;
      Swift::Int v3 = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 28) + v7);
      break;
  }
  v8.Swift::Int value = v3;
  v8.Swift::Bool is_nil = v2;
  return v8;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActionClassifierTrainingSessionDelegate.extractFeatures(from:)(Swift::Int from)
{
  uint64_t v55 = v1;
  Swift::Int v46 = from;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  Swift::Int_optional v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  id v54 = &v38;
  uint64_t v10 = v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, v39, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)&v38, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  uint64_t v49 = v6;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v38, 1, v6) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v38, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
    BUG();
  }
  uint64_t v11 = (uint64_t)v54;
  outlined init with take of MLClassifierMetrics((uint64_t)&v38, (uint64_t)v54, type metadata accessor for MLActionClassifier.PersistentParameters);
  uint64_t v12 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable;
  swift_beginAccess(OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable + v2, v40, 0, 0);
  unsigned __int8 v13 = *(unsigned char *)(v2 + v12 + 8);
  if (v13 == 0xFF)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v11, type metadata accessor for MLActionClassifier.PersistentParameters);
LABEL_11:
    v26.finished = 1;
    v26._0 = 1;
    return v26;
  }
  uint64_t v14 = *(void *)(v2 + v12);
  uint64_t v44 = v14;
  int v15 = v13;
  char v16 = v13 & 1;
  char v45 = v16;
  int v56 = v15;
  outlined copy of Result<_DataTable, Error>(v14, v15);
  MLDataTable.size.getter();
  if (v17 <= 0)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v54, type metadata accessor for MLActionClassifier.PersistentParameters);
    outlined consume of MLDataTable?(v14, v56);
    goto LABEL_11;
  }
  uint64_t v53 = v14;
  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount);
  uint64_t v50 = v2;
  uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceValidationRowCount);
  BOOL v24 = __OFADD__(v18, v19);
  uint64_t v20 = v18 + v19;
  if (v24) {
    BUG();
  }
  uint64_t v21 = v46;
  if (v20 <= v46)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v54, type metadata accessor for MLActionClassifier.PersistentParameters);
    outlined consume of MLDataTable?(v53, v56);
    v26.finished = 1;
    v26._0 = 0;
  }
  else
  {
    uint64_t v42 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceValidationRowCount;
    uint64_t v41 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTrainingRowCount;
    uint64_t v22 = v50 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters;
    uint64_t v47 = v18;
    uint64_t v23 = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 20) + v22);
    BOOL v24 = __OFADD__(v21, v23);
    uint64_t v25 = v21 + v23;
    if (v47 <= v21)
    {
      if (v24) {
        BUG();
      }
    }
    else
    {
      uint64_t v20 = v47;
      if (v24) {
        BUG();
      }
    }
    if (v20 < v25) {
      uint64_t v25 = v20;
    }
    if (v25 < v21) {
      BUG();
    }
    uint64_t v51 = v53;
    char v52 = v16;
    uint64_t v43 = v25;
    MLDataTable.subscript.getter(v21, v25);
    uint64_t v27 = v44;
    char v28 = v45;
    type metadata accessor for MLActionClassifier.FeatureExtractor();
    uint64_t v48 = v27;
    uint64_t v51 = v27;
    char v52 = v28;
    uint64_t v29 = (uint64_t)v54;
    uint64_t v30 = v55;
    static MLActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:)((uint64_t)&v51, *(double *)((char *)v54 + *(int *)(v49 + 36)));
    uint64_t v31 = v21;
    if (v30)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v29, type metadata accessor for MLActionClassifier.PersistentParameters);
      outlined consume of MLDataTable?(v53, v56);
      v26._0 = outlined consume of Result<_DataTable, Error>(v48, v28);
    }
    else
    {
      char v32 = v28;
      uint64_t v33 = v48;
      uint64_t v55 = 0;
      char v34 = v45;
      uint64_t v49 = v44;
      uint64_t v51 = v44;
      char v52 = v45 & 1;
      if (v47 <= v31) {
        uint64_t v35 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
      }
      else {
        uint64_t v35 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
      }
      swift_beginAccess(v50 + v35, &v44, 33, 0);
      MLDataTable.append(contentsOf:)((uint64_t)&v51);
      swift_endAccess(&v44);
      outlined consume of Result<_DataTable, Error>(v33, v32);
      outlined consume of MLDataTable?(v53, v56);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v54, type metadata accessor for MLActionClassifier.PersistentParameters);
      outlined consume of Result<_DataTable, Error>(v49, v34);
      v26._0 = v43 - v46;
      if (__OFSUB__(v43, v46)) {
        BUG();
      }
      uint64_t v36 = *(void *)(v50 + v41);
      BOOL v24 = __OFADD__(*(void *)(v50 + v42), v36);
      uint64_t v37 = *(void *)(v50 + v42) + v36;
      if (v24) {
        BUG();
      }
      v26.finished = v43 == v37;
    }
  }
  return v26;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActionClassifierTrainingSessionDelegate.transitionTo(phase:)(CreateML::MLPhase phase)
{
  uint64_t v37 = v1;
  uint64_t v38 = (unsigned char *)phase;
  int64_t v3 = (int *)type metadata accessor for MLActionClassifier.ModelParameters(0);
  int64_t v4 = *(void *)(*((void *)v3 - 1) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v36 = &v28;
  int64_t v7 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  Swift::Int_optional v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = (int *)type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v11 = *(void *)(*((void *)v10 - 1) + 64);
  uint64_t v12 = alloca(v11);
  unsigned __int8 v13 = alloca(v11);
  uint64_t v39 = &v28;
  if (*v38 == 2)
  {
    uint64_t v38 = v2;
    uint64_t v14 = (uint64_t)&v2[OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters];
    swift_beginAccess(v14, v29, 0, 0);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v14, (uint64_t)&v28, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
    if (__swift_getEnumTagSinglePayload((uint64_t)&v28, 1, (uint64_t)v10) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v28, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
      BUG();
    }
    uint64_t v15 = (uint64_t)v39;
    outlined init with take of MLClassifierMetrics((uint64_t)&v28, (uint64_t)v39, type metadata accessor for MLActionClassifier.PersistentParameters);
    uint64_t v16 = (uint64_t)v36;
    outlined init with copy of MLTrainingSessionParameters(v15 + v10[5], (uint64_t)v36, type metadata accessor for MLActionClassifier.ModelParameters.ValidationData);
    uint64_t v17 = *(void *)(v15 + v10[7]);
    uint64_t v18 = *(void *)(v15 + v10[8]);
    uint64_t v19 = *(void *)(v15 + v10[10]);
    uint64_t v20 = *(void *)(v15 + v10[9]);
    *(void *)(v16 + v3[5]) = *(void *)(v15 + v10[6]);
    *(void *)(v16 + v3[6]) = v17;
    *(void *)(v16 + v3[7]) = v18;
    *(void *)(v16 + v3[8]) = v19;
    *(void *)(v16 + v3[10]) = v20;
    uint64_t v21 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
    uint64_t v22 = v38;
    swift_beginAccess(&v38[OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures], v30, 0, 0);
    char v23 = v22[v21 + 8];
    uint64_t v32 = *(void *)&v22[v21];
    char v33 = v23;
    uint64_t v24 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
    swift_beginAccess(&v22[OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures], v31, 0, 0);
    char v25 = v22[v24 + 8];
    uint64_t v34 = *(void *)&v22[v24];
    char v35 = v25;
    uint64_t v26 = v37;
    uint64_t v27 = static MLActionClassifier.convertParameters(_:trainingFeatures:validationFeatures:)(v16, (uint64_t)&v32, (uint64_t)&v34);
    outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for MLActionClassifier.ModelParameters);
    if (v26)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v39, type metadata accessor for MLActionClassifier.PersistentParameters);
    }
    else
    {
      swift_retain();
      CMLModel.callFunction(name:arguments:)(0, v27);
      swift_release();
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v39, type metadata accessor for MLActionClassifier.PersistentParameters);
      swift_release();
      swift_release();
    }
  }
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActionClassifierTrainingSessionDelegate.train(from:)(Swift::Int from)
{
  double v49 = v1;
  uint64_t v48 = v2;
  uint64_t v4 = (uint64_t)v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters;
  uint64_t v5 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v6 = *(void *)(*(int *)(v5 + 20) + v4);
  if (__OFADD__(v6, from)) {
    BUG();
  }
  uint64_t v42 = v6 + from;
  Swift::Int v7 = *(void *)(v4 + *(int *)(v5 + 28));
  uint64_t v8 = v7 - from;
  if (__OFSUB__(v7, from)) {
    BUG();
  }
  if (v6 < v8) {
    uint64_t v8 = v6;
  }
  if (v8 < 0) {
    BUG();
  }
  Swift::Int v46 = v7;
  Swift::Int v43 = v8;
  if (v8)
  {
    uint64_t v45 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model;
    uint64_t v9 = v48;
    uint64_t v47 = *(void *)((char *)v48 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_args);
    while (1)
    {
      if (v8-- == 0) {
        BUG();
      }
      uint64_t v9 = *(void **)((char *)v9 + v45);
      swift_retain();
      CMLModel.callFunction(name:arguments:)(1, v47);
      char v11 = LOBYTE(v49);
      Swift::Int v12 = swift_release();
      if (v49 != 0.0) {
        break;
      }
      swift_release();
      uint64_t v9 = v48;
      if (!v8) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v9 = v48;
LABEL_13:
    uint64_t v13 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model;
    uint64_t v14 = *(void *)((char *)v9 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_args);
    swift_retain();
    char v11 = CMLModel.callFunction(name:arguments:)(2, v14);
    Swift::Int v12 = swift_release();
    if (v49 == 0.0)
    {
      swift_release();
      uint64_t v15 = *(void *)((char *)v9 + v13);
      swift_retain();
      CMLModel.getValue(field:)(0x676E696E69617274, 0xED000073736F6C5FLL);
      uint64_t v45 = v13;
      swift_release();
      uint64_t v26 = CMLVariant.featureValue()(v15);
      swift_release();
      specialized handling<A, B>(_:_:)(*(void *)(v26 + 16));
      double v49 = v3;
      swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
      swift_release();
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLProgress.Metric, Double)>);
      uint64_t inited = swift_initStackObject(v29, v38);
      *(void *)(inited + 16) = 1;
      *(void *)(inited + 24) = 2;
      *(unsigned char *)(inited + 32) = 0;
      double v31 = v49;
      *(double *)(inited + 40) = v49;
      uint64_t v32 = lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      uint64_t v47 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for MLProgress.Metric, &type metadata for Double, v32);
      uint64_t v16 = *(void *)((char *)v48 + v45);
      swift_retain();
      CMLModel.getValue(field:)(0xD000000000000011, (uint64_t)("rainingSessionDelegate" + 0x8000000000000000));
      swift_release();
      uint64_t v27 = CMLVariant.featureValue()(v16);
      swift_release();
      specialized handling<A, B>(_:_:)(*(void *)(v27 + 16));
      double v49 = 0.0;
      double v44 = v31;
      swift_release();
      uint64_t v33 = v47;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v47);
      v39[0] = v33;
      double v35 = v44;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, isUniquelyReferenced_nonNull_native, v44);
      uint64_t v47 = v39[0];
      swift_bridgeObjectRelease(0);
      uint64_t v17 = v48;
      uint64_t v18 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
      swift_beginAccess((char *)v48 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures, v39, 0, 0);
      char v19 = *((unsigned char *)v17 + v18 + 8);
      uint64_t v40 = *(void *)((char *)v17 + v18);
      char v41 = v19;
      if (MLDataTable.size.getter() <= 0)
      {
        Swift::Int v22 = v46;
      }
      else
      {
        uint64_t v20 = *(void *)((char *)v17 + v45);
        swift_retain();
        double v21 = v49;
        CMLModel.getValue(field:)(0xD000000000000013, (uint64_t)("Augmentation Options" + 0x8000000000000000));
        if (v21 == 0.0)
        {
          swift_release();
          uint64_t v28 = CMLVariant.featureValue()(v20);
          swift_release();
          specialized handling<A, B>(_:_:)(*(void *)(v28 + 16));
          double v49 = v35;
          swift_release();
          uint64_t v36 = v47;
          char v37 = swift_isUniquelyReferenced_nonNull_native(v47);
          uint64_t v40 = v36;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v37, v49);
          uint64_t v47 = v40;
          swift_bridgeObjectRelease(0);
        }
        else
        {
          swift_errorRelease(*(void *)&v21);
          swift_release();
        }
        Swift::Int v22 = v46;
      }
      char v11 = v42 >= v22;
      char v23 = v47;
      uint64_t v9 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v47);
      swift_bridgeObjectRelease(v23);
      Swift::Int v12 = v43;
    }
  }
  uint64_t v24 = v9;
  Swift::Bool v25 = v11;
  result.metrics._uint64_t rawValue = v24;
  result._0 = v12;
  result.finished = v25;
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> ActionClassifierTrainingSessionDelegate.evaluate(from:)(Swift::Int from)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_args);
  swift_retain();
  CMLModel.callFunction(name:arguments:)(4, v3);
  swift_release();
  if (!v1) {
    swift_release();
  }
  v4._0 = 1;
  v4.finished = 1;
  return v4;
}

uint64_t ActionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v105 = v2;
  uint64_t v99 = v3;
  uint64_t v102 = a1;
  LODWORD(v3) = 0;
  uint64_t v4 = type metadata accessor for URL(0);
  uint64_t v5 = *(void *)(v4 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  Swift::Int v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  char v11 = alloca(v6);
  Swift::Int v12 = alloca(v6);
  uint64_t v13 = alloca(v6);
  uint64_t v14 = alloca(v6);
  int v15 = *a2;
  if (v15 == 2)
  {
    uint64_t empty = tc_v1_parameters_create_empty(0);
    if (!empty) {
      BUG();
    }
    double v21 = (uint64_t *)empty;
    uint64_t v22 = type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject(v22, v63);
    *(void *)(inited + 16) = v21;
    int v23 = type metadata accessor for CMLFeatureValue();
    uint64_t v24 = URL.path.getter(0);
    LODWORD(v3) = v23;
    Swift::Bool v25 = v105;
    uint64_t v27 = CMLFeatureValue.__allocating_init(_:)(v24, v26);
    if (v25)
    {
      swift_setDeallocating(inited);
      tc_v1_release(v21);
      return v3;
    }
    unint64_t v105 = v21;
    uint64_t v34 = inited;
    CMLParameters.add(key:featureValue:)(7, v27);
    swift_release();
    uint64_t v3 = *(uint64_t **)((char *)v99 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_model);
    swift_retain();
    CMLModel.callFunction(name:arguments:)(6, v34);
    swift_release();
    swift_setDeallocating(v34);
    tc_v1_release(v105);
    swift_release();
LABEL_14:
    LOBYTE(v3) = 1;
    return v3;
  }
  if (v15 != 1) {
    return v3;
  }
  uint64_t v86 = v46;
  uint64_t inited = v4;
  int v87 = v46;
  char v88 = v46;
  uint64_t v16 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures;
  uint64_t v17 = v99;
  uint64_t v89 = (uint64_t *)((char *)v99 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures);
  swift_beginAccess((char *)v99 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures, v64, 1, 0);
  char v18 = *((unsigned char *)v17 + v16 + 8);
  uint64_t v66 = *(uint64_t *)((char *)v17 + v16);
  LOBYTE(v67) = v18;
  outlined copy of Result<_DataTable, Error>(v66, v18);
  URL.appendingPathComponent(_:)(0x676E696E69617274, 0xE800000000000000);
  uint64_t v3 = &v66;
  char v19 = v105;
  MLDataTable.write(to:)((uint64_t)v46);
  if (!v19)
  {
    unint64_t v105 = 0;
    uint64_t v98 = *(void (**)(char *, uint64_t))(v5 + 8);
    v98(v46, inited);
    outlined consume of Result<_DataTable, Error>(v66, v67);
    uint64_t v28 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures;
    uint64_t v29 = v99;
    uint64_t v30 = (uint64_t *)((char *)v99 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures);
    swift_beginAccess((char *)v99 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures, v65, 1, 0);
    char v31 = *((unsigned char *)v29 + v28 + 8);
    uint64_t v100 = *(uint64_t *)((char *)v29 + v28);
    LOBYTE(v101) = v31;
    outlined copy of Result<_DataTable, Error>(v100, v31);
    uint64_t v32 = (uint64_t)v86;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEA00000000006E6FLL);
    uint64_t v3 = &v100;
    uint64_t v33 = v105;
    MLDataTable.write(to:)(v32);
    if (v33)
    {
      v98((char *)v32, inited);
      outlined consume of Result<_DataTable, Error>(v100, v101);
      return v3;
    }
    unint64_t v105 = v30;
    v98((char *)v32, inited);
    outlined consume of Result<_DataTable, Error>(v100, v101);
    uint64_t v36 = v87;
    URL.appendingPathComponent(_:)(0x676E696E69617274, 0xE800000000000000);
    LOBYTE(v66) = 1;
    *(_DWORD *)((char *)&v66 + 1) = *(_DWORD *)v90;
    HIDWORD(v66) = *(_DWORD *)&v90[3];
    uint64_t v67 = 44;
    unint64_t v68 = 0xE100000000000000;
    uint64_t v69 = 0;
    char v106 = 1;
    unint64_t v70 = 0xE000000000000000;
    uint64_t v71 = 92;
    unint64_t v72 = 0xE100000000000000;
    char v73 = 1;
    *(_DWORD *)uint64_t v74 = *(_DWORD *)v91;
    *(_DWORD *)&v74[3] = *(_DWORD *)&v91[3];
    uint64_t v75 = 34;
    unint64_t v76 = 0xE100000000000000;
    char v77 = 1;
    *(_DWORD *)&v78[3] = *(_DWORD *)&v92[3];
    *(_DWORD *)uint64_t v78 = *(_DWORD *)v92;
    char v79 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
    uint64_t v80 = 10;
    unint64_t v81 = 0xE100000000000000;
    long long v82 = 0;
    char v83 = 1;
    *(_DWORD *)uint64_t v84 = *(_DWORD *)v93;
    *(_DWORD *)&v84[3] = *(_DWORD *)&v93[3];
    uint64_t v85 = 0;
    MLDataTable.init(contentsOf:options:)(v36, &v66);
    char v37 = v95;
    uint64_t v38 = v89;
    uint64_t v39 = *v89;
    *uint64_t v89 = v94;
    int v40 = *((_DWORD *)v38 + 2);
    *((unsigned char *)v38 + 8) = v37;
    outlined consume of Result<_DataTable, Error>(v39, v40);
    char v41 = v88;
    LODWORD(v3) = v102;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEA00000000006E6FLL);
    v46[0] = 1;
    uint64_t v47 = 44;
    unint64_t v48 = 0xE100000000000000;
    uint64_t v49 = 0;
    char v103 = 1;
    unint64_t v50 = 0xE000000000000000;
    uint64_t v51 = 92;
    unint64_t v52 = 0xE100000000000000;
    char v53 = 1;
    uint64_t v54 = 34;
    unint64_t v55 = 0xE100000000000000;
    char v56 = 1;
    uint64_t v57 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
    uint64_t v58 = 10;
    unint64_t v59 = 0xE100000000000000;
    long long v60 = 0;
    char v61 = 1;
    uint64_t v62 = 0;
    MLDataTable.init(contentsOf:options:)(v41, v46);
    char v42 = v97;
    Swift::Int v43 = v105;
    uint64_t v44 = *v105;
    *unint64_t v105 = v96;
    int v45 = *((_DWORD *)v43 + 2);
    *((unsigned char *)v43 + 8) = v42;
    outlined consume of Result<_DataTable, Error>(v44, v45);
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v46, inited);
  outlined consume of Result<_DataTable, Error>(v66, v67);
  return v3;
}

uint64_t ActionClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters + v2;
  swift_beginAccess(v10, v18, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, (uint64_t)&v17, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v6) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v17, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD000000000000030;
    *(void *)(v12 + 8) = "Feature Extractor" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v17, (uint64_t)&v17, type metadata accessor for MLActionClassifier.PersistentParameters);
    MLActionClassifier.PersistentParameters.save(toSessionDirectory:)(v20);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v17, type metadata accessor for MLActionClassifier.PersistentParameters);
  }
}

NSURL *ActionClassifierTrainingSessionDelegate.restore(from:phase:)(uint64_t a1)
{
  uint64_t v39 = (uint64_t *)v1;
  uint64_t v37 = v2;
  uint64_t v32 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v34 = v30;
  uint64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  double v35 = v30;
  uint64_t v8 = alloca(v3);
  uint64_t v9 = alloca(v3);
  uint64_t v38 = v30;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v33 = type metadata accessor for MLActionClassifier.PersistentParameters(0);
  int64_t v15 = *(void *)(*(void *)(v33 - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v36 = v30;
  char v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v30, v32, v10);
  uint64_t v20 = (uint64_t)v39;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool result = MLActionClassifier.PersistentParameters.init(sessionDirectory:)(v30);
  if (!v20)
  {
    uint64_t v39 = v30;
    uint64_t v22 = v37 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters;
    swift_beginAccess(v37 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, v30, 0, 0);
    uint64_t v23 = (uint64_t)v38;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v22, (uint64_t)v38, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
    uint64_t v24 = v23;
    uint64_t v25 = v33;
    if (__swift_getEnumTagSinglePayload(v24, 1, v33) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v38, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
      uint64_t v26 = (uint64_t)v35;
      outlined init with take of MLClassifierMetrics((uint64_t)v39, (uint64_t)v35, type metadata accessor for MLActionClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v26, 0, 1, v25);
      uint64_t v27 = (uint64_t)v34;
      outlined init with take of DataFrame?(v26, (uint64_t)v34, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
      swift_beginAccess(v22, v31, 33, 0);
      outlined assign with take of MLActionClassifier.PersistentParameters?(v27, v22);
      return (NSURL *)swift_endAccess(v31);
    }
    else
    {
      uint64_t v28 = (uint64_t)v36;
      outlined init with take of MLClassifierMetrics((uint64_t)v38, (uint64_t)v36, type metadata accessor for MLActionClassifier.PersistentParameters);
      uint64_t v29 = (uint64_t)v39;
      ActionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v39, v28);
      outlined destroy of MLActivityClassifier.ModelParameters(v28, type metadata accessor for MLActionClassifier.PersistentParameters);
      return (NSURL *)outlined destroy of MLActivityClassifier.ModelParameters(v29, type metadata accessor for MLActionClassifier.PersistentParameters);
    }
  }
  return result;
}

uint64_t ActionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v196 = (void *)v2;
  v178._char object = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
  int64_t v4 = *(void *)(*((void *)v178._object - 1) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v175 = (void (*)(void, void))&v175;
  unint64_t v181 = (void *)type metadata accessor for MLActionClassifier.DataSource(0);
  int64_t v7 = *(void *)(*(v181 - 1) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  v178._uint64_t countAndFlagsBits = (uint64_t)&v175;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  char v182 = &v175;
  int64_t v12 = alloca(v7);
  uint64_t v13 = alloca(v7);
  unint64_t v177 = &v175;
  uint64_t v14 = alloca(v7);
  int64_t v15 = alloca(v7);
  uint64_t v193 = &v175;
  uint64_t v188 = type metadata accessor for DataFrame(0);
  uint64_t v192 = *(void **)(v188 - 8);
  int64_t v16 = v192[8];
  uint64_t v17 = alloca(v16);
  char v18 = alloca(v16);
  unint64_t v179 = &v175;
  uint64_t v19 = alloca(v16);
  uint64_t v20 = alloca(v16);
  uint64_t v187 = &v175;
  double v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  v186._char object = &v175;
  uint64_t v23 = alloca(v16);
  uint64_t v24 = alloca(v16);
  long long v189 = &v175;
  uint64_t v25 = alloca(v16);
  uint64_t v26 = alloca(v16);
  uint64_t v194 = (uint64_t)&v175;
  int64_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v28 = alloca(v27);
  uint64_t v29 = alloca(v27);
  v186._uint64_t countAndFlagsBits = (uint64_t)&v175;
  uint64_t v30 = alloca(v27);
  char v31 = alloca(v27);
  uint64_t countAndFlagsBits = &v175;
  uint64_t v33 = alloca(v27);
  uint64_t v34 = alloca(v27);
  uint64_t v195 = &v175;
  double v35 = alloca(v27);
  uint64_t v36 = alloca(v27);
  uint64_t v37 = (int *)type metadata accessor for MLActionClassifier.PersistentParameters(0);
  uint64_t v38 = v37[6];
  uint64_t v39 = *(void *)(a2 + v38);
  if (*(void *)(a1 + v38) != v39)
  {
    uint64_t v190 = *(void *)(a1 + v38);
    uint64_t v50 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v196 = (void *)BinaryInteger.description.getter(&type metadata for Int, v50);
    uint64_t v195 = (void *)v51;
    uint64_t v190 = v39;
    uint64_t v52 = BinaryInteger.description.getter(&type metadata for Int, v50);
    uint64_t v54 = v53;
    uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
    *(void *)uint64_t v56 = 0x6953206863746142;
    *(void *)(v56 + 8) = 0xEA0000000000657ALL;
    *(void *)(v56 + 16) = v196;
    *(void *)(v56 + 24) = v195;
    *(void *)(v56 + 32) = v52;
    *(void *)(v56 + 40) = v54;
LABEL_14:
    *(unsigned char *)(v56 + 48) = 3;
    return swift_willThrow(&type metadata for MLCreateError, v55, v56, v57, v58, v59);
  }
  uint64_t v40 = v37[7];
  uint64_t v41 = *(void *)(a2 + v40);
  if (*(void *)(a1 + v40) != v41)
  {
    uint64_t v190 = *(void *)(a1 + v40);
    uint64_t v60 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v196 = (void *)BinaryInteger.description.getter(&type metadata for Int, v60);
    uint64_t v195 = (void *)v61;
    uint64_t v190 = v41;
    uint64_t v62 = BinaryInteger.description.getter(&type metadata for Int, v60);
    uint64_t v64 = v63;
    uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
    *(void *)uint64_t v56 = 0xD000000000000012;
    uint64_t v65 = "metricsAttributesDictionary";
LABEL_13:
    *(void *)(v56 + 8) = (unint64_t)v65 | 0x8000000000000000;
    *(void *)(v56 + 16) = v196;
    *(void *)(v56 + 24) = v195;
    *(void *)(v56 + 32) = v62;
    *(void *)(v56 + 40) = v64;
    goto LABEL_14;
  }
  uint64_t v42 = v37[8];
  uint64_t v43 = *(void *)(a2 + v42);
  if (*(void *)(a1 + v42) != v43)
  {
    uint64_t v190 = *(void *)(a1 + v42);
    uint64_t v66 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v196 = (void *)BinaryInteger.description.getter(&type metadata for Int, v66);
    uint64_t v195 = (void *)v67;
    uint64_t v190 = v43;
    uint64_t v62 = BinaryInteger.description.getter(&type metadata for Int, v66);
    uint64_t v64 = v68;
    uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
    *(void *)uint64_t v56 = 0xD000000000000016;
    uint64_t v65 = "Number of Labels";
    goto LABEL_13;
  }
  uint64_t v44 = v37[9];
  double v45 = *(double *)(a1 + v44);
  if (v45 != *(double *)(a2 + v44))
  {
    uint64_t v196 = *(void **)(a2 + v44);
    uint64_t v69 = Double.description.getter(v45);
    uint64_t v71 = v70;
    uint64_t v72 = Double.description.getter(*(double *)&v196);
    uint64_t v74 = v73;
    uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
    *(void *)uint64_t v56 = 0xD000000000000011;
    uint64_t v57 = "lassification algorithm." + 0x8000000000000000;
    *(void *)(v56 + 8) = "lassification algorithm." + 0x8000000000000000;
    *(void *)(v56 + 16) = v69;
    *(void *)(v56 + 24) = v71;
    *(void *)(v56 + 32) = v72;
    *(void *)(v56 + 40) = v74;
    *(unsigned char *)(v56 + 48) = 3;
    return swift_willThrow(&type metadata for MLCreateError, v55, v56, v57, v58, v59);
  }
  uint64_t v46 = v37[10];
  uint64_t v47 = *(void *)(a2 + v46);
  if (*(void *)(a1 + v46) != v47)
  {
    uint64_t v190 = *(void *)(a1 + v46);
    uint64_t v75 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v196 = (void *)BinaryInteger.description.getter(&type metadata for Int, v75);
    uint64_t v195 = (void *)v76;
    uint64_t v190 = v47;
    uint64_t v62 = BinaryInteger.description.getter(&type metadata for Int, v75);
    uint64_t v64 = v77;
    uint64_t v55 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v55, 0, 0);
    *(void *)uint64_t v56 = 0xD000000000000014;
    uint64_t v65 = "Maximum Iterations";
    goto LABEL_13;
  }
  uint64_t v180 = a2;
  uint64_t v48 = (uint64_t)v196;
  uint64_t result = MLActionClassifier.DataSource.gatherAnnotatedFileNames()();
  if (!v48)
  {
    uint64_t v196 = &v175;
    MLActionClassifier.DataSource.gatherAnnotatedFileNames()();
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v196, (uint64_t)&v175, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v78 = v188;
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&v175, 1, v188);
    uint64_t v185 = 0;
    if (EnumTagSinglePayload != 1)
    {
      uint64_t v176 = (void (*)(uint64_t, void (**)(void, void), uint64_t))v192[4];
      v176(v194, &v175, v78);
      uint64_t countAndFlagsBits = (void *)v186._countAndFlagsBits;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, v186._countAndFlagsBits, &demangling cache variable for type metadata for DataFrame?);
      if (__swift_getEnumTagSinglePayload((uint64_t)countAndFlagsBits, 1, v78) != 1)
      {
        int v101 = countAndFlagsBits;
        uint64_t v102 = v78;
        uint64_t v103 = (uint64_t)v189;
        uint64_t v104 = (uint64_t)v189;
        v176((uint64_t)v189, (void (**)(void, void))v101, v78);
        v186._uint64_t countAndFlagsBits = DataFrame.shape.getter(v104);
        char object = v186._object;
        char v106 = v186._object;
        uint64_t v107 = v103;
        uint64_t v108 = (uint64_t)v192;
        ((void (*)(void *, uint64_t, uint64_t))v192[2])(v186._object, v107, v102);
        if (v186._countAndFlagsBits <= 0)
        {
          uint64_t v154 = object;
          uint64_t v155 = *(void (**)(void *, uint64_t))(v108 + 8);
          v155(v154, v102);
        }
        else
        {
          v186._uint64_t countAndFlagsBits = DataFrame.shape.getter(v106);
          v186._char object = *(void **)(v108 + 8);
          ((void (*)(void *, uint64_t))v186._object)(object, v102);
          if (v186._countAndFlagsBits > 0)
          {
            uint64_t v109 = v194;
            uint64_t v110 = v185;
            uint64_t v111 = ActionClassifierTrainingSessionDelegate.pathsByLabel(for:)();
            if (!v110)
            {
              uint64_t v112 = v111;
              uint64_t v113 = ActionClassifierTrainingSessionDelegate.pathsByLabel(for:)();
              char v114 = v113;
              uint64_t v185 = 0;
              char v115 = specialized static Dictionary<>.== infix(_:_:)(v112, v113);
              swift_bridgeObjectRelease(v112);
              swift_bridgeObjectRelease(v114);
              if (v115)
              {
                uint64_t v116 = v188;
                uint64_t v117 = (void (*)(uint64_t, uint64_t))v186._object;
                ((void (*)(void *, uint64_t))v186._object)(v189, v188);
                v117(v109, v116);
                goto LABEL_30;
              }
              uint64_t v168 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v168, 0, 0);
              *(void *)uint64_t v169 = 1;
              *(_OWORD *)(v169 + 8) = 0;
              *(_OWORD *)(v169 + 24) = 0;
              *(void *)(v169 + 40) = 0;
              *(unsigned char *)(v169 + 48) = 4;
              swift_willThrow(&type metadata for MLCreateError, v168, v169, v170, v171, v172);
            }
            uint64_t v173 = v188;
            uint64_t v174 = (void (*)(uint64_t, uint64_t))v186._object;
            ((void (*)(void *, uint64_t))v186._object)(v189, v188);
            v174(v109, v173);
            goto LABEL_50;
          }
          uint64_t v102 = v188;
          uint64_t v155 = (void (*)(void *, uint64_t))v186._object;
        }
        v155(v189, v102);
        v155((void *)v194, v102);
LABEL_20:
        uint64_t v80 = (uint64_t)v193;
        outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v193, type metadata accessor for MLActionClassifier.DataSource);
        unint64_t v81 = v181;
        if (swift_getEnumCaseMultiPayload(v80, v181) == 3)
        {
          uint64_t v193 = *(void **)v80;
          LOBYTE(v194) = *(unsigned char *)(v80 + 8);
          v186._char object = *(void **)(v80 + 16);
          long long v82 = *(void **)(v80 + 24);
          v186._uint64_t countAndFlagsBits = *(void *)(v80 + 32);
          long long v189 = *(void **)(v80 + 40);
          swift_bridgeObjectRelease(*(void *)(v80 + 56));
          uint64_t v80 = (uint64_t)v177;
          outlined init with copy of MLTrainingSessionParameters(v180, (uint64_t)v177, type metadata accessor for MLActionClassifier.DataSource);
          if (swift_getEnumCaseMultiPayload(v80, v81) == 3)
          {
            unint64_t v181 = v82;
            uint64_t v192 = *(void **)v80;
            LODWORD(v188) = *(_DWORD *)(v80 + 8);
            v178._char object = *(void **)(v80 + 16);
            char v182 = *(void **)(v80 + 24);
            v178._uint64_t countAndFlagsBits = *(void *)(v80 + 32);
            unint64_t v179 = *(void **)(v80 + 40);
            swift_bridgeObjectRelease(*(void *)(v80 + 56));
            uint64_t v83 = (uint64_t)v193;
            uint64_t v183 = (uint64_t)v193;
            int v84 = v194;
            LOBYTE(v194) = v194 & 1;
            char v184 = v194;
            outlined copy of Result<_DataTable, Error>((uint64_t)v193, v84);
            v85._uint64_t countAndFlagsBits = v186._countAndFlagsBits;
            char v86 = (char)v189;
            v85._char object = v189;
            MLDataTable.subscript.getter(v85);
            swift_bridgeObjectRelease(v86);
            LODWORD(v187) = v84;
            outlined consume of Result<_DataTable, Error>(v83, v84);
            uint64_t v183 = v190;
            char v184 = v191;
            long long v189 = Array<A>.init(_:)((uint64_t)&v183, v45);
            uint64_t v87 = (uint64_t)v192;
            uint64_t v183 = (uint64_t)v192;
            char v88 = v188;
            LOBYTE(v186._countAndFlagsBits) = v188 & 1;
            char v184 = v188 & 1;
            outlined copy of Result<_DataTable, Error>((uint64_t)v192, v188);
            v85._uint64_t countAndFlagsBits = v178._countAndFlagsBits;
            LOBYTE(v84) = (_BYTE)v179;
            v85._char object = v179;
            MLDataTable.subscript.getter(v85);
            swift_bridgeObjectRelease(v84);
            outlined consume of Result<_DataTable, Error>(v87, v88);
            uint64_t v183 = v190;
            char v184 = v191;
            uint64_t v89 = Array<A>.init(_:)((uint64_t)&v183, v45);
            LOBYTE(v87) = (_BYTE)v89;
            char v90 = (char)v189;
            LOBYTE(v84) = specialized static Array<A>.== infix(_:_:)((uint64_t)v189, (uint64_t)v89);
            swift_bridgeObjectRelease(v90);
            swift_bridgeObjectRelease(v87);
            if (v84)
            {
              uint64_t v91 = (uint64_t)v193;
              uint64_t v183 = (uint64_t)v193;
              char v184 = v194;
              char v92 = (char)v187;
              outlined copy of Result<_DataTable, Error>((uint64_t)v193, (char)v187);
              v93._uint64_t countAndFlagsBits = (uint64_t)v186._object;
              char v94 = (char)v181;
              v93._char object = v181;
              MLDataTable.subscript.getter(v93);
              swift_bridgeObjectRelease(v94);
              outlined consume of Result<_DataTable, Error>(v91, v92);
              uint64_t v183 = v190;
              char v184 = v191;
              uint64_t v194 = (uint64_t)Array<A>.init(_:)((uint64_t)&v183, v45);
              uint64_t v95 = (uint64_t)v192;
              uint64_t v183 = (uint64_t)v192;
              char v184 = v186._countAndFlagsBits;
              char v96 = v188;
              outlined copy of Result<_DataTable, Error>((uint64_t)v192, v188);
              v93._uint64_t countAndFlagsBits = (uint64_t)v178._object;
              LOBYTE(v91) = (_BYTE)v182;
              v93._char object = v182;
              MLDataTable.subscript.getter(v93);
              LOBYTE(v93._countAndFlagsBits) = v91;
              char v97 = v96;
              swift_bridgeObjectRelease(v93._countAndFlagsBits);
              outlined consume of Result<_DataTable, Error>(v95, v96);
              uint64_t v183 = v190;
              char v184 = v191;
              uint64_t v98 = Array<A>.init(_:)((uint64_t)&v183, v45);
              char v99 = (char)v98;
              LOBYTE(v95) = v194;
              char v100 = specialized static Array<A>.== infix(_:_:)(v194, (uint64_t)v98);
              swift_bridgeObjectRelease(v95);
              swift_bridgeObjectRelease(v99);
              if (v100)
              {
                outlined consume of Result<_DataTable, Error>((uint64_t)v192, v97);
                outlined consume of Result<_DataTable, Error>((uint64_t)v193, (char)v187);
LABEL_30:
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, &demangling cache variable for type metadata for DataFrame?);
                return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v196, &demangling cache variable for type metadata for DataFrame?);
              }
              uint64_t v163 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v163, 0, 0);
              *(void *)uint64_t v164 = 1;
              *(_OWORD *)(v164 + 8) = 0;
              *(_OWORD *)(v164 + 24) = 0;
              *(void *)(v164 + 40) = 0;
              *(unsigned char *)(v164 + 48) = 4;
              swift_willThrow(&type metadata for MLCreateError, v163, v164, v165, v166, v167);
              uint64_t v153 = (uint64_t)v192;
              char v152 = v97;
            }
            else
            {
              swift_bridgeObjectRelease((_BYTE)v182);
              swift_bridgeObjectRelease((_BYTE)v181);
              uint64_t v147 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v147, 0, 0);
              *(void *)uint64_t v148 = 1;
              *(_OWORD *)(v148 + 8) = 0;
              *(_OWORD *)(v148 + 24) = 0;
              *(void *)(v148 + 40) = 0;
              *(unsigned char *)(v148 + 48) = 4;
              swift_willThrow(&type metadata for MLCreateError, v147, v148, v149, v150, v151);
              char v152 = v188;
              uint64_t v153 = (uint64_t)v192;
            }
            outlined consume of Result<_DataTable, Error>(v153, v152);
            outlined consume of Result<_DataTable, Error>((uint64_t)v193, (char)v187);
            goto LABEL_50;
          }
          outlined consume of Result<_DataTable, Error>((uint64_t)v193, v194);
          swift_bridgeObjectRelease((_BYTE)v189);
          swift_bridgeObjectRelease((_BYTE)v82);
        }
        outlined destroy of MLActivityClassifier.ModelParameters(v80, type metadata accessor for MLActionClassifier.DataSource);
        uint64_t v118 = a1;
        uint64_t v119 = (uint64_t)v182;
        outlined init with copy of MLTrainingSessionParameters(v118, (uint64_t)v182, type metadata accessor for MLActionClassifier.DataSource);
        if (swift_getEnumCaseMultiPayload(v119, v81) == 5)
        {
          int v120 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v121 = v120[12];
          v186._uint64_t countAndFlagsBits = *(void *)(v119 + v121);
          uint64_t v193 = *(void **)(v119 + v121 + 8);
          uint64_t v122 = v120[16];
          long long v189 = *(void **)(v119 + v122);
          uint64_t v194 = *(void *)(v119 + v122 + 8);
          swift_bridgeObjectRelease(*(void *)(v119 + v120[20] + 8));
          uint64_t v123 = v188;
          char v182 = (void *)v192[4];
          ((void (*)(void *, uint64_t, uint64_t))v182)(v187, v119, v188);
          uint64_t v124 = v81;
          uint64_t v125 = v178._countAndFlagsBits;
          outlined init with copy of MLTrainingSessionParameters(v180, v178._countAndFlagsBits, type metadata accessor for MLActionClassifier.DataSource);
          if (swift_getEnumCaseMultiPayload(v125, v124) == 5)
          {
            uint64_t v126 = v120[12];
            uint64_t v180 = *(void *)(v125 + v126);
            v186._char object = *(void **)(v125 + v126 + 8);
            uint64_t v127 = v120[16];
            unint64_t v181 = *(void **)(v125 + v127);
            unint64_t v177 = *(void **)(v125 + v127 + 8);
            swift_bridgeObjectRelease(*(void *)(v125 + v120[20] + 8));
            ((void (*)(void *, uint64_t, uint64_t))v182)(v179, v125, v123);
            uint64_t v128 = v175;
            char v129 = v194;
            DataFrame.subscript.getter(v189, v194);
            swift_bridgeObjectRelease(v129);
            char v130 = (char)v177;
            DataFrame.subscript.getter(v181, v177);
            swift_bridgeObjectRelease(v130);
            char v131 = specialized Sequence.allSatisfy(_:)(v128);
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v128, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
            if (v131)
            {
              char v132 = (char)v193;
              DataFrame.subscript.getter(v186._countAndFlagsBits, v193);
              swift_bridgeObjectRelease(v132);
              char v133 = (char)v186._object;
              uint64_t v134 = v179;
              DataFrame.subscript.getter(v180, v186._object);
              swift_bridgeObjectRelease(v133);
              char v135 = specialized Sequence.allSatisfy(_:)(v128);
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v128, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
              uint64_t v136 = (uint64_t)v195;
              if ((v135 & 1) == 0)
              {
                uint64_t v137 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                swift_allocError(&type metadata for MLCreateError, v137, 0, 0);
                *(void *)uint64_t v138 = 1;
                *(_OWORD *)(v138 + 8) = 0;
                *(_OWORD *)(v138 + 24) = 0;
                *(void *)(v138 + 40) = 0;
                *(unsigned char *)(v138 + 48) = 4;
                swift_willThrow(&type metadata for MLCreateError, v137, v138, v139, v140, v141);
              }
              uint64_t v142 = (void (*)(void *, uint64_t))v192[1];
              uint64_t v143 = v134;
              uint64_t v144 = v188;
              v142(v143, v188);
              v142(v187, v144);
              uint64_t v145 = v136;
              goto LABEL_51;
            }
            swift_bridgeObjectRelease(v186._object);
            swift_bridgeObjectRelease((_BYTE)v193);
            uint64_t v156 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v156, 0, 0);
            *(void *)uint64_t v157 = 1;
            *(_OWORD *)(v157 + 8) = 0;
            *(_OWORD *)(v157 + 24) = 0;
            *(void *)(v157 + 40) = 0;
            *(unsigned char *)(v157 + 48) = 4;
            swift_willThrow(&type metadata for MLCreateError, v156, v157, v158, v159, v160);
            uint64_t v161 = (void (*)(void *, uint64_t))v192[1];
            uint64_t v162 = v188;
            v161(v179, v188);
            v161(v187, v162);
LABEL_50:
            uint64_t v145 = (uint64_t)v195;
LABEL_51:
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v145, &demangling cache variable for type metadata for DataFrame?);
            return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v196, &demangling cache variable for type metadata for DataFrame?);
          }
          swift_bridgeObjectRelease(v194);
          swift_bridgeObjectRelease((_BYTE)v193);
          ((void (*)(void *, uint64_t))v192[1])(v187, v123);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, &demangling cache variable for type metadata for DataFrame?);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v196, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v146 = v125;
        }
        else
        {
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v195, &demangling cache variable for type metadata for DataFrame?);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v196, &demangling cache variable for type metadata for DataFrame?);
          uint64_t v146 = v119;
        }
        return outlined destroy of MLActivityClassifier.ModelParameters(v146, type metadata accessor for MLActionClassifier.DataSource);
      }
      ((void (*)(uint64_t, uint64_t))v192[1])(v194, v78);
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)countAndFlagsBits, &demangling cache variable for type metadata for DataFrame?);
    goto LABEL_20;
  }
  return result;
}

uint64_t ActionClassifierTrainingSessionDelegate.pathsByLabel(for:)()
{
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v49 = *(void *)(v51 - 8);
  int64_t v0 = *(void *)(v49 + 64);
  uint64_t v1 = alloca(v0);
  uint64_t v2 = alloca(v0);
  uint64_t v52 = &v42;
  int64_t v3 = alloca(v0);
  int64_t v4 = alloca(v0);
  v5._uint64_t countAndFlagsBits = 0x7461506F65646976;
  v5._char object = (void *)0xE900000000000068;
  if (specialized DataFrame.containsColumn<A>(_:_:)(v5))
  {
    DataFrame.subscript.getter(0x7461506F65646976, 0xE900000000000068, &type metadata for String);
    v6._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v6._char object = (void *)0xE500000000000000;
    if (specialized DataFrame.containsColumn<A>(_:_:)(v6))
    {
      DataFrame.subscript.getter(0x6C6562616CLL, 0xE500000000000000, &type metadata for String);
      uint64_t v7 = v51;
      uint64_t v8 = Column.count.getter(v51);
      if (v8 < 0) {
        BUG();
      }
      uint64_t v9 = &v42;
      if (v8)
      {
        uint64_t v48 = &v42;
        uint64_t v10 = _swiftEmptyDictionarySingleton;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v44 = v8;
        do
        {
          if (v8 == v12) {
            BUG();
          }
          uint64_t v45 = v12;
          Column.subscript.getter(v12, v7);
          if (v54)
          {
            uint64_t v55 = v54;
            uint64_t v56 = v53;
          }
          else
          {
            uint64_t v56 = 0;
            uint64_t v55 = 0xE000000000000000;
          }
          Column.subscript.getter(v45, v7);
          if (v54)
          {
            unint64_t v46 = v54;
            uint64_t v47 = v53;
            _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v11, 0);
          }
          else
          {
            _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v11, 0);
            uint64_t v47 = 0;
            unint64_t v46 = 0xE000000000000000;
          }
          uint64_t v13 = v55;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
          uint64_t v53 = (uint64_t)v10;
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v13);
          BOOL v16 = (v15 & 1) == 0;
          BOOL v17 = __OFADD__(v10[2], v16);
          Swift::Int v18 = v10[2] + v16;
          if (v17) {
            BUG();
          }
          char v19 = v15;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
          Swift::Bool v20 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
          double v21 = (void *)v53;
          unint64_t v22 = v43;
          if (v20)
          {
            unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v55);
            if ((v19 & 1) != (v23 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              BUG();
            }
          }
          swift_bridgeObjectRelease(0);
          char v24 = (char)v21;
          if ((v19 & 1) == 0)
          {
            v21[(v22 >> 6) + 8] |= 1 << v22;
            uint64_t v25 = v21[6];
            uint64_t v26 = 16 * v22;
            *(void *)(v25 + v26) = v56;
            char v27 = v55;
            *(void *)(v25 + v26 + 8) = v55;
            *(void *)(v21[7] + 8 * v22) = _swiftEmptyArrayStorage;
            uint64_t v28 = v21[2];
            swift_bridgeObjectRetain((_BYTE)v21);
            BOOL v17 = __OFADD__(1, v28);
            uint64_t v29 = v28 + 1;
            if (v17) {
              BUG();
            }
            v21[2] = v29;
            char v24 = v27;
          }
          uint64_t v50 = v21;
          swift_bridgeObjectRetain(v24);
          uint64_t v30 = v21[7];
          swift_bridgeObjectRelease((_BYTE)v21);
          char v31 = *(void **)(v30 + 8 * v22);
          char v32 = swift_isUniquelyReferenced_nonNull_native(v31);
          *(void *)(v30 + 8 * v22) = v31;
          uint64_t v56 = v30;
          if (!v32)
          {
            char v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, (uint64_t)v31);
            *(void *)(v30 + 8 * v22) = v31;
          }
          unint64_t v33 = v31[2];
          if (v31[3] >> 1 <= v33)
          {
            char v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31[3] >= 2uLL, v33 + 1, 1, (uint64_t)v31);
            *(void *)(v56 + 8 * v22) = v31;
          }
          uint64_t v34 = v45 + 1;
          v31[2] = v33 + 1;
          uint64_t v35 = 2 * v33;
          v31[v35 + 4] = v47;
          v31[v35 + 5] = v46;
          swift_bridgeObjectRelease(v55);
          uint64_t v12 = v34;
          uint64_t v36 = specialized thunk for @callee_guaranteed () -> (@owned [Double]);
          uint64_t v11 = specialized thunk for @callee_guaranteed () -> (@owned [Double]);
          uint64_t v8 = v44;
          uint64_t v7 = v51;
          uint64_t v10 = v50;
        }
        while (v44 != v12);
        uint64_t v9 = v48;
      }
      else
      {
        uint64_t v50 = _swiftEmptyDictionarySingleton;
        uint64_t v36 = 0;
      }
      uint64_t v41 = *(void (**)(uint64_t *, uint64_t))(v49 + 8);
      v41(v52, v7);
      v41(v9, v7);
      _sxRi_zRi0_zlySaySdGIsegr_SgWOe((uint64_t)v36, 0);
      return (uint64_t)v50;
    }
    else
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v40 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v39, &protocol witness table for String);
      (*(void (**)(uint64_t *, uint64_t))(v49 + 8))(&v42, v51);
    }
    return v40;
  }
  else
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v37, &protocol witness table for String);
  }
}

uint64_t ActionClassifierTrainingSessionDelegate.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  outlined consume of MLDataTable?(*(void *)(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_sourceTable + 8));
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_trainingFeatures + 8));
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures), *(_DWORD *)(v0 + OBJC_IVAR____TtC8CreateML39ActionClassifierTrainingSessionDelegate_validationFeatures + 8));
  swift_release();
  swift_release();
  return v0;
}

uint64_t ActionClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  ActionClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for ActionClassifierTrainingSessionDelegate()
{
  return type metadata accessor for ActionClassifierTrainingSessionDelegate(0);
}

uint64_t type metadata accessor for ActionClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for ActionClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for ActionClassifierTrainingSessionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActionClassifierTrainingSessionDelegate);
  }
  return result;
}

uint64_t type metadata completion function for ActionClassifierTrainingSessionDelegate(uint64_t a1)
{
  v4[0] = &unk_34CE88;
  uint64_t result = type metadata accessor for MLTrainingSessionParameters(319);
  if (v2 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLActionClassifier.PersistentParameters?(319);
    if (v3 <= 0x3F)
    {
      v4[2] = *(void *)(result - 8) + 64;
      v4[3] = &unk_34CEA0;
      void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
      void v4[6] = &unk_34CEB8;
      v4[7] = &unk_34CEB8;
      v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for MLActionClassifier.PersistentParameters?(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for MLActionClassifier.PersistentParameters?;
  if (!lazy cache variable for type metadata for MLActionClassifier.PersistentParameters?)
  {
    uint64_t v2 = type metadata accessor for MLActionClassifier.PersistentParameters(255);
    uint64_t result = type metadata accessor for Optional(a1, v2);
    if (!v3) {
      lazy cache variable for type metadata for MLActionClassifier.PersistentParameters? = result;
    }
  }
  return result;
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance ActionClassifierTrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance ActionClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance ActionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)ActionClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

void protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance ActionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance ActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  *(Swift::tuple_Int_finished_Bool *)&long long v2 = ActionClassifierTrainingSessionDelegate.extractFeatures(from:)(a1);
  if (v4)
  {
    uint64_t v5 = v1;
  }
  else
  {
    unsigned int v3 = BYTE8(v2);
    uint64_t v5 = v1;
    *((void *)&v2 + 1) = v2;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, void))(v1 + 8), v5, *((uint64_t *)&v2 + 1), v3);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance ActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9 = ActionClassifierTrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 8);
    uint64_t v6 = v1;
  }
  else
  {
    uint64_t rawValue = v9.metrics._rawValue;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 8);
    BOOL finished = v9.finished;
    uint64_t v6 = v1;
    v9.metrics._uint64_t rawValue = (void *)v9._0;
    *(void *)&v9.BOOL finished = rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate(v5, v6, (uint64_t)v9.metrics._rawValue, *(uint64_t *)&v9.finished, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance ActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  *(Swift::tuple_Int_finished_Bool *)&long long v2 = ActionClassifierTrainingSessionDelegate.evaluate(from:)(a1);
  if (!v4)
  {
    *((void *)&v2 + 1) = 1;
    unsigned int v3 = 1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, void))(v1 + 8), v1, *((uint64_t *)&v2 + 1), v3);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance ActionClassifierTrainingSessionDelegate(uint64_t a1, unsigned __int8 *a2)
{
  return ActionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2);
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance ActionClassifierTrainingSessionDelegate(uint64_t a1)
{
  return ActionClassifierTrainingSessionDelegate.save(to:)(a1);
}

NSURL *protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance ActionClassifierTrainingSessionDelegate(uint64_t a1)
{
  return ActionClassifierTrainingSessionDelegate.restore(from:phase:)(a1);
}

uint64_t outlined assign with take of MLActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

uint64_t closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1, a2);
}

char static MLSoundClassifier.ModelParameters.FeatureExtractorType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(void *)a1 == *(void *)a2) & ~(*(unsigned char *)(a2 + 8) ^ *(unsigned char *)(a1 + 8));
}

unint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter()
{
  if (*(unsigned char *)(v0 + 8))
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(0xE000000000000000);
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = v1._object;
    unint64_t v4 = 0xD000000000000031;
  }
  else
  {
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = v1._object;
    unint64_t v4 = 0xD000000000000010;
  }
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return v4;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLSoundClassifier.ModelParameters.FeatureExtractorType.validate()()
{
  uint64_t v1 = *v0;
  if (*((unsigned char *)v0 + 8))
  {
    if (v1 == 1) {
      return;
    }
    _StringGuts.grow(_:)(58);
    v2._uint64_t countAndFlagsBits = 0xD000000000000026;
    v2._char object = "vggish revision " + 0x8000000000000000;
    String.append(_:)(v2);
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v5 = (char)v4;
    v2._uint64_t countAndFlagsBits = v3;
    v2._char object = v4;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(v5);
    v2._char object = "und in the model." + 0x8000000000000000;
    v2._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v2);
    unint64_t v6 = 0;
    uint64_t v7 = (char *)0xE000000000000000;
  }
  else
  {
    if (v1 == 1) {
      return;
    }
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(0);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10._char object = "und in the model." + 0x8000000000000000;
    v10._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v10);
    unint64_t v6 = 0xD000000000000019;
    uint64_t v7 = "eature print revision " + 0x8000000000000000;
  }
  uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
  *(void *)uint64_t v12 = v6;
  *(void *)(v12 + 8) = v7;
  *(_OWORD *)(v12 + 16) = 0;
  *(_OWORD *)(v12 + 32) = 0;
  *(unsigned char *)(v12 + 48) = 0;
  swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
}

char protocol witness for static Equatable.== infix(_:_:) in conformance MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  return static MLSoundClassifier.ModelParameters.FeatureExtractorType.== infix(_:_:)(a1, a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSoundClassifier.ModelParameters.FeatureExtractorType()
{
  return MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
}

uint64_t getEnumTag for MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void destructiveInjectEnumTag for MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 8) = a2 & 1;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.FeatureExtractorType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.FeatureExtractorType;
}

uint64_t MLGazetteer.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = v2;
  uint64_t v21 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v21 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  *(_OWORD *)Swift::Bool v20 = *(_OWORD *)a2;
  long long v14 = *(_OWORD *)(a2 + 16);
  long long v15 = *(_OWORD *)(a2 + 32);
  long long v16 = *(_OWORD *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(v3 + 8);
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9 = *(void **)(v3 + 24);
  Swift::Int v18 = v12;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, 0x65657474657A6147, 0xE900000000000072, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v2)
  {
    uint64_t v22 = v4;
    BOOL v17 = v9;
    v12[0] = *(_OWORD *)v20;
    v12[1] = v14;
    v12[2] = v15;
    void v12[3] = v16;
    uint64_t v13 = v19;
    v20[0] = v9;
    uint64_t v11 = (uint64_t)v18;
    static MLGazetteer.write(dictionary:parameters:to:metadata:)(v8, &v17, (uint64_t)v18, (uint64_t)v12);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v11, v21);
  }
  return result;
}

NSURL *static MLGazetteer.write(dictionary:parameters:to:metadata:)(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (NSString *)*a2;
  uint64_t v5 = *(void *)(a4 + 64);
  v22[0] = *(_OWORD *)a4;
  v22[1] = *(_OWORD *)(a4 + 16);
  v22[2] = *(_OWORD *)(a4 + 32);
  v22[3] = *(_OWORD *)(a4 + 48);
  uint64_t v23 = v5;
  uint64_t v16 = static _TextUtilities.optionsDictionary(from:)((uint64_t *)v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (v4)
  {
    uint64_t v21 = v4;
  }
  else
  {
    uint64_t v21 = NLLanguageUndetermined;
    uint64_t v4 = 0;
  }
  Swift::Int v18 = objc_opt_self(NLGazetteer);
  unint64_t v6 = v4;
  URL._bridgeToObjectiveC()(v6);
  uint64_t v8 = (uint64_t)v7;
  id v19 = v7;
  Swift::Bool v20 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v16);
  swift_bridgeObjectRelease(v16);
  *(void *)&v22[0] = 0;
  LOBYTE(v8) = outlined bridged method (mnnnbnnn) of @objc static NLGazetteer.writeMLModel(for:language:to:options:)((uint64_t)isa, (uint64_t)v21, v8, (uint64_t)v20, (uint64_t)v22, v18);

  uint64_t v9 = *(void *)&v22[0];
  if ((_BYTE)v8)
  {
    *(id *)&v22[0];
  }
  else
  {
    id v11 = *(id *)&v22[0];
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v11, v21, v12, v13, v14, v15);
  }
  return __stack_chk_guard;
}

uint64_t MLGazetteer.write(toFile:metadata:)(Swift::String a1, long long *a2)
{
  uint64_t v28 = v2;
  uint64_t string = a1._object;
  v23._uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v27 = v16;
  Swift::String v10 = alloca(v7);
  id v11 = alloca(v7);
  long long v18 = *a2;
  long long v19 = a2[1];
  long long v20 = a2[2];
  long long v21 = a2[3];
  uint64_t v24 = *((void *)a2 + 8);
  v23._char object = *(void **)(v3 + 8);
  id v25 = *(id *)(v3 + 24);
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, 0x65657474657A6147, (void *)0xE900000000000072);
  if (!v2)
  {
    uint64_t v28 = v5;
    static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)((uint64_t)v16, 0x65657474657A6147, 0xE900000000000072, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
    uint64_t string = v16;
    id v22 = v25;
    v16[0] = v18;
    v16[1] = v19;
    v16[2] = v20;
    v16[3] = v21;
    uint64_t v17 = v24;
    id v13 = v25;
    static MLGazetteer.write(dictionary:parameters:to:metadata:)((uint64_t)v23._object, &v22, (uint64_t)v27, (uint64_t)v16);

    uint64_t v14 = *(void (**)(_OWORD *, uint64_t))(v6 + 8);
    uint64_t v15 = v28;
    v14(v27, v28);
    return ((uint64_t (*)(_OWORD *, uint64_t))v14)(string, v15);
  }
  return result;
}

uint64_t outlined bridged method (mnnnbnnn) of @objc static NLGazetteer.writeMLModel(for:language:to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  LODWORD(a5) = [a6 writeGazetteerMLModelForDictionary:a1 language:a2 toURL:a3 options:isa error:a5];

  return a5;
}

id MLMultiArray.cast(to:)(char *a1)
{
  uint64_t v4 = (char *)[v2 dataType];
  if (v4 == (unsigned char *)&loc_1003E + 2)
  {
    if (a1 == (unsigned char *)&loc_1001D + 3)
    {
      uint64_t v17 = &v14;
      uint64_t v9 = alloca(24);
      Swift::String v10 = alloca(32);
      id v16 = v2;
      uint64_t v7 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
      uint64_t v8 = partial apply for closure #2 in MLMultiArray.cast(to:);
LABEL_7:
      id result = (id)MLMultiArray.withUnsafeBytes<A>(_:)(v8, &v14, v7);
      if (!v1) {
        return (id)v14;
      }
      return result;
    }
  }
  else if (v4 == (unsigned char *)&loc_1001D + 3 && a1 == (unsigned char *)&loc_1003E + 2)
  {
    uint64_t v17 = &v14;
    uint64_t v5 = alloca(24);
    uint64_t v6 = alloca(32);
    id v16 = v2;
    uint64_t v7 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLMultiArray, MLMultiArray_ptr);
    uint64_t v8 = partial apply for closure #1 in MLMultiArray.cast(to:);
    goto LABEL_7;
  }
  if (v4 != a1)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v12._char object = "CreateML/_CoreMLUtilities.swift" + 0x8000000000000000;
    v12._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v12);
    id v16 = [v2 dataType];
    uint64_t v13 = type metadata accessor for MLMultiArrayDataType(0);
    _print_unlocked<A, B>(_:_:)(&v16, &v14, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12._uint64_t countAndFlagsBits = 0x60206F742060;
    v12._char object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    id v16 = a1;
    _print_unlocked<A, B>(_:_:)(&v16, &v14, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v12);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v14, v15, "CreateML/_CoreMLUtilities.swift", 31, 2, 58, 0);
    BUG();
  }
  return v2;
}

uint64_t static Int32.mlMultiArrayDataType.getter()
{
  return 131104;
}

uint64_t static Float.mlMultiArrayDataType.getter()
{
  return 65568;
}

uint64_t static Double.mlMultiArrayDataType.getter()
{
  return 65600;
}

id closure #1 in MLMultiArray.cast(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)a3;
  id v16 = v3;
  if (a1)
  {
    uint64_t v6 = a2 - a1;
    uint64_t v7 = v6 / 4;
    a3 = v6 % 4;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = v7;
  id v8 = [v5 shape:a3];
  id v9 = v8;
  uint64_t v10 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  objc_allocWithZone((Class)MLMultiArray);
  id result = @nonobjc MLMultiArray.init(shape:dataType:)(v11, 65600);
  if (!v4)
  {
    id v13 = result;
    uint64_t v14 = alloca(32);
    unint64_t v15 = alloca(32);
    uint64_t v18 = a1;
    uint64_t v19 = v17;
    MLMultiArray.withUnsafeMutableBytes<A>(_:)(partial apply for closure #1 in closure #1 in MLMultiArray.cast(to:), &v16, (char *)&type metadata for () + 8);
    id result = v16;
    *id v16 = v13;
  }
  return result;
}

void closure #1 in closure #1 in MLMultiArray.cast(to:)(double *__C, uint64_t a2, uint64_t a3, const float *a4, int64_t a5)
{
  if (__C) {
    uint64_t v5 = (a2 - (uint64_t)__C) / 8;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 < a5) {
    a5 = v5;
  }
  if (a5 < 0) {
    BUG();
  }
  if (!a4) {
    BUG();
  }
  if (!__C) {
    BUG();
  }
  vDSP_vspdp(a4, 1, __C, 1, a5);
}

id closure #2 in MLMultiArray.cast(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)a3;
  id v16 = v3;
  if (a1)
  {
    uint64_t v6 = a2 - a1;
    uint64_t v7 = v6 / 8;
    a3 = v6 % 8;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = v7;
  id v8 = [v5 shape:a3];
  id v9 = v8;
  uint64_t v10 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  objc_allocWithZone((Class)MLMultiArray);
  id result = @nonobjc MLMultiArray.init(shape:dataType:)(v11, 65568);
  if (!v4)
  {
    id v13 = result;
    uint64_t v14 = alloca(32);
    unint64_t v15 = alloca(32);
    uint64_t v18 = a1;
    uint64_t v19 = v17;
    MLMultiArray.withUnsafeMutableBytes<A>(_:)(partial apply for closure #1 in closure #2 in MLMultiArray.cast(to:), &v16, (char *)&type metadata for () + 8);
    id result = v16;
    *id v16 = v13;
  }
  return result;
}

void closure #1 in closure #2 in MLMultiArray.cast(to:)(float *__C, uint64_t a2, uint64_t a3, const double *a4, int64_t a5)
{
  if (__C) {
    uint64_t v5 = (a2 - (uint64_t)__C) / 4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 < a5) {
    a5 = v5;
  }
  if (a5 < 0) {
    BUG();
  }
  if (!a4) {
    BUG();
  }
  if (!__C) {
    BUG();
  }
  vDSP_vdpsp(a4, 1, __C, 1, a5);
}

id partial apply for closure #2 in MLMultiArray.cast(to:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in MLMultiArray.cast(to:)(a1, a2, *(void *)(v2 + 16));
}

id partial apply for closure #1 in MLMultiArray.cast(to:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in MLMultiArray.cast(to:)(a1, a2, *(void *)(v2 + 16));
}

void partial apply for closure #1 in closure #1 in MLMultiArray.cast(to:)(double *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in closure #1 in MLMultiArray.cast(to:)(a1, a2, a3, *(const float **)(v3 + 16), *(void *)(v3 + 24));
}

void partial apply for closure #1 in closure #2 in MLMultiArray.cast(to:)(float *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in closure #2 in MLMultiArray.cast(to:)(a1, a2, a3, *(const double **)(v3 + 16), *(void *)(v3 + 24));
}

id @nonobjc MLModel.__allocating_init(contentsOf:)(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v2 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v12 = 0;
  id v4 = [ObjCClassFromMetadata modelWithContentsOfURL:v2 error:&v12];
  id v5 = v4;

  id v6 = v12;
  if (v5)
  {
    uint64_t v7 = type metadata accessor for URL(0);
    id v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v6;
    v8(a1, v7);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v5;
}

id MLGazetteer.model.getter()
{
  return *(id *)(v0 + 16);
}

id key path getter for MLGazetteer.model : MLGazetteer()
{
  uint64_t v1 = v0;
  id result = MLGazetteer.model.getter();
  *uint64_t v1 = result;
  return result;
}

void key path setter for MLGazetteer.model : MLGazetteer(id *a1)
{
  id v1 = *a1;
  MLGazetteer.model.setter((uint64_t)v1);
}

void MLGazetteer.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

void (*MLGazetteer.model.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void **)(v1 + 16);
  *a1 = v3;
  v3;
  return MLWordTagger.model.modify;
}

id MLGazetteer.modelParameters.getter()
{
  uint64_t v2 = *(void **)(v1 + 24);
  *uint64_t v0 = v2;
  return v2;
}

NSURL *MLGazetteer.init(dictionary:parameters:)(void *a1, void **a2)
{
  id v123 = v3;
  uint64_t v107 = v2;
  id v122 = (id)type metadata accessor for UUID(0);
  id isa = (id)*((void *)v122 - 1);
  int64_t v4 = *((void *)isa + 8);
  id v5 = alloca(v4);
  id v6 = alloca(v4);
  id v113 = &v106;
  uint64_t v112 = type metadata accessor for URL(0);
  uint64_t v117 = *(void *)(v112 - 8);
  int64_t v7 = *(void *)(v117 + 64);
  id v8 = alloca(v7);
  id v9 = alloca(v7);
  uint64_t v106 = (uint64_t)&v106;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  uint64_t v108 = &v106;
  id v12 = alloca(v7);
  id v13 = alloca(v7);
  uint64_t v109 = &v106;
  uint64_t v14 = alloca(v7);
  unint64_t v15 = alloca(v7);
  char v115 = &v106;
  id v16 = alloca(v7);
  uint64_t v17 = alloca(v7);
  int v120 = &v106;
  uint64_t v18 = alloca(v7);
  uint64_t v19 = alloca(v7);
  uint64_t v116 = &v106;
  long long v20 = alloca(v7);
  long long v21 = alloca(v7);
  uint64_t v119 = &v106;
  id v22 = *a2;
  Swift::String v23 = objc_opt_self(NSFileManager);
  uint64_t v110 = v22;
  id v24 = v22;
  id v25 = v24;
  swift_bridgeObjectRetain((_BYTE)a1);
  id v27 = [v23 defaultManager];
  id v28 = v27;
  NSFileManager.createTemporaryModelDirectory()();
  id v123 = v29;
  if (!v29)
  {
    id v114 = v28;
    NSFileManager.temporaryModelDirectory.getter();
    v124[0] = 0;
    v124[1] = (id)0xE000000000000000;
    id v31 = v113;
    UUID.init()();
    uint64_t v32 = UUID.uuidString.getter();
    id v111 = v25;
    unint64_t v33 = (void *)v32;
    uint64_t v121 = a1;
    uint64_t v35 = v34;
    (*((void (**)(id, id))isa + 1))(v31, v122);
    swift_bridgeObjectRelease(v124[1]);
    v124[0] = v33;
    uint64_t v36 = (NSString *)v111;
    v124[1] = v35;
    v37._uint64_t countAndFlagsBits = 45;
    v37._char object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    v37._uint64_t countAndFlagsBits = 0x65657474657A6147;
    v37._char object = (void *)0xE900000000000072;
    String.append(_:)(v37);
    char v38 = (char)v124[1];
    URL.appendingPathComponent(_:)(v124[0], v124[1]);
    swift_bridgeObjectRelease(v38);
    URL.appendingPathExtension(_:)(7627108, 0xE300000000000000);
    URL.appendingPathExtension(_:)(0x6C65646F6D6C6DLL, 0xE700000000000000);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    id isa = Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v39 = v36;
    if (!v110) {
      uint64_t v39 = NLLanguageUndetermined;
    }
    uint64_t v40 = objc_opt_self(NLGazetteer);
    id v122 = v36;
    URL._bridgeToObjectiveC()((NSURL *)v122);
    uint64_t v42 = v41;
    v124[0] = 0;
    id v43 = isa;
    LOBYTE(v40) = [v40 writeGazetteerForDictionary:isa language:v39 toURL:v41 error:v124];

    id v44 = v124[0];
    if ((_BYTE)v40)
    {
      uint64_t v45 = (uint64_t)v109;
      uint64_t v46 = v112;
      id isa = *(id *)(v117 + 16);
      ((void (*)(uint64_t *, uint64_t *, uint64_t))isa)(v109, v120, v112);
      objc_allocWithZone((Class)NLGazetteer);
      v44;
      id v47 = v123;
      id v48 = @nonobjc NLGazetteer.init(contentsOf:)(v45);
      id v28 = v121;
      id v123 = v47;
      if (!v47)
      {
        uint64_t v58 = v48;
        uint64_t v125 = v110;
        memset(v124, 0, 72);
        id v122 = v122;
        id v59 = v58;
        uint64_t v60 = (uint64_t)v115;
        id v61 = v123;
        static MLGazetteer.write(dictionary:parameters:to:metadata:)((uint64_t)v28, &v125, (uint64_t)v115, (uint64_t)v124);
        id v123 = v61;
        if (v61)
        {
          swift_bridgeObjectRelease((_BYTE)v121);
          id v62 = v59;

          id v28 = v122;
          uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
          uint64_t v64 = v60;
          uint64_t v65 = v112;
          v63(v64, v112);
          v63((uint64_t)v120, v65);
          v63((uint64_t)v116, v65);
          v63((uint64_t)v119, v65);
          LOBYTE(v28) = (_BYTE)v121;
        }
        else
        {
          id v113 = v59;

          uint64_t v66 = (NSURL *)objc_opt_self(MLModel);
          URL._bridgeToObjectiveC()(v66);
          uint64_t v68 = v67;
          v124[0] = 0;
          id v69 = [(NSURL *)v66 compileModelAtURL:v67 error:v124];
          id v70 = v69;

          id v71 = v124[0];
          if (v70)
          {
            uint64_t v72 = v108;
            static URL._unconditionallyBridgeFromObjectiveC(_:)(v70);
            uint64_t v73 = v71;
            uint64_t v74 = v72;
            v73;

            type metadata accessor for MLModel();
            uint64_t v75 = v106;
            uint64_t v76 = v112;
            ((void (*)(uint64_t, uint64_t *, uint64_t))isa)(v106, v74, v112);
            id v77 = v123;
            id v78 = @nonobjc MLModel.__allocating_init(contentsOf:)(v75);
            id v123 = v77;
            if (!v77)
            {
              char v94 = v78;
              uint64_t v95 = v76;
              uint64_t v109 = (uint64_t *)v121[2];
              uint64_t v96 = (uint64_t)v121;
              swift_bridgeObjectRetain((_BYTE)v121);
              id isa = v94;
              char v97 = specialized _copyCollectionToContiguousArray<A>(_:)(v96);
              swift_bridgeObjectRelease(v96);
              uint64_t v98 = specialized Set.init<A>(_:)((uint64_t)v97);
              uint64_t v99 = *(void *)(v98 + 16);
              swift_bridgeObjectRelease(v98);
              static MLGazetteer.reportAnalytics(termCount:labelCount:language:)((int)v109, v99, (uint64_t)v110);
              id v100 = v122;

              int v101 = *(void (**)(uint64_t *, uint64_t))(v117 + 8);
              v101(v108, v95);
              uint64_t v102 = (uint64_t)v115;
              $defer #1 () in MLGazetteer.init(dictionary:parameters:)();

              v101((uint64_t *)v102, v95);
              v101(v120, v95);
              v101(v116, v95);
              v101(v119, v95);
              uint64_t v103 = v107;
              id v104 = v113;
              *uint64_t v107 = v113;
              LOBYTE(v95) = (_BYTE)v121;
              v103[1] = v121;
              id v105 = isa;
              v103[2] = isa;
              v103[3] = v110;

              swift_bridgeObjectRelease(v95);
              return __stack_chk_guard;
            }
            char v79 = *(void (**)(uint64_t *, uint64_t))(v117 + 8);
            v79(v74, v76);

            LOBYTE(v28) = (_BYTE)v121;
            swift_bridgeObjectRelease((_BYTE)v121);
            id v80 = v122;

            uint64_t v81 = (uint64_t)v115;
            $defer #1 () in MLGazetteer.init(dictionary:parameters:)();

            uint64_t v82 = v81;
            id v62 = v113;
          }
          else
          {
            id v123 = v124[0];
            id v83 = v113;

            LOBYTE(v28) = (_BYTE)v121;
            swift_bridgeObjectRelease((_BYTE)v121);
            id v84 = v122;

            id v85 = v71;
            id v62 = v83;
            char v86 = (void *)_convertNSErrorToError(_:)(v85);
            id v87 = v123;

            id v123 = v86;
            swift_willThrow(v87, "compileModelAtURL:error:", v88, v89, v90, v91);
            uint64_t v92 = (uint64_t)v115;
            $defer #1 () in MLGazetteer.init(dictionary:parameters:)();

            char v79 = *(void (**)(uint64_t *, uint64_t))(v117 + 8);
            uint64_t v82 = v92;
            uint64_t v76 = v112;
          }
          v79((uint64_t *)v82, v76);
          v79(v120, v76);
          v79(v116, v76);
          v79(v119, v76);
        }

        goto LABEL_18;
      }
      swift_bridgeObjectRelease((_BYTE)v121);

      id v49 = v122;
      uint64_t v50 = *(void (**)(uint64_t *, uint64_t))(v117 + 8);
      v50(v115, v46);
    }
    else
    {
      id v123 = v124[0];
      LOBYTE(v28) = (_BYTE)v121;
      swift_bridgeObjectRelease((_BYTE)v121);
      id v51 = v122;

      uint64_t v52 = (void *)_convertNSErrorToError(_:)(v44);
      id v53 = v123;

      id v123 = v52;
      swift_willThrow(v53, "writeGazetteerForDictionary:language:toURL:error:", v54, v55, v56, v57);

      uint64_t v50 = *(void (**)(uint64_t *, uint64_t))(v117 + 8);
      uint64_t v46 = v112;
      v50(v115, v112);
    }
    v50(v120, v46);
    v50(v116, v46);
    v50(v119, v46);
LABEL_18:
    id v30 = v111;
    goto LABEL_19;
  }

  LOBYTE(v28) = (_BYTE)a1;
  swift_bridgeObjectRelease((_BYTE)a1);

  id v30 = v25;
LABEL_19:

  swift_bridgeObjectRelease((_BYTE)v28);
  return __stack_chk_guard;
}

NSURL *$defer #1 () in MLGazetteer.init(dictionary:parameters:)()
{
  uint64_t v0 = objc_opt_self(NSFileManager);
  id v1 = [v0 defaultManager];
  uint64_t v2 = (NSURL *)v1;
  URL._bridgeToObjectiveC()(v2);
  int64_t v4 = v3;
  id v10 = 0;
  unsigned __int8 v5 = [(NSURL *)v2 removeItemAtURL:v3 error:&v10];

  id v6 = v10;
  if (v5) {
    return (NSURL *)v10;
  }
  id v8 = v10;
  uint64_t v9 = _convertNSErrorToError(_:)(v6);

  swift_willThrow();
  swift_errorRelease(v9);
  return __stack_chk_guard;
}

char static MLGazetteer.reportAnalytics(termCount:labelCount:language:)(int a1, int a2, uint64_t a3)
{
  char result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_gazetteer, (Swift::String)__PAIR128__(0xEF736D7265542066, 0x6F207265626D754ELL), (float)a1);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_gazetteer, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), (float)a2);
    if (a3)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
      v7._char object = v6;
    }
    else
    {
      v7._char object = "formers Text Embedding" + 0x8000000000000000;
      uint64_t v5 = 0xD000000000000014;
    }
    v7._uint64_t countAndFlagsBits = v5;
    AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_gazetteer, (Swift::String)__PAIR128__(0xE800000000000000, 0x65676175676E614CLL), v7);
    return swift_bridgeObjectRelease(v7._object);
  }
  return result;
}

uint64_t MLGazetteer.init(labeledData:textColumn:labelColumn:parameters:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, id *a6, double a7)
{
  v73._uint64_t countAndFlagsBits = a4;
  uint64_t v64 = v7;
  v74[0] = a2;
  v74[1] = a5;
  uint64_t v10 = *(void *)a1;
  char v11 = *(unsigned char *)(a1 + 8);
  id v68 = *a6;
  outlined copy of Result<_DataTable, Error>(*(void *)a1, v11);
  v12._uint64_t countAndFlagsBits = a2;
  v12._char object = a3;
  MLDataTable.subscript.getter(v12);
  swift_bridgeObjectRelease((_BYTE)a3);
  outlined consume of Result<_DataTable, Error>(v10, v11);
  v74[0] = v69;
  char v77 = BYTE8(v69);
  *(void *)&long long v71 = v10;
  BYTE8(v71) = v11;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  v12._uint64_t countAndFlagsBits = v73._countAndFlagsBits;
  v12._char object = (void *)v74[1];
  MLDataTable.subscript.getter(v12);
  swift_bridgeObjectRelease(v74[1]);
  outlined consume of Result<_DataTable, Error>(v10, v11);
  uint64_t v72 = v69;
  char v76 = BYTE8(v69);
  *(void *)&long long v69 = v10;
  BYTE8(v69) = v11;
  Swift::Int v13 = MLDataTable.size.getter();
  uint64_t v14 = specialized RandomAccessCollection<>.distance(from:to:)(0, v13);
  outlined consume of Result<_DataTable, Error>(v10, v11);
  if (v14 < 0) {
    BUG();
  }
  unint64_t v15 = _swiftEmptyDictionarySingleton;
  if (v14)
  {
    uint64_t v16 = 0;
    uint64_t v65 = v14;
    while (1)
    {
      if (v14 == v16) {
        BUG();
      }
      if (v76)
      {

        unint64_t v15 = _swiftEmptyDictionarySingleton;
        uint64_t v16 = 0;
        goto LABEL_28;
      }
      outlined copy of Result<_DataTable, Error>(v72, 0);
      _UntypedColumn.valueAtIndex(index:)(v16, a7);
      outlined consume of Result<_DataTable, Error>(v72, 0);
      v74[1] = *((void *)&v69 + 1);
      if ((_BYTE)v70 != 2) {
        break;
      }
      if (v77)
      {

        outlined consume of MLDataValue((void *)v69, (void *)v74[1], 2);
        v73._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyDictionarySingleton;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease(0);
        strcpy((char *)&v71, "Current text ");
        HIWORD(v71) = -4864;
        v57._uint64_t countAndFlagsBits = MLDataValue.description.getter();
        char object = (char)v57._object;
        String.append(_:)(v57);
        swift_bridgeObjectRelease(object);
        outlined consume of MLDataValue(0, 0, 6);
        v59._uint64_t countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v59);
        *(_OWORD *)&v74[1] = v71;
        v59._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v59._object, 0, 0);
        *(_OWORD *)uint64_t v60 = v71;
        *(_OWORD *)(v60 + 16) = 0;
        *(_OWORD *)(v60 + 32) = 0;
        *(unsigned char *)(v60 + 48) = 1;
        swift_willThrow(&type metadata for MLCreateError, v59._object, v60, v61, v62, v63);
        uint64_t v56 = v72;
        char v55 = 0;
        goto LABEL_33;
      }
      v73._uint64_t countAndFlagsBits = v69;
      uint64_t v17 = v16;
      uint64_t v18 = v15;
      outlined copy of Result<_DataTable, Error>(v74[0], 0);
      uint64_t v67 = v17;
      _UntypedColumn.valueAtIndex(index:)(v17, a7);
      outlined consume of Result<_DataTable, Error>(v74[0], 0);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v20 = swift_allocObject(v19, 48, 7);
      *(void *)(v20 + 16) = 1;
      *(void *)(v20 + 24) = 2;
      *(_OWORD *)(v20 + 32) = v69;
      uint64_t v66 = v20;
      *(void *)&long long v69 = v20;
      uint64_t countAndFlagsBits = v73._countAndFlagsBits;
      if (v15[2])
      {
        swift_bridgeObjectRetain(v74[1]);
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v73._countAndFlagsBits, v74[1]);
        if (v23)
        {
          uint64_t v24 = *(void *)(v15[7] + 8 * v22);
          swift_bridgeObjectRetain(*(void *)(v18[7] + 8 * v22));
          outlined consume of MLDataValue((void *)v73._countAndFlagsBits, (void *)v74[1], 2);
          uint64_t v25 = v24;
          unint64_t v15 = v18;
          specialized Array.append<A>(contentsOf:)(v25);
          uint64_t v66 = v69;
          uint64_t v26 = v74[1];
          uint64_t countAndFlagsBits = v73._countAndFlagsBits;
        }
        else
        {
          uint64_t countAndFlagsBits = v73._countAndFlagsBits;
          outlined consume of MLDataValue((void *)v73._countAndFlagsBits, (void *)v74[1], 2);
          uint64_t v26 = v74[1];
        }
      }
      else
      {
        uint64_t v26 = v74[1];
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      *(void *)&long long v71 = v15;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, v26);
      char v75 = v29;
      BOOL v30 = (v29 & 1) == 0;
      BOOL v31 = __OFADD__(v15[2], v30);
      Swift::Int v32 = v15[2] + v30;
      if (v31) {
        BUG();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
      Swift::Bool v33 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32);
      uint64_t v34 = (void *)v74[1];
      if (v33)
      {
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v73._countAndFlagsBits, v74[1]);
        if ((v75 & 1) != (v35 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          BUG();
        }
      }
      unint64_t v15 = (void *)v71;
      if (v75)
      {
        uint64_t v36 = *(void *)(v71 + 56);
        uint64_t v37 = *(void *)(v36 + 8 * v28);
        *(void *)(v36 + 8 * v28) = v66;
        uint64_t v14 = v65;
      }
      else
      {
        *(void *)(v71 + 8 * (v28 >> 6) + 64) |= 1 << v28;
        uint64_t v38 = v15[6];
        uint64_t v39 = 16 * v28;
        *(void *)(v38 + v39) = v73._countAndFlagsBits;
        *(void *)(v38 + v39 + 8) = v34;
        *(void *)(v15[7] + 8 * v28) = v66;
        uint64_t v40 = v15[2];
        BOOL v31 = __OFADD__(1, v40);
        uint64_t v41 = v40 + 1;
        uint64_t v14 = v65;
        if (v31) {
          BUG();
        }
        v15[2] = v41;
        swift_bridgeObjectRetain((_BYTE)v34);
        LOBYTE(v37) = 0;
      }
      uint64_t v16 = v67 + 1;
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(0);
      outlined consume of MLDataValue((void *)v73._countAndFlagsBits, v34, 2);
      uint64_t v42 = v74[0];
      if (v14 == v67 + 1) {
        goto LABEL_23;
      }
    }
    outlined consume of MLDataValue((void *)v69, (void *)v74[1], v70);

LABEL_28:
    v73._uint64_t countAndFlagsBits = (uint64_t)v15;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(0);
    strcpy((char *)&v71, "Current label ");
    HIBYTE(v71) = -18;
    if (v76)
    {
      char v46 = 6;
      id v47 = 0;
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(v72, 0);
      _UntypedColumn.valueAtIndex(index:)(v16, a7);
      outlined consume of Result<_DataTable, Error>(v72, 0);
      id v47 = (void *)0xE000000000000000;
      char v46 = v70;
    }
    v48._uint64_t countAndFlagsBits = MLDataValue.description.getter();
    char v49 = (char)v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(v49);
    outlined consume of MLDataValue(0, v47, v46);
    v50._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v50);
    *(_OWORD *)&v74[1] = v71;
    v50._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v50._object, 0, 0);
    *(_OWORD *)uint64_t v51 = v71;
    *(_OWORD *)(v51 + 16) = 0;
    *(_OWORD *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 48) = 1;
    swift_willThrow(&type metadata for MLCreateError, v50._object, v51, v52, v53, v54);
    char v55 = v76;
    uint64_t v56 = v72;
LABEL_33:
    outlined consume of Result<_DataTable, Error>(v56, v55);
    char v43 = v77;
    uint64_t v44 = v74[0];
  }
  else
  {
    uint64_t v42 = v74[0];
LABEL_23:
    *(void *)&long long v71 = v68;
    swift_bridgeObjectRetain((_BYTE)v15);
    MLGazetteer.init(dictionary:parameters:)(v15, (void **)&v71);
    if (!v8)
    {
      outlined consume of Result<_DataTable, Error>(v72, v76);
      outlined consume of Result<_DataTable, Error>(v42, v77);
      Swift::String v73 = (Swift::String)v69;
      *(_OWORD *)&v74[1] = v70;
      swift_bridgeObjectRelease((_BYTE)v15);
      uint64_t result = v64;
      *(Swift::String *)uint64_t v64 = v73;
      *(_OWORD *)(v64 + 16) = *(_OWORD *)&v74[1];
      return result;
    }
    v73._uint64_t countAndFlagsBits = (uint64_t)v15;
    outlined consume of Result<_DataTable, Error>(v72, v76);
    char v43 = v77;
    uint64_t v44 = v42;
  }
  outlined consume of Result<_DataTable, Error>(v44, v43);
  return swift_bridgeObjectRelease(v73._countAndFlagsBits);
}

uint64_t MLGazetteer.description.getter()
{
  uint64_t v9 = *(void *)(v0 + 24);
  id v1 = (id)v9;
  id v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  uint64_t v9 = String.init<A>(describing:)(&v9, v3);
  uint64_t v10 = v4;
  v5._uint64_t countAndFlagsBits = 10;
  v5._char object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v5._uint64_t countAndFlagsBits = v9;
  id v6 = v10;
  uint64_t v9 = 0x65676175676E614CLL;
  uint64_t v10 = (char *)0xEA0000000000203ALL;
  v5._char object = v6;
  String.append(_:)(v5);

  swift_bridgeObjectRelease((_BYTE)v6);
  v5._uint64_t countAndFlagsBits = v9;
  uint64_t v7 = v10;
  uint64_t v9 = 0xD000000000000016;
  uint64_t v10 = " is not a String." + 0x8000000000000000;
  v5._char object = v7;
  String.append(_:)(v5);
  swift_bridgeObjectRelease((_BYTE)v7);
  return v9;
}

uint64_t MLGazetteer.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLGazetteer.description.getter(a1, a2, a3, a4);
}

uint64_t MLGazetteer.playgroundDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t result = MLGazetteer.description.getter(a1, a2, a3, a4);
  void v5[3] = (uint64_t)&type metadata for String;
  uint64_t *v5 = result;
  v5[1] = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLGazetteer()
{
  return MLGazetteer.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLGazetteer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLGazetteer.debugDescription.getter(a1, a2, a3, a4);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLGazetteer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLGazetteer.playgroundDescription.getter(a1, a2, a3, a4);
}

id @nonobjc NLGazetteer.init(contentsOf:)(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = [v1 initWithContentsOfURL:v2 error:&v12];

  id v5 = v12;
  id v11 = v4;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL(0);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v5;
    v7(a1, v6);
  }
  else
  {
    id v8 = v12;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
    uint64_t v9 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  }
  return v11;
}

uint64_t type metadata accessor for MLModel()
{
  uint64_t result = lazy cache variable for type metadata for MLModel;
  if (!lazy cache variable for type metadata for MLModel)
  {
    uint64_t v1 = objc_opt_self(MLModel);
    uint64_t result = swift_getObjCClassMetadata(v1);
    lazy cache variable for type metadata for MLModel = result;
  }
  return result;
}

id sub_19CAF8()
{
  return key path getter for MLGazetteer.model : MLGazetteer();
}

void sub_19CB02(id *a1)
{
}

void destroy for MLGazetteer(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *initializeWithCopy for MLGazetteer(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  a1[1] = v4;
  id v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  uint64_t v6 = *(void **)(a2 + 24);
  a1[3] = v6;
  v3;
  swift_bridgeObjectRetain(v4);
  v5;
  v6;
  return a1;
}

uint64_t assignWithCopy for MLGazetteer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  v3;

  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void **)(a2 + 16);
  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  v7;

  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v10;
  v10;

  return a1;
}

uint64_t assignWithTake for MLGazetteer(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v3);

  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for MLGazetteer()
{
  return &type metadata for MLGazetteer;
}

BOOL static MLBoundingBoxAnchor.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  return *a1 == *a2;
}

void MLBoundingBoxAnchor.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MLBoundingBoxAnchor.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLBoundingBoxAnchor(unsigned char *a1, unsigned char *a2)
{
  return static MLBoundingBoxAnchor.== infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLBoundingBoxAnchor()
{
  return MLBoundingBoxAnchor.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLBoundingBoxAnchor()
{
}

uint64_t base witness table accessor for Equatable in MLBoundingBoxAnchor()
{
  return lazy protocol witness table accessor for type MLBoundingBoxAnchor and conformance MLBoundingBoxAnchor();
}

uint64_t lazy protocol witness table accessor for type MLBoundingBoxAnchor and conformance MLBoundingBoxAnchor()
{
  uint64_t result = lazy protocol witness table cache variable for type MLBoundingBoxAnchor and conformance MLBoundingBoxAnchor;
  if (!lazy protocol witness table cache variable for type MLBoundingBoxAnchor and conformance MLBoundingBoxAnchor)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLBoundingBoxAnchor, &type metadata for MLBoundingBoxAnchor);
    lazy protocol witness table cache variable for type MLBoundingBoxAnchor and conformance MLBoundingBoxAnchor = result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLBoundingBoxAnchor(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  LODWORD(result) = 0;
  if (a3 >= 0xFE)
  {
    unsigned int v4 = a3 + 2;
    LODWORD(result) = 1;
    if (v4 >= 0xFF00) {
      LODWORD(result) = 2 * (v4 >= 0xFFFF00) + 2;
    }
  }
  if (a2 > 0xFD)
  {
    unsigned int v5 = a2 - 254;
    int v6 = (v5 >> 8) + 1;
    *a1 = v5;
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        return result;
      case 1:
        a1[1] = v6;
        break;
      case 2:
        *(_WORD *)(a1 + 1) = v6;
        break;
      case 3:
LABEL_16:
        BUG();
      case 4:
        *(_DWORD *)(a1 + 1) = v6;
        break;
    }
  }
  else
  {
    uint64_t result = result;
    switch((int)result)
    {
      case 0:
        goto LABEL_11;
      case 1:
        a1[1] = 0;
        goto LABEL_11;
      case 2:
        *(_WORD *)(a1 + 1) = 0;
        goto LABEL_11;
      case 3:
        goto LABEL_16;
      case 4:
        *(_DWORD *)(a1 + 1) = 0;
LABEL_11:
        if (a2) {
          *a1 = a2 + 2;
        }
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLBoundingBoxAnchor()
{
  return &type metadata for MLBoundingBoxAnchor;
}

unint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (_OWORD *)result;
  if (*(void *)(a3 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v6) {
      return outlined init with copy of Any(*(void *)(a3 + 56) + 32 * result, (uint64_t)v4);
    }
  }
  v4[1] = 0;
  *unsigned int v4 = 0;
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

{
  return specialized Dictionary.subscript.getter(a1, a2, a3);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  char v6 = *(void *)(*(void *)(a3 + 56) + 8 * v4);
  swift_bridgeObjectRetain(v6);
  return v6;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  char v6 = *(void *)(a3 + 56);
  uint64_t v7 = 16 * v4;
  id v8 = *(void *)(v6 + v7);
  swift_bridgeObjectRetain(*(void *)(v6 + v7 + 8));
  return v8;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  char v6 = *(void *)(*(void *)(a3 + 56) + 8 * v4);
  swift_unknownObjectRetain(v6);
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  unint64_t v4 = v3;
  if (*(void *)(a3 + 16) && (char v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    id v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for Tensor(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * v8, v10);
    return __swift_storeEnumTagSinglePayload(v4, 0, 1, v10);
  }
  else
  {
    id v12 = type metadata accessor for Tensor(0);
    return __swift_storeEnumTagSinglePayload(v4, 1, 1, v12);
  }
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary.subscript.getter(a1, a2, specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(uint64_t, _OWORD *))outlined init with copy of Any);
}

{
  return specialized Dictionary.subscript.getter(a1, a2, specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(uint64_t, _OWORD *))outlined init with copy of Any);
}

{
  unint64_t v2;
  char v3;

  if (*(void *)(a2 + 16) && (id v2 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v3 & 1) != 0)) {
    return *(void *)(*(void *)(a2 + 56) + 8 * v2);
  }
  else {
    return 0;
  }
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  id v2 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v3 & 1) == 0) {
    return 0;
  }
  unint64_t v4 = *(void *)(*(void *)(a2 + 56) + 8 * v2);
  swift_bridgeObjectRetain(v4);
  return v4;
}

uint64_t specialized Dictionary.subscript.getter(unsigned int a1, uint64_t a2)
{
  return specialized Dictionary.subscript.getter(a1, a2);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  id v2 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v3 & 1) == 0) {
    return 0;
  }
  unint64_t v4 = *(void *)(*(void *)(a2 + 56) + 8 * v2);
  swift_retain();
  return v4;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, unint64_t (*a3)(uint64_t a1), uint64_t (*a4)(uint64_t, _OWORD *))
{
  char v5 = (_OWORD *)result;
  if (*(void *)(a2 + 16))
  {
    uint64_t result = a3(a1);
    if (v7) {
      return a4(*(void *)(a2 + 56) + 32 * result, v5);
    }
  }
  v5[1] = 0;
  _OWORD *v5 = 0;
  return result;
}

unint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)result;
  if (*(void *)(a2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v4) {
      return outlined init with copy of Any(*(void *)(a2 + 56) + 32 * result, (uint64_t)v3);
    }
  }
  v3[1] = 0;
  *uint64_t v3 = 0;
  return result;
}

{
  unint64_t result;
  _OWORD *v3;
  char v4;

  uint64_t v3 = (_OWORD *)result;
  if (*(void *)(a2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v4) {
      return outlined init with copy of Any(*(void *)(a2 + 56) + 32 * result, (uint64_t)v3);
    }
  }
  v3[1] = 0;
  *uint64_t v3 = 0;
  return result;
}

char MLDataTable.Row.subscript.getter(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)(v4 + 8);
  if (!*(void *)(v7 + 16)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain(a2);
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v10 & 1) == 0)
  {
    LOBYTE(v3) = swift_bridgeObjectRelease(a2);
LABEL_5:
    *(_OWORD *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 16) = -1;
    return v3;
  }
  uint64_t v11 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
  swift_bridgeObjectRelease(a2);
  swift_retain_n(v8);
  uint64_t v12 = CMLSequence.value(at:)(v11);
  swift_release();
  MLDataValue.init(_:)(v12, a3);
  swift_release();
  LOBYTE(v3) = v15;
  *(_OWORD *)uint64_t v6 = v14;
  *(unsigned char *)(v6 + 16) = v15;
  return v3;
}

uint64_t MLDataTable.Row.Values.description.getter(double a1)
{
  uint64_t v2 = *v1;
  swift_retain();
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
  swift_retain();
  uint64_t v5 = CMLSequence.size.getter();
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5);
  swift_release();
  if (v6 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v7 = CMLSequence.size.getter();
  uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
  swift_release_n(v2);
  if (v4 < 0 || v8 < v4) {
    BUG();
  }
  uint64_t v30 = v2;
  uint64_t v9 = 10;
  if (v4 < 10) {
    uint64_t v9 = v4;
  }
  if (v9)
  {
    uint64_t v10 = 0;
    for (i = v9; i != v10; uint64_t v9 = i)
    {
      if (v9 == v10) {
        BUG();
      }
      if (v10)
      {
        v11._uint64_t countAndFlagsBits = 8236;
        v11._char object = (void *)0xE200000000000000;
        String.append(_:)(v11);
      }
      swift_retain_n(v30);
      uint64_t v12 = CMLSequence.value(at:)(v10);
      swift_release();
      ++v10;
      MLDataValue.init(_:)(v12, a1);
      swift_release();
      uint64_t v28 = MLDataValue.description.getter();
      long long v14 = v13;
      outlined consume of MLDataValue(v25, v26, v27);
      v15._uint64_t countAndFlagsBits = v28;
      v15._char object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease((_BYTE)v14);
    }
  }
  swift_retain();
  uint64_t v16 = CMLSequence.size.getter();
  uint64_t v17 = specialized RandomAccessCollection<>.distance(from:to:)(0, v16);
  swift_retain();
  uint64_t v18 = CMLSequence.size.getter();
  uint64_t v19 = specialized RandomAccessCollection<>.distance(from:to:)(0, v18);
  swift_release();
  if (v19 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v20 = CMLSequence.size.getter();
  uint64_t v21 = specialized RandomAccessCollection<>.distance(from:to:)(0, v20);
  swift_release_n(v30);
  if (v17 < 0 || v21 < v17) {
    BUG();
  }
  if (v9 < v17)
  {
    v22._uint64_t countAndFlagsBits = 0x2E2E2E202CLL;
    v22._char object = (void *)0xE500000000000000;
    String.append(_:)(v22);
  }
  v23._uint64_t countAndFlagsBits = 93;
  v23._char object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return 91;
}

uint64_t MLDataTable.Row.keys.getter()
{
  uint64_t v2 = *v1;
  *uint64_t v0 = *v1;
  return swift_retain(v2);
}

uint64_t MLDataTable.Row.values.getter()
{
  uint64_t v2 = *(void *)(v1 + 16);
  *uint64_t v0 = v2;
  return swift_retain(v2);
}

Swift::Int_optional __swiftcall MLDataTable.Row.index(forKey:)(Swift::String forKey)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain(forKey._object);
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(forKey._countAndFlagsBits, (uint64_t)forKey._object);
    if (v4)
    {
      Swift::Int v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
      char v6 = 0;
    }
    else
    {
      char v6 = 1;
      Swift::Int v5 = 0;
    }
    swift_bridgeObjectRelease(forKey._object);
  }
  else
  {
    char v6 = 1;
    Swift::Int v5 = 0;
  }
  v7.Swift::Int value = v5;
  v7.Swift::Bool is_nil = v6;
  return v7;
}

char MLDataTable.Row.Values.subscript.getter(uint64_t a1, double a2)
{
  swift_retain();
  uint64_t v2 = CMLSequence.value(at:)(a1);
  swift_release();
  return MLDataValue.init(_:)(v2, a2);
}

uint64_t MLDataTable.Row.subscript.getter(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v7[1];
  if (*(void *)(v8 + 16))
  {
    uint64_t v18 = a6;
    uint64_t v21 = v6;
    uint64_t v20 = a5;
    uint64_t v9 = *v7;
    uint64_t v10 = v7[2];
    swift_retain();
    swift_bridgeObjectRetain(v8);
    uint64_t v22 = v10;
    swift_retain();
    swift_bridgeObjectRetain(a2);
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v12)
    {
      uint64_t v19 = v9;
      uint64_t v13 = *(void *)(*(void *)(v8 + 56) + 8 * v11);
      swift_bridgeObjectRelease(a2);
      uint64_t v14 = v22;
      swift_retain_n(v22);
      uint64_t v15 = CMLSequence.value(at:)(v13);
      swift_release();
      MLDataValue.init(_:)(v15, a3);
      swift_bridgeObjectRelease(v8);
      swift_release();
      swift_release_n(v14);
      return (*(uint64_t (**)(unsigned char *))(v18 + 16))(v17);
    }
    swift_release();
    swift_bridgeObjectRelease(v8);
    swift_release();
    swift_bridgeObjectRelease(a2);
    a5 = v20;
    uint64_t v6 = v21;
  }
  return __swift_storeEnumTagSinglePayload(v6, 1, 1, a5);
}

uint64_t static MLDataTable.Row.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  char v5 = specialized Sequence<>.elementsEqual<A>(_:)();
  swift_release();
  swift_release();
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = v3;
  v8[0] = v4;
  return static MLDataTable.Row.Values.== infix(_:_:)(&v7, v8, a3);
}

uint64_t static MLDataTable.Row.Values.== infix(_:_:)(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_retain();
  uint64_t v8 = CMLSequence.size.getter();
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
  swift_release();
  if (v9 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v10 = CMLSequence.size.getter();
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, v10);
  swift_release_n(v4);
  if (v7 < 0 || v11 < v7) {
    BUG();
  }
  uint64_t v43 = v4;
  swift_retain();
  uint64_t v12 = v5;
  uint64_t v13 = CMLSequence.size.getter();
  uint64_t v14 = specialized RandomAccessCollection<>.distance(from:to:)(0, v13);
  swift_retain();
  uint64_t v15 = CMLSequence.size.getter();
  uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
  swift_release();
  if (v16 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v17 = CMLSequence.size.getter();
  uint64_t v18 = specialized RandomAccessCollection<>.distance(from:to:)(0, v17);
  uint64_t v37 = v12;
  swift_release_n(v12);
  if (v14 < 0 || v18 < v14) {
    BUG();
  }
  if (v7 == v14)
  {
    swift_retain();
    uint64_t v19 = CMLSequence.size.getter();
    if (specialized RandomAccessCollection<>.distance(from:to:)(0, v19))
    {
      uint64_t v42 = 0;
      uint64_t v20 = 0;
      do
      {
        swift_retain();
        uint64_t v21 = v42;
        uint64_t v22 = CMLSequence.value(at:)(v20);
        swift_release();
        if (v21)
        {
          swift_unexpectedError(v21, "CreateML/MLDataTable.Row.swift", 30, 1);
          BUG();
        }
        MLDataValue.init(_:)(v22, a3);
        Swift::String v23 = v39;
        uint64_t v38 = v40;
        char v44 = v41;
        swift_retain();
        uint64_t v24 = CMLSequence.size.getter();
        uint64_t v25 = specialized RandomAccessCollection<>.distance(from:to:)(0, v24);
        swift_release();
        if (v20 >= v25) {
          BUG();
        }
        uint64_t v36 = v23;
        uint64_t v39 = v23;
        uint64_t v40 = v38;
        char v41 = v44;
        swift_retain_n(v37);
        uint64_t v26 = CMLSequence.value(at:)(v20);
        swift_release();
        uint64_t v42 = 0;
        MLDataValue.init(_:)(v26, a3);
        swift_release();
        v34[0] = v31;
        v34[1] = v32;
        char v35 = v33;
        LOBYTE(v27) = static MLDataValue.== infix(_:_:)((uint64_t)&v39, (uint64_t)v34);
        unsigned int v3 = v27;
        outlined consume of MLDataValue(v31, v32, v33);
        outlined consume of MLDataValue(v36, v38, v44);
        if ((v3 & 1) == 0) {
          break;
        }
        ++v20;
        swift_retain();
        uint64_t v28 = CMLSequence.size.getter();
        uint64_t v29 = specialized RandomAccessCollection<>.distance(from:to:)(0, v28);
        swift_release();
      }
      while (v20 != v29);
    }
    else
    {
      LOBYTE(v3) = 1;
    }
    swift_release();
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLDataTable.Row(uint64_t a1, uint64_t a2, double a3)
{
  return static MLDataTable.Row.== infix(_:_:)(a1, a2, a3);
}

uint64_t MLDataTable.Row.count.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  swift_retain();
  uint64_t v4 = CMLSequence.size.getter();
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4);
  swift_release();
  if (v5 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v6 = CMLSequence.size.getter();
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
  swift_release_n(v1);
  if (v3 < 0 || v7 < v3) {
    BUG();
  }
  return v3;
}

BOOL MLDataTable.Row.isEmpty.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain(v1);
  swift_retain_n(v2);
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
  swift_retain();
  uint64_t v5 = CMLSequence.size.getter();
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5);
  swift_release();
  if (v6 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v7 = CMLSequence.size.getter();
  uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
  swift_bridgeObjectRelease(v1);
  swift_release();
  swift_release_n(v2);
  if (v4 < 0 || v8 < v4) {
    BUG();
  }
  return v4 == 0;
}

uint64_t MLDataTable.Row.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.Row.endIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain(v1);
  swift_retain_n(v2);
  uint64_t v3 = CMLSequence.size.getter();
  uint64_t v4 = specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
  swift_retain();
  uint64_t v5 = CMLSequence.size.getter();
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v5);
  swift_release();
  if (v6 < 0) {
    BUG();
  }
  swift_retain();
  uint64_t v7 = CMLSequence.size.getter();
  uint64_t v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
  swift_bridgeObjectRelease(v1);
  swift_release();
  swift_release_n(v2);
  if (v4 < 0 || v8 < v4) {
    BUG();
  }
  return v4;
}

Swift::Int __swiftcall MLDataTable.Row.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(1, after);
  Swift::Int v2 = after + 1;
  if (v1) {
    BUG();
  }
  return v2;
}

uint64_t MLDataTable.Row.subscript.getter(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MLDataTable.ColumnNames.subscript.getter(a3);
  swift_retain();
  uint64_t v4 = CMLSequence.value(at:)(a3);
  MLDataValue.init(_:)(v4, a1);
  swift_release();
  return v3;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataTable.Row(uint64_t a1)
{
  Swift::Int v2 = v1;
  uint64_t result = MLDataTable.Row.endIndex.getter(a1);
  *Swift::Int v2 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance MLDataTable.Row(void *a1, uint64_t *a2, double a3))(uint64_t a1)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  uint64_t v4 = MLDataTable.Row.subscript.getter(a3, (uint64_t)(v3 + 2), *a2);
  void v3[10] = v5;
  *uint64_t v3 = v4;
  v3[1] = v5;
  void v3[5] = v4;
  void v3[6] = v5;
  uint64_t v6 = (void *)v3[2];
  uint64_t v7 = (void *)v3[3];
  v3[11] = v6;
  v3[12] = v7;
  int v8 = *((_DWORD *)v3 + 8);
  *((unsigned char *)v3 + 33) = v8;
  void v3[7] = v6;
  v3[8] = v7;
  *((unsigned char *)v3 + 72) = v8;
  swift_bridgeObjectRetain(v5);
  outlined copy of MLDataValue(v6, v7, v8);
  return protocol witness for Collection.subscript.read in conformance MLDataTable.Row;
}

void protocol witness for Collection.subscript.read in conformance MLDataTable.Row(uint64_t a1)
{
  BOOL v1 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 96);
  uint64_t v7 = *(void **)(*(void *)a1 + 88);
  uint64_t v2 = *(void *)(*(void *)a1 + 80);
  uint64_t v3 = *(void **)(*(void *)a1 + 56);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  int v5 = *(_DWORD *)(*(void *)a1 + 72);
  char v8 = *(unsigned char *)(*(void *)a1 + 33);
  swift_bridgeObjectRelease(*(void *)(*(void *)a1 + 48));
  outlined consume of MLDataValue(v3, v4, v5);
  swift_bridgeObjectRelease(v2);
  outlined consume of MLDataValue(v7, v6, v8);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.Row(uint64_t *a1)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v1, v1[1], v1[2]);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.Row()
{
  return specialized Collection<>.indices.getter(*v0, v0[1], v0[2]);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance MLDataTable.Row()
{
  return MLDataTable.Row.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.Row()
{
  return MLDataTable.Row.count.getter();
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t result = specialized Collection.index(_:offsetBy:)(*a1, a2);
  *uint64_t v3 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)uint64_t v4 = result;
  *(unsigned char *)(v4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, *a2, a2[1], *v5, v5[1], v5[2]);
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
}

Swift::Int protocol witness for Collection.index(after:) in conformance MLDataTable.Row(Swift::Int *a1)
{
  uint64_t v2 = v1;
  Swift::Int result = MLDataTable.Row.index(after:)(*a1);
  *uint64_t v2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Row(uint64_t *a1)
{
  uint64_t result = *a1 + 1;
  if (__OFADD__(1, *a1)) {
    BUG();
  }
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance MLDataTable.Row()
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)v1;
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.Row()
{
  return specialized Collection.underestimatedCount.getter(*v0, v0[1], v0[2]);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Row()
{
  return specialized Collection._copyToContiguousArray()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Row(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t MLDataTable.Row.description.getter(double a1)
{
  uint64_t v25 = v1[2];
  swift_retain_n(*v1);
  uint64_t v2 = CMLSequence.size.getter();
  uint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  swift_release();
  if (v3)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = MLDataTable.ColumnNames.subscript.getter(v4);
      uint64_t v7 = v6;
      swift_retain();
      uint64_t v8 = CMLSequence.size.getter();
      uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
      swift_release();
      if (v4 >= v9) {
        BUG();
      }
      v10._uint64_t countAndFlagsBits = v5;
      v10._char object = v7;
      String.append(_:)(v10);
      swift_bridgeObjectRelease((_BYTE)v7);
      swift_bridgeObjectRetain(0);
      v10._uint64_t countAndFlagsBits = 540680226;
      v10._char object = (void *)0xE400000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(0);
      swift_retain_n(v25);
      uint64_t v24 = v4;
      uint64_t v11 = CMLSequence.value(at:)(v4);
      swift_release();
      MLDataValue.init(_:)(v11, a1);
      swift_release();
      uint64_t v12 = MLDataValue.description.getter();
      uint64_t v14 = v13;
      outlined consume of MLDataValue((char *)&stru_20.cmd + 2, (void *)0xE100000000000000, v26);
      swift_bridgeObjectRetain(0);
      v10._uint64_t countAndFlagsBits = v12;
      v10._char object = v14;
      String.append(_:)(v10);
      swift_bridgeObjectRelease((_BYTE)v14);
      swift_bridgeObjectRelease(0);
      v10._uint64_t countAndFlagsBits = 34;
      v10._char object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(0);
      swift_retain();
      uint64_t v15 = CMLSequence.size.getter();
      uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
      swift_release();
      BOOL v17 = __OFSUB__(v16, 1);
      uint64_t v18 = v16 - 1;
      if (v17) {
        BUG();
      }
      if (v24 < v18)
      {
        v19._uint64_t countAndFlagsBits = 8236;
        v19._char object = (void *)0xE200000000000000;
        String.append(_:)(v19);
      }
      uint64_t v4 = v24 + 1;
      swift_retain();
      uint64_t v20 = CMLSequence.size.getter();
      uint64_t v21 = specialized RandomAccessCollection<>.distance(from:to:)(0, v20);
      swift_release();
    }
    while (v24 + 1 != v21);
  }
  swift_release();
  v22._uint64_t countAndFlagsBits = 93;
  v22._char object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 91;
}

uint64_t MLDataTable.Row.debugDescription.getter()
{
  return MLDataTable.Row.description.getter(*v0);
}

uint64_t MLDataTable.Row.playgroundDescription.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = MLDataTable.Row.description.getter(*v1);
  char v5 = v4;
  objc_allocWithZone((Class)NSAttributedString);
  id v6 = @nonobjc NSAttributedString.init(string:attributes:)(v3, v5, 0);
  uint64_t result = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v2[3] = result;
  *uint64_t v2 = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataTable.Row(double a1)
{
  return MLDataTable.Row.description.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataTable.Row()
{
  return MLDataTable.Row.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLDataTable.Row()
{
  return MLDataTable.Row.playgroundDescription.getter();
}

uint64_t MLDataTable.Row.Values.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.Row.Values.endIndex.getter()
{
  swift_retain();
  uint64_t v0 = CMLSequence.size.getter();
  uint64_t v1 = specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance MLDataTable.Row.Values()
{
  uint64_t v1 = v0;
  uint64_t result = MLDataTable.Row.Values.endIndex.getter();
  *uint64_t v1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance MLDataTable.Row.Values(double a1, uint64_t a2, uint64_t *a3))(uint64_t a1)
{
  uint64_t v3 = *a3;
  swift_retain();
  uint64_t v4 = CMLSequence.value(at:)(v3);
  swift_release();
  MLDataValue.init(_:)(v4, a1);
  return protocol witness for Collection.subscript.read in conformance MLDataValue.SequenceType;
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row.Values(uint64_t *a1, uint64_t *a2)
{
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Row.Values(double a1)
{
  return specialized Collection._copyToContiguousArray()(*v1, a1);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Row.Values(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v4, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLDataTable.Row.Values(uint64_t *a1, uint64_t *a2, double a3)
{
  return static MLDataTable.Row.Values.== infix(_:_:)(a1, a2, a3);
}

uint64_t MLDataTable.Row.Values.debugDescription.getter(double a1)
{
  return MLDataTable.Row.Values.description.getter(a1);
}

uint64_t MLDataTable.Row.Values.playgroundDescription.getter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = MLDataTable.Row.Values.description.getter(a1);
  char v5 = v4;
  objc_allocWithZone((Class)NSAttributedString);
  id v6 = @nonobjc NSAttributedString.init(string:attributes:)(v3, v5, 0);
  uint64_t result = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v2[3] = result;
  *uint64_t v2 = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLDataTable.Row.Values(double a1)
{
  return MLDataTable.Row.Values.description.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLDataTable.Row.Values(double a1)
{
  return MLDataTable.Row.Values.debugDescription.getter(a1);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLDataTable.Row.Values(double a1)
{
  return MLDataTable.Row.Values.playgroundDescription.getter(a1);
}

uint64_t base witness table accessor for Sequence in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type MLDataTable.Row and conformance MLDataTable.Row();
}

uint64_t lazy protocol witness table accessor for type MLDataTable.Row and conformance MLDataTable.Row()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Row, &type metadata for MLDataTable.Row);
    lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type DefaultIndices<MLDataTable.Row> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MLDataTable.Row>, (uint64_t)&protocol conformance descriptor for DefaultIndices<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Row> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.Row>, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Row()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Row> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.Row>, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t base witness table accessor for BidirectionalCollection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values();
}

uint64_t lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values()
{
  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values = result;
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values = result;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t base witness table accessor for Collection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>(uint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.Row.Values>);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

uint64_t base witness table accessor for Sequence in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.Row.Values>, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Row.Values()
{
  return lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Row.Values> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.Row.Values>, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for MLDataTable.Row(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v3 = *a2;
  *a1 = *a2;
  char v4 = a2[1];
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t destroy for MLDataTable.Row(void *a1)
{
  return swift_release(a1[2]);
}

uint64_t *assignWithCopy for MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

void *assignWithTake for MLDataTable.Row(void *a1, uint64_t a2)
{
  swift_release(*a1);
  uint64_t v3 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MLDataTable.Row()
{
  return &type metadata for MLDataTable.Row;
}

ValueMetadata *type metadata accessor for MLDataTable.Row.Values()
{
  return &type metadata for MLDataTable.Row.Values;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(long long a1, int a2)
{
  uint64_t v11 = v2;
  uint64_t v4 = a1;
  *(void *)&a1 = *(void *)(v2 + 40);
  uint64_t v8 = v4;
  uint64_t v9 = *((void *)&a1 + 1);
  char v10 = a2;
  Hasher.init(_seed:)(a1);
  MLDataValue.hash(into:)((uint64_t)v7);
  Swift::Int v5 = Hasher._finalize()();
  *(void *)&a1 = v4;
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = type metadata accessor for MetricsKey(0);
  uint64_t v4 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsKey, (uint64_t)&protocol conformance descriptor for MetricsKey);
  unint64_t v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v2, v3, v4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsKey, &lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (uint64_t)&protocol conformance descriptor for MetricsKey);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)(v2, v3, &protocol witness table for CodingUserInfoKey);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  unint64_t v2;

  uint64_t v2 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = type metadata accessor for URL(0);
  uint64_t v4 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  unint64_t v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v2, v3, v4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t)&protocol conformance descriptor for URL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  Swift::Int v6;
  unsigned char v8[72];
  uint64_t v9;

  uint64_t v9 = v1;
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v5 = v4;
  Hasher.init(_seed:)(v2);
  String.hash(into:)(v8, v3);
  uint64_t v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6);
}

{
  uint64_t v1;
  Swift::Int v2;

  uint64_t v2 = AnyHashable._rawHashValue(seed:)(*(void *)(v1 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)(*(void *)(v1 + 40));
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  unint64_t v2 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t a2, char a3)
{
  char v4 = a3 & 1;
  Hasher.init(_seed:)(*(void *)(v3 + 40));
  if (v4)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)(v7, a1);
  }
  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(long long a1, int a2, uint64_t a3)
{
  int v4 = a2;
  unint64_t result = ~(-1 << *(unsigned char *)(v3 + 32)) & a3;
  uint64_t v6 = *(void *)(v3 + 8 * (result >> 6) + 64);
  if (_bittest64(&v6, result))
  {
    uint64_t v7 = (void *)a1;
    uint64_t v39 = ~(-1 << *(unsigned char *)(v3 + 32));
    uint64_t v38 = (void *)*((void *)&a1 + 1);
    BOOL v42 = (_BYTE)a2 == 6 && a1 == 0;
    double v34 = *(double *)&a1;
    uint64_t v8 = *(void *)(v3 + 48);
    unint64_t v43 = result;
    uint64_t v9 = *(void **)(v8 + 24 * result);
    uint64_t v40 = *(void **)(v8 + 24 * result + 8);
    char v10 = *(unsigned char *)(v8 + 24 * result + 16);
    char v35 = v7;
    uint64_t v37 = v3;
    int v36 = v4;
    switch(v10)
    {
      case 0:
LABEL_11:
        uint64_t v14 = v9;
        if ((_BYTE)v4) {
          goto LABEL_36;
        }
        outlined consume of MLDataValue(v9, v40, 0);
        outlined consume of MLDataValue(v7, v38, 0);
        if (v9 != v7) {
          goto LABEL_37;
        }
        return v43;
      case 1:
LABEL_7:
        if ((_BYTE)v4 != 1)
        {
          uint64_t v14 = v9;
          goto LABEL_36;
        }
        double v41 = *(double *)&v9;
        outlined consume of MLDataValue(v9, v40, 1);
        outlined consume of MLDataValue(v7, v38, 1);
        if (v41 != v34) {
          goto LABEL_14;
        }
        return v43;
      case 2:
LABEL_26:
        char v26 = v40;
        if ((_BYTE)v4 != 2)
        {
          uint64_t v14 = v9;
          outlined copy of MLDataValue(v9, v40, 2u);
          swift_bridgeObjectRetain(v26);
          goto LABEL_36;
        }
        BOOL v17 = v38;
        if (v9 == v7 && v40 == v38)
        {
          outlined copy of MLDataValue(v7, v38, 2u);
          outlined copy of MLDataValue(v7, v17, 2u);
          outlined consume of MLDataValue(v7, v17, 2);
          uint64_t v11 = v7;
          uint64_t v12 = v17;
          char v13 = 2;
LABEL_5:
          outlined consume of MLDataValue(v11, v12, v13);
        }
        else
        {
          LOBYTE(v41) = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v40, v7, v38, 0);
          outlined copy of MLDataValue(v7, v17, 2u);
          outlined copy of MLDataValue(v9, v26, 2u);
          outlined consume of MLDataValue(v9, v26, 2);
          outlined consume of MLDataValue(v7, v17, 2);
          if ((LOBYTE(v41) & 1) == 0) {
            goto LABEL_37;
          }
        }
        return v43;
      case 3:
LABEL_28:
        if ((_BYTE)v4 == 3)
        {
          Swift::Int v32 = v9;
          char v33 = v7;
          char v18 = 3;
          Swift::String v19 = v9;
          uint64_t v20 = v40;
          outlined copy of MLDataValue(v9, v40, 3u);
          uint64_t v21 = v38;
          outlined copy of MLDataValue(v7, v38, 3u);
          outlined copy of MLDataValue(v9, v20, 3u);
          outlined copy of MLDataValue(v7, v21, 3u);
          outlined copy of MLDataValue(v9, v20, 3u);
          char v22 = static MLDataValue.SequenceType.== infix(_:_:)(&v32, (uint64_t *)&v33);
          goto LABEL_21;
        }
        uint64_t v14 = v9;
        swift_retain_n(v9, 2);
        goto LABEL_36;
      case 4:
LABEL_30:
        if ((_BYTE)v4 != 4)
        {
          uint64_t v14 = v9;
          swift_bridgeObjectRetain_n(v9, 2);
          goto LABEL_36;
        }
        char v18 = 4;
        Swift::String v19 = v9;
        uint64_t v20 = v40;
        outlined copy of MLDataValue(v9, v40, 4u);
        uint64_t v21 = v38;
        outlined copy of MLDataValue(v7, v38, 4u);
        outlined copy of MLDataValue(v9, v20, 4u);
        outlined copy of MLDataValue(v7, v21, 4u);
        outlined copy of MLDataValue(v9, v20, 4u);
        char v22 = specialized static Dictionary<>.== infix(_:_:)((uint64_t)v9, (uint64_t)v7);
LABEL_21:
        LOBYTE(v41) = v22;
        uint64_t v9 = v19;
        Swift::String v23 = v20;
        goto LABEL_22;
      case 5:
        while (2)
        {
          if ((_BYTE)v4 == 5)
          {
            Swift::String v19 = v9;
            double v41 = COERCE_DOUBLE(type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject, NSObject_ptr));
            uint64_t v20 = v40;
            outlined copy of MLDataValue(v9, v40, 5u);
            uint64_t v21 = v38;
            outlined copy of MLDataValue(v7, v38, 5u);
            outlined copy of MLDataValue(v9, v20, 5u);
            outlined copy of MLDataValue(v7, v21, 5u);
            outlined copy of MLDataValue(v9, v20, 5u);
            LOBYTE(v41) = static NSObject.== infix(_:_:)(v9, v7);
            Swift::String v23 = v20;
            char v18 = 5;
LABEL_22:
            outlined consume of MLDataValue(v9, v23, v18);
            outlined consume of MLDataValue(v7, v21, v18);
            outlined consume of MLDataValue(v7, v21, v18);
            outlined consume of MLDataValue(v19, v20, v18);
            outlined consume of MLDataValue(v19, v20, v18);
            if (LOBYTE(v41)) {
              return v43;
            }
            uint64_t v15 = v39;
            unint64_t v16 = v43;
            uint64_t v3 = v37;
          }
          else
          {
            uint64_t v14 = v9;
            id v27 = v9;
            v27;
            LOBYTE(v4) = v36;
LABEL_36:
            char v28 = v4;
            uint64_t v29 = v7;
            uint64_t v30 = v38;
            outlined copy of MLDataValue(v29, v38, v4);
            BOOL v31 = v40;
            outlined consume of MLDataValue(v14, v40, v10);
            outlined consume of MLDataValue(v35, v30, v28);
            outlined consume of MLDataValue(v14, v31, v10);
LABEL_37:
            uint64_t v3 = v37;
LABEL_14:
            uint64_t v15 = v39;
            unint64_t v16 = v43;
          }
          unint64_t result = v15 & (v16 + 1);
          uint64_t v24 = *(void *)(v3 + 8 * (result >> 6) + 64);
          if (_bittest64(&v24, result))
          {
            uint64_t v25 = *(void *)(v3 + 48);
            unint64_t v43 = result;
            uint64_t v9 = *(void **)(v25 + 24 * result);
            uint64_t v40 = *(void **)(v25 + 24 * result + 8);
            char v10 = *(unsigned char *)(v25 + 24 * result + 16);
            uint64_t v7 = v35;
            LOBYTE(v4) = v36;
            switch(v10)
            {
              case 0:
                goto LABEL_11;
              case 1:
                goto LABEL_7;
              case 2:
                goto LABEL_26;
              case 3:
                goto LABEL_28;
              case 4:
                goto LABEL_30;
              case 5:
                continue;
              case 6:
                goto LABEL_35;
            }
          }
          break;
        }
        break;
      case 6:
LABEL_35:
        uint64_t v14 = v9;
        if (!v42) {
          goto LABEL_36;
        }
        outlined consume of MLDataValue(v9, v40, 6);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        char v13 = 6;
        goto LABEL_5;
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, unint64_t a2)
{
  uint64_t v13 = ~(-1 << *(unsigned char *)(v2 + 32));
  unint64_t result = v13 & a2;
  uint64_t v4 = *(void *)(v2 + 8 * ((v13 & a2) >> 6) + 64);
  if (!_bittest64(&v4, v13 & a2)) {
    return result;
  }
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v15 = v13 & a2;
  uint64_t v6 = a1;
  unint64_t v7 = 1936945004;
  uint64_t v8 = (char *)0xE400000000000000;
  uint64_t v14 = v6;
  switch(*(unsigned char *)(v5 + result))
  {
    case 0:
      break;
    case 1:
LABEL_4:
      unint64_t v9 = 1936945004;
      uint64_t v8 = (char *)0xEB0000000073736FLL;
      unint64_t v7 = 0x4C746E65746E6F63;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 2:
LABEL_5:
      unint64_t v9 = 1936945004;
      uint64_t v8 = (char *)0xE900000000000073;
      unint64_t v7 = 0x736F4C656C797473;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 3:
LABEL_6:
      unint64_t v9 = 1936945004;
      uint64_t v8 = (char *)0xE800000000000000;
      unint64_t v7 = 0x7963617275636361;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 4:
LABEL_7:
      unint64_t v9 = 1936945004;
      uint64_t v8 = (char *)0xEE0073736F4C6E6FLL;
      unint64_t v7 = 0x69746164696C6176;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 5:
LABEL_8:
      uint64_t v8 = "accuracy" + 0x8000000000000000;
      unint64_t v7 = 0xD000000000000012;
      unint64_t v9 = 1936945004;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 6:
LABEL_9:
      uint64_t v8 = "validationAccuracy" + 0x8000000000000000;
      unint64_t v9 = 1936945004;
      unint64_t v7 = 0xD000000000000010;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 7:
LABEL_10:
      uint64_t v8 = "stylizedImageURL" + 0x8000000000000000;
      unint64_t v7 = 0xD000000000000014;
      unint64_t v9 = 1936945004;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 8:
LABEL_11:
      unint64_t v9 = 1936945004;
      uint64_t v8 = (char *)0xEC000000726F7272;
      unint64_t v7 = 0x456D756D6978616DLL;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 9:
LABEL_12:
      uint64_t v8 = "rror" + 0x8000000000000000;
      unint64_t v7 = 0xD00000000000001ELL;
      unint64_t v9 = 1936945004;
      char v10 = (char *)0xE400000000000000;
      switch(v6)
      {
        case 0:
          goto LABEL_25;
        case 1:
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_17;
        case 4:
          goto LABEL_18;
        case 5:
          goto LABEL_19;
        case 6:
          goto LABEL_20;
        case 7:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        case 10:
          goto LABEL_24;
      }
    case 0xA:
LABEL_13:
      uint64_t v8 = "validationRootMeanSquaredError" + 0x8000000000000000;
      unint64_t v7 = 0xD000000000000016;
      break;
  }
  while (2)
  {
    unint64_t v9 = 1936945004;
    char v10 = (char *)0xE400000000000000;
    switch(v6)
    {
      case 0:
        break;
      case 1:
LABEL_15:
        unint64_t v9 = 0x4C746E65746E6F63;
        char v10 = (char *)0xEB0000000073736FLL;
        break;
      case 2:
LABEL_16:
        unint64_t v9 = 0x736F4C656C797473;
        char v10 = (char *)0xE900000000000073;
        break;
      case 3:
LABEL_17:
        unint64_t v9 = 0x7963617275636361;
        char v10 = (char *)0xE800000000000000;
        break;
      case 4:
LABEL_18:
        unint64_t v9 = 0x69746164696C6176;
        char v10 = (char *)0xEE0073736F4C6E6FLL;
        break;
      case 5:
LABEL_19:
        char v10 = "accuracy" + 0x8000000000000000;
        unint64_t v9 = 0xD000000000000012;
        break;
      case 6:
LABEL_20:
        char v10 = "validationAccuracy" + 0x8000000000000000;
        unint64_t v9 = 0xD000000000000010;
        break;
      case 7:
LABEL_21:
        char v10 = "stylizedImageURL" + 0x8000000000000000;
        unint64_t v9 = 0xD000000000000014;
        break;
      case 8:
LABEL_22:
        JUMPOUT(0x19F7EALL);
      case 9:
LABEL_23:
        char v10 = "rror" + 0x8000000000000000;
        unint64_t v9 = 0xD00000000000001ELL;
        break;
      case 10:
LABEL_24:
        char v10 = "validationRootMeanSquaredError" + 0x8000000000000000;
        unint64_t v9 = 0xD000000000000016;
        break;
    }
LABEL_25:
    if (v7 == v9 && v8 == v10)
    {
      swift_bridgeObjectRelease_n(v8, 2, v9, v5, 0xD000000000000010);
      return v15;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 0);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    if (v11) {
      return v15;
    }
    unint64_t result = v13 & (v15 + 1);
    uint64_t v12 = *(void *)(v2 + 8 * (result >> 6) + 64);
    if (_bittest64(&v12, result))
    {
      uint64_t v5 = *(void *)(v2 + 48);
      uint64_t v15 = v13 & (v15 + 1);
      unint64_t v7 = 1936945004;
      uint64_t v8 = (char *)0xE400000000000000;
      uint64_t v6 = v14;
      switch(*(unsigned char *)(v5 + result))
      {
        case 0:
          continue;
        case 1:
          goto LABEL_4;
        case 2:
          goto LABEL_5;
        case 3:
          goto LABEL_6;
        case 4:
          goto LABEL_7;
        case 5:
          goto LABEL_8;
        case 6:
          goto LABEL_9;
        case 7:
          goto LABEL_10;
        case 8:
          goto LABEL_11;
        case 9:
          goto LABEL_12;
        case 0xA:
          goto LABEL_13;
      }
    }
    return result;
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, unint64_t a2)
{
  uint64_t v3 = ~(-1 << *(unsigned char *)(v2 + 32));
  unint64_t result = v3 & a2;
  uint64_t v5 = *(void *)(v2 + 8 * ((v3 & a2) >> 6) + 64);
  if (_bittest64(&v5, v3 & a2))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v6 + 4 * result) != a1)
    {
      unint64_t result = v3 & (result + 1);
      uint64_t v7 = *(void *)(v2 + 8 * (result >> 6) + 64);
      if (_bittest64(&v7, result))
      {
        do
        {
          if (*(_DWORD *)(v6 + 4 * result) == a1) {
            break;
          }
          unint64_t result = v3 & (result + 1);
          uint64_t v8 = *(void *)(v2 + 8 * (result >> 6) + 64);
        }
        while (_bittest64(&v8, result));
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v14 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey(0);
  uint64_t v5 = *(void **)(v4 - 8);
  int64_t v6 = v5[8];
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v15 = ~(-1 << *(unsigned char *)(v3 + 32));
  unint64_t v9 = v15 & a2;
  uint64_t v10 = *(void *)(v3 + 8 * ((v15 & a2) >> 6) + 64);
  if (_bittest64(&v10, v15 & a2))
  {
    BOOL v17 = (void (*)(uint64_t *, unint64_t, uint64_t))v5[2];
    unint64_t v16 = v5;
    uint64_t v18 = v5[9];
    do
    {
      v17(&v14, *(void *)(v3 + 48) + v9 * v18, v4);
      char v11 = dispatch thunk of static Equatable.== infix(_:_:)(&v14, v14, v4, &protocol witness table for CodingUserInfoKey);
      ((void (*)(uint64_t *, uint64_t))v16[1])(&v14, v4);
      if (v11) {
        break;
      }
      unint64_t v9 = v15 & (v9 + 1);
      uint64_t v12 = *(void *)(v3 + 8 * (v9 >> 6) + 64);
    }
    while (_bittest64(&v12, v9));
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = ~(-1 << *(unsigned char *)(v2 + 32));
  unint64_t result = v3 & a2;
  uint64_t v5 = *(void *)(v2 + 8 * ((v3 & a2) >> 6) + 64);
  if (_bittest64(&v5, v3 & a2))
  {
    int64_t v6 = *(void *)(v2 + 48);
    if (*(void *)(v6 + 8 * result) != a1)
    {
      unint64_t result = v3 & (result + 1);
      uint64_t v7 = *(void *)(v2 + 8 * (result >> 6) + 64);
      if (_bittest64(&v7, result))
      {
        do
        {
          if (*(void *)(v6 + 8 * result) == a1) {
            break;
          }
          unint64_t result = v3 & (result + 1);
          uint64_t v8 = *(void *)(v2 + 8 * (result >> 6) + 64);
        }
        while (_bittest64(&v8, result));
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;

  Swift::String v23 = ~(-1 << *(unsigned char *)(v2 + 32));
  uint64_t v3 = v23 & a2;
  uint64_t v4 = *(void *)(v2 + 8 * ((v23 & a2) >> 6) + 64);
  if (_bittest64(&v4, v23 & a2))
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v3));
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v12 = v9;
    if (v5 == v8 && v7 == v9)
    {
LABEL_4:
      swift_bridgeObjectRelease_n(v7, 2, v9, v10, v11);
      return v3;
    }
    uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
    {
      uint64_t v3 = v23 & (v3 + 1);
      uint64_t v14 = v2;
      uint64_t v15 = *(void *)(v2 + 8 * (v3 >> 6) + 64);
      if (_bittest64(&v15, v3))
      {
        while (1)
        {
          unint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v14 + 48) + 8 * v3));
          uint64_t v7 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          Swift::String v19 = v9;
          if (v16 == v18 && v7 == v9) {
            break;
          }
          uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v9, 0);
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v19);
          if ((v20 & 1) == 0)
          {
            uint64_t v3 = v23 & (v3 + 1);
            uint64_t v14 = v2;
            uint64_t v21 = *(void *)(v2 + 8 * (v3 >> 6) + 64);
            if (_bittest64(&v21, v3)) {
              continue;
            }
          }
          return v3;
        }
        goto LABEL_4;
      }
    }
  }
  return v3;
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned char v10[40];
  uint64_t v11;

  uint64_t v3 = *(unsigned char *)(v2 + 32);
  char v11 = a1;
  uint64_t v4 = ~(-1 << v3);
  uint64_t v5 = v4 & a2;
  int64_t v6 = *(void *)(v2 + 8 * ((v4 & a2) >> 6) + 64);
  if (_bittest64(&v6, v4 & a2))
  {
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v5, (uint64_t)v10);
      uint64_t v7 = static AnyHashable.== infix(_:_:)(v10, v11);
      outlined destroy of AnyHashable((uint64_t)v10);
      if (v7) {
        break;
      }
      uint64_t v5 = v4 & (v5 + 1);
      uint64_t v8 = *(void *)(v2 + 8 * (v5 >> 6) + 64);
    }
    while (_bittest64(&v8, v5));
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, uint64_t a5)
{
  uint64_t v19 = a5;
  uint64_t v20 = a4;
  uint64_t v6 = v5;
  uint64_t v22 = a1;
  uint64_t v21 = a3;
  uint64_t v7 = a3(0);
  uint64_t v8 = *(void **)(v7 - 8);
  int64_t v9 = v8[8];
  uint64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  uint64_t v23 = ~(-1 << *(unsigned char *)(v6 + 32));
  unint64_t v12 = v23 & a2;
  uint64_t v13 = *(void *)(v6 + 8 * ((v23 & a2) >> 6) + 64);
  if (_bittest64(&v13, v23 & a2))
  {
    uint64_t v25 = (void (*)(uint64_t *, unint64_t, uint64_t))v8[2];
    uint64_t v24 = v8;
    uint64_t v26 = v8[9];
    do
    {
      v25(&v18, *(void *)(v6 + 48) + v12 * v26, v7);
      uint64_t v14 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(v20, v21, v19);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(&v18, v22, v7, v14);
      ((void (*)(uint64_t *, uint64_t))v24[1])(&v18, v7);
      if (v15) {
        break;
      }
      unint64_t v12 = v23 & (v12 + 1);
      uint64_t v16 = *(void *)(v6 + 8 * (v12 >> 6) + 64);
    }
    while (_bittest64(&v16, v12));
  }
  return v12;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t v5 = ~(-1 << *(unsigned char *)(v4 + 32));
  unint64_t v6 = v5 & a4;
  uint64_t v7 = *(void *)(v4 + 8 * ((v5 & a4) >> 6) + 64);
  if (_bittest64(&v7, v5 & a4))
  {
    uint64_t v9 = *(void *)(v4 + 48);
    char v16 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 + 24 * v6);
      if (*(unsigned char *)(v9 + 24 * v6 + 16))
      {
        if ((a3 & 1) != 0 && v10 == a1) {
          return v6;
        }
      }
      else if ((a3 & 1) == 0)
      {
        uint64_t v11 = *(void *)(v9 + 24 * v6 + 8);
        if (v10 == a1 && v11 == a2) {
          return v6;
        }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a1, a2, 0);
        a3 = v16;
        if (v12) {
          return v6;
        }
      }
      unint64_t v6 = v5 & (v6 + 1);
      uint64_t v13 = *(void *)(v4 + 8 * (v6 >> 6) + 64);
    }
    while (_bittest64(&v13, v6));
  }
  return v6;
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance MLDataTable.Row.Values()
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames();
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a4;
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 64) = *(void *)a2;
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a2 + 8);
  *(void *)(v4 + 72) = *(void *)a3;
  *(unsigned char *)(v4 + 26) = *(unsigned char *)(a3 + 8);
  return swift_task_switch(MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:), 0, 0);
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(double a1)
{
  char v25 = *(unsigned char *)(v1 + 26);
  uint64_t v22 = *(void *)(v1 + 72);
  unsigned int v24 = *(unsigned __int8 *)(v1 + 25);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v23 = *(void *)(v1 + 56);
  uint64_t v3 = *(void **)(v1 + 48);
  id v4 = objc_allocWithZone((Class)MLModel);
  v3[2] = [v4 init];
  uint64_t v5 = type metadata accessor for MLHandActionClassifier(0);
  MLClassifierMetrics.init()();
  MLClassifierMetrics.init()();
  uint64_t v6 = (uint64_t)v3 + *(int *)(v5 + 28);
  uint64_t v7 = v3;
  outlined init with copy of MLTrainingSessionParameters(v23, v6, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v2, v24);
  v8._uint64_t countAndFlagsBits = 0x6C6562616CLL;
  v8._char object = (void *)0xE500000000000000;
  specialized MLDataTable.subscript.getter(v8, v2, v24, v9, v10);
  outlined consume of Result<_DataTable, Error>(v2, v24);
  specialized MLDataColumn.dropDuplicates()(v18, v19);
  outlined consume of Result<_DataTable, Error>(v18, v19);
  uint64_t v11 = specialized Array<A>.init(_:)(v20, v21, a1);
  *uint64_t v7 = v11;
  uint64_t v12 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v1 + 80) = v12;
  uint64_t v13 = *(int *)(v12 + 28);
  *(_DWORD *)(v1 + 28) = v13;
  uint64_t v14 = *(void *)(v23 + v13);
  uint64_t v15 = type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  swift_bridgeObjectRetain((_BYTE)v11);
  v7[1] = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)((uint64_t)v11, 0, 21, 3, v14);
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = v24;
  *(void *)(v1 + 32) = v22;
  *(unsigned char *)(v1 + 40) = v25;
  char v16 = (void *)swift_task_alloc(dword_3AE88C);
  *(void *)(v1 + 88) = v16;
  *char v16 = v1;
  v16[1] = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  return MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)(v1 + 16, v1 + 32, 1);
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *v1;
  char v5 = *(unsigned char *)(v4 + 26);
  *(void *)(v4 + 96) = v0;
  swift_task_dealloc(v3);
  outlined consume of Result<_DataTable, Error>(v2, v5);
  if (v0) {
    uint64_t v6 = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  else {
    uint64_t v6 = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

{
  uint64_t v0;
  BOOL v1;
  unsigned __int8 v2;
  uint64_t v3;
  int v4;
  Swift::String v5;
  float v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  uint64_t v1 = AnalyticsReporter.init()();
  uint64_t v2 = *(unsigned char *)(v0 + 25);
  uint64_t v3 = *(void *)(v0 + 64);
  if (v1)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 56), type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined consume of Result<_DataTable, Error>(v3, v2);
  }
  else
  {
    uint64_t v4 = MLDataTable.size.getter();
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, (Swift::String)__PAIR128__((unint64_t)("nClassifier.swift" + 0x8000000000000000), 0xD000000000000010), (float)v4);
    v5._uint64_t countAndFlagsBits = 0x6C6562616CLL;
    v5._char object = (void *)0xE500000000000000;
    MLDataTable.subscript.getter(v5);
    outlined consume of Result<_DataTable, Error>(v3, v2);
    MLUntypedColumn.dropDuplicates()(v3, v2);
    outlined consume of Result<_DataTable, Error>(v11, v12);
    if (v14)
    {
      outlined consume of Result<_DataTable, Error>(v13, 1);
      uint64_t v6 = -1.0;
    }
    else
    {
      swift_retain();
      uint64_t v7 = CMLColumn.size.getter();
      outlined consume of Result<_DataTable, Error>(v13, 0);
      outlined consume of Result<_DataTable, Error>(v13, 0);
      uint64_t v6 = (float)v7;
    }
    uint64_t v15 = *(int *)(v0 + 28);
    Swift::String v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 80);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), v6);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, (Swift::String)__PAIR128__(0xEE00736E6F697461, 0x726574492078614DLL), (float)(int)*(void *)(v8 + *(int *)(v9 + 24)));
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Labels" + 0x8000000000000000), 0xD000000000000016), (float)(int)*(void *)(v8 + v15));
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_handActionClassifier, (Swift::String)__PAIR128__(0xEA0000000000657ALL, 0x6953206863746142), (float)(int)*(void *)(v8 + *(int *)(v9 + 20)));
    outlined destroy of MLActivityClassifier.ModelParameters(v8, type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(unsigned char *)(v0 + 25);
  outlined destroy of MLActivityClassifier.ModelParameters(*(void *)(v0 + 56), type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined consume of Result<_DataTable, Error>(v1, v3);
  outlined destroy of MLActivityClassifier.ModelParameters(v2, type metadata accessor for MLHandActionClassifier);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLHandActionClassifier.evaluation(on:parameters:)(uint64_t *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v37 = v5;
  uint64_t v29 = a2;
  double v34 = v4;
  uint64_t v33 = type metadata accessor for LearningPhase(0);
  uint64_t v30 = *(void *)(v33 - 8);
  int64_t v7 = *(void *)(v30 + 64);
  Swift::String v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  BOOL v31 = &v26;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  uint64_t v10 = *(void *)(v35 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  int v36 = &v26;
  char v14 = *((unsigned char *)a1 + 8);
  uint64_t v26 = *a1;
  char v27 = v14;
  char v28 = v6;
  uint64_t v15 = *v6;
  uint64_t v16 = v37;
  BOOL v17 = static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v26, (void *)*v6, a3);
  if (v16)
  {
    uint64_t v23 = v34;
    *double v34 = v16;
    uint64_t v24 = type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload(v23, v24, 2);
  }
  else
  {
    uint64_t v37 = v10;
    uint64_t v32 = *(void *)(v15 + 16);
    uint64_t v18 = (uint64_t)v17;
    uint64_t v19 = (uint64_t)v31;
    uint64_t v20 = v30;
    (*(void (**)(uint64_t *, void, uint64_t))(v30 + 104))(v31, enum case for LearningPhase.inference(_:), v33);
    specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v18, v32, v29, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v33);
    swift_bridgeObjectRelease(v18);
    char v21 = v28;
    uint64_t v22 = MLHandActionClassifier.GraphCNN.evaluate(_:)(v36);
    static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(a3, a4, v22, *v21);
    (*(void (**)(uint64_t *, uint64_t))(v37 + 8))(v36, v35);
    return swift_release();
  }
}

uint64_t MLHandActionClassifier.write(to:metadata:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v39 = v4;
  uint64_t v43 = type metadata accessor for URL(0);
  uint64_t v42 = *(void *)(v43 - 8);
  int64_t v6 = *(void *)(v42 + 64);
  int64_t v7 = alloca(v6);
  Swift::String v8 = alloca(v6);
  uint64_t v38 = v28;
  uint64_t v9 = *(void *)(a2 + 64);
  v28[0] = *(_OWORD *)a2;
  v28[1] = *(_OWORD *)(a2 + 16);
  v28[2] = *(_OWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  v28[3] = v10;
  uint64_t v29 = v9;
  uint64_t v41 = v5;
  MLHandActionClassifier.addHandActionClassifierSpecificMetadata(_:)((uint64_t *)v28);
  uint64_t v48 = *((void *)&v30 + 1);
  uint64_t v49 = v30;
  uint64_t v47 = v31;
  uint64_t v46 = v32;
  uint64_t v45 = v33;
  uint64_t v44 = v34;
  uint64_t v51 = v35;
  uint64_t v40 = v36;
  uint64_t v11 = v37;
  uint64_t v12 = URL.pathExtension.getter();
  char v14 = v13;
  uint64_t v50 = v11;
  if (v12 == 0x67616B6361706C6DLL && v13 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(101);
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x67616B6361706C6DLL, 0xE900000000000065, 0);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) == 0)
    {
      *(void *)&long long v30 = v49;
      *((void *)&v30 + 1) = v48;
      uint64_t v31 = v47;
      uint64_t v32 = v46;
      uint64_t v33 = v45;
      uint64_t v34 = v44;
      uint64_t v35 = v51;
      uint64_t v25 = v40;
      uint64_t v36 = v40;
      uint64_t v26 = v50;
      uint64_t v37 = v50;
      MLHandActionClassifier.writeLegacyModel(to:metadata:)(a1, &v30);
      return outlined consume of MLModelMetadata?(v49, v48, v47, v46, v45, v44, v51, v25, v26);
    }
  }
  uint64_t v16 = (uint64_t)v38;
  uint64_t v17 = v39;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, 0xD000000000000014, (unint64_t)("HandPoseClassifier" + 0x8000000000000000), 0x67616B6361706C6DLL, (void *)0xE900000000000065);
  uint64_t v18 = v40;
  uint64_t v19 = v44;
  uint64_t v20 = v45;
  uint64_t v21 = v46;
  uint64_t v22 = v47;
  uint64_t v23 = v48;
  uint64_t v24 = v49;
  if (!v17)
  {
    *(void *)&long long v30 = v49;
    *((void *)&v30 + 1) = v48;
    uint64_t v31 = v47;
    uint64_t v32 = v46;
    uint64_t v33 = v45;
    uint64_t v34 = v44;
    uint64_t v35 = v51;
    uint64_t v36 = v40;
    uint64_t v37 = v50;
    MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(v16, &v30, *(double *)&v10, a4);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v16, v43);
    uint64_t v24 = v49;
    uint64_t v23 = v48;
    uint64_t v22 = v47;
    uint64_t v21 = v46;
    uint64_t v20 = v45;
    uint64_t v19 = v44;
  }
  return outlined consume of MLModelMetadata?(v24, v23, v22, v21, v20, v19, v51, v18, v50);
}

uint64_t static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(unsigned char *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v35 = v4;
  uint64_t v5 = *(void *)a1;
  v38._char object = a1;
  char v6 = a1[8];
  uint64_t v40 = v5;
  char v41 = v6;
  v38._uint64_t countAndFlagsBits = a2;
  v7._uint64_t countAndFlagsBits = a2;
  *(void *)&long long v36 = a3;
  v7._char object = a3;
  MLDataTable.subscript.getter(v7);
  if (BYTE8(v37) == 1)
  {
    outlined consume of Result<_DataTable, Error>(v37, 1);
  }
  else
  {
    swift_retain();
    _UntypedColumn.type.getter();
    outlined consume of Result<_DataTable, Error>(v37, 0);
    outlined consume of Result<_DataTable, Error>(v37, 0);
    if ((_BYTE)v40 == 3)
    {
      *(void *)&long long v37 = v5;
      BYTE8(v37) = v6;
      v8._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
      v8._char object = (void *)v36;
      MLDataTable.subscript.getter(v8);
      specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, v40, v41);
      outlined consume of Result<_DataTable, Error>(v40, v41);
      uint64_t v39 = v5;
      LOBYTE(v42) = v6;
      char v9 = *((unsigned char *)v38._object + 8);
      uint64_t v40 = *(void *)v38._object;
      char v41 = v9;
      v8._uint64_t countAndFlagsBits = v38._countAndFlagsBits;
      v8._char object = (void *)v36;
      MLDataTable.subscript.getter(v8);
      uint64_t v10 = v5;
      uint64_t v11 = -1;
      if (!v6)
      {
        swift_retain();
        uint64_t v11 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v10, 0);
      }
      outlined consume of Result<_DataTable, Error>(v10, v6);
      int v42 = v42;
      specialized MLDataColumn.dropMissing()(v39, v42);
      uint64_t v12 = -1;
      if (!v41)
      {
        outlined copy of Result<_DataTable, Error>(v40, 0);
        uint64_t v12 = CMLColumn.size.getter();
        outlined consume of Result<_DataTable, Error>(v40, 0);
      }
      outlined consume of Result<_DataTable, Error>(v40, v41);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v14 = v11 - v12;
      if (v13) {
        BUG();
      }
      if (v14)
      {
        *(void *)&long long v37 = 0;
        *((void *)&v37 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(236);
        v15._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
        v15._char object = "validation_confusion" + 0x8000000000000000;
        String.append(_:)(v15);
        uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v18 = (char)v17;
        v15._uint64_t countAndFlagsBits = v16;
        v15._char object = v17;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v18);
        v15._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
        v15._char object = "mn into MLMultiArray format. " + 0x8000000000000000;
        String.append(_:)(v15);
        uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v21 = (char)v20;
        v15._uint64_t countAndFlagsBits = v19;
        v15._char object = v20;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v21);
        v15._char object = (void *)0xE200000000000000;
        v15._uint64_t countAndFlagsBits = 8236;
        String.append(_:)(v15);
        uint64_t v40 = 21;
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        char v24 = (char)v23;
        v15._uint64_t countAndFlagsBits = v22;
        v15._char object = v23;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v24);
        v15._char object = "ld have a dimension of [1, " + 0x8000000000000000;
        v15._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
        String.append(_:)(v15);
        v15._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v15._object, 0, 0);
        *(_OWORD *)uint64_t v25 = v37;
        *(_OWORD *)(v25 + 16) = 0;
        *(_OWORD *)(v25 + 32) = 0;
        *(unsigned char *)(v25 + 48) = 0;
        swift_willThrow(&type metadata for MLCreateError, v15._object, v25, v26, v27, v28);
        return outlined consume of Result<_DataTable, Error>(v39, v42);
      }
      swift_bridgeObjectRetain(v36);
      specialized MLDataTable.subscript.setter(v39, v42, v38._countAndFlagsBits, v36);
    }
  }
  char v30 = *((unsigned char *)v38._object + 8);
  *(void *)&long long v37 = *(void *)v38._object;
  BYTE8(v37) = v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v31, v34);
  inited[2] = 1;
  inited[3] = 2;
  inited[4] = v38._countAndFlagsBits;
  char v33 = v36;
  inited[5] = v36;
  LOBYTE(v40) = 5;
  swift_bridgeObjectRetain(v33);
  static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v37, (unint64_t)inited, (char *)&v40, a4);
  swift_setDeallocating(inited);
  return specialized _ContiguousArrayStorage.__deallocating_deinit();
}

uint64_t static MLHandActionClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLHandActionClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

id MLHandActionClassifier.model.getter()
{
  return *(id *)(v0 + 16);
}

void MLHandActionClassifier.model.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

void (*MLHandActionClassifier.model.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLHandActionClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 28), v2, type metadata accessor for MLHandActionClassifier.ModelParameters);
}

uint64_t MLHandActionClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLHandActionClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 32), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandActionClassifier.trainingMetrics.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier(0);
  return outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v2 + 32));
}

void (*MLHandActionClassifier.trainingMetrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLHandActionClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLHandActionClassifier.validationMetrics.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MLHandActionClassifier(0);
  return outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v2 + 36));
}

void (*MLHandActionClassifier.validationMetrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.Prediction.frameRange.getter()
{
  return *(void *)v0;
}

void MLHandActionClassifier.Prediction.frameRange.setter(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

void (*MLHandActionClassifier.Prediction.frameRange.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.Prediction.results.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t MLHandActionClassifier.Prediction.results.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

void (*MLHandActionClassifier.Prediction.results.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, __m128 a3)
{
  uint64_t v75 = v4;
  uint64_t v74 = a2;
  uint64_t v5 = v3;
  uint64_t v73 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v58 = *(void *)(v73 - 8);
  int64_t v57 = *(void *)(v58 + 64);
  char v6 = alloca(v57);
  Swift::String v7 = alloca(v57);
  uint64_t v61 = &v56;
  uint64_t v8 = type metadata accessor for MLHandActionClassifier(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v60 = &v56;
  uint64_t v12 = alloca(v9);
  BOOL v13 = alloca(v9);
  uint64_t v56 = (uint64_t)&v56;
  uint64_t v14 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  int64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v65 = (uint64_t)&v56;
  int64_t v18 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.DataSource(0) - 8) + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  Swift::String v59 = &v56;
  void *v5 = _swiftEmptyArrayStorage;
  id v21 = objc_allocWithZone((Class)MLModel);
  _OWORD v5[2] = [v21 init];
  uint64_t v70 = (uint64_t)v5 + *(int *)(v8 + 32);
  MLClassifierMetrics.init()();
  uint64_t v22 = *(int *)(v8 + 36);
  long long v69 = v5;
  uint64_t v23 = v74;
  uint64_t v68 = (uint64_t)v5 + v22;
  *(double *)a3.i64 = MLClassifierMetrics.init()();
  uint64_t v24 = v75;
  MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v76, &v62, a3);
  if (v24)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v23, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLHandActionClassifier.DataSource);
LABEL_10:
    uint64_t v31 = v68;
    uint64_t v32 = v69;
    uint64_t v33 = v70;
LABEL_11:
    swift_bridgeObjectRelease(*v32);

    outlined destroy of MLActivityClassifier.ModelParameters(v33, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v31, type metadata accessor for MLClassifierMetrics);
  }
  uint64_t v71 = v14;
  uint64_t v75 = 0;
  uint64_t v67 = a1;
  uint64_t v25 = v76;
  uint64_t v66 = v62;
  char v79 = v63;
  int v26 = v77;
  if (v77 == 0xFF)
  {
    MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((__m128)0x403E000000000000uLL);
    uint64_t v64 = v25;
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    uint64_t v62 = v25;
    char v63 = v26 & 1;
    uint64_t v72 = *(void *)(v74 + *(int *)(v73 + 40));
    outlined copy of Result<_DataTable, Error>(v25, v26);
    uint64_t v27 = v75;
    static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)((uint64_t)&v62, 0, *(double *)&v72);
    if (v27)
    {
      outlined consume of MLDataTable?(v66, v79);
      outlined consume of MLDataTable?(v25, v26);
      outlined destroy of MLActivityClassifier.ModelParameters(v74, type metadata accessor for MLHandActionClassifier.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v67, type metadata accessor for MLHandActionClassifier.DataSource);
      outlined consume of MLDataTable?(v25, v26);
      goto LABEL_10;
    }
    uint64_t v64 = v25;
    outlined consume of MLDataTable?(v25, v26);
  }
  char v78 = v77;
  uint64_t v72 = v76;
  char v28 = v79;
  uint64_t v29 = v71;
  if (v79 != -1)
  {
    LODWORD(v71) = v26;
    uint64_t v30 = v74;
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    uint64_t v62 = v66;
    char v63 = v28 & 1;
    static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)((uint64_t)&v62, 0, *(double *)(v30 + *(int *)(v73 + 40)));
    uint64_t v75 = 0;
LABEL_16:
    uint64_t v44 = v76;
    uint64_t v73 = v76;
    LOBYTE(v44) = v77;
    uint64_t v65 = v44;
    uint64_t v39 = (uint64_t)v61;
    goto LABEL_17;
  }
  uint64_t v35 = v65;
  outlined init with copy of MLTrainingSessionParameters(v74, v65, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload(v35, v29) == 1)
  {
    uint64_t v36 = v35;
    uint64_t v37 = (uint64_t)v59;
    outlined init with take of MLClassifierMetrics(v36, (uint64_t)v59, type metadata accessor for MLHandActionClassifier.DataSource);
    MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((__m128)0x403E000000000000uLL);
    LODWORD(v71) = v26;
    uint64_t v75 = 0;
    outlined destroy of MLActivityClassifier.ModelParameters(v37, type metadata accessor for MLHandActionClassifier.DataSource);
    goto LABEL_16;
  }
  LODWORD(v71) = v26;
  uint64_t v75 = 0;
  outlined destroy of MLActivityClassifier.ModelParameters(v35, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  uint64_t empty = tc_v1_sframe_create_empty(0);
  uint64_t v39 = (uint64_t)v61;
  if (!empty) {
    BUG();
  }
  uint64_t v40 = empty;
  uint64_t v65 = 0;
  uint64_t v41 = type metadata accessor for CMLTable();
  uint64_t v42 = swift_allocObject(v41, 24, 7);
  *(void *)(v42 + 16) = v40;
  uint64_t v43 = type metadata accessor for _DataTable();
  swift_allocObject(v43, 40, 7);
  uint64_t v73 = _DataTable.init(impl:)(v42);
LABEL_17:
  outlined init with copy of MLTrainingSessionParameters(v74, v39, type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v45 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v46 = ~*(unsigned __int8 *)(v58 + 80) & (v45 + 41);
  uint64_t v47 = swift_allocObject(&unk_39A8B0, v46 + v57, v45 | 7);
  uint64_t v48 = v72;
  *(void *)(v47 + 16) = v72;
  uint64_t v49 = v39;
  char v50 = v78;
  *(unsigned char *)(v47 + 24) = v78 & 1;
  *(void *)(v47 + 32) = v73;
  *(unsigned char *)(v47 + 40) = v65 & 1;
  outlined init with take of MLClassifierMetrics(v49, v47 + v46, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v48, v50);
  char v51 = v65;
  outlined copy of Result<_DataTable, Error>(v73, v65);
  uint64_t v52 = v56;
  uint64_t v53 = v75;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLHandActionClassifier.init(trainingData:parameters:), v47);
  uint64_t v75 = v53;
  if (v53)
  {
    swift_release();
    outlined consume of MLDataTable?(v66, v79);
    outlined consume of MLDataTable?(v64, v71);
    outlined consume of Result<_DataTable, Error>(v73, v51);
    outlined consume of Result<_DataTable, Error>(v72, v50);
    outlined destroy of MLActivityClassifier.ModelParameters(v74, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLActivityClassifier.ModelParameters(v67, type metadata accessor for MLHandActionClassifier.DataSource);
    uint64_t v31 = v68;
    uint64_t v32 = v69;
    uint64_t v33 = v70;
    goto LABEL_11;
  }
  swift_release();
  outlined consume of MLDataTable?(v66, v79);
  outlined consume of MLDataTable?(v64, v71);
  outlined consume of Result<_DataTable, Error>(v73, v51);
  outlined consume of Result<_DataTable, Error>(v72, v50);
  outlined destroy of MLActivityClassifier.ModelParameters(v74, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v67, type metadata accessor for MLHandActionClassifier.DataSource);
  uint64_t v54 = (uint64_t)v60;
  outlined init with take of MLClassifierMetrics(v52, (uint64_t)v60, type metadata accessor for MLHandActionClassifier);
  uint64_t v55 = (uint64_t)v69;
  swift_bridgeObjectRelease(*v69);

  outlined destroy of MLActivityClassifier.ModelParameters(v70, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v68, type metadata accessor for MLClassifierMetrics);
  return outlined init with take of MLClassifierMetrics(v54, v55, type metadata accessor for MLHandActionClassifier);
}

uint64_t closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 72) = a6;
  *(unsigned char *)(v6 + 26) = a5;
  *(void *)(v6 + 64) = a4;
  *(unsigned char *)(v6 + 25) = a3;
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 48) = a1;
  char v8 = a3 & 1;
  char v9 = a5 & 1;
  uint64_t v10 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)(v6 + 80) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Result<_DataTable, Error>(a2, v8);
  outlined copy of Result<_DataTable, Error>(a4, v9);
  return swift_task_switch(closure #1 in MLHandActionClassifier.init(trainingData:parameters:), 0, 0);
}

uint64_t closure #1 in MLHandActionClassifier.init(trainingData:parameters:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  char v3 = *(unsigned char *)(v0 + 25);
  char v4 = *(unsigned char *)(v0 + 26);
  uint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = *(void *)(v0 + 56);
  *(unsigned char *)(v0 + 24) = v3 & 1;
  *(void *)(v0 + 32) = v5;
  *(unsigned char *)(v0 + 40) = v4 & 1;
  outlined init with copy of MLTrainingSessionParameters(v2, v1, type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v6 = (void *)swift_task_alloc(dword_3AA6F4);
  *(void *)(v0 + 88) = v6;
  void *v6 = v0;
  v6[1] = closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(void *)(v0 + 48), v0 + 16, v0 + 32, *(void *)(v0 + 80));
}

uint64_t MLHandActionClassifier.init(model:parameters:metricsAttributes:classLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v47 = v7;
  uint64_t v48 = a4;
  uint64_t v43 = a3;
  uint64_t v45 = a2;
  char v8 = v6;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v39 = v35;
  uint64_t v12 = alloca(v9);
  BOOL v13 = alloca(v9);
  Swift::String v38 = v35;
  id v14 = objc_allocWithZone((Class)MLModel);
  _OWORD v8[2] = [v14 init];
  int64_t v15 = (int *)type metadata accessor for MLHandActionClassifier(0);
  uint64_t v16 = (uint64_t)v8 + v15[8];
  MLClassifierMetrics.init()();
  uint64_t v40 = (uint64_t)v8 + v15[9];
  MLClassifierMetrics.init()();
  v8[1] = a1;
  outlined init with copy of MLTrainingSessionParameters(v45, (uint64_t)v8 + v15[7], type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v37 = v8;
  char v17 = v48;
  *char v8 = v48;
  uint64_t v18 = v43;
  uint64_t v46 = a1;
  char v19 = v17;
  swift_retain();
  swift_bridgeObjectRetain(v19);
  specialized Dictionary.subscript.getter(0xD000000000000012, (uint64_t)("oseClassifier.swift" + 0x8000000000000000), v18);
  if (!v36)
  {
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for Any?);
LABEL_7:
    uint64_t v25 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v25, 0, 0);
    *(void *)uint64_t v26 = 0xD00000000000002CLL;
    *(void *)(v26 + 8) = "training_confusion" + 0x8000000000000000;
    *(_OWORD *)(v26 + 16) = 0;
    *(_OWORD *)(v26 + 32) = 0;
    *(unsigned char *)(v26 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v25, v26, v27, v28, v29);
    swift_release();
    uint64_t v24 = v45;
    goto LABEL_8;
  }
  uint64_t v20 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter(0);
  if (!swift_dynamicCast(&v42, v35, (char *)&type metadata for Any + 8, v20, 6))
  {
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v18);
    goto LABEL_7;
  }
  uint64_t v41 = v20;
  uint64_t v21 = v42;
  uint64_t v22 = (uint64_t)v38;
  uint64_t v23 = v47;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(a5, a6, v42, v48);
  uint64_t v47 = v23;
  if (v23)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v48);
    uint64_t v24 = v45;
LABEL_8:
    outlined destroy of MLActivityClassifier.ModelParameters(v24, type metadata accessor for MLHandActionClassifier.ModelParameters);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v37, type metadata accessor for MLHandActionClassifier);
  }
  uint64_t v44 = v21;
  outlined assign with take of MLClassifierMetrics(v22, v16);
  char v31 = v43;
  specialized Dictionary.subscript.getter(0xD000000000000014, (uint64_t)("ve training confusion matrix" + 0x8000000000000000), v43);
  swift_bridgeObjectRelease(v31);
  if (!v36)
  {
    swift_bridgeObjectRelease(v48);
    swift_release();
    swift_release();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v35, &demangling cache variable for type metadata for Any?);
    return outlined destroy of MLActivityClassifier.ModelParameters(v45, type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  if (!swift_dynamicCast(&v42, v35, (char *)&type metadata for Any + 8, v41, 6))
  {
    swift_bridgeObjectRelease(v48);
    swift_release();
    swift_release();
    return outlined destroy of MLActivityClassifier.ModelParameters(v45, type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  uint64_t v32 = (uint64_t)v39;
  char v33 = v48;
  uint64_t v34 = v47;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(a5, a6, v42, v48);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v33);
  outlined destroy of MLActivityClassifier.ModelParameters(v45, type metadata accessor for MLHandActionClassifier.ModelParameters);
  if (v34) {
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v37, type metadata accessor for MLHandActionClassifier);
  }
  return outlined assign with take of MLClassifierMetrics(v32, v40);
}

void MLHandActionClassifier.init(checkpoint:)(uint64_t a1, __m128 a2, double a3)
{
  v79._char object = v4;
  uint64_t v77 = a1;
  uint64_t v5 = v3;
  v79._uint64_t countAndFlagsBits = type metadata accessor for MLHandActionClassifier.DataSource(0);
  int64_t v6 = *(void *)(*(void *)(v79._countAndFlagsBits - 8) + 64);
  uint64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  uint64_t v76 = &v61;
  uint64_t v71 = type metadata accessor for MLHandActionClassifier.PersistentParameters(0);
  int64_t v9 = *(void *)(*(void *)(v71 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  long long v69 = &v61;
  uint64_t v12 = type metadata accessor for URL(0);
  uint64_t v13 = *(void *)(v12 - 8);
  int64_t v14 = *(void *)(v13 + 64);
  int64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  char v78 = &v61;
  char v17 = alloca(v14);
  uint64_t v18 = alloca(v14);
  uint64_t v73 = &v61;
  void *v5 = _swiftEmptyArrayStorage;
  id v19 = objc_allocWithZone((Class)MLModel);
  _OWORD v5[2] = [v19 init];
  uint64_t v20 = type metadata accessor for MLHandActionClassifier(0);
  uint64_t v72 = (char *)v5 + *(int *)(v20 + 32);
  MLClassifierMetrics.init()();
  uint64_t v70 = v20;
  uint64_t v21 = *(int *)(v20 + 36);
  uint64_t v22 = v73;
  uint64_t v74 = v5;
  uint64_t v66 = (uint64_t)v5 + v21;
  MLClassifierMetrics.init()();
  URL.deletingLastPathComponent()();
  uint64_t v23 = v13;
  uint64_t v24 = (uint64_t)v69;
  uint64_t v25 = v78;
  uint64_t v75 = v12;
  uint64_t v26 = v12;
  uint64_t v27 = v23;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v78, v22, v26);
  char object = v79._object;
  MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(v25);
  v79._char object = object;
  if (object)
  {
    char v29 = 0;
    outlined destroy of MLActivityClassifier.ModelParameters(v77, type metadata accessor for MLCheckpoint);
    (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v22, v75);
    uint64_t v30 = v74;
  }
  else
  {
    char v78 = (uint64_t *)v27;
    uint64_t v31 = (uint64_t)v76;
    outlined init with copy of MLTrainingSessionParameters(v24, (uint64_t)v76, type metadata accessor for MLHandActionClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload(v31, v79._countAndFlagsBits) == 3)
    {
      unsigned int v32 = *(unsigned __int8 *)(v31 + 8);
      char v33 = (void *)v31;
      uint64_t v34 = *(void *)v31;
      uint64_t v35 = v33[3];
      v79._uint64_t countAndFlagsBits = v33[4];
      uint64_t v36 = (void *)v33[5];
      uint64_t v37 = v33[7];
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v37);
      outlined copy of Result<_DataTable, Error>(v34, v32);
      v38._uint64_t countAndFlagsBits = v79._countAndFlagsBits;
      v38._char object = v36;
      specialized MLDataTable.subscript.getter(v38, v34, v32, v39, v40);
      swift_bridgeObjectRelease((_BYTE)v36);
      outlined consume of Result<_DataTable, Error>(v34, v32);
      uint64_t v41 = v62;
      LOBYTE(v37) = v63;
      specialized MLDataColumn.dropDuplicates()(v62, v63);
      outlined consume of Result<_DataTable, Error>(v41, v37);
      v79._uint64_t countAndFlagsBits = (uint64_t)specialized Array<A>.init(_:)(v64, v65, *(double *)a2.i64);
      outlined consume of Result<_DataTable, Error>(v34, v32);
      uint64_t v30 = v74;
    }
    else
    {
      uint64_t v42 = v79._object;
      uint64_t v43 = static _VideoUtilities.videoURLsPerClass(from:)(v24, a2);
      v79._char object = v42;
      uint64_t v30 = v74;
      if (v42)
      {
        uint64_t v44 = v24;
        char v29 = 0;
        outlined destroy of MLActivityClassifier.ModelParameters(v77, type metadata accessor for MLCheckpoint);
        outlined destroy of MLActivityClassifier.ModelParameters(v44, type metadata accessor for MLHandActionClassifier.PersistentParameters);
        ((void (*)(uint64_t *, uint64_t))v78[1])(v73, v75);
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v76, type metadata accessor for MLHandActionClassifier.DataSource);
        goto LABEL_13;
      }
      char v45 = (char)v43;
      v79._uint64_t countAndFlagsBits = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v43);
      swift_bridgeObjectRelease(v45);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v76, type metadata accessor for MLHandActionClassifier.DataSource);
    }
    uint64_t v46 = (uint64_t)v30 + *(int *)(v70 + 28);
    uint64_t v47 = (int *)v71;
    uint64_t v48 = (uint64_t)v69;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v69 + *(int *)(v71 + 20), v46, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v74 = *(void **)(v48 + v47[6]);
    uint64_t v76 = *(uint64_t **)(v48 + v47[7]);
    uint64_t v68 = *(void *)(v48 + v47[8]);
    uint64_t v67 = *(void *)(v48 + v47[10]);
    uint64_t v71 = *(void *)(v48 + v47[9]);
    uint64_t v49 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    *(void *)(v49[5] + v46) = v74;
    *(void *)(v49[6] + v46) = v76;
    uint64_t v50 = v68;
    *(void *)(v49[7] + v46) = v68;
    *(void *)(v49[8] + v46) = v67;
    double v51 = *(double *)&v71;
    *(void *)(v49[10] + v46) = v71;
    uint64_t v52 = type metadata accessor for MLHandActionClassifier.GraphCNN(0);
    swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    uint64_t v53 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)(v79._countAndFlagsBits, 0, 21, 3, v50);
    uint64_t v54 = v77;
    uint64_t v55 = v79._object;
    MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v77, v51, a3);
    v79._char object = v55;
    if (v55)
    {
      swift_release();
      uint64_t v56 = v54;
    }
    else
    {
      swift_retain();
      int64_t v57 = v79._object;
      specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLHandActionClassifier.init(checkpoint:), (uint64_t)v53);
      v79._char object = v57;
      if (!v57)
      {
        uint64_t v60 = v58;
        swift_release();
        outlined destroy of MLActivityClassifier.ModelParameters(v77, type metadata accessor for MLCheckpoint);
        outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLHandActionClassifier.PersistentParameters);
        ((void (*)(uint64_t *, uint64_t))v78[1])(v73, v75);

        void v30[2] = v60;
        v30[1] = v53;
        return;
      }
      swift_release_n(v53);
      uint64_t v56 = v77;
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v56, type metadata accessor for MLCheckpoint);
    outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLHandActionClassifier.PersistentParameters);
    ((void (*)(uint64_t *, uint64_t))v78[1])(v73, v75);
    char v29 = 1;
  }
LABEL_13:
  uint64_t v59 = (uint64_t)v72;
  swift_bridgeObjectRelease(*v30);

  if (v29) {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v30 + *(int *)(v70 + 28), type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  outlined destroy of MLActivityClassifier.ModelParameters(v59, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v66, type metadata accessor for MLClassifierMetrics);
}

uint64_t closure #1 in MLHandActionClassifier.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_3AEB4C);
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

void *static MLHandActionClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)static MLHandActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandActionClassifier>);
    uint64_t v7 = (void *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    return specialized MLJob.init(_:)(v7, v5);
  }
  return result;
}

uint64_t static MLHandActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = v3;
  uint64_t v26 = a2;
  uint64_t v24 = a1;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v25 = &v21;
  char v8 = alloca(v5);
  int64_t v9 = alloca(v5);
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.DataSource(0) - 8) + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  outlined init with copy of MLTrainingSessionParameters(v24, (uint64_t)&v21, type metadata accessor for MLHandActionClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)&v21, type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v26 = a3;
  outlined init with copy of MLTrainingSessionParameters(a3, (uint64_t)&v21, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v16 = type metadata accessor for HandActionClassifierTrainingSessionDelegate(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = v23;
  uint64_t result = HandActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)((uint64_t)&v21, (uint64_t)&v21, (uint64_t)&v21);
  if (!v17)
  {
    v22[3] = v16;
    _OWORD v22[4] = &protocol witness table for HandActionClassifierTrainingSessionDelegate;
    v22[0] = result;
    uint64_t v19 = (uint64_t)v25;
    outlined init with copy of MLTrainingSessionParameters(v26, (uint64_t)v25, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v22, v19, 25);
  }
  return result;
}

void *static MLHandActionClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandActionClassifier>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

uint64_t static MLHandActionClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  char v4 = alloca(v2);
  uint64_t v12 = v11;
  int64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for HandActionClassifierTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = HandActionClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    void v11[3] = v7;
    v11[4] = &protocol witness table for HandActionClassifierTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 25);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v55 = a5;
  uint64_t v54 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v49 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters(0);
  int64_t v10 = *(void *)(*((void *)v49 - 1) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  double v51 = &v42;
  int64_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?)
                              - 8)
                  + 64);
  int64_t v14 = alloca(v13);
  int64_t v15 = alloca(v13);
  uint64_t v50 = &v42;
  uint64_t v16 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  int64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v18 = alloca(v17);
  uint64_t v19 = alloca(v17);
  uint64_t v20 = alloca(v17);
  uint64_t v21 = alloca(v17);
  if (a2)
  {
    uint64_t v42 = a1;
    swift_storeEnumTagMultiPayload(&v42, v6, 1);
    swift_errorRetain(a1);
    v54(&v42);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v42, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
  }
  else
  {
    uint64_t v52 = (int *)v16;
    uint64_t v56 = &v42;
    uint64_t v53 = &v42;
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v43);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v23 = type metadata accessor for HandActionClassifierTrainingSessionDelegate(0);
    uint64_t result = swift_dynamicCast(&v48, v43, v22, v23, 6);
    if ((_BYTE)result)
    {
      uint64_t v25 = *(void *)(v48 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model);
      if (!v25) {
        return swift_release();
      }
      uint64_t v58 = v48;
      uint64_t v26 = v48 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
      swift_beginAccess(v48 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters, v43, 0, 0);
      uint64_t v27 = v26;
      uint64_t v28 = (uint64_t)v50;
      outlined init with copy of MLHandActionClassifier.PersistentParameters?(v27, (uint64_t)v50);
      char v29 = v49;
      if (__swift_getEnumTagSinglePayload(v28, 1, (uint64_t)v49))
      {
        swift_retain();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
        swift_release();
        return swift_release();
      }
      uint64_t v30 = (uint64_t)v51;
      outlined init with copy of MLTrainingSessionParameters(v28, (uint64_t)v51, type metadata accessor for MLHandActionClassifier.PersistentParameters);
      uint64_t v57 = v25;
      swift_retain();
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v28, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
      outlined init with copy of MLTrainingSessionParameters(v30 + v29[5], (uint64_t)&v42, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
      uint64_t v31 = *(void *)(v30 + v29[7]);
      uint64_t v32 = *(void *)(v30 + v29[8]);
      uint64_t v33 = *(void *)(v30 + v29[10]);
      uint64_t v34 = *(void *)(v30 + v29[9]);
      uint64_t v35 = v52;
      *(void *)&v43[v52[5] - 8] = *(void *)(v30 + v29[6]);
      *(void *)&v43[v35[6] - 8] = v31;
      *(void *)&v43[v35[7] - 8] = v32;
      *(void *)&v43[v35[8] - 8] = v33;
      *(void *)&v43[v35[10] - 8] = v34;
      outlined destroy of MLActivityClassifier.ModelParameters(v30, type metadata accessor for MLHandActionClassifier.PersistentParameters);
      uint64_t v36 = (uint64_t)v56;
      outlined init with take of MLClassifierMetrics((uint64_t)&v42, (uint64_t)v56, type metadata accessor for MLHandActionClassifier.ModelParameters);
      uint64_t v37 = *(void *)(v58 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels);
      if (v37)
      {
        Swift::String v38 = alloca(48);
        uint64_t v39 = alloca(48);
        uint64_t v44 = v57;
        uint64_t v45 = v36;
        uint64_t v46 = v58;
        uint64_t v47 = v37;
        swift_bridgeObjectRetain(v37);
        uint64_t v40 = (uint64_t)v53;
        _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML22MLHandActionClassifierV_s5Error_pTgm5((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:), (uint64_t)&v42);
        swift_bridgeObjectRelease(v37);
        v54((uint64_t *)v40);
        swift_release();
        swift_release();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v40, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
        uint64_t v41 = (uint64_t)v56;
      }
      else
      {
        swift_release();
        swift_release();
        uint64_t v41 = v36;
      }
      return outlined destroy of MLActivityClassifier.ModelParameters(v41, type metadata accessor for MLHandActionClassifier.ModelParameters);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6, double a7)
{
  uint64_t v18 = a5;
  v16[0] = v8;
  uint64_t v17 = a3;
  v16[1] = v7;
  int64_t v10 = *(void *)(*(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8) + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v16, type metadata accessor for MLHandActionClassifier.ModelParameters);
  uint64_t v13 = *(void *)(v17
                  + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary);
  swift_retain();
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a4);
  uint64_t v14 = v16[0];
  uint64_t result = MLHandActionClassifier.init(model:parameters:metricsAttributes:classLabels:)(a1, (uint64_t)v16, v13, a4, a6, a7);
  if (v14)
  {
    uint64_t result = (uint64_t)v18;
    *uint64_t v18 = v14;
  }
  return result;
}

uint64_t static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v28 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  uint64_t inited = swift_initStackObject(v5, v23);
  *(void *)(inited + 16) = 4;
  *(void *)(inited + 24) = 8;
  *(void *)(inited + 32) = 0x746E696F7079656BLL;
  *(void *)(inited + 40) = 0xE900000000000073;
  uint64_t v31 = a1;
  uint64_t v24 = &v31;
  swift_bridgeObjectRetain(a1);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v9 = v8;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(unsigned char *)(inited + 56) = v9 & 1;
  *(void *)(inited + 64) = 0x6C6562616CLL;
  *(void *)(inited + 72) = 0xE500000000000000;
  uint64_t v31 = a2;
  uint64_t v25 = &v31;
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v12 = v11;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 80) = v10;
  *(unsigned char *)(inited + 88) = v12 & 1;
  *(void *)(inited + 96) = 0x5F6E6F6973736573;
  *(void *)(inited + 104) = 0xEA00000000006469;
  uint64_t v31 = v30;
  uint64_t v26 = &v31;
  swift_bridgeObjectRetain(v30);
  uint64_t v13 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  char v15 = v14;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 112) = v13;
  *(unsigned char *)(inited + 120) = v15 & 1;
  *(void *)(inited + 128) = 0x7461506F65646976;
  *(void *)(inited + 136) = 0xE900000000000068;
  uint64_t v31 = v29;
  uint64_t v27 = &v31;
  swift_bridgeObjectRetain(v29);
  uint64_t v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(void *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  char v18 = v17;
  swift_bridgeObjectRelease(v31);
  *(void *)(inited + 144) = v16;
  *(unsigned char *)(inited + 152) = v18 & 1;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for MLUntypedColumn, &protocol witness table for String);
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v19);
  uint64_t result = v31;
  char v21 = v32;
  uint64_t v22 = v28;
  *uint64_t v28 = v31;
  *((unsigned char *)v22 + 8) = v21;
  return result;
}

void *closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 3)
  {
    uint64_t v2 = *(void *)a1;
    return static MLHandActionClassifier.convertSequenceToMultiArray(value:)(&v2);
  }
  else
  {
    *uint64_t result = 0;
  }
  return result;
}

void *static MLHandActionClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1)
{
  uint64_t v108 = v1;
  uint64_t v2 = *a1;
  v99[0] = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(3);
  id v3 = objc_allocWithZone((Class)NSNumber);
  [v3 initWithInteger:1];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  uint64_t v4 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4);
  specialized ContiguousArray._endMutation()(v4);
  id v5 = objc_allocWithZone((Class)NSNumber);
  [v5 initWithInteger:3];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  uint64_t v6 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6);
  specialized ContiguousArray._endMutation()(v6);
  id v7 = objc_allocWithZone((Class)NSNumber);
  [v7 initWithInteger:21];
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8);
  specialized ContiguousArray._endMutation()(v8);
  objc_allocWithZone((Class)MLMultiArray);
  uint64_t v9 = 0;
  id v10 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)_swiftEmptyArrayStorage, 65600);
  if (v10)
  {
    id v11 = v10;
    uint64_t v101 = UnsafeMutableBufferPointer.init(_:)(v11, &type metadata for Double);
    swift_retain();
    uint64_t v12 = CMLSequence.size.getter();
    uint64_t v13 = specialized RandomAccessCollection<>.distance(from:to:)(0, v12);
    swift_release();
    if (v13 == 1)
    {
      v99[7] = v2;
      double v14 = 0.0;
      long long v100 = 0;
      swift_retain();
      id v116 = v11;
      while (1)
      {
        specialized EnumeratedSequence.Iterator.next()(v14);
        uint64_t v15 = (uint64_t)v103;
        uint64_t v16 = v104;
        char v17 = v105;
        char v18 = v106;
        uint64_t v109 = v104;
        unint64_t v114 = (unint64_t)v103;
        if (v106 != 3) {
          break;
        }
        outlined copy of MLDataValue(v104, v105, 3u);
        outlined copy of MLDataValue(v16, v17, 3u);
        uint64_t v107 = v17;
        uint64_t v19 = CMLSequence.size.getter();
        char v17 = v107;
        uint64_t v20 = specialized RandomAccessCollection<>.distance(from:to:)(0, v19);
        outlined consume of (offset: Int, element: MLDataValue)?(v15, v16, v17, 3);
        if (v20 != 3)
        {

          swift_release();
          uint64_t v98 = v114;
          outlined consume of (offset: Int, element: MLDataValue)?(v114, v16, v17, 3);
          char v18 = 3;
          char v97 = v16;
LABEL_72:
          outlined consume of (offset: Int, element: MLDataValue)?(v98, v97, v17, v18);
          goto LABEL_63;
        }
        outlined copy of MLDataValue(v16, v17, 3u);
        if (CMLSequence.size.getter())
        {
          uint64_t v21 = 0;
          uint64_t v22 = v109;
          while (1)
          {
            int64_t v102 = v21;
            swift_retain();
            uint64_t v23 = CMLSequence.value(at:)(v21);
            uint64_t v24 = v114;
            uint64_t v25 = v107;
            outlined consume of (offset: Int, element: MLDataValue)?(v114, v22, v107, 3);
            if (v9)
            {
LABEL_89:
              swift_unexpectedError(v9, "CreateML/SequenceType.swift", 27, 1);
              BUG();
            }
            MLDataValue.init(_:)(v23, v14);
            id v113 = v103;
            uint64_t v110 = v104;
            char v26 = (char)v105;
            swift_retain();
            double v117 = COERCE_DOUBLE(CMLSequence.size.getter());
            outlined consume of (offset: Int, element: MLDataValue)?(v24, v22, v25, 3);
            if (v102 >= *(uint64_t *)&v117) {
              BUG();
            }
            uint64_t v27 = v113;
            uint64_t v28 = v110;
            if (v26 != 3) {
              break;
            }
            outlined copy of MLDataValue(v113, v110, 3u);
            outlined copy of MLDataValue(v27, v28, 3u);
            uint64_t v29 = CMLSequence.size.getter();
            if (CMLSequence.size.getter() < 0) {
              BUG();
            }
            uint64_t v30 = v27;
            uint64_t v31 = CMLSequence.size.getter();
            outlined consume of MLDataValue(v30, v28, 3);
            if (v29 < 0 || v31 < v29) {
              BUG();
            }
            if (v29 != 21)
            {
              uint64_t v27 = v113;
              uint64_t v28 = v110;
              outlined consume of MLDataValue(v113, v110, 3);
              char v26 = 3;
              uint64_t v25 = v107;
              break;
            }
            char v32 = v113;
            swift_retain();
            if (CMLSequence.size.getter())
            {
              uint64_t v33 = 0;
              while (1)
              {
                swift_retain();
                uint64_t v34 = CMLSequence.value(at:)(v33);
                outlined consume of MLDataValue(v32, v110, 3);
                if (v9) {
                  goto LABEL_89;
                }
                switch(CMLFeatureValue.type.getter())
                {
                  case 0u:
                    int64_t v35 = v33;
                    uint64_t v36 = *(void *)(v34 + 16);
                    swift_retain();
                    double v117 = COERCE_DOUBLE(specialized handling<A, B>(_:_:)(v36));
                    swift_release();
                    uint64_t v112 = 0;
                    swift_release();
                    char v115 = 0;
                    uint64_t v37 = 0;
                    goto LABEL_24;
                  case 1u:
                    int64_t v35 = v33;
                    uint64_t v46 = *(void *)(v34 + 16);
                    swift_retain();
                    specialized handling<A, B>(_:_:)(v46);
                    double v117 = v14;
                    swift_release();
                    uint64_t v112 = 0;
                    uint64_t v47 = swift_release();
                    LOBYTE(v47) = 1;
                    goto LABEL_31;
                  case 2u:
                    int64_t v35 = v33;
                    swift_retain();
                    Swift::String v43 = CMLFeatureValue.stringValue()();
                    double v117 = *(double *)&v43._countAndFlagsBits;
                    char object = v43._object;
                    swift_release();
                    if (v44)
                    {
                      swift_errorRelease(v44);
                      BUG();
                    }
                    char v115 = object;
                    uint64_t v112 = 0;
                    uint64_t v37 = swift_release();
                    LOBYTE(v37) = 2;
LABEL_24:
                    uint64_t v111 = v37;
                    goto LABEL_33;
                  case 3u:
                    int64_t v35 = v33;
                    uint64_t v48 = *(void *)(v34 + 16);
                    swift_retain();
                    uint64_t v49 = specialized handling<A, B>(_:_:)(v48);
                    if (!v49) {
                      BUG();
                    }
                    uint64_t v112 = 0;
                    swift_release_n(v34);
                    uint64_t v50 = type metadata accessor for CMLSequence();
                    uint64_t v47 = swift_allocObject(v50, 25, 7);
                    *(void *)(v47 + 16) = v49;
                    double v117 = *(double *)&v47;
                    *(unsigned char *)(v47 + 24) = 1;
                    LOBYTE(v47) = 3;
                    goto LABEL_31;
                  case 4u:
                    int64_t v35 = v33;
                    uint64_t v38 = *(void *)(v34 + 16);
                    swift_retain();
                    uint64_t v39 = specialized handling<A, B>(_:_:)(v38);
                    if (!v39) {
                      BUG();
                    }
                    uint64_t v112 = 0;
                    uint64_t v40 = type metadata accessor for CMLDictionary();
                    uint64_t v41 = swift_allocObject(v40, 24, 7);
                    *(void *)(v41 + 16) = v39;
                    v99[0] = v41;
                    v99[1] = (uint64_t)closure #1 in MLDataValue.DictionaryType.init(from:);
                    v99[2] = 0;
                    v99[3] = (uint64_t)specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
                    v99[4] = 0;
                    v99[5] = (uint64_t)specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
                    v99[6] = 0;
                    swift_retain();
                    double v117 = COERCE_DOUBLE(specialized Dictionary.init<A>(uniqueKeysWithValues:)(v99));
                    swift_release();
                    uint64_t v42 = swift_release_n(v34);
                    LOBYTE(v42) = 4;
                    uint64_t v111 = v42;
                    char v115 = 0;
                    char v32 = v113;
                    goto LABEL_33;
                  case 5u:
                    uint64_t v112 = 0;
                    int64_t v35 = v33;
                    uint64_t v51 = swift_release();
                    LOBYTE(v51) = 6;
                    uint64_t v111 = v51;
                    double v117 = 0.0;
                    goto LABEL_32;
                  case 6u:
                    int64_t v35 = v33;
                    swift_retain();
                    MLDataValue.MultiArrayType.init(from:)(v34);
                    double v117 = *(double *)&v103;
                    if (!v103) {
                      BUG();
                    }
                    uint64_t v112 = 0;
                    uint64_t v47 = swift_release();
                    LOBYTE(v47) = 5;
LABEL_31:
                    uint64_t v111 = v47;
LABEL_32:
                    char v115 = 0;
LABEL_33:
                    swift_retain();
                    uint64_t v52 = CMLSequence.size.getter();
                    outlined consume of MLDataValue(v32, v110, 3);
                    if (v35 >= v52) {
                      BUG();
                    }
                    unint64_t v53 = v35;
                    id v54 = [v116 strides];
                    id v55 = v54;
                    uint64_t v56 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
                    uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v56);

                    if ((v57 & 0xC000000000000003) != 0)
                    {
                      id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v57);
                    }
                    else
                    {
                      if (!*(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFF8))) {
                        BUG();
                      }
                      id v58 = *(id *)(v57 + 32);
                    }
                    uint64_t v59 = v58;
                    swift_bridgeObjectRelease(v57);
                    unint64_t v60 = (unint64_t)[v59 integerValue];

                    unint64_t v62 = v60;
                    uint64_t v61 = v114 * v60;
                    if (!is_mul_ok(v114, v62)) {
                      BUG();
                    }
                    id v63 = [v116 strides];
                    id v64 = v63;
                    uint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v56);

                    if ((v65 & 0xC000000000000003) != 0)
                    {
                      id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v65);
                    }
                    else
                    {
                      if (*(void *)((char *)&dword_10 + (v65 & 0xFFFFFFFFFFFFF8)) < 2uLL) {
                        BUG();
                      }
                      id v66 = *(id *)(v65 + 40);
                    }
                    uint64_t v67 = v66;
                    swift_bridgeObjectRelease(v65);
                    unint64_t v68 = (unint64_t)[v67 integerValue];

                    unint64_t v70 = v68;
                    unint64_t v69 = v102 * v68;
                    if (!is_mul_ok(v102, v70)) {
                      BUG();
                    }
                    BOOL v71 = __OFADD__(v69, v61);
                    unint64_t v72 = v69 + v61;
                    if (v71) {
                      BUG();
                    }
                    id v73 = [v116 strides];
                    id v74 = v73;
                    uint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, v56);

                    if ((v75 & 0xC000000000000003) != 0)
                    {
                      id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v75);
                    }
                    else
                    {
                      if (*(void *)((char *)&dword_10 + (v75 & 0xFFFFFFFFFFFFF8)) < 3uLL) {
                        BUG();
                      }
                      id v76 = *(id *)(v75 + 48);
                    }
                    swift_bridgeObjectRelease(v75);
                    unint64_t v77 = (unint64_t)[v76 integerValue];

                    unint64_t v79 = v77;
                    unint64_t v78 = v53 * v77;
                    if (!is_mul_ok(v53, v79)) {
                      BUG();
                    }
                    BOOL v71 = __OFADD__(v78, v72);
                    unint64_t v80 = v78 + v72;
                    if (v71) {
                      BUG();
                    }
                    if ((_BYTE)v111)
                    {
                      char v32 = v113;
                      if (v111 != 1)
                      {
                        outlined consume of MLDataValue(*(void **)&v117, v115, v111);
                        uint64_t v88 = v110;
                        outlined consume of MLDataValue(v32, v110, 3);
                        outlined consume of MLDataValue(v32, v88, 3);
                        uint64_t v89 = v114;
                        uint64_t v90 = v109;
                        uint64_t v91 = v107;
                        outlined consume of (offset: Int, element: MLDataValue)?(v114, v109, v107, 3);
                        outlined consume of (offset: Int, element: MLDataValue)?(v89, v90, v91, 3);

                        outlined consume of MLDataValue(v113, v88, 3);
                        uint64_t v92 = v89;
                        Swift::String v93 = v90;
                        char v94 = v91;
                        goto LABEL_69;
                      }
                      unint64_t v81 = v53;
                      *(double *)(v101 + 8 * v80) = v117;
                    }
                    else
                    {
                      double v14 = (double)SLODWORD(v117);
                      *(double *)(v101 + 8 * v80) = (double)SLODWORD(v117);
                      char v32 = v113;
                      unint64_t v81 = v53;
                    }
                    uint64_t v33 = v81 + 1;
                    uint64_t v82 = CMLSequence.size.getter();
                    uint64_t v9 = v112;
                    if (v33 == v82)
                    {
                      id v83 = v110;
                      outlined consume of MLDataValue(v32, v110, 3);
                      outlined consume of MLDataValue(v32, v83, 3);
                      outlined consume of MLDataValue(v32, v83, 3);
                      goto LABEL_58;
                    }
                    break;
                }
              }
            }
            id v84 = v110;
            outlined consume of MLDataValue(v32, v110, 3);
            outlined consume of MLDataValue(v32, v84, 3);
            swift_release();
LABEL_58:
            uint64_t v21 = v102 + 1;
            uint64_t v22 = v109;
            if (v21 == CMLSequence.size.getter()) {
              goto LABEL_61;
            }
          }
          outlined consume of MLDataValue(v27, v28, v26);
          uint64_t v95 = v114;
          uint64_t v96 = v109;
          outlined consume of (offset: Int, element: MLDataValue)?(v114, v109, v25, 3);
          outlined consume of (offset: Int, element: MLDataValue)?(v95, v96, v25, 3);

          uint64_t v92 = v95;
          Swift::String v93 = v96;
          char v94 = v25;
LABEL_69:
          outlined consume of (offset: Int, element: MLDataValue)?(v92, v93, v94, 3);
          swift_release();
          goto LABEL_63;
        }
        uint64_t v22 = v109;
LABEL_61:
        uint64_t v85 = v114;
        char v86 = v107;
        outlined consume of (offset: Int, element: MLDataValue)?(v114, v22, v107, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v85, v22, v86, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v85, v22, v86, 3);
      }
      if (v106 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v116);
        uint64_t result = v103;
        *uint64_t v108 = v103;
        return result;
      }

      swift_release();
      char v97 = v109;
      uint64_t v98 = v114;
      goto LABEL_72;
    }
  }
LABEL_63:
  uint64_t result = v108;
  *uint64_t v108 = 0;
  return result;
}

void *MLHandActionClassifier.prediction(from:)(void *a1)
{
  return MLHandActionClassifier.modelPrediction(on:using:)(a1, *(void **)(v1 + 16));
}

void *MLHandActionClassifier.modelPrediction(on:using:)(void *a1, void *a2)
{
  uint64_t v4 = v3 + *(int *)(type metadata accessor for MLHandActionClassifier(0) + 28);
  id v5 = (void *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  uint64_t v6 = static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, kCMTimeZero.value, *(void *)&kCMTimeZero.timescale, kCMTimeZero.epoch, kCMTimeIndefinite.value, *(void *)&kCMTimeIndefinite.timescale, *(double *)(*((int *)v5 + 10) + v4), kCMTimeIndefinite.epoch);
  if (!v2)
  {
    uint64_t v21 = v5;
    uint64_t v24 = v6[2];
    if (v24)
    {
      uint64_t v19 = v6;
      specialized ContiguousArray.reserveCapacity(_:)(v24);
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = (void *)v19[v7++ + 4];
        v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        uint64_t v9 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9);
        specialized ContiguousArray._endMutation()(v9);
      }
      while (v24 != v7);
      swift_bridgeObjectRelease((_BYTE)v19);
    }
    else
    {
      swift_bridgeObjectRelease((_BYTE)v6);
    }
    uint64_t v10 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)((uint64_t)_swiftEmptyArrayStorage, *(void *)(v4 + *((int *)v21 + 7)), 21);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    uint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      char v23 = v10;
      uint64_t v13 = (_OWORD *)(v10 + 40);
      id v5 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v25 = v12;
        long long v20 = *v13;
        id v14 = *((id *)v13 - 1);
        uint64_t v22 = MLHandActionClassifier.modelPrediction(on:using:)(v14, a2);
        if (!swift_isUniquelyReferenced_nonNull_native(v5)) {
          id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, (uint64_t)v5);
        }
        unint64_t v15 = v5[2];
        unint64_t v16 = v15 + 1;
        if (v5[3] >> 1 <= v15)
        {
          char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5[3] >= 2uLL, v15 + 1, 1, (uint64_t)v5);
          unint64_t v16 = v15 + 1;
          id v5 = v18;
        }
        _OWORD v5[2] = v16;
        uint64_t v17 = 3 * v15;
        *(_OWORD *)&v5[v17 + 4] = v20;
        v5[v17 + 6] = v22;

        uint64_t v13 = (_OWORD *)((char *)v13 + 24);
        uint64_t v12 = v25 - 1;
      }
      while (v25 != 1);
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      swift_bridgeObjectRelease(v10);
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *inited;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  int64_t v73;
  void *v75;
  void v76[2];
  void *v77;
  unsigned char v78[40];
  id v79;
  _OWORD v80[2];
  uint64_t v81;
  id v82;
  _OWORD v83[2];
  uint64_t v84;
  _OWORD v85[2];
  uint64_t v86;
  id v87;
  _OWORD v88[2];
  uint64_t v89;
  void *v90;
  id v91[6];
  char v92[80];

  uint64_t v4 = [a1 shape];
  id v5 = v4;
  unint64_t v72 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber, NSNumber_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v72);

  if ((v6 & 0x4000000000000001) != 0)
  {
    id v64 = v6 & 0xFFFFFFFFFFFFF8;
    if (v6) {
      id v64 = v6;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v64);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease(v6);
  if (v7 != 3) {
    goto LABEL_25;
  }
  uint64_t v8 = [a1 shape];
  uint64_t v9 = v8;
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v72);

  id v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = (void *)swift_allocObject(v11, 56, 7);
  v12[2] = 3;
  void v12[3] = 7;
  uint64_t v13 = *(int *)(type metadata accessor for MLHandActionClassifier(0) + 28) + v3;
  id v14 = *(void *)(*(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28) + v13);
  unint64_t v15 = objc_allocWithZone((Class)NSNumber);
  _OWORD v12[4] = [v15 initWithInteger:v14];
  unint64_t v16 = objc_allocWithZone((Class)NSNumber);
  void v12[5] = [v16 initWithInteger:3];
  uint64_t v17 = objc_allocWithZone((Class)NSNumber);
  v12[6] = [v17 initWithInteger:21];
  specialized Array._endMutation()(v17, "initWithInteger:");
  LOBYTE(v14) = (_BYTE)v12;
  uint64_t v6 = specialized static Array<A>.== infix(_:_:)(v10, (uint64_t)v12);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  if (v6)
  {
    char v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (void *)swift_initStackObject(v18, v92);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = 0x7365736F70;
    inited[5] = 0xE500000000000000;
    long long v20 = objc_opt_self(MLFeatureValue);
    uint64_t v21 = [v20 featureValueWithMultiArray:a1];
    uint64_t v6 = (uint64_t)v21;
    inited[9] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for MLFeatureValue, MLFeatureValue_ptr);
    inited[6] = v6;
    uint64_t v22 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    objc_allocWithZone((Class)MLDictionaryFeatureProvider);
    char v23 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)(v22);
    if (!v2)
    {
      uint64_t v6 = (uint64_t)v23;
      v91[0] = 0;
      uint64_t v24 = [a2 predictionFromFeatures:v23 error:v91];
      uint64_t v25 = v24;
      char v26 = v91[0];
      if (v25)
      {
        unint64_t v70 = (id)v6;
        uint64_t v27 = v25;
        v91[0];
        uint64_t v6 = (uint64_t)String._bridgeToObjectiveC()();
        BOOL v71 = v27;
        uint64_t v28 = [v27 featureValueForName:v6];
        uint64_t v29 = v28;

        if (v29)
        {
          uint64_t v30 = [v29 dictionaryValue];
          uint64_t v31 = v30;

          char v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for AnyHashable, v72, &protocol witness table for AnyHashable);
          uint64_t v33 = *(void *)(v32 + 16);
          if (v33)
          {
            unint64_t v77 = _swiftEmptyArrayStorage;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
            uint64_t v34 = specialized Dictionary.startIndex.getter(v32);
            if (v34 < 0 || v34 >= 1 << *(unsigned char *)(v32 + 32)) {
LABEL_34:
            }
              BUG();
            uint64_t v75 = (void *)(v32 + 64);
            unint64_t v68 = v32;
            while (1)
            {
              uint64_t v65 = v33;
              uint64_t v36 = (unint64_t)v34 >> 6;
              uint64_t v37 = v75[(unint64_t)v34 >> 6];
              if (!_bittest64(&v37, v34)) {
                BUG();
              }
              if (v35 != *(_DWORD *)(v32 + 36)) {
                BUG();
              }
              id v66 = 1 << v34;
              uint64_t v67 = v35;
              uint64_t v38 = v34;
              outlined init with copy of AnyHashable(*(void *)(v32 + 48) + 40 * v34, (uint64_t)v91);
              id v73 = v38;
              uint64_t v39 = *(void **)(*(void *)(v32 + 56) + 8 * v38);
              v91[5] = v39;
              outlined init with copy of AnyHashable((uint64_t)v91, (uint64_t)v88);
              uint64_t v90 = v39;
              char v86 = v89;
              id v87 = v39;
              v85[1] = v88[1];
              v85[0] = v88[0];
              uint64_t v40 = v39;
              v40;
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v91, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v85, (uint64_t)v80);
              uint64_t v82 = v87;
              uint64_t v41 = *(void *)&v80[0];
              v83[0] = v80[0];
              v83[1] = v80[1];
              id v84 = v81;
              swift_dynamicCast(v76, v83, &type metadata for AnyHashable, &type metadata for String, 7);
              outlined init with copy of AnyHashable((uint64_t)v85, (uint64_t)v78);
              unint64_t v79 = v87;
              [v87 doubleValue];
              outlined destroy of AnyHashable((uint64_t)v78);
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v85, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              uint64_t v42 = v76[0];
              uint64_t v6 = (uint64_t)v77;
              unint64_t v69 = (id)v76[1];
              if (!swift_isUniquelyReferenced_nonNull_native(v77))
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
                uint64_t v6 = (uint64_t)v77;
              }
              Swift::String v43 = *(void *)(v6 + 16);
              uint64_t v44 = v43 + 1;
              uint64_t v45 = v73;
              if (*(void *)(v6 + 24) >> 1 <= v43)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(v6 + 24) >= 2uLL, v43 + 1, 1);
                uint64_t v44 = v43 + 1;
                uint64_t v45 = v73;
                uint64_t v6 = (uint64_t)v77;
              }
              *(void *)(v6 + 16) = v44;
              uint64_t v46 = 24 * v43;
              *(void *)(v6 + v46 + 32) = v42;
              *(void *)(v6 + v46 + 40) = v69;
              *(void *)(v6 + v46 + 48) = v41;
              char v32 = v68;
              uint64_t v47 = -1 << *(unsigned char *)(v68 + 32);
              if (v45 >= -v47) {
                BUG();
              }
              if ((v66 & v75[v36]) == 0) {
                BUG();
              }
              if (v67 != *(_DWORD *)(v68 + 36)) {
                BUG();
              }
              uint64_t v34 = _HashTable.occupiedBucket(after:)(v45, v75, ~v47);
              uint64_t v33 = v65 - 1;
              if (v65 == 1) {
                break;
              }
              if (v34 >= 0)
              {
                int64_t v35 = *(_DWORD *)(v68 + 36);
                if (v34 < 1 << *(unsigned char *)(v68 + 32)) {
                  continue;
                }
              }
              goto LABEL_34;
            }
            swift_bridgeObjectRelease(v68);
            swift_unknownObjectRelease(v71);
          }
          else
          {
            swift_bridgeObjectRelease(v32);
            swift_unknownObjectRelease(v71);

            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          uint64_t v59 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v59, 0, 0);
          *(void *)unint64_t v60 = 0xD000000000000028;
          *(void *)(v60 + 8) = "labelProbabilities" + 0x8000000000000000;
          *(_OWORD *)(v60 + 16) = 0;
          *(_OWORD *)(v60 + 32) = 0;
          *(unsigned char *)(v60 + 48) = 0;
          swift_willThrow(&type metadata for MLCreateError, v59, v60, v61, v62, v63);

          swift_unknownObjectRelease(v27);
        }
      }
      else
      {
        id v54 = v91[0];
        _convertNSErrorToError(_:)(v26);

        swift_willThrow(v54, "predictionFromFeatures:error:", v55, v56, v57, v58);
      }
    }
  }
  else
  {
LABEL_25:
    uint64_t v48 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v48, 0, 0);
    *(void *)uint64_t v49 = 0xD000000000000025;
    *(void *)(v49 + 8) = "rt requested type" + 0x8000000000000000;
    *(_OWORD *)(v49 + 16) = 0;
    *(_OWORD *)(v49 + 32) = 0;
    *(unsigned char *)(v49 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v48, v49, v50, v51, v52);
  }
  return (void *)v6;
}

void *MLHandActionClassifier.predictions(from:)(uint64_t a1)
{
  v3[2] = v1;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML22MLHandActionClassifierV10PredictionVGsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #1 in MLHandActionClassifier.predictions(from:), v3, a1);
}

void *closure #1 in MLHandActionClassifier.predictions(from:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = v3;
  uint64_t result = MLHandActionClassifier.modelPrediction(on:using:)(a1, *(void **)(a2 + 16));
  if (v4) {
    *a3 = v4;
  }
  else {
    void *v6 = result;
  }
  return result;
}

uint64_t MLHandActionClassifier.evaluation(on:)(double a1, double a2)
{
  uint64_t result = MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((__m128)0x403E000000000000uLL);
  if (!v2)
  {
    uint64_t v8 = v6;
    int v9 = v7;
    uint64_t v5 = type metadata accessor for MLHandActionClassifier(0);
    MLHandActionClassifier.evaluation(on:parameters:)(&v6, v3 + *(int *)(v5 + 28), 30.0, a2);
    return outlined consume of Result<_DataTable, Error>(v8, v9);
  }
  return result;
}

char *MLHandActionClassifier.addHandActionClassifierSpecificMetadata(_:)(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for MLHandActionClassifier(0);
  int64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = alloca(v5);
  unsigned __int8 v7 = alloca(v5);
  uint64_t v8 = alloca(v5);
  int v9 = alloca(v5);
  uint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v147 = v4;
    uint64_t v149 = v2;
    uint64_t v127 = v3;
    uint64_t v136 = *a1;
    uint64_t v11 = a1[2];
    uint64_t v12 = a1[3];
    uint64_t v133 = a1[4];
    uint64_t v134 = a1[5];
    char v135 = (char *)a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = a1[8];
    uint64_t v145 = v13;
    uint64_t v131 = v11;
    if (!v14)
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t inited = (void *)swift_initStackObject(v41, v126);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 0xD000000000000016;
      inited[5] = "Number of Labels" + 0x8000000000000000;
      v149 += *(int *)(v147 + 28);
      uint64_t v43 = v149;
      uint64_t v147 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
      v150[0] = *(void *)(*(int *)(v147 + 28) + v43);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v145);
      char v44 = v134;
      outlined copy of MLModelMetadata?(v136, v10, v131, v12, v133, v134, (uint64_t)v135, v145, 0);
      swift_bridgeObjectRetain(v44);
      inited[6] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      inited[7] = v45;
      inited[8] = 0xD000000000000011;
      inited[9] = "lassification algorithm." + 0x8000000000000000;
      unint64_t v40 = v145;
      inited[10] = Double.description.getter(*(double *)(*(int *)(v147 + 40) + v149));
      inited[11] = v46;
      uint64_t v148 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String, &protocol witness table for String);
LABEL_35:
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      uint64_t v114 = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease_n(v10, 2, v115, v116, v117);
      swift_bridgeObjectRelease_n(v12, 2, v118, v119, v120);
      swift_bridgeObjectRelease_n(v114, 2, v121, v122, v123);
      uint64_t v3 = v127;
      *uint64_t v127 = v136;
      v3[1] = v10;
      v3[2] = v131;
      void v3[3] = v12;
      void v3[4] = v133;
      void v3[5] = v114;
      uint64_t result = v135;
      void v3[6] = (uint64_t)v135;
      uint64_t v33 = v148;
      goto LABEL_36;
    }
    uint64_t v144 = &v124;
    char v129 = &v124;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    uint64_t v128 = v10;
    uint64_t v15 = v10;
    uint64_t v143 = v12;
    char v16 = v134;
    outlined copy of MLModelMetadata?(v136, v15, v11, v12, v133, v134, (uint64_t)v135, v13, v14);
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = specialized Dictionary.subscript.getter(0xD000000000000016, (uint64_t)("Number of Labels" + 0x8000000000000000), v14);
    uint64_t v142 = v14;
    if (!v18)
    {
      uint64_t v47 = v149 + *(int *)(v147 + 28);
      v150[0] = *(void *)(*(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28) + v47);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      uint64_t v50 = v49;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      v150[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v50, 0xD000000000000016, (uint64_t)("Number of Labels" + 0x8000000000000000), isUniquelyReferenced_nonNull_native);
      uint64_t v52 = v150[0];
      swift_bridgeObjectRelease(0);
      goto LABEL_19;
    }
    int64_t v19 = v18;
    uint64_t v138 = "Number of Labels" + 0x8000000000000000;
    uint64_t v137 = (char *)0xD000000000000016;
    uint64_t v20 = v149 + *(int *)(v147 + 28);
    uint64_t v148 = v17;
    uint64_t v21 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    uint64_t v22 = *(int *)(v21 + 28);
    v150[0] = *(void *)(v22 + v20);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v25 = v24;
    if (v148 == v23 && v19 == v24)
    {
      swift_bridgeObjectRelease(v19);
      char v26 = v25;
    }
    else
    {
      uint64_t v139 = v21;
      char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v148, v19, v23, v24, 0);
      swift_bridgeObjectRelease(v25);
      if ((v53 & 1) == 0)
      {
        *(void *)uint64_t v140 = v22;
        if (one-time initialization token for logger != -1) {
          swift_once(&one-time initialization token for logger, one-time initialization function for logger);
        }
        uint64_t v54 = type metadata accessor for Logger(0);
        __swift_project_value_buffer(v54, (uint64_t)static MLHandActionClassifier.logger);
        uint64_t v55 = (uint64_t)v144;
        outlined init with copy of MLTrainingSessionParameters(v149, (uint64_t)v144, type metadata accessor for MLHandActionClassifier);
        swift_bridgeObjectRetain(v19);
        uint64_t v56 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        int v58 = v57;
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v59 = swift_slowAlloc(22, -1);
          *(_DWORD *)type = v58;
          uint64_t v60 = v59;
          os_log_t v141 = (os_log_t)swift_slowAlloc(32, -1);
          v150[0] = (uint64_t)v141;
          *(_DWORD *)uint64_t v60 = 136315394;
          os_log_t log = v56;
          swift_bridgeObjectRetain(v19);
          uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v19, v150);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v60 + 4, v60 + 12);
          swift_bridgeObjectRelease_n(v19, 3, v61, v62, v63);
          *(_WORD *)(v60 + 12) = 2048;
          uint64_t v64 = *(void *)(*(int *)(v139 + 28) + *(int *)(v147 + 28) + v55);
          outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLHandActionClassifier);
          uint64_t v146 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v60 + 14, v60 + 22);
          os_log_t v65 = log;
          _os_log_impl(&dword_0, log, type[0], "Prediction window size %s is set incorrectly, change it to %ld frames.", (uint8_t *)v60, 0x16u);
          os_log_t v66 = v141;
          swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v60, -1, -1);
        }
        else
        {
          outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLHandActionClassifier);

          swift_bridgeObjectRelease_n(v19, 2, v67, v68, v69);
        }
        v150[0] = *(void *)(v20 + *(void *)v140);
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        uint64_t v72 = v71;
        uint64_t v73 = v142;
        char v74 = swift_isUniquelyReferenced_nonNull_native(v142);
        v150[0] = v73;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v72, (uint64_t)v137, (uint64_t)v138, v74);
        uint64_t v52 = v150[0];
        swift_bridgeObjectRelease(0);
LABEL_19:
        uint64_t v75 = specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("lassification algorithm." + 0x8000000000000000), v52);
        unint64_t v40 = v145;
        if (v76)
        {
          int64_t v77 = v76;
          uint64_t v137 = "lassification algorithm." + 0x8000000000000000;
          uint64_t v148 = v52;
          uint64_t v78 = v149 + *(int *)(v147 + 28);
          uint64_t v144 = (uint64_t *)v75;
          uint64_t v138 = (char *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
          uint64_t v79 = *((int *)v138 + 10);
          uint64_t v80 = Double.description.getter(*(double *)(v79 + v78));
          char v82 = v81;
          if (v144 != (uint64_t *)v80 || v77 != v81)
          {
            char v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v144, v77, v80, v81, 0);
            swift_bridgeObjectRelease(v82);
            if (v91)
            {
              char v92 = v77;
            }
            else
            {
              uint64_t v139 = v79;
              if (one-time initialization token for logger != -1) {
                swift_once(&one-time initialization token for logger, one-time initialization function for logger);
              }
              uint64_t v93 = type metadata accessor for Logger(0);
              __swift_project_value_buffer(v93, (uint64_t)static MLHandActionClassifier.logger);
              uint64_t v94 = (uint64_t)v129;
              outlined init with copy of MLTrainingSessionParameters(v149, (uint64_t)v129, type metadata accessor for MLHandActionClassifier);
              swift_bridgeObjectRetain(v77);
              uint64_t v95 = (os_log_s *)Logger.logObject.getter();
              os_log_type_t v96 = static os_log_type_t.info.getter();
              int v97 = v96;
              if (os_log_type_enabled(v95, v96))
              {
                uint64_t v101 = swift_slowAlloc(22, -1);
                *(_DWORD *)uint64_t v140 = v97;
                uint64_t v102 = v101;
                uint64_t v149 = swift_slowAlloc(32, -1);
                v150[0] = v149;
                *(_DWORD *)uint64_t v102 = 136315394;
                os_log_t v141 = v95;
                swift_bridgeObjectRetain(v77);
                uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v144, v77, v150);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v102 + 4, v102 + 12);
                swift_bridgeObjectRelease_n(v77, 3, v103, v104, v105);
                *(_WORD *)(v102 + 12) = 2048;
                uint64_t v146 = *(void *)(*((int *)v138 + 10) + *(int *)(v147 + 28) + v94);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v102 + 14, v102 + 22);
                outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLHandActionClassifier);
                os_log_t v106 = v141;
                _os_log_impl(&dword_0, v141, v140[0], "Target frame rate %s is set incorrectly, change it to %f.", (uint8_t *)v102, 0x16u);
                uint64_t v107 = v149;
                swift_arrayDestroy(v149, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v107, -1, -1);
                swift_slowDealloc(v102, -1, -1);
                os_log_t v108 = v106;
              }
              else
              {
                swift_bridgeObjectRelease_n(v77, 2, v98, v99, v100);
                outlined destroy of MLActivityClassifier.ModelParameters(v94, type metadata accessor for MLHandActionClassifier);
                os_log_t v108 = v95;
              }

              uint64_t v109 = v148;
              uint64_t v110 = Double.description.getter(*(double *)(v78 + v139));
              uint64_t v112 = v111;
              char v113 = swift_isUniquelyReferenced_nonNull_native(v109);
              v150[0] = v109;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v110, v112, 0xD000000000000011, (uint64_t)v137, v113);
              uint64_t v148 = v150[0];
              char v92 = 0;
            }
            swift_bridgeObjectRelease(v92);
            uint64_t v12 = v143;
            unint64_t v40 = v145;
            goto LABEL_34;
          }
          swift_bridgeObjectRelease(v77);
          char v83 = v82;
        }
        else
        {
          uint64_t v84 = *(int *)(v147 + 28) + v149;
          uint64_t v85 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
          uint64_t v86 = Double.description.getter(*(double *)(*(int *)(v85 + 40) + v84));
          uint64_t v88 = v87;
          char v89 = swift_isUniquelyReferenced_nonNull_native(v52);
          v150[0] = v52;
          uint64_t v90 = v86;
          unint64_t v40 = v145;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v90, v88, 0xD000000000000011, (uint64_t)("lassification algorithm." + 0x8000000000000000), v89);
          uint64_t v148 = v150[0];
          char v83 = 0;
        }
        swift_bridgeObjectRelease(v83);
        uint64_t v12 = v143;
LABEL_34:
        swift_bridgeObjectRelease(v142);
        uint64_t v10 = v128;
        goto LABEL_35;
      }
      char v26 = v19;
    }
    swift_bridgeObjectRelease(v26);
    uint64_t v52 = v142;
    goto LABEL_19;
  }
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t v28 = (void *)swift_initStackObject(v27, v125);
  v28[2] = 2;
  v28[3] = 4;
  _OWORD v28[4] = 0xD000000000000016;
  v28[5] = "Number of Labels" + 0x8000000000000000;
  uint64_t v29 = *(int *)(v4 + 28) + v2;
  uint64_t v30 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  v150[0] = *(void *)(*(int *)(v30 + 28) + v29);
  v28[6] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v28[7] = v31;
  v28[8] = 0xD000000000000011;
  v28[9] = "lassification algorithm." + 0x8000000000000000;
  v28[10] = Double.description.getter(*(double *)(*(int *)(v30 + 40) + v29));
  v28[11] = v32;
  uint64_t v33 = Dictionary.init(dictionaryLiteral:)(v28, &type metadata for String, &type metadata for String, &protocol witness table for String);
  uint64_t v34 = NSFullUserName();
  int64_t v35 = v34;
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  *uint64_t v3 = v36;
  v3[1] = v38;
  v3[2] = 0xD000000000000033;
  uint64_t result = "RandomForestRegressor" + 0x8000000000000000;
  void v3[3] = (uint64_t)("RandomForestRegressor" + 0x8000000000000000);
  *((_OWORD *)v3 + 2) = 0;
  void v3[6] = 49;
  unint64_t v40 = 0xE100000000000000;
LABEL_36:
  void v3[7] = v40;
  v3[8] = v33;
  return result;
}

uint64_t MLHandActionClassifier.writeLegacyModel(to:metadata:)(uint64_t a1, long long *a2)
{
  char v26 = v2;
  uint64_t v22 = v3;
  uint64_t v25 = type metadata accessor for Model(0);
  uint64_t v24 = *(void *)(v25 - 8);
  int64_t v4 = *(void *)(v24 + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v27 = v16;
  uint64_t v23 = type metadata accessor for URL(0);
  uint64_t v7 = *(void *)(v23 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  int v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  long long v18 = *a2;
  long long v19 = a2[1];
  long long v20 = a2[2];
  long long v21 = a2[3];
  uint64_t v11 = *((void *)a2 + 8);
  uint64_t v12 = v26;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, 0xD000000000000014, (unint64_t)("HandPoseClassifier" + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v12)
  {
    char v26 = v16;
    v16[0] = v18;
    v16[1] = v19;
    void v16[2] = v20;
    v16[3] = v21;
    uint64_t v17 = v11;
    MLHandActionClassifier.GraphCNN.export(metadata:)((uint64_t *)v16);
    uint64_t v14 = v26;
    Model.write(to:)(v26);
    uint64_t v15 = v23;
    (*(void (**)(_OWORD *, uint64_t))(v24 + 8))(v27, v25);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v7 + 8))(v14, v15);
  }
  return result;
}

uint64_t outlined consume of MLModelMetadata?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLHandActionClassifier;
  if (!type metadata singleton initialization cache for MLHandActionClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLHandActionClassifier);
  }
  return result;
}

uint64_t MLHandActionClassifier.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3, double a4, double a5)
{
  uint64_t v25 = v5;
  uint64_t v27 = a2;
  uint64_t v26 = a1;
  uint64_t v28 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v29 = *(void *)(v28 - 8);
  int64_t v7 = *(void *)(v29 + 64);
  int64_t v8 = alloca(v7);
  int v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v13 = type metadata accessor for URL(0);
  uint64_t v31 = *(void *)(v13 - 8);
  int64_t v14 = *(void *)(v31 + 64);
  uint64_t v15 = alloca(v14);
  char v16 = alloca(v14);
  uint64_t v30 = *((void *)a3 + 8);
  long long v21 = *a3;
  long long v22 = a3[1];
  long long v23 = a3[2];
  *(_OWORD *)uint64_t v24 = a3[3];
  uint64_t v32 = v13;
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v13);
  (*(void (**)(_OWORD *, void, uint64_t))(v29 + 104))(v19, enum case for URL.DirectoryHint.inferFromPath(_:), v28);
  uint64_t v17 = v27;
  swift_bridgeObjectRetain(v27);
  URL.init(filePath:directoryHint:relativeTo:)(v26, v17, v19, v19);
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  v19[3] = *(_OWORD *)v24;
  uint64_t v20 = v30;
  MLHandActionClassifier.write(to:metadata:)((uint64_t)v19, (uint64_t)v19, v24[0], a5);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v31 + 8))(v19, v32);
}

unint64_t MLHandActionClassifier.description.getter()
{
  return MLHandActionClassifier.debugDescription.getter();
}

unint64_t MLHandActionClassifier.debugDescription.getter()
{
  uint64_t v1 = v0;
  v25._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v25._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLHandActionClassifier(0);
  v25._uint64_t countAndFlagsBits = MLHandActionClassifier.ModelParameters.description.getter();
  int64_t v7 = v6;
  v22._uint64_t countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
  v22._char object = v8;
  uint64_t v9 = *(int *)(v5 + 36);
  int64_t v10 = v7;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v7) = swift_getEnumCaseMultiPayload(&v20, v25._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  v25._char object = (void *)MLClassifierMetrics.accuracyDescription.getter();
  uint64_t v12 = v11;
  unint64_t v23 = 0xD000000000000021;
  uint64_t v24 = "Gazetteer\n\nParameters\n" + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v25._countAndFlagsBits;
  v25._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v22._object;
  String.append(_:)(v22);
  char v15 = (char)v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  if (v7 > 1)
  {
    char v18 = object;
  }
  else
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v16._uint64_t countAndFlagsBits = (uint64_t)v25._object;
    v16._char object = v12;
    String.append(_:)(v16);
    char v17 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    char v18 = (char)v12;
    LOBYTE(v12) = v17;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v25._countAndFlagsBits);
  return v23;
}

NSAttributedString MLHandActionClassifier.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSAttributedString, NSAttributedString_ptr);
  v3._uint64_t countAndFlagsBits = MLHandActionClassifier.debugDescription.getter();
  v3._char object = v4;
  result.super.id isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.id isa = (Class)v2;
  v1->super.id isa = result.super.isa;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLHandActionClassifier()
{
  return MLHandActionClassifier.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLHandActionClassifier()
{
  return MLHandActionClassifier.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLHandActionClassifier()
{
  return MLHandActionClassifier.playgroundDescription.getter();
}

id @nonobjc MLDictionaryFeatureProvider.init(dictionary:)(uint64_t a1)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v7 = 0;
  id v3 = [v1 initWithDictionary:isa error:&v7];

  id v4 = v7;
  if (v3)
  {
    v7;
  }
  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1A5674()
{
  uint64_t v1 = *(void *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 41);
  uint64_t v4 = *(void *)(v1 + 64);
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
  uint64_t v5 = v3 + v0;
  uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v3 + v0, v6) == 1)
  {
    uint64_t v7 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v3 + v0, v7))
    {
      case 0u:
        uint64_t v17 = type metadata accessor for URL(0);
        char v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
        v18(v3 + v0, v17);
        uint64_t v19 = v4;
        uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v18(v5 + v9[12], v17);
        swift_bridgeObjectRelease(*(void *)(v5 + v9[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v9[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v9[24] + 8));
        uint64_t v10 = v9[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v3 + v0, v8);
        return swift_deallocObject(v0, v4 + v3, v2 | 7);
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        uint64_t v11 = *(void *)(v5 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v5, *(_DWORD *)(v5 + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + 24));
        swift_bridgeObjectRelease(*(void *)(v5 + 40));
        swift_bridgeObjectRelease(*(void *)(v5 + 56));
        uint64_t v11 = *(void *)(v5 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v3 + v0, v12);
        uint64_t v19 = v4;
        Swift::String v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v5 + v13[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v13[16] + 8));
        uint64_t v10 = v13[20];
        goto LABEL_9;
      case 6u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v3 + v0, v14);
        uint64_t v19 = v4;
        char v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v5 + v15[20] + 8));
        uint64_t v10 = v15[24];
LABEL_9:
        uint64_t v4 = v19;
        uint64_t v11 = *(void *)(v5 + v10 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v11);
        break;
      default:
        return swift_deallocObject(v0, v4 + v3, v2 | 7);
    }
  }
  return swift_deallocObject(v0, v4 + v3, v2 | 7);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  char v9 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  char v10 = *(unsigned char *)(v1 + 40);
  uint64_t v6 = v1
     + (~*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) & (*(unsigned __int8 *)(*(void *)(v3 - 8)
                                                                                              + 80)
                                                           + 41));
  uint64_t v7 = (void *)swift_task_alloc(dword_3AA614);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(a1, v4, v9, v5, v10, v6);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v2 = (void *)swift_task_alloc(dword_3AA624);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLHandActionClassifier.init(checkpoint:)(a1);
}

void *partial apply for closure #1 in MLHandActionClassifier.predictions(from:)(void *a1, void *a2)
{
  return closure #1 in MLHandActionClassifier.predictions(from:)(a1, *(void *)(v2 + 16), a2);
}

void *initializeBufferWithCopyOfBuffer for MLHandActionClassifier(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v17 = (void *)(v4 + ((v3 + 16) & ~v3));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v5 = (void *)a2[2];
    a1[2] = v5;
    uint64_t v6 = a3[7];
    __dst = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v102 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    swift_bridgeObjectRetain(v4);
    swift_retain();
    char v9 = v5;
    uint64_t v10 = v102;
    v9;
    uint64_t v101 = a1;
    if (swift_getEnumCaseMultiPayload(v8, v102) == 1)
    {
      uint64_t v11 = __dst;
      uint64_t v12 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v12);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          unsigned int v112 = EnumCaseMultiPayload;
          uint64_t v19 = type metadata accessor for URL(0);
          uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
          v20(__dst, v8, v19);
          uint64_t v108 = v12;
          Swift::String v21 = v8;
          Swift::String v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v20(&__dst[v22[12]], &v21[v22[12]], v19);
          uint64_t v23 = v22[16];
          *(void *)&__dst[v23] = *(void *)&v21[v23];
          uint64_t v24 = *(void *)&v21[v23 + 8];
          *(void *)&__dst[v23 + 8] = v24;
          uint64_t v25 = v22[20];
          *(void *)&__dst[v25] = *(void *)&v21[v25];
          uint64_t v26 = *(void *)&v21[v25 + 8];
          *(void *)&__dst[v25 + 8] = v26;
          uint64_t v27 = v22[24];
          *(void *)&__dst[v27] = *(void *)&v21[v27];
          uint64_t v28 = *(void *)&v21[v27 + 8];
          *(void *)&__dst[v27 + 8] = v28;
          uint64_t v29 = v22[28];
          *(void *)&__dst[v29] = *(void *)&v21[v29];
          uint64_t v30 = *(void *)&v21[v29 + 8];
          *(void *)&__dst[v29 + 8] = v30;
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v26);
          LOBYTE(v24) = v28;
          uint64_t v10 = v102;
          swift_bridgeObjectRetain(v24);
          char v31 = v30;
          uint64_t v8 = v21;
          goto LABEL_12;
        case 1u:
        case 2u:
          unsigned int v14 = EnumCaseMultiPayload;
          uint64_t v15 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v8, v15);
          uint64_t v16 = v14;
          goto LABEL_16;
        case 3u:
          uint64_t v32 = *(void *)v8;
          uint64_t v108 = v12;
          uint64_t v33 = v102;
          uint64_t v34 = v8;
          char v35 = v8[8];
          unsigned int v112 = EnumCaseMultiPayload;
          outlined copy of Result<_DataTable, Error>(v32, v35);
          *(void *)__dst = v32;
          __dst[8] = v35;
          *((void *)__dst + 2) = *((void *)v34 + 2);
          uint64_t v36 = *((void *)v34 + 3);
          *((void *)__dst + 3) = v36;
          *((void *)__dst + 4) = *((void *)v34 + 4);
          uint64_t v37 = *((void *)v34 + 5);
          *((void *)__dst + 5) = v37;
          *((void *)__dst + 6) = *((void *)v34 + 6);
          uint64_t v38 = *((void *)v34 + 7);
          *((void *)__dst + 7) = v38;
          goto LABEL_11;
        case 4u:
          uint64_t v39 = *(void *)v8;
          uint64_t v109 = v12;
          unint64_t v40 = v8;
          char v41 = v8[8];
          unsigned int v112 = EnumCaseMultiPayload;
          outlined copy of Result<_DataTable, Error>(v39, v41);
          *(void *)__dst = v39;
          __dst[8] = v41;
          *((void *)__dst + 2) = *((void *)v40 + 2);
          uint64_t v42 = *((void *)v40 + 3);
          *((void *)__dst + 3) = v42;
          *((void *)__dst + 4) = *((void *)v40 + 4);
          uint64_t v43 = *((void *)v40 + 5);
          *((void *)__dst + 5) = v43;
          *((void *)__dst + 6) = *((void *)v40 + 6);
          uint64_t v44 = *((void *)v40 + 7);
          *((void *)__dst + 7) = v44;
          *((void *)__dst + 8) = *((void *)v40 + 8);
          uint64_t v45 = *((void *)v40 + 9);
          *((void *)__dst + 9) = v45;
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v43);
          LOBYTE(v42) = v44;
          uint64_t v8 = v40;
          uint64_t v12 = v109;
          swift_bridgeObjectRetain(v42);
          char v31 = v45;
          uint64_t v11 = __dst;
          goto LABEL_14;
        case 5u:
          unsigned int v112 = EnumCaseMultiPayload;
          uint64_t v46 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(__dst, v8, v46);
          uint64_t v47 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v48 = v47[12];
          *(void *)&__dst[v48] = *(void *)&v8[v48];
          uint64_t v36 = *(void *)&v8[v48 + 8];
          *(void *)&__dst[v48 + 8] = v36;
          uint64_t v49 = v47[16];
          *(void *)&__dst[v49] = *(void *)&v8[v49];
          uint64_t v37 = *(void *)&v8[v49 + 8];
          *(void *)&__dst[v49 + 8] = v37;
          uint64_t v50 = v47[20];
          *(void *)&__dst[v50] = *(void *)&v8[v50];
          uint64_t v108 = v12;
          uint64_t v33 = v102;
          uint64_t v34 = v8;
          uint64_t v38 = *(void *)&v8[v50 + 8];
          *(void *)&__dst[v50 + 8] = v38;
LABEL_11:
          swift_bridgeObjectRetain(v36);
          swift_bridgeObjectRetain(v37);
          char v31 = v38;
          uint64_t v8 = v34;
          uint64_t v10 = v33;
LABEL_12:
          uint64_t v12 = v108;
          break;
        case 6u:
          unsigned int v112 = EnumCaseMultiPayload;
          uint64_t v51 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(__dst, v8, v51);
          uint64_t v52 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v53 = v52[12];
          *(void *)&__dst[v53] = *(void *)&v8[v53];
          uint64_t v54 = *(void *)&v8[v53 + 8];
          *(void *)&__dst[v53 + 8] = v54;
          uint64_t v55 = v52[16];
          *(void *)&__dst[v55] = *(void *)&v8[v55];
          uint64_t v56 = *(void *)&v8[v55 + 8];
          *(void *)&__dst[v55 + 8] = v56;
          uint64_t v57 = v52[20];
          *(void *)&__dst[v57] = *(void *)&v8[v57];
          uint64_t v110 = v12;
          int v58 = v8;
          uint64_t v59 = *(void *)&v8[v57 + 8];
          *(void *)&__dst[v57 + 8] = v59;
          uint64_t v60 = v52[24];
          *(void *)&__dst[v60] = *(void *)&v58[v60];
          uint64_t v61 = *(void *)&v58[v60 + 8];
          *(void *)&__dst[v60 + 8] = v61;
          swift_bridgeObjectRetain(v54);
          swift_bridgeObjectRetain(v56);
          LOBYTE(v54) = v59;
          uint64_t v8 = v58;
          uint64_t v12 = v110;
          swift_bridgeObjectRetain(v54);
          char v31 = v61;
LABEL_14:
          uint64_t v10 = v102;
          break;
      }
      swift_bridgeObjectRetain(v31);
      uint64_t v16 = v112;
LABEL_16:
      char v18 = a2;
      swift_storeEnumTagMultiPayload(v11, v12, v16);
      swift_storeEnumTagMultiPayload(v11, v10, 1);
    }
    else
    {
      uint64_t v11 = __dst;
      memcpy(__dst, v8, *(void *)(*(void *)(v102 - 8) + 64));
      char v18 = a2;
    }
    uint64_t v62 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    *(void *)&v11[v62[5]] = *(void *)&v8[v62[5]];
    *(void *)&v11[v62[6]] = *(void *)&v8[v62[6]];
    *(void *)&v11[v62[7]] = *(void *)&v8[v62[7]];
    *(void *)&v11[v62[8]] = *(void *)&v8[v62[8]];
    *(void *)&v11[v62[10]] = *(void *)&v8[v62[10]];
    uint64_t v63 = a3[8];
    uint64_t v64 = v101;
    os_log_t v65 = (char *)v101 + v63;
    os_log_t v66 = (char *)v18 + v63;
    uint64_t v103 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v67 = swift_getEnumCaseMultiPayload(v66, v103);
    if (v67 == 2)
    {
      uint64_t v73 = *(void *)v66;
      swift_errorRetain(*(void *)v66);
      *(void *)os_log_t v65 = v73;
      uint64_t v64 = v101;
    }
    else if (v67 == 1)
    {
      *(void *)os_log_t v65 = *(void *)v66;
      uint64_t v111 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v68 = *(int *)(v111 + 20);
      char v113 = &v65[v68];
      uint64_t v69 = type metadata accessor for DataFrame(0);
      __dstb = v65;
      uint64_t v70 = *(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16);
      uint64_t v71 = &v66[v68];
      char v18 = a2;
      v70(v113, v71, v69);
      uint64_t v72 = v69;
      uint64_t v64 = v101;
      v70(&__dstb[*(int *)(v111 + 24)], &v66[*(int *)(v111 + 24)], v72);
      os_log_t v65 = __dstb;
    }
    else
    {
      __dsta = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v74 = swift_getEnumCaseMultiPayload(v66, __dsta);
      BOOL v75 = v74 == 1;
      int64_t v76 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v74 == 1) {
        int64_t v76 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(v76);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16))(v65, v66, v77);
      swift_storeEnumTagMultiPayload(v65, __dsta, v75);
      char v18 = a2;
    }
    swift_storeEnumTagMultiPayload(v65, v103, v67);
    uint64_t v78 = a3[9];
    uint64_t v79 = (void *)((char *)v64 + v78);
    uint64_t v80 = (char *)v18 + v78;
    int v81 = swift_getEnumCaseMultiPayload(v80, v103);
    if (v81 == 2)
    {
      uint64_t v92 = *(void *)v80;
      swift_errorRetain(*(void *)v80);
      *uint64_t v79 = v92;
      uint64_t v17 = v101;
      uint64_t v89 = 2;
      uint64_t v90 = v79;
      uint64_t v91 = v103;
      goto LABEL_28;
    }
    if (v81 == 1)
    {
      *uint64_t v79 = *(void *)v80;
      uint64_t v82 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      char v83 = v80;
      uint64_t v84 = *(int *)(v82 + 20);
      uint64_t v100 = (char *)v79 + v84;
      uint64_t v85 = type metadata accessor for DataFrame(0);
      uint64_t v86 = &v83[v84];
      uint64_t v87 = *(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16);
      v87(v100, v86, v85);
      uint64_t v88 = *(int *)(v82 + 24);
      uint64_t v17 = v101;
      v87((char *)v79 + v88, &v83[v88], v85);
      uint64_t v89 = 1;
      uint64_t v90 = v79;
      uint64_t v91 = v103;
LABEL_28:
      swift_storeEnumTagMultiPayload(v90, v91, v89);
      return v17;
    }
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v94 = swift_getEnumCaseMultiPayload(v80, v93);
    BOOL v95 = v94 == 1;
    os_log_type_t v96 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v94 == 1) {
      os_log_type_t v96 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(v96);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v79, v80, v97);
    swift_storeEnumTagMultiPayload(v79, v93, v95);
    swift_storeEnumTagMultiPayload(v79, v103, 0);
    return v101;
  }
  return v17;
}

uint64_t destroy for MLHandActionClassifier(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease(*(void *)a1);
  swift_release();

  uint64_t v3 = a1 + a2[7];
  uint64_t v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v3, v4) == 1)
  {
    uint64_t v5 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v3, v5))
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL(0);
        uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
        v8(v3, v7);
        char v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(v3 + v9[12], v7);
        swift_bridgeObjectRelease(*(void *)(v3 + v9[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + v9[20] + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + v9[24] + 8));
        uint64_t v10 = v9[28];
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v6 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v3, *(_DWORD *)(v3 + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + 24));
        swift_bridgeObjectRelease(*(void *)(v3 + 40));
        uint64_t v11 = *(void *)(v3 + 56);
        goto LABEL_10;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(void *)v3, *(_DWORD *)(v3 + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + 24));
        swift_bridgeObjectRelease(*(void *)(v3 + 40));
        swift_bridgeObjectRelease(*(void *)(v3 + 56));
        uint64_t v11 = *(void *)(v3 + 72);
        goto LABEL_10;
      case 5u:
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v3, v12);
        Swift::String v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease(*(void *)(v3 + v13[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + v13[16] + 8));
        uint64_t v10 = v13[20];
        goto LABEL_9;
      case 6u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v3, v14);
        uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease(*(void *)(v3 + v15[12] + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + v15[16] + 8));
        swift_bridgeObjectRelease(*(void *)(v3 + v15[20] + 8));
        uint64_t v10 = v15[24];
LABEL_9:
        uint64_t v11 = *(void *)(v3 + v10 + 8);
LABEL_10:
        swift_bridgeObjectRelease(v11);
        break;
      default:
        break;
    }
  }
  uint64_t v16 = (char *)(a1 + a2[8]);
  uint64_t v17 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v16);
      break;
    case 1:
      uint64_t v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      Swift::String v21 = &v16[*(int *)(v35 + 20)];
      uint64_t v22 = type metadata accessor for DataFrame(0);
      uint64_t v23 = v21;
      uint64_t v24 = *(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8);
      v24(v23, v22);
      v24(&v16[*(int *)(v35 + 24)], v22);
      break;
    case 0:
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v16, v19) == 1) {
        uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(v20);
      (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v16, v25);
      break;
  }
  uint64_t v26 = (void *)(a2[9] + a1);
  uint64_t result = swift_getEnumCaseMultiPayload(v26, v17);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v26);
    case 1:
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      char v31 = (char *)v26 + *(int *)(v30 + 20);
      uint64_t v32 = type metadata accessor for DataFrame(0);
      uint64_t v33 = *(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8);
      v33(v31, v32);
      return ((uint64_t (*)(char *, uint64_t))v33)((char *)v26 + *(int *)(v30 + 24), v32);
    case 0:
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v26, v28) == 1) {
        uint64_t v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(v29);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v34 - 8) + 8))(v26, v34);
  }
  return result;
}

void *initializeWithCopy for MLHandActionClassifier(void *a1, void *a2, int *a3)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  uint64_t v5 = a3[7];
  __dst = (char *)a1 + v5;
  uint64_t v6 = (char *)a2 + v5;
  uint64_t v7 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain(v3);
  uint64_t v8 = v7;
  swift_retain();
  v4;
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    uint64_t v94 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v94);
    switch(EnumCaseMultiPayload)
    {
      case 0u:
        uint64_t v14 = type metadata accessor for URL(0);
        uint64_t v97 = v7;
        uint64_t v15 = *(void (**)(char *, char *))(*(void *)(v14 - 8) + 16);
        uint64_t v10 = __dst;
        uint64_t v16 = v14;
        v15(__dst, v6);
        uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        ((void (*)(char *, char *, uint64_t))v15)(&__dst[v17[12]], &v6[v17[12]], v16);
        uint64_t v18 = v17[16];
        *(void *)&__dst[v18] = *(void *)&v6[v18];
        uint64_t v19 = *(void *)&v6[v18 + 8];
        *(void *)&__dst[v18 + 8] = v19;
        uint64_t v20 = v17[20];
        *(void *)&__dst[v20] = *(void *)&v6[v20];
        uint64_t v21 = *(void *)&v6[v20 + 8];
        *(void *)&__dst[v20 + 8] = v21;
        uint64_t v22 = v17[24];
        *(void *)&__dst[v22] = *(void *)&v6[v22];
        uint64_t v23 = *(void *)&v6[v22 + 8];
        *(void *)&__dst[v22 + 8] = v23;
        uint64_t v24 = v17[28];
        *(void *)&__dst[v24] = *(void *)&v6[v24];
        uint64_t v25 = *(void *)&v6[v24 + 8];
        *(void *)&__dst[v24 + 8] = v25;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v21);
        char v26 = v23;
        uint64_t v8 = v97;
        goto LABEL_9;
      case 1u:
      case 2u:
        uint64_t v9 = type metadata accessor for URL(0);
        uint64_t v10 = __dst;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(__dst, v6, v9);
        goto LABEL_12;
      case 3u:
        uint64_t v27 = *(void *)v6;
        char v98 = v6[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v6, v98);
        uint64_t v10 = __dst;
        *(void *)__dst = v27;
        __dst[8] = v98;
        *((void *)__dst + 2) = *((void *)v6 + 2);
        uint64_t v28 = *((void *)v6 + 3);
        *((void *)__dst + 3) = v28;
        *((void *)__dst + 4) = *((void *)v6 + 4);
        uint64_t v29 = *((void *)v6 + 5);
        *((void *)__dst + 5) = v29;
        *((void *)__dst + 6) = *((void *)v6 + 6);
        uint64_t v25 = *((void *)v6 + 7);
        *((void *)__dst + 7) = v25;
        swift_bridgeObjectRetain(v28);
        char v26 = v29;
        goto LABEL_9;
      case 4u:
        uint64_t v30 = *(void *)v6;
        char v31 = v6[8];
        outlined copy of Result<_DataTable, Error>(*(void *)v6, v31);
        *(void *)__dst = v30;
        __dst[8] = v31;
        *((void *)__dst + 2) = *((void *)v6 + 2);
        uint64_t v32 = *((void *)v6 + 3);
        *((void *)__dst + 3) = v32;
        *((void *)__dst + 4) = *((void *)v6 + 4);
        uint64_t v33 = *((void *)v6 + 5);
        *((void *)__dst + 5) = v33;
        *((void *)__dst + 6) = *((void *)v6 + 6);
        uint64_t v34 = *((void *)v6 + 7);
        *((void *)__dst + 7) = v34;
        *((void *)__dst + 8) = *((void *)v6 + 8);
        uint64_t v99 = v8;
        uint64_t v35 = *((void *)v6 + 9);
        *((void *)__dst + 9) = v35;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v34);
        char v36 = v35;
        uint64_t v8 = v99;
        uint64_t v10 = __dst;
        break;
      case 5u:
        uint64_t v37 = type metadata accessor for DataFrame(0);
        uint64_t v10 = __dst;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(__dst, v6, v37);
        uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        uint64_t v39 = v38[12];
        *(void *)&__dst[v39] = *(void *)&v6[v39];
        uint64_t v40 = *(void *)&v6[v39 + 8];
        *(void *)&__dst[v39 + 8] = v40;
        uint64_t v41 = v38[16];
        *(void *)&__dst[v41] = *(void *)&v6[v41];
        uint64_t v42 = v6;
        uint64_t v43 = *(void *)&v6[v41 + 8];
        *(void *)&__dst[v41 + 8] = v43;
        uint64_t v44 = v38[20];
        *(void *)&__dst[v44] = *(void *)&v42[v44];
        uint64_t v25 = *(void *)&v42[v44 + 8];
        *(void *)&__dst[v44 + 8] = v25;
        swift_bridgeObjectRetain(v40);
        char v26 = v43;
        uint64_t v6 = v42;
LABEL_9:
        swift_bridgeObjectRetain(v26);
        char v36 = v25;
        break;
      case 6u:
        uint64_t v45 = type metadata accessor for DataFrame(0);
        uint64_t v10 = __dst;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(__dst, v6, v45);
        uint64_t v46 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        uint64_t v47 = v46[12];
        *(void *)&__dst[v47] = *(void *)&v6[v47];
        uint64_t v48 = *(void *)&v6[v47 + 8];
        *(void *)&__dst[v47 + 8] = v48;
        uint64_t v49 = v46[16];
        *(void *)&__dst[v49] = *(void *)&v6[v49];
        uint64_t v50 = *(void *)&v6[v49 + 8];
        *(void *)&__dst[v49 + 8] = v50;
        uint64_t v51 = v46[20];
        *(void *)&__dst[v51] = *(void *)&v6[v51];
        uint64_t v52 = *(void *)&v6[v51 + 8];
        *(void *)&__dst[v51 + 8] = v52;
        uint64_t v53 = v46[24];
        *(void *)&__dst[v53] = *(void *)&v6[v53];
        uint64_t v100 = v8;
        uint64_t v54 = *(void *)&v6[v53 + 8];
        *(void *)&__dst[v53 + 8] = v54;
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v52);
        char v36 = v54;
        uint64_t v8 = v100;
        break;
    }
    swift_bridgeObjectRetain(v36);
LABEL_12:
    Swift::String v13 = a2;
    swift_storeEnumTagMultiPayload(v10, v94, EnumCaseMultiPayload);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    uint64_t v12 = a1;
  }
  else
  {
    size_t v11 = *(void *)(*(void *)(v7 - 8) + 64);
    uint64_t v10 = __dst;
    memcpy(__dst, v6, v11);
    uint64_t v12 = a1;
    Swift::String v13 = a2;
  }
  uint64_t v55 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v10[v55[5]] = *(void *)&v6[v55[5]];
  *(void *)&v10[v55[6]] = *(void *)&v6[v55[6]];
  *(void *)&v10[v55[7]] = *(void *)&v6[v55[7]];
  *(void *)&v10[v55[8]] = *(void *)&v6[v55[8]];
  *(void *)&v10[v55[10]] = *(void *)&v6[v55[10]];
  uint64_t v56 = a3[8];
  uint64_t v57 = (void *)((char *)v12 + v56);
  int v58 = (void *)((char *)v13 + v56);
  __dsta = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  unsigned int v59 = swift_getEnumCaseMultiPayload(v58, __dsta);
  if (v59 == 2)
  {
    uint64_t v65 = *v58;
    swift_errorRetain(v65);
    *uint64_t v57 = v65;
  }
  else if (v59 == 1)
  {
    *uint64_t v57 = *v58;
    uint64_t v95 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v60 = *(int *)(v95 + 20);
    uint64_t v88 = (char *)v57 + v60;
    uint64_t v61 = type metadata accessor for DataFrame(0);
    uint64_t v62 = (char *)v58 + v60;
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    v63(v88, v62, v61);
    uint64_t v64 = v61;
    Swift::String v13 = a2;
    v63((char *)v57 + *(int *)(v95 + 24), (char *)v58 + *(int *)(v95 + 24), v64);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v66 = swift_getEnumCaseMultiPayload(v58, v96);
    BOOL v67 = v66 == 1;
    uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v66 == 1) {
      uint64_t v68 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(v68);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v69 - 8) + 16))(v57, v58, v69);
    swift_storeEnumTagMultiPayload(v57, v96, v67);
    Swift::String v13 = a2;
  }
  swift_storeEnumTagMultiPayload(v57, __dsta, v59);
  uint64_t v70 = a3[9];
  uint64_t v71 = (char *)v12 + v70;
  uint64_t v72 = (char *)v13 + v70;
  unsigned int v73 = swift_getEnumCaseMultiPayload(v72, __dsta);
  if (v73 == 2)
  {
    uint64_t v80 = *(void *)v72;
    swift_errorRetain(*(void *)v72);
    *(void *)uint64_t v71 = v80;
  }
  else if (v73 == 1)
  {
    *(void *)uint64_t v71 = *(void *)v72;
    uint64_t v102 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    int v74 = v72;
    uint64_t v75 = *(int *)(v102 + 20);
    uint64_t v90 = &v71[v75];
    uint64_t v76 = type metadata accessor for DataFrame(0);
    uint64_t v77 = &v74[v75];
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16);
    v78(v90, v77, v76);
    uint64_t v79 = v76;
    uint64_t v12 = a1;
    v78(&v71[*(int *)(v102 + 24)], &v74[*(int *)(v102 + 24)], v79);
  }
  else
  {
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v82 = swift_getEnumCaseMultiPayload(v72, v81);
    uint64_t v103 = v72;
    BOOL v83 = v82 == 1;
    uint64_t v84 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v82 == 1) {
      uint64_t v84 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(v84);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v71, (char *)v103, v85);
    swift_storeEnumTagMultiPayload(v71, v81, v83);
  }
  swift_storeEnumTagMultiPayload(v71, __dsta, v73);
  return v12;
}

void *assignWithCopy for MLHandActionClassifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v8 = (void *)a2[2];
  uint64_t v9 = (void *)a1[2];
  a1[2] = v8;
  v8;

  uint64_t v73 = a3;
  uint64_t v10 = *(int *)(a3 + 28);
  size_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v11, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v13 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      uint64_t v75 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v75);
      switch(EnumCaseMultiPayload)
      {
        case 0u:
          uint64_t v87 = type metadata accessor for URL(0);
          uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16);
          v15(v11, v12, v87);
          uint64_t v84 = v13;
          uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v15(&v11[v16[12]], &v12[v16[12]], v87);
          uint64_t v4 = a2;
          uint64_t v17 = v16[16];
          *(void *)&v11[v17] = *(void *)&v12[v17];
          uint64_t v18 = *(void *)&v12[v17 + 8];
          *(void *)&v11[v17 + 8] = v18;
          uint64_t v19 = v16[20];
          *(void *)&v11[v19] = *(void *)&v12[v19];
          uint64_t v88 = *(void *)&v12[v19 + 8];
          *(void *)&v11[v19 + 8] = v88;
          uint64_t v20 = v16[24];
          *(void *)&v11[v20] = *(void *)&v12[v20];
          uint64_t v80 = *(void *)&v12[v20 + 8];
          *(void *)&v11[v20 + 8] = v80;
          uint64_t v21 = v16[28];
          *(void *)&v11[v21] = *(void *)&v12[v21];
          goto LABEL_11;
        case 1u:
        case 2u:
          uint64_t v14 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v11, v12, v14);
          goto LABEL_14;
        case 3u:
          uint64_t v85 = v13;
          uint64_t v22 = *(void *)v12;
          char v89 = v12[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v12, v89);
          *(void *)size_t v11 = v22;
          v11[8] = v89;
          *((void *)v11 + 2) = *((void *)v12 + 2);
          uint64_t v23 = *((void *)v12 + 3);
          *((void *)v11 + 3) = v23;
          *((void *)v11 + 4) = *((void *)v12 + 4);
          uint64_t v24 = *((void *)v12 + 5);
          *((void *)v11 + 5) = v24;
          *((void *)v11 + 6) = *((void *)v12 + 6);
          uint64_t v90 = *((void *)v12 + 7);
          *((void *)v11 + 7) = v90;
          swift_bridgeObjectRetain(v23);
          LOBYTE(v23) = v24;
          uint64_t v13 = v85;
          swift_bridgeObjectRetain(v23);
          char v25 = v90;
          goto LABEL_13;
        case 4u:
          uint64_t v86 = v13;
          uint64_t v26 = *(void *)v12;
          char v91 = v12[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v12, v91);
          *(void *)size_t v11 = v26;
          v11[8] = v91;
          *((void *)v11 + 2) = *((void *)v12 + 2);
          uint64_t v27 = *((void *)v12 + 3);
          *((void *)v11 + 3) = v27;
          *((void *)v11 + 4) = *((void *)v12 + 4);
          uint64_t v28 = *((void *)v12 + 5);
          *((void *)v11 + 5) = v28;
          *((void *)v11 + 6) = *((void *)v12 + 6);
          uint64_t v92 = *((void *)v12 + 7);
          *((void *)v11 + 7) = v92;
          *((void *)v11 + 8) = *((void *)v12 + 8);
          uint64_t v81 = *((void *)v12 + 9);
          *((void *)v11 + 9) = v81;
          swift_bridgeObjectRetain(v27);
          LOBYTE(v27) = v28;
          uint64_t v13 = v86;
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v92);
          char v25 = v81;
          goto LABEL_13;
        case 5u:
          uint64_t v29 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v11, v12, v29);
          uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          uint64_t v31 = v30[12];
          *(void *)&v11[v31] = *(void *)&v12[v31];
          uint64_t v32 = *(void *)&v12[v31 + 8];
          *(void *)&v11[v31 + 8] = v32;
          uint64_t v33 = v30[16];
          *(void *)&v11[v33] = *(void *)&v12[v33];
          uint64_t v93 = *(void *)&v12[v33 + 8];
          *(void *)&v11[v33 + 8] = v93;
          uint64_t v34 = v30[20];
          *(void *)&v11[v34] = *(void *)&v12[v34];
          uint64_t v84 = v13;
          uint64_t v35 = *(void *)&v12[v34 + 8];
          *(void *)&v11[v34 + 8] = v35;
          swift_bridgeObjectRetain(v32);
          char v36 = v93;
          goto LABEL_12;
        case 6u:
          uint64_t v37 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v11, v12, v37);
          uint64_t v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          uint64_t v39 = v38[12];
          *(void *)&v11[v39] = *(void *)&v12[v39];
          uint64_t v18 = *(void *)&v12[v39 + 8];
          *(void *)&v11[v39 + 8] = v18;
          uint64_t v40 = v38[16];
          *(void *)&v11[v40] = *(void *)&v12[v40];
          uint64_t v88 = *(void *)&v12[v40 + 8];
          *(void *)&v11[v40 + 8] = v88;
          uint64_t v41 = v38[20];
          *(void *)&v11[v41] = *(void *)&v12[v41];
          uint64_t v80 = *(void *)&v12[v41 + 8];
          *(void *)&v11[v41 + 8] = v80;
          uint64_t v21 = v38[24];
          *(void *)&v11[v21] = *(void *)&v12[v21];
          uint64_t v84 = v13;
LABEL_11:
          uint64_t v35 = *(void *)&v12[v21 + 8];
          *(void *)&v11[v21 + 8] = v35;
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRetain(v88);
          char v36 = v80;
LABEL_12:
          swift_bridgeObjectRetain(v36);
          char v25 = v35;
          uint64_t v13 = v84;
LABEL_13:
          swift_bridgeObjectRetain(v25);
LABEL_14:
          swift_storeEnumTagMultiPayload(v11, v75, EnumCaseMultiPayload);
          swift_storeEnumTagMultiPayload(v11, v13, 1);
          break;
      }
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v42 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v11[v42[5]] = *(void *)&v12[v42[5]];
  *(void *)&v11[v42[6]] = *(void *)&v12[v42[6]];
  *(void *)&v11[v42[7]] = *(void *)&v12[v42[7]];
  *(void *)&v11[v42[8]] = *(void *)&v12[v42[8]];
  *(void *)&v11[v42[10]] = *(void *)&v12[v42[10]];
  if (a1 != v4)
  {
    uint64_t v43 = *(int *)(v73 + 32);
    uint64_t v44 = (char *)a1 + v43;
    uint64_t v45 = (char *)v4 + v43;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v44, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v76 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int v46 = swift_getEnumCaseMultiPayload(v45, v76);
    uint64_t v72 = a1;
    int v82 = v4;
    if (v46 == 2)
    {
      uint64_t v51 = *(void *)v45;
      swift_errorRetain(*(void *)v45);
      *(void *)uint64_t v44 = v51;
    }
    else if (v46 == 1)
    {
      *(void *)uint64_t v44 = *(void *)v45;
      uint64_t v78 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v47 = *(int *)(v78 + 20);
      uint64_t v94 = &v44[v47];
      uint64_t v48 = type metadata accessor for DataFrame(0);
      uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16);
      uint64_t v50 = &v45[v47];
      a1 = v72;
      v49(v94, v50, v48);
      v49(&v44[*(int *)(v78 + 24)], &v45[*(int *)(v78 + 24)], v48);
      unsigned int v46 = 1;
    }
    else
    {
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v53 = swift_getEnumCaseMultiPayload(v45, v52);
      BOOL v54 = v53 == 1;
      uint64_t v55 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v53 == 1) {
        uint64_t v55 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(v55);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v44, v45, v56);
      swift_storeEnumTagMultiPayload(v44, v52, v54);
      a1 = v72;
    }
    swift_storeEnumTagMultiPayload(v44, v76, v46);
    uint64_t v57 = *(int *)(v73 + 36);
    int v58 = (char *)a1 + v57;
    unsigned int v59 = (char *)v82 + v57;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v57, type metadata accessor for MLClassifierMetrics.Contents);
    unsigned int v60 = swift_getEnumCaseMultiPayload(v59, v76);
    if (v60 == 2)
    {
      uint64_t v65 = *(void *)v59;
      swift_errorRetain(v65);
      *(void *)int v58 = v65;
    }
    else if (v60 == 1)
    {
      *(void *)int v58 = *(void *)v59;
      uint64_t v74 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v61 = *(int *)(v74 + 20);
      uint64_t v79 = &v58[v61];
      uint64_t v62 = type metadata accessor for DataFrame(0);
      uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16);
      uint64_t v64 = &v59[v61];
      a1 = v72;
      v63(v79, v64, v62);
      v63(&v58[*(int *)(v74 + 24)], &v59[*(int *)(v74 + 24)], v62);
      unsigned int v60 = 1;
    }
    else
    {
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v67 = swift_getEnumCaseMultiPayload(v59, v66);
      BOOL v83 = v59;
      BOOL v68 = v67 == 1;
      uint64_t v69 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v67 == 1) {
        uint64_t v69 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(v69);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v58, v83, v70);
      swift_storeEnumTagMultiPayload(v58, v66, v68);
    }
    swift_storeEnumTagMultiPayload(v58, v76, v60);
  }
  return a1;
}

uint64_t initializeWithTake for MLHandActionClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = a3[7];
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    uint64_t v72 = type metadata accessor for MLHandActionClassifier.DataSource(0);
    switch(swift_getEnumCaseMultiPayload(v7, v72))
    {
      case 0u:
        uint64_t v63 = type metadata accessor for URL(0);
        uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32);
        v9(v6, v7, v63);
        uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v9(&v6[v10[12]], &v7[v10[12]], v63);
        uint64_t v4 = a1;
        *(_OWORD *)&v6[v10[16]] = *(_OWORD *)&v7[v10[16]];
        *(_OWORD *)&v6[v10[20]] = *(_OWORD *)&v7[v10[20]];
        *(_OWORD *)&v6[v10[24]] = *(_OWORD *)&v7[v10[24]];
        uint64_t v11 = v10[28];
        uint64_t v3 = a2;
        *(_OWORD *)&v6[v11] = *(_OWORD *)&v7[v11];
        uint64_t v12 = v6;
        uint64_t v13 = v72;
        uint64_t v14 = 0;
        goto LABEL_11;
      case 1u:
        uint64_t v15 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v6, v7, v15);
        uint64_t v61 = 1;
        goto LABEL_10;
      case 2u:
        uint64_t v16 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v6, v7, v16);
        uint64_t v61 = 2;
        goto LABEL_10;
      case 5u:
        uint64_t v17 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v6, v7, v17);
        uint64_t v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v6[v18[12]] = *(_OWORD *)&v7[v18[12]];
        *(_OWORD *)&v6[v18[16]] = *(_OWORD *)&v7[v18[16]];
        *(_OWORD *)&v6[v18[20]] = *(_OWORD *)&v7[v18[20]];
        uint64_t v61 = 5;
        goto LABEL_10;
      case 6u:
        uint64_t v19 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v6, v7, v19);
        uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v6[v20[12]] = *(_OWORD *)&v7[v20[12]];
        *(_OWORD *)&v6[v20[16]] = *(_OWORD *)&v7[v20[16]];
        *(_OWORD *)&v6[v20[20]] = *(_OWORD *)&v7[v20[20]];
        *(_OWORD *)&v6[v20[24]] = *(_OWORD *)&v7[v20[24]];
        uint64_t v61 = 6;
LABEL_10:
        uint64_t v14 = v61;
        uint64_t v12 = v6;
        uint64_t v13 = v72;
LABEL_11:
        swift_storeEnumTagMultiPayload(v12, v13, v14);
        break;
      default:
        memcpy(v6, v7, *(void *)(*(void *)(v72 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  uint64_t v21 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v6[v21[5]] = *(void *)&v7[v21[5]];
  *(void *)&v6[v21[6]] = *(void *)&v7[v21[6]];
  *(void *)&v6[v21[7]] = *(void *)&v7[v21[7]];
  *(void *)&v6[v21[8]] = *(void *)&v7[v21[8]];
  *(void *)&v6[v21[10]] = *(void *)&v7[v21[10]];
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)(v4 + v22);
  uint64_t v24 = (char *)(v3 + v22);
  uint64_t v25 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
  uint64_t v73 = v25;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v23 = *(void *)v24;
    uint64_t v64 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v36 = *(int *)(v64 + 20);
    uint64_t v62 = &v23[v36];
    uint64_t v70 = v4;
    uint64_t v37 = type metadata accessor for DataFrame(0);
    uint64_t v67 = v3;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
    uint64_t v39 = &v24[v36];
    uint64_t v25 = v73;
    v38(v62, v39, v37);
    uint64_t v40 = v37;
    uint64_t v4 = v70;
    v38(&v23[*(int *)(v64 + 24)], &v24[*(int *)(v64 + 24)], v40);
    uint64_t v3 = v67;
    uint64_t v35 = 1;
    uint64_t v33 = v23;
    uint64_t v34 = v73;
LABEL_19:
    swift_storeEnumTagMultiPayload(v33, v34, v35);
    goto LABEL_21;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v27 = swift_getEnumCaseMultiPayload(v24, v69);
    uint64_t v28 = v3;
    BOOL v29 = v27 == 1;
    uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v27 == 1) {
      uint64_t v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v23, v24, v31);
    BOOL v32 = v29;
    uint64_t v3 = v28;
    uint64_t v25 = v73;
    swift_storeEnumTagMultiPayload(v23, v69, v32);
    uint64_t v33 = v23;
    uint64_t v34 = v73;
    uint64_t v35 = 0;
    goto LABEL_19;
  }
  memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_21:
  uint64_t v41 = a3[9];
  uint64_t v42 = (char *)(v4 + v41);
  uint64_t v43 = (char *)(v41 + v3);
  int v44 = swift_getEnumCaseMultiPayload(v43, v25);
  if (v44 == 1)
  {
    *(void *)uint64_t v42 = *(void *)v43;
    uint64_t v66 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v71 = v4;
    uint64_t v56 = *(int *)(v66 + 20);
    BOOL v68 = &v42[v56];
    uint64_t v57 = type metadata accessor for DataFrame(0);
    int v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
    unsigned int v59 = &v43[v56];
    uint64_t v4 = v71;
    v58(v68, v59, v57);
    v58(&v42[*(int *)(v66 + 24)], &v43[*(int *)(v66 + 24)], v57);
    uint64_t v55 = 1;
    int v53 = v42;
    uint64_t v54 = v73;
  }
  else
  {
    if (v44)
    {
      memcpy(v42, v43, *(void *)(*(void *)(v25 - 8) + 64));
      return v4;
    }
    uint64_t v45 = v43;
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v47 = swift_getEnumCaseMultiPayload(v45, v46);
    uint64_t v48 = v4;
    BOOL v49 = v47 == 1;
    uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v47 == 1) {
      uint64_t v50 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(v50);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v42, v45, v51);
    BOOL v52 = v49;
    uint64_t v4 = v48;
    swift_storeEnumTagMultiPayload(v42, v46, v52);
    int v53 = v42;
    uint64_t v54 = v73;
    uint64_t v55 = 0;
  }
  swift_storeEnumTagMultiPayload(v53, v54, v55);
  return v4;
}

uint64_t *assignWithTake for MLHandActionClassifier(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  a1[1] = a2[1];
  swift_release();
  uint64_t v7 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v64 = a3;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v9, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    uint64_t v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      uint64_t v70 = type metadata accessor for MLHandActionClassifier.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(v10, v70))
      {
        case 0u:
          uint64_t v66 = type metadata accessor for URL(0);
          uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32);
          v12(v9, v10, v66);
          uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v12(&v9[v62[12]], &v10[v62[12]], v66);
          uint64_t v4 = a2;
          *(_OWORD *)&v9[v62[16]] = *(_OWORD *)&v10[v62[16]];
          *(_OWORD *)&v9[v62[20]] = *(_OWORD *)&v10[v62[20]];
          *(_OWORD *)&v9[v62[24]] = *(_OWORD *)&v10[v62[24]];
          *(_OWORD *)&v9[v62[28]] = *(_OWORD *)&v10[v62[28]];
          uint64_t v13 = v9;
          uint64_t v14 = v70;
          uint64_t v15 = 0;
          goto LABEL_12;
        case 1u:
          uint64_t v16 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
          uint64_t v59 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v17 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v9, v10, v17);
          uint64_t v59 = 2;
          goto LABEL_11;
        case 5u:
          uint64_t v18 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v9, v10, v18);
          uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v9[v19[12]] = *(_OWORD *)&v10[v19[12]];
          *(_OWORD *)&v9[v19[16]] = *(_OWORD *)&v10[v19[16]];
          *(_OWORD *)&v9[v19[20]] = *(_OWORD *)&v10[v19[20]];
          uint64_t v59 = 5;
          goto LABEL_11;
        case 6u:
          uint64_t v20 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v9, v10, v20);
          uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v9[v21[12]] = *(_OWORD *)&v10[v21[12]];
          *(_OWORD *)&v9[v21[16]] = *(_OWORD *)&v10[v21[16]];
          *(_OWORD *)&v9[v21[20]] = *(_OWORD *)&v10[v21[20]];
          *(_OWORD *)&v9[v21[24]] = *(_OWORD *)&v10[v21[24]];
          uint64_t v59 = 6;
LABEL_11:
          uint64_t v15 = v59;
          uint64_t v13 = v9;
          uint64_t v14 = v70;
LABEL_12:
          swift_storeEnumTagMultiPayload(v13, v14, v15);
          break;
        default:
          memcpy(v9, v10, *(void *)(*(void *)(v70 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    a3 = v64;
  }
  uint64_t v22 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(void *)&v9[v22[5]] = *(void *)&v10[v22[5]];
  *(void *)&v9[v22[6]] = *(void *)&v10[v22[6]];
  *(void *)&v9[v22[7]] = *(void *)&v10[v22[7]];
  *(void *)&v9[v22[8]] = *(void *)&v10[v22[8]];
  *(void *)&v9[v22[10]] = *(void *)&v10[v22[10]];
  if (a1 == v4) {
    return a1;
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)v4 + v23;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v24, type metadata accessor for MLClassifierMetrics.Contents);
  uint64_t v71 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v25, v71);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v63 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v36 = *(int *)(v63 + 20);
    unsigned int v60 = &v24[v36];
    uint64_t v61 = v4;
    uint64_t v37 = type metadata accessor for DataFrame(0);
    BOOL v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
    uint64_t v38 = &v25[v36];
    a3 = v64;
    v68(v60, v38, v37);
    uint64_t v39 = v37;
    uint64_t v4 = v61;
    v68(&v24[*(int *)(v63 + 24)], &v25[*(int *)(v63 + 24)], v39);
    uint64_t v35 = 1;
    BOOL v32 = v24;
    uint64_t v33 = v71;
    uint64_t v34 = v71;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      uint64_t v40 = v25;
      uint64_t v33 = v71;
      memcpy(v24, v40, *(void *)(*(void *)(v71 - 8) + 64));
      goto LABEL_24;
    }
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v27 = swift_getEnumCaseMultiPayload(v25, v67);
    BOOL v28 = v27 == 1;
    BOOL v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v27 == 1) {
      BOOL v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v24, v25, v30);
    BOOL v31 = v28;
    a3 = v64;
    swift_storeEnumTagMultiPayload(v24, v67, v31);
    BOOL v32 = v24;
    uint64_t v33 = v71;
    uint64_t v34 = v71;
    uint64_t v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v34, v35);
LABEL_24:
  uint64_t v41 = a3[9];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)v4 + v41;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1 + v41, type metadata accessor for MLClassifierMetrics.Contents);
  int v44 = swift_getEnumCaseMultiPayload(v43, v33);
  if (v44 == 1)
  {
    *(void *)uint64_t v42 = *(void *)v43;
    uint64_t v65 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v54 = *(int *)(v65 + 20);
    uint64_t v69 = &v42[v54];
    uint64_t v55 = type metadata accessor for DataFrame(0);
    uint64_t v56 = &v43[v54];
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
    v57(v69, v56, v55);
    v57(&v42[*(int *)(v65 + 24)], &v43[*(int *)(v65 + 24)], v55);
    uint64_t v53 = 1;
    uint64_t v51 = v42;
    uint64_t v52 = v71;
  }
  else
  {
    if (v44)
    {
      memcpy(v42, v43, *(void *)(*(void *)(v33 - 8) + 64));
      return a1;
    }
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v46 = swift_getEnumCaseMultiPayload(v43, v45);
    int v47 = v43;
    BOOL v48 = v46 == 1;
    BOOL v49 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v46 == 1) {
      BOOL v49 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(v49);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v42, v47, v50);
    swift_storeEnumTagMultiPayload(v42, v45, v48);
    uint64_t v51 = v42;
    uint64_t v52 = v71;
    uint64_t v53 = 0;
  }
  swift_storeEnumTagMultiPayload(v51, v52, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A7CA5);
}

uint64_t sub_1A7CA5(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t result = 0;
    if ((*a1 & 0xFFFFFFFF00000001) == 0) {
      return (*a1 >> 1) + 1;
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
    {
      uint64_t v6 = *(int *)(a3 + 28);
    }
    else
    {
      uint64_t v5 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v6 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v6, a2, v5);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A7D42);
}

void sub_1A7D42(void *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = 2 * (a2 - 1);
  }
  else
  {
    uint64_t v6 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a3)
    {
      uint64_t v7 = *(int *)(a4 + 28);
    }
    else
    {
      uint64_t v6 = type metadata accessor for MLClassifierMetrics(0);
      uint64_t v7 = *(int *)(a4 + 32);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v7, a2, a2, v6);
  }
}

uint64_t type metadata completion function for MLHandActionClassifier(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for MLHandActionClassifier.ModelParameters(319);
  if (v2 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v3 <= 0x3F)
    {
      uint64_t v5 = *(void *)(result - 8) + 64;
      uint64_t v6 = v5;
      swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.Prediction()
{
  return &type metadata for MLHandActionClassifier.Prediction;
}

uint64_t outlined init with copy of MLHandActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(void *a1, double a2, double a3)
{
  return closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(v3[2], v3[3], v3[4], v3[5], a1, a2, a3);
}

void *partial apply for closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1)
{
  return closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(a1);
}

uint64_t static MLSoundClassifier.__Defaults.validation.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for validation != -1) {
    swift_once(&one-time initialization token for validation, one-time initialization function for validation);
  }
  uint64_t v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLSoundClassifier.__Defaults.validation);
  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v3, v1);
}

uint64_t static MLSoundClassifier.__Defaults.maximumIterations.getter()
{
  return 25;
}

double static MLSoundClassifier.__Defaults.overlapFactor.getter()
{
  return 0.5;
}

uint64_t static MLSoundClassifier.__Defaults.algorithm.getter()
{
  *(void *)uint64_t result = 1;
  *(unsigned char *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  return result;
}

double static MLSoundClassifier.__Defaults.defaultVGGishTimeWindow.getter()
{
  return 0.975;
}

uint64_t static MLSoundClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t one-time initialization function for validation()
{
  uint64_t v0 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  __swift_allocate_value_buffer(v0, static MLSoundClassifier.__Defaults.validation);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static MLSoundClassifier.__Defaults.validation);
  *(_OWORD *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 16) = 256;
  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v0 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData(0);
  __swift_allocate_value_buffer(v0, static MLImageClassifier.__Defaults.validation);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static MLImageClassifier.__Defaults.validation);
  *(_OWORD *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 16) = 256;
  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

uint64_t static MLSoundClassifier.__Defaults.featureExtractor.getter()
{
  *(void *)uint64_t result = 1;
  *(unsigned char *)(result + 8) = 1;
  return result;
}

void *static MLSoundClassifier.__Defaults.classifier.getter()
{
  *uint64_t result = 0;
  return result;
}

uint64_t static MLSoundClassifier.__Defaults.featureColumnName.getter()
{
  return 0x7365727574616566;
}

uint64_t static MLSoundClassifier.__Defaults.labelColumnName.getter()
{
  return 0x62614C7373616C63;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.__Defaults()
{
  return &type metadata for MLSoundClassifier.__Defaults;
}

uint64_t MLSupportVectorClassifier.ModelParameters.maxIterations.getter()
{
  return *(void *)v0;
}

void MLSupportVectorClassifier.ModelParameters.maxIterations.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
}

void (*MLSupportVectorClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSupportVectorClassifier.ModelParameters.validationData.getter(__m128 a1)
{
  uint64_t v2 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v9);
  if (!v10) {
    BUG();
  }
  outlined init with take of Any(&v9, v8);
  swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v2, 7);
  MLSupportVectorClassifier.ModelParameters.ValidationData.asTable()(a1);
  return outlined destroy of MLSupportVectorClassifier.ModelParameters.ValidationData((uint64_t)&v7);
}

uint64_t key path getter for MLSupportVectorClassifier.ModelParameters.validationData : MLSupportVectorClassifier.ModelParameters(__m128 a1)
{
  uint64_t v2 = v1;
  MLSupportVectorClassifier.ModelParameters.validationData.getter(a1);
  uint64_t result = v4;
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v5;
  return result;
}

uint64_t key path setter for MLSupportVectorClassifier.ModelParameters.validationData : MLSupportVectorClassifier.ModelParameters(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLSupportVectorClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLSupportVectorClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v18 = v1;
  unsigned int v2 = 0;
  uint64_t v3 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  char v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v17 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = v3;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1(&v11);
  if (v7 == -1)
  {
    long long v11 = 0;
    __int16 v12 = 256;
  }
  else
  {
    uint64_t v14 = v17;
    char v15 = v7 & 1;
    if (MLDataTable.size.getter())
    {
      *(void *)&long long v11 = v17;
      BYTE8(v11) = v7 & 1;
      int v10 = 1;
    }
    else
    {
      outlined consume of MLDataTable?(v17, v7);
      int v10 = 3;
    }
    unsigned int v2 = v10;
  }
  uint64_t v8 = v18;
  swift_storeEnumTagMultiPayload(&v11, v3, v2);
  outlined init with take of MLSupportVectorClassifier.ModelParameters.ValidationData((uint64_t)&v11, (uint64_t)v16);
  return outlined assign with take of Any?((uint64_t)&v11, v8 + 8);
}

uint64_t MLSupportVectorClassifier.ModelParameters.validation.getter()
{
  uint64_t v2 = v0;
  outlined init with copy of Any?(v1 + 8, (uint64_t)&v6);
  if (!v7) {
    BUG();
  }
  outlined init with take of Any(&v6, v5);
  uint64_t v3 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  return swift_dynamicCast(v2, v5, (char *)&type metadata for Any + 8, v3, 7);
}

uint64_t outlined destroy of MLSupportVectorClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t outlined init with take of MLSupportVectorClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t (*MLSupportVectorClassifier.ModelParameters.validationData.modify(uint64_t a1, __m128 a2))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v2;
  MLSupportVectorClassifier.ModelParameters.validationData.getter(a2);
  return MLSupportVectorClassifier.ModelParameters.validationData.modify;
}

uint64_t MLSupportVectorClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = v3;
  if ((a2 & 1) == 0) {
    return MLSupportVectorClassifier.ModelParameters.validationData.setter((uint64_t)&v6);
  }
  char v4 = v3;
  outlined copy of MLDataTable?(v2, v3);
  MLSupportVectorClassifier.ModelParameters.validationData.setter((uint64_t)&v6);
  return outlined consume of MLDataTable?(v2, v4);
}

uint64_t key path setter for MLSupportVectorClassifier.ModelParameters.validation : MLSupportVectorClassifier.ModelParameters(uint64_t a1)
{
  v6[0] = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0)
                             - 8)
                 + 64);
  char v3 = alloca(v2);
  char v4 = alloca(v2);
  outlined init with copy of MLSupportVectorClassifier.ModelParameters.ValidationData(a1, (uint64_t)v6);
  return MLSupportVectorClassifier.ModelParameters.validation.setter((uint64_t)v6);
}

uint64_t MLSupportVectorClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  v4[3] = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
  outlined init with take of MLSupportVectorClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_1);
  return outlined assign with take of Any?((uint64_t)v4, v1 + 8);
}

void (*MLSupportVectorClassifier.ModelParameters.validation.modify(void *a1))(uint64_t a1, char a2)
{
  int64_t v2 = malloc(0xA0uLL);
  *a1 = v2;
  *((void *)v2 + 16) = v1;
  uint64_t v3 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  *((void *)v2 + 17) = v3;
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  *((void *)v2 + 18) = malloc(v4);
  char v5 = malloc(v4);
  *((void *)v2 + 19) = v5;
  outlined init with copy of Any?(v1 + 8, (uint64_t)(v2 + 2));
  if (!*((void *)v2 + 7)) {
    BUG();
  }
  outlined init with take of Any(v2 + 2, v2);
  swift_dynamicCast(v5, v2, (char *)&type metadata for Any + 8, v3, 7);
  return MLSupportVectorClassifier.ModelParameters.validation.modify;
}

void MLSupportVectorClassifier.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  int64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 152);
  uint64_t v4 = *(void *)(*(void *)a1 + 144);
  uint64_t v5 = *(void *)(*(void *)a1 + 136);
  uint64_t v6 = *(void *)(*(void *)a1 + 128) + 8;
  if (a2)
  {
    int v10 = *(void **)(*(void *)a1 + 144);
    outlined init with copy of MLSupportVectorClassifier.ModelParameters.ValidationData(*(void *)(*(void *)a1 + 152), v4);
    v2[11] = v5;
    char v7 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 8);
    outlined init with take of MLSupportVectorClassifier.ModelParameters.ValidationData((uint64_t)v10, (uint64_t)boxed_opaque_existential_1);
    outlined assign with take of Any?((uint64_t)(v2 + 8), v6);
    outlined destroy of MLSupportVectorClassifier.ModelParameters.ValidationData((uint64_t)v3);
  }
  else
  {
    v2[15] = v5;
    char v7 = (void *)v4;
    long long v9 = __swift_allocate_boxed_opaque_existential_1(v2 + 12);
    outlined init with take of MLSupportVectorClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)v9);
    outlined assign with take of Any?((uint64_t)(v2 + 12), v6);
  }
  free(v3);
  free(v7);
  free(v2);
}

double MLSupportVectorClassifier.ModelParameters.penalty.getter()
{
  return *(double *)(v0 + 40);
}

void MLSupportVectorClassifier.ModelParameters.penalty.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

void (*MLSupportVectorClassifier.ModelParameters.penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLSupportVectorClassifier.ModelParameters.convergenceThreshold.getter()
{
  return *(double *)(v0 + 48);
}

void MLSupportVectorClassifier.ModelParameters.convergenceThreshold.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

void (*MLSupportVectorClassifier.ModelParameters.convergenceThreshold.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

char MLSupportVectorClassifier.ModelParameters.featureRescaling.getter()
{
  return *(unsigned char *)(v0 + 56);
}

void MLSupportVectorClassifier.ModelParameters.featureRescaling.setter(char a1)
{
  *(unsigned char *)(v1 + 56) = a1 & 1;
}

void (*MLSupportVectorClassifier.ModelParameters.featureRescaling.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSupportVectorClassifier.ModelParameters.init(validation:maxIterations:penalty:convergenceThreshold:featureRescaling:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5)
{
  double v19 = a5;
  double v20 = a4;
  uint64_t v17 = a1;
  uint64_t v7 = v5;
  uint64_t v8 = type metadata accessor for MLSupportVectorClassifier.ModelParameters.ValidationData(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int v10 = alloca(v9);
  long long v11 = alloca(v9);
  uint64_t v18 = v7 + 8;
  *(_OWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 8) = 0;
  *(void *)uint64_t v7 = a2;
  *(double *)(v7 + 40) = v20;
  *(double *)(v7 + 48) = v19;
  *(unsigned char *)(v7 + 56) = a3 & 1;
  uint64_t v12 = v17;
  outlined init with copy of MLSupportVectorClassifier.ModelParameters.ValidationData(v17, (uint64_t)&v15);
  v16[3] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  outlined init with take of MLSupportVectorClassifier.ModelParameters.ValidationData((uint64_t)&v15, (uint64_t)boxed_opaque_existential_1);
  outlined assign with take of Any?((uint64_t)v16, v18);
  return outlined destroy of MLSupportVectorClassifier.ModelParameters.ValidationData(v12);
}

uint64_t MLSupportVectorClassifier.ModelParameters.init(validationData:maxIterations:penalty:convergenceThreshold:featureRescaling:)(uint64_t *a1, uint64_t a2, char a3, double a4, double a5)
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v5 + 24) = 0;
  *(_OWORD *)(v5 + 8) = 0;
  *(void *)uint64_t v5 = a2;
  *(double *)(v5 + 40) = a4;
  *(double *)(v5 + 48) = a5;
  *(unsigned char *)(v5 + 56) = a3 & 1;
  uint64_t v9 = v6;
  char v10 = v7;
  return MLSupportVectorClassifier.ModelParameters.validationData.setter((uint64_t)&v9);
}

unint64_t MLSupportVectorClassifier.ModelParameters.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._char object = (void *)0xE100000000000000;
  v3._uint64_t countAndFlagsBits = 10;
  String.append(_:)(v3);
  v11._uint64_t countAndFlagsBits = 0;
  v11._char object = (void *)0xE000000000000000;
  v3._uint64_t countAndFlagsBits = 0x3A79746C616E6550;
  v3._char object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  uint64_t v4 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v4);
  v11._uint64_t countAndFlagsBits = 0;
  v11._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v3._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3._char object = "ml.actionClassifier" + 0x8000000000000000;
  String.append(_:)(v3);
  Double.write<A>(to:)(&v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._uint64_t countAndFlagsBits = 10;
  v7._char object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v5 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v5);
  v11._uint64_t countAndFlagsBits = 0;
  v11._char object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(v11._object);
  v11._uint64_t countAndFlagsBits = 0xD000000000000013;
  unsigned __int8 v6 = *(unsigned char *)(v0 + 56);
  v7._uint64_t countAndFlagsBits = 0x65736C6166;
  if (v6) {
    v7._uint64_t countAndFlagsBits = 1702195828;
  }
  v11._char object = "Convergence Threshold: " + 0x8000000000000000;
  v7._char object = (void *)((v6 ^ 1u | 0xFFFFFFFFFFFFFFE4) << 56);
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v7._object);
  v8._uint64_t countAndFlagsBits = 10;
  v8._char object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  uint64_t v9 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  return 0xD000000000000010;
}

unint64_t MLSupportVectorClassifier.ModelParameters.debugDescription.getter()
{
  return MLSupportVectorClassifier.ModelParameters.description.getter();
}

unint64_t MLSupportVectorClassifier.ModelParameters.playgroundDescription.getter()
{
  Swift::String v1 = v0;
  unint64_t result = MLSupportVectorClassifier.ModelParameters.description.getter();
  v1[3] = (unint64_t)&type metadata for String;
  *Swift::String v1 = result;
  v1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSupportVectorClassifier.ModelParameters()
{
  return MLSupportVectorClassifier.ModelParameters.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLSupportVectorClassifier.ModelParameters()
{
  return MLSupportVectorClassifier.ModelParameters.debugDescription.getter();
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLSupportVectorClassifier.ModelParameters()
{
  return MLSupportVectorClassifier.ModelParameters.playgroundDescription.getter();
}

uint64_t sub_1A8A57(__m128 a1)
{
  return key path getter for MLSupportVectorClassifier.ModelParameters.validationData : MLSupportVectorClassifier.ModelParameters(a1);
}

uint64_t sub_1A8A61(uint64_t a1)
{
  return key path setter for MLSupportVectorClassifier.ModelParameters.validationData : MLSupportVectorClassifier.ModelParameters(a1);
}

uint64_t sub_1A8A6B(uint64_t a1)
{
  return MLSupportVectorClassifier.ModelParameters.validation.getter(a1);
}

uint64_t sub_1A8A82(uint64_t a1)
{
  return key path setter for MLSupportVectorClassifier.ModelParameters.validation : MLSupportVectorClassifier.ModelParameters(a1);
}

uint64_t initializeWithCopy for MLSupportVectorClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    (**(void (***)(_OWORD *, long long *))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v7 = *v5;
    v4[1] = v5[1];
    *uint64_t v4 = v7;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for MLSupportVectorClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v2 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    long long v3 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v3;
    goto LABEL_8;
  }
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 8));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

_OWORD *__swift_memcpy57_8(_OWORD *a1, long long *a2)
{
  unint64_t result = a1;
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(long long *)((char *)a2 + 41);
  a1[2] = v5;
  a1[1] = v4;
  *a1 = v3;
  return result;
}

uint64_t assignWithTake for MLSupportVectorClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)(a1 + 8));
  }
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSupportVectorClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 32);
      unint64_t v4 = v3 & 0xFFFFFFFF00000001;
      int v5 = (v3 >> 1) - 1;
      int v6 = -1;
      if (v5 >= 0) {
        int v6 = v5;
      }
      int v2 = v4 != 0 ? -1 : v6;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSupportVectorClassifier.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
    *(unsigned char *)(a1 + 56) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 57) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)(a1 + 32) = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLSupportVectorClassifier.ModelParameters()
{
  return &type metadata for MLSupportVectorClassifier.ModelParameters;
}

uint64_t static _PowerUtilities.createPowerAssertion()()
{
  IOPMAssertionID AssertionID = 0;
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  Swift::String v1 = (__CFString *)String._bridgeToObjectiveC()();
  IOReturn v2 = IOPMAssertionCreateWithName(v0, 0xFFu, v1, &AssertionID);

  if (v2)
  {
    uint64_t v3 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v3, 0, 0);
    IOPMAssertionID v4 = 45;
    *(void *)uint64_t v5 = 0xD00000000000002DLL;
    *(void *)(v5 + 8) = "ssertion Request" + 0x8000000000000000;
    *(_OWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v3, v5, v6, v7, v8);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = swift_allocObject(v9, 72, 7);
    *(void *)(v10 + 16) = 1;
    *(void *)(v10 + 24) = 2;
    IOPMAssertionID v4 = AssertionID;
    *(void *)(v10 + 56) = &type metadata for UInt32;
    *(void *)(v10 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v10 + 32) = v4;
    type metadata accessor for OS_os_log();
    Swift::String v11 = (void *)static OS_os_log.default.getter(0);
    static os_log_type_t.default.getter(0);
    os_log(_:dso:log:type:_:)("Created power assertion %d for CreateML\n", 40);
    swift_bridgeObjectRelease(v10);
  }
  return v4;
}

char static _PowerUtilities.endPowerAssertion(from:)(IOPMAssertionID AssertionID)
{
  if (!AssertionID) {
    return 0;
  }
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v2 = swift_allocObject(v1, 72, 7);
  *(void *)(v2 + 16) = 1;
  *(void *)(v2 + 24) = 2;
  *(void *)(v2 + 56) = &type metadata for UInt32;
  *(void *)(v2 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v2 + 32) = AssertionID;
  type metadata accessor for OS_os_log();
  uint64_t v3 = (void *)static OS_os_log.default.getter(0);
  static os_log_type_t.default.getter(0);
  os_log(_:dso:log:type:_:)("Releasing power assertion %d ", 29);
  swift_bridgeObjectRelease(v2);

  if (IOPMAssertionRelease(AssertionID))
  {
    uint64_t v4 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v4, 0, 0);
    *(void *)uint64_t v5 = 0xD00000000000002ELL;
    *(void *)(v5 + 8) = "Releasing power assertion %d " + 0x8000000000000000;
    *(_OWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 48) = 0;
    return swift_willThrow(&type metadata for MLCreateError, v4, v5, v6, v7, v8);
  }
  else
  {
    uint64_t v10 = (void *)static OS_os_log.default.getter(AssertionID);
    unsigned __int8 v11 = static os_log_type_t.default.getter(AssertionID);
    os_log(_:dso:log:type:_:)("succeeded for CreateML\n", 23, 2, &dword_0, v10, v11, _swiftEmptyArrayStorage);

    return 1;
  }
}

uint64_t MLWordEmbedding.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = v2;
  uint64_t v19 = type metadata accessor for URL(0);
  uint64_t v4 = *(void *)(v19 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)a2;
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v15 = *(_OWORD *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(v3 + 8);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)(v3 + 24);
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, 0x65626D4564726F57, 0xED0000676E696464, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v2)
  {
    uint64_t v20 = v4;
    __m128i si128 = _mm_load_si128((const __m128i *)v16);
    v10[0] = *(_OWORD *)v18;
    v10[1] = v13;
    void v10[2] = v14;
    void v10[3] = v15;
    uint64_t v11 = v17;
    v18[0] = (id)si128.i64[0];
    static MLWordEmbedding.write(dictionary:parameters:to:metadata:)(v8, si128.i64, (uint64_t)v10, (uint64_t)v10);

    return (*(uint64_t (**)(_OWORD *, uint64_t))(v20 + 8))(v10, v19);
  }
  return result;
}

NSURL *static MLWordEmbedding.write(dictionary:parameters:to:metadata:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  uint64_t v4 = *(void *)(a4 + 64);
  v21[0] = *(_OWORD *)a4;
  v21[1] = *(_OWORD *)(a4 + 16);
  v21[2] = *(_OWORD *)(a4 + 32);
  v21[3] = *(_OWORD *)(a4 + 48);
  uint64_t v22 = v4;
  uint64_t v5 = static _TextUtilities.optionsDictionary(from:)((uint64_t *)v21);
  id v19 = (id)objc_opt_self(NLEmbedding);
  uint64_t v20 = (NSURL *)specialized _dictionaryUpCast<A, B, C, D>(_:)(a1);
  URL._bridgeToObjectiveC()(v20);
  uint64_t v7 = v6;
  char v8 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  swift_bridgeObjectRelease(v5);
  *(void *)&v21[0] = 0;
  char v9 = outlined bridged method (mbnnnbnnn) of @objc static NLEmbedding.writeMLModel(for:language:revision:to:options:)((char)v20, v17, v18, (uint64_t)v7, v8, (int)v21, v19);

  uint64_t v10 = *(void *)&v21[0];
  if (v9)
  {
    *(id *)&v21[0];
  }
  else
  {
    id v12 = *(id *)&v21[0];
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v12, v17, v13, v14, v15, v16);
  }
  return __stack_chk_guard;
}

uint64_t MLWordEmbedding.write(toFile:metadata:)(Swift::String a1, long long *a2)
{
  uint64_t v24 = v2;
  id string = a1._object;
  v22._uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  char v8 = alloca(v7);
  char v9 = alloca(v7);
  uint64_t v26 = v14;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  long long v17 = *a2;
  long long v18 = a2[1];
  long long v19 = a2[2];
  long long v20 = a2[3];
  uint64_t v23 = *((void *)a2 + 8);
  v22._char object = *(void **)(v3 + 8);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(v3 + 24);
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, 0x65626D4564726F57, (void *)0xED0000676E696464);
  if (!v2)
  {
    static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)((uint64_t)v14, 0x65626D4564726F57, 0xED0000676E696464, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
    uint64_t v24 = v14;
    __m128i si128 = _mm_load_si128((const __m128i *)v21);
    v14[0] = v17;
    v14[1] = v18;
    v14[2] = v19;
    v14[3] = v20;
    uint64_t v15 = v23;
    id string = (id)si128.i64[0];
    static MLWordEmbedding.write(dictionary:parameters:to:metadata:)((uint64_t)v22._object, si128.i64, (uint64_t)v26, (uint64_t)v14);

    uint64_t v13 = *(void (**)(_OWORD *, uint64_t))(v6 + 8);
    v13(v26, v5);
    return ((uint64_t (*)(_OWORD *, uint64_t))v13)(v24, v5);
  }
  return result;
}

uint64_t outlined bridged method (mbnnnbnnn) of @objc static NLEmbedding.writeMLModel(for:language:revision:to:options:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, id a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a5);
  LODWORD(a3) = [a7 writeEmbeddingMLModelForDictionary:isa language:a2 revision:a3 toURL:v10 options:a4 error:v11];

  return a3;
}

uint64_t initializeBufferWithCopyOfBuffer for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = v11 + ((v5 + 16) & ~v5);
    swift_retain();
    return v4;
  }
  uint64_t v7 = type metadata accessor for MLSoundClassifier.DataSource(0);
  uint64_t v60 = v7;
  switch(swift_getEnumCaseMultiPayload(a2, v7))
  {
    case 0u:
      uint64_t v8 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = v7;
      uint64_t v10 = 0;
      goto LABEL_10;
    case 1u:
      uint64_t v20 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
      uint64_t v55 = 1;
      goto LABEL_8;
    case 2u:
      uint64_t v21 = *(void *)a2;
      *(void *)uint64_t v4 = *(void *)a2;
      swift_bridgeObjectRetain(v21);
      uint64_t v55 = 2;
      goto LABEL_8;
    case 3u:
      uint64_t v22 = *(void *)a2;
      char v23 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v23);
      *(void *)a1 = v22;
      *(unsigned char *)(a1 + 8) = v23;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      *(void *)(v4 + 24) = v24;
      *(void *)(v4 + 32) = *(void *)(a2 + 32);
      uint64_t v25 = *(void *)(a2 + 40);
      *(void *)(v4 + 40) = v25;
      long long v26 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 64) = v26;
      *(unsigned char *)(v4 + 80) = *(unsigned char *)(a2 + 80);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      uint64_t v10 = 3;
      a1 = v4;
      uint64_t v9 = v60;
      goto LABEL_10;
    case 4u:
      uint64_t v12 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v14 = v13[12];
      *(void *)(a1 + v14) = *(void *)(a2 + v14);
      uint64_t v15 = *(void *)(a2 + v14 + 8);
      *(void *)(v4 + v14 + 8) = v15;
      uint64_t v16 = v13[16];
      *(void *)(v4 + v16) = *(void *)(a2 + v16);
      uint64_t v17 = *(void *)(a2 + v16 + 8);
      *(void *)(v4 + v16 + 8) = v17;
      uint64_t v18 = v13[20];
      *(unsigned char *)(v4 + v18 + 32) = *(unsigned char *)(a2 + v18 + 32);
      long long v19 = *(_OWORD *)(a2 + v18);
      *(_OWORD *)(v4 + v18 + 16) = *(_OWORD *)(a2 + v18 + 16);
      *(_OWORD *)(v4 + v18) = v19;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v17);
      uint64_t v55 = 4;
LABEL_8:
      uint64_t v10 = v55;
      a1 = v4;
      uint64_t v9 = v7;
LABEL_10:
      swift_storeEnumTagMultiPayload(a1, v9, v10);
      uint64_t v59 = a3;
      uint64_t v27 = a3[5];
      BOOL v28 = (void *)(v4 + v27);
      BOOL v29 = (char *)(a2 + v27);
      uint64_t v30 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v30);
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v37 = *(void *)v29;
        *BOOL v28 = *(void *)v29;
        swift_bridgeObjectRetain(v37);
        swift_storeEnumTagMultiPayload(v28, v30, 2);
LABEL_16:
        uint64_t v38 = v59;
        goto LABEL_24;
      }
      uint64_t v58 = v30;
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
        goto LABEL_16;
      }
      BOOL v32 = v28;
      switch(swift_getEnumCaseMultiPayload(v29, v60))
      {
        case 0u:
          uint64_t v33 = type metadata accessor for URL(0);
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v28, v29, v33);
          uint64_t v34 = v28;
          uint64_t v35 = v60;
          uint64_t v36 = 0;
          goto LABEL_23;
        case 1u:
          type metadata accessor for URL(0);
          JUMPOUT(0x1A97BFLL);
        case 2u:
          uint64_t v39 = *(void *)v29;
          *BOOL v28 = *(void *)v29;
          swift_bridgeObjectRetain(v39);
          uint64_t v56 = 2;
          goto LABEL_22;
        case 3u:
          uint64_t v57 = *(void *)v29;
          char v40 = v29[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v29, v40);
          void *v32 = v57;
          *((unsigned char *)v32 + 8) = v40;
          v32[2] = *((void *)v29 + 2);
          uint64_t v41 = *((void *)v29 + 3);
          v32[3] = v41;
          v32[4] = *((void *)v29 + 4);
          uint64_t v42 = *((void *)v29 + 5);
          v32[5] = v42;
          long long v43 = *((_OWORD *)v29 + 4);
          *((_OWORD *)v32 + 3) = *((_OWORD *)v29 + 3);
          *((_OWORD *)v32 + 4) = v43;
          *((unsigned char *)v32 + 80) = v29[80];
          swift_bridgeObjectRetain(v41);
          swift_bridgeObjectRetain(v42);
          uint64_t v56 = 3;
          goto LABEL_22;
        case 4u:
          uint64_t v44 = type metadata accessor for DataFrame(0);
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v28, v29, v44);
          uint64_t v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v46 = v45[12];
          *(void *)((char *)v28 + v46) = *(void *)&v29[v46];
          uint64_t v47 = *(void *)&v29[v46 + 8];
          *(void *)((char *)v28 + v46 + 8) = v47;
          uint64_t v48 = v45[16];
          *(void *)((char *)v28 + v48) = *(void *)&v29[v48];
          uint64_t v49 = *(void *)&v29[v48 + 8];
          *(void *)((char *)v32 + v48 + 8) = v49;
          uint64_t v50 = v45[20];
          *((unsigned char *)v32 + v50 + 32) = v29[v50 + 32];
          long long v51 = *(_OWORD *)&v29[v50];
          *(_OWORD *)((char *)v32 + v50 + 16) = *(_OWORD *)&v29[v50 + 16];
          *(_OWORD *)((char *)v32 + v50) = v51;
          swift_bridgeObjectRetain(v47);
          swift_bridgeObjectRetain(v49);
          uint64_t v56 = 4;
LABEL_22:
          uint64_t v36 = v56;
          uint64_t v34 = v32;
          uint64_t v35 = v60;
LABEL_23:
          swift_storeEnumTagMultiPayload(v34, v35, v36);
          uint64_t v38 = v59;
          swift_storeEnumTagMultiPayload(v32, v58, 1);
          break;
      }
LABEL_24:
      *(void *)(v4 + v38[6]) = *(void *)(a2 + v38[6]);
      *(void *)(v4 + v38[7]) = *(void *)(a2 + v38[7]);
      *(void *)(v4 + v38[8]) = *(void *)(a2 + v38[8]);
      uint64_t v52 = v38[9];
      *(unsigned char *)(v4 + v52 + 8) = *(unsigned char *)(a2 + v52 + 8);
      *(void *)(v4 + v52) = *(void *)(a2 + v52);
      uint64_t v53 = *(void *)(a2 + v52 + 16);
      *(void *)(v4 + v52 + 16) = v53;
      swift_bridgeObjectRetain(v53);
      return v4;
  }
}

uint64_t destroy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MLSoundClassifier.DataSource(0);
  switch(swift_getEnumCaseMultiPayload(a1, v3))
  {
    case 0u:
    case 1u:
      uint64_t v4 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2u:
      uint64_t v7 = *(void *)a1;
      goto LABEL_6;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      uint64_t v7 = *(void *)(a1 + 40);
      goto LABEL_6;
    case 4u:
      uint64_t v5 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v6 + 48) + 8));
      uint64_t v7 = *(void *)(a1 + *(int *)(v6 + 64) + 8);
LABEL_6:
      swift_bridgeObjectRelease(v7);
      break;
    default:
      break;
  }
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  uint64_t v9 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  if (EnumCaseMultiPayload == 2)
  {
LABEL_11:
    uint64_t v12 = *(void *)v8;
LABEL_12:
    swift_bridgeObjectRelease(v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    switch(swift_getEnumCaseMultiPayload(v8, v3))
    {
      case 0u:
      case 1u:
        uint64_t v11 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
        break;
      case 2u:
        goto LABEL_11;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(void *)v8, *(_DWORD *)(v8 + 8));
        swift_bridgeObjectRelease(*(void *)(v8 + 24));
        uint64_t v12 = *(void *)(v8 + 40);
        goto LABEL_12;
      case 4u:
        uint64_t v14 = type metadata accessor for DataFrame(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v8, v14);
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v15 + 48) + 8));
        uint64_t v12 = *(void *)(v8 + *(int *)(v15 + 64) + 8);
        goto LABEL_12;
      default:
        return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 36) + 16));
    }
  }
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 36) + 16));
}

uint64_t initializeWithCopy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
  uint64_t v54 = v6;
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = v6;
      uint64_t v9 = 0;
      goto LABEL_8;
    case 1u:
      uint64_t v19 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      uint64_t v48 = 1;
      goto LABEL_6;
    case 2u:
      uint64_t v20 = *(void *)a2;
      *(void *)uint64_t v5 = *(void *)a2;
      swift_bridgeObjectRetain(v20);
      uint64_t v48 = 2;
      goto LABEL_6;
    case 3u:
      uint64_t v21 = a3;
      uint64_t v22 = *(void *)a2;
      char v23 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v23);
      *(void *)a1 = v22;
      *(unsigned char *)(a1 + 8) = v23;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      *(void *)(v5 + 24) = v24;
      *(void *)(v5 + 32) = *(void *)(a2 + 32);
      uint64_t v25 = *(void *)(a2 + 40);
      *(void *)(v5 + 40) = v25;
      long long v26 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v5 + 64) = v26;
      *(unsigned char *)(v5 + 80) = *(unsigned char *)(a2 + 80);
      swift_bridgeObjectRetain(v24);
      LOBYTE(v24) = v25;
      a3 = v21;
      swift_bridgeObjectRetain(v24);
      uint64_t v9 = 3;
      a1 = v5;
      uint64_t v8 = v54;
      goto LABEL_8;
    case 4u:
      uint64_t v10 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v12 = v11[12];
      *(void *)(a1 + v12) = *(void *)(a2 + v12);
      uint64_t v13 = *(void *)(a2 + v12 + 8);
      *(void *)(v5 + v12 + 8) = v13;
      uint64_t v14 = v11[16];
      *(void *)(v5 + v14) = *(void *)(a2 + v14);
      uint64_t v15 = a3;
      uint64_t v16 = *(void *)(a2 + v14 + 8);
      *(void *)(v5 + v14 + 8) = v16;
      uint64_t v17 = v11[20];
      *(unsigned char *)(v5 + v17 + 32) = *(unsigned char *)(a2 + v17 + 32);
      long long v18 = *(_OWORD *)(a2 + v17);
      *(_OWORD *)(v5 + v17 + 16) = *(_OWORD *)(a2 + v17 + 16);
      *(_OWORD *)(v5 + v17) = v18;
      swift_bridgeObjectRetain(v13);
      LOBYTE(v13) = v16;
      a3 = v15;
      swift_bridgeObjectRetain(v13);
      uint64_t v48 = 4;
LABEL_6:
      uint64_t v9 = v48;
      a1 = v5;
      uint64_t v8 = v6;
LABEL_8:
      swift_storeEnumTagMultiPayload(a1, v8, v9);
      long long v51 = a3;
      uint64_t v27 = a3[5];
      BOOL v28 = (char *)(v5 + v27);
      uint64_t v29 = a2 + v27;
      uint64_t v30 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v30);
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v36 = *(void *)v29;
        *(void *)BOOL v28 = *(void *)v29;
        swift_bridgeObjectRetain(v36);
        swift_storeEnumTagMultiPayload(v28, v30, 2);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        switch(swift_getEnumCaseMultiPayload(v29, v54))
        {
          case 0u:
            uint64_t v32 = type metadata accessor for URL(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v28, v29, v32);
            uint64_t v33 = v28;
            uint64_t v34 = v54;
            uint64_t v35 = 0;
            goto LABEL_21;
          case 1u:
            type metadata accessor for URL(0);
            JUMPOUT(0x1A9D8DLL);
          case 2u:
            uint64_t v37 = *(void *)v29;
            *(void *)BOOL v28 = *(void *)v29;
            swift_bridgeObjectRetain(v37);
            uint64_t v49 = 2;
            goto LABEL_20;
          case 3u:
            uint64_t v50 = *(void *)v29;
            char v52 = *(unsigned char *)(v29 + 8);
            outlined copy of Result<_DataTable, Error>(*(void *)v29, v52);
            *(void *)BOOL v28 = v50;
            v28[8] = v52;
            *((void *)v28 + 2) = *(void *)(v29 + 16);
            *((void *)v28 + 3) = *(void *)(v29 + 24);
            JUMPOUT(0x1A9DF4);
          case 4u:
            uint64_t v38 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v28, v29, v38);
            uint64_t v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
            uint64_t v40 = v39[12];
            *(void *)&v28[v40] = *(void *)(v29 + v40);
            uint64_t v41 = *(void *)(v29 + v40 + 8);
            *(void *)&v28[v40 + 8] = v41;
            uint64_t v42 = v39[16];
            *(void *)&v28[v42] = *(void *)(v29 + v42);
            uint64_t v53 = *(void *)(v29 + v42 + 8);
            *(void *)&v28[v42 + 8] = v53;
            uint64_t v43 = v39[20];
            v28[v43 + 32] = *(unsigned char *)(v29 + v43 + 32);
            long long v44 = *(_OWORD *)(v29 + v43);
            *(_OWORD *)&v28[v43 + 16] = *(_OWORD *)(v29 + v43 + 16);
            *(_OWORD *)&v28[v43] = v44;
            swift_bridgeObjectRetain(v41);
            swift_bridgeObjectRetain(v53);
            uint64_t v49 = 4;
LABEL_20:
            uint64_t v35 = v49;
            uint64_t v33 = v28;
            uint64_t v34 = v54;
LABEL_21:
            swift_storeEnumTagMultiPayload(v33, v34, v35);
            swift_storeEnumTagMultiPayload(v28, v30, 1);
            break;
        }
      }
      else
      {
        memcpy(v28, (const void *)v29, *(void *)(*(void *)(v30 - 8) + 64));
      }
      *(void *)(v5 + v51[6]) = *(void *)(a2 + v51[6]);
      *(void *)(v5 + v51[7]) = *(void *)(a2 + v51[7]);
      *(void *)(v5 + v51[8]) = *(void *)(a2 + v51[8]);
      uint64_t v45 = v51[9];
      *(unsigned char *)(v5 + v45 + 8) = *(unsigned char *)(a2 + v45 + 8);
      *(void *)(v5 + v45) = *(void *)(a2 + v45);
      uint64_t v46 = *(void *)(a2 + v45 + 16);
      *(void *)(v5 + v45 + 16) = v46;
      swift_bridgeObjectRetain(v46);
      return v5;
  }
}

uint64_t assignWithCopy for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = a1;
  if (a1 == a2) {
    goto LABEL_24;
  }
  outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLSoundClassifier.DataSource);
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
  uint64_t v54 = v6;
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      uint64_t v7 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = v6;
      uint64_t v9 = 0;
      goto LABEL_9;
    case 1u:
      uint64_t v18 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      uint64_t v47 = 1;
      goto LABEL_7;
    case 2u:
      uint64_t v19 = *(void *)a2;
      *(void *)uint64_t v5 = *(void *)a2;
      swift_bridgeObjectRetain(v19);
      uint64_t v47 = 2;
      goto LABEL_7;
    case 3u:
      uint64_t v20 = *(void *)a2;
      char v21 = *(unsigned char *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(void *)a2, v21);
      *(void *)a1 = v20;
      *(unsigned char *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v22 = *(void *)(a2 + 24);
      *(void *)(v5 + 24) = v22;
      *(void *)(v5 + 32) = *(void *)(a2 + 32);
      uint64_t v23 = *(void *)(a2 + 40);
      *(void *)(v5 + 40) = v23;
      long long v24 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v5 + 64) = v24;
      *(unsigned char *)(v5 + 80) = *(unsigned char *)(a2 + 80);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      uint64_t v9 = 3;
      a1 = v5;
      uint64_t v8 = v54;
      goto LABEL_9;
    case 4u:
      uint64_t v10 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v12 = v11[12];
      *(void *)(a1 + v12) = *(void *)(a2 + v12);
      uint64_t v13 = *(void *)(a2 + v12 + 8);
      *(void *)(v5 + v12 + 8) = v13;
      uint64_t v14 = v11[16];
      *(void *)(v5 + v14) = *(void *)(a2 + v14);
      uint64_t v15 = *(void *)(a2 + v14 + 8);
      *(void *)(v5 + v14 + 8) = v15;
      uint64_t v16 = v11[20];
      *(unsigned char *)(v5 + v16 + 32) = *(unsigned char *)(a2 + v16 + 32);
      long long v17 = *(_OWORD *)(a2 + v16);
      *(_OWORD *)(v5 + v16 + 16) = *(_OWORD *)(a2 + v16 + 16);
      *(_OWORD *)(v5 + v16) = v17;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      uint64_t v47 = 4;
LABEL_7:
      uint64_t v9 = v47;
      a1 = v5;
      uint64_t v8 = v6;
LABEL_9:
      swift_storeEnumTagMultiPayload(a1, v8, v9);
      long long v51 = a3;
      uint64_t v25 = a3[5];
      long long v26 = (void *)(v5 + v25);
      uint64_t v27 = (char *)(a2 + v25);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v26, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      uint64_t v28 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v28);
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v34 = *(void *)v27;
        void *v26 = *(void *)v27;
        swift_bridgeObjectRetain(v34);
        swift_storeEnumTagMultiPayload(v26, v28, 2);
LABEL_15:
        a3 = v51;
        goto LABEL_24;
      }
      uint64_t v50 = v28;
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
        goto LABEL_15;
      }
      a3 = v51;
      switch(swift_getEnumCaseMultiPayload(v27, v54))
      {
        case 0u:
          uint64_t v30 = type metadata accessor for URL(0);
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v26, v27, v30);
          BOOL v31 = v26;
          uint64_t v32 = v54;
          uint64_t v33 = 0;
          goto LABEL_23;
        case 1u:
          type metadata accessor for URL(0);
          JUMPOUT(0x1AA1DFLL);
        case 2u:
          uint64_t v35 = *(void *)v27;
          void *v26 = *(void *)v27;
          swift_bridgeObjectRetain(v35);
          uint64_t v48 = 2;
          goto LABEL_22;
        case 3u:
          uint64_t v49 = *(void *)v27;
          char v52 = v27[8];
          outlined copy of Result<_DataTable, Error>(*(void *)v27, v52);
          void *v26 = v49;
          *((unsigned char *)v26 + 8) = v52;
          void v26[2] = *((void *)v27 + 2);
          JUMPOUT(0x1AA245);
        case 4u:
          uint64_t v36 = type metadata accessor for DataFrame(0);
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v26, v27, v36);
          uint64_t v37 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
          uint64_t v38 = v37[12];
          *(void *)((char *)v26 + v38) = *(void *)&v27[v38];
          uint64_t v39 = *(void *)&v27[v38 + 8];
          *(void *)((char *)v26 + v38 + 8) = v39;
          uint64_t v40 = v37[16];
          *(void *)((char *)v26 + v40) = *(void *)&v27[v40];
          uint64_t v53 = *(void *)&v27[v40 + 8];
          *(void *)((char *)v26 + v40 + 8) = v53;
          uint64_t v41 = v37[20];
          *((unsigned char *)v26 + v41 + 32) = v27[v41 + 32];
          long long v42 = *(_OWORD *)&v27[v41];
          *(_OWORD *)((char *)v26 + v41 + 16) = *(_OWORD *)&v27[v41 + 16];
          *(_OWORD *)((char *)v26 + v41) = v42;
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(v53);
          uint64_t v48 = 4;
LABEL_22:
          uint64_t v33 = v48;
          BOOL v31 = v26;
          uint64_t v32 = v54;
LABEL_23:
          swift_storeEnumTagMultiPayload(v31, v32, v33);
          swift_storeEnumTagMultiPayload(v26, v50, 1);
          break;
      }
LABEL_24:
      *(void *)(v5 + a3[6]) = *(void *)(a2 + a3[6]);
      *(void *)(v5 + a3[7]) = *(void *)(a2 + a3[7]);
      *(void *)(v5 + a3[8]) = *(void *)(a2 + a3[8]);
      uint64_t v43 = a3[9];
      *(unsigned char *)(v5 + v43 + 8) = *(unsigned char *)(a2 + v43 + 8);
      *(void *)(v5 + v43) = *(void *)(a2 + v43);
      uint64_t v44 = *(void *)(a2 + v43 + 16);
      uint64_t v45 = *(void *)(v5 + v43 + 16);
      *(void *)(v5 + v43 + 16) = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      return v5;
  }
}

unsigned char *initializeWithTake for MLSoundClassifier.PersistentParameters(unsigned char *__dst, unsigned char *__src, int *a3)
{
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
  uint64_t v36 = v6;
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v11 = type metadata accessor for DataFrame(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
      uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&__dst[v12[12]] = *(_OWORD *)&__src[v12[12]];
      *(_OWORD *)&__dst[v12[16]] = *(_OWORD *)&__src[v12[16]];
      uint64_t v13 = v12[20];
      long long v14 = *(_OWORD *)&__src[v13 + 16];
      *(_OWORD *)&__dst[v13] = *(_OWORD *)&__src[v13];
      *(_OWORD *)&__dst[v13 + 16] = v14;
      __dst[v13 + 32] = __src[v13 + 32];
      uint64_t v33 = 4;
LABEL_7:
      uint64_t v10 = v33;
      uint64_t v9 = v6;
      goto LABEL_8;
    case 1:
      uint64_t v15 = type metadata accessor for URL(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
      uint64_t v33 = 1;
      goto LABEL_7;
    case 0:
      uint64_t v8 = type metadata accessor for URL(0);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
      uint64_t v9 = v6;
      uint64_t v10 = 0;
LABEL_8:
      swift_storeEnumTagMultiPayload(__dst, v9, v10);
      goto LABEL_10;
  }
  memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_10:
  uint64_t v35 = a3;
  uint64_t v16 = a3[5];
  long long v17 = &__dst[v16];
  uint64_t v18 = &__src[v16];
  uint64_t v19 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    int v20 = swift_getEnumCaseMultiPayload(v18, v36);
    if (v20 == 4)
    {
      uint64_t v26 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v17, v18, v26);
      uint64_t v27 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v17[v27[12]] = *(_OWORD *)&v18[v27[12]];
      *(_OWORD *)&v17[v27[16]] = *(_OWORD *)&v18[v27[16]];
      uint64_t v28 = v27[20];
      long long v29 = *(_OWORD *)&v18[v28 + 16];
      *(_OWORD *)&v17[v28] = *(_OWORD *)&v18[v28];
      *(_OWORD *)&v17[v28 + 16] = v29;
      v17[v28 + 32] = v18[v28 + 32];
      uint64_t v34 = 4;
    }
    else
    {
      if (v20 != 1)
      {
        if (v20)
        {
          memcpy(v17, v18, *(void *)(*(void *)(v36 - 8) + 64));
          goto LABEL_21;
        }
        uint64_t v21 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v17, v18, v21);
        uint64_t v22 = v17;
        uint64_t v23 = v36;
        uint64_t v24 = 0;
LABEL_19:
        swift_storeEnumTagMultiPayload(v22, v23, v24);
LABEL_21:
        uint64_t v25 = v35;
        swift_storeEnumTagMultiPayload(v17, v19, 1);
        goto LABEL_22;
      }
      uint64_t v30 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v17, v18, v30);
      uint64_t v34 = 1;
    }
    uint64_t v24 = v34;
    uint64_t v22 = v17;
    uint64_t v23 = v36;
    goto LABEL_19;
  }
  memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  uint64_t v25 = v35;
LABEL_22:
  *(void *)&__dst[v25[6]] = *(void *)&__src[v25[6]];
  *(void *)&__dst[v25[7]] = *(void *)&__src[v25[7]];
  *(void *)&__dst[v25[8]] = *(void *)&__src[v25[8]];
  uint64_t v31 = v25[9];
  *(void *)&__dst[v31 + 16] = *(void *)&__src[v31 + 16];
  *(_OWORD *)&__dst[v31] = *(_OWORD *)&__src[v31];
  return __dst;
}

unsigned char *assignWithTake for MLSoundClassifier.PersistentParameters(unsigned char *__dst, unsigned char *__src, int *a3)
{
  if (__dst == __src) {
    goto LABEL_22;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLSoundClassifier.DataSource);
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v6);
  uint64_t v36 = v6;
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v11 = type metadata accessor for DataFrame(0);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(__dst, __src, v11);
    uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&__dst[v12[12]] = *(_OWORD *)&__src[v12[12]];
    *(_OWORD *)&__dst[v12[16]] = *(_OWORD *)&__src[v12[16]];
    uint64_t v13 = v12[20];
    long long v14 = *(_OWORD *)&__src[v13 + 16];
    *(_OWORD *)&__dst[v13] = *(_OWORD *)&__src[v13];
    *(_OWORD *)&__dst[v13 + 16] = v14;
    __dst[v13 + 32] = __src[v13 + 32];
    uint64_t v33 = 4;
LABEL_8:
    uint64_t v10 = v33;
    uint64_t v9 = v6;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = type metadata accessor for URL(0);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(__dst, __src, v15);
    uint64_t v33 = 1;
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(__dst, __src, *(void *)(*(void *)(v6 - 8) + 64));
    goto LABEL_11;
  }
  uint64_t v8 = type metadata accessor for URL(0);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(__dst, __src, v8);
  uint64_t v9 = v6;
  uint64_t v10 = 0;
LABEL_9:
  swift_storeEnumTagMultiPayload(__dst, v9, v10);
LABEL_11:
  uint64_t v35 = a3;
  uint64_t v16 = a3[5];
  long long v17 = &__dst[v16];
  uint64_t v18 = &__src[v16];
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v17, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v19 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    uint64_t v34 = v19;
    int v20 = swift_getEnumCaseMultiPayload(v18, v36);
    if (v20 == 4)
    {
      uint64_t v23 = type metadata accessor for DataFrame(0);
      uint64_t v21 = v17;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
      uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&v17[v24[12]] = *(_OWORD *)&v18[v24[12]];
      *(_OWORD *)&v17[v24[16]] = *(_OWORD *)&v18[v24[16]];
      uint64_t v25 = v24[20];
      long long v26 = *(_OWORD *)&v18[v25 + 16];
      *(_OWORD *)&v17[v25] = *(_OWORD *)&v18[v25];
      *(_OWORD *)&v17[v25 + 16] = v26;
      v17[v25 + 32] = v18[v25 + 32];
      uint64_t v27 = 4;
      uint64_t v28 = v17;
    }
    else
    {
      uint64_t v21 = v17;
      if (v20 != 1)
      {
        a3 = v35;
        if (v20)
        {
          memcpy(v21, v18, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          uint64_t v22 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21, v18, v22);
          swift_storeEnumTagMultiPayload(v21, v36, 0);
        }
        goto LABEL_21;
      }
      uint64_t v29 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v17, v18, v29);
      uint64_t v27 = 1;
      uint64_t v28 = v17;
    }
    swift_storeEnumTagMultiPayload(v28, v36, v27);
    a3 = v35;
LABEL_21:
    swift_storeEnumTagMultiPayload(v21, v34, 1);
    goto LABEL_22;
  }
  memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  a3 = v35;
LABEL_22:
  *(void *)&__dst[a3[6]] = *(void *)&__src[a3[6]];
  *(void *)&__dst[a3[7]] = *(void *)&__src[a3[7]];
  *(void *)&__dst[a3[8]] = *(void *)&__src[a3[8]];
  uint64_t v30 = a3[9];
  __dst[v30 + 8] = __src[v30 + 8];
  *(void *)&__dst[v30] = *(void *)&__src[v30];
  uint64_t v31 = *(void *)&__dst[v30 + 16];
  *(void *)&__dst[v30 + 16] = *(void *)&__src[v30 + 16];
  swift_bridgeObjectRelease(v31);
  return __dst;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1AA976);
}

uint64_t sub_1AA976(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2) {
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  unsigned int v6 = 0;
  uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (*(_DWORD *)(*(void *)(v5 - 8) + 84) == a2)
  {
    uint64_t v4 = *(int *)(a3 + 20) + a1;
    return __swift_getEnumTagSinglePayload(v4, a2, v5);
  }
  int v8 = -1;
  if ((int)((*(void *)(a1 + *(int *)(a3 + 36) + 16) >> 1) - 1) >= 0) {
    int v8 = (*(void *)(a1 + *(int *)(a3 + 36) + 16) >> 1) - 1;
  }
  unsigned int v9 = v8 + 1;
  if ((*(void *)(a1 + *(int *)(a3 + 36) + 16) & 0xFFFFFFFF00000001) == 0) {
    return v9;
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.PersistentParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1AAA1E);
}

uint64_t sub_1AAA1E(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = type metadata accessor for MLSoundClassifier.DataSource(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3) {
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  if (*(_DWORD *)(*(void *)(v7 - 8) + 84) == a3)
  {
    uint64_t v6 = *(int *)(a4 + 20) + a1;
    return __swift_storeEnumTagSinglePayload(v6, a2, a2, v7);
  }
  uint64_t result = *(int *)(a4 + 36);
  *(void *)(a1 + result + 16) = 2 * a2;
  return result;
}

uint64_t type metadata accessor for MLSoundClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLSoundClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLSoundClassifier.PersistentParameters) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLSoundClassifier.PersistentParameters);
  }
  return result;
}

uint64_t type metadata completion function for MLSoundClassifier.PersistentParameters(uint64_t a1)
{
  uint64_t result = type metadata accessor for MLSoundClassifier.DataSource(319);
  if (v2 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(319);
    if (v3 <= 0x3F)
    {
      v4[1] = *(void *)(result - 8) + 64;
      v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
      void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v4[5] = &unk_34D6F8;
      swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t MLSoundClassifier.PersistentParameters.init(trainingData:modelParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters(0);
  uint64_t v18 = v4[6];
  uint64_t v20 = v4[7];
  uint64_t v19 = v4[8];
  uint64_t v5 = v4[9];
  *(void *)(v3 + v5) = 1;
  *(unsigned char *)(v3 + v5 + 8) = 1;
  uint64_t v17 = v5;
  *(void *)(v3 + v5 + 16) = 0;
  uint64_t v16 = a1;
  outlined init with copy of MLTrainingSessionParameters(a1, v3, type metadata accessor for MLSoundClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(a2, v3 + v4[5], type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v6 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters(0);
  *(void *)(v3 + v18) = *(void *)(a2 + v6[6]);
  *(double *)(v3 + v20) = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  *(void *)(v3 + v19) = *(void *)(a2 + v6[5]);
  outlined init with copy of Any?(a2 + v6[7], (uint64_t)v11);
  if (!v12)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v11, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if (!swift_dynamicCast(&v13, v11, (char *)&type metadata for Any + 8, &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType, 6))
  {
LABEL_5:
    char v7 = 1;
    uint64_t v19 = 1;
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  uint64_t v19 = v13;
  char v7 = v14;
  uint64_t v8 = v15;
LABEL_6:
  uint64_t v20 = v8;
  outlined destroy of MLActivityClassifier.ModelParameters(a2, type metadata accessor for MLSoundClassifier.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v16, type metadata accessor for MLSoundClassifier.DataSource);
  uint64_t v9 = v17;
  swift_bridgeObjectRelease(*(void *)(v3 + v17 + 16));
  *(void *)(v3 + v9) = v19;
  *(unsigned char *)(v3 + v9 + 8) = v7 & 1;
  uint64_t result = v20;
  *(void *)(v3 + v9 + 16) = v20;
  return result;
}

NSURL *MLSoundClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v82 = v1;
  uint64_t v99 = v2;
  uint64_t v96 = a1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLSoundClassifier.DataSource(0) - 8) + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v90 = v81;
  uint64_t v104 = type metadata accessor for URL(0);
  uint64_t v91 = *(void *)(v104 - 8);
  int64_t v6 = *(void *)(v91 + 64);
  char v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v85 = v81;
  uint64_t v9 = alloca(v6);
  uint64_t v10 = alloca(v6);
  uint64_t v84 = v81;
  uint64_t v11 = alloca(v6);
  uint64_t v12 = alloca(v6);
  BOOL v83 = v81;
  uint64_t v87 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v13 = *(void *)(*(void *)(v87 - 8) + 64);
  char v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v86 = v81;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v92 = v81;
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  uint64_t v105 = v81;
  uint64_t v93 = type metadata accessor for MLSoundClassifier.ModelParameters(0);
  int64_t v20 = *(void *)(*(void *)(v93 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v88 = v81;
  uint64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v25, v112);
  *(void *)(inited + 16) = 5;
  *(void *)(inited + 24) = 10;
  *(void *)(inited + 32) = 0x676E696E69617274;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v27 = MLSoundClassifier.DataSource.dictionary.getter();
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 72) = v106;
  *(void *)(inited + 48) = v27;
  *(void *)(inited + 80) = 0x69746164696C6176;
  *(void *)(inited + 88) = 0xEA00000000006E6FLL;
  uint64_t v28 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters(0);
  uint64_t v29 = v99;
  uint64_t v89 = v99 + v28[5];
  outlined init with copy of MLTrainingSessionParameters(v89, (uint64_t)v105, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v100 = v28;
  uint64_t v97 = (void *)v28[8];
  uint64_t v103 = *(void *)((char *)v97 + v29);
  uint64_t v98 = v28[6];
  uint64_t v95 = *(void *)(v29 + v98);
  uint64_t v30 = (void *)v28[9];
  uint64_t v94 = *(char **)((char *)v30 + v29);
  LOBYTE(v101) = *((unsigned char *)v30 + v29 + 8);
  uint64_t v31 = *(void *)((char *)v30 + v29 + 16);
  uint64_t v32 = v93;
  uint64_t v33 = *(int *)(v93 + 28);
  *(_OWORD *)&v81[v33] = 0;
  *(_OWORD *)((char *)&v83 + v33) = 0;
  uint64_t v34 = *(int *)(v32 + 32);
  *(void *)&v81[v34] = 0;
  uint64_t v102 = &v81[v33];
  v81[v34 + 8] = 1;
  *(void *)&v81[*(int *)(v32 + 36)] = 32;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v105, (uint64_t)v81, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v35 = v93;
  *(void *)&v81[*(int *)(v93 + 20)] = v103;
  *(void *)&v81[*(int *)(v35 + 24)] = v95;
  uint64_t v111 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  id v108 = v94;
  char v109 = v101;
  uint64_t v110 = v31;
  swift_bridgeObjectRetain(v31);
  outlined assign with take of Any?((uint64_t)&v108, (uint64_t)v102);
  uint64_t v36 = (uint64_t)v105;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v105, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v81, v36, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v81, type metadata accessor for MLSoundClassifier.ModelParameters);
  uint64_t v37 = MLSoundClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLActivityClassifier.ModelParameters(v36, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  *(void *)(inited + 120) = v106;
  *(void *)(inited + 96) = v37;
  *(void *)(inited + 128) = 0x70616C7265766FLL;
  *(void *)(inited + 136) = 0xE700000000000000;
  uint64_t v38 = v99;
  uint64_t v39 = *(void *)(v99 + v98);
  *(void *)(inited + 168) = &type metadata for Double;
  *(void *)(inited + 144) = v39;
  strcpy((char *)(inited + 176), "max_iterations");
  *(unsigned char *)(inited + 191) = -18;
  uint64_t v40 = *(void *)((char *)v97 + v38);
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v40;
  *(void *)(inited + 224) = 0x687469726F676C61;
  *(void *)(inited + 232) = 0xE90000000000006DLL;
  uint64_t v41 = *(void **)((char *)v30 + v38);
  char v42 = *((unsigned char *)v30 + v38 + 8);
  uint64_t v94 = (char *)v30;
  uint64_t v43 = *(void *)((char *)v30 + v38 + 16);
  id v108 = v41;
  char v109 = v42;
  uint64_t v110 = v43;
  uint64_t v44 = MLSoundClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(void *)(inited + 264) = v106;
  *(void *)(inited + 240) = v44;
  uint64_t v107 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  __m128 v45 = (__m128)*(unint64_t *)(v38 + v100[7]);
  uint64_t v111 = (ValueMetadata *)&type metadata for Double;
  id v108 = (id)v45.i64[0];
  specialized Dictionary.subscript.setter((uint64_t)&v108, 0xD000000000000010, (uint64_t)("sertion %d for CreateML\n" + 0x8000000000000000));
  uint64_t v46 = objc_opt_self(NSPropertyListSerialization);
  LOBYTE(inited) = v107;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(inited);
  id v108 = 0;
  id v48 = [v46 dataWithPropertyList:isa format:200 options:0 error:&v108];
  id v49 = v48;

  id v50 = v108;
  if (!v49)
  {
    uint64_t v56 = v50;
    _convertNSErrorToError(_:)(v50);

    swift_willThrow(v56, "dataWithPropertyList:format:options:error:", v57, v58, v59, v60);
    return __stack_chk_guard;
  }
  long long v51 = (unsigned char *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
  unint64_t v53 = v52;

  uint64_t v54 = v83;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v55 = v82;
  Data.write(to:options:)(v54, 0, v51, v53);
  if (!v55)
  {
    uint64_t v102 = v51;
    unint64_t v101 = v53;
    uint64_t v106 = 0;
    uint64_t v100 = *(int **)(v91 + 8);
    *(double *)v45.i64 = ((double (*)(unsigned char *, uint64_t))v100)(v54, v104);
    MLSoundClassifier.DataSource.table.getter(v45);
    char v61 = v109;
    if (v109 != -1)
    {
      uint64_t v103 = (uint64_t)v108;
      v109 &= 1u;
      uint64_t v62 = (uint64_t)v84;
      URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
      uint64_t v63 = v106;
      MLDataTable.write(to:)(v62);
      if (v63)
      {
        ((void (*)(uint64_t, uint64_t))v100)(v62, v104);
        outlined consume of Data._Representation((uint64_t)v102, v101);
        char v64 = v61;
        uint64_t v65 = v103;
LABEL_15:
        outlined consume of MLDataTable?(v65, v64);
        return __stack_chk_guard;
      }
      uint64_t v106 = 0;
      ((void (*)(uint64_t, uint64_t))v100)(v62, v104);
      outlined consume of MLDataTable?(v103, v61);
    }
    uint64_t v66 = (uint64_t)v105;
    outlined init with copy of MLTrainingSessionParameters(v89, (uint64_t)v105, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v95 = *(void *)((char *)v97 + v99);
    uint64_t v103 = *(void *)(v99 + v98);
    uint64_t v97 = *(void **)&v94[v99];
    LOBYTE(v98) = v94[v99 + 8];
    uint64_t v99 = *(void *)&v94[v99 + 16];
    uint64_t v67 = (int *)v93;
    uint64_t v68 = *(int *)(v93 + 28);
    uint64_t v69 = (uint64_t)v88;
    uint64_t v70 = v88;
    *(_OWORD *)&v88[v68 + 16] = 0;
    *(_OWORD *)&v70[v68] = 0;
    uint64_t v71 = v67[8];
    *(void *)&v70[v71] = 0;
    uint64_t v72 = (uint64_t)&v70[v68];
    *(unsigned char *)(v69 + v71 + 8) = 1;
    *(void *)(v69 + v67[9]) = 32;
    outlined init with copy of MLTrainingSessionParameters(v66, v69, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    *(void *)(v69 + v67[5]) = v95;
    __m128 v73 = (__m128)(unint64_t)v103;
    *(void *)(v69 + v67[6]) = v103;
    uint64_t v111 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
    id v108 = v97;
    char v109 = v98;
    uint64_t v110 = v99;
    swift_bridgeObjectRetain(v99);
    outlined assign with take of Any?((uint64_t)&v108, v72);
    outlined destroy of MLActivityClassifier.ModelParameters(v66, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v74 = (uint64_t)v92;
    outlined init with copy of MLTrainingSessionParameters(v69, (uint64_t)v92, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined destroy of MLActivityClassifier.ModelParameters(v69, type metadata accessor for MLSoundClassifier.ModelParameters);
    uint64_t v75 = (uint64_t)v86;
    outlined init with copy of MLTrainingSessionParameters(v74, (uint64_t)v86, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    char v76 = -1;
    switch(swift_getEnumCaseMultiPayload(v75, v87))
    {
      case 0u:
      case 3u:
        goto LABEL_12;
      case 1u:
        uint64_t v77 = (uint64_t)v90;
        outlined init with take of MLSoundClassifier.DataSource(v75, (uint64_t)v90, type metadata accessor for MLSoundClassifier.DataSource);
        MLSoundClassifier.DataSource.table.getter(v73);
        uint64_t v74 = (uint64_t)v92;
        outlined destroy of MLActivityClassifier.ModelParameters(v77, type metadata accessor for MLSoundClassifier.DataSource);
        id v78 = v108;
        char v76 = v109;
        break;
      case 2u:
        outlined destroy of MLActivityClassifier.ModelParameters(v75, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
LABEL_12:
        id v78 = 0;
        break;
    }
    outlined destroy of MLActivityClassifier.ModelParameters(v74, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    uint64_t v79 = (uint64_t)v85;
    if (v76 == -1)
    {
      outlined consume of Data._Representation((uint64_t)v102, v101);
      return __stack_chk_guard;
    }
    id v108 = v78;
    char v109 = v76 & 1;
    uint64_t v105 = v78;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
    MLDataTable.write(to:)(v79);
    ((void (*)(uint64_t, uint64_t))v100)(v79, v104);
    outlined consume of Data._Representation((uint64_t)v102, v101);
    char v64 = v76;
    uint64_t v65 = (uint64_t)v105;
    goto LABEL_15;
  }
  (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v54, v104);
  outlined consume of Data._Representation((uint64_t)v51, v53);
  return __stack_chk_guard;
}

NSURL *MLSoundClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t a1)
{
  char v130 = v2;
  uint64_t v131 = a1;
  uint64_t v3 = v1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.ModelParameters.ValidationData?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v107 = &v104;
  uint64_t v113 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v7 = *(void *)(*(void *)(v113 - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  id v108 = &v104;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.DataSource?)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v104 = (uint64_t)&v104;
  uint64_t v105 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v13 = *(void *)(*(void *)(v105 - 8) + 64);
  char v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v106 = &v104;
  uint64_t v126 = type metadata accessor for URL(0);
  uint64_t v121 = *(void *)(v126 - 8);
  int64_t v16 = *(void *)(v121 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  uint64_t v122 = &v104;
  uint64_t v19 = alloca(v16);
  int64_t v20 = alloca(v16);
  unsigned int v112 = &v104;
  uint64_t v21 = alloca(v16);
  uint64_t v22 = alloca(v16);
  uint64_t v125 = &v104;
  uint64_t v23 = alloca(v16);
  uint64_t v24 = alloca(v16);
  uint64_t v25 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters(0);
  uint64_t v115 = v25[6];
  *(void *)(v3 + v115) = 0x3FE0000000000000;
  uint64_t v116 = v25[7];
  *(void *)(v3 + v116) = 0x3FEF333333333333;
  uint64_t v26 = v25[8];
  *(void *)(v3 + v26) = 25;
  uint64_t v27 = v25[9];
  *(void *)(v3 + v27) = 1;
  *(unsigned char *)(v3 + v27 + 8) = 1;
  uint64_t v123 = v3;
  uint64_t v111 = v27;
  *(void *)(v3 + v27 + 16) = 0;
  URL.appendingPathComponent(_:)(0xD000000000000010, "ObjectDetectorMetrics." + 0x8000000000000000);
  uint64_t v28 = v130;
  uint64_t v29 = Data.init(contentsOf:options:)(&v104, 0);
  if (!v28)
  {
    unint64_t v33 = v30;
    uint64_t v117 = v26;
    uint64_t v114 = v25;
    uint64_t v118 = 0;
    uint64_t v34 = v126;
    uint64_t v35 = v29;
    char v130 = *(void (**)(void, void))(v121 + 8);
    v130(&v104, v126);
    uint64_t v36 = objc_opt_self(NSPropertyListSerialization);
    uint64_t v128 = v35;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v127 = v33;
    v133[0] = 0;
    id v38 = [v36 propertyListWithData:isa options:0 format:0 error:v133];
    id v39 = v38;

    id v40 = v133[0];
    if (!v39)
    {
      id v48 = v40;
      _convertNSErrorToError(_:)(v40);

      swift_willThrow(v48, "propertyListWithData:options:format:error:", v49, v50, v51, v52);
      outlined consume of Data._Representation(v128, v127);
      v130(v131, v34);
      goto LABEL_20;
    }
    _bridgeAnyObjectToAny(_:)(v39);
    swift_unknownObjectRelease(v39);
    outlined init with copy of Any((uint64_t)v136, (uint64_t)v133);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (!swift_dynamicCast(&v132, v133, (char *)&type metadata for Any + 8, v41, 6))
    {
      uint64_t v53 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v53, 0, 0);
      *(void *)uint64_t v54 = 0xD000000000000037;
      *(void *)(v54 + 8) = "parameters.plist" + 0x8000000000000000;
      *(_OWORD *)(v54 + 16) = 0;
      *(_OWORD *)(v54 + 32) = 0;
      *(unsigned char *)(v54 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v53, v54, v55, v56, v57);
      outlined consume of Data._Representation(v128, v127);
      v130(v131, v34);
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1Tm(v136);
      goto LABEL_20;
    }
    uint64_t v124 = (char *)&type metadata for Any + 8;
    uint64_t v42 = v132;
    specialized Dictionary.subscript.getter(0x70616C7265766FLL, 0xE700000000000000, v132);
    uint64_t v43 = v130;
    if (!v135) {
      goto LABEL_15;
    }
    uint64_t v129 = v42;
    if (swift_dynamicCast(&v132, v133, v124, &type metadata for Double, 6))
    {
      uint64_t v119 = v132;
      LOBYTE(v42) = v129;
      specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v129);
      if (!v135) {
        goto LABEL_15;
      }
      if (swift_dynamicCast(&v132, v133, v124, &type metadata for Int, 6))
      {
        uint64_t v120 = v41;
        uint64_t v44 = v132;
        LOBYTE(v42) = v129;
        specialized Dictionary.subscript.getter(0x687469726F676C61, 0xE90000000000006DLL, v129);
        if (v135)
        {
          if (swift_dynamicCast(&v132, v133, v124, v120, 6))
          {
            MLSoundClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v132);
            uint64_t v45 = v134;
            uint64_t v46 = v126;
            if (v134 == 2)
            {
              swift_bridgeObjectRelease(v129);
              uint64_t v47 = v131;
              uint64_t v43 = v130;
LABEL_18:
              uint64_t v58 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              swift_allocError(&type metadata for MLCreateError, v58, 0, 0);
              *(void *)uint64_t v59 = 0xD000000000000034;
              *(void *)(v59 + 8) = "ad training parameters." + 0x8000000000000000;
              *(_OWORD *)(v59 + 16) = 0;
              *(_OWORD *)(v59 + 32) = 0;
              *(unsigned char *)(v59 + 48) = 0;
              swift_willThrow(&type metadata for MLCreateError, v58, v59, v60, v61, v62);
              outlined consume of Data._Representation(v128, v127);
              v43(v47, v46);
              goto LABEL_19;
            }
            id v110 = v133[0];
            id v109 = v133[1];
            specialized Dictionary.subscript.getter(0xD000000000000010, (uint64_t)("sertion %d for CreateML\n" + 0x8000000000000000), v129);
            if (v135)
            {
              if (swift_dynamicCast(&v132, v133, v124, &type metadata for Double, 6))
              {
                uint64_t v64 = v132;
                goto LABEL_27;
              }
            }
            else
            {
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v133, &demangling cache variable for type metadata for Any?);
            }
            uint64_t v64 = 0x3FEF333333333333;
LABEL_27:
            uint64_t v65 = v115;
            uint64_t v66 = v117;
            uint64_t v67 = v119;
            uint64_t v68 = v123;
            *(void *)(v123 + v116) = v64;
            *(void *)(v68 + v66) = v44;
            *(void *)(v68 + v65) = v67;
            uint64_t v69 = v111;
            swift_bridgeObjectRelease(*(void *)(v68 + v111 + 16));
            *(void *)(v68 + v69) = v110;
            *(unsigned char *)(v68 + v69 + 8) = v109 & 1;
            *(void *)(v68 + v69 + 16) = v45;
            URL.appendingPathComponent(_:)(1635017060, 0xE400000000000000);
            char v70 = v129;
            specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v129);
            if (v135)
            {
              char v71 = swift_dynamicCast(&v132, v133, v124, v120, 6);
              uint64_t v72 = v130;
              if (v71)
              {
                uint64_t v73 = v132;
                uint64_t v74 = v112;
                uint64_t v121 = *(void *)(v121 + 16);
                ((void (*)(uint64_t *, uint64_t *, uint64_t))v121)(v112, v125, v46);
                uint64_t v75 = (uint64_t)v74;
                uint64_t v76 = v104;
                MLSoundClassifier.DataSource.init(dictionary:tableFile:)(v73, v75);
                if (__swift_getEnumTagSinglePayload(v76, 1, v105) != 1)
                {
                  uint64_t v89 = (uint64_t)v106;
                  outlined init with take of MLSoundClassifier.DataSource(v76, (uint64_t)v106, type metadata accessor for MLSoundClassifier.DataSource);
                  outlined init with take of MLSoundClassifier.DataSource(v89, v123, type metadata accessor for MLSoundClassifier.DataSource);
                  URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEE00617461446E6FLL);
                  char v90 = v129;
                  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v129);
                  swift_bridgeObjectRelease(v90);
                  if (v135)
                  {
                    if (swift_dynamicCast(&v132, v133, v124, v120, 6))
                    {
                      uint64_t v91 = v132;
                      uint64_t v92 = (uint64_t)v112;
                      ((void (*)(uint64_t *, uint64_t *, uint64_t))v121)(v112, v122, v46);
                      uint64_t v93 = (uint64_t)v107;
                      MLSoundClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v91, v92);
                      if (__swift_getEnumTagSinglePayload(v93, 1, v113) != 1)
                      {
                        outlined consume of Data._Representation(v128, v127);
                        uint64_t v102 = (void (*)(uint64_t *, uint64_t))v130;
                        v130(v131, v46);
                        v102(v122, v46);
                        v102(v125, v46);
                        __swift_destroy_boxed_opaque_existential_1Tm(v136);
                        uint64_t v103 = (uint64_t)v108;
                        outlined init with take of MLSoundClassifier.DataSource(v93, (uint64_t)v108, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
                        outlined init with take of MLSoundClassifier.DataSource(v103, v114[5] + v123, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
                        return __stack_chk_guard;
                      }
                      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v93, &demangling cache variable for type metadata for MLSoundClassifier.ModelParameters.ValidationData?);
                      uint64_t v94 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                      swift_allocError(&type metadata for MLCreateError, v94, 0, 0);
                      *(void *)uint64_t v95 = 0xD000000000000037;
                      *(void *)(v95 + 8) = "ion Classification algorithm." + 0x8000000000000000;
                      *(_OWORD *)(v95 + 16) = 0;
                      *(_OWORD *)(v95 + 32) = 0;
                      *(unsigned char *)(v95 + 48) = 0;
                      swift_willThrow(&type metadata for MLCreateError, v94, v95, v96, v97, v98);
                      outlined consume of Data._Representation(v128, v127);
                      uint64_t v99 = (void (*)(uint64_t *, uint64_t))v130;
                      v130(v131, v46);
                      v99(v122, v46);
                      v99(v125, v46);
                      __swift_destroy_boxed_opaque_existential_1Tm(v136);
                      outlined destroy of MLActivityClassifier.ModelParameters(v123, type metadata accessor for MLSoundClassifier.DataSource);
                      goto LABEL_20;
                    }
                    outlined consume of Data._Representation(v128, v127);
                  }
                  else
                  {
                    outlined consume of Data._Representation(v128, v127);
                    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v133, &demangling cache variable for type metadata for Any?);
                  }
                  uint64_t v100 = v125;
                  unint64_t v101 = (void (*)(uint64_t *, uint64_t))v130;
                  v130(v131, v46);
                  v101(v122, v46);
                  v101(v100, v46);
                  __swift_destroy_boxed_opaque_existential_1Tm(v136);
                  swift_storeEnumTagMultiPayload(v114[5] + v123, v113, 3);
                  return __stack_chk_guard;
                }
                swift_bridgeObjectRelease(v129);
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v76, &demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
                uint64_t v77 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                swift_allocError(&type metadata for MLCreateError, v77, 0, 0);
                *(void *)uint64_t v78 = 0xD000000000000035;
                *(void *)(v78 + 8) = "o load validation data." + 0x8000000000000000;
                *(_OWORD *)(v78 + 16) = 0;
                *(_OWORD *)(v78 + 32) = 0;
                *(unsigned char *)(v78 + 48) = 0;
                swift_willThrow(&type metadata for MLCreateError, v77, v78, v79, v80, v81);
                outlined consume of Data._Representation(v128, v127);
                uint64_t v82 = v131;
                goto LABEL_34;
              }
              swift_bridgeObjectRelease(v70);
              uint64_t v83 = v131;
            }
            else
            {
              swift_bridgeObjectRelease(v70);
              outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v133, &demangling cache variable for type metadata for Any?);
              uint64_t v83 = v131;
              uint64_t v72 = v130;
            }
            uint64_t v84 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v84, 0, 0);
            *(void *)uint64_t v85 = 0xD00000000000002ELL;
            *(void *)(v85 + 8) = "audioFeaturePrint" + 0x8000000000000000;
            *(_OWORD *)(v85 + 16) = 0;
            *(_OWORD *)(v85 + 32) = 0;
            *(unsigned char *)(v85 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v84, v85, v86, v87, v88);
            outlined consume of Data._Representation(v128, v127);
            uint64_t v82 = v83;
LABEL_34:
            v72(v82, v46);
            v72((uint64_t)v125, v46);
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_15:
        swift_bridgeObjectRelease(v42);
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v133, &demangling cache variable for type metadata for Any?);
LABEL_17:
        uint64_t v47 = v131;
        uint64_t v46 = v126;
        goto LABEL_18;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease(v129);
    goto LABEL_17;
  }
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
  uint64_t v32 = v126;
  v31(v131, v126);
  v31((uint64_t)&v104, v32);
LABEL_20:
  swift_bridgeObjectRelease(*(void *)(v123 + v111 + 16));
  return __stack_chk_guard;
}

uint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1)
{
  uint64_t v3 = v1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_44;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_44;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v19);
  if (!swift_dynamicCast(&v24, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6))goto LABEL_44; {
  uint64_t v21 = v24;
  }
  int64_t v6 = v25;
  specialized Dictionary.subscript.getter(0x6E6F6973726576, 0xE700000000000000, a1);
  if (v20)
  {
    if (!swift_dynamicCast(&v24, v19, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
    {
LABEL_43:
      swift_bridgeObjectRelease((_BYTE)v6);
LABEL_44:
      uint64_t result = swift_bridgeObjectRelease(a1);
      goto LABEL_45;
    }
    uint64_t v23 = v24;
    specialized Dictionary.subscript.getter(0x6966697373616C63, 0xEA00000000007265, a1);
    if (v20)
    {
      if (swift_dynamicCast(&v24, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        uint64_t v28 = v24;
        uint64_t v27 = v25;
        uint64_t v7 = v21;
        LOBYTE(v26) = (v21 ^ 0x687369676776 | (unint64_t)v6 ^ 0xE600000000000000) == 0;
        if (!(v21 ^ 0x687369676776 | (unint64_t)v6 ^ 0xE600000000000000)
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x687369676776, 0xE600000000000000, v21, v6, 0) & 1) != 0)
        {
          char v8 = (char)v27;
          if (v28 == 0xD000000000000012 && v27 == "multilayer_perceptron" + 0x8000000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, "multilayer_perceptron" + 0x8000000000000000, v28, v27, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease((_BYTE)v6);
            swift_bridgeObjectRelease(a1);
            swift_bridgeObjectRelease(v8);
            uint64_t result = v23;
            *(void *)uint64_t v3 = v23;
            *(_OWORD *)(v3 + 8) = 0;
            return result;
          }
          uint64_t v7 = v21;
          if ((_BYTE)v26) {
            goto LABEL_20;
          }
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x687369676776, 0xE600000000000000, v7, v6, 0))
        {
LABEL_20:
          if (v28 == 0xD000000000000015 && v27 == "audio_feature_print" + 0x8000000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, "audio_feature_print" + 0x8000000000000000, v28, v27, 0) & 1) != 0)
          {
            specialized Dictionary.subscript.getter(0x69735F726579616CLL, 0xEB0000000073657ALL, a1);
            swift_bridgeObjectRelease((_BYTE)v27);
            swift_bridgeObjectRelease((_BYTE)v6);
            swift_bridgeObjectRelease(a1);
            if (v20)
            {
              uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
              uint64_t result = swift_dynamicCast(&v24, v19, (char *)&type metadata for Any + 8, v10, 6);
              if ((_BYTE)result)
              {
                uint64_t result = v24;
                *(void *)uint64_t v3 = v23;
                *(void *)(v3 + 8) = 0;
LABEL_24:
                *(void *)(v3 + 16) = result;
                return result;
              }
              goto LABEL_45;
            }
            goto LABEL_15;
          }
        }
        unint64_t v11 = 0xD000000000000013;
        uint64_t v12 = "time_window_size" + 0x8000000000000000;
        BOOL v29 = (v7 ^ 0xD000000000000013 | (unint64_t)("time_window_size" + 0x8000000000000000) ^ (unint64_t)v6) == 0;
        if (!(v7 ^ 0xD000000000000013 | (unint64_t)("time_window_size" + 0x8000000000000000) ^ (unint64_t)v6)
          || (unint64_t v26 = 0xD000000000000013,
              uint64_t v22 = "time_window_size" + 0x8000000000000000,
              v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, "time_window_size" + 0x8000000000000000, v7, v6, 0), v12 = v22, unint64_t v11 = v26, (v13 & 1) != 0))
        {
          char v14 = (char)v27;
          if (v28 == 0xD000000000000012 && v27 == "multilayer_perceptron" + 0x8000000000000000
            || (unint64_t v26 = v11,
                uint64_t v22 = v12,
                v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, "multilayer_perceptron" + 0x8000000000000000, v28, v27, 0), v12 = v22, unint64_t v11 = v26, (v15 & 1) != 0))
          {
            swift_bridgeObjectRelease((_BYTE)v6);
            swift_bridgeObjectRelease(a1);
            swift_bridgeObjectRelease(v14);
            uint64_t result = v23;
            *(void *)uint64_t v3 = v23;
            *(void *)(v3 + 8) = 1;
            *(void *)(v3 + 16) = 0;
            return result;
          }
          uint64_t v7 = v21;
          if (v29) {
            goto LABEL_33;
          }
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v7, v6, 0))
        {
LABEL_33:
          char v16 = (char)v27;
          if ((v28 == 0xD000000000000015 && v27 == "audio_feature_print" + 0x8000000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, "audio_feature_print" + 0x8000000000000000, v28, v27, 0) & 1) != 0)&& _stdlib_isOSVersionAtLeastOrVariantVersionAtLeast(_:_:_:_:_:_:)(0xCuLL, 0, 0, 0xFuLL, 0, 0))
          {
            specialized Dictionary.subscript.getter(0x69735F726579616CLL, 0xEB0000000073657ALL, a1);
            swift_bridgeObjectRelease(v16);
            swift_bridgeObjectRelease((_BYTE)v6);
            swift_bridgeObjectRelease(a1);
            if (v20)
            {
              uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
              uint64_t result = swift_dynamicCast(&v24, v19, (char *)&type metadata for Any + 8, v17, 6);
              if ((_BYTE)result)
              {
                uint64_t result = v24;
                *(void *)uint64_t v3 = v23;
                *(void *)(v3 + 8) = 1;
                goto LABEL_24;
              }
              goto LABEL_45;
            }
            goto LABEL_15;
          }
          char v18 = v16;
        }
        else
        {
          char v18 = (char)v27;
        }
        swift_bridgeObjectRelease(v18);
      }
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRelease((_BYTE)v6);
  swift_bridgeObjectRelease(a1);
LABEL_15:
  uint64_t result = outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v19, &demangling cache variable for type metadata for Any?);
LABEL_45:
  *(_OWORD *)uint64_t v3 = 0;
  *(void *)(v3 + 16) = 2;
  return result;
}

uint64_t MLSoundClassifier.DataSource.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v87 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v87 + 64);
  uint64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  uint64_t v9 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  unint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  char v13 = alloca(v10);
  char v14 = alloca(v10);
  if (*(void *)(a1 + 16))
  {
    uint64_t v84 = v52;
    uint64_t v78 = (uint64_t *)v52;
    uint64_t v89 = v9;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
    if (v16)
    {
      uint64_t v85 = v4;
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v53);
      uint64_t v81 = (char *)&type metadata for Any + 8;
      if (swift_dynamicCast(&v82, &v53, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      {
        uint64_t v79 = v52;
        uint64_t v17 = (uint64_t)v82;
        char v18 = v83;
        if (v82 == (unsigned char *)0xD000000000000013 && v83 == "session_id_column" + 0x8000000000000000)
        {
          unsigned __int8 v19 = "session_id_column";
          goto LABEL_16;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, "session_id_column" + 0x8000000000000000, v82, v83, 0))
        {
          unsigned __int8 v19 = v18;
LABEL_16:
          swift_bridgeObjectRelease(v19);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          swift_bridgeObjectRelease(a1);
          if (v56)
          {
            char v25 = swift_dynamicCast(&v82, &v53, v81, &type metadata for String, 6);
            uint64_t v4 = v85;
            if (v25)
            {
              char v26 = (char)v83;
              uint64_t v27 = v84;
              URL.init(fileURLWithPath:)(v82, v83);
              swift_bridgeObjectRelease(v26);
              (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
              uint64_t v28 = v27;
              uint64_t v9 = v89;
              uint64_t v29 = v89;
              uint64_t v30 = 0;
LABEL_19:
              swift_storeEnumTagMultiPayload(v28, v29, v30);
              uint64_t v31 = (uint64_t)v27;
LABEL_20:
              uint64_t v32 = (uint64_t)v78;
              outlined init with take of MLSoundClassifier.DataSource(v31, (uint64_t)v78, type metadata accessor for MLSoundClassifier.DataSource);
LABEL_21:
              outlined init with take of MLSoundClassifier.DataSource(v32, v4, type metadata accessor for MLSoundClassifier.DataSource);
              uint64_t v23 = 0;
              return __swift_storeEnumTagSinglePayload(v4, v23, 1, v9);
            }
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        if (v17 == 0x5F64656C6562616CLL && v18 == (char *)0xED000073656C6966)
        {
          char v33 = 102;
          goto LABEL_27;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x5F64656C6562616CLL, 0xED000073656C6966, v17, v18, 0))
        {
          char v33 = (char)v18;
LABEL_27:
          swift_bridgeObjectRelease(v33);
          specialized Dictionary.subscript.getter(1752457584, 0xE400000000000000, a1);
          swift_bridgeObjectRelease(a1);
          if (v56)
          {
            char v34 = swift_dynamicCast(&v82, &v53, v81, &type metadata for String, 6);
            uint64_t v4 = v85;
            if (v34)
            {
              char v35 = (char)v83;
              uint64_t v27 = v84;
              URL.init(fileURLWithPath:)(v82, v83);
              swift_bridgeObjectRelease(v35);
              (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
              uint64_t v30 = 1;
              uint64_t v28 = v27;
              uint64_t v9 = v89;
              uint64_t v29 = v89;
              goto LABEL_19;
            }
            goto LABEL_31;
          }
LABEL_30:
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
          uint64_t v4 = v85;
LABEL_31:
          uint64_t v9 = v89;
          uint64_t v22 = v87;
          uint64_t v20 = v88;
          uint64_t v21 = v5;
          goto LABEL_12;
        }
        if (v17 == 0x79625F73656C6966 && v18 == (char *)0xEE006C6562616C5FLL)
        {
          char v36 = 95;
          goto LABEL_37;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)(0x79625F73656C6966, 0xEE006C6562616C5FLL, v17, v18, 0))
        {
          char v36 = (char)v18;
LABEL_37:
          swift_bridgeObjectRelease(v36);
          specialized Dictionary.subscript.getter(0x73656C6966, 0xE500000000000000, a1);
          swift_bridgeObjectRelease(a1);
          uint64_t v4 = v85;
          if (v56)
          {
            uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
            if (swift_dynamicCast(&v82, &v53, v81, v37, 6))
            {
              char v38 = (char)v82;
              id v39 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v82);
              swift_bridgeObjectRelease(v38);
              (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
              id v40 = v84;
              *(void *)uint64_t v84 = v39;
              uint64_t v4 = v85;
              uint64_t v9 = v89;
              swift_storeEnumTagMultiPayload(v40, v89, 2);
              uint64_t v31 = (uint64_t)v40;
              goto LABEL_20;
            }
          }
          else
          {
            outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
          }
          goto LABEL_31;
        }
        if (v17 == 0x7365727574616566 && v18 == (char *)0xE800000000000000)
        {
          swift_bridgeObjectRelease(0);
          uint64_t v41 = v79;
        }
        else
        {
          char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7365727574616566, 0xE800000000000000, v17, v18, 0);
          swift_bridgeObjectRelease((_BYTE)v18);
          BOOL v43 = (v42 & 1) == 0;
          uint64_t v9 = v89;
          uint64_t v41 = v79;
          if (v43)
          {
            (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
            swift_bridgeObjectRelease(a1);
LABEL_59:
            uint64_t v23 = 1;
            uint64_t v4 = v85;
            return __swift_storeEnumTagSinglePayload(v4, v23, 1, v9);
          }
        }
        (*(void (**)(void *, uint64_t, uint64_t))(v87 + 16))(v41, v88, v5);
        LOBYTE(v53) = 1;
        *(_DWORD *)((char *)&v53 + 1) = *(_DWORD *)v74;
        HIDWORD(v53) = *(_DWORD *)&v74[3];
        uint64_t v54 = 44;
        unint64_t v55 = 0xE100000000000000;
        uint64_t v56 = 0;
        char v86 = 1;
        unint64_t v57 = 0xE000000000000000;
        uint64_t v58 = 92;
        unint64_t v59 = 0xE100000000000000;
        char v60 = 1;
        *(_DWORD *)uint64_t v61 = *(_DWORD *)v75;
        *(_DWORD *)&v61[3] = *(_DWORD *)&v75[3];
        uint64_t v62 = 34;
        unint64_t v63 = 0xE100000000000000;
        char v64 = 1;
        *(_DWORD *)&v65[3] = *(_DWORD *)&v76[3];
        *(_DWORD *)uint64_t v65 = *(_DWORD *)v76;
        uint64_t v66 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
        uint64_t v67 = 10;
        unint64_t v68 = 0xE100000000000000;
        long long v69 = 0;
        char v70 = 1;
        *(_DWORD *)char v71 = *(_DWORD *)v77;
        *(_DWORD *)&v71[3] = *(_DWORD *)&v77[3];
        uint64_t v72 = 0;
        MLDataTable.init(contentsOf:options:)(v41, &v53);
        uint64_t v44 = (uint64_t)v82;
        char v45 = (char)v83;
        specialized Dictionary.subscript.getter(0x5F65727574616566, 0xEE006E6D756C6F63, a1);
        if (v56)
        {
          if (!swift_dynamicCast(&v82, &v53, v81, &type metadata for String, 6))
          {
            swift_bridgeObjectRelease(a1);
            outlined consume of Result<_DataTable, Error>(v44, v45);
LABEL_58:
            uint64_t v9 = v89;
            (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
            goto LABEL_59;
          }
          uint64_t v79 = v82;
          uint64_t v84 = v83;
          specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, a1);
          if (v56)
          {
            if (swift_dynamicCast(&v82, &v53, v81, &type metadata for String, 6))
            {
              uint64_t v73 = (uint64_t)v82;
              uint64_t v80 = v83;
              specialized Dictionary.subscript.getter(0x6574656D61726170, 0xEA00000000007372, a1);
              swift_bridgeObjectRelease(a1);
              if (v56)
              {
                uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
                if (swift_dynamicCast(&v82, &v53, v81, v46, 6))
                {
                  MLSoundClassifier.FeatureExtractionParameters.init(dictionary:)((uint64_t)v82);
                  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
                  char v47 = v57;
                  if ((_BYTE)v57 != 0xFF)
                  {
                    uint64_t v48 = v56;
                    char v49 = v55;
                    uint64_t v50 = v54;
                    uint64_t v51 = v53;
                    uint64_t v32 = (uint64_t)v78;
                    *uint64_t v78 = v44;
                    *(unsigned char *)(v32 + 8) = v45 & 1;
                    *(void *)(v32 + 16) = v79;
                    *(void *)(v32 + 24) = v84;
                    *(void *)(v32 + 32) = v73;
                    *(void *)(v32 + 40) = v80;
                    *(void *)(v32 + 48) = v51;
                    *(void *)(v32 + 56) = v50;
                    *(unsigned char *)(v32 + 64) = v49 & 1;
                    *(void *)(v32 + 72) = v48;
                    *(unsigned char *)(v32 + 80) = v47 & 1;
                    uint64_t v9 = v89;
                    swift_storeEnumTagMultiPayload(v32, v89, 3);
                    uint64_t v4 = v85;
                    goto LABEL_21;
                  }
                  swift_bridgeObjectRelease((_BYTE)v80);
                  swift_bridgeObjectRelease((_BYTE)v84);
                  outlined consume of Result<_DataTable, Error>(v44, v45);
LABEL_64:
                  uint64_t v23 = 1;
                  uint64_t v4 = v85;
                  uint64_t v9 = v89;
                  return __swift_storeEnumTagSinglePayload(v4, v23, 1, v9);
                }
                outlined consume of Result<_DataTable, Error>(v44, v45);
                swift_bridgeObjectRelease((_BYTE)v80);
                swift_bridgeObjectRelease((_BYTE)v84);
              }
              else
              {
                outlined consume of Result<_DataTable, Error>(v44, v45);
                swift_bridgeObjectRelease((_BYTE)v80);
                swift_bridgeObjectRelease((_BYTE)v84);
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
              }
              (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v5);
              goto LABEL_64;
            }
            swift_bridgeObjectRelease(a1);
            outlined consume of Result<_DataTable, Error>(v44, v45);
            swift_bridgeObjectRelease((_BYTE)v84);
            goto LABEL_58;
          }
          swift_bridgeObjectRelease(a1);
          outlined consume of Result<_DataTable, Error>(v44, v45);
          swift_bridgeObjectRelease((_BYTE)v84);
        }
        else
        {
          swift_bridgeObjectRelease(a1);
          outlined consume of Result<_DataTable, Error>(v44, v45);
        }
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
        goto LABEL_58;
      }
      swift_bridgeObjectRelease(a1);
      uint64_t v4 = v85;
    }
    else
    {
      swift_bridgeObjectRelease(a1);
    }
    uint64_t v9 = v89;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
  }
  uint64_t v20 = v88;
  uint64_t v21 = v5;
  uint64_t v22 = v87;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  uint64_t v23 = 1;
  return __swift_storeEnumTagSinglePayload(v4, v23, 1, v9);
}

uint64_t MLSoundClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v41 = &v40;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.DataSource?)
                              - 8)
                  + 64);
  unint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v13 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  unint64_t v15 = alloca(v14);
  char v16 = alloca(v14);
  char v42 = &v40;
  uint64_t v55 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v17 = *(void *)(*(void *)(v55 - 8) + 64);
  char v18 = alloca(v17);
  unsigned __int8 v19 = alloca(v17);
  uint64_t v50 = &v40;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_10;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v21 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v53 = v4;
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v44);
  uint64_t v51 = (uint64_t)&type metadata for Any + 8;
  if (!swift_dynamicCast(&v48, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    uint64_t v4 = v53;
    goto LABEL_10;
  }
  uint64_t v52 = v6;
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  if ((v48 != 1701736302 || v49 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, v48, v49, 0) & 1) == 0)
  {
    if (v22 == 0x756F735F61746164 && v23 == 0xEB00000000656372)
    {
      char v29 = 114;
LABEL_18:
      swift_bridgeObjectRelease(v29);
      uint64_t v6 = v52;
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v30, 6))
        {
          uint64_t v51 = v48;
          uint64_t v31 = (uint64_t)v41;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v41, v54, v5);
          uint64_t v32 = v40;
          MLSoundClassifier.DataSource.init(dictionary:tableFile:)(v51, v31);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v33 = v32;
          unsigned int v24 = 1;
          if (__swift_getEnumTagSinglePayload(v33, 1, v13) != 1)
          {
            uint64_t v37 = v33;
            uint64_t v38 = (uint64_t)v42;
            outlined init with take of MLSoundClassifier.DataSource(v37, (uint64_t)v42, type metadata accessor for MLSoundClassifier.DataSource);
            uint64_t v39 = v38;
            uint64_t v26 = (uint64_t)v50;
            outlined init with take of MLSoundClassifier.DataSource(v39, (uint64_t)v50, type metadata accessor for MLSoundClassifier.DataSource);
            uint64_t v25 = v55;
            goto LABEL_8;
          }
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v33, &demangling cache variable for type metadata for MLSoundClassifier.DataSource?);
          uint64_t v27 = 1;
          uint64_t v4 = v53;
LABEL_11:
          uint64_t v25 = v55;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v4 = v53;
      goto LABEL_24;
    }
    uint64_t v43 = v22;
    if (_stringCompareWithSmolCheck(_:_:expecting:)(0x756F735F61746164, 0xEB00000000656372, v22, v23, 0))
    {
      char v29 = v23;
      goto LABEL_18;
    }
    if (v43 == 0x74696C7073 && v23 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0);
      uint64_t v4 = v53;
      uint64_t v6 = v52;
      goto LABEL_30;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696C7073, 0xE500000000000000, v43, v23, 0);
    swift_bridgeObjectRelease(v23);
    uint64_t v4 = v53;
    uint64_t v6 = v52;
    if (v34)
    {
LABEL_30:
      specialized Dictionary.subscript.getter(1635017060, 0xE400000000000000, a1);
      swift_bridgeObjectRelease(a1);
      if (v47)
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if (swift_dynamicCast(&v48, &v44, v51, v35, 6))
        {
          MLSplitStrategy.init(dictionary:)(v48);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
          uint64_t v25 = v55;
          if (!v46)
          {
            __int16 v36 = v45;
            uint64_t v26 = (uint64_t)v50;
            *(_OWORD *)uint64_t v50 = v44;
            *(unsigned char *)(v26 + 16) = v36;
            *(unsigned char *)(v26 + 17) = HIBYTE(v36) & 1;
            unsigned int v24 = 0;
            goto LABEL_8;
          }
LABEL_25:
          uint64_t v27 = 1;
          return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
        }
      }
      else
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
      }
LABEL_24:
      uint64_t v25 = v55;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
      goto LABEL_25;
    }
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v54, v5);
    swift_bridgeObjectRelease(a1);
    uint64_t v27 = 1;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v5);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v23);
  unsigned int v24 = 3;
  uint64_t v25 = v55;
  uint64_t v26 = (uint64_t)v50;
LABEL_8:
  swift_storeEnumTagMultiPayload(v26, v25, v24);
  uint64_t v4 = v53;
  outlined init with take of MLSoundClassifier.DataSource(v26, v53, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  uint64_t v27 = 0;
  return __swift_storeEnumTagSinglePayload(v4, v27, 1, v25);
}

uint64_t MLSoundClassifier.DataSource.dictionary.getter()
{
  uint64_t v1 = v0;
  uint64_t v55 = type metadata accessor for URL(0);
  uint64_t v2 = *(void *)(v55 - 8);
  int64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  outlined init with copy of MLTrainingSessionParameters(v1, (uint64_t)&v35, type metadata accessor for MLSoundClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v35, v6))
  {
    case 0u:
      uint64_t v10 = v55;
      uint64_t v56 = v2;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 32))(&v35, &v35, v55);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (void *)swift_initStackObject(v11, v45);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0xD000000000000013;
      uint64_t v13 = "session_id_column" + 0x8000000000000000;
      goto LABEL_4;
    case 1u:
      uint64_t v10 = v55;
      uint64_t v56 = v2;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 32))(&v35, &v35, v55);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = (void *)swift_initStackObject(v11, v44);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0x5F64656C6562616CLL;
      uint64_t v13 = (char *)0xED000073656C6966;
LABEL_4:
      inited[7] = v13;
      inited[10] = 1752457584;
      inited[11] = 0xE400000000000000;
      uint64_t v14 = URL.path.getter(v11);
      inited[15] = &type metadata for String;
      inited[12] = v14;
      inited[13] = v15;
      uint64_t v16 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(&v35, v10);
      return v16;
    case 2u:
      uint64_t v17 = v35;
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v19 = swift_initStackObject(v18, v43);
      *(void *)(v19 + 16) = 2;
      *(void *)(v19 + 24) = 4;
      *(void *)(v19 + 32) = 1684957547;
      *(void *)(v19 + 40) = 0xE400000000000000;
      *(void *)(v19 + 72) = &type metadata for String;
      strcpy((char *)(v19 + 48), "files_by_label");
      *(unsigned char *)(v19 + 63) = -18;
      *(void *)(v19 + 80) = 0x73656C6966;
      *(void *)(v19 + 88) = 0xE500000000000000;
      unint64_t v20 = specialized _NativeDictionary.mapValues<A>(_:)(v17);
      swift_bridgeObjectRelease(v17);
      *(void *)(v19 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
      *(void *)(v19 + 96) = v20;
      char v21 = (char *)&type metadata for Any + 8;
      uint64_t v22 = v19;
      return Dictionary.init(dictionaryLiteral:)(v22, &type metadata for String, v21, &protocol witness table for String);
    case 3u:
      uint64_t v54 = v37;
      uint64_t v23 = v38;
      uint64_t v52 = v39[0];
      uint64_t v53 = v39[1];
      uint64_t v55 = v39[2];
      uint64_t v56 = v39[3];
      char v24 = v40;
      uint64_t v51 = v41;
      char v25 = v42;
      outlined consume of Result<_DataTable, Error>(v35, v36);
      goto LABEL_8;
    case 4u:
      uint64_t v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v27 = v26[12];
      uint64_t v54 = *(uint64_t *)((char *)&v35 + v27);
      uint64_t v23 = *(uint64_t *)((char *)&v35 + v27 + 8);
      uint64_t v28 = v26[16];
      uint64_t v52 = *(uint64_t *)((char *)&v35 + v28);
      uint64_t v53 = *(uint64_t *)((char *)&v35 + v28 + 8);
      uint64_t v29 = v26[20];
      uint64_t v55 = *(uint64_t *)((char *)&v35 + v29);
      uint64_t v56 = *(uint64_t *)((char *)&v35 + v29 + 8);
      char v24 = *((unsigned char *)&v37 + v29);
      uint64_t v51 = *(void *)((char *)&v39[-1] + v29);
      char v25 = *((unsigned char *)v39 + v29);
      uint64_t v30 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v30 - 8) + 8))(&v35, v30);
LABEL_8:
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v32 = swift_initStackObject(v31, &v37);
      *(void *)(v32 + 16) = 4;
      *(void *)(v32 + 24) = 8;
      *(void *)(v32 + 32) = 1684957547;
      *(void *)(v32 + 40) = 0xE400000000000000;
      *(void *)(v32 + 72) = &type metadata for String;
      *(void *)(v32 + 48) = 0x7365727574616566;
      *(void *)(v32 + 56) = 0xE800000000000000;
      strcpy((char *)(v32 + 80), "feature_column");
      *(unsigned char *)(v32 + 95) = -18;
      *(void *)(v32 + 120) = &type metadata for String;
      *(void *)(v32 + 96) = v54;
      *(void *)(v32 + 104) = v23;
      strcpy((char *)(v32 + 128), "label_column");
      *(unsigned char *)(v32 + 141) = 0;
      *(_WORD *)(v32 + 142) = -5120;
      *(void *)(v32 + 168) = &type metadata for String;
      *(void *)(v32 + 144) = v52;
      *(void *)(v32 + 152) = v53;
      *(void *)(v32 + 176) = 0x6574656D61726170;
      *(void *)(v32 + 184) = 0xEA00000000007372;
      uint64_t v46 = v55;
      uint64_t v47 = v56;
      char v48 = v24 & 1;
      uint64_t v49 = v51;
      char v50 = v25 & 1;
      uint64_t v33 = MLSoundClassifier.FeatureExtractionParameters.dictionary.getter();
      *(void *)(v32 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      *(void *)(v32 + 192) = v33;
      char v21 = (char *)&type metadata for Any + 8;
      uint64_t v22 = v32;
      return Dictionary.init(dictionaryLiteral:)(v22, &type metadata for String, v21, &protocol witness table for String);
    case 5u:
      JUMPOUT(0x1ADB98);
  }
}

uint64_t MLSoundClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v1 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  int64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)&v26, type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
  switch(swift_getEnumCaseMultiPayload(&v26, v5))
  {
    case 0u:
      char v9 = v27;
      char v10 = v28;
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      long long v35 = v26;
      uint64_t inited = (void *)swift_initStackObject(v11, &v26);
      inited[2] = 2;
      inited[3] = 4;
      inited[4] = 1684957547;
      inited[5] = 0xE400000000000000;
      inited[9] = &type metadata for String;
      inited[6] = 0x74696C7073;
      inited[7] = 0xE500000000000000;
      inited[10] = 1635017060;
      inited[11] = 0xE400000000000000;
      long long v32 = v35;
      char v33 = v9;
      char v34 = v10;
      uint64_t v13 = MLSplitStrategy.dictionary.getter();
      inited[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      inited[12] = v13;
      uint64_t v14 = (char *)&type metadata for Any + 8;
      uint64_t v15 = inited;
      goto LABEL_5;
    case 1u:
      outlined init with take of MLSoundClassifier.DataSource((uint64_t)&v26, (uint64_t)&v26, type metadata accessor for MLSoundClassifier.DataSource);
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v23 = (void *)swift_initStackObject(v22, v30);
      v23[2] = 2;
      v23[3] = 4;
      v23[4] = 1684957547;
      v23[5] = 0xE400000000000000;
      v23[9] = &type metadata for String;
      v23[6] = 0x756F735F61746164;
      v23[7] = 0xEB00000000656372;
      v23[10] = 1635017060;
      v23[11] = 0xE400000000000000;
      uint64_t v24 = MLSoundClassifier.DataSource.dictionary.getter();
      v23[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v23[12] = v24;
      uint64_t v19 = Dictionary.init(dictionaryLiteral:)(v23, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      goto LABEL_7;
    case 2u:
      swift_storeEnumTagMultiPayload(&v26, v1, 2);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v17 = (void *)swift_initStackObject(v16, v29);
      v17[2] = 2;
      v17[3] = 4;
      void v17[4] = 1684957547;
      v17[5] = 0xE400000000000000;
      v17[9] = &type metadata for String;
      uint64_t v17[6] = 0x756F735F61746164;
      v17[7] = 0xEB00000000656372;
      v17[10] = 1635017060;
      v17[11] = 0xE400000000000000;
      uint64_t v18 = MLSoundClassifier.DataSource.dictionary.getter();
      v17[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v17[12] = v18;
      uint64_t v19 = Dictionary.init(dictionaryLiteral:)(v17, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
LABEL_7:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v26, type metadata accessor for MLSoundClassifier.DataSource);
      break;
    case 3u:
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      char v21 = (void *)swift_initStackObject(v20, v31);
      id v21[2] = 1;
      v21[3] = 2;
      _OWORD v21[4] = 1684957547;
      void v21[5] = 0xE400000000000000;
      v21[9] = &type metadata for String;
      void v21[6] = 1701736302;
      v21[7] = 0xE400000000000000;
      uint64_t v14 = (char *)&type metadata for Any + 8;
      uint64_t v15 = v21;
LABEL_5:
      uint64_t v19 = Dictionary.init(dictionaryLiteral:)(v15, &type metadata for String, v14, &protocol witness table for String);
      break;
  }
  return v19;
}

uint64_t MLSoundClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  unint64_t v10 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  char v9 = &type metadata for String;
  if (v2)
  {
    unint64_t v7 = 0xD000000000000013;
    char v8 = "time_window_size" + 0x8000000000000000;
    specialized Dictionary.subscript.setter((uint64_t)&v7, 1684957547, 0xE400000000000000);
    char v9 = &type metadata for String;
    unint64_t v7 = 0x646E756F73;
    char v8 = (char *)0xE500000000000000;
    uint64_t v3 = 1701869940;
  }
  else
  {
    unint64_t v7 = 0x687369676776;
    char v8 = (char *)0xE600000000000000;
    uint64_t v3 = 1684957547;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v7, v3, 0xE400000000000000);
  char v9 = &type metadata for Int;
  unint64_t v7 = v10;
  specialized Dictionary.subscript.setter((uint64_t)&v7, 0x6E6F6973726576, 0xE700000000000000);
  uint64_t v4 = 0x6966697373616C63;
  char v9 = &type metadata for String;
  if (v1)
  {
    unint64_t v7 = 0xD000000000000015;
    char v8 = "audio_feature_print" + 0x8000000000000000;
    swift_bridgeObjectRetain(v1);
    specialized Dictionary.subscript.setter((uint64_t)&v7, 0x6966697373616C63, 0xEA00000000007265);
    char v9 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v7 = v1;
    uint64_t v4 = 0x69735F726579616CLL;
    uint64_t v5 = 0xEB0000000073657ALL;
  }
  else
  {
    unint64_t v7 = 0xD000000000000012;
    char v8 = "multilayer_perceptron" + 0x8000000000000000;
    uint64_t v5 = 0xEA00000000007265;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v7, v4, v5);
  return v11;
}

void *MLSoundClassifier.DataSource.table.getter(__m128 a1)
{
  uint64_t v37 = v1;
  uint64_t v3 = type metadata accessor for DataFrame(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = alloca(v5);
  unint64_t v7 = alloca(v5);
  char v36 = &v29;
  char v8 = alloca(v5);
  char v9 = alloca(v5);
  long long v35 = &v29;
  uint64_t v10 = type metadata accessor for MLSoundClassifier.DataSource(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  outlined init with copy of MLTrainingSessionParameters(v2, (uint64_t)&v29, type metadata accessor for MLSoundClassifier.DataSource);
  switch(swift_getEnumCaseMultiPayload(&v29, v10))
  {
    case 0u:
    case 1u:
      uint64_t v14 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 8))(&v29, v14);
      goto LABEL_6;
    case 2u:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v29, type metadata accessor for MLSoundClassifier.DataSource);
LABEL_6:
      uint64_t result = v37;
      *uint64_t v37 = 0;
      *((unsigned char *)result + 8) = -1;
      break;
    case 3u:
      uint64_t v15 = v29;
      char v16 = v30;
      char v17 = v34;
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v17);
      uint64_t result = v37;
      *uint64_t v37 = v15;
      *((unsigned char *)result + 8) = v16;
      break;
    case 4u:
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      uint64_t v20 = *(int *)(v19 + 48);
      uint64_t v32 = *(uint64_t *)((char *)&v29 + v20);
      uint64_t v21 = *(uint64_t *)((char *)&v29 + v20 + 8);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)&v29 + *(int *)(v19 + 64) + 8));
      uint64_t v22 = (uint64_t)v35;
      uint64_t v31 = v3;
      uint64_t v30 = v4;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 32))(v35, &v29, v3);
      static MLSoundClassifier.DataSource.reformatFeatures(dataFrame:featureColumn:)(v22, v32, v21);
      uint64_t v23 = (uint64_t)v36;
      swift_bridgeObjectRelease(v21);
      uint64_t v24 = v35;
      uint64_t v25 = v31;
      uint64_t v26 = v30;
      *(double *)a1.i64 = (*(double (**)(uint64_t, uint64_t *, uint64_t))(v30 + 16))(v23, v35, v31);
      MLDataTable.init(_:convertArraysToShapedArrays:)(v23, 0, a1);
      (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(v24, v25);
      uint64_t result = v33;
      char v27 = v34;
      char v28 = v37;
      *uint64_t v37 = v33;
      *((unsigned char *)v28 + 8) = v27;
      break;
  }
  return result;
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.dictionary.getter()
{
  uint64_t v11 = *v0;
  uint64_t v1 = v0[3];
  char v2 = *((unsigned char *)v0 + 32);
  if (*((unsigned char *)v0 + 16)) {
    uint64_t v3 = 0x3FEF333333333333;
  }
  else {
    uint64_t v3 = v0[1];
  }
  uint64_t v12 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v4, v8);
  *(void *)(inited + 16) = 3;
  *(void *)(inited + 24) = 6;
  strcpy((char *)(inited + 32), "overlap_factor");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 72) = &type metadata for Double;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = "sertion %d for CreateML\n" + 0x8000000000000000;
  *(void *)(inited + 120) = &type metadata for Double;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 128) = 0xD000000000000011;
  *(void *)(inited + 136) = "logistic_regressor" + 0x8000000000000000;
  uint64_t v9 = v1;
  char v10 = v2;
  uint64_t v6 = MLSoundClassifier.ModelParameters.FeatureExtractorType.dictionary.getter();
  *(void *)(inited + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 144) = v6;
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

uint64_t MLSoundClassifier.FeatureExtractionParameters.init(dictionary:)(uint64_t a1)
{
  uint64_t v2 = v1;
  specialized Dictionary.subscript.getter(0x5F70616C7265766FLL, 0xEE00726F74636166, a1);
  if (!v11) {
    goto LABEL_9;
  }
  if (!swift_dynamicCast(v12, &v9, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease(a1);
    goto LABEL_12;
  }
  uint64_t v7 = v12[0];
  specialized Dictionary.subscript.getter(0xD000000000000011, (uint64_t)("logistic_regressor" + 0x8000000000000000), a1);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    goto LABEL_10;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!swift_dynamicCast(v12, &v9, (char *)&type metadata for Any + 8, v3, 6)) {
    goto LABEL_11;
  }
  MLSoundClassifier.ModelParameters.FeatureExtractorType.init(dictionary:)(v12[0]);
  char v4 = v10;
  if (v10 == -1) {
    goto LABEL_11;
  }
  uint64_t v8 = v9;
  specialized Dictionary.subscript.getter(0xD000000000000010, (uint64_t)("sertion %d for CreateML\n" + 0x8000000000000000), a1);
  swift_bridgeObjectRelease(a1);
  if (!v11)
  {
LABEL_10:
    uint64_t result = outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  uint64_t result = swift_dynamicCast(v12, &v9, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((_BYTE)result)
  {
    uint64_t v6 = v12[0];
    *(void *)uint64_t v2 = v7;
    *(void *)(v2 + 8) = v6;
    *(void *)(v2 + 16) = 0;
    uint64_t result = v8;
    *(void *)(v2 + 24) = v8;
    *(unsigned char *)(v2 + 32) = v4 & 1;
    return result;
  }
LABEL_12:
  *(_OWORD *)(v2 + 16) = 0;
  *(_OWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 32) = -1;
  return result;
}

uint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.dictionary.getter()
{
  unint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    uint64_t v8 = &type metadata for String;
    unint64_t v6 = 0xD000000000000011;
    uint64_t v7 = "feature_extractor" + 0x8000000000000000;
    specialized Dictionary.subscript.setter((uint64_t)&v6, 1684957547, 0xE400000000000000);
    uint64_t v8 = &type metadata for String;
    unint64_t v6 = 0x646E756F73;
    uint64_t v7 = (char *)0xE500000000000000;
    specialized Dictionary.subscript.setter((uint64_t)&v6, 1701869940, 0xE400000000000000);
    uint64_t v8 = &type metadata for Int;
    unint64_t v6 = v1;
    specialized Dictionary.subscript.setter((uint64_t)&v6, 0x6E6F697369766572, 0xE800000000000000);
    return v9;
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = (void *)swift_initStackObject(v3, v5);
    inited[2] = 2;
    inited[3] = 4;
    inited[4] = 1684957547;
    inited[5] = 0xE400000000000000;
    inited[9] = &type metadata for String;
    inited[6] = 0x687369676776;
    inited[7] = 0xE600000000000000;
    inited[10] = 0x6E6F697369766572;
    inited[11] = 0xE800000000000000;
    inited[15] = &type metadata for Int;
    inited[12] = v1;
    return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  }
}

char MLSoundClassifier.ModelParameters.FeatureExtractorType.init(dictionary:)(uint64_t a1)
{
  char v2 = a1;
  uint64_t v3 = v1;
  specialized Dictionary.subscript.getter(0x6E6F697369766572, 0xE800000000000000, a1);
  if (v15)
  {
    if (swift_dynamicCast(&v16, v14, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
    {
      uint64_t v4 = v16;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v14, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v4 = 1;
LABEL_6:
  specialized Dictionary.subscript.getter(1684957547, 0xE400000000000000, a1);
  if (!v15)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v14, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  if (!swift_dynamicCast(&v16, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_12:
    swift_bridgeObjectRelease(a1);
    goto LABEL_13;
  }
  uint64_t v18 = v3;
  uint64_t v5 = v16;
  unint64_t v6 = v17;
  if (v16 == 0x687369676776 && v17 == (char *)0xE600000000000000)
  {
    char v7 = 0;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v2);
    char result = 0;
    uint64_t v3 = v18;
    goto LABEL_17;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)(0x687369676776, 0xE600000000000000, v16, v17, 0))
  {
    char v7 = (char)v6;
    goto LABEL_16;
  }
  if (v5 == 0xD000000000000011 && v6 == "feature_extractor" + 0x8000000000000000)
  {
    swift_bridgeObjectRelease("feature_extractor");
    goto LABEL_22;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, "feature_extractor" + 0x8000000000000000, v5, v6, 0);
  swift_bridgeObjectRelease((_BYTE)v6);
  if (v9)
  {
LABEL_22:
    specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, a1);
    swift_bridgeObjectRelease(a1);
    if (v15)
    {
      char v10 = swift_dynamicCast(&v16, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      uint64_t v3 = v18;
      if (v10)
      {
        uint64_t v11 = v16;
        unint64_t v12 = (unint64_t)v17;
        goto LABEL_27;
      }
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v14, &demangling cache variable for type metadata for Any?);
      uint64_t v3 = v18;
    }
    uint64_t v11 = 0x646E756F73;
    unint64_t v12 = 0xE500000000000000;
LABEL_27:
    if (v11 == 0x646E756F73 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0);
      char result = 1;
      goto LABEL_17;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, 0x646E756F73, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v12);
    char result = 1;
    if (v13) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(a1);
  uint64_t v3 = v18;
LABEL_13:
  char result = -1;
  uint64_t v4 = 0;
LABEL_17:
  *(void *)uint64_t v3 = v4;
  *(unsigned char *)(v3 + 8) = result;
  return result;
}

uint64_t outlined init with take of MLSoundClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(a2, a1, v3);
  return a2;
}

void EventCollector.add(_:)()
{
  id v1 = *(id *)(v0 + 16);
  specialized NSLocking.withLock<A>(_:)((void (*)(void))partial apply for closure #1 in EventCollector.add(_:));
}

uint64_t EventCollector.init()()
{
  id v1 = objc_allocWithZone((Class)NSLock);
  *(void *)(v0 + 16) = [v1 init];
  *(void *)(v0 + 24) = &_swiftEmptyArrayStorage;
  return v0;
}

uint64_t closure #1 in EventCollector.add(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess(a1 + 24, v7, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(v3 + 16) = v2 + 1;
  uint64_t v5 = type metadata accessor for Event(0, v7, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v3+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v5 - 8) + 80))+ *(void *)(*(void *)(v5 - 8) + 72) * v2, a2, v5);
  return swift_endAccess(v7);
}

uint64_t closure #1 in closure #1 in EventCollector.getLast<A>(metric:type:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = Event.metrics.getter();
  char v4 = v3;
  specialized Dictionary.subscript.getter(a2, v3);
  swift_bridgeObjectRelease(v4);
  LOBYTE(v2) = v7 != 0;
  outlined destroy of Sendable?((uint64_t)v6);
  return v2;
}

uint64_t EventCollector.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return v0;
}

uint64_t EventCollector.__deallocating_deinit()
{
  EventCollector.deinit();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for EventCollector()
{
  return objc_opt_self(_TtC8CreateML14EventCollector);
}

uint64_t outlined destroy of Sendable?(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(a1, v1);
  return a1;
}

uint64_t partial apply for closure #1 in EventCollector.add(_:)()
{
  return closure #1 in EventCollector.add(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

id @nonobjc VNCoreMLModel.__allocating_init(for:)(id a1)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v7 = 0;
  id v2 = [ObjCClassFromMetadata modelForMLModel:a1 error:&v7];
  id v3 = v2;
  id v4 = v7;
  if (v3)
  {
    v7;
  }
  else
  {
    id v6 = v7;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow();
  }

  return v3;
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, VNRecognizedObjectObservation_ptr);
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, VNPixelBufferObservation_ptr);
}

{
  int64_t v1;
  void *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  uint64_t v8;
  unsigned char v10[32];
  int64_t v11;
  uint64_t v12;
  long long v13;
  void *v14;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  id v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      outlined init with copy of URL?(i, (uint64_t)v10, &demangling cache variable for type metadata for Any?);
      id v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      if (!swift_dynamicCast(&v13, v10, v4, &type metadata for String, 6)) {
        break;
      }
      unint64_t v12 = *((void *)&v13 + 1);
      uint64_t v5 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      uint64_t v11 = v1;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
        id v2 = v14;
      }
      id v7 = v2[2];
      if (v2[3] >> 1 <= v7)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2[3] >= 2uLL, v7 + 1, 1);
        id v2 = v14;
      }
      v2[2] = v7 + 1;
      uint64_t v8 = 2 * v7;
      v2[v8 + 4] = v5;
      v2[v8 + 5] = v12;
      uint64_t v1 = v11 - 1;
      if (v11 == 1) {
        return v2;
      }
    }
    char v13 = 0;
    swift_release();
    swift_bridgeObjectRelease(BYTE8(v13));
    return 0;
  }
  return v2;
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, VNRecognizedPointsObservation_ptr);
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0x4000000000000001) != 0)
  {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFF8;
    if (a1) {
      uint64_t v17 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  specialized ContiguousArray.reserveCapacity(_:)(v3);
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFF8;
  if ((a1 & 0x4000000000000001) != 0)
  {
    if (a1) {
      uint64_t v4 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  if (!v5) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v6 = 0;
  while (1)
  {
    id v7 = (v2 & 0xC000000000000003) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v2)
       : *(id *)(v2 + 8 * v6 + 32);
    uint64_t v8 = v7;
    if (__OFADD__(1, v6++)) {
      BUG();
    }
    uint64_t v10 = v5;
    uint64_t v11 = objc_opt_self(*a2);
    uint64_t v12 = swift_dynamicCastObjCClass(v8, v11);
    if (!v12) {
      break;
    }
    uint64_t v13 = v12;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v14 = *((void *)&_swiftEmptyArrayStorage + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
    specialized ContiguousArray._endMutation()();
    uint64_t v5 = v10;
    BOOL v15 = v6 == v10;
    uint64_t v2 = a1;
    if (v15) {
      return &_swiftEmptyArrayStorage;
    }
  }

  swift_release(&_swiftEmptyArrayStorage);
  return 0;
}

Swift::String __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLImageClassifier.prediction(from:)(CGImageRef from)
{
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for URL(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v4);
  uint64_t v5 = MLImageClassifier.performRequest(url:cgImage:)(v9, from);
  id v7 = v6;
  outlined destroy of URL?((uint64_t)v9);
  result._uint64_t countAndFlagsBits = v5;
  result._char object = v7;
  return result;
}

uint64_t MLImageClassifier.performRequest(url:cgImage:)(void *a1, void *a2)
{
  id v85 = v2;
  id v83 = a2;
  id v86 = a1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  v84[0] = &v78;
  uint64_t v82 = type metadata accessor for URL(0);
  uint64_t v7 = *(void *)(v82 - 8);
  int64_t v8 = *(void *)(v7 + 64);
  char v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v79 = &v78;
  uint64_t v11 = alloca(v8);
  uint64_t v12 = alloca(v8);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNCoreMLModel, VNCoreMLModel_ptr);
  id v13 = *v3;
  id v14 = v85;
  id v15 = @nonobjc VNCoreMLModel.__allocating_init(for:)(v13);
  if (v14) {
    return v7;
  }
  id v16 = v15;
  uint64_t v81 = v7;
  id v17 = objc_allocWithZone((Class)VNCoreMLRequest);
  id v85 = [v17 initWithModel:v16];
  uint64_t v18 = v16;
  id v19 = v84[0];
  outlined init with copy of URL?((uint64_t)v86, (uint64_t)v84[0], &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v82) == 1)
  {
    uint64_t v20 = v18;
    outlined destroy of URL?((uint64_t)v84[0]);
    id v21 = v83;
    if (!v83)
    {
      uint64_t v62 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v62, 0, 0);
      *(void *)uint64_t v63 = 0xD000000000000019;
      *(void *)(v63 + 8) = "the vision request." + 0x8000000000000000;
      *(_OWORD *)(v63 + 16) = 0;
      *(_OWORD *)(v63 + 32) = 0;
      *(unsigned char *)(v63 + 48) = 2;
      swift_willThrow(&type metadata for MLCreateError, v62, v63, v64, v65, v66);
      uint64_t v7 = (uint64_t)&objc_release;

      id v61 = v20;
      goto LABEL_16;
    }
    uint64_t v80 = 0;
    id v86 = v18;
    uint64_t v22 = type metadata accessor for VNImageOption(0);
    uint64_t v23 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
    id v24 = v21;
    LOBYTE(v22) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v22, (char *)&type metadata for Any + 8, v23);
    objc_allocWithZone((Class)VNImageRequestHandler);
    v84[0] = @nonobjc VNImageRequestHandler.init(cgImage:options:)(v24, v22);
  }
  else
  {
    uint64_t v80 = 0;
    id v86 = v18;
    (*(void (**)(uint64_t *, id, uint64_t))(v81 + 32))(&v78, v84[0], v82);
    uint64_t v25 = objc_opt_self(NSFileManager);
    id v26 = [v25 defaultManager];
    id v27 = v26;
    id v83 = &v78;
    URL.path.getter(v26);
    char v29 = v28;
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    unsigned __int8 v31 = [v27 fileExistsAtPath:v30];

    if (!v31)
    {
      *(void *)&long long v87 = 0;
      *((void *)&v87 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(BYTE8(v87));
      *(void *)&long long v87 = 0xD000000000000012;
      *((void *)&v87 + 1) = "Input image is not valid." + 0x8000000000000000;
      uint64_t v67 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      id v68 = v83;
      uint64_t v69 = v82;
      v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v82, v67);
      char object = (char)v70._object;
      String.append(_:)(v70);
      swift_bridgeObjectRelease(object);
      v72._char object = "Input image URL: '" + 0x8000000000000000;
      v72._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v72);
      *(_OWORD *)uint64_t v84 = v87;
      v72._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v72._object, 0, 0);
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v84;
      *(_OWORD *)(v73 + 16) = 0;
      *(_OWORD *)(v73 + 32) = 0;
      *(unsigned char *)(v73 + 48) = 2;
      swift_willThrow(&type metadata for MLCreateError, v72._object, v73, v74, v75, v76);
      uint64_t v7 = (uint64_t)&objc_release;

      (*(void (**)(id, uint64_t))(v81 + 8))(v68, v69);
      return v7;
    }
    uint64_t v32 = (uint64_t)v79;
    uint64_t v33 = v82;
    uint64_t v34 = v81;
    (*(void (**)(uint64_t *, id, uint64_t))(v81 + 16))(v79, v83, v82);
    uint64_t v35 = type metadata accessor for VNImageOption(0);
    uint64_t v36 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
    LOBYTE(v35) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v35, (char *)&type metadata for Any + 8, v36);
    objc_allocWithZone((Class)VNImageRequestHandler);
    v84[0] = @nonobjc VNImageRequestHandler.init(url:options:)(v32, v35);
    (*(void (**)(id, uint64_t))(v34 + 8))(v83, v33);
  }
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v38 = (void *)swift_allocObject(v37, 40, 7);
  v38[2] = 1;
  v38[3] = 3;
  id v39 = v85;
  v38[4] = v85;
  *(void *)&long long v87 = v38;
  specialized Array._endMutation()(v37, 40);
  char v40 = v87;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNRequest, VNRequest_ptr);
  id v41 = v39;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40);
  *(void *)&long long v87 = 0;
  unsigned __int8 v43 = [v84[0] performRequests:isa error:&v87];

  uint64_t v7 = v87;
  if (!v43)
  {
    id v56 = (id)v87;
    _convertNSErrorToError(_:)(v7);
    uint64_t v7 = (uint64_t)&objc_release;

    swift_willThrow(v56, "performRequests:error:", v57, v58, v59, v60);
    id v61 = v84[0];
LABEL_16:

    return v7;
  }
  id v44 = v41;
  (id)v7;
  uint64_t v45 = outlined bridged method (ob) of @objc VNRequest.results.getter(v44);
  if (v45
    && (char v46 = v45,
        uint64_t v7 = (uint64_t)specialized _arrayConditionalCast<A, B>(_:)(v45, VNClassificationObservation_ptr),
        swift_bridgeObjectRelease(v46),
        v7))
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v7 & 0xC000000000000003) == 0, v7);
    id v85 = v44;
    if ((v7 & 0xC000000000000003) != 0) {
      id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    }
    else {
      id v47 = *(id *)(v7 + 32);
    }
    char v48 = v47;
    swift_bridgeObjectRelease(v7);
    id v49 = [v48 identifier];
    id v50 = v49;

    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  }
  else
  {
    uint64_t v51 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v51, 0, 0);
    *(void *)uint64_t v52 = 0xD000000000000033;
    *(void *)(v52 + 8) = "ventCollector" + 0x8000000000000000;
    *(_OWORD *)(v52 + 16) = 0;
    *(_OWORD *)(v52 + 32) = 0;
    *(unsigned char *)(v52 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v51, v52, v53, v54, v55);
  }
  return v7;
}

uint64_t MLImageClassifier.prediction(from:)(uint64_t a1)
{
  int64_t v1 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(&v7, a1, v4);
  __swift_storeEnumTagSinglePayload((uint64_t)&v7, 0, 1, v4);
  uint64_t v5 = MLImageClassifier.performRequest(url:cgImage:)(&v7, 0);
  outlined destroy of URL?((uint64_t)&v7);
  return v5;
}

void *MLImageClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for URL(0);
  uint64_t v6 = *(void *)(v5 - 8);
  int64_t v7 = *(void *)(v6 + 64);
  int64_t v8 = alloca(v7);
  char v9 = alloca(v7);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v28 = v2;
    unsigned __int8 v31 = _swiftEmptyArrayStorage;
    char v29 = &v22;
    uint64_t v25 = v10;
    uint64_t v30 = v6;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    uint64_t v11 = ((*(unsigned __int8 *)(v30 + 80) + 32) & ~*(unsigned __int8 *)(v30 + 80)) + a1;
    id v24 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16);
    uint64_t v26 = *(void *)(v30 + 72);
    uint64_t v27 = v5;
    while (1)
    {
      uint64_t v12 = v3;
      id v13 = v29;
      v24(v29, v11, v5);
      static ImageReader.read(url:)(v13);
      id v14 = v12;
      if (v12) {
        break;
      }
      id v15 = v29;
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v29, v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v23 = v11;
      uint64_t v16 = v31[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = v16;
      uint64_t v3 = 0;
      uint64_t v18 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17);
      specialized ContiguousArray._endMutation()(v17);
      uint64_t v11 = v26 + v18;
      BOOL v19 = v25-- == 1;
      uint64_t v5 = v27;
      if (v19)
      {
        uint64_t v20 = v31;
        goto LABEL_7;
      }
    }
    (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v29, v5);
    swift_release();
  }
  else
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_7:
    id v14 = MLImageClassifier.performRequests(_:)((uint64_t)v20);
    swift_bridgeObjectRelease((_BYTE)v20);
  }
  return v14;
}

void *MLImageClassifier.performRequests(_:)(uint64_t a1)
{
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNCoreMLModel, VNCoreMLModel_ptr);
  id v3 = *v2;
  Swift::String result = @nonobjc VNCoreMLModel.__allocating_init(for:)(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    int64_t v7 = _swiftEmptyArrayStorage;
    closure #1 in MLImageClassifier.performRequests(_:)((uint64_t)v5, a1, &v7);

    return v7;
  }
  return result;
}

NSURL *closure #1 in MLImageClassifier.performRequests(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a2;
  id v4 = objc_allocWithZone((Class)VNCoreMLRequest);
  id v51 = [v4 initWithModel:a1];
  if ((a2 & 0x4000000000000001) != 0)
  {
    uint64_t v46 = a2 & 0xFFFFFFFFFFFFF8;
    if (a2) {
      uint64_t v46 = a2;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v46);
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(a2);
  }
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v49 = v5;
    while (1)
    {
      if ((v3 & 0xC000000000000003) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6 + 32);
      }
      int64_t v8 = v7;
      BOOL v9 = __OFADD__(1, v6);
      uint64_t v10 = v6 + 1;
      if (v9) {
        BUG();
      }
      uint64_t v47 = v10;
      uint64_t v11 = type metadata accessor for VNImageOption(0);
      uint64_t v12 = lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
      id v13 = v8;
      char v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v11, (char *)&type metadata for Any + 8, v12);
      objc_allocWithZone((Class)VNImageRequestHandler);
      id v52 = v13;
      id v55 = @nonobjc VNImageRequestHandler.init(ciImage:options:)(v13, v14);
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v16 = (void *)swift_allocObject(v15, 40, 7);
      id v16[2] = 1;
      v16[3] = 3;
      void v16[4] = v51;
      id v57 = v16;
      specialized Array._endMutation()(v15, 40);
      char v17 = (char)v57;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNRequest, VNRequest_ptr);
      id v18 = v51;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v17);
      id v57 = 0;
      uint64_t v20 = "performRequests:error:";
      LOBYTE(v13) = [v55 performRequests:isa error:&v57];

      id v21 = v57;
      if (!(_BYTE)v13) {
        break;
      }
      id v22 = v18;
      v21;
      id v50 = v22;
      uint64_t v23 = outlined bridged method (ob) of @objc VNRequest.results.getter(v22);
      if (!v23
        || (char v24 = v23,
            unint64_t v25 = (unint64_t)specialized _arrayConditionalCast<A, B>(_:)(v23, VNClassificationObservation_ptr), swift_bridgeObjectRelease(v24), !v25))
      {
        swift_bridgeObjectRelease(a2);
        uint64_t v36 = &type metadata for MLCreateError;
        uint64_t v20 = (const char *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v20, 0, 0);
        *(void *)uint64_t v37 = 0xD000000000000033;
        char v40 = "ventCollector" + 0x8000000000000000;
        *(void *)(v37 + 8) = "ventCollector" + 0x8000000000000000;
        *(_OWORD *)(v37 + 16) = 0;
        *(_OWORD *)(v37 + 32) = 0;
        *(unsigned char *)(v37 + 48) = 0;
        id v41 = v52;
        char v42 = v55;
        goto LABEL_25;
      }
      if ((v25 & 0xC000000000000003) != 0)
      {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
      }
      else
      {
        if (!*(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8))) {
          BUG();
        }
        id v26 = *(id *)(v25 + 32);
      }
      uint64_t v27 = v26;
      swift_bridgeObjectRelease(v25);
      id v28 = [v27 identifier];
      id v29 = v28;

      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v48 = v31;

      uint64_t v32 = (void *)*a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
      *a3 = v32;
      id v53 = (id)v30;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, (uint64_t)v32);
        *a3 = v32;
      }
      uint64_t v3 = a2;
      unint64_t v34 = v32[2];
      if (v32[3] >> 1 <= v34)
      {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32[3] >= 2uLL, v34 + 1, 1, (uint64_t)v32);
        *a3 = v32;
      }
      v32[2] = v34 + 1;
      uint64_t v35 = 2 * v34;
      v32[v35 + 4] = v53;
      v32[v35 + 5] = v48;

      uint64_t v6 = v47;
      if (v47 == v49)
      {
        id v44 = v50;
        goto LABEL_26;
      }
    }
    unsigned __int8 v43 = (ValueMetadata *)v57;
    swift_bridgeObjectRelease(a2);
    _convertNSErrorToError(_:)(v21);
    uint64_t v36 = v43;

    id v41 = v55;
    char v42 = v52;
LABEL_25:
    swift_willThrow(v36, v20, v37, v40, v38, v39);
  }
  else
  {
    id v44 = v51;
LABEL_26:

    swift_bridgeObjectRelease(v3);
  }
  return __stack_chk_guard;
}

id @nonobjc VNImageRequestHandler.init(url:options:)(uint64_t a1, char a2)
{
  URL._bridgeToObjectiveC()(v2);
  uint64_t v5 = v4;
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v7 = [v3 initWithURL:v5 options:isa];

  uint64_t v8 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

id @nonobjc VNImageRequestHandler.init(ciImage:options:)(id a1, char a2)
{
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v4 = [v2 initWithCIImage:a1 options:isa];

  return v4;
}

uint64_t outlined bridged method (ob) of @objc VNRequest.results.getter(id a1)
{
  id v1 = [a1 results];
  id v2 = v1;

  if (!v2) {
    return 0;
  }
  uint64_t v3 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for VNObservation, VNObservation_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return a2;
}

void *MLGazetteer.ModelParameters.init(language:)(uint64_t a1)
{
  *Swift::String result = a1;
  return result;
}

uint64_t MLGazetteer.ModelParameters.description.getter()
{
  uint64_t v6 = *v0;
  (id)v6;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  uint64_t v6 = String.init<A>(describing:)(&v6, v1);
  unint64_t v7 = v2;
  v3._uint64_t countAndFlagsBits = 10;
  v3._char object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v3._uint64_t countAndFlagsBits = v6;
  uint64_t v4 = (void *)v7;
  uint64_t v6 = 0x65676175676E614CLL;
  unint64_t v7 = 0xEA0000000000203ALL;
  v3._char object = v4;
  String.append(_:)(v3);
  swift_bridgeObjectRelease((_BYTE)v4);
  return v6;
}

id MLGazetteer.ModelParameters.language.getter()
{
  id v1 = *v0;
  *v0;
  return v1;
}

void MLGazetteer.ModelParameters.language.setter(void *a1)
{
  *id v1 = a1;
}

void (*MLGazetteer.ModelParameters.language.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLGazetteer.ModelParameters.debugDescription.getter()
{
  uint64_t v8 = *v0;
  id v1 = (id)v8;
  id v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  uint64_t v8 = String.init<A>(describing:)(&v8, v3);
  unint64_t v9 = v4;
  v5._uint64_t countAndFlagsBits = 10;
  v5._char object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v5._uint64_t countAndFlagsBits = v8;
  uint64_t v6 = (void *)v9;
  uint64_t v8 = 0x65676175676E614CLL;
  unint64_t v9 = 0xEA0000000000203ALL;
  v5._char object = v6;
  String.append(_:)(v5);

  swift_bridgeObjectRelease((_BYTE)v6);
  return v8;
}

void *MLGazetteer.ModelParameters.playgroundDescription.getter()
{
  uint64_t v2 = v0;
  *(void *)&long long v11 = *v1;
  id v3 = (id)v11;
  id v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  *(void *)&long long v11 = String.init<A>(describing:)(&v11, v5);
  *((void *)&v11 + 1) = v6;
  v7._uint64_t countAndFlagsBits = 10;
  v7._char object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v8 = (void *)*((void *)&v11 + 1);
  v7._uint64_t countAndFlagsBits = v11;
  *(void *)&long long v11 = 0x65676175676E614CLL;
  *((void *)&v11 + 1) = 0xEA0000000000203ALL;
  v7._char object = v8;
  String.append(_:)(v7);

  swift_bridgeObjectRelease((_BYTE)v8);
  long long v9 = v11;
  Swift::String result = &type metadata for String;
  *(void *)(v2 + 24) = &type metadata for String;
  *(_OWORD *)uint64_t v2 = v9;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLGazetteer.ModelParameters()
{
  return MLGazetteer.ModelParameters.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLGazetteer.ModelParameters()
{
  return MLGazetteer.ModelParameters.debugDescription.getter();
}

void *protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLGazetteer.ModelParameters()
{
  return MLGazetteer.ModelParameters.playgroundDescription.getter();
}

void **initializeBufferWithCopyOfBuffer for MLGazetteer.ModelParameters(void **a1, void **a2)
{
  id v3 = *a2;
  *a1 = *a2;
  v3;
  return a1;
}

void destroy for MLGazetteer.ModelParameters(id *a1)
{
}

void **assignWithCopy for MLGazetteer.ModelParameters(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  v4;

  return a1;
}

void **assignWithTake for MLGazetteer.ModelParameters(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MLGazetteer.ModelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      int v3 = -1;
      if ((int)((*(void *)a1 >> 1) - 1) >= 0) {
        int v3 = (*(void *)a1 >> 1) - 1;
      }
      int v2 = (*(void *)a1 & 0xFFFFFFFF00000001) != 0 ? -1 : v3;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLGazetteer.ModelParameters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)a1 = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 8) = 0;
    }
    if (a2)
    {
      uint64_t result = 2 * a2;
      *(void *)a1 = result;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLGazetteer.ModelParameters()
{
  return &type metadata for MLGazetteer.ModelParameters;
}

void **initializeWithCopy for MLGazetteer.ModelParameters(void **a1, void **a2)
{
  return initializeBufferWithCopyOfBuffer for MLGazetteer.ModelParameters(a1, a2);
}

uint64_t *MLDataTable.group<A>(columnsNamed:aggregators:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v94 = v4;
  aggColumnName._uint64_t countAndFlagsBits = a2;
  uint64_t v7 = 0;
  aggColumnName._char object = *(void **)(a3 - 8);
  int64_t v8 = *((void *)aggColumnName._object + 8);
  long long v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v105 = &v89;
  uint64_t v100 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  uint64_t v93 = *(void *)(AssociatedTypeWitness - 8);
  int64_t v11 = *(void *)(v93 + 64);
  uint64_t v12 = alloca(v11);
  id v13 = alloca(v11);
  uint64_t v96 = &v89;
  uint64_t v97 = *(void *)v5;
  char v106 = *(unsigned char *)(v5 + 8);
  uint64_t v14 = tc_v1_flex_list_create(0);
  if (!v14) {
    BUG();
  }
  uint64_t v15 = v14;
  uint64_t v103 = a4;
  uint64_t v16 = type metadata accessor for CMLSequence();
  uint64_t inited = swift_initStackObject(v16, v90);
  *(void *)(inited + 16) = v15;
  uint64_t v102 = inited;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    keyColumnName = (void *)type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain(a1);
    uint64_t v104 = a1;
    BOOL v19 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v110 = v18;
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      swift_bridgeObjectRetain_n(*v19, 2);
      uint64_t v22 = CMLFeatureValue.__allocating_init(_:)(v20, v21);
      swift_bridgeObjectRelease(v21);
      CMLSequence.append(_:)(v22);
      swift_release();
      v19 += 2;
      uint64_t v18 = v110 - 1;
    }
    while (v110 != 1);
    swift_bridgeObjectRelease(v104);
  }
  uint64_t v23 = tc_v1_groupby_aggregator_create(0);
  if (!v23) {
    BUG();
  }
  uint64_t v24 = v23;
  uint64_t v25 = type metadata accessor for CMLAggregator();
  uint64_t v109 = swift_initStackObject(v25, v91);
  *(void *)(v109 + 16) = v24;
  uint64_t v26 = v100;
  (*((void (**)(uint64_t *, uint64_t, uint64_t))aggColumnName._object + 2))(v105, aggColumnName._countAndFlagsBits, v100);
  uint64_t v27 = v103;
  dispatch thunk of Sequence.makeIterator()(v26, v103);
  id v28 = v27;
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, v26, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(v29, AssociatedConformanceWitness);
  uint64_t countAndFlagsBits = concatToColumnName._countAndFlagsBits;
  if (concatToColumnName._countAndFlagsBits)
  {
    char object = concatToColumnName._object;
    uint64_t v32 = v99;
    do
    {
      uint64_t v101 = countAndFlagsBits;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v101);
      outlined consume of FeatureVectorizer<Float>.Transformer?(v101, (uint64_t)object, v32);
      uint64_t v33 = *(char **)(v101 + 16);
      if (v33)
      {
        unint64_t v34 = (unsigned __int8 *)(v101 + 48);
        keyColumnName = (void *)v32;
        aggColumnName._uint64_t countAndFlagsBits = (uint64_t)object;
        do
        {
          aggColumnName._char object = v33;
          uint64_t v35 = *((void *)v34 - 2);
          uint64_t v100 = *v34;
          uint64_t v36 = 0x616E6F6974636944;
          uint64_t v37 = (void *)0xEF656772654D7972;
          switch(v100)
          {
            case 0:
              break;
            case 1:
              uint64_t v36 = 0x6E696D677241;
              goto LABEL_14;
            case 2:
              uint64_t v36 = 0x78616D677241;
LABEL_14:
              uint64_t v37 = (void *)0xE600000000000000;
              break;
            case 3:
              switch(v35)
              {
                case 0:
                case 2:
                  JUMPOUT(0x1B11D6);
                case 1:
                  JUMPOUT(0x1B11D0);
                case 3:
                  JUMPOUT(0x1B1116);
                case 4:
                  uint64_t v36 = 0x7665647453;
                  goto LABEL_40;
                case 5:
                  uint64_t v36 = 0x746E756F43;
LABEL_40:
                  uint64_t v37 = (void *)0xE500000000000000;
                  break;
                case 6:
                  uint64_t v36 = 0x74636E6974736944;
                  uint64_t v37 = (void *)0xED0000746E756F43;
                  break;
                case 7:
                  JUMPOUT(0x1B112BLL);
                case 8:
                  uint64_t v36 = 0x65636E6575716553;
                  uint64_t v37 = (void *)0xED0000656772654DLL;
                  break;
                case 9:
                  uint64_t v36 = 0x6E4F7463656C6553;
                  uint64_t v37 = (void *)0xE900000000000065;
                  break;
              }
              break;
          }
          uint64_t v110 = v7;
          uint64_t v105 = (uint64_t *)v34;
          uint64_t v38 = (void *)*((void *)v34 - 1);
          concatToColumnName._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
          concatToColumnName._char object = keyColumnName;
          swift_bridgeObjectRetain((_BYTE)keyColumnName);
          uint64_t v39 = v38;
          uint64_t v40 = (uint64_t)v38;
          LODWORD(v38) = v100;
          outlined copy of MLDataTable.Aggregator.Operations(v35, v40, v100);
          v41._uint64_t countAndFlagsBits = v36;
          v41._char object = v37;
          String.append(_:)(v41);
          swift_bridgeObjectRelease((_BYTE)v37);
          uint64_t v42 = concatToColumnName._countAndFlagsBits;
          unsigned __int8 v43 = concatToColumnName._object;
          switch((int)v38)
          {
            case 0:
              uint64_t v32 = (uint64_t)v39;
              swift_bridgeObjectRetain((_BYTE)v39);
              v44._uint64_t countAndFlagsBits = v42;
              uint64_t v103 = v43;
              v44._char object = v43;
              v45._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
              v45._char object = keyColumnName;
              uint64_t v104 = v35;
              v46._uint64_t countAndFlagsBits = v35;
              v46._char object = v39;
              CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(v44, v45, v46);
              uint64_t v110 = v47;
              if (v47)
              {
                outlined consume of MLDataTable.Aggregator.Operations(v104, v32, 0);
                swift_bridgeObjectRelease((_BYTE)v103);
                uint64_t v88 = v110;
                goto LABEL_66;
              }
              uint64_t v48 = (char *)aggColumnName._object;
              swift_bridgeObjectRelease((_BYTE)v103);
              uint64_t v49 = v104;
              uint64_t v50 = v32;
              uint64_t v51 = v32;
              unsigned __int8 v52 = v100;
              outlined consume of MLDataTable.Aggregator.Operations(v104, v50, v100);
              outlined consume of MLDataTable.Aggregator.Operations(v49, v51, v52);
              id v53 = v105;
              LOBYTE(v32) = (_BYTE)keyColumnName;
              uint64_t v7 = v110;
              break;
            case 1:
              swift_bridgeObjectRetain((_BYTE)v39);
              JUMPOUT(0x1B0F90);
            case 2:
              swift_bridgeObjectRetain((_BYTE)v39);
              uint64_t v103 = v43;
              uint64_t v104 = v35;
              JUMPOUT(0x1B0EECLL);
            case 3:
              switch(v35)
              {
                case 0:
                  JUMPOUT(0x1B0F3BLL);
                case 1:
                  v63._uint64_t countAndFlagsBits = 7889261;
                  v63._char object = (void *)0xE300000000000000;
                  v64._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  v64._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v63, concatToColumnName, v64);
                  JUMPOUT(0x1B1218);
                case 2:
                  v58._uint64_t countAndFlagsBits = 7173491;
                  v58._char object = (void *)0xE300000000000000;
                  v59._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  v59._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v58, concatToColumnName, v59);
                  JUMPOUT(0x1B1103);
                case 3:
                  v60._uint64_t countAndFlagsBits = 6780513;
                  v60._char object = (void *)0xE300000000000000;
                  char v61 = (char)concatToColumnName._object;
                  v62._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  LOBYTE(v32) = (_BYTE)keyColumnName;
                  v62._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v60, concatToColumnName, v62);
                  swift_bridgeObjectRelease(v61);
                  if (v7) {
                    goto LABEL_65;
                  }
                  goto LABEL_48;
                case 4:
                  v54._uint64_t countAndFlagsBits = 6583411;
                  v54._char object = (void *)0xE300000000000000;
                  v55._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  v55._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v54, concatToColumnName, v55);
                  JUMPOUT(0x1B104ELL);
                case 5:
                  swift_bridgeObjectRelease(concatToColumnName._object);
                  v65._uint64_t countAndFlagsBits = 0x746E756F43;
                  v66._uint64_t countAndFlagsBits = 0x746E756F63;
                  v65._char object = (void *)0xE500000000000000;
                  v66._char object = (void *)0xE500000000000000;
                  v67._uint64_t countAndFlagsBits = 0;
                  v67._char object = (void *)0xE000000000000000;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v66, v65, v67);
                  JUMPOUT(0x1B1281);
                case 6:
                  v68._uint64_t countAndFlagsBits = 0x69645F746E756F63;
                  v68._char object = (void *)0xEE0074636E697473;
                  v69._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  v69._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v68, concatToColumnName, v69);
                  JUMPOUT(0x1B12E1);
                case 7:
                  JUMPOUT(0x1B119CLL);
                case 8:
                  v70._uint64_t countAndFlagsBits = 0x7461636E6F63;
                  v70._char object = (void *)0xE600000000000000;
                  char v71 = (char)concatToColumnName._object;
                  v72._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  LOBYTE(v32) = (_BYTE)keyColumnName;
                  v72._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v70, concatToColumnName, v72);
                  swift_bridgeObjectRelease(v71);
                  if (v7)
                  {
LABEL_65:
                    uint64_t v88 = v7;
LABEL_66:
                    swift_unexpectedError(v88, "CreateML/MLDataTable+Group.swift", 32, 1);
                    BUG();
                  }
LABEL_48:
                  uint64_t v48 = (char *)aggColumnName._object;
                  id v53 = v105;
                  break;
                case 9:
                  v56._uint64_t countAndFlagsBits = 0x6F5F7463656C6573;
                  v56._char object = (void *)0xEA0000000000656ELL;
                  v57._uint64_t countAndFlagsBits = aggColumnName._countAndFlagsBits;
                  v57._char object = keyColumnName;
                  CMLAggregator.add(operation:toColumnName:fromColumnName:)(v56, concatToColumnName, v57);
                  JUMPOUT(0x1B10B2);
              }
              return result;
          }
          unint64_t v34 = (unsigned __int8 *)(v53 + 3);
          uint64_t v33 = v48 - 1;
        }
        while (v33);
      }
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v101);
      dispatch thunk of IteratorProtocol.next()(AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t countAndFlagsBits = concatToColumnName._countAndFlagsBits;
      char object = concatToColumnName._object;
      uint64_t v32 = v99;
    }
    while (concatToColumnName._countAndFlagsBits);
  }
  (*(void (**)(uint64_t *, uint64_t))(v93 + 8))(v96, AssociatedTypeWitness);
  if (v106)
  {
    uint64_t v73 = v97;
    concatToColumnName._uint64_t countAndFlagsBits = v97;
    outlined copy of Result<_DataTable, Error>(v97, 1);
    swift_errorRetain(v73);
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v75 = _getErrorEmbeddedNSError<A>(_:)(&concatToColumnName, v74, &protocol self-conformance witness table for Error);
    if (v75)
    {
      uint64_t v7 = v75;
      outlined consume of Result<_DataTable, Error>(v73, 1);
    }
    else
    {
      uint64_t v7 = swift_allocError(v74, &protocol self-conformance witness table for Error, 0, 0);
      *uint64_t v81 = concatToColumnName._countAndFlagsBits;
    }
    outlined consume of Result<_DataTable, Error>(v73, 1);
    swift_release();
    goto LABEL_58;
  }
  uint64_t v76 = v97;
  uint64_t v77 = *(void *)(*(void *)(v97 + 16) + 16);
  uint64_t v78 = *(void *)(v102 + 16);
  uint64_t v79 = *(void *)(v109 + 16);
  outlined copy of Result<_DataTable, Error>(v97, 0);
  uint64_t v80 = specialized handling<A, B, C, D>(_:_:_:_:)(v77, v78, v79);
  if (v7)
  {
    outlined consume of Result<_DataTable, Error>(v76, 0);
    swift_release();
LABEL_58:
    swift_release();
    char v82 = 1;
    goto LABEL_59;
  }
  uint64_t v84 = v80;
  if (!v80) {
    BUG();
  }
  char v82 = 0;
  uint64_t v85 = type metadata accessor for CMLTable();
  uint64_t v86 = swift_allocObject(v85, 24, 7);
  *(void *)(v86 + 16) = v84;
  uint64_t v87 = type metadata accessor for _DataTable();
  swift_allocObject(v87, 40, 7);
  uint64_t v7 = _DataTable.init(impl:)(v86);
  outlined consume of Result<_DataTable, Error>(v97, 0);
  swift_release();
  swift_release();
LABEL_59:
  uint64_t result = v94;
  uint64_t *v94 = v7;
  *((unsigned char *)result + 8) = v82;
  return result;
}

uint64_t MLDataTable.Aggregator.operations.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t MLDataTable.Aggregator.operations.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *id v1 = a1;
  return result;
}

void (*MLDataTable.Aggregator.operations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.Aggregator.columnName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t MLDataTable.Aggregator.columnName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

void (*MLDataTable.Aggregator.columnName.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void *MLDataTable.Aggregator.init(operations:of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a1;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t outlined copy of MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t outlined consume of MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.Aggregator()
{
  return &type metadata for MLDataTable.Aggregator;
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  return initializeBufferWithCopyOfBuffer for MLDataTable.Aggregator.Operations(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  int v4;

  uint64_t v2 = *(void *)a2;
  int v3 = *(void *)(a2 + 8);
  id v4 = *(_DWORD *)(a2 + 16);
  outlined copy of MLDataTable.Aggregator.Operations(*(void *)a2, v3, v4);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t destroy for MLDataTable.Aggregator.Operations(uint64_t a1)
{
  return outlined consume of MLDataTable.Aggregator.Operations(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16));
}

uint64_t assignWithCopy for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  outlined copy of MLDataTable.Aggregator.Operations(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  int v8 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MLDataTable.Aggregator.Operations(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLDataTable.Aggregator.Operations(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v6 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MLDataTable.Aggregator.Operations(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.Aggregator.Operations(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      int v2 = -1;
      if (*(unsigned __int8 *)(a1 + 16) >= 4u) {
        int v2 = *(unsigned __int8 *)(a1 + 16) ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for MLDataTable.Aggregator.Operations(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a2 - 253;
    *(unsigned char *)(a1 + 16) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(a1 + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(a1 + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(a1 + 16) = -(char)a2;
    }
  }
}

uint64_t getEnumTag for MLDataTable.Aggregator.Operations(uint64_t a1)
{
  uint64_t result = (*(_DWORD *)a1 + 3);
  if (*(unsigned __int8 *)(a1 + 16) < 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  return result;
}

void destructiveInjectEnumTag for MLDataTable.Aggregator.Operations(uint64_t a1, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)a1 = a2 - 3;
    *(void *)(a1 + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(a1 + 16) = a2;
}

ValueMetadata *type metadata accessor for MLDataTable.Aggregator.Operations()
{
  return &type metadata for MLDataTable.Aggregator.Operations;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_Sis5NeverOTg5159_s8CreateML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  uint64_t v22 = *(void *)(a1 + 16);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  char v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = specialized _NativeSet.startIndex.getter(a1);
  int v6 = v5;
  char v8 = v7 & 1;
  do
  {
    if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v2 + 32)) {
      BUG();
    }
    uint64_t v9 = *(void *)(v2 + 8 * ((unint64_t)v4 >> 6) + 56);
    if (!_bittest64(&v9, v4)) {
      BUG();
    }
    if (*(_DWORD *)(v2 + 36) != v6) {
      BUG();
    }
    uint64_t v10 = *(void *)(v2 + 48);
    uint64_t v11 = *(void *)(v10 + 16 * v4);
    uint64_t v24 = v3;
    uint64_t v12 = *(void *)(v10 + 16 * v4 + 8);
    swift_bridgeObjectRetain(v12);
    uint64_t v21 = String.count.getter(v11, v12);
    char v13 = v12;
    char v3 = v24;
    swift_bridgeObjectRelease(v13);
    unint64_t v14 = v24[2];
    unint64_t v15 = v24[3];
    unint64_t v16 = v14 + 1;
    if (v15 >> 1 <= v14)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 >= 2, v14 + 1, 1);
      unint64_t v16 = v14 + 1;
      char v3 = v24;
    }
    v3[2] = v16;
    v3[v14 + 4] = v21;
    uint64_t v2 = a1;
    int64_t v17 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, a1);
    uint64_t v4 = v17;
    int v6 = v18;
    char v8 = v19 & 1;
    --v22;
  }
  while (v22);
  outlined consume of [MLDataValue : MLDataValue].Index._Variant(v17, v18, v19 & 1);
  return v3;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_Sis5NeverOTg5169_s8CreateML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = (uint64_t *)(a1 + 40);
    do
    {
      int64_t v9 = v1;
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      swift_bridgeObjectRetain(*v2);
      uint64_t v5 = String.count.getter(v3, v4);
      swift_bridgeObjectRelease(v4);
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = v6 + 1;
      if (_swiftEmptyArrayStorage[3] >> 1 <= v6)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_swiftEmptyArrayStorage[3] >= 2uLL, v6 + 1, 1);
        unint64_t v7 = v6 + 1;
      }
      _swiftEmptyArrayStorage[2] = v7;
      _swiftEmptyArrayStorage[v6 + 4] = v5;
      v2 += 2;
      int64_t v1 = v9 - 1;
    }
    while (v9 != 1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t MLClassifierMetrics.init()()
{
  uint64_t v18 = v0;
  uint64_t v19 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void *)(v19 - 8);
  int64_t v1 = *(void *)(v20 + 64);
  uint64_t v2 = alloca(v1);
  uint64_t v3 = alloca(v1);
  uint64_t v22 = &v18;
  uint64_t v4 = alloca(v1);
  uint64_t v5 = alloca(v1);
  uint64_t v21 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v6 = *(void *)(*(void *)(v21 - 8) + 64);
  unint64_t v7 = alloca(v6);
  char v8 = alloca(v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v10 = *(void *)(v9 - 8);
  int64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = alloca(v11);
  char v13 = alloca(v11);
  ClassificationMetrics.init()(&type metadata for String, &protocol witness table for String);
  specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(&v18);
  specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)((uint64_t)&v18);
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(&v18, v9);
  uint64_t v18 = 0;
  uint64_t v14 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  unint64_t v15 = *(void (**)(char *, uint64_t *, uint64_t))(v20 + 32);
  uint64_t v16 = v19;
  v15((char *)&v18 + *(int *)(v14 + 20), &v18, v19);
  v15((char *)&v18 + *(int *)(v14 + 24), v22, v16);
  swift_storeEnumTagMultiPayload(&v18, v21, 1);
  return outlined init with take of MLClassifierMetrics((uint64_t)&v18, v18, type metadata accessor for MLClassifierMetrics.Contents);
}

unint64_t MLClassifierMetrics.description.getter()
{
  uint64_t v1 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  outlined init with copy of MLClassifierMetrics.Contents(v0, (uint64_t)&v14);
  if (swift_getEnumCaseMultiPayload(&v14, v1) > 1)
  {
    uint64_t v11 = v14;
    unint64_t v15 = 0;
    uint64_t v16 = (char *)0xE000000000000000;
    v17[0] = v14;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)(v17, &v15, v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    swift_errorRelease(v11);
  }
  else
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v14, type metadata accessor for MLClassifierMetrics.Contents);
    unint64_t v15 = 0xD000000000000023;
    uint64_t v16 = "Empty ArraySlice" + 0x8000000000000000;
    v5._uint64_t countAndFlagsBits = MLClassifierMetrics.accuracyDescription.getter();
    char object = (char)v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._uint64_t countAndFlagsBits = (uint64_t)MLClassifierMetrics.Contents.confusionMatrixDescription.getter();
    char v8 = (char)v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v8);
    v9._uint64_t countAndFlagsBits = MLClassifierMetrics.precisionRecallDescription.getter();
    char v10 = (char)v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v10);
  }
  return v15;
}

uint64_t type metadata accessor for MLClassifierMetrics.Contents(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics.Contents, (uint64_t)&nominal type descriptor for MLClassifierMetrics.Contents);
}

uint64_t MLClassifierMetrics.isValid.getter()
{
  v7[0] = v0;
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = alloca(v3);
  Swift::String v5 = alloca(v3);
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v7);
  LOBYTE(v2) = swift_getEnumCaseMultiPayload(v7, v2) < 2;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v7, type metadata accessor for MLClassifierMetrics.Contents);
  return v2;
}

unint64_t MLClassifierMetrics.debugDescription.getter()
{
  return MLClassifierMetrics.accuracyDescription.getter();
}

double MLClassifierMetrics.classificationError.getter()
{
  v16[0] = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics.Precomputed(0) - 8) + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  Swift::String v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  char v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, type metadata accessor for MLClassifierMetrics.Contents);
      double v14 = 0.0;
      return 1.0 - v14;
    }
    outlined init with take of MLClassifierMetrics((uint64_t)v16, (uint64_t)v16, type metadata accessor for MLClassifierMetrics.Precomputed);
    v16[0] = 1.0 - v16[0];
    char v13 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)v16, (uint64_t)v16, type metadata accessor for AnyClassificationMetrics);
    v16[0] = AnyClassificationMetrics.accuracy.getter();
    char v13 = type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, v13);
  double v14 = v16[0];
  return 1.0 - v14;
}

uint64_t specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)()
{
  uint64_t v53 = v0;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v52 = *(void *)(v59 - 8);
  int64_t v1 = *(void *)(v52 + 64);
  int64_t v2 = alloca(v1);
  int64_t v3 = alloca(v1);
  Swift::String v62 = v44;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v54 = *(void *)(v60 - 8);
  int64_t v4 = *(void *)(v54 + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  Swift::String v65 = v44;
  Swift::String v7 = alloca(v4);
  uint64_t v8 = alloca(v4);
  Swift::String v64 = v44;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v55 = *(void *)(v58 - 8);
  int64_t v9 = *(void *)(v55 + 64);
  char v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  char v61 = v44;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v13 = ClassificationMetrics.labels.getter(v12);
  swift_bridgeObjectRetain(v13);
  double v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
  swift_bridgeObjectRelease(v13);
  v45[0] = v14;
  specialized MutableCollection<>.sort(by:)(v45);
  swift_bridgeObjectRelease(v13);
  uint64_t v15 = v45[0];
  ClassificationMetrics.makeConfusionMatrix<>()(v12, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String);
  uint64_t v16 = ClassificationMetrics.labels.getter(v12);
  uint64_t v17 = *(void *)(v16 + 16);
  swift_bridgeObjectRelease(v16);
  Column.init(name:capacity:)(0x7373616C63, 0xE500000000000000, v17, &type metadata for String);
  uint64_t v18 = ClassificationMetrics.labels.getter(v12);
  uint64_t v19 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease(v18);
  Column.init(name:capacity:)(0x6574636964657270, 0xEF7373616C635F64, v19, &type metadata for String);
  uint64_t v20 = ClassificationMetrics.labels.getter(v12);
  uint64_t v21 = *(void *)(v20 + 16);
  swift_bridgeObjectRelease(v20);
  Column.init(name:capacity:)(0x746E756F63, 0xE500000000000000, v21, &type metadata for Int);
  uint64_t v63 = v15;
  uint64_t v22 = *(void *)(v15 + 16);
  v45[0] = 0;
  v45[1] = v22;
  long long v46 = 0;
  uint64_t v47 = v22;
  long long v48 = 0;
  char v49 = 1;
  uint64_t v50 = 0;
  uint64_t v51 = v22;
  uint64_t v23 = specialized Product2Sequence.Iterator.next()();
  if ((v25 & 1) == 0)
  {
    uint64_t v26 = v23;
    uint64_t v27 = v24;
    uint64_t v57 = v63 + 32;
    do
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v29 = (void *)swift_allocObject(v28, 48, 7);
      v29[2] = 2;
      v29[3] = 4;
      v29[4] = v26;
      v29[5] = v27;
      uint64_t v30 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
      MLShapedArrayProtocol.subscript.getter(v29, v58, v30);
      swift_bridgeObjectRelease((_BYTE)v29);
      __m128i v31 = _mm_cvtsi32_si128(v56);
      if ((~_mm_cvtsi128_si32(v31) & 0x7F800000) == 0) {
        BUG();
      }
      if (*(float *)v31.i32 <= -9.2233731e18) {
        BUG();
      }
      if (*(float *)v31.i32 >= 9.223372e18) {
        BUG();
      }
      if ((int)*(float *)v31.i32)
      {
        if (v26 < 0) {
          BUG();
        }
        if ((unint64_t)v26 >= *(void *)(v63 + 16)) {
          BUG();
        }
        long long v56 = *(_OWORD *)(v57 + 16 * v26);
        Column.append(_:)(&v56, v60);
        if (v27 < 0) {
          BUG();
        }
        if ((unint64_t)v27 >= *(void *)(v63 + 16)) {
          BUG();
        }
        long long v56 = *(_OWORD *)(v57 + 16 * v27);
        Column.append(_:)(&v56, v60);
        *(void *)&long long v56 = (int)*(float *)v31.i32;
        Column.append(_:)(&v56, v59);
      }
      uint64_t v26 = specialized Product2Sequence.Iterator.next()();
      uint64_t v27 = v32;
    }
    while ((v33 & 1) == 0);
  }
  swift_release();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  uint64_t v35 = type metadata accessor for AnyColumn(0);
  uint64_t v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(*(void *)(v35 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v35 - 8) + 80))+ 3 * *(void *)(*(void *)(v35 - 8) + 72), *(unsigned __int8 *)(*(void *)(v35 - 8) + 80) | 7);
  *(void *)(v36 + 16) = 3;
  *(void *)(v36 + 24) = 6;
  uint64_t v37 = v60;
  Column.eraseToAnyColumn()(v60);
  Column.eraseToAnyColumn()(v37);
  uint64_t v38 = v59;
  uint64_t v39 = v62;
  Column.eraseToAnyColumn()(v59);
  v45[0] = v36;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  uint64_t v41 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn], (uint64_t)&protocol conformance descriptor for [A]);
  DataFrame.init<A>(columns:)(v45, v40, v41);
  (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v39, v38);
  uint64_t v42 = *(void (**)(unsigned char *, uint64_t))(v54 + 8);
  v42(v65, v37);
  v42(v64, v37);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v55 + 8))(v61, v58);
}

{
  uint64_t v0;
  int64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __m128i v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t *, uint64_t);
  uint64_t v43;
  void v44[2];
  long long v45;
  uint64_t v46;
  long long v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned int v60[12];

  uint64_t v51 = v0;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v52 = *(void *)(v55 - 8);
  int64_t v1 = *(void *)(v52 + 64);
  int64_t v2 = alloca(v1);
  int64_t v3 = alloca(v1);
  uint64_t v57 = &v43;
  int64_t v4 = alloca(v1);
  int64_t v5 = alloca(v1);
  uint64_t v59 = &v43;
  int64_t v6 = alloca(v1);
  Swift::String v7 = alloca(v1);
  uint64_t v58 = &v43;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v53 = *(void *)(v54 - 8);
  uint64_t v8 = *(void *)(v53 + 64);
  int64_t v9 = alloca(v8);
  char v10 = alloca(v8);
  long long v56 = &v43;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v12 = ClassificationMetrics.labels.getter(v11);
  swift_bridgeObjectRetain(v12);
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
  swift_bridgeObjectRelease(v12);
  v44[0] = v13;
  specialized MutableCollection<>.sort(by:)(v44);
  swift_bridgeObjectRelease(v12);
  double v14 = v44[0];
  ClassificationMetrics.makeConfusionMatrix<>()(v11, &protocol witness table for Int, &protocol witness table for Int, &protocol witness table for Int);
  uint64_t v15 = ClassificationMetrics.labels.getter(v11);
  uint64_t v16 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease(v15);
  Column.init(name:capacity:)(0x7373616C63, 0xE500000000000000, v16, &type metadata for Int);
  uint64_t v17 = ClassificationMetrics.labels.getter(v11);
  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease(v17);
  Column.init(name:capacity:)(0x6574636964657270, 0xEF7373616C635F64, v18, &type metadata for Int);
  uint64_t v19 = ClassificationMetrics.labels.getter(v11);
  uint64_t v20 = *(void *)(v19 + 16);
  swift_bridgeObjectRelease(v19);
  Column.init(name:capacity:)(0x746E756F63, 0xE500000000000000, v20, &type metadata for Int);
  uint64_t v21 = *(void *)(v14 + 16);
  v44[0] = 0;
  v44[1] = v21;
  Swift::String v45 = 0;
  long long v46 = v21;
  uint64_t v47 = 0;
  long long v48 = 1;
  char v49 = 0;
  uint64_t v50 = v21;
  uint64_t v22 = specialized Product2Sequence.Iterator.next()();
  if ((v24 & 1) == 0)
  {
    char v25 = v22;
    uint64_t v26 = v23;
    do
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v28 = (void *)swift_allocObject(v27, 48, 7);
      v28[2] = 2;
      v28[3] = 4;
      _OWORD v28[4] = v25;
      v28[5] = v26;
      uint64_t v29 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
      MLShapedArrayProtocol.subscript.getter(v28, v54, v29);
      swift_bridgeObjectRelease((_BYTE)v28);
      uint64_t v30 = _mm_cvtsi32_si128(v60[0]);
      if ((~_mm_cvtsi128_si32(v30) & 0x7F800000) == 0) {
        BUG();
      }
      if (*(float *)v30.i32 <= -9.2233731e18) {
        BUG();
      }
      if (*(float *)v30.i32 >= 9.223372e18) {
        BUG();
      }
      if ((int)*(float *)v30.i32)
      {
        if (v25 < 0) {
          BUG();
        }
        if ((unint64_t)v25 >= *(void *)(v14 + 16)) {
          BUG();
        }
        *(void *)uint64_t v60 = *(void *)(v14 + 8 * v25 + 32);
        Column.append(_:)(v60, v55);
        if (v26 < 0) {
          BUG();
        }
        if ((unint64_t)v26 >= *(void *)(v14 + 16)) {
          BUG();
        }
        *(void *)uint64_t v60 = *(void *)(v14 + 8 * v26 + 32);
        __m128i v31 = v55;
        Column.append(_:)(v60, v55);
        *(void *)uint64_t v60 = (int)*(float *)v30.i32;
        Column.append(_:)(v60, v31);
      }
      char v25 = specialized Product2Sequence.Iterator.next()();
      uint64_t v26 = v32;
    }
    while ((v33 & 1) == 0);
  }
  swift_release();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  uint64_t v35 = type metadata accessor for AnyColumn(0);
  uint64_t v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(*(void *)(v35 - 8) + 80) + 32) & ~*(unsigned __int8 *)(*(void *)(v35 - 8) + 80))+ 3 * *(void *)(*(void *)(v35 - 8) + 72), *(unsigned __int8 *)(*(void *)(v35 - 8) + 80) | 7);
  *(void *)(v36 + 16) = 3;
  *(void *)(v36 + 24) = 6;
  uint64_t v37 = v55;
  Column.eraseToAnyColumn()(v55);
  Column.eraseToAnyColumn()(v37);
  uint64_t v38 = v57;
  Column.eraseToAnyColumn()(v37);
  v44[0] = v36;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  uint64_t v40 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn], (uint64_t)&protocol conformance descriptor for [A]);
  DataFrame.init<A>(columns:)(v44, v39, v40);
  uint64_t v41 = *(void (**)(uint64_t *, uint64_t))(v52 + 8);
  v41(v38, v37);
  v41(v59, v37);
  v41(v58, v37);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v53 + 8))(v56, v54);
}

uint64_t specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(uint64_t a1)
{
  uint64_t v71 = a1;
  uint64_t v59 = v1;
  int64_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>)
                             - 8)
                 + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  char v61 = v50;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v53 = *(void *)(v56 - 8);
  int64_t v5 = *(void *)(v53 + 64);
  int64_t v6 = alloca(v5);
  Swift::String v7 = alloca(v5);
  Swift::String v64 = v50;
  uint64_t v8 = alloca(v5);
  int64_t v9 = alloca(v5);
  Swift::String v62 = v50;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Int>)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v54 = *(void *)(v57 - 8);
  int64_t v13 = *(void *)(v54 + 64);
  double v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v63 = v50;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  Swift::String v68 = v50;
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  Swift::String v69 = v50;
  uint64_t v20 = alloca(v13);
  uint64_t v21 = alloca(v13);
  Swift::String v70 = v50;
  int64_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>)
                              - 8)
                  + 64);
  uint64_t v23 = alloca(v22);
  uint64_t v24 = alloca(v22);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v55 = *(void *)(v58 - 8);
  int64_t v25 = *(void *)(v55 + 64);
  uint64_t v26 = alloca(v25);
  uint64_t v27 = alloca(v25);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v28 = ClassificationMetrics.labels.getter(v67);
  uint64_t v29 = *(void *)(v28 + 16);
  swift_bridgeObjectRelease(v28);
  ColumnID.init(_:_:)(0x7373616C63, 0xE500000000000000, &type metadata for String);
  Swift::String v66 = v50;
  Column.init(_:capacity:)(v50, v29, &type metadata for String);
  ColumnID.init(_:_:)(0x635F6C6175746361, 0xEC000000746E756FLL, &type metadata for Int);
  Column.init(_:capacity:)(v50, v29, &type metadata for Int);
  ColumnID.init(_:_:)(0xD000000000000013, "missed_predicting_this" + 0x8000000000000000, &type metadata for Int);
  Column.init(_:capacity:)(v50, v29, &type metadata for Int);
  ColumnID.init(_:_:)(0xD00000000000001ALL, "predicted_correctly" + 0x8000000000000000, &type metadata for Int);
  Column.init(_:capacity:)(v50, v29, &type metadata for Int);
  ColumnID.init(_:_:)(0xD000000000000016, " to the computed confusion." + 0x8000000000000000, &type metadata for Int);
  Column.init(_:capacity:)(v50, v29, &type metadata for Int);
  uint64_t v30 = v61;
  ColumnID.init(_:_:)(0x6F69736963657270, 0xE90000000000006ELL, &type metadata for Double);
  Column.init(_:capacity:)(v30, v29, &type metadata for Double);
  ColumnID.init(_:_:)(0x6C6C61636572, 0xE600000000000000, &type metadata for Double);
  Column.init(_:capacity:)(v30, v29, &type metadata for Double);
  DataFrame.init()();
  uint64_t v31 = ClassificationMetrics.labels.getter(v67);
  swift_bridgeObjectRetain(v31);
  uint64_t v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v31);
  swift_bridgeObjectRelease(v31);
  v65[0] = v32;
  specialized MutableCollection<>.sort(by:)(v65);
  swift_bridgeObjectRelease(v31);
  uint64_t v60 = v65[0];
  char v33 = *(unsigned char **)(v65[0] + 16);
  uint64_t v34 = v66;
  uint64_t v35 = v67;
  if (v33)
  {
    uint64_t v36 = (uint64_t *)(v60 + 40);
    do
    {
      char v61 = v33;
      uint64_t v37 = *(v36 - 1);
      uint64_t v51 = *v36;
      v65[0] = v37;
      v65[1] = v51;
      swift_bridgeObjectRetain(v51);
      Column.append(_:)(v65, v58);
      uint64_t v38 = ClassificationMetrics.truePositiveCount(of:)(v65, v35);
      uint64_t v52 = ClassificationMetrics.falseNegativeCount(of:)(v65, v35);
      v72[0] = ClassificationMetrics.count(label:)(v65, v67);
      uint64_t v39 = v57;
      Column.append(_:)(v72, v57);
      v72[0] = v38;
      Column.append(_:)(v72, v39);
      v72[0] = v52;
      uint64_t v35 = v67;
      Column.append(_:)(v72, v39);
      v72[0] = ClassificationMetrics.falsePositiveCount(of:)(v65, v35);
      Column.append(_:)(v72, v39);
      v72[0] = ClassificationMetrics.precisionScore(label:)(v65, v35);
      uint64_t v40 = v56;
      Column.append(_:)(v72, v56);
      v72[0] = ClassificationMetrics.recallScore(label:)(v65, v35);
      Column.append(_:)(v72, v40);
      uint64_t v34 = v66;
      swift_bridgeObjectRelease(v51);
      v36 += 2;
      char v33 = v61 - 1;
    }
    while (v61 != (unsigned char *)&dword_0 + 1);
  }
  swift_release();
  DataFrame.append<A>(column:)(v34, &type metadata for String);
  DataFrame.append<A>(column:)(v70, &type metadata for Int);
  DataFrame.append<A>(column:)(v69, &type metadata for Int);
  DataFrame.append<A>(column:)(v68, &type metadata for Int);
  uint64_t v41 = v63;
  DataFrame.append<A>(column:)(v63, &type metadata for Int);
  uint64_t v42 = v62;
  DataFrame.append<A>(column:)(v62, &type metadata for Double);
  unsigned __int8 v43 = v64;
  DataFrame.append<A>(column:)(v64, &type metadata for Double);
  Swift::String v44 = *(void (**)(unsigned char *, uint64_t))(v53 + 8);
  uint64_t v45 = v56;
  v44(v43, v56);
  v44(v42, v45);
  long long v46 = *(void (**)(unsigned char *, uint64_t))(v54 + 8);
  uint64_t v47 = v41;
  uint64_t v48 = v57;
  v46(v47, v57);
  v46(v68, v48);
  v46(v69, v48);
  v46(v70, v48);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v55 + 8))(v66, v58);
}

{
  uint64_t v1;
  int64_t v2;
  void *v3;
  void *v4;
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unsigned char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned char *v40;
  unsigned char *v41;
  unsigned char *v42;
  void (*v43)(unsigned char *, uint64_t);
  unsigned char *v44;
  uint64_t v45;
  void (*v46)(unsigned char *, uint64_t);
  uint64_t v47;
  unsigned char v49[16];
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned char *v57;
  unsigned char *v58;
  unsigned char *v59;
  unsigned char *v60;
  unsigned char *v61;
  unsigned char *v62;
  unsigned char *v63;
  unsigned char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void v68[6];

  Swift::String v66 = a1;
  uint64_t v55 = v1;
  int64_t v2 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>)
                             - 8)
                 + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v57 = v49;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v52 = *(void *)(v54 - 8);
  int64_t v5 = *(void *)(v52 + 64);
  int64_t v6 = alloca(v5);
  Swift::String v7 = alloca(v5);
  uint64_t v60 = v49;
  uint64_t v8 = alloca(v5);
  int64_t v9 = alloca(v5);
  uint64_t v58 = v49;
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Int>)
                              - 8)
                  + 64);
  uint64_t v11 = alloca(v10);
  uint64_t v12 = alloca(v10);
  Swift::String v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v53 = *(void *)(v65 - 8);
  int64_t v13 = *(void *)(v53 + 64);
  double v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v59 = v49;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  Swift::String v62 = v49;
  uint64_t v18 = alloca(v13);
  uint64_t v19 = alloca(v13);
  uint64_t v63 = v49;
  uint64_t v20 = alloca(v13);
  uint64_t v21 = alloca(v13);
  Swift::String v64 = v49;
  int64_t v22 = alloca(v13);
  uint64_t v23 = alloca(v13);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v24 = ClassificationMetrics.labels.getter(v56);
  int64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease(v24);
  ColumnID.init(_:_:)(0x7373616C63, 0xE500000000000000, &type metadata for Int);
  char v61 = v49;
  Column.init(_:capacity:)(v49, v25, &type metadata for Int);
  ColumnID.init(_:_:)(0x635F6C6175746361, 0xEC000000746E756FLL, &type metadata for Int);
  Column.init(_:capacity:)(v49, v25, &type metadata for Int);
  ColumnID.init(_:_:)(0xD000000000000013, "missed_predicting_this" + 0x8000000000000000, &type metadata for Int);
  Column.init(_:capacity:)(v49, v25, &type metadata for Int);
  ColumnID.init(_:_:)(0xD00000000000001ALL, "predicted_correctly" + 0x8000000000000000, &type metadata for Int);
  Column.init(_:capacity:)(v49, v25, &type metadata for Int);
  ColumnID.init(_:_:)(0xD000000000000016, " to the computed confusion." + 0x8000000000000000, &type metadata for Int);
  Column.init(_:capacity:)(v49, v25, &type metadata for Int);
  uint64_t v26 = v57;
  ColumnID.init(_:_:)(0x6F69736963657270, 0xE90000000000006ELL, &type metadata for Double);
  Column.init(_:capacity:)(v26, v25, &type metadata for Double);
  ColumnID.init(_:_:)(0x6C6C61636572, 0xE600000000000000, &type metadata for Double);
  Column.init(_:capacity:)(v26, v25, &type metadata for Double);
  DataFrame.init()();
  uint64_t v27 = ClassificationMetrics.labels.getter(v56);
  swift_bridgeObjectRetain(v27);
  uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v27);
  swift_bridgeObjectRelease(v27);
  uint64_t v67 = v28;
  specialized MutableCollection<>.sort(by:)(&v67);
  swift_bridgeObjectRelease(v27);
  uint64_t v29 = v67;
  uint64_t v30 = v67[2];
  uint64_t v31 = v61;
  uint64_t v32 = v56;
  if (v30)
  {
    char v33 = 0;
    uint64_t v50 = v67;
    uint64_t v51 = v30;
    do
    {
      uint64_t v34 = (void *)v29[v33++ + 4];
      uint64_t v67 = v34;
      Column.append(_:)(&v67, v65);
      uint64_t v35 = ClassificationMetrics.truePositiveCount(of:)(&v67, v32);
      uint64_t v57 = (unsigned char *)ClassificationMetrics.falseNegativeCount(of:)(&v67, v32);
      v68[0] = ClassificationMetrics.count(label:)(&v67, v32);
      Column.append(_:)(v68, v65);
      v68[0] = v35;
      Column.append(_:)(v68, v65);
      v68[0] = v57;
      uint64_t v36 = v32;
      uint64_t v37 = v65;
      Column.append(_:)(v68, v65);
      v68[0] = ClassificationMetrics.falsePositiveCount(of:)(&v67, v36);
      uint64_t v38 = v37;
      uint64_t v32 = v36;
      Column.append(_:)(v68, v38);
      v68[0] = ClassificationMetrics.precisionScore(label:)(&v67, v36);
      uint64_t v39 = v54;
      Column.append(_:)(v68, v54);
      v68[0] = ClassificationMetrics.recallScore(label:)(&v67, v32);
      Column.append(_:)(v68, v39);
      uint64_t v29 = v50;
      uint64_t v31 = v61;
    }
    while (v51 != v33);
  }
  swift_release();
  DataFrame.append<A>(column:)(v31, &type metadata for Int);
  DataFrame.append<A>(column:)(v64, &type metadata for Int);
  DataFrame.append<A>(column:)(v63, &type metadata for Int);
  DataFrame.append<A>(column:)(v62, &type metadata for Int);
  uint64_t v40 = v59;
  DataFrame.append<A>(column:)(v59, &type metadata for Int);
  uint64_t v41 = v58;
  DataFrame.append<A>(column:)(v58, &type metadata for Double);
  uint64_t v42 = v60;
  DataFrame.append<A>(column:)(v60, &type metadata for Double);
  unsigned __int8 v43 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
  Swift::String v44 = v42;
  uint64_t v45 = v54;
  v43(v44, v54);
  v43(v41, v45);
  long long v46 = *(void (**)(unsigned char *, uint64_t))(v53 + 8);
  uint64_t v47 = v65;
  v46(v40, v65);
  v46(v62, v47);
  v46(v63, v47);
  v46(v64, v47);
  return ((uint64_t (*)(unsigned char *, uint64_t))v46)(v61, v47);
}

uint64_t MLClassifierMetrics.init(classificationError:confusion:precisionRecall:)(uint64_t *a1, uint64_t *a2, double a3)
{
  double v12 = a3;
  int64_t v4 = v3;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v10 = *a1;
  char v11 = v5;
  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  DataFrame.init(_:)((uint64_t)&v10);
  uint64_t v10 = v6;
  char v11 = v7;
  DataFrame.init(_:)((uint64_t)&v10);
  *int64_t v4 = v12;
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v4, v8, 1);
}

uint64_t MLClassifierMetrics.error.getter()
{
  uint64_t v1 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  outlined init with copy of MLClassifierMetrics.Contents(v0, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload(v6, v1) == 2) {
    return v6[0];
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v6, type metadata accessor for MLClassifierMetrics.Contents);
  return 0;
}

double MLClassifierMetrics.Contents.accuracy.getter()
{
  v15[0] = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics.Precomputed(0) - 8) + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  char v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = alloca(v9);
  char v11 = alloca(v9);
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v8);
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of MLClassifierMetrics((uint64_t)v15, (uint64_t)v15, type metadata accessor for AnyClassificationMetrics);
    v15[0] = AnyClassificationMetrics.accuracy.getter();
    int64_t v13 = type metadata accessor for AnyClassificationMetrics;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of MLClassifierMetrics((uint64_t)v15, (uint64_t)v15, type metadata accessor for MLClassifierMetrics.Precomputed);
    v15[0] = 1.0 - v15[0];
    int64_t v13 = type metadata accessor for MLClassifierMetrics.Precomputed;
LABEL_5:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v15, v13);
    return v15[0];
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v15, type metadata accessor for MLClassifierMetrics.Contents);
  return 0.0;
}

uint64_t MLClassifierMetrics.confusion.getter(__m128 a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  int64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  *(double *)a1.i64 = MLClassifierMetrics.confusionDataFrame.getter();
  MLDataTable.init(_:convertArraysToShapedArrays:)((uint64_t)&v17, 0, a1);
  MLDataTable.willMutate()();
  v6._uint64_t countAndFlagsBits = 0x6574636964657250;
  v7._uint64_t countAndFlagsBits = 0x6574636964657270;
  v7._char object = (void *)0xEF7373616C635F64;
  v6._char object = (void *)0xE900000000000064;
  MLDataTable.renameImpl(named:to:)(v7, v6);
  if (!v19)
  {
    uint64_t v8 = v18;
    outlined copy of Result<_DataTable, Error>(v18, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v8, 0);
  }
  MLDataTable.willMutate()();
  v9._uint64_t countAndFlagsBits = 0x7373616C63;
  v10._uint64_t countAndFlagsBits = 0x62614C2065757254;
  v10._char object = (void *)0xEA00000000006C65;
  v9._char object = (void *)0xE500000000000000;
  MLDataTable.renameImpl(named:to:)(v9, v10);
  if (!v19)
  {
    uint64_t v11 = v18;
    outlined copy of Result<_DataTable, Error>(v18, 0);
    _DataTable.columnNamesDidChange()();
    outlined consume of Result<_DataTable, Error>(v11, 0);
  }
  MLDataTable.willMutate()();
  v12._uint64_t countAndFlagsBits = 0x746E756F43;
  v13._uint64_t countAndFlagsBits = 0x746E756F63;
  v13._char object = (void *)0xE500000000000000;
  v12._char object = (void *)0xE500000000000000;
  uint64_t result = MLDataTable.renameImpl(named:to:)(v13, v12);
  uint64_t v15 = v18;
  char v16 = v19;
  if (!v19)
  {
    outlined copy of Result<_DataTable, Error>(v18, 0);
    _DataTable.columnNamesDidChange()();
    uint64_t result = outlined consume of Result<_DataTable, Error>(v15, 0);
  }
  *(void *)uint64_t v2 = v15;
  *(unsigned char *)(v2 + 8) = v16;
  return result;
}

uint64_t MLClassifierMetrics.confusionDataFrame.getter()
{
  uint64_t v49 = v1;
  uint64_t v50 = v0;
  uint64_t v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  int64_t v2 = *(void *)(*(void *)(v44 - 8) + 64);
  int64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  unsigned __int8 v43 = &v42;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v47 = *(void *)(v45 - 8);
  int64_t v5 = *(void *)(v47 + 64);
  Swift::String v6 = alloca(v5);
  Swift::String v7 = alloca(v5);
  long long v46 = &v42;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v9 = *(void *)(v8 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  Swift::String v12 = alloca(v10);
  uint64_t v48 = &v42;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  uint64_t v15 = alloca(v14);
  char v16 = alloca(v14);
  uint64_t v52 = &v42;
  int64_t v17 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v51 = &v42;
  uint64_t v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  int64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  outlined init with copy of MLClassifierMetrics.Contents(v49, (uint64_t)&v42);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v42, v20);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v42, type metadata accessor for MLClassifierMetrics.Contents);
      return DataFrame.init()(&v42, type metadata accessor for MLClassifierMetrics.Contents, v38, v39);
    }
    uint64_t v25 = (uint64_t)v43;
    outlined init with take of MLClassifierMetrics((uint64_t)&v42, (uint64_t)v43, type metadata accessor for MLClassifierMetrics.Precomputed);
    uint64_t v26 = v25 + *(int *)(v44 + 20);
    uint64_t v27 = type metadata accessor for DataFrame(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v50, v26, v27);
    uint64_t v28 = v25;
    uint64_t v29 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    uint64_t v49 = v9;
    uint64_t v30 = v46;
    uint64_t v31 = v45;
    uint64_t v32 = (uint64_t)v51;
    outlined init with take of MLClassifierMetrics((uint64_t)&v42, (uint64_t)v51, type metadata accessor for AnyClassificationMetrics);
    uint64_t v33 = v32;
    uint64_t v34 = (uint64_t)v52;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v33, (uint64_t)v52, &demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload(v34, v13) == 1)
    {
      uint64_t v35 = v47;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 32))(v30, v52, v31);
      specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(v30);
      uint64_t v36 = v30;
      uint64_t v37 = v31;
    }
    else
    {
      uint64_t v41 = v48;
      uint64_t v35 = v49;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v49 + 32))(v48, v52, v8);
      specialized static MLClassifierMetrics.makeConfusionDataFrame<A>(_:)(v41);
      uint64_t v36 = v41;
      uint64_t v37 = v8;
    }
    (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v36, v37);
    uint64_t v29 = type metadata accessor for AnyClassificationMetrics;
    uint64_t v28 = (uint64_t)v51;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters(v28, v29);
}

uint64_t specialized Product2Sequence.Iterator.next()()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t result = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 8);
    if (result == v2)
    {
LABEL_10:
      *(void *)(v0 + 48) = 0;
      *(unsigned char *)(v0 + 56) = 1;
      return 0;
    }
    if (v2 < *(void *)v0) {
      BUG();
    }
    if (result < *(void *)v0) {
      BUG();
    }
    if (result >= v2) {
      BUG();
    }
    *(void *)(v0 + 16) = result + 1;
    *(void *)(v0 + 48) = result;
    *(unsigned char *)(v0 + 56) = 0;
  }
  else
  {
    uint64_t result = *(void *)(v0 + 48);
  }
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 32);
  if (v3 == v4)
  {
    uint64_t result = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v0 + 8);
    if (result == v5) {
      goto LABEL_10;
    }
    if (v5 < *(void *)v0) {
      BUG();
    }
    if (result < *(void *)v0) {
      BUG();
    }
    if (result >= v5) {
      BUG();
    }
    *(void *)(v0 + 16) = result + 1;
    *(void *)(v0 + 48) = result;
    *(unsigned char *)(v0 + 56) = 0;
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v7 = *(void *)(v0 + 72);
    *(void *)(v0 + 24) = v3;
    *(void *)(v0 + 32) = v7;
    *(void *)(v0 + 40) = v3;
    if (v3 == v7) {
      return 0;
    }
    if (v3 > v7) {
      BUG();
    }
    if (v3 >= v7) {
      BUG();
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 24);
    if (v4 < v6) {
      BUG();
    }
    if (v3 < v6) {
      BUG();
    }
    if (v3 >= v4) {
      BUG();
    }
  }
  *(void *)(v0 + 40) = v3 + 1;
  return result;
}

uint64_t MLClassifierMetrics.precisionRecall.getter(__m128 a1)
{
  uint64_t v6 = v1;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  *(double *)a1.i64 = MLClassifierMetrics.precisionRecallDataFrame.getter(0);
  return MLDataTable.init(_:convertArraysToShapedArrays:)((uint64_t)&v6, 0, a1);
}

uint64_t MLClassifierMetrics.precisionRecallDataFrame.getter()
{
  uint64_t v47 = v1;
  uint64_t v48 = v0;
  uint64_t v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  int64_t v2 = *(void *)(*(void *)(v42 - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v41 = &v40;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
  uint64_t v45 = *(void *)(v43 - 8);
  int64_t v5 = *(void *)(v45 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v44 = &v40;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  uint64_t v9 = *(void *)(v8 - 8);
  int64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = alloca(v10);
  Swift::String v12 = alloca(v10);
  long long v46 = &v40;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  int64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  uint64_t v15 = alloca(v14);
  char v16 = alloca(v14);
  uint64_t v50 = &v40;
  int64_t v17 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v49 = &v40;
  uint64_t v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
  int64_t v22 = alloca(v21);
  uint64_t v23 = alloca(v21);
  outlined init with copy of MLClassifierMetrics.Contents(v47, (uint64_t)&v40);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v40, v20);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v40, type metadata accessor for MLClassifierMetrics.Contents);
      return DataFrame.init()();
    }
    uint64_t v25 = (uint64_t)v41;
    outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)v41, type metadata accessor for MLClassifierMetrics.Precomputed);
    uint64_t v26 = v25 + *(int *)(v42 + 24);
    uint64_t v27 = type metadata accessor for DataFrame(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v48, v26, v27);
    uint64_t v28 = v25;
    uint64_t v29 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    uint64_t v47 = v9;
    uint64_t v30 = (uint64_t)v44;
    uint64_t v31 = v43;
    uint64_t v32 = (uint64_t)v49;
    outlined init with take of MLClassifierMetrics((uint64_t)&v40, (uint64_t)v49, type metadata accessor for AnyClassificationMetrics);
    uint64_t v33 = v32;
    uint64_t v34 = (uint64_t)v50;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v33, (uint64_t)v50, &demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload(v34, v13) == 1)
    {
      uint64_t v35 = v45;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v45 + 32))(v30, v50, v31);
      specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(v30);
      uint64_t v36 = v30;
      uint64_t v37 = v31;
    }
    else
    {
      uint64_t v39 = (uint64_t)v46;
      uint64_t v35 = v47;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 32))(v46, v50, v8);
      specialized static MLClassifierMetrics.makePrecisionRecallDataFrame<A>(_:)(v39);
      uint64_t v36 = v39;
      uint64_t v37 = v8;
    }
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
    uint64_t v29 = type metadata accessor for AnyClassificationMetrics;
    uint64_t v28 = (uint64_t)v49;
  }
  return outlined destroy of MLActivityClassifier.ModelParameters(v28, v29);
}

void *MLClassifierMetrics.Contents.stringLabels.getter()
{
  v16[0] = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics.Precomputed(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      swift_errorRelease(v16[0]);
      return &_swiftEmptySetSingleton;
    }
    outlined init with take of MLClassifierMetrics((uint64_t)v16, (uint64_t)v16, type metadata accessor for MLClassifierMetrics.Precomputed);
    uint64_t v13 = MLClassifierMetrics.Precomputed.stringLabels.getter();
    int64_t v14 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)v16, (uint64_t)v16, type metadata accessor for AnyClassificationMetrics);
    uint64_t v13 = AnyClassificationMetrics.stringLabels.getter(v16);
    int64_t v14 = type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v16, v14);
  return (void *)v13;
}

uint64_t MLClassifierMetrics.Precomputed.stringLabels.getter()
{
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v81 = *(void *)(v76 - 8);
  int64_t v0 = *(void *)(v81 + 64);
  uint64_t v1 = alloca(v0);
  int64_t v2 = alloca(v0);
  id v83 = v73;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>)
                             - 8)
                 + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v80 = v73;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v87 = *(void *)(v6 - 8);
  int64_t v7 = *(void *)(v87 + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v75 = *(void *)(v82 - 8);
  int64_t v10 = *(void *)(v75 + 64);
  uint64_t v11 = alloca(v10);
  Swift::String v12 = alloca(v10);
  uint64_t v78 = v73;
  uint64_t v84 = type metadata accessor for AnyColumn(0);
  uint64_t v79 = *(void *)(v84 - 8);
  int64_t v13 = *(void *)(v79 + 64);
  int64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  type metadata accessor for MLClassifierMetrics.Precomputed(0);
  DataFrame.subscript.getter(0x7373616C63, 0xE500000000000000);
  uint64_t v16 = AnyColumn.wrappedElementType.getter();
  uint64_t v17 = swift_dynamicCastMetatype(v16, &type metadata for Int);
  uint64_t v85 = v73;
  if (v17)
  {
    double v18 = AnyColumn.assumingType<A>(_:)(&type metadata for Int, &type metadata for Int);
    v74[0] = 0;
    uint64_t v19 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v20 = v78;
    OptionalColumnProtocol.filled(with:)(v74, v6, v19);
    (*(void (**)(void *, uint64_t, double))(v87 + 8))(v73, v6, v18);
    uint64_t v21 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
    uint64_t v22 = v82;
    uint64_t v23 = dispatch thunk of Collection.count.getter(v82, v21);
    uint64_t v24 = v22;
    uint64_t v25 = v20;
    if (v23)
    {
      uint64_t v26 = v23;
      v73[0] = _swiftEmptyArrayStorage;
      int64_t v27 = 0;
      if (v23 > 0) {
        int64_t v27 = v23;
      }
      uint64_t v28 = v22;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
      uint64_t v87 = v73[0];
      id v83 = (void *)v21;
      dispatch thunk of Collection.startIndex.getter(v22, v21);
      if (v26 < 0) {
        BUG();
      }
      uint64_t v29 = v83;
      uint64_t v25 = v78;
      uint64_t v30 = (void *)v87;
      uint64_t v24 = v28;
      do
      {
        uint64_t v87 = v26;
        uint64_t v31 = v25;
        uint64_t v32 = v24;
        uint64_t v33 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v74, &v86, v24, v29);
        uint64_t v35 = *v34;
        v33(v74, 0);
        v74[0] = v35;
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v73[0] = v30;
        uint64_t v38 = v31;
        unint64_t v39 = v30[2];
        unint64_t v40 = v30[3];
        if (v40 >> 1 <= v39)
        {
          uint64_t v80 = (void *)v36;
          uint64_t v81 = v37;
          uint64_t v45 = v38;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 >= 2, v39 + 1, 1);
          uint64_t v37 = v81;
          uint64_t v36 = (uint64_t)v80;
          uint64_t v38 = v45;
          uint64_t v30 = (void *)v73[0];
        }
        void v30[2] = v39 + 1;
        uint64_t v41 = 2 * v39;
        v30[v41 + 4] = v36;
        v30[v41 + 5] = v37;
        uint64_t v42 = v38;
        uint64_t v43 = v32;
        uint64_t v44 = v83;
        dispatch thunk of Collection.formIndex(after:)(&v86, v43, v83);
        uint64_t v26 = v87 - 1;
        uint64_t v24 = v82;
        uint64_t v25 = v42;
        uint64_t v29 = v44;
      }
      while (v87 != 1);
    }
    else
    {
      uint64_t v30 = _swiftEmptyArrayStorage;
    }
    (*(void (**)(void *, uint64_t))(v75 + 8))(v25, v24);
    uint64_t v52 = specialized Set.init<A>(_:)((uint64_t)v30);
    uint64_t v53 = v85;
    goto LABEL_15;
  }
  long long v46 = v83;
  if (swift_dynamicCastMetatype(v16, &type metadata for String))
  {
    uint64_t v47 = v46;
    uint64_t v48 = v85;
    double v49 = AnyColumn.assumingType<A>(_:)(&type metadata for String, &type metadata for String);
    v74[0] = 0;
    v74[1] = 0xE000000000000000;
    uint64_t v50 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
    uint64_t v51 = v76;
    OptionalColumnProtocol.filled(with:)(v74, v76, v50);
    (*(void (**)(void *, uint64_t, double))(v81 + 8))(v47, v51, v49);
    uint64_t v52 = specialized Set.init<A>(_:)();
    uint64_t v53 = v48;
LABEL_15:
    uint64_t v54 = v84;
    goto LABEL_16;
  }
  uint64_t v56 = lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn();
  uint64_t v57 = v85;
  uint64_t v58 = v84;
  uint64_t v59 = dispatch thunk of Collection.count.getter(v84, v56);
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v86 = _swiftEmptyArrayStorage;
    int64_t v61 = 0;
    if (v59 > 0) {
      int64_t v61 = v59;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
    uint64_t v87 = v56;
    dispatch thunk of Collection.startIndex.getter(v58, v56);
    uint64_t v82 = v60;
    if (v60 < 0) {
      BUG();
    }
    uint64_t v62 = v87;
    do
    {
      uint64_t v63 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read(v74, v77, v58, v62);
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v64, (uint64_t)v73, &demangling cache variable for type metadata for Any?);
      v63(v74, 0);
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for Any?);
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      uint64_t v66 = String.init<A>(describing:)(v74, v65);
      uint64_t v68 = v67;
      outlined destroy of Any?((uint64_t)v73);
      Swift::String v69 = v86;
      if (!swift_isUniquelyReferenced_nonNull_native(v86))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1);
        Swift::String v69 = v86;
      }
      unint64_t v70 = v69[2];
      if (v69[3] >> 1 <= v70)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69[3] >= 2uLL, v70 + 1, 1);
        Swift::String v69 = v86;
      }
      v69[2] = v70 + 1;
      uint64_t v71 = 2 * v70;
      v69[v71 + 4] = v66;
      v69[v71 + 5] = v68;
      Swift::String v72 = v85;
      uint64_t v58 = v84;
      uint64_t v62 = v87;
      dispatch thunk of Collection.formIndex(after:)(v77, v84, v87);
      uint64_t v57 = v72;
      --v82;
    }
    while (v82);
  }
  else
  {
    Swift::String v69 = _swiftEmptyArrayStorage;
  }
  uint64_t v52 = specialized Set.init<A>(_:)((uint64_t)v69);
  uint64_t v53 = v57;
  uint64_t v54 = v58;
LABEL_16:
  (*(void (**)(void *, uint64_t))(v79 + 8))(v53, v54);
  return v52;
}

uint64_t MLClassifierMetrics.Contents.labelCount.getter()
{
  v17[0] = v0;
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics.Precomputed(0) - 8) + 64);
  int64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  int64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  outlined init with copy of MLClassifierMetrics.Contents(v1, (uint64_t)v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      swift_errorRelease(v17[0]);
      return 0;
    }
    outlined init with take of MLClassifierMetrics((uint64_t)v17, (uint64_t)v17, type metadata accessor for MLClassifierMetrics.Precomputed);
    uint64_t v13 = MLClassifierMetrics.Precomputed.stringLabels.getter();
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    uint64_t v15 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)v17, (uint64_t)v17, type metadata accessor for AnyClassificationMetrics);
    uint64_t v14 = AnyClassificationMetrics.labelCount.getter(v17);
    uint64_t v15 = type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v17, v15);
  return v14;
}

uint64_t MLClassifierMetrics.Contents.exampleCount.getter()
{
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v23 = *(void *)(v24 - 8);
  int64_t v1 = *(void *)(v23 + 64);
  int64_t v2 = alloca(v1);
  int64_t v3 = alloca(v1);
  uint64_t v25 = &v22;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics.Precomputed(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  uint64_t v26 = &v22;
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  int64_t v9 = alloca(v7);
  uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  Swift::String v12 = alloca(v11);
  uint64_t v13 = alloca(v11);
  outlined init with copy of MLClassifierMetrics.Contents(v0, (uint64_t)&v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v22, v10);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v22, type metadata accessor for MLClassifierMetrics.Contents);
      return 0;
    }
    uint64_t v15 = (uint64_t)v26;
    outlined init with take of MLClassifierMetrics((uint64_t)&v22, (uint64_t)v26, type metadata accessor for MLClassifierMetrics.Precomputed);
    uint64_t v16 = v25;
    DataFrame.subscript.getter(0x746E756F63, 0xE500000000000000, &type metadata for Int);
    uint64_t v17 = v24;
    Column<A>.sum()(v24, &protocol witness table for Int);
    (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(v16, v17);
    uint64_t v18 = v22;
    uint64_t v19 = (uint64_t *)v15;
    uint64_t v20 = type metadata accessor for MLClassifierMetrics.Precomputed;
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v22, (uint64_t)&v22, type metadata accessor for AnyClassificationMetrics);
    uint64_t v18 = AnyClassificationMetrics.exampleCount.getter();
    uint64_t v19 = &v22;
    uint64_t v20 = type metadata accessor for AnyClassificationMetrics;
  }
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v19, v20);
  return v18;
}

unint64_t MLClassifierMetrics.accuracyDescription.getter()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0);
  MLClassifierMetrics.Contents.exampleCount.getter();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char object = (char)v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0);
  MLClassifierMetrics.Contents.labelCount.getter();
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  char v4 = (char)v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v2._uint64_t countAndFlagsBits = 10;
  v2._char object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v2._uint64_t countAndFlagsBits = 0xD000000000000013;
  v2._char object = "Number of examples: " + 0x8000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(("Number of examples: " + 0x8000000000000000));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject(v5, 72, 7);
  *(void *)(v6 + 16) = 1;
  *(void *)(v6 + 24) = 2;
  double v7 = MLClassifierMetrics.Contents.accuracy.getter();
  *(void *)(v6 + 56) = &type metadata for Double;
  *(void *)(v6 + 64) = &protocol witness table for Double;
  *(double *)(v6 + 32) = v7 * 100.0;
  v8._uint64_t countAndFlagsBits = String.init(format:_:)(0xD000000000000011, "Number of classes: " + 0x8000000000000000, v6);
  LOBYTE(v6) = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v6);
  return 0xD000000000000014;
}

void *MLClassifierMetrics.Contents.confusionMatrixDescription.getter()
{
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v80 = *(void *)(v84 - 8);
  int64_t v0 = *(void *)(v80 + 64);
  int64_t v1 = alloca(v0);
  Swift::String v2 = alloca(v0);
  Swift::String v3 = MLClassifierMetrics.Contents.stringLabels.getter();
  swift_bridgeObjectRetain((_BYTE)v3);
  char v4 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v3);
  swift_bridgeObjectRelease((_BYTE)v3);
  v92[0] = v4;
  specialized MutableCollection<>.sort(by:)(v92);
  swift_bridgeObjectRelease((_BYTE)v3);
  uint64_t v5 = v92[0];
  MLClassifierMetrics.Contents.confusionMatrix(labels:)(v92[0]);
  id v83 = v5;
  ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_Sis5NeverOTg5169_s8CreateML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n((uint64_t)v5);
  uint64_t v7 = specialized Sequence<>.max()((uint64_t)ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
  char v9 = v8;
  swift_bridgeObjectRelease((_BYTE)ML19MLClassifierMetricsV8ContentsO26confusionMatrixDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
  uint64_t v10 = 0;
  if ((v9 & 1) == 0) {
    uint64_t v10 = v7;
  }
  uint64_t v91 = v10;
  uint64_t v75 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
  uint64_t v78 = &v74;
  uint64_t v11 = MLShapedArrayProtocol.scalars.getter(v84, v75);
  uint64_t v12 = v11;
  int64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    v92[0] = _swiftEmptyArrayStorage;
    uint64_t v14 = 0;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    uint64_t v15 = v92[0];
    uint64_t v82 = v12;
    uint64_t v87 = v13;
    do
    {
      __m128i v16 = _mm_cvtsi32_si128(*(_DWORD *)(v12 + 4 * v14 + 32));
      if ((~_mm_cvtsi128_si32(v16) & 0x7F800000) == 0) {
        BUG();
      }
      if (*(float *)v16.i32 <= -9.2233731e18) {
        BUG();
      }
      if (*(float *)v16.i32 >= 9.223372e18) {
        BUG();
      }
      v90._uint64_t countAndFlagsBits = (int)*(float *)v16.i32;
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      char v19 = v18;
      uint64_t v20 = String.count.getter(v17, v18);
      swift_bridgeObjectRelease(v19);
      v92[0] = v15;
      unint64_t v21 = v15[2];
      if (v15[3] >> 1 <= v21)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15[3] >= 2uLL, v21 + 1, 1);
        uint64_t v15 = v92[0];
      }
      ++v14;
      v15[2] = v21 + 1;
      v15[v21 + 4] = v20;
      uint64_t v12 = v82;
    }
    while (v87 != v14);
    swift_bridgeObjectRelease(v82);
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v22 = specialized Sequence<>.max()((uint64_t)v15);
  char v24 = v23;
  swift_bridgeObjectRelease((_BYTE)v15);
  if (v24)
  {
    uint64_t v22 = 0;
    if (v91 > 0) {
      uint64_t v22 = v91;
    }
  }
  else if (v22 <= v91)
  {
    uint64_t v22 = v91;
  }
  BOOL v25 = __OFADD__(1, v22);
  uint64_t v26 = v22 + 1;
  if (v25) {
    BUG();
  }
  uint64_t v27 = String.count.getter(0x6572505C65757254, 0xE900000000000064);
  uint64_t v28 = v91;
  if (v27 > v91) {
    uint64_t v28 = v27;
  }
  uint64_t v91 = v28 + 1;
  if (__OFADD__(1, v28)) {
    BUG();
  }
  uint64_t v82 = v26;
  uint64_t v29 = (uint64_t)v83;
  uint64_t v30 = specialized Collection.prefix(_:)(20, (uint64_t)v83);
  uint64_t v79 = v31;
  uint64_t v88 = v32;
  unint64_t v89 = v33;
  v92[0] = (void *)0xD00000000000001ELL;
  v92[1] = "%@ %-15.2f %-15.2f\n" + 0x8000000000000000;
  BOOL v34 = *(void *)(v29 + 16) < 0x15uLL;
  uint64_t v81 = v30;
  if (!v34)
  {
    v90._uint64_t countAndFlagsBits = 0;
    v90._char object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v90._object);
    v90._uint64_t countAndFlagsBits = 0xD000000000000010;
    v90._char object = "\n******CONFUSION MATRIX******\n" + 0x8000000000000000;
    uint64_t v85 = 20;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char object = (char)v35._object;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(object);
    v37._char object = (void *)0xE400000000000000;
    v37._uint64_t countAndFlagsBits = 762929709;
    String.append(_:)(v37);
    uint64_t v85 = 20;
    v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    char v39 = (char)v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v39);
    v37._uint64_t countAndFlagsBits = 0xA2A2A2A2A2029;
    v37._char object = (void *)0xE700000000000000;
    String.append(_:)(v37);
    char v40 = (char)v90._object;
    uint64_t v30 = v81;
    String.append(_:)(v90);
    swift_bridgeObjectRelease(v40);
  }
  v41._char object = "Empty ArraySlice" + 0x8000000000000000;
  v41._uint64_t countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v41);
  v90._uint64_t countAndFlagsBits = 0x6572505C65757254;
  v90._char object = (void *)0xE900000000000064;
  uint64_t v85 = 32;
  unint64_t v86 = 0xE100000000000000;
  uint64_t v87 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v42 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v91, &v85, 0, &type metadata for String, &type metadata for String, v87, v87);
  char v44 = (char)v43;
  v41._uint64_t countAndFlagsBits = v42;
  v41._char object = v43;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v44);
  int64_t v45 = v89 >> 1;
  uint64_t v46 = v88;
  unint64_t v89 = v45;
  if (v88 == v45)
  {
    v47._uint64_t countAndFlagsBits = 10;
    v47._char object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    uint64_t v48 = v84;
  }
  else
  {
    if (v88 >= v45) {
      BUG();
    }
    swift_unknownObjectRetain(v30);
    uint64_t v49 = 16 * v46 + v79 + 8;
    unint64_t v50 = v89;
    uint64_t v51 = v87;
    do
    {
      Swift::String v90 = *(Swift::String *)(v49 - 8);
      uint64_t v85 = 32;
      unint64_t v86 = 0xE100000000000000;
      v52._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v82, &v85, 0, &type metadata for String, &type metadata for String, v51, v51);
      char v53 = (char)v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v53);
      --v50;
      v49 += 16;
    }
    while (v88 != v50);
    uint64_t v54 = v81;
    swift_unknownObjectRelease(v81);
    v55._uint64_t countAndFlagsBits = 10;
    v55._char object = (void *)0xE100000000000000;
    String.append(_:)(v55);
    uint64_t v56 = v88;
    id v83 = (void *)(v89 - v88);
    if (__OFSUB__(v89, v88)) {
      BUG();
    }
    if ((uint64_t)(v89 - v88) < 0) {
      BUG();
    }
    swift_unknownObjectRetain(v54);
    uint64_t v57 = 1;
    uint64_t v77 = 0;
    uint64_t v48 = v84;
    do
    {
      uint64_t v76 = v57;
      uint64_t v88 = v56;
      Swift::String v90 = *(Swift::String *)(v79 + 16 * v56);
      uint64_t v85 = 32;
      unint64_t v86 = 0xE100000000000000;
      v58._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v91, &v85, 0, &type metadata for String, &type metadata for String, v87, v87);
      char v59 = (char)v58._object;
      String.append(_:)(v58);
      swift_bridgeObjectRelease(v59);
      if (v83)
      {
        uint64_t v60 = 0;
        do
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v62 = (void *)swift_allocObject(v61, 48, 7);
          char v63 = (char)v62;
          v62[2] = 2;
          v62[3] = 4;
          v62[4] = v77;
          v62[5] = v60;
          MLShapedArrayProtocol.subscript.getter(v62, v48, v75);
          swift_bridgeObjectRelease(v63);
          __m128i v64 = _mm_cvtsi32_si128(v90._countAndFlagsBits);
          if ((~_mm_cvtsi128_si32(v64) & 0x7F800000) == 0) {
            BUG();
          }
          if (*(float *)v64.i32 <= -9.2233731e18) {
            BUG();
          }
          if (*(float *)v64.i32 >= 9.223372e18) {
            BUG();
          }
          uint64_t v60 = (void *)((char *)v60 + 1);
          v90._uint64_t countAndFlagsBits = (int)*(float *)v64.i32;
          v65._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          char v66 = (char)v65._object;
          Swift::String v90 = v65;
          uint64_t v85 = 32;
          unint64_t v86 = 0xE100000000000000;
          uint64_t v67 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v82, &v85, 0, &type metadata for String, &type metadata for String, v87, v87);
          Swift::String v69 = v68;
          swift_bridgeObjectRelease(v66);
          v70._uint64_t countAndFlagsBits = v67;
          v70._char object = v69;
          String.append(_:)(v70);
          LOBYTE(v70._countAndFlagsBits) = (_BYTE)v69;
          uint64_t v48 = v84;
          swift_bridgeObjectRelease(v70._countAndFlagsBits);
        }
        while (v83 != v60);
      }
      v71._uint64_t countAndFlagsBits = 10;
      v71._char object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      uint64_t v57 = v76 + 1;
      if (__OFADD__(1, v76)) {
        BUG();
      }
      uint64_t v56 = v88 + 1;
      uint64_t v77 = v76;
    }
    while (v88 + 1 != v89);
    uint64_t v30 = v81;
    swift_unknownObjectRelease(v81);
  }
  uint64_t v72 = v80;
  swift_unknownObjectRelease(v30);
  (*(void (**)(uint64_t *, uint64_t))(v72 + 8))(v78, v48);
  return v92[0];
}

unint64_t MLClassifierMetrics.precisionRecallDescription.getter()
{
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v58 = *(void *)(v63 - 8);
  int64_t v0 = *(void *)(v58 + 64);
  int64_t v1 = alloca(v0);
  Swift::String v2 = alloca(v0);
  Swift::String v65 = &v48;
  Swift::String v3 = alloca(v0);
  char v4 = alloca(v0);
  __m128i v64 = &v48;
  uint64_t v72 = type metadata accessor for AnyColumn(0);
  uint64_t v66 = *(void *)(v72 - 8);
  int64_t v5 = *(void *)(v66 + 64);
  uint64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v67 = (char *)&v48;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v59 = *(void *)(v62 - 8);
  int64_t v8 = *(void *)(v59 + 64);
  char v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  Swift::String v71 = &v48;
  uint64_t v11 = type metadata accessor for DataFrame(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  MLClassifierMetrics.precisionRecallDataFrame.getter();
  uint64_t v68 = &v48;
  if (DataFrameProtocol.isEmpty.getter(v11, &protocol witness table for DataFrame))
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v68, v11);
    return 0;
  }
  else
  {
    uint64_t v61 = v12;
    uint64_t v60 = v11;
    uint64_t v17 = MLClassifierMetrics.Contents.stringLabels.getter();
    char v18 = (char)v17;
    ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySSG_Sis5NeverOTg5159_s8CreateML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n((uint64_t)v17);
    swift_bridgeObjectRelease(v18);
    uint64_t v20 = specialized Sequence<>.max()((uint64_t)ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
    char v22 = v21;
    swift_bridgeObjectRelease((_BYTE)ML19MLClassifierMetricsV26precisionRecallDescription33_21E6E2EACFD6F93017C79EF6BCC906FCLLSSvgSiSScfu_33_1a2cfc70c67f85f4b89db78a8cf64951SSSiTf3nnnpk_nTf1cn_n);
    if (v22) {
      uint64_t v20 = 0;
    }
    unint64_t v50 = 0xD000000000000041;
    uint64_t v51 = "ifierMetrics.swift" + 0x8000000000000000;
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v23 = swift_allocObject(v54, 152, 7);
    *(void *)(v23 + 16) = 3;
    *(void *)(v23 + 24) = 6;
    uint64_t v69 = 0x7373616C43;
    unint64_t v70 = 0xE500000000000000;
    uint64_t v52 = 32;
    unint64_t v53 = 0xE100000000000000;
    uint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v55 = v20;
    uint64_t v56 = v24;
    uint64_t v25 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v20, &v52, 0, &type metadata for String, &type metadata for String, v24, v24);
    uint64_t v27 = v26;
    *(void *)(v23 + 56) = &type metadata for String;
    uint64_t v28 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v23 + 64) = v28;
    *(void *)(v23 + 32) = v25;
    *(void *)(v23 + 40) = v27;
    *(void *)(v23 + 96) = &type metadata for String;
    *(void *)(v23 + 104) = v28;
    strcpy((char *)(v23 + 72), "Precision(%)");
    *(unsigned char *)(v23 + 85) = 0;
    *(_WORD *)(v23 + 86) = -5120;
    *(void *)(v23 + 136) = &type metadata for String;
    uint64_t v57 = v28;
    *(void *)(v23 + 144) = v28;
    *(void *)(v23 + 112) = 0x25286C6C61636552;
    *(void *)(v23 + 120) = 0xE900000000000029;
    v29._uint64_t countAndFlagsBits = String.init(format:_:)(0x4035312D25204025, 0xEF0A4035312D2520, v23);
    LOBYTE(v23) = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v23);
    uint64_t v30 = v67;
    DataFrame.subscript.getter(0x7373616C63, 0xE500000000000000);
    AnyColumn.convertedToStrings()();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v30, v72);
    DataFrame.subscript.getter(0x6F69736963657270, 0xE90000000000006ELL, &type metadata for Double);
    DataFrame.subscript.getter(0x6C6C61636572, 0xE600000000000000, &type metadata for Double);
    uint64_t v31 = v62;
    uint64_t v32 = Column.count.getter(v62);
    if (v32 < 0) {
      BUG();
    }
    if (v32)
    {
      uint64_t v72 = 0;
      uint64_t v67 = "----------------\n" + 0x8000000000000000;
      uint64_t v66 = v32;
      do
      {
        if (v32 == v72) {
          BUG();
        }
        uint64_t v33 = swift_allocObject(v54, 152, 7);
        *(void *)(v33 + 16) = 3;
        *(void *)(v33 + 24) = 6;
        Column.subscript.getter(v72, v31);
        char v34 = v70;
        if (!v70) {
          BUG();
        }
        uint64_t v52 = v69;
        unint64_t v53 = v70;
        v49[0] = 32;
        v49[1] = 0xE100000000000000;
        uint64_t v35 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v55, v49, 0, &type metadata for String, &type metadata for String, v56, v56);
        uint64_t v37 = v36;
        swift_bridgeObjectRelease(v34);
        *(void *)(v33 + 56) = &type metadata for String;
        *(void *)(v33 + 64) = v57;
        *(void *)(v33 + 32) = v35;
        *(void *)(v33 + 40) = v37;
        uint64_t v38 = v63;
        Column.subscript.getter(v72, v63);
        if ((_BYTE)v70) {
          BUG();
        }
        double v39 = *(double *)&v69 * 100.0;
        *(void *)(v33 + 96) = &type metadata for Double;
        *(void *)(v33 + 104) = &protocol witness table for Double;
        *(double *)(v33 + 72) = v39;
        Column.subscript.getter(v72, v38);
        if ((_BYTE)v70) {
          BUG();
        }
        uint64_t v40 = v72 + 1;
        double v41 = *(double *)&v69 * 100.0;
        *(void *)(v33 + 136) = &type metadata for Double;
        *(void *)(v33 + 144) = &protocol witness table for Double;
        *(double *)(v33 + 112) = v41;
        v42._uint64_t countAndFlagsBits = String.init(format:_:)(0xD000000000000013, v67, v33);
        char object = (char)v42._object;
        String.append(_:)(v42);
        swift_bridgeObjectRelease(object);
        uint64_t v32 = v66;
        uint64_t v72 = v40;
        uint64_t v31 = v62;
      }
      while (v66 != v40);
    }
    v44._uint64_t countAndFlagsBits = 10;
    v44._char object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    uint64_t v45 = v31;
    uint64_t v46 = *(void (**)(uint64_t *, uint64_t))(v58 + 8);
    uint64_t v47 = v63;
    v46(v65, v63);
    v46(v64, v47);
    (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v71, v45);
    (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(v68, v60);
    return v50;
  }
}

uint64_t MLClassifierMetrics.playgroundDescription.getter()
{
  int64_t v1 = v0;
  unint64_t v2 = MLClassifierMetrics.accuracyDescription.getter();
  char v4 = v3;
  objc_allocWithZone((Class)NSAttributedString);
  id v5 = @nonobjc NSAttributedString.init(string:attributes:)(v2, v4, 0);
  uint64_t result = type metadata accessor for NSAttributedString();
  v1[3] = result;
  *int64_t v1 = v5;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLClassifierMetrics()
{
  return MLClassifierMetrics.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLClassifierMetrics()
{
  return MLClassifierMetrics.debugDescription.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLClassifierMetrics()
{
  return MLClassifierMetrics.playgroundDescription.getter();
}

uint64_t MLClassifierMetrics.Contents.confusionMatrix(labels:)(void *a1)
{
  uint64_t v162 = v2;
  uint64_t v157 = a1;
  uint64_t v3 = v1;
  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v155 = *(void *)(v137 - 8);
  int64_t v4 = *(void *)(v155 + 64);
  id v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  char v130 = &v126;
  uint64_t v7 = alloca(v4);
  int64_t v8 = alloca(v4);
  uint64_t v142 = &v126;
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  uint64_t v138 = *(void *)(v147 - 8);
  int64_t v9 = *(void *)(v138 + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v131 = &v126;
  uint64_t v12 = alloca(v9);
  int64_t v13 = alloca(v9);
  uint64_t v151 = &v126;
  uint64_t v164 = type metadata accessor for AnyColumn(0);
  uint64_t v156 = *(void *)(v164 - 8);
  int64_t v14 = *(void *)(v156 + 64);
  uint64_t v15 = alloca(v14);
  __m128i v16 = alloca(v14);
  uint64_t v150 = &v126;
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  uint64_t v163 = *(void (**)(uint64_t *, uint64_t))(v141 - 8);
  int64_t v17 = *((void *)v163 + 8);
  char v18 = alloca(v17);
  char v19 = alloca(v17);
  uint64_t v129 = &v126;
  uint64_t v20 = alloca(v17);
  char v21 = alloca(v17);
  unint64_t v127 = &v126;
  char v22 = alloca(v17);
  uint64_t v23 = alloca(v17);
  uint64_t v143 = &v126;
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  uint64_t v161 = *(void *)(v153 - 8);
  int64_t v24 = *(void *)(v161 + 64);
  uint64_t v25 = alloca(v24);
  uint64_t v26 = alloca(v24);
  uint64_t v144 = &v126;
  uint64_t v27 = alloca(v24);
  uint64_t v28 = alloca(v24);
  uint64_t v128 = &v126;
  Swift::String v29 = alloca(v24);
  uint64_t v30 = alloca(v24);
  uint64_t v146 = &v126;
  uint64_t v31 = alloca(v24);
  uint64_t v32 = alloca(v24);
  uint64_t v149 = &v126;
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  uint64_t v135 = *(void *)(v152 - 8);
  int64_t v33 = *(void *)(v135 + 64);
  char v34 = alloca(v33);
  uint64_t v35 = alloca(v33);
  uint64_t v148 = &v126;
  uint64_t v36 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  int64_t v37 = *(void *)(*(void *)(v36 - 8) + 64);
  uint64_t v38 = alloca(v37);
  double v39 = alloca(v37);
  uint64_t v139 = &v126;
  int64_t v40 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  double v41 = alloca(v40);
  Swift::String v42 = alloca(v40);
  uint64_t v43 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
  uint64_t v45 = alloca(v44);
  uint64_t v46 = alloca(v44);
  outlined init with copy of MLClassifierMetrics.Contents(v162, (uint64_t)&v126);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(&v126, v43);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v136 = v3;
      uint64_t v48 = (uint64_t)v139;
      outlined init with take of MLClassifierMetrics((uint64_t)&v126, (uint64_t)v139, type metadata accessor for MLClassifierMetrics.Precomputed);
      LODWORD(v159) = 0;
      uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v49 = (void *)swift_allocObject(v132, 48, 7);
      void v49[2] = 2;
      v49[3] = 4;
      unint64_t v50 = v157[2];
      v49[4] = v50;
      unint64_t v154 = v50;
      v49[5] = v50;
      uint64_t v133 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
      MLShapedArrayProtocol.init(repeating:shape:)(&v159, v49, v152, v133);
      uint64_t v162 = v48 + *(int *)(v36 + 20);
      uint64_t v51 = v150;
      DataFrame.subscript.getter(0x7373616C63, 0xE500000000000000);
      uint64_t v52 = v143;
      AnyColumn.convertedToStrings()();
      uint64_t v156 = *(void *)(v156 + 8);
      ((void (*)(uint64_t *, uint64_t))v156)(v51, v164);
      uint64_t v159 = 0;
      unint64_t v160 = 0xE000000000000000;
      uint64_t v145 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v53 = v141;
      OptionalColumnProtocol.filled(with:)(&v159, v141, v145);
      uint64_t v54 = (void (*)(uint64_t *, uint64_t))*((void *)v163 + 1);
      v54(v52, v53);
      DataFrame.subscript.getter(0x6574636964657270, 0xEF7373616C635F64);
      AnyColumn.convertedToStrings()();
      ((void (*)(uint64_t *, uint64_t))v156)(v51, v164);
      uint64_t v159 = 0;
      unint64_t v160 = 0xE000000000000000;
      OptionalColumnProtocol.filled(with:)(&v159, v53, v145);
      uint64_t v150 = (uint64_t *)v54;
      v54(v52, v53);
      uint64_t v55 = v142;
      DataFrame.subscript.getter(0x746E756F63, 0xE500000000000000, &type metadata for Int);
      uint64_t v159 = 0;
      uint64_t v56 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
      uint64_t v57 = v137;
      OptionalColumnProtocol.filled(with:)(&v159, v137, v56);
      uint64_t v134 = *(void (**)(uint64_t *, uint64_t))(v155 + 8);
      v134(v55, v57);
      uint64_t v58 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<Column<Int>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Int>>, (uint64_t)&protocol conformance descriptor for FilledColumn<A>);
      uint64_t v59 = v147;
      dispatch thunk of Collection.startIndex.getter(v147, v58);
      dispatch thunk of Collection.endIndex.getter(v59, v58);
      uint64_t v60 = dispatch thunk of Collection.distance(from:to:)(&v159, &v158, v59, v58);
      if (v60 < 0) {
        BUG();
      }
      uint64_t v61 = v153;
      uint64_t v62 = v161;
      if (v60)
      {
        uint64_t v63 = v60;
        uint64_t v140 = v157 + 9;
        uint64_t v64 = 0;
        uint64_t v156 = v63;
        while (1)
        {
          if (v64 == v63) {
            BUG();
          }
          uint64_t v162 = v64;
          uint64_t v158 = v64;
          Swift::String v65 = v127;
          FilledColumn.base.getter(v61);
          uint64_t v66 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, (uint64_t)&protocol conformance descriptor for Column<A>);
          uint64_t v67 = v141;
          uint64_t v155 = v66;
          uint64_t v68 = (void (*)(uint64_t **, void))dispatch thunk of Collection.subscript.read(&v159, &v158, v141, v66);
          uint64_t v164 = *v69;
          uint64_t v70 = v69[1];
          swift_bridgeObjectRetain(v70);
          v68(&v159, 0);
          Swift::String v71 = v128;
          uint64_t v72 = v65;
          uint64_t v62 = v161;
          uint64_t v73 = v67;
          uint64_t v61 = v153;
          ((void (*)(uint64_t *, uint64_t))v150)(v72, v73);
          uint64_t v142 = *(uint64_t **)(v62 + 16);
          ((void (*)(uint64_t *, uint64_t *, uint64_t))v142)(v71, v149, v61);
          if (v70)
          {
            unint64_t v74 = v70;
            uint64_t v75 = *(void (**)(uint64_t *, uint64_t))(v62 + 8);
            uint64_t v76 = v71;
            unint64_t v77 = v74;
            v75(v76, v61);
            unint64_t v78 = v77;
            uint64_t v79 = (uint64_t *)v164;
          }
          else
          {
            FilledColumn.defaultValue.getter(v61);
            uint64_t v75 = *(void (**)(uint64_t *, uint64_t))(v62 + 8);
            v75(v71, v61);
            uint64_t v79 = v159;
            unint64_t v78 = v160;
          }
          if (!v154) {
            break;
          }
          uint64_t v80 = v157[5];
          uint64_t v143 = (uint64_t *)v157[4];
          if (v143 == v79 && v80 == v78)
          {
            uint64_t v81 = 0;
          }
          else
          {
            uint64_t v164 = (uint64_t)v79;
            uint64_t v163 = (void (*)(uint64_t *, uint64_t))v78;
            if (_stringCompareWithSmolCheck(_:_:expecting:)(v143, v80, v79, v78, 0))
            {
              uint64_t v81 = 0;
              LOBYTE(v78) = (_BYTE)v163;
            }
            else
            {
              if (v154 == 1)
              {
                char v82 = (char)v163;
                goto LABEL_15;
              }
              uint64_t v83 = v157[6];
              uint64_t v84 = (void (*)(uint64_t *, uint64_t))v157[7];
              LOBYTE(v78) = (_BYTE)v163;
              if (v83 != v164 || (uint64_t v81 = 1, v84 != v163))
              {
                char v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, v164, v163, 0);
                unint64_t v78 = (unint64_t)v163;
                uint64_t v81 = 1;
                if ((v85 & 1) == 0)
                {
                  unint64_t v86 = v140;
                  uint64_t v87 = 2;
                  while (v154 != v87)
                  {
                    uint64_t v81 = v87;
                    uint64_t v88 = *(v86 - 1);
                    uint64_t v89 = *v86;
                    if (v88 != v164 || v89 != v78)
                    {
                      char v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v164, v78, 0);
                      unint64_t v78 = (unint64_t)v163;
                      uint64_t v87 = v81 + 1;
                      v86 += 2;
                      if ((v90 & 1) == 0) {
                        continue;
                      }
                    }
                    goto LABEL_28;
                  }
                  char v122 = v78;
LABEL_57:
                  swift_bridgeObjectRelease(v122);
                  uint64_t v62 = v161;
                  goto LABEL_40;
                }
              }
            }
          }
LABEL_28:
          uint64_t v163 = v75;
          uint64_t v164 = v80;
          uint64_t v145 = v81;
          swift_bridgeObjectRelease(v78);
          uint64_t v158 = v162;
          uint64_t v91 = v129;
          uint64_t v92 = v146;
          FilledColumn.base.getter(v61);
          uint64_t v93 = v141;
          uint64_t v94 = (void (*)(uint64_t **, void))dispatch thunk of Collection.subscript.read(&v159, &v158, v141, v155);
          uint64_t v155 = *v95;
          unint64_t v96 = v95[1];
          swift_bridgeObjectRetain(v96);
          v94(&v159, 0);
          uint64_t v97 = v93;
          uint64_t v61 = v153;
          ((void (*)(uint64_t *, uint64_t))v150)(v91, v97);
          uint64_t v98 = v144;
          ((void (*)(uint64_t *, uint64_t *, uint64_t))v142)(v144, v92, v61);
          if (v96)
          {
            v163(v98, v61);
            uint64_t v99 = v164;
            uint64_t v100 = (uint64_t *)v155;
          }
          else
          {
            FilledColumn.defaultValue.getter(v61);
            v163(v144, v61);
            uint64_t v100 = v159;
            unint64_t v96 = v160;
            uint64_t v99 = v164;
          }
          if (v143 == v100 && v99 == v96) {
            goto LABEL_35;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)(v143, v99, v100, v96, 0))
          {
            LOBYTE(v99) = v96;
LABEL_35:
            uint64_t v101 = 0;
LABEL_36:
            swift_bridgeObjectRelease(v99);
            uint64_t v102 = (void *)swift_allocObject(v132, 48, 7);
            v102[2] = 2;
            v102[3] = 4;
            v102[4] = v145;
            v102[5] = v101;
            uint64_t v158 = v162;
            uint64_t v103 = v130;
            uint64_t v104 = v147;
            FilledColumn.base.getter(v147);
            uint64_t v105 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, (uint64_t)&protocol conformance descriptor for Column<A>);
            uint64_t v106 = v137;
            uint64_t v107 = (void (*)(uint64_t **, void))dispatch thunk of Collection.subscript.read(&v159, &v158, v137, v105);
            uint64_t v164 = *(void *)v108;
            char v109 = *(unsigned char *)(v108 + 8);
            v107(&v159, 0);
            uint64_t v110 = v103;
            uint64_t v111 = v104;
            v134(v110, v106);
            unsigned int v112 = v131;
            uint64_t v113 = v138;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v138 + 16))(v131, v151, v111);
            if (v109)
            {
              FilledColumn.defaultValue.getter(v111);
              (*(void (**)(uint64_t *, uint64_t))(v113 + 8))(v112, v111);
              int v114 = (int)v159;
              uint64_t v61 = v153;
              uint64_t v62 = v161;
            }
            else
            {
              (*(void (**)(uint64_t *, uint64_t))(v113 + 8))(v112, v111);
              uint64_t v61 = v153;
              uint64_t v62 = v161;
              int v114 = v164;
            }
            *(float *)&uint64_t v159 = (float)v114;
            MLShapedArrayProtocol.subscript.setter(&v159, v102, v152, v133);
            goto LABEL_40;
          }
          if (v154 != 1)
          {
            uint64_t v115 = (uint64_t *)v157[6];
            uint64_t v116 = v157[7];
            if (v115 == v100 && v116 == v96
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v115, v116, v100, v96, 0) & 1) != 0)
            {
              LOBYTE(v99) = v96;
              uint64_t v101 = 1;
              goto LABEL_36;
            }
            uint64_t v117 = v140;
            unint64_t v118 = 2;
            while (v154 != v118)
            {
              if (v154 <= v118) {
                BUG();
              }
              uint64_t v101 = v118;
              uint64_t v119 = (uint64_t *)*(v117 - 1);
              uint64_t v120 = *v117;
              if (v119 != v100 || v120 != v96)
              {
                char v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v119, v120, v100, v96, 0);
                unint64_t v118 = v101 + 1;
                v117 += 2;
                if ((v121 & 1) == 0) {
                  continue;
                }
              }
              LOBYTE(v99) = v96;
              goto LABEL_36;
            }
            char v122 = v96;
            goto LABEL_57;
          }
          swift_bridgeObjectRelease(v96);
          uint64_t v62 = v161;
LABEL_40:
          uint64_t v64 = v162 + 1;
          uint64_t v63 = v156;
          if (v162 + 1 == v156) {
            goto LABEL_60;
          }
        }
        char v82 = v78;
LABEL_15:
        swift_bridgeObjectRelease(v82);
        goto LABEL_40;
      }
LABEL_60:
      (*(void (**)(uint64_t *, uint64_t))(v138 + 8))(v151, v147);
      uint64_t v125 = *(void (**)(uint64_t *, uint64_t))(v62 + 8);
      v125(v146, v61);
      v125(v149, v61);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v139, type metadata accessor for MLClassifierMetrics.Precomputed);
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v135 + 32))(v136, v148, v152);
    }
    else
    {
      swift_errorRelease(v126);
      uint64_t v124 = lazy protocol witness table accessor for type [AnyColumn] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, (uint64_t)&protocol conformance descriptor for MLShapedArray<A>);
      return MLShapedArrayProtocol.init(arrayLiteral:)(_swiftEmptyArrayStorage, v152, v124);
    }
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v126, (uint64_t)&v126, type metadata accessor for AnyClassificationMetrics);
    AnyClassificationMetrics.makeConfusionMatrix()();
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v126, type metadata accessor for AnyClassificationMetrics);
  }
}

uint64_t type metadata accessor for MLClassifierMetrics.Precomputed(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics.Precomputed, (uint64_t)&nominal type descriptor for MLClassifierMetrics.Precomputed);
}

void *initializeBufferWithCopyOfBuffer for MLClassifierMetrics(void *a1, char *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = *(void *)a2;
      swift_errorRetain(*(void *)a2);
      *a1 = v12;
      uint64_t v21 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v16 = swift_getEnumCaseMultiPayload(a2, v15);
        BOOL v17 = v16 == 1;
        char v18 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v16 == 1) {
          char v18 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v18);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v3, a2, v19);
        swift_storeEnumTagMultiPayload(v3, v15, v17);
        a1 = v3;
        uint64_t v14 = v4;
        uint64_t v13 = 0;
        goto LABEL_11;
      }
      *a1 = *(void *)a2;
      uint64_t v22 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v7 = *(int *)(v22 + 20);
      uint64_t v23 = (char *)a1 + v7;
      uint64_t v8 = type metadata accessor for DataFrame(0);
      int64_t v9 = &a2[v7];
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
      v10(v23, v9, v8);
      v10((char *)a1 + *(int *)(v22 + 24), &a2[*(int *)(v22 + 24)], v8);
      uint64_t v21 = 1;
    }
    uint64_t v13 = v21;
    uint64_t v14 = v4;
LABEL_11:
    swift_storeEnumTagMultiPayload(a1, v14, v13);
    return v3;
  }
  uint64_t v11 = *(void *)a2;
  *uint64_t v3 = *(void *)a2;
  uint64_t v3 = (void *)(v11 + ((v5 + 16) & ~v5));
  swift_retain();
  return v3;
}

uint64_t destroy for MLClassifierMetrics(void *a1)
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t result = swift_getEnumCaseMultiPayload(a1, v2);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*a1);
    case 1:
      uint64_t v6 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v7 = (char *)a1 + *(int *)(v6 + 20);
      uint64_t v8 = type metadata accessor for DataFrame(0);
      int64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
      v9(v7, v8);
      return ((uint64_t (*)(char *, uint64_t))v9)((char *)a1 + *(int *)(v6 + 24), v8);
    case 0:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(a1, v4) == 1) {
        int v5 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        int v5 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(v5);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return result;
}

void *initializeWithCopy for MLClassifierMetrics(void *a1, char *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = *(void *)a2;
    swift_errorRetain(*(void *)a2);
    *a1 = v11;
    uint64_t v8 = 2;
    uint64_t v9 = v10;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *(void *)a2;
    uint64_t v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v5 = *(int *)(v19 + 20);
    uint64_t v18 = v3;
    uint64_t v6 = type metadata accessor for DataFrame(0);
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7((char *)a1 + v5, &a2[v5], v6);
    v7((char *)a1 + *(int *)(v19 + 24), &a2[*(int *)(v19 + 24)], v6);
    uint64_t v8 = 1;
    uint64_t v9 = v18;
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v13 = swift_getEnumCaseMultiPayload(a2, v12);
    BOOL v14 = v13 == 1;
    uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v13 == 1) {
      uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v2, a2, v16);
    swift_storeEnumTagMultiPayload(v2, v12, v14);
    a1 = v2;
    uint64_t v9 = v3;
    uint64_t v8 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v9, v8);
  return v2;
}

char *assignWithCopy for MLClassifierMetrics(char *a1, char *a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v3 = type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = v3;
      uint64_t v11 = *(void *)a2;
      swift_errorRetain(*(void *)a2);
      *(void *)a1 = v11;
      uint64_t v8 = 2;
      uint64_t v9 = v10;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v5 = *(int *)(v19 + 20);
      uint64_t v18 = v3;
      uint64_t v6 = type metadata accessor for DataFrame(0);
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(&a1[v5], &a2[v5], v6);
      v7(&a1[*(int *)(v19 + 24)], &a2[*(int *)(v19 + 24)], v6);
      uint64_t v8 = 1;
      uint64_t v9 = v18;
    }
    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v13 = swift_getEnumCaseMultiPayload(a2, v12);
      BOOL v14 = v13 == 1;
      uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v13 == 1) {
        uint64_t v15 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v2, a2, v16);
      swift_storeEnumTagMultiPayload(v2, v12, v14);
      a1 = v2;
      uint64_t v9 = v3;
      uint64_t v8 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v9, v8);
  }
  return v2;
}

char *initializeWithTake for MLClassifierMetrics(char *__dst, char *__src)
{
  uint64_t v2 = __dst;
  uint64_t v3 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v3);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)__dst = *(void *)__src;
    uint64_t v17 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v12 = *(int *)(v17 + 20);
    uint64_t v13 = type metadata accessor for DataFrame(0);
    uint64_t v16 = v3;
    BOOL v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(&__dst[v12], &__src[v12], v13);
    v14(&__dst[*(int *)(v17 + 24)], &__src[*(int *)(v17 + 24)], v13);
    uint64_t v11 = 1;
    uint64_t v10 = v16;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(__dst, __src, *(void *)(*(void *)(v3 - 8) + 64));
      return v2;
    }
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v6 = swift_getEnumCaseMultiPayload(__src, v5);
    BOOL v7 = v6 == 1;
    uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v6 == 1) {
      uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v2, __src, v9);
    swift_storeEnumTagMultiPayload(v2, v5, v7);
    __dst = v2;
    uint64_t v10 = v3;
    uint64_t v11 = 0;
  }
  swift_storeEnumTagMultiPayload(__dst, v10, v11);
  return v2;
}

char *assignWithTake for MLClassifierMetrics(char *__dst, char *__src)
{
  uint64_t v2 = __dst;
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLClassifierMetrics.Contents);
    uint64_t v3 = type metadata accessor for MLClassifierMetrics.Contents(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, v3);
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)__dst = *(void *)__src;
      uint64_t v17 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v12 = *(int *)(v17 + 20);
      uint64_t v13 = type metadata accessor for DataFrame(0);
      uint64_t v16 = v3;
      BOOL v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(&__dst[v12], &__src[v12], v13);
      v14(&__dst[*(int *)(v17 + 24)], &__src[*(int *)(v17 + 24)], v13);
      uint64_t v11 = 1;
      uint64_t v10 = v16;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(__dst, __src, *(void *)(*(void *)(v3 - 8) + 64));
        return v2;
      }
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v6 = swift_getEnumCaseMultiPayload(__src, v5);
      BOOL v7 = v6 == 1;
      uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v6 == 1) {
        uint64_t v8 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v2, __src, v9);
      swift_storeEnumTagMultiPayload(v2, v5, v7);
      __dst = v2;
      uint64_t v10 = v3;
      uint64_t v11 = 0;
    }
    swift_storeEnumTagMultiPayload(__dst, v10, v11);
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B6D6F);
}

uint64_t sub_1B6D6F(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B6DB3);
}

uint64_t sub_1B6DB3(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v2);
}

uint64_t type metadata accessor for MLClassifierMetrics(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLClassifierMetrics, (uint64_t)&nominal type descriptor for MLClassifierMetrics);
}

uint64_t type metadata completion function for MLClassifierMetrics(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t result = type metadata accessor for MLClassifierMetrics.Contents(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLClassifierMetrics.Precomputed(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~v5));
    swift_retain(v11);
  }
  else
  {
    *a1 = *(void *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v7;
    uint64_t v8 = type metadata accessor for DataFrame(0);
    uint64_t v9 = &a2[v7];
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    v10(v13, v9, v8);
    v10((char *)a1 + *(int *)(a3 + 24), &a2[*(int *)(a3 + 24)], v8);
  }
  return v4;
}

uint64_t destroy for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for DataFrame(0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1 + *(int *)(a2 + 24), v3);
}

char *initializeWithCopy for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = type metadata accessor for DataFrame(0);
  int v5 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(&a1[v3], &a2[v3], v4);
  v5(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v4);
  return a1;
}

char *assignWithCopy for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = type metadata accessor for DataFrame(0);
  int v5 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(&a1[v3], &a2[v3], v4);
  v5(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v4);
  return a1;
}

char *initializeWithTake for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = type metadata accessor for DataFrame(0);
  int v5 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(&a1[v3], &a2[v3], v4);
  v5(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v4);
  return a1;
}

char *assignWithTake for MLClassifierMetrics.Precomputed(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = type metadata accessor for DataFrame(0);
  int v5 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(&a1[v3], &a2[v3], v4);
  v5(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B7137);
}

uint64_t sub_1B7137(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for DataFrame(0);
  return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLClassifierMetrics.Precomputed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B717E);
}

uint64_t sub_1B717E(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for DataFrame(0);
  return __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 20), a2, a2, v5);
}

uint64_t type metadata completion function for MLClassifierMetrics.Precomputed(uint64_t a1)
{
  uint64_t v3 = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for DataFrame(319);
  if (v2 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    uint64_t v5 = v4;
    swift_initStructMetadata(a1, 256, 3, &v3, a1 + 16);
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MLClassifierMetrics.Contents(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *(void *)a2;
      swift_errorRetain(*(void *)a2);
      *a1 = v13;
      uint64_t v22 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v17 = swift_getEnumCaseMultiPayload(a2, v16);
        BOOL v18 = v17 == 1;
        uint64_t v19 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v17 == 1) {
          uint64_t v19 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(v19);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v4, a2, v20);
        swift_storeEnumTagMultiPayload(v4, v16, v18);
        a1 = v4;
        uint64_t v15 = a3;
        uint64_t v14 = 0;
        goto LABEL_11;
      }
      *a1 = *(void *)a2;
      uint64_t v23 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v8 = *(int *)(v23 + 20);
      int64_t v24 = (char *)a1 + v8;
      uint64_t v9 = type metadata accessor for DataFrame(0);
      uint64_t v10 = &a2[v8];
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
      v11(v24, v10, v9);
      v11((char *)a1 + *(int *)(v23 + 24), &a2[*(int *)(v23 + 24)], v9);
      uint64_t v22 = 1;
    }
    uint64_t v14 = v22;
    uint64_t v15 = a3;
LABEL_11:
    swift_storeEnumTagMultiPayload(a1, v15, v14);
    return v4;
  }
  uint64_t v12 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v12 + ((v5 + 16) & ~v5));
  swift_retain();
  return v4;
}

uint64_t destroy for MLClassifierMetrics.Contents(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*a1);
    case 1:
      uint64_t v6 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v7 = (char *)a1 + *(int *)(v6 + 20);
      uint64_t v8 = type metadata accessor for DataFrame(0);
      uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
      v9(v7, v8);
      return ((uint64_t (*)(char *, uint64_t))v9)((char *)a1 + *(int *)(v6 + 24), v8);
    case 0:
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(a1, v4) == 1) {
        int v5 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        int v5 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(v5);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return result;
}

void *initializeWithCopy for MLClassifierMetrics.Contents(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = a3;
    uint64_t v12 = *(void *)a2;
    swift_errorRetain(*(void *)a2);
    *a1 = v12;
    uint64_t v9 = 2;
    uint64_t v10 = v11;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *(void *)a2;
    uint64_t v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v6 = *(int *)(v20 + 20);
    uint64_t v19 = a3;
    uint64_t v7 = type metadata accessor for DataFrame(0);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1 + v6, &a2[v6], v7);
    v8((char *)a1 + *(int *)(v20 + 24), &a2[*(int *)(v20 + 24)], v7);
    uint64_t v9 = 1;
    uint64_t v10 = v19;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v14 = swift_getEnumCaseMultiPayload(a2, v13);
    BOOL v15 = v14 == 1;
    uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v14 == 1) {
      uint64_t v16 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(v16);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v4, a2, v17);
    swift_storeEnumTagMultiPayload(v4, v13, v15);
    a1 = v4;
    uint64_t v10 = a3;
    uint64_t v9 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v10, v9);
  return v4;
}

char *assignWithCopy for MLClassifierMetrics.Contents(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)a1, type metadata accessor for MLClassifierMetrics.Contents);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *(void *)a2;
      swift_errorRetain(*(void *)a2);
      *(void *)a1 = v11;
      uint64_t v9 = 2;
      uint64_t v10 = a3;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v6 = *(int *)(v19 + 20);
      uint64_t v7 = type metadata accessor for DataFrame(0);
      uint64_t v18 = a3;
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(&a1[v6], &a2[v6], v7);
      v8(&a1[*(int *)(v19 + 24)], &a2[*(int *)(v19 + 24)], v7);
      uint64_t v9 = 1;
      uint64_t v10 = v18;
    }
    else
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v13 = swift_getEnumCaseMultiPayload(a2, v12);
      BOOL v14 = v13 == 1;
      BOOL v15 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v13 == 1) {
        BOOL v15 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(v15);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v3, a2, v16);
      swift_storeEnumTagMultiPayload(v3, v12, v14);
      a1 = v3;
      uint64_t v10 = a3;
      uint64_t v9 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v10, v9);
  }
  return v3;
}

char *initializeWithTake for MLClassifierMetrics.Contents(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)__dst = *(void *)__src;
    uint64_t v18 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    uint64_t v13 = *(int *)(v18 + 20);
    uint64_t v14 = type metadata accessor for DataFrame(0);
    uint64_t v17 = a3;
    BOOL v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
    v15(&__dst[v13], &__src[v13], v14);
    v15(&__dst[*(int *)(v18 + 24)], &__src[*(int *)(v18 + 24)], v14);
    uint64_t v12 = 1;
    uint64_t v11 = v17;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
      return v4;
    }
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    int v7 = swift_getEnumCaseMultiPayload(__src, v6);
    BOOL v8 = v7 == 1;
    uint64_t v9 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    if (v7 == 1) {
      uint64_t v9 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    }
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(v9);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v4, __src, v10);
    swift_storeEnumTagMultiPayload(v4, v6, v8);
    __dst = v4;
    uint64_t v11 = a3;
    uint64_t v12 = 0;
  }
  swift_storeEnumTagMultiPayload(__dst, v11, v12);
  return v4;
}

char *assignWithTake for MLClassifierMetrics.Contents(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  if (__dst != __src)
  {
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)__dst, type metadata accessor for MLClassifierMetrics.Contents);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)__dst = *(void *)__src;
      uint64_t v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v14 = *(int *)(v19 + 20);
      uint64_t v20 = &__dst[v14];
      uint64_t v15 = type metadata accessor for DataFrame(0);
      uint64_t v16 = &__src[v14];
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v17(v20, v16, v15);
      v17(&__dst[*(int *)(v19 + 24)], &__src[*(int *)(v19 + 24)], v15);
      uint64_t v13 = 1;
      uint64_t v12 = a3;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
        return v3;
      }
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v8 = swift_getEnumCaseMultiPayload(__src, v7);
      BOOL v9 = v8 == 1;
      uint64_t v10 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v8 == 1) {
        uint64_t v10 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v10);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v3, __src, v11);
      swift_storeEnumTagMultiPayload(v3, v7, v9);
      __dst = v3;
      uint64_t v12 = a3;
      uint64_t v13 = 0;
    }
    swift_storeEnumTagMultiPayload(__dst, v12, v13);
  }
  return v3;
}

uint64_t type metadata completion function for MLClassifierMetrics.Contents(uint64_t a1)
{
  uint64_t result = type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(319);
  if (v2 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLClassifierMetrics.Precomputed(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(result - 8) + 64;
      void v6[2] = "\b";
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v6, v3, v4);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>;
  if (!lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClassificationMetrics<String>);
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClassificationMetrics<Int>);
    uint64_t result = type metadata accessor for Either(a1, v2, v3, v4);
    if (!v5) {
      lazy cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>> = result;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AnyColumn] and conformance [A](uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!*a1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v5);
    *a1 = result;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLObjectDetector.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)__src;
    *(void *)uint64_t v3 = *(void *)__src;
    uint64_t v3 = (char *)(v12 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v13 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(__dst, __src, v13);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
        uint64_t v15 = *(int *)(v14 + 48);
        *(void *)&__dst[v15] = *(void *)&__src[v15];
        uint64_t v16 = *(void *)&__src[v15 + 8];
        *(void *)&v3[v15 + 8] = v16;
        uint64_t v17 = *(int *)(v14 + 64);
        *(void *)&v3[v17] = *(void *)&__src[v17];
        uint64_t v18 = *(void *)&__src[v17 + 8];
        *(void *)&v3[v17 + 8] = v18;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v18);
        swift_storeEnumTagMultiPayload(v3, a3, 3);
        break;
      case 2:
        uint64_t v19 = *(void *)__src;
        char v20 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v20);
        *(void *)__dst = v19;
        __dst[8] = v20;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v21 = *((void *)__src + 3);
        *((void *)v3 + 3) = v21;
        *((void *)v3 + 4) = *((void *)__src + 4);
        uint64_t v22 = *((void *)__src + 5);
        *((void *)v3 + 5) = v22;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_storeEnumTagMultiPayload(v3, a3, 2);
        break;
      case 1:
        uint64_t v8 = type metadata accessor for MLObjectDetector.DataSource(0);
        switch(swift_getEnumCaseMultiPayload(__src, v8))
        {
          case 0u:
            uint64_t v9 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(__dst, __src, v9);
            uint64_t v10 = v8;
            uint64_t v11 = 0;
            break;
          case 1u:
            uint64_t v23 = type metadata accessor for URL(0);
            uint64_t v38 = v8;
            int64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
            v24(__dst, __src, v23);
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
            v24(&__dst[*(int *)(v25 + 48)], &__src[*(int *)(v25 + 48)], v23);
            uint64_t v37 = 1;
            goto LABEL_13;
          case 2u:
            uint64_t v26 = *(void *)__src;
            uint64_t v38 = v8;
            char v27 = __src[8];
            outlined copy of Result<_DataTable, Error>(*(void *)__src, v27);
            *(void *)__dst = v26;
            __dst[8] = v27;
            *((void *)__dst + 2) = *((void *)__src + 2);
            uint64_t v28 = *((void *)__src + 3);
            *((void *)v3 + 3) = v28;
            *((void *)v3 + 4) = *((void *)__src + 4);
            uint64_t v29 = *((void *)__src + 5);
            *((void *)v3 + 5) = v29;
            swift_bridgeObjectRetain(v28);
            swift_bridgeObjectRetain(v29);
            uint64_t v37 = 2;
LABEL_13:
            uint64_t v11 = v37;
            __dst = v3;
            uint64_t v10 = v38;
            break;
          case 3u:
            uint64_t v30 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(__dst, __src, v30);
            uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
            uint64_t v32 = *(int *)(v31 + 48);
            *(void *)&__dst[v32] = *(void *)&__src[v32];
            uint64_t v33 = *(void *)&__src[v32 + 8];
            *(void *)&v3[v32 + 8] = v33;
            uint64_t v34 = *(int *)(v31 + 64);
            *(void *)&v3[v34] = *(void *)&__src[v34];
            uint64_t v35 = *(void *)&__src[v34 + 8];
            *(void *)&v3[v34 + 8] = v35;
            swift_bridgeObjectRetain(v33);
            swift_bridgeObjectRetain(v35);
            uint64_t v11 = 3;
            __dst = v3;
            uint64_t v10 = v8;
            break;
          case 4u:
            JUMPOUT(0x1B7CD0);
        }
        swift_storeEnumTagMultiPayload(__dst, v10, v11);
        swift_storeEnumTagMultiPayload(v3, a3, 1);
        break;
      default:
        memcpy(__dst, __src, *(void *)(v4 + 64));
        break;
    }
  }
  return v3;
}

uint64_t destroy for MLObjectDetector.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch(result)
  {
    case 3:
LABEL_8:
      uint64_t v5 = type metadata accessor for DataFrame(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v6 + 48) + 8));
      return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(v6 + 64) + 8));
    case 2:
LABEL_7:
      outlined consume of Result<_DataTable, Error>(*(void *)a1, *(_DWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(void *)(a1 + 24));
      return swift_bridgeObjectRelease(*(void *)(a1 + 40));
    case 1:
      uint64_t v3 = type metadata accessor for MLObjectDetector.DataSource(0);
      uint64_t result = swift_getEnumCaseMultiPayload(a1, v3);
      switch((int)result)
      {
        case 0:
          uint64_t v4 = type metadata accessor for URL(0);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
          break;
        case 1:
          uint64_t v7 = type metadata accessor for URL(0);
          uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
          v8(a1, v7);
          uint64_t v9 = a1
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL))
                      + 48);
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v8)(v9, v7);
          break;
        case 2:
          goto LABEL_7;
        case 3:
          goto LABEL_8;
        default:
          return result;
      }
      break;
  }
  return result;
}

char *initializeWithCopy for MLObjectDetector.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v10 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(__dst, __src, v10);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      uint64_t v12 = *(int *)(v11 + 48);
      *(void *)&__dst[v12] = *(void *)&__src[v12];
      uint64_t v13 = *(void *)&__src[v12 + 8];
      *(void *)&v4[v12 + 8] = v13;
      uint64_t v14 = *(int *)(v11 + 64);
      *(void *)&v4[v14] = *(void *)&__src[v14];
      uint64_t v15 = *(void *)&__src[v14 + 8];
      *(void *)&v4[v14 + 8] = v15;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      swift_storeEnumTagMultiPayload(v4, a3, 3);
      break;
    case 2:
      uint64_t v16 = *(void *)__src;
      char v17 = __src[8];
      outlined copy of Result<_DataTable, Error>(*(void *)__src, v17);
      *(void *)__dst = v16;
      __dst[8] = v17;
      *((void *)__dst + 2) = *((void *)__src + 2);
      uint64_t v18 = *((void *)__src + 3);
      *((void *)v4 + 3) = v18;
      *((void *)v4 + 4) = *((void *)__src + 4);
      uint64_t v19 = *((void *)__src + 5);
      *((void *)v4 + 5) = v19;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_storeEnumTagMultiPayload(v4, a3, 2);
      break;
    case 1:
      uint64_t v6 = type metadata accessor for MLObjectDetector.DataSource(0);
      switch(swift_getEnumCaseMultiPayload(__src, v6))
      {
        case 0u:
          uint64_t v7 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
          uint64_t v8 = v6;
          uint64_t v9 = 0;
          break;
        case 1u:
          uint64_t v20 = type metadata accessor for URL(0);
          uint64_t v35 = v6;
          uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
          v21(__dst, __src, v20);
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
          v21(&__dst[*(int *)(v22 + 48)], &__src[*(int *)(v22 + 48)], v20);
          uint64_t v34 = 1;
          goto LABEL_11;
        case 2u:
          uint64_t v23 = *(void *)__src;
          uint64_t v35 = v6;
          char v24 = __src[8];
          outlined copy of Result<_DataTable, Error>(*(void *)__src, v24);
          *(void *)__dst = v23;
          __dst[8] = v24;
          *((void *)__dst + 2) = *((void *)__src + 2);
          uint64_t v25 = *((void *)__src + 3);
          *((void *)v4 + 3) = v25;
          *((void *)v4 + 4) = *((void *)__src + 4);
          uint64_t v26 = *((void *)__src + 5);
          *((void *)v4 + 5) = v26;
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          uint64_t v34 = 2;
LABEL_11:
          uint64_t v9 = v34;
          __dst = v4;
          uint64_t v8 = v35;
          break;
        case 3u:
          uint64_t v27 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, __src, v27);
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
          uint64_t v29 = *(int *)(v28 + 48);
          *(void *)&__dst[v29] = *(void *)&__src[v29];
          uint64_t v30 = *(void *)&__src[v29 + 8];
          *(void *)&v4[v29 + 8] = v30;
          uint64_t v31 = *(int *)(v28 + 64);
          *(void *)&v4[v31] = *(void *)&__src[v31];
          uint64_t v32 = *(void *)&__src[v31 + 8];
          *(void *)&v4[v31 + 8] = v32;
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRetain(v32);
          uint64_t v9 = 3;
          __dst = v4;
          uint64_t v8 = v6;
          break;
      }
      swift_storeEnumTagMultiPayload(__dst, v8, v9);
      swift_storeEnumTagMultiPayload(v4, a3, 1);
      break;
    default:
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return v4;
}

char *assignWithCopy for MLObjectDetector.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v3 = __dst;
  if (__dst != __src)
  {
    outlined destroy of MLObjectDetector.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLObjectDetector.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v10 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(__dst, __src, v10);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
        uint64_t v12 = *(int *)(v11 + 48);
        *(void *)&__dst[v12] = *(void *)&__src[v12];
        uint64_t v13 = *(void *)&__src[v12 + 8];
        *(void *)&v3[v12 + 8] = v13;
        uint64_t v14 = *(int *)(v11 + 64);
        *(void *)&v3[v14] = *(void *)&__src[v14];
        uint64_t v15 = *(void *)&__src[v14 + 8];
        *(void *)&v3[v14 + 8] = v15;
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v15);
        swift_storeEnumTagMultiPayload(v3, a3, 3);
        break;
      case 2:
        uint64_t v16 = *(void *)__src;
        char v17 = __src[8];
        outlined copy of Result<_DataTable, Error>(*(void *)__src, v17);
        *(void *)__dst = v16;
        __dst[8] = v17;
        *((void *)__dst + 2) = *((void *)__src + 2);
        uint64_t v18 = *((void *)__src + 3);
        *((void *)v3 + 3) = v18;
        *((void *)v3 + 4) = *((void *)__src + 4);
        uint64_t v19 = *((void *)__src + 5);
        *((void *)v3 + 5) = v19;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(v3, a3, 2);
        break;
      case 1:
        uint64_t v6 = type metadata accessor for MLObjectDetector.DataSource(0);
        switch(swift_getEnumCaseMultiPayload(__src, v6))
        {
          case 0u:
            uint64_t v7 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(__dst, __src, v7);
            uint64_t v8 = v6;
            uint64_t v9 = 0;
            break;
          case 1u:
            uint64_t v20 = type metadata accessor for URL(0);
            uint64_t v35 = v6;
            uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
            v21(__dst, __src, v20);
            uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
            v21(&__dst[*(int *)(v22 + 48)], &__src[*(int *)(v22 + 48)], v20);
            uint64_t v34 = 1;
            goto LABEL_12;
          case 2u:
            uint64_t v23 = *(void *)__src;
            uint64_t v35 = v6;
            char v24 = __src[8];
            outlined copy of Result<_DataTable, Error>(*(void *)__src, v24);
            *(void *)__dst = v23;
            __dst[8] = v24;
            *((void *)__dst + 2) = *((void *)__src + 2);
            uint64_t v25 = *((void *)__src + 3);
            *((void *)v3 + 3) = v25;
            *((void *)v3 + 4) = *((void *)__src + 4);
            uint64_t v26 = *((void *)__src + 5);
            *((void *)v3 + 5) = v26;
            swift_bridgeObjectRetain(v25);
            swift_bridgeObjectRetain(v26);
            uint64_t v34 = 2;
LABEL_12:
            uint64_t v9 = v34;
            __dst = v3;
            uint64_t v8 = v35;
            break;
          case 3u:
            uint64_t v27 = type metadata accessor for DataFrame(0);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, __src, v27);
            uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
            uint64_t v29 = *(int *)(v28 + 48);
            *(void *)&__dst[v29] = *(void *)&__src[v29];
            uint64_t v30 = *(void *)&__src[v29 + 8];
            *(void *)&v3[v29 + 8] = v30;
            uint64_t v31 = *(int *)(v28 + 64);
            *(void *)&v3[v31] = *(void *)&__src[v31];
            uint64_t v32 = *(void *)&__src[v31 + 8];
            *(void *)&v3[v31 + 8] = v32;
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v32);
            uint64_t v9 = 3;
            __dst = v3;
            uint64_t v8 = v6;
            break;
        }
        swift_storeEnumTagMultiPayload(__dst, v8, v9);
        swift_storeEnumTagMultiPayload(v3, a3, 1);
        break;
      default:
        memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return v3;
}

uint64_t type metadata accessor for MLObjectDetector.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLObjectDetector.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLObjectDetector.ModelParameters.ValidationData) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLObjectDetector.ModelParameters.ValidationData);
  }
  return result;
}

char *initializeWithTake for MLObjectDetector.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v10 = type metadata accessor for DataFrame(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(__dst, __src, v10);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
    *(_OWORD *)&__dst[*(int *)(v11 + 48)] = *(_OWORD *)&__src[*(int *)(v11 + 48)];
    *(_OWORD *)&__dst[*(int *)(v11 + 64)] = *(_OWORD *)&__src[*(int *)(v11 + 64)];
    swift_storeEnumTagMultiPayload(__dst, a3, 3);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for MLObjectDetector.DataSource(0);
      int v6 = swift_getEnumCaseMultiPayload(__src, v5);
      if (v6 == 3)
      {
        uint64_t v12 = type metadata accessor for DataFrame(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
        *(_OWORD *)&__dst[*(int *)(v13 + 48)] = *(_OWORD *)&__src[*(int *)(v13 + 48)];
        *(_OWORD *)&__dst[*(int *)(v13 + 64)] = *(_OWORD *)&__src[*(int *)(v13 + 64)];
        uint64_t v17 = 3;
      }
      else
      {
        if (v6 != 1)
        {
          if (v6)
          {
            memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
            goto LABEL_14;
          }
          uint64_t v7 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(__dst, __src, v7);
          uint64_t v8 = v5;
          uint64_t v9 = 0;
LABEL_12:
          swift_storeEnumTagMultiPayload(__dst, v8, v9);
LABEL_14:
          swift_storeEnumTagMultiPayload(__dst, a3, 1);
          return __dst;
        }
        uint64_t v18 = type metadata accessor for URL(0);
        uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
        v14(__dst, __src, v18);
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
        v14(&__dst[*(int *)(v15 + 48)], &__src[*(int *)(v15 + 48)], v18);
        uint64_t v17 = 1;
      }
      uint64_t v9 = v17;
      uint64_t v8 = v5;
      goto LABEL_12;
    }
    memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return __dst;
}

char *assignWithTake for MLObjectDetector.ModelParameters.ValidationData(char *__dst, char *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    outlined destroy of MLObjectDetector.ModelParameters.ValidationData((uint64_t)__dst, type metadata accessor for MLObjectDetector.ModelParameters.ValidationData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(__src, a3);
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v10 = type metadata accessor for DataFrame(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(__dst, __src, v10);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      *(_OWORD *)&__dst[*(int *)(v11 + 48)] = *(_OWORD *)&__src[*(int *)(v11 + 48)];
      *(_OWORD *)&__dst[*(int *)(v11 + 64)] = *(_OWORD *)&__src[*(int *)(v11 + 64)];
      swift_storeEnumTagMultiPayload(__dst, a3, 3);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = type metadata accessor for MLObjectDetector.DataSource(0);
        int v6 = swift_getEnumCaseMultiPayload(__src, v5);
        if (v6 == 3)
        {
          uint64_t v12 = type metadata accessor for DataFrame(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(__dst, __src, v12);
          uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
          *(_OWORD *)&__dst[*(int *)(v13 + 48)] = *(_OWORD *)&__src[*(int *)(v13 + 48)];
          *(_OWORD *)&__dst[*(int *)(v13 + 64)] = *(_OWORD *)&__src[*(int *)(v13 + 64)];
          uint64_t v17 = 3;
        }
        else
        {
          if (v6 != 1)
          {
            if (v6)
            {
              memcpy(__dst, __src, *(void *)(*(void *)(v5 - 8) + 64));
              goto LABEL_15;
            }
            uint64_t v7 = type metadata accessor for URL(0);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(__dst, __src, v7);
            uint64_t v8 = v5;
            uint64_t v9 = 0;
LABEL_13:
            swift_storeEnumTagMultiPayload(__dst, v8, v9);
LABEL_15:
            swift_storeEnumTagMultiPayload(__dst, a3, 1);
            return __dst;
          }
          uint64_t v18 = type metadata accessor for URL(0);
          uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
          v14(__dst, __src, v18);
          uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL));
          v14(&__dst[*(int *)(v15 + 48)], &__src[*(int *)(v15 + 48)], v18);
          uint64_t v17 = 1;
        }
        uint64_t v9 = v17;
        uint64_t v8 = v5;
        goto LABEL_13;
      }
      memcpy(__dst, __src, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return __dst;
}

uint64_t type metadata completion function for MLObjectDetector.ModelParameters.ValidationData(uint64_t a1)
{
  v7[0] = &unk_34D8F8;
  uint64_t result = type metadata accessor for MLObjectDetector.DataSource(319);
  if (v2 <= 0x3F)
  {
    v7[1] = *(void *)(result - 8) + 64;
    v7[2] = &unk_34D910;
    uint64_t result = type metadata accessor for DataFrame(319);
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout3(v6, *(void *)(result - 8) + 64, &unk_34D928, &unk_34D928);
      v7[3] = v6;
      swift_initEnumMetadataMultiPayload(a1, 256, 4, v7, v4, v5);
      return 0;
    }
  }
  return result;
}

uint64_t MLObjectDetector.ModelParameters.ValidationData.generateTables(trainingData:)(void *a1, uint64_t *a2, uint64_t a3, __m128 a4)
{
  *(void *)&long long v148 = v4;
  v150._char object = v5;
  uint64_t v142 = a2;
  v141._char object = a1;
  v143._uint64_t countAndFlagsBits = type metadata accessor for DataFrame(0);
  uint64_t named = *(void *)(v143._countAndFlagsBits - 8);
  int64_t v7 = *(void *)(named + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v140 = &v126;
  uint64_t v10 = alloca(v7);
  uint64_t v11 = alloca(v7);
  v150._uint64_t countAndFlagsBits = (uint64_t)&v126;
  uint64_t v12 = alloca(v7);
  uint64_t v13 = alloca(v7);
  uint64_t v149 = &v126;
  int64_t v14 = *(void *)(*(void *)(type metadata accessor for MLObjectDetector.DataSource(0) - 8) + 64);
  uint64_t v15 = alloca(v14);
  uint64_t v16 = alloca(v14);
  v143._char object = &v126;
  uint64_t v17 = type metadata accessor for MLObjectDetector.ModelParameters.ValidationData(0);
  int64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  uint64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v21 = *(void **)a3;
  char v22 = *(unsigned char *)(a3 + 8);
  outlined init with copy of MLObjectDetector.ModelParameters.ValidationData((uint64_t)v150._object, (uint64_t)&v126);
  switch(swift_getEnumCaseMultiPayload(&v126, v17))
  {
    case 0u:
      uint64_t v134 = v21;
      char v135 = v22 & 1;
      long long v146 = v126;
      __int16 v147 = (__int16)v127;
      MLDataTable.randomSplit(strategy:)(&v144, &v136, (uint64_t)&v146);
      uint64_t result = v144;
      char v24 = v145;
      char v25 = v137;
      char object = v141._object;
      *(void *)v141._char object = v136;
      object[8] = v25;
      uint64_t v27 = v142;
      *uint64_t v142 = result;
      *((unsigned char *)v27 + 8) = v24;
      return result;
    case 1u:
      uint64_t v28 = (void (*)(ValueMetadata **, uint64_t))v143._object;
      outlined init with take of MLObjectDetector.DataSource((uint64_t)&v126, (uint64_t)v143._object);
      uint64_t v29 = v141._object;
      *(void *)v141._char object = v21;
      v29[8] = v22 & 1;
      outlined copy of Result<_DataTable, Error>((uint64_t)v21, v22);
      uint64_t v30 = v148;
      static _ImageUtilities.getImageURLsAndObjectAnnotations(from:imageColumnName:labelColumnName:)(v28, 0, 0, 0, 0, a4);
      if (v30)
      {
        outlined consume of Result<_DataTable, Error>((uint64_t)v21, v22);
        return outlined destroy of MLObjectDetector.ModelParameters.ValidationData((uint64_t)v28, type metadata accessor for MLObjectDetector.DataSource);
      }
      else
      {
        outlined destroy of MLObjectDetector.ModelParameters.ValidationData((uint64_t)v28, type metadata accessor for MLObjectDetector.DataSource);
        uint64_t result = v146;
        char v64 = BYTE8(v146);
        Swift::String v65 = v142;
        *uint64_t v142 = v146;
        *((unsigned char *)v65 + 8) = v64;
      }
      return result;
    case 2u:
      char v153 = v22;
      v139._char object = v21;
      uint64_t v31 = v126;
      LOBYTE(v150._object) = BYTE8(v126);
      v143._uint64_t countAndFlagsBits = (uint64_t)v127;
      uint64_t named = v128;
      uint64_t v32 = v130;
      uint64_t v144 = v126;
      LOBYTE(v145) = BYTE8(v126);
      v150._uint64_t countAndFlagsBits = v129;
      if (BYTE8(v126))
      {
        outlined copy of Result<_DataTable, Error>(v126, 1);
        outlined copy of Result<_DataTable, Error>(v31, 1);
        uint64_t v33 = tc_v1_flex_list_create(0);
        if (!v33) {
          BUG();
        }
        uint64_t v34 = v33;
        outlined consume of Result<_DataTable, Error>(v31, 1);
        uint64_t v35 = type metadata accessor for CMLSequence();
        uint64_t v36 = swift_allocObject(v35, 25, 7);
        *(void *)(v36 + 16) = v34;
        *(unsigned char *)(v36 + 24) = 1;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v126, 0);
        outlined copy of Result<_DataTable, Error>(v31, 0);
        _DataTable.columnNames.getter(v31);
        outlined consume of Result<_DataTable, Error>(v31, 0);
        uint64_t v36 = v146;
      }
      swift_retain();
      uint64_t v57 = CMLSequence.size.getter();
      uint64_t v58 = specialized RandomAccessCollection<>.distance(from:to:)(0, v57);
      swift_release_n(v36);
      uint64_t v149 = v32;
      if (!v58) {
        goto LABEL_25;
      }
      if (LOBYTE(v150._object))
      {
        uint64_t v59 = v32;
        outlined copy of Result<_DataTable, Error>(v31, 1);
        uint64_t v60 = tc_v1_flex_list_create(0);
        if (!v60) {
          BUG();
        }
        uint64_t v61 = v60;
        uint64_t v62 = type metadata accessor for CMLSequence();
        uint64_t v63 = swift_allocObject(v62, 25, 7);
        *(void *)(v63 + 16) = v61;
        *(unsigned char *)(v63 + 24) = 1;
        outlined consume of Result<_DataTable, Error>(v31, 1);
        uint64_t v32 = v59;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v31, 0);
        _DataTable.columnNames.getter(v31);
        outlined consume of Result<_DataTable, Error>(v31, 0);
        uint64_t v63 = v136;
      }
      *(void *)&long long v146 = v150._countAndFlagsBits;
      *((void *)&v146 + 1) = v32;
      uint64_t v76 = alloca(24);
      unint64_t v77 = alloca(32);
      unint64_t v127 = &v146;
      uint64_t v78 = v148;
      char v79 = specialized Sequence.contains(where:)((uint64_t (*)(unint64_t *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)&v126, v63);
      *(void *)&long long v148 = v78;
      swift_release();
      if ((v79 & 1) == 0)
      {
        swift_bridgeObjectRelease(named);
        outlined consume of Result<_DataTable, Error>(v31, (char)v150._object);
        *(void *)&long long v146 = 0;
        *((void *)&v146 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease(BYTE8(v146));
        *(void *)&long long v146 = 0xD00000000000002ALL;
        *((void *)&v146 + 1) = "Accuracy: %.2f%%\n" + 0x8000000000000000;
        v85._uint64_t countAndFlagsBits = v150._countAndFlagsBits;
        char v86 = (char)v149;
        v85._char object = v149;
        String.append(_:)(v85);
        swift_bridgeObjectRelease(v86);
        v85._uint64_t countAndFlagsBits = 46;
        v85._char object = (void *)0xE100000000000000;
        String.append(_:)(v85);
        long long v148 = v146;
        v85._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v85._object, 0, 0);
        *(_OWORD *)uint64_t v87 = v148;
        *(_OWORD *)(v87 + 16) = 0;
        *(_OWORD *)(v87 + 32) = 0;
        *(unsigned char *)(v87 + 48) = 1;
        swift_willThrow(&type metadata for MLCreateError, v85._object, v87, v88, v89, v90);
        return outlined consume of Result<_DataTable, Error>(v144, v145);
      }
      else
      {
LABEL_25:
        uint64_t countAndFlagsBits = v143._countAndFlagsBits;
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t inited = (void *)swift_initStackObject(v81, v132);
        inited[2] = 1;
        inited[3] = 2;
        inited[4] = countAndFlagsBits;
        char v83 = named;
        inited[5] = named;
        *(void *)&long long v146 = v31;
        BYTE8(v146) = v150._object;
        swift_bridgeObjectRetain(v83);
        uint64_t v84 = v148;
        static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v146, 0x6C69466567616D49, (void *)0xED0000656D614E65, (uint64_t)inited);
        if (v84)
        {
          *(void *)&long long v148 = v84;
          swift_bridgeObjectRelease((_BYTE)inited);
          swift_bridgeObjectRelease((_BYTE)v149);
          swift_bridgeObjectRelease(named);
          char v97 = (char)v150._object;
          outlined consume of Result<_DataTable, Error>(v31, (char)v150._object);
          return outlined consume of Result<_DataTable, Error>(v31, v97);
        }
        else
        {
          *(void *)&long long v146 = v31;
          BYTE8(v146) = v150._object;
          uint64_t v95 = (void *)swift_initStackObject(v81, v133);
          v95[2] = 1;
          v95[3] = 2;
          v95[4] = v150._countAndFlagsBits;
          char v96 = (char)v149;
          v95[5] = v149;
          swift_bridgeObjectRetain(v96);
          static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v146, 0x697461746F6E6E41, (void *)0xEA00000000006E6FLL, (uint64_t)v95);
          *(void *)&long long v148 = 0;
          uint64_t v102 = v150._countAndFlagsBits;
          swift_setDeallocating(v95);
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          outlined consume of Result<_DataTable, Error>(v31, (char)v150._object);
          swift_setDeallocating(inited);
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          MLDataTable.willMutate()();
          v103._char object = (void *)0xED0000656D616E65;
          v103._uint64_t countAndFlagsBits = 0x6C69666567616D69;
          v104._uint64_t countAndFlagsBits = v143._countAndFlagsBits;
          v104._char object = (void *)named;
          MLDataTable.renameImpl(named:to:)(v104, v103);
          if (!(_BYTE)v145)
          {
            uint64_t v105 = v144;
            outlined copy of Result<_DataTable, Error>(v144, 0);
            _DataTable.columnNamesDidChange()();
            outlined consume of Result<_DataTable, Error>(v105, 0);
          }
          swift_bridgeObjectRelease(named);
          MLDataTable.willMutate()();
          v106._uint64_t countAndFlagsBits = 0x697461746F6E6E61;
          v107._uint64_t countAndFlagsBits = v102;
          char v108 = (char)v149;
          v107._char object = v149;
          v106._char object = (void *)0xEA00000000006E6FLL;
          MLDataTable.renameImpl(named:to:)(v107, v106);
          uint64_t v109 = v144;
          char v110 = v145;
          if (!(_BYTE)v145)
          {
            outlined copy of Result<_DataTable, Error>(v144, 0);
            _DataTable.columnNamesDidChange()();
            outlined consume of Result<_DataTable, Error>(v109, 0);
          }
          swift_bridgeObjectRelease(v108);
          uint64_t v111 = v141._object;
          unsigned int v112 = v139._object;
          *(void *)v141._char object = v139._object;
          char v113 = v153;
          v111[8] = v153 & 1;
          int v114 = v142;
          *uint64_t v142 = v109;
          *((unsigned char *)v114 + 8) = v110;
          return outlined copy of Result<_DataTable, Error>((uint64_t)v112, v113);
        }
      }
    case 3u:
      char v153 = v22;
      v139._char object = v21;
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, annotationColumn: String));
      uint64_t v38 = *(int *)(v37 + 48);
      v139._uint64_t countAndFlagsBits = *(void *)((char *)&v126 + v38);
      v143._char object = *(void **)((char *)&v126 + v38 + 8);
      uint64_t v39 = *(int *)(v37 + 64);
      v141._uint64_t countAndFlagsBits = *(void *)((char *)&v126 + v39);
      v150._char object = *(void **)((char *)&v126 + v39 + 8);
      int64_t v40 = v149;
      double v41 = v149;
      uint64_t v42 = v143._countAndFlagsBits;
      uint64_t v43 = named;
      (*(void (**)(long long *, long long *, uint64_t))(named + 32))(v149, &v126, v143._countAndFlagsBits);
      uint64_t v44 = DataFrame.columns.getter(v41, &v126);
      uint64_t v45 = *(void *)(v44 + 16);
      swift_bridgeObjectRelease(v44);
      uint64_t v46 = *(double (**)(uint64_t, long long *, uint64_t))(v43 + 16);
      v46(v150._countAndFlagsBits, v40, v42);
      if (v45)
      {
        v47._uint64_t countAndFlagsBits = v141._countAndFlagsBits;
        v47._char object = v150._object;
        uint64_t v48 = v150._countAndFlagsBits;
        Swift::Bool is_nil = DataFrame.indexOfColumn(_:)(v47).is_nil;
        uint64_t named = *(void *)(named + 8);
        ((void (*)(uint64_t, uint64_t))named)(v48, v42);
        if (is_nil)
        {
          swift_bridgeObjectRelease(v143._object);
          *(void *)&long long v146 = 0;
          *((void *)&v146 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease(BYTE8(v146));
          *(void *)&long long v146 = 0xD00000000000002ALL;
          *((void *)&v146 + 1) = "Accuracy: %.2f%%\n" + 0x8000000000000000;
          v70._uint64_t countAndFlagsBits = v141._countAndFlagsBits;
          char v71 = (char)v150._object;
          v70._char object = v150._object;
          String.append(_:)(v70);
          swift_bridgeObjectRelease(v71);
          v70._uint64_t countAndFlagsBits = 46;
          v70._char object = (void *)0xE100000000000000;
          String.append(_:)(v70);
          long long v148 = v146;
          v70._char object = (void *)lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          swift_allocError(&type metadata for MLCreateError, v70._object, 0, 0);
          *(_OWORD *)uint64_t v72 = v148;
          *(_OWORD *)(v72 + 16) = 0;
          *(_OWORD *)(v72 + 32) = 0;
          *(unsigned char *)(v72 + 48) = 1;
          swift_willThrow(&type metadata for MLCreateError, v70._object, v72, v73, v74, v75);
          return ((uint64_t (*)(long long *, uint64_t))named)(v149, v42);
        }
        int64_t v40 = v149;
      }
      else
      {
        uint64_t named = *(void *)(named + 8);
        ((void (*)(uint64_t, uint64_t))named)(v150._countAndFlagsBits, v42);
      }
      uint64_t v66 = (uint64_t)v140;
      *(double *)a4.i64 = v46((uint64_t)v140, v40, v42);
      uint64_t v67 = v148;
      MLDataTable.init(_:convertArraysToShapedArrays:)(v66, 0, a4);
      uint64_t v68 = v42;
      uint64_t v69 = v139._countAndFlagsBits;
      if (v67)
      {
        ((void (*)(long long *, uint64_t))named)(v40, v68);
        swift_bridgeObjectRelease(v150._object);
        return swift_bridgeObjectRelease(v143._object);
      }
      v150._uint64_t countAndFlagsBits = v146;
      int v91 = DWORD2(v146);
      uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v92 = (void *)swift_initStackObject(v138, (char *)&v126 + 8);
      v92[2] = 1;
      v92[3] = 2;
      v92[4] = v69;
      char v93 = (char)v143._object;
      v92[5] = v143._object;
      *(void *)&long long v148 = 0;
      uint64_t v144 = v150._countAndFlagsBits;
      char v151 = v91 & 1;
      LOBYTE(v145) = v91 & 1;
      LODWORD(v140) = v91;
      outlined copy of Result<_DataTable, Error>(v150._countAndFlagsBits, v91);
      swift_bridgeObjectRetain(v93);
      uint64_t v94 = v148;
      static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v144, 0x6C69466567616D49, (void *)0xED0000656D614E65, (uint64_t)v92);
      if (v94)
      {
        swift_bridgeObjectRelease((_BYTE)v92);
        swift_bridgeObjectRelease(v150._object);
        uint64_t v42 = v143._countAndFlagsBits;
        swift_bridgeObjectRelease(v143._object);
        char v100 = (char)v140;
        uint64_t v101 = v150._countAndFlagsBits;
        outlined consume of Result<_DataTable, Error>(v150._countAndFlagsBits, (char)v140);
        outlined consume of Result<_DataTable, Error>(v101, v100);
        return ((uint64_t (*)(long long *, uint64_t))named)(v149, v42);
      }
      *(void *)&long long v148 = v92;
      uint64_t v144 = v150._countAndFlagsBits;
      LOBYTE(v145) = v151;
      uint64_t v98 = (void *)swift_initStackObject(v138, v131);
      v98[2] = 1;
      v98[3] = 2;
      v98[4] = v141._countAndFlagsBits;
      uint64_t v99 = v150._object;
      v98[5] = v150._object;
      swift_bridgeObjectRetain((_BYTE)v99);
      static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v144, 0x697461746F6E6E41, (void *)0xEA00000000006E6FLL, (uint64_t)v98);
      swift_setDeallocating(v98);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      outlined consume of Result<_DataTable, Error>(v150._countAndFlagsBits, (char)v140);
      swift_setDeallocating(v148);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      MLDataTable.willMutate()();
      v115._uint64_t countAndFlagsBits = 0x6C69666567616D69;
      v116._uint64_t countAndFlagsBits = v139._countAndFlagsBits;
      v116._char object = v143._object;
      v115._char object = (void *)0xED0000656D616E65;
      MLDataTable.renameImpl(named:to:)(v116, v115);
      if (!BYTE8(v146))
      {
        uint64_t v117 = v146;
        outlined copy of Result<_DataTable, Error>(v146, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v117, 0);
      }
      swift_bridgeObjectRelease(v143._object);
      MLDataTable.willMutate()();
      v118._uint64_t countAndFlagsBits = 0x697461746F6E6E61;
      v119._uint64_t countAndFlagsBits = v141._countAndFlagsBits;
      v119._char object = v99;
      v118._char object = (void *)0xEA00000000006E6FLL;
      MLDataTable.renameImpl(named:to:)(v119, v118);
      uint64_t v120 = v141._object;
      if (!BYTE8(v146))
      {
        uint64_t v121 = v146;
        outlined copy of Result<_DataTable, Error>(v146, 0);
        _DataTable.columnNamesDidChange()();
        outlined consume of Result<_DataTable, Error>(v121, 0);
      }
      swift_bridgeObjectRelease((_BYTE)v99);
      ((void (*)(long long *, uint64_t))named)(v149, v143._countAndFlagsBits);
      char v122 = v139._object;
      *(void *)uint64_t v120 = v139._object;
      char v123 = v153;
      v120[8] = v153 & 1;
      char v124 = BYTE8(v146);
      uint64_t v125 = v142;
      *uint64_t v142 = v146;
      *((unsigned char *)v125 + 8) = v124;
      return outlined copy of Result<_DataTable, Error>((uint64_t)v122, v123);
    case 4u:
      unint64_t v50 = v141._object;
      *(void *)v141._char object = v21;
      v50[8] = v22 & 1;
      outlined copy of Result<_DataTable, Error>((uint64_t)v21, v22);
      uint64_t empty = tc_v1_sframe_create_empty(0);
      if (!empty) {
        BUG();
      }
      uint64_t v52 = empty;
      uint64_t v53 = type metadata accessor for CMLTable();
      uint64_t v54 = swift_allocObject(v53, 24, 7);
      *(void *)(v54 + 16) = v52;
      uint64_t v55 = type metadata accessor for _DataTable();
      swift_allocObject(v55, 40, 7);
      uint64_t result = _DataTable.init(impl:)(v54);
      uint64_t v56 = v142;
      *uint64_t v142 = result;
      *((unsigned char *)v56 + 8) = 0;
      return result;
  }
}

uint64_t outlined init with copy of MLObjectDetector.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLObjectDetector.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined init with take of MLObjectDetector.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for MLObjectDetector.DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32))(a2, a1, v2);
  return a2;
}

uint64_t outlined destroy of MLObjectDetector.ModelParameters.ValidationData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _Model.evaluation(from:)(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  char v4 = v1;
  return CMLModel.evaluate(table:)(&v3);
}

uint64_t _Model.attributes.getter(double a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 40);
  }
  else
  {
    uint64_t v3 = _Model.getAttributes()(a1);
    uint64_t v4 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v4);
    LOBYTE(v2) = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t _Model.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v109 = v2;
  *(void *)&long long v101 = a1;
  int64_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v5 = alloca(v4);
  int v6 = alloca(v4);
  Swift::String v104 = &v87;
  uint64_t v103 = type metadata accessor for URL(0);
  uint64_t v98 = *(void *)(v103 - 8);
  int64_t v7 = *(void *)(v98 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v93 = *a2;
  uint64_t v99 = a2[1];
  uint64_t v91 = a2[2];
  uint64_t v92 = a2[3];
  uint64_t v100 = a2[4];
  uint64_t v90 = a2[5];
  uint64_t v102 = a2[6];
  int64_t v107 = a2[7];
  uint64_t v106 = a2[8];
  uint64_t v97 = v3;
  unint64_t v10 = ModelType.description.getter(*(_DWORD *)(v3 + 32));
  char v12 = v11;
  uint64_t v13 = v109;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v101, v10, v11, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (v13) {
    return swift_bridgeObjectRelease(v12);
  }
  uint64_t v105 = &v87;
  swift_bridgeObjectRelease(v12);
  uint64_t v15 = (uint64_t)v104;
  __swift_storeEnumTagSinglePayload((uint64_t)v104, 1, 1, v103);
  uint64_t v16 = CMLModel.export(to:)(v15);
  uint64_t v109 = 0;
  uint64_t v17 = v16;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v15, &demangling cache variable for type metadata for URL?);
  uint64_t v18 = tc_v1_flex_dict_create(0);
  if (!v18) {
    BUG();
  }
  uint64_t v19 = v18;
  uint64_t v94 = v17;
  Swift::String v104 = (uint64_t *)type metadata accessor for CMLDictionary();
  uint64_t inited = swift_initStackObject(v104, v88);
  *(void *)(inited + 16) = v19;
  uint64_t v21 = v99;
  uint64_t v22 = v109;
  uint64_t v108 = inited;
  if (v99)
  {
    uint64_t v23 = type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain(v21);
    *(void *)&long long v101 = v23;
    uint64_t v24 = CMLFeatureValue.__allocating_init(_:)(v93, v21);
    if (!v22)
    {
      CMLDictionary.add(key:value:)(0x726F68747561, 0xE600000000000000, v24);
      swift_release();
      uint64_t v25 = v92;
      swift_bridgeObjectRetain(v92);
      uint64_t v26 = CMLFeatureValue.__allocating_init(_:)(v91, v25);
      CMLDictionary.add(key:value:)(0xD000000000000011, (uint64_t)("tted text file " + 0x8000000000000000), v26);
      swift_release();
      uint64_t v27 = v90;
      uint64_t v28 = v100;
      if (v90)
      {
        swift_bridgeObjectRetain(v90);
        uint64_t v29 = CMLFeatureValue.__allocating_init(_:)(v28, v27);
        CMLDictionary.add(key:value:)(0x65736E6563696CLL, 0xE700000000000000, v29);
        swift_release();
      }
      uint64_t v30 = v102;
      uint64_t v31 = v107;
      swift_bridgeObjectRetain(v107);
      uint64_t v32 = CMLFeatureValue.__allocating_init(_:)(v30, v31);
      CMLDictionary.add(key:value:)(0x5F6E6F6973726576, 0xEE00676E69727473, v32);
      uint64_t v109 = 0;
      goto LABEL_11;
    }
    char v83 = "CreateML/MLDataValueConvertible.swift";
    uint64_t v84 = 37;
    uint64_t v85 = 170;
    uint64_t v86 = v22;
LABEL_46:
    swift_unexpectedError(v86, v83, v84, 1, v85);
    BUG();
  }
  uint64_t v33 = NSFullUserName();
  uint64_t v34 = v33;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v36 = v22;
  uint64_t v38 = v37;

  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain(v38);
  uint64_t v39 = CMLFeatureValue.__allocating_init(_:)(v35, v38);
  if (v36)
  {
    char v83 = "CreateML/MLDataValueConvertible.swift";
    uint64_t v84 = 37;
    uint64_t v85 = 170;
    uint64_t v86 = v36;
    goto LABEL_46;
  }
  uint64_t v40 = v39;
  swift_bridgeObjectRelease(v38);
  CMLDictionary.add(key:value:)(0x726F68747561, 0xE600000000000000, v40);
  uint64_t v109 = 0;
LABEL_11:
  uint64_t v41 = v106;
  swift_release();
  Swift::String v42 = getOSVersion()();
  uint64_t countAndFlagsBits = v42._countAndFlagsBits;
  char object = v42._object;
  uint64_t v45 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (v99 && v41)
  {
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v45);
    uint64_t v45 = v41;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
  unint64_t v95 = v45;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(countAndFlagsBits, (uint64_t)object, 0xD00000000000001ALL, (uint64_t)("Recommender Model" + 0x8000000000000000), isUniquelyReferenced_nonNull_native);
  unint64_t v47 = v95;
  swift_bridgeObjectRelease(0);
  uint64_t v48 = tc_v1_flex_dict_create(0);
  if (!v48) {
    BUG();
  }
  uint64_t v49 = v48;
  uint64_t v50 = swift_initStackObject(v104, v89);
  uint64_t v100 = v49;
  uint64_t v106 = v50;
  *(void *)(v50 + 16) = v49;
  uint64_t v51 = 1 << *(unsigned char *)(v47 + 32);
  uint64_t v52 = ~(-1 << v51);
  if (v51 >= 64) {
    uint64_t v52 = -1;
  }
  unint64_t v53 = *(void *)(v47 + 64) & v52;
  int64_t v107 = (unint64_t)(v51 + 63) >> 6;
  swift_bridgeObjectRetain(v47);
  uint64_t v54 = 0;
  uint64_t v55 = v98;
  uint64_t v102 = v47;
  while (1)
  {
    if (v53)
    {
      _BitScanForward64(&v56, v53);
      Swift::String v104 = (uint64_t *)((v53 - 1) & v53);
      *(void *)&long long v101 = v54;
      unint64_t v57 = v56 | (v54 << 6);
      goto LABEL_31;
    }
    BOOL v58 = __OFADD__(1, v54);
    int64_t v59 = v54 + 1;
    if (v58) {
      BUG();
    }
    if (v59 >= v107) {
      goto LABEL_38;
    }
    unint64_t v60 = *(void *)(v47 + 8 * v59 + 64);
    if (!v60) {
      break;
    }
LABEL_30:
    _BitScanForward64(&v62, v60);
    Swift::String v104 = (uint64_t *)(v60 & (v60 - 1));
    *(void *)&long long v101 = v59;
    unint64_t v57 = v62 + (v59 << 6);
LABEL_31:
    uint64_t v63 = 16 * v57;
    uint64_t v64 = *(void *)(v47 + 48);
    uint64_t v65 = *(void *)(v47 + 56);
    uint64_t v97 = *(void *)(v64 + v63);
    uint64_t v66 = *(void *)(v64 + v63 + 8);
    uint64_t v99 = *(void *)(v65 + v63);
    uint64_t v67 = *(void *)(v65 + v63 + 8);
    type metadata accessor for CMLFeatureValue();
    swift_bridgeObjectRetain_n(v67, 2);
    uint64_t v68 = v66;
    swift_bridgeObjectRetain(v66);
    uint64_t v69 = v109;
    uint64_t v70 = CMLFeatureValue.__allocating_init(_:)(v99, v67);
    uint64_t v71 = v69;
    if (v69)
    {
      char v83 = "CreateML/MLDataValueConvertible.swift";
      uint64_t v84 = 37;
      uint64_t v85 = 170;
LABEL_45:
      uint64_t v86 = v71;
      goto LABEL_46;
    }
    uint64_t v72 = v70;
    swift_bridgeObjectRelease(v67);
    CMLDictionary.add(key:value:)(v97, v68, v72);
    uint64_t v109 = 0;
    swift_bridgeObjectRelease(v68);
    swift_release();
    uint64_t v55 = v98;
    unint64_t v47 = v102;
    uint64_t v54 = v101;
    unint64_t v53 = (unint64_t)v104;
  }
  int64_t v61 = v59 + 1;
  if (v59 + 1 >= v107) {
    goto LABEL_38;
  }
  unint64_t v60 = *(void *)(v47 + 8 * v59 + 72);
  if (v60) {
    goto LABEL_29;
  }
  int64_t v61 = v59 + 2;
  if (v59 + 2 >= v107) {
    goto LABEL_38;
  }
  unint64_t v60 = *(void *)(v47 + 8 * v59 + 80);
  if (v60) {
    goto LABEL_29;
  }
  int64_t v61 = v59 + 3;
  if (v59 + 3 >= v107) {
    goto LABEL_38;
  }
  unint64_t v60 = *(void *)(v47 + 8 * v59 + 88);
  if (v60)
  {
LABEL_29:
    int64_t v59 = v61;
    goto LABEL_30;
  }
  v59 += 3;
  while (1)
  {
    BOOL v58 = __OFADD__(1, v59++);
    if (v58) {
      BUG();
    }
    if (v59 >= v107) {
      break;
    }
    unint64_t v60 = *(void *)(v47 + 8 * v59 + 64);
    if (v60) {
      goto LABEL_30;
    }
  }
LABEL_38:
  swift_release();
  type metadata accessor for CMLFeatureValue();
  uint64_t v73 = v106;
  swift_retain();
  uint64_t v74 = v109;
  uint64_t v75 = CMLFeatureValue.__allocating_init(_:)(v73);
  uint64_t v71 = v74;
  if (v74)
  {
    char v83 = "CreateML/_Model.swift";
    uint64_t v84 = 21;
    uint64_t v85 = 187;
    goto LABEL_45;
  }
  CMLDictionary.add(key:value:)(0x6665645F72657375, 0xEC00000064656E69, v75);
  swift_release();
  swift_bridgeObjectRelease(v102);
  CMLModel.addMetadata(_:)(v108);
  CMLModel.save(to:)(v105);
  uint64_t v109 = 0;
  unint64_t v95 = 0;
  char v96 = (char *)0xE000000000000000;
  _StringGuts.grow(_:)(39);
  uint64_t v76 = v96;
  swift_bridgeObjectRelease((_BYTE)v96);
  unint64_t v95 = 0xD000000000000024;
  char v96 = "del to be an MLProgram" + 0x8000000000000000;
  v77._uint64_t countAndFlagsBits = URL.path.getter(v76);
  char v78 = (char)v77._object;
  String.append(_:)(v77);
  swift_bridgeObjectRelease(v78);
  v79._uint64_t countAndFlagsBits = 46;
  v79._char object = (void *)0xE100000000000000;
  String.append(_:)(v79);
  uint64_t v80 = v95;
  uint64_t v81 = v96;
  os_log_type_t v82 = static os_log_type_t.info.getter();
  v79._uint64_t countAndFlagsBits = v80;
  v79._char object = v81;
  log(_:type:)(v79, v82);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease((_BYTE)v81);
  swift_setDeallocating(v106);
  tc_v1_release(v100);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 8))(v105, v103);
}

uint64_t _Model.write(toFile:metadata:)(Swift::String a1, long long *a2)
{
  uint64_t v19 = v2;
  id string = a1._object;
  v21._uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v23 = type metadata accessor for URL(0);
  uint64_t v5 = *(void *)(v23 - 8);
  int64_t v6 = *(void *)(v5 + 64);
  int64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  long long v15 = *a2;
  long long v16 = a2[1];
  long long v17 = a2[2];
  long long v18 = a2[3];
  uint64_t v22 = *((void *)a2 + 8);
  v21._char object = v3;
  unint64_t v9 = ModelType.description.getter(v3[8]);
  char v11 = (char)v10;
  static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, v9, v10);
  if (v2) {
    return swift_bridgeObjectRelease(v11);
  }
  swift_bridgeObjectRelease(v11);
  v13[0] = v15;
  v13[1] = v16;
  void v13[2] = v17;
  v13[3] = v18;
  uint64_t v14 = v22;
  _Model.write(to:metadata:)((uint64_t)v13, (uint64_t *)v13);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v5 + 8))(v13, v23);
}

uint64_t _Model.makeClassifierMetrics(onTraining:onValidation:)(char a1, int a2, double a3)
{
  uint64_t v37 = v3;
  LODWORD(v31) = a2;
  if (a1 == 2)
  {
    if ((_BYTE)a2 == 2)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "CreateML/_Model.swift", 21, 2, 322, 0);
      BUG();
    }
    uint64_t v4 = 0xD000000000000013;
    uint64_t v30 = 0xD00000000000001ALL;
    uint64_t v5 = "Augmentation Options" + 0x8000000000000000;
    uint64_t v36 = "Invalid input data." + 0x8000000000000000;
    *(void *)&double v38 = "validation_confusion_matrix" + 0x8000000000000000;
    uint64_t v35 = 0xD00000000000001BLL;
  }
  else
  {
    uint64_t v30 = 0xD000000000000018;
    uint64_t v5 = "rainingSessionDelegate" + 0x8000000000000000;
    uint64_t v36 = "e trainingMetrics." + 0x8000000000000000;
    *(void *)&double v38 = "training_confusion_matrix" + 0x8000000000000000;
    uint64_t v35 = 0xD000000000000019;
    uint64_t v4 = 0xD000000000000011;
  }
  uint64_t v6 = _Model.attributes.getter(a3);
  char v7 = v6;
  specialized Dictionary.subscript.getter(v4, (uint64_t)v5, v6);
  swift_bridgeObjectRelease((_BYTE)v5);
  swift_bridgeObjectRelease(v7);
  if (!v29)
  {
    swift_bridgeObjectRelease((_BYTE)v36);
    goto LABEL_14;
  }
  if (!swift_dynamicCast(&v32, &v27, (char *)&type metadata for Any + 8, &type metadata for MLDataValue, 6))
  {
LABEL_17:
    swift_bridgeObjectRelease((_BYTE)v36);
    goto LABEL_18;
  }
  if (v34 != 1)
  {
    outlined consume of MLDataValue(v32, v33, v34);
    goto LABEL_17;
  }
  uint64_t v26 = v32;
  uint64_t v8 = _Model.attributes.getter(a3);
  char v9 = v8;
  char v10 = (char)v36;
  specialized Dictionary.subscript.getter(v35, (uint64_t)v36, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  if (!v29)
  {
LABEL_14:
    swift_bridgeObjectRelease(LOBYTE(v38));
LABEL_15:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v27, &demangling cache variable for type metadata for Any?);
LABEL_19:
    long long v18 = v37;
    goto LABEL_20;
  }
  if (!swift_dynamicCast(&v32, &v27, (char *)&type metadata for Any + 8, &type metadata for MLDataTable, 6))
  {
LABEL_18:
    swift_bridgeObjectRelease(LOBYTE(v38));
    goto LABEL_19;
  }
  uint64_t v36 = v32;
  char v11 = (char)v33;
  uint64_t v12 = _Model.attributes.getter(a3);
  char v13 = v12;
  char v14 = LOBYTE(v38);
  specialized Dictionary.subscript.getter(v30, *(uint64_t *)&v38, v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v13);
  if (!v29)
  {
    outlined consume of Result<_DataTable, Error>((uint64_t)v36, v11);
    goto LABEL_15;
  }
  char v15 = v11;
  long long v16 = v36;
  char v17 = swift_dynamicCast(&v32, &v27, (char *)&type metadata for Any + 8, &type metadata for MLDataTable, 6);
  long long v18 = v37;
  if (v17)
  {
    uint64_t v31 = v32;
    LOBYTE(v35) = (_BYTE)v33;
    double v38 = 1.0 - *(double *)&v26;
    uint64_t v27 = v16;
    char v28 = v15 & 1;
    type metadata accessor for MLClassifierMetrics.Precomputed(0);
    outlined copy of Result<_DataTable, Error>((uint64_t)v16, v15);
    DataFrame.init(_:)((uint64_t)&v27);
    uint64_t v27 = v31;
    char v28 = v35;
    DataFrame.init(_:)((uint64_t)&v27);
    long long v18 = v37;
    outlined consume of Result<_DataTable, Error>((uint64_t)v16, v15);
    *long long v18 = v38;
    unsigned int v25 = 1;
    goto LABEL_24;
  }
  outlined consume of Result<_DataTable, Error>((uint64_t)v16, v15);
LABEL_20:
  uint64_t v19 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v20 = swift_allocError(&type metadata for MLCreateError, v19, 0, 0);
  if ((_BYTE)v31 == 2)
  {
    *(void *)uint64_t v21 = 0xD000000000000022;
    uint64_t v22 = "validation_report_by_class";
  }
  else
  {
    *(void *)uint64_t v21 = 0xD0000000000000C0;
    uint64_t v22 = "essor\n\nParameters\n";
  }
  *(void *)(v21 + 8) = (unint64_t)v22 | 0x8000000000000000;
  *(_OWORD *)(v21 + 32) = 0;
  *(_OWORD *)(v21 + 16) = 0;
  *(unsigned char *)(v21 + 48) = 0;
  *(void *)long long v18 = v20;
  unsigned int v25 = 2;
LABEL_24:
  uint64_t v23 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v18, v23, v25);
}

uint64_t _Model.classifierEvaluation(_:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  char v4 = *(unsigned char *)(a1 + 8);
  if (v4 == -1)
  {
    uint64_t v7 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v8 = swift_allocError(&type metadata for MLCreateError, v7, 0, 0);
    *(void *)uint64_t v9 = 0xD000000000000013;
    *(void *)(v9 + 8) = "e MLClassifierMetrics." + 0x8000000000000000;
    *(_OWORD *)(v9 + 16) = 0;
    *(_OWORD *)(v9 + 32) = 0;
    *(unsigned char *)(v9 + 48) = 1;
    *uint64_t v3 = v8;
    uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload(v3, v10, 2);
  }
  else
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v5 = v13;
    char v6 = v4;
    char v14 = v4 & 1;
    outlined copy of Result<_DataTable, Error>(v13, v4);
    uint64_t v11 = _Model.evaluation(from:)((uint64_t)&v13);
    static _Model.makeClassifierEvaluationMetrics(_:classes:)(v11, 0, a2);
    swift_release();
    return outlined consume of MLDataTable?(v5, v6);
  }
}

uint64_t static _Model.makeClassifierEvaluationMetrics(_:classes:)(uint64_t a1, uint64_t a2, double a3)
{
  char v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (tc_v1_variant_is_parameters(v5))
  {
    uint64_t v6 = specialized handling<A, B>(_:_:)(v5);
    uint64_t v29 = a2;
    if (!v6) {
      BUG();
    }
    uint64_t v7 = type metadata accessor for CMLParameters();
    *(void *)(swift_initStackObject(v7, v24) + 16) = v6;
    uint64_t v8 = CMLParameters.featureValue(for:)(61);
    specialized handling<A, B>(_:_:)(*(void *)(v8 + 16));
    double v28 = a3;
    swift_release();
    uint64_t v14 = CMLParameters.table(for:)(62);
    uint64_t v27 = type metadata accessor for _DataTable();
    swift_allocObject(v27, 40, 7);
    uint64_t v15 = _DataTable.init(impl:)(v14);
    if (v29)
    {
      uint64_t v25 = v15;
      char v26 = 0;
      static _MetricUtilities.supplementConfusionMatrixWithMissingClasses(_:classes:)((uint64_t)&v25, v29, a3);
      swift_release();
      uint64_t v16 = v31;
      uint64_t v30 = v31;
      LOBYTE(v16) = v32;
      uint64_t v33 = v16;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v30 = v15;
    }
    uint64_t v17 = CMLParameters.table(for:)(63);
    double v18 = 1.0 - v28;
    double v28 = 1.0 - v28;
    swift_allocObject(v27, 40, 7);
    uint64_t v19 = _DataTable.init(impl:)(v17);
    if (v29)
    {
      uint64_t v25 = v19;
      char v26 = 0;
      static _MetricUtilities.supplementPrecisionRecallWithMissingClasses(_:classes:)((uint64_t)&v25, v29, v18);
      swift_release();
      uint64_t v29 = v31;
      char v20 = v32;
    }
    else
    {
      char v20 = 0;
      uint64_t v29 = v19;
    }
    unsigned __int8 v21 = v33;
    uint64_t v31 = v30;
    char v32 = v33 & 1;
    type metadata accessor for MLClassifierMetrics.Precomputed(0);
    LODWORD(v33) = v21;
    outlined copy of Result<_DataTable, Error>(v30, v21);
    DataFrame.init(_:)((uint64_t)&v31);
    uint64_t v22 = v29;
    uint64_t v31 = v29;
    char v32 = v20 & 1;
    outlined copy of Result<_DataTable, Error>(v29, v20);
    DataFrame.init(_:)((uint64_t)&v31);
    swift_release();
    outlined consume of Result<_DataTable, Error>(v30, v33);
    outlined consume of Result<_DataTable, Error>(v22, v20);
    *char v4 = v28;
    unsigned int v23 = 1;
  }
  else
  {
    uint64_t v9 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    uint64_t v10 = swift_allocError(&type metadata for MLCreateError, v9, 0, 0);
    *(void *)uint64_t v11 = 0xD000000000000026;
    *(void *)(v11 + 8) = "CreateML/_Model.swift" + 0x8000000000000000;
    *(_OWORD *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 32) = 0;
    *(unsigned char *)(v11 + 48) = 0;
    *(void *)char v4 = v10;
    unsigned int v23 = 2;
  }
  uint64_t v12 = type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload(v4, v12, v23);
}

uint64_t _Model.getAttributes()(double a1)
{
  uint64_t v79 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  uint64_t v1 = 0;
  uint64_t v2 = CMLModel.listFields()();
  MLDataValue.init(_:)(v2, a1);
  if (v71 != 3) {
    BUG();
  }
  uint64_t v75 = (void *)*((void *)&v70 + 1);
  uint64_t v3 = (void *)v70;
  swift_retain_n(v70);
  uint64_t v69 = (void *)v70;
  if (CMLSequence.size.getter())
  {
    uint64_t v73 = _swiftEmptyArrayStorage;
    swift_retain();
    uint64_t v4 = CMLSequence.value(at:)(0);
    outlined consume of MLDataValue((void *)v70, v75, 3);
    uint64_t v78 = 0;
    MLDataValue.init(_:)(v4, a1);
    uint64_t v81 = *((void *)&v70 + 1);
    swift_retain();
    uint64_t v5 = CMLSequence.size.getter();
    outlined consume of MLDataValue((void *)v70, v75, 3);
    if (v5 > 0) {
      BUG();
    }
    BUG();
  }
  uint64_t v73 = _swiftEmptyArrayStorage;
  uint64_t v6 = v75;
  outlined consume of MLDataValue((void *)v70, v75, 3);
  unsigned __int8 v7 = _swiftEmptyArrayStorage;
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  if (v8)
  {
    uint64_t v9 = v73 + 5;
    while (1)
    {
      uint64_t v66 = v8;
      uint64_t v10 = *(v9 - 1);
      uint64_t v67 = v9;
      uint64_t v11 = *v9;
      swift_bridgeObjectRetain(*v9);
      uint64_t v81 = v10;
      uint64_t v82 = v11;
      uint64_t v12 = CMLModel.getValue(field:)(v10, v11);
      if (v1)
      {
        swift_unexpectedError(v1, "CreateML/_Model.swift", 21, 1);
        BUG();
      }
      _Model.Output.init(variant:)(v12, a1);
      uint64_t v13 = (void *)*((void *)&v70 + 1);
      int v14 = v71 >> 5;
      int v77 = v71;
      if (v14 == 2) {
        break;
      }
      if (v14 == 1)
      {
        uint64_t v78 = 0;
        uint64_t v72 = &type metadata for MLUntypedColumn;
        BYTE8(v70) &= 1u;
        uint64_t v27 = (void *)v70;
        outlined init with take of Any(&v70, v68);
        outlined copy of Result<_DataTable, Error>((uint64_t)v27, (char)v13);
        uint64_t v74 = v27;
        uint64_t v76 = v13;
        outlined copy of Result<_DataTable, Error>((uint64_t)v27, (char)v13);
        uint64_t v28 = v79;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v79);
        uint64_t v80 = v28;
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
        BOOL v32 = (v30 & 1) == 0;
        BOOL v21 = __OFADD__(*(void *)(v28 + 16), v32);
        Swift::Int v33 = *(void *)(v28 + 16) + v32;
        if (v21) {
          BUG();
        }
        char v34 = v30;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        Swift::Bool v35 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v33);
        uint64_t v1 = v78;
        if (v35)
        {
          unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
          if ((v34 & 1) != (v36 & 1)) {
            goto LABEL_44;
          }
        }
        uint64_t v37 = v80;
        uint64_t v79 = v80;
        if ((v34 & 1) == 0)
        {
          *(void *)(v80 + 8 * (v31 >> 6) + 64) |= 1 << v31;
          uint64_t v38 = *(void *)(v37 + 48);
          uint64_t v39 = 16 * v31;
          *(void *)(v38 + v39) = v81;
          char v40 = v82;
          *(void *)(v38 + v39 + 8) = v82;
          outlined init with take of Any(v68, (_OWORD *)(*(void *)(v37 + 56) + 32 * v31));
          uint64_t v41 = v79;
          uint64_t v42 = *(void *)(v79 + 16);
          BOOL v21 = __OFADD__(1, v42);
          uint64_t v43 = v42 + 1;
          uint64_t v6 = v75;
          uint64_t v44 = v76;
          if (v21) {
            BUG();
          }
          goto LABEL_32;
        }
LABEL_26:
        uint64_t v55 = (void *)(*(void *)(v37 + 56) + 32 * v31);
        __swift_destroy_boxed_opaque_existential_1Tm(v55);
        outlined init with take of Any(v68, v55);
        uint64_t v6 = v75;
LABEL_27:
        uint64_t v44 = v76;
        char v40 = v82;
        goto LABEL_33;
      }
      if (!v14)
      {
        uint64_t v78 = 0;
        uint64_t v72 = &type metadata for MLDataTable;
        BYTE8(v70) &= 1u;
        uint64_t v15 = (void *)v70;
        outlined init with take of Any(&v70, v68);
        outlined copy of Result<_DataTable, Error>((uint64_t)v15, (char)v13);
        uint64_t v74 = v15;
        uint64_t v76 = v13;
        outlined copy of Result<_DataTable, Error>((uint64_t)v15, (char)v13);
        uint64_t v16 = v79;
        char v17 = swift_isUniquelyReferenced_nonNull_native(v79);
        uint64_t v80 = v16;
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
        BOOL v20 = (v18 & 1) == 0;
        BOOL v21 = __OFADD__(*(void *)(v16 + 16), v20);
        Swift::Int v22 = *(void *)(v16 + 16) + v20;
        if (v21) {
          BUG();
        }
        char v23 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v17, v22))
        {
          unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
          if ((v23 & 1) != (v24 & 1)) {
            goto LABEL_44;
          }
        }
        uint64_t v25 = v80;
        uint64_t v79 = v80;
        if (v23)
        {
          char v26 = (void *)(*(void *)(v80 + 56) + 32 * v19);
          __swift_destroy_boxed_opaque_existential_1Tm(v26);
          outlined init with take of Any(v68, v26);
          uint64_t v6 = v75;
          uint64_t v1 = v78;
          goto LABEL_27;
        }
        *(void *)(v80 + 8 * (v19 >> 6) + 64) |= 1 << v19;
        uint64_t v60 = *(void *)(v25 + 48);
        uint64_t v61 = 16 * v19;
        *(void *)(v60 + v61) = v81;
        char v40 = v82;
        *(void *)(v60 + v61 + 8) = v82;
        outlined init with take of Any(v68, (_OWORD *)(*(void *)(v25 + 56) + 32 * v19));
        uint64_t v41 = v79;
        uint64_t v62 = *(void *)(v79 + 16);
        BOOL v21 = __OFADD__(1, v62);
        uint64_t v43 = v62 + 1;
        uint64_t v6 = v75;
        uint64_t v1 = v78;
        uint64_t v44 = v76;
        if (v21) {
          BUG();
        }
LABEL_32:
        *(void *)(v41 + 16) = v43;
        swift_bridgeObjectRetain(v40);
LABEL_33:
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(0);
        uint64_t v63 = v74;
        unsigned __int8 v64 = v77;
        outlined consume of _Model.Output(v74, v44, v77);
        outlined consume of _Model.Output(v63, v44, v64);
        uint64_t v3 = v69;
        goto LABEL_34;
      }
      unint64_t v56 = (void *)v70;
      swift_bridgeObjectRelease(v82);
      outlined consume of _Model.Output(v56, v13, v77);
LABEL_34:
      uint64_t v9 = v67 + 2;
      uint64_t v8 = v66 - 1;
      if (v66 == 1)
      {
        unsigned __int8 v7 = v73;
        goto LABEL_36;
      }
    }
    uint64_t v78 = 0;
    uint64_t v72 = &type metadata for MLDataValue;
    v71 &= 0x1Fu;
    unsigned __int8 v45 = v71;
    uint64_t v46 = (void *)v70;
    outlined init with take of Any(&v70, v68);
    outlined copy of MLDataValue(v46, v13, v45);
    uint64_t v74 = v46;
    uint64_t v76 = v13;
    outlined copy of MLDataValue(v46, v13, v45);
    uint64_t v47 = v79;
    char v48 = swift_isUniquelyReferenced_nonNull_native(v79);
    uint64_t v80 = v47;
    unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
    BOOL v50 = (v49 & 1) == 0;
    BOOL v21 = __OFADD__(*(void *)(v47 + 16), v50);
    Swift::Int v51 = *(void *)(v47 + 16) + v50;
    if (v21) {
      BUG();
    }
    char v52 = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    Swift::Bool v53 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v48, v51);
    uint64_t v1 = v78;
    if (v53)
    {
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
      if ((v52 & 1) != (v54 & 1))
      {
LABEL_44:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        BUG();
      }
    }
    uint64_t v37 = v80;
    uint64_t v79 = v80;
    if ((v52 & 1) == 0)
    {
      *(void *)(v80 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v57 = *(void *)(v37 + 48);
      uint64_t v58 = 16 * v31;
      *(void *)(v57 + v58) = v81;
      char v40 = v82;
      *(void *)(v57 + v58 + 8) = v82;
      outlined init with take of Any(v68, (_OWORD *)(*(void *)(v37 + 56) + 32 * v31));
      uint64_t v41 = v79;
      uint64_t v59 = *(void *)(v79 + 16);
      BOOL v21 = __OFADD__(1, v59);
      uint64_t v43 = v59 + 1;
      uint64_t v6 = v75;
      uint64_t v44 = v76;
      if (v21) {
        BUG();
      }
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_36:
  swift_bridgeObjectRelease(v7);
  outlined consume of MLDataValue(v3, v6, 3);
  outlined consume of MLDataValue(v3, v6, 3);
  return v79;
}

uint64_t _Model.init(impl:)(uint64_t a1)
{
  v2[3] = v1;
  v2[2] = a1;
  v2[4] = *v1;
  return swift_task_switch(_Model.init(impl:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();

  uint64_t v4 = *(void *)(*(void *)v2 + 56);
  uint64_t v3 = *(void **)v2;
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[6]);
    uint64_t v5 = _Model.init(impl:);
  }
  else
  {
    uint64_t v5 = _Model.init(impl:);
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t _Model.init(impl:)()
{
  *(void *)(*(void *)(v0 + 24) + 40) = 0;
  *(Swift::String *)(v0 + 40) = CMLModel.name()();
  if (v1)
  {
    swift_release();
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    swift_bridgeObjectRelease(*(void *)(v2 + 40));
    swift_deallocPartialClassInstance(v2, v3, 48, 7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_3A841C);
    *(void *)(v0 + 56) = v5;
    void *v5 = v0;
    v5[1] = _Model.init(impl:);
    return CMLModel.compile()(_Model.init(impl:));
  }
}

{
  uint64_t v0;
  CreateML::ModelType_optional v1;
  CreateML::ModelType value;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  void *v6;

  v1.Swift::Int value = ModelType.init(nameKey:)(*(Swift::String *)(v0 + 40)).value;
  if (v1.value == CreateML_ModelType_unknownDefault) {
    BUG();
  }
  Swift::Int value = v1.value;
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v4 + 16) = *(void *)(v0 + 16);
  *(void *)(v4 + 24) = v3;
  *(unsigned char *)(v4 + 32) = value;
  swift_retain();
  v3;
  if (!AnalyticsReporter.init()())
  {
    v5._uint64_t countAndFlagsBits = value;
    v5._char object = &dword_0 + 2;
    AnalyticsReporter.reportTemplateUsed(model:mode:)(v5);
  }
  uint64_t v6 = *(void **)(v0 + 64);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_bridgeObjectRelease(*(void *)(v1 + 40));
  swift_deallocPartialClassInstance(v1, v2, 48, 7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *_Model.init(type:)(int a1)
{
  uint64_t v21 = *v2;
  v2[5] = 0;
  id v3 = objc_allocWithZone((Class)MLModel);
  v2[3] = (uint64_t)[v3 init];
  unint64_t v5 = ModelType.nameKey.getter(a1);
  char v6 = v4;
  int v22 = a1;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v5 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(name:), 0, v5, v4, &type metadata for OpaquePointer);
    if (!v1)
    {
LABEL_11:
      swift_bridgeObjectRelease(v6);
LABEL_14:
      uint64_t v13 = v23;
      uint64_t v14 = type metadata accessor for CMLModel();
      uint64_t v15 = swift_allocObject(v14, 24, 7);
      *(void *)(v15 + 16) = v13;
      v2[2] = v15;
      *((unsigned char *)v2 + 32) = v22;
      return v2;
    }
  }
  else
  {
    char v24 = &v18;
    unsigned __int8 v7 = alloca(32);
    uint64_t v8 = alloca(32);
    uint64_t v21 = 0;
    uint64_t v20 = (uint64_t)closure #1 in CMLModel.init(name:);
    if ((v4 & 0x2000000000000000) == 0)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = _StringObject.sharedUTF8.getter(v5, v4);
        uint64_t v10 = v17;
      }
      uint64_t v11 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v9, v10, (uint64_t (*)(uint64_t))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
      if (v1) {
        goto LABEL_9;
      }
      uint64_t v23 = v11;
      goto LABEL_11;
    }
    unint64_t v19 = v5;
    uint64_t v20 = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = specialized handling<A, B>(_:_:)((uint64_t)&v19);
    if (!v1)
    {
      if (!v12) {
        BUG();
      }
      uint64_t v23 = v12;
      swift_bridgeObjectRelease(v6);
      goto LABEL_14;
    }
  }
LABEL_9:
  swift_bridgeObjectRelease(v6);

  swift_bridgeObjectRelease(v2[5]);
  swift_deallocPartialClassInstance(v2, v21, 48, 7);
  return v2;
}

uint64_t _Model.init(type:parameters:modelOptions:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 48) = a3;
  *(void *)(v4 + 40) = a2;
  *(unsigned char *)(v4 + 108) = a1;
  *(void *)(v4 + 64) = *v3;
  return swift_task_switch(_Model.init(type:parameters:modelOptions:), 0, 0);
}

uint64_t _Model.init(type:parameters:modelOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(*(void *)(v7 + 56) + 40) = 0;
  *(_DWORD *)(v7 + 104) = static _PowerUtilities.createPowerAssertion()();
  char v30 = (uint64_t *)(v7 + 32);
  unint64_t v9 = ModelType.nameKey.getter(*(unsigned char *)(v7 + 108));
  uint64_t v10 = v8;
  if ((v8 & 0x1000000000000000) != 0 || !(v8 & 0x2000000000000000 | v9 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(name:), 0, v9, v8, &type metadata for OpaquePointer);
LABEL_8:
    swift_bridgeObjectRelease(v10);
    goto LABEL_11;
  }
  uint64_t v11 = swift_task_alloc(32);
  *(void *)(v11 + 24) = 0;
  uint64_t v28 = v11;
  *(void *)(v11 + 16) = closure #1 in CMLModel.init(name:);
  if ((v10 & 0x2000000000000000) == 0)
  {
    if ((v9 & 0x1000000000000000) != 0)
    {
      uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v12 = _StringObject.sharedUTF8.getter(v9, v10);
      uint64_t v13 = v27;
    }
    uint64_t *v30 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v12, v13, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    swift_task_dealloc(v28);
    goto LABEL_8;
  }
  *(void *)(v7 + 16) = v9;
  *(void *)(v7 + 24) = v10 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = specialized handling<A, B>(_:_:)(v7 + 16);
  if (!v14) {
    BUG();
  }
  uint64_t *v30 = v14;
  swift_bridgeObjectRelease(v10);
  swift_task_dealloc(v28);
LABEL_11:
  uint64_t v15 = *(void *)(v7 + 32);
  uint64_t v16 = *(void *)(v7 + 48);
  uint64_t v17 = type metadata accessor for CMLModel();
  uint64_t v18 = swift_allocObject(v17, 24, 7);
  *(void *)(v7 + 72) = v18;
  *(void *)(v18 + 16) = v15;
  if (v16)
  {
    swift_retain();
    CMLModel.initialize(options:)(v16);
    swift_release();
  }
  if (AnalyticsReporter.init()())
  {
    CMLModel.callFunction(name:arguments:)(5, *(void *)(v7 + 40));
    swift_release();
  }
  else
  {
    v19._uint64_t countAndFlagsBits = ModelType.nameKey.getter(*(unsigned char *)(v7 + 108));
    v19._char object = v20;
    v21.CreateML::ModelType value = ModelType.init(nameKey:)(v19).value;
    if (v21.value == CreateML_ModelType_unknownDefault) {
      BUG();
    }
    CreateML::ModelType value = v21.value;
    uint64_t v23 = *(void *)(v7 + 40);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v24._char object = &dword_0 + 2;
    v24._uint64_t countAndFlagsBits = value;
    AnalyticsReporter.reportTemplateUsed(model:mode:)(v24);
    CMLModel.callFunction(name:arguments:)(5, v23);
    swift_release();
    AnalyticsReporter.reportEventDuration(model:task:startTime:)(value, (Swift::String)__PAIR128__(0xE800000000000000, 0x676E696E69617254), Current);
  }
  uint64_t v25 = (void *)swift_task_alloc(dword_3A841C);
  *(void *)(v7 + 80) = v25;
  *uint64_t v25 = v7;
  v25[1] = _Model.init(type:parameters:modelOptions:);
  return CMLModel.compile()(_Model.init(type:parameters:modelOptions:));
}

uint64_t _Model.init(type:parameters:modelOptions:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 80);
  uint64_t v6 = *v2;
  *(void *)(v6 + 88) = a1;
  *(void *)(v6 + 96) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = _Model.init(type:parameters:modelOptions:);
  }
  else {
    uint64_t v4 = _Model.init(type:parameters:modelOptions:);
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t _Model.init(type:parameters:modelOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void **)(v0 + 88);
  IOPMAssertionID v4 = *(_DWORD *)(v0 + 104);
  *(void *)(v2 + 24) = v3;
  v3;
  static _PowerUtilities.endPowerAssertion(from:)(v4);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void **)(v0 + 88);
  if (v1)
  {
    swift_release();

    swift_release();
    swift_release();

    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_bridgeObjectRelease(*(void *)(v7 + 40));
    swift_deallocPartialClassInstance(v7, v8, 48, 7);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 56);
    char v11 = *(unsigned char *)(v0 + 108);
    swift_release();

    swift_release();
    *(void *)(v9 + 16) = v5;
    *(unsigned char *)(v9 + 32) = v11;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_release(*(void *)(v0 + 40));
  swift_release(v1);
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 56);
  IOPMAssertionID v4 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease(*(void *)(v3 + 40));
  swift_deallocPartialClassInstance(v3, v4, 48, 7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _Model.deinit()
{
  swift_release(*(void *)(v0 + 16));

  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t _Model.__deallocating_deinit()
{
  _Model.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for _Model()
{
  return objc_opt_self(_TtC8CreateML6_Model);
}

void outlined consume of _Model.Output(void *a1, void *a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 0:
    case 1:
      outlined consume of Result<_DataTable, Error>((uint64_t)a1, a2 & 1);
      break;
    case 2:
      outlined consume of MLDataValue(a1, a2, a3 & 0x1F);
      break;
    case 3:
      swift_bridgeObjectRelease((_BYTE)a2);
      break;
    case 5:
    case 6:
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t specialized MLDataValueConvertible.featureValue.getter(uint64_t a1, uint64_t a2)
{
  v7[3] = &type metadata for String;
  void v7[4] = &protocol witness table for String;
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_0Tm(v7, (uint64_t)&type metadata for String);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = CMLFeatureValue.__allocating_init(_:)(v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  return v5;
}

uint64_t specialized _UntypedColumn.init<A>(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CMLColumn();
  uint64_t v5 = specialized MLDataValueConvertible.featureValue.getter(a1, a2);
  uint64_t v6 = CMLColumn.__allocating_init(repeating:count:)(v5, a3);
  swift_bridgeObjectRelease(a2);
  *(void *)(v3 + 16) = v6;
  return v3;
}

uint64_t (*MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify(uint64_t a1))()
{
  swift_beginAccess(OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters + v1, a1, 33, 0);
  return HandPoseClassifierTrainingSessionDelegate.sourceTable.modify;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  strcpy((char *)(v1 + 16), "style_transfer");
  *(unsigned char *)(v1 + 31) = -18;
  uint64_t v2 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  uint64_t v3 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  uint64_t v20 = v2;
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v5 = empty;
  uint64_t v6 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args;
  uint64_t v7 = type metadata accessor for CMLParameters();
  uint64_t v8 = swift_allocObject(v7, 24, 7);
  *(void *)(v8 + 16) = v5;
  uint64_t v18 = v6;
  *(void *)(v1 + v6) = v8;
  uint64_t v9 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  outlined init with copy of MLTrainingSessionParameters(a1, v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  strcpy(v17, "style_transfer");
  v17[15] = 0;
  uint64_t v10 = v19;
  uint64_t v11 = specialized handling<A, B>(_:_:)((uint64_t)v17);
  uint64_t v19 = v10;
  if (v10)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(a1, type metadata accessor for MLTrainingSessionParameters);
    swift_bridgeObjectRelease(*(void *)(v1 + 24));
    outlined destroy of MLActivityClassifier.ModelParameters(v9, type metadata accessor for MLTrainingSessionParameters);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v20, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    swift_release();
    uint64_t v12 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(0);
    swift_deallocPartialClassInstance(v1, v12, *(unsigned int *)(*(void *)v1 + 48), *(unsigned __int16 *)(*(void *)v1 + 52));
  }
  else
  {
    uint64_t v20 = a1;
    if (!v11) {
      BUG();
    }
    uint64_t v13 = v11;
    uint64_t v14 = type metadata accessor for CMLModel();
    uint64_t v15 = swift_allocObject(v14, 24, 7);
    *(void *)(v15 + 16) = v13;
    outlined destroy of MLActivityClassifier.ModelParameters(v20, type metadata accessor for MLTrainingSessionParameters);
    *(void *)(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v15;
  }
  return v1;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = v3;
  uint64_t v60 = a3;
  uint64_t v67 = a2;
  uint64_t v64 = a1;
  uint64_t v5 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  int64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v63 = v54;
  uint64_t v56 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  int64_t v9 = *(void *)(*(void *)(v56 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  int64_t v12 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v58 = v54;
  int64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v57 = v54;
  strcpy((char *)(v4 + 16), "style_transfer");
  *(unsigned char *)(v4 + 31) = -18;
  uint64_t v18 = v4;
  uint64_t v65 = v4 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  uint64_t v66 = (int *)v5;
  __swift_storeEnumTagSinglePayload(v4 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, 1, 1, v5);
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v20 = empty;
  uint64_t v21 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args;
  uint64_t v22 = type metadata accessor for CMLParameters();
  uint64_t v23 = swift_allocObject(v22, 24, 7);
  *(void *)(v23 + 16) = v20;
  uint64_t v59 = v21;
  uint64_t v61 = v18;
  *(void *)(v18 + v21) = v23;
  uint64_t v24 = (uint64_t)v58;
  outlined init with copy of MLTrainingSessionParameters(v64, (uint64_t)v58, type metadata accessor for MLStyleTransfer.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v67, (uint64_t)v54, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v25 = v24;
  uint64_t v26 = (uint64_t)v63;
  outlined init with take of MLClassifierMetrics(v25, (uint64_t)v63, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v27 = v66;
  *(unsigned char *)(v26 + v66[5]) = v54[0];
  uint64_t v28 = (int *)v56;
  *(void *)(v26 + v27[7]) = 4 * (*(void *)((char *)v54 + *(int *)(v56 + 32)) / 4);
  *(void *)(v26 + v27[8]) = *(void *)((char *)v54 + v28[9]);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v54 + v28[5], v26 + v27[6], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  LOBYTE(v28) = *((unsigned char *)v54 + v28[10]);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v54, type metadata accessor for MLStyleTransfer.ModelParameters);
  *(unsigned char *)(v26 + v27[9]) = (_BYTE)v28;
  uint64_t v29 = (uint64_t)v57;
  outlined init with take of MLClassifierMetrics(v26, (uint64_t)v57, type metadata accessor for MLStyleTransfer.PersistentParameters);
  __swift_storeEnumTagSinglePayload(v29, 0, 1, (uint64_t)v27);
  uint64_t v30 = v65;
  swift_beginAccess(v65, v54, 33, 0);
  outlined assign with take of MLStyleTransfer.PersistentParameters?(v29, v30);
  swift_endAccess(v54);
  uint64_t v31 = v61;
  uint64_t v63 = (void *)(v61 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters);
  outlined init with copy of MLTrainingSessionParameters(v60, v61 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 + 16);
  uint64_t v34 = *(void *)(v32 + 24);
  if ((v34 & 0x1000000000000000) != 0 || !(v34 & 0x2000000000000000 | v33 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain(v34);
    uint64_t v52 = v62;
    _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(name:), 0, v33, v34, &type metadata for OpaquePointer);
    if (!v52)
    {
      uint64_t v65 = 0;
      swift_bridgeObjectRelease(v34);
      uint64_t v47 = v55;
LABEL_12:
      uint64_t v48 = v67;
LABEL_15:
      uint64_t v49 = type metadata accessor for CMLModel();
      uint64_t v50 = swift_allocObject(v49, 24, 7);
      *(void *)(v50 + 16) = v47;
      outlined destroy of MLActivityClassifier.ModelParameters(v60, type metadata accessor for MLTrainingSessionParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v48, type metadata accessor for MLStyleTransfer.ModelParameters);
      outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLStyleTransfer.DataSource);
      uint64_t v45 = v61;
      *(void *)(v61 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v50;
      return v45;
    }
  }
  else
  {
    uint64_t v66 = (int *)v54;
    Swift::Bool v35 = alloca(32);
    char v36 = alloca(32);
    uint64_t v55 = 0;
    v54[2] = closure #1 in CMLModel.init(name:);
    if ((v34 & 0x2000000000000000) == 0)
    {
      if ((v33 & 0x1000000000000000) != 0)
      {
        uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v38 = v33 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v37 = _StringObject.sharedUTF8.getter(v33, v34);
        uint64_t v38 = v53;
      }
      swift_bridgeObjectRetain(v34);
      uint64_t v39 = v62;
      uint64_t v40 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v37, v38, (uint64_t (*)(uint64_t))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
      if (v39) {
        goto LABEL_10;
      }
      uint64_t v47 = v40;
      uint64_t v65 = 0;
      swift_bridgeObjectRelease(v34);
      goto LABEL_12;
    }
    v54[0] = v33;
    v54[1] = v34 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(v34);
    uint64_t v41 = v62;
    uint64_t v42 = specialized handling<A, B>(_:_:)((uint64_t)v54);
    if (!v41)
    {
      uint64_t v47 = v42;
      uint64_t v65 = 0;
      uint64_t v48 = v67;
      if (!v42) {
        BUG();
      }
      swift_bridgeObjectRelease(v34);
      goto LABEL_15;
    }
  }
LABEL_10:
  swift_bridgeObjectRelease(v34);
  uint64_t v43 = v64;
  uint64_t v44 = v67;
  outlined destroy of MLActivityClassifier.ModelParameters(v60, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v44, type metadata accessor for MLStyleTransfer.ModelParameters);
  outlined destroy of MLActivityClassifier.ModelParameters(v43, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v45 = v61;
  swift_bridgeObjectRelease(*(void *)(v61 + 24));
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v63, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v65, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  swift_release();
  uint64_t v46 = type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(0);
  swift_deallocPartialClassInstance(v45, v46, *(unsigned int *)(*(void *)v45 + 48), *(unsigned __int16 *)(*(void *)v45 + 52));
  return v45;
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLStyleTransfer.TrainingSessionDelegate.setUp()()
{
  uint64_t v233 = v0;
  uint64_t v212 = type metadata accessor for _Model.Parameters(0);
  int64_t v2 = *(void *)(*(void *)(v212 - 8) + 64);
  uint64_t v3 = alloca(v2);
  uint64_t v4 = alloca(v2);
  uint64_t v211 = &v202;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v202 = (uint64_t)&v202;
  uint64_t v224 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  int64_t v8 = *(void *)(*(void *)(v224 - 8) + 64);
  int64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v204 = &v202;
  uint64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  uint64_t v209 = &v202;
  uint64_t v13 = alloca(v8);
  uint64_t v14 = alloca(v8);
  uint64_t v203 = &v202;
  int64_t v15 = alloca(v8);
  uint64_t v16 = alloca(v8);
  Swift::Int v235 = &v202;
  uint64_t v17 = alloca(v8);
  uint64_t v18 = alloca(v8);
  uint64_t v226 = &v202;
  int64_t v19 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v20 = alloca(v19);
  uint64_t v21 = alloca(v19);
  uint64_t v219 = &v202;
  uint64_t v22 = alloca(v19);
  uint64_t v23 = alloca(v19);
  uint64_t v232 = &v202;
  uint64_t v24 = alloca(v19);
  uint64_t v25 = alloca(v19);
  Swift::String v241 = &v202;
  int64_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  unint64_t v210 = &v202;
  uint64_t v29 = alloca(v26);
  uint64_t v30 = alloca(v26);
  uint64_t v229 = &v202;
  uint64_t v31 = alloca(v26);
  uint64_t v32 = alloca(v26);
  Swift::String v228 = &v202;
  uint64_t v33 = alloca(v26);
  uint64_t v34 = alloca(v26);
  uint64_t v243 = &v202;
  uint64_t v213 = type metadata accessor for MLTrainingSessionParameters(0);
  int64_t v35 = *(void *)(*(void *)(v213 - 8) + 64);
  char v36 = alloca(v35);
  uint64_t v37 = alloca(v35);
  long long v244 = &v202;
  uint64_t v245 = type metadata accessor for URL(0);
  uint64_t v231 = *(void *)(v245 - 8);
  int64_t v38 = *(void *)(v231 + 64);
  uint64_t v39 = alloca(v38);
  uint64_t v40 = alloca(v38);
  uint64_t v227 = &v202;
  uint64_t v41 = alloca(v38);
  uint64_t v42 = alloca(v38);
  uint64_t v225 = &v202;
  uint64_t v43 = alloca(v38);
  uint64_t v44 = alloca(v38);
  uint64_t v230 = &v202;
  uint64_t v45 = alloca(v38);
  uint64_t v46 = alloca(v38);
  char v237 = &v202;
  uint64_t v47 = alloca(v38);
  uint64_t v48 = alloca(v38);
  uint64_t v217 = &v202;
  uint64_t v49 = alloca(v38);
  uint64_t v50 = alloca(v38);
  Swift::String v238 = &v202;
  Swift::Int v51 = alloca(v38);
  uint64_t v52 = alloca(v38);
  uint64_t v234 = &v202;
  uint64_t v53 = alloca(v38);
  char v54 = alloca(v38);
  int v240 = &v202;
  int64_t v55 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v56 = alloca(v55);
  uint64_t v57 = alloca(v55);
  uint64_t v205 = &v202;
  uint64_t v58 = alloca(v55);
  uint64_t v59 = alloca(v55);
  char v206 = &v202;
  uint64_t v60 = alloca(v55);
  uint64_t v61 = alloca(v55);
  uint64_t v62 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  int64_t v63 = *(void *)(*(void *)(v62 - 8) + 64);
  uint64_t v64 = alloca(v63);
  uint64_t v65 = alloca(v63);
  uint64_t v208 = &v202;
  uint64_t v66 = alloca(v63);
  uint64_t v67 = alloca(v63);
  uint64_t v236 = &v202;
  uint64_t v68 = objc_opt_self(NSFileManager);
  id v69 = [v68 defaultManager];
  id v242 = v69;
  uint64_t v216 = v1;
  uint64_t v70 = v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v1 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, v249, 0, 0);
  uint64_t v207 = v70;
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v70, (uint64_t)&v202);
  uint64_t v218 = (int *)v62;
  if (__swift_getEnumTagSinglePayload((uint64_t)&v202, 1, v62) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v202, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    uint64_t v71 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v71, 0, 0);
    *(void *)uint64_t v72 = 0xD000000000000061;
    *(void *)(v72 + 8) = "tylized validation result" + 0x8000000000000000;
    *(_OWORD *)(v72 + 16) = 0;
    *(_OWORD *)(v72 + 32) = 0;
    *(unsigned char *)(v72 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v71, v72, v73, v74, v75);

    return;
  }
  int64_t v239 = v236;
  outlined init with take of MLClassifierMetrics((uint64_t)&v202, (uint64_t)v236, type metadata accessor for MLStyleTransfer.PersistentParameters);
  uint64_t v76 = v216 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  uint64_t v77 = (uint64_t)v244;
  outlined init with copy of MLTrainingSessionParameters(v216 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t)v244, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v78 = v77;
  uint64_t v79 = (uint64_t)v243;
  outlined init with take of DataFrame?(v78, (uint64_t)v243, &demangling cache variable for type metadata for URL?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v79, 1, v245);
  uint64_t v214 = v76;
  if (EnumTagSinglePayload == 1)
  {
    uint64_t v81 = NSTemporaryDirectory();
    uint64_t v82 = v81;
    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    uint64_t v85 = v84;

    URL.init(fileURLWithPath:isDirectory:)(v83, v85, 1);
    swift_bridgeObjectRelease(v85);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v243, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v231 + 32))(v240, v243, v245);
  }
  uint64_t v86 = v234;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000010, "Content column doesn't exist" + 0x8000000000000000, 1);
  URL.path.getter(0xD000000000000010);
  char v88 = v87;
  NSString v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v88);
  unsigned __int8 v90 = [v242 fileExistsAtPath:v89];

  if (!v90)
  {
    URL._bridgeToObjectiveC()(v91);
    uint64_t v93 = v92;
    uint64_t v247 = 0;
    unsigned __int8 v94 = [v242 createDirectoryAtURL:v92 withIntermediateDirectories:0 attributes:0 error:&v247];

    unint64_t v95 = v247;
    if (!v94)
    {
      uint64_t v156 = v247;
      _convertNSErrorToError(_:)(v95);

      swift_willThrow(v156, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v157, v158, v159, v160);
      uint64_t v120 = *(uint64_t **)(v231 + 8);
      uint64_t v121 = v86;
      uint64_t v119 = v245;
      goto LABEL_19;
    }
    v247;
  }
  char v96 = v217;
  URL.appendingPathComponent(_:)(0x656C797473, 0xE500000000000000);
  URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
  uint64_t v243 = *(uint64_t **)(v231 + 8);
  ((void (*)(uint64_t *, uint64_t))v243)(v96, v245);
  URL.appendingPathComponent(_:isDirectory:)(0x746E65746E6F63, 0xE700000000000000, 1);
  URL.path.getter(0x746E65746E6F63);
  LOBYTE(v96) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((_BYTE)v96);
  LOBYTE(v96) = [v242 fileExistsAtPath:v98];

  if (!(_BYTE)v96)
  {
    URL._bridgeToObjectiveC()(v99);
    long long v101 = v100;
    uint64_t v247 = 0;
    id v102 = v242;
    unsigned __int8 v103 = [v242 createDirectoryAtURL:v100 withIntermediateDirectories:0 attributes:0 error:&v247];

    Swift::String v104 = v247;
    if (!v103)
    {
      uint64_t v163 = v247;
      _convertNSErrorToError(_:)(v104);

      swift_willThrow(v163, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v164, v165, v166, v167);
      uint64_t v168 = v245;
      uint64_t v169 = v243;
      ((void (*)(uint64_t *, uint64_t))v243)(v237, v245);
      ((void (*)(uint64_t *, uint64_t))v169)(v238, v168);
      ((void (*)(uint64_t *, uint64_t))v169)(v234, v168);
      ((void (*)(uint64_t *, uint64_t))v169)(v240, v168);
      goto LABEL_20;
    }
    v247;
  }
  uint64_t v105 = (uint64_t)v239;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v239, (uint64_t)v241, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v106 = v218;
  uint64_t v220 = v218[5];
  LOBYTE(v244) = *(unsigned char *)(v105 + v220);
  int64_t v107 = (int *)v224;
  uint64_t v108 = v226;
  uint64_t v109 = (uint64_t)v226 + *(int *)(v224 + 20);
  uint64_t v236 = (uint64_t *)((char *)v236 + v218[6]);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v236, v109, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v221 = v106[7];
  uint64_t v110 = *(void *)(v105 + v221);
  uint64_t v222 = v106[8];
  uint64_t v111 = *(void *)(v105 + v222);
  *(uint64_t *)((char *)v108 + v107[6]) = 1;
  uint64_t v112 = v107[10];
  *(unsigned char *)uint64_t v108 = (_BYTE)v244;
  *(uint64_t *)((char *)v108 + v107[7]) = 500;
  *(uint64_t *)((char *)v108 + v107[8]) = v110;
  *(uint64_t *)((char *)v108 + v107[9]) = v111;
  uint64_t v223 = v106[9];
  *((unsigned char *)v108 + v112) = *(unsigned char *)(v105 + v223);
  long long v244 = (uint64_t *)(4 * (v110 / 4));
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v108, type metadata accessor for MLStyleTransfer.ModelParameters);
  char v113 = *(uint64_t **)(v231 + 16);
  int v114 = v228;
  uint64_t v115 = v245;
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v113)(v228, v238, v245);
  __swift_storeEnumTagSinglePayload((uint64_t)v114, 0, 1, v115);
  Swift::String v116 = v229;
  uint64_t v226 = v113;
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v113)(v229, v237, v115);
  __swift_storeEnumTagSinglePayload((uint64_t)v116, 0, 1, v115);
  uint64_t v117 = v225;
  uint64_t v118 = v233;
  MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)(v225, &v247, (uint64_t)v244, v114, v116);
  if (v118)
  {

    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v116, &demangling cache variable for type metadata for URL?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v114, &demangling cache variable for type metadata for URL?);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v241, type metadata accessor for MLStyleTransfer.DataSource);
    uint64_t v119 = v245;
    uint64_t v120 = v243;
    ((void (*)(uint64_t *, uint64_t))v243)(v237, v245);
    ((void (*)(uint64_t *, uint64_t))v120)(v238, v119);
    uint64_t v121 = v234;
LABEL_19:
    ((void (*)(uint64_t *, uint64_t))v120)(v121, v119);
    ((void (*)(uint64_t *, uint64_t))v120)(v240, v119);
LABEL_20:
    uint64_t v161 = type metadata accessor for MLStyleTransfer.PersistentParameters;
    uint64_t v162 = v239;
LABEL_21:
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v162, v161);
    return;
  }
  long long v244 = 0;
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v116, &demangling cache variable for type metadata for URL?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v114, &demangling cache variable for type metadata for URL?);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v241, type metadata accessor for MLStyleTransfer.DataSource);
  Swift::String v241 = v247;
  LOBYTE(v233) = v248;
  char v122 = v117;
  uint64_t v123 = v245;
  uint64_t v225 = *(uint64_t **)(v231 + 32);
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v225)(v230, v122, v245);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  uint64_t v125 = (char *)v232 + *(int *)(v124 + 48);
  uint64_t v231 = *(int *)(v124 + 64);
  long long v126 = v226;
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v226)(v232, v238, v123);
  ((void (*)(char *, uint64_t *, uint64_t))v126)(v125, v237, v123);
  uint64_t v127 = (uint64_t)v239;
  uint64_t v128 = (uint64_t)v219;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v239, (uint64_t)v219, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v129 = v128 + *(int *)(v124 + 48);
  uint64_t v130 = *(int *)(v124 + 64);
  Swift::String v228 = *(uint64_t **)(v128 + v130);
  LOBYTE(v229) = *(unsigned char *)(v128 + v130 + 8);
  uint64_t v131 = v243;
  ((void (*)(uint64_t, uint64_t))v243)(v129, v123);
  ((void (*)(uint64_t, uint64_t))v131)(v128, v123);
  uint64_t v132 = v231;
  uint64_t v133 = (uint64_t)v232;
  *(uint64_t *)((char *)v232 + v231) = (uint64_t)v228;
  *(unsigned char *)(v133 + v132 + 8) = (_BYTE)v229;
  LOBYTE(v231) = *(unsigned char *)(v127 + v220);
  LOBYTE(v131) = v231;
  uint64_t v134 = (int *)v224;
  char v135 = v235;
  char v215 = (char *)v235 + *(int *)(v224 + 20);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v236, (uint64_t)v215, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v229 = *(uint64_t **)(v127 + v221);
  uint64_t v136 = v229;
  Swift::String v228 = *(uint64_t **)(v127 + v222);
  char v137 = v228;
  *(uint64_t *)((char *)v135 + v134[6]) = 1;
  uint64_t v138 = v134[10];
  *(unsigned char *)char v135 = (_BYTE)v131;
  *(uint64_t *)((char *)v135 + v134[7]) = 500;
  *(uint64_t *)((char *)v135 + v134[8]) = (uint64_t)v136;
  *(uint64_t *)((char *)v135 + v134[9]) = (uint64_t)v137;
  LOBYTE(v127) = *(unsigned char *)(v127 + v223);
  *((unsigned char *)v135 + v138) = v127;
  Swift::String v139 = v203;
  uint64_t v140 = (uint64_t)v203 + v134[5];
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v236, v140, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  *(uint64_t *)((char *)v139 + v134[6]) = 1;
  uint64_t v141 = v134[10];
  *(unsigned char *)Swift::String v139 = v231;
  *(uint64_t *)((char *)v139 + v134[7]) = 500;
  *(uint64_t *)((char *)v139 + v134[8]) = (uint64_t)v229;
  *(uint64_t *)((char *)v139 + v134[9]) = (uint64_t)v228;
  *((unsigned char *)v139 + v141) = v127;
  uint64_t v142 = v202;
  outlined init with take of MLClassifierMetrics(v140, v202, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  LODWORD(v140) = __swift_getEnumTagSinglePayload(v142, 1, v245);
  outlined destroy of MLActivityClassifier.ModelParameters(v142, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  if (v140 != 1)
  {
    Swift::String v143 = v217;
    URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEA00000000006E6FLL);
    URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
    ((void (*)(uint64_t *, uint64_t))v243)(v143, v245);
    uint64_t v144 = (uint64_t)v239;
    LOBYTE(v231) = *((unsigned char *)v239 + v220);
    int v145 = v209;
    uint64_t v146 = (uint64_t)v209 + v134[5];
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v236, v146, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v147 = *(void *)(v144 + v221);
    uint64_t v148 = *(void *)(v144 + v222);
    *(uint64_t *)((char *)v145 + v134[6]) = 1;
    uint64_t v149 = v134[10];
    *(unsigned char *)int v145 = v231;
    *(uint64_t *)((char *)v145 + v134[7]) = 500;
    *(uint64_t *)((char *)v145 + v134[8]) = v147;
    *(uint64_t *)((char *)v145 + v134[9]) = v148;
    *((unsigned char *)v145 + v149) = *(unsigned char *)(v144 + v223);
    uint64_t v150 = (uint64_t)v210;
    uint64_t v151 = v245;
    ((void (*)(uint64_t *, uint64_t *, uint64_t))v226)(v210, v227, v245);
    __swift_storeEnumTagSinglePayload(v150, 0, 1, v151);
    uint64_t v236 = (uint64_t *)v146;
    uint64_t v152 = (uint64_t)v244;
    MLStyleTransfer.ModelParameters.ValidationData.preprocessValidationData(to:)(v150);
    long long v244 = (uint64_t *)v152;
    if (v152)
    {
      outlined consume of Result<_DataTable, Error>((uint64_t)v241, v233);

      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v150, &demangling cache variable for type metadata for URL?);
      char v153 = v243;
      ((void (*)(uint64_t *, uint64_t))v243)(v227, v151);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v232, type metadata accessor for MLStyleTransfer.DataSource);
      ((void (*)(uint64_t *, uint64_t))v153)(v230, v151);
      ((void (*)(uint64_t *, uint64_t))v153)(v237, v151);
      ((void (*)(uint64_t *, uint64_t))v153)(v238, v151);
      ((void (*)(uint64_t *, uint64_t))v153)(v234, v151);
      ((void (*)(uint64_t *, uint64_t))v153)(v240, v151);
      outlined destroy of MLActivityClassifier.ModelParameters(v144, type metadata accessor for MLStyleTransfer.PersistentParameters);
      unint64_t v154 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData;
      uint64_t v155 = (uint64_t)v236;
      goto LABEL_17;
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v150, &demangling cache variable for type metadata for URL?);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v236, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v170 = v215;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v215, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    ((void (*)(unsigned char *, uint64_t *, uint64_t))v225)(v170, v227, v151);
    __swift_storeEnumTagSinglePayload((uint64_t)v170, 0, 1, v151);
  }
  uint64_t v171 = v235;
  uint64_t v172 = (uint64_t)v219;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v232, (uint64_t)v219, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v173 = v204;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v171, (uint64_t)v204, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v174 = (uint64_t)v208;
  outlined init with take of MLClassifierMetrics(v172, (uint64_t)v208, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v175 = v218;
  *(unsigned char *)(v174 + v218[5]) = *(unsigned char *)v173;
  uint64_t v176 = (int *)v224;
  *(void *)(v174 + v175[7]) = 4 * (*(uint64_t *)((char *)v173 + *(int *)(v224 + 32)) / 4);
  *(void *)(v174 + v175[8]) = *(uint64_t *)((char *)v173 + v176[9]);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v173 + v176[5], v174 + v175[6], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  LOBYTE(v176) = *((unsigned char *)v173 + v176[10]);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v173, type metadata accessor for MLStyleTransfer.ModelParameters);
  *(unsigned char *)(v174 + v175[9]) = (_BYTE)v176;
  uint64_t v177 = v174;
  uint64_t v178 = (uint64_t)v206;
  outlined init with take of MLClassifierMetrics(v177, (uint64_t)v206, type metadata accessor for MLStyleTransfer.PersistentParameters);
  __swift_storeEnumTagSinglePayload(v178, 0, 1, (uint64_t)v175);
  uint64_t v179 = (uint64_t)v205;
  outlined init with take of DataFrame?(v178, (uint64_t)v205, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  uint64_t v180 = v207;
  swift_beginAccess(v207, &v247, 33, 0);
  outlined assign with take of MLStyleTransfer.PersistentParameters?(v179, v180);
  swift_endAccess(&v247);
  uint64_t v247 = v241;
  char v248 = v233 & 1;
  uint64_t v181 = (uint64_t)v230;
  uint64_t v182 = (uint64_t)v244;
  uint64_t v183 = static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)(v235, (uint64_t)v230, (uint64_t)&v247);
  char v184 = v237;
  if (!v182)
  {
    uint64_t v188 = v183;
    uint64_t v191 = CMLParameters.featureValue(for:)(47);
    uint64_t v236 = (uint64_t *)v188;
    uint64_t v192 = specialized handling<A, B>(_:_:)(*(void *)(v191 + 16));
    long long v244 = 0;
    uint64_t v193 = v192;
    if (!v192) {
      BUG();
    }
    swift_release();
    uint64_t v194 = type metadata accessor for CMLDictionary();
    uint64_t inited = swift_initStackObject(v194, v246);
    *(void *)(inited + 16) = v193;
    uint64_t v196 = (uint64_t)v211;
    *uint64_t v211 = *(void *)(v214 + *(int *)(v213 + 20));
    swift_storeEnumTagMultiPayload(v196, v212, 20);
    CMLDictionary.add(_:)(v196);
    outlined destroy of MLActivityClassifier.ModelParameters(v196, type metadata accessor for _Model.Parameters);
    type metadata accessor for CMLFeatureValue();
    swift_retain();
    uint64_t v197 = (uint64_t)v244;
    uint64_t v198 = CMLFeatureValue.__allocating_init(_:)(inited);
    if (v197)
    {
      swift_release();
      outlined consume of Result<_DataTable, Error>((uint64_t)v241, v233);
      swift_release();

      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v232, type metadata accessor for MLStyleTransfer.DataSource);
      uint64_t v189 = v245;
      uint64_t v190 = v243;
      ((void (*)(uint64_t *, uint64_t))v243)(v230, v245);
      ((void (*)(uint64_t *, uint64_t))v190)(v237, v189);
      ((void (*)(uint64_t *, uint64_t))v190)(v238, v189);
      ((void (*)(uint64_t *, uint64_t))v190)(v234, v189);
      ((void (*)(uint64_t *, uint64_t))v190)(v240, v189);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v239, type metadata accessor for MLStyleTransfer.PersistentParameters);
      uint64_t v161 = type metadata accessor for MLStyleTransfer.ModelParameters;
      uint64_t v162 = v235;
      goto LABEL_21;
    }
    uint64_t v199 = (uint64_t)v236;
    CMLParameters.add(key:featureValue:)(47, v198);
    swift_release();
    swift_retain();
    CMLModel.callFunction(name:arguments:)(0, v199);
    long long v244 = 0;
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Result<_DataTable, Error>((uint64_t)v241, v233);
    swift_release();

    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v232, type metadata accessor for MLStyleTransfer.DataSource);
    uint64_t v200 = v245;
    uint64_t v201 = v243;
    ((void (*)(uint64_t *, uint64_t))v243)(v230, v245);
    ((void (*)(uint64_t *, uint64_t))v201)(v237, v200);
    ((void (*)(uint64_t *, uint64_t))v201)(v238, v200);
    ((void (*)(uint64_t *, uint64_t))v201)(v234, v200);
    ((void (*)(uint64_t *, uint64_t))v201)(v240, v200);
    unint64_t v154 = type metadata accessor for MLStyleTransfer.PersistentParameters;
    uint64_t v155 = (uint64_t)v239;
LABEL_17:
    outlined destroy of MLActivityClassifier.ModelParameters(v155, v154);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v235, type metadata accessor for MLStyleTransfer.ModelParameters);
    return;
  }

  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v232, type metadata accessor for MLStyleTransfer.DataSource);
  uint64_t v185 = v181;
  uint64_t v186 = v245;
  uint64_t v187 = v243;
  ((void (*)(uint64_t, uint64_t))v243)(v185, v245);
  ((void (*)(uint64_t *, uint64_t))v187)(v184, v186);
  ((void (*)(uint64_t *, uint64_t))v187)(v238, v186);
  ((void (*)(uint64_t *, uint64_t))v187)(v234, v186);
  ((void (*)(uint64_t *, uint64_t))v187)(v240, v186);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v239, type metadata accessor for MLStyleTransfer.PersistentParameters);
  outlined consume of Result<_DataTable, Error>((uint64_t)v241, v233);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v235, type metadata accessor for MLStyleTransfer.ModelParameters);
}

Swift::Void __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLStyleTransfer.TrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v176 = v1;
  uint64_t v185 = v2;
  uint64_t rawValue = from._rawValue;
  int64_t v3 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.DataSource(0) - 8) + 64);
  uint64_t v4 = alloca(v3);
  int64_t v5 = alloca(v3);
  uint64_t v169 = v158;
  int64_t v6 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?)
                             - 8)
                 + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  uint64_t v191 = v158;
  uint64_t v189 = type metadata accessor for MLCheckpoint(0);
  int64_t v9 = *(void *)(*(void *)(v189 - 8) + 64);
  uint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v188 = v158;
  int64_t v12 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                              - 8)
                  + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v190 = (uint64_t (*)())v158;
  int64_t v15 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v164 = v158;
  uint64_t v193 = type metadata accessor for URL(0);
  uint64_t v194 = *(void **)(v193 - 8);
  int64_t v18 = v194[8];
  int64_t v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v170 = v158;
  uint64_t v21 = alloca(v18);
  uint64_t v22 = alloca(v18);
  uint64_t v177 = v158;
  uint64_t v23 = alloca(v18);
  uint64_t v24 = alloca(v18);
  uint64_t v171 = v158;
  uint64_t v25 = alloca(v18);
  int64_t v26 = alloca(v18);
  uint64_t v183 = v158;
  uint64_t v27 = alloca(v18);
  uint64_t v28 = alloca(v18);
  uint64_t v187 = v158;
  uint64_t v29 = alloca(v18);
  uint64_t v30 = alloca(v18);
  uint64_t v168 = v158;
  uint64_t v31 = alloca(v18);
  uint64_t v32 = alloca(v18);
  uint64_t v167 = v158;
  uint64_t v33 = alloca(v18);
  uint64_t v34 = alloca(v18);
  uint64_t v182 = v158;
  int64_t v35 = alloca(v18);
  char v36 = alloca(v18);
  uint64_t v175 = v158;
  uint64_t v174 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  int64_t v37 = *(void *)(*(void *)(v174 - 8) + 64);
  int64_t v38 = alloca(v37);
  uint64_t v39 = alloca(v37);
  uint64_t v172 = v158;
  uint64_t v40 = alloca(v37);
  uint64_t v41 = alloca(v37);
  uint64_t v180 = v158;
  uint64_t v42 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  int64_t v43 = *(void *)(*((void *)v42 - 1) + 64);
  uint64_t v44 = alloca(v43);
  uint64_t v45 = alloca(v43);
  char v184 = v158;
  uint64_t v46 = alloca(v43);
  uint64_t v47 = alloca(v43);
  int64_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v49 = alloca(v48);
  uint64_t v50 = alloca(v48);
  uint64_t v165 = v158;
  Swift::Int v51 = alloca(v48);
  uint64_t v52 = alloca(v48);
  int64_t v53 = *(void *)(*(void *)(type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0) - 8)
                  + 64);
  char v54 = alloca(v53);
  int64_t v55 = alloca(v53);
  uint64_t v163 = v158;
  uint64_t v56 = v185 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v185 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, v158, 0, 0);
  uint64_t v166 = v56;
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v56, (uint64_t)v158);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v158, 1, (uint64_t)v42);
  uint64_t v181 = v42;
  if (EnumTagSinglePayload)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v158, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    uint64_t v58 = v193;
    uint64_t v59 = (uint64_t)v191;
LABEL_3:
    uint64_t v60 = v189;
    goto LABEL_7;
  }
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v158, (uint64_t)v158, type metadata accessor for MLStyleTransfer.PersistentParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v158, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  char v192 = v158[v42[5]];
  uint64_t v61 = &v158[v42[6]];
  uint64_t v62 = (int *)v174;
  int64_t v63 = v180;
  uint64_t v173 = &v180[*(int *)(v174 + 20)];
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v61, (uint64_t)v173, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v64 = *(void *)&v158[v42[7]];
  uint64_t v65 = *(void *)&v158[v42[8]];
  *(void *)&v63[v62[6]] = 1;
  uint64_t v66 = v62[10];
  *int64_t v63 = v192;
  *(void *)&v63[v62[7]] = 500;
  *(void *)&v63[v62[8]] = v64;
  *(void *)&v63[v62[9]] = v65;
  v63[v66] = v158[v42[9]];
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v158, type metadata accessor for MLStyleTransfer.PersistentParameters);
  uint64_t v67 = (uint64_t)v163;
  outlined init with take of MLClassifierMetrics((uint64_t)v173, (uint64_t)v163, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v68 = v193;
  int v69 = __swift_getEnumTagSinglePayload(v67, 1, v193);
  outlined destroy of MLActivityClassifier.ModelParameters(v67, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  BOOL v70 = v69 == 1;
  uint64_t v58 = v68;
  uint64_t v59 = (uint64_t)v191;
  uint64_t v60 = v189;
  if (!v70)
  {
    uint64_t v71 = (uint64_t)v164;
    outlined init with copy of MLTrainingSessionParameters(v185 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, (uint64_t)v164, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v72 = v71;
    uint64_t v73 = (uint64_t)v190;
    outlined init with take of DataFrame?(v72, (uint64_t)v190, &demangling cache variable for type metadata for URL?);
    if (__swift_getEnumTagSinglePayload(v73, 1, v58) != 1)
    {
      uint64_t v104 = (uint64_t)v194;
      ((void (*)(unsigned char *, uint64_t (*)(), uint64_t))v194[4])(v175, v190, v58);
      uint64_t v105 = v168;
      URL.appendingPathComponent(_:isDirectory:)(0xD000000000000010, "Content column doesn't exist" + 0x8000000000000000, 1);
      uint64_t v106 = v167;
      URL.appendingPathComponent(_:)(0x69746164696C6176, 0xEA00000000006E6FLL);
      int64_t v107 = *(void (**)(unsigned char *, uint64_t))(v104 + 8);
      uint64_t v108 = v105;
      uint64_t v109 = v193;
      v107(v108, v193);
      URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
      v107(v106, v109);
      uint64_t v190 = MLStyleTransfer.TrainingSessionDelegate.trainingParameters.modify((uint64_t)&v161);
      uint64_t v111 = v110;
      uint64_t v112 = v181;
      if (!__swift_getEnumTagSinglePayload(v110, 1, (uint64_t)v181))
      {
        uint64_t v113 = v112[6] + v111;
        outlined destroy of MLActivityClassifier.ModelParameters(v113, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
        ((void (*)(uint64_t, unsigned char *, uint64_t))v194[2])(v113, v182, v109);
        __swift_storeEnumTagSinglePayload(v113, 0, 1, v109);
      }
      ((void (*)(void **, void))v190)(&v161, 0);
      uint64_t v58 = v109;
      uint64_t v59 = (uint64_t)v191;
      v107(v182, v109);
      v107(v175, v109);
      goto LABEL_3;
    }
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v190, &demangling cache variable for type metadata for URL?);
  }
LABEL_7:
  specialized BidirectionalCollection.last.getter((uint64_t)rawValue);
  if (__swift_getEnumTagSinglePayload(v59, 1, v60) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v59, &demangling cache variable for type metadata for MLCheckpoint?);
    uint64_t v74 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v74, 0, 0);
    *(void *)uint64_t v75 = 0xD00000000000001DLL;
    *(void *)(v75 + 8) = "reated." + 0x8000000000000000;
    *(_OWORD *)(v75 + 16) = 0;
    *(_OWORD *)(v75 + 32) = 0;
    *(unsigned char *)(v75 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v74, v75, v76, v77, v78);
    return;
  }
  uint64_t v79 = v60;
  unint64_t v80 = 0xEA0000000000676ELL;
  uint64_t v81 = v59;
  uint64_t v82 = (uint64_t)v188;
  outlined init with take of MLClassifierMetrics(v81, (uint64_t)v188, type metadata accessor for MLCheckpoint);
  switch(*(unsigned char *)(v82 + *(int *)(v79 + 20)))
  {
    case 0:
      uint64_t v83 = 0x696C616974696E69;
      unint64_t v80 = 0xEB0000000064657ALL;
      goto LABEL_15;
    case 1:
      uint64_t v83 = 0x6974636172747865;
      goto LABEL_15;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_16;
    case 3:
      uint64_t v83 = 0x697461756C617665;
      goto LABEL_15;
    case 4:
      unint64_t v80 = 0xEB00000000676E69;
      uint64_t v83 = 0x636E657265666E69;
LABEL_15:
      char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v80, 0x676E696E69617274, 0xE800000000000000, 0);
      swift_bridgeObjectRelease(v80);
      if ((v84 & 1) == 0)
      {
        uint64_t v96 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError(&type metadata for MLCreateError, v96, 0, 0);
        *(void *)uint64_t v97 = 0xD000000000000028;
        long long v101 = "";
        goto LABEL_36;
      }
LABEL_16:
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v194[2])(v187, v188, v58);
      uint64_t v86 = URL.absoluteString.getter();
      char v87 = v85;
      if ((v85 & 0x1000000000000000) != 0 || !(v85 & 0x2000000000000000 | v86 & 0x1000000000000000))
      {
        uint64_t v156 = v176;
        _StringGuts._slowWithCString<A>(_:)(closure #1 in CMLModel.init(url:), 0, v86, v85, &type metadata for OpaquePointer);
        if (v156) {
          goto LABEL_25;
        }
        swift_bridgeObjectRelease(v87);
        uint64_t v92 = v193;
      }
      else
      {
        char v88 = alloca(32);
        NSString v89 = alloca(32);
        v160[0] = 0;
        uint64_t v159 = closure #1 in CMLModel.init(url:);
        if ((v85 & 0x2000000000000000) == 0)
        {
          uint64_t v191 = v158;
          if ((v86 & 0x1000000000000000) != 0)
          {
            uint64_t v90 = (v85 & 0xFFFFFFFFFFFFFFFLL) + 32;
            uint64_t v91 = v86 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v90 = _StringObject.sharedUTF8.getter(v86, v85);
            uint64_t v91 = v157;
          }
          uint64_t v92 = v193;
          uint64_t v93 = (uint64_t)v194;
          uint64_t v94 = v176;
          uint64_t v95 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v90, v91, (uint64_t (*)(uint64_t))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
          if (v94) {
            goto LABEL_26;
          }
          uint64_t v178 = v95;
          swift_bridgeObjectRelease(v87);
          uint64_t v114 = v93;
          goto LABEL_34;
        }
        uint64_t v161 = (void *)v86;
        uint64_t v162 = v85 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v102 = v176;
        uint64_t v103 = specialized handling<A, B>(_:_:)((uint64_t)&v161);
        if (v102)
        {
LABEL_25:
          uint64_t v92 = v193;
          uint64_t v93 = (uint64_t)v194;
LABEL_26:
          (*(void (**)(unsigned char *, uint64_t))(v93 + 8))(v187, v92);
          swift_bridgeObjectRelease(v87);
          goto LABEL_37;
        }
        uint64_t v92 = v193;
        if (!v103) {
          BUG();
        }
        uint64_t v178 = v103;
        swift_bridgeObjectRelease(v87);
      }
      uint64_t v114 = (uint64_t)v194;
LABEL_34:
      uint64_t v115 = v178;
      uint64_t v191 = *(unsigned char **)(v114 + 8);
      ((void (*)(unsigned char *, uint64_t))v191)(v187, v92);
      uint64_t v116 = type metadata accessor for CMLModel();
      uint64_t v117 = swift_allocObject(v116, 24, 7);
      *(void *)(v117 + 16) = v115;
      uint64_t v189 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
      *(void *)(v185 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model) = v117;
      swift_release();
      uint64_t v118 = (uint64_t)v165;
      outlined init with copy of MLStyleTransfer.PersistentParameters?(v166, (uint64_t)v165);
      int v119 = __swift_getEnumTagSinglePayload(v118, 1, (uint64_t)v181);
      uint64_t v120 = (uint64_t)v184;
      if (v119 != 1)
      {
        outlined init with take of MLClassifierMetrics(v118, (uint64_t)v184, type metadata accessor for MLStyleTransfer.PersistentParameters);
        uint64_t v121 = (uint64_t)v169;
        outlined init with copy of MLTrainingSessionParameters(v120, (uint64_t)v169, type metadata accessor for MLStyleTransfer.DataSource);
        uint64_t v122 = v121;
        uint64_t v123 = v121
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?))
                      + 48);
        uint64_t v124 = v193;
        uint64_t v125 = (void *)v194[4];
        ((void (*)(unsigned char *, uint64_t, uint64_t))v125)(v177, v122, v193);
        uint64_t rawValue = 0;
        uint64_t v126 = (uint64_t)v170;
        uint64_t v194 = v125;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v125)(v170, v123, v124);
        uint64_t v127 = rawValue;
        static MLStyleTransfer.generateTrainingTable(directoryURL:)(v126);
        if (v127)
        {
          uint64_t v128 = v193;
          uint64_t v129 = (void (*)(unsigned char *, uint64_t))v191;
          ((void (*)(uint64_t, uint64_t))v191)(v126, v193);
          v129(v177, v128);
        }
        else
        {
          uint64_t v130 = v193;
          ((void (*)(uint64_t, uint64_t))v191)(v126, v193);
          uint64_t rawValue = v161;
          LODWORD(v187) = v162;
          uint64_t v131 = v171;
          uint64_t v132 = (void (*)(unsigned char *, unsigned char *, uint64_t))v194;
          ((void (*)(unsigned char *, unsigned char *, uint64_t))v194)(v171, v177, v130);
          v132(v183, v131, v130);
          uint64_t v133 = (uint64_t)rawValue;
          char v134 = (char)v187;
          uint64_t v178 = (uint64_t)rawValue;
          char v179 = v187 & 1;
          outlined copy of Result<_DataTable, Error>((uint64_t)rawValue, (char)v187);
          v135._char object = (void *)0xEB00000000734C52;
          v135._uint64_t countAndFlagsBits = 0x55746E65746E6F63;
          MLDataTable.subscript.getter(v135);
          outlined consume of Result<_DataTable, Error>(v133, v134);
          uint64_t v136 = (uint64_t)v161;
          if ((_BYTE)v162)
          {
            outlined consume of Result<_DataTable, Error>((uint64_t)v161, 1);
            uint64_t v137 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            swift_allocError(&type metadata for MLCreateError, v137, 0, 0);
            *(void *)uint64_t v138 = 0xD00000000000001CLL;
            *(void *)(v138 + 8) = "rt a new session." + 0x8000000000000000;
            *(_OWORD *)(v138 + 16) = 0;
            *(_OWORD *)(v138 + 32) = 0;
            *(unsigned char *)(v138 + 48) = 0;
            swift_willThrow(&type metadata for MLCreateError, v137, v138, v139, v140, v141);
            outlined consume of Result<_DataTable, Error>(v133, v134);
            uint64_t v142 = v183;
          }
          else
          {
            uint64_t v194 = (void *)*((void *)v161 + 2);
            swift_retain();
            outlined consume of Result<_DataTable, Error>(v136, 0);
            uint64_t v143 = URL.path.getter(v136);
            uint64_t v145 = v144;
            uint64_t v146 = type metadata accessor for _UntypedColumn();
            swift_initStackObject(v146, v160);
            uint64_t v180 = (unsigned char *)specialized _UntypedColumn.init<A>(repeating:count:)(v143, v145, 1);
            uint64_t v190 = (uint64_t (*)())*((void *)v180 + 2);
            uint64_t v185 = *(void *)(v185 + v189);
            uint64_t v147 = (uint64_t)v184;
            LOBYTE(v189) = v184[v181[5]];
            uint64_t v148 = (int *)v174;
            uint64_t v149 = v172;
            outlined init with copy of MLTrainingSessionParameters((uint64_t)&v184[v181[6]], (uint64_t)&v172[*(int *)(v174 + 20)], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
            uint64_t v150 = *(void *)(v147 + v181[7]);
            uint64_t v151 = v181;
            uint64_t v152 = *(void *)(v147 + v181[8]);
            *(void *)&v149[v148[6]] = 1;
            uint64_t v153 = v148[10];
            *uint64_t v149 = v189;
            *(void *)&v149[v148[7]] = 500;
            *(void *)&v149[v148[8]] = v150;
            *(void *)&v149[v148[9]] = v152;
            LODWORD(v189) = *(unsigned __int8 *)(v147 + v151[9]);
            v149[v153] = v189;
            uint64_t v154 = (uint64_t)v190;
            swift_retain();
            swift_retain();
            outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v149, type metadata accessor for MLStyleTransfer.ModelParameters);
            CMLModel.resume(style:content:device:)(v154, (uint64_t)v194, v189);
            uint64_t v155 = v183;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            outlined consume of Result<_DataTable, Error>((uint64_t)rawValue, (char)v187);
            uint64_t v142 = v155;
          }
          ((void (*)(unsigned char *, uint64_t))v191)(v142, v193);
        }
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v184, type metadata accessor for MLStyleTransfer.PersistentParameters);
        goto LABEL_37;
      }
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v118, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      uint64_t v96 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v96, 0, 0);
      *(void *)uint64_t v97 = 0xD000000000000061;
      long long v101 = "tylized validation result";
LABEL_36:
      *(void *)(v97 + 8) = (unint64_t)v101 | 0x8000000000000000;
      *(_OWORD *)(v97 + 16) = 0;
      *(_OWORD *)(v97 + 32) = 0;
      *(unsigned char *)(v97 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v96, v97, v98, v99, v100);
LABEL_37:
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v188, type metadata accessor for MLCheckpoint);
      return;
  }
}

uint64_t CMLModel.resume(style:content:device:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v27 = v4;
  int v28 = a3;
  uint64_t v29 = a2;
  uint64_t v26 = type metadata accessor for _Model.Parameters(0);
  int64_t v5 = *(void *)(*(void *)(v26 - 8) + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v25 = &v22;
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v9 = empty;
  uint64_t v10 = type metadata accessor for CMLParameters();
  uint64_t inited = swift_initStackObject(v10, v23);
  *(void *)(inited + 16) = v9;
  CMLParameters.add(key:column:)(71, a1);
  if (v3) {
    return swift_release();
  }
  CMLParameters.add(key:column:)(72, v29);
  uint64_t v12 = tc_v1_flex_dict_create(0);
  if (!v12) {
    BUG();
  }
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for CMLDictionary();
  uint64_t v15 = swift_initStackObject(v14, v24);
  BOOL v16 = (v28 & 1) == 0;
  *(void *)(v15 + 16) = v13;
  uint64_t v17 = 7696483;
  if (v16) {
    uint64_t v17 = 1869903201;
  }
  uint64_t v18 = (uint64_t)v25;
  *uint64_t v25 = v17;
  *(void *)(v18 + 8) = ((unint64_t)v16 << 56) - 0x1D00000000000000;
  swift_storeEnumTagMultiPayload(v18, v26, 9);
  CMLDictionary.add(_:)(v18);
  outlined destroy of MLActivityClassifier.ModelParameters(v18, type metadata accessor for _Model.Parameters);
  type metadata accessor for CMLFeatureValue();
  swift_retain();
  uint64_t v29 = v15;
  uint64_t v19 = CMLFeatureValue.__allocating_init(_:)(v15);
  CMLParameters.add(key:featureValue:)(47, v19);
  swift_release();
  CMLModel.callFunction(name:arguments:)(3, inited);
  swift_release();
  uint64_t v20 = v29;
  swift_setDeallocating(v29);
  tc_v1_release(*(void *)(v20 + 16));
  swift_setDeallocating(inited);
  return tc_v1_release(*(void *)(inited + 16));
}

Swift::Int_optional __swiftcall MLStyleTransfer.TrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  switch(*(unsigned char *)phase)
  {
    case 0:
    case 3:
    case 4:
      char v2 = 1;
      v3.CreateML::ModelType value = 0;
      break;
    case 1:
      v3.CreateML::ModelType value = 0;
      char v2 = 0;
      break;
    case 2:
      uint64_t v4 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters + v1;
      char v2 = 0;
      v3.CreateML::ModelType value = *(void *)(*(int *)(type metadata accessor for MLTrainingSessionParameters(0) + 28) + v4);
      break;
  }
  v3.Swift::Bool is_nil = v2;
  return v3;
}

double *MLStyleTransfer.TrainingSessionDelegate.saveImage(from:to:)(uint64_t a1, const __CFURL *a2)
{
  CFURLRef url = a2;
  uint64_t v3 = type metadata accessor for UTType(0);
  uint64_t v4 = *(void *)(v3 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  char v36 = &v35;
  uint64_t result = (double *)CMLMultiArray.data()();
  if (!v2)
  {
    uint64_t v37 = v4;
    uint64_t v38 = 0;
    uint64_t v41 = _swiftEmptyArrayStorage;
    uint64_t v44 = result;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&loc_C0000, 0);
    uint64_t v9 = v44;
    uint64_t v10 = *(uint64_t *)v44;
    if ((~*(void *)v44 & 0x7FF0000000000000) == 0) {
LABEL_18:
    }
      BUG();
    uint64_t v11 = 1;
    uint64_t v12 = (uint64_t)v41;
    uint64_t v39 = v3;
    while (1)
    {
      if (*(double *)&v10 <= -1.0) {
        BUG();
      }
      if (*(double *)&v10 >= 256.0) {
        BUG();
      }
      uint64_t v41 = (void *)v12;
      unint64_t v13 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 24);
      if (v14 >> 1 <= v13)
      {
        uint64_t v43 = v10;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 >= 2, v13 + 1, 1);
        uint64_t v10 = v43;
        uint64_t v9 = v44;
        uint64_t v12 = (uint64_t)v41;
      }
      *(void *)(v12 + 16) = v13 + 1;
      *(unsigned char *)(v12 + v13 + 32) = (int)*(double *)&v10;
      if ((_UNKNOWN *)v11 == &loc_C0000) {
        break;
      }
      uint64_t v10 = *(uint64_t *)&v9[v11++];
      if ((~v10 & 0x7FF0000000000000) == 0) {
        goto LABEL_18;
      }
    }
    uint64_t v43 = specialized Data.init<A>(_:)(v12);
    uint64_t v44 = v15;
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v17 = CGDataProviderCreateWithCFData(isa);

    if (!v17) {
      goto LABEL_16;
    }
    uint64_t v18 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
    if (!v18) {
      BUG();
    }
    uint64_t v19 = v18;
    CGImageRef v20 = CGImageCreate(0x200uLL, 0x200uLL, 8uLL, 0x18uLL, 0x600uLL, v18, 0, v17, 0, 0, kCGRenderingIntentDefault);

    uint64_t v21 = v37;
    if (v20)
    {
      CGImageRef image = v20;
      URL._bridgeToObjectiveC()((NSURL *)image);
      CFURLRef url = v22;
      uint64_t v23 = v36;
      static UTType.png.getter(*(double *)&v10, -1.0, 256.0);
      UTType.identifier.getter();
      char v25 = v24;
      (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v23, v39);
      uint64_t v26 = (__CFString *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      CFURLRef v27 = url;
      int v28 = CGImageDestinationCreateWithURL(url, v26, 1uLL, 0);

      if (!v28) {
        BUG();
      }
      CGImageRef v29 = image;
      CGImageDestinationAddImage(v28, image, 0);
      CGImageDestinationFinalize(v28);

      return (double *)outlined consume of Data._Representation(v43, (unint64_t)v44);
    }
    else
    {
LABEL_16:
      uint64_t v30 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v30, 0, 0);
      *(void *)uint64_t v31 = 0xD000000000000029;
      *(void *)(v31 + 8) = "column is invalid" + 0x8000000000000000;
      *(_OWORD *)(v31 + 16) = 0;
      *(_OWORD *)(v31 + 32) = 0;
      *(unsigned char *)(v31 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v30, v31, v32, v33, v34);
      return (double *)outlined consume of Data._Representation(v43, (unint64_t)v44);
    }
  }
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  uint64_t v8 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v6[0] = a1;
  uint64_t v1 = *__swift_project_boxed_opaque_existential_0Tm(v6, v7);
  uint64_t v2 = v1 + 32;
  uint64_t v3 = v1 + 32 + *(void *)(v1 + 16);
  swift_bridgeObjectRetain(a1);
  closure #1 in Data.init<A>(_:)(v2, v3);
  swift_bridgeObjectRelease(a1);
  uint64_t v4 = v9;
  __swift_destroy_boxed_opaque_existential_1Tm(v6);
  return v4;
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLStyleTransfer.TrainingSessionDelegate.train(from:)(Swift::Int from)
{
  uint64_t v4 = v1;
  uint64_t v155 = v2;
  uint64_t v140 = type metadata accessor for UUID(0);
  uint64_t v139 = *(void *)(v140 - 8);
  int64_t v5 = *(void *)(v139 + 64);
  int64_t v6 = alloca(v5);
  uint64_t v7 = alloca(v5);
  uint64_t v141 = v132;
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v143 = v132;
  uint64_t v11 = type metadata accessor for MLTrainingSessionParameters(0);
  int64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v13 = alloca(v12);
  unint64_t v14 = alloca(v12);
  uint64_t v144 = v132;
  uint64_t v15 = type metadata accessor for URL(0);
  uint64_t v161 = *(void *)(v15 - 8);
  int64_t v16 = *(void *)(v161 + 64);
  uint64_t v17 = alloca(v16);
  uint64_t v18 = alloca(v16);
  CFURLRef v142 = v132;
  uint64_t v19 = alloca(v16);
  CGImageRef v20 = alloca(v16);
  CFURLRef v147 = (const __CFURL *)v132;
  uint64_t v21 = alloca(v16);
  CFURLRef v22 = alloca(v16);
  CFURLRef v154 = (const __CFURL *)v132;
  uint64_t v23 = alloca(v16);
  char v24 = alloca(v16);
  CFURLRef v158 = (const __CFURL *)v132;
  uint64_t v157 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  int64_t v25 = *(void *)(*(void *)(v157 - 8) + 64);
  uint64_t v26 = alloca(v25);
  CFURLRef v27 = alloca(v25);
  uint64_t v153 = v132;
  uint64_t v148 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  int64_t v28 = *(void *)(*((void *)v148 - 1) + 64);
  CGImageRef v29 = alloca(v28);
  uint64_t v30 = alloca(v28);
  uint64_t v149 = v132;
  int64_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                              - 8)
                  + 64);
  uint64_t v32 = alloca(v31);
  uint64_t v33 = alloca(v31);
  uint64_t v162 = v132;
  uint64_t v34 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  uint64_t v35 = v155;
  int64_t v36 = *(void *)(*(void *)(v34 - 8) + 64);
  uint64_t v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v151 = v132;
  uint64_t v39 = alloca(v36);
  uint64_t v40 = alloca(v36);
  uint64_t v150 = v132;
  uint64_t v41 = alloca(v36);
  uint64_t v42 = alloca(v36);
  uint64_t v159 = v132;
  uint64_t v43 = *(void *)(*(int *)(v11 + 20)
                  + v155
                  + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters);
  if (__OFADD__(v43, from)) {
    BUG();
  }
  uint64_t v137 = v43 + from;
  Swift::Int v138 = *(void *)(v155
                   + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters
                   + *(int *)(v11 + 28));
  uint64_t v44 = v138 - from;
  if (__OFSUB__(v138, from)) {
    BUG();
  }
  if (v43 < v44) {
    uint64_t v44 = v43;
  }
  uint64_t v146 = (char *)v44;
  if (v44 < 0) {
    BUG();
  }
  uint64_t v160 = (char *)v15;
  uint64_t v145 = v155 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters;
  if (v44)
  {
    uint64_t v156 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
    uint64_t v165 = *(void *)(v155 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
    uint64_t v45 = v146;
    do
    {
      if (v45-- == 0) {
        BUG();
      }
      swift_retain();
      CMLModel.callFunction(name:arguments:)(1, v165);
      if (v4) {
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      uint64_t v4 = 0;
      uint64_t v35 = v155;
    }
    while (v45);
  }
  uint64_t v45 = (char *)OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model;
  uint64_t v47 = v4;
  uint64_t v48 = *(void *)(v35 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
  swift_retain();
  CMLModel.callFunction(name:arguments:)(2, v48);
  if (v47)
  {
LABEL_12:
    swift_release();
    goto LABEL_24;
  }
  uint64_t v156 = (uint64_t)v45;
  uint64_t v165 = 0;
  swift_release();
  swift_release();
  uint64_t v51 = lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  uint64_t v163 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for MLProgress.Metric, (char *)&type metadata for Any + 8, v51);
  uint64_t v52 = v155 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
  swift_beginAccess(v155 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, v132, 0, 0);
  uint64_t v53 = (uint64_t)v162;
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v52, (uint64_t)v162);
  char v54 = v148;
  if (!__swift_getEnumTagSinglePayload(v53, 1, (uint64_t)v148))
  {
    uint64_t v152 = _swiftEmptyArrayStorage;
    uint64_t v55 = (uint64_t)v149;
    outlined init with copy of MLTrainingSessionParameters(v53, (uint64_t)v149, type metadata accessor for MLStyleTransfer.PersistentParameters);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    char v164 = *(unsigned char *)(v55 + v54[5]);
    uint64_t v56 = v55 + v54[6];
    uint64_t v57 = (int *)v157;
    uint64_t v58 = v153;
    uint64_t v162 = &v153[*(int *)(v157 + 20)];
    outlined init with copy of MLTrainingSessionParameters(v56, (uint64_t)v162, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v59 = *(void *)(v55 + v54[7]);
    uint64_t v60 = *(void *)(v55 + v54[8]);
    *(void *)&v58[v57[6]] = 1;
    uint64_t v61 = v57[10];
    *uint64_t v58 = v164;
    *(void *)&v58[v57[7]] = 500;
    *(void *)&v58[v57[8]] = v59;
    *(void *)&v58[v57[9]] = v60;
    v58[v61] = *(unsigned char *)(v55 + v54[9]);
    outlined destroy of MLActivityClassifier.ModelParameters(v55, type metadata accessor for MLStyleTransfer.PersistentParameters);
    uint64_t v62 = (uint64_t)v150;
    outlined init with take of MLClassifierMetrics((uint64_t)v162, (uint64_t)v150, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v63 = (uint64_t)v159;
    outlined init with take of MLClassifierMetrics(v62, (uint64_t)v159, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v64 = (uint64_t)v151;
    outlined init with copy of MLTrainingSessionParameters(v63, (uint64_t)v151, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v65 = (uint64_t)v160;
    if (__swift_getEnumTagSinglePayload(v64, 1, (uint64_t)v160) == 1)
    {
      outlined destroy of MLActivityClassifier.ModelParameters(v63, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      uint64_t v66 = v64;
LABEL_18:
      outlined destroy of MLActivityClassifier.ModelParameters(v66, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      goto LABEL_19;
    }
    uint64_t v45 = *(char **)(v161 + 32);
    uint64_t v74 = v65;
    uint64_t v75 = (uint64_t)v158;
    ((void (*)(const __CFURL *, uint64_t, uint64_t))v45)(v158, v64, v74);
    swift_retain();
    uint64_t v76 = v165;
    uint64_t v77 = CMLModel.predict(validationURL:)(v75);
    uint64_t v165 = v76;
    if (v76)
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v75, v74);
      goto LABEL_27;
    }
    uint64_t v148 = (int *)v45;
    uint64_t v78 = v77;
    swift_release();
    uint64_t v79 = v165;
    uint64_t v80 = specialized handling<A, B>(_:_:)(*(void *)(v78 + 16));
    if (v79)
    {
      swift_release();
      (*(void (**)(const __CFURL *, char *))(v161 + 8))(v158, v160);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v159, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      swift_bridgeObjectRelease(v163);
      goto LABEL_24;
    }
    uint64_t v45 = (char *)v80;
    uint64_t v162 = (unsigned char *)v78;
    if (!v80) {
      BUG();
    }
    uint64_t v81 = type metadata accessor for CMLColumn();
    uint64_t inited = swift_initStackObject(v81, v133);
    *(void *)(inited + 16) = v45;
    if (CMLColumn.size.getter() == 1)
    {
      uint64_t v83 = v45;
      uint64_t v84 = CMLColumn.value(at:)(0);
      uint64_t v157 = inited;
      uint64_t v92 = specialized handling<A, B>(_:_:)(*(void *)(v84 + 16));
      uint64_t v165 = 0;
      uint64_t v45 = (char *)v92;
      if (!v92) {
        BUG();
      }
      swift_release();
      uint64_t v93 = type metadata accessor for CMLMultiArray();
      uint64_t v94 = swift_initStackObject(v93, v134);
      *(void *)(v94 + 16) = v45;
      uint64_t v95 = v165;
      uint64_t v96 = CMLMultiArray.shape()();
      uint64_t v165 = v95;
      uint64_t v97 = v161;
      if (v95)
      {
        swift_setDeallocating(v157);
        tc_v1_release(v83);
        swift_release();
        swift_release();
        (*(void (**)(const __CFURL *, char *))(v97 + 8))(v158, v160);
        goto LABEL_27;
      }
      uint64_t v151 = (unsigned char *)v94;
      uint64_t v98 = specialized _copyCollectionToContiguousArray<A>(_:)(v96, 3);
      int64_t v99 = v98[2];
      if (v99)
      {
        v135[0] = _swiftEmptyArrayStorage;
        uint64_t v100 = 0;
        uint64_t v153 = (unsigned char *)v99;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99, 0);
        long long v101 = v153;
        uint64_t v152 = (void *)v135[0];
        do
        {
          uint64_t v102 = v98[(void)v100 + 4];
          if (v102 < 0) {
            BUG();
          }
          uint64_t v103 = v152;
          v135[0] = v152;
          unint64_t v104 = v152[2];
          unint64_t v105 = v152[3];
          int64_t v106 = v104 + 1;
          if (v105 >> 1 <= v104)
          {
            uint64_t v149 = (unsigned char *)v152[2];
            uint64_t v150 = (unsigned char *)(v104 + 1);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 >= 2, v106, 1);
            int64_t v106 = (int64_t)v150;
            unint64_t v104 = (unint64_t)v149;
            long long v101 = v153;
            uint64_t v103 = (void *)v135[0];
          }
          ++v100;
          v103[2] = v106;
          uint64_t v152 = v103;
          v103[v104 + 4] = v102;
        }
        while (v101 != v100);
      }
      swift_release();
      uint64_t v45 = v160;
      char v107 = (char)v152;
      BOOL v108 = specialized Sequence<>.elementsEqual<A>(_:)((uint64_t)&outlined read-only object #0 of MLStyleTransfer.TrainingSessionDelegate.train(from:), (uint64_t)v152);
      swift_bridgeObjectRelease(v107);
      if (v108)
      {
        uint64_t v109 = (uint64_t)v144;
        outlined init with copy of MLTrainingSessionParameters(v145, (uint64_t)v144, type metadata accessor for MLTrainingSessionParameters);
        uint64_t v110 = (uint64_t)v143;
        outlined init with take of DataFrame?(v109, (uint64_t)v143, &demangling cache variable for type metadata for URL?);
        if (__swift_getEnumTagSinglePayload(v110, 1, (uint64_t)v45) == 1)
        {
          uint64_t v111 = NSTemporaryDirectory();
          uint64_t v112 = v111;
          uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
          uint64_t v115 = v114;

          URL.init(fileURLWithPath:isDirectory:)(v113, v115, 1);
          swift_bridgeObjectRelease(v115);
          outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v110, &demangling cache variable for type metadata for URL?);
        }
        else
        {
          ((void (*)(const __CFURL *, uint64_t, char *))v148)(v154, v110, v160);
        }
        uint64_t v122 = v141;
        UUID.init()();
        uint64_t v123 = UUID.uuidString.getter();
        uint64_t v125 = v124;
        (*(void (**)(unsigned char *, uint64_t))(v139 + 8))(v122, v140);
        CFURLRef v126 = (const __CFURL *)v142;
        URL.appendingPathComponent(_:)(v123, v125);
        swift_bridgeObjectRelease(v125);
        CFURLRef v127 = v147;
        URL.appendingPathExtension(_:)(6778480, 0xE300000000000000);
        uint64_t v128 = *(void (**)(const __CFURL *, char *))(v161 + 8);
        CFURLRef v129 = v126;
        uint64_t v45 = v160;
        v128(v129, v160);
        uint64_t v130 = v165;
        MLStyleTransfer.TrainingSessionDelegate.saveImage(from:to:)((uint64_t)v151, v127);
        uint64_t v165 = v130;
        if (!v130)
        {
          uint64_t v136 = v45;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v135);
          (*(void (**)(void *, const __CFURL *, char *))(v161 + 16))(boxed_opaque_existential_1, v127, v45);
          specialized Dictionary.subscript.setter((uint64_t)v135, 6);
          swift_release();
          swift_release();
          swift_release();
          v128(v147, v45);
          v128(v154, v45);
          v128(v158, v45);
          uint64_t v66 = (uint64_t)v159;
          goto LABEL_18;
        }
        swift_release();
        swift_release();
        swift_release();
        v128(v127, v45);
        v128(v154, v45);
        v128(v158, v45);
LABEL_27:
        outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v159, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
        swift_bridgeObjectRelease(v163);
        goto LABEL_24;
      }
      swift_bridgeObjectRelease(v163);
      uint64_t v116 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v116, 0, 0);
      *(void *)uint64_t v117 = 0xD00000000000001CLL;
      *(void *)(v117 + 8) = "3TrainingSessionDelegate" + 0x8000000000000000;
      *(_OWORD *)(v117 + 16) = 0;
      *(_OWORD *)(v117 + 32) = 0;
      *(unsigned char *)(v117 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v116, v117, v118, v119, v120);
      uint64_t v121 = v157;
      swift_setDeallocating(v157);
      tc_v1_release(*(void *)(v121 + 16));
      swift_release();
      swift_release();
      CFURLRef v90 = v158;
      uint64_t v91 = (uint64_t)v45;
    }
    else
    {
      swift_bridgeObjectRelease(v163);
      uint64_t v85 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v85, 0, 0);
      *(void *)uint64_t v86 = 0xD00000000000001CLL;
      *(void *)(v86 + 8) = "3TrainingSessionDelegate" + 0x8000000000000000;
      *(_OWORD *)(v86 + 16) = 0;
      *(_OWORD *)(v86 + 32) = 0;
      *(unsigned char *)(v86 + 48) = 0;
      swift_willThrow(&type metadata for MLCreateError, v85, v86, v87, v88, v89);
      swift_setDeallocating(inited);
      tc_v1_release(v45);
      swift_release();
      CFURLRef v90 = v158;
      uint64_t v91 = (uint64_t)v160;
    }
    (*(void (**)(const __CFURL *, uint64_t))(v161 + 8))(v90, v91);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v159, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    goto LABEL_24;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v53, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
LABEL_19:
  swift_retain();
  uint64_t v67 = CMLModel.contentLoss.getter(v3);
  char v69 = v68;
  swift_release();
  uint64_t v45 = v146;
  if ((v69 & 1) == 0)
  {
    uint64_t v136 = (char *)&type metadata for Double;
    v135[0] = v67;
    specialized Dictionary.subscript.setter((uint64_t)v135, 1);
  }
  swift_retain();
  uint64_t v70 = CMLModel.styleLoss.getter(v3);
  char v72 = v71;
  swift_release();
  if ((v72 & 1) == 0)
  {
    uint64_t v136 = (char *)&type metadata for Double;
    v135[0] = v70;
    specialized Dictionary.subscript.setter((uint64_t)v135, 2);
  }
  Swift::Bool v50 = v137 >= v138;
  uint64_t v49 = (void *)v163;
LABEL_24:
  Swift::Int v73 = (Swift::Int)v45;
  result.metrics._uint64_t rawValue = v49;
  result._0 = v73;
  result.BOOL finished = v50;
  return result;
}

uint64_t CMLModel.predict(validationURL:)(uint64_t a1)
{
  uint64_t v35 = v1;
  uint64_t v31 = v2;
  uint64_t v32 = a1;
  uint64_t empty = tc_v1_parameters_create_empty(0);
  if (!empty) {
    BUG();
  }
  uint64_t v4 = empty;
  uint64_t v5 = type metadata accessor for CMLParameters();
  uint64_t inited = swift_initStackObject(v5, v26);
  *(void *)(inited + 16) = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
  uint64_t v7 = type metadata accessor for URL(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ((int)v9 + 32) & ~*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject(v6, v10 + *(void *)(v8 + 72), v9 | 7);
  *(void *)(v11 + 16) = 1;
  *(void *)(v11 + 24) = 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11 + v10, v32, v7);
  uint64_t v12 = v35;
  static MLStyleTransfer.generateTrainingTable(urls:)(v11);
  if (v12)
  {
    swift_release();
    swift_setDeallocating(v11);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return v11;
  }
  uint64_t v32 = 0;
  swift_setDeallocating(v11);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v13 = v29;
  int v14 = v30;
  uint64_t v27 = v29;
  char v28 = v30 & 1;
  outlined copy of Result<_DataTable, Error>(v29, v30);
  v15._uint64_t countAndFlagsBits = 0x55746E65746E6F63;
  v15._char object = (void *)0xEB00000000734C52;
  MLDataTable.subscript.getter(v15);
  uint64_t v35 = v13;
  outlined consume of Result<_DataTable, Error>(v13, v14);
  uint64_t v11 = v29;
  if ((_BYTE)v30)
  {
    outlined consume of Result<_DataTable, Error>(v29, 1);
    uint64_t v16 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v16, 0, 0);
    *(void *)uint64_t v17 = 0xD000000000000021;
    *(void *)(v17 + 8) = "checkpoint inference failed." + 0x8000000000000000;
    *(_OWORD *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 32) = 0;
    *(unsigned char *)(v17 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v16, v17, v18, v19, v20);
    outlined consume of Result<_DataTable, Error>(v35, v14);
LABEL_9:
    swift_release();
    return v11;
  }
  int v34 = v14;
  uint64_t v21 = *(void *)(v29 + 16);
  swift_retain();
  outlined consume of Result<_DataTable, Error>(v11, 0);
  uint64_t v22 = v21;
  uint64_t v23 = inited;
  uint64_t v11 = inited;
  uint64_t v24 = v32;
  CMLParameters.add(key:column:)(4, v22);
  if (v24)
  {
    swift_release();
    outlined consume of Result<_DataTable, Error>(v35, v34);
    goto LABEL_9;
  }
  uint64_t v11 = CMLModel.callFunction(name:arguments:)(10, v23);
  swift_release();
  outlined consume of Result<_DataTable, Error>(v35, v34);
  swift_setDeallocating(v23);
  tc_v1_release(*(void *)(v23 + 16));
  return v11;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<cf,zf,sf,of,pf,rax,rdx,rcx,rdi,rsi,r8,r9,r10,r11,r12,xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7> MLStyleTransfer.TrainingSessionDelegate.evaluate(from:)(Swift::Int from)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_args);
  swift_retain();
  CMLModel.callFunction(name:arguments:)(4, v3);
  swift_release();
  if (!v1) {
    swift_release();
  }
  v4._0 = 1;
  v4.BOOL finished = 1;
  return v4;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = 0xEB0000000064657ALL;
  uint64_t v5 = *a2;
  uint64_t v20 = v3;
  uint64_t v19 = a1;
  switch(v5)
  {
    case 0:
      uint64_t v6 = 0x696C616974696E69;
      break;
    case 1:
      uint64_t v6 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_9;
    case 3:
      uint64_t v6 = 0x697461756C617665;
LABEL_6:
      unint64_t v4 = 0xEA0000000000676ELL;
      break;
    case 4:
      unint64_t v4 = 0xEB00000000676E69;
      uint64_t v6 = 0x636E657265666E69;
      break;
  }
  unsigned int v7 = 0;
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v4);
  if (v8)
  {
LABEL_9:
    uint64_t empty = tc_v1_parameters_create_empty(0);
    if (!empty) {
      BUG();
    }
    uint64_t v10 = empty;
    uint64_t v11 = type metadata accessor for CMLParameters();
    uint64_t inited = swift_initStackObject(v11, v18);
    *(void *)(inited + 16) = v10;
    unsigned int v13 = type metadata accessor for CMLFeatureValue();
    uint64_t v21 = v10;
    unsigned int v7 = v13;
    uint64_t v14 = URL.path.getter(0);
    uint64_t v16 = CMLFeatureValue.__allocating_init(_:)(v14, v15);
    if (v2)
    {
      swift_release();
    }
    else
    {
      unsigned int v7 = v16;
      CMLParameters.add(key:featureValue:)(7, v16);
      swift_release();
      swift_retain();
      CMLModel.callFunction(name:arguments:)(6, inited);
      swift_release();
      swift_setDeallocating(inited);
      tc_v1_release(v21);
      swift_release();
      LOBYTE(v7) = 1;
    }
  }
  return v7;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v19 = v1;
  uint64_t v20 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                             - 8)
                 + 64);
  unint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v6 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  char v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v10 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters + v2;
  swift_beginAccess(v10, v18, 0, 0);
  outlined init with copy of MLStyleTransfer.PersistentParameters?(v10, (uint64_t)&v17);
  if (__swift_getEnumTagSinglePayload((uint64_t)&v17, 1, v6) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v17, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    uint64_t v11 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v11, 0, 0);
    *(void *)uint64_t v12 = 0xD000000000000030;
    *(void *)(v12 + 8) = "Feature Extractor" + 0x8000000000000000;
    *(_OWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 48) = 2;
    return swift_willThrow(&type metadata for MLCreateError, v11, v12, v13, v14, v15);
  }
  else
  {
    outlined init with take of MLClassifierMetrics((uint64_t)&v17, (uint64_t)&v17, type metadata accessor for MLStyleTransfer.PersistentParameters);
    MLStyleTransfer.PersistentParameters.save(toSessionDirectory:)(v20);
    return outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v17, type metadata accessor for MLStyleTransfer.PersistentParameters);
  }
}

NSURL *MLStyleTransfer.TrainingSessionDelegate.restore(from:phase:)(uint64_t a1)
{
  uint64_t v39 = (unsigned char *)v1;
  uint64_t v33 = v2;
  uint64_t v32 = a1;
  int64_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
                             - 8)
                 + 64);
  unint64_t v4 = alloca(v3);
  uint64_t v5 = alloca(v3);
  uint64_t v35 = v30;
  uint64_t v6 = alloca(v3);
  int64_t v7 = alloca(v3);
  int64_t v36 = v30;
  char v8 = alloca(v3);
  uint64_t v9 = alloca(v3);
  uint64_t v38 = v30;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v34 = type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  int64_t v15 = *(void *)(*(void *)(v34 - 8) + 64);
  uint64_t v16 = alloca(v15);
  uint64_t v17 = alloca(v15);
  uint64_t v37 = v30;
  uint64_t v18 = alloca(v15);
  uint64_t v19 = alloca(v15);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v30, v32, v10);
  uint64_t v20 = (uint64_t)v39;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool result = MLStyleTransfer.PersistentParameters.init(sessionDirectory:)((uint64_t)v30);
  if (!v20)
  {
    uint64_t v39 = v30;
    uint64_t v22 = OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters + v33;
    swift_beginAccess(OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters + v33, v30, 0, 0);
    uint64_t v23 = (uint64_t)v38;
    outlined init with copy of MLStyleTransfer.PersistentParameters?(v22, (uint64_t)v38);
    uint64_t v24 = v23;
    uint64_t v25 = v34;
    if (__swift_getEnumTagSinglePayload(v24, 1, v34) == 1)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v38, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      uint64_t v26 = (uint64_t)v36;
      outlined init with take of MLClassifierMetrics((uint64_t)v39, (uint64_t)v36, type metadata accessor for MLStyleTransfer.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v26, 0, 1, v25);
      uint64_t v27 = (uint64_t)v35;
      outlined init with take of DataFrame?(v26, (uint64_t)v35, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      swift_beginAccess(v22, v31, 33, 0);
      outlined assign with take of MLStyleTransfer.PersistentParameters?(v27, v22);
      return (NSURL *)swift_endAccess(v31);
    }
    else
    {
      uint64_t v28 = (uint64_t)v37;
      outlined init with take of MLClassifierMetrics((uint64_t)v38, (uint64_t)v37, type metadata accessor for MLStyleTransfer.PersistentParameters);
      uint64_t v29 = (uint64_t)v39;
      MLStyleTransfer.TrainingSessionDelegate.verifyParametersCompatibility(_:_:phase:)((uint64_t)v39, v28);
      outlined destroy of MLActivityClassifier.ModelParameters(v28, type metadata accessor for MLStyleTransfer.PersistentParameters);
      return (NSURL *)outlined destroy of MLActivityClassifier.ModelParameters(v29, type metadata accessor for MLStyleTransfer.PersistentParameters);
    }
  }
  return result;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.verifyParametersCompatibility(_:_:phase:)(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = v2;
  uint64_t v103 = a2;
  uint64_t v106 = a1;
  int64_t v3 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  int64_t v4 = *(void *)(*((void *)v3 - 1) + 64);
  uint64_t v5 = alloca(v4);
  uint64_t v6 = alloca(v4);
  unint64_t v104 = v89;
  int64_t v7 = alloca(v4);
  char v8 = alloca(v4);
  CFURLRef v90 = v89;
  uint64_t v9 = alloca(v4);
  uint64_t v10 = alloca(v4);
  uint64_t v11 = alloca(v4);
  int64_t v12 = alloca(v4);
  uint64_t v13 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters(0);
  unint64_t v105 = (char *)v13[5];
  LODWORD(v107) = v105[v106];
  uint64_t v14 = &v89[v3[5]];
  uint64_t v92 = v106 + v13[6];
  outlined init with copy of MLTrainingSessionParameters(v92, (uint64_t)v14, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v93 = v13[7];
  uint64_t v15 = *(void *)(v106 + v93);
  uint64_t v94 = v13[8];
  uint64_t v16 = *(void *)(v106 + v94);
  uint64_t v17 = v106;
  *(void *)&v89[v3[6]] = 1;
  uint64_t v18 = v3[10];
  v89[0] = v107;
  *(void *)&v89[v3[7]] = 500;
  *(void *)&v89[v3[8]] = v15;
  *(void *)&v89[v3[9]] = v16;
  unint64_t v102 = v13[9];
  v89[v18] = *(unsigned char *)(v17 + v102);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v89, type metadata accessor for MLStyleTransfer.ModelParameters);
  uint64_t v101 = v13[5];
  LODWORD(v108) = *(unsigned __int8 *)(v103 + v101);
  uint64_t v19 = &v89[v3[5]];
  uint64_t v100 = v103 + v13[6];
  outlined init with copy of MLTrainingSessionParameters(v100, (uint64_t)v19, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  uint64_t v99 = v13[7];
  uint64_t v20 = *(void *)(v103 + v99);
  uint64_t v98 = v13[8];
  uint64_t v21 = *(void *)(v103 + v98);
  uint64_t v22 = v103;
  *(void *)&v89[v3[6]] = 1;
  uint64_t v23 = v3[10];
  v89[0] = v108;
  *(void *)&v89[v3[7]] = 500;
  *(void *)&v89[v3[8]] = v20;
  *(void *)&v89[v3[9]] = v21;
  uint64_t v24 = v13[9];
  uint64_t v25 = v106;
  uint64_t v97 = v24;
  v89[v23] = *(unsigned char *)(v22 + v24);
  uint64_t v95 = v89;
  uint64_t v26 = v105;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v89, type metadata accessor for MLStyleTransfer.ModelParameters);
  char v27 = specialized == infix<A>(_:_:)(v107, v108);
  char v28 = v26[v25];
  uint64_t v29 = v3[5];
  if (v27)
  {
    outlined init with copy of MLTrainingSessionParameters(v92, (uint64_t)&v89[v29], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    unint64_t v107 = *(void *)(v25 + v93);
    unint64_t v30 = v107;
    uint64_t v31 = *(void *)(v25 + v94);
    *(void *)&v89[v3[6]] = 1;
    uint64_t v32 = v3[10];
    v89[0] = v28;
    *(void *)&v89[v3[7]] = 500;
    *(void *)&v89[v3[8]] = v30;
    *(void *)&v89[v3[9]] = v31;
    v89[v32] = *(unsigned char *)(v25 + v102);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v89, type metadata accessor for MLStyleTransfer.ModelParameters);
    uint64_t v33 = v103;
    LOBYTE(v104) = *(unsigned char *)(v103 + v101);
    uint64_t v34 = v95;
    outlined init with copy of MLTrainingSessionParameters(v100, (uint64_t)&v95[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v108 = *(void *)(v33 + v99);
    uint64_t v35 = v108;
    uint64_t v36 = *(void *)(v33 + v98);
    *(void *)&v34[v3[6]] = 1;
    uint64_t v37 = v3[10];
    *uint64_t v34 = (_BYTE)v104;
    *(void *)&v34[v3[7]] = 500;
    *(void *)&v34[v3[8]] = v35;
    *(void *)&v34[v3[9]] = v36;
    LOBYTE(v36) = *(unsigned char *)(v33 + v97);
    uint64_t v38 = v106;
    v34[v37] = v36;
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v34, type metadata accessor for MLStyleTransfer.ModelParameters);
    LOBYTE(v104) = v105[v38];
    outlined init with copy of MLTrainingSessionParameters(v92, (uint64_t)&v89[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v39 = *(void *)(v38 + v93);
    uint64_t v40 = *(unsigned char **)(v38 + v94);
    *(void *)&v89[v3[6]] = 1;
    uint64_t v41 = v3[10];
    v89[0] = (_BYTE)v104;
    *(void *)&v89[v3[7]] = 500;
    *(void *)&v89[v3[8]] = v39;
    uint64_t v42 = v3[9];
    unint64_t v104 = v40;
    *(void *)&v89[v42] = v40;
    v89[v41] = *(unsigned char *)(v38 + v102);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v89, type metadata accessor for MLStyleTransfer.ModelParameters);
    if (v107 == v108)
    {
      uint64_t v43 = v103;
      LOBYTE(v107) = *(unsigned char *)(v103 + v101);
      uint64_t v44 = v95;
      outlined init with copy of MLTrainingSessionParameters(v100, (uint64_t)&v95[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      uint64_t v45 = *(void *)(v43 + v99);
      uint64_t v108 = *(void *)(v43 + v98);
      uint64_t v46 = v108;
      *(void *)&v44[v3[6]] = 1;
      uint64_t v47 = v3[10];
      *uint64_t v44 = v107;
      *(void *)&v44[v3[7]] = 500;
      *(void *)&v44[v3[8]] = v45;
      *(void *)&v44[v3[9]] = v46;
      v44[v47] = *(unsigned char *)(v43 + v97);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v44, type metadata accessor for MLStyleTransfer.ModelParameters);
      uint64_t result = v108;
      if (v104 == (unsigned char *)v108) {
        return result;
      }
      uint64_t v49 = v106;
      char v50 = v105[v106];
      outlined init with copy of MLTrainingSessionParameters(v92, (uint64_t)&v89[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      uint64_t v51 = *(void *)(v49 + v93);
      uint64_t v52 = *(void *)(v49 + v94);
      *(void *)&v89[v3[6]] = 1;
      uint64_t v53 = v3[10];
      v89[0] = v50;
      *(void *)&v89[v3[7]] = 500;
      *(void *)&v89[v3[8]] = v51;
      *(void *)&v89[v3[9]] = v52;
      v89[v53] = *(unsigned char *)(v49 + v102);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v89, type metadata accessor for MLStyleTransfer.ModelParameters);
      uint64_t v96 = v52;
      uint64_t v108 = lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v106 = BinaryInteger.description.getter(&type metadata for Int, v108);
      unint64_t v107 = v54;
      uint64_t v55 = v103;
      LOBYTE(v105) = *(unsigned char *)(v103 + v101);
      uint64_t v56 = v95;
      outlined init with copy of MLTrainingSessionParameters(v100, (uint64_t)&v95[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      uint64_t v57 = *(void *)(v55 + v99);
      uint64_t v58 = *(void *)(v55 + v98);
      *(void *)&v56[v3[6]] = 1;
      uint64_t v59 = v3[10];
      unsigned char *v56 = (_BYTE)v105;
      *(void *)&v56[v3[7]] = 500;
      *(void *)&v56[v3[8]] = v57;
      *(void *)&v56[v3[9]] = v58;
      v56[v59] = *(unsigned char *)(v55 + v97);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v56, type metadata accessor for MLStyleTransfer.ModelParameters);
      uint64_t v96 = v58;
      uint64_t v60 = BinaryInteger.description.getter(&type metadata for Int, v108);
      uint64_t v62 = v61;
      uint64_t v63 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v63, 0, 0);
      *(void *)uint64_t v64 = 0x745320656C797453;
      unint64_t v68 = 0xEE006874676E6572;
    }
    else
    {
      uint64_t v96 = v39;
      uint64_t v108 = lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v106 = BinaryInteger.description.getter(&type metadata for Int, v108);
      unint64_t v107 = v82;
      uint64_t v83 = v103;
      LOBYTE(v105) = *(unsigned char *)(v103 + v101);
      uint64_t v84 = v95;
      outlined init with copy of MLTrainingSessionParameters(v100, (uint64_t)&v95[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
      uint64_t v85 = *(void *)(v83 + v99);
      uint64_t v86 = *(void *)(v83 + v98);
      *(void *)&v84[v3[6]] = 1;
      uint64_t v87 = v3[10];
      *uint64_t v84 = (_BYTE)v105;
      *(void *)&v84[v3[7]] = 500;
      *(void *)&v84[v3[8]] = v85;
      *(void *)&v84[v3[9]] = v86;
      v84[v87] = *(unsigned char *)(v83 + v97);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v84, type metadata accessor for MLStyleTransfer.ModelParameters);
      uint64_t v96 = v85;
      uint64_t v60 = BinaryInteger.description.getter(&type metadata for Int, v108);
      uint64_t v62 = v88;
      uint64_t v63 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError(&type metadata for MLCreateError, v63, 0, 0);
      *(void *)uint64_t v64 = 0x44206C6574786554;
      unint64_t v68 = 0xEE00797469736E65;
    }
    *(void *)(v64 + 8) = v68;
    *(void *)(v64 + 16) = v106;
    *(void *)(v64 + 24) = v107;
    *(void *)(v64 + 32) = v60;
    *(void *)(v64 + 40) = v62;
  }
  else
  {
    char v69 = v90;
    outlined init with copy of MLTrainingSessionParameters(v92, (uint64_t)&v90[v29], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v70 = *(void *)(v25 + v93);
    uint64_t v71 = *(void *)(v25 + v94);
    *(void *)&v69[v3[6]] = 1;
    uint64_t v72 = v3[10];
    *char v69 = v28;
    *(void *)&v69[v3[7]] = 500;
    *(void *)&v69[v3[8]] = v70;
    *(void *)&v69[v3[9]] = v71;
    v69[v72] = *(unsigned char *)(v25 + v102);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v69, type metadata accessor for MLStyleTransfer.ModelParameters);
    unint64_t v102 = 0xD00000000000004FLL;
    unint64_t v105 = "volutional neural network lite)" + 0x8000000000000000;
    Swift::Int v73 = "parallelTreeCount" + 0x8000000000000000;
    unint64_t v74 = 0xD000000000000046;
    if (v28) {
      unint64_t v74 = 0xD00000000000004FLL;
    }
    unint64_t v107 = v74;
    uint64_t v75 = "volutional neural network lite)" + 0x8000000000000000;
    if (v28) {
      uint64_t v75 = "parallelTreeCount" + 0x8000000000000000;
    }
    uint64_t v108 = (uint64_t)v75;
    uint64_t v76 = v103;
    LOBYTE(v106) = *(unsigned char *)(v103 + v101);
    uint64_t v77 = v104;
    outlined init with copy of MLTrainingSessionParameters(v100, (uint64_t)&v104[v3[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    uint64_t v78 = *(void *)(v76 + v99);
    uint64_t v79 = *(void *)(v76 + v98);
    *(void *)&v77[v3[6]] = 1;
    uint64_t v80 = v3[10];
    *uint64_t v77 = v106;
    *(void *)&v77[v3[7]] = 500;
    *(void *)&v77[v3[8]] = v78;
    *(void *)&v77[v3[9]] = v79;
    v77[v80] = *(unsigned char *)(v76 + v97);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v77, type metadata accessor for MLStyleTransfer.ModelParameters);
    unint64_t v81 = 0xD000000000000046;
    if ((_BYTE)v106) {
      unint64_t v81 = v102;
    }
    else {
      Swift::Int v73 = v105;
    }
    uint64_t v63 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError(&type metadata for MLCreateError, v63, 0, 0);
    *(void *)uint64_t v64 = 0x687469726F676C41;
    *(void *)(v64 + 8) = 0xE90000000000006DLL;
    *(void *)(v64 + 16) = v107;
    *(void *)(v64 + 24) = v108;
    *(void *)(v64 + 32) = v81;
    *(void *)(v64 + 40) = v73;
  }
  *(unsigned char *)(v64 + 48) = 3;
  return swift_willThrow(&type metadata for MLCreateError, v63, v64, v65, v66, v67);
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  outlined destroy of MLActivityClassifier.ModelParameters(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_sessionParameters, type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t MLStyleTransfer.TrainingSessionDelegate.__deallocating_deinit()
{
  MLStyleTransfer.TrainingSessionDelegate.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(void *)v0 + 48), *(unsigned __int16 *)(*(void *)v0 + 52));
}

uint64_t ObjC metadata update function for MLStyleTransfer.TrainingSessionDelegate()
{
  return type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(0);
}

uint64_t type metadata accessor for MLStyleTransfer.TrainingSessionDelegate(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLStyleTransfer.TrainingSessionDelegate;
  if (!type metadata singleton initialization cache for MLStyleTransfer.TrainingSessionDelegate) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLStyleTransfer.TrainingSessionDelegate);
  }
  return result;
}

uint64_t type metadata completion function for MLStyleTransfer.TrainingSessionDelegate(uint64_t a1)
{
  v4[0] = &unk_34D9B8;
  uint64_t result = type metadata accessor for MLTrainingSessionParameters(319);
  if (v2 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for MLStyleTransfer.PersistentParameters?(319);
    if (v3 <= 0x3F)
    {
      v4[2] = *(void *)(result - 8) + 64;
      v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      void v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for MLStyleTransfer.PersistentParameters?(uint64_t a1)
{
  uint64_t result = lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters?;
  if (!lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters?)
  {
    uint64_t v2 = type metadata accessor for MLStyleTransfer.PersistentParameters(255);
    uint64_t result = type metadata accessor for Optional(a1, v2);
    if (!v3) {
      lazy cache variable for type metadata for MLStyleTransfer.PersistentParameters? = result;
    }
  }
  return result;
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance MLStyleTransfer.TrainingSessionDelegate()
{
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::OpaquePointer a1)
{
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance MLStyleTransfer.TrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)MLStyleTransfer.TrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::Int a1)
{
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9 = MLStyleTransfer.TrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 8);
    uint64_t v6 = v1;
  }
  else
  {
    uint64_t rawValue = v9.metrics._rawValue;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 8);
    BOOL finished = v9.finished;
    uint64_t v6 = v1;
    v9.metrics._uint64_t rawValue = (void *)v9._0;
    *(void *)&v9.BOOL finished = rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(v5, v6, (uint64_t)v9.metrics._rawValue, *(uint64_t *)&v9.finished, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(Swift::Int a1)
{
  *(Swift::tuple_Int_finished_Bool *)&long long v2 = MLStyleTransfer.TrainingSessionDelegate.evaluate(from:)(a1);
  if (!v4)
  {
    *((void *)&v2 + 1) = 1;
    unsigned int v3 = 1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, void))(v1 + 8), v1, *((uint64_t *)&v2 + 1), v3);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1, unsigned __int8 *a2)
{
  return MLStyleTransfer.TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)(a1, a2);
}

uint64_t protocol witness for TrainingSessionCodable.save(to:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1)
{
  return MLStyleTransfer.TrainingSessionDelegate.save(to:)(a1);
}

NSURL *protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1)
{
  return MLStyleTransfer.TrainingSessionDelegate.restore(from:phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t (*a1)(uint64_t, uint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return a1(a3, a4, a5);
}

uint64_t outlined init with copy of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1, v2);
  return a2;
}

uint64_t outlined assign with take of MLStyleTransfer.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 40))(a2, a1, v2);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  uint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A] = result;
  }
  return result;
}

uint64_t closure #1 in Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = v2;
  unint64_t v4 = 0xC000000000000000;
  if (a1 && (uint64_t v5 = a2 - a1, a2 != a1))
  {
    if (v5 <= 14)
    {
      uint64_t result = Data.InlineData.init(_:)(a1, a2, 0xC000000000000000);
      unint64_t v4 = v8 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t result = Data.LargeSlice.init(_:)(a1, a2, 0xC000000000000000);
      unint64_t v4 = v9 | 0x8000000000000000;
    }
    else
    {
      uint64_t result = Data.InlineSlice.init(_:)(a1, a2, 0xC000000000000000);
      unint64_t v4 = v7 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *unsigned int v3 = result;
  v3[1] = v4;
  return result;
}

uint64_t __swift_memcpy3_1(uint64_t a1, uint64_t a2)
{
  uint64_t result = a1;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_WORD *)a1 = *(_WORD *)a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLObjectDetector.AnnotationType(unsigned __int16 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF
      && (a2 + 33554177 >= 0x1000000
        ? (int v2 = *((unsigned __int8 *)a1 + 3))
        : (int v2 = *(unsigned __int16 *)((char *)a1 + 3)),
          v2))
    {
      int v3 = (*a1 | (*((unsigned __int8 *)a1 + 2) << 16)) + (v2 << 24) - 16776962;
    }
    else
    {
      unsigned int v4 = *(unsigned __int8 *)a1;
      int v5 = v4 - 2;
      BOOL v6 = v4 < 2;
      int v3 = -1;
      if (!v6) {
        int v3 = v5;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MLObjectDetector.AnnotationType(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = (a3 + 33554177 < 0x1000000) + 1;
  if (a3 < 0xFF) {
    uint64_t result = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v4 = a2 - 255;
    *(_WORD *)a1 = v4;
    *(unsigned char *)(a1 + 2) = BYTE2(v4);
    if (result)
    {
      int v5 = HIBYTE(v4) + 1;
      if (result == 2) {
        *(_WORD *)(a1 + 3) = v5;
      }
      else {
        *(unsigned char *)(a1 + 3) = v5;
      }
    }
  }
  else
  {
    if (result)
    {
      if (result == 2) {
        *(_WORD *)(a1 + 3) = 0;
      }
      else {
        *(unsigned char *)(a1 + 3) = 0;
      }
    }
    if (a2) {
      *(unsigned char *)a1 = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLObjectDetector.AnnotationType()
{
  return &type metadata for MLObjectDetector.AnnotationType;
}

void MLRandomForestClassifier.predictions(from:)(uint64_t a1)
{
  int v3 = v2;
  uint64_t v14 = v1;
  uint64_t v5 = type metadata accessor for DataFrame(0);
  uint64_t v13 = *(void *)(v5 - 8);
  int64_t v6 = *(void *)(v13 + 64);
  uint64_t v7 = alloca(v6);
  uint64_t v8 = alloca(v6);
  uint64_t v15 = &v12;
  uint64_t v9 = type metadata accessor for MLRandomForestClassifier(0);
  DataFrame.validateContainsColumns(_:context:)(*(Swift::OpaquePointer *)((char *)v3 + *(int *)(v9 + 28)), (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (!v10)
  {
    AnyTreeClassifierModel.applied(to:eventHandler:)(a1, 0, 0);
    uint64_t v11 = v15;
    DataFrame.subscript.getter(*v3, v3[1]);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v11, v5);
  }
}

uint64_t type metadata accessor for MLRandomForestClassifier(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for MLRandomForestClassifier;
  if (!type metadata singleton initialization cache for MLRandomForestClassifier) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MLRandomForestClassifier);
  }
  return result;
}

uint64_t MLRandomForestClassifier.predictions(from:)(uint64_t a1, __m128 a2)
{
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = type metadata accessor for DataFrame(0);
  uint64_t v18 = *(void *)(v17 - 8);
  int64_t v4 = *(void *)(v18 + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = *(void *)(*(void *)(type metadata accessor for AnyColumn(0) - 8) + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  char v14 = v10;
  outlined copy of Result<_DataTable, Error>(v13, v10);
  DataFrame.init(_:)((uint64_t)&v13);
  uint64_t v11 = v15;
  MLRandomForestClassifier.predictions(from:)((uint64_t)&v13);
  if (v11) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  }
  *(double *)a2.i64 = (*(double (**)(uint64_t *, uint64_t))(v18 + 8))(&v13, v17);
  return MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)&v13, 1, a2);
}

uint64_t MLRandomForestClassifier.evaluation(on:)(uint64_t a1)
{
  int64_t v4 = v1;
  int64_t v5 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  uint64_t v8 = type metadata accessor for MLRandomForestClassifier(0);
  uint64_t v9 = *(int *)(v8 + 28);
  uint64_t v28 = v2;
  v10._uint64_t rawValue = *(void **)(v2 + v9);
  uint64_t v27 = a1;
  DataFrame.validateContainsColumns(_:context:)(v10, (Swift::String)__PAIR128__(0xE700000000000000, 0x65727574616546));
  if (v11) {
    goto LABEL_6;
  }
  uint64_t v29 = &v25;
  unint64_t v30 = v4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (void *)swift_initStackObject(v12, v26);
  inited[2] = 1;
  inited[3] = 2;
  uint64_t v14 = *(int *)(v8 + 24);
  uint64_t v15 = *(void *)(v28 + v14 + 8);
  inited[4] = *(void *)(v28 + v14);
  inited[5] = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v16 = v27;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xE500000000000000, 0x6C6562614CLL));
  if (v11)
  {
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    int64_t v4 = v30;
LABEL_6:
    *int64_t v4 = v11;
    uint64_t v18 = type metadata accessor for MLClassifierMetrics.Contents(0);
    uint64_t v19 = 2;
    uint64_t v20 = v4;
    uint64_t v21 = v18;
    return swift_storeEnumTagMultiPayload(v20, v21, v19);
  }
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v17 = v29;
  AnyTreeClassifierModel.computeMetrics(on:)(v16);
  uint64_t v23 = (uint64_t)v17;
  uint64_t v24 = (uint64_t)v30;
  outlined init with take of MLClassifierMetrics(v23, (uint64_t)v30, type metadata accessor for AnyClassificationMetrics);
  uint64_t v20 = (void *)v24;
  uint64_t v21 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v19 = 0;
  return swift_storeEnumTagMultiPayload(v20, v21, v19);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  uint64_t v11 = v1;
  uint64_t v2 = type metadata accessor for DataFrame(0);
  uint64_t v3 = *(void *)(v2 - 8);
  int64_t v4 = *(void *)(v3 + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  int64_t v7 = *(unsigned char *)(a1 + 8);
  uint64_t v9 = *(void *)a1;
  Swift::OpaquePointer v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLRandomForestClassifier.evaluation(on:)((uint64_t)&v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(&v9, v2);
}

uint64_t MLRandomForestClassifier.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = v2;
  uint64_t v62 = v3;
  uint64_t v61 = a1;
  int64_t v4 = *(void *)(*(void *)(type metadata accessor for AnyTreeClassifierModel(0) - 8) + 64);
  int64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v45 = &v40;
  uint64_t v54 = type metadata accessor for Model(0);
  uint64_t v53 = *(void *)(v54 - 8);
  int64_t v7 = *(void *)(v53 + 64);
  uint64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  uint64_t v42 = &v40;
  uint64_t v10 = type metadata accessor for URL(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v47 = *a2;
  uint64_t v43 = a2[1];
  unint64_t v48 = a2[2];
  uint64_t v49 = (char *)a2[3];
  uint64_t v50 = a2[4];
  uint64_t v51 = a2[5];
  uint64_t v46 = a2[6];
  unint64_t v52 = a2[7];
  uint64_t v15 = a2[8];
  uint64_t v16 = v63;
  uint64_t result = static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v61, 0xD000000000000016, (unint64_t)("parameter-images" + 0x8000000000000000), 0x6C65646F6D6C6DLL, (void *)0xE700000000000000);
  if (!v16)
  {
    uint64_t v63 = 0;
    uint64_t v56 = &v40;
    uint64_t v57 = v10;
    uint64_t v55 = v11;
    outlined init with copy of MLTrainingSessionParameters(v62, (uint64_t)v45, type metadata accessor for AnyTreeClassifierModel);
    uint64_t v18 = v43;
    uint64_t v44 = v15;
    if (v43)
    {
      uint64_t v19 = v47;
      uint64_t v61 = v43;
      uint64_t v20 = v48;
      unint64_t v21 = v48;
      uint64_t v22 = (uint64_t)v49;
      uint64_t v60 = v49;
      uint64_t v23 = v50;
      uint64_t v24 = v50;
      uint64_t v25 = v51;
      uint64_t v58 = v51;
      uint64_t v26 = v46;
      uint64_t v27 = v46;
      uint64_t v28 = v52;
      unint64_t v59 = v52;
      uint64_t v62 = v15;
      uint64_t v29 = v47;
    }
    else
    {
      unint64_t v30 = NSFullUserName();
      uint64_t v31 = v30;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v61 = v32;

      uint64_t v60 = "RandomForestRegressor" + 0x8000000000000000;
      unint64_t v21 = 0xD000000000000033;
      unint64_t v59 = 0xE100000000000000;
      uint64_t v27 = 49;
      uint64_t v24 = 0;
      uint64_t v58 = 0;
      uint64_t v62 = 0;
      uint64_t v26 = v46;
      uint64_t v19 = v47;
      uint64_t v20 = v48;
      uint64_t v22 = (uint64_t)v49;
      uint64_t v23 = v50;
      uint64_t v25 = v51;
      uint64_t v28 = v52;
    }
    v41[0] = v29;
    v41[1] = v61;
    void v41[2] = v21;
    v41[3] = v60;
    v41[4] = v24;
    v41[5] = v58;
    v41[6] = v27;
    v41[7] = v59;
    v41[8] = v62;
    outlined copy of MLModelMetadata?(v19, v18, v20, v22, v23, v25, v26, v28, v44);
    uint64_t v33 = v42;
    uint64_t v34 = (uint64_t)v45;
    uint64_t v35 = v63;
    specialized CoreMLExportable.export(metadata:)((uint64_t)v41);
    if (v35)
    {
      uint64_t v63 = v35;
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease((_BYTE)v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v62);
      outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for AnyTreeClassifierModel);
      uint64_t v36 = v55;
      uint64_t v37 = v57;
      uint64_t v39 = v56;
    }
    else
    {
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease((_BYTE)v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v62);
      outlined destroy of MLActivityClassifier.ModelParameters(v34, type metadata accessor for AnyTreeClassifierModel);
      uint64_t v38 = v56;
      Model.write(to:)(v56);
      uint64_t v63 = 0;
      uint64_t v36 = v55;
      (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v33, v54);
      uint64_t v39 = v38;
      uint64_t v37 = v57;
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8))(v39, v37);
  }
  return result;
}

uint64_t MLRandomForestClassifier.write(toFile:metadata:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = v3;
  uint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v26 = type metadata accessor for URL.DirectoryHint(0);
  uint64_t v27 = *(void *)(v26 - 8);
  int64_t v5 = *(void *)(v27 + 64);
  int64_t v6 = alloca(v5);
  int64_t v7 = alloca(v5);
  int64_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                             - 8)
                 + 64);
  uint64_t v9 = alloca(v8);
  uint64_t v10 = alloca(v8);
  uint64_t v11 = type metadata accessor for URL(0);
  uint64_t v29 = *(void *)(v11 - 8);
  int64_t v12 = *(void *)(v29 + 64);
  uint64_t v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v28 = *((void *)a3 + 8);
  long long v19 = *a3;
  long long v20 = a3[1];
  long long v21 = a3[2];
  long long v22 = a3[3];
  uint64_t v30 = v11;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v11);
  (*(void (**)(_OWORD *, void, uint64_t))(v27 + 104))(v17, enum case for URL.DirectoryHint.inferFromPath(_:), v26);
  uint64_t v15 = v25;
  swift_bridgeObjectRetain(v25);
  URL.init(filePath:directoryHint:relativeTo:)(v24, v15, v17, v17);
  v17[0] = v19;
  v17[1] = v20;
  v17[2] = v21;
  v17[3] = v22;
  uint64_t v18 = v28;
  MLRandomForestClassifier.write(to:metadata:)((uint64_t)v17, (uint64_t *)v17);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v29 + 8))(v17, v30);
}

id MLRandomForestClassifier.model.getter()
{
  uint64_t v1 = type metadata accessor for MLRandomForestClassifier(0);
  return *(id *)(v0 + *(int *)(v1 + 20));
}

unint64_t MLRandomForestClassifier.description.getter()
{
  return MLRandomForestClassifier.debugDescription.getter();
}

unint64_t MLRandomForestClassifier.debugDescription.getter()
{
  uint64_t v1 = v0;
  v25._char object = (void *)type metadata accessor for MLClassifierMetrics.Contents(0);
  int64_t v2 = *(void *)(*((void *)v25._object - 1) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  uint64_t v5 = type metadata accessor for MLRandomForestClassifier(0);
  v25._uint64_t countAndFlagsBits = MLRandomForestClassifier.ModelParameters.description.getter();
  int64_t v7 = v6;
  v22._uint64_t countAndFlagsBits = MLClassifierMetrics.description.getter();
  v22._char object = v8;
  uint64_t v9 = *(int *)(v5 + 40);
  uint64_t v10 = v7;
  outlined init with copy of MLTrainingSessionParameters(v1 + v9, (uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v7) = swift_getEnumCaseMultiPayload(&v20, v25._object);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v20, type metadata accessor for MLClassifierMetrics.Contents);
  v25._char object = (void *)MLClassifierMetrics.description.getter();
  int64_t v12 = v11;
  unint64_t v23 = 0xD000000000000023;
  uint64_t v24 = "RandomForestClassifier" + 0x8000000000000000;
  v13._uint64_t countAndFlagsBits = v25._countAndFlagsBits;
  v25._uint64_t countAndFlagsBits = (uint64_t)v10;
  v13._char object = v10;
  String.append(_:)(v13);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._char object = "ActivityClassifier\n\nParameters\n" + 0x8000000000000000;
  char object = (char)v22._object;
  String.append(_:)(v22);
  char v15 = (char)v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v15);
  if (v7 > 1)
  {
    char v18 = object;
  }
  else
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._char object = "\nPerformance on Training Data\n" + 0x8000000000000000;
    v16._uint64_t countAndFlagsBits = (uint64_t)v25._object;
    v16._char object = v12;
    String.append(_:)(v16);
    char v17 = (char)v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    char v18 = (char)v12;
    LOBYTE(v12) = v17;
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease((_BYTE)v12);
  swift_bridgeObjectRelease(v25._countAndFlagsBits);
  return v23;
}

NSAttributedString MLRandomForestClassifier.playgroundDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSAttributedString();
  v3._uint64_t countAndFlagsBits = MLRandomForestClassifier.debugDescription.getter();
  v3._char object = v4;
  result.super.CFDataRef isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  v1[3].super.CFDataRef isa = (Class)v2;
  v1->super.CFDataRef isa = result.super.isa;
  return result;
}

void *specialized _setUpCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
    Swift::String v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    Swift::String v3 = &_swiftEmptySetSingleton;
  }
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = ~(-1 << -(char)v4);
  if (-v4 >= 64) {
    uint64_t v5 = -1;
  }
  unint64_t v6 = *(void *)(a1 + 56) & v5;
  uint64_t v23 = a1 + 56;
  v22[2] = v4;
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      _BitScanForward64(&v9, v6);
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(1, v8)) {
      BUG();
    }
    if (v11 >= v7) {
      break;
    }
    unint64_t i = *(void *)(v23 + 8 * v11);
    if (i)
    {
      int64_t v13 = v8 + 1;
    }
    else
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v7) {
        break;
      }
      unint64_t i = *(void *)(v23 + 8 * v11 + 8);
      if (!i)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v7) {
          break;
        }
        unint64_t i = *(void *)(v23 + 8 * v11 + 16);
        if (!i)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v7) {
            break;
          }
          unint64_t i = *(void *)(v23 + 8 * v11 + 24);
          if (!i)
          {
            int64_t v13 = v8 + 5;
            if (v8 + 5 >= v7) {
              break;
            }
            for (unint64_t i = *(void *)(v23 + 8 * v11 + 32); !i; unint64_t i = *(void *)(v23 + 8 * v13))
            {
              if (__OFADD__(1, v13++)) {
                BUG();
              }
              if (v13 >= v7) {
                goto LABEL_27;
              }
            }
          }
        }
      }
    }
    _BitScanForward64(&v14, i);
    unint64_t v6 = i & (i - 1);
    unint64_t v10 = v14 + (v13 << 6);
    int64_t v8 = v13;
LABEL_20:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = 16 * v10;
    uint64_t v17 = *(void *)(v15 + v16 + 8);
    v22[0] = *(void *)(v15 + v16);
    v22[1] = v17;
    swift_bridgeObjectRetain(v17);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    swift_dynamicCast(v21, v22, &type metadata for String, v18, 7);
    specialized _NativeSet._unsafeInsertNew(_:)(v21[0], v21[1], (uint64_t)v3);
  }
LABEL_27:
  swift_release();
  outlined consume of [String : [Int]].Iterator._Variant(a1);
  return v3;
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t i;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t j;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v31;
  char v32;
  void v33[2];
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;

  uint64_t v35 = a1;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int?>);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)(v1);
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  Swift::String v3 = -1 << *(unsigned char *)(v35 + 32);
  uint64_t v37 = v35 + 56;
  uint64_t v4 = ~(-1 << -(char)v3);
  if (-v3 >= 64) {
    uint64_t v4 = -1;
  }
  uint64_t v5 = *(void *)(v35 + 56) & v4;
  v33[1] = v3;
  uint64_t v36 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain(v35);
  swift_retain();
  for (unint64_t i = 0; ; unint64_t i = v34)
  {
    if (v5)
    {
      _BitScanForward64(&v7, v5);
      v5 &= v5 - 1;
      int64_t v8 = v7 | (i << 6);
      uint64_t v34 = i;
      goto LABEL_20;
    }
    unint64_t v9 = i + 1;
    if (__OFADD__(1, i)) {
      BUG();
    }
    if (v9 >= v36) {
      break;
    }
    unint64_t j = *(void *)(v37 + 8 * v9);
    if (j)
    {
      int64_t v11 = i + 1;
    }
    else
    {
      int64_t v11 = i + 2;
      if (i + 2 >= v36) {
        break;
      }
      unint64_t j = *(void *)(v37 + 8 * v9 + 8);
      if (!j)
      {
        int64_t v11 = i + 3;
        if (i + 3 >= v36) {
          break;
        }
        unint64_t j = *(void *)(v37 + 8 * v9 + 16);
        if (!j)
        {
          int64_t v11 = i + 4;
          if (i + 4 >= v36) {
            break;
          }
          unint64_t j = *(void *)(v37 + 8 * v9 + 24);
          if (!j)
          {
            int64_t v11 = i + 5;
            if (i + 5 >= v36) {
              break;
            }
            for (unint64_t j = *(void *)(v37 + 8 * v9 + 32); !j; unint64_t j = *(void *)(v37 + 8 * v11))
            {
              if (__OFADD__(1, v11++)) {
                BUG();
              }
              if (v11 >= v36) {
                goto LABEL_41;
              }
            }
          }
        }
      }
    }
    _BitScanForward64(&v12, j);
    uint64_t v5 = j & (j - 1);
    uint64_t v34 = v11;
    int64_t v8 = v12 + (v11 << 6);
LABEL_20:
    v33[0] = *(void *)(*(void *)(v35 + 48) + 8 * v8);
    int64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    swift_dynamicCast(&v31, v33, &type metadata for Int, v13, 7);
    unint64_t v14 = v31;
    uint64_t v15 = v32;
    Hasher.init(_seed:)(v2[5]);
    if (v15 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v14);
    }
    uint64_t v16 = Hasher._finalize()() & ~(-1 << *((unsigned char *)v2 + 32));
    uint64_t v17 = v16 >> 6;
    uint64_t v18 = ~v2[(v16 >> 6) + 7] >> v16 << v16;
    if (v18)
    {
      _BitScanForward64(&v19, v18);
      uint64_t v20 = v19 | v16 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      Swift::String v21 = (unint64_t)(63 - (-1 << *((unsigned char *)v2 + 32))) >> 6;
      Swift::String v22 = 0;
      do
      {
        uint64_t v23 = v17 + 1;
        if (v17 + 1 == v21 && (v22 & 1) != 0) {
          BUG();
        }
        uint64_t v17 = 0;
        if (v23 != v21) {
          uint64_t v17 = v23;
        }
        v22 |= v23 == v21;
        uint64_t v24 = v2[v17 + 7];
      }
      while (v24 == -1);
      Swift::String v25 = ~v24;
      uint64_t v26 = 64;
      if (v25) {
        _BitScanForward64((unint64_t *)&v26, v25);
      }
      uint64_t v20 = v26 + (v17 << 6);
    }
    v2[(v20 >> 6) + 7] |= 1 << v20;
    uint64_t v27 = v2[6];
    uint64_t v28 = 16 * v20;
    *(void *)(v27 + v28) = v14;
    *(unsigned char *)(v27 + v28 + 8) = v15;
    ++v2[2];
  }
LABEL_41:
  swift_release();
  outlined consume of [String : [Int]].Iterator._Variant(v35);
  return v2;
}

void key path setter for MLRandomForestClassifier.model : MLRandomForestClassifier(id *a1)
{
  id v1 = *a1;
  MLRandomForestClassifier.model.setter((uint64_t)v1);
}

void MLRandomForestClassifier.model.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLRandomForestClassifier(0) + 20);

  *(void *)(v1 + v2) = a1;
}

void (*MLRandomForestClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestClassifier(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(v1 + v3);
  *(void *)a1 = v4;
  v4;
  return MLActivityClassifier.model.modify;
}

uint64_t MLRandomForestClassifier.targetColumn.getter()
{
  uint64_t v1 = *(int *)(type metadata accessor for MLRandomForestClassifier(0) + 24);
  uint64_t v2 = *(void *)(v0 + v1);
  swift_bridgeObjectRetain(*(void *)(v0 + v1 + 8));
  return v2;
}

uint64_t MLRandomForestClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(type metadata accessor for MLRandomForestClassifier(0) + 24);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + v3 + 8));
  *(void *)(v2 + v3) = a1;
  *(void *)(v2 + v3 + 8) = a2;
  return result;
}

void (*MLRandomForestClassifier.targetColumn.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.featureColumns.getter()
{
  uint64_t v1 = type metadata accessor for MLRandomForestClassifier(0);
  return swift_bridgeObjectRetain(*(void *)(v0 + *(int *)(v1 + 28)));
}

uint64_t MLRandomForestClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MLRandomForestClassifier(0) + 28);
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + v2));
  *(void *)(v1 + v2) = a1;
  return result;
}

void (*MLRandomForestClassifier.featureColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.modelParameters.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier(0);
  return outlined init with copy of MLRandomForestClassifier.ModelParameters(v1 + *(int *)(v3 + 32), v2);
}

uint64_t MLRandomForestClassifier.trainingMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t MLRandomForestClassifier.validationMetrics.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MLRandomForestClassifier(0);
  return outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 40), v2, type metadata accessor for MLClassifierMetrics);
}

uint64_t static MLRandomForestClassifier._defaultSessionParameters.getter()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _defaultSessionParameters != -1) {
    swift_once(&one-time initialization token for _defaultSessionParameters, one-time initialization function for _defaultSessionParameters);
  }
  uint64_t v2 = type metadata accessor for MLTrainingSessionParameters(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MLRandomForestClassifier._defaultSessionParameters);
  return outlined init with copy of MLTrainingSessionParameters(v3, v1, type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a6;
  v6[6] = a5;
  void v6[5] = a4;
  void v6[4] = a3;
  void v6[3] = a2;
  void v6[2] = a1;
  return swift_task_switch(MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v14 = *(void *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for MLRandomForestClassifier(0);
  *(void *)(v0 + 64) = v2;
  *(_DWORD *)(v0 + 96) = v2[9];
  MLClassifierMetrics.init()();
  uint64_t v3 = v2[10];
  *(_DWORD *)(v0 + 100) = v3;
  uint64_t v4 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v5 = swift_allocError(&type metadata for MLCreateError, v4, 0, 0);
  *(void *)uint64_t v6 = 0xD0000000000000C0;
  *(void *)(v6 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 48) = 0;
  *(void *)(v1 + v3) = v5;
  uint64_t v7 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v1 + v3, v7, 2);
  uint64_t v8 = v2[7];
  *(_DWORD *)(v0 + 104) = v8;
  *(void *)(v1 + v8) = v14;
  uint64_t v9 = v2[6];
  *(_DWORD *)(v0 + 108) = v9;
  *(_OWORD *)(v1 + v9) = v13;
  unint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  int64_t v11 = (void *)swift_task_alloc(dword_3AE24C);
  *(void *)(v0 + 72) = v11;
  *int64_t v11 = v0;
  v11[1] = MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(const void **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v3 + *(int *)(v1 + 20)) = *(void *)(v0 + 88);
  outlined init with take of MLClassifierMetrics(v4, v3, type metadata accessor for AnyTreeClassifierModel);
  qmemcpy((void *)(v3 + *(int *)(v1 + 32)), v2, 0x58uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  uint64_t v7 = *(int *)(v0 + 108);
  uint64_t v6 = *(int *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = v1 + *(int *)(v0 + 100);
  uint64_t v4 = v1 + *(int *)(v0 + 96);
  outlined destroy of MLRandomForestClassifier.ModelParameters(*(void *)(v0 + 56));
  outlined destroy of MLActivityClassifier.ModelParameters(v2, type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease(*(void *)(v1 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v1 + v6));
  outlined destroy of MLActivityClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLActivityClassifier.ModelParameters(v3, type metadata accessor for MLClassifierMetrics);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:);
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, char *a3, void (*a4)(uint64_t *, uint64_t *, uint64_t), uint64_t a5)
{
  uint64_t v204 = (void (*)(uint64_t *, uint64_t *, uint64_t))a4;
  Swift::String _ = a3;
  uint64_t v7 = v5;
  v208._uint64_t countAndFlagsBits = a2;
  uint64_t v203 = (char *)v6;
  uint64_t v214 = a5;
  uint64_t v209 = a1;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for AnyClassificationMetrics(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v186 = &v162;
  int64_t v11 = alloca(v8);
  int64_t v12 = alloca(v8);
  uint64_t v182 = &v162;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for MLClassifierMetrics(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  uint64_t v15 = alloca(v13);
  uint64_t v187 = &v162;
  uint64_t v16 = alloca(v13);
  uint64_t v17 = alloca(v13);
  uint64_t v183 = &v162;
  uint64_t v180 = *(void *)(type metadata accessor for AnyTreeClassifierModel(0) - 8);
  int64_t v18 = *(void *)(v180 + 64);
  long long v19 = alloca(v18);
  uint64_t v20 = alloca(v18);
  uint64_t v178 = &v162;
  int64_t v179 = v18;
  Swift::String v21 = alloca(v18);
  Swift::String v22 = alloca(v18);
  char v206 = &v162;
  int64_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?)
                              - 8)
                  + 64);
  uint64_t v24 = alloca(v23);
  Swift::String v25 = alloca(v23);
  uint64_t v175 = &v162;
  int64_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?)
                              - 8)
                  + 64);
  uint64_t v27 = alloca(v26);
  uint64_t v28 = alloca(v26);
  uint64_t v197 = &v162;
  uint64_t v191 = type metadata accessor for AnyColumn(0);
  int64_t v29 = *(void *)(*(void *)(v191 - 8) + 64);
  uint64_t v30 = alloca(v29);
  uint64_t v31 = alloca(v29);
  uint64_t v195 = &v162;
  uint64_t v32 = alloca(v29);
  uint64_t v33 = alloca(v29);
  uint64_t v201 = &v162;
  uint64_t v34 = alloca(v29);
  uint64_t v35 = alloca(v29);
  uint64_t v200 = (uint64_t)&v162;
  int64_t v36 = *(void *)(*(void *)(type metadata accessor for AnyTreeClassifier(0) - 8) + 64);
  uint64_t v37 = alloca(v36);
  uint64_t v38 = alloca(v36);
  uint64_t v205 = &v162;
  uint64_t v216 = type metadata accessor for DataFrame(0);
  uint64_t v199 = *(void *)(v216 - 8);
  int64_t v39 = *(void *)(v199 + 64);
  uint64_t v40 = alloca(v39);
  uint64_t v41 = alloca(v39);
  uint64_t v185 = &v162;
  uint64_t v42 = alloca(v39);
  uint64_t v43 = alloca(v39);
  uint64_t v198 = &v162;
  uint64_t v44 = alloca(v39);
  uint64_t v45 = alloca(v39);
  uint64_t v194 = &v162;
  uint64_t v46 = alloca(v39);
  uint64_t v47 = alloca(v39);
  v208._char object = &v162;
  uint64_t v218 = (void (*)(uint64_t *, uint64_t))type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v48 = *(void *)(*((void *)v218 - 1) + 64);
  uint64_t v49 = alloca(v48);
  uint64_t v50 = alloca(v48);
  uint64_t v217 = &v162;
  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v51 = *(void *)(*(void *)(v207 - 8) + 64);
  unint64_t v52 = alloca(v51);
  uint64_t v53 = alloca(v51);
  char v184 = &v162;
  uint64_t v54 = alloca(v51);
  uint64_t v55 = alloca(v51);
  uint64_t v181 = &v162;
  uint64_t v56 = alloca(v51);
  uint64_t v57 = alloca(v51);
  uint64_t v190 = &v162;
  uint64_t v58 = alloca(v51);
  unint64_t v59 = alloca(v51);
  uint64_t v177 = &v162;
  uint64_t v60 = alloca(v51);
  uint64_t v61 = alloca(v51);
  uint64_t v174 = &v162;
  uint64_t v62 = alloca(v51);
  uint64_t v63 = alloca(v51);
  char v215 = &v162;
  uint64_t v211 = type metadata accessor for BoostedTreeConfiguration(0);
  uint64_t v213 = *(void *)(v211 - 8);
  int64_t v64 = *(void *)(v213 + 64);
  uint64_t v65 = alloca(v64);
  uint64_t v66 = alloca(v64);
  uint64_t v176 = &v162;
  uint64_t v67 = alloca(v64);
  unint64_t v68 = alloca(v64);
  uint64_t v69 = type metadata accessor for MLRandomForestClassifier(0);
  uint64_t v188 = (uint64_t)v7 + *(int *)(v69 + 36);
  MLClassifierMetrics.init()();
  uint64_t v192 = v69;
  uint64_t v70 = *(int *)(v69 + 40);
  uint64_t v71 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v72 = swift_allocError(&type metadata for MLCreateError, v71, 0, 0);
  *(void *)uint64_t v73 = 0xD0000000000000C0;
  *(void *)(v73 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v73 + 16) = 0;
  *(_OWORD *)(v73 + 32) = 0;
  *(unsigned char *)(v73 + 48) = 0;
  uint64_t v193 = v7;
  *(uint64_t *)((char *)v7 + v70) = v72;
  uint64_t v74 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v189 = (uint64_t)v7 + v70;
  uint64_t v196 = v74;
  swift_storeEnumTagMultiPayload((char *)v7 + v70, v74, 2);
  uint64_t v75 = v214;
  outlined init with copy of MLRandomForestClassifier.ModelParameters(v214, (uint64_t)v164);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.learningRate.setter(1.0);
  BoostedTreeConfiguration.parallelTreeCount.setter(10);
  BoostedTreeConfiguration.maximumDepth.setter(v165);
  BoostedTreeConfiguration.maximumIterations.setter(v166);
  BoostedTreeConfiguration.minimumLossReduction.setter(v167);
  BoostedTreeConfiguration.minimumChildWeight.setter(v168);
  BoostedTreeConfiguration.randomSeed.setter(v169);
  BoostedTreeConfiguration.rowSubsample.setter(v170);
  double v76 = v171;
  uint64_t v212 = &v162;
  BoostedTreeConfiguration.columnSubsample.setter(v171);
  outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)v164);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v75, (uint64_t)&v172, &demangling cache variable for type metadata for Any?);
  if (!v173) {
    BUG();
  }
  uint64_t v77 = v215;
  uint64_t v78 = (char *)v215 + *(int *)(v207 + 48);
  outlined init with take of Any(&v172, v164);
  swift_dynamicCast(v217, v164, (char *)&type metadata for Any + 8, v218, 7);
  uint64_t v79 = v209;
  uint64_t v80 = (uint64_t)v203;
  MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)((uint64_t)v77, (uint64_t)v78, v209);
  if (v80)
  {
    swift_bridgeObjectRelease((_BYTE)_);
    swift_bridgeObjectRelease((_BYTE)v204);
    outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
    (*(void (**)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))(v199 + 8))(v79, v216);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v217, type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
    (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
LABEL_5:
    outlined destroy of MLActivityClassifier.ModelParameters(v188, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v189, type metadata accessor for MLClassifierMetrics);
  }
  uint64_t v203 = v78;
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v217, type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
  char v81 = (char)v204;
  unint64_t v82 = static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v77, v208._countAndFlagsBits, _, (uint64_t)v204);
  uint64_t v217 = 0;
  uint64_t v83 = v216;
  uint64_t v202 = v82;
  swift_bridgeObjectRelease(v81);
  uint64_t v85 = v174;
  uint64_t v86 = (uint64_t)v174 + *(int *)(v207 + 48);
  uint64_t v87 = v199;
  uint64_t v204 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v199 + 16);
  v204(v174, v215, v83);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v203, v86, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v86, 1, v83) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v86, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v218 = *(void (**)(uint64_t *, uint64_t))(v87 + 8);
    v218(v85, v83);
  }
  else
  {
    (*(void (**)(void *, uint64_t, uint64_t))(v87 + 32))(v208._object, v86, v83);
    uint64_t v218 = *(void (**)(uint64_t *, uint64_t))(v87 + 8);
    v218(v85, v83);
    uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = (void *)swift_initStackObject(v97, v163);
    inited[2] = 1;
    inited[3] = 2;
    inited[4] = v208._countAndFlagsBits;
    uint64_t v99 = _;
    inited[5] = _;
    swift_bridgeObjectRetain((_BYTE)v99);
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, (Swift::String)__PAIR128__(0xEE00726569666973, 0x73616C4365657254));
    if (v100)
    {
      swift_setDeallocating(inited);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease((_BYTE)v99);
      swift_bridgeObjectRelease((_BYTE)v202);
      outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
      uint64_t v101 = v216;
      unint64_t v102 = (void (*)(void *, uint64_t))v218;
      v218((uint64_t *)v209, v216);
      v102(v208._object, v101);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
      goto LABEL_5;
    }
    swift_setDeallocating(inited);
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
    uint64_t v112 = (void *)swift_allocObject(v111, 48, 7);
    v112[2] = 2;
    v112[3] = 4;
    v112[4] = &type metadata for String;
    v112[5] = &type metadata for Int;
    v113._uint64_t countAndFlagsBits = v208._countAndFlagsBits;
    v113._char object = v99;
    char object = v208._object;
    DataFrame.validateColumnTypes(_:_:context:)(v113, (Swift::OpaquePointer)v112, (Swift::String)__PAIR128__(0xEE00726569666973, 0x73616C4365657254));
    uint64_t v217 = (uint64_t *)v115;
    if (v115)
    {
      swift_bridgeObjectRelease((_BYTE)v99);
      swift_bridgeObjectRelease((_BYTE)v202);
      swift_bridgeObjectRelease((_BYTE)v112);
      outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
      uint64_t v116 = v216;
      uint64_t v117 = (void (*)(void *, uint64_t))v218;
      v218((uint64_t *)v209, v216);
      v117(object, v116);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
      goto LABEL_5;
    }
    v218((uint64_t *)object, v216);
    swift_bridgeObjectRelease((_BYTE)v112);
  }
  uint64_t v88 = v177;
  uint64_t v89 = (char *)v177 + *(int *)(v207 + 48);
  CFURLRef v90 = v215;
  v204(v177, v215, v216);
  uint64_t v91 = (uint64_t)v203;
  v208._char object = v89;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v203, (uint64_t)v89, &demangling cache variable for type metadata for DataFrame?);
  DataFrame.subscript.getter(v208._countAndFlagsBits, _);
  uint64_t v92 = v216;
  v218(v88, v216);
  uint64_t v93 = v90;
  uint64_t v94 = v190;
  uint64_t v95 = (uint64_t)v190 + *(int *)(v207 + 48);
  v204(v190, v93, v92);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v91, v95, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v96 = (uint64_t)v175;
  outlined init with take of DataFrame?(v95, (uint64_t)v175);
  if (__swift_getEnumTagSinglePayload(v96, 1, v92) == 1)
  {
    v218(v94, v92);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v96, &demangling cache variable for type metadata for DataFrame?);
    __swift_storeEnumTagSinglePayload((uint64_t)v197, 1, 1, v191);
  }
  else
  {
    uint64_t v103 = (uint64_t)v197;
    DataFrame.subscript.getter(v208._countAndFlagsBits, _);
    uint64_t v104 = v96;
    unint64_t v105 = v218;
    v218((uint64_t *)v104, v92);
    __swift_storeEnumTagSinglePayload(v103, 0, 1, v191);
    v105(v190, v92);
  }
  uint64_t v106 = (uint64_t)_;
  uint64_t v107 = (uint64_t)v176;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v213 + 16))(v176, v212, v211);
  swift_bridgeObjectRetain(v106);
  uint64_t v108 = (uint64_t)v202;
  swift_bridgeObjectRetain((_BYTE)v202);
  uint64_t v109 = (uint64_t)v217;
  AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v200, (uint64_t)v197, v208._countAndFlagsBits, v106, v108, v107);
  if (v109)
  {
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v108);
    outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
    v218((uint64_t *)v209, v216);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v208._object, &demangling cache variable for type metadata for DataFrame?);
    goto LABEL_5;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v208._object, &demangling cache variable for type metadata for DataFrame?);
  uint64_t v110 = (uint64_t)v206;
  AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(v215, (uint64_t)v203, 0, 0, v76);
  uint64_t v217 = 0;
  uint64_t v118 = v110;
  if (!AnalyticsReporter.init()())
  {
    uint64_t v119 = v181;
    uint64_t v120 = (uint64_t)v181 + *(int *)(v207 + 48);
    uint64_t v121 = v216;
    v204(v181, v215, v216);
    uint64_t v122 = (uint64_t)v203;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v203, v120, &demangling cache variable for type metadata for DataFrame?);
    Swift::Int v123 = DataFrame.shape.getter(v122);
    uint64_t v124 = v119;
    uint64_t v118 = (uint64_t)v206;
    v218(v124, v121);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestClassifier, (Swift::String)__PAIR128__((unint64_t)("vectorized_features" + 0x8000000000000000), 0xD000000000000015), v123);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v120, &demangling cache variable for type metadata for DataFrame?);
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestClassifier, (Swift::String)__PAIR128__((unint64_t)("Number of Annotations" + 0x8000000000000000), 0xD000000000000010), *(void *)(v205[3] + 16));
  }
  uint64_t v125 = v192;
  uint64_t v126 = *(int *)(v192 + 24);
  CFURLRef v127 = v193;
  *(uint64_t *)((char *)v193 + v126) = v208._countAndFlagsBits;
  v208._uint64_t countAndFlagsBits = v126;
  *(uint64_t *)((char *)v127 + v126 + 8) = (uint64_t)_;
  Swift::String _ = (char *)v127 + *(int *)(v125 + 32);
  outlined init with copy of MLRandomForestClassifier.ModelParameters(v214, (uint64_t)_);
  v208._char object = (void *)*(int *)(v125 + 28);
  *(uint64_t *)((char *)v127 + (unint64_t)v208._object) = (uint64_t)v202;
  uint64_t v128 = (uint64_t)v178;
  outlined init with copy of MLTrainingSessionParameters(v118, (uint64_t)v178, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v129 = *(unsigned __int8 *)(v180 + 80);
  uint64_t v130 = ~*(unsigned __int8 *)(v180 + 80) & (v129 + 16);
  uint64_t v131 = swift_allocObject(&unk_39ACC0, v130 + v179, v129 | 7);
  outlined init with take of MLClassifierMetrics(v128, v131 + v130, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v132 = (uint64_t)v217;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:), v131);
  if (v132)
  {
    uint64_t v217 = (uint64_t *)v132;
    swift_release();
    outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
    v218((uint64_t *)v209, v216);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
LABEL_24:
    uint64_t v135 = (uint64_t)_;
    uint64_t v136 = (char *)v208._object;
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v127 + v208._countAndFlagsBits + 8));
    swift_bridgeObjectRelease(*(void *)&v136[(void)v127]);
    outlined destroy of MLRandomForestClassifier.ModelParameters(v135);
    goto LABEL_5;
  }
  uint64_t v134 = v133;
  swift_release();
  uint64_t v200 = *(int *)(v192 + 20);
  *(uint64_t *)((char *)v127 + v200) = v134;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v206, (uint64_t)v127, type metadata accessor for AnyTreeClassifierModel);
  AnyTreeClassifierModel.applied(to:eventHandler:)((uint64_t)v215, 0, 0);
  uint64_t v217 = 0;
  uint64_t v137 = *v127;
  uint64_t v138 = v127[1];
  DataFrame.subscript.getter(*v127, v138);
  uint64_t v139 = (uint64_t)v195;
  uint64_t v140 = v215;
  DataFrame.subscript.getter(v137, v138);
  uint64_t v141 = v182;
  AnyClassificationMetrics.init(_:_:)((uint64_t)v201, v139);
  uint64_t v142 = v216;
  v218(v194, v216);
  uint64_t v143 = (uint64_t)v141;
  uint64_t v144 = (uint64_t)v183;
  outlined init with take of MLClassifierMetrics(v143, (uint64_t)v183, type metadata accessor for AnyClassificationMetrics);
  swift_storeEnumTagMultiPayload(v144, v196, 0);
  outlined assign with take of MLClassifierMetrics(v144, v188);
  uint64_t v145 = v184;
  uint64_t v146 = (uint64_t)v184 + *(int *)(v207 + 48);
  v204(v184, v140, v142);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v203, v146, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload(v146, 1, v142) == 1)
  {
    outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
    CFURLRef v147 = (uint64_t (*)(uint64_t *, uint64_t))v218;
    v218((uint64_t *)v209, v142);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v146, &demangling cache variable for type metadata for DataFrame?);
    return v147(v145, v142);
  }
  else
  {
    uint64_t v148 = (uint64_t)v198;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v199 + 32))(v198, v146, v142);
    v218(v145, v142);
    uint64_t v149 = v185;
    CFURLRef v127 = v193;
    uint64_t v150 = (uint64_t)v217;
    AnyTreeClassifierModel.applied(to:eventHandler:)(v148, 0, 0);
    uint64_t v217 = (uint64_t *)v150;
    uint64_t v151 = v212;
    if (v150)
    {
      outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
      uint64_t v152 = v216;
      uint64_t v153 = v218;
      v218((uint64_t *)v209, v216);
      v153(v198, v152);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v151, v211);
      outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v127, type metadata accessor for AnyTreeClassifierModel);

      goto LABEL_24;
    }
    uint64_t v207 = *v127;
    uint64_t v154 = v127[1];
    DataFrame.subscript.getter(v207, v154);
    uint64_t v155 = (uint64_t)v195;
    uint64_t v156 = v198;
    DataFrame.subscript.getter(v207, v154);
    uint64_t v157 = (uint64_t)v186;
    AnyClassificationMetrics.init(_:_:)((uint64_t)v201, v155);
    CFURLRef v158 = v149;
    uint64_t v159 = v216;
    uint64_t v160 = (void (*)(void (*)(uint64_t *, uint64_t, uint64_t), uint64_t))v218;
    v218(v158, v216);
    outlined destroy of MLRandomForestClassifier.ModelParameters(v214);
    v160(v209, v159);
    v160((void (*)(uint64_t *, uint64_t, uint64_t))v156, v159);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v206, type metadata accessor for AnyTreeClassifierModel);
    outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v205, type metadata accessor for AnyTreeClassifier);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v215, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
    (*(void (**)(uint64_t *, uint64_t))(v213 + 8))(v212, v211);
    uint64_t v161 = (uint64_t)v187;
    outlined init with take of MLClassifierMetrics(v157, (uint64_t)v187, type metadata accessor for AnyClassificationMetrics);
    swift_storeEnumTagMultiPayload(v161, v196, 0);
    return outlined assign with take of MLClassifierMetrics(v161, v189);
  }
}

uint64_t closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                         + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v3 = (void *)swift_task_alloc(dword_3AE24C);
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:);
  return v2();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:), 0, 0);
}

uint64_t MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, char *a3, void (*a4)(uint64_t *, uint64_t *, uint64_t), uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  int64_t v6 = *(void *)(*(void *)(type metadata accessor for DataFrame(0) - 8) + 64);
  uint64_t v7 = alloca(v6);
  int64_t v8 = alloca(v6);
  char v9 = *((unsigned char *)a1 + 8);
  uint64_t v12 = *a1;
  char v13 = v9;
  DataFrame.init(_:)((uint64_t)&v12);
  outlined init with copy of MLRandomForestClassifier.ModelParameters(a5, (uint64_t)&v12);
  MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v11, v16, v15, v14, (uint64_t)&v12);
  return outlined destroy of MLRandomForestClassifier.ModelParameters(a5);
}

uint64_t MLRandomForestClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v93 = v2;
  uint64_t v92 = a1;
  uint64_t v3 = v1;
  uint64_t v86 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v4 = *(void *)(*(void *)(v86 - 8) + 64);
  uint64_t v5 = alloca(v4);
  int64_t v6 = alloca(v4);
  uint64_t v84 = v73;
  uint64_t v7 = alloca(v4);
  int64_t v8 = alloca(v4);
  uint64_t v83 = v73;
  int64_t v9 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  unint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  uint64_t v74 = v73;
  uint64_t v90 = type metadata accessor for AnyTreeClassifier(0);
  int64_t v12 = *(void *)(*(void *)(v90 - 8) + 64);
  char v13 = alloca(v12);
  uint64_t v14 = alloca(v12);
  uint64_t v80 = v73;
  uint64_t v15 = alloca(v12);
  uint64_t v16 = alloca(v12);
  uint64_t v75 = v73;
  uint64_t v79 = *(void *)(type metadata accessor for AnyTreeClassifierModel(0) - 8);
  int64_t v17 = *(void *)(v79 + 64);
  int64_t v18 = alloca(v17);
  long long v19 = alloca(v17);
  char v81 = v73;
  uint64_t v20 = alloca(v17);
  Swift::String v21 = alloca(v17);
  uint64_t v78 = v73;
  Swift::String v22 = alloca(v17);
  int64_t v23 = alloca(v17);
  double v76 = v73;
  int64_t v77 = v17;
  uint64_t v24 = alloca(v17);
  Swift::String v25 = alloca(v17);
  uint64_t v91 = v73;
  uint64_t v26 = type metadata accessor for MLRandomForestClassifier(0);
  uint64_t v87 = v3 + *(int *)(v26 + 36);
  MLClassifierMetrics.init()();
  uint64_t v89 = (int *)v26;
  uint64_t v27 = (uint64_t *)(v3 + *(int *)(v26 + 40));
  uint64_t v28 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  uint64_t v29 = swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
  *(void *)uint64_t v30 = 0xD0000000000000C0;
  *(void *)(v30 + 8) = "essor\n\nParameters\n" + 0x8000000000000000;
  *(_OWORD *)(v30 + 16) = 0;
  *(_OWORD *)(v30 + 32) = 0;
  *(unsigned char *)(v30 + 48) = 0;
  *uint64_t v27 = v29;
  uint64_t v31 = v92;
  uint64_t v32 = type metadata accessor for MLClassifierMetrics.Contents(0);
  uint64_t v88 = v27;
  swift_storeEnumTagMultiPayload(v27, v32, 2);
  uint64_t v33 = *(unsigned __int8 *)(v31 + *(int *)(type metadata accessor for MLCheckpoint(0) + 20));
  uint64_t v82 = v3;
  switch(v33)
  {
    case 0:
      uint64_t v34 = v31;
      uint64_t v35 = 0x696C616974696E69;
      unint64_t v36 = 0xEB0000000064657ALL;
      break;
    case 1:
      uint64_t v34 = v31;
      uint64_t v35 = 0x6974636172747865;
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease(0);
      goto LABEL_9;
    case 3:
      uint64_t v34 = v31;
      uint64_t v35 = 0x697461756C617665;
LABEL_6:
      unint64_t v36 = 0xEA0000000000676ELL;
      break;
    case 4:
      uint64_t v34 = v31;
      unint64_t v36 = 0xEB00000000676E69;
      uint64_t v35 = 0x636E657265666E69;
      break;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0x676E696E69617274, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v36);
  BOOL v38 = (v37 & 1) == 0;
  uint64_t v31 = v34;
  if (v38)
  {
    swift_allocError(&type metadata for MLCreateError, v28, 0, 0);
    *(void *)uint64_t v48 = 0xD00000000000004ELL;
    *(void *)(v48 + 8) = "sifier\n\nParameters\n" + 0x8000000000000000;
    *(_OWORD *)(v48 + 16) = 0;
    *(_OWORD *)(v48 + 32) = 0;
    *(unsigned char *)(v48 + 48) = 0;
    swift_willThrow(&type metadata for MLCreateError, v28, v48, v49, v50, v51);
    unint64_t v52 = type metadata accessor for MLCheckpoint;
    uint64_t v53 = v34;
LABEL_15:
    outlined destroy of MLActivityClassifier.ModelParameters(v53, v52);
    uint64_t v64 = (uint64_t)v88;
    outlined destroy of MLActivityClassifier.ModelParameters(v87, type metadata accessor for MLClassifierMetrics);
    return outlined destroy of MLActivityClassifier.ModelParameters(v64, type metadata accessor for MLClassifierMetrics);
  }
LABEL_9:
  int64_t v39 = specialized _setUpCast<A, B>(_:)((uint64_t)&_swiftEmptySetSingleton);
  uint64_t v40 = (uint64_t)v74;
  BoostedTreeConfiguration.init()();
  uint64_t v41 = (uint64_t)v75;
  AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)((uint64_t)v39, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, v40);
  uint64_t v42 = lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
  uint64_t v43 = v76;
  uint64_t v85 = v42;
  uint64_t v44 = v93;
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)(v31, v90, v42);
  uint64_t v93 = v44;
  outlined destroy of MLActivityClassifier.ModelParameters(v41, type metadata accessor for AnyTreeClassifier);
  if (v44)
  {
    uint64_t v45 = specialized _setUpCast<A, B>(_:)((uint64_t)&_swiftEmptySetSingleton);
    BoostedTreeConfiguration.init()();
    uint64_t v46 = (uint64_t)v80;
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)((uint64_t)v45, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, v40);
    uint64_t v47 = v81;
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)(v92, v90, v85);
    outlined destroy of MLActivityClassifier.ModelParameters(v46, type metadata accessor for AnyTreeClassifier);
    swift_errorRelease(v93);
    uint64_t v54 = (uint64_t)v47;
    uint64_t v93 = 0;
  }
  else
  {
    uint64_t v54 = (uint64_t)v43;
  }
  uint64_t v55 = (uint64_t)v91;
  outlined init with take of MLClassifierMetrics(v54, (uint64_t)v91, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v56 = v55;
  uint64_t v57 = (uint64_t)v78;
  outlined init with copy of MLTrainingSessionParameters(v56, (uint64_t)v78, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v58 = *(unsigned __int8 *)(v79 + 80);
  uint64_t v59 = ~*(unsigned __int8 *)(v79 + 80) & (v58 + 16);
  uint64_t v60 = swift_allocObject(&unk_39ACE8, v59 + v77, v58 | 7);
  outlined init with take of MLClassifierMetrics(v57, v60 + v59, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v61 = v93;
  specialized blockAwait<A>(_:)((uint64_t)&async function pointer to partial apply for closure #1 in MLRandomForestClassifier.init(checkpoint:), v60);
  uint64_t v63 = v62;
  swift_release();
  if (v61)
  {
    outlined destroy of MLActivityClassifier.ModelParameters(v92, type metadata accessor for MLCheckpoint);
    unint64_t v52 = type metadata accessor for AnyTreeClassifierModel;
    uint64_t v53 = (uint64_t)v91;
    goto LABEL_15;
  }
  uint64_t v66 = v82;
  *(void *)(v82 + v89[5]) = v63;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v91, v66, type metadata accessor for AnyTreeClassifierModel);
  uint64_t v67 = (uint64_t)v83;
  _OWORD *v83 = 0;
  *(_WORD *)(v67 + 16) = 256;
  swift_storeEnumTagMultiPayload(v67, v86, 0);
  uint64_t v68 = v89[8];
  uint64_t v90 = v66 + v68;
  *(_OWORD *)(v66 + v68 + 16) = 0;
  *(_OWORD *)(v66 + v68) = 0;
  *(void *)(v66 + v68 + 32) = 6;
  *(void *)(v66 + v68 + 40) = 10;
  *(__m128 *)(v66 + v68 + 48) = _mm_loadh_ps((const double *)&qword_346D50);
  *(void *)(v66 + v68 + 64) = 42;
  *(_OWORD *)(v66 + v68 + 72) = xmmword_347720;
  uint64_t v69 = (uint64_t)v84;
  outlined init with copy of MLTrainingSessionParameters(v67, (uint64_t)v84, type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
  v73[3] = v86;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73);
  outlined init with take of MLClassifierMetrics(v69, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v73, v90);
  outlined destroy of MLActivityClassifier.ModelParameters(v67, type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
  uint64_t v71 = v89;
  uint64_t v72 = v89[6];
  *(void *)(v66 + v72) = 0;
  *(void *)(v66 + v72 + 8) = 0xE000000000000000;
  outlined destroy of MLActivityClassifier.ModelParameters(v92, type metadata accessor for MLCheckpoint);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)v91, type metadata accessor for AnyTreeClassifierModel);
  uint64_t result = v71[7];
  *(void *)(v66 + result) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t closure #1 in MLRandomForestClassifier.init(checkpoint:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                         + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  uint64_t v3 = (void *)swift_task_alloc(dword_3AE24C);
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v2();
}

void *static MLRandomForestClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v22 = a5;
  int64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v8 = *(void *)(v7 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  unint64_t v10 = alloca(v9);
  uint64_t v11 = alloca(v9);
  char v12 = *(unsigned char *)(a1 + 8);
  uint64_t v19 = *(void *)a1;
  char v20 = v12;
  outlined copy of Result<_DataTable, Error>(v19, v12);
  DataFrame.init(_:)((uint64_t)&v19);
  char v13 = static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v19, v25, v24, v23, v22, v21);
  uint64_t v14 = v7;
  if (v6) {
    return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v7);
  }
  uint64_t v16 = (uint64_t)v13;
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(&v19, v14);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestClassifier>);
  int64_t v18 = (void *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  return specialized MLJob.init(_:)(v18, v16);
}

long long *static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a6;
  uint64_t v17 = a5;
  int64_t v18 = a4;
  uint64_t v19 = a3;
  uint64_t v7 = type metadata accessor for DataFrame(0);
  uint64_t v20 = *(void *)(v7 - 8);
  int64_t v8 = *(void *)(v20 + 64);
  int64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = *(void *)a1;
  char v15 = v11;
  outlined copy of Result<_DataTable, Error>(v14, v11);
  DataFrame.init(_:)((uint64_t)&v14);
  char v12 = static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)((void (*)(uint64_t *, uint64_t, uint64_t))&v14, a2, v19, v18, v17, v16);
  (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(&v14, v7);
  return v12;
}

void *static MLRandomForestClassifier.resume(_:)(uint64_t a1)
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestClassifier>);
  uint64_t v2 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  swift_retain();
  return specialized MLJob.init(_:)(v2, a1);
}

long long *static MLRandomForestClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t result = static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(a1, a2, a3, a4, a5, a6);
  if (!v6)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestClassifier>);
    unint64_t v10 = (void *)swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    return (long long *)specialized MLJob.init(_:)(v10, v8);
  }
  return result;
}

long long *static MLRandomForestClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(void (*a1)(uint64_t *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v68 = v6;
  uint64_t v64 = a6;
  uint64_t v61 = a4;
  uint64_t v62 = a3;
  uint64_t v55 = a2;
  uint64_t v69 = a1;
  int64_t v8 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v9 = alloca(v8);
  unint64_t v10 = alloca(v8);
  uint64_t v59 = &v44;
  char v11 = alloca(v8);
  char v12 = alloca(v8);
  uint64_t v56 = &v44;
  int64_t v13 = *(void *)(*(void *)(type metadata accessor for BoostedTreeConfiguration(0) - 8) + 64);
  uint64_t v14 = alloca(v13);
  char v15 = alloca(v13);
  uint64_t v57 = &v44;
  uint64_t v70 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData(0);
  int64_t v16 = *(void *)(*(void *)(v70 - 8) + 64);
  uint64_t v17 = alloca(v16);
  int64_t v18 = alloca(v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  int64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  uint64_t v21 = alloca(v20);
  uint64_t v22 = alloca(v20);
  uint64_t v66 = &v44;
  int64_t v23 = alloca(v20);
  uint64_t v24 = alloca(v20);
  uint64_t v71 = &v44;
  uint64_t v25 = alloca(v20);
  uint64_t v26 = alloca(v20);
  uint64_t v67 = &v44;
  uint64_t v58 = a5;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a5, (uint64_t)&v53, &demangling cache variable for type metadata for Any?);
  if (!v54) {
    BUG();
  }
  uint64_t v63 = v19;
  uint64_t v27 = *(int *)(v19 + 48);
  uint64_t v28 = (uint64_t)v67;
  uint64_t v29 = (uint64_t)v67 + v27;
  uint64_t v30 = &v44;
  outlined init with take of Any(&v53, &v44);
  swift_dynamicCast(&v44, &v44, (char *)&type metadata for Any + 8, v70, 7);
  uint64_t v31 = v68;
  MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)(v28, v29, v69);
  outlined destroy of MLActivityClassifier.ModelParameters((uint64_t)&v44, type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData);
  if (!v31)
  {
    uint64_t v32 = (void (*)(uint64_t *, uint64_t, uint64_t))((char *)v71 + *(int *)(v63 + 48));
    uint64_t v33 = type metadata accessor for DataFrame(0);
    uint64_t v65 = *(void *)(v33 - 8);
    uint64_t v68 = *(void (**)(void, void, void))(v65 + 16);
    uint64_t v60 = 0;
    uint64_t v34 = (uint64_t)v67;
    v68(v71, v67, v33);
    uint64_t v69 = v32;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, (uint64_t)v32, &demangling cache variable for type metadata for DataFrame?);
    uint64_t v30 = (long long *)((char *)v66 + *(int *)(v63 + 48));
    uint64_t v70 = v33;
    v68(v66, v34, v33);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v29, (uint64_t)v30, &demangling cache variable for type metadata for DataFrame?);
    outlined init with copy of MLRandomForestClassifier.ModelParameters(v58, (uint64_t)&v44);
    swift_bridgeObjectRetain((_BYTE)v61);
    swift_bridgeObjectRetain(v62);
    uint64_t v35 = (uint64_t)v57;
    BoostedTreeConfiguration.init()();
    BoostedTreeConfiguration.learningRate.setter(1.0);
    BoostedTreeConfiguration.parallelTreeCount.setter(10);
    BoostedTreeConfiguration.maximumDepth.setter(v46);
    BoostedTreeConfiguration.maximumIterations.setter(v47);
    BoostedTreeConfiguration.minimumLossReduction.setter(v48);
    BoostedTreeConfiguration.minimumChildWeight.setter(v49);
    BoostedTreeConfiguration.randomSeed.setter(v50);
    BoostedTreeConfiguration.rowSubsample.setter(v51);
    BoostedTreeConfiguration.columnSubsample.setter(v52);
    outlined destroy of MLRandomForestClassifier.ModelParameters((uint64_t)&v44);
    uint64_t v36 = (uint64_t)v56;
    outlined init with copy of MLTrainingSessionParameters(v64, (uint64_t)v56, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v37 = type metadata accessor for TreeClassifierTrainingSessionDelegate(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    uint64_t v38 = v60;
    int64_t v39 = TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)((uint64_t)v71, (uint64_t)v30, v55, v62, v61, v35, v36);
    if (v38)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v67, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(long long *, uint64_t))(v65 + 8))(v66, v70);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v69, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      uint64_t v40 = (uint64_t)v39;
      (*(void (**)(long long *, uint64_t))(v65 + 8))(v66, v70);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v69, &demangling cache variable for type metadata for DataFrame?);
      uint64_t v45 = v37;
      uint64_t v46 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
      *(void *)&long long v44 = v40;
      uint64_t v41 = (uint64_t)v59;
      outlined init with copy of MLTrainingSessionParameters(v64, (uint64_t)v59, type metadata accessor for MLTrainingSessionParameters);
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      uint64_t v71 = (long long *)v40;
      swift_retain();
      uint64_t v30 = (long long *)specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v44, v41, 1);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v67, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
  }
  return v30;
}

uint64_t static MLRandomForestClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  int64_t v2 = *(void *)(*(void *)(type metadata accessor for MLTrainingSessionParameters(0) - 8) + 64);
  uint64_t v3 = alloca(v2);
  int64_t v4 = alloca(v2);
  char v12 = v11;
  uint64_t v5 = alloca(v2);
  uint64_t v6 = alloca(v2);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, type metadata accessor for MLTrainingSessionParameters);
  uint64_t v7 = type metadata accessor for TreeClassifierTrainingSessionDelegate(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t result = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v11);
  if (!v1)
  {
    void v11[3] = v7;
    v11[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v11[0] = result;
    uint64_t v9 = (uint64_t)v12;
    outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v12, type metadata accessor for MLTrainingSessionParameters);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    return specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v11, v9, 1);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v22 = a5;
  int64_t v23 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  int64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  int64_t v8 = alloca(v7);
  uint64_t v9 = alloca(v7);
  int64_t v10 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64);
  char v11 = alloca(v10);
  char v12 = alloca(v10);
  if (a2)
  {
    uint64_t v19 = a1;
    swift_storeEnumTagMultiPayload(&v19, v6, 1);
    swift_errorRetain(a1);
    v23(&v19);
    return outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v19, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  }
  else
  {
    outlined init with copy of TabularRegressionTask(direct field offset for MLTrainingSession.delegate + a3, (uint64_t)v20);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    uint64_t v14 = type metadata accessor for TreeClassifierTrainingSessionDelegate(0);
    swift_dynamicCast(&v21, v20, v13, v14, 7);
    uint64_t v15 = v21;
    uint64_t v16 = type metadata accessor for TaskPriority(0);
    __swift_storeEnumTagSinglePayload((uint64_t)&v19, 1, 1, v16);
    uint64_t v17 = swift_allocObject(&unk_39AD20, 56, 7);
    *(_OWORD *)(v17 + 16) = 0;
    *(void *)(v17 + 32) = v15;
    *(void *)(v17 + 40) = v23;
    *(void *)(v17 + 48) = v22;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)&v19, (uint64_t)&async function pointer to partial apply for closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:), v17);
    return swift_release();
  }
}

uint64_t closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a6;
  void v6[3] = a5;
  void v6[2] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  void v6[5] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:), 0, 0);
}

uint64_t closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:)()
{
  uint64_t v1 = (char *)&async function pointer to specialized Result<>.init(catching:)
     + async function pointer to specialized Result<>.init(catching:);
  uint64_t v2 = dword_3AE664;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:);
  return ((uint64_t (*)(void, void))v1)(v0[5], v0[2]);
}

{
  uint64_t v0;

  swift_task_dealloc(*(void *)(*(void *)v0 + 48));
  return swift_task_switch(closure #1 in static MLRandomForestClassifier.handleResult(_:session:fulfill:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLRandomForestClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  v2[37] = a2;
  v2[36] = a1;
  uint64_t v3 = type metadata accessor for AnyClassificationMetrics(0);
  v2[38] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[39] = swift_task_alloc(v4);
  v2[40] = swift_task_alloc(v4);
  unint64_t v5 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v5);
  v2[42] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for MLClassifierMetrics(0);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v2[44] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MLRandomForestClassifier(0);
  v2[45] = v8;
  v2[46] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[47] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BoostedTreeConfiguration(0);
  v2[48] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[49] = v11;
  v2[50] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[51] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PersistentParametersForTreeBasedMethods(0);
  v2[52] = v13;
  v2[53] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(MLRandomForestClassifier.init(delegate:), 0, 0);
}

uint64_t MLRandomForestClassifier.init(delegate:)()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[51];
  uint64_t v3 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters + v0[37];
  swift_beginAccess(v3, v0 + 24, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1) {
    BUG();
  }
  uint64_t v4 = v0[53];
  unint64_t v5 = (int *)v0[52];
  uint64_t v6 = v0[50];
  uint64_t v19 = v0[49];
  uint64_t v16 = v0[48];
  uint64_t v17 = v0[47];
  uint64_t v7 = v0[37];
  uint64_t v15 = v0[44];
  outlined init with take of MLClassifierMetrics(v0[51], v4, type metadata accessor for PersistentParametersForTreeBasedMethods);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v6, v4 + v5[8], v16);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4 + v5[5], v17, &demangling cache variable for type metadata for DataFrame?);
  MLRandomForestClassifier.ModelParameters.init(configuration:validation:)(v6, v17);
  uint64_t v8 = v5[6];
  uint64_t v18 = *(void *)(v4 + v8);
  uint64_t v20 = *(void *)(v4 + v8 + 8);
  uint64_t v9 = *(void *)(v4 + v5[7]);
  uint64_t v10 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model + v7;
  swift_beginAccess(v10, v0 + 27, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v15, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel(0);
  if (__swift_getEnumTagSinglePayload(v15, 1, v11) == 1) {
    BUG();
  }
  outlined init with copy of MLRandomForestClassifier.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 13));
  uint64_t v12 = dword_3AAE8C;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v0[54] = v13;
  *uint64_t v13 = v0;
  v13[1] = MLRandomForestClassifier.init(delegate:);
  return MLRandomForestClassifier.init(_:targetColumn:featureColumns:parameters:)(v0[46], v0[44], v18, v20, v9, (uint64_t)(v0 + 13));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  uint64_t v2 = *(void *)(*(void *)v1 + 432);
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = MLRandomForestClassifier.init(delegate:);
  }
  else {
    uint64_t v3 = MLRandomForestClassifier.init(delegate:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 296);
  outlined init with take of MLClassifierMetrics(*(void *)(v0 + 368), *(void *)(v0 + 288), type metadata accessor for MLRandomForestClassifier);
  uint64_t v4 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics + v3;
  swift_beginAccess(v4, v0 + 240, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1) {
    BUG();
  }
  unint64_t v5 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 336);
  uint64_t v29 = *(void *)(v0 + 328);
  uint64_t v26 = *(void *)(v0 + 304);
  uint64_t v24 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 296);
  outlined destroy of MLRandomForestClassifier.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v5, type metadata accessor for PersistentParametersForTreeBasedMethods);
  outlined init with take of MLClassifierMetrics(v7, v6, type metadata accessor for AnyClassificationMetrics);
  uint64_t v9 = type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload(v6, v9, 0);
  outlined assign with take of MLClassifierMetrics(v6, v24 + *(int *)(v22 + 36));
  uint64_t v10 = v8 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
  swift_beginAccess(v8 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics, v0 + 264, 0, 0);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10, v29, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  swift_release();
  if (__swift_getEnumTagSinglePayload(v29, 1, v26) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(void *)(v0 + 328), &demangling cache variable for type metadata for AnyClassificationMetrics?);
  }
  else
  {
    uint64_t v30 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v27 = v9;
    uint64_t v13 = *(void *)(v0 + 312);
    outlined init with take of MLClassifierMetrics(*(void *)(v0 + 328), v11, type metadata accessor for AnyClassificationMetrics);
    outlined init with take of MLClassifierMetrics(v11, v13, type metadata accessor for AnyClassificationMetrics);
    uint64_t v14 = v12 + *(int *)(v30 + 40);
    outlined destroy of MLActivityClassifier.ModelParameters(v14, type metadata accessor for MLClassifierMetrics);
    outlined init with take of MLClassifierMetrics(v13, v14, type metadata accessor for AnyClassificationMetrics);
    swift_storeEnumTagMultiPayload(v14, v27, 0);
  }
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 352);
  uint64_t v25 = *(void *)(v0 + 344);
  int64_t v23 = *(void *)(v0 + 336);
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v28 = *(void *)(v0 + 312);
  uint64_t v31 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 424));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v25);
  swift_task_dealloc(v23);
  swift_task_dealloc(v21);
  swift_task_dealloc(v31);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v12 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 320);
  unint64_t v5 = *(void *)(v0 + 312);
  swift_release();
  outlined destroy of MLRandomForestClassifier.ModelParameters(v0 + 16);
  outlined destroy of MLActivityClassifier.ModelParameters(v1, type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLRandomForestClassifier()
{
  return MLRandomForestClassifier.description.getter();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLRandomForestClassifier()
{
  return MLRandomForestClassifier.debugDescription.getter();
}

NSAttributedString protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance MLRandomForestClassifier()
{
  return MLRandomForestClassifier.playgroundDescription.getter();
}

uint64_t protocol witness for TabularClassificationTask.validationMetrics.getter in conformance MLRandomForestClassifier()
{
  return MLRandomForestClassifier.validationMetrics.getter();
}

uint64_t outlined init with copy of MLRandomForestClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*((void *)&type metadata for MLRandomForestClassifier.ModelParameters - 1)
                                           + 16))(a2, a1);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return result;
}

uint64_t outlined destroy of MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C5472()
{
  return objectdestroyTm_3();
}

uint64_t partial apply for closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3AAD8C);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(a1);
}

uint64_t sub_1C5530()
{
  return objectdestroyTm_3();
}

uint64_t objectdestroyTm_3()
{
  uint64_t v11 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v1 = *(void *)(v11 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ~*(unsigned __int8 *)(v1 + 80) & (v2 + 16);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v3 + v0;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
  uint64_t v6 = *(void *)(v0 + v3 + 16);
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*(void *)(v5 + 32));
  }
  uint64_t v7 = v4 + v3;
  uint64_t v8 = v5 + *(int *)(v11 + 24);
  uint64_t v9 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v11 + 28)));
  return swift_deallocObject(v0, v7, v2 | 7);
}

uint64_t partial apply for closure #1 in MLRandomForestClassifier.init(checkpoint:)(uint64_t a1)
{
  type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v2 = (void *)swift_task_alloc(dword_3AADA4);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in MLActivityClassifier.init(trainingData:featureColumns:labelColumn:recordingFileColumn:parameters:);
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(a1);
}

id sub_1C5668()
{
  uint64_t v1 = v0;
  id result = MLRandomForestClassifier.model.getter();
  *uint64_t v1 = result;
  return result;
}

void sub_1C5682(id *a1)
{
}

void *initializeBufferWithCopyOfBuffer for MLRandomForestClassifier(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v5 = a2[1];
    a1[1] = v5;
    uint64_t v6 = a2[2];
    swift_bridgeObjectRetain(v5);
    if (v6)
    {
      a1[2] = v6;
      a1[3] = a2[3];
      uint64_t v7 = a2[4];
      a1[4] = v7;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
    }
    else
    {
      a1[4] = a2[4];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    }
    uint64_t v10 = type metadata accessor for AnyTreeClassifierModel(0);
    uint64_t v11 = *(int *)(v10 + 24);
    uint64_t v12 = type metadata accessor for BaseTreeClassifierModel(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))((char *)a1 + v11, (char *)a2 + v11, v12);
    uint64_t v13 = *(int *)(v10 + 28);
    uint64_t v14 = *(void *)((char *)a2 + v13);
    char v15 = *((unsigned char *)a2 + v13 + 8);
    *(void *)((char *)a1 + v13) = v14;
    *((unsigned char *)a1 + v13 + 8) = v15;
    uint64_t v16 = a3[5];
    uint64_t v17 = *(void **)((char *)a2 + v16);
    *(void *)((char *)a1 + v16) = v17;
    uint64_t v18 = a3[6];
    *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v19 = a1;
    uint64_t v20 = *(void *)((char *)a2 + v18 + 8);
    *(void *)((char *)v19 + v18 + 8) = v20;
    uint64_t v21 = a3[7];
    uint64_t v70 = *(void *)((char *)a2 + v21);
    *(void *)((char *)v19 + v21) = v70;
    uint64_t v22 = a3[8];
    uint64_t v63 = v19;
    int64_t v23 = (char *)v19 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = *(void *)((char *)a2 + v22 + 24);
    swift_bridgeObjectRetain(v14);
    v17;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v70);
    if (v25)
    {
      *((void *)v23 + 3) = v25;
      (**(void (***)(char *, char *, uint64_t))(v25 - 8))(v23, v24, v25);
    }
    else
    {
      long long v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = *((_OWORD *)v24 + 1);
      *(_OWORD *)int64_t v23 = v26;
    }
    *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
    *((_OWORD *)v23 + 3) = *((_OWORD *)v24 + 3);
    *((_OWORD *)v23 + 4) = *((_OWORD *)v24 + 4);
    *((void *)v23 + 10) = *((void *)v24 + 10);
    uint64_t v27 = a3;
    uint64_t v28 = a3[9];
    uint64_t v9 = v63;
    uint64_t v29 = (void *)((char *)v63 + v28);
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v71 = type metadata accessor for MLClassifierMetrics.Contents(0);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v71);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v37 = v29;
      uint64_t v38 = *(void *)v30;
      swift_errorRetain(*(void *)v30);
      *uint64_t v37 = v38;
      uint64_t v29 = v37;
      unsigned int EnumCaseMultiPayload = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v29 = *(void *)v30;
      uint64_t v64 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v32 = *(int *)(v64 + 20);
      uint64_t v62 = (char *)v29 + v32;
      uint64_t v33 = type metadata accessor for DataFrame(0);
      uint64_t v72 = (char *)v29;
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
      uint64_t v35 = &v30[v32];
      uint64_t v9 = v63;
      v34(v62, v35, v33);
      uint64_t v36 = v33;
      uint64_t v27 = a3;
      v34(&v72[*(int *)(v64 + 24)], &v30[*(int *)(v64 + 24)], v36);
      uint64_t v29 = v72;
    }
    else
    {
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      int v39 = swift_getEnumCaseMultiPayload(v30, v73);
      BOOL v65 = v39 == 1;
      uint64_t v40 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      if (v39 == 1) {
        uint64_t v40 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v40);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v29, v30, v41);
      swift_storeEnumTagMultiPayload(v29, v73, v65);
    }
    swift_storeEnumTagMultiPayload(v29, v71, EnumCaseMultiPayload);
    uint64_t v42 = v27[10];
    uint64_t v43 = (void *)((char *)v9 + v42);
    long long v44 = (void *)((char *)a2 + v42);
    int v45 = swift_getEnumCaseMultiPayload((char *)a2 + v42, v71);
    if (v45 == 2)
    {
      uint64_t v50 = *v44;
      swift_errorRetain(v50);
      void *v43 = v50;
      uint64_t v61 = 2;
    }
    else
    {
      if (v45 != 1)
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
        int v55 = swift_getEnumCaseMultiPayload(v44, v54);
        uint64_t v56 = v44;
        BOOL v57 = v55 == 1;
        uint64_t v58 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
        if (v55 == 1) {
          uint64_t v58 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
        }
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(v58);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v59 - 8) + 16))(v43, v56, v59);
        swift_storeEnumTagMultiPayload(v43, v54, v57);
        double v52 = v43;
        uint64_t v53 = v71;
        uint64_t v51 = 0;
        goto LABEL_24;
      }
      void *v43 = *v44;
      uint64_t v69 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v46 = *(int *)(v69 + 20);
      uint64_t v67 = (char *)v43 + v46;
      uint64_t v47 = type metadata accessor for DataFrame(0);
      double v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
      double v49 = (char *)v44 + v46;
      uint64_t v9 = v63;
      v48(v67, v49, v47);
      v48((char *)v43 + *(int *)(v69 + 24), (char *)v44 + *(int *)(v69 + 24), v47);
      uint64_t v61 = 1;
    }
    uint64_t v51 = v61;
    double v52 = v43;
    uint64_t v53 = v71;
LABEL_24:
    swift_storeEnumTagMultiPayload(v52, v53, v51);
    return v9;
  }
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (void *)(v8 + ((v4 + 16) & ~v4));
  swift_retain();
  return v9;
}

uint64_t destroy for MLRandomForestClassifier(void *a1, int *a2)
{
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
  }
  uint64_t v5 = type metadata accessor for AnyTreeClassifierModel(0);
  uint64_t v6 = (char *)a1 + *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for BaseTreeClassifierModel(0);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v5 + 28)));

  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[7]));
  uint64_t v8 = a2[8];
  if (*(void *)((char *)a1 + v8 + 24)) {
    __swift_destroy_boxed_opaque_existential_1Tm((void *)((char *)a1 + v8));
  }
  uint64_t v9 = (char *)a1 + a2[9];
  uint64_t v10 = type metadata accessor for MLClassifierMetrics.Contents(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_errorRelease(*(void *)v9);
      break;
    case 1:
      uint64_t v30 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v14 = &v9[*(int *)(v30 + 20)];
      uint64_t v29 = v10;
      uint64_t v15 = type metadata accessor for DataFrame(0);
      uint64_t v16 = v14;
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      v17(v16, v15);
      uint64_t v18 = v15;
      uint64_t v10 = v29;
      v17(&v9[*(int *)(v30 + 24)], v18);
      break;
    case 0:
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v9, v12) == 1) {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        uint64_t v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v9, v19);
      break;
  }
  uint64_t v20 = (void *)((char *)a1 + a2[10]);
  uint64_t result = swift_getEnumCaseMultiPayload(v20, v10);
  switch(result)
  {
    case 2:
      return swift_errorRelease(*v20);
    case 1:
      uint64_t v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      uint64_t v25 = (char *)v20 + *(int *)(v24 + 20);
      uint64_t v26 = type metadata accessor for DataFrame(0);
      uint64_t v27 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      v27(v25, v26);
      return ((uint64_t (*)(char *, uint64_t))v27)((char *)v20 + *(int *)(v24 + 24), v26);
    case 0:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload(v20, v22) == 1) {
        int64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      }
      else {
        int64_t v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      }
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(v23);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v28 - 8) + 8))(v20, v28);
  }
  return result;
}