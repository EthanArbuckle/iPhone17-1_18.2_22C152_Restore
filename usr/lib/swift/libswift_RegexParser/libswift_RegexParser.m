uint64_t AST.root.getter@<X0>(void *a1@<X8>)
{
  void *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t AST.root.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  void *v1 = v2;
  return result;
}

uint64_t (*AST.root.modify())()
{
  return AST.root.modify;
}

uint64_t AST.globalOptions.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t AST.globalOptions.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*AST.globalOptions.modify())()
{
  return AST.root.modify;
}

uint64_t AST.diags.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t AST.diags.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AST.diags.modify())()
{
  return AST.root.modify;
}

void *AST.init(_:globalOptions:diags:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

void AST.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  AST.Node.hash(into:)(a1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)(a1, v4);
}

uint64_t static Diagnostics.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AST.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)((uint64_t)v4);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)((uint64_t)v4);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  AST.Node.hash(into:)(a1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }

  specialized Array<A>.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)((uint64_t)v4);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t AST.hasCapture.getter()
{
  return AST.Node.hasCapture.getter() & 1;
}

uint64_t AST.Node.hasCapture.getter()
{
  if (*v0 >> 60 == 2)
  {
    unsigned int v1 = *(unsigned __int8 *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
    if (v1 < 2) {
      return 1;
    }
    if (v1 == 3)
    {
      int8x16_t v2 = vorrq_s8(vorrq_s8(*(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x20), *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x40)), vorrq_s8(*(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x30), *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x50)));
      if (!(*(void *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x10))) {
        return 1;
      }
    }
  }
  AST.Node._associatedValue.getter(v10);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (swift_dynamicCast())
  {
    uint64_t v3 = *((void *)&v12 + 1);
    uint64_t v4 = v13;
    __swift_project_boxed_opaque_existential_1Tm(&v11, *((uint64_t *)&v12 + 1));
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v11);
    uint64_t result = swift_release();
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(v5 + 16);
    while (1)
    {
      if (v8 == v7)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v7 >= *(void *)(v5 + 16)) {
        break;
      }
      unint64_t v9 = v7 + 1;
      *(void *)&long long v11 = *(void *)(v5 + 8 * v7 + 32);
      uint64_t result = AST.Node.hasCapture.getter(result);
      unint64_t v7 = v9;
      if (result)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v11, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
    return 0;
  }
  return result;
}

BOOL AST.isInvalid.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int8x16_t v2 = (unsigned __int8 *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 16) + 1;
  do
  {
    if (!--v3) {
      break;
    }
    unsigned int v4 = *v2;
    v2 += 80;
  }
  while (v4 > 1);
  return v3 != 0;
}

BOOL Diagnostics.hasAnyError.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)v0 + 32);
  uint64_t v2 = *(void *)(*(void *)v0 + 16) + 1;
  do
  {
    if (!--v2) {
      break;
    }
    unsigned int v3 = *v1;
    v1 += 80;
  }
  while (v3 > 1);
  return v2 != 0;
}

uint64_t AST.ensureValid()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = *(void *)(v3 + 16) + 1;
  uint64_t v5 = v3;
  while (--v4)
  {
    uint64_t v6 = v5 + 80;
    unsigned int v7 = *(unsigned __int8 *)(v5 + 32);
    v5 += 80;
    if (v7 <= 1)
    {
      uint64_t v8 = *(void *)(v6 - 32);
      uint64_t v18 = *(void *)(v6 - 40);
      uint64_t v9 = *(void *)(v6 - 24);
      uint64_t v10 = *(void *)(v6 - 16);
      uint64_t v11 = *(void *)(v6 + 8);
      uint64_t v16 = *(void *)v6;
      uint64_t v17 = *(void *)(v6 - 8);
      uint64_t v12 = *(void *)(v6 + 16);
      unsigned __int8 v13 = *(unsigned char *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      swift_allocError();
      *(unsigned char *)uint64_t v14 = v7;
      *(void *)(v14 + 8) = v18;
      *(void *)(v14 + 16) = v8;
      *(void *)(v14 + 24) = v9;
      *(void *)(v14 + 32) = v10;
      *(void *)(v14 + 40) = v17;
      *(void *)(v14 + 48) = v16;
      *(void *)(v14 + 56) = v11;
      *(void *)(v14 + 64) = v12;
      *(unsigned char *)(v14 + 72) = v13;
      *(void *)(v14 + 80) = v9;
      *(void *)(v14 + 88) = v10;
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v17, v16, v11, v12, v13);
      return swift_willThrow();
    }
  }
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void AST.Node.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v3, v4);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  switch((unint64_t)*v1 >> 60)
  {
    case 1uLL:
      uint64_t v10 = (void *)(v7 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v11 = v10[2];
      unint64_t v12 = v10[3];
      unint64_t v13 = v10[4];
      Hasher._combine(_:)(1uLL);
      specialized Array<A>.hash(into:)(a1, v11);
      Hasher._combine(_:)(v12 >> 14);
      Swift::UInt64 v14 = v13 >> 14;
      goto LABEL_21;
    case 2uLL:
      uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFLL;
      long long v69 = *(_OWORD *)(v15 + 16);
      long long v68 = *(_OWORD *)(v15 + 32);
      long long v67 = *(_OWORD *)(v15 + 48);
      long long v66 = *(_OWORD *)(v15 + 64);
      uint64_t v16 = *(void *)(v15 + 80);
      uint64_t v17 = *(void *)(v15 + 88);
      char v18 = *(unsigned char *)(v15 + 96);
      unint64_t v19 = *(void *)(v15 + 104);
      unint64_t v20 = *(void *)(v15 + 112);
      uint64_t v21 = *(void *)(v15 + 120);
      unint64_t v22 = *(void *)(v15 + 128);
      unint64_t v23 = *(void *)(v15 + 136);
      Hasher._combine(_:)(2uLL);
      long long v70 = v69;
      long long v71 = v68;
      long long v72 = v67;
      long long v73 = v66;
      *(void *)&long long v74 = v16;
      *((void *)&v74 + 1) = v17;
      LOBYTE(v75) = v18;
      *((void *)&v75 + 1) = v19;
      *(void *)&long long v76 = v20;
      AST.Group.Kind.hash(into:)(a1);
      Hasher._combine(_:)(v19 >> 14);
      Hasher._combine(_:)(v20 >> 14);
      *(void *)&long long v70 = v21;
      AST.Node.hash(into:)(a1);
      Hasher._combine(_:)(v22 >> 14);
      Swift::UInt64 v14 = v23 >> 14;
      goto LABEL_21;
    case 3uLL:
      uint64_t v24 = v7 & 0xFFFFFFFFFFFFFFFLL;
      long long v25 = *(_OWORD *)(v24 + 192);
      long long v80 = *(_OWORD *)(v24 + 176);
      long long v81 = v25;
      uint64_t v82 = *(void *)(v24 + 208);
      long long v26 = *(_OWORD *)(v24 + 128);
      long long v76 = *(_OWORD *)(v24 + 112);
      long long v77 = v26;
      long long v27 = *(_OWORD *)(v24 + 160);
      long long v78 = *(_OWORD *)(v24 + 144);
      long long v79 = v27;
      long long v28 = *(_OWORD *)(v24 + 64);
      long long v72 = *(_OWORD *)(v24 + 48);
      long long v73 = v28;
      long long v29 = *(_OWORD *)(v24 + 96);
      long long v74 = *(_OWORD *)(v24 + 80);
      long long v75 = v29;
      long long v30 = *(_OWORD *)(v24 + 16);
      long long v71 = *(_OWORD *)(v24 + 32);
      long long v70 = v30;
      Hasher._combine(_:)(3uLL);
      AST.Conditional.hash(into:)(a1);
      return;
    case 4uLL:
      uint64_t v31 = v7 & 0xFFFFFFFFFFFFFFFLL;
      long long v32 = *(_OWORD *)(v31 + 128);
      long long v76 = *(_OWORD *)(v31 + 112);
      long long v77 = v32;
      *(void *)&long long v78 = *(void *)(v31 + 144);
      long long v33 = *(_OWORD *)(v31 + 64);
      long long v72 = *(_OWORD *)(v31 + 48);
      long long v73 = v33;
      long long v34 = *(_OWORD *)(v31 + 96);
      long long v74 = *(_OWORD *)(v31 + 80);
      long long v75 = v34;
      long long v35 = *(_OWORD *)(v31 + 16);
      long long v71 = *(_OWORD *)(v31 + 32);
      long long v70 = v35;
      Hasher._combine(_:)(4uLL);
      AST.Quantification.hash(into:)(a1);
      return;
    case 5uLL:
      uint64_t v36 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v37 = *(void *)(v36 + 32);
      unint64_t v38 = *(void *)(v36 + 40);
      Swift::UInt v39 = 5;
      goto LABEL_12;
    case 6uLL:
      uint64_t v40 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v37 = *(void *)(v40 + 32);
      unint64_t v38 = *(void *)(v40 + 40);
      Swift::UInt v39 = 6;
      goto LABEL_12;
    case 7uLL:
      uint64_t v41 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v37 = *(void *)(v41 + 32);
      unint64_t v38 = *(void *)(v41 + 40);
      Swift::UInt v39 = 7;
LABEL_12:
      Hasher._combine(_:)(v39);
      String.hash(into:)();
      Hasher._combine(_:)(v37 >> 14);
      Swift::UInt64 v14 = v38 >> 14;
      goto LABEL_21;
    case 8uLL:
      uint64_t v42 = swift_projectBox();
      outlined init with copy of AST.Atom(v42, (uint64_t)v6, type metadata accessor for AST.Atom);
      Hasher._combine(_:)(8uLL);
      AST.Atom.Kind.hash(into:)(a1);
      v43 = &v6[*(int *)(v3 + 20)];
      unint64_t v44 = *(void *)v43;
      unint64_t v45 = *((void *)v43 + 1);
      outlined destroy of AST.Atom((uint64_t)v6, type metadata accessor for AST.Atom);
      Hasher._combine(_:)(v44 >> 14);
      Swift::UInt64 v14 = v45 >> 14;
      goto LABEL_21;
    case 9uLL:
      v46 = (void *)(v7 & 0xFFFFFFFFFFFFFFFLL);
      unint64_t v47 = v46[3];
      unint64_t v48 = v46[4];
      uint64_t v50 = v46[5];
      unint64_t v49 = v46[6];
      unint64_t v51 = v46[7];
      Hasher._combine(_:)(9uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v47 >> 14);
      Hasher._combine(_:)(v48 >> 14);
      Swift::UInt v52 = *(void *)(v50 + 16);
      Hasher._combine(_:)(v52);
      if (v52)
      {
        uint64_t v53 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
        uint64_t v54 = v50 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
        uint64_t v55 = *(void *)(v53 + 72);
        do
        {
          AST.CustomCharacterClass.Member.hash(into:)(a1);
          v54 += v55;
          --v52;
        }
        while (v52);
      }
      Swift::UInt64 v56 = v49 >> 14;
      goto LABEL_20;
    case 0xAuLL:
      uint64_t v57 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v58 = *(void *)(v57 + 16);
      unint64_t v59 = *(void *)(v57 + 24);
      long long v69 = *(_OWORD *)(v57 + 32);
      uint64_t v60 = *(void *)(v57 + 48);
      uint64_t v61 = *(void *)(v57 + 56);
      unint64_t v62 = *(void *)(v57 + 64);
      unint64_t v63 = *(void *)(v57 + 72);
      Hasher._combine(_:)(0xAuLL);
      Hasher._combine(_:)(v58 >> 14);
      Hasher._combine(_:)(v59 >> 14);
      long long v70 = v69;
      *(void *)&long long v71 = v60;
      *((void *)&v71 + 1) = v61;
      AST.AbsentFunction.Kind.hash(into:)(a1);
      Hasher._combine(_:)(v62 >> 14);
      Swift::UInt64 v14 = v63 >> 14;
      goto LABEL_21;
    case 0xBuLL:
      uint64_t v64 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v65 = *(void *)(v64 + 16);
      unint64_t v51 = *(void *)(v64 + 24);
      Hasher._combine(_:)(0xBuLL);
      Swift::UInt64 v56 = v65 >> 14;
LABEL_20:
      Hasher._combine(_:)(v56);
      Swift::UInt64 v14 = v51 >> 14;
LABEL_21:
      Hasher._combine(_:)(v14);
      break;
    default:
      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v9 = *(void *)(v7 + 24);
      Hasher._combine(_:)(0);
      specialized Array<A>.hash(into:)(a1, v8);
      specialized Array<A>.hash(into:)(a1, v9);
      break;
  }
}

BOOL static AST.Alternation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

BOOL static AST.Concatenation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return (v4 ^ (unint64_t)v2) < 0x4000 && (v5 ^ (unint64_t)v3) < 0x4000;
}

BOOL static AST.Quote.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v7) {
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  }
  return result;
}

BOOL static AST.Atom.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2))
  {
    uint64_t v4 = *(int *)(type metadata accessor for AST.Atom(0) + 20);
    uint64_t v5 = a1 + v4;
    unint64_t v6 = *(void *)(a1 + v4);
    char v7 = (void *)(a2 + v4);
    if (!((*v7 ^ v6) >> 14) && (*(void *)(v5 + 8) ^ v7[1]) < 0x4000) {
      return 1;
    }
  }
  return result;
}

Swift::Int AST.Node.hashValue.getter()
{
  v2[9] = *v0;
  Hasher.init(_seed:)();
  AST.Node.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Node()
{
  v2[9] = *v0;
  Hasher.init(_seed:)();
  AST.Node.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Node()
{
  v2[9] = *v0;
  Hasher.init(_seed:)();
  AST.Node.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t AST.Node.children.getter()
{
  *(void *)&long long v6 = *v0;
  AST.Node._associatedValue.getter(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (swift_dynamicCast())
  {
    uint64_t v1 = *((void *)&v7 + 1);
    uint64_t v2 = v8;
    __swift_project_boxed_opaque_existential_1Tm(&v6, *((uint64_t *)&v7 + 1));
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v6);
  }
  else
  {
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v6, &demangling cache variable for type metadata for _ASTParent?);
    return 0;
  }
  return v3;
}

unint64_t AST.Node._associatedValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  switch((unint64_t)*v1 >> 60)
  {
    case 1uLL:
      long long v6 = (void *)(v3 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v7 = v6[2];
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[4];
      a1[3] = (uint64_t)&type metadata for AST.Concatenation;
      a1[4] = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
      *a1 = v7;
      a1[1] = v8;
      a1[2] = v9;
      goto LABEL_13;
    case 2uLL:
      uint64_t v10 = (_OWORD *)(v3 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v11 = v10 + 1;
      long long v12 = v10[6];
      long long v68 = v10[5];
      long long v69 = v12;
      long long v13 = v10[8];
      long long v70 = v10[7];
      long long v71 = v13;
      long long v14 = v10[2];
      long long v64 = v10[1];
      long long v65 = v14;
      long long v15 = v10[4];
      long long v66 = v10[3];
      long long v67 = v15;
      a1[3] = (uint64_t)&type metadata for AST.Group;
      a1[4] = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
      uint64_t v16 = swift_allocObject();
      *a1 = v16;
      memmove((void *)(v16 + 16), v11, 0x80uLL);
      return outlined retain of AST.Group((uint64_t)&v64);
    case 3uLL:
      uint64_t v18 = v3 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v19 = (const void *)(v18 + 16);
      long long v20 = *(_OWORD *)(v18 + 176);
      long long v73 = *(_OWORD *)(v18 + 160);
      long long v74 = v20;
      long long v75 = *(_OWORD *)(v18 + 192);
      uint64_t v76 = *(void *)(v18 + 208);
      long long v21 = *(_OWORD *)(v18 + 112);
      long long v69 = *(_OWORD *)(v18 + 96);
      long long v70 = v21;
      long long v22 = *(_OWORD *)(v18 + 144);
      long long v71 = *(_OWORD *)(v18 + 128);
      long long v72 = v22;
      long long v23 = *(_OWORD *)(v18 + 48);
      long long v65 = *(_OWORD *)(v18 + 32);
      long long v66 = v23;
      long long v24 = *(_OWORD *)(v18 + 80);
      long long v67 = *(_OWORD *)(v18 + 64);
      long long v68 = v24;
      long long v64 = *(_OWORD *)(v18 + 16);
      a1[3] = (uint64_t)&type metadata for AST.Conditional;
      a1[4] = lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional();
      uint64_t v25 = swift_allocObject();
      *a1 = v25;
      memmove((void *)(v25 + 16), v19, 0xC8uLL);
      return outlined retain of AST.Conditional((uint64_t)&v64);
    case 4uLL:
      uint64_t v26 = v3 & 0xFFFFFFFFFFFFFFFLL;
      long long v27 = (const void *)(v26 + 16);
      long long v28 = *(_OWORD *)(v26 + 112);
      long long v69 = *(_OWORD *)(v26 + 96);
      long long v70 = v28;
      long long v71 = *(_OWORD *)(v26 + 128);
      *(void *)&long long v72 = *(void *)(v26 + 144);
      long long v29 = *(_OWORD *)(v26 + 48);
      long long v65 = *(_OWORD *)(v26 + 32);
      long long v66 = v29;
      long long v30 = *(_OWORD *)(v26 + 80);
      long long v67 = *(_OWORD *)(v26 + 64);
      long long v68 = v30;
      long long v64 = *(_OWORD *)(v26 + 16);
      a1[3] = (uint64_t)&type metadata for AST.Quantification;
      a1[4] = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
      uint64_t v31 = swift_allocObject();
      *a1 = v31;
      memmove((void *)(v31 + 16), v27, 0x88uLL);
      return outlined retain of AST.Quantification((uint64_t)&v64);
    case 5uLL:
      long long v32 = (void *)(v3 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v34 = v32[2];
      uint64_t v33 = v32[3];
      uint64_t v35 = v32[4];
      uint64_t v36 = v32[5];
      a1[3] = (uint64_t)&type metadata for AST.Quote;
      a1[4] = lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote();
      goto LABEL_10;
    case 6uLL:
      unint64_t v37 = (void *)(v3 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v34 = v37[2];
      uint64_t v33 = v37[3];
      uint64_t v35 = v37[4];
      uint64_t v36 = v37[5];
      a1[3] = (uint64_t)&type metadata for AST.Trivia;
      a1[4] = lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia();
      goto LABEL_10;
    case 7uLL:
      unint64_t v38 = (void *)(v3 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v34 = v38[2];
      uint64_t v33 = v38[3];
      uint64_t v35 = v38[4];
      uint64_t v36 = v38[5];
      a1[3] = (uint64_t)&type metadata for AST.Interpolation;
      a1[4] = lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation();
LABEL_10:
      Swift::UInt v39 = (void *)swift_allocObject();
      *a1 = (uint64_t)v39;
      v39[2] = v34;
      v39[3] = v33;
      v39[4] = v35;
      v39[5] = v36;
      goto LABEL_13;
    case 8uLL:
      uint64_t v40 = type metadata accessor for AST.Atom(0);
      uint64_t v41 = swift_projectBox();
      a1[3] = v40;
      a1[4] = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
      boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm(a1);
      return outlined init with copy of AST.Atom(v41, (uint64_t)boxed_opaque_existential_1Tm, type metadata accessor for AST.Atom);
    case 9uLL:
      uint64_t v43 = v3 & 0xFFFFFFFFFFFFFFFLL;
      char v44 = *(unsigned char *)(v43 + 16);
      uint64_t v45 = *(void *)(v43 + 24);
      uint64_t v46 = *(void *)(v43 + 32);
      uint64_t v47 = *(void *)(v43 + 40);
      uint64_t v48 = *(void *)(v43 + 48);
      uint64_t v49 = *(void *)(v43 + 56);
      a1[3] = (uint64_t)&type metadata for AST.CustomCharacterClass;
      a1[4] = lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass();
      uint64_t v50 = swift_allocObject();
      *a1 = v50;
      *(unsigned char *)(v50 + 16) = v44;
      *(void *)(v50 + 24) = v45;
      *(void *)(v50 + 32) = v46;
      *(void *)(v50 + 40) = v47;
      *(void *)(v50 + 48) = v48;
      *(void *)(v50 + 56) = v49;
      goto LABEL_13;
    case 0xAuLL:
      unint64_t v51 = (void *)(v3 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v52 = v51[2];
      uint64_t v53 = v51[3];
      uint64_t v54 = v51[4];
      uint64_t v55 = v51[5];
      uint64_t v56 = v51[6];
      uint64_t v57 = v51[7];
      uint64_t v58 = v51[8];
      uint64_t v59 = v51[9];
      a1[3] = (uint64_t)&type metadata for AST.AbsentFunction;
      a1[4] = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
      uint64_t v60 = (void *)swift_allocObject();
      *a1 = (uint64_t)v60;
      v60[2] = v52;
      v60[3] = v53;
      v60[4] = v54;
      v60[5] = v55;
      v60[6] = v56;
      v60[7] = v57;
      v60[8] = v58;
      v60[9] = v59;
      return outlined copy of AST.AbsentFunction.Kind(v54, v55, v56, v57);
    case 0xBuLL:
      uint64_t v61 = v3 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v62 = *(void *)(v61 + 16);
      uint64_t v63 = *(void *)(v61 + 24);
      a1[3] = (uint64_t)&type metadata for AST.Empty;
      unint64_t result = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
      a1[4] = result;
      *a1 = v62;
      a1[1] = v63;
      return result;
    default:
      uint64_t v4 = *(void *)(v3 + 16);
      uint64_t v5 = *(void *)(v3 + 24);
      a1[3] = (uint64_t)&type metadata for AST.Alternation;
      a1[4] = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
      *a1 = v4;
      a1[1] = v5;
      swift_bridgeObjectRetain();
LABEL_13:
      return swift_bridgeObjectRetain();
  }
}

uint64_t AST.Node.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AST.Node._associatedValue.getter(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  int v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v4 ^ 1u, 1, a1);
}

uint64_t AST.Node.location.getter()
{
  AST.Node._associatedValue.getter(v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
}

BOOL AST.Node.isTrivia.getter()
{
  return *v0 >> 60 == 6;
}

BOOL AST.Group.Kind.isCapturing.getter()
{
  unsigned int v1 = v0[5].u8[0];
  BOOL result = 1;
  if (v1 >= 2)
  {
    if (v1 != 3) {
      return 0;
    }
    int8x16_t v3 = vorrq_s8(vorrq_s8(v0[1], v0[3]), vorrq_s8(v0[2], v0[4]));
    if (*(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v0->i64[1] | v0->i64[0]) {
      return 0;
    }
  }
  return result;
}

uint64_t AST.Node.isQuantifiable.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = (unsigned __int8 *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = 1;
  switch(*v0 >> 60)
  {
    case 2:
      unsigned int v10 = *(unsigned __int8 *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      if (v10 >= 3)
      {
        if (v10 != 3) {
          goto LABEL_2;
        }
        uint64_t v11 = *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
        uint64_t v12 = *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v13 = *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x50) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
        uint64_t v14 = *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x40) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x38) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        uint64_t v15 = *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x28) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x20) | *(void *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        if (v13 | v12 | v11 | v14 | v15)
        {
          uint64_t v16 = v13 | v11 | v14 | v15;
          BOOL v17 = (v12 & 0xFFFFFFFFFFFFFFFELL) != 0xA && (unint64_t)(v12 - 1) > 2;
          if (v17 || v16 != 0) {
            goto LABEL_2;
          }
        }
        uint64_t result = 1;
      }
      break;
    case 3:
    case 9:
    case 0xALL:
      return result;
    case 8:
      uint64_t v19 = swift_projectBox();
      outlined init with copy of AST.Atom(v19, (uint64_t)v8, type metadata accessor for AST.Atom);
      outlined init with take of AST.Atom.Kind((uint64_t)v8, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      int v20 = swift_getEnumCaseMultiPayload() - 4;
      uint64_t result = 0;
      switch(v20)
      {
        case 0:
          unsigned int v21 = *v4;
          if (v21 >= 0x1D) {
            goto LABEL_2;
          }
          uint64_t result = (0x101FFFFFu >> v21) & 1;
          break;
        case 8:
          int v22 = *v4;
          swift_bridgeObjectRelease();
          uint64_t result = v22 == 0;
          break;
        case 9:
          outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
          goto LABEL_2;
        case 11:
        case 12:
          return result;
        default:
          outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
          uint64_t result = 1;
          break;
      }
      break;
    default:
LABEL_2:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t AST.Atom.isQuantifiable.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = (unsigned __int8 *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
  int v5 = swift_getEnumCaseMultiPayload() - 4;
  uint64_t result = 0;
  switch(v5)
  {
    case 0:
      unsigned int v7 = *v4;
      if (v7 >= 0x1D) {
        goto LABEL_7;
      }
      uint64_t result = (0x101FFFFFu >> v7) & 1;
      break;
    case 8:
      int v8 = *v4;
      swift_bridgeObjectRelease();
      uint64_t result = v8 == 0;
      break;
    case 9:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
LABEL_7:
      uint64_t result = 0;
      break;
    case 11:
    case 12:
      return result;
    default:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t AST.Alternation.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Alternation.pipes.getter()
{
  return swift_bridgeObjectRetain();
}

_RegexParser::AST::Alternation __swiftcall AST.Alternation.init(_:pipes:)(Swift::OpaquePointer _, Swift::OpaquePointer pipes)
{
  unint64_t v3 = *((void *)_._rawValue + 2);
  if (v3 < 2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*((void *)pipes._rawValue + 2) != v3 - 1)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v2->_rawValue = _._rawValue;
  v2[1]._rawValue = pipes._rawValue;
LABEL_6:
  result.pipes = pipes;
  result.children = _;
  return result;
}

uint64_t AST.Alternation.location.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = *(void *)(*v1 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v6 = *(void *)(v2 + 32);
  uint64_t v5 = v2 + 32;
  unint64_t v19 = v6;
  AST.Node._associatedValue.getter(v16);
  uint64_t v7 = v17;
  uint64_t v8 = v18;
  __swift_project_boxed_opaque_existential_1Tm(v16, v17);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v19, v7, v8);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  if (v3 > *(void *)(v5 - 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v10 = v19;
  uint64_t v14 = *(void *)(v5 + 8 * v3 - 8);
  AST.Node._associatedValue.getter(v16);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __swift_project_boxed_opaque_existential_1Tm(v16, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v14, v11, v12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  unint64_t v13 = v15;
  if (v15 >> 14 >= v10 >> 14)
  {
    *a1 = v10;
    a1[1] = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t Source.Location.start.getter()
{
  return *(void *)v0;
}

uint64_t Source.Location.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AST.Alternation.hash(into:)(uint64_t a1)
{
  return AST.Alternation.hash(into:)(a1, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  unint64_t v3 = (void *)(a2 + 48);
  uint64_t v4 = (void *)(a1 + 48);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL result = --v5 == 0;
    if (!v5) {
      break;
    }
    if (*((_DWORD *)v4 - 4) != *((_DWORD *)v3 - 4)) {
      break;
    }
    if ((*(v3 - 1) ^ *(v4 - 1)) >> 14) {
      break;
    }
    uint64_t v8 = *v3;
    v3 += 3;
    uint64_t v7 = v8;
    unint64_t v9 = *v4;
    v4 += 3;
  }
  while ((v7 ^ v9) < 0x4000);
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  BOOL result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  unint64_t v3 = (uint64_t *)(a2 + 48);
  uint64_t v4 = (unint64_t *)(a1 + 48);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL result = --v5 == 0;
    if (!v5) {
      break;
    }
    if (*((unsigned __int8 *)v4 - 16) != *((unsigned __int8 *)v3 - 16)) {
      break;
    }
    if ((*(v3 - 1) ^ *(v4 - 1)) >> 14) {
      break;
    }
    uint64_t v8 = *v3;
    v3 += 3;
    uint64_t v7 = v8;
    unint64_t v9 = *v4;
    v4 += 3;
  }
  while ((v7 ^ v9) < 0x4000);
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  unint64_t v3 = (unint64_t *)(a1 + 40);
  uint64_t v4 = (uint64_t *)(a2 + 40);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL result = --v5 == 0;
    if (!v5) {
      break;
    }
    if ((*(v4 - 1) ^ *(v3 - 1)) >> 14) {
      break;
    }
    uint64_t v8 = *v3;
    v3 += 2;
    uint64_t v7 = v8;
    unint64_t v9 = *v4;
    v4 += 2;
  }
  while ((v9 ^ v7) < 0x4000);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 + 1;
  uint64_t v4 = (uint64_t *)(a2 + 72);
  uint64_t v5 = (unint64_t *)(a1 + 72);
  do
  {
    BOOL v6 = --v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v8 = *(v5 - 1);
    unint64_t v7 = *v5;
    uint64_t v10 = *(v4 - 1);
    uint64_t v9 = *v4;
    long long v11 = *(_OWORD *)(v5 - 3);
    v15[0] = *(_OWORD *)(v5 - 5);
    v15[1] = v11;
    long long v12 = *(_OWORD *)(v4 - 3);
    v14[0] = *(_OWORD *)(v4 - 5);
    v14[1] = v12;
    if (!specialized static AST.GlobalMatchingOption.Kind.== infix(_:_:)((uint64_t *)v15, (uint64_t *)v14)) {
      break;
    }
    if ((v10 ^ v8) >> 14) {
      break;
    }
    v4 += 6;
    v5 += 6;
  }
  while ((v9 ^ v7) < 0x4000);
  return v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  uint64_t v4 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v7 = MEMORY[0x270FA5388](v4 - 8, v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v10);
  long long v12 = (char *)&v23 - v11;
  unint64_t v13 = *(void *)(a1 + 16);
  if (v13 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v13 || a1 == a2) {
    return 1;
  }
  uint64_t v14 = 0;
  unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  do
  {
    uint64_t v18 = v13 == v14;
    if (v13 == v14) {
      break;
    }
    unint64_t v19 = v14 + 1;
    int v20 = *(void *)(v5 + 72) * v14;
    outlined init with copy of AST.Atom(v16 + v20, (uint64_t)v12, type metadata accessor for AST.CustomCharacterClass.Member);
    outlined init with copy of AST.Atom(v17 + v20, (uint64_t)v9, type metadata accessor for AST.CustomCharacterClass.Member);
    unsigned int v21 = specialized static AST.CustomCharacterClass.Member.== infix(_:_:)((uint64_t)v12, (uint64_t)v9);
    outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.CustomCharacterClass.Member);
    outlined destroy of AST.Atom((uint64_t)v12, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v14 = v19;
  }
  while ((v21 & 1) != 0);
  return v18;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 + 1;
  uint64_t v4 = (uint64_t *)(a2 + 56);
  uint64_t v5 = (unint64_t *)(a1 + 56);
  do
  {
    BOOL v6 = --v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v8 = *(v5 - 1);
    unint64_t v7 = *v5;
    uint64_t v10 = *(v4 - 1);
    uint64_t v9 = *v4;
    if (*(v5 - 3) == *(v4 - 3) && *(v5 - 2) == *(v4 - 2))
    {
      if ((v10 ^ v8) >> 14) {
        return v6;
      }
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v10 ^ v8) >= 0x4000)
    {
      return v6;
    }
    v4 += 4;
    v5 += 4;
  }
  while ((v9 ^ v7) < 0x4000);
  return v6;
}

{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a1 + 32);
  uint64_t v4 = (unint64_t *)(a2 + 32);
  do
  {
    uint64_t v5 = v2 == 0;
    if (!v2) {
      break;
    }
    unint64_t v7 = *v3++;
    BOOL v6 = v7;
    unint64_t v8 = *v4++;
    uint64_t v10 = v8;
    long long v11 = v6;
    --v2;
  }
  while ((specialized static AST.Node.== infix(_:_:)(&v11, &v10) & 1) != 0);
  return v5;
}

{
  uint64_t v2;
  unsigned char *v3;
  unsigned char *v4;
  uint64_t v5;
  BOOL v6;
  unsigned char *v7;
  uint64_t v8;
  unsigned char *v9;
  char v10;
  uint64_t v11;
  char v12;
  long long v14;
  uint64_t v15;
  char v16;
  long long v17;
  uint64_t v18;
  char v19;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (unsigned char *)(a1 + 56);
  uint64_t v4 = (unsigned char *)(a2 + 56);
  uint64_t v5 = v2 + 1;
  do
  {
    BOOL v6 = --v5 == 0;
    if (!v5) {
      break;
    }
    unint64_t v7 = v3 + 32;
    unint64_t v8 = *((void *)v3 - 1);
    uint64_t v9 = v4 + 32;
    uint64_t v10 = *v3;
    uint64_t v17 = *(_OWORD *)(v3 - 24);
    uint64_t v18 = v8;
    unint64_t v19 = v10;
    long long v11 = *((void *)v4 - 1);
    LOBYTE(v8) = *v4;
    uint64_t v14 = *(_OWORD *)(v4 - 24);
    unint64_t v15 = v11;
    uint64_t v16 = v8;
    long long v12 = static CaptureStructure.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v14);
    uint64_t v4 = v9;
    uint64_t v3 = v7;
  }
  while ((v12 & 1) != 0);
  return v6;
}

{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = (uint64_t *)(a2 + 56);
    for (i = (unint64_t *)(a1 + 56); *((unsigned __int8 *)i - 24) == *((unsigned __int8 *)v3 - 24); i += 10)
    {
      BOOL v6 = *i;
      uint64_t v5 = i[1];
      unint64_t v8 = i[2];
      unint64_t v7 = i[3];
      uint64_t v10 = i[4];
      uint64_t v9 = i[5];
      long long v11 = *((unsigned __int8 *)i + 48);
      unint64_t v13 = *v3;
      long long v12 = v3[1];
      unint64_t v15 = v3[2];
      uint64_t v14 = v3[3];
      uint64_t v17 = v3[4];
      uint64_t v16 = v3[5];
      uint64_t v18 = *((unsigned __int8 *)v3 + 48);
      if (*(i - 2) == *(v3 - 2) && *(i - 1) == *(v3 - 1))
      {
        if ((v13 ^ v6) >> 14) {
          return 0;
        }
      }
      else
      {
        long long v32 = v3[1];
        uint64_t v33 = i[5];
        uint64_t v34 = i[1];
        uint64_t v35 = i[2];
        uint64_t v36 = i[3];
        unint64_t v37 = i[4];
        uint64_t v31 = v3[2];
        unint64_t v19 = *((unsigned __int8 *)i + 48);
        int v20 = v3[3];
        unsigned int v21 = *((unsigned __int8 *)v3 + 48);
        int v22 = v3[4];
        uint64_t v23 = v3[5];
        long long v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v24 & 1) == 0) {
          return result;
        }
        uint64_t v16 = v23;
        uint64_t v17 = v22;
        uint64_t v18 = v21;
        uint64_t v14 = v20;
        long long v11 = v19;
        unint64_t v15 = v31;
        long long v12 = v32;
        uint64_t v9 = v33;
        uint64_t v5 = v34;
        unint64_t v7 = v36;
        uint64_t v10 = v37;
        unint64_t v8 = v35;
        if ((v13 ^ v6) >= 0x4000) {
          return result;
        }
      }
      if ((v12 ^ v5) >> 14) {
        return 0;
      }
      if (v11 == 255)
      {
        if (v18 != 255) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v18 == 255)
        {
LABEL_20:
          uint64_t v26 = v10;
          long long v27 = v9;
          long long v28 = v16;
          long long v29 = v7;
          long long v30 = v8;
          outlined copy of ParseError?(v8, v7, v10, v9, v11);
          outlined copy of ParseError?(v15, v14, v17, v28, v18);
          outlined consume of ParseError?(v30, v29, v26, v27, v11);
          outlined consume of ParseError?(v15, v14, v17, v28, v18);
          return 0;
        }
        *(void *)&unint64_t v38 = v8;
        *((void *)&v38 + 1) = v7;
        Swift::UInt v39 = v10;
        uint64_t v40 = v9;
        uint64_t v41 = v11;
        *(void *)&uint64_t v42 = v15;
        *((void *)&v42 + 1) = v14;
        uint64_t v43 = v17;
        char v44 = v16;
        uint64_t v45 = v18;
        if ((specialized static ParseError.== infix(_:_:)(&v38, &v42) & 1) == 0) {
          return 0;
        }
      }
      v3 += 10;
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = (unint64_t *)(a1 + 72);
    uint64_t v5 = (uint64_t *)(a2 + 40);
    while (1)
    {
      BOOL v6 = --v3 == 0;
      if (!v3) {
        return v6;
      }
      unint64_t v7 = *(v4 - 4);
      unint64_t v8 = *(v4 - 3);
      uint64_t v9 = *(v4 - 2);
      uint64_t v10 = *(v4 - 1);
      long long v11 = *v4;
      unint64_t v13 = *v5;
      long long v12 = v5[1];
      uint64_t v14 = v5[2];
      unint64_t v15 = v5[3];
      uint64_t v16 = v5[4];
      if (v7)
      {
        if (!v13) {
          return v6;
        }
        if (*(v4 - 5) != *(v5 - 1) || v7 != v13)
        {
          uint64_t v17 = *(v4 - 2);
          unsigned int v21 = *(v4 - 3);
          uint64_t v23 = v5[1];
          uint64_t v25 = v5[4];
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v6;
          }
          if (v17 != v14) {
            return v6;
          }
          uint64_t v16 = v25;
          if (v21 != v23) {
            return v6;
          }
          goto LABEL_17;
        }
      }
      else
      {
        long long v24 = v5[1];
        uint64_t v26 = v5[4];
        int v22 = *v4;
        uint64_t v18 = *(v4 - 3);
        unint64_t v19 = *(v4 - 2);
        swift_bridgeObjectRelease();
        uint64_t v9 = v19;
        long long v11 = v22;
        long long v12 = v24;
        unint64_t v8 = v18;
        uint64_t v16 = v26;
        if (v13) {
          return v6;
        }
      }
      if (v9 != v14 || v8 != v12) {
        return v6;
      }
LABEL_17:
      if (!((v15 ^ v10) >> 14))
      {
        v4 += 7;
        v5 += 7;
        if ((v16 ^ v11) < 0x4000) {
          continue;
        }
      }
      return v6;
    }
  }
  return 1;
}

Swift::Int AST.Alternation.hashValue.getter()
{
  return AST.Alternation.hashValue.getter((void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:), (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(a1, a2, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:), (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Alternation(a1, a2, a3, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:), (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Alternation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Alternation()
{
  strcpy((char *)v3, "alternation<");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t AST.Alternation._dumpBase.getter()
{
  strcpy((char *)v3, "alternation<");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Alternation()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Concatenation.children.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 AST.Concatenation.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

__n128 AST.Concatenation.init(_:_:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

void AST.Concatenation.hash(into:)(uint64_t a1)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = v1[2];
  specialized Array<A>.hash(into:)(a1, *v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

BOOL static AST.Empty.== infix(_:_:)(void *a1, void *a2)
{
  return !((*a2 ^ *a1) >> 14) && (a1[1] ^ a2[1]) < 0x4000;
}

Swift::Int AST.Concatenation.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Concatenation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Concatenation(uint64_t a1)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = v1[2];
  specialized Array<A>.hash(into:)(a1, *v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Concatenation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Concatenation@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Concatenation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return (v4 ^ (unint64_t)v2) < 0x4000 && (v5 ^ (unint64_t)v3) < 0x4000;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Concatenation()
{
  return 0;
}

uint64_t AST.Concatenation._dumpBase.getter()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Concatenation()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Quote()
{
  String.append(_:)(*v0);
  v1._countAndFlagsBits = 34;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x222065746F7571;
}

uint64_t AST.Quote._dumpBase.getter()
{
  String.append(_:)(*v0);
  v1._countAndFlagsBits = 34;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x222065746F7571;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(a1, a2, (uint64_t (*)(void, void, void, void))specialized _ASTPrintable._dump());
}

uint64_t AST.Trivia._dumpBase.getter()
{
  return 0;
}

uint64_t AST.Interpolation.contents.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

__n128 AST.Interpolation.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

__n128 AST.Interpolation.init(_:_:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  __n128 result = *a3;
  a4[1] = *a3;
  return result;
}

void AST.Quote.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Quote.hashValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quote()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Interpolation@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Interpolation()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x6C6F707265746E69;
}

uint64_t AST.Interpolation._dumpBase.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x6C6F707265746E69;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Interpolation(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(a1, a2, (uint64_t (*)(void, void, void, void))specialized _ASTPrintable._dump());
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3]);
}

__n128 AST.Empty.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Empty.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void AST.Empty.hash(into:)()
{
  unint64_t v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Empty.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Empty()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Empty()
{
  unint64_t v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Empty()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Empty@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Empty(void *a1, void *a2)
{
  return !((*a2 ^ *a1) >> 14) && !((a1[1] ^ a2[1]) >> 14);
}

uint64_t AST.Empty._dumpBase.getter()
{
  return 0;
}

void AST.AbsentFunction.Kind.hash(into:)(uint64_t a1)
{
  switch((v1[3] >> 1) & 3)
  {
    case 1u:
      unint64_t v5 = v1[1];
      unint64_t v4 = v1[2];
      Hasher._combine(_:)(1uLL);
      AST.Node.hash(into:)(a1);
      Hasher._combine(_:)(v5 >> 14);
      Hasher._combine(_:)(v4 >> 14);
      goto LABEL_7;
    case 2u:
      Swift::UInt v3 = 2;
      goto LABEL_4;
    case 3u:
      Hasher._combine(_:)(3uLL);
      return;
    default:
      Swift::UInt v3 = 0;
LABEL_4:
      Hasher._combine(_:)(v3);
LABEL_7:
      AST.Node.hash(into:)(a1);
      return;
  }
}

Swift::Int AST.AbsentFunction.Kind.hashValue.getter()
{
  return AST.AbsentFunction.Kind.hashValue.getter((void (*)(unsigned char *))AST.AbsentFunction.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(a1, a2, (void (*)(unsigned char *))AST.AbsentFunction.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(a1, a2, a3, (void (*)(unsigned char *))AST.AbsentFunction.Kind.hash(into:));
}

__n128 AST.AbsentFunction.start.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.AbsentFunction.start.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.AbsentFunction.start.modify())()
{
  return AST.root.modify;
}

uint64_t AST.AbsentFunction.kind.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AST.AbsentFunction.Kind(v2, v3, v4, v5);
}

__n128 AST.AbsentFunction.kind.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of AST.AbsentFunction.Kind(v1[2], v1[3], v1[4], v1[5]);
  __n128 result = v5;
  *((__n128 *)v1 + 1) = v5;
  v1[4] = v2;
  v1[5] = v3;
  return result;
}

uint64_t (*AST.AbsentFunction.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.AbsentFunction.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

__n128 AST.AbsentFunction.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*AST.AbsentFunction.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.AbsentFunction.init(_:start:location:)@<Q0>(long long *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *a1;
  long long v5 = a1[1];
  *(_OWORD *)a4 = *a2;
  *(_OWORD *)(a4 + 16) = v4;
  __n128 result = *a3;
  *(_OWORD *)(a4 + 32) = v5;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void AST.AbsentFunction.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[6];
  unint64_t v5 = v1[7];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  AST.AbsentFunction.Kind.hash(into:)(a1);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int AST.AbsentFunction.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.AbsentFunction.Kind.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.AbsentFunction(uint64_t a1)
{
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[6];
  unint64_t v5 = v1[7];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  AST.AbsentFunction.Kind.hash(into:)(a1);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[6];
  unint64_t v4 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.AbsentFunction.Kind.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.AbsentFunction@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

unint64_t AST.AbsentFunction._dumpBase.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 40);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v2 = 8 * ((v1 >> 1) & 3);
  v3._countAndFlagsBits = *(void *)&aRepeaterexpres[v2];
  v3._object = *(void **)((char *)&unk_20D9DCB98 + v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.AbsentFunction()
{
  return specialized _ASTPrintable._dump()();
}

__n128 AST.Atom.Number.init(_:at:)@<Q0>(unint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = a1;
  a4->n128_u8[8] = a2 & 1;
  __n128 result = *a3;
  a4[1] = *a3;
  return result;
}

BOOL AST.Reference.Kind.recursesWholePattern.getter()
{
  return !*(unsigned char *)(v0 + 32) && (*(void *)(v0 + 8) & 1 | *(void *)v0) == 0;
}

void AST.Reference.Kind.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  if (!*(unsigned char *)(v0 + 32))
  {
    Hasher._combine(_:)(0);
    if (v2) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(1uLL);
    if (v2)
    {
LABEL_4:
      Hasher._combine(_:)(0);
LABEL_7:
      Hasher._combine(_:)(v4 >> 14);
      Hasher._combine(_:)(v3 >> 14);
      return;
    }
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    goto LABEL_7;
  }
  Hasher._combine(_:)(2uLL);

  String.hash(into:)();
}

Swift::Int AST.Reference.Kind.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Reference.Kind()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Reference.Kind()
{
  return Hasher._finalize()();
}

uint64_t AST.Reference.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  char v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  return outlined copy of AST.Reference.Kind(v2, v3, v4, v5, v6);
}

__n128 AST.Reference.kind.setter(__n128 *a1)
{
  __n128 v6 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  outlined consume of AST.Reference.Kind(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  __n128 result = v6;
  *(__n128 *)uint64_t v1 = v6;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*AST.Reference.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.recursionLevel.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 72);
  __n128 result = *(__n128 *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 AST.Reference.recursionLevel.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 56) = v4;
  *(unsigned char *)(v1 + 72) = v2;
  return result;
}

uint64_t (*AST.Reference.recursionLevel.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.innerLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[5];
  *a1 = result;
  return result;
}

__n128 AST.Reference.innerLoc.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[5] = *a1;
  return result;
}

uint64_t (*AST.Reference.innerLoc.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.init(_:recursionLevel:innerLoc:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 40) = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a4 + 32) = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a4 + 56) = v5;
  *(unsigned char *)(a4 + 72) = v6;
  __n128 result = *a3;
  *(__n128 *)(a4 + 80) = *a3;
  return result;
}

BOOL AST.Reference.recursesWholePattern.getter()
{
  return !*(unsigned char *)(v0 + 32) && (*(void *)(v0 + 8) & 1 | *(void *)v0) == 0;
}

void AST.Reference.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  unint64_t v4 = *(void *)(v0 + 56);
  unint64_t v3 = *(void *)(v0 + 64);
  char v5 = *(unsigned char *)(v0 + 72);
  unint64_t v7 = *(void *)(v0 + 80);
  unint64_t v6 = *(void *)(v0 + 88);
  AST.Reference.Kind.hash(into:)();
  if (v5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Reference.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Reference()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Reference()
{
  return Hasher._finalize()();
}

uint64_t (*AST.GlobalMatchingOptionSequence.options.modify())()
{
  return AST.root.modify;
}

_RegexParser::AST::GlobalMatchingOptionSequence_optional __swiftcall AST.GlobalMatchingOptionSequence.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (!*((void *)a1._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    a1._rawValue = 0;
  }
  v2->_rawValue = a1._rawValue;
  result.value.options = a1;
  result.is_nil = v3;
  return result;
}

void AST.GlobalMatchingOptionSequence.location.getter(uint64x2_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[1].i64[0];
  if (v3)
  {
    unint64_t v4 = (uint64x2_t *)&v2[3 * v3];
    int8x16_t v5 = v2[4];
    int8x16_t v6 = (int8x16_t)vcgtq_u64(vshrq_n_u64((uint64x2_t)v5, 0xEuLL), vshrq_n_u64(v4[1], 0xEuLL));
    v7.i64[0] = v4[1].i64[0];
    v7.i64[1] = v2[4].i64[1];
    v5.i64[1] = v4[1].i64[1];
    uint64x2_t v8 = (uint64x2_t)vbslq_s8(v6, v7, v5);
    int64x2_t v9 = (int64x2_t)vshrq_n_u64(v8, 0xEuLL);
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v9, (uint64x2_t)vdupq_laneq_s64(v9, 1))).u8[0] & 1) == 0)
    {
      *a1 = v8;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64x2_t *Source.Location.union(with:)@<X0>(uint64x2_t *result@<X0>, uint64x2_t *a2@<X8>)
{
  int8x16_t v3 = *(int8x16_t *)v2;
  v4.i64[0] = result->i64[0];
  v4.i64[1] = v2->i64[1];
  v3.i64[1] = result->i64[1];
  uint64x2_t v5 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(vshrq_n_u64(*v2, 0xEuLL), vshrq_n_u64(*result, 0xEuLL)), v4, v3);
  int64x2_t v6 = (int64x2_t)vshrq_n_u64(v5, 0xEuLL);
  if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v6, (uint64x2_t)vdupq_laneq_s64(v6, 1))).u8[0]) {
    __break(1u);
  }
  else {
    *a2 = v5;
  }
  return result;
}

void AST.GlobalMatchingOptionSequence.hash(into:)(uint64_t a1)
{
  specialized Array<A>.hash(into:)(a1, *v1);
}

uint64_t static AST.GlobalMatchingOptionSequence.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AST.GlobalMatchingOptionSequence.hashValue.getter()
{
  return AST.GlobalMatchingOptionSequence.hashValue.getter((void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(a1, a2, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

void protocol witness for Hashable.hash(into:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1)
{
  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.GlobalMatchingOptionSequence(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.Concatenation()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.Group()
{
  uint64_t v1 = *(void *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_20D9D7460;
  *(void *)(v2 + 32) = v1;
  swift_retain();
  return v2;
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Group@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[7];
  *a1 = result;
  return result;
}

__n128 AST.Group.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[7];
  *a1 = result;
  return result;
}

__n128 AST.Quantification.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[7];
  *a1 = result;
  return result;
}

uint64_t AST.AbsentFunction.children.getter()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[5];
  uint64_t v3 = MEMORY[0x263F8EE78];
  switch((v2 >> 1) & 3)
  {
    case 1u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_20D9D7470;
      *(void *)(v3 + 32) = v1;
      *(void *)(v3 + 40) = v2 & 0xFFFFFFFFFFFFFFF9;
      swift_retain();
      swift_retain();
      break;
    case 3u:
      return v3;
    default:
      int64x2_t v6 = v0 + 3;
      uint64_t v4 = v0[3];
      uint64_t v5 = v6[1];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_20D9D7460;
      *(void *)(v3 + 32) = v1;
      outlined copy of AST.AbsentFunction.Kind(v1, v4, v5, v2);
      break;
  }
  return v3;
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.AbsentFunction()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[5];
  uint64_t v3 = MEMORY[0x263F8EE78];
  switch((v2 >> 1) & 3)
  {
    case 1u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_20D9D7470;
      *(void *)(v3 + 32) = v1;
      *(void *)(v3 + 40) = v2 & 0xFFFFFFFFFFFFFFF9;
      swift_retain();
      swift_retain();
      break;
    case 3u:
      return v3;
    default:
      int64x2_t v6 = v0 + 3;
      uint64_t v4 = v0[3];
      uint64_t v5 = v6[1];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_20D9D7460;
      *(void *)(v3 + 32) = v1;
      outlined copy of AST.AbsentFunction.Kind(v1, v4, v5, v2);
      break;
  }
  return v3;
}

uint64_t AST.Atom.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom.Kind);
}

__n128 AST.Atom.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  *a1 = result;
  return result;
}

uint64_t AST.Atom.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  outlined init with take of AST.Atom.Kind(a1, a3, type metadata accessor for AST.Atom.Kind);
  uint64_t result = type metadata accessor for AST.Atom(0);
  int8x16_t v7 = (void *)(a3 + *(int *)(result + 20));
  *int8x16_t v7 = v4;
  v7[1] = v5;
  return result;
}

void AST.Atom.Kind.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x270FA5388](v4, v5);
  int8x16_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v8, v9);
  long long v11 = (unsigned __int8 *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v2, (uint64_t)v11, type metadata accessor for AST.Atom.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Swift::UInt32 v35 = *(_DWORD *)v11;
      unint64_t v36 = *((void *)v11 + 1);
      unint64_t v37 = *((void *)v11 + 2);
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v35);
      Hasher._combine(_:)(v36 >> 14);
      Hasher._combine(_:)(v37 >> 14);
      return;
    case 2u:
      uint64_t v38 = *(void *)v11;
      uint64_t v39 = *((void *)v11 + 1);
      Hasher._combine(_:)(2uLL);
      specialized Array<A>.hash(into:)(a1, v38);
      specialized Array<A>.hash(into:)(a1, v39);
      goto LABEL_24;
    case 3u:
      outlined init with take of AST.Atom.Kind((uint64_t)v11, (uint64_t)v7, type metadata accessor for AST.Atom.CharacterProperty);
      Hasher._combine(_:)(3uLL);
      AST.Atom.CharacterProperty.Kind.hash(into:)();
      Hasher._combine(_:)(v7[*(int *)(v4 + 20)]);
      Swift::UInt8 v40 = v7[*(int *)(v4 + 24)];
      outlined destroy of AST.Atom((uint64_t)v7, type metadata accessor for AST.Atom.CharacterProperty);
      Hasher._combine(_:)(v40);
      return;
    case 4u:
      Swift::UInt v13 = *v11;
      Hasher._combine(_:)(4uLL);
      Swift::UInt v14 = v13;
      goto LABEL_27;
    case 5u:
      Swift::UInt v12 = 5;
      goto LABEL_18;
    case 6u:
      Swift::UInt v12 = 6;
      goto LABEL_18;
    case 7u:
      Swift::UInt v12 = 7;
      goto LABEL_18;
    case 8u:
      Hasher._combine(_:)(8uLL);
      String.hash(into:)();
      goto LABEL_19;
    case 9u:
      uint64_t v15 = *(void *)v11;
      uint64_t v16 = *((void *)v11 + 1);
      uint64_t v17 = *((void *)v11 + 2);
      uint64_t v18 = *((void *)v11 + 3);
      long long v64 = *(_OWORD *)(v11 + 40);
      uint64_t v19 = *((void *)v11 + 7);
      uint64_t v63 = *((void *)v11 + 8);
      int v62 = v11[72];
      uint64_t v20 = *((void *)v11 + 10);
      uint64_t v60 = *((void *)v11 + 11);
      uint64_t v61 = v20;
      char v21 = v11[32];
      Swift::UInt v22 = 12;
      goto LABEL_22;
    case 0xAu:
      uint64_t v15 = *(void *)v11;
      uint64_t v16 = *((void *)v11 + 1);
      uint64_t v17 = *((void *)v11 + 2);
      uint64_t v18 = *((void *)v11 + 3);
      long long v64 = *(_OWORD *)(v11 + 40);
      uint64_t v19 = *((void *)v11 + 7);
      uint64_t v63 = *((void *)v11 + 8);
      int v62 = v11[72];
      uint64_t v41 = *((void *)v11 + 10);
      uint64_t v60 = *((void *)v11 + 11);
      uint64_t v61 = v41;
      char v21 = v11[32];
      Swift::UInt v22 = 13;
LABEL_22:
      Hasher._combine(_:)(v22);
      *(void *)&long long v76 = v15;
      *((void *)&v76 + 1) = v16;
      uint64_t v77 = v17;
      uint64_t v78 = v18;
      LOBYTE(v79) = v21;
      long long v80 = v64;
      uint64_t v81 = v19;
      uint64_t v82 = v63;
      char v83 = v62;
      uint64_t v84 = v61;
      uint64_t v85 = v60;
      AST.Reference.hash(into:)();
      outlined consume of AST.Reference.Kind(v15, v16, v17, v18, v21);
      return;
    case 0xBu:
      outlined init with take of AST.Atom.Callout(v11, v75);
      Hasher._combine(_:)(0xEuLL);
      outlined init with take of AST.Atom.Callout(v75, &v76);
      int v23 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)&v76);
      if (v23)
      {
        if (v23 == 1)
        {
          uint64_t v24 = AST.root.modify(&v76);
          Hasher._combine(_:)(1uLL);
          long long v25 = *(_OWORD *)(v24 + 112);
          long long v71 = *(_OWORD *)(v24 + 96);
          long long v72 = v25;
          *(void *)&long long v73 = *(void *)(v24 + 128);
          long long v26 = *(_OWORD *)(v24 + 48);
          long long v67 = *(_OWORD *)(v24 + 32);
          long long v68 = v26;
          long long v27 = *(_OWORD *)(v24 + 80);
          long long v69 = *(_OWORD *)(v24 + 64);
          long long v70 = v27;
          long long v28 = *(_OWORD *)(v24 + 16);
          long long v65 = *(_OWORD *)v24;
          long long v66 = v28;
          AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
        }
        else
        {
          uint64_t v55 = AST.root.modify(&v76);
          Hasher._combine(_:)(2uLL);
          long long v56 = *(_OWORD *)(v55 + 112);
          long long v71 = *(_OWORD *)(v55 + 96);
          long long v72 = v56;
          long long v73 = *(_OWORD *)(v55 + 128);
          uint64_t v74 = *(void *)(v55 + 144);
          long long v57 = *(_OWORD *)(v55 + 48);
          long long v67 = *(_OWORD *)(v55 + 32);
          long long v68 = v57;
          long long v58 = *(_OWORD *)(v55 + 80);
          long long v69 = *(_OWORD *)(v55 + 64);
          long long v70 = v58;
          long long v59 = *(_OWORD *)(v55 + 16);
          long long v65 = *(_OWORD *)v55;
          long long v66 = v59;
          AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
        }
      }
      else
      {
        uint64_t v49 = AST.root.modify(&v76);
        long long v64 = *(_OWORD *)v49;
        uint64_t v50 = *(void *)(v49 + 16);
        uint64_t v51 = *(void *)(v49 + 24);
        char v52 = *(unsigned char *)(v49 + 32);
        uint64_t v53 = *(void *)(v49 + 40);
        uint64_t v54 = *(void *)(v49 + 48);
        Hasher._combine(_:)(0);
        long long v65 = v64;
        *(void *)&long long v66 = v50;
        *((void *)&v66 + 1) = v51;
        LOBYTE(v67) = v52;
        *((void *)&v67 + 1) = v53;
        *(void *)&long long v68 = v54;
        specialized Source.Located<A>.hash(into:)();
      }
      outlined release of AST.Atom.Callout((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
      return;
    case 0xCu:
      Swift::UInt v29 = *v11;
      unint64_t v30 = *((void *)v11 + 1);
      unint64_t v31 = *((void *)v11 + 2);
      uint64_t v32 = *((void *)v11 + 4);
      unint64_t v34 = *((void *)v11 + 5);
      unint64_t v33 = *((void *)v11 + 6);
      Hasher._combine(_:)(0xFuLL);
      Hasher._combine(_:)(v29);
      Hasher._combine(_:)(v30 >> 14);
      Hasher._combine(_:)(v31 >> 14);
      if (v32)
      {
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        Hasher._combine(_:)(v34 >> 14);
        Hasher._combine(_:)(v33 >> 14);
LABEL_19:
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
        swift_bridgeObjectRelease();
      }
      return;
    case 0xDu:
      uint64_t v42 = *(void *)v11;
      uint64_t v43 = *((void *)v11 + 1);
      unsigned __int8 v44 = v11[16];
      uint64_t v45 = *((void *)v11 + 3);
      uint64_t v46 = *((void *)v11 + 4);
      uint64_t v47 = *((void *)v11 + 5);
      LODWORD(v64) = v11[48];
      uint64_t v48 = *((void *)v11 + 7);
      Hasher._combine(_:)(0x10uLL);
      *(void *)&long long v76 = v42;
      *((void *)&v76 + 1) = v43;
      LOBYTE(v77) = v44;
      uint64_t v78 = v45;
      uint64_t v79 = v46;
      *(void *)&long long v80 = v47;
      BYTE8(v80) = v64;
      uint64_t v81 = v48;
      AST.MatchingOptionSequence.hash(into:)(a1);
LABEL_24:
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 0xEu:
      Swift::UInt v14 = 9;
      goto LABEL_27;
    case 0xFu:
      Swift::UInt v14 = 10;
      goto LABEL_27;
    case 0x10u:
      Swift::UInt v14 = 11;
      goto LABEL_27;
    case 0x11u:
      Swift::UInt v14 = 17;
LABEL_27:
      Hasher._combine(_:)(v14);
      return;
    default:
      Swift::UInt v12 = 0;
LABEL_18:
      Hasher._combine(_:)(v12);
      String.hash(into:)();
      goto LABEL_19;
  }
}

BOOL static AST.Atom.Scalar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  return (*(void *)(a1 + 8) ^ *(void *)(a2 + 8)) < 0x4000
      && (*(void *)(a1 + 16) ^ *(void *)(a2 + 16)) < 0x4000uLL;
}

uint64_t static AST.Atom.ScalarSequence.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    char v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t static AST.Atom.CharacterProperty.== infix(_:_:)(uint64_t a1, char *a2)
{
  if ((specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(a1, a2) & 1) != 0
    && (uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty(0),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == a2[*(int *)(v4 + 20)]))
  {
    char v5 = *(unsigned char *)(a1 + *(int *)(v4 + 24)) ^ a2[*(int *)(v4 + 24)] ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

Swift::Int AST.Atom.Kind.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(unsigned char *))AST.Atom.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(unsigned char *))AST.Atom.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(unsigned char *))AST.Atom.Kind.hash(into:));
}

void AST.Atom.hash(into:)(uint64_t a1)
{
  AST.Atom.Kind.hash(into:)(a1);
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  unint64_t v3 = v2[1];
  Hasher._combine(_:)(*v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int AST.Atom.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)((uint64_t)v4);
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  unint64_t v2 = v1[1];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom(uint64_t a1)
{
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)((uint64_t)v6);
  unint64_t v3 = (void *)(v1 + *(int *)(a1 + 20));
  unint64_t v4 = v3[1];
  Hasher._combine(_:)(*v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom(uint64_t a1, uint64_t a2)
{
  AST.Atom.Kind.hash(into:)(a1);
  unint64_t v4 = (void *)(v2 + *(int *)(a2 + 20));
  unint64_t v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)((uint64_t)v7);
  unint64_t v4 = (void *)(v2 + *(int *)(a2 + 20));
  unint64_t v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Atom@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 20));
  *a2 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  if (specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2))
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = a1 + v6;
    unint64_t v8 = *(void *)(a1 + v6);
    uint64_t v9 = (void *)(a2 + v6);
    if (!((*v9 ^ v8) >> 14) && (*(void *)(v7 + 8) ^ v9[1]) < 0x4000) {
      return 1;
    }
  }
  return result;
}

uint64_t AST.Atom._dumpBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x270FA5388](v1 - 8, v2);
  unint64_t v4 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v5, v6);
  unint64_t v8 = (uint64_t *)((char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = AST.Atom.literalStringValue.getter();
  if (v10)
  {
    uint64_t v86 = 10665455;
    *(void *)&long long v87 = 0xA300000000000000;
    String.append(_:)(*(Swift::String *)&v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = 10730991;
    unint64_t v12 = 0xA300000000000000;
LABEL_3:
    String.append(_:)(*(Swift::String *)&v11);
    return v86;
  }
  else
  {
    uint64_t v15 = (void *)0xE90000000000003ELL;
    uint64_t v13 = 0x64696C61766E693CLL;
    outlined init with copy of AST.Atom(v0, (uint64_t)v8, type metadata accessor for AST.Atom.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        goto LABEL_47;
      case 2u:
        uint64_t v24 = *v8;
        int64_t v25 = *(void *)(*v8 + 16);
        if (v25)
        {
          uint64_t v74 = v8[1];
          *(void *)&v85[0] = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
          unint64_t v26 = 0;
          uint64_t v27 = 32;
          *(void *)&long long v75 = v24;
          do
          {
            if (v26 >= *(void *)(v24 + 16))
            {
              __break(1u);
LABEL_46:
              outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom.Kind);
LABEL_47:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x20D950AC8);
            }
            unsigned int v28 = *(_DWORD *)(v24 + v27);
            uint64_t v86 = 10665455;
            *(void *)&long long v87 = 0xA300000000000000;
            if (v28 > 0x7F)
            {
              int v39 = (v28 & 0x3F) << 8;
              int64_t v29 = v25;
              if (v28 >= 0x800)
              {
                unsigned int v40 = v28 >> 12;
                int v41 = (v39 | (v28 >> 6) & 0x3F) << 8;
                unsigned int v42 = HIWORD(v28);
                unsigned int v30 = (((v41 | (v28 >> 12) & 0x3F) << 8) | (v28 >> 18)) - 2122219023;
                int v43 = (v41 | v40) + 8487393;
                if (!v42) {
                  unsigned int v30 = v43;
                }
              }
              else
              {
                unsigned int v30 = (v39 | (v28 >> 6)) + 33217;
              }
            }
            else
            {
              int64_t v29 = v25;
              unsigned int v30 = v28 + 1;
            }
            *(void *)&long long v76 = (v30 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v30) >> 3))));
            v31._countAndFlagsBits = MEMORY[0x210561750](&v76);
            String.append(_:)(v31);
            swift_bridgeObjectRelease();
            v32._countAndFlagsBits = 10730991;
            v32._object = (void *)0xA300000000000000;
            String.append(_:)(v32);
            uint64_t v33 = v86;
            uint64_t v34 = v87;
            unint64_t v8 = *(void **)&v85[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1);
              unint64_t v8 = *(void **)&v85[0];
            }
            unint64_t v36 = v8[2];
            unint64_t v35 = v8[3];
            if (v36 >= v35 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1);
              unint64_t v8 = *(void **)&v85[0];
            }
            ++v26;
            v8[2] = v36 + 1;
            unint64_t v37 = &v8[2 * v36];
            v37[4] = v33;
            v37[5] = v34;
            v27 += 24;
            int64_t v25 = v29;
            BOOL v38 = v29 == v26;
            uint64_t v24 = v75;
          }
          while (!v38);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v8 = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v86 = (uint64_t)v8;
        swift_getCanonicalSpecializedMetadata();
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
        uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
        swift_bridgeObjectRelease();
        break;
      case 3u:
        outlined init with take of AST.Atom.Kind((uint64_t)v8, (uint64_t)v4, type metadata accessor for AST.Atom.CharacterProperty);
        uint64_t v13 = AST.Atom.CharacterProperty._dumpBase.getter();
        outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.CharacterProperty);
        return v13;
      case 4u:
        char v50 = *(unsigned char *)v8;
        uint64_t v86 = 0;
        *(void *)&long long v87 = 0xE000000000000000;
        v51._countAndFlagsBits = 92;
        v51._object = (void *)0xE100000000000000;
        String.append(_:)(v51);
        LOBYTE(v85[0]) = v50;
        AST.Atom.EscapedBuiltin.character.getter();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        return v86;
      case 8u:
        v46._countAndFlagsBits = *v8;
        uint64_t v47 = (void *)v8[1];
        uint64_t v86 = 8080988;
        *(void *)&long long v87 = 0xE300000000000000;
        v46._object = v47;
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        uint64_t v11 = 125;
        unint64_t v12 = 0xE100000000000000;
        goto LABEL_3;
      case 9u:
      case 0xAu:
        LODWORD(v75) = *((unsigned __int8 *)v8 + 72);
        uint64_t v16 = v8[6];
        uint64_t v73 = v8[5];
        uint64_t v74 = v16;
        char v17 = *((unsigned char *)v8 + 32);
        uint64_t v19 = v8[2];
        uint64_t v18 = v8[3];
        Swift::UInt v22 = v8;
        uint64_t v20 = *v8;
        uint64_t v21 = v22[1];
        *(void *)&long long v76 = 0;
        *((void *)&v76 + 1) = 0xE000000000000000;
        uint64_t v86 = v20;
        *(void *)&long long v87 = v21;
        *((void *)&v87 + 1) = v19;
        uint64_t v88 = v18;
        LOBYTE(v89) = v17;
        _print_unlocked<A, B>(_:_:)();
        uint64_t v23 = v76;
        v85[0] = v76;
        if (v75)
        {
          outlined consume of AST.Reference.Kind(v20, v21, v19, v18, v17);
          uint64_t v13 = v23;
        }
        else
        {
          LOBYTE(v86) = v74 & 1;
          if ((v74 & 1) == 0)
          {
            uint64_t v86 = v73;
            uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v15 = v48;
          }
          v49._countAndFlagsBits = v13;
          v49._object = v15;
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          outlined consume of AST.Reference.Kind(v20, v21, v19, v18, v17);
LABEL_38:
          uint64_t v13 = *(void *)&v85[0];
        }
        break;
      case 0xBu:
        outlined init with take of AST.Atom.Callout(v8, v85);
        outlined init with take of AST.Atom.Callout(v85, &v86);
        int v52 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)&v86);
        if (v52)
        {
          if (v52 == 1)
          {
            uint64_t v53 = AST.root.modify(&v86);
            long long v80 = *(_OWORD *)(v53 + 80);
            long long v81 = *(_OWORD *)(v53 + 96);
            long long v82 = *(_OWORD *)(v53 + 112);
            *(void *)&long long v83 = *(void *)(v53 + 128);
            long long v77 = *(_OWORD *)(v53 + 16);
            v78[0] = *(_OWORD *)(v53 + 32);
            v78[1] = *(_OWORD *)(v53 + 48);
            long long v79 = *(_OWORD *)(v53 + 64);
            long long v76 = *(_OWORD *)v53;
            unint64_t v54 = AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
          }
          else
          {
            uint64_t v72 = AST.root.modify(&v86);
            long long v81 = *(_OWORD *)(v72 + 96);
            long long v82 = *(_OWORD *)(v72 + 112);
            long long v83 = *(_OWORD *)(v72 + 128);
            uint64_t v84 = *(void *)(v72 + 144);
            v78[0] = *(_OWORD *)(v72 + 32);
            v78[1] = *(_OWORD *)(v72 + 48);
            long long v79 = *(_OWORD *)(v72 + 64);
            long long v80 = *(_OWORD *)(v72 + 80);
            long long v76 = *(_OWORD *)v72;
            long long v77 = *(_OWORD *)(v72 + 16);
            unint64_t v54 = AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
          }
        }
        else
        {
          uint64_t v67 = AST.root.modify(&v86);
          char v68 = *(unsigned char *)(v67 + 32);
          long long v69 = *(_OWORD *)(v67 + 16);
          long long v70 = *(_OWORD *)(v67 + 40);
          long long v76 = *(_OWORD *)v67;
          long long v77 = v69;
          LOBYTE(v78[0]) = v68;
          *(_OWORD *)((char *)v78 + 8) = v70;
          unint64_t v71 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
          unint64_t v54 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v71 + 24))(&type metadata for AST.Atom.Callout.PCRE, v71);
        }
        uint64_t v13 = v54;
        outlined release of AST.Atom.Callout((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
        return v13;
      case 0xCu:
        uint64_t v44 = v8[3];
        uint64_t v45 = v8[6];
        LOBYTE(v86) = *(unsigned char *)v8;
        long long v87 = *(_OWORD *)(v8 + 1);
        uint64_t v88 = v44;
        long long v75 = *((_OWORD *)v8 + 2);
        long long v89 = v75;
        uint64_t v90 = v45;
        uint64_t v13 = AST.Atom.BacktrackingDirective._dumpBase.getter();
        swift_bridgeObjectRelease();
        return v13;
      case 0xDu:
        uint64_t v55 = *v8;
        uint64_t v56 = v8[1];
        char v57 = *((unsigned char *)v8 + 16);
        uint64_t v58 = v8[3];
        uint64_t v59 = v8[4];
        uint64_t v60 = v8[5];
        LODWORD(v75) = *((unsigned __int8 *)v8 + 48);
        uint64_t v61 = v8[7];
        uint64_t v86 = 0;
        *(void *)&long long v87 = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        *(void *)&v85[0] = 0xD000000000000016;
        *((void *)&v85[0] + 1) = 0x800000020D9DDCA0;
        uint64_t v86 = v55;
        *(void *)&long long v87 = v56;
        BYTE8(v87) = v57;
        uint64_t v88 = v58;
        *(void *)&long long v89 = v59;
        *((void *)&v89 + 1) = v60;
        LOBYTE(v90) = v75;
        uint64_t v91 = v61;
        uint64_t v62 = AST.MatchingOptionSequence._dumpBase.getter();
        long long v64 = v63;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v65._countAndFlagsBits = v62;
        v65._object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._countAndFlagsBits = 62;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        goto LABEL_38;
      case 0xEu:
        return 46;
      case 0xFu:
        return 94;
      case 0x10u:
        return 36;
      case 0x11u:
        return v13;
      default:
        goto LABEL_46;
    }
  }
  return v13;
}

uint64_t AST.Atom.Number.value.getter()
{
  return *(void *)v0;
}

uint64_t AST.Atom.Number.value.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AST.Atom.Number.value.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Number.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*AST.Atom.Number.location.modify())()
{
  return AST.root.modify;
}

void AST.Atom.Number.hash(into:)()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Atom.Number.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Number()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Number()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Number()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Atom.Scalar.value.getter()
{
  return *v0;
}

uint64_t AST.Atom.Scalar.value.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*AST.Atom.Scalar.value.modify())()
{
  return AST.root.modify;
}

uint64_t (*AST.Atom.Scalar.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Scalar.init(_:_:)@<Q0>(int a1@<W0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

void AST.Atom.Scalar.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Atom.Scalar.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Scalar()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Scalar()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Scalar()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.Scalar(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  return (*(void *)(a1 + 8) ^ *(void *)(a2 + 8)) < 0x4000
      && (*(void *)(a1 + 16) ^ *(void *)(a2 + 16)) < 0x4000uLL;
}

uint64_t AST.Atom.ScalarSequence.scalars.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*AST.Atom.ScalarSequence.scalars.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.ScalarSequence.trivia.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AST.Atom.ScalarSequence.trivia.modify())()
{
  return AST.root.modify;
}

_RegexParser::AST::Atom::ScalarSequence __swiftcall AST.Atom.ScalarSequence.init(_:trivia:)(Swift::OpaquePointer _, Swift::OpaquePointer trivia)
{
  if (*((void *)_._rawValue + 2) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v2->_rawValue = _._rawValue;
    v2[1]._rawValue = trivia._rawValue;
  }
  result.trivia = trivia;
  result.scalars = _;
  return result;
}

uint64_t AST.Atom.ScalarSequence.scalarValues.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    unint64_t v4 = 0;
    uint64_t result = v9;
    uint64_t v5 = (int *)(v1 + 32);
    while (v4 < *(void *)(v1 + 16))
    {
      int v6 = *v5;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      ++v4;
      *(void *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v6;
      v5 += 6;
      if (v2 == v4) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a5;
  uint64_t v35 = a8;
  uint64_t v10 = v9;
  int v43 = a1;
  uint64_t v44 = a2;
  uint64_t v33 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v45 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v41 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x270FA5388](AssociatedTypeWitness, v14);
  char v17 = (char *)&v31 - v16;
  uint64_t v18 = a4;
  MEMORY[0x270FA5388](v15, v19);
  BOOL v38 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v21 - 8);
  uint64_t v37 = v21;
  MEMORY[0x270FA5388](v21, v22);
  uint64_t v24 = (char *)&v31 - v23;
  uint64_t v39 = v8;
  uint64_t v25 = dispatch thunk of Collection.count.getter();
  if (!v25) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v26 = v25;
  Swift::String v32 = v17;
  uint64_t v48 = MEMORY[0x210561BD0](v18);
  uint64_t v40 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v26);
  Swift::String v46 = v24;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v26 < 0)
  {
    __break(1u);
  }
  else
  {
    unsigned int v28 = (void (**)(char *))(v41 + 2);
    ++v41;
    unsigned int v42 = v28;
    int64_t v29 = v32;
    while (1)
    {
      unsigned int v30 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v42)(v29);
      v30(v47, 0);
      v43(v29, v45);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v41)(v29, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v26)
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v46, v37);
        return v48;
      }
    }
    (*v41)(v29, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v46, v37);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v35, v45, v34);
  }
  return result;
}

uint64_t AST.Atom.ScalarSequence.hash(into:)(uint64_t a1)
{
  return AST.Alternation.hash(into:)(a1, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t AST.Alternation.hash(into:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  a2(a1, v6);

  return a3(a1, v7);
}

Swift::Int AST.Atom.ScalarSequence.hashValue.getter()
{
  return AST.Alternation.hashValue.getter((void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:), (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int AST.Alternation.hashValue.getter(void (*a1)(unsigned char *, uint64_t), void (*a2)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  Hasher.init(_seed:)();
  a1(v8, v6);
  a2(v8, v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.ScalarSequence(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(a1, a2, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:), (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t), void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v8 = *v4;
  uint64_t v7 = v4[1];
  Hasher.init(_seed:)();
  a3(v10, v8);
  a4(v10, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.ScalarSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Alternation(a1, a2, a3, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *v5;
  uint64_t v8 = v5[1];
  a4(a1, v7);

  return a5(a1, v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.ScalarSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:), (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t), void (*a5)(unsigned char *, uint64_t))
{
  uint64_t v9 = *v5;
  uint64_t v8 = v5[1];
  Hasher.init(_seed:)();
  a4(v11, v9);
  a5(v11, v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.ScalarSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    char v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t AST.Atom.EscapedBuiltin.character.getter()
{
  return qword_20D9DC9E0[*v0];
}

uint64_t static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X8>)
{
  uint64_t v6 = result;
  if (result == 97 && a2 == 0xE100000000000000)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v8 = 0;
    if ((result & 1) == 0)
    {
      if (v6 == 101 && a2 == 0xE100000000000000
        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v8 = 1;
      }
      else if (v6 == 102 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 2;
      }
      else if (v6 == 110 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 3;
      }
      else if (v6 == 114 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 4;
      }
      else if (v6 == 116 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 5;
      }
      else if (v6 == 100 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 7;
      }
      else if (v6 == 68 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 8;
      }
      else if (v6 == 104 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 9;
      }
      else if (v6 == 72 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 10;
      }
      else if (v6 == 115 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 13;
      }
      else if (v6 == 83 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 14;
      }
      else if (v6 == 118 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 15;
      }
      else if (v6 == 86 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 16;
      }
      else if (v6 == 119 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 17;
      }
      else if (v6 == 87 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 18;
      }
      else if (v6 == 98 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        if (a3) {
          char v8 = 19;
        }
        else {
          char v8 = 21;
        }
      }
      else if (a3)
      {
        char v8 = 31;
      }
      else if (v6 == 67 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 6;
      }
      else if (v6 == 78 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 11;
      }
      else if (v6 == 82 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 12;
      }
      else if (v6 == 88 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 20;
      }
      else if (v6 == 66 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 22;
      }
      else if (v6 == 65 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 23;
      }
      else if (v6 == 90 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 24;
      }
      else if (v6 == 122 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 25;
      }
      else if (v6 == 71 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 26;
      }
      else if (v6 == 75 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 27;
      }
      else if (v6 == 79 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 28;
      }
      else if (v6 == 121 && a2 == 0xE100000000000000 {
             || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      }
      {
        char v8 = 29;
      }
      else
      {
        char v8 = 30;
        if (v6 != 89 || a2 != 0xE100000000000000)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            char v8 = 30;
          }
          else {
            char v8 = 31;
          }
        }
      }
    }
  }
  *a4 = v8;
  return result;
}

_RegexParser::AST::Atom::EscapedBuiltin_optional __swiftcall AST.Atom.EscapedBuiltin.init(_:inCustomCharacterClass:)(Swift::String _, Swift::Bool inCustomCharacterClass)
{
  uint64_t v3 = v2;
  static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)(_._countAndFlagsBits, (uint64_t)_._object, inCustomCharacterClass, &v5);
  result.value = swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  return result;
}

uint64_t AST.Atom.CharacterProperty.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

uint64_t AST.Atom.CharacterProperty.kind.setter(uint64_t a1)
{
  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

uint64_t (*AST.Atom.CharacterProperty.kind.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.isInverted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AST.Atom.CharacterProperty(0) + 20));
}

uint64_t AST.Atom.CharacterProperty.isInverted.setter(char a1)
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AST.Atom.CharacterProperty.isInverted.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.isPOSIX.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AST.Atom.CharacterProperty(0) + 24));
}

uint64_t AST.Atom.CharacterProperty.isPOSIX.setter(char a1)
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AST.Atom.CharacterProperty.isPOSIX.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.init(_:isInverted:isPOSIX:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  outlined init with take of AST.Atom.Kind(a1, a4, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(unsigned char *)(a4 + *(int *)(result + 20)) = a2;
  *(unsigned char *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t AST.Atom.CharacterProperty._dumpBase.getter()
{
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  if (*(unsigned char *)(v0 + *(int *)(v1 + 20))) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v1 + 20))) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24))) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24))) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  return 0;
}

void AST.Atom.CharacterProperty.hash(into:)()
{
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int AST.Atom.CharacterProperty.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  uint64_t v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty(uint64_t a1)
{
  Hasher.init(_seed:)();
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 20)));
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty(uint64_t a1, uint64_t a2)
{
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty(uint64_t a1, char *a2, uint64_t a3)
{
  if ((specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(a1, a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == a2[*(int *)(a3 + 20)])
  {
    char v6 = *(unsigned char *)(a1 + *(int *)(a3 + 24)) ^ a2[*(int *)(a3 + 24)] ^ 1;
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void AST.Atom.CharacterProperty.Kind.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1, v3);
  uint64_t v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Unicode.NumericType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x270FA5388](v11, v12);
  uint64_t v14 = &v29[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of AST.Atom(v0, (uint64_t)v14, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unsigned __int8 v16 = *v14;
      Swift::UInt8 v17 = v14[1];
      Hasher._combine(_:)(4uLL);
      v29[9] = v16;
      Unicode.BinaryProperty.rawValue.getter();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v17);
      return;
    case 2u:
      unsigned __int8 v18 = *v14;
      Hasher._combine(_:)(5uLL);
      v29[10] = v18;
      goto LABEL_6;
    case 3u:
      unsigned __int8 v19 = *v14;
      Hasher._combine(_:)(6uLL);
      v29[11] = v19;
LABEL_6:
      Unicode.Script.rawValue.getter();
      goto LABEL_20;
    case 4u:
      Hasher._combine(_:)(7uLL);
      String.hash(into:)();
      goto LABEL_21;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 32))(v10, v14, v6);
      Hasher._combine(_:)(8uLL);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
      return;
    case 6u:
      Swift::UInt64 v20 = *(void *)v14;
      Hasher._combine(_:)(9uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = 0;
      }
      Hasher._combine(_:)(v21);
      return;
    case 7u:
      Swift::UInt v22 = *v14;
      Hasher._combine(_:)(0xAuLL);
      Hasher._combine(_:)(v22);
      String.hash(into:)();
      goto LABEL_21;
    case 8u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2 + 32))(v5, v14, v1);
      Hasher._combine(_:)(0xBuLL);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v5, v1);
      return;
    case 9u:
      Swift::UInt v23 = *(void *)v14;
      Swift::UInt v24 = *((void *)v14 + 1);
      Hasher._combine(_:)(0xCuLL);
      Hasher._combine(_:)(v23);
      Swift::UInt v25 = v24;
      goto LABEL_27;
    case 0xAu:
      __int16 v26 = *(_WORD *)v14;
      Hasher._combine(_:)(0xDuLL);
      __int16 v30 = v26;
      Unicode.Block.rawValue.getter();
      goto LABEL_20;
    case 0xBu:
      Hasher._combine(_:)(0xEuLL);
      goto LABEL_20;
    case 0xCu:
      Hasher._combine(_:)(0xFuLL);
      String.hash(into:)();
      goto LABEL_21;
    case 0xDu:
      unsigned __int8 v27 = *v14;
      Hasher._combine(_:)(0x10uLL);
      unsigned __int8 v31 = v27;
      AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter();
      goto LABEL_20;
    case 0xEu:
      uint64_t v28 = *((void *)v14 + 1);
      Hasher._combine(_:)(0x11uLL);
      if (v28)
      {
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      goto LABEL_20;
    case 0xFu:
      Swift::UInt v25 = 0;
      goto LABEL_27;
    case 0x10u:
      Swift::UInt v25 = 1;
      goto LABEL_27;
    case 0x11u:
      Swift::UInt v25 = 2;
LABEL_27:
      Hasher._combine(_:)(v25);
      break;
    default:
      unsigned __int8 v15 = *v14;
      Hasher._combine(_:)(3uLL);
      v29[8] = v15;
      Unicode.ExtendedGeneralCategory.rawValue.getter();
LABEL_20:
      String.hash(into:)();
LABEL_21:
      swift_bridgeObjectRelease();
      break;
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (*(void *)&aAlnum_1[8 * a1] == *(void *)&aAlnum_1[8 * a2] && qword_20D9DCBE8[a1] == qword_20D9DCBE8[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v2;

  if (qword_20D9DCAD8[a1] == qword_20D9DCAD8[a2]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int AST.Atom.CharacterProperty.Kind.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(unsigned char *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(unsigned char *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(unsigned char *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

_RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional __swiftcall AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t AST.Atom.CharacterProperty.PCRESpecialCategory.rawValue.getter()
{
  return qword_20D9DCAD8[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

_RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory(Swift::String *a1)
{
  return AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.Atom.CharacterProperty.PCRESpecialCategory(void *a1@<X8>)
{
  *a1 = qword_20D9DCAD8[*v1];
  a1[1] = 0xE300000000000000;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

_RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional __swiftcall AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 18;
  if (v3 < 0x12) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter()
{
  return &outlined read-only object #0 of static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter;
}

unint64_t AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter()
{
  unint64_t result = 0xD000000000000017;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x696665446176616ALL;
      break;
    case 2:
      unint64_t result = 0x696769446176616ALL;
      break;
    case 3:
    case 7:
      return result;
    case 4:
      unint64_t result = 0x6F6564496176616ALL;
      break;
    case 5:
      unint64_t result = 0x434F53496176616ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 8:
      unint64_t result = 0x7474654C6176616ALL;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 0xA:
      unint64_t result = 0x65776F4C6176616ALL;
      break;
    case 0xB:
      unint64_t result = 0x7272694D6176616ALL;
      break;
    case 0xC:
      unint64_t result = 0x636170536176616ALL;
      break;
    case 0xD:
      unint64_t result = 0x6C7469546176616ALL;
      break;
    case 0xE:
      unint64_t result = 0xD000000000000019;
      break;
    case 0xF:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0x10:
      unint64_t result = 0x657070556176616ALL;
      break;
    case 0x11:
      unint64_t result = 0x746968576176616ALL;
      break;
    default:
      unint64_t result = 0x68706C416176616ALL;
      break;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, (uint64_t (*)(void))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

_RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Atom.CharacterProperty.JavaSpecial(Swift::String *a1)
{
  return AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter;
}

void AST.Atom.Callout.PCRE.Argument.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 32))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 16);
    unint64_t v3 = *(void *)(v0 + 24);
    Hasher._combine(_:)(0);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
}

Swift::Int AST.Atom.Callout.PCRE.Argument.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.PCRE.Argument()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 32))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    unint64_t v4 = *(void *)(v0 + 16);
    unint64_t v3 = *(void *)(v0 + 24);
    Hasher._combine(_:)(0);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.PCRE.Argument()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  return Hasher._finalize()();
}

uint64_t AST.Atom.Callout.PCRE.arg.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  return outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v4, v5, v6);
}

__n128 AST.Atom.Callout.PCRE.arg.setter(__n128 *a1)
{
  __n128 v8 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  unint64_t v5 = a1[2].n128_u64[1];
  unint64_t v6 = a1[3].n128_u64[0];
  outlined consume of AST.Atom.Callout.PCRE.Argument(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  __n128 result = v8;
  *(__n128 *)uint64_t v1 = v8;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = v6;
  return result;
}

uint64_t (*AST.Atom.Callout.PCRE.arg.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.PCRE.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 32) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

BOOL AST.Atom.Callout.PCRE.isImplicit.getter()
{
  return (*(void *)(v0 + 48) ^ *(void *)(v0 + 40)) < 0x4000uLL;
}

BOOL Source.Location.isEmpty.getter()
{
  return (v0[1] ^ *v0) < 0x4000uLL;
}

void AST.Atom.Callout.PCRE.hash(into:)()
{
}

BOOL static AST.Atom.Callout.PCRE.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static Source.Located<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a2 + 32))
    {
      if (v4 == v9 && v5 == v8)
      {
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v11, v10, 1);
      }
      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v8, v11, v10, 1);
        BOOL result = 0;
        if ((v19 & 1) == 0) {
          return result;
        }
      }
      return !((*(void *)(a2 + 40) ^ *(void *)(a1 + 40)) >> 14)
          && (*(void *)(a1 + 48) ^ *(void *)(a2 + 48)) < 0x4000;
    }
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = v11;
    uint64_t v17 = v10;
    char v18 = 0;
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 32))
  {
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 0);
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    uint64_t v16 = v11;
    uint64_t v17 = v10;
    char v18 = 1;
LABEL_12:
    outlined consume of AST.Atom.Callout.PCRE.Argument(v14, v15, v16, v17, v18);
    return 0;
  }
  outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
  outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 0);
  outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v8, v11, v10, 0);
  if (v5)
  {
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if ((v8 & 1) != 0 || v4 != v9) {
      return result;
    }
  }
  BOOL result = 0;
  if (!((v11 ^ (unint64_t)v7) >> 14) && (v10 ^ (unint64_t)v6) < 0x4000) {
    return !((*(void *)(a2 + 40) ^ *(void *)(a1 + 40)) >> 14)
  }
        && (*(void *)(a1 + 48) ^ *(void *)(a2 + 48)) < 0x4000;
  return result;
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(char a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  BOOL v10 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v11 = 24155;
  }
  else {
    uint64_t v11 = 91;
  }
  if (v10) {
    unint64_t v12 = 0xE100000000000000;
  }
  else {
    unint64_t v12 = 0xE200000000000000;
  }
  if (a4) {
    uint64_t v13 = 24155;
  }
  else {
    uint64_t v13 = 91;
  }
  if (a4) {
    unint64_t v14 = 0xE200000000000000;
  }
  else {
    unint64_t v14 = 0xE100000000000000;
  }
  if (v11 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v15 & 1) == 0) {
      return result;
    }
  }
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

{
  char v10;
  BOOL result;

  if (qword_20D9DCB00[a1] == qword_20D9DCB00[a4])
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    BOOL v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    BOOL result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if (!(_BYTE)a1)
  {
    a1 = a1;
    unint64_t v10 = 0xE000000000000000;
    int v11 = a4;
    if (a4) {
      goto LABEL_6;
    }
LABEL_12:
    unint64_t v13 = 0xE000000000000000;
    if (a1 != a4) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (a1 == 1) {
    a1 = 63;
  }
  else {
    a1 = 43;
  }
  unint64_t v10 = 0xE100000000000000;
  int v11 = a4;
  if (!a4) {
    goto LABEL_12;
  }
LABEL_6:
  if (v11 == 1) {
    uint64_t v12 = 63;
  }
  else {
    uint64_t v12 = 43;
  }
  unint64_t v13 = 0xE100000000000000;
  if (a1 != v12)
  {
LABEL_15:
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
    return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
  }
LABEL_13:
  if (v10 != v13) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease_n();
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

BOOL static Source.Located<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v4 = *(int *)(type metadata accessor for Source.Located() + 28);
    uint64_t v5 = a1 + v4;
    unint64_t v6 = *(void *)(a1 + v4);
    uint64_t v7 = (void *)(a2 + v4);
    if (!((*v7 ^ v6) >> 14) && (*(void *)(v5 + 8) ^ v7[1]) < 0x4000) {
      return 1;
    }
  }
  return result;
}

Swift::Int AST.Atom.Callout.PCRE.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.PCRE()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.PCRE()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.PCRE()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static Source.Located<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList.args.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList.args.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.args.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.init(_:_:_:)@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = *a1;
  *(void *)(a4 + 16) = a2;
  __n128 result = *a3;
  *(__n128 *)(a4 + 24) = *a3;
  return result;
}

void AST.Atom.Callout.OnigurumaNamed.ArgList.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  specialized Array<A>.hash(into:)(a1, v4);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.ArgList.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1)
{
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  specialized Array<A>.hash(into:)(a1, v4);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  __n128 *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.name.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.tag.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 72);
  *(void *)(a1 + 56) = v3;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.tag.setter(long long *a1)
{
  long long v6 = a1[1];
  long long v7 = *a1;
  __n128 v5 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 48) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 64) = v5;
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.tag.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.args.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 128);
  long long v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.args.setter(long long *a1)
{
  __n128 v4 = (__n128)a1[1];
  long long v5 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  swift_bridgeObjectRelease();
  __n128 result = v4;
  *(_OWORD *)(v1 + 96) = v5;
  *(__n128 *)(v1 + 112) = v4;
  *(void *)(v1 + 128) = v2;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.args.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.init(_:tag:args:)@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v4;
  long long v6 = a2[2];
  long long v7 = a2[3];
  *(_OWORD *)(a4 + 48) = v5;
  *(_OWORD *)(a4 + 64) = v6;
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 80) = v7;
  *(__n128 *)(a4 + 96) = result;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a3 + 32);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v10;
  *(_OWORD *)(a4 + 112) = v9;
  *(void *)(a4 + 128) = v11;
  return result;
}

void AST.Atom.Callout.OnigurumaNamed.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = v2[2];
  unint64_t v5 = v2[3];
  unint64_t v7 = v2[4];
  unint64_t v6 = v2[5];
  uint64_t v8 = v2[7];
  unint64_t v10 = v2[8];
  unint64_t v9 = v2[9];
  unint64_t v12 = v2[10];
  unint64_t v13 = v2[11];
  uint64_t v11 = v2[14];
  unint64_t v14 = v2[12];
  unint64_t v15 = v2[13];
  unint64_t v16 = v2[15];
  unint64_t v17 = v2[16];
  String.hash(into:)();
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (!v8)
  {
    Hasher._combine(_:)(0);
    if (v11) {
      goto LABEL_3;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v10 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_7;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v14 >> 14);
  Hasher._combine(_:)(v15 >> 14);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v11);
  Hasher._combine(_:)(v16 >> 14);
  Hasher._combine(_:)(v17 >> 14);

  swift_bridgeObjectRelease();
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.hashValue.getter()
{
  return AST.Atom.Callout.OnigurumaNamed.hashValue.getter((void (*)(unsigned char *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaNamed(a1, a2, (void (*)(unsigned char *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed(a1, a2, a3, (void (*)(unsigned char *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

__n128 AST.Atom.Callout.OnigurumaOfContents.openBraces.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.openBraces.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.openBraces.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaOfContents.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaOfContents.contents.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.contents.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.closeBraces.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.closeBraces.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.closeBraces.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaOfContents.tag.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 120);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 104);
  *(void *)(a1 + 56) = v3;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaOfContents.tag.setter(long long *a1)
{
  long long v6 = a1[1];
  long long v7 = *a1;
  __n128 v5 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 80) = v6;
  __n128 result = v5;
  *(__n128 *)(v1 + 96) = v5;
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.tag.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 128);
  __n128 result = *(__n128 *)(v1 + 136);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.direction.setter(uint64_t a1)
{
  *(unsigned char *)(v1 + 128) = *(unsigned char *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 136) = result;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.direction.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.init(_:_:_:tag:direction:)@<Q0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, _OWORD *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *a5;
  *(_OWORD *)a6 = *a1;
  *(void *)(a6 + 16) = v6;
  *(void *)(a6 + 24) = v7;
  long long v9 = *a3;
  *(_OWORD *)(a6 + 32) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a6 + 48) = v9;
  long long v10 = a4[1];
  *(_OWORD *)(a6 + 64) = *a4;
  *(_OWORD *)(a6 + 80) = v10;
  long long v11 = a4[3];
  *(_OWORD *)(a6 + 96) = a4[2];
  *(_OWORD *)(a6 + 112) = v11;
  *(unsigned char *)(a6 + 128) = v8;
  __n128 result = *(__n128 *)(a5 + 8);
  *(__n128 *)(a6 + 136) = result;
  return result;
}

BOOL AST.Atom.Callout.OnigurumaOfContents.isDirectionImplicit.getter()
{
  return (*(void *)(v0 + 144) ^ *(void *)(v0 + 136)) < 0x4000uLL;
}

void AST.Atom.Callout.OnigurumaOfContents.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  unint64_t v4 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 88);
  unint64_t v8 = *(void *)(v0 + 72);
  unint64_t v9 = *(void *)(v0 + 96);
  unint64_t v10 = *(void *)(v0 + 104);
  unint64_t v11 = *(void *)(v0 + 112);
  unint64_t v12 = *(void *)(v0 + 120);
  unint64_t v13 = *(void *)(v0 + 136);
  Swift::UInt v14 = *(unsigned __int8 *)(v0 + 128);
  unint64_t v15 = *(void *)(v0 + 144);
  Hasher._combine(_:)(*(void *)v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v8 >> 14);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v9 >> 14);
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v11 >> 14);
    Hasher._combine(_:)(v12 >> 14);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v15 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaOfContents.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaOfContents()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaOfContents()
{
  return Hasher._finalize()();
}

void AST.Atom.Callout.hash(into:)(uint64_t a1)
{
  outlined init with take of AST.Atom.Callout(v1, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v3)
  {
    if (v3 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
}

Swift::Int AST.Atom.Callout.hashValue.getter()
{
  outlined init with take of AST.Atom.Callout(v0, v4);
  Hasher.init(_seed:)();
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout()
{
  outlined init with take of AST.Atom.Callout(v0, v4);
  Hasher.init(_seed:)();
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout(uint64_t a1)
{
  outlined init with take of AST.Atom.Callout(v1, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v3)
  {
    if (v3 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout()
{
  outlined init with take of AST.Atom.Callout(v0, v4);
  Hasher.init(_seed:)();
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.leftBracket.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaTag.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaTag.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.name.modify())()
{
  return AST.root.modify;
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.rightBracket.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaTag.init(_:_:_:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a2->n128_u64[0];
  unint64_t v5 = a2->n128_u64[1];
  *(_OWORD *)a4 = *a1;
  *(void *)(a4 + 16) = v4;
  *(void *)(a4 + 24) = v5;
  __n128 result = a2[1];
  long long v7 = *a3;
  *(__n128 *)(a4 + 32) = result;
  *(_OWORD *)(a4 + 48) = v7;
  return result;
}

void AST.Atom.Callout.OnigurumaTag.hash(into:)()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  unint64_t v4 = v0[6];
  unint64_t v5 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaTag.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  unint64_t v6 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[4];
  unint64_t v3 = v0[5];
  unint64_t v4 = v0[6];
  unint64_t v5 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  unint64_t v6 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Atom.BacktrackingDirective.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(unsigned char *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Atom.BacktrackingDirective.kind.setter(uint64_t a1)
{
  *(unsigned char *)uint64_t v1 = *(unsigned char *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.Atom.BacktrackingDirective.kind.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.BacktrackingDirective.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.BacktrackingDirective.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *(__n128 *)(v1 + 24) = v5;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  return result;
}

uint64_t (*AST.Atom.BacktrackingDirective.name.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.BacktrackingDirective.init(_:name:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *(unsigned char *)a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 40) = v4;
  return result;
}

BOOL AST.Atom.BacktrackingDirective.isQuantifiable.getter()
{
  return *v0 == 0;
}

void AST.Atom.BacktrackingDirective.hash(into:)()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  unint64_t v4 = v0[6];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v4 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int AST.Atom.BacktrackingDirective.hashValue.getter()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = v0[4];
  unint64_t v6 = v0[5];
  unint64_t v5 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v5 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.BacktrackingDirective()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  unint64_t v4 = v0[6];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v4 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.BacktrackingDirective()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = v0[4];
  unint64_t v6 = v0[5];
  unint64_t v5 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v5 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

unint64_t AST.Atom.EscapedBuiltin.scalarValue.getter()
{
  uint64_t v1 = 7;
  unsigned __int8 v2 = 0;
  switch(*v0)
  {
    case 1:
      unsigned __int8 v2 = 0;
      uint64_t v1 = 27;
      break;
    case 2:
      unsigned __int8 v2 = 0;
      uint64_t v1 = 12;
      break;
    case 3:
      unsigned __int8 v2 = 0;
      uint64_t v1 = 10;
      break;
    case 4:
      unsigned __int8 v2 = 0;
      uint64_t v1 = 13;
      break;
    case 5:
      unsigned __int8 v2 = 0;
      uint64_t v1 = 9;
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
      uint64_t v1 = 0;
      unsigned __int8 v2 = 1;
      break;
    case 0x13:
      unsigned __int8 v2 = 0;
      uint64_t v1 = 8;
      break;
    default:
      return v1 | ((unint64_t)v2 << 32);
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t AST.Atom.EscapedBuiltin.isQuantifiable.getter()
{
  return (*v0 < 0x1DuLL) & (0x101FFFFFu >> *v0);
}

uint64_t AST.Atom.literalCharacterValue.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = (unsigned int *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      unsigned int v7 = *v4;
      if (*v4 > 0x7F)
      {
        int v10 = (*v4 & 0x3F) << 8;
        if (v7 >= 0x800)
        {
          unsigned int v11 = v7 >> 12;
          int v12 = (v10 | (v7 >> 6) & 0x3F) << 8;
          unsigned int v13 = HIWORD(v7);
          unsigned int v8 = (((v12 | (v7 >> 12) & 0x3F) << 8) | (v7 >> 18)) - 2122219023;
          int v14 = (v12 | v11) + 8487393;
          if (!v13) {
            unsigned int v8 = v14;
          }
        }
        else
        {
          unsigned int v8 = (v10 | (v7 >> 6)) + 33217;
        }
      }
      else
      {
        unsigned int v8 = v7 + 1;
      }
      uint64_t v16 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v8) >> 3))));
      uint64_t result = MEMORY[0x210561750](&v16);
      break;
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      uint64_t result = 0;
      break;
    case 4:
      uint64_t v9 = 8;
      uint64_t result = 0;
      switch(*(unsigned char *)v4)
      {
        case 1:
          uint64_t v9 = 27;
          goto LABEL_15;
        case 2:
          uint64_t v9 = 12;
          goto LABEL_15;
        case 3:
          uint64_t v9 = 10;
          goto LABEL_15;
        case 4:
          uint64_t v9 = 13;
          goto LABEL_15;
        case 5:
          uint64_t v9 = 9;
          goto LABEL_15;
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
          return result;
        case 0x13:
          goto LABEL_15;
        default:
          uint64_t v9 = 7;
LABEL_15:
          uint64_t v16 = v9;
          uint64_t result = MEMORY[0x210561750](&v16, 1);
          break;
      }
      break;
    case 14:
    case 15:
    case 16:
    case 17:
      return result;
    default:
      uint64_t result = *(void *)v4;
      break;
  }
  return result;
}

uint64_t AST.Atom.isValidCharacterClassRangeBound.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = AST.Atom.literalCharacterValue.getter();
  if (!v6)
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((EnumCaseMultiPayload - 5) < 4 || EnumCaseMultiPayload == 2)
    {
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      return 1;
    }
    outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    return 0;
  }
  unint64_t v7 = v5;
  unint64_t v8 = v6;
  if (!Character.hasExactlyOneScalar.getter(v5, v6))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((Character.asciiValue.getter() & 0x100) != 0)
  {
    uint64_t v11 = String._nfcCodeUnits.getter();
    char v12 = specialized Sequence<>.elementsEqual<A>(_:)(v7, v8, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 1;
  }
}

BOOL Character.hasExactlyOneScalar.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v10 = String.UnicodeScalarView._foreignIndex(after:)();
  }
  else
  {
    unint64_t v5 = v4 >> 16;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      int v7 = *((unsigned __int8 *)v13 + v5);
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v6 = _StringObject.sharedUTF8.getter();
      }
      int v7 = *(unsigned __int8 *)(v6 + v5);
    }
    int v8 = (char)v7;
    unsigned int v9 = __clz(v7 ^ 0xFF) - 24;
    if (v8 >= 0) {
      LOBYTE(v9) = 1;
    }
    unint64_t v10 = ((v5 + v9) << 16) | 5;
  }
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  return v10 >> 14 == 4 * v11;
}

uint64_t AST.Atom.literalStringValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v2, v3);
  unint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v1, (uint64_t)v5, type metadata accessor for AST.Atom.Kind);
  uint64_t v6 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v7 = *(_DWORD *)v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20D9D7460;
      *(_DWORD *)(inited + 32) = v7;
      uint64_t v6 = scalarLiteral #1 (_:) in AST.Atom.literalStringValue.getter(inited);
      swift_setDeallocating();
      return v6;
    case 2u:
      unint64_t v9 = *((void *)v5 + 1);
      uint64_t v15 = *(void *)v5;
      unint64_t v16 = v9;
      uint64_t v10 = AST.Atom.ScalarSequence.scalarValues.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = scalarLiteral #1 (_:) in AST.Atom.literalStringValue.getter(v10);
      swift_bridgeObjectRelease();
      return v6;
    case 3u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
      outlined destroy of AST.Atom((uint64_t)v5, type metadata accessor for AST.Atom.Kind);
      return 0;
    case 4u:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      return v6;
    case 5u:
      uint64_t v15 = 0;
      unint64_t v16 = 0xE000000000000000;
      uint64_t v11 = 2966364;
      goto LABEL_9;
    case 6u:
      uint64_t v15 = 0;
      unint64_t v16 = 0xE000000000000000;
      uint64_t v11 = 2968924;
LABEL_9:
      unint64_t v12 = 0xE300000000000000;
      goto LABEL_10;
    case 7u:
      uint64_t v15 = 0;
      unint64_t v16 = 0xE000000000000000;
      uint64_t v11 = 0x2D435C2D4D5CLL;
      unint64_t v12 = 0xE600000000000000;
LABEL_10:
      String.append(_:)(*(Swift::String *)&v11);
      Character.write<A>(to:)();
      swift_bridgeObjectRelease();
      uint64_t v6 = v15;
      break;
    default:
      uint64_t v6 = *(void *)v5;
      break;
  }
  return v6;
}

uint64_t scalarLiteral #1 (_:) in AST.Atom.literalStringValue.getter(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = a1 + 32;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    do
    {
      v3 += 4;
      uint64_t v4 = String.init<A>(_:radix:uppercase:)();
      uint64_t v6 = v5;
      unint64_t v8 = *(void *)(v16 + 16);
      unint64_t v7 = *(void *)(v16 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v16 + 16) = v8 + 1;
      uint64_t v9 = v16 + 16 * v8;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 125;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 8090972;
}

uint64_t AST.Node.literalStringValue.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v1 - 8, v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = 0;
  if (*v0 >> 60 == 8)
  {
    uint64_t v6 = swift_projectBox();
    outlined init with copy of AST.Atom(v6, (uint64_t)v4, type metadata accessor for AST.Atom);
    uint64_t v5 = AST.Atom.literalStringValue.getter();
    outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom);
  }
  return v5;
}

__n128 AST.Conditional.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Conditional.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*AST.Conditional.location.modify())()
{
  return AST.root.modify;
}

void *AST.Conditional.condition.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[6];
  long long v3 = v1[8];
  long long v19 = v1[7];
  long long v20 = v3;
  long long v4 = v1[8];
  long long v21 = v1[9];
  long long v5 = v1[2];
  long long v6 = v1[4];
  long long v15 = v1[3];
  long long v7 = v15;
  long long v16 = v6;
  long long v8 = v1[4];
  long long v9 = v1[6];
  long long v17 = v1[5];
  long long v10 = v17;
  long long v18 = v9;
  long long v11 = v1[2];
  v14[0] = v1[1];
  long long v12 = v14[0];
  v14[1] = v11;
  a1[6] = v19;
  a1[7] = v4;
  a1[8] = v1[9];
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v2;
  *a1 = v12;
  a1[1] = v5;
  return outlined retain of AST.Conditional.Condition(v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
}

__n128 AST.Conditional.condition.setter(uint64_t a1)
{
  long long v3 = v1[8];
  v11[6] = v1[7];
  v11[7] = v3;
  v11[8] = v1[9];
  long long v4 = v1[4];
  v11[2] = v1[3];
  v11[3] = v4;
  long long v5 = v1[6];
  v11[4] = v1[5];
  v11[5] = v5;
  long long v6 = v1[2];
  v11[0] = v1[1];
  v11[1] = v6;
  outlined retain of AST.Conditional.Condition(v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AST.Conditional.Condition.Kind);
  long long v7 = *(_OWORD *)(a1 + 112);
  v1[7] = *(_OWORD *)(a1 + 96);
  v1[8] = v7;
  v1[9] = *(_OWORD *)(a1 + 128);
  long long v8 = *(_OWORD *)(a1 + 48);
  v1[3] = *(_OWORD *)(a1 + 32);
  v1[4] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  v1[5] = *(_OWORD *)(a1 + 64);
  v1[6] = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  v1[1] = *(_OWORD *)a1;
  v1[2] = result;
  return result;
}

uint64_t (*AST.Conditional.condition.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Conditional.trueBranch.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 160);
  return swift_retain();
}

uint64_t AST.Conditional.trueBranch.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 160) = v2;
  return result;
}

uint64_t (*AST.Conditional.trueBranch.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.pipe.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 184);
  __n128 result = *(__n128 *)(v1 + 168);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.Conditional.pipe.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 168) = *a1;
  *(unsigned char *)(v1 + 184) = v2;
  return result;
}

uint64_t (*AST.Conditional.pipe.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Conditional.falseBranch.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 192);
  return swift_retain();
}

uint64_t AST.Conditional.falseBranch.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 192) = v2;
  return result;
}

uint64_t (*AST.Conditional.falseBranch.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.init(_:trueBranch:pipe:falseBranch:_:)@<Q0>(long long *a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  long long v6 = a1[6];
  long long v7 = a1[7];
  long long v8 = a1[4];
  *(_OWORD *)(a6 + 96) = a1[5];
  *(_OWORD *)(a6 + 112) = v6;
  long long v9 = a1[8];
  *(_OWORD *)(a6 + 128) = v7;
  *(_OWORD *)(a6 + 144) = v9;
  long long v10 = a1[2];
  long long v11 = a1[3];
  long long v12 = *a1;
  *(_OWORD *)(a6 + 32) = a1[1];
  *(_OWORD *)(a6 + 48) = v10;
  *(_OWORD *)(a6 + 64) = v11;
  *(_OWORD *)(a6 + 80) = v8;
  uint64_t v13 = *a2;
  uint64_t v15 = *a4;
  unsigned __int8 v14 = a3[1].n128_u8[0];
  *(_OWORD *)a6 = *a5;
  *(_OWORD *)(a6 + 16) = v12;
  *(void *)(a6 + 160) = v13;
  __n128 result = *a3;
  *(__n128 *)(a6 + 168) = *a3;
  *(unsigned char *)(a6 + 184) = v14;
  *(void *)(a6 + 192) = v15;
  return result;
}

uint64_t AST.Conditional.hash(into:)(uint64_t a1)
{
  unint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  outlined init with take of AST.Conditional.Condition.Kind((long long *)v1 + 1, v15);
  unint64_t v5 = v1[18];
  unint64_t v6 = v1[19];
  uint64_t v8 = v1[20];
  unint64_t v7 = v1[21];
  unint64_t v9 = v1[22];
  int v10 = *((unsigned __int8 *)v1 + 184);
  Swift::UInt64 v11 = v3 >> 14;
  uint64_t v12 = v1[24];
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v4 >> 14);
  outlined init with take of AST.Conditional.Condition.Kind(v15, v14);
  AST.Conditional.Condition.Kind.hash(into:)(a1);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  *(void *)&v14[0] = v8;
  AST.Node.hash(into:)(a1);
  if (v10 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 >> 14);
    Hasher._combine(_:)(v9 >> 14);
  }
  *(void *)&v14[0] = v12;
  return AST.Node.hash(into:)(a1);
}

Swift::Int AST.Conditional.hashValue.getter()
{
  long long v1 = v0[11];
  long long v19 = v0[10];
  long long v20 = v1;
  uint64_t v21 = *((void *)v0 + 24);
  long long v2 = v0[7];
  long long v15 = v0[6];
  long long v16 = v2;
  long long v3 = v0[9];
  long long v17 = v0[8];
  long long v18 = v3;
  long long v4 = v0[3];
  long long v11 = v0[2];
  long long v12 = v4;
  long long v5 = v0[5];
  long long v13 = v0[4];
  long long v14 = v5;
  long long v6 = v0[1];
  long long v9 = *v0;
  long long v10 = v6;
  Hasher.init(_seed:)();
  AST.Conditional.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional()
{
  long long v1 = v0[11];
  long long v19 = v0[10];
  long long v20 = v1;
  uint64_t v21 = *((void *)v0 + 24);
  long long v2 = v0[7];
  long long v15 = v0[6];
  long long v16 = v2;
  long long v3 = v0[9];
  long long v17 = v0[8];
  long long v18 = v3;
  long long v4 = v0[3];
  long long v11 = v0[2];
  long long v12 = v4;
  long long v5 = v0[5];
  long long v13 = v0[4];
  long long v14 = v5;
  long long v6 = v0[1];
  long long v9 = *v0;
  long long v10 = v6;
  Hasher.init(_seed:)();
  AST.Conditional.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional()
{
  long long v1 = v0[11];
  long long v19 = v0[10];
  long long v20 = v1;
  uint64_t v21 = *((void *)v0 + 24);
  long long v2 = v0[7];
  long long v15 = v0[6];
  long long v16 = v2;
  long long v3 = v0[9];
  long long v17 = v0[8];
  long long v18 = v3;
  long long v4 = v0[3];
  long long v11 = v0[2];
  long long v12 = v4;
  long long v5 = v0[5];
  long long v13 = v0[4];
  long long v14 = v5;
  long long v6 = v0[1];
  long long v9 = *v0;
  long long v10 = v6;
  Hasher.init(_seed:)();
  AST.Conditional.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

uint64_t AST.Conditional._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 192);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  unint64_t v3 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
  v4._countAndFlagsBits = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))(&type metadata for AST.Conditional.Condition, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x206E65687420;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = specialized _ASTPrintable._dump()(v1);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x2065736C6520;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = specialized _ASTPrintable._dump()(v2);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 2123369;
}

void AST.Conditional.Condition.Kind.hash(into:)(uint64_t a1)
{
  outlined init with take of AST.Conditional.Condition.Kind(v1, v25);
  outlined init with take of AST.Conditional.Condition.Kind(v25, v26);
  switch(_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v26))
  {
    case 1u:
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v26);
      Swift::UInt v3 = 2;
      goto LABEL_5;
    case 2u:
      Swift::String v5 = (unsigned __int8 *)_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v26);
      Swift::UInt v6 = *v5;
      unint64_t v7 = *((void *)v5 + 1);
      unint64_t v8 = *((void *)v5 + 2);
      Swift::UInt v9 = *((void *)v5 + 3);
      int v10 = v5[32];
      unint64_t v12 = *((void *)v5 + 5);
      unint64_t v11 = *((void *)v5 + 6);
      int v13 = v5[64];
      Swift::UInt v20 = *((void *)v5 + 7);
      unint64_t v21 = *((void *)v5 + 9);
      unint64_t v22 = *((void *)v5 + 10);
      unint64_t v23 = *((void *)v5 + 11);
      unint64_t v24 = *((void *)v5 + 12);
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7 >> 14);
      Hasher._combine(_:)(v8 >> 14);
      if (v10 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v9);
      }
      Hasher._combine(_:)(v12 >> 14);
      Hasher._combine(_:)(v11 >> 14);
      if (v13)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v20);
      }
      Hasher._combine(_:)(v21 >> 14);
      Hasher._combine(_:)(v22 >> 14);
      Hasher._combine(_:)(v23 >> 14);
      Swift::UInt64 v19 = v24 >> 14;
      goto LABEL_16;
    case 3u:
      long long v14 = (void *)_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v26);
      Hasher._combine(_:)(5uLL);
      unint64_t v15 = v14[11];
      unint64_t v16 = v14[12];
      unint64_t v17 = v14[14];
      unint64_t v18 = v14[15];
      AST.Group.Kind.hash(into:)(a1);
      Hasher._combine(_:)(v15 >> 14);
      Hasher._combine(_:)(v16 >> 14);
      AST.Node.hash(into:)(a1);
      Hasher._combine(_:)(v17 >> 14);
      Swift::UInt64 v19 = v18 >> 14;
LABEL_16:
      Hasher._combine(_:)(v19);
      return;
    case 4u:
      Swift::UInt v4 = 1;
      goto LABEL_10;
    case 5u:
      Swift::UInt v4 = 3;
LABEL_10:
      Hasher._combine(_:)(v4);
      break;
    default:
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v26);
      Swift::UInt v3 = 0;
LABEL_5:
      Hasher._combine(_:)(v3);
      AST.Reference.hash(into:)();
      break;
  }
}

Swift::Int AST.Conditional.Condition.Kind.hashValue.getter()
{
  outlined init with take of AST.Conditional.Condition.Kind(v0, v4);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  Hasher.init(_seed:)();
  AST.Conditional.Condition.Kind.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional.Condition.Kind()
{
  outlined init with take of AST.Conditional.Condition.Kind(v0, v4);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  Hasher.init(_seed:)();
  AST.Conditional.Condition.Kind.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.Kind()
{
  outlined init with take of AST.Conditional.Condition.Kind(v0, v4);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  Hasher.init(_seed:)();
  AST.Conditional.Condition.Kind.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

void *AST.Conditional.Condition.kind.getter@<X0>(_OWORD *a1@<X8>)
{
  outlined init with take of AST.Conditional.Condition.Kind(v1, v4);
  outlined init with take of AST.Conditional.Condition.Kind(v4, a1);
  return outlined retain of AST.Conditional.Condition(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
}

_OWORD *AST.Conditional.Condition.kind.setter(long long *a1)
{
  outlined init with take of AST.Conditional.Condition.Kind(a1, v3);
  outlined init with take of AST.Conditional.Condition.Kind(v1, v4);
  outlined retain of AST.Conditional.Condition(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AST.Conditional.Condition.Kind);
  return outlined init with take of AST.Conditional.Condition.Kind(v3, v1);
}

uint64_t (*AST.Conditional.Condition.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[8];
  *a1 = result;
  return result;
}

__n128 AST.Conditional.Condition.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[8] = *a1;
  return result;
}

uint64_t (*AST.Conditional.Condition.location.modify())()
{
  return AST.root.modify;
}

double AST.Conditional.Condition.init(_:_:)@<D0>(long long *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  outlined init with take of AST.Conditional.Condition.Kind(a1, v12);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  outlined init with take of AST.Conditional.Condition.Kind(v12, v13);
  *(void *)&long long v14 = v6;
  *((void *)&v14 + 1) = v5;
  long long v7 = v13[7];
  a3[6] = v13[6];
  a3[7] = v7;
  long long v8 = v13[3];
  a3[2] = v13[2];
  a3[3] = v8;
  long long v9 = v13[5];
  a3[4] = v13[4];
  a3[5] = v9;
  long long v10 = v13[1];
  *a3 = v13[0];
  a3[1] = v10;
  double result = *(double *)&v14;
  a3[8] = v14;
  return result;
}

void AST.Conditional.Condition.hash(into:)(uint64_t a1)
{
  outlined init with take of AST.Conditional.Condition.Kind((long long *)v1, v6);
  unint64_t v3 = *(void *)(v1 + 128);
  unint64_t v4 = *(void *)(v1 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v6, v5);
  AST.Conditional.Condition.Kind.hash(into:)(a1);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int AST.Conditional.Condition.hashValue.getter()
{
  outlined init with take of AST.Conditional.Condition.Kind((long long *)v0, v6);
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v6, v4);
  AST.Conditional.Condition.Kind.hash(into:)((uint64_t)v5);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional.Condition()
{
  outlined init with take of AST.Conditional.Condition.Kind((long long *)v0, v6);
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v6, v4);
  AST.Conditional.Condition.Kind.hash(into:)((uint64_t)v5);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition(uint64_t a1)
{
  outlined init with take of AST.Conditional.Condition.Kind((long long *)v1, v6);
  unint64_t v3 = *(void *)(v1 + 128);
  unint64_t v4 = *(void *)(v1 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v6, v5);
  AST.Conditional.Condition.Kind.hash(into:)(a1);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition()
{
  outlined init with take of AST.Conditional.Condition.Kind((long long *)v0, v6);
  unint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v6, v4);
  AST.Conditional.Condition.Kind.hash(into:)((uint64_t)v5);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Conditional.Condition.PCREVersionNumber.major.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1->n128_u8[8];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u8[8] = v2;
  __n128 result = v1[1];
  a1[1] = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.major.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1->n128_u8[8];
  v1->n128_u64[0] = a1->n128_u64[0];
  v1->n128_u8[8] = v2;
  __n128 result = a1[1];
  v1[1] = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.major.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.minor.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[2].n128_u8[8];
  a1->n128_u64[0] = v1[2].n128_u64[0];
  a1->n128_u8[8] = v2;
  __n128 result = v1[3];
  a1[1] = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.minor.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1->n128_u8[8];
  v1[2].n128_u64[0] = a1->n128_u64[0];
  v1[2].n128_u8[8] = v2;
  __n128 result = a1[1];
  v1[3] = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.minor.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[4];
  *a1 = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[4] = *a1;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.init(major:minor:_:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 8);
  unint64_t v5 = a2->n128_u64[0];
  unsigned __int8 v6 = a2->n128_u8[8];
  *(void *)a4 = *(void *)a1;
  *(unsigned char *)(a4 + 8) = v4;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a4 + 32) = v5;
  *(unsigned char *)(a4 + 40) = v6;
  __n128 result = a2[1];
  long long v8 = *a3;
  *(__n128 *)(a4 + 48) = result;
  *(_OWORD *)(a4 + 64) = v8;
  return result;
}

void AST.Conditional.Condition.PCREVersionNumber.hash(into:)()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v6 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v8 = *(void *)(v0 + 64);
  unint64_t v7 = *(void *)(v0 + 72);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v9 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int AST.Conditional.Condition.PCREVersionNumber.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt v11 = *(void *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v7 = *(void *)(v0 + 48);
  unint64_t v6 = *(void *)(v0 + 56);
  unint64_t v9 = *(void *)(v0 + 64);
  unint64_t v8 = *(void *)(v0 + 72);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v6 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 56);
  unint64_t v8 = *(void *)(v0 + 64);
  unint64_t v7 = *(void *)(v0 + 72);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v9 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt v11 = *(void *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v7 = *(void *)(v0 + 48);
  unint64_t v6 = *(void *)(v0 + 56);
  unint64_t v9 = *(void *)(v0 + 64);
  unint64_t v8 = *(void *)(v0 + 72);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  return Hasher._finalize()();
}

BOOL static AST.Conditional.Condition.PCREVersionCheck.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AST.Conditional.Condition.PCREVersionCheck.Kind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Conditional.Condition.PCREVersionCheck.Kind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  Hasher._combine(_:)(*v0);
}

__n128 AST.Conditional.Condition.PCREVersionCheck.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(unsigned char *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.kind.setter(uint64_t a1)
{
  *(unsigned char *)uint64_t v1 = *(unsigned char *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionCheck.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.num.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 56);
  char v4 = *(unsigned char *)(v1 + 64);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 40);
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  __n128 result = *(__n128 *)(v1 + 72);
  long long v6 = *(_OWORD *)(v1 + 88);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v6;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.num.setter(uint64_t a1)
{
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 16);
  __n128 result = *(__n128 *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v1 + 72) = result;
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  *(void *)(v1 + 24) = *(void *)a1;
  *(unsigned char *)(v1 + 32) = v4;
  *(void *)(v1 + 56) = v5;
  *(unsigned char *)(v1 + 64) = v6;
  *(_OWORD *)(v1 + 88) = v3;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionCheck.num.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.init(_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 40) = *((_OWORD *)a2 + 1);
  __n128 result = *((__n128 *)a2 + 3);
  long long v4 = *((_OWORD *)a2 + 4);
  *(__n128 *)(a3 + 72) = result;
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[4];
  char v8 = *((unsigned char *)a2 + 40);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  *(void *)(a3 + 24) = v5;
  *(unsigned char *)(a3 + 32) = v6;
  *(void *)(a3 + 56) = v7;
  *(unsigned char *)(a3 + 64) = v8;
  *(_OWORD *)(a3 + 88) = v4;
  return result;
}

void AST.Conditional.Condition.PCREVersionCheck.hash(into:)()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 3);
  int v4 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v5 = *((void *)v0 + 6);
  int v7 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  unint64_t v8 = *((void *)v0 + 10);
  Swift::UInt v10 = *((void *)v0 + 7);
  unint64_t v11 = *((void *)v0 + 11);
  unint64_t v12 = *((void *)v0 + 12);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
}

Swift::Int AST.Conditional.Condition.PCREVersionCheck.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Swift::UInt v4 = *((void *)v0 + 3);
  int v5 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v7 = *((void *)v0 + 6);
  int v8 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  Swift::UInt v11 = *((void *)v0 + 7);
  unint64_t v12 = *((void *)v0 + 10);
  unint64_t v13 = *((void *)v0 + 11);
  unint64_t v14 = *((void *)v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v14 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 3);
  int v4 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v5 = *((void *)v0 + 6);
  int v7 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  unint64_t v8 = *((void *)v0 + 10);
  Swift::UInt v10 = *((void *)v0 + 7);
  unint64_t v11 = *((void *)v0 + 11);
  unint64_t v12 = *((void *)v0 + 12);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Swift::UInt v4 = *((void *)v0 + 3);
  int v5 = v0[32];
  unint64_t v6 = *((void *)v0 + 5);
  unint64_t v7 = *((void *)v0 + 6);
  int v8 = v0[64];
  unint64_t v9 = *((void *)v0 + 9);
  Swift::UInt v11 = *((void *)v0 + 7);
  unint64_t v12 = *((void *)v0 + 10);
  unint64_t v13 = *((void *)v0 + 11);
  unint64_t v14 = *((void *)v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v14 >> 14);
  return Hasher._finalize()();
}

__n128 AST.CustomCharacterClass.start.getter@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(unsigned char *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.CustomCharacterClass.start.setter(uint64_t a1)
{
  *(unsigned char *)uint64_t v1 = *(unsigned char *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.CustomCharacterClass.start.modify())()
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.CustomCharacterClass.members.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AST.CustomCharacterClass.members.modify())()
{
  return AST.root.modify;
}

__n128 AST.CustomCharacterClass.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 AST.CustomCharacterClass.init(_:_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *(unsigned char *)a1;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a4 + 24) = a2;
  __n128 result = *a3;
  *(__n128 *)(a4 + 32) = *a3;
  return result;
}

void AST.CustomCharacterClass.Member.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v3, v4);
  unint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x270FA5388](v7, v8);
  Swift::UInt v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v13);
  unint64_t v15 = (uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AST.Atom(v1, (uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of AST.Atom.Kind((uint64_t)v15, (uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Range);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Kind.hash(into:)(a1);
      Swift::UInt v25 = &v10[*(int *)(v3 + 20)];
      unint64_t v26 = *((void *)v25 + 1);
      Hasher._combine(_:)(*(void *)v25 >> 14);
      Hasher._combine(_:)(v26 >> 14);
      unsigned __int8 v27 = &v10[v7[5]];
      unint64_t v28 = *((void *)v27 + 1);
      Hasher._combine(_:)(*(void *)v27 >> 14);
      Hasher._combine(_:)(v28 >> 14);
      int64_t v29 = &v10[v7[6]];
      AST.Atom.Kind.hash(into:)(a1);
      __int16 v30 = &v29[*(int *)(v3 + 20)];
      unint64_t v31 = *((void *)v30 + 1);
      Hasher._combine(_:)(*(void *)v30 >> 14);
      Hasher._combine(_:)(v31 >> 14);
      specialized Array<A>.hash(into:)(a1, *(void *)&v10[v7[7]]);
      outlined destroy of AST.Atom((uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Range);
      return;
    case 2u:
      outlined init with take of AST.Atom.Kind((uint64_t)v15, (uint64_t)v6, type metadata accessor for AST.Atom);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Kind.hash(into:)(a1);
      Swift::String v32 = &v6[*(int *)(v3 + 20)];
      unint64_t v33 = *(void *)v32;
      unint64_t v34 = *((void *)v32 + 1);
      outlined destroy of AST.Atom((uint64_t)v6, type metadata accessor for AST.Atom);
      Hasher._combine(_:)(v33 >> 14);
      Hasher._combine(_:)(v34 >> 14);
      return;
    case 3u:
      unint64_t v35 = v15[2];
      unint64_t v20 = v15[3];
      Swift::UInt v36 = 3;
      goto LABEL_10;
    case 4u:
      unint64_t v35 = v15[2];
      unint64_t v20 = v15[3];
      Swift::UInt v36 = 4;
LABEL_10:
      Hasher._combine(_:)(v36);
      String.hash(into:)();
      Swift::UInt64 v24 = v35 >> 14;
      goto LABEL_11;
    case 5u:
      uint64_t v37 = *v15;
      unint64_t v39 = v15[2];
      unint64_t v38 = v15[3];
      uint64_t v40 = v15[4];
      Hasher._combine(_:)(5uLL);
      Swift::UInt v41 = *(void *)(v37 + 16);
      Hasher._combine(_:)(v41);
      if (v41)
      {
        uint64_t v42 = v37 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        uint64_t v43 = *(void *)(v12 + 72);
        do
        {
          AST.CustomCharacterClass.Member.hash(into:)(a1);
          v42 += v43;
          --v41;
        }
        while (v41);
      }
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v39 >> 14);
      Hasher._combine(_:)(v38 >> 14);
      Swift::UInt v44 = *(void *)(v40 + 16);
      Hasher._combine(_:)(v44);
      if (v44)
      {
        uint64_t v45 = v40 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        uint64_t v46 = *(void *)(v12 + 72);
        do
        {
          AST.CustomCharacterClass.Member.hash(into:)(a1);
          v45 += v46;
          --v44;
        }
        while (v44);
      }
      goto LABEL_12;
    default:
      unint64_t v16 = v15[1];
      unint64_t v17 = v15[2];
      uint64_t v18 = v15[3];
      unint64_t v19 = v15[4];
      unint64_t v20 = v15[5];
      Hasher._combine(_:)(0);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v16 >> 14);
      Hasher._combine(_:)(v17 >> 14);
      Swift::UInt v21 = *(void *)(v18 + 16);
      Hasher._combine(_:)(v21);
      if (v21)
      {
        uint64_t v22 = v18 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        uint64_t v23 = *(void *)(v12 + 72);
        do
        {
          AST.CustomCharacterClass.Member.hash(into:)(a1);
          v22 += v23;
          --v21;
        }
        while (v21);
      }
      Swift::UInt64 v24 = v19 >> 14;
LABEL_11:
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v20 >> 14);
LABEL_12:
      swift_bridgeObjectRelease();
      return;
  }
}

Swift::Int AST.CustomCharacterClass.Member.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(unsigned char *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int AST.Atom.Kind.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.Member(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(unsigned char *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Member(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(unsigned char *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t AST.CustomCharacterClass.Range.lhs.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom);
}

uint64_t AST.CustomCharacterClass.Range.lhs.setter(uint64_t a1)
{
  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1, type metadata accessor for AST.Atom);
}

uint64_t (*AST.CustomCharacterClass.Range.lhs.modify())()
{
  return AST.root.modify;
}

__n128 AST.CustomCharacterClass.Range.dashLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0) + 20));
  *a1 = result;
  return result;
}

uint64_t AST.CustomCharacterClass.Range.dashLoc.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = type metadata accessor for AST.CustomCharacterClass.Range(0);
  uint64_t v5 = (void *)(v1 + *(int *)(result + 20));
  *uint64_t v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*AST.CustomCharacterClass.Range.dashLoc.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.rhs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  return outlined init with copy of AST.Atom(v1 + *(int *)(v3 + 24), a1, type metadata accessor for AST.Atom);
}

uint64_t AST.CustomCharacterClass.Range.rhs.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1 + *(int *)(v3 + 24), type metadata accessor for AST.Atom);
}

uint64_t (*AST.CustomCharacterClass.Range.rhs.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.trivia.getter()
{
  type metadata accessor for AST.CustomCharacterClass.Range(0);

  return swift_bridgeObjectRetain();
}

uint64_t AST.CustomCharacterClass.Range.trivia.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AST.CustomCharacterClass.Range.trivia.modify())(void)
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.init(_:_:_:trivia:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  outlined init with take of AST.Atom.Kind(a1, a5, type metadata accessor for AST.Atom);
  Swift::UInt v10 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  uint64_t v11 = (void *)(a5 + v10[5]);
  *uint64_t v11 = v8;
  v11[1] = v9;
  uint64_t result = outlined init with take of AST.Atom.Kind(a3, a5 + v10[6], type metadata accessor for AST.Atom);
  *(void *)(a5 + v10[7]) = a4;
  return result;
}

uint64_t AST.CustomCharacterClass.Range.location.getter@<X0>(uint64x2_t *a1@<X8>)
{
  uint64_t v3 = (uint64x2_t *)(v1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  uint64_t result = type metadata accessor for AST.CustomCharacterClass.Range(0);
  int8x16_t v5 = *(int8x16_t *)v3;
  v6.i64[0] = *(uint64_t *)((char *)v3->i64 + *(int *)(result + 24));
  v6.i64[1] = v3->i64[1];
  v5.i64[1] = *(uint64_t *)((char *)&v3->i64[1] + *(int *)(result + 24));
  uint64x2_t v7 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(vshrq_n_u64(*v3, 0xEuLL), vshrq_n_u64(*(uint64x2_t *)((char *)v3 + *(int *)(result + 24)), 0xEuLL)), v6, v5);
  int64x2_t v8 = (int64x2_t)vshrq_n_u64(v7, 0xEuLL);
  if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v8, (uint64x2_t)vdupq_laneq_s64(v8, 1))).u8[0]) {
    __break(1u);
  }
  else {
    *a1 = v7;
  }
  return result;
}

void AST.CustomCharacterClass.Range.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  AST.Atom.Kind.hash(into:)(a1);
  uint64_t v4 = type metadata accessor for AST.Atom(0);
  int8x16_t v5 = (void *)(v1 + *(int *)(v4 + 20));
  unint64_t v6 = v5[1];
  Hasher._combine(_:)(*v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  uint64x2_t v7 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  int64x2_t v8 = (void *)(v1 + v7[5]);
  unint64_t v9 = v8[1];
  Hasher._combine(_:)(*v8 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  uint64_t v10 = v1 + v7[6];
  AST.Atom.Kind.hash(into:)(a1);
  uint64_t v11 = (void *)(v10 + *(int *)(v4 + 20));
  unint64_t v12 = v11[1];
  Hasher._combine(_:)(*v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  uint64_t v13 = *(void *)(v2 + v7[7]);

  specialized Array<A>.hash(into:)(a1, v13);
}

Swift::Int AST.CustomCharacterClass.Range.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)((uint64_t)v12);
  uint64_t v2 = type metadata accessor for AST.Atom(0);
  uint64_t v3 = (void *)(v0 + *(int *)(v2 + 20));
  unint64_t v4 = v3[1];
  Hasher._combine(_:)(*v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  int8x16_t v5 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  unint64_t v6 = (void *)(v0 + v5[5]);
  unint64_t v7 = v6[1];
  Hasher._combine(_:)(*v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  uint64_t v8 = v0 + v5[6];
  AST.Atom.Kind.hash(into:)((uint64_t)v12);
  unint64_t v9 = (void *)(v8 + *(int *)(v2 + 20));
  unint64_t v10 = v9[1];
  Hasher._combine(_:)(*v9 >> 14);
  Hasher._combine(_:)(v10 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v12, *(void *)(v1 + v5[7]));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.Range(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  AST.Atom.Kind.hash(into:)(a1);
  uint64_t v6 = type metadata accessor for AST.Atom(0);
  unint64_t v7 = (void *)(v2 + *(int *)(v6 + 20));
  unint64_t v8 = v7[1];
  Hasher._combine(_:)(*v7 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  unint64_t v9 = (void *)(v2 + a2[5]);
  unint64_t v10 = v9[1];
  Hasher._combine(_:)(*v9 >> 14);
  Hasher._combine(_:)(v10 >> 14);
  uint64_t v11 = v2 + a2[6];
  AST.Atom.Kind.hash(into:)(a1);
  unint64_t v12 = (void *)(v11 + *(int *)(v6 + 20));
  unint64_t v13 = v12[1];
  Hasher._combine(_:)(*v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  uint64_t v14 = *(void *)(v4 + a2[7]);

  specialized Array<A>.hash(into:)(a1, v14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Range(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)((uint64_t)v14);
  uint64_t v5 = type metadata accessor for AST.Atom(0);
  uint64_t v6 = (void *)(v2 + *(int *)(v5 + 20));
  unint64_t v7 = v6[1];
  Hasher._combine(_:)(*v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  unint64_t v8 = (void *)(v2 + a2[5]);
  unint64_t v9 = v8[1];
  Hasher._combine(_:)(*v8 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  uint64_t v10 = v2 + a2[6];
  AST.Atom.Kind.hash(into:)((uint64_t)v14);
  uint64_t v11 = (void *)(v10 + *(int *)(v5 + 20));
  unint64_t v12 = v11[1];
  Hasher._combine(_:)(*v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v14, *(void *)(v4 + a2[7]));
  return Hasher._finalize()();
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional __swiftcall AST.CustomCharacterClass.SetOp.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of AST.CustomCharacterClass.SetOp.init(rawValue:);
  return (_RegexParser::AST::CustomCharacterClass::SetOp_optional)AST.CustomCharacterClass.SetOp.init(rawValue:)(rawValue, v2, v1);
}

uint64_t AST.CustomCharacterClass.SetOp.rawValue.getter()
{
  return qword_20D9DCB00[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.CustomCharacterClass.SetOp(char *a1, char *a2)
{
  if (qword_20D9DCB00[*a1] == qword_20D9DCB00[*a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.CustomCharacterClass.SetOp(Swift::String *a1)
{
  return AST.CustomCharacterClass.SetOp.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.CustomCharacterClass.SetOp(void *a1@<X8>)
{
  *a1 = qword_20D9DCB00[*v1];
  a1[1] = 0xE200000000000000;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.SetOp()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.SetOp()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.SetOp()
{
  return Hasher._finalize()();
}

_RegexParser::AST::CustomCharacterClass::Start_optional __swiftcall AST.CustomCharacterClass.Start.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AST.CustomCharacterClass.Start.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t AST.CustomCharacterClass.Start.rawValue.getter()
{
  if (*v0) {
    return 24155;
  }
  else {
    return 91;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.CustomCharacterClass.Start(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 24155;
  }
  else {
    uint64_t v3 = 91;
  }
  if (v2) {
    unint64_t v4 = 0xE100000000000000;
  }
  else {
    unint64_t v4 = 0xE200000000000000;
  }
  if (*a2) {
    uint64_t v5 = 24155;
  }
  else {
    uint64_t v5 = 91;
  }
  if (*a2) {
    unint64_t v6 = 0xE200000000000000;
  }
  else {
    unint64_t v6 = 0xE100000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

_RegexParser::AST::CustomCharacterClass::Start_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.CustomCharacterClass.Start(Swift::String *a1)
{
  return AST.CustomCharacterClass.Start.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.CustomCharacterClass.Start(uint64_t *a1@<X8>)
{
  uint64_t v2 = 91;
  if (*v1) {
    uint64_t v2 = 24155;
  }
  unint64_t v3 = 0xE100000000000000;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.Start()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.Start()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Start()
{
  return Hasher._finalize()();
}

void AST.CustomCharacterClass.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  uint64_t v6 = v1[3];
  unint64_t v5 = v1[4];
  unint64_t v7 = v1[5];
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Swift::UInt v8 = *(void *)(v6 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
    uint64_t v10 = v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)(a1);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int AST.CustomCharacterClass.hashValue.getter()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v4 = v0[3];
  unint64_t v3 = v0[4];
  unint64_t v5 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  Swift::UInt v6 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
    uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)((uint64_t)v11);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass(uint64_t a1)
{
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  unint64_t v7 = v1[5];
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  specialized Array<A>.hash(into:)(a1, v5);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = v0[4];
  unint64_t v5 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.CustomCharacterClass.isInverted.getter()
{
  if (*v0 == 1) {
    char v1 = 1;
  }
  else {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v1 & 1;
}

BOOL AST.CustomCharacterClass.Member.isTrivia.getter()
{
  uint64_t v1 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v1, v2);
  unint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 4;
  outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  return v5;
}

uint64_t AST.CustomCharacterClass.Member.asTrivia.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v2, (uint64_t)v7, type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 4)
  {
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *((void *)v7 + 1);
    long long v11 = *((_OWORD *)v7 + 1);
  }
  else
  {
    uint64_t result = outlined destroy of AST.Atom((uint64_t)v7, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    long long v11 = 0uLL;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 16) = v11;
  return result;
}

BOOL AST.CustomCharacterClass.Member.isSemantic.getter()
{
  uint64_t v1 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  BOOL v5 = swift_getEnumCaseMultiPayload() != 4;
  outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  return v5;
}

uint64_t AST.CustomCharacterClass.Member.location.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  Swift::String v49 = a1;
  unint64_t v3 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v3, v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x270FA5388](v7, v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  uint64_t v47 = (uint64_t)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v20 = MEMORY[0x270FA5388](v16, v19);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v24 = MEMORY[0x270FA5388](v20, v23);
  unint64_t v26 = (char *)&v46 - v25;
  MEMORY[0x270FA5388](v24, v27);
  unint64_t v29 = (unint64_t)&v46 - v28;
  outlined init with copy of AST.Atom(v2, (uint64_t)&v46 - v28, type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of AST.Atom.Kind(v29, (uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Range);
      Swift::String v32 = &v10[*(int *)(v3 + 20)];
      unint64_t v33 = *(void *)v32;
      unint64_t v3 = *((void *)v32 + 1);
      unint64_t v34 = &v32[*(int *)(v7 + 24)];
      unint64_t v35 = *(void *)v34;
      unint64_t v29 = *((void *)v34 + 1);
      uint64_t result = outlined destroy of AST.Atom((uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Range);
      if (v35 >> 14 >= v33 >> 14) {
        unint64_t v30 = v33;
      }
      else {
        unint64_t v30 = v35;
      }
      if (v29 >> 14 >= v3 >> 14) {
        unint64_t v31 = v29;
      }
      else {
        unint64_t v31 = v3;
      }
      if (v31 >> 14 < v30 >> 14)
      {
        __break(1u);
        goto LABEL_12;
      }
      goto LABEL_28;
    case 2u:
LABEL_12:
      outlined init with take of AST.Atom.Kind(v29, (uint64_t)v6, type metadata accessor for AST.Atom);
      uint64_t v37 = &v6[*(int *)(v3 + 20)];
      unint64_t v30 = *(void *)v37;
      unint64_t v31 = *((void *)v37 + 1);
      uint64_t result = outlined destroy of AST.Atom((uint64_t)v6, type metadata accessor for AST.Atom);
      goto LABEL_28;
    case 3u:
    case 4u:
      unint64_t v30 = *(void *)(v29 + 16);
      unint64_t v31 = *(void *)(v29 + 24);
      goto LABEL_27;
    case 5u:
      uint64_t v38 = *(void *)v29;
      unint64_t v30 = *(void *)(v29 + 16);
      unint64_t v31 = *(void *)(v29 + 24);
      uint64_t v39 = *(void *)(v29 + 32);
      if (!*(void *)(*(void *)v29 + 16)) {
        goto LABEL_26;
      }
      uint64_t v40 = v48;
      outlined init with copy of AST.Atom(v38 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80)), (uint64_t)v22, type metadata accessor for AST.CustomCharacterClass.Member);
      swift_bridgeObjectRelease();
      uint64_t v41 = outlined init with take of AST.Atom.Kind((uint64_t)v22, (uint64_t)v26, type metadata accessor for AST.CustomCharacterClass.Member);
      AST.CustomCharacterClass.Member.location.getter(&v50, v41);
      outlined destroy of AST.Atom((uint64_t)v26, type metadata accessor for AST.CustomCharacterClass.Member);
      if (v50 >> 14 < v30 >> 14) {
        unint64_t v30 = v50;
      }
      if (v51 >> 14 >= v31 >> 14) {
        unint64_t v31 = v51;
      }
      if (v31 >> 14 < v30 >> 14)
      {
        __break(1u);
        JUMPOUT(0x20D959AB4);
      }
      uint64_t v42 = *(void *)(v39 + 16);
      if (!v42) {
        goto LABEL_27;
      }
      break;
    default:
      unint64_t v30 = *(void *)(v29 + 32);
      unint64_t v31 = *(void *)(v29 + 40);
      goto LABEL_27;
  }
  while (1)
  {
    uint64_t v43 = v47;
    outlined init with copy of AST.Atom(v39+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * (v42 - 1), v47, type metadata accessor for AST.CustomCharacterClass.Member);
    swift_bridgeObjectRelease();
    uint64_t v44 = outlined init with take of AST.Atom.Kind(v43, (uint64_t)v18, type metadata accessor for AST.CustomCharacterClass.Member);
    AST.CustomCharacterClass.Member.location.getter(&v50, v44);
    uint64_t result = outlined destroy of AST.Atom((uint64_t)v18, type metadata accessor for AST.CustomCharacterClass.Member);
    if (v50 >> 14 < v30 >> 14) {
      unint64_t v30 = v50;
    }
    if (v51 >> 14 >= v31 >> 14) {
      unint64_t v31 = v51;
    }
    if (v31 >> 14 >= v30 >> 14) {
      break;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v40 = v48;
    uint64_t v42 = *(void *)(v39 + 16);
    if (!v42)
    {
LABEL_27:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    }
  }
LABEL_28:
  uint64_t v45 = v49;
  *Swift::String v49 = v30;
  v45[1] = v31;
  return result;
}

uint64_t AST.CustomCharacterClass.strippingTriviaShallow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v2, v4);
  uint64_t v42 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5, v7);
  uint64_t v10 = (char *)&v34 - v9;
  MEMORY[0x270FA5388](v8, v11);
  uint64_t v13 = (char *)&v34 - v12;
  int v37 = *(unsigned __int8 *)v1;
  uint64_t v14 = v1[1];
  uint64_t v15 = v1[3];
  uint64_t v35 = v1[2];
  uint64_t v36 = v14;
  uint64_t v16 = v1[4];
  uint64_t v17 = v1[5];
  uint64_t v34 = v16;
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v43 = MEMORY[0x263F8EE78];
  uint64_t v19 = *(void *)(v15 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v41 = v19;
  uint64_t v39 = v17;
  if (v19)
  {
    unint64_t v21 = 0;
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t v40 = v3;
    while (v21 < *(void *)(v15 + 16))
    {
      unint64_t v23 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v24 = *(void *)(v3 + 72);
      outlined init with copy of AST.Atom(v15 + v23 + v24 * v21, (uint64_t)v13, type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with copy of AST.Atom((uint64_t)v13, (uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      outlined destroy of AST.Atom((uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t result = outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.CustomCharacterClass.Member);
      }
      else
      {
        uint64_t v26 = v2;
        outlined init with take of AST.Atom.Kind((uint64_t)v13, v42, type metadata accessor for AST.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
        }
        uint64_t v22 = v43;
        unint64_t v28 = *(void *)(v43 + 16);
        unint64_t v27 = *(void *)(v43 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v22 = v43;
        }
        *(void *)(v22 + 16) = v28 + 1;
        uint64_t result = outlined init with take of AST.Atom.Kind(v42, v22 + v23 + v28 * v24, type metadata accessor for AST.CustomCharacterClass.Member);
        uint64_t v2 = v26;
        uint64_t v3 = v40;
      }
      if (v41 == ++v21)
      {
        uint64_t v18 = v43;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    uint64_t v29 = v38;
    char v30 = v37;
    uint64_t v32 = v35;
    uint64_t v31 = v36;
    uint64_t v33 = v34;
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)uint64_t v29 = v30;
    *(void *)(v29 + 8) = v31;
    *(void *)(v29 + 16) = v32;
    *(void *)(v29 + 24) = v18;
    *(void *)(v29 + 32) = v33;
    *(void *)(v29 + 40) = v39;
  }
  return result;
}

uint64_t AST.Group.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  return outlined copy of AST.Group.Kind(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t AST.Group.child.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 104);
  return swift_retain();
}

__n128 AST.Group.init(_:_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 80);
  uint64_t v5 = *a2;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v7;
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(a4 + 80) = v4;
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a1 + 88);
  *(void *)(a4 + 104) = v5;
  __n128 result = *a3;
  *(__n128 *)(a4 + 112) = *a3;
  return result;
}

void AST.Group.Kind.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v5 = v1[2];
  unint64_t v4 = v1[3];
  unint64_t v7 = v1[4];
  unint64_t v6 = v1[5];
  unint64_t v8 = v1[8];
  switch(*((unsigned char *)v1 + 80))
  {
    case 1:
      unint64_t v15 = v1[9];
      Hasher._combine(_:)(2uLL);
      if (v3)
      {
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        Hasher._combine(_:)(v5 >> 14);
        Hasher._combine(_:)(v4 >> 14);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(v7 >> 14);
      Hasher._combine(_:)(v6 >> 14);
      String.hash(into:)();
      Hasher._combine(_:)(v8 >> 14);
      Swift::UInt64 v10 = v15 >> 14;
      goto LABEL_12;
    case 2:
      Hasher._combine(_:)(0xEuLL);
      AST.MatchingOptionSequence.hash(into:)(a1);
      break;
    case 3:
      uint64_t v11 = v7 | v6 | v1[6];
      uint64_t v12 = v1[7] | v8 | v1[9];
      if (v5 | v3 | v2 | v4 | v11 | v12)
      {
        uint64_t v13 = v5 | v3 | v4 | v11 | v12;
        if (v2 != 1 || v13)
        {
          if (v2 != 2 || v13)
          {
            if (v2 != 3 || v13)
            {
              if (v2 != 4 || v13)
              {
                if (v2 != 5 || v13)
                {
                  if (v2 != 6 || v13)
                  {
                    if (v2 != 7 || v13)
                    {
                      if (v2 != 8 || v13)
                      {
                        if (v2 != 9 || v13)
                        {
                          if (v2 != 10 || v13) {
                            Swift::UInt v14 = 13;
                          }
                          else {
                            Swift::UInt v14 = 12;
                          }
                        }
                        else
                        {
                          Swift::UInt v14 = 11;
                        }
                      }
                      else
                      {
                        Swift::UInt v14 = 10;
                      }
                    }
                    else
                    {
                      Swift::UInt v14 = 9;
                    }
                  }
                  else
                  {
                    Swift::UInt v14 = 8;
                  }
                }
                else
                {
                  Swift::UInt v14 = 7;
                }
              }
              else
              {
                Swift::UInt v14 = 6;
              }
            }
            else
            {
              Swift::UInt v14 = 5;
            }
          }
          else
          {
            Swift::UInt v14 = 4;
          }
        }
        else
        {
          Swift::UInt v14 = 3;
        }
      }
      else
      {
        Swift::UInt v14 = 0;
      }
      Hasher._combine(_:)(v14);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Hasher._combine(_:)(v5 >> 14);
      Swift::UInt64 v10 = v4 >> 14;
LABEL_12:
      Hasher._combine(_:)(v10);
      break;
  }
}

Swift::Int AST.Group.Kind.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 80);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  long long v10 = v0[4];
  char v11 = v1;
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Group.Kind()
{
  char v1 = *((unsigned char *)v0 + 80);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  long long v10 = v0[4];
  char v11 = v1;
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group.Kind()
{
  char v1 = *((unsigned char *)v0 + 80);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  long long v10 = v0[4];
  char v11 = v1;
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)((uint64_t)v5);
  return Hasher._finalize()();
}

void AST.Group.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[11];
  unint64_t v4 = v1[12];
  unint64_t v5 = v1[14];
  unint64_t v6 = v1[15];
  AST.Group.Kind.hash(into:)(a1);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  AST.Node.hash(into:)(a1);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Group.hashValue.getter()
{
  unint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  unint64_t v3 = v0[14];
  unint64_t v4 = v0[15];
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group()
{
  unint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  unint64_t v3 = v0[14];
  unint64_t v4 = v0[15];
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Group.Kind.name.getter()
{
  uint64_t v1 = *v0;
  if (*((unsigned char *)v0 + 80) == 1)
  {
    if (!v0[1]) {
      return 0;
    }
    goto LABEL_5;
  }
  if (!*((unsigned char *)v0 + 80))
  {
LABEL_5:
    swift_bridgeObjectRetain();
    return v1;
  }
  return 0;
}

uint64_t AST.Group.Kind.lookaroundKind.getter()
{
  if (v0[5].i8[0] != 3) {
    return 2;
  }
  uint64_t v1 = v0->i64[0];
  int8x16_t v2 = vorrq_s8(vorrq_s8(v0[1], v0[3]), vorrq_s8(v0[2], v0[4]));
  uint64_t v3 = *(void *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | v0->i64[1];
  if (v0->i64[0] == 4 && v3 == 0) {
    return 257;
  }
  if (v1 == 5 && v3 == 0) {
    return 1;
  }
  if (v1 != 7 || v3 != 0)
  {
    if (v1 == 8 && !v3) {
      return 0;
    }
    return 2;
  }
  return 256;
}

uint64_t AST.Group.BalancedCapture.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Group.BalancedCapture.name.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  __n128 *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.name.modify())()
{
  return AST.root.modify;
}

__n128 AST.Group.BalancedCapture.dash.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 AST.Group.BalancedCapture.dash.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.dash.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Group.BalancedCapture.priorName.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 64);
  return swift_bridgeObjectRetain();
}

__n128 AST.Group.BalancedCapture.priorName.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  v1[3] = v5;
  v1[4].n128_u64[0] = v2;
  v1[4].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.priorName.modify())()
{
  return AST.root.modify;
}

__n128 AST.Group.BalancedCapture.init(name:dash:priorName:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a3->n128_u64[0];
  unint64_t v5 = a3->n128_u64[1];
  long long v6 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = *a2;
  *(void *)(a4 + 48) = v4;
  *(void *)(a4 + 56) = v5;
  __n128 result = a3[1];
  *(__n128 *)(a4 + 64) = result;
  return result;
}

void AST.Group.BalancedCapture.hash(into:)()
{
  unint64_t v2 = v0[4];
  unint64_t v1 = v0[5];
  unint64_t v3 = v0[8];
  unint64_t v4 = v0[9];
  if (v0[1])
  {
    unint64_t v8 = v0[3];
    unint64_t v5 = v0[8];
    unint64_t v6 = v0[2];
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Swift::UInt64 v7 = v6 >> 14;
    unint64_t v3 = v5;
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v8 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int AST.Group.BalancedCapture.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Group.BalancedCapture()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group.BalancedCapture()
{
  return Hasher._finalize()();
}

void AST.MatchingOption.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *AST.MatchingOption.kind.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*AST.MatchingOption.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOption.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*AST.MatchingOption.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOption.init(_:location:)@<Q0>(unsigned char *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

BOOL AST.MatchingOption.isAnyExtended.getter()
{
  return (*v0 & 0xFE) == 6;
}

BOOL AST.MatchingOption.isTextSegmentMode.getter()
{
  return *v0 - 13 < 2;
}

BOOL AST.MatchingOption.isSemanticMatchingLevel.getter()
{
  return *v0 - 15 < 3;
}

void AST.MatchingOption.hash(into:)()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.MatchingOption.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.MatchingOption()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.MatchingOption()
{
  unint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.MatchingOption()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

__n128 AST.MatchingOptionSequence.caretLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.MatchingOptionSequence.caretLoc.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  __n128 *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.caretLoc.modify())()
{
  return AST.root.modify;
}

uint64_t AST.MatchingOptionSequence.adding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.MatchingOptionSequence.adding.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.adding.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOptionSequence.minusLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[3].n128_u8[0];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.MatchingOptionSequence.minusLoc.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  v1[2] = *a1;
  v1[3].n128_u8[0] = v2;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.minusLoc.modify())()
{
  return AST.root.modify;
}

uint64_t AST.MatchingOptionSequence.removing.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.MatchingOptionSequence.removing.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.removing.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOptionSequence.init(caretLoc:adding:minusLoc:removing:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v6 = a3[1].n128_u8[0];
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(unsigned char *)(a5 + 16) = v5;
  *(void *)(a5 + 24) = a2;
  __n128 result = *a3;
  *(__n128 *)(a5 + 32) = *a3;
  *(unsigned char *)(a5 + 48) = v6;
  *(void *)(a5 + 56) = a4;
  return result;
}

BOOL AST.MatchingOptionSequence.resetsCurrentOptions.getter()
{
  return (*(unsigned char *)(v0 + 16) & 1) == 0;
}

void AST.MatchingOptionSequence.hash(into:)(uint64_t a1)
{
  unsigned __int8 v2 = v1;
  uint64_t v4 = v2[3];
  unint64_t v5 = v2[4];
  unint64_t v6 = v2[5];
  int v7 = *((unsigned __int8 *)v2 + 48);
  uint64_t v8 = v2[7];
  if (*((unsigned char *)v2 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v10 = *v2;
    unint64_t v9 = v2[1];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v9 >> 14);
  }
  specialized Array<A>.hash(into:)(a1, v4);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v6 >> 14);
  }

  specialized Array<A>.hash(into:)(a1, v8);
}

Swift::Int AST.MatchingOptionSequence.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 16);
  uint64_t v2 = *((void *)v0 + 3);
  char v3 = *((unsigned char *)v0 + 48);
  uint64_t v4 = *((void *)v0 + 7);
  long long v7 = *v0;
  char v8 = v1;
  uint64_t v9 = v2;
  long long v10 = v0[2];
  char v11 = v3;
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.MatchingOptionSequence()
{
  char v1 = *((unsigned char *)v0 + 16);
  uint64_t v2 = *((void *)v0 + 3);
  char v3 = *((unsigned char *)v0 + 48);
  uint64_t v4 = *((void *)v0 + 7);
  long long v7 = *v0;
  char v8 = v1;
  uint64_t v9 = v2;
  long long v10 = v0[2];
  char v11 = v3;
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.MatchingOptionSequence()
{
  char v1 = *((unsigned char *)v0 + 16);
  uint64_t v2 = *((void *)v0 + 3);
  char v3 = *((unsigned char *)v0 + 48);
  uint64_t v4 = *((void *)v0 + 7);
  long long v7 = *v0;
  char v8 = v1;
  uint64_t v9 = v2;
  long long v10 = v0[2];
  char v11 = v3;
  uint64_t v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t AST.MatchingOptionSequence.init(adding:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 48) = 1;
  *(void *)(a2 + 56) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t AST.MatchingOptionSequence.init(removing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = v2;
  *(unsigned char *)(a2 + 48) = 1;
  *(void *)(a2 + 56) = result;
  return result;
}

uint64_t AST.MatchingOption._dumpBase.getter()
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.MatchingOption()
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.MatchingOption(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.MatchingOptionSequence._dumpBase.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 56);
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = MEMORY[0x210561950](v2, &type metadata for AST.MatchingOption);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x69766F6D6572202CLL;
  v5._object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = MEMORY[0x210561950](v3, &type metadata for AST.MatchingOption);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x800000020D9DDCC0;
  v7._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v7);
  if (v1) {
    uint64_t v8 = 0x65736C6166;
  }
  else {
    uint64_t v8 = 1702195828;
  }
  if (v1) {
    unint64_t v9 = 0xE500000000000000;
  }
  else {
    unint64_t v9 = 0xE400000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0x203A676E69646461;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.MatchingOptionSequence()
{
  return AST.MatchingOptionSequence._dumpBase.getter();
}

Swift::Int AST.AbsentFunction.Start.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AST.GlobalMatchingOption.Kind.hash(into:)()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v4 = v0[2];
  Swift::UInt v3 = v0[3];
  switch(v2 >> 61)
  {
    case 1uLL:
      Hasher._combine(_:)(1uLL);
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      Hasher._combine(_:)(2uLL);
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 3uLL:
      Hasher._combine(_:)(0xBuLL);
      Swift::UInt v5 = v1;
      goto LABEL_45;
    case 4uLL:
      Hasher._combine(_:)(0xCuLL);
      Swift::UInt v5 = v1 & 1;
      goto LABEL_45;
    case 5uLL:
      Swift::UInt v6 = v3 | v4;
      if (v2 == 0xA000000000000000 && (v3 | v4 | v1) == 0)
      {
        Swift::UInt v5 = 3;
      }
      else if (v2 == 0xA000000000000000 && v1 == 1 && v6 == 0)
      {
        Swift::UInt v5 = 4;
      }
      else if (v2 == 0xA000000000000000 && v1 == 2 && !v6)
      {
        Swift::UInt v5 = 5;
      }
      else if (v2 == 0xA000000000000000 && v1 == 3 && !v6)
      {
        Swift::UInt v5 = 6;
      }
      else if (v2 == 0xA000000000000000 && v1 == 4 && !v6)
      {
        Swift::UInt v5 = 7;
      }
      else if (v2 == 0xA000000000000000 && v1 == 5 && !v6)
      {
        Swift::UInt v5 = 8;
      }
      else if (v2 == 0xA000000000000000 && v1 == 6 && !v6)
      {
        Swift::UInt v5 = 9;
      }
      else
      {
        Swift::UInt v5 = 10;
      }
LABEL_45:
      Hasher._combine(_:)(v5);
      break;
    default:
      Hasher._combine(_:)(0);
      if (v2)
      {
LABEL_5:
        Hasher._combine(_:)(0);
      }
      else
      {
LABEL_7:
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v1);
      }
      Hasher._combine(_:)(v4 >> 14);
      Hasher._combine(_:)(v3 >> 14);
      break;
  }
}

Swift::Int AST.GlobalMatchingOption.Kind.hashValue.getter()
{
  return AST.AbsentFunction.Kind.hashValue.getter((void (*)(unsigned char *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int AST.AbsentFunction.Kind.hashValue.getter(void (*a1)(unsigned char *))
{
  long long v3 = v1[1];
  long long v6 = *v1;
  long long v7 = v3;
  Hasher.init(_seed:)();
  a1(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOption.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(a1, a2, (void (*)(unsigned char *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  long long v5 = v3[1];
  long long v8 = *v3;
  long long v9 = v5;
  Hasher.init(_seed:)();
  a3(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOption.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(a1, a2, a3, (void (*)(unsigned char *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  long long v6 = v4[1];
  long long v9 = *v4;
  long long v10 = v6;
  Hasher.init(_seed:)();
  a4(v8);
  return Hasher._finalize()();
}

__n128 AST.GlobalMatchingOption.kind.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 AST.GlobalMatchingOption.kind.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  _OWORD *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*AST.GlobalMatchingOption.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.GlobalMatchingOption.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*AST.GlobalMatchingOption.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.GlobalMatchingOption.init(_:_:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  long long v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  __n128 result = *a2;
  a3[2] = *a2;
  return result;
}

void AST.GlobalMatchingOption.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.GlobalMatchingOption.hashValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOption()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.GlobalMatchingOption()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOption()
{
  unint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Quantification.amount.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  __n128 result = *(__n128 *)(v1 + 64);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

__n128 AST.Quantification.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 80);
  __n128 result = *(__n128 *)(v1 + 88);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t AST.Quantification.child.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 104);
  return swift_retain();
}

uint64_t AST.Quantification.trivia.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 AST.Quantification.init(_:_:_:_:trivia:)@<Q0>(_OWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a2;
  uint64_t v7 = *a3;
  long long v8 = a1[1];
  *(_OWORD *)a6 = *a1;
  *(_OWORD *)(a6 + 16) = v8;
  long long v9 = a1[3];
  *(_OWORD *)(a6 + 32) = a1[2];
  *(_OWORD *)(a6 + 48) = v9;
  *(_OWORD *)(a6 + 64) = a1[4];
  *(unsigned char *)(a6 + 80) = v6;
  *(_OWORD *)(a6 + 88) = *(_OWORD *)(a2 + 8);
  *(void *)(a6 + 104) = v7;
  __n128 result = *a4;
  *(__n128 *)(a6 + 112) = *a4;
  *(void *)(a6 + 128) = a5;
  return result;
}

void AST.Quantification.Amount.hash(into:)()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v4 = v0[2];
  Swift::UInt v3 = v0[3];
  Swift::UInt v5 = v0[4];
  Swift::UInt v6 = v0[5];
  Swift::UInt v8 = v0[6];
  Swift::UInt v7 = v0[7];
  switch(v6 >> 61)
  {
    case 1uLL:
      Hasher._combine(_:)(4uLL);
      if ((v2 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 2uLL:
      Hasher._combine(_:)(5uLL);
      if ((v2 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 3uLL:
      Hasher._combine(_:)(6uLL);
      if (v2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v1);
      }
      Hasher._combine(_:)(v4 >> 14);
      Hasher._combine(_:)(v3 >> 14);
      if (v6)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v5);
      }
      Hasher._combine(_:)(v8 >> 14);
      Hasher._combine(_:)(v7 >> 14);
      return;
    case 4uLL:
      Swift::UInt v9 = v5 | v8 | v7;
      if (v6 == 0x8000000000000000 && (v4 | v2 | v1 | v3 | v9) == 0)
      {
        Swift::UInt v11 = 0;
      }
      else if (v6 == 0x8000000000000000 && v1 == 1 && !(v4 | v2 | v3 | v9))
      {
        Swift::UInt v11 = 1;
      }
      else
      {
        Swift::UInt v11 = 2;
      }
      Hasher._combine(_:)(v11);
      return;
    default:
      Hasher._combine(_:)(3uLL);
      if (v2)
      {
LABEL_13:
        Hasher._combine(_:)(0);
      }
      else
      {
LABEL_15:
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v1);
      }
      Hasher._combine(_:)(v4 >> 14);
      Hasher._combine(_:)(v3 >> 14);
      return;
  }
}

Swift::Int AST.Quantification.Amount.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification.Amount()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification.Amount()
{
  return Hasher._finalize()();
}

_RegexParser::AST::Quantification::Kind_optional __swiftcall AST.Quantification.Kind.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of AST.Quantification.Kind.init(rawValue:);
  return (_RegexParser::AST::Quantification::Kind_optional)AST.CustomCharacterClass.SetOp.init(rawValue:)(rawValue, v2, v1);
}

uint64_t AST.CustomCharacterClass.SetOp.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  unint64_t v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 3;
  if (v7 < 3) {
    char v9 = v7;
  }
  *a3 = v9;
  return result;
}

uint64_t AST.Quantification.Kind.rawValue.getter()
{
  uint64_t v1 = 63;
  if (*v0 != 1) {
    uint64_t v1 = 43;
  }
  if (*v0) {
    return v1;
  }
  else {
    return *v0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Quantification.Kind(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  uint64_t v3 = 63;
  if (v2 != 1) {
    uint64_t v3 = 43;
  }
  if (*a1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = *a1;
  }
  if (v2) {
    unint64_t v5 = 0xE100000000000000;
  }
  else {
    unint64_t v5 = 0xE000000000000000;
  }
  uint64_t v6 = 63;
  if (*a2 != 1) {
    uint64_t v6 = 43;
  }
  if (*a2) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = *a2;
  }
  if (*a2) {
    unint64_t v8 = 0xE100000000000000;
  }
  else {
    unint64_t v8 = 0xE000000000000000;
  }
  if (v4 == v7 && v5 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

_RegexParser::AST::Quantification::Kind_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Quantification.Kind(Swift::String *a1)
{
  return AST.Quantification.Kind.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.Quantification.Kind(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = 0xE000000000000000;
  uint64_t v4 = 63;
  if (v2 != 1) {
    uint64_t v4 = 43;
  }
  if (*v1)
  {
    uint64_t v2 = v4;
    unint64_t v3 = 0xE100000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification.Kind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Quantification.Kind()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification.Kind()
{
  return Hasher._finalize()();
}

void AST.Quantification.hash(into:)(uint64_t a1)
{
  unint64_t v3 = v1[8];
  unint64_t v4 = v1[9];
  unint64_t v6 = v1[11];
  unint64_t v5 = v1[12];
  unint64_t v7 = v1[14];
  unint64_t v8 = v1[15];
  uint64_t v9 = v1[16];
  AST.Quantification.Amount.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  AST.Node.hash(into:)(a1);
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v8 >> 14);

  specialized Array<A>.hash(into:)(a1, v9);
}

Swift::Int AST.Quantification.hashValue.getter()
{
  return AST.Atom.Callout.OnigurumaNamed.hashValue.getter((void (*)(unsigned char *))AST.Quantification.hash(into:));
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaNamed(a1, a2, (void (*)(unsigned char *))AST.Quantification.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed(a1, a2, a3, (void (*)(unsigned char *))AST.Quantification.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t AST.Quantification.Amount.bounds.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[5];
  switch(v2 >> 61)
  {
    case 1uLL:
      uint64_t result = *v0;
      break;
    case 2uLL:
      uint64_t result = 0;
      break;
    case 3uLL:
      uint64_t result = *v0;
      break;
    case 4uLL:
      uint64_t v4 = v0[4] | v0[1];
      uint64_t result = (v2 != 0x8000000000000000
             || (v5.i64[0] = v0[3],
                 v5.i64[1] = v0[2],
                 v6.i64[0] = v0[7],
                 v6.i64[1] = v0[6],
                 int8x16_t v7 = vorrq_s8(v6, v5),
                 *(void *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v4 | v1))
            && v2 == 0x8000000000000000
            && v1 == 1
            && !(v4 | v0[7] | v0[6] | v0[3] | v0[2]);
      break;
    default:
      uint64_t result = *v0;
      break;
  }
  return result;
}

uint64_t CaptureList.captures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CaptureList.captures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*CaptureList.captures.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Array.init<A>(_:)();
  *a1 = result;
  return result;
}

uint64_t CaptureList.append(_:)(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v13 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  char v7 = *((unsigned char *)a1 + 48);
  uint64_t v8 = *v1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
    uint64_t v8 = result;
  }
  unint64_t v11 = *(void *)(v8 + 16);
  unint64_t v10 = *(void *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v8);
    uint64_t v8 = result;
  }
  *(void *)(v8 + 16) = v11 + 1;
  unint64_t v12 = v8 + 56 * v11;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v2;
  *(void *)(v12 + 48) = v3;
  *(void *)(v12 + 56) = v4;
  *(void *)(v12 + 64) = v5;
  *(void *)(v12 + 72) = v6;
  *(unsigned char *)(v12 + 80) = v7;
  uint64_t *v1 = v8;
  return result;
}

uint64_t CaptureList.Capture.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CaptureList.Capture.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CaptureList.Capture.name.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.type.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CaptureList.Capture.type.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*CaptureList.Capture.type.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.optionalDepth.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t CaptureList.Capture.optionalDepth.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*CaptureList.Capture.optionalDepth.modify())()
{
  return AST.root.modify;
}

__n128 CaptureList.Capture.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 CaptureList.Capture.location.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*CaptureList.Capture.location.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.visibleInTypedOutput.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t CaptureList.Capture.visibleInTypedOutput.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*CaptureList.Capture.visibleInTypedOutput.modify())()
{
  return AST.root.modify;
}

__n128 CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 a5@<W4>, __n128 *a6@<X5>, __n128 *a7@<X8>)
{
  a7->n128_u64[0] = a1;
  a7->n128_u64[1] = a2;
  a7[1].n128_u64[0] = a3;
  a7[1].n128_u64[1] = a4;
  __n128 result = *a6;
  a7[2] = *a6;
  a7[3].n128_u8[0] = a5;
  return result;
}

Swift::Int_optional __swiftcall CaptureList.indexOfCapture(named:)(Swift::String named)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    object = named._object;
    uint64_t countAndFlagsBits = named._countAndFlagsBits;
    Swift::Int v6 = 0;
    char v7 = (void *)(v2 + 40);
    while (1)
    {
      if (*v7)
      {
        BOOL v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (void)object;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      ++v6;
      v7 += 7;
      if (v3 == v6) {
        goto LABEL_11;
      }
    }
    Swift::Bool v9 = 0;
  }
  else
  {
LABEL_11:
    Swift::Int v6 = 0;
    Swift::Bool v9 = 1;
  }
  Swift::Int v10 = v6;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

Swift::Bool __swiftcall CaptureList.hasCapture(named:)(Swift::String named)
{
  Swift::Int_optional v2 = CaptureList.indexOfCapture(named:)(named);
  return !v2.is_nil;
}

uint64_t CaptureList.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CaptureList.Builder.captures.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t CaptureList.Builder.captures.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*CaptureList.Builder.captures.modify())()
{
  return AST.root.modify;
}

_RegexParser::CaptureList::Builder __swiftcall CaptureList.Builder.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t CaptureList.Builder.OptionalNesting.outerDepth.getter()
{
  return *(void *)v0;
}

uint64_t CaptureList.Builder.OptionalNesting.outerDepth.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.outerDepth.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Builder.OptionalNesting.canNest.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CaptureList.Builder.OptionalNesting.canNest.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.canNest.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Builder.OptionalNesting.innerDepth.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CaptureList.Builder.OptionalNesting.innerDepth.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.innerDepth.modify())()
{
  return AST.root.modify;
}

_RegexParser::CaptureList::Builder::OptionalNesting __swiftcall CaptureList.Builder.OptionalNesting.init(canNest:)(_RegexParser::CaptureList::Builder::OptionalNesting canNest)
{
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = canNest.outerDepth;
  *(void *)(v1 + 16) = 0;
  return canNest;
}

uint64_t CaptureList.Builder.OptionalNesting.depth.getter()
{
  uint64_t v1 = v0[2];
  uint64_t result = *v0 + v1;
  if (__OFADD__(*v0, v1)) {
    __break(1u);
  }
  return result;
}

void CaptureList.Builder.OptionalNesting.disablingNesting.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[2];
  if (*((unsigned char *)v1 + 8) != 1) {
    goto LABEL_4;
  }
  BOOL v4 = __OFADD__(v2, v3);
  v2 += v3;
  if (!v4)
  {
    uint64_t v3 = 0;
LABEL_4:
    *(void *)a1 = v2;
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v3;
    return;
  }
  __break(1u);
}

void CaptureList.Builder.OptionalNesting.addingOptional.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  int v3 = *((unsigned __int8 *)v1 + 8);
  if (v3 == 1)
  {
    uint64_t v4 = v1[2];
    BOOL v5 = __OFADD__(v4, 1);
    uint64_t v6 = v4 + 1;
    if (!v5) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v6 = 1;
LABEL_6:
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v6;
}

uint64_t *CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(uint64_t *result, unint64_t *a2, char a3)
{
  uint64_t v8 = *result;
  unint64_t v9 = *a2;
  int v10 = *((unsigned __int8 *)a2 + 8);
  uint64_t v11 = a2[2];
  switch((unint64_t)*result >> 60)
  {
    case 1uLL:
      uint64_t v4 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v5 = *(void *)(v4 + 16);
      if (v5)
      {
        unint64_t v14 = 0;
        unint64_t v6 = v4 + 32;
        do
        {
          if (v14 >= *(void *)(v4 + 16))
          {
            __break(1u);
            goto LABEL_89;
          }
          unint64_t v15 = v14 + 1;
          *(void *)&v76[0] = *(void *)(v6 + 8 * v14);
          *(void *)&long long v77 = v9;
          BYTE8(v77) = v10;
          uint64_t v78 = v11;
          uint64_t result = (uint64_t *)CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v76, &v77, a3 & 1);
          unint64_t v14 = v15;
        }
        while (v5 != v15);
      }
      return result;
    case 2uLL:
      uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v7 = *(void *)(v16 + 16);
      uint64_t v5 = *(void *)(v16 + 24);
      int v17 = *(unsigned __int8 *)(v16 + 96);
      unint64_t v6 = *(void *)(v16 + 120);
      if (*(unsigned char *)(v16 + 96))
      {
        if (v17 != 1)
        {
          if (v17 != 3) {
            goto LABEL_59;
          }
          int8x16_t v18 = vorrq_s8(vorrq_s8(*(int8x16_t *)(v16 + 32), *(int8x16_t *)(v16 + 64)), vorrq_s8(*(int8x16_t *)(v16 + 48), *(int8x16_t *)(v16 + 80)));
          if (*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)) | v5 | v7) {
            goto LABEL_59;
          }
          long long v68 = *(_OWORD *)(v16 + 128);
          unint64_t v19 = v9 + v11;
          if (__OFADD__(v9, v11))
          {
            __break(1u);
          }
          else
          {
            uint64_t v4 = *v3;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_24:
              long long v20 = v68;
              unint64_t v22 = *(void *)(v4 + 16);
              unint64_t v21 = *(void *)(v4 + 24);
              if (v22 >= v21 >> 1)
              {
                Swift::String v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, (char *)v4);
                long long v20 = v68;
                uint64_t v4 = (uint64_t)v65;
              }
              *(void *)(v4 + 16) = v22 + 1;
              uint64_t v23 = v4 + 56 * v22;
              *(void *)(v23 + 32) = 0;
              *(void *)(v23 + 40) = 0;
              uint64_t v24 = v23 + 32;
              goto LABEL_58;
            }
          }
          uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
          goto LABEL_24;
        }
        long long v69 = *(_OWORD *)(v16 + 128);
        if (v5) {
          unint64_t v48 = *(void *)(v16 + 16);
        }
        else {
          unint64_t v48 = 0;
        }
        if (__OFADD__(v9, v11))
        {
          __break(1u);
        }
        else
        {
          uint64_t v4 = *v3;
          swift_bridgeObjectRetain();
          unint64_t v66 = v48;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_55:
            unint64_t v50 = *(void *)(v4 + 16);
            unint64_t v49 = *(void *)(v4 + 24);
            unint64_t v51 = v50 + 1;
            long long v20 = v69;
            if (v50 >= v49 >> 1)
            {
              long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, (char *)v4);
              long long v20 = v69;
              unint64_t v51 = v50 + 1;
              uint64_t v4 = (uint64_t)v64;
            }
            *(void *)(v4 + 16) = v51;
            uint64_t v52 = v4 + 56 * v50;
            *(void *)(v52 + 32) = v66;
            *(void *)(v52 + 40) = v5;
            uint64_t v24 = v52 + 32;
            unint64_t v19 = v9 + v11;
            goto LABEL_58;
          }
        }
        uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
        goto LABEL_55;
      }
      long long v67 = *(_OWORD *)(v16 + 128);
      if (__OFADD__(v9, v11)) {
        goto LABEL_92;
      }
      uint64_t v4 = *v3;
      swift_bridgeObjectRetain();
      unint64_t v66 = v9 + v11;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_47;
      }
      goto LABEL_93;
    case 3uLL:
      uint64_t v4 = v8 & 0xFFFFFFFFFFFFFFFLL;
      outlined init with take of AST.Conditional.Condition.Kind((long long *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32), v76);
      unint64_t v25 = *(void *)(v4 + 176);
      unint64_t v6 = *(void *)(v4 + 208);
      outlined init with take of AST.Conditional.Condition.Kind(v76, &v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(&v77) == 3)
      {
        uint64_t v4 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v77);
        uint64_t v5 = swift_allocObject();
        long long v26 = *(_OWORD *)(v4 + 48);
        long long v28 = *(_OWORD *)v4;
        long long v27 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)(v5 + 48) = *(_OWORD *)(v4 + 32);
        *(_OWORD *)(v5 + 64) = v26;
        *(_OWORD *)(v5 + 16) = v28;
        *(_OWORD *)(v5 + 32) = v27;
        long long v29 = *(_OWORD *)(v4 + 112);
        long long v31 = *(_OWORD *)(v4 + 64);
        long long v30 = *(_OWORD *)(v4 + 80);
        *(_OWORD *)(v5 + 112) = *(_OWORD *)(v4 + 96);
        *(_OWORD *)(v5 + 128) = v29;
        *(_OWORD *)(v5 + 80) = v31;
        *(_OWORD *)(v5 + 96) = v30;
        uint64_t v72 = v11;
        uint64_t v73 = v5 | 0x2000000000000000;
        unint64_t v70 = v9;
        char v71 = v10;
        outlined init with take of AST.Conditional.Condition.Kind(v76, &v74);
        uint64_t v32 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v74);
        outlined retain of AST.Group(v32);
        CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(&v73, &v70, a3 & 1);
        swift_release();
      }
      unint64_t v70 = v25;
      if (!v10)
      {
        uint64_t v8 = 1;
        goto LABEL_39;
      }
      uint64_t v8 = v11 + 1;
      if (!__OFADD__(v11, 1))
      {
LABEL_39:
        *(void *)&long long v74 = v9;
        BYTE8(v74) = v10;
        uint64_t v75 = v8;
        uint64_t v39 = a3 & 1;
        CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(&v70, &v74, v39);
        unint64_t v70 = v6;
        if (v10)
        {
          uint64_t v40 = v11 + 1;
          if (!__OFADD__(v11, 1)) {
            goto LABEL_44;
          }
          __break(1u);
        }
        uint64_t v40 = 1;
LABEL_44:
        *(void *)&long long v74 = v9;
        BYTE8(v74) = v10;
        uint64_t v75 = v40;
        uint64_t v41 = (long long *)&v70;
        uint64_t v42 = &v74;
        uint64_t v43 = v39;
        return (uint64_t *)CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v41, v42, v43);
      }
      __break(1u);
LABEL_33:
      uint64_t v33 = (void *)(v8 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v35 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v36 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      unint64_t v37 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x78);
      switch(v36 >> 61)
      {
        case 2uLL:
          if (v10) {
            goto LABEL_83;
          }
          uint64_t v11 = 1;
          goto LABEL_84;
        case 4uLL:
          uint64_t v53 = v33[4];
          uint64_t v34 = (v36 != 0x8000000000000000
              || (v54.i64[0] = v33[6],
                  v54.i64[1] = v33[5],
                  v55.i64[0] = v33[9],
                  v55.i64[1] = v33[8],
                  int8x16_t v56 = vorrq_s8(v55, v54),
                  v34 | *(void *)&vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)) | v35 | v53))
             && v34 == 1
             && (v33[9] | v35 | v33[8] | v33[6] | v33[5] | v53) == 0
             && v36 == 0x8000000000000000;
          break;
        default:
          if (v35) {
            goto LABEL_84;
          }
          break;
      }
      BOOL v59 = v34 == 0;
      if (v34) {
        uint64_t v60 = v11;
      }
      else {
        uint64_t v60 = 1;
      }
      if (!v59 || v10 == 0)
      {
        uint64_t v11 = v60;
LABEL_84:
        *(void *)&v76[0] = v37;
        goto LABEL_85;
      }
LABEL_83:
      if (!__OFADD__(v11++, 1)) {
        goto LABEL_84;
      }
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
LABEL_47:
      unint64_t v45 = *(void *)(v4 + 16);
      unint64_t v44 = *(void *)(v4 + 24);
      unint64_t v46 = v45 + 1;
      long long v20 = v67;
      if (v45 >= v44 >> 1)
      {
        uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, (char *)v4);
        long long v20 = v67;
        unint64_t v46 = v45 + 1;
        uint64_t v4 = (uint64_t)v63;
      }
      *(void *)(v4 + 16) = v46;
      uint64_t v47 = v4 + 56 * v45;
      *(void *)(v47 + 32) = v7;
      *(void *)(v47 + 40) = v5;
      uint64_t v24 = v47 + 32;
      unint64_t v19 = v66;
LABEL_58:
      *(void *)(v24 + 16) = MEMORY[0x263F8D980];
      *(void *)(v24 + 24) = v19;
      *(_OWORD *)(v24 + 32) = v20;
      *(unsigned char *)(v24 + 48) = a3 & 1;
      *int v3 = v4;
LABEL_59:
      *(void *)&v76[0] = v6;
LABEL_85:
      *(void *)&long long v77 = v9;
      BYTE8(v77) = v10;
      uint64_t v78 = v11;
      uint64_t v43 = a3 & 1;
      uint64_t v41 = v76;
      uint64_t v42 = &v77;
      return (uint64_t *)CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v41, v42, v43);
    case 4uLL:
      goto LABEL_33;
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xBuLL:
      return result;
    case 0xAuLL:
      uint64_t v38 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      if ((v38 & 6) != 2) {
        return result;
      }
      unint64_t v37 = v38 & 0xFFFFFFFFFFFFFFF9;
      goto LABEL_84;
    default:
      uint64_t v4 = *(void *)(v8 + 16);
      uint64_t v5 = *(void *)(v4 + 16);
      if (!v5) {
        return result;
      }
      unint64_t v6 = 0;
      uint64_t v13 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        uint64_t v11 = *((unsigned __int8 *)a2 + 8);
      }
      else {
        uint64_t v11 = 0;
      }
      if (*((unsigned char *)a2 + 8)) {
        uint64_t v7 = v13;
      }
      else {
        uint64_t v7 = 1;
      }
      while (2)
      {
        if (v6 >= *(void *)(v4 + 16))
        {
LABEL_89:
          __break(1u);
        }
        else
        {
          *(void *)&v76[0] = *(void *)(v4 + 32 + 8 * v6);
          if ((v11 & 1) == 0)
          {
            ++v6;
            *(void *)&long long v77 = v9;
            BYTE8(v77) = v10;
            uint64_t v78 = v7;
            uint64_t result = (uint64_t *)CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(v76, &v77, a3 & 1);
            if (v5 == v6) {
              return result;
            }
            continue;
          }
        }
        break;
      }
      __break(1u);
      goto LABEL_91;
  }
}

uint64_t *static CaptureList.Builder.build(_:)@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
  }
  *((void *)v4 + 2) = v6 + 1;
  uint64_t v7 = &v4[56 * v6];
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 6) = MEMORY[0x263F8D980];
  *(_OWORD *)(v7 + 56) = xmmword_20D9D7480;
  *((void *)v7 + 9) = 15;
  v7[80] = 1;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t result = CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(&v12, &v9, 1);
  *a2 = v13;
  return result;
}

int64x2_t static Source.Location.fake.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0xFuLL);
  *a1 = result;
  return result;
}

uint64_t *AST.captureList.getter@<X0>(char **a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 2);
  long long v4 = *v1;
  uint64_t v5 = v2;
  return static CaptureList.Builder.build(_:)((uint64_t *)&v4, a1);
}

uint64_t static CaptureList.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CaptureList(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t CaptureList.Capture.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v3 = MEMORY[0x210561880](63, 0xE100000000000000, v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CaptureList.Capture()
{
  uint64_t v1 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v3 = MEMORY[0x210561880](63, 0xE100000000000000, v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t CaptureList.description.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    unint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(v1 + 56);
    while (v4 < *(void *)(v1 + 16))
    {
      uint64_t v6 = *v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v9 = v8;
      uint64_t v10 = MEMORY[0x210561880](63, 0xE100000000000000, v6);
      uint64_t v12 = v11;
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = v10;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v15 = *(void *)(v22 + 16);
      unint64_t v14 = *(void *)(v22 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
      }
      ++v4;
      *(void *)(v22 + 16) = v15 + 1;
      uint64_t v16 = v22 + 16 * v15;
      *(void *)(v16 + 32) = v7;
      *(void *)(v16 + 40) = v9;
      v5 += 7;
      if (v2 == v4) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    return 40;
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CaptureList@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static CaptureStructure.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a2 + 24)) {
      goto LABEL_13;
    }
    if (v3)
    {
      if (v7)
      {
        if (v2 != v6 || v3 != v7)
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of CaptureStructure(v6, v7, v8, 0);
          outlined copy of CaptureStructure(v2, v3, v4, 0);
          outlined consume of CaptureStructure(v2, v3, v4, 0);
          outlined consume of CaptureStructure(v6, v7, v8, 0);
          char v14 = 0;
          if ((v25 & 1) == 0) {
            return v14 & 1;
          }
LABEL_25:
          if (v4)
          {
            if (!v8 || v4 != v8) {
              goto LABEL_15;
            }
          }
          else if (v8)
          {
            goto LABEL_15;
          }
          char v14 = 1;
          return v14 & 1;
        }
        outlined copy of CaptureStructure(*(void *)a1, v3, v8, 0);
        outlined copy of CaptureStructure(v2, v3, v4, 0);
        outlined consume of CaptureStructure(v2, v3, v4, 0);
        uint64_t v15 = v2;
        uint64_t v16 = v3;
LABEL_24:
        outlined consume of CaptureStructure(v15, v16, v8, 0);
        goto LABEL_25;
      }
      outlined copy of CaptureStructure(*(void *)a2, 0, v8, 0);
      outlined copy of CaptureStructure(v2, v3, v4, 0);
      outlined consume of CaptureStructure(v2, v3, v4, 0);
      uint64_t v19 = v6;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v24 = *(void *)a2;
      if (!v7)
      {
        outlined copy of CaptureStructure(v24, 0, v8, 0);
        outlined copy of CaptureStructure(v2, 0, v4, 0);
        outlined consume of CaptureStructure(v2, 0, v4, 0);
        uint64_t v15 = v6;
        uint64_t v16 = 0;
        goto LABEL_24;
      }
      outlined copy of CaptureStructure(v24, *(void *)(a2 + 8), v8, 0);
      outlined copy of CaptureStructure(v2, 0, v4, 0);
      outlined consume of CaptureStructure(v2, 0, v4, 0);
      uint64_t v19 = v6;
      uint64_t v20 = v7;
    }
    uint64_t v21 = v8;
    char v22 = 0;
    goto LABEL_14;
  }
  if (v5 != 1)
  {
    if (v9 == 2)
    {
      uint64_t v17 = *(void *)(v2 + 16);
      uint64_t v18 = *(void *)(v6 + 16);
      outlined copy of CaptureStructure(*(void *)a2, *(void *)(a2 + 8), v8, 2);
      outlined copy of CaptureStructure(v2, v3, v4, 2);
      char v14 = specialized static Array<A>.== infix(_:_:)(v17, v18);
      outlined consume of CaptureStructure(v2, v3, v4, 2);
      outlined consume of CaptureStructure(v6, v7, v8, 2);
      return v14 & 1;
    }
    goto LABEL_13;
  }
  if (v9 != 1)
  {
LABEL_13:
    outlined copy of CaptureStructure(*(void *)a2, *(void *)(a2 + 8), v8, v9);
    outlined copy of CaptureStructure(v2, v3, v4, v5);
    outlined consume of CaptureStructure(v2, v3, v4, v5);
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v21 = v8;
    char v22 = v9;
LABEL_14:
    outlined consume of CaptureStructure(v19, v20, v21, v22);
LABEL_15:
    char v14 = 0;
    return v14 & 1;
  }
  char v10 = *(unsigned char *)(v2 + 40);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v12 = *(void *)(v6 + 32);
  char v13 = *(unsigned char *)(v6 + 40);
  long long v29 = *(_OWORD *)(v2 + 16);
  uint64_t v30 = v11;
  char v31 = v10;
  long long v26 = *(_OWORD *)(v6 + 16);
  uint64_t v27 = v12;
  char v28 = v13;
  outlined copy of CaptureStructure(v6, v7, v8, 1);
  outlined copy of CaptureStructure(v2, v3, v4, 1);
  char v14 = static CaptureStructure.== infix(_:_:)(&v29, &v26);
  outlined consume of CaptureStructure(v2, v3, v4, 1);
  outlined consume of CaptureStructure(v6, v7, v8, 1);
  return v14 & 1;
}

uint64_t CaptureStructure.encode(to:)(_WORD *a1)
{
  int v3 = *((unsigned __int8 *)v1 + 24);
  if (a1) {
    *a1 = 1;
  }
  long long v10 = *v1;
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t result = swift_allocObject();
  uint64_t v6 = result;
  *(void *)(result + 16) = 2;
  if (v3 == 2 && !*(void *)(*(void *)(v10 + 16) + 16))
  {
    uint64_t v7 = 2;
  }
  else
  {
    long long v11 = v10;
    uint64_t v12 = v4;
    char v13 = v3;
    uint64_t result = encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)((uint64_t *)&v11, 1, (uint64_t)a1, result);
    uint64_t v7 = *(void *)(v6 + 16);
  }
  *((unsigned char *)a1 + v7) = 0;
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v6 + 16) = v9;
    return swift_release();
  }
  return result;
}

uint64_t encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t result = *a1;
  if (*((unsigned char *)v6 + 24))
  {
    if (*((unsigned char *)v6 + 24) != 1) {
      goto LABEL_16;
    }
    uint64_t v8 = *(void *)(result + 32);
    char v9 = *(unsigned char *)(result + 40);
    long long v31 = *(_OWORD *)(result + 16);
    uint64_t v32 = v8;
    char v33 = v9;
    uint64_t result = encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(&v31, 0, a3, a4);
    *(unsigned char *)(a3 + *(void *)(a4 + 16)) = 4;
    uint64_t v10 = *(void *)(a4 + 16);
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v6 = (uint64_t *)(v10 + 1);
    if (!v11) {
      goto LABEL_28;
    }
    __break(1u);
  }
  if (v6[2])
  {
LABEL_36:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v12 = v6[1];
  uint64_t v6 = *(uint64_t **)(a4 + 16);
  if (!v12)
  {
LABEL_27:
    *((unsigned char *)v6 + a3) = 1;
    uint64_t v29 = *(void *)(a4 + 16);
    BOOL v11 = __OFADD__(v29, 1);
    uint64_t v6 = (uint64_t *)(v29 + 1);
    if (v11)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  *((unsigned char *)v6 + a3) = 2;
  uint64_t v13 = *(void *)(a4 + 16);
  int64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(void *)(a4 + 16) = v14;
  uint64_t v15 = String.utf8CString.getter();
  size_t v16 = *(void *)(v15 + 16);
  if (__OFADD__(v14, v16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((uint64_t)(v14 + v16) < v14)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a3) {
    memmove((void *)(a3 + v14), (const void *)(v15 + 32), v16);
  }
  uint64_t result = swift_release();
  uint64_t v17 = *(void *)(a4 + 16);
  BOOL v11 = __OFADD__(v17, v16);
  uint64_t v6 = (uint64_t *)(v17 + v16);
  if (!v11) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_16:
  uint64_t v18 = *(void *)(result + 16);
  if ((a2 & 1) == 0)
  {
    *(unsigned char *)(a3 + *(void *)(a4 + 16)) = 5;
    uint64_t v19 = *(void *)(a4 + 16);
    BOOL v11 = __OFADD__(v19, 1);
    uint64_t v20 = v19 + 1;
    if (v11)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    *(void *)(a4 + 16) = v20;
  }
  char v30 = a2;
  uint64_t v21 = *(void *)(v18 + 16);
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v23 = (char *)(v18 + 56);
    while (v22 < *(void *)(v18 + 16))
    {
      ++v22;
      uint64_t v25 = *((void *)v23 - 2);
      uint64_t v24 = *((void *)v23 - 1);
      uint64_t v26 = *((void *)v23 - 3);
      char v27 = *v23;
      v23 += 32;
      *(void *)&long long v31 = v26;
      *((void *)&v31 + 1) = v25;
      uint64_t v32 = v24;
      char v33 = v27;
      outlined copy of CaptureStructure(v26, v25, v24, v27);
      encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(&v31, 0, a3, a4);
      uint64_t result = outlined consume of CaptureStructure(v26, v25, v24, v27);
      if (v21 == v22) {
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_23:
  if (v30) {
    return result;
  }
  *(unsigned char *)(a3 + *(void *)(a4 + 16)) = 6;
  uint64_t v28 = *(void *)(a4 + 16);
  BOOL v11 = __OFADD__(v28, 1);
  uint64_t v6 = (uint64_t *)(v28 + 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_27;
  }
LABEL_28:
  *(void *)(a4 + 16) = v6;
  return result;
}

uint64_t CaptureStructure.description.getter()
{
  v2.maxTopDownLevels.value = 0;
  v2.maxTopDownLevels.is_nil = 1;
  v2.minBottomUpLevels.value = 0;
  v2.minBottomUpLevels.is_nil = 1;
  *(_OWORD *)&v2.indentWidth = xmmword_20D9D7490;
  v2.result._object = (void *)0xE000000000000000;
  v2.startOfLine = 1;
  v2.indentLevel = 0;
  v2.quantificationBehavior = _RegexParser_AST_Quantification_Kind_eager;
  v2.inlineMatchingOptions._rawValue = (void *)MEMORY[0x263F8EE78];
  CaptureStructure._print(_:)(&v2);
  uint64_t countAndFlagsBits = v2.result._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::Void __swiftcall CaptureStructure._print(_:)(_RegexParser::PrettyPrinter *a1)
{
  uint64_t countAndFlagsBits = v1->_countAndFlagsBits;
  if (!LOBYTE(v1[1]._object)) {
    goto LABEL_7;
  }
  if (LOBYTE(v1[1]._object) != 1)
  {
    uint64_t v18 = *(void *)(countAndFlagsBits + 16);
    v19._uint64_t countAndFlagsBits = 0x7B20656C707554;
    v19._object = (void *)0xE700000000000000;
    PrettyPrinter.print(_:)(v19);
    Swift::Int indentLevel = a1->indentLevel;
    BOOL v9 = __OFADD__(indentLevel, 1);
    Swift::Int v21 = indentLevel + 1;
    if (v9)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      return;
    }
    a1->Swift::Int indentLevel = v21;
    uint64_t v22 = *(void *)(v18 + 16);
    if (!v22)
    {
LABEL_16:
      BOOL v9 = __OFSUB__(v21, 1);
      Swift::Int v12 = v21 - 1;
      if (!v9)
      {
LABEL_17:
        a1->Swift::Int indentLevel = v12;
        v27._uint64_t countAndFlagsBits = 125;
        v27._object = (void *)0xE100000000000000;
        PrettyPrinter.print(_:)(v27);
        return;
      }
      goto LABEL_25;
    }
    unint64_t v23 = 0;
    uint64_t v24 = (unsigned char *)(v18 + 56);
    while (v23 < *(void *)(v18 + 16))
    {
      ++v23;
      char v25 = *v24;
      uint64_t v26 = *((void *)v24 - 1);
      Swift::String v32 = *(Swift::String *)(v24 - 24);
      uint64_t v33 = v26;
      char v34 = v25;
      CaptureStructure._print(_:)(a1);
      v24 += 32;
      if (v22 == v23)
      {
        Swift::Int v21 = a1->indentLevel;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)(countAndFlagsBits + 16);
  int v5 = *(void **)(countAndFlagsBits + 24);
  uint64_t v6 = *(void *)(countAndFlagsBits + 32);
  uint64_t countAndFlagsBits = *(unsigned __int8 *)(countAndFlagsBits + 40);
  v7._uint64_t countAndFlagsBits = 0x6C616E6F6974704FLL;
  v7._object = (void *)0xEA00000000007B20;
  PrettyPrinter.print(_:)(v7);
  Swift::Int v8 = a1->indentLevel;
  BOOL v9 = __OFADD__(v8, 1);
  Swift::Int v10 = v8 + 1;
  if (v9) {
    goto LABEL_23;
  }
  a1->Swift::Int indentLevel = v10;
  v32._uint64_t countAndFlagsBits = v4;
  v32._object = v5;
  uint64_t v33 = v6;
  char v34 = countAndFlagsBits;
  uint64_t v1 = &v32;
  CaptureStructure._print(_:)(a1);
  Swift::Int v11 = a1->indentLevel;
  BOOL v9 = __OFSUB__(v11, 1);
  Swift::Int v12 = v11 - 1;
  if (!v9) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_7:
  object = v1->_object;
  uint64_t v13 = v1[1]._countAndFlagsBits;
  uint64_t v15 = (void *)0xE90000000000003ELL;
  if (!object)
  {
    uint64_t countAndFlagsBits = 0x64656D616E6E753CLL;
    object = (void *)0xE90000000000003ELL;
    if (v13) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v16 = 0x64657079746E753CLL;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  if (!v13) {
    goto LABEL_19;
  }
LABEL_9:
  v32._uint64_t countAndFlagsBits = v13;
  swift_getCanonicalSpecializedMetadata();
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v15 = v17;
LABEL_20:
  v32._uint64_t countAndFlagsBits = 0x286D6F7441;
  v32._object = (void *)0xE500000000000000;
  v28._uint64_t countAndFlagsBits = countAndFlagsBits;
  v28._object = object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 8250;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = v16;
  v30._object = v15;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  PrettyPrinter.print(_:)(v32);
  swift_bridgeObjectRelease();
}

Swift::String __swiftcall PrettyPrinter.finish()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  _RegexParser::PrettyPrinter v2 = *(void **)(v0 + 48);
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0xE000000000000000;
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.print(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (*(unsigned char *)(v1 + 56) != 1) {
    goto LABEL_4;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 64) * (__int128)*(uint64_t *)(v1 + 32)) >> 64 == (uint64_t)(*(void *)(v1 + 64) * *(void *)(v1 + 32)) >> 63)
  {
    v4._uint64_t countAndFlagsBits = MEMORY[0x210561880](32, 0xE100000000000000);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v1 + 56) = 0;
LABEL_4:
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = countAndFlagsBits;
    v5._object = object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 10;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    *(unsigned char *)(v1 + 56) = 1;
    return;
  }
  __break(1u);
}

void PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  v22._uint64_t countAndFlagsBits = a1;
  v22._object = a2;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a3;
  v14._object = a4;
  String.append(_:)(v14);
  PrettyPrinter.print(_:)(v22);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v7 + 64);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(void *)(v7 + 64) = v17;
  a7(v7);
  uint64_t v18 = *(void *)(v7 + 64);
  BOOL v16 = __OFSUB__(v18, 1);
  uint64_t v19 = v18 - 1;
  if (v16)
  {
LABEL_7:
    __break(1u);
    return;
  }
  *(void *)(v7 + 64) = v19;
  uint64_t v20 = a5;
  uint64_t v21 = a6;

  PrettyPrinter.print(_:)(*(Swift::String *)&v20);
}

void CaptureList._captureStructure.getter(uint64_t a1@<X8>)
{
  uint64_t v20 = *v1;
  int64_t v3 = *(void *)(*v1 + 16);
  if (v3 == 1)
  {
    CaptureList.Capture._captureStructure.getter(a1);
  }
  else if (v3)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    unint64_t v5 = 0;
    int64_t v19 = v3;
    while (v5 < *(void *)(v20 + 16))
    {
      Swift::String v6 = (uint64_t *)(v20 + 32 + 56 * v5);
      uint64_t v7 = v6[3];
      if (v7 < 0) {
        goto LABEL_23;
      }
      uint64_t v8 = v6[1];
      if (v6[2] == MEMORY[0x263F8D980]) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v6[2];
      }
      uint64_t v10 = *v6;
      if (v7)
      {
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v10;
        *(void *)(v11 + 24) = v8;
        *(void *)(v11 + 32) = v9;
        *(unsigned char *)(v11 + 40) = 0;
        uint64_t v9 = v7 - 1;
        if (v7 == 1)
        {
          uint64_t v21 = 0;
          char v12 = 1;
          uint64_t v10 = v11;
        }
        else
        {
          uint64_t v10 = v11;
          do
          {
            uint64_t v13 = swift_allocObject();
            *(void *)(v13 + 24) = 0;
            *(void *)(v13 + 32) = 0;
            *(void *)(v13 + 16) = v10;
            char v12 = 1;
            *(unsigned char *)(v13 + 40) = 1;
            uint64_t v10 = v13;
            --v9;
          }
          while (v9);
          uint64_t v21 = 0;
        }
      }
      else
      {
        char v12 = 0;
        uint64_t v21 = v6[1];
      }
      unint64_t v15 = *(void *)(v22 + 16);
      unint64_t v14 = *(void *)(v22 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
      }
      ++v5;
      *(void *)(v22 + 16) = v15 + 1;
      uint64_t v16 = v22 + 32 * v15;
      *(void *)(v16 + 32) = v10;
      *(void *)(v16 + 40) = v21;
      *(void *)(v16 + 48) = v9;
      *(unsigned char *)(v16 + 56) = v12;
      if (v5 == v19)
      {
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v22;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = v17;
        *(unsigned char *)(a1 + 24) = 2;
        return;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = MEMORY[0x263F8EE78];
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 24) = 2;
  }
}

void CaptureList.Capture._captureStructure.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[3];
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = v1[1];
    if (v1[2] == MEMORY[0x263F8D980]) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v1[2];
    }
    uint64_t v6 = *v1;
    if (v2)
    {
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = v4;
      *(void *)(v7 + 32) = v5;
      *(unsigned char *)(v7 + 40) = 0;
      uint64_t v8 = v2 - 1;
      if (v8)
      {
        uint64_t v6 = v7;
        do
        {
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 24) = 0;
          *(void *)(v11 + 32) = 0;
          *(void *)(v11 + 16) = v6;
          char v10 = 1;
          *(unsigned char *)(v11 + 40) = 1;
          uint64_t v6 = v11;
          --v8;
        }
        while (v8);
        uint64_t v9 = 0;
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v5 = 0;
        char v10 = 1;
        uint64_t v6 = v7;
      }
    }
    else
    {
      char v10 = 0;
      uint64_t v9 = v4;
    }
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v10;
    swift_bridgeObjectRetain();
  }
}

uint64_t AnyType.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyGeneralCategory(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 38)
    {
      v24._uint64_t countAndFlagsBits = 29545;
      v24._unint64_t object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x210561700](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyGeneralCategory(_:)(v32, v34, (char *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 38) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      char v23 = 38;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  Swift::String_optional v26;
  uint64_t countAndFlagsBits;
  unint64_t object;
  void (**v29)(char *, uint64_t);
  Swift::String_optional v30;
  char v32;
  char v33;
  BOOL v35;
  Swift::String v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  char v57 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  uint64_t v7 = MEMORY[0x270FA5388](v5 - 8, v6);
  int8x16_t v55 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v9);
  uint64_t v11 = (char *)&v54 - v10;
  char v12 = type metadata accessor for Unicode.NumericType();
  Swift::String_optional v13 = *(void *)(v12 - 8);
  unint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  int8x16_t v54 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15, v17);
  int8x16_t v56 = (char *)&v54 - v18;
  char v19 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19, v21);
  char v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v64 = 0;
  Swift::String v65 = 0xE000000000000000;
  Swift::String v24 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    Swift::String v24 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v62 = 0;
  uint64_t v63 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = String.Iterator.next()();
  uint64_t result = v26.value._countAndFlagsBits;
  if (!v26.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    unint64_t v36 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyNumericType(_:)(v36._countAndFlagsBits, (uint64_t)v36._object, (uint64_t)v11);
    unint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v37((uint64_t)v11, 1, v12) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v11, &demangling cache variable for type metadata for Unicode.NumericType?);
      v38._uint64_t countAndFlagsBits = 29545;
      v38._unint64_t object = (void *)0xE200000000000000;
      if (!String.hasPrefix(_:)(v38))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      uint64_t v39 = specialized Collection.dropFirst(_:)(2uLL, v36._countAndFlagsBits, (unint64_t)v36._object);
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      unint64_t v46 = MEMORY[0x210561700](v39, v41, v43, v45);
      unint64_t v48 = v47;
      swift_bridgeObjectRelease();
      unint64_t v49 = v55;
      closure #1 in static Parser.classifyNumericType(_:)(v46, v48, v55);
      swift_bridgeObjectRelease();
      if (v37(v49, 1, v12) == 1)
      {
        outlined destroy of _ASTParent?(v49, &demangling cache variable for type metadata for Unicode.NumericType?);
LABEL_38:
        uint64_t v53 = 1;
        uint64_t v52 = v57;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v52, v53, 1, v12);
      }
      unint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
      unint64_t v51 = v54;
      v50(v54, v49, v12);
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
      unint64_t v51 = v56;
      v50(v56, (uint64_t)v11, v12);
    }
    uint64_t v52 = v57;
    v50(v57, (uint64_t)v51, v12);
    uint64_t v53 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v52, v53, 1, v12);
  }
  uint64_t countAndFlagsBits = v26.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v26.value._object;
  uint64_t v29 = (void (**)(char *, uint64_t))(v20 + 8);
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        uint64_t v58 = countAndFlagsBits;
        BOOL v59 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    uint64_t v32 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*v29)(v23, v19);
    if ((v32 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      uint64_t v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v35 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v33 & 1) == 0 && !v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = String.Iterator.next()();
    uint64_t result = v30.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v30.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v30.value._object;
    if (!v30.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  void v36[6];

  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyBoolProperty(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 67)
    {
      v24._uint64_t countAndFlagsBits = 29545;
      v24._unint64_t object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x210561700](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyBoolProperty(_:)(v32, v34, (char *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 67) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      char v23 = 67;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void v35[2];
  void v36[6];
  Swift::String v37;

  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Unicode.POSIXProperty.init(rawValue:)(v22, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 6)
    {
      v24._uint64_t countAndFlagsBits = 29545;
      v24._unint64_t object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x210561700](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        v37._uint64_t countAndFlagsBits = v32;
        v37._unint64_t object = v34;
        uint64_t result = Unicode.POSIXProperty.init(rawValue:)(v37, (char *)v36);
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 6) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      char v23 = 6;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  void v36[6];

  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyScriptProperty(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    char v23 = v36[0];
    if (LOBYTE(v36[0]) == 163)
    {
      v24._uint64_t countAndFlagsBits = 29545;
      v24._unint64_t object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x210561700](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyScriptProperty(_:)(v32, v34, (char *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        char v23 = v36[0];
        if (LOBYTE(v36[0]) != 163) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      char v23 = -93;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[4] = 0;
  v34[5] = 0xE000000000000000;
  uint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v34[0] = a1;
  v34[1] = a2;
  v34[2] = 0;
  v34[3] = v9;
  swift_bridgeObjectRetain();
  Swift::String_optional v11 = String.Iterator.next()();
  uint64_t result = v11.value._countAndFlagsBits;
  if (v11.value._object)
  {
    uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v11.value._object;
    while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
    {
      if ((object & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v33[0] = countAndFlagsBits;
          v33[1] = object & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((countAndFlagsBits & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      Unicode.Scalar.properties.getter();
      char v16 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if ((v16 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v18 = countAndFlagsBits == 45 && object == 0xE100000000000000;
        BOOL v19 = v18;
        if ((v17 & 1) == 0 && !v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          MEMORY[0x2105617C0](countAndFlagsBits, object);
        }
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v14 = String.Iterator.next()();
      uint64_t result = v14.value._countAndFlagsBits;
      uint64_t countAndFlagsBits = v14.value._countAndFlagsBits;
      unint64_t object = (unint64_t)v14.value._object;
      if (!v14.value._object) {
        goto LABEL_31;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v20 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)(v20._countAndFlagsBits, (uint64_t)v20._object, (char *)v34);
    uint64_t v21 = LOBYTE(v34[0]);
    if (LOBYTE(v34[0]) == 2)
    {
      v22._uint64_t countAndFlagsBits = 29545;
      v22._unint64_t object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v22))
      {
        unint64_t v23 = specialized Collection.dropFirst(_:)(2uLL, v20._countAndFlagsBits, (unint64_t)v20._object);
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        uint64_t v30 = MEMORY[0x210561700](v23, v25, v27, v29);
        uint64_t v32 = v31;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)(v30, v32, (char *)v34);
        swift_bridgeObjectRelease();
        return LOBYTE(v34[0]);
      }
      else
      {
        swift_bridgeObjectRelease();
        return 2;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v21;
  }
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  char v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  Swift::String_optional v13 = String.Iterator.next()();
  uint64_t result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v22._countAndFlagsBits, (uint64_t)v22._object, (__int16 *)v36);
    __int16 v23 = v36[0];
    if (LOWORD(v36[0]) == 321)
    {
      v24._uint64_t countAndFlagsBits = 29545;
      v24._unint64_t object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        unint64_t v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = MEMORY[0x210561700](v25, v27, v29, v31);
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v32, v34, (__int16 *)v36);
        uint64_t result = swift_bridgeObjectRelease();
        __int16 v23 = v36[0];
        if (LOWORD(v36[0]) != 321) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      __int16 v23 = 321;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  uint64_t countAndFlagsBits = v13.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v16 = String.Iterator.next()();
    uint64_t result = v16.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v16.value._object;
    if (!v16.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  uint64_t v7 = MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v56 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v9);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v58 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v12 = *(void *)(v58 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v58, v13);
  uint64_t v55 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16);
  char v18 = (char *)&v55 - v17;
  uint64_t v19 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19, v21);
  __int16 v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  uint64_t v24 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v24 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v61 = a1;
  unint64_t v62 = a2;
  uint64_t v63 = 0;
  uint64_t v64 = v24;
  swift_bridgeObjectRetain();
  Swift::String_optional v26 = String.Iterator.next()();
  uint64_t result = v26.value._countAndFlagsBits;
  if (!v26.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v36 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifySpecialPropValue(_:)(v36._countAndFlagsBits, (uint64_t)v36._object, (uint64_t)v11);
    unint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    uint64_t v38 = v58;
    if (v37((uint64_t)v11, 1, v58) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v11, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      v39._uint64_t countAndFlagsBits = 29545;
      v39._unint64_t object = (void *)0xE200000000000000;
      if (!String.hasPrefix(_:)(v39))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      unint64_t v40 = specialized Collection.dropFirst(_:)(2uLL, v36._countAndFlagsBits, (unint64_t)v36._object);
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v47 = MEMORY[0x210561700](v40, v42, v44, v46);
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      uint64_t v50 = v56;
      closure #1 in static Parser.classifySpecialPropValue(_:)(v47, v49, v56);
      swift_bridgeObjectRelease();
      if (v37(v50, 1, v38) == 1)
      {
        outlined destroy of _ASTParent?(v50, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
LABEL_38:
        uint64_t v53 = 1;
        uint64_t v52 = v57;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v52, v53, 1, v38);
      }
      uint64_t v54 = v55;
      outlined init with take of AST.Atom.Kind(v50, v55, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v51 = v54;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with take of AST.Atom.Kind((uint64_t)v11, (uint64_t)v18, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v51 = (uint64_t)v18;
    }
    uint64_t v52 = v57;
    outlined init with take of AST.Atom.Kind(v51, v57, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    uint64_t v53 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v52, v53, 1, v38);
  }
  uint64_t countAndFlagsBits = v26.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v26.value._object;
  uint64_t v29 = (void (**)(char *, uint64_t))(v20 + 8);
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        uint64_t v59 = countAndFlagsBits;
        uint64_t v60 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v32 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*v29)(v23, v19);
    if ((v32 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v35 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v33 & 1) == 0 && !v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v30 = String.Iterator.next()();
    uint64_t result = v30.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v30.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v30.value._object;
    if (!v30.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v69 = a7;
  uint64_t v70 = a8;
  uint64_t v67 = a3;
  uint64_t v68 = a5;
  unint64_t v72 = a4;
  uint64_t v65 = a9;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  uint64_t v16 = MEMORY[0x270FA5388](v14 - 8, v15);
  uint64_t v64 = (uint64_t *)((char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16, v18);
  uint64_t v20 = (uint64_t *)((char *)&v63 - v19);
  uint64_t v71 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v73 = *(void *)(v71 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v71, v21);
  uint64_t v63 = (uint64_t)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v24);
  Swift::String_optional v26 = (char *)&v63 - v25;
  uint64_t v27 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27, v29);
  uint64_t v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = 0;
  unint64_t v81 = 0xE000000000000000;
  uint64_t v32 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v32 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v76 = a1;
  unint64_t v77 = a2;
  uint64_t v78 = 0;
  uint64_t v79 = v32;
  swift_bridgeObjectRetain();
  Swift::String_optional v34 = String.Iterator.next()();
  uint64_t result = v34.value._countAndFlagsBits;
  uint64_t v66 = a6;
  if (!v34.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    Swift::String v43 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in Parser.classifyCharacterProperty(key:value:)(v43._countAndFlagsBits, (uint64_t)v43._object, v67, v72, v68, v69, v70, a10, v20, a11);
    uint64_t v44 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v73 + 48);
    uint64_t v45 = v71;
    if (v44(v20, 1, v71) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v20, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      v46._uint64_t countAndFlagsBits = 29545;
      v46._unint64_t object = (void *)0xE200000000000000;
      if (!String.hasPrefix(_:)(v46))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      unint64_t v47 = specialized Collection.dropFirst(_:)(2uLL, v43._countAndFlagsBits, (unint64_t)v43._object);
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v54 = v51;
      uint64_t v45 = v71;
      uint64_t v55 = MEMORY[0x210561700](v47, v49, v54, v53);
      uint64_t v57 = v56;
      swift_bridgeObjectRelease();
      uint64_t v58 = v64;
      closure #1 in Parser.classifyCharacterProperty(key:value:)(v55, v57, v67, v72, v68, v69, v70, a10, v64, a11);
      swift_bridgeObjectRelease();
      if (v44(v58, 1, v45) == 1)
      {
        outlined destroy of _ASTParent?((uint64_t)v58, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
LABEL_38:
        uint64_t v61 = 1;
        uint64_t v60 = v65;
        goto LABEL_39;
      }
      uint64_t v62 = v63;
      outlined init with take of AST.Atom.Kind((uint64_t)v58, v63, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v59 = v62;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with take of AST.Atom.Kind((uint64_t)v20, (uint64_t)v26, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v59 = (uint64_t)v26;
    }
    uint64_t v60 = v65;
    outlined init with take of AST.Atom.Kind(v59, v65, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    uint64_t v61 = 0;
LABEL_39:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v60, v61, 1, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t countAndFlagsBits = v34.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v34.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        uint64_t v74 = countAndFlagsBits;
        uint64_t v75 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v39 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    if ((v39 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v42 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v40 & 1) == 0 && !v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v37 = String.Iterator.next()();
    uint64_t result = v37.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v37.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v37.value._object;
    if (!v37.value._object) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

unint64_t Character.isPatternWhitespace.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    Unicode.Scalar.properties.getter();
    char v10 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return v10 & 1;
  }
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = 0;
    }
    if (v2 >= v4) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static Parser.classifyGeneralCategory(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = result;
  if (result == 99 && a2 == 0xE100000000000000) {
    goto LABEL_3;
  }
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v6 = 0;
  if (result) {
    goto LABEL_5;
  }
  if (v4 == 0x726568746FLL && a2 == 0xE500000000000000)
  {
LABEL_3:
    char v6 = 0;
  }
  else
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if (result) {
      goto LABEL_5;
    }
    if (v4 == 25443 && a2 == 0xE200000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v4 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000)
    {
LABEL_14:
      char v6 = 1;
      goto LABEL_5;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v8 = v4 == 0x6C72746E63 && a2 == 0xE500000000000000;
    char v6 = 1;
    if ((result & 1) == 0 && !v8)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_14;
      }
      if (v4 == 26211 && a2 == 0xE200000000000000
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x74616D726F66 && a2 == 0xE600000000000000
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 2;
        goto LABEL_5;
      }
      if (v4 == 28259 && a2 == 0xE200000000000000
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x6E67697373616E75 && a2 == 0xEA00000000006465
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 3;
        goto LABEL_5;
      }
      if (v4 == 28515 && a2 == 0xE200000000000000
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x7565746176697270 && a2 == 0xEA00000000006573
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 4;
        goto LABEL_5;
      }
      if (v4 == 29539 && a2 == 0xE200000000000000
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x7461676F72727573 && a2 == 0xE900000000000065
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v6 = 5;
        goto LABEL_5;
      }
      if (v4 == 108 && a2 == 0xE100000000000000)
      {
LABEL_54:
        char v6 = 6;
        goto LABEL_5;
      }
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v9 = v4 == 0x72657474656CLL && a2 == 0xE600000000000000;
      BOOL v10 = v9;
      char v6 = 6;
      if ((result & 1) == 0 && !v10)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_54;
        }
        if (v4 == 25452 && a2 == 0xE200000000000000)
        {
LABEL_66:
          char v6 = 7;
          goto LABEL_5;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v11 = v4 == 9836 && a2 == 0xE200000000000000;
        BOOL v12 = v11;
        char v6 = 7;
        if ((result & 1) == 0 && !v12)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0 || v4 == 0x74656C6465736163 && a2 == 0xEB00000000726574) {
            goto LABEL_66;
          }
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_66;
          }
          if (v4 == 27756 && a2 == 0xE200000000000000
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7361637265776F6CLL && a2 == 0xEF72657474656C65
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            char v6 = 8;
            goto LABEL_5;
          }
          if (v4 == 28012 && a2 == 0xE200000000000000
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7265696669646F6DLL && a2 == 0xEE0072657474656CLL
            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            char v6 = 9;
            goto LABEL_5;
          }
          if (v4 == 28524 && a2 == 0xE200000000000000)
          {
LABEL_104:
            char v6 = 10;
            goto LABEL_5;
          }
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v13 = v4 == 0x74656C726568746FLL && a2 == 0xEB00000000726574;
          BOOL v14 = v13;
          char v6 = 10;
          if ((result & 1) == 0 && !v14)
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_104;
            }
            if (v4 == 29804 && a2 == 0xE200000000000000)
            {
LABEL_116:
              char v6 = 11;
              goto LABEL_5;
            }
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v15 = v4 == 0x736163656C746974 && a2 == 0xEF72657474656C65;
            BOOL v16 = v15;
            char v6 = 11;
            if ((result & 1) == 0 && !v16)
            {
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_116;
              }
              if (v4 == 30060 && a2 == 0xE200000000000000)
              {
LABEL_128:
                char v6 = 12;
                goto LABEL_5;
              }
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v17 = v4 == 0x7361637265707075 && a2 == 0xEF72657474656C65;
              BOOL v18 = v17;
              char v6 = 12;
              if ((result & 1) == 0 && !v18)
              {
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result) {
                  goto LABEL_128;
                }
                if (v4 == 109 && a2 == 0xE100000000000000
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 1802658157 && a2 == 0xE400000000000000
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0x6E696E69626D6F63 && a2 == 0xED00006B72616D67
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  char v6 = 13;
                  goto LABEL_5;
                }
                if (v4 == 25453 && a2 == 0xE200000000000000
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0x6D676E6963617073 && a2 == 0xEB000000006B7261
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  char v6 = 14;
                  goto LABEL_5;
                }
                if (v4 == 25965 && a2 == 0xE200000000000000)
                {
LABEL_157:
                  char v6 = 15;
                  goto LABEL_5;
                }
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v19 = v4 == 0x6E69736F6C636E65 && a2 == 0xED00006B72616D67;
                BOOL v20 = v19;
                char v6 = 15;
                if ((result & 1) == 0 && !v20)
                {
                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if (result) {
                    goto LABEL_157;
                  }
                  if (v4 == 28269 && a2 == 0xE200000000000000
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                    || v4 == 0x69636170736E6F6ELL && a2 == 0xEE006B72616D676ELL
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    char v6 = 16;
                    goto LABEL_5;
                  }
                  if (v4 == 110 && a2 == 0xE100000000000000)
                  {
LABEL_176:
                    char v6 = 17;
                    goto LABEL_5;
                  }
                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v21 = v4 == 0x7265626D756ELL && a2 == 0xE600000000000000;
                  BOOL v22 = v21;
                  char v6 = 17;
                  if ((result & 1) == 0 && !v22)
                  {
                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if (result) {
                      goto LABEL_176;
                    }
                    if (v4 == 25710 && a2 == 0xE200000000000000
                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                      || v4 == 0x6E6C616D69636564 && a2 == 0xED00007265626D75)
                    {
LABEL_191:
                      char v6 = 18;
                      goto LABEL_5;
                    }
                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v23 = v4 == 0x7469676964 && a2 == 0xE500000000000000;
                    BOOL v24 = v23;
                    char v6 = 18;
                    if ((result & 1) == 0 && !v24)
                    {
                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if (result) {
                        goto LABEL_191;
                      }
                      if (v4 == 27758 && a2 == 0xE200000000000000
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x756E72657474656CLL && a2 == 0xEC0000007265626DLL
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                      {
                        char v6 = 19;
                        goto LABEL_5;
                      }
                      if (v4 == 28526 && a2 == 0xE200000000000000
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x6D756E726568746FLL && a2 == 0xEB00000000726562
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                      {
                        char v6 = 20;
                        goto LABEL_5;
                      }
                      if (v4 == 112 && a2 == 0xE100000000000000
                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x74617574636E7570 && a2 == 0xEB000000006E6F69)
                      {
LABEL_220:
                        char v6 = 21;
                        goto LABEL_5;
                      }
                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v25 = v4 == 0x74636E7570 && a2 == 0xE500000000000000;
                      BOOL v26 = v25;
                      char v6 = 21;
                      if ((result & 1) == 0 && !v26)
                      {
                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result) {
                          goto LABEL_220;
                        }
                        if (v4 == 25456 && a2 == 0xE200000000000000
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0xD000000000000014 && a2 == 0x800000020D9E0500
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v6 = 22;
                          goto LABEL_5;
                        }
                        if (v4 == 25712 && a2 == 0xE200000000000000
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0x636E757068736164 && a2 == 0xEF6E6F6974617574
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v6 = 23;
                          goto LABEL_5;
                        }
                        if (v4 == 25968 && a2 == 0xE200000000000000
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0xD000000000000010 && a2 == 0x800000020D9E0520
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v6 = 24;
                          goto LABEL_5;
                        }
                        if (v4 == 26224 && a2 == 0xE200000000000000)
                        {
LABEL_253:
                          char v6 = 25;
                          goto LABEL_5;
                        }
                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v27 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E0540;
                        BOOL v28 = v27;
                        char v6 = 25;
                        if ((result & 1) == 0 && !v28)
                        {
                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if (result) {
                            goto LABEL_253;
                          }
                          if (v4 == 26992 && a2 == 0xE200000000000000
                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                            || v4 == 0xD000000000000012 && a2 == 0x800000020D9E0560
                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                          {
                            char v6 = 26;
                            goto LABEL_5;
                          }
                          if (v4 == 28528 && a2 == 0xE200000000000000)
                          {
LABEL_272:
                            char v6 = 27;
                            goto LABEL_5;
                          }
                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v29 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E0580;
                          BOOL v30 = v29;
                          char v6 = 27;
                          if ((result & 1) == 0 && !v30)
                          {
                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if (result) {
                              goto LABEL_272;
                            }
                            if (v4 == 29552 && a2 == 0xE200000000000000)
                            {
LABEL_284:
                              char v6 = 28;
                              goto LABEL_5;
                            }
                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v31 = v4 == 0x636E75706E65706FLL && a2 == 0xEF6E6F6974617574;
                            BOOL v32 = v31;
                            char v6 = 28;
                            if ((result & 1) == 0 && !v32)
                            {
                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if (result) {
                                goto LABEL_284;
                              }
                              if (v4 == 115 && a2 == 0xE100000000000000)
                              {
LABEL_296:
                                char v6 = 29;
                                goto LABEL_5;
                              }
                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v33 = v4 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
                              BOOL v34 = v33;
                              char v6 = 29;
                              if ((result & 1) == 0 && !v34)
                              {
                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if (result) {
                                  goto LABEL_296;
                                }
                                if (v4 == 25459 && a2 == 0xE200000000000000
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                  || v4 == 0x79636E6572727563 && a2 == 0xEE006C6F626D7973
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  char v6 = 30;
                                  goto LABEL_5;
                                }
                                if (v4 == 27507 && a2 == 0xE200000000000000)
                                {
LABEL_315:
                                  char v6 = 31;
                                  goto LABEL_5;
                                }
                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v35 = v4 == 0x7265696669646F6DLL && a2 == 0xEE006C6F626D7973;
                                BOOL v36 = v35;
                                char v6 = 31;
                                if ((result & 1) == 0 && !v36)
                                {
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if (result) {
                                    goto LABEL_315;
                                  }
                                  if (v4 == 28019 && a2 == 0xE200000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x626D79736874616DLL && a2 == 0xEA00000000006C6FLL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 32;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 28531 && a2 == 0xE200000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x6D7973726568746FLL && a2 == 0xEB000000006C6F62
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 33;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 122 && a2 == 0xE100000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x6F74617261706573 && a2 == 0xE900000000000072
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 34;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 27770 && a2 == 0xE200000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x61706573656E696CLL && a2 == 0xED0000726F746172
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v6 = 35;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 28794 && a2 == 0xE200000000000000)
                                  {
LABEL_355:
                                    char v6 = 36;
                                    goto LABEL_5;
                                  }
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v38 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E05A0;
                                  char v6 = 36;
                                  if ((result & 1) == 0 && !v38)
                                  {
                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if (result) {
                                      goto LABEL_355;
                                    }
                                    if (v4 == 29562 && a2 == 0xE200000000000000
                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      char v6 = 37;
                                    }
                                    else
                                    {
                                      char v6 = 37;
                                      if (v4 != 0x7065736563617073 || a2 != 0xEE00726F74617261)
                                      {
                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if (result) {
                                          char v6 = 37;
                                        }
                                        else {
                                          char v6 = 38;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_5:
  *a3 = v6;
  return result;
}

uint64_t closure #1 in static Parser.classifyNumericType(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 0x6C616D69636564 && a2 == 0xE700000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)MEMORY[0x263F8EA38];
LABEL_7:
    uint64_t v8 = *v7;
    uint64_t v9 = type metadata accessor for Unicode.NumericType();
    uint64_t v16 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 104))(a3, v8, v9);
    BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    goto LABEL_8;
  }
  if (a1 == 0x7469676964 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)MEMORY[0x263F8EA30];
    goto LABEL_7;
  }
  if (a1 == 0x636972656D756ELL && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)MEMORY[0x263F8EA40];
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for Unicode.NumericType();
  BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v13 = v15;
  uint64_t v11 = a3;
  uint64_t v12 = 1;
LABEL_8:

  return v10(v11, v12, 1, v13);
}

uint64_t closure #1 in static Parser.classifyBoolProperty(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (result == 2019911777 && a2 == 0xE400000000000000) {
    goto LABEL_8;
  }
  uint64_t v6 = result;
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v7 = 0;
  if ((result & 1) == 0)
  {
    if (v6 == 0x7865686969637361 && a2 == 0xED00007469676964)
    {
LABEL_8:
      char v7 = 0;
      goto LABEL_9;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v7 = 0;
    if (result) {
      goto LABEL_9;
    }
    if (v6 == 0x6168706C61 && a2 == 0xE500000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x7465626168706C61 && a2 == 0xEA00000000006369
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 1;
      goto LABEL_9;
    }
    if (v6 == 0x6369646962 && a2 == 0xE500000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x746E6F6369646962 && a2 == 0xEB000000006C6F72
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 2;
      goto LABEL_9;
    }
    if (v6 == 0x6D69646962 && a2 == 0xE500000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x7272696D69646962 && a2 == 0xEC0000006465726FLL
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 3;
      goto LABEL_9;
    }
    if (v6 == 0x6465736163 && a2 == 0xE500000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 4;
      goto LABEL_9;
    }
    if (v6 == 25955 && a2 == 0xE200000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0xD000000000000014 && a2 == 0x800000020D9E1840
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 5;
      goto LABEL_9;
    }
    if (v6 == 26979 && a2 == 0xE200000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x6F6E676965736163 && a2 == 0xED0000656C626172
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 6;
      goto LABEL_9;
    }
    if (v6 == 0x7865706D6F63 && a2 == 0xE600000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || (unint64_t result = 0xD000000000000018, v6 == 0xD000000000000018) && a2 == 0x800000020D9E1860
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 24;
      goto LABEL_9;
    }
    if (v6 == 1717794659 && a2 == 0xE400000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0xD000000000000015 && a2 == 0x800000020D9E1880
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v7 = 7;
      goto LABEL_9;
    }
    if (v6 == 1835235171 && a2 == 0xE400000000000000)
    {
LABEL_75:
      char v7 = 8;
      goto LABEL_9;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v8 = v6 == 0xD000000000000015 && a2 == 0x800000020D9E18A0;
    BOOL v9 = v8;
    char v7 = 8;
    if ((result & 1) == 0 && !v9)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_75;
      }
      if (v6 == 0x66636B7763 && a2 == 0xE500000000000000
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v6 == 0xD000000000000019 && a2 == 0x800000020D9E18C0
        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        char v7 = 9;
        goto LABEL_9;
      }
      if (v6 == 7108451 && a2 == 0xE300000000000000)
      {
LABEL_94:
        char v7 = 10;
        goto LABEL_9;
      }
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v10 = v6 == 0xD000000000000015 && a2 == 0x800000020D9E18E0;
      BOOL v11 = v10;
      char v7 = 10;
      if ((result & 1) == 0 && !v11)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_94;
        }
        if (v6 == 7632739 && a2 == 0xE300000000000000)
        {
LABEL_106:
          char v7 = 11;
          goto LABEL_9;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v12 = v6 == 0xD000000000000015 && a2 == 0x800000020D9E1900;
        BOOL v13 = v12;
        char v7 = 11;
        if ((result & 1) == 0 && !v13)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_106;
          }
          unint64_t result = 7698275;
          if (v6 == 7698275 && a2 == 0xE300000000000000)
          {
LABEL_118:
            char v7 = 12;
            goto LABEL_9;
          }
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v14 = v6 == 0xD000000000000015 && a2 == 0x800000020D9E1920;
          BOOL v15 = v14;
          char v7 = 12;
          if ((result & 1) == 0 && !v15)
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_118;
            }
            if (v6 == 1752392036 && a2 == 0xE400000000000000
              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              char v7 = 13;
              goto LABEL_9;
            }
            if (v6 == 7365988 && a2 == 0xE300000000000000
              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v6 == 0x7461636572706564 && a2 == 0xEA00000000006465
              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              char v7 = 14;
              goto LABEL_9;
            }
            if (v6 == 26980 && a2 == 0xE200000000000000)
            {
LABEL_141:
              char v7 = 15;
              goto LABEL_9;
            }
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v16 = v6 == 0xD000000000000019 && a2 == 0x800000020D9E1940;
            BOOL v17 = v16;
            char v7 = 15;
            if ((result & 1) == 0 && !v17)
            {
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_141;
              }
              if (v6 == 6383972 && a2 == 0xE300000000000000
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x6974697263616964 && a2 == 0xE900000000000063
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 16;
                goto LABEL_9;
              }
              if (v6 == 0x6573616265 && a2 == 0xE500000000000000
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0xD000000000000011 && a2 == 0x800000020D9E1960
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 17;
                goto LABEL_9;
              }
              if (v6 == 0x706D6F6365 && a2 == 0xE500000000000000
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x6D6F63696A6F6D65 && a2 == 0xEE00746E656E6F70
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 18;
                goto LABEL_9;
              }
              if (v6 == 1685024101 && a2 == 0xE400000000000000
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x646F6D696A6F6D65 && a2 == 0xED00007265696669
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 19;
                goto LABEL_9;
              }
              if (v6 == 0x696A6F6D65 && a2 == 0xE500000000000000
                || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v7 = 20;
                goto LABEL_9;
              }
              if (v6 == 0x7365727065 && a2 == 0xE500000000000000)
              {
LABEL_185:
                char v7 = 21;
                goto LABEL_9;
              }
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v18 = v6 == 0xD000000000000011 && a2 == 0x800000020D9E1980;
              BOOL v19 = v18;
              char v7 = 21;
              if ((result & 1) == 0 && !v19)
              {
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result) {
                  goto LABEL_185;
                }
                unint64_t result = 7632997;
                if (v6 == 7632997 && a2 == 0xE300000000000000
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v6 == 0x7265646E65747865 && a2 == 0xE800000000000000
                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  char v7 = 22;
                  goto LABEL_9;
                }
                if (v6 == 0x74636970747865 && a2 == 0xE700000000000000)
                {
LABEL_204:
                  char v7 = 23;
                  goto LABEL_9;
                }
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v20 = v6 == 0xD000000000000014 && a2 == 0x800000020D9E19A0;
                BOOL v21 = v20;
                char v7 = 23;
                if ((result & 1) == 0 && !v21)
                {
                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if (result) {
                    goto LABEL_204;
                  }
                  if (v6 == 0x657361627267 && a2 == 0xE600000000000000
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                    || v6 == 0x656D656870617267 && a2 == 0xEC00000065736162
                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    char v7 = 25;
                    goto LABEL_9;
                  }
                  if (v6 == 0x7478657267 && a2 == 0xE500000000000000)
                  {
LABEL_223:
                    char v7 = 26;
                    goto LABEL_9;
                  }
                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v22 = v6 == 0x656D656870617267 && a2 == 0xEE00646E65747865;
                  BOOL v23 = v22;
                  char v7 = 26;
                  if ((result & 1) == 0 && !v23)
                  {
                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if (result) {
                      goto LABEL_223;
                    }
                    if (v6 == 0x6B6E696C7267 && a2 == 0xE600000000000000)
                    {
LABEL_235:
                      char v7 = 27;
                      goto LABEL_9;
                    }
                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v24 = v6 == 0x656D656870617267 && a2 == 0xEC0000006B6E696CLL;
                    BOOL v25 = v24;
                    char v7 = 27;
                    if ((result & 1) == 0 && !v25)
                    {
                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if (result) {
                        goto LABEL_235;
                      }
                      if (v6 == 7890280 && a2 == 0xE300000000000000)
                      {
LABEL_247:
                        char v7 = 28;
                        goto LABEL_9;
                      }
                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v26 = v6 == 0x7469676964786568 && a2 == 0xE800000000000000;
                      BOOL v27 = v26;
                      char v7 = 28;
                      if ((result & 1) == 0 && !v27)
                      {
                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result) {
                          goto LABEL_247;
                        }
                        if (v6 == 0x6E6568707968 && a2 == 0xE600000000000000
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v7 = 29;
                          goto LABEL_9;
                        }
                        if (v6 == 6513769 && a2 == 0xE300000000000000
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v6 == 0x6E69746E6F636469 && a2 == 0xEA00000000006575
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v7 = 30;
                          goto LABEL_9;
                        }
                        if (v6 == 1868915817 && a2 == 0xE400000000000000
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v6 == 0x706172676F656469 && a2 == 0xEB00000000636968
                          || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          char v7 = 31;
                          goto LABEL_9;
                        }
                        if (v6 == 7562345 && a2 == 0xE300000000000000)
                        {
LABEL_277:
                          char v7 = 32;
                          goto LABEL_9;
                        }
                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v28 = v6 == 0x74726174736469 && a2 == 0xE700000000000000;
                        BOOL v29 = v28;
                        char v7 = 32;
                        if ((result & 1) == 0 && !v29)
                        {
                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if (result) {
                            goto LABEL_277;
                          }
                          if (v6 == 1651729513 && a2 == 0xE400000000000000)
                          {
LABEL_289:
                            char v7 = 33;
                            goto LABEL_9;
                          }
                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v30 = v6 == 0xD000000000000011 && a2 == 0x800000020D9E19C0;
                          BOOL v31 = v30;
                          char v7 = 33;
                          if ((result & 1) == 0 && !v31)
                          {
                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if (result) {
                              goto LABEL_289;
                            }
                            if (v6 == 1953719401 && a2 == 0xE400000000000000
                              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                              || (unint64_t result = 0xD000000000000012, v6 == 0xD000000000000012)
                              && a2 == 0x800000020D9E19E0
                              || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                            {
                              char v7 = 34;
                              goto LABEL_9;
                            }
                            if (v6 == 0x636E696F6ALL && a2 == 0xE500000000000000)
                            {
LABEL_308:
                              char v7 = 35;
                              goto LABEL_9;
                            }
                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v32 = v6 == 0x746E6F636E696F6ALL && a2 == 0xEB000000006C6F72;
                            BOOL v33 = v32;
                            char v7 = 35;
                            if ((result & 1) == 0 && !v33)
                            {
                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if (result) {
                                goto LABEL_308;
                              }
                              if (v6 == 6647660 && a2 == 0xE300000000000000)
                              {
LABEL_320:
                                char v7 = 36;
                                goto LABEL_9;
                              }
                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v34 = v6 == 0xD000000000000015 && a2 == 0x800000020D9E1A00;
                              BOOL v35 = v34;
                              char v7 = 36;
                              if ((result & 1) == 0 && !v35)
                              {
                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if (result) {
                                  goto LABEL_320;
                                }
                                if (v6 == 0x7265776F6CLL && a2 == 0xE500000000000000
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                  || v6 == 0x7361637265776F6CLL && a2 == 0xE900000000000065
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  char v7 = 37;
                                  goto LABEL_9;
                                }
                                if (v6 == 1752457581 && a2 == 0xE400000000000000
                                  || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  char v7 = 38;
                                  goto LABEL_9;
                                }
                                if (v6 == 0x726168636ELL && a2 == 0xE500000000000000)
                                {
LABEL_343:
                                  char v7 = 39;
                                  goto LABEL_9;
                                }
                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v36 = v6 == 0xD000000000000015 && a2 == 0x800000020D9E1A20;
                                BOOL v37 = v36;
                                char v7 = 39;
                                if ((result & 1) == 0 && !v37)
                                {
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if (result) {
                                    goto LABEL_343;
                                  }
                                  if (v6 == 0x6168706C616FLL && a2 == 0xE600000000000000)
                                  {
                                    char v7 = 40;
                                    goto LABEL_9;
                                  }
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0
                                    || v6 == 0x706C61726568746FLL && a2 == 0xEF63697465626168
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 40;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 6906991 && a2 == 0xE300000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || (unint64_t result = 0xD00000000000001ELL, v6 == 0xD00000000000001ELL)
                                    && a2 == 0x800000020D9E1A40
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 41;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x74786572676FLL && a2 == 0xE600000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0xD000000000000013 && a2 == 0x800000020D9E1A60
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 42;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 1667524975 && a2 == 0xE400000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x636469726568746FLL && a2 == 0xEF65756E69746E6FLL
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 43;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 1935960431 && a2 == 0xE400000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x736469726568746FLL && a2 == 0xEC00000074726174
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 44;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x7265776F6C6FLL && a2 == 0xE600000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x776F6C726568746FLL && a2 == 0xEE00657361637265
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 45;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x6874616D6FLL && a2 == 0xE500000000000000
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x74616D726568746FLL && a2 == 0xE900000000000068
                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v7 = 46;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x72657070756FLL && a2 == 0xE600000000000000)
                                  {
LABEL_405:
                                    char v7 = 47;
                                    goto LABEL_9;
                                  }
                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v38 = v6 == 0x707075726568746FLL && a2 == 0xEE00657361637265;
                                  BOOL v39 = v38;
                                  char v7 = 47;
                                  if ((result & 1) == 0 && !v39)
                                  {
                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if (result) {
                                      goto LABEL_405;
                                    }
                                    if (v6 == 0x6E7973746170 && a2 == 0xE600000000000000
                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                      || v6 == 0x736E726574746170 && a2 == 0xED00007861746E79
                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      char v7 = 48;
                                      goto LABEL_9;
                                    }
                                    if (v6 == 0x7377746170 && a2 == 0xE500000000000000)
                                    {
LABEL_424:
                                      char v7 = 49;
                                      goto LABEL_9;
                                    }
                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v40 = v6 == 0xD000000000000011 && a2 == 0x800000020D9E1A80;
                                    BOOL v41 = v40;
                                    char v7 = 49;
                                    if ((result & 1) == 0 && !v41)
                                    {
                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if (result) {
                                        goto LABEL_424;
                                      }
                                      if (v6 == 7168880 && a2 == 0xE300000000000000
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || (unint64_t result = 0xD00000000000001ALL, v6 == 0xD00000000000001ALL)
                                        && a2 == 0x800000020D9E1AA0
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v7 = 50;
                                        goto LABEL_9;
                                      }
                                      if (v6 == 0x6B72616D71 && a2 == 0xE500000000000000
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || v6 == 0x6F697461746F7571 && a2 == 0xED00006B72616D6ELL
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v7 = 51;
                                        goto LABEL_9;
                                      }
                                      if (v6 == 0x6C616369646172 && a2 == 0xE700000000000000
                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v7 = 52;
                                        goto LABEL_9;
                                      }
                                      if (v6 == 26994 && a2 == 0xE200000000000000)
                                      {
LABEL_454:
                                        char v7 = 53;
                                        goto LABEL_9;
                                      }
                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      BOOL v42 = v6 == 0xD000000000000011 && a2 == 0x800000020D9E1AC0;
                                      BOOL v43 = v42;
                                      char v7 = 53;
                                      if ((result & 1) == 0 && !v43)
                                      {
                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if (result) {
                                          goto LABEL_454;
                                        }
                                        if (v6 == 25715 && a2 == 0xE200000000000000)
                                        {
LABEL_466:
                                          char v7 = 54;
                                          goto LABEL_9;
                                        }
                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        BOOL v44 = v6 == 0x74746F6474666F73 && a2 == 0xEA00000000006465;
                                        BOOL v45 = v44;
                                        char v7 = 54;
                                        if ((result & 1) == 0 && !v45)
                                        {
                                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if (result) {
                                            goto LABEL_466;
                                          }
                                          if (v6 == 0x6D72657473 && a2 == 0xE500000000000000
                                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                            || v6 == 0xD000000000000010 && a2 == 0x800000020D9E1AE0
                                            || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                          {
                                            char v7 = 55;
                                            goto LABEL_9;
                                          }
                                          if (v6 == 1836213620 && a2 == 0xE400000000000000)
                                          {
LABEL_485:
                                            char v7 = 56;
                                            goto LABEL_9;
                                          }
                                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          BOOL v46 = v6 == 0xD000000000000013 && a2 == 0x800000020D9E1B00;
                                          BOOL v47 = v46;
                                          char v7 = 56;
                                          if ((result & 1) == 0 && !v47)
                                          {
                                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if (result) {
                                              goto LABEL_485;
                                            }
                                            if (v6 == 0x6F65646975 && a2 == 0xE500000000000000)
                                            {
LABEL_497:
                                              char v7 = 57;
                                              goto LABEL_9;
                                            }
                                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            BOOL v48 = v6 == 0xD000000000000010 && a2 == 0x800000020D9E1B20;
                                            BOOL v49 = v48;
                                            char v7 = 57;
                                            if ((result & 1) == 0 && !v49)
                                            {
                                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              if (result) {
                                                goto LABEL_497;
                                              }
                                              if (v6 == 0x7265707075 && a2 == 0xE500000000000000)
                                              {
LABEL_509:
                                                char v7 = 58;
                                                goto LABEL_9;
                                              }
                                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              BOOL v50 = v6 == 0x7361637265707075 && a2 == 0xE900000000000065;
                                              BOOL v51 = v50;
                                              char v7 = 58;
                                              if ((result & 1) == 0 && !v51)
                                              {
                                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if (result) {
                                                  goto LABEL_509;
                                                }
                                                if (v6 == 29558 && a2 == 0xE200000000000000)
                                                {
LABEL_521:
                                                  char v7 = 59;
                                                  goto LABEL_9;
                                                }
                                                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                BOOL v52 = v6 == 0xD000000000000011 && a2 == 0x800000020D9E1B40;
                                                BOOL v53 = v52;
                                                char v7 = 59;
                                                if ((result & 1) == 0 && !v53)
                                                {
                                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if (result) {
                                                    goto LABEL_521;
                                                  }
                                                  if (v6 == 0x656361707377 && a2 == 0xE600000000000000
                                                    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v6 == 0x6170736574696877 && a2 == 0xEA00000000006563)
                                                  {
LABEL_536:
                                                    char v7 = 60;
                                                    goto LABEL_9;
                                                  }
                                                  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  BOOL v54 = v6 == 0x6563617073 && a2 == 0xE500000000000000;
                                                  BOOL v55 = v54;
                                                  char v7 = 60;
                                                  if ((result & 1) == 0 && !v55)
                                                  {
                                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    if (result) {
                                                      goto LABEL_536;
                                                    }
                                                    unint64_t result = 1667524984;
                                                    if (v6 == 1667524984 && a2 == 0xE400000000000000
                                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || v6 == 0x69746E6F63646978 && a2 == 0xEB0000000065756ELL
                                                      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      char v7 = 61;
                                                      goto LABEL_9;
                                                    }
                                                    unint64_t result = 1935960440;
                                                    if (v6 == 1935960440 && a2 == 0xE400000000000000)
                                                    {
LABEL_555:
                                                      char v7 = 62;
                                                      goto LABEL_9;
                                                    }
                                                    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    BOOL v56 = v6 == 0x7472617473646978 && a2 == 0xE800000000000000;
                                                    BOOL v57 = v56;
                                                    char v7 = 62;
                                                    if ((result & 1) == 0 && !v57)
                                                    {
                                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if (result) {
                                                        goto LABEL_555;
                                                      }
                                                      if (v6 == 0x63666E6F78 && a2 == 0xE500000000000000
                                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                            (result & 1) != 0)
                                                        || v6 == 0x6F73646E61707865 && a2 == 0xEC00000063666E6ELL
                                                        || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                            (result & 1) != 0))
                                                      {
                                                        char v7 = 63;
                                                        goto LABEL_9;
                                                      }
                                                      if (v6 == 0x64666E6F78 && a2 == 0xE500000000000000)
                                                      {
LABEL_574:
                                                        char v7 = 64;
                                                        goto LABEL_9;
                                                      }
                                                      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      BOOL v58 = v6 == 0x6F73646E61707865 && a2 == 0xEC00000064666E6ELL;
                                                      BOOL v59 = v58;
                                                      char v7 = 64;
                                                      if ((result & 1) == 0 && !v59)
                                                      {
                                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if (result) {
                                                          goto LABEL_574;
                                                        }
                                                        if (v6 == 0x636B666E6F78 && a2 == 0xE600000000000000)
                                                        {
LABEL_586:
                                                          char v7 = 65;
                                                          goto LABEL_9;
                                                        }
                                                        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        BOOL v61 = v6 == 0x6F73646E61707865 && a2 == 0xED0000636B666E6ELL;
                                                        char v7 = 65;
                                                        if ((result & 1) == 0 && !v61)
                                                        {
                                                          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if (result) {
                                                            goto LABEL_586;
                                                          }
                                                          if (v6 == 0x646B666E6F78 && a2 == 0xE600000000000000)
                                                          {
                                                            char v7 = 66;
                                                          }
                                                          else
                                                          {
                                                            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            BOOL v63 = v6 == 0x6F73646E61707865
                                                               && a2 == 0xED0000646B666E6ELL;
                                                            char v7 = 66;
                                                            if ((result & 1) == 0 && !v63)
                                                            {
                                                              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if (result) {
                                                                char v7 = 66;
                                                              }
                                                              else {
                                                                char v7 = 67;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = result;
  if (result == 116 && a2 == 0xE100000000000000) {
    goto LABEL_6;
  }
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0 || v4 == 1702195828 && a2 == 0xE400000000000000) {
    goto LABEL_6;
  }
  unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v8 = v4 == 121 && a2 == 0xE100000000000000;
  char v6 = 1;
  if ((result & 1) == 0 && !v8)
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0
      || v4 == 7562617 && a2 == 0xE300000000000000
      || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_6:
      char v6 = 1;
      goto LABEL_7;
    }
    if (v4 == 102 && a2 == 0xE100000000000000) {
      goto LABEL_22;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if (result) {
      goto LABEL_7;
    }
    if (v4 == 0x65736C6166 && a2 == 0xE500000000000000) {
      goto LABEL_22;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    BOOL v10 = v4 == 110 && a2 == 0xE100000000000000;
    if ((result & 1) == 0 && !v10)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v6 = 0;
      if ((result & 1) == 0)
      {
        if (v4 != 28526 || a2 != 0xE200000000000000)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            char v6 = 0;
          }
          else {
            char v6 = 2;
          }
          goto LABEL_7;
        }
LABEL_22:
        char v6 = 0;
      }
    }
  }
LABEL_7:
  *a3 = v6;
  return result;
}

uint64_t Unicode.POSIXProperty.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Unicode.POSIXProperty.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 6;
  if (v5 < 6) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t closure #1 in static Parser.classifyScriptProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result = 1835820129;
  if (a1 == 1835820129 && a2 == 0xE400000000000000) {
    goto LABEL_8;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v8 = 0;
  if ((result & 1) == 0)
  {
    if (a1 == 0x6D616C6461 && a2 == 0xE500000000000000)
    {
LABEL_8:
      char v8 = 0;
      goto LABEL_9;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v8 = 0;
    if (result) {
      goto LABEL_9;
    }
    if (a1 == 1651009377 && a2 == 0xE400000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0xD000000000000011 && a2 == 0x800000020D9E03C0
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 19;
      goto LABEL_9;
    }
    if (a1 == 1836017761 && a2 == 0xE400000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 1;
      goto LABEL_9;
    }
    if (a1 == 1650553441 && a2 == 0xE400000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x636962617261 && a2 == 0xE600000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 3;
      goto LABEL_9;
    }
    if (a1 == 1768780385 && a2 == 0xE400000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6C61697265706D69 && a2 == 0xEF6369616D617261
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 54;
      goto LABEL_9;
    }
    uint64_t result = 1852666465;
    if (a1 == 1852666465 && a2 == 0xE400000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6E61696E656D7261 && a2 == 0xE800000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 4;
      goto LABEL_9;
    }
    if (a1 == 1953724001 && a2 == 0xE400000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6E617473657661 && a2 == 0xE700000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      char v8 = 5;
      goto LABEL_9;
    }
    if (a1 == 1768710498 && a2 == 0xE400000000000000)
    {
LABEL_52:
      char v8 = 6;
      goto LABEL_9;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v9 = a1 == 0x6573656E696C6162 && a2 == 0xE800000000000000;
    BOOL v10 = v9;
    char v8 = 6;
    if ((result & 1) == 0 && !v10)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_52;
      }
      if (a1 == 1970102626 && a2 == 0xE400000000000000)
      {
LABEL_64:
        char v8 = 7;
        goto LABEL_9;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v11 = a1 == 0x6D756D6162 && a2 == 0xE500000000000000;
      BOOL v12 = v11;
      char v8 = 7;
      if ((result & 1) == 0 && !v12)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_64;
        }
        if (a1 == 1936941410 && a2 == 0xE400000000000000)
        {
LABEL_76:
          char v8 = 8;
          goto LABEL_9;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v13 = a1 == 0x6861766173736162 && a2 == 0xE800000000000000;
        BOOL v14 = v13;
        char v8 = 8;
        if ((result & 1) == 0 && !v14)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_76;
          }
          if (a1 == 1802789218 && a2 == 0xE400000000000000)
          {
LABEL_97:
            char v8 = 9;
            goto LABEL_9;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v15 = a1 == 0x6B61746162 && a2 == 0xE500000000000000;
          BOOL v16 = v15;
          char v8 = 9;
          if ((result & 1) == 0 && !v16)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_97;
            }
            uint64_t result = 1735288162;
            if (a1 == 1735288162 && a2 == 0xE400000000000000)
            {
LABEL_109:
              char v8 = 10;
              goto LABEL_9;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v17 = a1 == 0x696C61676E6562 && a2 == 0xE700000000000000;
            BOOL v18 = v17;
            char v8 = 10;
            if ((result & 1) == 0 && !v18)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_109;
              }
              if (a1 == 1936418914 && a2 == 0xE400000000000000
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || a1 == 0x6B75736B69616862 && a2 == 0xE900000000000069
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                char v8 = 11;
                goto LABEL_9;
              }
              if (a1 == 1869639522 && a2 == 0xE400000000000000)
              {
LABEL_128:
                char v8 = 12;
                goto LABEL_9;
              }
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v19 = a1 == 0x6F666F6D6F706F62 && a2 == 0xE800000000000000;
              BOOL v20 = v19;
              char v8 = 12;
              if ((result & 1) == 0 && !v20)
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result) {
                  goto LABEL_128;
                }
                if (a1 == 1751216738 && a2 == 0xE400000000000000)
                {
LABEL_140:
                  char v8 = 13;
                  goto LABEL_9;
                }
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v21 = a1 == 0x696D68617262 && a2 == 0xE600000000000000;
                BOOL v22 = v21;
                char v8 = 13;
                if ((result & 1) == 0 && !v22)
                {
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if (result) {
                    goto LABEL_140;
                  }
                  if (a1 == 1767993954 && a2 == 0xE400000000000000)
                  {
LABEL_152:
                    char v8 = 14;
                    goto LABEL_9;
                  }
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v23 = a1 == 0x656C6C69617262 && a2 == 0xE700000000000000;
                  BOOL v24 = v23;
                  char v8 = 14;
                  if ((result & 1) == 0 && !v24)
                  {
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if (result) {
                      goto LABEL_152;
                    }
                    if (a1 == 1768387938 && a2 == 0xE400000000000000)
                    {
LABEL_164:
                      char v8 = 15;
                      goto LABEL_9;
                    }
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v25 = a1 == 0x6573656E69677562 && a2 == 0xE800000000000000;
                    BOOL v26 = v25;
                    char v8 = 15;
                    if ((result & 1) == 0 && !v26)
                    {
                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if (result) {
                        goto LABEL_164;
                      }
                      if (a1 == 1684567394 && a2 == 0xE400000000000000)
                      {
LABEL_176:
                        char v8 = 16;
                        goto LABEL_9;
                      }
                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v27 = a1 == 0x6469687562 && a2 == 0xE500000000000000;
                      BOOL v28 = v27;
                      char v8 = 16;
                      if ((result & 1) == 0 && !v28)
                      {
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result) {
                          goto LABEL_176;
                        }
                        if (a1 == 1835753827 && a2 == 0xE400000000000000)
                        {
LABEL_188:
                          char v8 = 20;
                          goto LABEL_9;
                        }
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v29 = a1 == 0x616D6B616863 && a2 == 0xE600000000000000;
                        BOOL v30 = v29;
                        char v8 = 20;
                        if ((result & 1) == 0 && !v30)
                        {
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if (result) {
                            goto LABEL_188;
                          }
                          if (a1 == 1936613731 && a2 == 0xE400000000000000
                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                            || a1 == 0xD000000000000012 && a2 == 0x800000020D9E03E0
                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                          {
                            char v8 = 17;
                            goto LABEL_9;
                          }
                          if (a1 == 1769103715 && a2 == 0xE400000000000000)
                          {
LABEL_207:
                            char v8 = 18;
                            goto LABEL_9;
                          }
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v31 = a1 == 0x6E6169726163 && a2 == 0xE600000000000000;
                          BOOL v32 = v31;
                          char v8 = 18;
                          if ((result & 1) == 0 && !v32)
                          {
                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if (result) {
                              goto LABEL_207;
                            }
                            uint64_t result = 1835100259;
                            if (a1 == 1835100259 && a2 == 0xE400000000000000
                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                            {
                              char v8 = 21;
                              goto LABEL_9;
                            }
                            if (a1 == 1919248483 && a2 == 0xE400000000000000)
                            {
LABEL_223:
                              char v8 = 22;
                              goto LABEL_9;
                            }
                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v33 = a1 == 0x65656B6F72656863 && a2 == 0xE800000000000000;
                            BOOL v34 = v33;
                            char v8 = 22;
                            if ((result & 1) == 0 && !v34)
                            {
                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if (result) {
                                goto LABEL_223;
                              }
                              if (a1 == 1936877667 && a2 == 0xE400000000000000
                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                || a1 == 0x696D7361726F6863 && a2 == 0xEA00000000006E61
                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                              {
                                char v8 = 23;
                                goto LABEL_9;
                              }
                              if (a1 == 1953525603 && a2 == 0xE400000000000000)
                              {
LABEL_250:
                                char v8 = 25;
                                goto LABEL_9;
                              }
                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v35 = a1 == 0x636974706F63 && a2 == 0xE600000000000000;
                              BOOL v36 = v35;
                              char v8 = 25;
                              if ((result & 1) == 0 && !v36)
                              {
                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v37 = a1 == 1667326321 && a2 == 0xE400000000000000;
                                BOOL v38 = v37;
                                char v8 = 25;
                                if ((result & 1) == 0 && !v38)
                                {
                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if (result) {
                                    goto LABEL_250;
                                  }
                                  if (a1 == 1852665955 && a2 == 0xE400000000000000
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || a1 == 0x6E696D6F72707963 && a2 == 0xEB000000006E616FLL
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    char v8 = 29;
                                    goto LABEL_9;
                                  }
                                  if (a1 == 1953656931 && a2 == 0xE400000000000000)
                                  {
LABEL_269:
                                    char v8 = 27;
                                    goto LABEL_9;
                                  }
                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v39 = a1 == 0x746F6972707963 && a2 == 0xE700000000000000;
                                  BOOL v40 = v39;
                                  char v8 = 27;
                                  if ((result & 1) == 0 && !v40)
                                  {
                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if (result) {
                                      goto LABEL_269;
                                    }
                                    if (a1 == 1819441507 && a2 == 0xE400000000000000)
                                    {
LABEL_281:
                                      char v8 = 28;
                                      goto LABEL_9;
                                    }
                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v41 = a1 == 0x63696C6C69727963 && a2 == 0xE800000000000000;
                                    BOOL v42 = v41;
                                    char v8 = 28;
                                    if ((result & 1) == 0 && !v42)
                                    {
                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if (result) {
                                        goto LABEL_281;
                                      }
                                      uint64_t result = 1635149156;
                                      if (a1 == 1635149156 && a2 == 0xE400000000000000
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || a1 == 0x6167616E61766564 && a2 == 0xEA00000000006972
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v8 = 31;
                                        goto LABEL_9;
                                      }
                                      if (a1 == 1801546084 && a2 == 0xE400000000000000
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || a1 == 0x756B617365766964 && a2 == 0xEA00000000007572
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        char v8 = 32;
                                        goto LABEL_9;
                                      }
                                      if (a1 == 1919381348 && a2 == 0xE400000000000000)
                                      {
LABEL_307:
                                        char v8 = 33;
                                        goto LABEL_9;
                                      }
                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      BOOL v43 = a1 == 0x6172676F64 && a2 == 0xE500000000000000;
                                      BOOL v44 = v43;
                                      char v8 = 33;
                                      if ((result & 1) == 0 && !v44)
                                      {
                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if (result) {
                                          goto LABEL_307;
                                        }
                                        uint64_t result = 1953657700;
                                        if (a1 == 1953657700 && a2 == 0xE400000000000000)
                                        {
LABEL_319:
                                          char v8 = 30;
                                          goto LABEL_9;
                                        }
                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        BOOL v45 = a1 == 0x74657265736564 && a2 == 0xE700000000000000;
                                        BOOL v46 = v45;
                                        char v8 = 30;
                                        if ((result & 1) == 0 && !v46)
                                        {
                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if (result) {
                                            goto LABEL_319;
                                          }
                                          if (a1 == 1819309412 && a2 == 0xE400000000000000)
                                          {
LABEL_331:
                                            char v8 = 34;
                                            goto LABEL_9;
                                          }
                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          BOOL v47 = a1 == 0x6E61796F6C707564 && a2 == 0xE800000000000000;
                                          BOOL v48 = v47;
                                          char v8 = 34;
                                          if ((result & 1) == 0 && !v48)
                                          {
                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if (result) {
                                              goto LABEL_331;
                                            }
                                            if (a1 == 1887004517 && a2 == 0xE400000000000000
                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                  (result & 1) != 0)
                                              || a1 == 0xD000000000000013 && a2 == 0x800000020D9E0400
                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                  (result & 1) != 0))
                                            {
                                              char v8 = 35;
                                              goto LABEL_9;
                                            }
                                            if (a1 == 1633840229 && a2 == 0xE400000000000000)
                                            {
LABEL_350:
                                              char v8 = 36;
                                              goto LABEL_9;
                                            }
                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            BOOL v49 = a1 == 0x6E617361626C65 && a2 == 0xE700000000000000;
                                            BOOL v50 = v49;
                                            char v8 = 36;
                                            if ((result & 1) == 0 && !v50)
                                            {
                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              if (result) {
                                                goto LABEL_350;
                                              }
                                              if (a1 == 1836674149 && a2 == 0xE400000000000000)
                                              {
LABEL_362:
                                                char v8 = 37;
                                                goto LABEL_9;
                                              }
                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              BOOL v51 = a1 == 0x6369616D796C65 && a2 == 0xE700000000000000;
                                              BOOL v52 = v51;
                                              char v8 = 37;
                                              if ((result & 1) == 0 && !v52)
                                              {
                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if (result) {
                                                  goto LABEL_362;
                                                }
                                                if (a1 == 1768453221 && a2 == 0xE400000000000000)
                                                {
LABEL_374:
                                                  char v8 = 38;
                                                  goto LABEL_9;
                                                }
                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                BOOL v53 = a1 == 0x6369706F69687465 && a2 == 0xE800000000000000;
                                                BOOL v54 = v53;
                                                char v8 = 38;
                                                if ((result & 1) == 0 && !v54)
                                                {
                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if (result) {
                                                    goto LABEL_374;
                                                  }
                                                  if (a1 == 1919903079 && a2 == 0xE400000000000000)
                                                  {
LABEL_386:
                                                    char v8 = 39;
                                                    goto LABEL_9;
                                                  }
                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  BOOL v55 = a1 == 0x6E616967726F6567 && a2 == 0xE800000000000000;
                                                  BOOL v56 = v55;
                                                  char v8 = 39;
                                                  if ((result & 1) == 0 && !v56)
                                                  {
                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    if (result) {
                                                      goto LABEL_386;
                                                    }
                                                    uint64_t result = 1734437991;
                                                    if (a1 == 1734437991 && a2 == 0xE400000000000000
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || a1 == 0x74696C6F67616C67 && a2 == 0xEA00000000006369
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      char v8 = 40;
                                                      goto LABEL_9;
                                                    }
                                                    uint64_t result = 1735290727;
                                                    if (a1 == 1735290727 && a2 == 0xE400000000000000
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || a1 == 0x67616C616A6E7567 && a2 == 0xEC00000069646E6FLL
                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      char v8 = 45;
                                                      goto LABEL_9;
                                                    }
                                                    if (a1 == 1835954023 && a2 == 0xE400000000000000)
                                                    {
LABEL_412:
                                                      char v8 = 84;
                                                      goto LABEL_9;
                                                    }
                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    BOOL v57 = a1 == 0x676D61726173616DLL && a2 == 0xEC00000069646E6FLL;
                                                    BOOL v58 = v57;
                                                    char v8 = 84;
                                                    if ((result & 1) == 0 && !v58)
                                                    {
                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if (result) {
                                                        goto LABEL_412;
                                                      }
                                                      uint64_t result = 1752461159;
                                                      if (a1 == 1752461159 && a2 == 0xE400000000000000)
                                                      {
LABEL_424:
                                                        char v8 = 41;
                                                        goto LABEL_9;
                                                      }
                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      BOOL v59 = a1 == 0x636968746F67 && a2 == 0xE600000000000000;
                                                      BOOL v60 = v59;
                                                      char v8 = 41;
                                                      if ((result & 1) == 0 && !v60)
                                                      {
                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if (result) {
                                                          goto LABEL_424;
                                                        }
                                                        if (a1 == 1851880039 && a2 == 0xE400000000000000)
                                                        {
LABEL_436:
                                                          char v8 = 42;
                                                          goto LABEL_9;
                                                        }
                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        BOOL v61 = a1 == 0x6168746E617267 && a2 == 0xE700000000000000;
                                                        BOOL v62 = v61;
                                                        char v8 = 42;
                                                        if ((result & 1) == 0 && !v62)
                                                        {
                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if (result) {
                                                            goto LABEL_436;
                                                          }
                                                          if (a1 == 1801810535 && a2 == 0xE400000000000000)
                                                          {
LABEL_448:
                                                            char v8 = 43;
                                                            goto LABEL_9;
                                                          }
                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          BOOL v63 = a1 == 0x6B65657267 && a2 == 0xE500000000000000;
                                                          BOOL v64 = v63;
                                                          char v8 = 43;
                                                          if ((result & 1) == 0 && !v64)
                                                          {
                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            if (result) {
                                                              goto LABEL_448;
                                                            }
                                                            if (a1 == 1919579495 && a2 == 0xE400000000000000)
                                                            {
LABEL_460:
                                                              char v8 = 44;
                                                              goto LABEL_9;
                                                            }
                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            BOOL v65 = a1 == 0x69746172616A7567
                                                               && a2 == 0xE800000000000000;
                                                            BOOL v66 = v65;
                                                            char v8 = 44;
                                                            if ((result & 1) == 0 && !v66)
                                                            {
                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if (result) {
                                                                goto LABEL_460;
                                                              }
                                                              if (a1 == 1970435431 && a2 == 0xE400000000000000)
                                                              {
LABEL_472:
                                                                char v8 = 46;
                                                                goto LABEL_9;
                                                              }
                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              BOOL v67 = a1 == 0x69686B756D727567
                                                                 && a2 == 0xE800000000000000;
                                                              BOOL v68 = v67;
                                                              char v8 = 46;
                                                              if ((result & 1) == 0 && !v68)
                                                              {
                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                if (result) {
                                                                  goto LABEL_472;
                                                                }
                                                                if (a1 == 1735287144 && a2 == 0xE400000000000000)
                                                                {
LABEL_484:
                                                                  char v8 = 48;
                                                                  goto LABEL_9;
                                                                }
                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                BOOL v69 = a1 == 0x6C75676E6168
                                                                   && a2 == 0xE600000000000000;
                                                                BOOL v70 = v69;
                                                                char v8 = 48;
                                                                if ((result & 1) == 0 && !v70)
                                                                {
                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  if (result) {
                                                                    goto LABEL_484;
                                                                  }
                                                                  if (a1 == 1768841576 && a2 == 0xE400000000000000
                                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                        (result & 1) != 0)
                                                                    || a1 == 7233896 && a2 == 0xE300000000000000
                                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                        (result & 1) != 0))
                                                                  {
                                                                    char v8 = 47;
                                                                    goto LABEL_9;
                                                                  }
                                                                  if (a1 == 1869504872 && a2 == 0xE400000000000000)
                                                                  {
LABEL_503:
                                                                    char v8 = 50;
                                                                    goto LABEL_9;
                                                                  }
                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  BOOL v71 = a1 == 0x6F6F6E756E6168
                                                                     && a2 == 0xE700000000000000;
                                                                  BOOL v72 = v71;
                                                                  char v8 = 50;
                                                                  if ((result & 1) == 0 && !v72)
                                                                  {
                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    if (result) {
                                                                      goto LABEL_503;
                                                                    }
                                                                    if (a1 == 1920229736 && a2 == 0xE400000000000000)
                                                                    {
LABEL_515:
                                                                      char v8 = 51;
                                                                      goto LABEL_9;
                                                                    }
                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    BOOL v73 = a1 == 0x6E6172746168
                                                                       && a2 == 0xE600000000000000;
                                                                    BOOL v74 = v73;
                                                                    char v8 = 51;
                                                                    if ((result & 1) == 0 && !v74)
                                                                    {
                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      if (result) {
                                                                        goto LABEL_515;
                                                                      }
                                                                      if (a1 == 1919051112
                                                                        && a2 == 0xE400000000000000)
                                                                      {
LABEL_527:
                                                                        char v8 = 52;
                                                                        goto LABEL_9;
                                                                      }
                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      BOOL v75 = a1 == 0x776572626568
                                                                         && a2 == 0xE600000000000000;
                                                                      BOOL v76 = v75;
                                                                      char v8 = 52;
                                                                      if ((result & 1) == 0 && !v76)
                                                                      {
                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        if (result) {
                                                                          goto LABEL_527;
                                                                        }
                                                                        uint64_t result = 1634888040;
                                                                        if (a1 == 1634888040
                                                                          && a2 == 0xE400000000000000)
                                                                        {
LABEL_539:
                                                                          char v8 = 53;
                                                                          goto LABEL_9;
                                                                        }
                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        BOOL v77 = a1 == 0x616E616761726968
                                                                           && a2 == 0xE800000000000000;
                                                                        BOOL v78 = v77;
                                                                        char v8 = 53;
                                                                        if ((result & 1) == 0 && !v78)
                                                                        {
                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          if (result) {
                                                                            goto LABEL_539;
                                                                          }
                                                                          if (a1 == 2004184168
                                                                            && a2 == 0xE400000000000000
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0)
                                                                            || a1 == 0xD000000000000014
                                                                            && a2 == 0x800000020D9E0420
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0))
                                                                          {
                                                                            char v8 = 2;
                                                                            goto LABEL_9;
                                                                          }
                                                                          uint64_t result = 1735290216;
                                                                          if (a1 == 1735290216
                                                                            && a2 == 0xE400000000000000
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0)
                                                                            || a1 == 0x6D68687761686170
                                                                            && a2 == 0xEB00000000676E6FLL
                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0))
                                                                          {
                                                                            char v8 = 117;
                                                                            goto LABEL_9;
                                                                          }
                                                                          if (a1 == 1886285160
                                                                            && a2 == 0xE400000000000000)
                                                                          {
LABEL_565:
                                                                            char v8 = 102;
                                                                            goto LABEL_9;
                                                                          }
                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          BOOL v79 = a1 == 0xD000000000000014
                                                                             && a2 == 0x800000020D9E0440;
                                                                          BOOL v80 = v79;
                                                                          char v8 = 102;
                                                                          if ((result & 1) == 0 && !v80)
                                                                          {
                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            if (result) {
                                                                              goto LABEL_565;
                                                                            }
                                                                            if (a1 == 1953198696
                                                                              && a2 == 0xE400000000000000)
                                                                            {
LABEL_577:
                                                                              char v8 = 62;
                                                                              goto LABEL_9;
                                                                            }
                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            BOOL v81 = a1 == 0xD000000000000012
                                                                               && a2 == 0x800000020D9E0460;
                                                                            BOOL v82 = v81;
                                                                            char v8 = 62;
                                                                            if ((result & 1) == 0 && !v82)
                                                                            {
                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              if (result) {
                                                                                goto LABEL_577;
                                                                              }
                                                                              if (a1 == 1735292264
                                                                                && a2 == 0xE400000000000000
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || a1 == 0x61676E7568646C6FLL
                                                                                && a2 == 0xEC0000006E616972
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                char v8 = 105;
                                                                                goto LABEL_9;
                                                                              }
                                                                              if (a1 == 1818326121
                                                                                && a2 == 0xE400000000000000
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || a1 == 0x696C617469646C6FLL
                                                                                && a2 == 0xE900000000000063
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                char v8 = 106;
                                                                                goto LABEL_9;
                                                                              }
                                                                              if (a1 == 1635148138
                                                                                && a2 == 0xE400000000000000)
                                                                              {
LABEL_603:
                                                                                char v8 = 58;
                                                                                goto LABEL_9;
                                                                              }
                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              BOOL v83 = a1 == 0x6573656E6176616ALL
                                                                                 && a2 == 0xE800000000000000;
                                                                              BOOL v84 = v83;
                                                                              char v8 = 58;
                                                                              if ((result & 1) == 0 && !v84)
                                                                              {
                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                if (result) {
                                                                                  goto LABEL_603;
                                                                                }
                                                                                uint64_t result = 1768710507;
                                                                                if (a1 == 1768710507
                                                                                  && a2 == 0xE400000000000000)
                                                                                {
LABEL_615:
                                                                                  char v8 = 63;
                                                                                  goto LABEL_9;
                                                                                }
                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                BOOL v85 = a1 == 0x696C686179616BLL
                                                                                   && a2 == 0xE700000000000000;
                                                                                BOOL v86 = v85;
                                                                                char v8 = 63;
                                                                                if ((result & 1) == 0 && !v86)
                                                                                {
                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  if (result) {
                                                                                    goto LABEL_615;
                                                                                  }
                                                                                  if (a1 == 1634623851
                                                                                    && a2 == 0xE400000000000000)
                                                                                  {
LABEL_627:
                                                                                    char v8 = 61;
                                                                                    goto LABEL_9;
                                                                                  }
                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  BOOL v87 = a1 == 0x616E616B6174616BLL
                                                                                     && a2 == 0xE800000000000000;
                                                                                  BOOL v88 = v87;
                                                                                  char v8 = 61;
                                                                                  if ((result & 1) == 0 && !v88)
                                                                                  {
                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    if (result) {
                                                                                      goto LABEL_627;
                                                                                    }
                                                                                    uint64_t result = 1918986347;
                                                                                    if (a1 == 1918986347
                                                                                      && a2 == 0xE400000000000000
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0)
                                                                                      || a1 == 0x7468736F7261686BLL
                                                                                      && a2 == 0xEA00000000006968
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      char v8 = 64;
                                                                                      goto LABEL_9;
                                                                                    }
                                                                                    uint64_t result = 1919772779;
                                                                                    if (a1 == 1919772779
                                                                                      && a2 == 0xE400000000000000)
                                                                                    {
LABEL_646:
                                                                                      char v8 = 66;
                                                                                      goto LABEL_9;
                                                                                    }
                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    BOOL v89 = a1 == 0x72656D686BLL
                                                                                       && a2 == 0xE500000000000000;
                                                                                    BOOL v90 = v89;
                                                                                    char v8 = 66;
                                                                                    if ((result & 1) == 0 && !v90)
                                                                                    {
                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      if (result) {
                                                                                        goto LABEL_646;
                                                                                      }
                                                                                      if (a1 == 1785686123
                                                                                        && a2 == 0xE400000000000000)
                                                                                      {
LABEL_658:
                                                                                        char v8 = 67;
                                                                                        goto LABEL_9;
                                                                                      }
                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      BOOL v91 = a1 == 0x696B6A6F686BLL
                                                                                         && a2 == 0xE600000000000000;
                                                                                      BOOL v92 = v91;
                                                                                      char v8 = 67;
                                                                                      if ((result & 1) == 0 && !v92)
                                                                                      {
                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        if (result) {
                                                                                          goto LABEL_658;
                                                                                        }
                                                                                        if (a1 == 1937009003
                                                                                          && a2 == 0xE400000000000000)
                                                                                        {
LABEL_670:
                                                                                          char v8 = 65;
                                                                                          goto LABEL_9;
                                                                                        }
                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        BOOL v93 = a1 == 0xD000000000000011
                                                                                           && a2 == 0x800000020D9E0480;
                                                                                        BOOL v94 = v93;
                                                                                        char v8 = 65;
                                                                                        if ((result & 1) == 0 && !v94)
                                                                                        {
                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          if (result) {
                                                                                            goto LABEL_670;
                                                                                          }
                                                                                          if (a1 == 1633971819
                                                                                            && a2 == 0xE400000000000000)
                                                                                          {
LABEL_682:
                                                                                            char v8 = 60;
                                                                                            goto LABEL_9;
                                                                                          }
                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          BOOL v95 = a1 == 0x6164616E6E616BLL
                                                                                             && a2 == 0xE700000000000000;
                                                                                          BOOL v96 = v95;
                                                                                          char v8 = 60;
                                                                                          if ((result & 1) == 0 && !v96)
                                                                                          {
                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            if (result) {
                                                                                              goto LABEL_682;
                                                                                            }
                                                                                            uint64_t result = 1768453227;
                                                                                            if (a1 == 1768453227
                                                                                              && a2 == 0xE400000000000000)
                                                                                            {
LABEL_694:
                                                                                              char v8 = 59;
                                                                                              goto LABEL_9;
                                                                                            }
                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            BOOL v97 = a1 == 0x69687469616BLL
                                                                                               && a2 == 0xE600000000000000;
                                                                                            BOOL v98 = v97;
                                                                                            char v8 = 59;
                                                                                            if ((result & 1) == 0
                                                                                              && !v98)
                                                                                            {
                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              if (result) {
                                                                                                goto LABEL_694;
                                                                                              }
                                                                                              uint64_t result = 1634623852;
                                                                                              if (a1 == 1634623852
                                                                                                && a2 == 0xE400000000000000)
                                                                                              {
LABEL_706:
                                                                                                char v8 = -115;
                                                                                                goto LABEL_9;
                                                                                              }
                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              BOOL v99 = a1 == 0x6D616874696174 && a2 == 0xE700000000000000;
                                                                                              BOOL v100 = v99;
                                                                                              char v8 = -115;
                                                                                              if ((result & 1) == 0
                                                                                                && !v100)
                                                                                              {
                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                if (result) {
                                                                                                  goto LABEL_706;
                                                                                                }
                                                                                                if (a1 == 1869570412 && a2 == 0xE400000000000000)
                                                                                                {
LABEL_718:
                                                                                                  char v8 = 69;
                                                                                                  goto LABEL_9;
                                                                                                }
                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                BOOL v101 = a1 == 7299436 && a2 == 0xE300000000000000;
                                                                                                BOOL v102 = v101;
                                                                                                char v8 = 69;
                                                                                                if ((result & 1) == 0 && !v102)
                                                                                                {
                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  if (result) {
                                                                                                    goto LABEL_718;
                                                                                                  }
                                                                                                  if (a1 == 1853120876 && a2 == 0xE400000000000000)
                                                                                                  {
LABEL_730:
                                                                                                    char v8 = 70;
                                                                                                    goto LABEL_9;
                                                                                                  }
                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  BOOL v103 = a1 == 0x6E6974616CLL && a2 == 0xE500000000000000;
                                                                                                  BOOL v104 = v103;
                                                                                                  char v8 = 70;
                                                                                                  if ((result & 1) == 0 && !v104)
                                                                                                  {
                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    if (result) {
                                                                                                      goto LABEL_730;
                                                                                                    }
                                                                                                    if (a1 == 1668310380 && a2 == 0xE400000000000000)
                                                                                                    {
LABEL_742:
                                                                                                      char v8 = 71;
                                                                                                      goto LABEL_9;
                                                                                                    }
                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    BOOL v105 = a1 == 0x61686370656CLL && a2 == 0xE600000000000000;
                                                                                                    BOOL v106 = v105;
                                                                                                    char v8 = 71;
                                                                                                    if ((result & 1) == 0 && !v106)
                                                                                                    {
                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      if (result) {
                                                                                                        goto LABEL_742;
                                                                                                      }
                                                                                                      if (a1 == 1651337580 && a2 == 0xE400000000000000)
                                                                                                      {
LABEL_754:
                                                                                                        char v8 = 72;
                                                                                                        goto LABEL_9;
                                                                                                      }
                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      BOOL v107 = a1 == 0x75626D696CLL && a2 == 0xE500000000000000;
                                                                                                      BOOL v108 = v107;
                                                                                                      char v8 = 72;
                                                                                                      if ((result & 1) == 0 && !v108)
                                                                                                      {
                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        if (result) {
                                                                                                          goto LABEL_754;
                                                                                                        }
                                                                                                        uint64_t result = 1634625900;
                                                                                                        if (a1 == 1634625900 && a2 == 0xE400000000000000)
                                                                                                        {
LABEL_766:
                                                                                                          char v8 = 73;
                                                                                                          goto LABEL_9;
                                                                                                        }
                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        BOOL v109 = a1 == 0x617261656E696CLL && a2 == 0xE700000000000000;
                                                                                                        BOOL v110 = v109;
                                                                                                        char v8 = 73;
                                                                                                        if ((result & 1) == 0 && !v110)
                                                                                                        {
                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          if (result) {
                                                                                                            goto LABEL_766;
                                                                                                          }
                                                                                                          uint64_t result = 1651403116;
                                                                                                          if (a1 == 1651403116 && a2 == 0xE400000000000000)
                                                                                                          {
LABEL_778:
                                                                                                            char v8 = 74;
                                                                                                            goto LABEL_9;
                                                                                                          }
                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          BOOL v111 = a1 == 0x627261656E696CLL && a2 == 0xE700000000000000;
                                                                                                          BOOL v112 = v111;
                                                                                                          char v8 = 74;
                                                                                                          if ((result & 1) == 0 && !v112)
                                                                                                          {
                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            if (result) {
                                                                                                              goto LABEL_778;
                                                                                                            }
                                                                                                            if (a1 == 1970497900 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                            {
                                                                                                              char v8 = 75;
                                                                                                              goto LABEL_9;
                                                                                                            }
                                                                                                            if (a1 == 1768126828 && a2 == 0xE400000000000000)
                                                                                                            {
LABEL_794:
                                                                                                              char v8 = 76;
                                                                                                              goto LABEL_9;
                                                                                                            }
                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            BOOL v113 = a1 == 0x6E616963796CLL && a2 == 0xE600000000000000;
                                                                                                            BOOL v114 = v113;
                                                                                                            char v8 = 76;
                                                                                                            if ((result & 1) == 0 && !v114)
                                                                                                            {
                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              if (result) {
                                                                                                                goto LABEL_794;
                                                                                                              }
                                                                                                              uint64_t result = 1768192364;
                                                                                                              if (a1 == 1768192364 && a2 == 0xE400000000000000)
                                                                                                              {
LABEL_806:
                                                                                                                char v8 = 77;
                                                                                                                goto LABEL_9;
                                                                                                              }
                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              BOOL v115 = a1 == 0x6E616964796CLL && a2 == 0xE600000000000000;
                                                                                                              BOOL v116 = v115;
                                                                                                              char v8 = 77;
                                                                                                              if ((result & 1) == 0 && !v116)
                                                                                                              {
                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                if (result) {
                                                                                                                  goto LABEL_806;
                                                                                                                }
                                                                                                                if (a1 == 1785225581 && a2 == 0xE400000000000000)
                                                                                                                {
LABEL_818:
                                                                                                                  char v8 = 78;
                                                                                                                  goto LABEL_9;
                                                                                                                }
                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                BOOL v117 = a1 == 0x696E616A6168616DLL && a2 == 0xE800000000000000;
                                                                                                                BOOL v118 = v117;
                                                                                                                char v8 = 78;
                                                                                                                if ((result & 1) == 0 && !v118)
                                                                                                                {
                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  if (result) {
                                                                                                                    goto LABEL_818;
                                                                                                                  }
                                                                                                                  if (a1 == 1634427245 && a2 == 0xE400000000000000)
                                                                                                                  {
LABEL_830:
                                                                                                                    char v8 = 79;
                                                                                                                    goto LABEL_9;
                                                                                                                  }
                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  BOOL v119 = a1 == 0x726173616B616DLL && a2 == 0xE700000000000000;
                                                                                                                  BOOL v120 = v119;
                                                                                                                  char v8 = 79;
                                                                                                                  if ((result & 1) == 0 && !v120)
                                                                                                                  {
                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    if (result) {
                                                                                                                      goto LABEL_830;
                                                                                                                    }
                                                                                                                    if (a1 == 1684955501 && a2 == 0xE400000000000000)
                                                                                                                    {
LABEL_842:
                                                                                                                      char v8 = 81;
                                                                                                                      goto LABEL_9;
                                                                                                                    }
                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    BOOL v121 = a1 == 0x636961646E616DLL && a2 == 0xE700000000000000;
                                                                                                                    BOOL v122 = v121;
                                                                                                                    char v8 = 81;
                                                                                                                    if ((result & 1) == 0 && !v122)
                                                                                                                    {
                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      if (result) {
                                                                                                                        goto LABEL_842;
                                                                                                                      }
                                                                                                                      uint64_t result = 1768841581;
                                                                                                                      if (a1 == 1768841581 && a2 == 0xE400000000000000)
                                                                                                                      {
LABEL_854:
                                                                                                                        char v8 = 82;
                                                                                                                        goto LABEL_9;
                                                                                                                      }
                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      BOOL v123 = a1 == 0x65616863696E616DLL && a2 == 0xEA00000000006E61;
                                                                                                                      BOOL v124 = v123;
                                                                                                                      char v8 = 82;
                                                                                                                      if ((result & 1) == 0 && !v124)
                                                                                                                      {
                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        if (result) {
                                                                                                                          goto LABEL_854;
                                                                                                                        }
                                                                                                                        if (a1 == 1668440429 && a2 == 0xE400000000000000)
                                                                                                                        {
LABEL_866:
                                                                                                                          char v8 = 83;
                                                                                                                          goto LABEL_9;
                                                                                                                        }
                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        BOOL v125 = a1 == 0x6E65686372616DLL && a2 == 0xE700000000000000;
                                                                                                                        BOOL v126 = v125;
                                                                                                                        char v8 = 83;
                                                                                                                        if ((result & 1) == 0 && !v126)
                                                                                                                        {
                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          if (result) {
                                                                                                                            goto LABEL_866;
                                                                                                                          }
                                                                                                                          if (a1 == 1717855597 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x646961666564656DLL && a2 == 0xEB000000006E6972 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            char v8 = 85;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          uint64_t result = 1684956525;
                                                                                                                          if (a1 == 1684956525 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6B696B65646E656DLL && a2 == 0xEC00000069756B61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            char v8 = 87;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          uint64_t result = 1668441453;
                                                                                                                          if (a1 == 1668441453 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x636974696F72656DLL && a2 == 0xEF65766973727563 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            char v8 = 88;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          if (a1 == 1869768045 && a2 == 0xE400000000000000)
                                                                                                                          {
LABEL_899:
                                                                                                                            char v8 = 89;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          BOOL v127 = a1 == 0xD000000000000013 && a2 == 0x800000020D9E04A0;
                                                                                                                          BOOL v128 = v127;
                                                                                                                          char v8 = 89;
                                                                                                                          if ((result & 1) == 0 && !v128)
                                                                                                                          {
                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            if (result) {
                                                                                                                              goto LABEL_899;
                                                                                                                            }
                                                                                                                            uint64_t result = 1836674157;
                                                                                                                            if (a1 == 1836674157 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616C6179616C616DLL && a2 == 0xE90000000000006DLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              char v8 = 80;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            if (a1 == 1768189805 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              char v8 = 91;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            uint64_t result = 1735290733;
                                                                                                                            if (a1 == 1735290733 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x61696C6F676E6F6DLL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              char v8 = 92;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            if (a1 == 1869574765 && a2 == 0xE400000000000000)
                                                                                                                            {
LABEL_929:
                                                                                                                              char v8 = 93;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            BOOL v129 = a1 == 7303789 && a2 == 0xE300000000000000;
                                                                                                                            BOOL v130 = v129;
                                                                                                                            char v8 = 93;
                                                                                                                            if ((result & 1) == 0 && !v130)
                                                                                                                            {
                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              if (result) {
                                                                                                                                goto LABEL_929;
                                                                                                                              }
                                                                                                                              if (a1 == 1768256621 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616D69657465656DLL && a2 == 0xEB000000006B6579 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                char v8 = 86;
                                                                                                                                goto LABEL_9;
                                                                                                                              }
                                                                                                                              if (a1 == 1953265005 && a2 == 0xE400000000000000)
                                                                                                                              {
LABEL_948:
                                                                                                                                char v8 = 94;
                                                                                                                                goto LABEL_9;
                                                                                                                              }
                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              BOOL v131 = a1 == 0x696E61746C756DLL && a2 == 0xE700000000000000;
                                                                                                                              BOOL v132 = v131;
                                                                                                                              char v8 = 94;
                                                                                                                              if ((result & 1) == 0 && !v132)
                                                                                                                              {
                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                if (result) {
                                                                                                                                  goto LABEL_948;
                                                                                                                                }
                                                                                                                                if (a1 == 1919777133 && a2 == 0xE400000000000000)
                                                                                                                                {
LABEL_960:
                                                                                                                                  char v8 = 95;
                                                                                                                                  goto LABEL_9;
                                                                                                                                }
                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                BOOL v133 = a1 == 0x72616D6E61796DLL && a2 == 0xE700000000000000;
                                                                                                                                BOOL v134 = v133;
                                                                                                                                char v8 = 95;
                                                                                                                                if ((result & 1) == 0 && !v134)
                                                                                                                                {
                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  if (result) {
                                                                                                                                    goto LABEL_960;
                                                                                                                                  }
                                                                                                                                  uint64_t result = 1684955502;
                                                                                                                                  if (a1 == 1684955502 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x67616E69646E616ELL && a2 == 0xEB00000000697261 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                  {
                                                                                                                                    char v8 = 97;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }
                                                                                                                                  if (a1 == 1651663214 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6874726F6E646C6FLL && a2 == 0xEF6E616962617261 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                  {
                                                                                                                                    char v8 = 107;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }
                                                                                                                                  if (a1 == 1952539246 && a2 == 0xE400000000000000)
                                                                                                                                  {
LABEL_986:
                                                                                                                                    char v8 = 96;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }
                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  BOOL v135 = a1 == 0x616561746162616ELL && a2 == 0xE90000000000006ELL;
                                                                                                                                  BOOL v136 = v135;
                                                                                                                                  char v8 = 96;
                                                                                                                                  if ((result & 1) == 0 && !v136)
                                                                                                                                  {
                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    if (result) {
                                                                                                                                      goto LABEL_986;
                                                                                                                                    }
                                                                                                                                    if (a1 == 1635214702 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                    {
                                                                                                                                      char v8 = 98;
                                                                                                                                      goto LABEL_9;
                                                                                                                                    }
                                                                                                                                    uint64_t result = 1869572974;
                                                                                                                                    if (a1 == 1869572974 && a2 == 0xE400000000000000)
                                                                                                                                    {
LABEL_1002:
                                                                                                                                      char v8 = 100;
                                                                                                                                      goto LABEL_9;
                                                                                                                                    }
                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    BOOL v137 = a1 == 7301998 && a2 == 0xE300000000000000;
                                                                                                                                    BOOL v138 = v137;
                                                                                                                                    char v8 = 100;
                                                                                                                                    if ((result & 1) == 0 && !v138)
                                                                                                                                    {
                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      if (result) {
                                                                                                                                        goto LABEL_1002;
                                                                                                                                      }
                                                                                                                                      if (a1 == 1969779566 && a2 == 0xE400000000000000)
                                                                                                                                      {
LABEL_1014:
                                                                                                                                        char v8 = 101;
                                                                                                                                        goto LABEL_9;
                                                                                                                                      }
                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      BOOL v139 = a1 == 0x756873756ELL && a2 == 0xE500000000000000;
                                                                                                                                      BOOL v140 = v139;
                                                                                                                                      char v8 = 101;
                                                                                                                                      if ((result & 1) == 0 && !v140)
                                                                                                                                      {
                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        if (result) {
                                                                                                                                          goto LABEL_1014;
                                                                                                                                        }
                                                                                                                                        if (a1 == 1835100015 && a2 == 0xE400000000000000)
                                                                                                                                        {
LABEL_1026:
                                                                                                                                          char v8 = 103;
                                                                                                                                          goto LABEL_9;
                                                                                                                                        }
                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        BOOL v141 = a1 == 0x6D6168676FLL && a2 == 0xE500000000000000;
                                                                                                                                        BOOL v142 = v141;
                                                                                                                                        char v8 = 103;
                                                                                                                                        if ((result & 1) == 0 && !v142)
                                                                                                                                        {
                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          if (result) {
                                                                                                                                            goto LABEL_1026;
                                                                                                                                          }
                                                                                                                                          if (a1 == 1801677935 && a2 == 0xE400000000000000)
                                                                                                                                          {
LABEL_1038:
                                                                                                                                            char v8 = 104;
                                                                                                                                            goto LABEL_9;
                                                                                                                                          }
                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          BOOL v143 = a1 == 0x696B6968636C6FLL && a2 == 0xE700000000000000;
                                                                                                                                          BOOL v144 = v143;
                                                                                                                                          char v8 = 104;
                                                                                                                                          if ((result & 1) == 0 && !v144)
                                                                                                                                          {
                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            if (result) {
                                                                                                                                              goto LABEL_1038;
                                                                                                                                            }
                                                                                                                                            if (a1 == 1751872111 && a2 == 0xE400000000000000)
                                                                                                                                            {
LABEL_1050:
                                                                                                                                              char v8 = 112;
                                                                                                                                              goto LABEL_9;
                                                                                                                                            }
                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            BOOL v145 = a1 == 0x696B727574646C6FLL && a2 == 0xE900000000000063;
                                                                                                                                            BOOL v146 = v145;
                                                                                                                                            char v8 = 112;
                                                                                                                                            if ((result & 1) == 0 && !v146)
                                                                                                                                            {
                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              if (result) {
                                                                                                                                                goto LABEL_1050;
                                                                                                                                              }
                                                                                                                                              if (a1 == 1635349103 && a2 == 0xE400000000000000)
                                                                                                                                              {
LABEL_1062:
                                                                                                                                                char v8 = 114;
                                                                                                                                                goto LABEL_9;
                                                                                                                                              }
                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              BOOL v147 = a1 == 0x617969726FLL && a2 == 0xE500000000000000;
                                                                                                                                              BOOL v148 = v147;
                                                                                                                                              char v8 = 114;
                                                                                                                                              if ((result & 1) == 0 && !v148)
                                                                                                                                              {
                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                if (result) {
                                                                                                                                                  goto LABEL_1062;
                                                                                                                                                }
                                                                                                                                                if (a1 == 1701278575 && a2 == 0xE400000000000000)
                                                                                                                                                {
LABEL_1074:
                                                                                                                                                  char v8 = 115;
                                                                                                                                                  goto LABEL_9;
                                                                                                                                                }
                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                BOOL v149 = a1 == 0x656761736FLL && a2 == 0xE500000000000000;
                                                                                                                                                BOOL v150 = v149;
                                                                                                                                                char v8 = 115;
                                                                                                                                                if ((result & 1) == 0 && !v150)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  if (result) {
                                                                                                                                                    goto LABEL_1074;
                                                                                                                                                  }
                                                                                                                                                  if (a1 == 1634562927 && a2 == 0xE400000000000000)
                                                                                                                                                  {
LABEL_1086:
                                                                                                                                                    char v8 = 116;
                                                                                                                                                    goto LABEL_9;
                                                                                                                                                  }
                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  BOOL v151 = a1 == 0x61796E616D736FLL && a2 == 0xE700000000000000;
                                                                                                                                                  BOOL v152 = v151;
                                                                                                                                                  char v8 = 116;
                                                                                                                                                  if ((result & 1) == 0 && !v152)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    if (result) {
                                                                                                                                                      goto LABEL_1086;
                                                                                                                                                    }
                                                                                                                                                    uint64_t result = 1919382895;
                                                                                                                                                    if (a1 == 1919382895 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x7568677975646C6FLL && a2 == 0xE900000000000072 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      char v8 = 113;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    if (a1 == 1835819376 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6E6572796D6C6170 && a2 == 0xE900000000000065 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      char v8 = 118;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    if (a1 == 1668637040 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x61686E6963756170 && a2 == 0xE900000000000075 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      char v8 = 119;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    if (a1 == 1836213616 && a2 == 0xE400000000000000)
                                                                                                                                                    {
LABEL_1119:
                                                                                                                                                      char v8 = 108;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    BOOL v153 = a1 == 0x696D726570646C6FLL && a2 == 0xE900000000000063;
                                                                                                                                                    BOOL v154 = v153;
                                                                                                                                                    char v8 = 108;
                                                                                                                                                    if ((result & 1) == 0 && !v154)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      if (result) {
                                                                                                                                                        goto LABEL_1119;
                                                                                                                                                      }
                                                                                                                                                      if (a1 == 1734436976 && a2 == 0xE400000000000000)
                                                                                                                                                      {
LABEL_1131:
                                                                                                                                                        char v8 = 120;
                                                                                                                                                        goto LABEL_9;
                                                                                                                                                      }
                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      BOOL v155 = a1 == 0x61707367616870 && a2 == 0xE700000000000000;
                                                                                                                                                      BOOL v156 = v155;
                                                                                                                                                      char v8 = 120;
                                                                                                                                                      if ((result & 1) == 0 && !v156)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        if (result) {
                                                                                                                                                          goto LABEL_1131;
                                                                                                                                                        }
                                                                                                                                                        uint64_t result = 1768712304;
                                                                                                                                                        if (a1 == 1768712304 && a2 == 0xE400000000000000)
                                                                                                                                                        {
LABEL_1143:
                                                                                                                                                          char v8 = 56;
                                                                                                                                                          goto LABEL_9;
                                                                                                                                                        }
                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        BOOL v157 = a1 == 0xD000000000000014 && a2 == 0x800000020D9E04C0;
                                                                                                                                                        BOOL v158 = v157;
                                                                                                                                                        char v8 = 56;
                                                                                                                                                        if ((result & 1) == 0 && !v158)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          if (result) {
                                                                                                                                                            goto LABEL_1143;
                                                                                                                                                          }
                                                                                                                                                          if (a1 == 1886152816 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x707265746C617370 && a2 == 0xEE006976616C6861 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                          {
                                                                                                                                                            char v8 = 122;
                                                                                                                                                            goto LABEL_9;
                                                                                                                                                          }
                                                                                                                                                          if (a1 == 2020501616 && a2 == 0xE400000000000000)
                                                                                                                                                          {
LABEL_1162:
                                                                                                                                                            char v8 = 121;
                                                                                                                                                            goto LABEL_9;
                                                                                                                                                          }
                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          BOOL v159 = a1 == 0x6963696E656F6870 && a2 == 0xEA00000000006E61;
                                                                                                                                                          BOOL v160 = v159;
                                                                                                                                                          char v8 = 121;
                                                                                                                                                          if ((result & 1) == 0 && !v160)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            if (result) {
                                                                                                                                                              goto LABEL_1162;
                                                                                                                                                            }
                                                                                                                                                            uint64_t result = 1685220464;
                                                                                                                                                            if (a1 == 1685220464 && a2 == 0xE400000000000000)
                                                                                                                                                            {
LABEL_1174:
                                                                                                                                                              char v8 = 90;
                                                                                                                                                              goto LABEL_9;
                                                                                                                                                            }
                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            BOOL v161 = a1 == 1868654957 && a2 == 0xE400000000000000;
                                                                                                                                                            BOOL v162 = v161;
                                                                                                                                                            char v8 = 90;
                                                                                                                                                            if ((result & 1) == 0 && !v162)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              if (result) {
                                                                                                                                                                goto LABEL_1174;
                                                                                                                                                              }
                                                                                                                                                              if (a1 == 1769239152 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD000000000000015, a1 == 0xD000000000000015) && a2 == 0x800000020D9E04E0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                              {
                                                                                                                                                                char v8 = 57;
                                                                                                                                                                goto LABEL_9;
                                                                                                                                                              }
                                                                                                                                                              uint64_t result = 1735289458;
                                                                                                                                                              if (a1 == 1735289458 && a2 == 0xE400000000000000)
                                                                                                                                                              {
LABEL_1193:
                                                                                                                                                                char v8 = 123;
                                                                                                                                                                goto LABEL_9;
                                                                                                                                                              }
                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              BOOL v163 = a1 == 0x676E616A6572 && a2 == 0xE600000000000000;
                                                                                                                                                              BOOL v164 = v163;
                                                                                                                                                              char v8 = 123;
                                                                                                                                                              if ((result & 1) == 0 && !v164)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                if (result) {
                                                                                                                                                                  goto LABEL_1193;
                                                                                                                                                                }
                                                                                                                                                                if (a1 == 1734897522 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6F726966696E6168 && a2 == 0xEE006179676E6968 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                {
                                                                                                                                                                  char v8 = 49;
                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                }
                                                                                                                                                                if (a1 == 1919841650 && a2 == 0xE400000000000000)
                                                                                                                                                                {
LABEL_1212:
                                                                                                                                                                  char v8 = 124;
                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                }
                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                BOOL v165 = a1 == 0x63696E7572 && a2 == 0xE500000000000000;
                                                                                                                                                                BOOL v166 = v165;
                                                                                                                                                                char v8 = 124;
                                                                                                                                                                if ((result & 1) == 0 && !v166)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  if (result) {
                                                                                                                                                                    goto LABEL_1212;
                                                                                                                                                                  }
                                                                                                                                                                  if (a1 == 1919770995 && a2 == 0xE400000000000000)
                                                                                                                                                                  {
LABEL_1224:
                                                                                                                                                                    char v8 = 125;
                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                  }
                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  BOOL v167 = a1 == 0x61746972616D6173 && a2 == 0xE90000000000006ELL;
                                                                                                                                                                  BOOL v168 = v167;
                                                                                                                                                                  char v8 = 125;
                                                                                                                                                                  if ((result & 1) == 0 && !v168)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    if (result) {
                                                                                                                                                                      goto LABEL_1224;
                                                                                                                                                                    }
                                                                                                                                                                    uint64_t result = 1651663219;
                                                                                                                                                                    if (a1 == 1651663219 && a2 == 0xE400000000000000)
                                                                                                                                                                    {
LABEL_1236:
                                                                                                                                                                      char v8 = 111;
                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                    }
                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    BOOL v169 = a1 == 0x6874756F73646C6FLL && a2 == 0xEF6E616962617261;
                                                                                                                                                                    BOOL v170 = v169;
                                                                                                                                                                    char v8 = 111;
                                                                                                                                                                    if ((result & 1) == 0 && !v170)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      if (result) {
                                                                                                                                                                        goto LABEL_1236;
                                                                                                                                                                      }
                                                                                                                                                                      if (a1 == 1920295283 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x7468736172756173 && a2 == 0xEA00000000006172 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        char v8 = 126;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }
                                                                                                                                                                      if (a1 == 2003724147 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x746972776E676973 && a2 == 0xEB00000000676E69 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        char v8 = -126;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }
                                                                                                                                                                      if (a1 == 2002872435 && a2 == 0xE400000000000000)
                                                                                                                                                                      {
LABEL_1262:
                                                                                                                                                                        char v8 = 0x80;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }
                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      BOOL v171 = a1 == 0x6E616976616873 && a2 == 0xE700000000000000;
                                                                                                                                                                      BOOL v172 = v171;
                                                                                                                                                                      char v8 = 0x80;
                                                                                                                                                                      if ((result & 1) == 0 && !v172)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        if (result) {
                                                                                                                                                                          goto LABEL_1262;
                                                                                                                                                                        }
                                                                                                                                                                        if (a1 == 1685219443 && a2 == 0xE400000000000000)
                                                                                                                                                                        {
LABEL_1274:
                                                                                                                                                                          char v8 = 127;
                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                        }
                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        BOOL v173 = a1 == 0x61646172616873 && a2 == 0xE700000000000000;
                                                                                                                                                                        BOOL v174 = v173;
                                                                                                                                                                        char v8 = 127;
                                                                                                                                                                        if ((result & 1) == 0 && !v174)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          if (result) {
                                                                                                                                                                            goto LABEL_1274;
                                                                                                                                                                          }
                                                                                                                                                                          if (a1 == 1684302195 && a2 == 0xE400000000000000)
                                                                                                                                                                          {
LABEL_1286:
                                                                                                                                                                            char v8 = -127;
                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                          }
                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          BOOL v175 = a1 == 0x6D616864646973 && a2 == 0xE700000000000000;
                                                                                                                                                                          BOOL v176 = v175;
                                                                                                                                                                          char v8 = -127;
                                                                                                                                                                          if ((result & 1) == 0 && !v176)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            if (result) {
                                                                                                                                                                              goto LABEL_1286;
                                                                                                                                                                            }
                                                                                                                                                                            uint64_t result = 1684957555;
                                                                                                                                                                            if (a1 == 1684957555 && a2 == 0xE400000000000000)
                                                                                                                                                                            {
LABEL_1298:
                                                                                                                                                                              char v8 = 68;
                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                            }
                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            BOOL v177 = a1 == 0x646177616475686BLL && a2 == 0xE900000000000069;
                                                                                                                                                                            BOOL v178 = v177;
                                                                                                                                                                            char v8 = 68;
                                                                                                                                                                            if ((result & 1) == 0 && !v178)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              if (result) {
                                                                                                                                                                                goto LABEL_1298;
                                                                                                                                                                              }
                                                                                                                                                                              if (a1 == 1752066419 && a2 == 0xE400000000000000)
                                                                                                                                                                              {
LABEL_1310:
                                                                                                                                                                                char v8 = -125;
                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                              }
                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              BOOL v179 = a1 == 0x616C61686E6973 && a2 == 0xE700000000000000;
                                                                                                                                                                              BOOL v180 = v179;
                                                                                                                                                                              char v8 = -125;
                                                                                                                                                                              if ((result & 1) == 0 && !v180)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                if (result) {
                                                                                                                                                                                  goto LABEL_1310;
                                                                                                                                                                                }
                                                                                                                                                                                if (a1 == 1684500339 && a2 == 0xE400000000000000)
                                                                                                                                                                                {
LABEL_1322:
                                                                                                                                                                                  char v8 = -124;
                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                }
                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                BOOL v181 = a1 == 0x6E616964676F73 && a2 == 0xE700000000000000;
                                                                                                                                                                                BOOL v182 = v181;
                                                                                                                                                                                char v8 = -124;
                                                                                                                                                                                if ((result & 1) == 0 && !v182)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  if (result) {
                                                                                                                                                                                    goto LABEL_1322;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (a1 == 1869049715 && a2 == 0xE400000000000000)
                                                                                                                                                                                  {
LABEL_1334:
                                                                                                                                                                                    char v8 = 110;
                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                  }
                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  BOOL v183 = a1 == 0x6964676F73646C6FLL && a2 == 0xEA00000000006E61;
                                                                                                                                                                                  BOOL v184 = v183;
                                                                                                                                                                                  char v8 = 110;
                                                                                                                                                                                  if ((result & 1) == 0 && !v184)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    if (result) {
                                                                                                                                                                                      goto LABEL_1334;
                                                                                                                                                                                    }
                                                                                                                                                                                    uint64_t result = 1634889587;
                                                                                                                                                                                    if (a1 == 1634889587 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                    {
                                                                                                                                                                                      char v8 = -123;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (a1 == 0x706D6F7361726F73 && a2 == 0xEB00000000676E65 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                    {
                                                                                                                                                                                      char v8 = -123;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (a1 == 1870229363 && a2 == 0xE400000000000000)
                                                                                                                                                                                    {
LABEL_1354:
                                                                                                                                                                                      char v8 = -122;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }
                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    BOOL v185 = a1 == 0x6F626D6F796F73 && a2 == 0xE700000000000000;
                                                                                                                                                                                    BOOL v186 = v185;
                                                                                                                                                                                    char v8 = -122;
                                                                                                                                                                                    if ((result & 1) == 0 && !v186)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      if (result) {
                                                                                                                                                                                        goto LABEL_1354;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (a1 == 1684960627 && a2 == 0xE400000000000000)
                                                                                                                                                                                      {
LABEL_1366:
                                                                                                                                                                                        char v8 = -121;
                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                      }
                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      BOOL v187 = a1 == 0x73656E61646E7573 && a2 == 0xE900000000000065;
                                                                                                                                                                                      BOOL v188 = v187;
                                                                                                                                                                                      char v8 = -121;
                                                                                                                                                                                      if ((result & 1) == 0 && !v188)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        if (result) {
                                                                                                                                                                                          goto LABEL_1366;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (a1 == 1869379955 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616E69746F6C7973 && a2 == 0xEB00000000697267 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                        {
                                                                                                                                                                                          char v8 = -120;
                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (a1 == 1668446579 && a2 == 0xE400000000000000)
                                                                                                                                                                                        {
LABEL_1385:
                                                                                                                                                                                          char v8 = -119;
                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        BOOL v189 = a1 == 0x636169727973 && a2 == 0xE600000000000000;
                                                                                                                                                                                        BOOL v190 = v189;
                                                                                                                                                                                        char v8 = -119;
                                                                                                                                                                                        if ((result & 1) == 0 && !v190)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          if (result) {
                                                                                                                                                                                            goto LABEL_1385;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (a1 == 1650942324 && a2 == 0xE400000000000000)
                                                                                                                                                                                          {
LABEL_1397:
                                                                                                                                                                                            char v8 = -117;
                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                          }
                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          BOOL v191 = a1 == 0x61776E6162676174 && a2 == 0xE800000000000000;
                                                                                                                                                                                          BOOL v192 = v191;
                                                                                                                                                                                          char v8 = -117;
                                                                                                                                                                                          if ((result & 1) == 0 && !v192)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            if (result) {
                                                                                                                                                                                              goto LABEL_1397;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (a1 == 1919639924 && a2 == 0xE400000000000000)
                                                                                                                                                                                            {
LABEL_1409:
                                                                                                                                                                                              char v8 = -113;
                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                            }
                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            BOOL v193 = a1 == 0x69726B6174 && a2 == 0xE500000000000000;
                                                                                                                                                                                            BOOL v194 = v193;
                                                                                                                                                                                            char v8 = -113;
                                                                                                                                                                                            if ((result & 1) == 0 && !v194)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              if (result) {
                                                                                                                                                                                                goto LABEL_1409;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (a1 == 1701601652 && a2 == 0xE400000000000000)
                                                                                                                                                                                              {
LABEL_1421:
                                                                                                                                                                                                char v8 = -116;
                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                              }
                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              BOOL v195 = a1 == 0x656C696174 && a2 == 0xE500000000000000;
                                                                                                                                                                                              BOOL v196 = v195;
                                                                                                                                                                                              char v8 = -116;
                                                                                                                                                                                              if ((result & 1) == 0 && !v196)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                if (result) {
                                                                                                                                                                                                  goto LABEL_1421;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (a1 == 1970037108 && a2 == 0xE400000000000000)
                                                                                                                                                                                                {
LABEL_1433:
                                                                                                                                                                                                  char v8 = 99;
                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                BOOL v197 = a1 == 0x756C69617477656ELL && a2 == 0xE900000000000065;
                                                                                                                                                                                                BOOL v198 = v197;
                                                                                                                                                                                                char v8 = 99;
                                                                                                                                                                                                if ((result & 1) == 0 && !v198)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  if (result) {
                                                                                                                                                                                                    goto LABEL_1433;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (a1 == 1819107700 && a2 == 0xE400000000000000)
                                                                                                                                                                                                  {
LABEL_1445:
                                                                                                                                                                                                    char v8 = -112;
                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  BOOL v199 = a1 == 0x6C696D6174 && a2 == 0xE500000000000000;
                                                                                                                                                                                                  BOOL v200 = v199;
                                                                                                                                                                                                  char v8 = -112;
                                                                                                                                                                                                  if ((result & 1) == 0 && !v200)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    if (result) {
                                                                                                                                                                                                      goto LABEL_1445;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    uint64_t result = 1735287156;
                                                                                                                                                                                                    if (a1 == 1735287156 && a2 == 0xE400000000000000)
                                                                                                                                                                                                    {
LABEL_1457:
                                                                                                                                                                                                      char v8 = -110;
                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    BOOL v201 = a1 == 0x7475676E6174 && a2 == 0xE600000000000000;
                                                                                                                                                                                                    BOOL v202 = v201;
                                                                                                                                                                                                    char v8 = -110;
                                                                                                                                                                                                    if ((result & 1) == 0 && !v202)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      if (result) {
                                                                                                                                                                                                        goto LABEL_1457;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (a1 == 1953915252 && a2 == 0xE400000000000000)
                                                                                                                                                                                                      {
LABEL_1469:
                                                                                                                                                                                                        char v8 = -114;
                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      BOOL v203 = a1 == 0x74656976696174 && a2 == 0xE700000000000000;
                                                                                                                                                                                                      BOOL v204 = v203;
                                                                                                                                                                                                      char v8 = -114;
                                                                                                                                                                                                      if ((result & 1) == 0 && !v204)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        if (result) {
                                                                                                                                                                                                          goto LABEL_1469;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint64_t result = 1970038132;
                                                                                                                                                                                                        if (a1 == 1970038132 && a2 == 0xE400000000000000)
                                                                                                                                                                                                        {
LABEL_1481:
                                                                                                                                                                                                          char v8 = -109;
                                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        BOOL v205 = a1 == 0x7567756C6574 && a2 == 0xE600000000000000;
                                                                                                                                                                                                        BOOL v206 = v205;
                                                                                                                                                                                                        char v8 = -109;
                                                                                                                                                                                                        if ((result & 1) == 0 && !v206)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          if (result) {
                                                                                                                                                                                                            goto LABEL_1481;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          uint64_t result = 1735288436;
                                                                                                                                                                                                          if (a1 == 1735288436 && a2 == 0xE400000000000000)
                                                                                                                                                                                                          {
LABEL_1493:
                                                                                                                                                                                                            char v8 = -105;
                                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          BOOL v207 = a1 == 0x6867616E69666974 && a2 == 0xE800000000000000;
                                                                                                                                                                                                          BOOL v208 = v207;
                                                                                                                                                                                                          char v8 = -105;
                                                                                                                                                                                                          if ((result & 1) == 0 && !v208)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            if (result) {
                                                                                                                                                                                                              goto LABEL_1493;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (a1 == 1735157620 && a2 == 0xE400000000000000)
                                                                                                                                                                                                            {
LABEL_1505:
                                                                                                                                                                                                              char v8 = -118;
                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            BOOL v209 = a1 == 0x676F6C61676174 && a2 == 0xE700000000000000;
                                                                                                                                                                                                            BOOL v210 = v209;
                                                                                                                                                                                                            char v8 = -118;
                                                                                                                                                                                                            if ((result & 1) == 0 && !v210)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              if (result) {
                                                                                                                                                                                                                goto LABEL_1505;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (a1 == 1633773684 && a2 == 0xE400000000000000)
                                                                                                                                                                                                              {
LABEL_1517:
                                                                                                                                                                                                                char v8 = -108;
                                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              BOOL v211 = a1 == 0x616E61616874 && a2 == 0xE600000000000000;
                                                                                                                                                                                                              BOOL v212 = v211;
                                                                                                                                                                                                              char v8 = -108;
                                                                                                                                                                                                              if ((result & 1) == 0 && !v212)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                if (result) {
                                                                                                                                                                                                                  goto LABEL_1517;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint64_t result = 1767991412;
                                                                                                                                                                                                                if (a1 == 1767991412 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  char v8 = -107;
                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (a1 == 1952606580 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                {
LABEL_1533:
                                                                                                                                                                                                                  char v8 = -106;
                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                BOOL v213 = a1 == 0x6E617465626974 && a2 == 0xE700000000000000;
                                                                                                                                                                                                                BOOL v214 = v213;
                                                                                                                                                                                                                char v8 = -106;
                                                                                                                                                                                                                if ((result & 1) == 0 && !v214)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  if (result) {
                                                                                                                                                                                                                    goto LABEL_1533;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (a1 == 1752328564 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                  {
LABEL_1545:
                                                                                                                                                                                                                    char v8 = -104;
                                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  BOOL v215 = a1 == 0x61747568726974 && a2 == 0xE700000000000000;
                                                                                                                                                                                                                  BOOL v216 = v215;
                                                                                                                                                                                                                  char v8 = -104;
                                                                                                                                                                                                                  if ((result & 1) == 0 && !v216)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    if (result) {
                                                                                                                                                                                                                      goto LABEL_1545;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (a1 == 1634954868 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                    {
LABEL_1557:
                                                                                                                                                                                                                      char v8 = -111;
                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    BOOL v217 = a1 == 0x6173676E6174 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                    BOOL v218 = v217;
                                                                                                                                                                                                                    char v8 = -111;
                                                                                                                                                                                                                    if ((result & 1) == 0 && !v218)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      if (result) {
                                                                                                                                                                                                                        goto LABEL_1557;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (a1 == 1869901684 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        char v8 = -103;
                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (a1 == 1918986101 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                      {
LABEL_1573:
                                                                                                                                                                                                                        char v8 = -102;
                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      BOOL v219 = a1 == 0x6369746972616775 && a2 == 0xE800000000000000;
                                                                                                                                                                                                                      BOOL v220 = v219;
                                                                                                                                                                                                                      char v8 = -102;
                                                                                                                                                                                                                      if ((result & 1) == 0 && !v220)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                        if (result) {
                                                                                                                                                                                                                          goto LABEL_1573;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (a1 == 1768513910 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                        {
LABEL_1585:
                                                                                                                                                                                                                          char v8 = -100;
                                                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                        BOOL v221 = a1 == 6906230 && a2 == 0xE300000000000000;
                                                                                                                                                                                                                        BOOL v222 = v221;
                                                                                                                                                                                                                        char v8 = -100;
                                                                                                                                                                                                                        if ((result & 1) == 0 && !v222)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                          if (result) {
                                                                                                                                                                                                                            goto LABEL_1585;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (a1 == 1752459638 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                          {
LABEL_1597:
                                                                                                                                                                                                                            char v8 = -99;
                                                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                          BOOL v223 = a1 == 0x6971756B68746976 && a2 == 0xE800000000000000;
                                                                                                                                                                                                                          BOOL v224 = v223;
                                                                                                                                                                                                                          char v8 = -99;
                                                                                                                                                                                                                          if ((result & 1) == 0 && !v224)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                            if (result) {
                                                                                                                                                                                                                              goto LABEL_1597;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (a1 == 1634886007 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6963676E61726177 && a2 == 0xEA00000000006974 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              char v8 = -97;
                                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (a1 == 1869112183 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                            {
LABEL_1616:
                                                                                                                                                                                                                              char v8 = -98;
                                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                            BOOL v225 = a1 == 0x6F68636E6177 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                            BOOL v226 = v225;
                                                                                                                                                                                                                            char v8 = -98;
                                                                                                                                                                                                                            if ((result & 1) == 0 && !v226)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                              if (result) {
                                                                                                                                                                                                                                goto LABEL_1616;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (a1 == 1868918904 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                              {
LABEL_1628:
                                                                                                                                                                                                                                char v8 = 109;
                                                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                              BOOL v227 = a1 == 0x6973726570646C6FLL && a2 == 0xEA00000000006E61;
                                                                                                                                                                                                                              BOOL v228 = v227;
                                                                                                                                                                                                                              char v8 = 109;
                                                                                                                                                                                                                              if ((result & 1) == 0 && !v228)
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                if (result) {
                                                                                                                                                                                                                                  goto LABEL_1628;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (a1 == 2020963192 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                {
LABEL_1640:
                                                                                                                                                                                                                                  char v8 = 26;
                                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                BOOL v229 = a1 == 0x726F6669656E7563 && a2 == 0xE90000000000006DLL;
                                                                                                                                                                                                                                BOOL v230 = v229;
                                                                                                                                                                                                                                char v8 = 26;
                                                                                                                                                                                                                                if ((result & 1) == 0 && !v230)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                  if (result) {
                                                                                                                                                                                                                                    goto LABEL_1640;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (a1 == 1769629049 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                  {
LABEL_1652:
                                                                                                                                                                                                                                    char v8 = -96;
                                                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                  BOOL v231 = a1 == 0x6964697A6579 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                                  BOOL v232 = v231;
                                                                                                                                                                                                                                  char v8 = -96;
                                                                                                                                                                                                                                  if ((result & 1) == 0 && !v232)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                    if (result) {
                                                                                                                                                                                                                                      goto LABEL_1652;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    uint64_t result = 1768515961;
                                                                                                                                                                                                                                    if (a1 == 1768515961 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 27001 && a2 == 0xE200000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      char v8 = -95;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (a1 == 1651401082 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x617A6162616E617ALL && a2 == 0xEF65726175717372 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      char v8 = -94;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    uint64_t result = 1752066426;
                                                                                                                                                                                                                                    if (a1 == 1752066426 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6574697265686E69 && a2 == 0xE900000000000064)
                                                                                                                                                                                                                                    {
LABEL_1681:
                                                                                                                                                                                                                                      char v8 = 55;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                    BOOL v233 = a1 == 1767989617 && a2 == 0xE400000000000000;
                                                                                                                                                                                                                                    BOOL v234 = v233;
                                                                                                                                                                                                                                    char v8 = 55;
                                                                                                                                                                                                                                    if ((result & 1) == 0 && !v234)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                      if (result) {
                                                                                                                                                                                                                                        goto LABEL_1681;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (a1 == 2038004090 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                      {
LABEL_1693:
                                                                                                                                                                                                                                        char v8 = 24;
                                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                      BOOL v236 = a1 == 0x6E6F6D6D6F63 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                                      char v8 = 24;
                                                                                                                                                                                                                                      if ((result & 1) == 0 && !v236)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                        if (result) {
                                                                                                                                                                                                                                          goto LABEL_1693;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (a1 == 2054847098 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          char v8 = -101;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                          BOOL v238 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
                                                                                                                                                                                                                                          char v8 = -101;
                                                                                                                                                                                                                                          if ((result & 1) == 0 && !v238)
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                            if (result) {
                                                                                                                                                                                                                                              char v8 = -101;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                              char v8 = -93;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  *a3 = v8;
  return result;
}

uint64_t closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v4 = result;
  if (result == 0x6D616C6461 && a2 == 0xE500000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 289;
    goto LABEL_5;
  }
  if (v4 == 0x756E6E6165676561 && a2 == 0xED0000737265626DLL
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 166;
    goto LABEL_5;
  }
  if (v4 == 1836017761 && a2 == 0xE400000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 231;
    goto LABEL_5;
  }
  if (v4 == 0x63696D6568636C61 && a2 == 0xEA00000000006C61
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
    || v4 == 0xD000000000000011 && a2 == 0x800000020D9E05C0
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 302;
    goto LABEL_5;
  }
  if (v4 == 0x7465626168706C61 && a2 == 0xEC00000066706369
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
    || v4 == 0xD00000000000001BLL && a2 == 0x800000020D9E05E0
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 154;
    goto LABEL_5;
  }
  if (v4 == 0xD000000000000014 && a2 == 0x800000020D9E0420
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    __int16 v6 = 253;
    goto LABEL_5;
  }
  if (v4 == 0xD000000000000011 && a2 == 0x800000020D9E0600)
  {
LABEL_34:
    __int16 v6 = 276;
    goto LABEL_5;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v8 = v4 == 0xD00000000000001BLL && a2 == 0x800000020D9E0620;
  __int16 v6 = 276;
  if ((result & 1) == 0 && !v8)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_34;
    }
    if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E0640
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      __int16 v6 = 167;
      goto LABEL_5;
    }
    if (v4 == 0x73746E6569636E61 && a2 == 0xEE00736C6F626D79
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      __int16 v6 = 168;
      goto LABEL_5;
    }
    if (v4 == 0x636962617261 && a2 == 0xE600000000000000
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      __int16 v6 = 12;
      goto LABEL_5;
    }
    if (v4 == 0x7865636962617261 && a2 == 0xEA00000000006174)
    {
LABEL_58:
      __int16 v6 = 21;
      goto LABEL_5;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v9 = v4 == 0x7865636962617261 && a2 == 0xEF616465646E6574;
    BOOL v10 = v9;
    __int16 v6 = 21;
    if ((result & 1) == 0 && !v10)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_58;
      }
      if (v4 == 0x7865636962617261 && a2 == 0xEA00000000006274)
      {
LABEL_70:
        __int16 v6 = 20;
        goto LABEL_5;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v11 = v4 == 0x7865636962617261 && a2 == 0xEF626465646E6574;
      BOOL v12 = v11;
      __int16 v6 = 20;
      if ((result & 1) == 0 && !v12)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_70;
        }
        if (v4 == 0x616D636962617261 && a2 == 0xEA00000000006874
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
          || v4 == 0xD000000000000023 && a2 == 0x800000020D9E0660
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          __int16 v6 = 292;
          goto LABEL_5;
        }
        if (v4 == 0x6670636962617261 && a2 == 0xE900000000000061
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
          || v4 == 0xD000000000000018 && a2 == 0x800000020D9E0690
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          __int16 v6 = 155;
          goto LABEL_5;
        }
        if (v4 == 0x6670636962617261 && a2 == 0xE900000000000062)
        {
LABEL_105:
          __int16 v6 = 161;
          goto LABEL_5;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v13 = v4 == 0xD000000000000018 && a2 == 0x800000020D9E06B0;
        BOOL v14 = v13;
        __int16 v6 = 161;
        if ((result & 1) == 0 && !v14)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_105;
          }
          if (v4 == 0x7573636962617261 && a2 == 0xE900000000000070
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0xD000000000000010 && a2 == 0x800000020D9E06D0
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 14;
            goto LABEL_5;
          }
          if (v4 == 0x6E61696E656D7261 && a2 == 0xE800000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 10;
            goto LABEL_5;
          }
          if (v4 == 0x73776F727261 && a2 == 0xE600000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 78;
            goto LABEL_5;
          }
          if (v4 == 0x6969637361 && a2 == 0xE500000000000000) {
            goto LABEL_123;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          __int16 v6 = 0;
          if (result) {
            goto LABEL_5;
          }
          if (v4 == 0x74616C6369736162 && a2 == 0xEA00000000006E69)
          {
LABEL_123:
            __int16 v6 = 0;
            goto LABEL_5;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          __int16 v6 = 0;
          if (result) {
            goto LABEL_5;
          }
          if (v4 == 0x6E617473657661 && a2 == 0xE700000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 200;
            goto LABEL_5;
          }
          if (v4 == 0x6573656E696C6162 && a2 == 0xE800000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 58;
            goto LABEL_5;
          }
          if (v4 == 0x6D756D6162 && a2 == 0xE500000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 126;
            goto LABEL_5;
          }
          if (v4 == 0x7075736D756D6162 && a2 == 0xE800000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7075736D756D6162 && a2 == 0xEF746E656D656C70
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 254;
            goto LABEL_5;
          }
          if (v4 == 0x6861766173736162 && a2 == 0xE800000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 257;
            goto LABEL_5;
          }
          if (v4 == 0x6B61746162 && a2 == 0xE500000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 60;
            goto LABEL_5;
          }
          if (v4 == 0x696C61676E6562 && a2 == 0xE700000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 23;
            goto LABEL_5;
          }
          if (v4 == 0x6B75736B69616862 && a2 == 0xE900000000000069
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 240;
            goto LABEL_5;
          }
          if (v4 == 0x656C656B636F6C62 && a2 == 0xED000073746E656DLL
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 85;
            goto LABEL_5;
          }
          if (v4 == 0x6F666F6D6F706F62 && a2 == 0xE800000000000000
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            __int16 v6 = 110;
            goto LABEL_5;
          }
          if (v4 == 0x6F666F6D6F706F62 && a2 == 0xEB00000000747865)
          {
LABEL_182:
            __int16 v6 = 113;
            goto LABEL_5;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v15 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E06F0;
          BOOL v16 = v15;
          __int16 v6 = 113;
          if ((result & 1) == 0 && !v16)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_182;
            }
            if (v4 == 0x6977617264786F62 && a2 == 0xEA0000000000676ELL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 84;
              goto LABEL_5;
            }
            if (v4 == 0x696D68617262 && a2 == 0xE600000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 214;
              goto LABEL_5;
            }
            if (v4 == 0x656C6C69617262 && a2 == 0xE700000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0x70656C6C69617262 && a2 == 0xEF736E7265747461
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 91;
              goto LABEL_5;
            }
            if (v4 == 0x6573656E69677562 && a2 == 0xE800000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 55;
              goto LABEL_5;
            }
            if (v4 == 0x6469687562 && a2 == 0xE500000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 46;
              goto LABEL_5;
            }
            if (v4 == 0x6E69746E617A7962 && a2 == 0xEE00636973756D65
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0xD000000000000017 && a2 == 0x800000020D9E0710
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 274;
              goto LABEL_5;
            }
            if (v4 == 0x6E6169726163 && a2 == 0xE600000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 171;
              goto LABEL_5;
            }
            if (v4 == 0xD000000000000011 && a2 == 0x800000020D9E03C0
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 183;
              goto LABEL_5;
            }
            if (v4 == 0x616D6B616863 && a2 == 0xE600000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 217;
              goto LABEL_5;
            }
            if (v4 == 1835100259 && a2 == 0xE400000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 139;
              goto LABEL_5;
            }
            if (v4 == 0x65656B6F72656863 && a2 == 0xE800000000000000
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 40;
              goto LABEL_5;
            }
            if (v4 == 0x65656B6F72656863 && a2 == 0xEB00000000707573
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0xD000000000000012 && a2 == 0x800000020D9E0730
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 145;
              goto LABEL_5;
            }
            if (v4 == 0x6D79737373656863 && a2 == 0xEC000000736C6F62
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 306;
              goto LABEL_5;
            }
            if (v4 == 0x696D7361726F6863 && a2 == 0xEA00000000006E61
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              __int16 v6 = 212;
              goto LABEL_5;
            }
            if (v4 == 7039587 && a2 == 0xE300000000000000)
            {
LABEL_259:
              __int16 v6 = 120;
              goto LABEL_5;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v17 = v4 == 0xD000000000000014 && a2 == 0x800000020D9E0750;
            BOOL v18 = v17;
            __int16 v6 = 120;
            if ((result & 1) == 0 && !v18)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_259;
              }
              if (v4 == 0x61706D6F636B6A63 && a2 == 0xE900000000000074)
              {
LABEL_271:
                __int16 v6 = 117;
                goto LABEL_5;
              }
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v19 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E0770;
              BOOL v20 = v19;
              __int16 v6 = 117;
              if ((result & 1) == 0 && !v20)
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result) {
                  goto LABEL_271;
                }
                if (v4 == 0x61706D6F636B6A63 && a2 == 0xEE00736D726F6674
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD000000000000015 && a2 == 0x800000020D9E0790
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 159;
                  goto LABEL_5;
                }
                if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E07B0
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD00000000000001ALL && a2 == 0x800000020D9E07D0
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 153;
                  goto LABEL_5;
                }
                if (v4 == 0xD000000000000016 && a2 == 0x800000020D9E07F0
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || (uint64_t result = 0xD000000000000024, v4 == 0xD000000000000024) && a2 == 0x800000020D9E0810
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 314;
                  goto LABEL_5;
                }
                if (v4 == 0x617478656B6A63 && a2 == 0xE700000000000000
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E0840
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  __int16 v6 = 118;
                  goto LABEL_5;
                }
                if (v4 == 0x627478656B6A63 && a2 == 0xE700000000000000)
                {
LABEL_311:
                  __int16 v6 = 309;
                  goto LABEL_5;
                }
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v21 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E0860;
                BOOL v22 = v21;
                __int16 v6 = 309;
                if ((result & 1) == 0 && !v22)
                {
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if (result) {
                    goto LABEL_311;
                  }
                  if (v4 == 0x637478656B6A63 && a2 == 0xE700000000000000)
                  {
LABEL_323:
                    __int16 v6 = 310;
                    goto LABEL_5;
                  }
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v23 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E0880;
                  BOOL v24 = v23;
                  __int16 v6 = 310;
                  if ((result & 1) == 0 && !v24)
                  {
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if (result) {
                      goto LABEL_323;
                    }
                    if (v4 == 0x647478656B6A63 && a2 == 0xE700000000000000)
                    {
LABEL_335:
                      __int16 v6 = 311;
                      goto LABEL_5;
                    }
                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v25 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E08A0;
                    BOOL v26 = v25;
                    __int16 v6 = 311;
                    if ((result & 1) == 0 && !v26)
                    {
                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if (result) {
                        goto LABEL_335;
                      }
                      if (v4 == 0x657478656B6A63 && a2 == 0xE700000000000000)
                      {
LABEL_347:
                        __int16 v6 = 312;
                        goto LABEL_5;
                      }
                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v27 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E08C0;
                      BOOL v28 = v27;
                      __int16 v6 = 312;
                      if ((result & 1) == 0 && !v28)
                      {
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result) {
                          goto LABEL_347;
                        }
                        if (v4 == 0x667478656B6A63 && a2 == 0xE700000000000000)
                        {
LABEL_359:
                          __int16 v6 = 313;
                          goto LABEL_5;
                        }
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v29 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E08E0;
                        BOOL v30 = v29;
                        __int16 v6 = 313;
                        if ((result & 1) == 0 && !v30)
                        {
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if (result) {
                            goto LABEL_359;
                          }
                          if (v4 == 0x677478656B6A63 && a2 == 0xE700000000000000)
                          {
LABEL_371:
                            __int16 v6 = 315;
                            goto LABEL_5;
                          }
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v31 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E0900;
                          BOOL v32 = v31;
                          __int16 v6 = 315;
                          if ((result & 1) == 0 && !v32)
                          {
                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if (result) {
                              goto LABEL_371;
                            }
                            if (v4 == 0x63696461726B6A63 && a2 == 0xEE00707573736C61)
                            {
LABEL_383:
                              __int16 v6 = 104;
                              goto LABEL_5;
                            }
                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            BOOL v33 = v4 == 0xD000000000000015 && a2 == 0x800000020D9E0920;
                            BOOL v34 = v33;
                            __int16 v6 = 104;
                            if ((result & 1) == 0 && !v34)
                            {
                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if (result) {
                                goto LABEL_383;
                              }
                              if (v4 == 0x6B6F7274736B6A63 && a2 == 0xEA00000000007365
                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                              {
                                __int16 v6 = 114;
                                goto LABEL_5;
                              }
                              if (v4 == 0x6F626D79736B6A63 && a2 == 0xEA0000000000736CLL)
                              {
LABEL_399:
                                __int16 v6 = 107;
                                goto LABEL_5;
                              }
                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              BOOL v35 = v4 == 0xD000000000000018 && a2 == 0x800000020D9E0940;
                              BOOL v36 = v35;
                              __int16 v6 = 107;
                              if ((result & 1) == 0 && !v36)
                              {
                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if (result) {
                                  goto LABEL_399;
                                }
                                if (v4 == 0x616A7461706D6F63 && a2 == 0xEA00000000006F6DLL)
                                {
LABEL_411:
                                  __int16 v6 = 111;
                                  goto LABEL_5;
                                }
                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                BOOL v37 = v4 == 0xD000000000000017 && a2 == 0x800000020D9E0960;
                                BOOL v38 = v37;
                                __int16 v6 = 111;
                                if ((result & 1) == 0 && !v38)
                                {
                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if (result) {
                                    goto LABEL_411;
                                  }
                                  if (v4 == 0x706C6F72746E6F63 && a2 == 0xEF73657275746369
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    __int16 v6 = 81;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 0x636974706F63 && a2 == 0xE600000000000000
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    __int16 v6 = 98;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 0xD000000000000012 && a2 == 0x800000020D9E0980
                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    __int16 v6 = 172;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 0x676E69746E756F63 && a2 == 0xEB00000000646F72)
                                  {
LABEL_435:
                                    __int16 v6 = 279;
                                    goto LABEL_5;
                                  }
                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  BOOL v39 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E09A0;
                                  BOOL v40 = v39;
                                  __int16 v6 = 279;
                                  if ((result & 1) == 0 && !v40)
                                  {
                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if (result) {
                                      goto LABEL_435;
                                    }
                                    if (v4 == 0x726F6669656E7563 && a2 == 0xE90000000000006DLL
                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      __int16 v6 = 247;
                                      goto LABEL_5;
                                    }
                                    if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E09C0)
                                    {
LABEL_451:
                                      __int16 v6 = 248;
                                      goto LABEL_5;
                                    }
                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    BOOL v41 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E09E0;
                                    BOOL v42 = v41;
                                    __int16 v6 = 248;
                                    if ((result & 1) == 0 && !v42)
                                    {
                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if (result) {
                                        goto LABEL_451;
                                      }
                                      if (v4 == 0x79636E6572727563 && a2 == 0xEF736C6F626D7973
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 74;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E0A00
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 187;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0x6E696D6F72707963 && a2 == 0xEB000000006E616FLL
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 250;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0x63696C6C69727963 && a2 == 0xE800000000000000
                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        __int16 v6 = 8;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0x63696C6C69727963 && a2 == 0xEC00000061747865)
                                      {
LABEL_479:
                                        __int16 v6 = 102;
                                        goto LABEL_5;
                                      }
                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      BOOL v43 = v4 == 0xD000000000000011 && a2 == 0x800000020D9E0A20;
                                      BOOL v44 = v43;
                                      __int16 v6 = 102;
                                      if ((result & 1) == 0 && !v44)
                                      {
                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if (result) {
                                          goto LABEL_479;
                                        }
                                        if (v4 == 0x63696C6C69727963 && a2 == 0xEC00000062747865)
                                        {
LABEL_491:
                                          __int16 v6 = 125;
                                          goto LABEL_5;
                                        }
                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        BOOL v45 = v4 == 0xD000000000000011 && a2 == 0x800000020D9E0A40;
                                        BOOL v46 = v45;
                                        __int16 v6 = 125;
                                        if ((result & 1) == 0 && !v46)
                                        {
                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if (result) {
                                            goto LABEL_491;
                                          }
                                          if (v4 == 0x63696C6C69727963 && a2 == 0xEC00000063747865)
                                          {
LABEL_503:
                                            __int16 v6 = 63;
                                            goto LABEL_5;
                                          }
                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          BOOL v47 = v4 == 0xD000000000000011 && a2 == 0x800000020D9E0A60;
                                          BOOL v48 = v47;
                                          __int16 v6 = 63;
                                          if ((result & 1) == 0 && !v48)
                                          {
                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if (result) {
                                              goto LABEL_503;
                                            }
                                            if (v4 == 0x63696C6C69727963 && a2 == 0xEB00000000707573)
                                            {
LABEL_523:
                                              __int16 v6 = 9;
                                              goto LABEL_5;
                                            }
                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            BOOL v49 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E0A80;
                                            BOOL v50 = v49;
                                            __int16 v6 = 9;
                                            if ((result & 1) == 0 && !v50)
                                            {
                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              BOOL v51 = v4 == 0xD000000000000015 && a2 == 0x800000020D9E0AA0;
                                              BOOL v52 = v51;
                                              __int16 v6 = 9;
                                              if ((result & 1) == 0 && !v52)
                                              {
                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if (result) {
                                                  goto LABEL_523;
                                                }
                                                if (v4 == 0x74657265736564 && a2 == 0xE700000000000000
                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                      (result & 1) != 0))
                                                {
                                                  __int16 v6 = 178;
                                                  goto LABEL_5;
                                                }
                                                if (v4 == 0x6167616E61766564 && a2 == 0xEA00000000006972
                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                      (result & 1) != 0))
                                                {
                                                  __int16 v6 = 22;
                                                  goto LABEL_5;
                                                }
                                                if (v4 == 0x6167616E61766564 && a2 == 0xED00007478656972)
                                                {
LABEL_543:
                                                  __int16 v6 = 133;
                                                  goto LABEL_5;
                                                }
                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                BOOL v53 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E0AC0;
                                                BOOL v54 = v53;
                                                __int16 v6 = 133;
                                                if ((result & 1) == 0 && !v54)
                                                {
                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if (result) {
                                                    goto LABEL_543;
                                                  }
                                                  if (v4 == 0x6974697263616964 && a2 == 0xEC000000736C6163
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v4 == 0xD000000000000019 && a2 == 0x800000020D9E0AE0
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0))
                                                  {
                                                    __int16 v6 = 6;
                                                    goto LABEL_5;
                                                  }
                                                  if (v4 == 0x6974697263616964 && a2 == 0xEF747865736C6163
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v4 == 0xD000000000000021 && a2 == 0x800000020D9E0B00
                                                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0))
                                                  {
                                                    __int16 v6 = 57;
                                                    goto LABEL_5;
                                                  }
                                                  if (v4 == 0xD000000000000016 && a2 == 0x800000020D9E0B30)
                                                  {
LABEL_577:
                                                    __int16 v6 = 75;
                                                    goto LABEL_5;
                                                  }
                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  BOOL v55 = v4 == 0xD000000000000023 && a2 == 0x800000020D9E0B50;
                                                  BOOL v56 = v55;
                                                  __int16 v6 = 75;
                                                  if ((result & 1) == 0 && !v56)
                                                  {
                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    BOOL v57 = v4 == 0xD000000000000018 && a2 == 0x800000020D9E0B80;
                                                    BOOL v58 = v57;
                                                    __int16 v6 = 75;
                                                    if ((result & 1) == 0 && !v58)
                                                    {
                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if (result) {
                                                        goto LABEL_577;
                                                      }
                                                      if (v4 == 0x6974697263616964 && a2 == 0xEF707573736C6163)
                                                      {
LABEL_589:
                                                        __int16 v6 = 69;
                                                        goto LABEL_5;
                                                      }
                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      BOOL v59 = v4 == 0xD000000000000023 && a2 == 0x800000020D9E0BA0;
                                                      BOOL v60 = v59;
                                                      __int16 v6 = 69;
                                                      if ((result & 1) == 0 && !v60)
                                                      {
                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if (result) {
                                                          goto LABEL_589;
                                                        }
                                                        if (v4 == 0x73746162676E6964 && a2 == 0xE800000000000000
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 88;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x756B617365766964 && a2 == 0xEA00000000007572
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 234;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6172676F64 && a2 == 0xE500000000000000
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 232;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6F6E696D6F64 && a2 == 0xE600000000000000
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0)
                                                          || v4 == 0x69746F6E696D6F64 && a2 == 0xEB0000000073656CLL
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 294;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6E61796F6C707564 && a2 == 0xE800000000000000
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 271;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000016 && a2 == 0x800000020D9E0BD0
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 249;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000020 && a2 == 0x800000020D9E0BF0
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 252;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E0400
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 251;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6E617361626C65 && a2 == 0xE700000000000000
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 182;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6369616D796C65 && a2 == 0xE700000000000000
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 213;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6E6F6369746F6D65 && a2 == 0xE900000000000073
                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          __int16 v6 = 299;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E0C20)
                                                        {
LABEL_648:
                                                          __int16 v6 = 83;
                                                          goto LABEL_5;
                                                        }
                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        BOOL v61 = v4 == 0xD000000000000015 && a2 == 0x800000020D9E0C40;
                                                        BOOL v62 = v61;
                                                        __int16 v6 = 83;
                                                        if ((result & 1) == 0 && !v62)
                                                        {
                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if (result) {
                                                            goto LABEL_648;
                                                          }
                                                          if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E0C60)
                                                          {
LABEL_660:
                                                            __int16 v6 = 296;
                                                            goto LABEL_5;
                                                          }
                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          BOOL v63 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E0C80;
                                                          BOOL v64 = v63;
                                                          __int16 v6 = 296;
                                                          if ((result & 1) == 0 && !v64)
                                                          {
                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            if (result) {
                                                              goto LABEL_660;
                                                            }
                                                            if (v4 == 0x6465736F6C636E65
                                                              && a2 == 0xEB000000006B6A63)
                                                            {
LABEL_672:
                                                              __int16 v6 = 116;
                                                              goto LABEL_5;
                                                            }
                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            BOOL v65 = v4 == 0xD00000000000001BLL
                                                               && a2 == 0x800000020D9E0CA0;
                                                            BOOL v66 = v65;
                                                            __int16 v6 = 116;
                                                            if ((result & 1) == 0 && !v66)
                                                            {
                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if (result) {
                                                                goto LABEL_672;
                                                              }
                                                              if (v4 == 0xD000000000000016
                                                                && a2 == 0x800000020D9E0CC0
                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0)
                                                                || v4 == 0xD00000000000001DLL
                                                                && a2 == 0x800000020D9E0CE0
                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0))
                                                              {
                                                                __int16 v6 = 297;
                                                                goto LABEL_5;
                                                              }
                                                              if (v4 == 0x6369706F69687465
                                                                && a2 == 0xE800000000000000
                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0))
                                                              {
                                                                __int16 v6 = 38;
                                                                goto LABEL_5;
                                                              }
                                                              if (v4 == 0x6369706F69687465
                                                                && a2 == 0xEB00000000747865)
                                                              {
LABEL_695:
                                                                __int16 v6 = 101;
                                                                goto LABEL_5;
                                                              }
                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              BOOL v67 = v4 == 0xD000000000000010
                                                                 && a2 == 0x800000020D9E0D00;
                                                              BOOL v68 = v67;
                                                              __int16 v6 = 101;
                                                              if ((result & 1) == 0 && !v68)
                                                              {
                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                if (result) {
                                                                  goto LABEL_695;
                                                                }
                                                                if (v4 == 0x6369706F69687465
                                                                  && a2 == 0xEC00000061747865)
                                                                {
LABEL_707:
                                                                  __int16 v6 = 143;
                                                                  goto LABEL_5;
                                                                }
                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                BOOL v69 = v4 == 0xD000000000000011
                                                                   && a2 == 0x800000020D9E0D20;
                                                                BOOL v70 = v69;
                                                                __int16 v6 = 143;
                                                                if ((result & 1) == 0 && !v70)
                                                                {
                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  if (result) {
                                                                    goto LABEL_707;
                                                                  }
                                                                  if (v4 == 0x6369706F69687465
                                                                    && a2 == 0xEC00000062747865)
                                                                  {
LABEL_719:
                                                                    __int16 v6 = 287;
                                                                    goto LABEL_5;
                                                                  }
                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  BOOL v71 = v4 == 0xD000000000000011
                                                                     && a2 == 0x800000020D9E0D40;
                                                                  BOOL v72 = v71;
                                                                  __int16 v6 = 287;
                                                                  if ((result & 1) == 0 && !v72)
                                                                  {
                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    if (result) {
                                                                      goto LABEL_719;
                                                                    }
                                                                    if (v4 == 0x6369706F69687465
                                                                      && a2 == 0xEB00000000707573)
                                                                    {
LABEL_731:
                                                                      __int16 v6 = 39;
                                                                      goto LABEL_5;
                                                                    }
                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    BOOL v73 = v4 == 0xD000000000000012
                                                                       && a2 == 0x800000020D9E0D60;
                                                                    BOOL v74 = v73;
                                                                    __int16 v6 = 39;
                                                                    if ((result & 1) == 0 && !v74)
                                                                    {
                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      if (result) {
                                                                        goto LABEL_731;
                                                                      }
                                                                      if (v4 == 0x697274656D6F6567
                                                                        && a2 == 0xEF73657061687363
                                                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                            (result & 1) != 0))
                                                                      {
                                                                        __int16 v6 = 86;
                                                                        goto LABEL_5;
                                                                      }
                                                                      if (v4 == 0xD000000000000012
                                                                        && a2 == 0x800000020D9E0D80)
                                                                      {
LABEL_747:
                                                                        __int16 v6 = 303;
                                                                        goto LABEL_5;
                                                                      }
                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      BOOL v75 = v4 == 0xD000000000000017
                                                                         && a2 == 0x800000020D9E0DA0;
                                                                      BOOL v76 = v75;
                                                                      __int16 v6 = 303;
                                                                      if ((result & 1) == 0 && !v76)
                                                                      {
                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        if (result) {
                                                                          goto LABEL_747;
                                                                        }
                                                                        if (v4 == 0x6E616967726F6567
                                                                          && a2 == 0xE800000000000000
                                                                          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                              (result & 1) != 0))
                                                                        {
                                                                          __int16 v6 = 36;
                                                                          goto LABEL_5;
                                                                        }
                                                                        if (v4 == 0x6E616967726F6567
                                                                          && a2 == 0xEB00000000747865)
                                                                        {
LABEL_763:
                                                                          __int16 v6 = 64;
                                                                          goto LABEL_5;
                                                                        }
                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        BOOL v77 = v4 == 0xD000000000000010
                                                                           && a2 == 0x800000020D9E0DC0;
                                                                        BOOL v78 = v77;
                                                                        __int16 v6 = 64;
                                                                        if ((result & 1) == 0 && !v78)
                                                                        {
                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          if (result) {
                                                                            goto LABEL_763;
                                                                          }
                                                                          if (v4 == 0x6E616967726F6567
                                                                            && a2 == 0xEB00000000707573)
                                                                          {
LABEL_775:
                                                                            __int16 v6 = 99;
                                                                            goto LABEL_5;
                                                                          }
                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          BOOL v79 = v4 == 0xD000000000000012
                                                                             && a2 == 0x800000020D9E0DE0;
                                                                          BOOL v80 = v79;
                                                                          __int16 v6 = 99;
                                                                          if ((result & 1) == 0 && !v80)
                                                                          {
                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            if (result) {
                                                                              goto LABEL_775;
                                                                            }
                                                                            if (v4 == 0x74696C6F67616C67
                                                                              && a2 == 0xEA00000000006369
                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                  (result & 1) != 0))
                                                                            {
                                                                              __int16 v6 = 96;
                                                                              goto LABEL_5;
                                                                            }
                                                                            if (v4 == 0x74696C6F67616C67
                                                                              && a2 == 0xED00007075736369)
                                                                            {
LABEL_791:
                                                                              __int16 v6 = 283;
                                                                              goto LABEL_5;
                                                                            }
                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            BOOL v81 = v4 == 0xD000000000000014
                                                                               && a2 == 0x800000020D9E0E00;
                                                                            BOOL v82 = v81;
                                                                            __int16 v6 = 283;
                                                                            if ((result & 1) == 0 && !v82)
                                                                            {
                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              if (result) {
                                                                                goto LABEL_791;
                                                                              }
                                                                              if (v4 == 0x636968746F67
                                                                                && a2 == 0xE600000000000000
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                __int16 v6 = 174;
                                                                                goto LABEL_5;
                                                                              }
                                                                              if (v4 == 0x6168746E617267
                                                                                && a2 == 0xE700000000000000
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                __int16 v6 = 224;
                                                                                goto LABEL_5;
                                                                              }
                                                                              if (v4 == 0x6B65657267
                                                                                && a2 == 0xE500000000000000
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || v4 == 0x646E616B65657267
                                                                                && a2 == 0xEE00636974706F63
                                                                                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                __int16 v6 = 7;
                                                                                goto LABEL_5;
                                                                              }
                                                                              if (v4 == 0x7478656B65657267
                                                                                && a2 == 0xE800000000000000)
                                                                              {
LABEL_818:
                                                                                __int16 v6 = 71;
                                                                                goto LABEL_5;
                                                                              }
                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              BOOL v83 = v4 == 0x7478656B65657267
                                                                                 && a2 == 0xED00006465646E65;
                                                                              BOOL v84 = v83;
                                                                              __int16 v6 = 71;
                                                                              if ((result & 1) == 0 && !v84)
                                                                              {
                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                if (result) {
                                                                                  goto LABEL_818;
                                                                                }
                                                                                if (v4 == 0x69746172616A7567
                                                                                  && a2 == 0xE800000000000000
                                                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  __int16 v6 = 25;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                if (v4 == 0x67616C616A6E7567
                                                                                  && a2 == 0xEC00000069646E6FLL
                                                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  __int16 v6 = 243;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                if (v4 == 0x69686B756D727567
                                                                                  && a2 == 0xE800000000000000
                                                                                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  __int16 v6 = 24;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                if (v4 == 0xD000000000000010
                                                                                  && a2 == 0x800000020D9E0E20)
                                                                                {
LABEL_842:
                                                                                  __int16 v6 = 162;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                BOOL v85 = v4 == 0xD00000000000001ALL
                                                                                   && a2 == 0x800000020D9E0E40;
                                                                                BOOL v86 = v85;
                                                                                __int16 v6 = 162;
                                                                                if ((result & 1) == 0 && !v86)
                                                                                {
                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  if (result) {
                                                                                    goto LABEL_842;
                                                                                  }
                                                                                  if (v4 == 0x6B72616D666C6168
                                                                                    && a2 == 0xE900000000000073)
                                                                                  {
LABEL_854:
                                                                                    __int16 v6 = 158;
                                                                                    goto LABEL_5;
                                                                                  }
                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  BOOL v87 = v4 == 0xD000000000000012
                                                                                     && a2 == 0x800000020D9E0E60;
                                                                                  BOOL v88 = v87;
                                                                                  __int16 v6 = 158;
                                                                                  if ((result & 1) == 0 && !v88)
                                                                                  {
                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    if (result) {
                                                                                      goto LABEL_854;
                                                                                    }
                                                                                    if (v4 == 0x6C75676E6168
                                                                                      && a2 == 0xE600000000000000
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0)
                                                                                      || v4 == 0x79736C75676E6168
                                                                                      && a2 == 0xEF73656C62616C6CLL
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 147;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x6F726966696E6168
                                                                                      && a2 == 0xEE006179676E6968
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 206;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x6F6F6E756E6168
                                                                                      && a2 == 0xE700000000000000
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 45;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x6E6172746168
                                                                                      && a2 == 0xE600000000000000
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 191;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x776572626568
                                                                                      && a2 == 0xE600000000000000
                                                                                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      __int16 v6 = 11;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0xD000000000000010
                                                                                      && a2 == 0x800000020D9E0E80)
                                                                                    {
LABEL_889:
                                                                                      __int16 v6 = 150;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    BOOL v89 = v4 == 0xD000000000000018
                                                                                       && a2 == 0x800000020D9E0EA0;
                                                                                    BOOL v90 = v89;
                                                                                    __int16 v6 = 150;
                                                                                    if ((result & 1) == 0 && !v90)
                                                                                    {
                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      if (result) {
                                                                                        goto LABEL_889;
                                                                                      }
                                                                                      if (v4 == 0x7272757368676968
                                                                                        && a2 == 0xEE0073657461676FLL
                                                                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                            (result & 1) != 0))
                                                                                      {
                                                                                        __int16 v6 = 149;
                                                                                        goto LABEL_5;
                                                                                      }
                                                                                      if (v4 == 0x616E616761726968
                                                                                        && a2 == 0xE800000000000000
                                                                                        || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                            (result & 1) != 0))
                                                                                      {
                                                                                        __int16 v6 = 108;
                                                                                        goto LABEL_5;
                                                                                      }
                                                                                      if (v4 == 6513769
                                                                                        && a2 == 0xE300000000000000)
                                                                                      {
LABEL_909:
                                                                                        __int16 v6 = 106;
                                                                                        goto LABEL_5;
                                                                                      }
                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      BOOL v91 = v4 == 0xD000000000000020
                                                                                         && a2 == 0x800000020D9E0EC0;
                                                                                      BOOL v92 = v91;
                                                                                      __int16 v6 = 106;
                                                                                      if ((result & 1) == 0 && !v92)
                                                                                      {
                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        if (result) {
                                                                                          goto LABEL_909;
                                                                                        }
                                                                                        if (v4 == 0xD000000000000012
                                                                                          && a2 == 0x800000020D9E0EF0)
                                                                                        {
LABEL_921:
                                                                                          __int16 v6 = 261;
                                                                                          goto LABEL_5;
                                                                                        }
                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        BOOL v93 = v4 == 0xD000000000000020
                                                                                           && a2 == 0x800000020D9E0F10;
                                                                                        BOOL v94 = v93;
                                                                                        __int16 v6 = 261;
                                                                                        if ((result & 1) == 0 && !v94)
                                                                                        {
                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          if (result) {
                                                                                            goto LABEL_921;
                                                                                          }
                                                                                          if (v4 == 0x6C61697265706D69
                                                                                            && a2 == 0xEF6369616D617261
                                                                                            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                (result & 1) != 0))
                                                                                          {
                                                                                            __int16 v6 = 188;
                                                                                            goto LABEL_5;
                                                                                          }
                                                                                          if (v4 == 0xD000000000000010
                                                                                            && a2 == 0x800000020D9E0F40)
                                                                                          {
LABEL_937:
                                                                                            __int16 v6 = 130;
                                                                                            goto LABEL_5;
                                                                                          }
                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          BOOL v95 = v4 == 0xD000000000000016
                                                                                             && a2 == 0x800000020D9E0F60;
                                                                                          BOOL v96 = v95;
                                                                                          __int16 v6 = 130;
                                                                                          if ((result & 1) == 0 && !v96)
                                                                                          {
                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            if (result) {
                                                                                              goto LABEL_937;
                                                                                            }
                                                                                            if (v4 == 0xD000000000000011
                                                                                              && a2 == 0x800000020D9E0F80
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 290;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 0xD000000000000014
                                                                                              && a2 == 0x800000020D9E04C0
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 202;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 0xD000000000000015
                                                                                              && a2 == 0x800000020D9E04E0
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 201;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 0x747865617069
                                                                                              && a2 == 0xE600000000000000
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0)
                                                                                              || v4 == 0x6E65747865617069
                                                                                              && a2 == 0xED0000736E6F6973
                                                                                              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              __int16 v6 = 4;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 1869439338
                                                                                              && a2 == 0xE400000000000000)
                                                                                            {
LABEL_968:
                                                                                              __int16 v6 = 37;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            BOOL v97 = v4 == 0x616A6C75676E6168
                                                                                               && a2 == 0xEA00000000006F6DLL;
                                                                                            BOOL v98 = v97;
                                                                                            __int16 v6 = 37;
                                                                                            if ((result & 1) == 0
                                                                                              && !v98)
                                                                                            {
                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              if (result) {
                                                                                                goto LABEL_968;
                                                                                              }
                                                                                              if (v4 == 0x617478656F6D616ALL
                                                                                                && a2 == 0xE800000000000000)
                                                                                              {
LABEL_980:
                                                                                                __int16 v6 = 136;
                                                                                                goto LABEL_5;
                                                                                              }
                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              BOOL v99 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E0FA0;
                                                                                              BOOL v100 = v99;
                                                                                              __int16 v6 = 136;
                                                                                              if ((result & 1) == 0
                                                                                                && !v100)
                                                                                              {
                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                if (result) {
                                                                                                  goto LABEL_980;
                                                                                                }
                                                                                                if (v4 == 0x627478656F6D616ALL && a2 == 0xE800000000000000)
                                                                                                {
LABEL_992:
                                                                                                  __int16 v6 = 148;
                                                                                                  goto LABEL_5;
                                                                                                }
                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                BOOL v101 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E0FC0;
                                                                                                BOOL v102 = v101;
                                                                                                __int16 v6 = 148;
                                                                                                if ((result & 1) == 0 && !v102)
                                                                                                {
                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  if (result) {
                                                                                                    goto LABEL_992;
                                                                                                  }
                                                                                                  if (v4 == 0x6573656E6176616ALL && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    __int16 v6 = 137;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  if (v4 == 0x69687469616BLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    __int16 v6 = 215;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  if (v4 == 0x61747865616E616BLL && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x65747865616E616BLL && a2 == 0xED0000616465646ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    __int16 v6 = 268;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  if (v4 == 0x62747865616E616BLL && a2 == 0xE800000000000000)
                                                                                                  {
LABEL_1019:
                                                                                                    __int16 v6 = 266;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  BOOL v103 = v4 == 0x65747865616E616BLL && a2 == 0xED0000626465646ELL;
                                                                                                  BOOL v104 = v103;
                                                                                                  __int16 v6 = 266;
                                                                                                  if ((result & 1) == 0 && !v104)
                                                                                                  {
                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    if (result) {
                                                                                                      goto LABEL_1019;
                                                                                                    }
                                                                                                    if (v4 == 0x707573616E616BLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x70707573616E616BLL && a2 == 0xEE00746E656D656CLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 267;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x6E75626E616BLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 112;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x6978676E616BLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x61726978676E616BLL && a2 == 0xEE00736C61636964 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 105;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x6164616E6E616BLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 29;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x616E616B6174616BLL && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      __int16 v6 = 109;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x616E616B6174616BLL && a2 == 0xEB00000000747865)
                                                                                                    {
LABEL_1057:
                                                                                                      __int16 v6 = 115;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    BOOL v105 = v4 == 0xD00000000000001ALL && a2 == 0x800000020D9E0FE0;
                                                                                                    BOOL v106 = v105;
                                                                                                    __int16 v6 = 115;
                                                                                                    if ((result & 1) == 0 && !v106)
                                                                                                    {
                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      if (result) {
                                                                                                        goto LABEL_1057;
                                                                                                      }
                                                                                                      if (v4 == 0x696C686179616BLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 134;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x7468736F7261686BLL && a2 == 0xEA00000000006968 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 196;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0xD000000000000011 && a2 == 0x800000020D9E0480 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 264;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x72656D686BLL && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 48;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x6D797372656D686BLL && a2 == 0xEC000000736C6F62 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 54;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x696B6A6F686BLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 221;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x646177616475686BLL && a2 == 0xE900000000000069 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 223;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 7299436 && a2 == 0xE300000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        __int16 v6 = 33;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x7573316E6974616CLL && a2 == 0xE900000000000070)
                                                                                                      {
LABEL_1109:
                                                                                                        __int16 v6 = 1;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      BOOL v107 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E1000;
                                                                                                      BOOL v108 = v107;
                                                                                                      __int16 v6 = 1;
                                                                                                      if ((result & 1) == 0 && !v108)
                                                                                                      {
                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        BOOL v109 = v4 == 0x316E6974616CLL && a2 == 0xE600000000000000;
                                                                                                        BOOL v110 = v109;
                                                                                                        __int16 v6 = 1;
                                                                                                        if ((result & 1) == 0 && !v110)
                                                                                                        {
                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          if (result) {
                                                                                                            goto LABEL_1109;
                                                                                                          }
                                                                                                          if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000061)
                                                                                                          {
LABEL_1121:
                                                                                                            __int16 v6 = 2;
                                                                                                            goto LABEL_5;
                                                                                                          }
                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          BOOL v111 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00616465646E65;
                                                                                                          BOOL v112 = v111;
                                                                                                          __int16 v6 = 2;
                                                                                                          if ((result & 1) == 0 && !v112)
                                                                                                          {
                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            if (result) {
                                                                                                              goto LABEL_1121;
                                                                                                            }
                                                                                                            if (v4 == 0xD000000000000012 && a2 == 0x800000020D9E1020)
                                                                                                            {
LABEL_1133:
                                                                                                              __int16 v6 = 70;
                                                                                                              goto LABEL_5;
                                                                                                            }
                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            BOOL v113 = v4 == 0xD000000000000017 && a2 == 0x800000020D9E1040;
                                                                                                            BOOL v114 = v113;
                                                                                                            __int16 v6 = 70;
                                                                                                            if ((result & 1) == 0 && !v114)
                                                                                                            {
                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              if (result) {
                                                                                                                goto LABEL_1133;
                                                                                                              }
                                                                                                              if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000062)
                                                                                                              {
LABEL_1145:
                                                                                                                __int16 v6 = 3;
                                                                                                                goto LABEL_5;
                                                                                                              }
                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              BOOL v115 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00626465646E65;
                                                                                                              BOOL v116 = v115;
                                                                                                              __int16 v6 = 3;
                                                                                                              if ((result & 1) == 0 && !v116)
                                                                                                              {
                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                if (result) {
                                                                                                                  goto LABEL_1145;
                                                                                                                }
                                                                                                                if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000063)
                                                                                                                {
LABEL_1157:
                                                                                                                  __int16 v6 = 97;
                                                                                                                  goto LABEL_5;
                                                                                                                }
                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                BOOL v117 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00636465646E65;
                                                                                                                BOOL v118 = v117;
                                                                                                                __int16 v6 = 97;
                                                                                                                if ((result & 1) == 0 && !v118)
                                                                                                                {
                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  if (result) {
                                                                                                                    goto LABEL_1157;
                                                                                                                  }
                                                                                                                  if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000064)
                                                                                                                  {
LABEL_1169:
                                                                                                                    __int16 v6 = 128;
                                                                                                                    goto LABEL_5;
                                                                                                                  }
                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  BOOL v119 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00646465646E65;
                                                                                                                  BOOL v120 = v119;
                                                                                                                  __int16 v6 = 128;
                                                                                                                  if ((result & 1) == 0 && !v120)
                                                                                                                  {
                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    if (result) {
                                                                                                                      goto LABEL_1169;
                                                                                                                    }
                                                                                                                    if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000065)
                                                                                                                    {
LABEL_1181:
                                                                                                                      __int16 v6 = 144;
                                                                                                                      goto LABEL_5;
                                                                                                                    }
                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    BOOL v121 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00656465646E65;
                                                                                                                    BOOL v122 = v121;
                                                                                                                    __int16 v6 = 144;
                                                                                                                    if ((result & 1) == 0 && !v122)
                                                                                                                    {
                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      if (result) {
                                                                                                                        goto LABEL_1181;
                                                                                                                      }
                                                                                                                      if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000066)
                                                                                                                      {
LABEL_1193:
                                                                                                                        __int16 v6 = 186;
                                                                                                                        goto LABEL_5;
                                                                                                                      }
                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      BOOL v123 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00666465646E65;
                                                                                                                      BOOL v124 = v123;
                                                                                                                      __int16 v6 = 186;
                                                                                                                      if ((result & 1) == 0 && !v124)
                                                                                                                      {
                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        if (result) {
                                                                                                                          goto LABEL_1193;
                                                                                                                        }
                                                                                                                        if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000067)
                                                                                                                        {
LABEL_1205:
                                                                                                                          __int16 v6 = 282;
                                                                                                                          goto LABEL_5;
                                                                                                                        }
                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        BOOL v125 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00676465646E65;
                                                                                                                        BOOL v126 = v125;
                                                                                                                        __int16 v6 = 282;
                                                                                                                        if ((result & 1) == 0 && !v126)
                                                                                                                        {
                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          if (result) {
                                                                                                                            goto LABEL_1205;
                                                                                                                          }
                                                                                                                          if (v4 == 0x61686370656CLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 61;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0xD000000000000011 && a2 == 0x800000020D9E1060 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 76;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0x75626D696CLL && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 51;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0x617261656E696CLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 185;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E1080 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 165;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E10A0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 164;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 1970497900 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            __int16 v6 = 123;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0x7075737573696CLL && a2 == 0xE700000000000000)
                                                                                                                          {
LABEL_1245:
                                                                                                                            __int16 v6 = 245;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          BOOL v127 = v4 == 0x707075737573696CLL && a2 == 0xEE00746E656D656CLL;
                                                                                                                          BOOL v128 = v127;
                                                                                                                          __int16 v6 = 245;
                                                                                                                          if ((result & 1) == 0 && !v128)
                                                                                                                          {
                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            if (result) {
                                                                                                                              goto LABEL_1245;
                                                                                                                            }
                                                                                                                            if (v4 == 0x6F72727573776F6CLL && a2 == 0xED00007365746167 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 151;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x6E616963796CLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 170;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            uint64_t result = 0x6E616964796CLL;
                                                                                                                            if (v4 == 0x6E616964796CLL && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 193;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x696E616A6168616DLL && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 218;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x676E6F6A68616DLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x74676E6F6A68616DLL && a2 == 0xEC00000073656C69 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 293;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x726173616B616DLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 244;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x616C6179616C616DLL && a2 == 0xE90000000000006DLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 30;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x636961646E616DLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 18;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x65616863696E616DLL && a2 == 0xEA00000000006E61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 199;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x6E65686372616DLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 241;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x676D61726173616DLL && a2 == 0xEC00000069646E6FLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 242;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x68706C616874616DLL && a2 == 0xEC0000006D756E61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD00000000000001FLL, v4 == 0xD00000000000001FLL) && a2 == 0x800000020D9E10C0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              __int16 v6 = 280;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x7265706F6874616DLL && a2 == 0xED000073726F7461)
                                                                                                                            {
LABEL_1311:
                                                                                                                              __int16 v6 = 79;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            BOOL v129 = v4 == 0xD000000000000015 && a2 == 0x800000020D9E10E0;
                                                                                                                            BOOL v130 = v129;
                                                                                                                            __int16 v6 = 79;
                                                                                                                            if ((result & 1) == 0 && !v130)
                                                                                                                            {
                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              if (result) {
                                                                                                                                goto LABEL_1311;
                                                                                                                              }
                                                                                                                              if (v4 == 0x6D756E6E6179616DLL && a2 == 0xED0000736C617265 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                __int16 v6 = 277;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              if (v4 == 0x646961666564656DLL && a2 == 0xEB000000006E6972 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                __int16 v6 = 259;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              if (v4 == 0x616D69657465656DLL && a2 == 0xEB000000006B6579 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                __int16 v6 = 146;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              if (v4 == 0x616D69657465656DLL && a2 == 0xEE007478656B6579)
                                                                                                                              {
LABEL_1335:
                                                                                                                                __int16 v6 = 142;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              BOOL v131 = v4 == 0xD000000000000015 && a2 == 0x800000020D9E1100;
                                                                                                                              BOOL v132 = v131;
                                                                                                                              __int16 v6 = 142;
                                                                                                                              if ((result & 1) == 0 && !v132)
                                                                                                                              {
                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                if (result) {
                                                                                                                                  goto LABEL_1335;
                                                                                                                                }
                                                                                                                                if (v4 == 0x6B696B65646E656DLL && a2 == 0xEC00000069756B61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 288;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 0x636974696F72656DLL && a2 == 0xEF65766973727563 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 195;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E04A0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 194;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 1868654957 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  __int16 v6 = 260;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 0x6F7272616373696DLL && a2 == 0xEA00000000007377)
                                                                                                                                {
LABEL_1363:
                                                                                                                                  __int16 v6 = 95;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                BOOL v133 = v4 == 0xD00000000000001DLL && a2 == 0x800000020D9E1120;
                                                                                                                                BOOL v134 = v133;
                                                                                                                                __int16 v6 = 95;
                                                                                                                                if ((result & 1) == 0 && !v134)
                                                                                                                                {
                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  if (result) {
                                                                                                                                    goto LABEL_1363;
                                                                                                                                  }
                                                                                                                                  if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E1140)
                                                                                                                                  {
LABEL_1375:
                                                                                                                                    __int16 v6 = 89;
                                                                                                                                    goto LABEL_5;
                                                                                                                                  }
                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  BOOL v135 = v4 == 0xD000000000000021 && a2 == 0x800000020D9E1160;
                                                                                                                                  BOOL v136 = v135;
                                                                                                                                  __int16 v6 = 89;
                                                                                                                                  if ((result & 1) == 0 && !v136)
                                                                                                                                  {
                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    if (result) {
                                                                                                                                      goto LABEL_1375;
                                                                                                                                    }
                                                                                                                                    if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E1190)
                                                                                                                                    {
LABEL_1387:
                                                                                                                                      __int16 v6 = 93;
                                                                                                                                      goto LABEL_5;
                                                                                                                                    }
                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    BOOL v137 = v4 == 0xD000000000000021 && a2 == 0x800000020D9E11B0;
                                                                                                                                    BOOL v138 = v137;
                                                                                                                                    __int16 v6 = 93;
                                                                                                                                    if ((result & 1) == 0 && !v138)
                                                                                                                                    {
                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      if (result) {
                                                                                                                                        goto LABEL_1387;
                                                                                                                                      }
                                                                                                                                      if (v4 == 0x746369706373696DLL && a2 == 0xEF7368706172676FLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0xD000000000000022 && a2 == 0x800000020D9E11E0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                      {
                                                                                                                                        __int16 v6 = 298;
                                                                                                                                        goto LABEL_5;
                                                                                                                                      }
                                                                                                                                      if (v4 == 0x626D79736373696DLL && a2 == 0xEB00000000736C6FLL)
                                                                                                                                      {
LABEL_1406:
                                                                                                                                        __int16 v6 = 87;
                                                                                                                                        goto LABEL_5;
                                                                                                                                      }
                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      BOOL v139 = v4 == 0xD000000000000014 && a2 == 0x800000020D9E1210;
                                                                                                                                      BOOL v140 = v139;
                                                                                                                                      __int16 v6 = 87;
                                                                                                                                      if ((result & 1) == 0 && !v140)
                                                                                                                                      {
                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        if (result) {
                                                                                                                                          goto LABEL_1406;
                                                                                                                                        }
                                                                                                                                        if (v4 == 0x686365746373696DLL && a2 == 0xED00006C6163696ELL)
                                                                                                                                        {
LABEL_1418:
                                                                                                                                          __int16 v6 = 80;
                                                                                                                                          goto LABEL_5;
                                                                                                                                        }
                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        BOOL v141 = v4 == 0xD000000000000016 && a2 == 0x800000020D9E1230;
                                                                                                                                        BOOL v142 = v141;
                                                                                                                                        __int16 v6 = 80;
                                                                                                                                        if ((result & 1) == 0 && !v142)
                                                                                                                                        {
                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          if (result) {
                                                                                                                                            goto LABEL_1418;
                                                                                                                                          }
                                                                                                                                          if (v4 == 1768189805 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                          {
                                                                                                                                            __int16 v6 = 228;
                                                                                                                                            goto LABEL_5;
                                                                                                                                          }
                                                                                                                                          if (v4 == 0x7265696669646F6DLL && a2 == 0xEF7372657474656CLL)
                                                                                                                                          {
LABEL_1434:
                                                                                                                                            __int16 v6 = 5;
                                                                                                                                            goto LABEL_5;
                                                                                                                                          }
                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          BOOL v143 = v4 == 0xD000000000000016 && a2 == 0x800000020D9E1250;
                                                                                                                                          BOOL v144 = v143;
                                                                                                                                          __int16 v6 = 5;
                                                                                                                                          if ((result & 1) == 0 && !v144)
                                                                                                                                          {
                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            if (result) {
                                                                                                                                              goto LABEL_1434;
                                                                                                                                            }
                                                                                                                                            if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E1270 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                            {
                                                                                                                                              __int16 v6 = 127;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }
                                                                                                                                            if (v4 == 0x61696C6F676E6F6DLL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                            {
                                                                                                                                              __int16 v6 = 49;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }
                                                                                                                                            if (v4 == 0x61696C6F676E6F6DLL && a2 == 0xEC0000007075736ELL)
                                                                                                                                            {
LABEL_1454:
                                                                                                                                              __int16 v6 = 229;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }
                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            BOOL v145 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E1290;
                                                                                                                                            BOOL v146 = v145;
                                                                                                                                            __int16 v6 = 229;
                                                                                                                                            if ((result & 1) == 0 && !v146)
                                                                                                                                            {
                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              if (result) {
                                                                                                                                                goto LABEL_1454;
                                                                                                                                              }
                                                                                                                                              if (v4 == 7303789 && a2 == 0xE300000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                              {
                                                                                                                                                __int16 v6 = 255;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }
                                                                                                                                              if (v4 == 0x696E61746C756DLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                              {
                                                                                                                                                __int16 v6 = 222;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }
                                                                                                                                              if (v4 == 0x636973756DLL && a2 == 0xE500000000000000)
                                                                                                                                              {
LABEL_1474:
                                                                                                                                                __int16 v6 = 275;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }
                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              BOOL v147 = v4 == 0x736C61636973756DLL && a2 == 0xEE00736C6F626D79;
                                                                                                                                              BOOL v148 = v147;
                                                                                                                                              __int16 v6 = 275;
                                                                                                                                              if ((result & 1) == 0 && !v148)
                                                                                                                                              {
                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                if (result) {
                                                                                                                                                  goto LABEL_1474;
                                                                                                                                                }
                                                                                                                                                if (v4 == 0x72616D6E61796DLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                {
                                                                                                                                                  __int16 v6 = 35;
                                                                                                                                                  goto LABEL_5;
                                                                                                                                                }
                                                                                                                                                if (v4 == 0x6572616D6E61796DLL && a2 == 0xEB00000000617478)
                                                                                                                                                {
LABEL_1490:
                                                                                                                                                  __int16 v6 = 140;
                                                                                                                                                  goto LABEL_5;
                                                                                                                                                }
                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                BOOL v149 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E12B0;
                                                                                                                                                BOOL v150 = v149;
                                                                                                                                                __int16 v6 = 140;
                                                                                                                                                if ((result & 1) == 0 && !v150)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  if (result) {
                                                                                                                                                    goto LABEL_1490;
                                                                                                                                                  }
                                                                                                                                                  if (v4 == 0x6572616D6E61796DLL && a2 == 0xEB00000000627478)
                                                                                                                                                  {
LABEL_1502:
                                                                                                                                                    __int16 v6 = 138;
                                                                                                                                                    goto LABEL_5;
                                                                                                                                                  }
                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  BOOL v151 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E12D0;
                                                                                                                                                  BOOL v152 = v151;
                                                                                                                                                  __int16 v6 = 138;
                                                                                                                                                  if ((result & 1) == 0 && !v152)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    if (result) {
                                                                                                                                                      goto LABEL_1502;
                                                                                                                                                    }
                                                                                                                                                    if (v4 == 0x616561746162616ELL && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      __int16 v6 = 190;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }
                                                                                                                                                    if (v4 == 0x67616E69646E616ELL && a2 == 0xEB00000000697261 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      __int16 v6 = 235;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }
                                                                                                                                                    if (v4 == 25198 && a2 == 0xE200000000000000)
                                                                                                                                                    {
LABEL_1522:
                                                                                                                                                      __int16 v6 = 320;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }
                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    BOOL v153 = v4 == 0x6B636F6C626F6ELL && a2 == 0xE700000000000000;
                                                                                                                                                    BOOL v154 = v153;
                                                                                                                                                    __int16 v6 = 320;
                                                                                                                                                    if ((result & 1) == 0 && !v154)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      if (result) {
                                                                                                                                                        goto LABEL_1522;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0x756C69617477656ELL && a2 == 0xE900000000000065 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 53;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 1635214702 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 225;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      uint64_t result = 7301998;
                                                                                                                                                      if (v4 == 7301998 && a2 == 0xE300000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 16;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0x6F667265626D756ELL && a2 == 0xEB00000000736D72 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 77;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0x756873756ELL && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 270;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0xD000000000000014 && a2 == 0x800000020D9E0440 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        __int16 v6 = 284;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 7496559 && a2 == 0xE300000000000000)
                                                                                                                                                      {
LABEL_1558:
                                                                                                                                                        __int16 v6 = 82;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      BOOL v155 = v4 == 0xD00000000000001BLL && a2 == 0x800000020D9E12F0;
                                                                                                                                                      BOOL v156 = v155;
                                                                                                                                                      __int16 v6 = 82;
                                                                                                                                                      if ((result & 1) == 0 && !v156)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        if (result) {
                                                                                                                                                          goto LABEL_1558;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6D6168676FLL && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 42;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696B6968636C6FLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 62;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61676E7568646C6FLL && a2 == 0xEC0000006E616972 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 205;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696C617469646C6FLL && a2 == 0xE900000000000063 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 173;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6874726F6E646C6FLL && a2 == 0xEF6E616962617261 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 198;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696D726570646C6FLL && a2 == 0xE900000000000063 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 175;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6973726570646C6FLL && a2 == 0xEA00000000006E61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 177;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6964676F73646C6FLL && a2 == 0xEA00000000006E61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 209;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6874756F73646C6FLL && a2 == 0xEF6E616962617261 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 197;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696B727574646C6FLL && a2 == 0xE900000000000063 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 204;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x7568677975646C6FLL && a2 == 0xE900000000000072 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 211;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x617969726FLL && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 26;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0xD000000000000012 && a2 == 0x800000020D9E1310 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 300;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x656761736FLL && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 181;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61796E616D736FLL && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 180;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0xD000000000000013 && a2 == 0x800000020D9E1330 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 291;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6D68687761686170 && a2 == 0xEB00000000676E6FLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 258;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6E6572796D6C6170 && a2 == 0xE900000000000065 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 189;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61686E6963756170 && a2 == 0xE900000000000075 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 239;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61707367616870 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          __int16 v6 = 131;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x736F747369616870 && a2 == 0xE800000000000000)
                                                                                                                                                        {
LABEL_1650:
                                                                                                                                                          __int16 v6 = 169;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        BOOL v157 = v4 == 0x736F747369616870 && a2 == 0xEC00000063736964;
                                                                                                                                                        BOOL v158 = v157;
                                                                                                                                                        __int16 v6 = 169;
                                                                                                                                                        if ((result & 1) == 0 && !v158)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          if (result) {
                                                                                                                                                            goto LABEL_1650;
                                                                                                                                                          }
                                                                                                                                                          if (v4 == 0x6963696E656F6870 && a2 == 0xEA00000000006E61 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                          {
                                                                                                                                                            __int16 v6 = 192;
                                                                                                                                                            goto LABEL_5;
                                                                                                                                                          }
                                                                                                                                                          if (v4 == 0x636974656E6F6870 && a2 == 0xEB00000000747865)
                                                                                                                                                          {
LABEL_1666:
                                                                                                                                                            __int16 v6 = 67;
                                                                                                                                                            goto LABEL_5;
                                                                                                                                                          }
                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          BOOL v159 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E1350;
                                                                                                                                                          BOOL v160 = v159;
                                                                                                                                                          __int16 v6 = 67;
                                                                                                                                                          if ((result & 1) == 0 && !v160)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            if (result) {
                                                                                                                                                              goto LABEL_1666;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 0x636974656E6F6870 && a2 == 0xEE00707573747865 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0xD00000000000001CLL && a2 == 0x800000020D9E1370 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              __int16 v6 = 68;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 0x63676E6979616C70 && a2 == 0xEC00000073647261 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              __int16 v6 = 295;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 0x707265746C617370 && a2 == 0xEE006976616C6861 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              __int16 v6 = 203;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 6387056 && a2 == 0xE300000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x7565746176697270 && a2 == 0xEE00616572616573)
                                                                                                                                                            {
LABEL_1696:
                                                                                                                                                              __int16 v6 = 152;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            BOOL v161 = v4 == 0x7565746176697270 && a2 == 0xEA00000000006573;
                                                                                                                                                            BOOL v162 = v161;
                                                                                                                                                            __int16 v6 = 152;
                                                                                                                                                            if ((result & 1) == 0 && !v162)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              if (result) {
                                                                                                                                                                goto LABEL_1696;
                                                                                                                                                              }
                                                                                                                                                              if (v4 == 0x74617574636E7570 && a2 == 0xEB000000006E6F69)
                                                                                                                                                              {
LABEL_1708:
                                                                                                                                                                __int16 v6 = 72;
                                                                                                                                                                goto LABEL_5;
                                                                                                                                                              }
                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              BOOL v163 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E1390;
                                                                                                                                                              BOOL v164 = v163;
                                                                                                                                                              __int16 v6 = 72;
                                                                                                                                                              if ((result & 1) == 0 && !v164)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                if (result) {
                                                                                                                                                                  goto LABEL_1708;
                                                                                                                                                                }
                                                                                                                                                                if (v4 == 0x676E616A6572 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                {
                                                                                                                                                                  __int16 v6 = 135;
                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                }
                                                                                                                                                                if (v4 == 1768781170 && a2 == 0xE400000000000000)
                                                                                                                                                                {
LABEL_1724:
                                                                                                                                                                  __int16 v6 = 207;
                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                }
                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                BOOL v165 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E13B0;
                                                                                                                                                                BOOL v166 = v165;
                                                                                                                                                                __int16 v6 = 207;
                                                                                                                                                                if ((result & 1) == 0 && !v166)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  if (result) {
                                                                                                                                                                    goto LABEL_1724;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x63696E7572 && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 43;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x61746972616D6173 && a2 == 0xE90000000000006ELL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 17;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x7468736172756173 && a2 == 0xEA00000000006172 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 132;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x61646172616873 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 219;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x6E616976616873 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 179;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0xD000000000000017 && a2 == 0x800000020D9E13D0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 272;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x6D616864646973 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 227;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x616C61686E6973 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 31;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0xD000000000000015 && a2 == 0x800000020D9E13F0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    __int16 v6 = 220;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x726F666C6C616D73 && a2 == 0xEA0000000000736DLL)
                                                                                                                                                                  {
LABEL_1772:
                                                                                                                                                                    __int16 v6 = 160;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  BOOL v167 = v4 == 0xD000000000000011 && a2 == 0x800000020D9E1410;
                                                                                                                                                                  BOOL v168 = v167;
                                                                                                                                                                  __int16 v6 = 160;
                                                                                                                                                                  if ((result & 1) == 0 && !v168)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    if (result) {
                                                                                                                                                                      goto LABEL_1772;
                                                                                                                                                                    }
                                                                                                                                                                    if (v4 == 0x6E616B6C6C616D73 && a2 == 0xEC00000074786561)
                                                                                                                                                                    {
LABEL_1784:
                                                                                                                                                                      __int16 v6 = 269;
                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                    }
                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    BOOL v169 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E1430;
                                                                                                                                                                    BOOL v170 = v169;
                                                                                                                                                                    __int16 v6 = 269;
                                                                                                                                                                    if ((result & 1) == 0 && !v170)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      if (result) {
                                                                                                                                                                        goto LABEL_1784;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x6E616964676F73 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 210;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x706D6F7361726F73 && a2 == 0xEB00000000676E65 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 216;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x6F626D6F796F73 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 237;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x736C616963657073 && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 163;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x73656E61646E7573 && a2 == 0xE900000000000065 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        __int16 v6 = 59;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x73656E61646E7573 && a2 == 0xEC00000070757365)
                                                                                                                                                                      {
LABEL_1816:
                                                                                                                                                                        __int16 v6 = 65;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      BOOL v171 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E1450;
                                                                                                                                                                      BOOL v172 = v171;
                                                                                                                                                                      __int16 v6 = 65;
                                                                                                                                                                      if ((result & 1) == 0 && !v172)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        if (result) {
                                                                                                                                                                          goto LABEL_1816;
                                                                                                                                                                        }
                                                                                                                                                                        if (v4 == 0x776F727261707573 && a2 == 0xEA00000000006173)
                                                                                                                                                                        {
LABEL_1828:
                                                                                                                                                                          __int16 v6 = 90;
                                                                                                                                                                          goto LABEL_5;
                                                                                                                                                                        }
                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        BOOL v173 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E1470;
                                                                                                                                                                        BOOL v174 = v173;
                                                                                                                                                                        __int16 v6 = 90;
                                                                                                                                                                        if ((result & 1) == 0 && !v174)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          if (result) {
                                                                                                                                                                            goto LABEL_1828;
                                                                                                                                                                          }
                                                                                                                                                                          if (v4 == 0x776F727261707573 && a2 == 0xEA00000000006273)
                                                                                                                                                                          {
LABEL_1840:
                                                                                                                                                                            __int16 v6 = 92;
                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                          }
                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          BOOL v175 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E1490;
                                                                                                                                                                          BOOL v176 = v175;
                                                                                                                                                                          __int16 v6 = 92;
                                                                                                                                                                          if ((result & 1) == 0 && !v176)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            if (result) {
                                                                                                                                                                              goto LABEL_1840;
                                                                                                                                                                            }
                                                                                                                                                                            if (v4 == 0x776F727261707573 && a2 == 0xEA00000000006373)
                                                                                                                                                                            {
LABEL_1852:
                                                                                                                                                                              __int16 v6 = 304;
                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                            }
                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            BOOL v177 = v4 == 0xD000000000000013 && a2 == 0x800000020D9E14B0;
                                                                                                                                                                            BOOL v178 = v177;
                                                                                                                                                                            __int16 v6 = 304;
                                                                                                                                                                            if ((result & 1) == 0 && !v178)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              if (result) {
                                                                                                                                                                                goto LABEL_1852;
                                                                                                                                                                              }
                                                                                                                                                                              if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E14D0)
                                                                                                                                                                              {
LABEL_1864:
                                                                                                                                                                                __int16 v6 = 94;
                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                              }
                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              BOOL v179 = v4 == 0xD000000000000021 && a2 == 0x800000020D9E14F0;
                                                                                                                                                                              BOOL v180 = v179;
                                                                                                                                                                              __int16 v6 = 94;
                                                                                                                                                                              if ((result & 1) == 0 && !v180)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                if (result) {
                                                                                                                                                                                  goto LABEL_1864;
                                                                                                                                                                                }
                                                                                                                                                                                if (v4 == 0x61617570707573 && a2 == 0xE700000000000000)
                                                                                                                                                                                {
LABEL_1876:
                                                                                                                                                                                  __int16 v6 = 318;
                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                }
                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                BOOL v181 = v4 == 0xD00000000000001CLL && a2 == 0x800000020D9E1520;
                                                                                                                                                                                BOOL v182 = v181;
                                                                                                                                                                                __int16 v6 = 318;
                                                                                                                                                                                if ((result & 1) == 0 && !v182)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  if (result) {
                                                                                                                                                                                    goto LABEL_1876;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v4 == 0x62617570707573 && a2 == 0xE700000000000000)
                                                                                                                                                                                  {
LABEL_1888:
                                                                                                                                                                                    __int16 v6 = 319;
                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                  }
                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  BOOL v183 = v4 == 0xD00000000000001CLL && a2 == 0x800000020D9E1540;
                                                                                                                                                                                  BOOL v184 = v183;
                                                                                                                                                                                  __int16 v6 = 319;
                                                                                                                                                                                  if ((result & 1) == 0 && !v184)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    if (result) {
                                                                                                                                                                                      goto LABEL_1888;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v4 == 0x74636E7570707573 && a2 == 0xEE006E6F69746175)
                                                                                                                                                                                    {
LABEL_1900:
                                                                                                                                                                                      __int16 v6 = 103;
                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                    }
                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    BOOL v185 = v4 == 0xD000000000000017 && a2 == 0x800000020D9E1560;
                                                                                                                                                                                    BOOL v186 = v185;
                                                                                                                                                                                    __int16 v6 = 103;
                                                                                                                                                                                    if ((result & 1) == 0 && !v186)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      if (result) {
                                                                                                                                                                                        goto LABEL_1900;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v4 == 0xD000000000000018 && a2 == 0x800000020D9E1580)
                                                                                                                                                                                      {
LABEL_1912:
                                                                                                                                                                                        __int16 v6 = 305;
                                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                                      }
                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      BOOL v187 = v4 == 0xD000000000000021 && a2 == 0x800000020D9E15A0;
                                                                                                                                                                                      BOOL v188 = v187;
                                                                                                                                                                                      __int16 v6 = 305;
                                                                                                                                                                                      if ((result & 1) == 0 && !v188)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        if (result) {
                                                                                                                                                                                          goto LABEL_1912;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v4 == 0x646E617265707573 && a2 == 0xEB00000000627573)
                                                                                                                                                                                        {
LABEL_1924:
                                                                                                                                                                                          __int16 v6 = 73;
                                                                                                                                                                                          goto LABEL_5;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        BOOL v189 = v4 == 0xD000000000000019 && a2 == 0x800000020D9E15D0;
                                                                                                                                                                                        BOOL v190 = v189;
                                                                                                                                                                                        __int16 v6 = 73;
                                                                                                                                                                                        if ((result & 1) == 0 && !v190)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          if (result) {
                                                                                                                                                                                            goto LABEL_1924;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v4 == 0xD000000000000011 && a2 == 0x800000020D9E15F0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                          {
                                                                                                                                                                                            __int16 v6 = 281;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v4 == 0x616E69746F6C7973 && a2 == 0xEB00000000697267 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                          {
                                                                                                                                                                                            __int16 v6 = 129;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v4 == 0xD000000000000019 && a2 == 0x800000020D9E1610)
                                                                                                                                                                                          {
LABEL_1944:
                                                                                                                                                                                            __int16 v6 = 307;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }
                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          BOOL v191 = v4 == 0xD00000000000001ELL && a2 == 0x800000020D9E1630;
                                                                                                                                                                                          BOOL v192 = v191;
                                                                                                                                                                                          __int16 v6 = 307;
                                                                                                                                                                                          if ((result & 1) == 0 && !v192)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            if (result) {
                                                                                                                                                                                              goto LABEL_1944;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v4 == 0xD000000000000019 && a2 == 0x800000020D9E1650 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                            {
                                                                                                                                                                                              __int16 v6 = 308;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v4 == 0x636169727973 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                            {
                                                                                                                                                                                              __int16 v6 = 13;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v4 == 0x7573636169727973 && a2 == 0xE900000000000070)
                                                                                                                                                                                            {
LABEL_1964:
                                                                                                                                                                                              __int16 v6 = 19;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }
                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            BOOL v193 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E1670;
                                                                                                                                                                                            BOOL v194 = v193;
                                                                                                                                                                                            __int16 v6 = 19;
                                                                                                                                                                                            if ((result & 1) == 0 && !v194)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              if (result) {
                                                                                                                                                                                                goto LABEL_1964;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x676F6C61676174 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 44;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x61776E6162676174 && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 47;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 1936154996 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 316;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x656C696174 && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 52;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x6D616874696174 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 56;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x74656976696174 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                __int16 v6 = 141;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x6A6E617578696174 && a2 == 0xEB00000000676E69)
                                                                                                                                                                                              {
LABEL_2000:
                                                                                                                                                                                                __int16 v6 = 278;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              BOOL v195 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E1690;
                                                                                                                                                                                              BOOL v196 = v195;
                                                                                                                                                                                              __int16 v6 = 278;
                                                                                                                                                                                              if ((result & 1) == 0 && !v196)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                if (result) {
                                                                                                                                                                                                  goto LABEL_2000;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v4 == 0x69726B6174 && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                {
                                                                                                                                                                                                  __int16 v6 = 230;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v4 == 0x6C696D6174 && a2 == 0xE500000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                {
                                                                                                                                                                                                  __int16 v6 = 27;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v4 == 0x7075736C696D6174 && a2 == 0xE800000000000000)
                                                                                                                                                                                                {
LABEL_2020:
                                                                                                                                                                                                  __int16 v6 = 246;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                BOOL v197 = v4 == 0x7075736C696D6174 && a2 == 0xEF746E656D656C70;
                                                                                                                                                                                                BOOL v198 = v197;
                                                                                                                                                                                                __int16 v6 = 246;
                                                                                                                                                                                                if ((result & 1) == 0 && !v198)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  if (result) {
                                                                                                                                                                                                    goto LABEL_2020;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0x6173676E6174 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    __int16 v6 = 256;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0x7475676E6174 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    __int16 v6 = 262;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0xD000000000000010 && a2 == 0x800000020D9E16B0 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    __int16 v6 = 263;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0x75737475676E6174 && a2 == 0xE900000000000070)
                                                                                                                                                                                                  {
LABEL_2044:
                                                                                                                                                                                                    __int16 v6 = 265;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  BOOL v199 = v4 == 0xD000000000000010 && a2 == 0x800000020D9E16D0;
                                                                                                                                                                                                  BOOL v200 = v199;
                                                                                                                                                                                                  __int16 v6 = 265;
                                                                                                                                                                                                  if ((result & 1) == 0 && !v200)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    if (result) {
                                                                                                                                                                                                      goto LABEL_2044;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x7567756C6574 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 28;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x616E61616874 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 15;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 1767991412 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 32;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x6E617465626974 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 34;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x6867616E69666974 && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 100;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x61747568726974 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 226;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 1869901684 && a2 == 0xE400000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      __int16 v6 = 285;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x726F70736E617274 && a2 == 0xEF70616D646E6174)
                                                                                                                                                                                                    {
LABEL_2084:
                                                                                                                                                                                                      __int16 v6 = 301;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    BOOL v201 = v4 == 0xD000000000000016 && a2 == 0x800000020D9E16F0;
                                                                                                                                                                                                    BOOL v202 = v201;
                                                                                                                                                                                                    __int16 v6 = 301;
                                                                                                                                                                                                    if ((result & 1) == 0 && !v202)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      if (result) {
                                                                                                                                                                                                        goto LABEL_2084;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (v4 == 1935762293 && a2 == 0xE400000000000000)
                                                                                                                                                                                                      {
LABEL_2104:
                                                                                                                                                                                                        __int16 v6 = 41;
                                                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      BOOL v203 = v4 == 0xD000000000000022 && a2 == 0x800000020D9E1710;
                                                                                                                                                                                                      BOOL v204 = v203;
                                                                                                                                                                                                      __int16 v6 = 41;
                                                                                                                                                                                                      if ((result & 1) == 0 && !v204)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        BOOL v205 = v4 == 0xD000000000000011 && a2 == 0x800000020D9E1740;
                                                                                                                                                                                                        BOOL v206 = v205;
                                                                                                                                                                                                        __int16 v6 = 41;
                                                                                                                                                                                                        if ((result & 1) == 0 && !v206)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          if (result) {
                                                                                                                                                                                                            goto LABEL_2104;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x74786573616375 && a2 == 0xE700000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD00000000000002ALL, v4 == 0xD00000000000002ALL) && a2 == 0x800000020D9E1760 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 50;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x6174786573616375 && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (uint64_t result = 0xD00000000000002BLL, v4 == 0xD00000000000002BLL) && a2 == 0x800000020D9E1790 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 238;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x6369746972616775 && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 176;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 6906230 && a2 == 0xE300000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            __int16 v6 = 124;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x7478656369646576 && a2 == 0xE800000000000000)
                                                                                                                                                                                                          {
LABEL_2138:
                                                                                                                                                                                                            __int16 v6 = 66;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          BOOL v207 = v4 == 0x7478656369646576 && a2 == 0xEF736E6F69736E65;
                                                                                                                                                                                                          BOOL v208 = v207;
                                                                                                                                                                                                          __int16 v6 = 66;
                                                                                                                                                                                                          if ((result & 1) == 0 && !v208)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            if (result) {
                                                                                                                                                                                                              goto LABEL_2138;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v4 == 0x6C61636974726576 && a2 == 0xED0000736D726F66 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              __int16 v6 = 157;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v4 == 0x6971756B68746976 && a2 == 0xE800000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              __int16 v6 = 184;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v4 == 29558 && a2 == 0xE200000000000000)
                                                                                                                                                                                                            {
LABEL_2158:
                                                                                                                                                                                                              __int16 v6 = 156;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            BOOL v209 = v4 == 0xD000000000000012 && a2 == 0x800000020D9E17C0;
                                                                                                                                                                                                            BOOL v210 = v209;
                                                                                                                                                                                                            __int16 v6 = 156;
                                                                                                                                                                                                            if ((result & 1) == 0 && !v210)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              if (result) {
                                                                                                                                                                                                                goto LABEL_2158;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (v4 == 0x7075737376 && a2 == 0xE500000000000000)
                                                                                                                                                                                                              {
LABEL_2170:
                                                                                                                                                                                                                __int16 v6 = 317;
                                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              BOOL v211 = v4 == 0xD00000000000001CLL && a2 == 0x800000020D9E17E0;
                                                                                                                                                                                                              BOOL v212 = v211;
                                                                                                                                                                                                              __int16 v6 = 317;
                                                                                                                                                                                                              if ((result & 1) == 0 && !v212)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                if (result) {
                                                                                                                                                                                                                  goto LABEL_2170;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6F68636E6177 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 286;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6963676E61726177 && a2 == 0xEA00000000006974 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 233;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6964697A6579 && a2 == 0xE600000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 208;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6163696461726979 && a2 == 0xEA0000000000736CLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 122;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x62616C6C79736979 && a2 == 0xEB0000000073656CLL || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  __int16 v6 = 121;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x676E696A6979 && a2 == 0xE600000000000000)
                                                                                                                                                                                                                {
LABEL_2202:
                                                                                                                                                                                                                  __int16 v6 = 119;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                BOOL v214 = v4 == 0xD000000000000015 && a2 == 0x800000020D9E1800;
                                                                                                                                                                                                                __int16 v6 = 119;
                                                                                                                                                                                                                if ((result & 1) == 0 && !v214)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  if (result) {
                                                                                                                                                                                                                    goto LABEL_2202;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (v4 == 0x617A6162616E617ALL && a2 == 0xEF65726175717372 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    __int16 v6 = 236;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else if (v4 == 0x796E6E656D616E7ALL && a2 == 0xED0000636973756DLL)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    __int16 v6 = 273;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    BOOL v216 = v4 == 0xD000000000000017 && a2 == 0x800000020D9E1820;
                                                                                                                                                                                                                    __int16 v6 = 273;
                                                                                                                                                                                                                    if ((result & 1) == 0 && !v216)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      if (result) {
                                                                                                                                                                                                                        __int16 v6 = 273;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                        __int16 v6 = 321;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_5:
  *a3 = v6;
  return result;
}

uint64_t closure #1 in static Parser.classifySpecialPropValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = a1 == 7958113 && a2 == 0xE300000000000000;
  if (v4
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x64656E6769737361 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6969637361 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    swift_storeEnumTagMultiPayload();
    BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = a3;
    uint64_t v10 = 0;
    uint64_t v11 = v7;
  }
  else
  {
    uint64_t v13 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v11 = v13;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }

  return v8(v9, v10, 1, v11);
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0;
  }
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    unint64_t v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v9)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        unint64_t v11 = Substring.index(after:)();
        if (v11 >> 14 == v14) {
          return 0;
        }
        unint64_t v4 = v11;
        if (Substring.subscript.getter() == a1 && v12 == a2) {
          goto LABEL_6;
        }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v10) {
          return v4;
        }
      }
    }
  }
  return v4;
}

uint64_t Parser.classifyCharacterPropertyValueOnly(_:)@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  MEMORY[0x270FA5388](v6, v7);
  char v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14, v16);
  BOOL v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  unint64_t v20 = a1[1];
  uint64_t v21 = a1[2];
  uint64_t v22 = a1[3];
  if ((v20 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    long long v65 = 8uLL;
    uint64_t v66 = 0;
    unint64_t v67 = 0;
    char v68 = 36;
    BOOL v36 = a2;
    uint64_t v37 = v3;
    return error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)(&v65, v37, v21, v22, v19, v20, v36);
  }
  uint64_t v55 = v22;
  uint64_t v56 = v21;
  BOOL v59 = a2;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v13, (uint64_t)v18, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    return outlined init with take of AST.Atom.Kind((uint64_t)v18, (uint64_t)v59, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  }
  outlined destroy of _ASTParent?((uint64_t)v13, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 67)
  {
    BOOL v38 = v59;
    *BOOL v59 = v65;
    v38[1] = 1;
    return swift_storeEnumTagMultiPayload();
  }
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 38)
  {
    *BOOL v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 163)
  {
    *BOOL v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 6)
  {
    *BOOL v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v62 = 0;
  unint64_t v63 = 0xE000000000000000;
  *(void *)&long long v65 = v19;
  *((void *)&v65 + 1) = v20;
  uint64_t v66 = 0;
  unint64_t v67 = v23;
  swift_bridgeObjectRetain();
  Swift::String_optional v25 = String.Iterator.next()();
  uint64_t result = v25.value._countAndFlagsBits;
  if (!v25.value._object)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    Swift::String v39 = String.lowercased()();
    swift_bridgeObjectRelease();
    v40._uint64_t countAndFlagsBits = 28265;
    v40._unint64_t object = (void *)0xE200000000000000;
    if (String.hasPrefix(_:)(v40))
    {
      unint64_t v41 = specialized Collection.dropFirst(_:)(2uLL, v39._countAndFlagsBits, (unint64_t)v39._object);
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = MEMORY[0x210561700](v41, v43, v45, v47);
      uint64_t v50 = v49;
      swift_bridgeObjectRelease();
      closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v48, v50, &v64);
      swift_bridgeObjectRelease();
      if (v64 != 321)
      {
        *(_WORD *)BOOL v59 = v64;
        return swift_storeEnumTagMultiPayload();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v51._uint64_t countAndFlagsBits = v19;
    v51._unint64_t object = (void *)v20;
    AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(v51);
    BOOL v52 = v59;
    if (v65 != 5)
    {
      *BOOL v59 = v65;
      return swift_storeEnumTagMultiPayload();
    }
    swift_bridgeObjectRetain();
    v53._uint64_t countAndFlagsBits = v19;
    v53._unint64_t object = (void *)v20;
    AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(v53);
    if (v65 != 18)
    {
      *BOOL v52 = v65;
      return swift_storeEnumTagMultiPayload();
    }
    long long v65 = 0uLL;
    uint64_t v66 = v19;
    unint64_t v67 = v20;
    char v68 = 18;
    BOOL v36 = v52;
    uint64_t v37 = v3;
    uint64_t v22 = v55;
    uint64_t v21 = v56;
    return error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)(&v65, v37, v21, v22, v19, v20, v36);
  }
  uint64_t countAndFlagsBits = v25.value._countAndFlagsBits;
  unint64_t object = (unint64_t)v25.value._object;
  uint64_t v28 = v58;
  BOOL v29 = (void (**)(char *, uint64_t))(v57 + 8);
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        uint64_t v60 = countAndFlagsBits;
        uint64_t v61 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    char v32 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*v29)(v9, v28);
    if ((v32 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v35 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v33 & 1) == 0 && !v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        MEMORY[0x2105617C0](countAndFlagsBits, object);
      }
    }
    swift_bridgeObjectRelease();
    Swift::String_optional v30 = String.Iterator.next()();
    uint64_t result = v30.value._countAndFlagsBits;
    uint64_t countAndFlagsBits = v30.value._countAndFlagsBits;
    unint64_t object = (unint64_t)v30.value._object;
    if (!v30.value._object) {
      goto LABEL_45;
    }
  }
  __break(1u);
  return result;
}

uint64_t error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  outlined init with take of ParseError(a1, (uint64_t)v28);
  uint64_t v11 = v28[1];
  uint64_t v12 = v28[2];
  uint64_t v23 = v28[3];
  uint64_t v24 = v28[0];
  char v22 = v29;
  unint64_t v13 = ParseError.description.getter();
  uint64_t v15 = v14;
  uint64_t v16 = *(char **)(a2 + 72);
  outlined retain of ParseError((uint64_t)a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 72) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
    *(void *)(a2 + 72) = v16;
  }
  unint64_t v19 = *((void *)v16 + 2);
  unint64_t v18 = *((void *)v16 + 3);
  if (v19 >= v18 >> 1)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v16);
    *(void *)(a2 + 72) = v16;
  }
  *((void *)v16 + 2) = v19 + 1;
  unint64_t v20 = &v16[80 * v19];
  v20[32] = 1;
  *((void *)v20 + 5) = v13;
  *((void *)v20 + 6) = v15;
  *((void *)v20 + 7) = a3;
  *((void *)v20 + 8) = a4;
  *((void *)v20 + 9) = v24;
  *((void *)v20 + 10) = v11;
  *((void *)v20 + 11) = v12;
  *((void *)v20 + 12) = v23;
  v20[104] = v22;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = a5;
  a7[3] = a6;
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t Parser.classifyCharacterProperty(key:value:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v69 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v8 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69, v9);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  uint64_t v14 = MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v17);
  unint64_t v19 = (char *)&v62 - v18;
  unint64_t v20 = a1[1];
  uint64_t v22 = a1[2];
  uint64_t v21 = a1[3];
  uint64_t v23 = *a2;
  unint64_t v24 = a2[1];
  uint64_t v25 = HIBYTE(v20) & 0xF;
  uint64_t v70 = *a1;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v25 = v70 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25)
  {
    uint64_t v48 = v22;
    uint64_t v49 = v21;
    uint64_t v50 = v23;
    Swift::String v51 = *(char **)(v4 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v51 + 2) + 1, 1, v51);
    }
    unint64_t v53 = *((void *)v51 + 2);
    unint64_t v52 = *((void *)v51 + 3);
    if (v53 >= v52 >> 1)
    {
      BOOL v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v51);
      uint64_t v55 = v48;
      uint64_t v54 = v49;
      Swift::String v51 = v59;
    }
    else
    {
      uint64_t v54 = v49;
      uint64_t v55 = v48;
    }
    *((void *)v51 + 2) = v53 + 1;
    uint64_t v56 = &v51[80 * v53];
    v56[32] = 1;
    *((void *)v56 + 5) = 0xD000000000000016;
    *((void *)v56 + 6) = 0x800000020D9DF930;
    *((void *)v56 + 7) = v55;
    *((void *)v56 + 8) = v54;
    *((void *)v56 + 9) = 8;
    *((void *)v56 + 10) = 0;
    *((void *)v56 + 11) = 0;
    *((void *)v56 + 12) = 0;
    v56[104] = 36;
    *(void *)(v4 + 72) = v51;
    *a3 = v70;
    a3[1] = v20;
    a3[2] = v50;
    a3[3] = v24;
LABEL_31:
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v68 = v4;
  unint64_t v26 = a2[2];
  uint64_t v27 = a2[3];
  uint64_t v28 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v28 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v29 = v23;
  if (v28)
  {
    unint64_t v64 = v21;
    uint64_t v65 = v27;
    unint64_t v63 = v22;
    uint64_t v66 = a3;
    uint64_t v67 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = v70;
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v70, v20, (char *)&v71);
    char v31 = v71;
    if (v71 == 67
      || (char v32 = specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v67, v24), v32 == 2))
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v61 = v30;
      uint64_t v33 = v30;
      unint64_t v35 = v67;
      uint64_t v34 = v68;
      unint64_t v36 = v65;
      specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v33, v20, v67, v24, v68, v24, v26, v65, (uint64_t)v19, v61, v20);
      outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v19, (uint64_t)v16, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v69) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of AST.Atom.Kind((uint64_t)v16, (uint64_t)v11, type metadata accessor for AST.Atom.CharacterProperty.Kind);
        return outlined init with take of AST.Atom.Kind((uint64_t)v11, (uint64_t)v66, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      }
      outlined destroy of _ASTParent?((uint64_t)v16, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      if (v26 >> 14 >= v63 >> 14) {
        unint64_t v37 = v63;
      }
      else {
        unint64_t v37 = v26;
      }
      if (v36 >> 14 >= v64 >> 14) {
        unint64_t v38 = v36;
      }
      else {
        unint64_t v38 = v64;
      }
      *(void *)&long long v71 = v70;
      *((void *)&v71 + 1) = v20;
      unint64_t v72 = v35;
      unint64_t v73 = v24;
      char v74 = 18;
      if (v38 >> 14 < v37 >> 14)
      {
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v35 = ParseError.description.getter();
        unint64_t v19 = v39;
        uint64_t v11 = *(char **)(v34 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_18:
          uint64_t v40 = v70;
          unint64_t v42 = *((void *)v11 + 2);
          unint64_t v41 = *((void *)v11 + 3);
          uint64_t v43 = v67;
          if (v42 >= v41 >> 1)
          {
            uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v11);
            uint64_t v43 = v67;
            uint64_t v11 = v60;
          }
          *((void *)v11 + 2) = v42 + 1;
          uint64_t v44 = &v11[80 * v42];
          v44[32] = 1;
          *((void *)v44 + 5) = v35;
          *((void *)v44 + 6) = v19;
          *((void *)v44 + 7) = v37;
          *((void *)v44 + 8) = v38;
          *((void *)v44 + 9) = v40;
          *((void *)v44 + 10) = v20;
          *((void *)v44 + 11) = v43;
          *((void *)v44 + 12) = v24;
          v44[104] = 18;
          uint64_t v45 = v43;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v68 + 72) = v11;
          uint64_t v46 = v66;
          *uint64_t v66 = v40;
          v46[1] = v20;
          v46[2] = v45;
          v46[3] = v24;
          return swift_storeEnumTagMultiPayload();
        }
      }
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      goto LABEL_18;
    }
    char v57 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = v66;
    *(unsigned char *)uint64_t v66 = v31;
    *((unsigned char *)v58 + 1) = v57 & 1;
    goto LABEL_31;
  }
  long long v71 = 8uLL;
  unint64_t v72 = 0;
  unint64_t v73 = 0;
  char v74 = 36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v71, v68, v26, v27, v70, v20, v29, v24, a3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  outlined init with take of ParseError(a1, (uint64_t)v32);
  uint64_t v14 = v32[1];
  uint64_t v26 = v32[2];
  uint64_t v27 = v32[0];
  uint64_t v25 = v32[3];
  char v24 = v33;
  unint64_t v15 = ParseError.description.getter();
  uint64_t v17 = v16;
  uint64_t v18 = *(char **)(a2 + 72);
  outlined retain of ParseError((uint64_t)a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 72) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
    *(void *)(a2 + 72) = v18;
  }
  unint64_t v21 = *((void *)v18 + 2);
  unint64_t v20 = *((void *)v18 + 3);
  if (v21 >= v20 >> 1)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v18);
    *(void *)(a2 + 72) = v18;
  }
  *((void *)v18 + 2) = v21 + 1;
  uint64_t v22 = &v18[80 * v21];
  v22[32] = 1;
  *((void *)v22 + 5) = v15;
  *((void *)v22 + 6) = v17;
  *((void *)v22 + 7) = a3;
  *((void *)v22 + 8) = a4;
  *((void *)v22 + 9) = v27;
  *((void *)v22 + 10) = v14;
  *((void *)v22 + 11) = v26;
  *((void *)v22 + 12) = v25;
  v22[104] = v24;
  *a9 = a5;
  a9[1] = a6;
  a9[2] = a7;
  a9[3] = a8;
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in Parser.classifyCharacterProperty(key:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v79 = a6;
  uint64_t v80 = a7;
  uint64_t v78 = a5;
  uint64_t v81 = a10;
  uint64_t v82 = a8;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x270FA5388](v15 - 8, v16);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Unicode.NumericType();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19, v21);
  uint64_t v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0x747069726373 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 25459 && a2 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v84);
    char v24 = v84;
    if (v84 == 163)
    {
LABEL_8:
      *(void *)&long long v84 = a3;
      *((void *)&v84 + 1) = a4;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      char v25 = 19;
LABEL_9:
      char v87 = v25;
      valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v84, v78, v79, v80, v82, v81, a3, a4, a9);
      uint64_t v26 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
      uint64_t v28 = v26;
      uint64_t v29 = a9;
      uint64_t v30 = 0;
LABEL_12:
      return v27(v29, v30, 1, v28);
    }
    goto LABEL_10;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000020D9E0320
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 7889779 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v84);
    char v24 = v84;
    if (v84 == 163) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  if (a1 == 25447 && a2 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x636C6172656E6567 && a2 == 0xEF79726F67657461
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v84);
    char v24 = v84;
    if (v84 == 38)
    {
      *(void *)&long long v84 = a3;
      *((void *)&v84 + 1) = a4;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      char v25 = 20;
      goto LABEL_9;
    }
LABEL_10:
    *(unsigned char *)a9 = v24;
    uint64_t v31 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    goto LABEL_11;
  }
  if (a1 == 6645601 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v33 = specialized static Parser.parseAge(_:)();
    if (v35)
    {
      *(void *)&long long v84 = a3;
      *((void *)&v84 + 1) = a4;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      char v25 = 22;
      goto LABEL_9;
    }
    *a9 = v33;
    a9[1] = v34;
    uint64_t v31 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
    uint64_t v29 = a9;
    uint64_t v30 = 0;
    uint64_t v28 = v31;
    goto LABEL_12;
  }
  if (a1 != 1701667182 || a2 != 0xE400000000000000)
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v38 = a1 == 24942 && a2 == 0xE200000000000000;
    BOOL v39 = v38;
    if ((v37 & 1) == 0 && !v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (a1 == 0x76636972656D756ELL && a2 == 0xEC00000065756C61
        || ((char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 30318)
          ? (BOOL v41 = a2 == 0xE200000000000000)
          : (BOOL v41 = 0),
            !v41 ? (char v42 = 0) : (char v42 = 1),
            (v40 & 1) != 0 || (v42 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        *(void *)&long long v84 = 0;
        if (specialized String.withCString<A>(_:)(a3, a4))
        {
          *a9 = v84;
          uint64_t v43 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
LABEL_66:
          swift_storeEnumTagMultiPayload();
          return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(a9, 0, 1, v43);
        }
        *(void *)&long long v84 = a3;
        *((void *)&v84 + 1) = a4;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        char v44 = 23;
        goto LABEL_68;
      }
      if (a1 == 0x74636972656D756ELL && a2 == 0xEB00000000657079
        || ((char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 29806)
          ? (BOOL v47 = a2 == 0xE200000000000000)
          : (BOOL v47 = 0),
            !v47 ? (char v48 = 0) : (char v48 = 1),
            (v46 & 1) != 0 || (v48 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, v18);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
        {
          uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
          v49(v23, v18, v19);
          v49((char *)a9, v23, v19);
          uint64_t v43 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
          goto LABEL_66;
        }
        outlined destroy of _ASTParent?((uint64_t)v18, &demangling cache variable for type metadata for Unicode.NumericType?);
        *(void *)&long long v84 = a3;
        *((void *)&v84 + 1) = a4;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        char v44 = 24;
LABEL_68:
        char v87 = v44;
        valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v84, v78, v79, v80, v82, v81, a3, a4, a9);
        uint64_t v45 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(a9, 0, 1, v45);
      }
      if (a1 == 6515827 && a2 == 0xE300000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || a1 == 0xD000000000000016 && a2 == 0x800000020D9E0340
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        *(unsigned char *)a9 = 0;
LABEL_90:
        a9[1] = a3;
        a9[2] = a4;
        uint64_t v36 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        goto LABEL_41;
      }
      if (a1 == 6518131 && a2 == 0xE300000000000000
        || ((char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016)
          ? (BOOL v51 = a2 == 0x800000020D9E0360)
          : (BOOL v51 = 0),
            !v51 ? (char v52 = 0) : (char v52 = 1),
            (v50 & 1) != 0 || (v52 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        *(unsigned char *)a9 = 1;
        goto LABEL_90;
      }
      if (a1 == 6517875 && a2 == 0xE300000000000000
        || ((char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016)
          ? (BOOL v54 = a2 == 0x800000020D9E0380)
          : (BOOL v54 = 0),
            !v54 ? (char v55 = 0) : (char v55 = 1),
            (v53 & 1) != 0
         || (v55 & 1) != 0
         || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
      {
        *(unsigned char *)a9 = 2;
        goto LABEL_90;
      }
      if (a1 != 6513507 || a2 != 0xE300000000000000)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          uint64_t result = 0xD000000000000017;
          if (a1 != 0xD000000000000017 || a2 != 0x800000020D9E03A0)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
            {
              if ((a1 != 7040098 || a2 != 0xE300000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                && (a1 != 0x6B636F6C62 || a2 != 0xE500000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                uint64_t v77 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
                uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56);
                uint64_t v28 = v77;
                uint64_t v29 = a9;
                uint64_t v30 = 1;
                goto LABEL_12;
              }
              specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (__int16 *)&v84);
              if ((unsigned __int16)v84 == 321)
              {
                *(void *)&long long v84 = a3;
                *((void *)&v84 + 1) = a4;
                uint64_t v85 = 0;
                uint64_t v86 = 0;
                char v25 = 21;
                goto LABEL_9;
              }
              *(_WORD *)a9 = v84;
              uint64_t v31 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
              goto LABEL_11;
            }
          }
        }
      }
      uint64_t v56 = HIBYTE(a4) & 0xF;
      uint64_t v57 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000) != 0) {
        uint64_t v58 = HIBYTE(a4) & 0xF;
      }
      else {
        uint64_t v58 = a3 & 0xFFFFFFFFFFFFLL;
      }
      if (!v58) {
        goto LABEL_198;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        unsigned int v61 = specialized _parseInteger<A, B>(ascii:radix:)(a3, a4, 10);
        swift_bridgeObjectRelease();
        if (((v61 >> 8) & 1) == 0)
        {
LABEL_185:
          if ((_BYTE)v61 != 0xFF)
          {
            Unicode.CanonicalCombiningClass.init(rawValue:)();
            uint64_t v43 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
            goto LABEL_66;
          }
        }
LABEL_198:
        *(void *)&long long v84 = a3;
        *((void *)&v84 + 1) = a4;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        char v44 = 25;
        goto LABEL_68;
      }
      if ((a4 & 0x2000000000000000) != 0)
      {
        *(void *)&long long v84 = a3;
        *((void *)&v84 + 1) = a4 & 0xFFFFFFFFFFFFFFLL;
        if (a3 == 43)
        {
          if (v56)
          {
            uint64_t v72 = v56 - 1;
            if (v72)
            {
              LOBYTE(v61) = 0;
              unint64_t v73 = (unsigned __int8 *)&v84 + 1;
              while (1)
              {
                unsigned int v74 = *v73 - 48;
                if (v74 > 9) {
                  break;
                }
                if (((10 * v61) & 0xF00) != 0) {
                  break;
                }
                unsigned int v61 = (10 * v61) + v74;
                if ((v61 >> 8)) {
                  break;
                }
                char v64 = 0;
                ++v73;
                if (!--v72) {
                  goto LABEL_184;
                }
              }
            }
            goto LABEL_183;
          }
LABEL_203:
          __break(1u);
          return result;
        }
        if (a3 != 45)
        {
          if (v56)
          {
            LOBYTE(v61) = 0;
            BOOL v75 = &v84;
            while (1)
            {
              unsigned int v76 = *(unsigned __int8 *)v75 - 48;
              if (v76 > 9) {
                break;
              }
              if (((10 * v61) & 0xF00) != 0) {
                break;
              }
              unsigned int v61 = (10 * v61) + v76;
              if ((v61 >> 8)) {
                break;
              }
              char v64 = 0;
              BOOL v75 = (long long *)((char *)v75 + 1);
              if (!--v56) {
                goto LABEL_184;
              }
            }
          }
          goto LABEL_183;
        }
        if (v56)
        {
          uint64_t v65 = v56 - 1;
          if (v65)
          {
            LOBYTE(v61) = 0;
            uint64_t v66 = (unsigned __int8 *)&v84 + 1;
            while (1)
            {
              unsigned int v67 = *v66 - 48;
              if (v67 > 9) {
                break;
              }
              if (((10 * v61) & 0xF00) != 0) {
                break;
              }
              unsigned int v61 = (10 * v61) - v67;
              if ((v61 & 0xFFFFFF00) != 0) {
                break;
              }
              char v64 = 0;
              ++v66;
              if (!--v65) {
                goto LABEL_184;
              }
            }
          }
          goto LABEL_183;
        }
      }
      else
      {
        if ((a3 & 0x1000000000000000) != 0) {
          uint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        int v59 = *(unsigned __int8 *)result;
        if (v59 == 43)
        {
          if (v57 > 0)
          {
            uint64_t v68 = v57 - 1;
            if (v57 != 1)
            {
              if (result)
              {
                LOBYTE(v61) = 0;
                uint64_t v69 = (unsigned __int8 *)(result + 1);
                while (1)
                {
                  unsigned int v70 = *v69 - 48;
                  if (v70 > 9) {
                    goto LABEL_183;
                  }
                  if (((10 * v61) & 0xF00) != 0) {
                    goto LABEL_183;
                  }
                  unsigned int v61 = (10 * v61) + v70;
                  if ((v61 >> 8)) {
                    goto LABEL_183;
                  }
                  char v64 = 0;
                  ++v69;
                  if (!--v68) {
                    goto LABEL_184;
                  }
                }
              }
              goto LABEL_167;
            }
            goto LABEL_183;
          }
          goto LABEL_202;
        }
        if (v59 != 45)
        {
          if (v57)
          {
            if (result)
            {
              LOBYTE(v61) = 0;
              while (1)
              {
                unsigned int v71 = *(unsigned __int8 *)result - 48;
                if (v71 > 9) {
                  goto LABEL_183;
                }
                if (((10 * v61) & 0xF00) != 0) {
                  goto LABEL_183;
                }
                unsigned int v61 = (10 * v61) + v71;
                if ((v61 >> 8)) {
                  goto LABEL_183;
                }
                char v64 = 0;
                ++result;
                if (!--v57) {
                  goto LABEL_184;
                }
              }
            }
            goto LABEL_167;
          }
LABEL_183:
          LOBYTE(v61) = 0;
          char v64 = 1;
LABEL_184:
          char v83 = v64;
          if ((v64 & 1) == 0) {
            goto LABEL_185;
          }
          goto LABEL_198;
        }
        if (v57 > 0)
        {
          uint64_t v60 = v57 - 1;
          if (v57 != 1)
          {
            if (result)
            {
              LOBYTE(v61) = 0;
              uint64_t v62 = (unsigned __int8 *)(result + 1);
              while (1)
              {
                unsigned int v63 = *v62 - 48;
                if (v63 > 9) {
                  goto LABEL_183;
                }
                if (((10 * v61) & 0xF00) != 0) {
                  goto LABEL_183;
                }
                unsigned int v61 = (10 * v61) - v63;
                if ((v61 & 0xFFFFFF00) != 0) {
                  goto LABEL_183;
                }
                char v64 = 0;
                ++v62;
                if (!--v60) {
                  goto LABEL_184;
                }
              }
            }
LABEL_167:
            LOBYTE(v61) = 0;
            char v64 = 0;
            goto LABEL_184;
          }
          goto LABEL_183;
        }
        __break(1u);
      }
      __break(1u);
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
  }
  *a9 = a3;
  a9[1] = a4;
  uint64_t v36 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
LABEL_41:
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a9, 0, 1, v36);

  return swift_bridgeObjectRetain();
}

uint64_t currentRegexLiteralFormatVersion.getter()
{
  return 1;
}

uint64_t CompilerLexError.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompilerLexError.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*CompilerLexError.message.modify())()
{
  return AST.root.modify;
}

uint64_t CompilerLexError.location.getter()
{
  return *(void *)v0;
}

uint64_t CompilerLexError.completelyErroneous.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CompilerLexError.completelyErroneous.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*CompilerLexError.completelyErroneous.modify())()
{
  return AST.root.modify;
}

uint64_t protocol witness for Error._domain.getter in conformance CompilerLexError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance CompilerLexError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance CompilerLexError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CompilerLexError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t swiftCompilerLexRegexLiteral(start:bufferEnd:mustBeRegex:)@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  lexRegex(start:end:delimiters:)((uint64_t)v7, a1, a2, (uint64_t)&outlined read-only object #0 of swiftCompilerLexRegexLiteral(start:bufferEnd:mustBeRegex:));
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

int64_t lexRegex(start:end:)(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  int64_t result = lexRegex(start:end:delimiters:)(a1, a2, a3, (uint64_t)&outlined read-only object #0 of lexRegex(start:end:));
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t DelimiterLexError.resumePtr.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CompilerParseError.message.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompilerParseError.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CompilerParseError.message.modify())()
{
  return AST.root.modify;
}

uint64_t CompilerParseError.location.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CompilerParseError.location.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CompilerParseError.location.modify())()
{
  return AST.root.modify;
}

void (**swiftCompilerParseRegexLiteral(_:captureBufferOut:)(uint64_t a1, uint64_t a2, _WORD *a3))(long long *__return_ptr, uint64_t, void *)
{
  void (**object)(long long *__return_ptr, uint64_t, void *);
  Swift::String v6;
  long long v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  long long v16;
  uint64_t v17;
  char v18;
  long long v19;
  long long v20;
  void (**v21)(long long *__return_ptr, uint64_t, void *);
  uint64_t v22;

  unint64_t object = (void (**)(long long *__return_ptr, uint64_t, void *))a1;
  specialized parseWithDelimiters<A>(_:)(a1, a2, (uint64_t)&v19);
  if (v3)
  {
    *(void *)&uint64_t v19 = 0;
    *((void *)&v19 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v19 = 0xD000000000000021;
    *((void *)&v19 + 1) = 0x800000020D9DDE10;
    *(void *)&uint64_t v16 = v3;
    MEMORY[0x210561F90](v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    unint64_t object = (void (**)(long long *__return_ptr, uint64_t, void *))v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = v19;
    uint64_t v22 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
    uint64_t v8 = swift_dynamicCast();
    if (v8)
    {
      uint64_t v9 = *((void *)&v20 + 1);
      unint64_t object = v21;
      __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
      object[2](&v16, v9, object);
      uint64_t v10 = v16;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v19 = 0u;
      uint64_t v20 = 0u;
      outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for LocatedErrorProtocol?);
      uint64_t v10 = 0;
    }
    lazy protocol witness table accessor for type CompilerParseError and conformance CompilerParseError();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = v7;
    *(void *)(v14 + 16) = v10;
    *(unsigned char *)(v14 + 24) = v8 ^ 1;
    swift_willThrow();
  }
  else
  {
    static CaptureList.Builder.build(_:)((uint64_t *)&v19, (char **)&v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v22 = v16;
    CaptureList._captureStructure.getter((uint64_t)&v19);
    swift_bridgeObjectRelease();
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = BYTE8(v20);
    uint64_t v16 = v19;
    uint64_t v17 = v20;
    uint64_t v18 = BYTE8(v20);
    CaptureStructure.encode(to:)(a3);
    outlined consume of CaptureStructure(v11, *((uint64_t *)&v11 + 1), v12, v13);
    swift_bridgeObjectRetain();
  }
  return object;
}

uint64_t specialized parseWithDelimiters<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v51 = a1;
  *((void *)&v51 + 1) = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)String.init<A>(_:)();
  v5._uint64_t countAndFlagsBits = (uint64_t)&v51;
  v5._unint64_t object = v4;
  unsigned long long v6 = (unsigned __int128)droppingRegexDelimiters(_:)(v5);
  uint64_t v7 = v6;
  unint64_t v8 = *((void *)&v6 + 1);
  swift_bridgeObjectRelease();
  int v9 = v51;
  uint64_t v44 = *((void *)&v51 + 1);
  if (v51)
  {
    uint64_t v10 = 61;
  }
  else if (*((uint64_t *)&v51 + 1) >= 1 {
         && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v7, v8) & 1) != 0)
  }
  {
    uint64_t v10 = 67;
  }
  else
  {
    uint64_t v10 = 0;
  }
  specialized parseWithRecovery<A>(_:_:)(v7, v8, v10, (uint64_t)&v51);
  uint64_t v11 = v52;
  long long v45 = v51;
  uint64_t v12 = *(void *)(v52 + 16) + 1;
  uint64_t v13 = v52;
  do
  {
    if (!--v12)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a3 = v45;
      *(void *)(a3 + 16) = v11;
      return result;
    }
    uint64_t v14 = v13 + 80;
    unsigned int v15 = *(unsigned __int8 *)(v13 + 32);
    v13 += 80;
  }
  while (v15 > 1);
  int v39 = v9;
  uint64_t v16 = *(void *)(v14 - 32);
  uint64_t v43 = *(void *)(v14 - 40);
  uint64_t v17 = *(void *)(v14 - 24);
  uint64_t v18 = *(void *)(v14 - 16);
  uint64_t v19 = *(void *)v14;
  uint64_t v20 = *(void *)(v14 + 8);
  uint64_t v41 = *(void *)(v14 + 16);
  uint64_t v42 = *(void *)(v14 - 8);
  unsigned __int8 v40 = *(unsigned char *)(v14 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  uint64_t v21 = swift_allocError();
  *(unsigned char *)uint64_t v22 = v15;
  *(void *)(v22 + 8) = v43;
  *(void *)(v22 + 16) = v16;
  *(void *)(v22 + 24) = v17;
  *(void *)(v22 + 32) = v18;
  *(void *)(v22 + 40) = v42;
  *(void *)(v22 + 48) = v19;
  *(void *)(v22 + 56) = v20;
  *(void *)(v22 + 64) = v41;
  *(unsigned char *)(v22 + 72) = v40;
  *(void *)(v22 + 80) = v17;
  *(void *)(v22 + 88) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v42, v19, v20, v41, v40);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v53 = v21;
  MEMORY[0x210561F90](v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x210561F80](v53);
  }
  MEMORY[0x210561F80](v21);
  outlined init with take of LocatedErrorProtocol(&v51, (uint64_t)v48);
  uint64_t v23 = MEMORY[0x210561880](35, 0xE100000000000000, v44);
  if (v39) {
    uint64_t v25 = 31779;
  }
  else {
    uint64_t v25 = 47;
  }
  if (v39) {
    uint64_t v26 = (void *)0xE200000000000000;
  }
  else {
    uint64_t v26 = (void *)0xE100000000000000;
  }
  v47[0] = v23;
  v47[1] = v24;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = v25;
  v27._unint64_t object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v29 = v49;
  uint64_t v30 = v50;
  __swift_project_boxed_opaque_existential_1Tm(v48, v49);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v30 + 16))(v47, v29, v30);
  uint64_t v31 = String.distance(from:to:)();
  uint64_t v32 = String.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v32 < v31)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (__OFADD__(v28, v31))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = String.index(_:offsetBy:)();
  if (__OFADD__(v28, v32))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v34 = result;
  unint64_t v35 = String.index(_:offsetBy:)();
  uint64_t v36 = v49;
  uint64_t v37 = v50;
  __swift_project_boxed_opaque_existential_1Tm(v48, v49);
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
  uint64_t result = swift_getErrorValue();
  if (v35 >> 14 >= v34 >> 14)
  {
    Error.addingLocation(_:)(v34, v35, v46);
    MEMORY[0x210561F80](v38);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    return MEMORY[0x210561F80](v53);
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t parseWithDelimiters<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  MEMORY[0x270FA5388](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v10 = *(void *)(*(void *)(a3 + 8) + 8);
  uint64_t v11 = (void *)String.init<A>(_:)();
  v12._uint64_t countAndFlagsBits = (uint64_t)&v63;
  v12._unint64_t object = v11;
  unsigned long long v13 = (unsigned __int128)droppingRegexDelimiters(_:)(v12);
  uint64_t v14 = v13;
  unint64_t v15 = *((void *)&v13 + 1);
  swift_bridgeObjectRelease();
  int v56 = v63;
  uint64_t v55 = *((void *)&v63 + 1);
  if (v63)
  {
    uint64_t v16 = 61;
  }
  else if (*((uint64_t *)&v63 + 1) >= 1 {
         && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v14, v15) & 1) != 0)
  }
  {
    uint64_t v16 = 67;
  }
  else
  {
    uint64_t v16 = 0;
  }
  specialized parseWithRecovery<A>(_:_:)(v14, v15, v16, (uint64_t)&v63);
  uint64_t v17 = v64;
  long long v57 = v63;
  uint64_t v18 = *(void *)(v64 + 16) + 1;
  uint64_t v19 = v64;
  do
  {
    if (!--v18)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v48 = *((void *)&v57 + 1);
      *a4 = v57;
      a4[1] = v48;
      a4[2] = v17;
      return result;
    }
    uint64_t v20 = v19 + 80;
    unsigned int v21 = *(unsigned __int8 *)(v19 + 32);
    v19 += 80;
  }
  while (v21 > 1);
  v49[3] = v14;
  unint64_t v54 = v15;
  v49[0] = v10;
  v49[1] = a2;
  v49[2] = a1;
  uint64_t v22 = *(void *)(v20 - 32);
  uint64_t v53 = *(void *)(v20 - 40);
  uint64_t v23 = *(void *)(v20 - 24);
  uint64_t v24 = *(void *)(v20 - 16);
  uint64_t v25 = *(void *)v20;
  uint64_t v52 = *(void *)(v20 - 8);
  uint64_t v26 = *(void *)(v20 + 8);
  uint64_t v51 = *(void *)(v20 + 16);
  int v50 = *(unsigned __int8 *)(v20 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  uint64_t v27 = swift_allocError();
  *(unsigned char *)uint64_t v28 = v21;
  *(void *)(v28 + 8) = v53;
  *(void *)(v28 + 16) = v22;
  *(void *)(v28 + 24) = v23;
  *(void *)(v28 + 32) = v24;
  uint64_t v29 = v52;
  *(void *)(v28 + 40) = v52;
  *(void *)(v28 + 48) = v25;
  uint64_t v30 = v51;
  *(void *)(v28 + 56) = v26;
  *(void *)(v28 + 64) = v30;
  unsigned __int8 v31 = v50;
  *(unsigned char *)(v28 + 72) = v50;
  *(void *)(v28 + 80) = v23;
  *(void *)(v28 + 88) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v29, v25, v26, v30, v31);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v65 = v27;
  MEMORY[0x210561F90](v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x210561F80](v65);
  }
  MEMORY[0x210561F80](v27);
  outlined init with take of LocatedErrorProtocol(&v63, (uint64_t)v60);
  uint64_t v32 = MEMORY[0x210561880](35, 0xE100000000000000, v55);
  if (v56) {
    uint64_t v34 = 31779;
  }
  else {
    uint64_t v34 = 47;
  }
  if (v56) {
    unint64_t v35 = (void *)0xE200000000000000;
  }
  else {
    unint64_t v35 = (void *)0xE100000000000000;
  }
  v59[0] = v32;
  v59[1] = v33;
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v34;
  v36._unint64_t object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v38 = v61;
  uint64_t v39 = v62;
  __swift_project_boxed_opaque_existential_1Tm(v60, v61);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v39 + 16))(v59, v38, v39);
  uint64_t v40 = String.distance(from:to:)();
  uint64_t v41 = String.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v41 < v40)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = v37 + v40;
  if (__OFADD__(v37, v40))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  Collection.index(atOffset:)();
  uint64_t result = v37 + v41;
  if (__OFADD__(v37, v41))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v43 = v59[0];
  Collection.index(atOffset:)();
  unint64_t v44 = v59[0];
  uint64_t v45 = v61;
  uint64_t v46 = v62;
  __swift_project_boxed_opaque_existential_1Tm(v60, v61);
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
  uint64_t result = swift_getErrorValue();
  if (v44 >> 14 >= v43 >> 14)
  {
    Error.addingLocation(_:)(v43, v44, v58);
    MEMORY[0x210561F80](v47);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v60);
    return MEMORY[0x210561F80](v65);
  }
LABEL_28:
  __break(1u);
  return result;
}

void Delimiter.hash(into:)()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Delimiter.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

Swift::Int Delimiter.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Delimiter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Delimiter()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Delimiter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Delimiter(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Start()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Delimiter.Kind(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Delimiter.Kind;
}

void DelimiterLexError.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *DelimiterLexError.kind.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*DelimiterLexError.kind.modify())()
{
  return AST.root.modify;
}

unint64_t DelimiterLexError.description.getter()
{
  unint64_t result = 0xD00000000000001ALL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000022;
      break;
    case 2:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000030;
      break;
    case 4:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DelimiterLexError()
{
  unint64_t result = 0xD00000000000001ALL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000022;
      break;
    case 2:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000030;
      break;
    case 4:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  unint64_t v5 = 0;
  unint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v23 = a3 + 32;
  uint64_t v24 = result;
  unint64_t v25 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (result >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  uint64_t v19 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v20 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = 15;
  uint64_t v21 = 4 << v9;
  uint64_t v22 = v8;
  while (1)
  {
    if (v5 == v6)
    {
      int v12 = 0;
      unint64_t v13 = v6;
      goto LABEL_10;
    }
    if (v5 >= v6) {
      break;
    }
    int v12 = *(unsigned __int8 *)(v23 + v5);
    unint64_t v13 = v5 + 1;
LABEL_10:
    unint64_t v14 = v11 >> 14;
    BOOL v15 = v11 >> 14 == v8;
    if (v11 >> 14 == v8)
    {
      unsigned __int8 v16 = 0;
      if (v5 == v6) {
        return v15;
      }
      goto LABEL_30;
    }
    unint64_t v17 = v11 & 0xC;
    unint64_t result = v11;
    if (v17 == v10)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v24, a2);
      uint64_t v10 = v21;
      unint64_t v4 = v24;
    }
    unint64_t v18 = result >> 16;
    if (result >> 16 >= v25) {
      goto LABEL_34;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v10 = v21;
      unint64_t v4 = v24;
      unsigned __int8 v16 = result;
      if (v17 == v21) {
        goto LABEL_27;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v26[0] = v4;
      v26[1] = v20;
      unsigned __int8 v16 = *((unsigned char *)v26 + v18);
      if (v17 == v10) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t result = v19;
      if ((v4 & 0x1000000000000000) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v10 = v21;
        unint64_t v4 = v24;
      }
      unsigned __int8 v16 = *(unsigned char *)(result + v18);
      if (v17 == v10)
      {
LABEL_27:
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v24, a2);
        uint64_t v10 = v21;
        unint64_t v4 = v24;
        unint64_t v11 = result;
        uint64_t v8 = v22;
        if ((a2 & 0x1000000000000000) == 0)
        {
LABEL_24:
          unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
          if (v5 == v6) {
            return v15;
          }
          goto LABEL_30;
        }
        goto LABEL_28;
      }
    }
    uint64_t v8 = v22;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    if (v25 <= v11 >> 16) {
      goto LABEL_35;
    }
    unint64_t result = String.UTF8View._foreignIndex(after:)();
    uint64_t v10 = v21;
    unint64_t v4 = v24;
    unint64_t v11 = result;
    if (v5 == v6) {
      return v15;
    }
LABEL_30:
    BOOL v15 = 0;
    if (v14 != v8)
    {
      unint64_t v5 = v13;
      if (v12 == v16) {
        continue;
      }
    }
    return v15;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, char a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10 = 0;
  uint64_t v11 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4 << v11;
  uint64_t v13 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v13 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v20 = v13;
  while (1)
  {
    unint64_t v15 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      char v16 = 0;
      goto LABEL_11;
    }
    uint64_t result = Substring.UTF8View.subscript.getter();
    char v16 = result;
    if ((a3 & 0xC) == v12)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_10:
        a3 = (a3 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_11;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_10;
    }
    if (v20 <= a3 >> 16) {
      goto LABEL_25;
    }
    a3 = String.UTF8View._foreignIndex(after:)();
LABEL_11:
    uint64_t result = v10 == a1;
    if (v10 != a1) {
      break;
    }
    char v18 = 0;
    uint64_t v19 = a1;
    if (v15 < 0x4000) {
      return result;
    }
LABEL_17:
    uint64_t result = 0;
    if (v10 != a1)
    {
      uint64_t v10 = v19;
      if (v16 == v18) {
        continue;
      }
    }
    return result;
  }
  if ((v10 & 0x8000000000000000) == 0 && v10 < a1)
  {
    uint64_t v19 = v10 + 1;
    char v18 = a2;
    if (v15 < 0x4000) {
      return result;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unint64_t v6 = a1;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v28 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  uint64_t v23 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v24 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = 15;
  uint64_t v25 = 4 << v9;
  uint64_t v26 = a2;
  while (1)
  {
    if (a3)
    {
      if (!a4 || a3 != a4)
      {
LABEL_11:
        char v13 = 0;
        int v14 = *a3++;
        int v12 = v14;
        goto LABEL_14;
      }
      int v12 = 0;
    }
    else
    {
      if (a4) {
        goto LABEL_11;
      }
      int v12 = 0;
      a3 = 0;
    }
    char v13 = 1;
LABEL_14:
    unint64_t v15 = v11 >> 14;
    BOOL v16 = v11 >> 14 == v8;
    if (v11 >> 14 == v8)
    {
      unsigned __int8 v17 = 0;
      if (v13) {
        return v16;
      }
      goto LABEL_34;
    }
    char v18 = a4;
    unint64_t v19 = v11 & 0xC;
    unint64_t result = v11;
    if (v19 == v10)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, v26);
      uint64_t v10 = v25;
      a2 = v26;
      unint64_t v6 = a1;
    }
    unint64_t v21 = result >> 16;
    if (result >> 16 >= v28) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v10 = v25;
      a2 = v26;
      unint64_t v6 = a1;
      unsigned __int8 v17 = result;
      if (v19 == v25) {
        goto LABEL_31;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v29[0] = v6;
      v29[1] = v24;
      unsigned __int8 v17 = *((unsigned char *)v29 + v21);
      if (v19 == v10) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t result = v23;
      if ((v6 & 0x1000000000000000) == 0)
      {
        unint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v10 = v25;
        a2 = v26;
        unint64_t v6 = a1;
      }
      unsigned __int8 v17 = *(unsigned char *)(result + v21);
      if (v19 == v10)
      {
LABEL_31:
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, v26);
        uint64_t v10 = v25;
        a2 = v26;
        unint64_t v6 = a1;
        unint64_t v11 = result;
        a4 = v18;
        if ((v26 & 0x1000000000000000) == 0)
        {
LABEL_28:
          unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
          if (v13) {
            return v16;
          }
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    a4 = v18;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_28;
    }
LABEL_32:
    if (v28 <= v11 >> 16) {
      goto LABEL_38;
    }
    uint64_t v22 = String.UTF8View._foreignIndex(after:)();
    uint64_t v10 = v25;
    a2 = v26;
    unint64_t v6 = a1;
    unint64_t v11 = v22;
    if (v13) {
      return v16;
    }
LABEL_34:
    BOOL v16 = 0;
    if (v15 == v8 || v12 != v17) {
      return v16;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v8;
  uint64_t v9 = 4 * v8;
  uint64_t v10 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  uint64_t v21 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v12 = 15;
  while (1)
  {
    unint64_t v13 = v12 >> 14;
    if (v12 >> 14 == v9)
    {
      unsigned __int8 v14 = 0;
      if (!a1) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    unint64_t v15 = v12 & 0xC;
    unint64_t result = v12;
    if (v15 == v11) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    }
    unint64_t v17 = result >> 16;
    if (result >> 16 >= v23) {
      break;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unsigned __int8 v14 = result;
      if (v15 != v11) {
        goto LABEL_19;
      }
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v24[0] = a3;
      v24[1] = v22;
      unsigned __int8 v14 = *((unsigned char *)v24 + v17);
      if (v15 != v11) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t result = v21;
      if ((a3 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v14 = *(unsigned char *)(result + v17);
      if (v15 != v11)
      {
LABEL_19:
        if ((a4 & 0x1000000000000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_26;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    unint64_t v12 = result;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_20:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      if (!a1) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_26:
    if (v23 <= v12 >> 16) {
      goto LABEL_40;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
    if (!a1)
    {
LABEL_28:
      if (a2) {
        goto LABEL_29;
      }
      int v18 = 0;
      a1 = 0;
LABEL_32:
      unint64_t result = 1;
      if (v13 == v9) {
        return result;
      }
      goto LABEL_33;
    }
LABEL_21:
    if (a2 && a1 == a2)
    {
      int v18 = 0;
      goto LABEL_32;
    }
LABEL_29:
    unint64_t result = 0;
    int v19 = *a1++;
    int v18 = v19;
    if (v13 == v9) {
      return result;
    }
LABEL_33:
    if (v18 == v14) {
      int v20 = result;
    }
    else {
      int v20 = 1;
    }
    if (v20 == 1) {
      return 0;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v25 = v10;
  uint64_t v11 = 4 * v10;
  uint64_t v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v29 = 4 << v12;
  uint64_t v23 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v24 = a6 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v27 = 4 << v13;
  uint64_t v14 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v22 = v14;
  swift_bridgeObjectRetain();
  unint64_t v15 = 15;
  while (1)
  {
    unint64_t v16 = v15 >> 14;
    if (v15 >> 14 == v11)
    {
      if ((a1 ^ a2) >= 0x4000)
      {
        char v19 = 0;
        goto LABEL_30;
      }
      uint64_t v21 = 1;
LABEL_41:
      swift_bridgeObjectRelease();
      return v21;
    }
    unint64_t result = v15;
    if ((v15 & 0xC) == v29) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
    }
    unint64_t v18 = result >> 16;
    if (result >> 16 >= v25) {
      break;
    }
    if ((a6 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else if ((a6 & 0x2000000000000000) != 0)
    {
      v30[0] = a5;
      v30[1] = v24;
      char v19 = *((unsigned char *)v30 + v18);
    }
    else
    {
      unint64_t result = v23;
      if ((a5 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v19 = *(unsigned char *)(result + v18);
    }
    if ((v15 & 0xC) == v29)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      unint64_t v15 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_24:
        unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_29;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_24;
    }
    if (v25 <= v15 >> 16) {
      goto LABEL_43;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    if ((a1 ^ a2) < 0x4000)
    {
      uint64_t v21 = 0;
      goto LABEL_41;
    }
LABEL_30:
    unint64_t result = Substring.UTF8View.subscript.getter();
    char v20 = result;
    if ((a1 & 0xC) == v27)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
      a1 = result;
      if ((a4 & 0x1000000000000000) != 0)
      {
LABEL_37:
        if (v22 <= a1 >> 16) {
          goto LABEL_44;
        }
        a1 = String.UTF8View._foreignIndex(after:)();
        goto LABEL_33;
      }
    }
    else if ((a4 & 0x1000000000000000) != 0)
    {
      goto LABEL_37;
    }
    a1 = (a1 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_33:
    uint64_t v21 = 0;
    if (v16 == v11 || v19 != v20) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4 << v9;
  uint64_t v28 = 4 * v11;
  uint64_t v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v26 = v12;
  unint64_t v23 = v10;
  uint64_t v24 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  unint64_t v15 = 15;
  while (1)
  {
    unint64_t v16 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      if (v28 != v15 >> 14)
      {
        char v17 = 0;
        goto LABEL_19;
      }
      uint64_t v22 = 1;
LABEL_43:
      swift_bridgeObjectRelease();
      return v22;
    }
    unint64_t result = Substring.UTF8View.subscript.getter();
    char v17 = result;
    if ((a3 & 0xC) == v26)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_17:
        a3 = (a3 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_18;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_17;
    }
    if (v23 <= a3 >> 16) {
      goto LABEL_46;
    }
    a3 = String.UTF8View._foreignIndex(after:)();
LABEL_18:
    if (v28 == v15 >> 14)
    {
      uint64_t v22 = 0;
      goto LABEL_43;
    }
LABEL_19:
    unint64_t v19 = v15 & 0xC;
    unint64_t result = v15;
    if (v19 == v14) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
    }
    unint64_t v20 = result >> 16;
    if (result >> 16 >= v11) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v21 = result;
      if (v19 != v14) {
        goto LABEL_29;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v31[0] = a1;
      v31[1] = v25;
      char v21 = *((unsigned char *)v31 + v20);
      if (v19 != v14) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t result = v24;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v21 = *(unsigned char *)(result + v20);
      if (v19 != v14)
      {
LABEL_29:
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
    unint64_t v15 = result;
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_33:
      if (v11 <= v15 >> 16) {
        goto LABEL_45;
      }
      unint64_t v15 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_35;
    }
LABEL_30:
    unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_35:
    uint64_t v22 = 0;
    if (v16 < 0x4000 || v17 != v21) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else
    {
      unint64_t result = a2 - result;
      while (!__OFSUB__(result--, 1))
      {
        if (result < 0 || result >= v3) {
          goto LABEL_16;
        }
        int v5 = *(unsigned __int8 *)(v2 + result);
        BOOL v6 = v5 == 10 || v5 == 13;
        if (v6 || !result) {
          return result;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

uint64_t DelimiterLexer.advance(escaped:)(uint64_t result)
{
  uint64_t v2 = (unsigned char *)v1[1];
  if ((unint64_t)v2 >= v1[2])
  {
    if (v1[3]) {
      int v5 = (unsigned char *)v1[3];
    }
    else {
      int v5 = (unsigned char *)v1[1];
    }
    lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
    swift_allocError();
    *(unsigned char *)uint64_t v6 = 0;
LABEL_17:
    *(void *)(v6 + 8) = v5;
    return swift_willThrow();
  }
  if ((char)*v2 < 0)
  {
LABEL_24:
    v1[1] = v2 + 1;
    return result;
  }
  unsigned int v3 = *v2;
  if (v3 <= 0xC)
  {
    if (!*v2) {
      goto LABEL_24;
    }
    if (v3 != 10) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
  if (v3 != 92)
  {
    if (v3 != 13)
    {
LABEL_6:
      if (v3 - 32 < 0x5F) {
        goto LABEL_24;
      }
      if (v3 == 9 && v1[3] != 0) {
        goto LABEL_24;
      }
      int v5 = v2 + 1;
      lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
      swift_allocError();
      *(unsigned char *)uint64_t v6 = 3;
      goto LABEL_17;
    }
LABEL_21:
    if (!v1[3])
    {
      lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
      swift_allocError();
      *(unsigned char *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = v2;
      return swift_willThrow();
    }
    goto LABEL_24;
  }
  if (result) {
    goto LABEL_24;
  }
  v1[1] = v2 + 1;
  return DelimiterLexer.advance(escaped:)(1);
}

BOOL Unicode.Scalar.isPrintableASCII.getter(int a1)
{
  return (a1 - 32) < 0x5F;
}

Swift::tuple_String__RegexParser_Delimiter __swiftcall droppingRegexDelimiters(_:)(Swift::String a1)
{
  uint64_t v2 = 0;
  uint64_t object = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t object = (uint64_t)a1._object;
  }
  uint64_t v66 = a1._object;
  unint64_t v67 = v1;
  uint64_t v4 = 7;
  if (((v1 >> 60) & (((uint64_t)a1._object & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  unint64_t v65 = v4 | (object << 16);
  while (2)
  {
    int v5 = outlined read-only object #0 of droppingRegexDelimiters(_:)[v2 + 32];
    unint64_t v6 = specialized String.UTF8View.subscript.getter(15, v65, (unint64_t)v66, v67);
    unint64_t v8 = v6;
    unint64_t v9 = v7;
    unint64_t v11 = v10;
    unint64_t v13 = v12;
    int v68 = v5;
    if (v5 == 1)
    {
      swift_bridgeObjectRetain();
      unint64_t v14 = 0;
      unint64_t v15 = 0xE200000000000000;
      unint64_t v16 = 31779;
      goto LABEL_33;
    }
    unint64_t v17 = v7 >> 14;
    unint64_t v18 = v6 >> 14;
    swift_bridgeObjectRetain();
    unint64_t v19 = v8;
    if (v18 == v17) {
      goto LABEL_28;
    }
    unint64_t v19 = v8;
    if (Substring.UTF8View.subscript.getter() != 35) {
      goto LABEL_28;
    }
    uint64_t v20 = (v11 >> 59) & 1;
    if ((v13 & 0x1000000000000000) == 0) {
      LOBYTE(v20) = 1;
    }
    uint64_t v21 = 4 << v20;
    if ((v13 & 0x2000000000000000) != 0) {
      unint64_t v22 = HIBYTE(v13) & 0xF;
    }
    else {
      unint64_t v22 = v11 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v19 = v8;
    while (1)
    {
      if ((v19 & 0xC) == v21)
      {
        unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v11, v13);
        if ((v13 & 0x1000000000000000) == 0)
        {
LABEL_19:
          unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_23;
        }
      }
      else if ((v13 & 0x1000000000000000) == 0)
      {
        goto LABEL_19;
      }
      if (v22 <= v19 >> 16)
      {
        __break(1u);
        goto LABEL_52;
      }
      unint64_t v19 = String.UTF8View._foreignIndex(after:)();
LABEL_23:
      unint64_t v23 = v19 >> 14;
      if (v19 >> 14 == v17) {
        break;
      }
      if (Substring.UTF8View.subscript.getter() != 35) {
        goto LABEL_27;
      }
    }
    unint64_t v23 = v9 >> 14;
LABEL_27:
    if (v23 < v8 >> 14) {
      goto LABEL_55;
    }
LABEL_28:
    unint64_t v24 = specialized Substring.UTF8View.subscript.getter(v8, v19, v8, v9, v11, v13);
    unint64_t v28 = specialized Collection.count.getter(v24, v25, v26, v27);
    if ((v28 & 0x8000000000000000) != 0) {
      goto LABEL_53;
    }
    unint64_t v14 = v28;
    unint64_t v29 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v30) {
      unint64_t v29 = v9;
    }
    if (v17 < v29 >> 14)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    unint64_t v8 = specialized Substring.UTF8View.subscript.getter(v29, v9, v8, v9, v11, v13);
    unint64_t v9 = v31;
    unint64_t v11 = v32;
    unint64_t v34 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xE100000000000000;
    unint64_t v16 = 47;
    unint64_t v13 = v34;
LABEL_33:
    unint64_t v35 = specialized Collection<>.tryDropPrefix<A>(_:)(v16, v15, v8, v9, v11, v13);
    unint64_t v37 = v36;
    unint64_t v39 = v38;
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v41) {
      goto LABEL_6;
    }
    if (v68)
    {
      if (!v14)
      {
        unint64_t v42 = 0xE200000000000000;
        unint64_t v43 = 9084;
        goto LABEL_38;
      }
LABEL_56:
      __break(1u);
LABEL_57:
      uint64_t v62 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_58;
    }
    unint64_t v42 = 0xE100000000000000;
    unint64_t v43 = 47;
LABEL_38:
    uint64_t v44 = MEMORY[0x210561880](35, 0xE100000000000000, v14);
    uint64_t v46 = v45;
    unint64_t v75 = v43;
    unint64_t v76 = v42;
    swift_bridgeObjectRetain();
    v47._uint64_t countAndFlagsBits = v44;
    v47._uint64_t object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = specialized Collection<>.tryDropSuffix<A>(_:)(v75, v76, v35, v37, v39, v41);
    unint64_t v50 = v49;
    unint64_t v52 = v51;
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    if (v54)
    {
      swift_bridgeObjectRelease();
      unint64_t v35 = v48;
      unint64_t v37 = v50;
      unint64_t v39 = v52;
      unint64_t v41 = v54;
    }
    swift_bridgeObjectRetain();
    uint64_t v55 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8jK14V_s0C0O0H0OTG5Tf1cn_n(v35, v37, v39, v41);
    if (!v56)
    {
      unint64_t v71 = v35;
      unint64_t v72 = v37;
      unint64_t v73 = v39;
      unint64_t v74 = v41;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
      if (swift_dynamicCast())
      {
        outlined init with take of LocatedErrorProtocol(v69, (uint64_t)&v75);
        __swift_project_boxed_opaque_existential_1Tm(&v75, v77);
        if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
        {
          swift_bridgeObjectRelease();
          __swift_project_boxed_opaque_existential_1Tm(&v75, v77);
          dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
          unint64_t v58 = *((void *)&v69[0] + 1);
          unint64_t v57 = *(void *)&v69[0];
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
          goto LABEL_48;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
      }
      else
      {
        uint64_t v70 = 0;
        memset(v69, 0, sizeof(v69));
        outlined destroy of _ASTParent?((uint64_t)v69, &demangling cache variable for type metadata for _HasContiguousBytes?);
      }
      uint64_t v55 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v35, v37, v39, v41);
    }
    unint64_t v57 = v55;
    unint64_t v58 = v56;
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRetain();
    char v59 = specialized Sequence<>.elementsEqual<A>(_:)(v35, v37, v39, v41, v57, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (!v58)
    {
LABEL_6:
      if (++v2 == 2) {
        goto LABEL_57;
      }
      continue;
    }
    break;
  }
  *(unsigned char *)uint64_t countAndFlagsBits = v68;
  *(void *)(countAndFlagsBits + 8) = v14;
  uint64_t v62 = v57;
  long long v63 = (void *)v58;
LABEL_58:
  result._1.poundCount = v61;
  result._0._uint64_t object = v63;
  result._0._uint64_t countAndFlagsBits = v62;
  result._1.kind = v60;
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    Swift::tuple_String__RegexParser_Delimiter result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    Swift::tuple_String__RegexParser_Delimiter result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return String.UnicodeScalarView.distance(from:to:)(0xFuLL, v3 | (v2 << 16), a1, a2);
}

uint64_t specialized Collection<>.tryDropPrefix<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  if ((a2 & 0x1000000000000000) == 0 || (String.UTF8View._foreignCount()() & 0x8000000000000000) == 0) {
    goto LABEL_2;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_2:
    uint64_t v12 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v13) {
      unint64_t v14 = a4;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14 >> 14 < a3 >> 14) {
      goto LABEL_15;
    }
    unint64_t v15 = specialized Substring.UTF8View.subscript.getter(a3, v14, a3, a4, a5, a6);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized Sequence<>.elementsEqual<A>(_:)(a1, v10, v15, v17, v19, v21);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
    swift_bridgeObjectRetain();
    unint64_t v22 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v23) {
      unint64_t v22 = a4;
    }
    if (a4 >> 14 >= v22 >> 14)
    {
      uint64_t v24 = specialized Substring.UTF8View.subscript.getter(v22, a4, a3, a4, a5, a6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v24;
    }
  }
}

uint64_t Collection<>.tryDropPrefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, void)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  return Collection<>.tryDropPrefix<A>(_:)(a1, a2, a3, a4, MEMORY[0x263F8D828], MEMORY[0x263F8D848], a5);
}

uint64_t specialized Collection<>.tryDropSuffix<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v10 = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v13 = String.UTF8View._foreignCount()();
    if ((v13 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_20;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    unint64_t v13 = specialized Collection.count.getter(a3, a4, a5, a6);
    if (__OFSUB__(v13, v12))
    {
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    unint64_t v13 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v14) {
      unint64_t v13 = a4;
    }
    if (a4 >> 14 < v13 >> 14) {
      goto LABEL_21;
    }
    uint64_t v26 = v12;
    unint64_t v15 = specialized Substring.UTF8View.subscript.getter(v13, a4, a3, a4, a5, a6);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v10 = specialized Sequence<>.elementsEqual<A>(_:)(a1, v10, v15, v17, v19, v21);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return 0;
    }
    unint64_t v13 = specialized Collection.count.getter(a3, a4, a5, a6);
    if (__OFSUB__(v13, v26)) {
      goto LABEL_22;
    }
    swift_bridgeObjectRetain();
    unint64_t v13 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v22) {
      unint64_t v23 = a4;
    }
    else {
      unint64_t v23 = v13;
    }
    if (v23 >> 14 >= a3 >> 14)
    {
      uint64_t v24 = specialized Substring.UTF8View.subscript.getter(a3, v23, a3, a4, a5, a6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t v12 = v13;
  }
}

uint64_t Collection<>.tryDropSuffix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, void)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  return Collection<>.tryDropPrefix<A>(_:)(a1, a2, a3, a4, MEMORY[0x263F8D830], MEMORY[0x263F8D840], a5);
}

uint64_t Collection<>.tryDropPrefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, void)@<X3>, uint64_t a4@<X5>, void (*a5)(uint64_t, uint64_t, void)@<X6>, void (*a6)(uint64_t, uint64_t, void)@<X7>, uint64_t a7@<X8>)
{
  uint64_t v24 = a6;
  uint64_t v25 = a1;
  uint64_t v26 = a5;
  uint64_t v27 = a4;
  uint64_t v28 = a7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1, a2);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v14);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = dispatch thunk of Collection.count.getter();
  char v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v22(v11, v29, a2);
  uint64_t v23 = v17;
  v26(v17, a2, a3);
  uint64_t v26 = a3;
  swift_getAssociatedConformanceWitness();
  LOBYTE(a3) = Sequence<>.elementsEqual<A>(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  if (a3)
  {
    v22(v11, v29, a2);
    uint64_t v18 = v28;
    v24(v23, a2, v26);
    uint64_t v19 = 0;
    uint64_t v20 = v18;
  }
  else
  {
    uint64_t v19 = 1;
    uint64_t v20 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, v19, 1, AssociatedTypeWitness);
}

int64_t lexRegex(start:end:delimiters:)(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (a3 < (unint64_t)a2) {
    goto LABEL_110;
  }
  uint64_t v6 = v5;
  uint64_t v7 = a4;
  uint64_t v8 = (unsigned __int8 *)a3;
  uint64_t v9 = a2;
  uint64_t v79 = 0;
  if ((unint64_t)a2 < a3 && *a2 == 35)
  {
    if ((unint64_t)(a2 + 1) < a3 && a2[1] == 35)
    {
      uint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = &a2[v10 + 2];
        if ((unint64_t)v11 > a3) {
          goto LABEL_109;
        }
        uint64_t v12 = v10 + 2;
        if (__OFADD__(v10 + 1, 1)) {
          goto LABEL_111;
        }
        if (a3 - (void)a2 - 2 == v10) {
          break;
        }
        ++v10;
        if (*v11 != 35)
        {
          uint64_t v9 = &a2[v10 + 1];
          goto LABEL_14;
        }
      }
      uint64_t v9 = (unsigned __int8 *)a3;
      uint64_t v12 = a3 - (void)a2;
    }
    else
    {
      uint64_t v12 = 1;
      uint64_t v9 = a2 + 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
LABEL_14:
  uint64_t v13 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v74 = v13;
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v73 = v7 + 32;
    uint64_t v70 = v9;
    uint64_t v71 = v7;
    uint64_t v67 = v12;
    uint64_t v68 = v5;
    unint64_t v69 = (unint64_t)v8;
    while (v14 < *(void *)(v7 + 16))
    {
      int v15 = *(unsigned __int8 *)(v73 + v14);
      if (*(unsigned char *)(v73 + v14)) {
        unint64_t v16 = 31779;
      }
      else {
        unint64_t v16 = 47;
      }
      if (*(unsigned char *)(v73 + v14)) {
        unint64_t v17 = 0xE200000000000000;
      }
      else {
        unint64_t v17 = 0xE100000000000000;
      }
      if (v15 != 1 || v12 == 0)
      {
        int64_t v4 = HIBYTE(v17) & 3;
        uint64_t v19 = &v9[v4];
        if (&v9[v4] <= v8 && (specialized Sequence<>.elementsEqual<A>(_:)(v16, v17, v9, &v9[v4]) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v77 = &v9[v4];
          if ((v15 & 1) == 0 && v12 >= 1 && v19 < v8)
          {
            long long v63 = &v9[v4];
            uint64_t v64 = &v9[v4];
            while (2)
            {
              switch(*v64)
              {
                case 9u:
                case 0x20u:
                  if (++v64 > v8) {
                    goto LABEL_113;
                  }
                  if (v8 != ++v63) {
                    continue;
                  }
                  uint64_t v64 = v8;
LABEL_101:
                  uint64_t v77 = v64;
                  break;
                case 0xAu:
                case 0xDu:
                  uint64_t v77 = v64;
                  uint64_t v79 = v63;
                  goto LABEL_62;
                default:
                  goto LABEL_101;
              }
              break;
            }
          }
LABEL_62:
          if (v15) {
            uint64_t v45 = 9084;
          }
          else {
            uint64_t v45 = 47;
          }
          unint64_t v46 = 0xE100000000000000;
          if (v15) {
            unint64_t v46 = 0xE200000000000000;
          }
          unint64_t v75 = v46;
          unint64_t v76 = v45;
          while (2)
          {
            uint64_t v81 = v77;
            uint64_t v47 = MEMORY[0x210561880](35, 0xE100000000000000, v12);
            unint64_t v49 = v48;
            swift_bridgeObjectRetain();
            v50._uint64_t countAndFlagsBits = v47;
            v50._uint64_t object = v49;
            String.append(_:)(v50);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v51 = v77;
            uint64_t v52 = HIBYTE(v75) & 0xF;
            if (a3 < (unint64_t)&v77[v52]
              || (specialized Sequence<>.elementsEqual<A>(_:)(v76, v75, v77, &v77[v52]) & 1) == 0)
            {
              swift_bridgeObjectRelease();
              int64_t v4 = 0;
              uint64_t v52 = 0;
LABEL_71:
              if (v6)
              {
                swift_bridgeObjectRelease();
                return v4;
              }
              if (v52)
              {
                swift_bridgeObjectRelease();
                *(unsigned char *)a1 = v15;
                *(void *)(a1 + 8) = v12;
                return v4;
              }
              DelimiterLexer.advance(escaped:)(0);
              continue;
            }
            break;
          }
          v77 += v52;
          if (a3 < (unint64_t)&v51[v52]) {
            goto LABEL_112;
          }
          swift_bridgeObjectRelease();
          int64_t v4 = v81 - v19;
          if (!v79) {
            goto LABEL_89;
          }
          uint64_t v53 = specialized BidirectionalCollection.lastIndex(where:)((uint64_t)v19, (uint64_t)v81);
          if (v54) {
            goto LABEL_118;
          }
          int64_t v55 = v53 + 1;
          if (__OFADD__(v53, 1)) {
            goto LABEL_114;
          }
          if (v4 < v55) {
            goto LABEL_115;
          }
          if (v55 == v4)
          {
LABEL_89:
            int64_t v4 = static String._fromUTF8Repairing(_:)();
            uint64_t v52 = v59;
            if (specialized Sequence<>.elementsEqual<A>(_:)(v19, v81, v4, v59)) {
              goto LABEL_71;
            }
            swift_bridgeObjectRelease();
            _RegexParser::Delimiter::Kind v60 = v77;
            lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
            uint64_t v6 = swift_allocError();
            char v62 = 1;
          }
          else
          {
            int64_t v56 = v53 + 1;
            while (1)
            {
              if (v56 >= v4) {
                goto LABEL_106;
              }
              if (v55 < 0) {
                goto LABEL_107;
              }
              int v57 = v19[v56];
              if (v57 != 32 && v57 != 9) {
                break;
              }
              if (v4 == ++v56) {
                goto LABEL_89;
              }
            }
            _RegexParser::Delimiter::Kind v60 = v77;
            lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
            uint64_t v6 = swift_allocError();
            char v62 = 4;
          }
          *(unsigned char *)uint64_t v61 = v62;
          *(void *)(v61 + 8) = v60;
          swift_willThrow();
          goto LABEL_71;
        }
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }
      if (v12 <= 1)
      {
        uint64_t v20 = specialized Collection.prefix(_:)(v12, 0x7C23uLL, 0xE200000000000000);
        if (v12 < 0) {
          goto LABEL_108;
        }
        unint64_t v24 = v20;
        uint64_t v25 = v21;
        unint64_t v26 = v22;
        unint64_t v27 = v23;
        swift_bridgeObjectRetain();
        int64_t v4 = specialized Sequence<>.elementsEqual<A>(_:)(v12, 35, v24, v25, v26, v27);
        swift_bridgeObjectRelease();
        uint64_t v9 = v70;
        if (v4)
        {
          unint64_t v28 = specialized Collection.dropFirst(_:)(v12, 0x7C23uLL, 0xE200000000000000);
          unint64_t v30 = v29;
          int64_t v4 = v31;
          unint64_t v32 = v8;
          unint64_t v34 = v33;
          swift_bridgeObjectRetain();
          unint64_t v80 = v4;
          unint64_t v35 = &v70[specialized Collection.count.getter(v28, v30, v4, v34)];
          if (v35 > v32)
          {
LABEL_38:
            swift_bridgeObjectRelease();
            uint64_t v12 = v67;
            uint64_t v6 = v68;
            uint64_t v8 = (unsigned __int8 *)v69;
            uint64_t v9 = v70;
LABEL_17:
            uint64_t v7 = v71;
            goto LABEL_18;
          }
          uint64_t v36 = ((unint64_t)v4 >> 59) & 1;
          if ((v34 & 0x1000000000000000) == 0) {
            LOBYTE(v36) = 1;
          }
          uint64_t v72 = 4 << v36;
          uint64_t v37 = HIBYTE(v34) & 0xF;
          if ((v34 & 0x2000000000000000) == 0) {
            uint64_t v37 = v4 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v65 = v37;
          unint64_t v38 = v28;
          unint64_t v39 = v70;
          while (2)
          {
            unint64_t v40 = v38 ^ v30;
            if (v35 == v39)
            {
              if (v40 < 0x4000)
              {
                uint64_t v19 = &v70[specialized Collection.count.getter(v28, v30, v80, v34)];
                uint64_t v77 = v19;
                if ((unint64_t)v19 <= v69)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v12 = 0;
                  int v15 = 1;
                  uint64_t v6 = v68;
                  goto LABEL_62;
                }
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
                JUMPOUT(0x20D97893CLL);
              }
              int v41 = 0;
              unint64_t v42 = v39;
            }
            else
            {
              if (v40 < 0x4000) {
                goto LABEL_38;
              }
              unint64_t v42 = v39 + 1;
              int v41 = *v39;
            }
            int64_t v4 = Substring.UTF8View.subscript.getter();
            if ((v38 & 0xC) == v72)
            {
              unint64_t v38 = _StringGuts._slowEnsureMatchingEncoding(_:)(v38, v80, v34);
              if ((v34 & 0x1000000000000000) == 0) {
                goto LABEL_51;
              }
            }
            else if ((v34 & 0x1000000000000000) == 0)
            {
LABEL_51:
              unint64_t v38 = (v38 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v35 == v39) {
                goto LABEL_38;
              }
LABEL_52:
              unint64_t v39 = v42;
              if (v41 != v4) {
                goto LABEL_38;
              }
              continue;
            }
            break;
          }
          if (v65 <= v38 >> 16) {
            goto LABEL_117;
          }
          unint64_t v38 = String.UTF8View._foreignIndex(after:)();
          if (v35 == v39) {
            goto LABEL_38;
          }
          goto LABEL_52;
        }
      }
LABEL_18:
      if (++v14 == v74) {
        goto LABEL_58;
      }
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
LABEL_58:
  swift_bridgeObjectRelease_n();
  lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
  swift_allocError();
  *(unsigned char *)uint64_t v43 = 2;
  *(void *)(v43 + 8) = v9 + 1;
  swift_willThrow();
  return v4;
}

void ParseError.hash(into:)()
{
  outlined init with take of ParseError(v0, (uint64_t)&v13);
  Swift::UInt v1 = v13;
  switch(v17)
  {
    case 1:
      Swift::UInt v3 = v15;
      Swift::UInt v4 = 1;
      goto LABEL_5;
    case 2:
      Swift::UInt v3 = v15;
      Swift::UInt v4 = 2;
LABEL_5:
      Hasher._combine(_:)(v4);
      String.hash(into:)();
      Hasher._combine(_:)(v3);
      return;
    case 3:
      Swift::UInt v2 = 3;
      goto LABEL_42;
    case 4:
      Swift::UInt v2 = 5;
      goto LABEL_42;
    case 5:
      Swift::UInt v5 = 6;
      goto LABEL_39;
    case 6:
      Swift::UInt v2 = 7;
      goto LABEL_42;
    case 7:
      Swift::UInt v5 = 8;
      goto LABEL_39;
    case 8:
      Swift::UInt v2 = 9;
      goto LABEL_42;
    case 9:
      Swift::UInt v6 = 10;
      goto LABEL_21;
    case 10:
      Swift::UInt v6 = 13;
      goto LABEL_21;
    case 11:
      Swift::UInt v6 = 14;
      goto LABEL_21;
    case 12:
      Swift::UInt v2 = 18;
      goto LABEL_42;
    case 13:
      Swift::UInt v2 = 19;
      goto LABEL_42;
    case 14:
      Swift::UInt v2 = 20;
      goto LABEL_42;
    case 15:
      Swift::UInt v2 = 21;
      goto LABEL_42;
    case 16:
      Swift::UInt v6 = 22;
      goto LABEL_21;
    case 17:
      Swift::UInt v6 = 23;
LABEL_21:
      Hasher._combine(_:)(v6);
      goto LABEL_22;
    case 18:
      Swift::UInt v7 = v14;
      Hasher._combine(_:)(0x1BuLL);
      if (v7)
      {
        Hasher._combine(_:)(1u);
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      goto LABEL_43;
    case 19:
      Swift::UInt v2 = 28;
      goto LABEL_42;
    case 20:
      Swift::UInt v2 = 29;
      goto LABEL_42;
    case 21:
      Swift::UInt v2 = 30;
      goto LABEL_42;
    case 22:
      Swift::UInt v2 = 31;
      goto LABEL_42;
    case 23:
      Swift::UInt v2 = 32;
      goto LABEL_42;
    case 24:
      Swift::UInt v2 = 33;
      goto LABEL_42;
    case 25:
      Swift::UInt v2 = 34;
      goto LABEL_42;
    case 26:
      Swift::UInt v8 = 37;
      goto LABEL_35;
    case 27:
      Swift::UInt v8 = 38;
      goto LABEL_35;
    case 28:
      Swift::UInt v8 = 39;
LABEL_35:
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v1);
      return;
    case 29:
      Swift::UInt v2 = 45;
      goto LABEL_42;
    case 30:
      Swift::UInt v2 = 46;
      goto LABEL_42;
    case 31:
      Swift::UInt v5 = 47;
LABEL_39:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v1);
      return;
    case 32:
      Swift::UInt v2 = 48;
      goto LABEL_42;
    case 33:
      Swift::UInt v2 = 49;
      goto LABEL_42;
    case 34:
      Swift::UInt v9 = v14;
      Hasher._combine(_:)(0x34uLL);
      Hasher._combine(_:)(v1);
      Hasher._combine(_:)(v9);
      return;
    case 35:
      Hasher._combine(_:)(0x35uLL);
      String.hash(into:)();
LABEL_22:
      String.hash(into:)();
      return;
    case 36:
      if (v15 | v16 | v13 | v14)
      {
        Swift::UInt v10 = v15 | v16 | v14;
        if (v13 == 1 && v10 == 0)
        {
          Hasher._combine(_:)(0xBuLL);
        }
        else if (v13 == 2 && v10 == 0)
        {
          Hasher._combine(_:)(0xCuLL);
        }
        else if (v13 != 3 || v10)
        {
          if (v13 != 4 || v10)
          {
            if (v13 != 5 || v10)
            {
              if (v13 != 6 || v10)
              {
                if (v13 != 7 || v10)
                {
                  if (v13 != 8 || v10)
                  {
                    if (v13 != 9 || v10)
                    {
                      if (v13 != 10 || v10)
                      {
                        if (v13 != 11 || v10)
                        {
                          if (v13 != 12 || v10)
                          {
                            if (v13 != 13 || v10)
                            {
                              if (v13 != 14 || v10)
                              {
                                if (v13 != 15 || v10)
                                {
                                  if (v13 != 16 || v10)
                                  {
                                    if (v13 != 17 || v10) {
                                      Hasher._combine(_:)(0x36uLL);
                                    }
                                    else {
                                      Hasher._combine(_:)(0x33uLL);
                                    }
                                  }
                                  else
                                  {
                                    Hasher._combine(_:)(0x32uLL);
                                  }
                                }
                                else
                                {
                                  Hasher._combine(_:)(0x2CuLL);
                                }
                              }
                              else
                              {
                                Hasher._combine(_:)(0x2BuLL);
                              }
                            }
                            else
                            {
                              Hasher._combine(_:)(0x2AuLL);
                            }
                          }
                          else
                          {
                            Hasher._combine(_:)(0x29uLL);
                          }
                        }
                        else
                        {
                          Hasher._combine(_:)(0x28uLL);
                        }
                      }
                      else
                      {
                        Hasher._combine(_:)(0x24uLL);
                      }
                    }
                    else
                    {
                      Hasher._combine(_:)(0x23uLL);
                    }
                  }
                  else
                  {
                    Hasher._combine(_:)(0x1AuLL);
                  }
                }
                else
                {
                  Hasher._combine(_:)(0x19uLL);
                }
              }
              else
              {
                Hasher._combine(_:)(0x18uLL);
              }
            }
            else
            {
              Hasher._combine(_:)(0x11uLL);
            }
          }
          else
          {
            Hasher._combine(_:)(0x10uLL);
          }
        }
        else
        {
          Hasher._combine(_:)(0xFuLL);
        }
      }
      else
      {
        Hasher._combine(_:)(4uLL);
      }
      return;
    default:
      Swift::UInt v2 = 0;
LABEL_42:
      Hasher._combine(_:)(v2);
LABEL_43:
      String.hash(into:)();
      return;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParseError()
{
  outlined init with take of ParseError(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  ParseError.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ParseError()
{
  outlined init with take of ParseError(v0, (uint64_t)v1);
  ParseError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParseError()
{
  outlined init with take of ParseError(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  ParseError.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParseError(long long *a1, long long *a2)
{
  outlined init with take of ParseError(a1, (uint64_t)v4);
  outlined init with take of ParseError(a2, (uint64_t)v5);
  return specialized static ParseError.== infix(_:_:)(v4, v5) & 1;
}

unint64_t ParseError.description.getter()
{
  outlined init with take of ParseError(v0, (uint64_t)v68);
  outlined init with take of ParseError(v0, (uint64_t)&v69);
  uint64_t countAndFlagsBits = v69._countAndFlagsBits;
  switch(v72)
  {
    case 1:
      uint64_t object = v69._object;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      strcpy((char *)v67, "expected ");
      WORD1(v67[1]) = 0;
      HIDWORD(v67[1]) = -385875968;
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 0x2073746967696420;
      v7._uint64_t object = (void *)0xEC00000027206E69;
      String.append(_:)(v7);
      goto LABEL_43;
    case 2:
      Swift::UInt v8 = v69._object;
      if ((_BYTE)v70)
      {
        if (v70 == 2)
        {
          uint64_t v9 = 0xD000000000000012;
          Swift::UInt v10 = (void *)0x800000020D9DFDD0;
        }
        else
        {
          Swift::UInt v10 = (void *)0xE600000000000000;
          uint64_t v9 = 0x7265626D756ELL;
        }
      }
      else
      {
        Swift::UInt v10 = (void *)0xEC0000007265626DLL;
        uint64_t v9 = 0x756E206C6174636FLL;
      }
      unint64_t v62 = ((unint64_t)v69._object >> 56) & 0xF;
      if (((uint64_t)v69._object & 0x2000000000000000) == 0) {
        unint64_t v62 = v69._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v62)
      {
        uint64_t v63 = v69._countAndFlagsBits;
        String.append(_:)(*(Swift::String *)(&v8 - 1));
        v64._uint64_t countAndFlagsBits = 39;
        v64._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        uint64_t v65 = 0x27206E6920;
        unint64_t v40 = 0xE500000000000000;
      }
      else
      {
        uint64_t v65 = 0;
        unint64_t v40 = 0xE000000000000000;
      }
      strcpy((char *)v67, "expected ");
      WORD1(v67[1]) = 0;
      HIDWORD(v67[1]) = -385875968;
      v66._uint64_t countAndFlagsBits = v9;
      v66._uint64_t object = v10;
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      uint64_t v39 = v65;
      goto LABEL_68;
    case 3:
      strcpy((char *)v67, "expected '");
      BYTE3(v67[1]) = 0;
      HIDWORD(v67[1]) = -369098752;
      String.append(_:)(v69);
      goto LABEL_49;
    case 4:
      swift_bridgeObjectRetain();
      return countAndFlagsBits;
    case 5:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      unint64_t v11 = "expected 2 branches in conditional, have ";
      unint64_t v12 = 0xD000000000000029;
      goto LABEL_39;
    case 6:
      Swift::UInt v13 = v69._object;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v67[0] = countAndFlagsBits;
      v67[1] = v13;
      unint64_t v3 = 0xD00000000000001CLL;
      Swift::UInt v14 = " cannot be used as condition";
      goto LABEL_45;
    case 7:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v15._uint64_t countAndFlagsBits = 0xD000000000000032;
      v15._uint64_t object = (void *)0x800000020D9DFB40;
      String.append(_:)(v15);
      goto LABEL_40;
    case 8:
      uint64_t v16 = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v17._uint64_t countAndFlagsBits = 0xD000000000000011;
      v17._uint64_t object = (void *)0x800000020D9DFAF0;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = countAndFlagsBits;
      v18._uint64_t object = v16;
      String.append(_:)(v18);
      unint64_t v3 = 0xD00000000000002BLL;
      Swift::UInt v14 = "' may only appear at the start of the regex";
      goto LABEL_45;
    case 9:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      unint64_t v19 = 0xD000000000000014;
      uint64_t v20 = "expected ASCII for '";
      goto LABEL_22;
    case 10:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      unint64_t v19 = 0xD00000000000001ALL;
      uint64_t v20 = "invalid escape sequence '\\"";
      goto LABEL_22;
    case 11:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v21._uint64_t countAndFlagsBits = 39;
      v21._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      Character.write<A>(to:)();
      unint64_t v3 = 0xD00000000000003ALL;
      Swift::UInt v14 = "' is confusable for a metacharacter; use '\\u{...}' instead";
      goto LABEL_45;
    case 12:
      unint64_t v22 = v69._object;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      strcpy((char *)v67, "quantifier '");
      BYTE5(v67[1]) = 0;
      HIWORD(v67[1]) = -5120;
      v23._uint64_t countAndFlagsBits = countAndFlagsBits;
      v23._uint64_t object = v22;
      String.append(_:)(v23);
      unint64_t v3 = 0xD00000000000001ELL;
      Swift::UInt v14 = "' must appear after expression";
      goto LABEL_45;
    case 13:
      unint64_t v24 = v69._object;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      v67[0] = 0xD000000000000018;
      v67[1] = 0x800000020D9DFBD0;
      v25._uint64_t countAndFlagsBits = countAndFlagsBits;
      v25._uint64_t object = v24;
      String.append(_:)(v25);
      unint64_t v3 = 0xD000000000000013;
      Swift::UInt v14 = "' must include name";
      goto LABEL_45;
    case 14:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000015;
      unint64_t v27 = "unknown group kind '(";
      goto LABEL_42;
    case 15:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000016;
      unint64_t v27 = "unknown callout kind '";
      goto LABEL_42;
    case 16:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v28._uint64_t object = (void *)0x800000020D9DFA70;
      v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v28);
      Character.write<A>(to:)();
      unint64_t v3 = 0xD000000000000016;
      Swift::UInt v14 = "'; expected 'w' or 'g'";
      goto LABEL_45;
    case 17:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      unint64_t v19 = 0xD000000000000019;
      uint64_t v20 = "invalid matching option '";
LABEL_22:
      unint64_t v29 = (unint64_t)(v20 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v19);
      goto LABEL_48;
    case 18:
      int64_t v31 = v69._object;
      uint64_t v30 = v70;
      unint64_t v32 = (void *)v71;
      if (v69._object)
      {
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        v67[0] = 0xD00000000000001CLL;
        v67[1] = 0x800000020D9DF910;
        v33._uint64_t countAndFlagsBits = countAndFlagsBits;
        v33._uint64_t object = v31;
        String.append(_:)(v33);
        v34._uint64_t countAndFlagsBits = 61;
        v34._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v34);
      }
      else
      {
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        v67[0] = 0xD00000000000001CLL;
        v67[1] = 0x800000020D9DF910;
      }
      v61._uint64_t countAndFlagsBits = v30;
      v61._uint64_t object = v32;
      String.append(_:)(v61);
      goto LABEL_49;
    case 19:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000015;
      unint64_t v27 = "unrecognized script '";
      goto LABEL_42;
    case 20:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000017;
      unint64_t v27 = "unrecognized category '";
      goto LABEL_42;
    case 21:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000014;
      unint64_t v27 = "unrecognized block '";
      goto LABEL_42;
    case 22:
      unint64_t v35 = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v36._uint64_t countAndFlagsBits = 0xD000000000000018;
      v36._uint64_t object = (void *)0x800000020D9DF690;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = countAndFlagsBits;
      v37._uint64_t object = v35;
      String.append(_:)(v37);
      unint64_t v3 = 0xD00000000000001FLL;
      Swift::UInt v14 = "' - use '3.0' or 'V3_0' formats";
      goto LABEL_45;
    case 23:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000017;
      unint64_t v27 = "invalid numeric value '";
      goto LABEL_42;
    case 24:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD00000000000001BLL;
      unint64_t v27 = "unrecognized numeric type '";
      goto LABEL_42;
    case 25:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000023;
      unint64_t v27 = "invalid canonical combining class '";
      goto LABEL_42;
    case 26:
      strcpy((char *)v67, "expected ");
      WORD1(v67[1]) = 0;
      HIDWORD(v67[1]) = -385875968;
      uint64_t v38 = 8 * SLOBYTE(v69._countAndFlagsBits);
      uint64_t v39 = *(void *)&aGroupNacallout[v38];
      unint64_t v40 = *(void *)&aGroupNacallout[v38 + 24];
LABEL_68:
      unint64_t v49 = v40;
      goto LABEL_69;
    case 27:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      uint64_t v41 = 8 * (char)countAndFlagsBits;
      v42._uint64_t countAndFlagsBits = *(void *)&aGroupNacallout[v41];
      v42._uint64_t object = *(void **)&aGroupNacallout[v41 + 24];
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      unint64_t v3 = 0xD00000000000002ALL;
      Swift::UInt v14 = " must only contain alphanumeric characters";
      goto LABEL_45;
    case 28:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      uint64_t v43 = 8 * (char)countAndFlagsBits;
      v44._uint64_t countAndFlagsBits = *(void *)&aGroupNacallout[v43];
      v44._uint64_t object = *(void **)&aGroupNacallout[v43 + 24];
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      uint64_t v45 = " must not start with number";
      goto LABEL_36;
    case 29:
      unint64_t v46 = v69._object;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v67[0] = countAndFlagsBits;
      v67[1] = v46;
      uint64_t v45 = " is not currently supported";
LABEL_36:
      unint64_t v4 = (unint64_t)(v45 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD00000000000001BLL;
      goto LABEL_50;
    case 30:
      uint64_t v47 = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v48._uint64_t countAndFlagsBits = countAndFlagsBits;
      v48._uint64_t object = v47;
      String.append(_:)(v48);
      unint64_t v3 = 0xD000000000000037;
      Swift::UInt v14 = " is a deprecated Unicode property, and is not supported";
      goto LABEL_45;
    case 31:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v11 = "no capture numbered ";
      unint64_t v12 = 0xD000000000000014;
LABEL_39:
      v67[0] = v12;
      v67[1] = (unint64_t)(v11 - 32) | 0x8000000000000000;
LABEL_40:
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_69:
      String.append(_:)(*(Swift::String *)&v39);
      swift_bridgeObjectRelease();
      return v67[0];
    case 32:
      uint64_t object = v69._object;
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000012;
      unint64_t v27 = "no capture named '";
LABEL_42:
      v67[0] = v26;
      v67[1] = (unint64_t)(v27 - 32) | 0x8000000000000000;
LABEL_43:
      v50._uint64_t countAndFlagsBits = countAndFlagsBits;
      v50._uint64_t object = object;
      String.append(_:)(v50);
      goto LABEL_49;
    case 33:
      unint64_t v51 = v69._object;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      strcpy((char *)v67, "group named '");
      HIWORD(v67[1]) = -4864;
      v52._uint64_t countAndFlagsBits = countAndFlagsBits;
      v52._uint64_t object = v51;
      String.append(_:)(v52);
      unint64_t v3 = 0xD000000000000010;
      Swift::UInt v14 = "' already exists";
LABEL_45:
      unint64_t v4 = (unint64_t)(v14 - 32) | 0x8000000000000000;
      goto LABEL_50;
    case 34:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v53._uint64_t countAndFlagsBits = 0xD000000000000013;
      v53._uint64_t object = (void *)0x800000020D9DF530;
      String.append(_:)(v53);
      v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v55._uint64_t object = (void *)0x800000020D9DF550;
      String.append(_:)(v55);
      v56._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      goto LABEL_49;
    case 35:
      v67[0] = 0;
      v67[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v57._uint64_t countAndFlagsBits = 0x6574636172616863;
      v57._uint64_t object = (void *)0xEB00000000272072;
      String.append(_:)(v57);
      Character.write<A>(to:)();
      v58._uint64_t countAndFlagsBits = 0xD000000000000026;
      v58._uint64_t object = (void *)0x800000020D9DF500;
      String.append(_:)(v58);
LABEL_48:
      Character.write<A>(to:)();
LABEL_49:
      unint64_t v3 = 39;
      unint64_t v4 = 0xE100000000000000;
      goto LABEL_50;
    case 36:
      if (!(v70 | v71 | v69._countAndFlagsBits | (uint64_t)v69._object)) {
        return 0xD000000000000017;
      }
      uint64_t v60 = v70 | v71 | (unint64_t)v69._object;
      if (v69._countAndFlagsBits == 1 && !v60) {
        return 0xD00000000000001BLL;
      }
      if (v69._countAndFlagsBits == 2 && !v60) {
        return 0xD000000000000018;
      }
      if (v69._countAndFlagsBits == 3 && !v60) {
        return 0xD000000000000041;
      }
      if (v69._countAndFlagsBits == 4 && !v60) {
        return 0xD000000000000053;
      }
      if (v69._countAndFlagsBits == 5 && !v60) {
        return 0xD000000000000022;
      }
      if (v69._countAndFlagsBits == 6 && !v60) {
        return 0xD000000000000031;
      }
      if (v69._countAndFlagsBits == 7 && !v60) {
        return 0xD000000000000027;
      }
      if (v69._countAndFlagsBits == 8 && !v60) {
        return 0xD000000000000016;
      }
      if (v69._countAndFlagsBits == 9 && !v60) {
        return 0xD000000000000018;
      }
      if (v69._countAndFlagsBits == 10 && !v60) {
        return 0xD000000000000030;
      }
      if (v69._countAndFlagsBits == 11 && !v60) {
        return 0xD00000000000002FLL;
      }
      if (v69._countAndFlagsBits == 12 && !v60) {
        return 0xD00000000000002CLL;
      }
      if (v69._countAndFlagsBits == 13 && !v60) {
        return 0xD000000000000036;
      }
      if (v69._countAndFlagsBits == 14 && !v60) {
        return 0xD00000000000004BLL;
      }
      if (v69._countAndFlagsBits == 15 && !v60) {
        return 0xD00000000000001CLL;
      }
      if (v69._countAndFlagsBits == 16 && !v60) {
        return 0xD000000000000027;
      }
      if (v69._countAndFlagsBits == 17 && v60 == 0) {
        return 0xD000000000000035;
      }
      return 0xD00000000000001ELL;
    default:
      Swift::UInt v2 = v69._object;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v67[0] = 0xD000000000000011;
      v67[1] = 0x800000020D9DFDF0;
      unint64_t v3 = countAndFlagsBits;
      unint64_t v4 = (unint64_t)v2;
LABEL_50:
      String.append(_:)(*(Swift::String *)&v3);
      return v67[0];
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParseError()
{
  outlined init with take of ParseError(v0, (uint64_t)v2);
  return ParseError.description.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FatalParseError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FatalParseError()
{
  Hasher._combine(_:)(0);

  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FatalParseError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FatalParseError(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FatalParseError()
{
  Swift::String v1 = *v0;
  strcpy((char *)v3, "UNREACHABLE: ");
  String.append(_:)(v1);
  return v3[0];
}

void Diagnostic.behavior.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Diagnostic.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 Diagnostic.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL Diagnostic.isAnyError.getter()
{
  return *v0 < 2u;
}

BOOL Diagnostic.Behavior.isAnyError.getter()
{
  return *v0 < 2u;
}

void Diagnostic.hash(into:)()
{
  unint64_t v2 = *((void *)v0 + 3);
  unint64_t v1 = *((void *)v0 + 4);
  int v3 = v0[72];
  Hasher._combine(_:)(*v0);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
}

BOOL static Diagnostic.Behavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Diagnostic.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v3 = *((void *)v0 + 3);
  unint64_t v2 = *((void *)v0 + 4);
  int v4 = v0[72];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Diagnostic()
{
  unint64_t v2 = *((void *)v0 + 3);
  unint64_t v1 = *((void *)v0 + 4);
  int v3 = v0[72];
  Hasher._combine(_:)(*v0);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Diagnostic()
{
  Swift::UInt v1 = *v0;
  unint64_t v3 = *((void *)v0 + 3);
  unint64_t v2 = *((void *)v0 + 4);
  int v4 = v0[72];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
  return Hasher._finalize()();
}

void Diagnostic.Behavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Diagnostic.Behavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_RegexParser::Diagnostics __swiftcall Diagnostics.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t Diagnostics.append(_:)(char *a1)
{
  char v16 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v15 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v13 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v6 = *((void *)a1 + 8);
  unsigned __int8 v7 = a1[72];
  uint64_t v8 = *v1;
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v3, v4, v5, v6, v7);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
    uint64_t v8 = result;
  }
  unint64_t v11 = *(void *)(v8 + 16);
  unint64_t v10 = *(void *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v8);
    uint64_t v8 = result;
  }
  *(void *)(v8 + 16) = v11 + 1;
  unint64_t v12 = v8 + 80 * v11;
  *(unsigned char *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v15;
  *(void *)(v12 + 48) = v2;
  *(void *)(v12 + 56) = v14;
  *(void *)(v12 + 64) = v13;
  *(void *)(v12 + 72) = v3;
  *(void *)(v12 + 80) = v4;
  *(void *)(v12 + 88) = v5;
  *(void *)(v12 + 96) = v6;
  *(unsigned char *)(v12 + 104) = v7;
  uint64_t *v1 = v8;
  return result;
}

Swift::Void __swiftcall Diagnostics.append(contentsOf:)(_RegexParser::Diagnostics contentsOf)
{
  uint64_t v1 = swift_bridgeObjectRetain();

  specialized Array.append<A>(contentsOf:)(v1);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Diagnostics.appendNewFatalErrors(from:)(_RegexParser::Diagnostics from)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = specialized Collection.dropFirst(_:)(*((void *)v3 + 2), *(void *)from.diags._rawValue);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  int64_t v10 = v9 >> 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v11 = v6 - 32;
  uint64_t v12 = v8;
  uint64_t v13 = v8;
LABEL_2:
  uint64_t v14 = v11 + 80 * v12;
  while (1)
  {
    if (v10 == v13)
    {
      swift_unknownObjectRelease_n();
      return;
    }
    if (v12 < v8 || v13 >= v10) {
      break;
    }
    int v15 = *(unsigned __int8 *)(v14 + 32);
    ++v13;
    v14 += 80;
    if (!v15)
    {
      uint64_t v35 = v4;
      uint64_t v30 = *(void *)(v14 - 24);
      uint64_t v31 = *(void *)(v14 - 40);
      uint64_t v16 = *(void *)(v14 - 8);
      Swift::String v28 = v2;
      uint64_t v29 = *(void *)(v14 - 16);
      uint64_t v17 = *(void *)v14;
      uint64_t v18 = *(void *)(v14 + 8);
      uint64_t v19 = *(void *)(v14 + 16);
      uint64_t v20 = v3;
      unsigned __int8 v21 = *(unsigned char *)(v14 + 24);
      uint64_t v34 = *(void *)(v14 - 32);
      swift_bridgeObjectRetain();
      uint64_t v33 = v16;
      uint64_t v22 = v16;
      uint64_t v23 = v17;
      unsigned __int8 v32 = v21;
      unsigned __int8 v24 = v21;
      uint64_t v3 = v20;
      outlined copy of ParseError?(v22, v17, v18, v19, v24);
      uint64_t v2 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
      }
      unint64_t v26 = *((void *)v3 + 2);
      unint64_t v25 = *((void *)v3 + 3);
      if (v26 >= v25 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v26 + 1;
      unint64_t v27 = &v3[80 * v26];
      v27[32] = 0;
      *((void *)v27 + 5) = v31;
      *((void *)v27 + 6) = v34;
      *((void *)v27 + 7) = v30;
      *((void *)v27 + 8) = v29;
      *((void *)v27 + 9) = v33;
      *((void *)v27 + 10) = v23;
      *((void *)v27 + 11) = v18;
      *((void *)v27 + 12) = v19;
      v27[104] = v32;
      *Swift::String v28 = v3;
      uint64_t v12 = v13;
      uint64_t v4 = v35;
      goto LABEL_2;
    }
  }
  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(unsigned char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (_OWORD *)(a3 + 40);
    do
    {
      uint64_t v8 = v6;
      v10[0] = *((unsigned char *)v7 - 8);
      long long v11 = *v7;
      LOBYTE(v4) = (v3 != 0) | a1(v10);
      if (v4) {
        break;
      }
      uint64_t v6 = v8 - 1;
      uint64_t v7 = (_OWORD *)((char *)v7 + 24);
    }
    while (v8);
  }
  return v4 & 1;
}

unint64_t specialized Sequence.contains(where:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = a1;
  while (1)
  {
    unint64_t v12 = v11 ^ a2;
    if ((v11 ^ a2) < 0x4000)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      return (v12 & 0xFFFFFFFFFFFFC000) != 0;
    }
    _StringGuts.validateScalarIndex(_:in:)(v11, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v21 = a3;
        uint64_t v22 = v23;
      }
      else if ((a3 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      unint64_t result = _decodeScalar(_:startingAt:)();
    }
    int v14 = result;
    if (v11 & 0xC) != v9 && (v11) {
      break;
    }
    if ((v11 & 0xC) == v9)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
      unint64_t v11 = result;
      if (v10 <= result >> 16) {
        goto LABEL_38;
      }
    }
    else if (v10 <= v11 >> 16)
    {
      goto LABEL_38;
    }
    if (v11) {
      goto LABEL_21;
    }
    unint64_t v11 = v11 & 0xC | _StringGuts.scalarAlignSlow(_:)(v11, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) != 0)
    {
LABEL_35:
      unint64_t v11 = String.UnicodeScalarView._foreignIndex(after:)();
      if (v14 == 10) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_22:
    unint64_t v15 = v11 >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v21 = a3;
      uint64_t v22 = v23;
      int v17 = *((unsigned __int8 *)&v21 + v15);
    }
    else
    {
      uint64_t v16 = v20;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v16 = _StringObject.sharedUTF8.getter();
      }
      int v17 = *(unsigned __int8 *)(v16 + v15);
    }
    int v18 = (char)v17;
    unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
    if (v18 >= 0) {
      LOBYTE(v19) = 1;
    }
    unint64_t v11 = ((v15 + v19) << 16) | 5;
    if (v14 == 10) {
      goto LABEL_37;
    }
LABEL_36:
    if (v14 == 13) {
      goto LABEL_37;
    }
  }
  if (v10 > v11 >> 16)
  {
LABEL_21:
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_22;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(a3 + 40);
    uint64_t v7 = v4 - 1;
    do
    {
      uint64_t v8 = *v6;
      v12[0] = *(v6 - 1);
      v12[1] = v8;
      swift_bridgeObjectRetain();
      int v9 = a1(v12);
      swift_bridgeObjectRelease();
      if (v3) {
        break;
      }
      v6 += 2;
      BOOL v10 = v7-- == 0;
    }
    while (((v9 | v10) & 1) == 0);
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

BOOL Diagnostics.hasFatalError.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)v0 + 32);
  uint64_t v2 = *(void *)(*(void *)v0 + 16) + 1;
  do
  {
    if (!--v2) {
      break;
    }
    int v3 = *v1;
    v1 += 80;
  }
  while (v3);
  return v2 != 0;
}

void Diagnostics.hash(into:)(uint64_t a1)
{
  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int Diagnostics.hashValue.getter()
{
  return AST.GlobalMatchingOptionSequence.hashValue.getter((void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int AST.GlobalMatchingOptionSequence.hashValue.getter(void (*a1)(unsigned char *, uint64_t))
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  a1(v5, v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Diagnostics(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(a1, a2, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Diagnostics(uint64_t a1)
{
  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Diagnostics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Diagnostics(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ErrorDiagnostic #1 in Diagnostics.throwAnyError()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Source.Located.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for Source.Located();
  uint64_t v8 = (void *)(a4 + *(int *)(result + 28));
  *uint64_t v8 = v5;
  v8[1] = v6;
  return result;
}

uint64_t specialized Parser.tryEating<A>(_:)@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v53 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v51 = *(void *)(a1 + 56);
  uint64_t v52 = *(void *)(a1 + 40);
  char v50 = *(unsigned char *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 123;
  v11._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v11)) {
    goto LABEL_9;
  }
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t result = specialized Parser.tryEating<A>(_:)((uint64_t *)a1, a2, &v59);
  unint64_t v14 = v63;
  if (v60 >> 1 == 0xFFFFFFFF && v63 < 2)
  {
    unint64_t v14 = 0;
    uint64_t v58 = 0;
    uint64_t v56 = 0;
    long long v57 = 0u;
    uint64_t v15 = 0x1FFFFFFFELL;
    long long v55 = 0u;
  }
  else
  {
    if (*(void *)(a1 + 16) >> 14 < v12 >> 14)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    long long v55 = v64;
    uint64_t v58 = v62;
    long long v57 = v61;
    uint64_t v56 = v59;
    uint64_t v15 = v60;
    if (v63 > 1) {
      goto LABEL_8;
    }
  }
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
LABEL_9:
    uint64_t v58 = 0;
    unint64_t v14 = 0;
    uint64_t v56 = 0;
    long long v57 = 0u;
    uint64_t v15 = 0x1FFFFFFFELL;
    long long v55 = 0u;
    goto LABEL_10;
  }
LABEL_8:
  v16._uint64_t countAndFlagsBits = 125;
  v16._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v16)) {
    goto LABEL_9;
  }
LABEL_10:
  if (v14 <= 1 && (v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
    uint64_t v46 = v15;
    uint64_t v47 = v8;
    uint64_t v48 = v7;
    unint64_t v49 = v14;
    uint64_t v17 = *(void *)(a1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v10 + 16), v17);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    int64_t v23 = v22 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v24 = v19 - 32;
    uint64_t v25 = v21;
    uint64_t v26 = v21;
LABEL_13:
    uint64_t v27 = v24 + 80 * v25;
    unint64_t v14 = v49;
    while (1)
    {
      if (v23 == v26)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v5;
        uint64_t v15 = v46;
        *(void *)(a1 + 16) = v48;
        *(void *)(a1 + 24) = v47;
        *(unsigned char *)(a1 + 32) = v53;
        *(void *)(a1 + 40) = v52;
        *(void *)(a1 + 48) = v9;
        *(void *)(a1 + 56) = v51;
        *(unsigned char *)(a1 + 64) = v50;
        *(void *)(a1 + 72) = v10;
        goto LABEL_25;
      }
      if (v25 < v21 || v26 >= v23) {
        break;
      }
      int v28 = *(unsigned __int8 *)(v27 + 32);
      ++v26;
      v27 += 80;
      if (!v28)
      {
        uint64_t v44 = v5;
        uint64_t v45 = v24;
        uint64_t v42 = v6;
        uint64_t v43 = v9;
        uint64_t v39 = *(void *)(v27 - 24);
        uint64_t v40 = *(void *)(v27 - 40);
        uint64_t v29 = *(void *)(v27 - 8);
        uint64_t v37 = *(void *)(v27 - 32);
        uint64_t v38 = *(void *)(v27 - 16);
        uint64_t v30 = *(void *)v27;
        uint64_t v31 = *(void *)(v27 + 8);
        uint64_t v32 = *(void *)(v27 + 16);
        unsigned __int8 v33 = *(unsigned char *)(v27 + 24);
        swift_bridgeObjectRetain();
        uint64_t v41 = v29;
        outlined copy of ParseError?(v29, v30, v31, v32, v33);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
          uint64_t v10 = result;
        }
        unint64_t v35 = *(void *)(v10 + 16);
        unint64_t v34 = *(void *)(v10 + 24);
        uint64_t v24 = v45;
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v10);
          uint64_t v24 = v45;
          uint64_t v10 = result;
        }
        *(void *)(v10 + 16) = v35 + 1;
        unint64_t v36 = v10 + 80 * v35;
        *(unsigned char *)(v36 + 32) = 0;
        *(void *)(v36 + 40) = v40;
        *(void *)(v36 + 48) = v37;
        *(void *)(v36 + 56) = v39;
        *(void *)(v36 + 64) = v38;
        *(void *)(v36 + 72) = v41;
        *(void *)(v36 + 80) = v30;
        *(void *)(v36 + 88) = v31;
        *(void *)(v36 + 96) = v32;
        *(unsigned char *)(v36 + 104) = v33;
        uint64_t v25 = v26;
        uint64_t v9 = v43;
        uint64_t v5 = v44;
        uint64_t v6 = v42;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_25:
  *(void *)a3 = v56;
  *(void *)(a3 + 8) = v15;
  *(_OWORD *)(a3 + 16) = v57;
  *(void *)(a3 + 32) = v58;
  *(void *)(a3 + 40) = v14;
  *(_OWORD *)(a3 + 48) = v55;
  return result;
}

uint64_t specialized Parser.tryEating<A>(_:)@<X0>(uint64_t *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v89 = a1[2];
  uint64_t v90 = *a1;
  uint64_t v88 = a1[3];
  char v87 = *((unsigned char *)a1 + 32);
  uint64_t v5 = a1[6];
  uint64_t v85 = a1[7];
  uint64_t v86 = a1[5];
  char v84 = *((unsigned char *)a1 + 64);
  uint64_t v6 = (char *)a1[9];
  uint64_t v92 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v91 = v5;
  swift_bridgeObjectRetain();
  BOOL v94 = v6;
  swift_bridgeObjectRetain();
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v98);
  uint64_t v7 = v99;
  if (!v99) {
    goto LABEL_6;
  }
  uint64_t v8 = v98;
  long long v83 = v100;
  uint64_t v9 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_68;
  }
  while (1)
  {
    unint64_t v12 = *((void *)v9 + 2);
    unint64_t v11 = *((void *)v9 + 3);
    if (v12 >= v11 >> 1)
    {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a2 = v9;
    }
    *((void *)v9 + 2) = v12 + 1;
    uint64_t v13 = &v9[32 * v12];
    *((void *)v13 + 4) = v8;
    *((void *)v13 + 5) = v7;
    *((_OWORD *)v13 + 3) = v83;
LABEL_6:
    Parser.lexNumber(_:)(1, (uint64_t)&v98);
    uint64_t v78 = v98;
    uint64_t v14 = v100;
    *(void *)&long long v83 = v99;
    uint64_t v15 = *((void *)&v100 + 1);
    char v16 = v101;
    specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v98);
    uint64_t v17 = v99;
    if (v99)
    {
      uint64_t v18 = v98;
      long long v75 = v100;
      uint64_t v19 = *a2;
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v19;
      if ((v20 & 1) == 0)
      {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v19;
      }
      unint64_t v22 = *((void *)v19 + 2);
      unint64_t v21 = *((void *)v19 + 3);
      if (v22 >= v21 >> 1)
      {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v19;
      }
      *((void *)v19 + 2) = v22 + 1;
      int64_t v23 = &v19[32 * v22];
      *((void *)v23 + 4) = v18;
      *((void *)v23 + 5) = v17;
      *((_OWORD *)v23 + 3) = v75;
    }
    v24._uint64_t countAndFlagsBits = 44;
    v24._uint64_t object = (void *)0xE100000000000000;
    uint64_t v79 = v15;
    uint64_t v81 = v14;
    if (Parser.tryEat(_:)(v24))
    {
LABEL_13:
      int v25 = 0;
      int v26 = 1;
      goto LABEL_23;
    }
    if ((a1[7] & 0x10) != 0
      && (v27._uint64_t countAndFlagsBits = 46, v27._object = (void *)0xE100000000000000, Parser.tryEat(_:)(v27)))
    {
      v28._uint64_t countAndFlagsBits = 46;
      v28._uint64_t object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v28))
      {
        long long v106 = xmmword_20D9D74A0;
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        char v109 = 3;
        Parser.errorAtCurrentPosition(_:)(&v106);
      }
      v29._uint64_t countAndFlagsBits = 46;
      v29._uint64_t object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v29)) {
        goto LABEL_13;
      }
      v30._uint64_t countAndFlagsBits = 60;
      v30._uint64_t object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v30))
      {
        long long v102 = xmmword_20D9D74B0;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        char v105 = 3;
        Parser.errorAtCurrentPosition(_:)(&v102);
      }
      int v25 = 0;
      int v26 = 0;
    }
    else
    {
      int v26 = 0;
      int v25 = 1;
    }
LABEL_23:
    specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v98);
    uint64_t v31 = v99;
    if (v99)
    {
      uint64_t v32 = v98;
      long long v76 = v100;
      unsigned __int8 v33 = *a2;
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v33;
      if ((v34 & 1) == 0)
      {
        unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v33;
      }
      unint64_t v36 = *((void *)v33 + 2);
      unint64_t v35 = *((void *)v33 + 3);
      if (v36 >= v35 >> 1)
      {
        unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v33;
      }
      *((void *)v33 + 2) = v36 + 1;
      uint64_t v37 = &v33[32 * v36];
      *((void *)v37 + 4) = v32;
      *((void *)v37 + 5) = v31;
      *((_OWORD *)v37 + 3) = v76;
    }
    uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v98);
    if (((v25 | v26) & 1) == 0 && (v101 & 1) == 0 && (v99 & 1) == 0) {
      break;
    }
LABEL_34:
    specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v95);
    uint64_t v8 = v96;
    if (v96)
    {
      uint64_t v39 = v95;
      long long v77 = v97;
      uint64_t v40 = *a2;
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v40;
      if ((v41 & 1) == 0)
      {
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v40 + 2) + 1, 1, v40, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v40;
      }
      unint64_t v43 = *((void *)v40 + 2);
      unint64_t v42 = *((void *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v40, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v40;
      }
      *((void *)v40 + 2) = v43 + 1;
      uint64_t v44 = &v40[32 * v43];
      *((void *)v44 + 4) = v39;
      *((void *)v44 + 5) = v8;
      *((_OWORD *)v44 + 3) = v77;
    }
    uint64_t v45 = *((void *)&v100 + 1);
    uint64_t v46 = v100;
    if (v16)
    {
      if (v25)
      {
        if ((v101 & 1) == 0)
        {
          v47._uint64_t object = (void *)0x800000020D9E01E0;
          v47._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
          Parser.unreachable(_:)(v47);
        }
      }
      else if ((v101 & 1) == 0)
      {
        uint64_t v50 = 0;
        uint64_t v48 = v99 & 1;
        uint64_t v49 = 0x4000000000000000;
        uint64_t v52 = *((void *)&v100 + 1);
        uint64_t v51 = v100;
        uint64_t v53 = v98;
        uint64_t v46 = 0;
        uint64_t v45 = 0;
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v48 = v83 & 1;
      if (v101)
      {
        if (v25)
        {
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          goto LABEL_53;
        }
        if (v26)
        {
          uint64_t v50 = 0;
          uint64_t v46 = 0;
          uint64_t v45 = 0;
          uint64_t v49 = 0x2000000000000000;
LABEL_53:
          uint64_t v52 = v79;
          uint64_t v51 = v81;
          uint64_t v53 = v78;
LABEL_54:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          *a3 = v53;
          a3[1] = v48;
          a3[2] = v51;
          a3[3] = v52;
          a3[4] = v50;
          a3[5] = v49;
          a3[6] = v46;
          a3[7] = v45;
          return result;
        }
      }
      else if ((v25 & 1) == 0)
      {
        uint64_t v49 = v99 & 1 | 0x6000000000000000;
        uint64_t v50 = v98;
        goto LABEL_53;
      }
    }
    uint64_t v54 = a1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = specialized Collection.dropFirst(_:)(*((void *)v94 + 2), v54);
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    a2 = (char **)(v59 >> 1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v60 = v56 - 32;
    long long v61 = v58;
    uint64_t v9 = v58;
LABEL_56:
    uint64_t v62 = v60 + 80 * (void)v61;
    while (1)
    {
      if (a2 == (char **)v9)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *a1 = v90;
        a1[1] = v92;
        a1[2] = v89;
        a1[3] = v88;
        *((unsigned char *)a1 + 32) = v87;
        a1[5] = v86;
        a1[6] = v91;
        a1[7] = v85;
        *((unsigned char *)a1 + 64) = v84;
        a1[9] = (uint64_t)v94;
        *(_OWORD *)a3 = xmmword_20D9D74C0;
        a3[2] = 0;
        a3[3] = 0;
        *((_OWORD *)a3 + 2) = 0u;
        *((_OWORD *)a3 + 3) = 0u;
        return result;
      }
      if ((uint64_t)v61 < (uint64_t)v58 || (uint64_t)v9 >= (uint64_t)a2) {
        break;
      }
      int v63 = *(unsigned __int8 *)(v62 + 32);
      ++v9;
      v62 += 80;
      if (!v63)
      {
        uint64_t v80 = v60;
        uint64_t v82 = v7;
        uint64_t v72 = *(void *)(v62 - 24);
        uint64_t v73 = *(void *)(v62 - 40);
        uint64_t v64 = *(void *)(v62 - 8);
        uint64_t v71 = *(void *)(v62 - 16);
        uint64_t v65 = *(void *)v62;
        uint64_t v8 = *(void *)(v62 + 8);
        uint64_t v66 = *(void *)(v62 + 16);
        unsigned __int8 v67 = *(unsigned char *)(v62 + 24);
        uint64_t v74 = *(void *)(v62 - 32);
        swift_bridgeObjectRetain();
        outlined copy of ParseError?(v64, v65, v8, v66, v67);
        *(void *)&long long v83 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v94 + 2) + 1, 1, v94);
        }
        unint64_t v69 = *((void *)v94 + 2);
        unint64_t v68 = *((void *)v94 + 3);
        if (v69 >= v68 >> 1) {
          BOOL v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v94);
        }
        *((void *)v94 + 2) = v69 + 1;
        uint64_t v70 = &v94[80 * v69];
        v70[32] = 0;
        *((void *)v70 + 5) = v73;
        *((void *)v70 + 6) = v74;
        *((void *)v70 + 7) = v72;
        *((void *)v70 + 8) = v71;
        uint64_t v60 = v80;
        *((void *)v70 + 9) = v64;
        *((void *)v70 + 10) = v65;
        *((void *)v70 + 11) = v8;
        *((void *)v70 + 12) = v66;
        v70[104] = v67;
        long long v61 = v9;
        uint64_t v7 = v82;
        uint64_t v54 = v83;
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_68:
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
    *a2 = v9;
  }
  if (!__OFSUB__(v98, 1))
  {
    --v98;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t Parser.errorAtCurrentPosition(_:)(long long *a1)
{
  uint64_t v2 = v1;
  outlined init with take of ParseError(a1, (uint64_t)v18);
  uint64_t v4 = v18[2];
  uint64_t v16 = v18[1];
  uint64_t v17 = v18[0];
  uint64_t v5 = v18[3];
  char v6 = v19;
  uint64_t v7 = *(void *)(v1 + 16);
  unint64_t v8 = ParseError.description.getter();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v1 + 72);
  outlined retain of ParseError((uint64_t)a1);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
    uint64_t v11 = result;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v11);
    uint64_t v11 = result;
  }
  *(void *)(v11 + 16) = v14 + 1;
  unint64_t v15 = v11 + 80 * v14;
  *(unsigned char *)(v15 + 32) = 1;
  *(void *)(v15 + 40) = v8;
  *(void *)(v15 + 48) = v10;
  *(void *)(v15 + 56) = v7;
  *(void *)(v15 + 64) = v7;
  *(void *)(v15 + 72) = v17;
  *(void *)(v15 + 80) = v16;
  *(void *)(v15 + 88) = v4;
  *(void *)(v15 + 96) = v5;
  *(unsigned char *)(v15 + 104) = v6;
  *(void *)(v2 + 72) = v11;
  return result;
}

Swift::Bool __swiftcall Parser.tryEat(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = String.subscript.getter();
  if ((v3 ^ v4) >> 14)
  {
    uint64_t v6 = Substring.subscript.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v6 == countAndFlagsBits && v8 == object)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      Swift::Bool v5 = 0;
      if ((v9 & 1) == 0) {
        return v5;
      }
    }
    Swift::Bool v5 = 1;
    Parser.advance(_:)(1);
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Parser.tryEat<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v26 = v5;
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  char v10 = specialized Sequence<>.starts<A>(with:)(a1, a2, v7, v9);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return v10 & 1;
  }
  unint64_t v11 = v6;
  if (String.count.getter() >= 1)
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v12 = Substring.index(_:offsetBy:limitedBy:)();
    char v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (v6 >> 14 >= v12 >> 14)
      {
LABEL_13:
        v27[2] = v12;
        v27[3] = v11;
        return v10 & 1;
      }
      __break(1u);
    }
  }
  strcpy((char *)v28, "UNREACHABLE: ");
  HIWORD(v28[1]) = -4864;
  v15._uint64_t countAndFlagsBits = 0xD000000000000015;
  v15._uint64_t object = (void *)0x800000020D9E0190;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v28[0];
  uint64_t v17 = v28[1];
  uint64_t v18 = (char *)v27[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
  }
  unint64_t v20 = *((void *)v18 + 2);
  unint64_t v19 = *((void *)v18 + 3);
  if (v20 >= v19 >> 1) {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v18);
  }
  *((void *)v18 + 2) = v20 + 1;
  unint64_t v21 = &v18[80 * v20];
  v21[32] = 0;
  *((void *)v21 + 5) = v16;
  *((void *)v21 + 6) = v17;
  *((void *)v21 + 7) = v26;
  *((void *)v21 + 8) = v26;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  v21[104] = -1;
  v27[9] = v18;
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  if (v22 < 1) {
    return v10 & 1;
  }
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  unint64_t v12 = Substring.index(_:offsetBy:limitedBy:)();
  char v24 = v23;
  uint64_t result = swift_bridgeObjectRelease();
  if (v24) {
    return v10 & 1;
  }
  if (v11 >> 14 >= v12 >> 14) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Parser.tryEatNonEmpty<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)&long long v10 = String.init<A>(_:)();
  *((void *)&v10 + 1) = v4;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 3;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.subscript.getter();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 ^ v7) >= 0x4000)
  {
    swift_bridgeObjectRelease();
    char v8 = specialized Parser.tryEat<A>(sequence:)(a1, a2);
  }
  else
  {
    Parser.errorAtCurrentPosition(_:)(&v10);
    swift_bridgeObjectRelease();
    char v8 = 0;
  }
  return v8 & 1;
}

Swift::Void __swiftcall Parser.advance(_:)(Swift::Int a1)
{
  if (a1 >= 1)
  {
    unint64_t v2 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
    char v5 = v4;
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if (v2 >> 14 >= v3 >> 14)
      {
LABEL_8:
        *(void *)(v1 + 16) = v3;
        *(void *)(v1 + 24) = v2;
        return;
      }
      __break(1u);
    }
  }
  v6._uint64_t object = (void *)0x800000020D9E0190;
  v6._uint64_t countAndFlagsBits = 0xD000000000000015;
  Parser.unreachable(_:)(v6);
  unint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  if (v7 >= 1)
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
    char v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      if (v2 >> 14 < v3 >> 14)
      {
        __break(1u);
        return;
      }
      goto LABEL_8;
    }
  }
}

Swift::Void __swiftcall Parser.unreachable(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  strcpy((char *)v13, "UNREACHABLE: ");
  HIWORD(v13[1]) = -4864;
  v6._uint64_t countAndFlagsBits = countAndFlagsBits;
  v6._uint64_t object = object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v13[0];
  uint64_t v8 = v13[1];
  char v9 = *(char **)(v1 + 72);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  if (v11 >= v10 >> 1) {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
  }
  *((void *)v9 + 2) = v11 + 1;
  uint64_t v12 = &v9[80 * v11];
  v12[32] = 0;
  *((void *)v12 + 5) = v7;
  *((void *)v12 + 6) = v8;
  *((void *)v12 + 7) = v5;
  *((void *)v12 + 8) = v5;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  v12[104] = -1;
  *(void *)(v2 + 72) = v9;
}

Swift::Bool __swiftcall Source.tryAdvance(_:)(Swift::Int a1)
{
  if (a1 < 1) {
    return 0;
  }
  unint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
  char v5 = v4;
  Swift::Bool result = swift_bridgeObjectRelease();
  if (v5) {
    return 0;
  }
  if (v2 >> 14 < v3 >> 14)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 16) = v3;
    *(void *)(v1 + 24) = v2;
    return 1;
  }
  return result;
}

Swift::String_optional __swiftcall Parser.tryEat()()
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = String.subscript.getter();
  if ((v0 ^ v1) >> 14)
  {
    uint64_t v2 = Substring.subscript.getter();
    unint64_t v3 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    Parser.advance(_:)(1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v2 = 0;
    unint64_t v3 = 0;
  }
  uint64_t v5 = v2;
  Swift::String v6 = v3;
  result.value._uint64_t object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t specialized Parser.tryEat<A>(anyOf:)(uint64_t a1)
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = String.subscript.getter();
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = Substring.subscript.getter();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v7 = swift_bridgeObjectRelease();
  v11[0] = v4;
  v11[1] = v6;
  MEMORY[0x270FA5388](v7, v8);
  v10[2] = v11;
  if ((specialized Sequence.contains(where:)(partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v10, a1) & 1) == 0)goto LABEL_5; {
  Parser.advance(_:)(1);
  }
  return v4;
}

uint64_t Parser.eat(upToCount:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  unint64_t v27 = v6;
  unint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v11) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = result;
  }
  if (v12 >> 14 < v7 >> 14) {
    goto LABEL_13;
  }
  Swift::String v28 = a2;
  uint64_t v13 = Substring.subscript.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  unint64_t v20 = v5;
  if (Substring.distance(from:to:)() < 1
    || (swift_bridgeObjectRetain(),
        String.subscript.getter(),
        swift_bridgeObjectRelease(),
        unint64_t v21 = Substring.index(_:offsetBy:limitedBy:)(),
        char v23 = v22,
        uint64_t result = swift_bridgeObjectRelease(),
        unint64_t v20 = v5,
        (v23 & 1) != 0))
  {
LABEL_10:
    uint64_t v24 = MEMORY[0x210561700](v13, v15, v17, v19);
    uint64_t v26 = v25;
    uint64_t result = swift_bridgeObjectRelease();
    if (v20 >> 14 >= v5 >> 14)
    {
      *Swift::String v28 = v24;
      v28[1] = v26;
      void v28[2] = v5;
      v28[3] = v20;
      return result;
    }
    goto LABEL_14;
  }
  if (v27 >> 14 >= v21 >> 14)
  {
    *(void *)(v2 + 16) = v21;
    *(void *)(v2 + 24) = v27;
    unint64_t v20 = v21;
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Parser.tryEatPrefix(maxLength:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, void, void *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = a3[1];
  unint64_t v9 = a3[2];
  unint64_t v8 = a3[3];
  v25[0] = *a3;
  v25[1] = v7;
  v25[2] = v9;
  v25[3] = v8;
  uint64_t result = a4(a1, a2 & 1, v25);
  if (v13)
  {
    uint64_t v14 = v11;
    uint64_t v15 = v13;
    uint64_t v23 = v12;
    uint64_t v24 = result;
    unint64_t v16 = v9;
    if (Substring.distance(from:to:)() > 0)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v17 = Substring.index(_:offsetBy:limitedBy:)();
      char v19 = v18;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v16 = v9;
      if ((v19 & 1) == 0)
      {
        if (v8 >> 14 < v17 >> 14)
        {
LABEL_11:
          __break(1u);
          return result;
        }
        a3[2] = v17;
        a3[3] = v8;
        unint64_t v16 = v17;
      }
    }
    uint64_t v20 = MEMORY[0x210561700](v24, v14, v23, v15);
    uint64_t v22 = v21;
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 >> 14 >= v9 >> 14)
    {
      *a5 = v20;
      a5[1] = v22;
      a5[2] = v9;
      a5[3] = v16;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  return result;
}

uint64_t Parser.tryEatPrefix(maxLength:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  char v9 = a2 & 1;
  unint64_t v10 = *(void *)(v4 + 16);
  unint64_t v27 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  unint64_t v11 = Source.peekPrefix(maxLength:_:)(a1, v9, a3);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t result = swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v26 = a4;
    unint64_t v19 = v10;
    if (Substring.distance(from:to:)() >= 1)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v20 = Substring.index(_:offsetBy:limitedBy:)();
      char v22 = v21;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v19 = v10;
      if ((v22 & 1) == 0)
      {
        if (v27 >> 14 < v20 >> 14)
        {
LABEL_11:
          __break(1u);
          return result;
        }
        *(void *)(v5 + 16) = v20;
        *(void *)(v5 + 24) = v27;
        unint64_t v19 = v20;
      }
    }
    uint64_t v23 = MEMORY[0x210561700](v11, v13, v15, v17);
    uint64_t v25 = v24;
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 >> 14 >= v10 >> 14)
    {
      *uint64_t v26 = v23;
      v26[1] = v25;
      void v26[2] = v10;
      v26[3] = v19;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  return result;
}

uint64_t Parser.expectASCII()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = String.subscript.getter();
  if (!((v4 ^ v5) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    long long v11 = 0u;
    long long v12 = 0u;
    char v13 = 36;
    uint64_t result = Parser.errorAtCurrentPosition(_:)(&v11);
LABEL_7:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  uint64_t v7 = Substring.subscript.getter();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1);
  uint64_t result = Character.asciiValue.getter();
  if ((result & 0x100) != 0)
  {
    *(void *)&long long v11 = v7;
    *((void *)&v11 + 1) = v9;
    long long v12 = 0uLL;
    char v13 = 9;
    Parser.errorAtCurrentPosition(_:)(&v11);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  unint64_t v10 = *(void *)(v1 + 16);
  if (v10 >> 14 < v3 >> 14)
  {
    __break(1u);
  }
  else
  {
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v10;
  }
  return result;
}

uint64_t Character.isOctalDigit.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) == 0)
  {
    if (a1 != 48 || a2 != 0xE100000000000000)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        char v5 = 0;
        return v5 & 1;
      }
      if (a1 == 55 && a2 == 0xE100000000000000)
      {
        char v5 = 1;
        return v5 & 1;
      }
    }
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    return v5 & 1;
  }
  __break(1u);
  return result;
}

BOOL specialized implicit closure #3 in RadixKind.characterFilter.getter()
{
  Character.hexDigitValue.getter();
  return (v0 & 1) == 0;
}

uint64_t Parser.validateUnicodeScalar(_:_:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v118 = a1[3];
  uint64_t v8 = HIBYTE(v6) & 0xF;
  uint64_t v9 = *a1 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
LABEL_9:
    uint64_t v117 = a3;
    uint64_t v14 = a2;
    unint64_t v15 = v6;
    uint64_t v16 = v5;
    unint64_t v120 = v5;
    uint64_t v121 = v15;
    uint64_t v122 = a2;
    uint64_t v123 = 0;
    char v124 = 2;
    unint64_t v17 = ParseError.description.getter();
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)(v119 + 72);
    unint64_t v21 = v15;
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = v7;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
      uint64_t v20 = result;
    }
    unint64_t v25 = *(void *)(v20 + 16);
    unint64_t v24 = *(void *)(v20 + 24);
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, (char *)v20);
      uint64_t v20 = result;
    }
    LODWORD(v26) = 0;
    *(void *)(v20 + 16) = v25 + 1;
    unint64_t v27 = v20 + 80 * v25;
    char v28 = 1;
    *(unsigned char *)(v27 + 32) = 1;
    *(void *)(v27 + 40) = v17;
    *(void *)(v27 + 48) = v19;
    uint64_t v7 = v23;
    uint64_t v29 = v118;
    *(void *)(v27 + 56) = v23;
    *(void *)(v27 + 64) = v118;
    *(void *)(v27 + 72) = v16;
    *(void *)(v27 + 80) = v21;
    *(void *)(v27 + 88) = v14;
    *(void *)(v27 + 96) = 0;
    *(unsigned char *)(v27 + 104) = 2;
    *(void *)(v119 + 72) = v20;
    a3 = v117;
    goto LABEL_14;
  }
  long long v11 = (uint64_t (*)(uint64_t))*(&off_26C23CB08 + (char)a2);
  unint64_t v120 = *a1;
  uint64_t v121 = v6;
  uint64_t v122 = 0;
  uint64_t v123 = v10;
  swift_bridgeObjectRetain();
  while (1)
  {
    Swift::String_optional v12 = String.Iterator.next()();
    if (!v12.value._object) {
      break;
    }
    char v13 = v11(v12.value._countAndFlagsBits);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v38 = a2;
  if (a2)
  {
    BOOL v39 = a2 != 1;
    if (v38 == 1) {
      uint64_t v40 = 10;
    }
    else {
      uint64_t v40 = 16;
    }
    if ((v6 & 0x1000000000000000) == 0)
    {
LABEL_29:
      if ((v6 & 0x2000000000000000) == 0)
      {
        if ((v5 & 0x1000000000000000) != 0)
        {
          uint64_t result = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          uint64_t result = _StringObject.sharedUTF8.getter();
          uint64_t v9 = v116;
        }
        uint64_t v29 = v118;
        int v41 = *(unsigned __int8 *)result;
        if (v41 == 43)
        {
          if (v9 >= 1)
          {
            uint64_t v42 = v9 - 1;
            if (v9 != 1)
            {
              unsigned int v66 = v40 + 55;
              unsigned int v67 = v40 + 87;
              if (v39)
              {
                unsigned int v68 = 58;
              }
              else
              {
                unsigned int v67 = 97;
                unsigned int v66 = 65;
                unsigned int v68 = v40 + 48;
              }
              if (result)
              {
                unsigned int v46 = 0;
                unint64_t v69 = (unsigned __int8 *)(result + 1);
                while (1)
                {
                  unsigned int v70 = *v69;
                  if (v70 < 0x30 || v70 >= v68)
                  {
                    if (v70 < 0x41 || v70 >= v66)
                    {
                      if (v70 < 0x61 || v70 >= v67) {
                        goto LABEL_170;
                      }
                      char v74 = -87;
                    }
                    else
                    {
                      char v74 = -55;
                    }
                  }
                  else
                  {
                    char v74 = -48;
                  }
                  unint64_t v75 = v46 * (unint64_t)v40;
                  if ((v75 & 0xFFFFFFFF00000000) != 0) {
                    goto LABEL_170;
                  }
                  unsigned __int8 v76 = v74 + v70;
                  BOOL v49 = __CFADD__(v75, v76);
                  unsigned int v46 = v75 + v76;
                  if (v49) {
                    goto LABEL_170;
                  }
                  ++v69;
                  if (!--v42) {
                    goto LABEL_197;
                  }
                }
              }
              goto LABEL_143;
            }
            goto LABEL_170;
          }
          goto LABEL_207;
        }
        if (v41 != 45)
        {
          if (v9)
          {
            unsigned int v77 = v40 + 55;
            unsigned int v78 = v40 + 87;
            if (v39)
            {
              unsigned int v79 = 58;
            }
            else
            {
              unsigned int v78 = 97;
              unsigned int v77 = 65;
              unsigned int v79 = v40 + 48;
            }
            if (result)
            {
              unsigned int v46 = 0;
              while (1)
              {
                unsigned int v80 = *(unsigned __int8 *)result;
                if (v80 < 0x30 || v80 >= v79)
                {
                  if (v80 < 0x41 || v80 >= v77)
                  {
                    if (v80 < 0x61 || v80 >= v78) {
                      goto LABEL_170;
                    }
                    char v84 = -87;
                  }
                  else
                  {
                    char v84 = -55;
                  }
                }
                else
                {
                  char v84 = -48;
                }
                unint64_t v85 = v46 * (unint64_t)v40;
                if ((v85 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_170;
                }
                unsigned __int8 v86 = v84 + v80;
                BOOL v49 = __CFADD__(v85, v86);
                unsigned int v46 = v85 + v86;
                if (v49) {
                  goto LABEL_170;
                }
                ++result;
                if (!--v9) {
                  goto LABEL_144;
                }
              }
            }
            goto LABEL_143;
          }
LABEL_170:
          unsigned int v46 = 0;
          LOBYTE(v42) = 1;
          goto LABEL_197;
        }
        if (v9 >= 1)
        {
          uint64_t v42 = v9 - 1;
          if (v9 != 1)
          {
            unsigned int v43 = v40 + 55;
            unsigned int v44 = v40 + 87;
            if (v39)
            {
              unsigned int v45 = 58;
            }
            else
            {
              unsigned int v44 = 97;
              unsigned int v43 = 65;
              unsigned int v45 = v40 + 48;
            }
            if (result)
            {
              unsigned int v46 = 0;
              Swift::String v47 = (unsigned __int8 *)(result + 1);
              while (1)
              {
                unsigned int v48 = *v47;
                BOOL v49 = v48 < 0x30 || v48 >= v45;
                if (v49)
                {
                  if (v48 < 0x41 || v48 >= v43)
                  {
                    if (v48 < 0x61 || v48 >= v44) {
                      goto LABEL_170;
                    }
                    char v52 = -87;
                  }
                  else
                  {
                    char v52 = -55;
                  }
                }
                else
                {
                  char v52 = -48;
                }
                unint64_t v53 = v46 * (unint64_t)v40;
                if ((v53 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_170;
                }
                unsigned __int8 v54 = v52 + v48;
                BOOL v49 = v53 >= v54;
                unsigned int v46 = v53 - v54;
                if (!v49) {
                  goto LABEL_170;
                }
                ++v47;
                if (!--v42) {
                  goto LABEL_197;
                }
              }
            }
LABEL_143:
            unsigned int v46 = 0;
LABEL_144:
            LOBYTE(v42) = 0;
LABEL_197:
            if ((v42 & 1) == 0)
            {
              char v28 = 0;
              LODWORD(v26) = v46;
              goto LABEL_14;
            }
LABEL_199:
            unint64_t v120 = 0;
            uint64_t v121 = 0xE000000000000000;
            _StringGuts.grow(_:)(19);
            swift_bridgeObjectRelease();
            unint64_t v120 = 0xD000000000000011;
            uint64_t v121 = 0x800000020D9DFDF0;
            v109._uint64_t countAndFlagsBits = v5;
            v109._uint64_t object = (void *)v6;
            String.append(_:)(v109);
            unint64_t v110 = v120;
            uint64_t v111 = v121;
            uint64_t v112 = *(void *)(v119 + 72);
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v112 + 16) + 1, 1, (char *)v112);
              uint64_t v112 = result;
            }
            unint64_t v114 = *(void *)(v112 + 16);
            unint64_t v113 = *(void *)(v112 + 24);
            if (v114 >= v113 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v113 > 1), v114 + 1, 1, (char *)v112);
              uint64_t v112 = result;
            }
            LODWORD(v26) = 0;
            *(void *)(v112 + 16) = v114 + 1;
            unint64_t v115 = v112 + 80 * v114;
            char v28 = 1;
            *(unsigned char *)(v115 + 32) = 1;
            *(void *)(v115 + 40) = v110;
            *(void *)(v115 + 48) = v111;
            uint64_t v29 = v118;
            *(void *)(v115 + 56) = v7;
            *(void *)(v115 + 64) = v118;
            *(void *)(v115 + 72) = v5;
            *(void *)(v115 + 80) = v6;
            *(void *)(v115 + 88) = 0;
            *(void *)(v115 + 96) = 0;
            *(unsigned char *)(v115 + 104) = 0;
            *(void *)(v119 + 72) = v112;
            goto LABEL_14;
          }
          goto LABEL_170;
        }
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
        goto LABEL_208;
      }
      unint64_t v120 = v5;
      uint64_t v121 = v6 & 0xFFFFFFFFFFFFFFLL;
      if (v5 == 43)
      {
        if (!v8)
        {
LABEL_208:
          __break(1u);
          return result;
        }
        uint64_t v42 = v8 - 1;
        if (v8 != 1)
        {
          unsigned int v46 = 0;
          unsigned int v87 = v40 + 48;
          unsigned int v88 = v40 + 55;
          unsigned int v89 = v40 + 87;
          if (v39)
          {
            unsigned int v87 = 58;
          }
          else
          {
            unsigned int v89 = 97;
            unsigned int v88 = 65;
          }
          uint64_t v90 = (unsigned __int8 *)&v120 + 1;
          uint64_t v29 = v118;
          while (1)
          {
            unsigned int v91 = *v90;
            if (v91 < 0x30 || v91 >= v87)
            {
              if (v91 < 0x41 || v91 >= v88)
              {
                if (v91 < 0x61 || v91 >= v89) {
                  goto LABEL_170;
                }
                char v95 = -87;
              }
              else
              {
                char v95 = -55;
              }
            }
            else
            {
              char v95 = -48;
            }
            unint64_t v96 = v46 * (unint64_t)v40;
            if ((v96 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_170;
            }
            unsigned __int8 v97 = v95 + v91;
            BOOL v49 = __CFADD__(v96, v97);
            unsigned int v46 = v96 + v97;
            if (v49) {
              goto LABEL_170;
            }
            ++v90;
            if (!--v42) {
              goto LABEL_197;
            }
          }
        }
      }
      else if (v5 == 45)
      {
        if (!v8) {
          goto LABEL_206;
        }
        uint64_t v42 = v8 - 1;
        if (v8 != 1)
        {
          unsigned int v46 = 0;
          unsigned int v55 = v40 + 48;
          unsigned int v56 = v40 + 55;
          unsigned int v57 = v40 + 87;
          if (v39)
          {
            unsigned int v55 = 58;
          }
          else
          {
            unsigned int v57 = 97;
            unsigned int v56 = 65;
          }
          uint64_t v58 = (unsigned __int8 *)&v120 + 1;
          uint64_t v29 = v118;
          while (1)
          {
            unsigned int v59 = *v58;
            if (v59 < 0x30 || v59 >= v55)
            {
              if (v59 < 0x41 || v59 >= v56)
              {
                if (v59 < 0x61 || v59 >= v57) {
                  goto LABEL_170;
                }
                char v63 = -87;
              }
              else
              {
                char v63 = -55;
              }
            }
            else
            {
              char v63 = -48;
            }
            unint64_t v64 = v46 * (unint64_t)v40;
            if ((v64 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_170;
            }
            unsigned __int8 v65 = v63 + v59;
            BOOL v49 = v64 >= v65;
            unsigned int v46 = v64 - v65;
            if (!v49) {
              goto LABEL_170;
            }
            ++v58;
            if (!--v42) {
              goto LABEL_197;
            }
          }
        }
      }
      else if (v8)
      {
        unsigned int v46 = 0;
        unsigned int v98 = v40 + 48;
        unsigned int v99 = v40 + 55;
        unsigned int v100 = v40 + 87;
        if (v39)
        {
          unsigned int v98 = 58;
        }
        else
        {
          unsigned int v100 = 97;
          unsigned int v99 = 65;
        }
        char v101 = &v120;
        do
        {
          unsigned int v102 = *(unsigned __int8 *)v101;
          if (v102 < 0x30 || v102 >= v98)
          {
            if (v102 < 0x41 || v102 >= v99)
            {
              if (v102 < 0x61 || v102 >= v100) {
                goto LABEL_195;
              }
              char v106 = -87;
            }
            else
            {
              char v106 = -55;
            }
          }
          else
          {
            char v106 = -48;
          }
          unint64_t v107 = v46 * (unint64_t)v40;
          if ((v107 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_195;
          }
          unsigned __int8 v108 = v106 + v102;
          BOOL v49 = __CFADD__(v107, v108);
          unsigned int v46 = v107 + v108;
          if (v49) {
            goto LABEL_195;
          }
          char v101 = (unint64_t *)((char *)v101 + 1);
          --v8;
        }
        while (v8);
        LOBYTE(v42) = 0;
        goto LABEL_196;
      }
LABEL_195:
      unsigned int v46 = 0;
      LOBYTE(v42) = 1;
LABEL_196:
      uint64_t v29 = v118;
      goto LABEL_197;
    }
  }
  else
  {
    BOOL v39 = 0;
    uint64_t v40 = 8;
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = specialized _parseInteger<A, B>(ascii:radix:)(v5, v6, v40);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v29 = v118;
  if ((v26 & 0x100000000) != 0) {
    goto LABEL_199;
  }
  char v28 = 0;
LABEL_14:
  if (v28)
  {
    LODWORD(v26) = 0;
  }
  else if (WORD1(v26) > 0x10u || (v26 & 0xFFFFF800) == 0xD800)
  {
    uint64_t v30 = a3;
    unint64_t v120 = 0;
    uint64_t v121 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v120 = 0xD000000000000017;
    uint64_t v121 = 0x800000020D9E0300;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v31._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v26 = v120;
    uint64_t v32 = v121;
    unsigned __int8 v33 = *(char **)(v119 + 72);
    swift_bridgeObjectRetain_n();
    uint64_t v34 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33);
    }
    unint64_t v36 = *((void *)v33 + 2);
    unint64_t v35 = *((void *)v33 + 3);
    if (v36 >= v35 >> 1) {
      unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33);
    }
    *((void *)v33 + 2) = v36 + 1;
    uint64_t v37 = &v33[80 * v36];
    v37[32] = 1;
    *((void *)v37 + 5) = v26;
    *((void *)v37 + 6) = v32;
    uint64_t v7 = v34;
    *((void *)v37 + 7) = v34;
    *((void *)v37 + 8) = v29;
    *((void *)v37 + 9) = v26;
    *((void *)v37 + 10) = v32;
    *((void *)v37 + 11) = 0;
    *((void *)v37 + 12) = 0;
    v37[104] = 4;
    uint64_t result = swift_bridgeObjectRelease();
    LODWORD(v26) = 0;
    *(void *)(v119 + 72) = v33;
    a3 = v30;
  }
  *(_DWORD *)a3 = v26;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v29;
  return result;
}

unsigned __int8 *Parser.lexNumber(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result = (unsigned __int8 *)Parser.tryEatPrefix(maxLength:_:)(0, 1, (uint64_t (*)(uint64_t))*(&off_26C23CB08 + a1), &v96);
  unint64_t v6 = (void *)v97;
  if (!v97)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 32) = 1;
    return result;
  }
  uint64_t v7 = v96;
  if (a1)
  {
    if (a1 == 1)
    {
      int v8 = 0;
      uint64_t v9 = 10;
    }
    else
    {
      int v8 = 1;
      uint64_t v9 = 16;
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 8;
  }
  uint64_t v11 = v98;
  uint64_t v10 = v99;
  uint64_t v12 = HIBYTE(v97) & 0xF;
  uint64_t v13 = v96 & 0xFFFFFFFFFFFFLL;
  if ((v97 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v97) & 0xF;
  }
  else {
    uint64_t v14 = v96 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    if ((v97 & 0x1000000000000000) == 0)
    {
      if ((v97 & 0x2000000000000000) != 0)
      {
        v97 &= 0xFFFFFFFFFFFFFFuLL;
        if (v96 == 43)
        {
          if (v12)
          {
            if (--v12)
            {
              uint64_t v19 = 0;
              unsigned int v60 = v9 + 48;
              unsigned int v61 = v9 + 55;
              unsigned int v62 = v9 + 87;
              if (v8)
              {
                unsigned int v60 = 58;
              }
              else
              {
                unsigned int v62 = 97;
                unsigned int v61 = 65;
              }
              char v63 = (unsigned __int8 *)&v96 + 1;
              while (1)
              {
                unsigned int v64 = *v63;
                if (v64 < 0x30 || v64 >= v60)
                {
                  if (v64 < 0x41 || v64 >= v61)
                  {
                    if (v64 < 0x61 || v64 >= v62) {
                      goto LABEL_173;
                    }
                    char v68 = -87;
                  }
                  else
                  {
                    char v68 = -55;
                  }
                }
                else
                {
                  char v68 = -48;
                }
                uint64_t v69 = v19 * v9;
                if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63) {
                  goto LABEL_173;
                }
                unsigned __int8 v70 = v64 + v68;
                uint64_t v19 = v69 + v70;
                if (__OFADD__(v69, v70)) {
                  goto LABEL_173;
                }
                ++v63;
                if (!--v12) {
                  goto LABEL_174;
                }
              }
            }
            goto LABEL_173;
          }
LABEL_186:
          __break(1u);
          return result;
        }
        if (v96 != 45)
        {
          if (v12)
          {
            uint64_t v19 = 0;
            unsigned int v71 = v9 + 48;
            unsigned int v72 = v9 + 55;
            unsigned int v73 = v9 + 87;
            if (v8)
            {
              unsigned int v71 = 58;
            }
            else
            {
              unsigned int v73 = 97;
              unsigned int v72 = 65;
            }
            char v74 = &v96;
            while (1)
            {
              unsigned int v75 = *(unsigned __int8 *)v74;
              if (v75 < 0x30 || v75 >= v71)
              {
                if (v75 < 0x41 || v75 >= v72)
                {
                  if (v75 < 0x61 || v75 >= v73) {
                    goto LABEL_173;
                  }
                  char v79 = -87;
                }
                else
                {
                  char v79 = -55;
                }
              }
              else
              {
                char v79 = -48;
              }
              uint64_t v80 = v19 * v9;
              if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63) {
                goto LABEL_173;
              }
              unsigned __int8 v81 = v75 + v79;
              uint64_t v19 = v80 + v81;
              if (__OFADD__(v80, v81)) {
                goto LABEL_173;
              }
              char v74 = (uint64_t *)((char *)v74 + 1);
              if (!--v12) {
                goto LABEL_174;
              }
            }
          }
          goto LABEL_173;
        }
        if (v12)
        {
          if (--v12)
          {
            uint64_t v19 = 0;
            unsigned int v28 = v9 + 48;
            unsigned int v29 = v9 + 55;
            unsigned int v30 = v9 + 87;
            if (v8)
            {
              unsigned int v28 = 58;
            }
            else
            {
              unsigned int v30 = 97;
              unsigned int v29 = 65;
            }
            Swift::String v31 = (unsigned __int8 *)&v96 + 1;
            while (1)
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v28)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  if (v32 < 0x61 || v32 >= v30) {
                    goto LABEL_173;
                  }
                  char v36 = -87;
                }
                else
                {
                  char v36 = -55;
                }
              }
              else
              {
                char v36 = -48;
              }
              uint64_t v37 = v19 * v9;
              if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63) {
                goto LABEL_173;
              }
              unsigned __int8 v38 = v32 + v36;
              uint64_t v19 = v37 - v38;
              if (__OFSUB__(v37, v38)) {
                goto LABEL_173;
              }
              ++v31;
              if (!--v12) {
                goto LABEL_174;
              }
            }
          }
          goto LABEL_173;
        }
      }
      else
      {
        if ((v96 & 0x1000000000000000) != 0) {
          uint64_t result = (unsigned __int8 *)((v97 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t result = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        int v15 = *result;
        if (v15 == 43)
        {
          if (v13 >= 1)
          {
            uint64_t v12 = v13 - 1;
            if (v13 != 1)
            {
              unsigned int v39 = v9 + 48;
              unsigned int v40 = v9 + 55;
              unsigned int v41 = v9 + 87;
              if (v8)
              {
                unsigned int v39 = 58;
              }
              else
              {
                unsigned int v41 = 97;
                unsigned int v40 = 65;
              }
              if (result)
              {
                uint64_t v19 = 0;
                uint64_t v42 = result + 1;
                while (1)
                {
                  unsigned int v43 = *v42;
                  if (v43 < 0x30 || v43 >= v39)
                  {
                    if (v43 < 0x41 || v43 >= v40)
                    {
                      if (v43 < 0x61 || v43 >= v41) {
                        goto LABEL_173;
                      }
                      char v47 = -87;
                    }
                    else
                    {
                      char v47 = -55;
                    }
                  }
                  else
                  {
                    char v47 = -48;
                  }
                  uint64_t v48 = v19 * v9;
                  if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63) {
                    goto LABEL_173;
                  }
                  unsigned __int8 v49 = v43 + v47;
                  uint64_t v19 = v48 + v49;
                  if (__OFADD__(v48, v49)) {
                    goto LABEL_173;
                  }
                  ++v42;
                  if (!--v12) {
                    goto LABEL_174;
                  }
                }
              }
              goto LABEL_122;
            }
            goto LABEL_173;
          }
          goto LABEL_185;
        }
        if (v15 != 45)
        {
          if (v13)
          {
            unsigned int v50 = v9 + 48;
            unsigned int v51 = v9 + 55;
            unsigned int v52 = v9 + 87;
            if (v8)
            {
              unsigned int v50 = 58;
            }
            else
            {
              unsigned int v52 = 97;
              unsigned int v51 = 65;
            }
            if (result)
            {
              uint64_t v19 = 0;
              while (1)
              {
                unsigned int v53 = *result;
                if (v53 < 0x30 || v53 >= v50)
                {
                  if (v53 < 0x41 || v53 >= v51)
                  {
                    if (v53 < 0x61 || v53 >= v52) {
                      goto LABEL_173;
                    }
                    char v57 = -87;
                  }
                  else
                  {
                    char v57 = -55;
                  }
                }
                else
                {
                  char v57 = -48;
                }
                uint64_t v58 = v19 * v9;
                if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63) {
                  goto LABEL_173;
                }
                unsigned __int8 v59 = v53 + v57;
                uint64_t v19 = v58 + v59;
                if (__OFADD__(v58, v59)) {
                  goto LABEL_173;
                }
                ++result;
                if (!--v13) {
                  goto LABEL_123;
                }
              }
            }
            goto LABEL_122;
          }
LABEL_173:
          uint64_t v19 = 0;
          LOBYTE(v12) = 1;
          goto LABEL_174;
        }
        if (v13 >= 1)
        {
          uint64_t v12 = v13 - 1;
          if (v13 != 1)
          {
            unsigned int v16 = v9 + 48;
            unsigned int v17 = v9 + 55;
            unsigned int v18 = v9 + 87;
            if (v8)
            {
              unsigned int v16 = 58;
            }
            else
            {
              unsigned int v18 = 97;
              unsigned int v17 = 65;
            }
            if (result)
            {
              uint64_t v19 = 0;
              uint64_t v20 = result + 1;
              while (1)
              {
                unsigned int v21 = *v20;
                if (v21 < 0x30 || v21 >= v16)
                {
                  if (v21 < 0x41 || v21 >= v17)
                  {
                    if (v21 < 0x61 || v21 >= v18) {
                      goto LABEL_173;
                    }
                    char v25 = -87;
                  }
                  else
                  {
                    char v25 = -55;
                  }
                }
                else
                {
                  char v25 = -48;
                }
                uint64_t v26 = v19 * v9;
                if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63) {
                  goto LABEL_173;
                }
                unsigned __int8 v27 = v21 + v25;
                uint64_t v19 = v26 - v27;
                if (__OFSUB__(v26, v27)) {
                  goto LABEL_173;
                }
                ++v20;
                if (!--v12) {
                  goto LABEL_174;
                }
              }
            }
LABEL_122:
            uint64_t v19 = 0;
LABEL_123:
            LOBYTE(v12) = 0;
LABEL_174:
            if ((v12 & 1) == 0)
            {
LABEL_175:
              uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease();
              *(void *)a2 = v19;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = v11;
              *(void *)(a2 + 24) = v10;
              *(unsigned char *)(a2 + 32) = 0;
              return result;
            }
            goto LABEL_177;
          }
          goto LABEL_173;
        }
        __break(1u);
      }
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v7, (uint64_t)v6, v9);
    char v83 = v82;
    swift_bridgeObjectRelease();
    if ((v83 & 1) == 0) {
      goto LABEL_175;
    }
  }
LABEL_177:
  uint64_t v95 = a2;
  uint64_t v84 = v11;
  uint64_t v96 = 0;
  unint64_t v97 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  uint64_t v96 = 0xD000000000000011;
  unint64_t v97 = 0x800000020D9DFDF0;
  uint64_t v85 = v7;
  v86._uint64_t countAndFlagsBits = v7;
  v86._uint64_t object = v6;
  String.append(_:)(v86);
  uint64_t v87 = v96;
  unint64_t v88 = v97;
  uint64_t v89 = v2;
  uint64_t v90 = *(char **)(v2 + 72);
  swift_bridgeObjectRetain();
  uint64_t v91 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v90 + 2) + 1, 1, v90);
  }
  unint64_t v93 = *((void *)v90 + 2);
  unint64_t v92 = *((void *)v90 + 3);
  if (v93 >= v92 >> 1) {
    uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v90);
  }
  *((void *)v90 + 2) = v93 + 1;
  BOOL v94 = &v90[80 * v93];
  v94[32] = 1;
  *((void *)v94 + 5) = v87;
  *((void *)v94 + 6) = v88;
  *((void *)v94 + 7) = v84;
  *((void *)v94 + 8) = v91;
  *((void *)v94 + 9) = v85;
  *((void *)v94 + 10) = v6;
  *((void *)v94 + 11) = 0;
  *((void *)v94 + 12) = 0;
  v94[104] = 0;
  uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
  *(void *)(v89 + 72) = v90;
  *(_OWORD *)uint64_t v95 = xmmword_20D9D74D0;
  *(void *)(v95 + 16) = v84;
  *(void *)(v95 + 24) = v91;
  *(unsigned char *)(v95 + 32) = 0;
  return result;
}

uint64_t Parser.expectUnicodeScalar(numDigits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v6 = *(void *)(v2 + 16);
  Parser.eat(upToCount:)(a1, &v23);
  uint64_t v8 = v23;
  uint64_t v7 = v24;
  uint64_t v10 = v25;
  uint64_t v9 = v26;
  swift_bridgeObjectRetain();
  uint64_t v11 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v11 == a1) {
    goto LABEL_6;
  }
  uint64_t v23 = v8;
  uint64_t v24 = v7;
  uint64_t v25 = a1;
  uint64_t v26 = 0;
  char v27 = 1;
  swift_bridgeObjectRetain();
  unint64_t v12 = ParseError.description.getter();
  uint64_t v19 = v13;
  unint64_t v20 = v12;
  uint64_t v11 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v21 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    unint64_t v15 = *(void *)(v11 + 16);
    unint64_t v14 = *(void *)(v11 + 24);
    if (v15 >= v14 >> 1) {
      uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v11);
    }
    *(void *)(v11 + 16) = v15 + 1;
    uint64_t v16 = v11 + 80 * v15;
    *(unsigned char *)(v16 + 32) = 1;
    *(void *)(v16 + 40) = v20;
    *(void *)(v16 + 48) = v19;
    *(void *)(v16 + 56) = v10;
    *(void *)(v16 + 64) = v9;
    *(void *)(v16 + 72) = v8;
    *(void *)(v16 + 80) = v7;
    *(void *)(v16 + 88) = a1;
    *(void *)(v16 + 96) = 0;
    *(unsigned char *)(v16 + 104) = 1;
    swift_bridgeObjectRelease();
    *(void *)(v3 + 72) = v11;
    a2 = v21;
LABEL_6:
    unint64_t v17 = *(void *)(v3 + 16);
    if (v17 >> 14 >= v6 >> 14) {
      break;
    }
    __break(1u);
LABEL_11:
    uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
  }
  v22[0] = v8;
  v22[1] = v7;
  v22[2] = v6;
  v22[3] = v17;
  Parser.validateUnicodeScalar(_:_:)(v22, 2u, a2);

  return swift_bridgeObjectRelease();
}

uint64_t Parser.expectUnicodeScalarSequence(eating:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  unsigned int v45 = (char *)MEMORY[0x263F8EE78];
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v4, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)&v49);
  unint64_t v8 = *((void *)&v49 + 1);
  if (*((void *)&v49 + 1))
  {
    unint64_t v9 = v49;
    long long v44 = v50;
    unint64_t v3 = MEMORY[0x263F8EE78];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_3;
  }
LABEL_6:
  unsigned int v39 = (char *)MEMORY[0x263F8EE78];
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  unsigned int v43 = v5;
  while (1)
  {
    unint64_t v9 = *((void *)v5 + 2);
    swift_bridgeObjectRetain();
    *(void *)&long long v49 = 0;
    *((void *)&v49 + 1) = 0xE000000000000000;
    unint64_t v40 = v9;
    if ((closure #1 in Parser.expectUnicodeScalarSequence(eating:)(v5, a1, a2, &v45) & 1) == 0)
    {
      while (1)
      {
        *(void *)&long long v44 = v9;
        a1 = *((void *)v5 + 1);
        unint64_t v8 = *((void *)v5 + 2);
        unint64_t v3 = *((void *)v5 + 3);
        uint64_t v5 = (char *)*((void *)v5 + 9);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = String.subscript.getter();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (!((v13 ^ v15) >> 14))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a2 = v42;
          swift_bridgeObjectRelease();
          uint64_t v5 = v43;
          a1 = v41;
          goto LABEL_25;
        }
        *(void *)&long long v44 = Substring.subscript.getter();
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v9 = Substring.index(_:offsetBy:limitedBy:)();
        a2 = v18;
        swift_bridgeObjectRelease();
        if ((a2 & 1) == 0) {
          break;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v20 = *((void *)v5 + 2);
        unint64_t v19 = *((void *)v5 + 3);
        if (v20 >= v19 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v20 + 1;
        uint64_t v21 = &v5[80 * v20];
        v21[32] = 0;
        *((void *)v21 + 5) = 0xD000000000000022;
        *((void *)v21 + 6) = 0x800000020D9E0210;
        *((void *)v21 + 7) = v8;
        *((void *)v21 + 8) = v8;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        v21[104] = -1;
        *((void *)v43 + 9) = v5;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v22 < 1)
        {
          unint64_t v9 = v8;
          uint64_t v5 = v43;
        }
        else
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          unint64_t v23 = v3;
          swift_bridgeObjectRelease();
          unint64_t v3 = Substring.index(_:offsetBy:limitedBy:)();
          a2 = v24;
          swift_bridgeObjectRelease();
          unint64_t v9 = v8;
          uint64_t v5 = v43;
          if ((a2 & 1) == 0)
          {
            if (v23 >> 14 < v3 >> 14) {
              goto LABEL_47;
            }
            unint64_t v9 = v3;
            unint64_t v3 = v23;
LABEL_23:
            *((void *)v5 + 2) = v9;
            *((void *)v5 + 3) = v3;
          }
        }
        MEMORY[0x2105617C0](v44, v17);
        swift_bridgeObjectRelease();
        a1 = v41;
        a2 = v42;
        if (closure #1 in Parser.expectUnicodeScalarSequence(eating:)(v5, v41, v42, &v45)) {
          goto LABEL_25;
        }
      }
      if (v3 >> 14 < v9 >> 14)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        unint64_t v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
LABEL_3:
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1) {
          unint64_t v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        }
        *(void *)(v3 + 16) = v11 + 1;
        unint64_t v12 = v3 + 32 * v11;
        *(void *)(v12 + 32) = v9;
        *(void *)(v12 + 40) = v8;
        *(_OWORD *)(v12 + 48) = v44;
        unsigned int v45 = (char *)v3;
        goto LABEL_6;
      }
      uint64_t v5 = v43;
      goto LABEL_23;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    if (v9 >> 14 < v40 >> 14) {
      goto LABEL_48;
    }
    uint64_t v25 = HIBYTE(*((void *)&v49 + 1)) & 0xFLL;
    if ((*((void *)&v49 + 1) & 0x2000000000000000) == 0) {
      uint64_t v25 = v49 & 0xFFFFFFFFFFFFLL;
    }
    if (!v25) {
      break;
    }
    *(void *)&long long v50 = v40;
    *((void *)&v50 + 1) = v9;
    Parser.validateUnicodeScalar(_:_:)((uint64_t *)&v49, 2u, (uint64_t)&v46);
    swift_bridgeObjectRelease();
    int v26 = v46;
    unint64_t v8 = *((void *)&v46 + 1);
    uint64_t v27 = v47;
    unsigned int v28 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v39 + 2) + 1, 1, v39);
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v3 = v30 + 1;
    if (v30 >= v29 >> 1) {
      unsigned int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v3;
    unsigned int v39 = v28;
    Swift::String v31 = &v28[24 * v30];
    *((_DWORD *)v31 + 8) = v26;
    *((void *)v31 + 5) = v8;
    *((void *)v31 + 6) = v27;
  }
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = a1;
  v32._uint64_t object = (void *)a2;
  if (!Parser.tryEat(_:)(v32))
  {
    *(void *)&long long v49 = a1;
    *((void *)&v49 + 1) = a2;
    long long v50 = 0uLL;
    char v51 = 3;
    Parser.errorAtCurrentPosition(_:)(&v49);
  }
  uint64_t v33 = *((void *)v39 + 2);
  if (v33 == 1)
  {
    long long v35 = *(_OWORD *)(v39 + 40);
    *(_DWORD *)a3 = *((_DWORD *)v39 + 8);
    *(_OWORD *)(a3 + 8) = v35;
    goto LABEL_40;
  }
  if (!v33)
  {
    long long v46 = xmmword_20D9D74E0;
    long long v47 = xmmword_20D9D7490;
    char v48 = 2;
    Parser.errorAtCurrentPosition(_:)(&v46);
    uint64_t v34 = *((void *)v5 + 2);
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = v34;
    *(void *)(a3 + 16) = v34;
LABEL_40:
    type metadata accessor for AST.Atom.Kind(0);
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v37 = v45;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v37;
  type metadata accessor for AST.Atom.Kind(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in Parser.expectUnicodeScalarSequence(eating:)(void *a1, uint64_t a2, uint64_t a3, char **a4)
{
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 ^ v9) < 0x4000) {
    return 1;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = String.subscript.getter();
  if (!((v10 ^ v11) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  uint64_t v19 = Substring.subscript.getter();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v19 == a2 && v21 == a3)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v22) {
    return 1;
  }
LABEL_4:
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v26);
  uint64_t v12 = v27;
  if (v27)
  {
    uint64_t v13 = v26;
    long long v24 = v28;
    unint64_t v14 = *a4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a4 = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a4 = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    uint64_t v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v13;
    *((void *)v18 + 5) = v12;
    *((_OWORD *)v18 + 3) = v24;
    return 1;
  }
  return 0;
}

uint64_t specialized Parser.lexUntil(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v6 = a1;
  unint64_t v8 = a1[2];
  if (specialized Parser.tryEatNonEmpty<A>(sequence:)(a2, a3))
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v10 = v8;
LABEL_27:
    if (v10 >> 14 < v8 >> 14) {
      goto LABEL_31;
    }
    *a4 = 0;
    a4[1] = 0xE000000000000000;
    a4[2] = v8;
    a4[3] = v10;
    return result;
  }
  uint64_t v43 = a2;
  uint64_t v42 = a4;
  unint64_t v41 = v8;
  unint64_t v10 = v8;
  uint64_t v44 = a3;
  long long v47 = v6;
  while (1)
  {
    unint64_t v48 = v10;
    unint64_t v10 = v6[2];
    unint64_t v11 = v6[3];
    uint64_t v12 = (char *)v6[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = String.subscript.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if (!((v13 ^ v15) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v8 = v41;
      a4 = v42;
      unint64_t v10 = v48;
      goto LABEL_27;
    }
    uint64_t v45 = Substring.subscript.getter();
    uint64_t v46 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v17 = Substring.index(_:offsetBy:limitedBy:)();
    char v19 = v18;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v23 = *((void *)v12 + 2);
    unint64_t v22 = *((void *)v12 + 3);
    if (v23 >= v22 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v23 + 1;
    long long v24 = &v12[80 * v23];
    v24[32] = 0;
    *((void *)v24 + 5) = 0xD000000000000022;
    *((void *)v24 + 6) = 0x800000020D9E0210;
    *((void *)v24 + 7) = v10;
    *((void *)v24 + 8) = v10;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    v24[104] = -1;
    long long v49 = v12;
    v47[9] = v12;
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v25 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (v25 < 1
      || (swift_bridgeObjectRetain(),
          String.subscript.getter(),
          swift_bridgeObjectRelease(),
          unint64_t v26 = Substring.index(_:offsetBy:limitedBy:)(),
          char v28 = v27,
          uint64_t result = swift_bridgeObjectRelease(),
          (v28 & 1) != 0))
    {
      uint64_t v20 = v43;
      uint64_t v21 = v44;
      goto LABEL_19;
    }
    uint64_t v20 = v43;
    uint64_t v21 = v44;
    if (v11 >> 14 < v26 >> 14) {
      goto LABEL_30;
    }
    unint64_t v10 = v26;
LABEL_17:
    void v47[2] = v10;
    v47[3] = v11;
LABEL_19:
    MEMORY[0x2105617C0](v45, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v29 = String.init<A>(_:)();
    uint64_t v31 = v30;
    swift_bridgeObjectRetain();
    uint64_t v32 = String.subscript.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 ^ v34) >> 14)
    {
      swift_bridgeObjectRelease();
      unint64_t v6 = v47;
      if (specialized Parser.tryEat<A>(sequence:)(v20, v21))
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v8 = v41;
        a4 = v42;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v35 = ParseError.description.getter();
      uint64_t v37 = v36;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
      }
      unint64_t v39 = *((void *)v49 + 2);
      unint64_t v38 = *((void *)v49 + 3);
      if (v39 >= v38 >> 1) {
        long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v49);
      }
      *((void *)v49 + 2) = v39 + 1;
      unint64_t v40 = &v49[80 * v39];
      v40[32] = 1;
      *((void *)v40 + 5) = v35;
      *((void *)v40 + 6) = v37;
      *((void *)v40 + 7) = v10;
      *((void *)v40 + 8) = v10;
      *((void *)v40 + 9) = v29;
      *((void *)v40 + 10) = v31;
      *((void *)v40 + 11) = 0;
      *((void *)v40 + 12) = 0;
      v40[104] = 3;
      swift_bridgeObjectRelease();
      unint64_t v6 = v47;
      v47[9] = v49;
    }
  }
  uint64_t v20 = v43;
  if (v11 >> 14 >= v17 >> 14)
  {
    unint64_t v10 = v17;
    long long v49 = v12;
    uint64_t v21 = v44;
    goto LABEL_17;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Parser.lexUntil(_:)@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a1;
  unint64_t v4 = a1[2];
  uint64_t result = a2();
  unint64_t v24 = v4;
  if ((result & 1) == 0)
  {
    unint64_t v6 = v4;
    unint64_t v26 = v3;
    do
    {
      unint64_t v28 = v6;
      unint64_t v4 = v3[2];
      unint64_t v7 = v3[3];
      unint64_t v8 = (char *)v3[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = String.subscript.getter();
      unint64_t v11 = v10;
      swift_bridgeObjectRelease();
      if (!((v9 ^ v11) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v4 = v28;
        break;
      }
      uint64_t v27 = Substring.subscript.getter();
      uint64_t v29 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v13 = Substring.index(_:offsetBy:limitedBy:)();
      char v15 = v14;
      uint64_t result = swift_bridgeObjectRelease();
      if (v15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v17 = *((void *)v8 + 2);
        unint64_t v16 = *((void *)v8 + 3);
        if (v17 >= v16 >> 1) {
          unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v17 + 1;
        char v18 = &v8[80 * v17];
        v18[32] = 0;
        *((void *)v18 + 5) = 0xD000000000000022;
        *((void *)v18 + 6) = 0x800000020D9E0210;
        *((void *)v18 + 7) = v4;
        *((void *)v18 + 8) = v4;
        *(_OWORD *)(v18 + 72) = 0u;
        *(_OWORD *)(v18 + 88) = 0u;
        v18[104] = -1;
        v26[9] = v8;
        unint64_t v3 = v26;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v19 < 1) {
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v20 = Substring.index(_:offsetBy:limitedBy:)();
        char v22 = v21;
        unint64_t v3 = v26;
        uint64_t result = swift_bridgeObjectRelease();
        if (v22) {
          goto LABEL_6;
        }
        if (v7 >> 14 < v20 >> 14) {
          goto LABEL_21;
        }
        unint64_t v4 = v20;
      }
      else
      {
        if (v7 >> 14 < v13 >> 14)
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }
        unint64_t v4 = v13;
        unint64_t v3 = v26;
      }
      void v3[2] = v4;
      uint64_t v3[3] = v7;
LABEL_6:
      MEMORY[0x2105617C0](v27, v29);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(void *))a2)(v3);
      unint64_t v6 = v4;
    }
    while ((result & 1) == 0);
  }
  if (v4 >> 14 < v24 >> 14) {
    goto LABEL_22;
  }
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = v24;
  a3[3] = v4;
  return result;
}

uint64_t Parser.lexUnicodeScalar()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x270FA5388](v3 - 8, v4);
  unint64_t v6 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v9 = v1[3];
  LOBYTE(v5) = *((unsigned char *)v1 + 32);
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v98 = v1[7];
  uint64_t v99 = v11;
  int v97 = *((unsigned __int8 *)v1 + 64);
  uint64_t v13 = v1[9];
  char v104 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v100 = v9;
  uint64_t v101 = v7;
  uint64_t v14 = String.subscript.getter();
  uint64_t v102 = v13;
  uint64_t v103 = v1;
  if ((v14 ^ v15) >> 14)
  {
    uint64_t v16 = Substring.subscript.getter();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Parser.advance(_:)(1);
    if (!v18) {
      goto LABEL_49;
    }
    BOOL v19 = v16 == 117 && v18 == 0xE100000000000000;
    char v20 = v19;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v21._uint64_t countAndFlagsBits = 123;
      v21._uint64_t object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v21))
      {
        swift_bridgeObjectRelease();
        Parser.expectUnicodeScalarSequence(eating:)(125, 0xE100000000000000, (uint64_t)v6);
        uint64_t v22 = type metadata accessor for AST.Atom.Kind(0);
        uint64_t v23 = v22;
LABEL_32:
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 0, 1, v22);
        goto LABEL_50;
      }
    }
    unint64_t v24 = v103;
    if (v16 == 120 && v18 == 0xE100000000000000)
    {
      v25._uint64_t countAndFlagsBits = 123;
      v25._uint64_t object = (void *)0xE100000000000000;
      Swift::Bool v26 = Parser.tryEat(_:)(v25);
      unint64_t v24 = v103;
      if (!v26) {
        goto LABEL_22;
      }
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 {
           || (v27._uint64_t countAndFlagsBits = 123,
    }
               v27._uint64_t object = (void *)0xE100000000000000,
               Swift::Bool v28 = Parser.tryEat(_:)(v27),
               unint64_t v24 = v103,
               !v28))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v20 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          uint64_t v33 = 4;
        }
        else
        {
          if ((v16 != 85 || v18 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v16 == 111 && v18 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && (v34._uint64_t countAndFlagsBits = 123,
                  v34._uint64_t object = (void *)0xE100000000000000,
                  Swift::Bool v35 = Parser.tryEat(_:)(v34),
                  uint64_t v36 = v103,
                  v35))
            {
              swift_bridgeObjectRelease();
              specialized Parser.lexUntil(_:)(v36, 125, 0xE100000000000000, &v107);
              uint64_t v37 = v107;
              uint64_t v38 = v108;
            }
            else
            {
              if (v16 == 48 && v18 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v39 & 1) == 0) {
                  goto LABEL_49;
                }
              }
              unint64_t v24 = v103;
              specialized Parser.tryEatPrefix(maxLength:_:)(3, 0, v103, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v107);
              uint64_t v38 = v108;
              if (!(void)v108) {
                goto LABEL_64;
              }
              uint64_t v37 = v107;
            }
            uint64_t v107 = v37;
            *(void *)&long long v108 = v38;
            unsigned __int8 v31 = 0;
            goto LABEL_25;
          }
          swift_bridgeObjectRelease();
          uint64_t v33 = 8;
        }
        Parser.expectUnicodeScalar(numDigits:)(v33, (uint64_t)&v107);
        *(_DWORD *)unint64_t v6 = v107;
        long long v32 = v108;
        goto LABEL_30;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      specialized Parser.tryEatPrefix(maxLength:_:)(2, 0, v24, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v107);
      uint64_t v30 = v108;
      if ((void)v108)
      {
        uint64_t v29 = v107;
        goto LABEL_24;
      }
LABEL_64:
      uint64_t v82 = v24[2];
      *(_DWORD *)unint64_t v6 = 0;
      *((void *)v6 + 1) = v82;
      *((void *)v6 + 2) = v82;
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    specialized Parser.lexUntil(_:)(v24, 125, 0xE100000000000000, &v107);
    uint64_t v29 = v107;
    uint64_t v30 = v108;
LABEL_24:
    uint64_t v107 = v29;
    *(void *)&long long v108 = v30;
    unsigned __int8 v31 = 2;
LABEL_25:
    Parser.validateUnicodeScalar(_:_:)(&v107, v31, (uint64_t)&v105);
    swift_bridgeObjectRelease();
    *(_DWORD *)unint64_t v6 = v105;
    long long v32 = v106;
LABEL_30:
    *(_OWORD *)(v6 + 8) = v32;
LABEL_31:
    uint64_t v22 = type metadata accessor for AST.Atom.Kind(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = v22;
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_49:
  uint64_t v22 = type metadata accessor for AST.Atom.Kind(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v6, 1, 1, v22);
LABEL_50:
  type metadata accessor for AST.Atom.Kind(0);
  uint64_t v40 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v6, 1, v22) == 1)
  {
    uint64_t v93 = v40;
    uint64_t v95 = v22;
    uint64_t v96 = v10;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    unint64_t v41 = v103;
    uint64_t v42 = v103[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v102;
    uint64_t v44 = v8;
    uint64_t v45 = v12;
    uint64_t v46 = a1;
    uint64_t v47 = specialized Collection.dropFirst(_:)(*(void *)(v102 + 16), v42);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    int64_t v53 = v52 >> 1;
    swift_bridgeObjectRetain();
    uint64_t v94 = v47;
    uint64_t v54 = v46;
    uint64_t v55 = v45;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v57 = v49 - 32;
    uint64_t v58 = v43;
    uint64_t v59 = v51;
    uint64_t v60 = v51;
LABEL_52:
    uint64_t v61 = v57 + 80 * v59;
    while (1)
    {
      if (v53 == v60)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v79 = v104;
        *unint64_t v41 = v101;
        v41[1] = v44;
        uint64_t v80 = v95;
        uint64_t v81 = v100;
        v41[2] = v96;
        v41[3] = v81;
        *((unsigned char *)v41 + 32) = v79;
        v41[5] = v99;
        v41[6] = v55;
        v41[7] = v98;
        *((unsigned char *)v41 + 64) = v97;
        v41[9] = v58;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v54, 1, 1, v80);
      }
      if (v59 < v51 || v60 >= v53) {
        break;
      }
      int v62 = *(unsigned __int8 *)(v61 + 32);
      ++v60;
      v61 += 80;
      if (!v62)
      {
        uint64_t v63 = v54;
        uint64_t v89 = v57;
        uint64_t v90 = v42;
        uint64_t v91 = v55;
        uint64_t v102 = v44;
        uint64_t v64 = *(void *)(v61 - 32);
        uint64_t v85 = *(void *)(v61 - 40);
        uint64_t v84 = *(void *)(v61 - 24);
        uint64_t v65 = *(void *)(v61 - 8);
        uint64_t v83 = *(void *)(v61 - 16);
        uint64_t v67 = *(void *)v61;
        uint64_t v66 = *(void *)(v61 + 8);
        uint64_t v68 = *(void *)(v61 + 16);
        unsigned __int8 v69 = *(unsigned char *)(v61 + 24);
        uint64_t v88 = v64;
        swift_bridgeObjectRetain();
        uint64_t v86 = v65;
        uint64_t v70 = v65;
        unsigned __int8 v71 = v69;
        uint64_t v87 = v67;
        outlined copy of ParseError?(v70, v67, v66, v68, v69);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v92 = v63;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1, (char *)v58);
          uint64_t v58 = result;
        }
        unint64_t v73 = *(void *)(v58 + 16);
        unint64_t v72 = *(void *)(v58 + 24);
        uint64_t v74 = v58;
        unint64_t v41 = v103;
        if (v73 >= v72 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, (char *)v58);
          uint64_t v74 = result;
        }
        *(void *)(v74 + 16) = v73 + 1;
        uint64_t v58 = v74;
        unint64_t v75 = v74 + 80 * v73;
        *(unsigned char *)(v75 + 32) = 0;
        uint64_t v76 = v88;
        *(void *)(v75 + 40) = v85;
        *(void *)(v75 + 48) = v76;
        uint64_t v77 = v83;
        *(void *)(v75 + 56) = v84;
        *(void *)(v75 + 64) = v77;
        uint64_t v78 = v87;
        *(void *)(v75 + 72) = v86;
        *(void *)(v75 + 80) = v78;
        *(void *)(v75 + 88) = v66;
        *(void *)(v75 + 96) = v68;
        *(unsigned char *)(v75 + 104) = v71;
        uint64_t v59 = v60;
        uint64_t v55 = v91;
        uint64_t v54 = v92;
        uint64_t v44 = v102;
        uint64_t v42 = v90;
        uint64_t v57 = v89;
        goto LABEL_52;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v6, a1, type metadata accessor for AST.Atom.Kind);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(a1, 0, 1, v22);
  }
  return result;
}

uint64_t Parser.lexQuantifier()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v54 = *(void *)(v1 + 24);
  uint64_t v55 = *(void *)(v1 + 16);
  char v53 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v51 = *(void *)(v1 + 56);
  uint64_t v52 = *(void *)(v1 + 40);
  char v50 = *(unsigned char *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in Parser.lexQuantifier()(v1, (uint64_t)&v66);
  uint64_t v57 = v66;
  uint64_t v58 = v68;
  uint64_t v60 = v69;
  uint64_t v61 = v70;
  uint64_t v62 = v72;
  uint64_t v63 = v73;
  uint64_t v7 = v75;
  uint64_t v64 = v74;
  char v8 = v76;
  uint64_t v9 = v77;
  unint64_t v59 = v67;
  uint64_t v10 = v79;
  uint64_t v65 = v78;
  if (v67 >> 1 == 0xFFFFFFFF && v71 < 2)
  {
    unint64_t v45 = v71;
    uint64_t v46 = v75;
    uint64_t v47 = v3;
    uint64_t v48 = v79;
    uint64_t v49 = v76;
    uint64_t v11 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v6 + 16), v11);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    int64_t v17 = v16 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v19 = v13 - 32;
    uint64_t v20 = v15;
    uint64_t v21 = v15;
LABEL_4:
    uint64_t v22 = v19 + 80 * v20;
    while (1)
    {
      if (v17 == v21)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v1 = v47;
        *(void *)(v1 + 8) = v4;
        *(void *)(v1 + 16) = v55;
        *(void *)(v1 + 24) = v54;
        *(unsigned char *)(v1 + 32) = v53;
        *(void *)(v1 + 40) = v52;
        *(void *)(v1 + 48) = v5;
        *(void *)(v1 + 56) = v51;
        *(unsigned char *)(v1 + 64) = v50;
        *(void *)(v1 + 72) = v6;
        *a1 = v57;
        a1[1] = v59;
        a1[2] = v58;
        a1[3] = v60;
        a1[4] = v61;
        a1[5] = v45;
        a1[6] = v62;
        a1[7] = v63;
        a1[8] = v64;
        a1[9] = v46;
        a1[10] = v49;
        a1[11] = v9;
        a1[12] = v65;
        a1[13] = v48;
        return result;
      }
      if (v20 < v15 || v21 >= v17) {
        break;
      }
      int v23 = *(unsigned __int8 *)(v22 + 32);
      ++v21;
      v22 += 80;
      if (!v23)
      {
        uint64_t v41 = v19;
        uint64_t v42 = v9;
        uint64_t v43 = v5;
        uint64_t v44 = v4;
        uint64_t v37 = *(void *)(v22 - 24);
        uint64_t v38 = *(void *)(v22 - 40);
        uint64_t v24 = *(void *)(v22 - 8);
        uint64_t v35 = *(void *)(v22 - 32);
        uint64_t v36 = *(void *)(v22 - 16);
        uint64_t v56 = v6;
        uint64_t v26 = *(void *)v22;
        uint64_t v25 = *(void *)(v22 + 8);
        uint64_t v27 = *(void *)(v22 + 16);
        unsigned __int8 v28 = *(unsigned char *)(v22 + 24);
        swift_bridgeObjectRetain();
        uint64_t v39 = v24;
        uint64_t v40 = v26;
        uint64_t v29 = v26;
        uint64_t v30 = v25;
        uint64_t v6 = v56;
        outlined copy of ParseError?(v24, v29, v30, v27, v28);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v56 + 16) + 1, 1, (char *)v56);
          uint64_t v6 = result;
        }
        unint64_t v32 = *(void *)(v6 + 16);
        unint64_t v31 = *(void *)(v6 + 24);
        if (v32 >= v31 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, (char *)v6);
          uint64_t v6 = result;
        }
        *(void *)(v6 + 16) = v32 + 1;
        unint64_t v33 = v6 + 80 * v32;
        *(unsigned char *)(v33 + 32) = 0;
        *(void *)(v33 + 40) = v38;
        *(void *)(v33 + 48) = v35;
        *(void *)(v33 + 56) = v37;
        *(void *)(v33 + 64) = v36;
        *(void *)(v33 + 72) = v39;
        *(void *)(v33 + 80) = v40;
        *(void *)(v33 + 88) = v30;
        *(void *)(v33 + 96) = v27;
        *(unsigned char *)(v33 + 104) = v28;
        uint64_t v20 = v21;
        uint64_t v5 = v43;
        uint64_t v4 = v44;
        uint64_t v19 = v41;
        uint64_t v9 = v42;
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v34 = v71;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v57;
    a1[1] = v59;
    a1[2] = v58;
    a1[3] = v60;
    a1[4] = v61;
    a1[5] = v34;
    a1[6] = v62;
    a1[7] = v63;
    a1[8] = v64;
    a1[9] = v7;
    *((unsigned char *)a1 + 80) = v8;
    a1[11] = v9;
    a1[12] = v65;
    a1[13] = v10;
  }
  return result;
}

uint64_t closure #1 in Parser.lexQuantifier()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = (char *)MEMORY[0x263F8EE78];
  if ((*(unsigned char *)(a1 + 56) & 1) == 0) {
    goto LABEL_7;
  }
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, (void *)a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)v37);
  unint64_t v5 = *(void *)&v37[8];
  if (!*(void *)&v37[8]) {
    goto LABEL_7;
  }
  unint64_t v6 = *(void *)v37;
  long long v36 = *(_OWORD *)&v37[16];
  uint64_t v2 = (char *)MEMORY[0x263F8EE78];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_40;
  }
  while (1)
  {
    unint64_t v8 = *((void *)v2 + 2);
    unint64_t v7 = *((void *)v2 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
    }
    *((void *)v2 + 2) = v8 + 1;
    uint64_t v9 = &v2[32 * v8];
    *((void *)v9 + 4) = v6;
    *((void *)v9 + 5) = v5;
    *((_OWORD *)v9 + 3) = v36;
    uint64_t v40 = v2;
LABEL_7:
    unint64_t v5 = *(void *)(a1 + 16);
    v10._uint64_t countAndFlagsBits = 42;
    v10._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v10))
    {
      memset(v37, 0, sizeof(v37));
LABEL_14:
      unint64_t v14 = 0;
      long long v39 = 0uLL;
      unint64_t v6 = 0x8000000000000000;
      goto LABEL_15;
    }
    v11._uint64_t countAndFlagsBits = 43;
    v11._uint64_t object = (void *)0xE100000000000000;
    uint64_t v2 = &v37[8];
    if (Parser.tryEat(_:)(v11))
    {
      uint64_t v12 = 1;
LABEL_13:
      *(void *)uint64_t v37 = v12;
      memset(&v37[8], 0, 32);
      goto LABEL_14;
    }
    v13._uint64_t countAndFlagsBits = 63;
    v13._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v13))
    {
      uint64_t v12 = 2;
      goto LABEL_13;
    }
    specialized Parser.tryEating<A>(_:)(a1, &v40, (uint64_t)v37);
    unint64_t v14 = *(void *)&v37[8];
    unint64_t v6 = v38;
    if (*(void *)&v37[8] >> 1 == 0xFFFFFFFFLL && v38 < 2)
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      unint64_t v6 = 0;
      unint64_t v5 = 0;
      unint64_t v15 = 0;
      long long v18 = 0uLL;
      long long v16 = 0uLL;
      unint64_t v14 = 0x1FFFFFFFELL;
      goto LABEL_17;
    }
LABEL_15:
    unint64_t v15 = *(void *)(a1 + 16);
    if (v15 >> 14 < v5 >> 14)
    {
      __break(1u);
      goto LABEL_39;
    }
    long long v16 = v39;
    uint64_t v17 = *(void *)&v37[32];
    long long v18 = *(_OWORD *)&v37[16];
    uint64_t v19 = *(void *)v37;
LABEL_17:
    if (v14 >> 1 == 0xFFFFFFFF && v6 <= 1) {
      break;
    }
    long long v35 = v16;
    long long v36 = v18;
    if (*(unsigned char *)(a1 + 56))
    {
      specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, (void *)a1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)v37);
      if (*(void *)&v37[8])
      {
        uint64_t v34 = *(void *)&v37[8];
        uint64_t v32 = *(void *)v37;
        long long v33 = *(_OWORD *)&v37[16];
        uint64_t v21 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v21 + 2) + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        }
        unint64_t v23 = *((void *)v21 + 2);
        unint64_t v22 = *((void *)v21 + 3);
        unint64_t v24 = v23 + 1;
        if (v23 >= v22 >> 1)
        {
          unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          unint64_t v24 = v23 + 1;
          uint64_t v21 = v31;
        }
        *((void *)v21 + 2) = v24;
        uint64_t v25 = &v21[32 * v23];
        *((void *)v25 + 4) = v32;
        *((void *)v25 + 5) = v34;
        *((_OWORD *)v25 + 3) = v33;
        uint64_t v40 = v21;
      }
    }
    uint64_t v2 = *(char **)(a1 + 16);
    v26._uint64_t countAndFlagsBits = 63;
    v26._uint64_t object = (void *)0xE100000000000000;
    uint64_t result = Parser.tryEat(_:)(v26);
    if (result)
    {
      uint64_t v27 = 1;
    }
    else
    {
      v28._uint64_t countAndFlagsBits = 43;
      v28._uint64_t object = (void *)0xE100000000000000;
      uint64_t result = Parser.tryEat(_:)(v28);
      uint64_t v27 = 2;
      if ((result & 1) == 0) {
        uint64_t v27 = 0;
      }
    }
    unint64_t v29 = *(void *)(a1 + 16);
    if (v29 >> 14 >= (unint64_t)v2 >> 14)
    {
      uint64_t v30 = v40;
      *(void *)a2 = v19;
      *(void *)(a2 + 8) = v14;
      *(_OWORD *)(a2 + 16) = v36;
      *(void *)(a2 + 32) = v17;
      *(void *)(a2 + 40) = v6;
      *(_OWORD *)(a2 + 48) = v35;
      *(void *)(a2 + 64) = v5;
      *(void *)(a2 + 72) = v15;
      *(void *)(a2 + 80) = v27;
      *(void *)(a2 + 88) = v2;
      *(void *)(a2 + 96) = v29;
      *(void *)(a2 + 104) = v30;
      return result;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
  }
  *(_OWORD *)a2 = xmmword_20D9D74C0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;

  return swift_bridgeObjectRelease();
}

uint64_t Source.Located.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for Source.Located();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 28));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v7 = v6;
  swift_bridgeObjectRetain();
  uint64_t v12 = MEMORY[0x210561880](a1, a2, a3);
  uint64_t v14 = v13;
  unint64_t v15 = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = 0xE000000000000000;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  unint64_t v16 = v15;
  if ((closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)((uint64_t)v7, v12, v14, a1, a2, (char)a4) & 1) == 0)
  {
    char v35 = a4 & 1;
    unint64_t v32 = v15;
    unint64_t v16 = v15;
    uint64_t v40 = v7;
    uint64_t v36 = v12;
    uint64_t v37 = v14;
    while (1)
    {
      unint64_t v15 = *v7;
      uint64_t v14 = v7[1];
      a4 = (char *)v7[2];
      unint64_t v17 = v7[3];
      a1 = v7[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = String.subscript.getter();
      a2 = v18;
      swift_bridgeObjectRelease();
      if (!((v12 ^ a2) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v37;
        swift_bridgeObjectRelease();
        unint64_t v15 = v32;
        unint64_t v7 = v40;
        uint64_t v12 = v36;
        goto LABEL_20;
      }
      uint64_t v19 = Substring.subscript.getter();
      unint64_t v41 = v20;
      uint64_t v42 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v16 = Substring.index(_:offsetBy:limitedBy:)();
      a2 = v21;
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0) {
        break;
      }
      unint64_t v7 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, (char *)a1);
      }
      unint64_t v23 = *(void *)(a1 + 16);
      unint64_t v22 = *(void *)(a1 + 24);
      if (v23 >= v22 >> 1) {
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, (char *)a1);
      }
      *(void *)(a1 + 16) = v23 + 1;
      uint64_t v24 = a1 + 80 * v23;
      *(unsigned char *)(v24 + 32) = 0;
      *(void *)(v24 + 40) = 0xD000000000000022;
      *(void *)(v24 + 48) = 0x800000020D9E0210;
      *(void *)(v24 + 56) = a4;
      *(void *)(v24 + 64) = a4;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(unsigned char *)(v24 + 104) = -1;
      v40[9] = a1;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      a1 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (a1 < 1)
      {
        unint64_t v16 = (unint64_t)a4;
        uint64_t v12 = v36;
        uint64_t v14 = v37;
      }
      else
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        a2 = Substring.index(_:offsetBy:limitedBy:)();
        a1 = v25;
        unint64_t v7 = v40;
        swift_bridgeObjectRelease();
        unint64_t v16 = (unint64_t)a4;
        uint64_t v12 = v36;
        uint64_t v14 = v37;
        if ((a1 & 1) == 0)
        {
          if (v17 >> 14 < a2 >> 14) {
            goto LABEL_36;
          }
          unint64_t v16 = a2;
LABEL_17:
          v7[2] = v16;
          _OWORD v7[3] = v17;
        }
      }
      a2 = v41;
      MEMORY[0x2105617C0](v42, v41);
      swift_bridgeObjectRelease();
      if (closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)((uint64_t)v7, v12, v14, v38, v39, v35))
      {
        unint64_t v15 = v32;
        goto LABEL_20;
      }
    }
    unint64_t v7 = v40;
    if (v17 >> 14 < v16 >> 14)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v12 = v36;
    uint64_t v14 = v37;
    goto LABEL_17;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (v15 >> 14 > v16 >> 14) {
    goto LABEL_37;
  }
  a2 = *((void *)&v43 + 1);
  a1 = v43;
  swift_bridgeObjectRelease();
  unint64_t v16 = v7[2];
  if (v15 >> 14 > v16 >> 14)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a4 + 2) + 1, 1, a4);
    goto LABEL_28;
  }
  uint64_t v26 = HIBYTE(*((void *)&v43 + 1)) & 0xFLL;
  if ((*((void *)&v43 + 1) & 0x2000000000000000) == 0) {
    uint64_t v26 = v43 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    if ((a5 & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  a4 = (char *)v7[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_39;
  }
LABEL_28:
  unint64_t v28 = *((void *)a4 + 2);
  unint64_t v27 = *((void *)a4 + 3);
  if (v28 >= v27 >> 1) {
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, a4);
  }
  *((void *)a4 + 2) = v28 + 1;
  unint64_t v29 = &a4[80 * v28];
  v29[32] = 1;
  *((void *)v29 + 5) = 0xD00000000000001BLL;
  *((void *)v29 + 6) = 0x800000020D9DFD90;
  *((void *)v29 + 7) = v15;
  *((void *)v29 + 8) = v16;
  *((void *)v29 + 9) = 1;
  *((void *)v29 + 10) = 0;
  *((void *)v29 + 11) = 0;
  *((void *)v29 + 12) = 0;
  v29[104] = 36;
  v7[9] = (unint64_t)a4;
  if (a5)
  {
LABEL_31:
    if ((specialized Parser.tryEat<A>(sequence:)(v12, v14) & 1) == 0)
    {
      *(void *)&long long v43 = String.init<A>(_:)();
      *((void *)&v43 + 1) = v30;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      char v46 = 3;
      Parser.errorAtCurrentPosition(_:)(&v43);
    }
  }
LABEL_34:
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = a1;
  a6[1] = a2;
  a6[2] = v15;
  a6[3] = v16;
  return result;
}

uint64_t closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  swift_bridgeObjectRetain();
  uint64_t v8 = String.subscript.getter();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  LOBYTE(v8) = specialized Sequence<>.starts<A>(with:)(a2, a3, v8, v10);
  swift_bridgeObjectRelease();
  if (v8) {
    return 1;
  }
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = 0;
  v23[3] = 0;
  char v24 = 3;
  swift_bridgeObjectRetain();
  uint64_t v11 = String.subscript.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 ^ v13) < 0x4000)
  {
    uint64_t v14 = (long long *)v23;
LABEL_4:
    Parser.errorAtCurrentPosition(_:)(v14);
    return 1;
  }
  if (a6)
  {
    v16._uint64_t countAndFlagsBits = 92;
    v16._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v16))
    {
      v25[0] = 2;
      memset(&v25[1], 0, 24);
      char v26 = 36;
      swift_bridgeObjectRetain();
      uint64_t v17 = String.subscript.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!((v17 ^ v19) >> 14))
      {
        uint64_t v14 = (long long *)v25;
        goto LABEL_4;
      }
    }
  }
  return 0;
}

uint64_t closure #1 in Parser.lexQuote()@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized Parser.tryEat<A>(sequence:)(20828, 0xE200000000000000);
  if ((result & 1) == 0)
  {
    if ((*(unsigned char *)(a1 + 56) & 4) != 0
      && (v26._uint64_t countAndFlagsBits = 34,
          v26._uint64_t object = (void *)0xE100000000000000,
          uint64_t result = Parser.tryEat(_:)(v26),
          (result & 1) != 0))
    {
      uint64_t result = Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(34, 0xE100000000000000, 1, (char *)1, 1, &v41);
      unint64_t v27 = v42;
      *a2 = v41;
      a2[1] = v27;
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    return result;
  }
  uint64_t v36 = a2;
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v8 = String.subscript.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v37 = v7;
  if ((v8 ^ v10) >= 0x4000)
  {
    unint64_t v6 = a1;
    uint64_t result = specialized Parser.tryEat<A>(sequence:)(17756, 0xE200000000000000);
    if ((result & 1) == 0)
    {
      unint64_t v38 = a1;
      while (1)
      {
        unint64_t v39 = v7;
        uint64_t v2 = *(void *)(a1 + 8);
        unint64_t v6 = *(void *)(a1 + 16);
        unint64_t v11 = *(void *)(a1 + 24);
        unint64_t v8 = *(void *)(a1 + 48);
        unint64_t v12 = *(char **)(a1 + 72);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = String.subscript.getter();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (!((v13 ^ v15) >> 14))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          a1 = v38;
          unint64_t v7 = v39;
          goto LABEL_27;
        }
        uint64_t v40 = Substring.subscript.getter();
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v7 = Substring.index(_:offsetBy:limitedBy:)();
        unint64_t v8 = v18;
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          break;
        }
        a1 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
        }
        unint64_t v20 = *((void *)v12 + 2);
        unint64_t v19 = *((void *)v12 + 3);
        if (v20 >= v19 >> 1) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v12);
        }
        *((void *)v12 + 2) = v20 + 1;
        unint64_t v21 = &v12[80 * v20];
        v21[32] = 0;
        *((void *)v21 + 5) = 0xD000000000000022;
        *((void *)v21 + 6) = 0x800000020D9E0210;
        *((void *)v21 + 7) = v6;
        *((void *)v21 + 8) = v6;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        v21[104] = -1;
        *(void *)(v38 + 72) = v12;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v22 >= 1)
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v8 = Substring.index(_:offsetBy:limitedBy:)();
          char v24 = v23;
          a1 = v38;
          swift_bridgeObjectRelease();
          unint64_t v7 = v6;
          if (v24) {
            goto LABEL_19;
          }
          if (v11 >> 14 < v8 >> 14) {
            goto LABEL_45;
          }
          unint64_t v7 = v8;
          goto LABEL_17;
        }
        unint64_t v7 = v6;
LABEL_19:
        MEMORY[0x2105617C0](v40, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        unint64_t v8 = String.subscript.getter();
        unint64_t v6 = v25;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v8 ^ v6) >= 0x4000)
        {
          unint64_t v6 = a1;
          uint64_t result = specialized Parser.tryEat<A>(sequence:)(17756, 0xE200000000000000);
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_27;
      }
      a1 = v38;
      if (v11 >> 14 < v7 >> 14)
      {
        __break(1u);
        goto LABEL_44;
      }
LABEL_17:
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v11;
      goto LABEL_19;
    }
  }
LABEL_27:
  if (v7 >> 14 < v37 >> 14)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v2 = v41;
  unint64_t v6 = v42;
  if ((*(unsigned char *)(a1 + 56) & 0x40) != 0)
  {
    uint64_t result = specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v41, v42);
    if (result)
    {
      unint64_t v8 = *(void *)(a1 + 72);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_31:
        unint64_t v29 = *(void *)(v8 + 16);
        unint64_t v28 = *(void *)(v8 + 24);
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, (char *)v8);
          unint64_t v8 = result;
        }
        *(void *)(v8 + 16) = v29 + 1;
        unint64_t v30 = v8 + 80 * v29;
        *(unsigned char *)(v30 + 32) = 1;
        *(void *)(v30 + 40) = 0xD000000000000041;
        *(void *)(v30 + 48) = 0x800000020D9DFCC0;
        *(void *)(v30 + 56) = v37;
        *(void *)(v30 + 64) = v7;
        *(void *)(v30 + 72) = 3;
        *(void *)(v30 + 80) = 0;
        *(void *)(v30 + 88) = 0;
        *(void *)(v30 + 96) = 0;
        *(unsigned char *)(v30 + 104) = 36;
        *(void *)(a1 + 72) = v8;
        goto LABEL_34;
      }
LABEL_46:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      unint64_t v8 = result;
      goto LABEL_31;
    }
  }
LABEL_34:
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    uint64_t v31 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v31 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v31)
    {
      uint64_t v32 = *(void *)(a1 + 72);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1, (char *)v32);
        uint64_t v32 = result;
      }
      unint64_t v34 = *(void *)(v32 + 16);
      unint64_t v33 = *(void *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, (char *)v32);
        uint64_t v32 = result;
      }
      *(void *)(v32 + 16) = v34 + 1;
      unint64_t v35 = v32 + 80 * v34;
      *(unsigned char *)(v35 + 32) = 1;
      *(void *)(v35 + 40) = 0xD00000000000001BLL;
      *(void *)(v35 + 48) = 0x800000020D9DFD90;
      *(void *)(v35 + 56) = v37;
      *(void *)(v35 + 64) = v7;
      *(void *)(v35 + 72) = 1;
      *(void *)(v35 + 80) = 0;
      *(void *)(v35 + 88) = 0;
      *(void *)(v35 + 96) = 0;
      *(unsigned char *)(v35 + 104) = 36;
      *(void *)(a1 + 72) = v32;
    }
  }
  *uint64_t v36 = v2;
  v36[1] = v6;
  return result;
}

void static SyntaxOptions.multilineCompilerLiteral.getter(void *a1@<X8>)
{
  *a1 = 64;
}

uint64_t specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0)
        {
          uint64_t v8 = v7;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v8 = _StringObject.sharedUTF8.getter();
          }
          int v9 = *(unsigned __int8 *)(v8 + v5);
          if (*(char *)(v8 + v5) < 0)
          {
            switch(__clz(v9 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v10 = (char *)(v5 + v8);
                goto LABEL_22;
              case 0x1Bu:
                uint64_t v13 = (char *)(v5 + v8);
                goto LABEL_26;
              case 0x1Cu:
                unint64_t v14 = (char *)(v5 + v8);
                goto LABEL_28;
              default:
                break;
            }
          }
LABEL_15:
          uint64_t v11 = 1;
          goto LABEL_16;
        }
        v16[0] = a1;
        v16[1] = v6;
        int v9 = *((unsigned __int8 *)v16 + v5);
        if ((*((char *)v16 + v5) & 0x80000000) == 0) {
          goto LABEL_15;
        }
        switch(__clz(v9 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v10 = (char *)v16 + v5;
LABEL_22:
            int v9 = v10[1] & 0x3F | ((v9 & 0x1F) << 6);
            uint64_t v11 = 2;
            break;
          case 0x1Bu:
            uint64_t v13 = (char *)v16 + v5;
LABEL_26:
            int v9 = ((v9 & 0xF) << 12) | ((v13[1] & 0x3F) << 6) | v13[2] & 0x3F;
            uint64_t v11 = 3;
            break;
          case 0x1Cu:
            unint64_t v14 = (char *)v16 + v5;
LABEL_28:
            int v9 = ((v9 & 0xF) << 18) | ((v14[1] & 0x3F) << 12) | ((v14[2] & 0x3F) << 6) | v14[3] & 0x3F;
            uint64_t v11 = 4;
            break;
          default:
            goto LABEL_15;
        }
      }
LABEL_16:
      uint64_t v12 = 1;
      if (v9 == 10 || v9 == 13) {
        return v12;
      }
      v5 += v11;
    }
    while (v5 < v2);
  }
  return 0;
}

uint64_t Parser.lexInterpolation()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v72 = v1[1];
  unint64_t v73 = v1[2];
  uint64_t v68 = v1[3];
  uint64_t v69 = *v1;
  char v67 = *((unsigned char *)v1 + 32);
  uint64_t v3 = v1[6];
  uint64_t v65 = v1[7];
  uint64_t v66 = v1[5];
  char v64 = *((unsigned char *)v1 + 64);
  uint64_t v4 = v1[9];
  swift_bridgeObjectRetain();
  uint64_t v71 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(31548, 0xE200000000000000) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v60 = v4;
  unint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v62 = v6;
  if ((v7 ^ v9) >= 0x4000)
  {
    uint64_t v74 = v2;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = String.subscript.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      LOBYTE(v14) = specialized Sequence<>.starts<A>(with:)(15997, 0xE200000000000000, v14, v16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v14) {
        break;
      }
      uint64_t v17 = (char *)v2[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = String.subscript.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      if (!((v18 ^ v20) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v2 = v74;
        break;
      }
      uint64_t v76 = Substring.subscript.getter();
      uint64_t v78 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v22 = v6;
      unint64_t v6 = Substring.index(_:offsetBy:limitedBy:)();
      char v24 = v23;
      uint64_t result = swift_bridgeObjectRelease();
      if (v24)
      {
        uint64_t v2 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
        }
        unint64_t v6 = v22;
        unint64_t v26 = *((void *)v17 + 2);
        unint64_t v25 = *((void *)v17 + 3);
        if (v26 >= v25 >> 1) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v26 + 1;
        unint64_t v27 = &v17[80 * v26];
        v27[32] = 0;
        *((void *)v27 + 5) = 0xD000000000000022;
        *((void *)v27 + 6) = 0x800000020D9E0210;
        *((void *)v27 + 7) = v22;
        *((void *)v27 + 8) = v22;
        *(_OWORD *)(v27 + 72) = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
        v27[104] = -1;
        v74[9] = (uint64_t)v17;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v28 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v28 < 1) {
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v29 = Substring.index(_:offsetBy:limitedBy:)();
        char v31 = v30;
        uint64_t result = swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_6;
        }
        if (v5 >> 14 < v29 >> 14) {
          goto LABEL_39;
        }
        unint64_t v6 = v29;
      }
      else
      {
        uint64_t v2 = v74;
        if (v5 >> 14 < v6 >> 14) {
          goto LABEL_37;
        }
      }
      v2[2] = v6;
      v2[3] = v5;
LABEL_6:
      MEMORY[0x2105617C0](v76, v78);
      swift_bridgeObjectRelease();
      unint64_t v5 = v2[3];
      swift_bridgeObjectRetain();
      uint64_t v11 = String.subscript.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v11 ^ v13) >> 14);
  }
  if (v6 >> 14 < v62 >> 14) {
    goto LABEL_38;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(15997, 0xE200000000000000) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = v60;
LABEL_24:
    uint64_t v33 = v2[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = specialized Collection.dropFirst(_:)(*(void *)(v4 + 16), v33);
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    int64_t v40 = v39 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v41 = v36 - 32;
    uint64_t v42 = v38;
    uint64_t v43 = v38;
LABEL_25:
    uint64_t v44 = v41 + 80 * v42;
    while (1)
    {
      if (v40 == v43)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *uint64_t v2 = v69;
        v2[1] = v72;
        v2[2] = v73;
        v2[3] = v68;
        *((unsigned char *)v2 + 32) = v67;
        v2[5] = v66;
        v2[6] = v71;
        v2[7] = v65;
        *((unsigned char *)v2 + 64) = v64;
        v2[9] = v4;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        return result;
      }
      if (v42 < v38 || v43 >= v40) {
        break;
      }
      int v45 = *(unsigned __int8 *)(v44 + 32);
      ++v43;
      v44 += 80;
      if (!v45)
      {
        uint64_t v77 = v34;
        uint64_t v79 = v33;
        uint64_t v75 = v41;
        uint64_t v59 = *(void *)(v44 - 24);
        uint64_t v61 = *(void *)(v44 - 40);
        uint64_t v46 = *(void *)(v44 - 8);
        uint64_t v57 = *(void *)(v44 - 32);
        uint64_t v58 = *(void *)(v44 - 16);
        uint64_t v47 = *(void *)v44;
        uint64_t v48 = *(void *)(v44 + 8);
        uint64_t v49 = *(void *)(v44 + 16);
        unsigned __int8 v50 = *(unsigned char *)(v44 + 24);
        swift_bridgeObjectRetain();
        uint64_t v63 = v46;
        uint64_t v51 = v46;
        uint64_t v52 = v47;
        outlined copy of ParseError?(v51, v47, v48, v49, v50);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
          uint64_t v4 = result;
        }
        unint64_t v54 = *(void *)(v4 + 16);
        unint64_t v53 = *(void *)(v4 + 24);
        uint64_t v55 = v4;
        if (v54 >= v53 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, (char *)v4);
          uint64_t v55 = result;
        }
        *(void *)(v55 + 16) = v54 + 1;
        uint64_t v4 = v55;
        unint64_t v56 = v55 + 80 * v54;
        *(unsigned char *)(v56 + 32) = 0;
        *(void *)(v56 + 40) = v61;
        *(void *)(v56 + 48) = v57;
        *(void *)(v56 + 56) = v59;
        *(void *)(v56 + 64) = v58;
        *(void *)(v56 + 72) = v63;
        *(void *)(v56 + 80) = v52;
        *(void *)(v56 + 88) = v48;
        *(void *)(v56 + 96) = v49;
        *(unsigned char *)(v56 + 104) = v50;
        uint64_t v42 = v43;
        uint64_t v34 = v77;
        uint64_t v33 = v79;
        uint64_t v41 = v75;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v32 = v2[2];
  if (v32 >> 14 >= v73 >> 14)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0xE000000000000000;
    *(void *)(a1 + 16) = v73;
    *(void *)(a1 + 24) = v32;
    return result;
  }
LABEL_40:
  __break(1u);
  return result;
}

void *Parser.lexQuote()@<X0>(void *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 16);
  uint64_t result = a1(&v8, v2);
  uint64_t v6 = v9;
  if (v9)
  {
    unint64_t v7 = *(void *)(v2 + 16);
    if (v7 >> 14 < v4 >> 14)
    {
      __break(1u);
    }
    else
    {
      *a2 = v8;
      a2[1] = v6;
      a2[2] = v4;
      a2[3] = v7;
    }
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t closure #1 in Parser.lexComment()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)result;
  if ((*(unsigned char *)(result + 32) & 1) == 0)
  {
    uint64_t result = specialized Parser.tryEat<A>(sequence:)(2309928, 0xE300000000000000);
    if (result)
    {
      unint64_t v4 = v2;
      uint64_t v5 = 41;
      uint64_t v6 = 0xE100000000000000;
LABEL_7:
      uint64_t result = specialized Parser.lexUntil(_:)(v4, v5, v6, &v34);
      unint64_t v8 = v35;
      *a2 = v34;
      a2[1] = v8;
      return result;
    }
  }
  uint64_t v7 = v2[7];
  if ((v7 & 8) != 0)
  {
    uint64_t result = specialized Parser.tryEat<A>(sequence:)(10799, 0xE200000000000000);
    if (result)
    {
      unint64_t v4 = v2;
      uint64_t v5 = 12074;
      uint64_t v6 = 0xE200000000000000;
      goto LABEL_7;
    }
    uint64_t v7 = v2[7];
  }
  if ((v7 & 2) == 0
    || (v9._uint64_t countAndFlagsBits = 35,
        v9._uint64_t object = (void *)0xE100000000000000,
        uint64_t result = Parser.tryEat(_:)(v9),
        (result & 1) == 0))
  {
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  char v30 = a2;
  unint64_t v10 = v2[2];
  uint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  uint64_t result = closure #1 in closure #1 in Parser.lexComment()((uint64_t)v2);
  unint64_t v31 = v10;
  if ((result & 1) == 0)
  {
    unint64_t v11 = v10;
    unint64_t v32 = v2;
    while (1)
    {
      unint64_t v10 = v2[2];
      unint64_t v12 = v2[3];
      unint64_t v13 = (char *)v2[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = String.subscript.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      if (!((v14 ^ v16) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v11;
        goto LABEL_30;
      }
      uint64_t v17 = Substring.subscript.getter();
      uint64_t v33 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v19 = Substring.index(_:offsetBy:limitedBy:)();
      char v21 = v20;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
      }
      unint64_t v23 = *((void *)v13 + 2);
      unint64_t v22 = *((void *)v13 + 3);
      if (v23 >= v22 >> 1) {
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v13);
      }
      *((void *)v13 + 2) = v23 + 1;
      char v24 = &v13[80 * v23];
      v24[32] = 0;
      *((void *)v24 + 5) = 0xD000000000000022;
      *((void *)v24 + 6) = 0x800000020D9E0210;
      *((void *)v24 + 7) = v10;
      *((void *)v24 + 8) = v10;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      v24[104] = -1;
      v32[9] = v13;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v25 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v25 < 1)
      {
        uint64_t v2 = v32;
      }
      else
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v26 = Substring.index(_:offsetBy:limitedBy:)();
        char v28 = v27;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v2 = v32;
        if ((v28 & 1) == 0)
        {
          if (v12 >> 14 < v26 >> 14) {
            goto LABEL_33;
          }
          unint64_t v10 = v26;
LABEL_28:
          v2[2] = v10;
          v2[3] = v12;
        }
      }
      MEMORY[0x2105617C0](v17, v33);
      swift_bridgeObjectRelease();
      uint64_t result = closure #1 in closure #1 in Parser.lexComment()((uint64_t)v2);
      unint64_t v11 = v10;
      if (result) {
        goto LABEL_30;
      }
    }
    if (v12 >> 14 < v19 >> 14)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    unint64_t v10 = v19;
    uint64_t v2 = v32;
    goto LABEL_28;
  }
LABEL_30:
  if (v10 >> 14 < v31 >> 14) {
    goto LABEL_34;
  }
  unint64_t v29 = v35;
  *char v30 = v34;
  v30[1] = v29;
  return result;
}

BOOL closure #1 in closure #1 in Parser.lexComment()(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = String.subscript.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 ^ v4) >= 0x4000)
  {
    switch(*(unsigned char *)(a1 + 64))
    {
      case 1:
        uint64_t v7 = 10;
        goto LABEL_13;
      case 2:
        uint64_t v7 = 2573;
        unint64_t v8 = 0xE200000000000000;
        goto LABEL_14;
      case 3:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_20D9D74F0;
        *(void *)(inited + 32) = 13;
        *(void *)(inited + 40) = 0xE100000000000000;
        *(void *)(inited + 48) = 10;
        *(void *)(inited + 56) = 0xE100000000000000;
        *(void *)(inited + 64) = 2573;
        *(void *)(inited + 72) = 0xE200000000000000;
        specialized Parser.tryEat<A>(anyOf:)(inited);
        uint64_t v5 = v10;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v5) {
          return v5;
        }
        swift_bridgeObjectRelease();
        return 1;
      case 4:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v11 = String.subscript.getter();
        if ((v11 ^ v12) >> 14)
        {
          unint64_t v13 = Substring.subscript.getter();
          unint64_t v15 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          unint64_t v16 = specialized Collection.first.getter(v13, v15);
          if ((v16 & 0x100000000) != 0)
          {
            __break(1u);
            JUMPOUT(0x20D9822B4);
          }
          int v17 = v16;
          swift_bridgeObjectRelease();
          if ((v17 - 14) > 0xFFFFFFFB || (v17 - 8232) < 2 || v17 == 133)
          {
            uint64_t v5 = 1;
            Parser.advance(_:)(1);
          }
          else
          {
            return 0;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return 0;
        }
        return v5;
      case 5:
        uint64_t v7 = 0;
        goto LABEL_13;
      default:
        uint64_t v7 = 13;
LABEL_13:
        unint64_t v8 = 0xE100000000000000;
LABEL_14:
        BOOL result = Parser.tryEat(_:)(*(Swift::String *)&v7);
        break;
    }
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t Parser.lexMatchingOption()@<X0>(void *a1@<X8>)
{
  unint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  unint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(char **)(v1 + 24);
  LOBYTE(v61) = *(unsigned char *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 48);
  unint64_t v59 = *(void *)(v1 + 56);
  uint64_t v60 = *(void *)(v1 + 40);
  LOBYTE(v58) = *(unsigned char *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v62 = v5;
  uint64_t v9 = String.subscript.getter();
  uint64_t countAndFlagsBits = v10;
  if (!((v9 ^ v12) >> 14))
  {
    uint64_t v57 = v3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  uint64_t object = Substring.subscript.getter();
  uint64_t v17 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1);
  if (object == 105 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 0;
  }
  else if (object == 74 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 1;
  }
  else if (object == 109 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 2;
  }
  else
  {
    if (object != 110 || v17 != 0xE100000000000000) {
      goto LABEL_34;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = 3;
  }
LABEL_20:
  while (1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v32 = *(void *)(v1 + 16);
    if (v32 >> 14 >= v6 >> 14) {
      break;
    }
    __break(1u);
    while (1)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
LABEL_45:
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 5;
        goto LABEL_20;
      }
      uint64_t v57 = v3;
      if (object == 120 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      uint64_t v64 = v8;
      uint64_t v33 = v1;
      unint64_t v3 = a1;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      if (object == 119 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 8;
LABEL_58:
        a1 = v3;
        uint64_t v1 = v33;
        uint64_t v8 = v64;
        goto LABEL_20;
      }
      if (object == 68 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 9;
        goto LABEL_58;
      }
      if (object == 80 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 10;
        goto LABEL_58;
      }
      if (object == 83 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 11;
        goto LABEL_58;
      }
      if (object == 87 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 12;
        goto LABEL_58;
      }
      if (object == 121 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v35._uint64_t countAndFlagsBits = 123;
        v35._uint64_t object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v35))
        {
          long long v71 = xmmword_20D9D7500;
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          char v74 = 3;
          uint64_t v38 = &v71;
          goto LABEL_87;
        }
        uint64_t v17 = *(void *)(v1 + 16);
        Swift::String_optional v36 = Parser.tryEat()();
        if (!v36.value._object) {
          goto LABEL_85;
        }
        unint64_t v37 = *(void *)(v1 + 16);
        if (v37 >> 14 < (unint64_t)v17 >> 14)
        {
          __break(1u);
        }
        else
        {
          uint64_t countAndFlagsBits = v36.value._countAndFlagsBits;
          uint64_t object = (uint64_t)v36.value._object;
          if (v36.value._countAndFlagsBits == 125 && v36.value._object == (void *)0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_85:
            v65[0] = 0xD000000000000011;
            v65[1] = 0x800000020D9DFFE0;
            v65[2] = 0;
            v65[3] = 0;
            char v66 = 3;
            uint64_t v38 = (long long *)v65;
LABEL_87:
            Parser.errorAtCurrentPosition(_:)(v38);
            uint64_t countAndFlagsBits = 13;
LABEL_88:
            a1 = v3;
            uint64_t v8 = v64;
            goto LABEL_20;
          }
          if (v36.value._countAndFlagsBits == 119 && v36.value._object == (void *)0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            uint64_t countAndFlagsBits = 14;
LABEL_116:
            v46._uint64_t countAndFlagsBits = 125;
            v46._uint64_t object = (void *)0xE100000000000000;
            if (Parser.tryEat(_:)(v46)) {
              goto LABEL_58;
            }
            long long v67 = xmmword_20D9D7510;
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            char v70 = 3;
            uint64_t v1 = v33;
            Parser.errorAtCurrentPosition(_:)(&v67);
            goto LABEL_88;
          }
          if (v36.value._countAndFlagsBits == 103 && v36.value._object == (void *)0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_115:
            uint64_t countAndFlagsBits = 13;
            goto LABEL_116;
          }
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(51);
          v40._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v40._uint64_t object = (void *)0x800000020D9DFA70;
          String.append(_:)(v40);
          Character.write<A>(to:)();
          v41._uint64_t countAndFlagsBits = 0xD000000000000016;
          v41._uint64_t object = (void *)0x800000020D9DFA90;
          String.append(_:)(v41);
          unint64_t v59 = 0xE000000000000000;
          uint64_t v60 = 0;
          uint64_t v42 = *(char **)(v1 + 72);
          swift_bridgeObjectRetain();
          unint64_t v62 = v42;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_112:
            unint64_t v44 = *((void *)v62 + 2);
            unint64_t v43 = *((void *)v62 + 3);
            int64_t v61 = v44 + 1;
            unint64_t v58 = v44;
            if (v44 >= v43 >> 1) {
              unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v61, 1, v62);
            }
            *((void *)v62 + 2) = v61;
            int v45 = &v62[80 * v58];
            v45[32] = 1;
            *((void *)v45 + 5) = v60;
            *((void *)v45 + 6) = v59;
            *((void *)v45 + 7) = v17;
            *((void *)v45 + 8) = v37;
            *((void *)v45 + 9) = countAndFlagsBits;
            *((void *)v45 + 10) = object;
            *((void *)v45 + 11) = 0;
            *((void *)v45 + 12) = 0;
            v45[104] = 16;
            swift_bridgeObjectRelease_n();
            *(void *)(v33 + 72) = v62;
            goto LABEL_115;
          }
        }
        unint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v62 + 2) + 1, 1, v62);
        goto LABEL_112;
      }
      if (object == 88 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 15;
        goto LABEL_58;
      }
      if (object == 117 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 16;
        goto LABEL_58;
      }
      if (object == 98 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 17;
        goto LABEL_58;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v8 = v64;
      if (v39)
      {
        uint64_t countAndFlagsBits = 17;
        goto LABEL_20;
      }
LABEL_3:
      uint64_t object = *(void *)(v1 + 72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = (char *)v8;
      specialized Collection.dropFirst(_:)(*(void *)(v8 + 16), object);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      unint64_t v3 = (void *)(v18 >> 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t countAndFlagsBits = v15 - 32;
      uint64_t v19 = v17;
      uint64_t v8 = v17;
LABEL_4:
      uint64_t v20 = countAndFlagsBits + 80 * v19;
      while (1)
      {
        if (v3 == (void *)v8)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_unknownObjectRelease_n();
          *(void *)uint64_t v1 = v57;
          *(void *)(v1 + 8) = v4;
          *(void *)(v1 + 16) = v6;
          *(void *)(v1 + 24) = v62;
          *(unsigned char *)(v1 + 32) = v61;
          *(void *)(v1 + 40) = v60;
          *(void *)(v1 + 48) = v7;
          *(void *)(v1 + 56) = v59;
          *(unsigned char *)(v1 + 64) = v58;
          *(void *)(v1 + 72) = v63;
          a1[1] = 0;
          a1[2] = 0;
          *a1 = 20;
          return result;
        }
        if (v19 < v17 || v8 >= (uint64_t)v3) {
          break;
        }
        int v21 = *(unsigned __int8 *)(v20 + 32);
        ++v8;
        v20 += 80;
        if (!v21)
        {
          uint64_t v52 = v7;
          uint64_t v53 = v4;
          unint64_t v54 = v6;
          uint64_t v55 = v1;
          unint64_t v56 = a1;
          uint64_t v48 = *(void *)(v20 - 24);
          uint64_t v49 = *(void *)(v20 - 40);
          uint64_t v22 = *(void *)(v20 - 8);
          uint64_t v47 = *(void *)(v20 - 16);
          uint64_t v24 = *(void *)v20;
          uint64_t v23 = *(void *)(v20 + 8);
          uint64_t v25 = *(void *)(v20 + 16);
          unsigned __int8 v26 = *(unsigned char *)(v20 + 24);
          uint64_t v50 = *(void *)(v20 - 32);
          swift_bridgeObjectRetain();
          outlined copy of ParseError?(v22, v24, v23, v25, v26);
          uint64_t v51 = countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v63 + 2) + 1, 1, v63);
          }
          unint64_t v28 = *((void *)v63 + 2);
          unint64_t v27 = *((void *)v63 + 3);
          uint64_t object = v28 + 1;
          if (v28 >= v27 >> 1) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v63);
          }
          *((void *)v63 + 2) = object;
          unint64_t v29 = &v63[80 * v28];
          v29[32] = 0;
          uint64_t countAndFlagsBits = v51;
          *((void *)v29 + 5) = v49;
          *((void *)v29 + 6) = v50;
          *((void *)v29 + 7) = v48;
          *((void *)v29 + 8) = v47;
          *((void *)v29 + 9) = v22;
          *((void *)v29 + 10) = v24;
          *((void *)v29 + 11) = v23;
          *((void *)v29 + 12) = v25;
          v29[104] = v26;
          uint64_t v19 = v8;
          uint64_t v1 = v55;
          a1 = v56;
          uint64_t v4 = v53;
          unint64_t v6 = v54;
          uint64_t v7 = v52;
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_34:
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_35;
      }
      if (object == 115 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = 4;
        goto LABEL_20;
      }
      if (object == 85 && v17 == 0xE100000000000000) {
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v64;
LABEL_51:
    v34._uint64_t countAndFlagsBits = 120;
    v34._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v34)) {
      uint64_t countAndFlagsBits = 7;
    }
    else {
      uint64_t countAndFlagsBits = 6;
    }
  }
  *a1 = countAndFlagsBits;
  a1[1] = v6;
  a1[2] = v32;
  return result;
}

double Parser.lexMatchingOptionSequence()@<D0>(unint64_t *a1@<X8>)
{
  unint64_t v4 = v1[1];
  unint64_t v5 = v1[2];
  unint64_t v6 = (char *)v1[6];
  unint64_t v7 = v1[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = String.subscript.getter();
  if ((v8 ^ v9) >> 14)
  {
    uint64_t v10 = Substring.subscript.getter();
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    if (v10 == 41 && v11 == (char *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v14 = MEMORY[0x263F8EE78];
      a1[2] = 1;
      a1[3] = v14;
      a1[4] = 0;
      a1[5] = 0;
      a1[6] = 1;
      a1[7] = v14;
      return result;
    }
    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_9;
    }
  }
  v15._uint64_t countAndFlagsBits = 94;
  v15._uint64_t object = (void *)0xE100000000000000;
  BOOL v52 = Parser.tryEat(_:)(v15);
  if (v52)
  {
    unint64_t v51 = v1[2];
    if (v51 >> 14 < v5 >> 14)
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      goto LABEL_19;
    }
    unint64_t v53 = v5;
  }
  else
  {
    unint64_t v53 = 0;
    unint64_t v51 = 0;
  }
  Parser.lexMatchingOption()(&v56);
  char v16 = v56;
  unint64_t v6 = (char *)MEMORY[0x263F8EE78];
  if (v56 != 20)
  {
    long long v27 = v57;
    do
    {
      long long v54 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v29 = *((void *)v6 + 2);
      unint64_t v28 = *((void *)v6 + 3);
      long long v30 = v54;
      if (v29 >= v28 >> 1)
      {
        unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v6);
        long long v30 = v54;
        unint64_t v6 = v32;
      }
      *((void *)v6 + 2) = v29 + 1;
      unint64_t v31 = &v6[24 * v29];
      v31[32] = v16;
      *(_OWORD *)(v31 + 40) = v30;
      Parser.lexMatchingOption()(&v56);
      char v16 = v56;
      long long v27 = v57;
    }
    while (v56 != 20);
  }
  unint64_t v4 = v1[2];
  v17._uint64_t countAndFlagsBits = 45;
  v17._uint64_t object = (void *)0xE100000000000000;
  BOOL v18 = Parser.tryEat(_:)(v17);
  if (!v18)
  {
    unint64_t v24 = 0;
    unint64_t v26 = 0;
    uint64_t v23 = (char *)MEMORY[0x263F8EE78];
    unint64_t v25 = v53;
    goto LABEL_32;
  }
  BOOL v50 = v18;
  unint64_t v7 = v1[2];
  unint64_t v2 = v53;
  if (v7 >> 14 < v4 >> 14) {
    goto LABEL_57;
  }
  if (!v52) {
    goto LABEL_22;
  }
  uint64_t v11 = (char *)v1[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_58;
  }
LABEL_19:
  unint64_t v20 = *((void *)v11 + 2);
  unint64_t v19 = *((void *)v11 + 3);
  if (v20 >= v19 >> 1) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v11);
  }
  *((void *)v11 + 2) = v20 + 1;
  int v21 = &v11[80 * v20];
  v21[32] = 1;
  *((void *)v21 + 5) = 0xD000000000000031;
  *((void *)v21 + 6) = 0x800000020D9DFA10;
  *((void *)v21 + 7) = v2;
  *((void *)v21 + 8) = v51;
  *((void *)v21 + 9) = 6;
  *((void *)v21 + 10) = 0;
  *((void *)v21 + 11) = 0;
  *((void *)v21 + 12) = 0;
  v21[104] = 36;
  v1[9] = v11;
LABEL_22:
  unint64_t v47 = v7;
  unint64_t v48 = v4;
  uint64_t v49 = a1;
  Parser.lexMatchingOption()(&v56);
  unsigned __int8 v22 = v56;
  uint64_t v23 = (char *)MEMORY[0x263F8EE78];
  if (v56 != 20)
  {
    uint64_t v34 = *((void *)&v57 + 1);
    uint64_t v33 = v57;
    while (v22 - 15 >= 3)
    {
      if (v22 - 13 <= 1)
      {
        Swift::String v35 = (char *)v1[9];
        uint64_t v55 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, v35);
        }
        unint64_t v37 = *((void *)v35 + 2);
        unint64_t v42 = *((void *)v35 + 3);
        unint64_t v38 = v37 + 1;
        unint64_t v40 = 0xD00000000000002FLL;
        unint64_t v39 = 0x800000020D9DF830;
        if (v37 >= v42 >> 1) {
          Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v37 + 1, 1, v35);
        }
        uint64_t v41 = 11;
        goto LABEL_48;
      }
LABEL_49:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
      }
      unint64_t v45 = *((void *)v23 + 2);
      unint64_t v44 = *((void *)v23 + 3);
      if (v45 >= v44 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v23);
      }
      *((void *)v23 + 2) = v45 + 1;
      Swift::String v46 = &v23[24 * v45];
      v46[32] = v22;
      *((void *)v46 + 5) = v33;
      *((void *)v46 + 6) = v34;
      Parser.lexMatchingOption()(&v56);
      unsigned __int8 v22 = v56;
      uint64_t v34 = *((void *)&v57 + 1);
      uint64_t v33 = v57;
      if (v56 == 20) {
        goto LABEL_23;
      }
    }
    Swift::String v35 = (char *)v1[9];
    uint64_t v55 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, v35);
    }
    unint64_t v37 = *((void *)v35 + 2);
    unint64_t v36 = *((void *)v35 + 3);
    unint64_t v38 = v37 + 1;
    unint64_t v39 = 0x800000020D9DF800;
    if (v37 >= v36 >> 1) {
      Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v35);
    }
    unint64_t v40 = 0xD00000000000002CLL;
    uint64_t v41 = 12;
LABEL_48:
    *((void *)v35 + 2) = v38;
    unint64_t v43 = &v35[80 * v37];
    v43[32] = 1;
    *((void *)v43 + 5) = v40;
    *((void *)v43 + 6) = v39;
    *((void *)v43 + 7) = v33;
    *((void *)v43 + 8) = v34;
    *((void *)v43 + 9) = v41;
    *((void *)v43 + 10) = 0;
    *((void *)v43 + 11) = 0;
    *((void *)v43 + 12) = 0;
    v43[104] = 36;
    v1[9] = v35;
    uint64_t v23 = v55;
    goto LABEL_49;
  }
LABEL_23:
  unint64_t v24 = v48;
  a1 = v49;
  unint64_t v25 = v53;
  unint64_t v26 = v47;
  BOOL v18 = v50;
LABEL_32:
  if (v52 || v18 || *((void *)v6 + 2))
  {
    *a1 = v25;
    a1[1] = v51;
    a1[2] = !v52;
    a1[3] = (unint64_t)v6;
    a1[4] = v24;
    a1[5] = v26;
    a1[6] = !v18;
    a1[7] = (unint64_t)v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double result = 0.0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t Parser.lexChangeMatchingOptionAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  char v7 = *((unsigned char *)v1 + 32);
  uint64_t v8 = v1[6];
  uint64_t v55 = v1[7];
  uint64_t v57 = v1[5];
  char v53 = *((unsigned char *)v1 + 64);
  uint64_t v9 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000) & 1) != 0
    && (Parser.lexMatchingOptionSequence()((unint64_t *)&v60), (uint64_t v10 = v62) != 0))
  {
    long long v11 = v60;
    char v12 = v61;
    uint64_t v13 = v64;
    uint64_t v54 = v63;
    char v56 = v65;
    uint64_t v58 = v66;
    v14._uint64_t countAndFlagsBits = 41;
    v14._uint64_t object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v14))
    {
      long long v60 = xmmword_20D9D7520;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      LOBYTE(v63) = 3;
      Parser.errorAtCurrentPosition(_:)(&v60);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v11;
    *(unsigned char *)(a1 + 16) = v12 & 1;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v54;
    *(void *)(a1 + 40) = v13;
    *(unsigned char *)(a1 + 48) = v56 & 1;
    *(void *)(a1 + 56) = v58;
  }
  else
  {
    char v50 = v7;
    uint64_t v51 = v6;
    uint64_t v52 = v5;
    uint64_t v16 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v9 + 16), v16);
    uint64_t v59 = v8;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    int64_t v22 = v21 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v23 = v18 - 32;
    uint64_t v24 = v20;
    uint64_t v25 = v20;
LABEL_7:
    uint64_t v26 = v23 + 80 * v24;
    while (1)
    {
      if (v22 == v25)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        uint64_t *v1 = v4;
        v1[1] = v3;
        v1[2] = v52;
        v1[3] = v51;
        *((unsigned char *)v1 + 32) = v50;
        v1[5] = v57;
        v1[6] = v8;
        v1[7] = v55;
        *((unsigned char *)v1 + 64) = v53;
        v1[9] = v9;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        return result;
      }
      if (v24 < v20 || v25 >= v22) {
        break;
      }
      int v27 = *(unsigned __int8 *)(v26 + 32);
      ++v25;
      v26 += 80;
      if (!v27)
      {
        uint64_t v48 = v4;
        uint64_t v49 = v3;
        uint64_t v45 = a1;
        uint64_t v41 = *(void *)(v26 - 24);
        uint64_t v42 = *(void *)(v26 - 40);
        uint64_t v28 = *(void *)(v26 - 8);
        uint64_t v39 = *(void *)(v26 - 32);
        uint64_t v40 = *(void *)(v26 - 16);
        uint64_t v30 = *(void *)v26;
        uint64_t v29 = *(void *)(v26 + 8);
        uint64_t v31 = *(void *)(v26 + 16);
        uint64_t v43 = v9;
        unsigned __int8 v32 = *(unsigned char *)(v26 + 24);
        swift_bridgeObjectRetain();
        uint64_t v46 = v28;
        uint64_t v47 = v30;
        uint64_t v33 = v30;
        uint64_t v34 = v29;
        unsigned __int8 v44 = v32;
        unsigned __int8 v35 = v32;
        uint64_t v9 = v43;
        outlined copy of ParseError?(v28, v33, v29, v31, v35);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, (char *)v43);
          uint64_t v9 = result;
        }
        unint64_t v37 = *(void *)(v9 + 16);
        unint64_t v36 = *(void *)(v9 + 24);
        a1 = v45;
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, (char *)v9);
          uint64_t v9 = result;
        }
        *(void *)(v9 + 16) = v37 + 1;
        unint64_t v38 = v9 + 80 * v37;
        *(unsigned char *)(v38 + 32) = 0;
        *(void *)(v38 + 40) = v42;
        *(void *)(v38 + 48) = v39;
        *(void *)(v38 + 56) = v41;
        *(void *)(v38 + 64) = v40;
        *(void *)(v38 + 72) = v46;
        *(void *)(v38 + 80) = v47;
        *(void *)(v38 + 88) = v34;
        *(void *)(v38 + 96) = v31;
        *(unsigned char *)(v38 + 104) = v44;
        uint64_t v24 = v25;
        uint64_t v4 = v48;
        uint64_t v3 = v49;
        uint64_t v8 = v59;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t Parser.lexExplicitPCRE2GroupStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  char v7 = *((unsigned char *)v1 + 32);
  uint64_t v8 = v1[6];
  uint64_t v56 = v1[7];
  uint64_t v57 = v1[5];
  char v55 = *((unsigned char *)v1 + 64);
  uint64_t v9 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000))
  {
    if (specialized Parser.tryEat<A>(sequence:)(0x3A63696D6F7461, 0xE700000000000000))
    {
      uint64_t v10 = 3;
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v10;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(void *)(a1 + 72) = 0;
      *(unsigned char *)(a1 + 80) = 3;
      return result;
    }
    if (specialized Parser.tryEat<A>(sequence:)(979463280, 0xE400000000000000))
    {
      uint64_t v10 = 4;
      goto LABEL_11;
    }
    if (specialized Parser.tryEat<A>(sequence:)(0xD000000000000013, 0x800000020D9E1B60))
    {
      uint64_t v10 = 4;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979463278, 0xE400000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000013, 0x800000020D9E1B80) & 1) != 0)
    {
      uint64_t v10 = 5;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979528816, 0xE400000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000014, 0x800000020D9E1BA0) & 1) != 0)
    {
      uint64_t v10 = 7;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979528814, 0xE400000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000014, 0x800000020D9E1BC0) & 1) != 0)
    {
      uint64_t v10 = 8;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x3A616C70616ELL, 0xE600000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD00000000000001ELL, 0x800000020D9E1BE0) & 1) != 0)
    {
      uint64_t v10 = 6;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x3A626C70616ELL, 0xE600000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD00000000000001FLL, 0x800000020D9E1C00) & 1) != 0)
    {
      uint64_t v10 = 9;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(3830387, 0xE300000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0x725F747069726373, 0xEB000000003A6E75) & 1) != 0)
    {
      uint64_t v10 = 10;
      goto LABEL_11;
    }
    if (specialized Parser.tryEat<A>(sequence:)(980579169, 0xE400000000000000))
    {
      uint64_t v10 = 11;
      goto LABEL_11;
    }
    if (specialized Parser.tryEat<A>(sequence:)(0xD000000000000012, 0x800000020D9E1C20))
    {
      uint64_t v10 = 11;
      goto LABEL_11;
    }
  }
  uint64_t v53 = v3;
  uint64_t v54 = a1;
  char v52 = v7;
  uint64_t v51 = v5;
  uint64_t v12 = v8;
  uint64_t v13 = v4;
  uint64_t v14 = v1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.dropFirst(_:)(*(void *)(v9 + 16), v14);
  uint64_t v49 = v15;
  uint64_t v17 = v16;
  int64_t v19 = v18 >> 1;
  uint64_t v20 = v6;
  uint64_t v21 = v53;
  uint64_t v22 = v54;
  swift_bridgeObjectRetain();
  uint64_t result = swift_unknownObjectRetain();
  uint64_t v23 = v49 - 32;
  uint64_t v24 = v17;
  uint64_t v25 = v17;
LABEL_32:
  uint64_t v26 = v23 + 80 * v24;
  while (1)
  {
    if (v19 == v25)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t *v1 = v13;
      v1[1] = v21;
      v1[2] = v20;
      v1[3] = v51;
      *((unsigned char *)v1 + 32) = v52;
      v1[5] = v57;
      v1[6] = v12;
      v1[7] = v56;
      *((unsigned char *)v1 + 64) = v55;
      v1[9] = v9;
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(unsigned char *)(v22 + 80) = -1;
      return result;
    }
    if (v24 < v17 || v25 >= v19) {
      break;
    }
    int v27 = *(unsigned __int8 *)(v26 + 32);
    ++v25;
    v26 += 80;
    if (!v27)
    {
      uint64_t v46 = v23;
      uint64_t v47 = v20;
      uint64_t v48 = v13;
      uint64_t v50 = v12;
      uint64_t v42 = *(void *)(v26 - 24);
      uint64_t v43 = *(void *)(v26 - 40);
      uint64_t v40 = *(void *)(v26 - 32);
      uint64_t v41 = *(void *)(v26 - 16);
      uint64_t v44 = v9;
      uint64_t v28 = *(void *)(v26 - 8);
      uint64_t v29 = *(void *)v26;
      uint64_t v30 = *(void *)(v26 + 8);
      uint64_t v31 = *(void *)(v26 + 16);
      unsigned __int8 v32 = *(unsigned char *)(v26 + 24);
      swift_bridgeObjectRetain();
      uint64_t v45 = v28;
      uint64_t v33 = v28;
      uint64_t v34 = v44;
      outlined copy of ParseError?(v33, v29, v30, v31, v32);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
        uint64_t v34 = result;
      }
      uint64_t v35 = v34;
      unint64_t v36 = *(void *)(v34 + 16);
      uint64_t v37 = v35;
      unint64_t v38 = *(void *)(v35 + 24);
      if (v36 >= v38 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v36 + 1, 1, (char *)v37);
        uint64_t v37 = result;
      }
      *(void *)(v37 + 16) = v36 + 1;
      unint64_t v39 = v37 + 80 * v36;
      uint64_t v9 = v37;
      *(unsigned char *)(v39 + 32) = 0;
      *(void *)(v39 + 40) = v43;
      *(void *)(v39 + 48) = v40;
      *(void *)(v39 + 56) = v42;
      *(void *)(v39 + 64) = v41;
      *(void *)(v39 + 72) = v45;
      *(void *)(v39 + 80) = v29;
      *(void *)(v39 + 88) = v30;
      *(void *)(v39 + 96) = v31;
      *(unsigned char *)(v39 + 104) = v32;
      uint64_t v24 = v25;
      uint64_t v22 = v54;
      uint64_t v21 = v53;
      uint64_t v12 = v50;
      uint64_t v20 = v47;
      uint64_t v13 = v48;
      uint64_t v23 = v46;
      goto LABEL_32;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, void *a5@<X8>)
{
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  uint64_t v9 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = String.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 ^ v12) < 0x4000
    || (swift_bridgeObjectRetain(),
        uint64_t v13 = String.subscript.getter(),
        unint64_t v15 = v14,
        char v74 = a5,
        swift_bridgeObjectRelease(),
        LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)(a2, a3, v13, v15),
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    long long v78 = a4;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    char v81 = 26;
    uint64_t result = Parser.errorAtCurrentPosition(_:)(&v78);
    goto LABEL_4;
  }
  uint64_t v72 = a2;
  int64_t v19 = (char *)v9[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = String.subscript.getter();
  if (!((v20 ^ v21) >> 14)) {
    goto LABEL_50;
  }
  uint64_t v22 = Substring.subscript.getter();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v25 = String.index(after:)();
  swift_bridgeObjectRelease();
  if (v25 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_51:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  char v26 = Character.isNumber.getter();
  swift_bridgeObjectRelease();
  if (v26)
  {
    a2 = a4;
    *(void *)&long long v78 = 0;
    *((void *)&v78 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    uint64_t v27 = 8 * (char)a4;
    v28._uint64_t countAndFlagsBits = *(void *)&aGroupNacallout[v27];
    v28._uint64_t object = *(void **)&aGroupNacallout[v27 + 24];
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t object = (void *)0x800000020D9DF860;
    v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v29);
    uint64_t v7 = 0;
    uint64_t v22 = 0xE000000000000000;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_11:
      unint64_t v31 = *((void *)v19 + 2);
      unint64_t v30 = *((void *)v19 + 3);
      if (v31 >= v30 >> 1) {
        int64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v19);
      }
      *((void *)v19 + 2) = v31 + 1;
      unsigned __int8 v32 = &v19[80 * v31];
      v32[32] = 1;
      *((void *)v32 + 5) = v7;
      *((void *)v32 + 6) = v22;
      *((void *)v32 + 7) = v8;
      *((void *)v32 + 8) = v25;
      *((void *)v32 + 9) = a2;
      *((void *)v32 + 10) = 0;
      *((void *)v32 + 11) = 0;
      *((void *)v32 + 12) = 0;
      v32[104] = 28;
      v9[9] = v19;
      goto LABEL_14;
    }
LABEL_45:
    int64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
    goto LABEL_11;
  }
LABEL_14:
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v9, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)&v78);
  unint64_t v18 = *((void *)&v78 + 1);
  if (*((void *)&v78 + 1))
  {
    uint64_t v17 = v78;
    uint64_t result = swift_bridgeObjectRelease();
    a5 = v74;
    goto LABEL_5;
  }
  uint64_t v33 = a4;
  *(void *)&long long v78 = 0;
  *((void *)&v78 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  uint64_t v34 = 8 * (char)a4;
  v35._uint64_t countAndFlagsBits = *(void *)&aGroupNacallout[v34];
  v35._uint64_t object = *(void **)&aGroupNacallout[v34 + 24];
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v36._uint64_t object = (void *)0x800000020D9DF880;
  String.append(_:)(v36);
  unint64_t v38 = *((void *)&v78 + 1);
  uint64_t v37 = (char *)v78;
  unint64_t v39 = (char *)v9[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_47;
  }
  while (2)
  {
    unint64_t v41 = *((void *)v39 + 2);
    unint64_t v40 = *((void *)v39 + 3);
    if (v41 >= v40 >> 1) {
      unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v39);
    }
    *((void *)v39 + 2) = v41 + 1;
    uint64_t v42 = &v39[80 * v41];
    v42[32] = 1;
    *((void *)v42 + 5) = v37;
    *((void *)v42 + 6) = v38;
    *((void *)v42 + 7) = v8;
    *((void *)v42 + 8) = v25;
    *((void *)v42 + 9) = v33;
    *((void *)v42 + 10) = 0;
    *((void *)v42 + 11) = 0;
    *((void *)v42 + 12) = 0;
    v42[104] = 27;
    swift_bridgeObjectRelease();
    v9[9] = v39;
    unint64_t v43 = v9[2];
    swift_bridgeObjectRetain();
    *(void *)&long long v78 = 0;
    *((void *)&v78 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v44 = String.subscript.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 ^ v46) >= 0x4000)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = String.subscript.getter();
      unint64_t v49 = v48;
      swift_bridgeObjectRelease();
      LOBYTE(v47) = specialized Sequence<>.starts<A>(with:)(v72, a3, v47, v49);
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0)
      {
        unint64_t v71 = v43;
        unint64_t v25 = v43;
        uint64_t v50 = (void *)*v9;
        uint64_t v73 = v9;
        while (1)
        {
          unint64_t v39 = (char *)v9[2];
          unint64_t v38 = v9[3];
          uint64_t v37 = (char *)v9[9];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v51 = String.subscript.getter();
          unint64_t v53 = v52;
          swift_bridgeObjectRelease();
          if (!((v51 ^ v53) >> 14))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a5 = v74;
            unint64_t v43 = v71;
            goto LABEL_22;
          }
          uint64_t v77 = Substring.subscript.getter();
          unint64_t v8 = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v9 = v50;
          String.subscript.getter();
          uint64_t v33 = v55;
          swift_bridgeObjectRelease();
          unint64_t v25 = Substring.index(_:offsetBy:limitedBy:)();
          char v57 = v56;
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0) {
            break;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, v37);
          }
          unint64_t v59 = *((void *)v37 + 2);
          unint64_t v58 = *((void *)v37 + 3);
          if (v59 >= v58 >> 1) {
            uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v37);
          }
          *((void *)v37 + 2) = v59 + 1;
          long long v60 = &v37[80 * v59];
          v60[32] = 0;
          *((void *)v60 + 5) = 0xD000000000000022;
          *((void *)v60 + 6) = 0x800000020D9E0210;
          *((void *)v60 + 7) = v39;
          *((void *)v60 + 8) = v39;
          *(_OWORD *)(v60 + 72) = 0u;
          *(_OWORD *)(v60 + 88) = 0u;
          v60[104] = -1;
          v73[9] = v37;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v61 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v61 >= 1)
          {
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            unint64_t v62 = Substring.index(_:offsetBy:limitedBy:)();
            char v64 = v63;
            swift_bridgeObjectRelease();
            unint64_t v25 = (unint64_t)v39;
            if (v64) {
              goto LABEL_39;
            }
            if (v38 >> 14 < v62 >> 14) {
              goto LABEL_49;
            }
            unint64_t v25 = v62;
            goto LABEL_37;
          }
          unint64_t v25 = (unint64_t)v39;
LABEL_39:
          MEMORY[0x2105617C0](v77, v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v65 = String.subscript.getter();
          unint64_t v67 = v66;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v65 ^ v67) >= 0x4000)
          {
            swift_bridgeObjectRetain();
            uint64_t v68 = String.subscript.getter();
            unint64_t v70 = v69;
            swift_bridgeObjectRelease();
            LOBYTE(v68) = specialized Sequence<>.starts<A>(with:)(v72, a3, v68, v70);
            swift_bridgeObjectRelease();
            uint64_t v9 = v73;
            if ((v68 & 1) == 0) {
              continue;
            }
          }
          a5 = v74;
          unint64_t v43 = v71;
          goto LABEL_22;
        }
        if (v38 >> 14 < v25 >> 14)
        {
          __break(1u);
LABEL_47:
          unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v39 + 2) + 1, 1, v39);
          continue;
        }
LABEL_37:
        v73[2] = v25;
        v73[3] = v38;
        goto LABEL_39;
      }
    }
    break;
  }
  unint64_t v25 = v43;
  a5 = v74;
LABEL_22:
  swift_bridgeObjectRelease();
  if (v25 >> 14 < v43 >> 14)
  {
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
LABEL_5:
  *a5 = v17;
  a5[1] = v18;
  return result;
}

uint64_t Character.isWordCharacter.getter(uint64_t a1, uint64_t a2)
{
  if ((Character.isLetter.getter() & 1) != 0
    || (Character.isNumber.getter() & 1) != 0
    || a1 == 95 && a2 == 0xE100000000000000)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t key path getter for Character.isWordCharacter : Character@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((Character.isLetter.getter() & 1) != 0
    || (Character.isNumber.getter() & 1) != 0
    || (v3 == 95 ? (BOOL v5 = v4 == 0xE100000000000000) : (BOOL v5 = 0), v5))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  *a2 = result & 1;
  return result;
}

uint64_t Parser.expectNamedGroup(endingWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t result = lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)((uint64_t *)&v23, v3, a1, a2, (uint64_t)&v25);
  unsigned __int8 v8 = v30;
  if (v30 == 255)
  {
    unint64_t v13 = v3[2];
    uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v3, a1, a2, 0, &v25);
    unint64_t v14 = v3[2];
    if (v14 >> 14 < v13 >> 14)
    {
      __break(1u);
    }
    else
    {
      long long v15 = v25;
      long long v23 = v25;
      *(void *)&long long v24 = v13;
      *((void *)&v24 + 1) = v14;
      swift_bridgeObjectRetain();
      lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)((uint64_t *)&v23, v3, a1, a2, (uint64_t)&v25);
      swift_bridgeObjectRelease();
      unsigned __int8 v16 = v30;
      if (v30 == 255)
      {
        uint64_t result = specialized Parser.tryEat<A>(sequence:)(a1, a2);
        if ((result & 1) == 0)
        {
          *(void *)&long long v25 = a1;
          *((void *)&v25 + 1) = a2;
          swift_bridgeObjectRetain();
          *(void *)&long long v25 = String.init<A>(_:)();
          *((void *)&v25 + 1) = v18;
          long long v26 = 0uLL;
          LOBYTE(v27) = 3;
          Parser.errorAtCurrentPosition(_:)(&v25);
          uint64_t result = swift_bridgeObjectRelease();
        }
        *(_OWORD *)a3 = v15;
        *(void *)(a3 + 16) = v13;
        *(void *)(a3 + 24) = v14;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(unsigned char *)(a3 + 80) = 0;
      }
      else
      {
        long long v17 = v29;
        long long v21 = v27;
        long long v22 = v28;
        long long v19 = v25;
        long long v20 = v26;
        uint64_t result = swift_bridgeObjectRelease();
        *(_OWORD *)a3 = v19;
        *(_OWORD *)(a3 + 16) = v20;
        *(_OWORD *)(a3 + 32) = v21;
        *(_OWORD *)(a3 + 48) = v22;
        *(_OWORD *)(a3 + 64) = v17;
        *(unsigned char *)(a3 + 80) = v16;
      }
    }
  }
  else
  {
    long long v9 = v26;
    long long v10 = v27;
    long long v11 = v28;
    long long v12 = v29;
    *(_OWORD *)a3 = v25;
    *(_OWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v12;
    *(unsigned char *)(a3 + 80) = v8;
  }
  return result;
}

uint64_t lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  unint64_t v13 = a2[2];
  v14._uint64_t countAndFlagsBits = 45;
  v14._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v14);
  if ((result & 1) == 0)
  {
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(unsigned char *)(a5 + 80) = -1;
    return result;
  }
  unint64_t v16 = a2[2];
  if (v16 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v20 = v10;
  uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(a2, a3, a4, 0, &v21);
  unint64_t v17 = a2[2];
  if (v16 >> 14 > v17 >> 14)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  long long v18 = v21;
  if ((specialized Parser.tryEat<A>(sequence:)(a3, a4) & 1) == 0)
  {
    *(void *)&long long v21 = a3;
    *((void *)&v21 + 1) = a4;
    swift_bridgeObjectRetain();
    *(void *)&long long v21 = String.init<A>(_:)();
    *((void *)&v21 + 1) = v19;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    char v24 = 3;
    Parser.errorAtCurrentPosition(_:)(&v21);
    swift_bridgeObjectRelease();
  }
  *(void *)a5 = v20;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = v13;
  *(void *)(a5 + 40) = v16;
  *(_OWORD *)(a5 + 48) = v18;
  *(void *)(a5 + 64) = v16;
  *(void *)(a5 + 72) = v17;
  *(unsigned char *)(a5 + 80) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t Parser.lexGroupStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v58 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 16);
  uint64_t v56 = *(void *)(v1 + 24);
  char v54 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v8 = *(unsigned char *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexGroupStart()(v1, (uint64_t)v60);
  unsigned __int8 v10 = v61;
  if (v61 == 255)
  {
    unint64_t v49 = v4;
    uint64_t v51 = v7;
    char v48 = v8;
    uint64_t v53 = v5;
    uint64_t v13 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(void *)(v9 + 16), v13);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    int64_t v19 = v18 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v20 = v15 - 32;
    uint64_t v21 = v17;
    uint64_t v22 = v17;
    uint64_t v23 = v6;
LABEL_5:
    uint64_t v24 = v20 + 80 * v21;
    while (1)
    {
      if (v19 == v22)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v1 = v58;
        *(void *)(v1 + 8) = v3;
        *(void *)(v1 + 16) = v49;
        *(void *)(v1 + 24) = v56;
        *(unsigned char *)(v1 + 32) = v54;
        *(void *)(v1 + 40) = v53;
        *(void *)(v1 + 48) = v23;
        *(void *)(v1 + 56) = v51;
        *(unsigned char *)(v1 + 64) = v48;
        *(void *)(v1 + 72) = v9;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 255;
        return result;
      }
      if (v21 < v17 || v22 >= v19) {
        break;
      }
      int v25 = *(unsigned __int8 *)(v24 + 32);
      ++v22;
      v24 += 80;
      if (!v25)
      {
        uint64_t v46 = v3;
        uint64_t v47 = v20;
        uint64_t v43 = v23;
        uint64_t v38 = *(void *)(v24 - 24);
        uint64_t v39 = *(void *)(v24 - 40);
        uint64_t v26 = *(void *)(v24 - 8);
        uint64_t v37 = *(void *)(v24 - 16);
        uint64_t v28 = *(void *)v24;
        uint64_t v27 = *(void *)(v24 + 8);
        uint64_t v29 = *(void *)(v24 + 16);
        uint64_t v40 = v9;
        unsigned __int8 v30 = *(unsigned char *)(v24 + 24);
        uint64_t v45 = *(void *)(v24 - 32);
        swift_bridgeObjectRetain();
        uint64_t v44 = v28;
        uint64_t v42 = v27;
        uint64_t v31 = v27;
        uint64_t v32 = v29;
        unsigned __int8 v41 = v30;
        unsigned __int8 v33 = v30;
        uint64_t v9 = v40;
        outlined copy of ParseError?(v26, v28, v31, v29, v33);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1, (char *)v40);
          uint64_t v9 = result;
        }
        unint64_t v35 = *(void *)(v9 + 16);
        unint64_t v34 = *(void *)(v9 + 24);
        uint64_t v20 = v47;
        if (v35 >= v34 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v9);
          uint64_t v20 = v47;
          uint64_t v9 = result;
        }
        *(void *)(v9 + 16) = v35 + 1;
        unint64_t v36 = v9 + 80 * v35;
        *(unsigned char *)(v36 + 32) = 0;
        *(void *)(v36 + 40) = v39;
        *(void *)(v36 + 48) = v45;
        *(void *)(v36 + 56) = v38;
        *(void *)(v36 + 64) = v37;
        *(void *)(v36 + 72) = v26;
        uint64_t v23 = v43;
        *(void *)(v36 + 80) = v44;
        *(void *)(v36 + 88) = v42;
        *(void *)(v36 + 96) = v32;
        *(unsigned char *)(v36 + 104) = v41;
        uint64_t v21 = v22;
        uint64_t v3 = v46;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
    long long v57 = v60[1];
    long long v59 = v60[0];
    long long v52 = v60[3];
    long long v55 = v60[2];
    long long v50 = v60[4];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v12 = *(void *)(v1 + 16);
    if (v12 >> 14 >= v4 >> 14)
    {
      *(_OWORD *)a1 = v59;
      *(_OWORD *)(a1 + 16) = v57;
      *(_OWORD *)(a1 + 32) = v55;
      *(_OWORD *)(a1 + 48) = v52;
      *(_OWORD *)(a1 + 64) = v50;
      *(unsigned char *)(a1 + 80) = v10;
      *(void *)(a1 + 88) = v4;
      *(void *)(a1 + 96) = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

double closure #1 in closure #1 in Parser.lexGroupStart()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Parser.lexExplicitPCRE2GroupStart()((uint64_t)&v69);
  char v4 = v73;
  if (v73 != 255)
  {
    double result = *(double *)&v69;
    long long v6 = *(_OWORD *)v70;
    long long v7 = *(_OWORD *)&v70[16];
    long long v8 = v71;
    long long v9 = v72;
    *(_OWORD *)a2 = v69;
    *(_OWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 48) = v8;
    *(_OWORD *)(a2 + 64) = v9;
LABEL_10:
    *(unsigned char *)(a2 + 80) = v4;
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  char v15 = *(unsigned char *)(a1 + 64);
  uint64_t v16 = (char **)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 72);
  *(void *)&long long v69 = *(void *)a1;
  *((void *)&v69 + 1) = v10;
  *(_OWORD *)unint64_t v70 = *(_OWORD *)(a1 + 16);
  v70[16] = v11;
  *(void *)&v70[24] = v12;
  *(void *)&long long v71 = v13;
  *((void *)&v71 + 1) = v14;
  LOBYTE(v72) = v15;
  *((void *)&v72 + 1) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in Parser.shouldLexGroupLikeAtom()((uint64_t)&v69, &v68);
  uint64_t v18 = *((void *)&v72 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v67 = v18;
  Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v67);
  swift_bridgeObjectRelease();
  if ((v68 & 1) != 0
    || (v19._uint64_t countAndFlagsBits = 40, v19._object = (void *)0xE100000000000000, !Parser.tryEat(_:)(v19)))
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    char v4 = -1;
    goto LABEL_10;
  }
  v20._uint64_t countAndFlagsBits = 63;
  v20._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v20))
  {
    uint64_t v24 = *(void *)(a1 + 56);
    if ((v24 & 0x20) != 0)
    {
      if (specialized Parser.tryEat<A>(sequence:)(14943, 0xE200000000000000)) {
        goto LABEL_49;
      }
      uint64_t v24 = *(void *)(a1 + 56);
    }
    if ((v24 & 0x80) == 0)
    {
      double result = 0.0;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      char v4 = 3;
      goto LABEL_10;
    }
    goto LABEL_49;
  }
  v21._uint64_t countAndFlagsBits = 58;
  v21._uint64_t object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v21))
  {
LABEL_49:
    uint64_t v23 = 1;
    goto LABEL_50;
  }
  v22._uint64_t countAndFlagsBits = 124;
  v22._uint64_t object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v22))
  {
    uint64_t v23 = 2;
LABEL_50:
    *(void *)a2 = v23;
    double result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)(a2 + 72) = 0;
    char v4 = 3;
    goto LABEL_10;
  }
  v25._uint64_t countAndFlagsBits = 62;
  v25._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v25))
  {
    v26._uint64_t countAndFlagsBits = 61;
    v26._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v26))
    {
      uint64_t v23 = 4;
      goto LABEL_50;
    }
    v27._uint64_t countAndFlagsBits = 33;
    v27._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v27))
    {
      uint64_t v23 = 5;
      goto LABEL_50;
    }
    v28._uint64_t countAndFlagsBits = 42;
    v28._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v28))
    {
      uint64_t v23 = 6;
      goto LABEL_50;
    }
    if (specialized Parser.tryEat<A>(sequence:)(15676, 0xE200000000000000))
    {
      uint64_t v23 = 7;
      goto LABEL_50;
    }
    if (specialized Parser.tryEat<A>(sequence:)(8508, 0xE200000000000000))
    {
      uint64_t v23 = 8;
      goto LABEL_50;
    }
    if (specialized Parser.tryEat<A>(sequence:)(10812, 0xE200000000000000))
    {
      uint64_t v23 = 9;
      goto LABEL_50;
    }
    v29._uint64_t countAndFlagsBits = 60;
    v29._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v29) || (specialized Parser.tryEat<A>(sequence:)(15440, 0xE200000000000000) & 1) != 0)
    {
      uint64_t v30 = 62;
LABEL_33:
      Parser.expectNamedGroup(endingWith:)(v30, 0xE100000000000000, (uint64_t)&v69);
      char v4 = v73;
      long long v31 = *(_OWORD *)v70;
      *(_OWORD *)a2 = v69;
      *(_OWORD *)(a2 + 16) = v31;
      long long v32 = v71;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v70[16];
      *(_OWORD *)(a2 + 48) = v32;
      double result = *(double *)&v72;
      *(_OWORD *)(a2 + 64) = v72;
      goto LABEL_10;
    }
    v33._uint64_t countAndFlagsBits = 39;
    v33._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v33))
    {
      uint64_t v30 = 39;
      goto LABEL_33;
    }
    Parser.lexMatchingOptionSequence()((unint64_t *)&v69);
    long long v66 = *(_OWORD *)&v70[8];
    if (*(void *)&v70[8])
    {
      long long v64 = v69;
      uint64_t v65 = *((void *)&v71 + 1);
      char v62 = v71;
      uint64_t v63 = *(void *)&v70[24];
      char v61 = v70[0];
      v34._uint64_t countAndFlagsBits = 58;
      v34._uint64_t object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v34))
      {
LABEL_59:
        *(_OWORD *)a2 = v64;
        *(void *)(a2 + 16) = v61 & 1;
        double result = *(double *)&v66;
        *(_OWORD *)(a2 + 24) = v66;
        *(void *)(a2 + 40) = v63;
        *(void *)(a2 + 48) = v62 & 1;
        *(void *)(a2 + 64) = 0;
        *(void *)(a2 + 72) = 0;
        *(void *)(a2 + 56) = v65;
        char v4 = 2;
        goto LABEL_10;
      }
      unint64_t v35 = *(void *)(a1 + 16);
      unint64_t v36 = *(char **)(a1 + 72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v37 = String.subscript.getter();
      unint64_t v39 = v38;
      if (!((v37 ^ v40) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_58:
        long long v69 = xmmword_20D9D7520;
        *(_OWORD *)unint64_t v70 = 0uLL;
        v70[16] = 3;
        Parser.errorAtCurrentPosition(_:)(&v69);
        goto LABEL_59;
      }
      uint64_t v60 = Substring.subscript.getter();
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v41 = String.index(after:)();
      swift_bridgeObjectRelease();
      if (v41 >> 14 >= v35 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v53)
        {
          *(void *)&long long v69 = v60;
          *((void *)&v69 + 1) = v53;
          *(_OWORD *)unint64_t v70 = 0uLL;
          v70[16] = 17;
          swift_bridgeObjectRetain();
          unint64_t v54 = ParseError.description.getter();
          uint64_t v56 = v55;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
          }
          unint64_t v58 = *((void *)v36 + 2);
          unint64_t v57 = *((void *)v36 + 3);
          if (v58 >= v57 >> 1) {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v36);
          }
          *((void *)v36 + 2) = v58 + 1;
          long long v59 = &v36[80 * v58];
          v59[32] = 1;
          *((void *)v59 + 5) = v54;
          *((void *)v59 + 6) = v56;
          *((void *)v59 + 7) = v35;
          *((void *)v59 + 8) = v41;
          *((void *)v59 + 9) = v60;
          *((void *)v59 + 10) = v53;
          *((void *)v59 + 11) = 0;
          *((void *)v59 + 12) = 0;
          v59[104] = 17;
          swift_bridgeObjectRelease_n();
          *uint64_t v16 = v36;
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      goto LABEL_61;
    }
    unint64_t v35 = *(void *)(a1 + 16);
    unint64_t v41 = *(void *)(a1 + 48);
    unint64_t v36 = *(char **)(a1 + 72);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = String.subscript.getter();
    if ((v42 ^ v43) >> 14)
    {
      *(void *)&long long v66 = Substring.subscript.getter();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v39 = String.index(after:)();
      swift_bridgeObjectRelease();
      if (v39 >> 14 < v35 >> 14)
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v45)
      {
        *(void *)&long long v69 = 0;
        *((void *)&v69 + 1) = 0xE000000000000000;
        v46._uint64_t countAndFlagsBits = 63;
        v46._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        swift_bridgeObjectRetain();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        a1 = *((void *)&v69 + 1);
        unint64_t v41 = v69;
        *(_OWORD *)unint64_t v70 = 0uLL;
        v70[16] = 14;
        unint64_t v47 = ParseError.description.getter();
        uint64_t v65 = v48;
        *(void *)&long long v66 = v47;
        swift_bridgeObjectRetain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_45:
          unint64_t v50 = *((void *)v36 + 2);
          unint64_t v49 = *((void *)v36 + 3);
          if (v50 >= v49 >> 1) {
            unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v36);
          }
          *((void *)v36 + 2) = v50 + 1;
          uint64_t v51 = &v36[80 * v50];
          v51[32] = 1;
          *((void *)v51 + 5) = v66;
          *((void *)v51 + 6) = v65;
          *((void *)v51 + 7) = v35;
          *((void *)v51 + 8) = v39;
          *((void *)v51 + 9) = v41;
          *((void *)v51 + 10) = a1;
          *((void *)v51 + 11) = 0;
          *((void *)v51 + 12) = 0;
          v51[104] = 14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v16 = v36;
          goto LABEL_49;
        }
LABEL_62:
        unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
        goto LABEL_45;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    long long v69 = 9uLL;
    *(_OWORD *)unint64_t v70 = 0uLL;
    v70[16] = 36;
    Parser.errorAtCurrentPosition(_:)(&v69);
    goto LABEL_49;
  }
  *(void *)a2 = 3;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 3;
  return result;
}

void static SyntaxOptions.namedCapturesOnly.getter(void *a1@<X8>)
{
  *a1 = 128;
}

uint64_t Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v11 = v5[2];
  uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v5, a1, a2, 0, &v22);
  unint64_t v13 = v5[2];
  if (v13 >> 14 < v11 >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = *((void *)&v22 + 1);
    uint64_t v21 = v22;
    if ((a4 & 1) == 0)
    {
      unint64_t v17 = 0;
      unint64_t v15 = 0;
      long long v14 = 0uLL;
      char v16 = 1;
      if ((a3 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    uint64_t result = Parser.lexRecursionLevel()((uint64_t)&v22);
    long long v14 = v22;
    unint64_t v15 = v24;
    if (v25)
    {
      char v16 = 1;
      unint64_t v17 = v23;
      if ((a3 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    if (v11 >> 14 >= v23 >> 14) {
      unint64_t v11 = v23;
    }
    if (v13 >> 14 < v24 >> 14) {
      unint64_t v13 = v24;
    }
    if (v13 >> 14 >= v11 >> 14)
    {
      unint64_t v17 = v23;
      char v16 = 0;
      if ((a3 & 1) == 0)
      {
LABEL_16:
        *(void *)a5 = v21;
        *(void *)(a5 + 8) = v20;
        *(void *)(a5 + 16) = 0;
        *(void *)(a5 + 24) = 0;
        *(unsigned char *)(a5 + 32) = 2;
        *(_OWORD *)(a5 + 40) = v14;
        *(void *)(a5 + 56) = v17;
        *(void *)(a5 + 64) = v15;
        *(unsigned char *)(a5 + 72) = v16;
        *(void *)(a5 + 80) = v11;
        *(void *)(a5 + 88) = v13;
        return result;
      }
LABEL_14:
      long long v19 = v14;
      uint64_t result = specialized Parser.tryEat<A>(sequence:)(a1, a2);
      long long v14 = v19;
      if ((result & 1) == 0)
      {
        *(void *)&long long v22 = a1;
        *((void *)&v22 + 1) = a2;
        swift_bridgeObjectRetain();
        *(void *)&long long v22 = String.init<A>(_:)();
        *((void *)&v22 + 1) = v18;
        unint64_t v23 = 0;
        unint64_t v24 = 0;
        char v25 = 3;
        Parser.errorAtCurrentPosition(_:)(&v22);
        uint64_t result = swift_bridgeObjectRelease();
        long long v14 = v19;
      }
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t Parser.getClosingDelimiter(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 != 39 || a2 != 0xE100000000000000)
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v5 = v3 == 34 && a2 == 0xE100000000000000;
    BOOL v6 = v5;
    if ((v4 & 1) == 0 && !v6)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v8 = v3 == 96 && a2 == 0xE100000000000000;
      BOOL v9 = v8;
      if ((v7 & 1) == 0 && !v9)
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v11 = v3 == 94 && a2 == 0xE100000000000000;
        BOOL v12 = v11;
        if ((v10 & 1) == 0 && !v12)
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v14 = v3 == 37 && a2 == 0xE100000000000000;
          BOOL v15 = v14;
          if ((v13 & 1) == 0 && !v15)
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v17 = v3 == 35 && a2 == 0xE100000000000000;
            BOOL v18 = v17;
            if ((v16 & 1) == 0 && !v18)
            {
              char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v20 = v3 == 36 && a2 == 0xE100000000000000;
              BOOL v21 = v20;
              if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if (v3 == 60 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  return 62;
                }
                if (v3 == 123 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  return 125;
                }
                v23._uint64_t countAndFlagsBits = 0x656C646E61686E55;
                v23._uint64_t object = (void *)0xEE00657361632064;
                Parser.unreachable(_:)(v23);
              }
            }
          }
        }
      }
    }
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v4) = a2;
  unint64_t v6 = *(void *)v3;
  unint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void *)(v3 + 16);
  unint64_t v9 = *(void *)(v3 + 24);
  LODWORD(v70) = *(unsigned __int8 *)(v3 + 32);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v68 = *(void *)(v3 + 56);
  unint64_t v69 = *(void *)(v3 + 40);
  char v67 = *(unsigned char *)(v3 + 64);
  BOOL v11 = *(char **)(v3 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 43;
  v12._uint64_t object = (void *)0xE100000000000000;
  unint64_t v75 = v8;
  unint64_t v13 = v8 >> 14;
  if (!Parser.tryEat(_:)(v12)) {
    goto LABEL_4;
  }
  LODWORD(v74) = v4;
  BOOL v14 = *(char **)(v3 + 16);
  if ((unint64_t)v14 >> 14 < v13)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v76);
  if ((v79 & 1) == 0)
  {
    unint64_t v42 = v77;
    if (v13 < v77 >> 14) {
      unint64_t v42 = v75;
    }
    if ((unint64_t)v14 >> 14 >= (unint64_t)v78 >> 14) {
      unint64_t v43 = v14;
    }
    else {
      unint64_t v43 = v78;
    }
    if ((unint64_t)v43 >> 14 >= v42 >> 14)
    {
      unint64_t v69 = v42;
      unint64_t v70 = v43;
      unint64_t v6 = v76;
      unint64_t v9 = BYTE8(v76) & 1;
      int v41 = 1;
      uint64_t v68 = 1;
      goto LABEL_38;
    }
    __break(1u);
  }
  else
  {
LABEL_4:
    unint64_t v16 = *(void *)(v3 + 16);
    v17._uint64_t countAndFlagsBits = 45;
    v17._uint64_t object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v17))
    {
LABEL_8:
      Parser.lexNumber(_:)(1, (uint64_t)&v76);
      if (v79)
      {
        uint64_t v74 = v10;
        uint64_t v19 = *(void *)(v3 + 72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized Collection.dropFirst(_:)(*((void *)v11 + 2), v19);
        uint64_t v72 = v20;
        unint64_t v13 = v21;
        int64_t v23 = v22 >> 1;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v24 = v72 - 32;
        int64_t v25 = v13;
        int64_t v26 = v13;
LABEL_10:
        uint64_t v27 = v24 + 80 * v25;
        uint64_t v10 = v74;
        while (1)
        {
          if (v23 == v26)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_unknownObjectRelease_n();
            *(void *)uint64_t v3 = v6;
            *(void *)(v3 + 8) = v7;
            *(void *)(v3 + 16) = v75;
            *(void *)(v3 + 24) = v9;
            *(unsigned char *)(v3 + 32) = (_BYTE)v70;
            *(void *)(v3 + 40) = v69;
            *(void *)(v3 + 48) = v74;
            *(void *)(v3 + 56) = v68;
            *(unsigned char *)(v3 + 64) = v67;
            *(void *)(v3 + 72) = v11;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            *(void *)(a3 + 32) = 255;
            *(_OWORD *)(a3 + 40) = 0u;
            *(_OWORD *)(a3 + 56) = 0u;
            *(_OWORD *)(a3 + 72) = 0u;
            *(void *)(a3 + 88) = 0;
            return result;
          }
          if (v25 < (uint64_t)v13 || v26 >= v23) {
            break;
          }
          int v28 = *(unsigned __int8 *)(v27 + 32);
          ++v26;
          v27 += 80;
          if (!v28)
          {
            unint64_t v62 = v6;
            unint64_t v63 = v7;
            uint64_t v73 = v24;
            unint64_t v66 = v9;
            uint64_t v57 = *(void *)(v27 - 24);
            uint64_t v58 = *(void *)(v27 - 40);
            uint64_t v55 = *(void *)(v27 - 32);
            uint64_t v56 = *(void *)(v27 - 16);
            long long v59 = v11;
            uint64_t v30 = *(void *)(v27 - 8);
            uint64_t v29 = *(void *)v27;
            uint64_t v32 = *(void *)(v27 + 8);
            uint64_t v31 = *(void *)(v27 + 16);
            unsigned __int8 v33 = *(unsigned char *)(v27 + 24);
            swift_bridgeObjectRetain();
            uint64_t v60 = v30;
            uint64_t v61 = v32;
            uint64_t v34 = v30;
            BOOL v11 = v59;
            uint64_t v35 = v32;
            uint64_t v36 = v31;
            outlined copy of ParseError?(v34, v29, v35, v31, v33);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              BOOL v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, v59);
            }
            unint64_t v38 = *((void *)v11 + 2);
            unint64_t v37 = *((void *)v11 + 3);
            uint64_t v24 = v73;
            if (v38 >= v37 >> 1)
            {
              unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v11);
              uint64_t v24 = v73;
              BOOL v11 = v40;
            }
            *((void *)v11 + 2) = v38 + 1;
            unint64_t v39 = &v11[80 * v38];
            v39[32] = 0;
            *((void *)v39 + 5) = v58;
            *((void *)v39 + 6) = v55;
            *((void *)v39 + 7) = v57;
            *((void *)v39 + 8) = v56;
            *((void *)v39 + 9) = v60;
            unint64_t v6 = v62;
            *((void *)v39 + 10) = v29;
            *((void *)v39 + 11) = v61;
            *((void *)v39 + 12) = v36;
            v39[104] = v33;
            int64_t v25 = v26;
            unint64_t v7 = v63;
            unint64_t v9 = v66;
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      int v41 = 0;
      unint64_t v70 = v78;
      uint64_t v68 = 0;
      unint64_t v69 = v77;
      unint64_t v6 = v76;
      unint64_t v9 = BYTE8(v76) & 1;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v11 = *(char **)(v3 + 16);
      unint64_t v7 = (unint64_t)v11 >> 14;
      if ((unint64_t)v11 >> 14 >= v13)
      {
        if (((v41 | a1) & 1) != 0 || v9 || v6) {
          goto LABEL_46;
        }
        uint64_t v74 = 0;
        uint64_t v10 = *(void *)(v3 + 72);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        LOBYTE(v6) = v4;
        if (result)
        {
LABEL_43:
          unint64_t v4 = *(void *)(v10 + 16);
          unint64_t v47 = *(void *)(v10 + 24);
          if (v4 >= v47 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v4 + 1, 1, (char *)v10);
            uint64_t v10 = result;
          }
          *(void *)(v10 + 16) = v4 + 1;
          unint64_t v48 = v10 + 80 * v4;
          *(unsigned char *)(v48 + 32) = 1;
          *(void *)(v48 + 40) = 0xD000000000000022;
          *(void *)(v48 + 48) = 0x800000020D9DFC30;
          *(void *)(v48 + 56) = v75;
          *(void *)(v48 + 64) = v11;
          *(void *)(v48 + 72) = 5;
          *(void *)(v48 + 80) = 0;
          *(void *)(v48 + 88) = 0;
          *(void *)(v48 + 96) = 0;
          *(unsigned char *)(v48 + 104) = 36;
          *(void *)(v3 + 72) = v10;
          LOBYTE(v4) = v6;
          unint64_t v6 = v74;
LABEL_46:
          if (v4)
          {
            uint64_t result = Parser.lexRecursionLevel()((uint64_t)&v76);
            long long v49 = v76;
            unint64_t v50 = v77;
            uint64_t v51 = v78;
            if ((v79 & 1) == 0)
            {
              unint64_t v52 = v75;
              if (v13 >= v77 >> 14) {
                unint64_t v52 = v77;
              }
              if (v7 < (unint64_t)v78 >> 14) {
                BOOL v11 = v78;
              }
              unint64_t v75 = v52;
              uint64_t v53 = v70;
              if ((unint64_t)v11 >> 14 >= v52 >> 14)
              {
                uint64_t v54 = 0;
LABEL_56:
                *(void *)a3 = v6;
                *(void *)(a3 + 8) = v9;
                *(void *)(a3 + 16) = v69;
                *(void *)(a3 + 24) = v53;
                *(void *)(a3 + 32) = v68;
                *(_OWORD *)(a3 + 40) = v49;
                *(void *)(a3 + 56) = v50;
                *(void *)(a3 + 64) = v51;
                *(void *)(a3 + 72) = v54;
                *(void *)(a3 + 80) = v75;
                *(void *)(a3 + 88) = v11;
                return result;
              }
              goto LABEL_64;
            }
          }
          else
          {
            unint64_t v50 = 0;
            uint64_t v51 = 0;
            long long v49 = 0uLL;
          }
          uint64_t v54 = 1;
          uint64_t v53 = v70;
          goto LABEL_56;
        }
LABEL_61:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
        uint64_t v10 = result;
        goto LABEL_43;
      }
      goto LABEL_58;
    }
    unint64_t v64 = v13;
    unint64_t v65 = v9;
    unint64_t v9 = v6;
    LODWORD(v74) = v4;
    unint64_t v13 = v10;
    uint64_t v10 = v7;
    BOOL v18 = *(char **)(v3 + 16);
    unint64_t v6 = (unint64_t)v18 >> 14;
    unint64_t v7 = v16 >> 14;
    if ((unint64_t)v18 >> 14 < v16 >> 14)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v76);
    if (v79)
    {
      unint64_t v7 = v10;
      uint64_t v10 = v13;
      LOBYTE(v4) = v74;
      unint64_t v6 = v9;
      unint64_t v13 = v64;
      unint64_t v9 = v65;
      goto LABEL_8;
    }
    unint64_t v44 = v77;
    uint64_t v45 = v76;
    if ((BYTE8(v76) & 1) == 0)
    {
      uint64_t v45 = -(uint64_t)v76;
      if (__OFSUB__(0, (void)v76)) {
        goto LABEL_65;
      }
    }
    if (v7 < v77 >> 14) {
      unint64_t v44 = v16;
    }
    if (v6 >= (unint64_t)v78 >> 14) {
      Swift::String v46 = v18;
    }
    else {
      Swift::String v46 = v78;
    }
    if ((unint64_t)v46 >> 14 >= v44 >> 14)
    {
      unint64_t v69 = v44;
      unint64_t v70 = v46;
      unint64_t v9 = BYTE8(v76) & 1;
      int v41 = 1;
      uint64_t v68 = 1;
      uint64_t v10 = v13;
      LOBYTE(v4) = v74;
      unint64_t v13 = v64;
      unint64_t v6 = v45;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t Parser.lexKnownConditionalStart()@<X0>(_OWORD *a1@<X8>)
{
  BOOL v5 = v1;
  uint64_t v128 = *((void *)v1 + 2);
  uint64_t v129 = *(void *)v1;
  uint64_t v127 = *((void *)v1 + 3);
  char v126 = v1[32];
  uint64_t v6 = *((void *)v1 + 6);
  uint64_t v124 = *((void *)v1 + 7);
  uint64_t v125 = *((void *)v1 + 5);
  char v123 = v1[64];
  unint64_t v7 = (char *)*((void *)v1 + 9);
  uint64_t v131 = *((void *)v1 + 1);
  swift_bridgeObjectRetain();
  uint64_t v130 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&long long v133 = v1;
  if ((specialized Parser.tryEat<A>(sequence:)(2637608, 0xE300000000000000) & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v4 = (uint64_t)&v141;
  uint64_t v8 = *((void *)v1 + 1);
  uint64_t v110 = *(void *)v1;
  unint64_t v9 = *((void *)v1 + 2);
  uint64_t v115 = *((void *)v1 + 3);
  LOBYTE(v114) = v1[32];
  unint64_t v10 = *((void *)v1 + 6);
  uint64_t v112 = *((void *)v1 + 7);
  uint64_t v113 = *((void *)v1 + 5);
  char v111 = v1[64];
  uint64_t v3 = *((void *)v1 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 82;
  v11._uint64_t object = (void *)0xE100000000000000;
  unint64_t v122 = v10;
  if (!Parser.tryEat(_:)(v11))
  {
    uint64_t v109 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    unint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_20D9D7470;
    *(void *)(v2 + 32) = 60;
    *(void *)(v2 + 40) = 0xE100000000000000;
    *(void *)(v2 + 48) = 39;
    *(void *)(v2 + 56) = 0xE100000000000000;
    uint64_t v15 = specialized Parser.tryEat<A>(anyOf:)(v2);
    uint64_t v17 = v16;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v17)
    {
      unint64_t v116 = v8;
      unint64_t v117 = v9;
      uint64_t v118 = v7;
      unint64_t v2 = Parser.getClosingDelimiter(for:)(v15, v17);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v148);
      char v20 = v150;
      if (v150 == 255)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v2, v19, 1, 0, (uint64_t)&v134);
        swift_bridgeObjectRelease();
        uint64_t v22 = *((void *)&v134 + 1);
        uint64_t v21 = v134;
        uint64_t v24 = *((void *)&v135 + 1);
        uint64_t v23 = v135;
        char v20 = v136[0];
        uint64_t v25 = *(void *)&v136[8];
        uint64_t v28 = *(void *)&v136[24];
        uint64_t v27 = *(void *)&v136[16];
        uint64_t v26 = *(void *)&v136[32];
        uint64_t v4 = v136[40];
        uint64_t v30 = *((void *)&v137 + 1);
        uint64_t v29 = v137;
      }
      else
      {
        long long v31 = v148;
        uint64_t v99 = *((void *)&v149 + 1);
        uint64_t v101 = v149;
        uint64_t v27 = *((void *)&v151 + 1);
        uint64_t v97 = v151;
        uint64_t v26 = *((void *)&v152 + 1);
        uint64_t v28 = v152;
        uint64_t v29 = *(void *)&v153[8];
        uint64_t v4 = v153[0] & 1;
        uint64_t v30 = *(void *)&v153[16];
        if ((specialized Parser.tryEat<A>(sequence:)(v2, v19) & 1) == 0)
        {
          *(void *)&long long v148 = v2;
          *((void *)&v148 + 1) = v19;
          *(void *)&long long v134 = String.init<A>(_:)();
          *((void *)&v134 + 1) = v32;
          long long v135 = 0uLL;
          v136[0] = 3;
          Parser.errorAtCurrentPosition(_:)(&v134);
        }
        swift_bridgeObjectRelease();
        uint64_t v22 = *((void *)&v31 + 1);
        uint64_t v21 = v31;
        uint64_t v24 = v99;
        uint64_t v23 = v101;
        uint64_t v25 = v97;
      }
      *(void *)&long long v141 = v21;
      *((void *)&v141 + 1) = v22;
      *(void *)&long long v142 = v23;
      *((void *)&v142 + 1) = v24;
      char v143 = v20;
      *(void *)&long long v144 = v25;
      *((void *)&v144 + 1) = v27;
      *(void *)&long long v145 = v28;
      *((void *)&v145 + 1) = v26;
      char v146 = v4;
      *(void *)&long long v147 = v29;
      *((void *)&v147 + 1) = v30;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v141);
      goto LABEL_17;
    }
    if (specialized Parser.tryEat<A>(sequence:)(0x454E49464544, 0xE600000000000000))
    {
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi4_((uint64_t)&v141);
    }
    else
    {
      if (specialized Parser.tryEat<A>(sequence:)(0x4E4F4953524556, 0xE700000000000000))
      {
        unint64_t v33 = *((void *)v1 + 2);
        v34._uint64_t countAndFlagsBits = 62;
        v34._uint64_t object = (void *)0xE100000000000000;
        Swift::Bool v35 = Parser.tryEat(_:)(v34);
        v36._uint64_t countAndFlagsBits = 61;
        v36._uint64_t object = (void *)0xE100000000000000;
        uint64_t result = Parser.tryEat(_:)(v36);
        if ((result & 1) == 0)
        {
          long long v166 = xmmword_20D9D7530;
          uint64_t v167 = 0;
          uint64_t v168 = 0;
          char v169 = 3;
          uint64_t result = Parser.errorAtCurrentPosition(_:)(&v166);
        }
        unint64_t v2 = *((void *)v1 + 2);
        if (v2 >> 14 < v33 >> 14)
        {
          __break(1u);
        }
        else
        {
          Swift::Bool v104 = v35;
          unint64_t v116 = v8;
          unint64_t v117 = v9;
          uint64_t v118 = v7;
          Parser.lexNumber(_:)(1, (uint64_t)&v148);
          if (v150)
          {
            long long v148 = xmmword_20D9D74E0;
            long long v149 = xmmword_20D9D7540;
            unsigned __int8 v150 = 2;
            Parser.errorAtCurrentPosition(_:)(&v148);
            uint64_t v38 = 0;
            uint64_t v39 = *((void *)v1 + 2);
            char v40 = 1;
            uint64_t v41 = v39;
          }
          else
          {
            uint64_t v41 = *((void *)&v149 + 1);
            uint64_t v39 = v149;
            uint64_t v38 = v148;
            char v40 = BYTE8(v148) & 1;
          }
          v88._uint64_t countAndFlagsBits = 46;
          v88._uint64_t object = (void *)0xE100000000000000;
          if (!Parser.tryEat(_:)(v88))
          {
            long long v141 = xmmword_20D9D74A0;
            long long v142 = 0uLL;
            char v143 = 3;
            Parser.errorAtCurrentPosition(_:)(&v141);
          }
          uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v134);
          if (v136[0])
          {
            long long v134 = xmmword_20D9D74E0;
            long long v135 = xmmword_20D9D7540;
            v136[0] = 2;
            uint64_t result = Parser.errorAtCurrentPosition(_:)(&v134);
            uint64_t v89 = 0;
            unint64_t v90 = *((void *)v1 + 2);
            int64x2_t v91 = vdupq_n_s64(v90);
            char v92 = 1;
          }
          else
          {
            int64x2_t v91 = (int64x2_t)v135;
            uint64_t v89 = v134;
            char v92 = BYTE8(v134) & 1;
            unint64_t v90 = *((void *)v1 + 2);
          }
          if (v2 >> 14 <= v90 >> 14)
          {
            LOBYTE(v148) = v104;
            *((void *)&v148 + 1) = v33;
            *(void *)&long long v149 = v2;
            *((void *)&v149 + 1) = v38;
            unsigned __int8 v150 = v40;
            *(void *)&long long v151 = v39;
            *((void *)&v151 + 1) = v41;
            *(void *)&long long v152 = v89;
            BYTE8(v152) = v92;
            *(int64x2_t *)BOOL v153 = v91;
            *(void *)&v153[16] = v2;
            unint64_t v154 = v90;
            _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi1_((uint64_t)&v148);
            outlined init with take of AST.Conditional.Condition.Kind(&v148, &v134);
            outlined init with take of AST.Conditional.Condition.Kind(&v134, &v141);
LABEL_17:
            outlined init with take of AST.Conditional.Condition.Kind(&v141, &v148);
            AST.root.modify(&v148);
            outlined init with take of AST.Conditional.Condition?((uint64_t)&v148, (uint64_t)&v157);
            BOOL v5 = v1;
            unint64_t v7 = v118;
            goto LABEL_18;
          }
        }
        __break(1u);
        return result;
      }
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 1, (uint64_t)&v134);
      if (v136[0] == 255)
      {
        unint64_t v116 = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 0, 1, (uint64_t)&v148);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = *((void *)&v148 + 1);
        uint64_t v42 = v148;
        uint64_t v43 = *((void *)&v149 + 1);
        unint64_t v2 = v149;
        LOBYTE(v44) = v150;
        long long v45 = v151;
        long long v46 = v152;
        LOBYTE(v8) = v153[0];
        long long v47 = *(_OWORD *)&v153[8];
        unint64_t v117 = v9;
        if (!v150) {
          goto LABEL_81;
        }
        if (v150 == 1)
        {
          if ((BYTE8(v148) & 1) != 0 || (v148 & 0x8000000000000000) == 0) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v121 = v7;
          uint64_t v93 = *((void *)v5 + 6);
          long long v106 = v152;
          long long v108 = v151;
          long long v103 = *(_OWORD *)&v153[8];
          swift_bridgeObjectRetain();
          outlined copy of AST.Reference.Kind(v42, v3, v2, v43, 2);
          char v94 = specialized Set.contains(_:)(v42, v3, v93);
          outlined consume of AST.Reference.Kind(v42, v3, v2, v43, 2);
          unint64_t v7 = v121;
          swift_bridgeObjectRelease();
          long long v47 = v103;
          long long v46 = v106;
          long long v45 = v108;
          if ((v94 & 1) == 0) {
            goto LABEL_85;
          }
        }
        goto LABEL_83;
      }
      long long v141 = v134;
      long long v142 = v135;
      char v143 = v136[0];
      long long v144 = *(_OWORD *)&v136[8];
      long long v145 = *(_OWORD *)&v136[24];
      char v146 = v136[40] & 1;
      long long v147 = v137;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v141);
    }
    outlined init with take of AST.Conditional.Condition.Kind(&v141, &v148);
    AST.root.modify(&v148);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v148, (uint64_t)&v157);
    goto LABEL_36;
  }
  v12._uint64_t countAndFlagsBits = 38;
  v12._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v12))
  {
    Parser.lexNumber(_:)(1, (uint64_t)&v134);
    if (v136[0])
    {
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi3_((uint64_t)&v141);
LABEL_21:
      outlined init with take of AST.Conditional.Condition.Kind(&v141, &v148);
      AST.root.modify(&v148);
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v148, (uint64_t)&v157);
      while (1)
      {
        uint64_t v1 = (char *)&cache variable for noncanonical specialized generic type metadata for AST.Conditional.Condition.Kind?;
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v157, (uint64_t)v161);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v161, (uint64_t)v162);
        if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)v162) == 1)
        {
          uint64_t v119 = v7;
          unint64_t v2 = *((void *)v5 + 9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = specialized Collection.dropFirst(_:)(*(void *)(v3 + 16), v2);
          uint64_t v49 = v48;
          unint64_t v7 = v50;
          uint64_t v1 = (char *)(v51 >> 1);
          uint64_t v109 = v2;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v52 = v49 - 32;
          uint64_t v53 = v7;
          unint64_t v13 = v7;
LABEL_39:
          uint64_t v54 = v52 + 80 * (void)v53;
          while (1)
          {
            if (v1 == v13)
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease_n();
              *(void *)BOOL v5 = v110;
              *((void *)v5 + 1) = v8;
              *((void *)v5 + 2) = v9;
              *((void *)v5 + 3) = v115;
              v5[32] = v114;
              *((void *)v5 + 5) = v113;
              *((void *)v5 + 6) = v10;
              *((void *)v5 + 7) = v112;
              v5[64] = v111;
              *((void *)v5 + 9) = v3;
              _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_((uint64_t)&v148);
              outlined init with take of AST.Conditional.Condition?((uint64_t)&v148, (uint64_t)v163);
              unint64_t v7 = v119;
              goto LABEL_52;
            }
            if ((uint64_t)v53 < (uint64_t)v7 || (uint64_t)v13 >= (uint64_t)v1) {
              break;
            }
            int v55 = *(unsigned __int8 *)(v54 + 32);
            ++v13;
            v54 += 80;
            if (!v55)
            {
              unint64_t v2 = v8;
              uint64_t v105 = v52;
              uint64_t v107 = v4;
              unint64_t v117 = v9;
              uint64_t v98 = *(void *)(v54 - 24);
              uint64_t v100 = *(void *)(v54 - 40);
              uint64_t v56 = *(void *)(v54 - 8);
              uint64_t v96 = *(void *)(v54 - 16);
              uint64_t v57 = *(void *)v54;
              uint64_t v58 = *(void *)(v54 + 8);
              uint64_t v59 = *(void *)(v54 + 16);
              unsigned __int8 v60 = *(unsigned char *)(v54 + 24);
              uint64_t v95 = *(void *)(v54 - 32);
              swift_bridgeObjectRetain();
              uint64_t v102 = v59;
              outlined copy of ParseError?(v56, v57, v58, v59, v60);
              unint64_t v116 = v2;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (char *)v3);
              }
              unint64_t v62 = *(void *)(v3 + 16);
              unint64_t v61 = *(void *)(v3 + 24);
              unint64_t v63 = (char *)v3;
              if (v62 >= v61 >> 1) {
                unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, (char *)v3);
              }
              *((void *)v63 + 2) = v62 + 1;
              uint64_t v3 = (uint64_t)v63;
              unint64_t v64 = &v63[80 * v62];
              v64[32] = 0;
              *((void *)v64 + 5) = v100;
              *((void *)v64 + 6) = v95;
              *((void *)v64 + 7) = v98;
              *((void *)v64 + 8) = v96;
              *((void *)v64 + 9) = v56;
              *((void *)v64 + 10) = v57;
              *((void *)v64 + 11) = v58;
              *((void *)v64 + 12) = v102;
              v64[104] = v60;
              uint64_t v53 = v13;
              BOOL v5 = (char *)v133;
              uint64_t v8 = v2;
              unint64_t v9 = v117;
              unint64_t v10 = v122;
              uint64_t v4 = v107;
              uint64_t v52 = v105;
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of AST.Conditional.Condition?((uint64_t)v161, (uint64_t)&v148);
        unint64_t v13 = (char *)*((void *)v5 + 2);
        if ((unint64_t)v13 >> 14 < v9 >> 14) {
          goto LABEL_88;
        }
        outlined init with take of AST.Conditional.Condition.Kind(&v148, v163);
        unint64_t v164 = v9;
        BOOL v165 = v13;
        AST.root.modify(v163);
LABEL_52:
        outlined init with take of AST.Conditional.Condition?((uint64_t)v163, (uint64_t)&v141);
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v141, (uint64_t)&v148);
        if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)&v148) != 1) {
          break;
        }
LABEL_53:
        unint64_t v2 = *((void *)v5 + 9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = specialized Collection.dropFirst(_:)(*((void *)v7 + 2), v2);
        uint64_t v66 = v65;
        uint64_t v68 = v67;
        uint64_t v43 = v69 >> 1;
        unint64_t v122 = v2;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        unint64_t v44 = v66 - 32;
        uint64_t v70 = v68;
        uint64_t v8 = v68;
LABEL_54:
        unint64_t v71 = v44 + 80 * v70;
        while (1)
        {
          if (v43 == v8)
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n();
            *(void *)BOOL v5 = v129;
            *((void *)v5 + 1) = v131;
            *((void *)v5 + 2) = v128;
            *((void *)v5 + 3) = v127;
            v5[32] = v126;
            *((void *)v5 + 5) = v125;
            *((void *)v5 + 6) = v130;
            *((void *)v5 + 7) = v124;
            v5[64] = v123;
            *((void *)v5 + 9) = v7;
            _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_((uint64_t)v163);
            return outlined init with take of AST.Conditional.Condition?((uint64_t)v163, (uint64_t)a1);
          }
          if (v70 < v68 || v8 >= v43) {
            break;
          }
          int v72 = *(unsigned __int8 *)(v71 + 32);
          ++v8;
          v71 += 80;
          if (!v72)
          {
            uint64_t v120 = v42;
            uint64_t v114 = *(void *)(v71 - 24);
            uint64_t v115 = *(void *)(v71 - 40);
            unint64_t v2 = *(void *)(v71 - 8);
            uint64_t v113 = *(void *)(v71 - 16);
            uint64_t v73 = *(void *)v71;
            uint64_t v4 = *(void *)(v71 + 8);
            uint64_t v74 = *(void *)(v71 + 16);
            uint64_t v3 = *(unsigned __int8 *)(v71 + 24);
            unint64_t v116 = *(void *)(v71 - 32);
            swift_bridgeObjectRetain();
            outlined copy of ParseError?(v2, v73, v4, v74, v3);
            unint64_t v117 = v44;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
            }
            unint64_t v76 = *((void *)v7 + 2);
            unint64_t v75 = *((void *)v7 + 3);
            unint64_t v77 = v7;
            if (v76 >= v75 >> 1) {
              unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v7);
            }
            *((void *)v77 + 2) = v76 + 1;
            unint64_t v7 = v77;
            long long v78 = &v77[80 * v76];
            v78[32] = 0;
            unint64_t v44 = v117;
            *((void *)v78 + 5) = v115;
            *((void *)v78 + 6) = v116;
            *((void *)v78 + 7) = v114;
            *((void *)v78 + 8) = v113;
            *((void *)v78 + 9) = v2;
            *((void *)v78 + 10) = v73;
            *((void *)v78 + 11) = v4;
            *((void *)v78 + 12) = v74;
            v78[104] = v3;
            uint64_t v70 = v8;
            BOOL v5 = (char *)v133;
            uint64_t v42 = v120;
            goto LABEL_54;
          }
        }
        __break(1u);
LABEL_81:
        if ((v3 & 1) != 0 || *((void *)v5 + 5) < v42)
        {
LABEL_85:
          outlined consume of AST.Reference.Kind(v42, v3, v2, v43, v44);
          _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOi0_((uint64_t)&v148);
        }
        else
        {
LABEL_83:
          *(void *)&long long v141 = v42;
          *((void *)&v141 + 1) = v3;
          *(void *)&long long v142 = v2;
          *((void *)&v142 + 1) = v43;
          char v143 = v44;
          *(_OWORD *)(v4 + 40) = v45;
          *(_OWORD *)(v4 + 56) = v46;
          char v146 = v8;
          long long v147 = v47;
          _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v141);
          outlined init with take of AST.Conditional.Condition.Kind(&v141, &v148);
          AST.root.modify(&v148);
        }
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v148, (uint64_t)&v157);
LABEL_18:
        uint64_t v8 = v116;
        unint64_t v9 = v117;
LABEL_36:
        unint64_t v10 = v122;
        uint64_t v3 = v109;
      }
      uint64_t v3 = v155;
      unint64_t v7 = v156;
      v79._uint64_t countAndFlagsBits = 41;
      v79._uint64_t object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v79))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      long long v133 = xmmword_20D9D7520;
      long long v157 = xmmword_20D9D7520;
      uint64_t v159 = 0;
      uint64_t v158 = 0;
      char v160 = 3;
      uint64_t v8 = *((void *)v5 + 2);
      uint64_t v1 = (char *)ParseError.description.getter();
      unint64_t v2 = v80;
      unint64_t v13 = (char *)*((void *)v5 + 9);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_68;
      }
      goto LABEL_90;
    }
    unint64_t v14 = *((void *)&v135 + 1);
    *(void *)&long long v141 = v134;
    *((void *)&v141 + 1) = BYTE8(v134) & 1;
    long long v142 = v135;
    char v143 = 0;
    long long v144 = 0u;
    long long v145 = 0u;
    char v146 = 1;
    *(void *)&long long v147 = v135;
LABEL_20:
    *((void *)&v147 + 1) = v14;
    _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi0_((uint64_t)&v141);
    goto LABEL_21;
  }
  unint64_t v13 = (char *)*((void *)v1 + 2);
  closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 41, 0xE100000000000000, 0, &v148);
  unint64_t v14 = *((void *)v1 + 2);
  if (v14 >> 14 >= (unint64_t)v13 >> 14)
  {
    long long v141 = v148;
    long long v142 = 0uLL;
    char v143 = 2;
    long long v144 = 0u;
    long long v145 = 0u;
    char v146 = 1;
    *(void *)&long long v147 = v13;
    goto LABEL_20;
  }
LABEL_89:
  __break(1u);
LABEL_90:
  unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
LABEL_68:
  unint64_t v82 = *((void *)v13 + 2);
  unint64_t v81 = *((void *)v13 + 3);
  if (v82 >= v81 >> 1) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v82 + 1;
  uint64_t v83 = &v13[80 * v82];
  v83[32] = 1;
  *((void *)v83 + 5) = v1;
  *((void *)v83 + 6) = v2;
  *((void *)v83 + 7) = v8;
  *((void *)v83 + 8) = v8;
  *(_OWORD *)(v83 + 72) = v133;
  *((void *)v83 + 11) = 0;
  *((void *)v83 + 12) = 0;
  v83[104] = 3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((void *)v5 + 9) = v13;
LABEL_71:
  outlined init with take of AST.Conditional.Condition.Kind(&v148, &v134);
  *(void *)&long long v140 = v3;
  *((void *)&v140 + 1) = v7;
  long long v84 = v139;
  a1[6] = v138;
  a1[7] = v84;
  long long v85 = *(_OWORD *)&v136[16];
  a1[2] = *(_OWORD *)v136;
  a1[3] = v85;
  long long v86 = v137;
  a1[4] = *(_OWORD *)&v136[32];
  a1[5] = v86;
  long long v87 = v135;
  *a1 = v134;
  a1[1] = v87;
  a1[8] = v140;
  return AST.root.modify(a1);
}

uint64_t Parser.lexGroupConditionalStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v98 = *(void *)(v1 + 24);
  uint64_t v100 = *(void *)(v1 + 16);
  char v96 = *(unsigned char *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v94 = *(void *)(v1 + 56);
  uint64_t v95 = *(void *)(v1 + 40);
  char v93 = *(unsigned char *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v103 = *(void *)(v1 + 8);
  swift_bridgeObjectRetain();
  uint64_t v102 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v104 = v3;
  if ((v6 & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = specialized Collection.dropFirst(_:)(*(void *)(v5 + 16), v7);
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    int64_t v49 = v48 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v50 = v45 - 32;
    uint64_t v51 = v47;
    uint64_t v52 = v47;
LABEL_18:
    uint64_t v53 = v50 + 80 * v51;
    while (1)
    {
      if (v49 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v1 = v3;
        *(void *)(v1 + 8) = v103;
        *(void *)(v1 + 16) = v100;
        *(void *)(v1 + 24) = v98;
        *(unsigned char *)(v1 + 32) = v96;
        *(void *)(v1 + 40) = v95;
        *(void *)(v1 + 48) = v102;
        *(void *)(v1 + 56) = v94;
        *(unsigned char *)(v1 + 64) = v93;
        *(void *)(v1 + 72) = v5;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 255;
        return result;
      }
      if (v51 < v47 || v52 >= v49) {
        break;
      }
      int v54 = *(unsigned __int8 *)(v53 + 32);
      ++v52;
      v53 += 80;
      if (!v54)
      {
        uint64_t v108 = v7;
        uint64_t v90 = v50;
        uint64_t v92 = v43;
        uint64_t v82 = *(void *)(v53 - 40);
        uint64_t v84 = a1;
        uint64_t v55 = *(void *)(v53 - 8);
        uint64_t v78 = *(void *)(v53 - 16);
        uint64_t v80 = *(void *)(v53 - 24);
        uint64_t v57 = *(void *)v53;
        uint64_t v56 = *(void *)(v53 + 8);
        uint64_t v58 = *(void *)(v53 + 16);
        unsigned __int8 v59 = *(unsigned char *)(v53 + 24);
        uint64_t v76 = *(void *)(v53 - 32);
        swift_bridgeObjectRetain();
        uint64_t v86 = v55;
        uint64_t v88 = v57;
        uint64_t v60 = v57;
        uint64_t v61 = v56;
        outlined copy of ParseError?(v55, v60, v56, v58, v59);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
          uint64_t v5 = result;
        }
        unint64_t v63 = *(void *)(v5 + 16);
        unint64_t v62 = *(void *)(v5 + 24);
        uint64_t v64 = v5;
        a1 = v84;
        if (v63 >= v62 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, (char *)v5);
          uint64_t v64 = result;
        }
        *(void *)(v64 + 16) = v63 + 1;
        uint64_t v5 = v64;
        unint64_t v65 = v64 + 80 * v63;
        *(unsigned char *)(v65 + 32) = 0;
        *(void *)(v65 + 40) = v82;
        *(void *)(v65 + 48) = v76;
        *(void *)(v65 + 56) = v80;
        *(void *)(v65 + 64) = v78;
        *(void *)(v65 + 72) = v86;
        *(void *)(v65 + 80) = v88;
        *(void *)(v65 + 88) = v61;
        *(void *)(v65 + 96) = v58;
        *(unsigned char *)(v65 + 104) = v59;
        uint64_t v51 = v52;
        uint64_t v3 = v104;
        uint64_t v7 = v108;
        uint64_t v50 = v90;
        uint64_t v43 = v92;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v89 = v5;
  uint64_t v85 = *(void *)v1;
  unint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  char v87 = *(unsigned char *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 56);
  char v14 = *(unsigned char *)(v1 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexGroupStart()(v1, (uint64_t)v109);
  uint64_t v91 = v9;
  unsigned __int8 v15 = v110;
  if (v110 == 255)
  {
    uint64_t v81 = v12;
    uint64_t v83 = v11;
    uint64_t v74 = v8;
    char v75 = v14;
    uint64_t v77 = v13;
    unint64_t v79 = v10;
    uint64_t v23 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v107 = v7;
    specialized Collection.dropFirst(_:)(*(void *)(v7 + 16), v23);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    int64_t v29 = v28 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v30 = v25 - 32;
    uint64_t v31 = v27;
    uint64_t v32 = v27;
    char v33 = v87;
LABEL_6:
    uint64_t v3 = v104;
    uint64_t v34 = v30 + 80 * v31;
    while (v29 != v32)
    {
      if (v31 < v27 || v32 >= v29) {
        goto LABEL_30;
      }
      int v35 = *(unsigned __int8 *)(v34 + 32);
      ++v32;
      v34 += 80;
      if (!v35)
      {
        uint64_t v73 = v30;
        uint64_t v69 = *(void *)(v34 - 24);
        uint64_t v70 = *(void *)(v34 - 40);
        uint64_t v36 = *(void *)(v34 - 8);
        uint64_t v67 = *(void *)(v34 - 32);
        uint64_t v68 = *(void *)(v34 - 16);
        uint64_t v37 = *(void *)v34;
        uint64_t v38 = *(void *)(v34 + 8);
        uint64_t v39 = *(void *)(v34 + 16);
        unsigned __int8 v66 = *(unsigned char *)(v34 + 24);
        swift_bridgeObjectRetain();
        uint64_t v72 = v37;
        uint64_t v71 = v38;
        outlined copy of ParseError?(v36, v37, v38, v39, v66);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v107 + 16) + 1, 1, (char *)v107);
          uint64_t v107 = result;
        }
        unint64_t v41 = *(void *)(v107 + 16);
        unint64_t v40 = *(void *)(v107 + 24);
        uint64_t v30 = v73;
        if (v41 >= v40 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, (char *)v107);
          uint64_t v30 = v73;
          uint64_t v107 = result;
        }
        char v33 = v87;
        *(void *)(v107 + 16) = v41 + 1;
        unint64_t v42 = v107 + 80 * v41;
        *(unsigned char *)(v42 + 32) = 0;
        *(void *)(v42 + 40) = v70;
        *(void *)(v42 + 48) = v67;
        *(void *)(v42 + 56) = v69;
        *(void *)(v42 + 64) = v68;
        *(void *)(v42 + 72) = v36;
        *(void *)(v42 + 80) = v72;
        *(void *)(v42 + 88) = v71;
        *(void *)(v42 + 96) = v39;
        *(unsigned char *)(v42 + 104) = v66;
        uint64_t v31 = v32;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(void *)uint64_t v1 = v85;
    *(void *)(v1 + 8) = v74;
    *(void *)(v1 + 16) = v79;
    *(void *)(v1 + 24) = v83;
    *(unsigned char *)(v1 + 32) = v33;
    *(void *)(v1 + 40) = v81;
    *(void *)(v1 + 48) = v91;
    *(void *)(v1 + 56) = v77;
    *(unsigned char *)(v1 + 64) = v75;
    uint64_t v7 = v107;
    *(void *)(v1 + 72) = v107;
    uint64_t v5 = v89;
    goto LABEL_17;
  }
  uint64_t v16 = v109[0];
  uint64_t v17 = v109[1];
  uint64_t v18 = v109[2];
  uint64_t v19 = v109[3];
  uint64_t v20 = v109[4];
  uint64_t v105 = v109[6];
  uint64_t v106 = v109[5];
  uint64_t v99 = v109[8];
  uint64_t v101 = v109[7];
  uint64_t v97 = v109[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v22 = *(void *)(v1 + 16);
  if (v22 >> 14 >= v10 >> 14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v18;
    *(void *)(a1 + 24) = v19;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 40) = v106;
    *(void *)(a1 + 48) = v105;
    *(void *)(a1 + 56) = v101;
    *(void *)(a1 + 64) = v99;
    *(void *)(a1 + 72) = v97;
    *(unsigned char *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v22;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t Parser.lexAbsentFunctionStart()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = specialized Parser.tryEat<A>(sequence:)(2088648488, 0xE400000000000000);
  char v5 = result;
  if ((result & 1) != 0
    || (uint64_t result = specialized Parser.tryEat<A>(sequence:)(8273704, 0xE300000000000000), (result & 1) != 0))
  {
    unint64_t v6 = *(void *)(v1 + 16);
    if (v6 >> 14 < v3 >> 14)
    {
      __break(1u);
    }
    else
    {
      *(unsigned char *)a1 = (v5 & 1) == 0;
      *(void *)(a1 + 8) = v3;
      *(void *)(a1 + 16) = v6;
    }
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 2;
  }
  return result;
}

uint64_t Parser.lexCustomCCStart()@<X0>(void *a1@<X8>)
{
  uint64_t v100 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  unint64_t v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  uint64_t v99 = (uint64_t)&v75 - v8;
  uint64_t v9 = type metadata accessor for AST.Atom.CharacterProperty(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11);
  uint64_t v97 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x270FA5388](v13 - 8, v14);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v1;
  uint64_t v18 = v1[1];
  unint64_t v20 = v1[2];
  uint64_t v19 = v1[3];
  LOBYTE(v15) = *((unsigned char *)v1 + 32);
  uint64_t v21 = v1[5];
  uint64_t v22 = v1[6];
  uint64_t v23 = v1[7];
  uint64_t v24 = v1 + 9;
  uint64_t v25 = v1[9];
  uint64_t v98 = v1;
  int v26 = *((unsigned __int8 *)v1 + 64);
  uint64_t v95 = v19;
  uint64_t v96 = v17;
  uint64_t v104 = v17;
  uint64_t v105 = v18;
  unint64_t v106 = v20;
  uint64_t v107 = v19;
  char v108 = v15;
  uint64_t v93 = v23;
  uint64_t v94 = v21;
  uint64_t v109 = v21;
  uint64_t v110 = v22;
  uint64_t v111 = v23;
  char v112 = v26;
  uint64_t v113 = v25;
  LOBYTE(v103) = v15;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()(&v104, (uint64_t)v6);
  uint64_t v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v102 = v10 + 48;
  if (v101(v6, 1, v9) == 1)
  {
    int v85 = v26;
    uint64_t v86 = v22;
    uint64_t v91 = v18;
    uint64_t v92 = v10;
    uint64_t v87 = v9;
    uint64_t v89 = v16;
    uint64_t v88 = v24;
    unint64_t v90 = v20;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v27 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = specialized Collection.dropFirst(_:)(*(void *)(v25 + 16), v27);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    int64_t v34 = v33 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v36 = v30 - 32;
    uint64_t v37 = v32;
    uint64_t v38 = v32;
LABEL_3:
    uint64_t v39 = v36 + 80 * v37;
    uint64_t v40 = v92;
    uint64_t v41 = v91;
    while (1)
    {
      if (v34 == v38)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        uint64_t v104 = v96;
        uint64_t v105 = v41;
        unint64_t v62 = v90;
        unint64_t v106 = v90;
        uint64_t v107 = v95;
        char v108 = v103;
        uint64_t v109 = v94;
        uint64_t v110 = v86;
        uint64_t v111 = v93;
        char v112 = v85;
        uint64_t v113 = v25;
        uint64_t v63 = v99;
        uint64_t v9 = v87;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v99, 1, 1, v87);
        uint64_t v61 = v100;
        uint64_t v16 = v89;
        goto LABEL_15;
      }
      if (v37 < v32 || v38 >= v34) {
        break;
      }
      int v42 = *(unsigned __int8 *)(v39 + 32);
      ++v38;
      v39 += 80;
      if (!v42)
      {
        uint64_t v78 = v27;
        uint64_t v84 = v36;
        uint64_t v43 = *(void *)(v39 - 32);
        uint64_t v77 = *(void *)(v39 - 40);
        uint64_t v76 = *(void *)(v39 - 24);
        uint64_t v44 = *(void *)(v39 - 8);
        uint64_t v75 = *(void *)(v39 - 16);
        uint64_t v45 = *(void *)v39;
        uint64_t v46 = *(void *)(v39 + 8);
        uint64_t v47 = *(void *)(v39 + 16);
        unsigned __int8 v48 = *(unsigned char *)(v39 + 24);
        uint64_t v83 = v43;
        swift_bridgeObjectRetain();
        uint64_t v80 = v44;
        uint64_t v82 = v45;
        uint64_t v81 = v46;
        uint64_t v79 = v47;
        uint64_t v49 = v47;
        unsigned __int8 v50 = v48;
        outlined copy of ParseError?(v44, v45, v46, v49, v48);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v51 = v28;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1, (char *)v25);
          uint64_t v25 = result;
        }
        unint64_t v53 = *(void *)(v25 + 16);
        unint64_t v52 = *(void *)(v25 + 24);
        uint64_t v27 = v78;
        if (v53 >= v52 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, (char *)v25);
          uint64_t v25 = result;
        }
        *(void *)(v25 + 16) = v53 + 1;
        unint64_t v54 = v25 + 80 * v53;
        *(unsigned char *)(v54 + 32) = 0;
        uint64_t v55 = v83;
        *(void *)(v54 + 40) = v77;
        *(void *)(v54 + 48) = v55;
        uint64_t v56 = v75;
        *(void *)(v54 + 56) = v76;
        *(void *)(v54 + 64) = v56;
        uint64_t v57 = v82;
        *(void *)(v54 + 72) = v80;
        *(void *)(v54 + 80) = v57;
        uint64_t v58 = v79;
        *(void *)(v54 + 88) = v81;
        *(void *)(v54 + 96) = v58;
        *(unsigned char *)(v54 + 104) = v50;
        uint64_t v37 = v38;
        uint64_t v28 = v51;
        uint64_t v36 = v84;
        goto LABEL_3;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v59 = (uint64_t)v6;
  uint64_t v60 = v99;
  outlined init with take of AST.Atom.Kind(v59, v99, type metadata accessor for AST.Atom.CharacterProperty);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v60, 0, 1, v9);
  uint64_t v61 = v100;
  unint64_t v62 = v20;
  uint64_t v63 = v60;
LABEL_15:
  unsigned int v64 = v101((char *)v63, 1, v9);
  if (v64 == 1)
  {
    outlined destroy of _ASTParent?(v63, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v16, 1, 1, v65);
  }
  else
  {
    uint64_t v66 = v97;
    outlined init with take of AST.Atom.Kind(v63, v97, type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t result = outlined init with take of AST.Atom.Kind(v66, (uint64_t)v16, type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v67 = v106;
    if (v106 >> 14 < v62 >> 14)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    uint64_t v69 = &v16[*(int *)(v68 + 28)];
    *(void *)uint64_t v69 = v62;
    *((void *)v69 + 1) = v67;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v16, 0, 1, v68);
  }
  outlined destroy of _ASTParent?((uint64_t)v16, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  uint64_t v70 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v103 = v70;
  Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v103);
  uint64_t result = swift_bridgeObjectRelease();
  if (v64 != 1
    || (v71._uint64_t countAndFlagsBits = 91,
        v71._uint64_t object = (void *)0xE100000000000000,
        uint64_t result = Parser.tryEat(_:)(v71),
        (result & 1) == 0))
  {
    v61[1] = 0;
    v61[2] = 0;
    *uint64_t v61 = 2;
    return result;
  }
  v72._uint64_t countAndFlagsBits = 94;
  v72._uint64_t object = (void *)0xE100000000000000;
  uint64_t v73 = v98;
  uint64_t result = Parser.tryEat(_:)(v72);
  unint64_t v74 = v73[2];
  if (v74 >> 14 >= v62 >> 14)
  {
    *(unsigned char *)uint64_t v61 = result & 1;
    v61[1] = v62;
    v61[2] = v74;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t Parser.lexCustomCCBinOp()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v8 = *(unsigned char *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  *(void *)&long long v16 = *(void *)v1;
  *((void *)&v16 + 1) = v3;
  long long v15 = *(_OWORD *)(v1 + 16);
  long long v17 = v15;
  char v18 = v4;
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = v7;
  char v22 = v8;
  uint64_t v23 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Parser.peekCCBinOp()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  char v11 = v24;
  uint64_t v12 = 32382;
  switch(v24)
  {
    case 1:
      uint64_t v12 = 9766;
      goto LABEL_4;
    case 2:
      goto LABEL_4;
    case 3:
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 3;
      return result;
    default:
      uint64_t v12 = 11565;
LABEL_4:
      if ((specialized Parser.tryEat<A>(sequence:)(v12, 0xE200000000000000) & 1) == 0)
      {
        *(void *)&long long v16 = String.init<A>(_:)();
        *((void *)&v16 + 1) = v13;
        long long v17 = 0uLL;
        char v18 = 3;
        Parser.errorAtCurrentPosition(_:)(&v16);
      }
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v14 = *(void *)(v1 + 16);
      if (v14 >> 14 < (unint64_t)v15 >> 14)
      {
        __break(1u);
        JUMPOUT(0x20D987CC4);
      }
      *(unsigned char *)a1 = v11;
      a1[1] = v15;
      a1[2] = v14;
      return result;
  }
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional __swiftcall Parser.peekCCBinOp()()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = String.subscript.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  LOBYTE(v2) = specialized Sequence<>.starts<A>(with:)(11565, 0xE200000000000000, v2, v4);
  result.value = swift_bridgeObjectRelease();
  if (v2)
  {
    char v6 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = String.subscript.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(32382, 0xE200000000000000, v7, v9);
    result.value = swift_bridgeObjectRelease();
    if (v7)
    {
      char v6 = 2;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = String.subscript.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      LOBYTE(v10) = specialized Sequence<>.starts<A>(with:)(9766, 0xE200000000000000, v10, v12);
      result.value = swift_bridgeObjectRelease();
      if (v10) {
        char v6 = 1;
      }
      else {
        char v6 = 3;
      }
    }
  }
  char *v1 = v6;
  return result;
}

unint64_t closure #1 in Parser.canLexDotNetCharClassSubtraction()@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  v240 = a2;
  uint64_t v249 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x270FA5388](v249, v3);
  v248 = (char *)&v237 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = (unint64_t *)(v5 + 8);
  unint64_t v238 = (unint64_t)" bound, but lexed upper bound?";
  unint64_t v242 = 0x800000020D9E0210;
  unint64_t v243 = (unint64_t)"Unhandled termination condition";
  v239 = (void *)0x800000020D9E0190;
  v251 = (void *)a1;
  while (1)
  {
    char v6 = *(char **)(a1 + 16);
    if ((*(unsigned char *)(a1 + 32) & 1) == 0)
    {
      unint64_t v7 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v8 = String.subscript.getter();
      unint64_t v10 = v9;
      swift_bridgeObjectRelease();
      LOBYTE(v8) = specialized Sequence<>.starts<A>(with:)(2309928, 0xE300000000000000, v8, v10);
      swift_bridgeObjectRelease();
      if (v8)
      {
        if (String.count.getter() < 1
          || (swift_bridgeObjectRetain(),
              String.subscript.getter(),
              swift_bridgeObjectRelease(),
              unint64_t v11 = Substring.index(_:offsetBy:limitedBy:)(),
              char v13 = v12,
              unint64_t result = swift_bridgeObjectRelease(),
              (v13 & 1) != 0))
        {
          strcpy((char *)v252, "UNREACHABLE: ");
          HIWORD(v252[1]) = -4864;
          v29._uint64_t countAndFlagsBits = 0xD000000000000015;
          v29._uint64_t object = (void *)(v243 | 0x8000000000000000);
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          uint64_t v30 = v252[0];
          uint64_t v31 = v252[1];
          uint64_t v32 = *(char **)(a1 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, v32);
          }
          unint64_t v34 = *((void *)v32 + 2);
          unint64_t v33 = *((void *)v32 + 3);
          if (v34 >= v33 >> 1) {
            uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v32);
          }
          *((void *)v32 + 2) = v34 + 1;
          int v35 = &v32[80 * v34];
          v35[32] = 0;
          *((void *)v35 + 5) = v30;
          *((void *)v35 + 6) = v31;
          *((void *)v35 + 7) = v6;
          *((void *)v35 + 8) = v6;
          *(_OWORD *)(v35 + 72) = 0u;
          *(_OWORD *)(v35 + 88) = 0u;
          v35[104] = -1;
          *(void *)(a1 + 72) = v32;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v36 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v36 < 1) {
            goto LABEL_27;
          }
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v11 = Substring.index(_:offsetBy:limitedBy:)();
          char v38 = v37;
          unint64_t result = swift_bridgeObjectRelease();
          if (v38) {
            goto LABEL_27;
          }
          if (v7 >> 14 < v11 >> 14) {
            goto LABEL_234;
          }
        }
        else if (v7 >> 14 < v11 >> 14)
        {
          goto LABEL_231;
        }
        *(void *)(a1 + 16) = v11;
        *(void *)(a1 + 24) = v7;
LABEL_27:
        uint64_t v39 = (void *)a1;
        uint64_t v40 = 41;
        uint64_t v41 = 0xE100000000000000;
LABEL_40:
        unint64_t result = specialized Parser.lexUntil(_:)(v39, v40, v41, v252);
        uint64_t v55 = v252[1];
LABEL_41:
        if (*(void *)(a1 + 16) >> 14 < (unint64_t)v6 >> 14) {
          goto LABEL_220;
        }
        if (v55) {
          goto LABEL_2;
        }
        char v6 = *(char **)(a1 + 16);
        goto LABEL_44;
      }
    }
    uint64_t v15 = *(void *)(a1 + 56);
    if ((v15 & 8) != 0)
    {
      unint64_t v16 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v17 = String.subscript.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      LOBYTE(v17) = specialized Sequence<>.starts<A>(with:)(10799, 0xE200000000000000, v17, v19);
      swift_bridgeObjectRelease();
      if (v17)
      {
        if (String.count.getter() < 1
          || (swift_bridgeObjectRetain(),
              String.subscript.getter(),
              swift_bridgeObjectRelease(),
              unint64_t v20 = Substring.index(_:offsetBy:limitedBy:)(),
              char v22 = v21,
              unint64_t result = swift_bridgeObjectRelease(),
              (v22 & 1) != 0))
        {
          strcpy((char *)v252, "UNREACHABLE: ");
          HIWORD(v252[1]) = -4864;
          v45._uint64_t countAndFlagsBits = 0xD000000000000015;
          v45._uint64_t object = (void *)(v243 | 0x8000000000000000);
          String.append(_:)(v45);
          swift_bridgeObjectRelease();
          uint64_t v46 = v252[0];
          uint64_t v47 = v252[1];
          unsigned __int8 v48 = *(char **)(a1 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned __int8 v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
          }
          unint64_t v50 = *((void *)v48 + 2);
          unint64_t v49 = *((void *)v48 + 3);
          if (v50 >= v49 >> 1) {
            unsigned __int8 v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v48);
          }
          *((void *)v48 + 2) = v50 + 1;
          uint64_t v51 = &v48[80 * v50];
          v51[32] = 0;
          *((void *)v51 + 5) = v46;
          *((void *)v51 + 6) = v47;
          *((void *)v51 + 7) = v6;
          *((void *)v51 + 8) = v6;
          *(_OWORD *)(v51 + 72) = 0u;
          *(_OWORD *)(v51 + 88) = 0u;
          v51[104] = -1;
          *(void *)(a1 + 72) = v48;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v52 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v52 < 1) {
            goto LABEL_39;
          }
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v20 = Substring.index(_:offsetBy:limitedBy:)();
          char v54 = v53;
          unint64_t result = swift_bridgeObjectRelease();
          if (v54) {
            goto LABEL_39;
          }
          if (v16 >> 14 < v20 >> 14) {
            goto LABEL_237;
          }
        }
        else if (v16 >> 14 < v20 >> 14)
        {
          goto LABEL_233;
        }
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v16;
LABEL_39:
        uint64_t v39 = (void *)a1;
        uint64_t v40 = 12074;
        uint64_t v41 = 0xE200000000000000;
        goto LABEL_40;
      }
    }
    if ((v15 & 2) != 0)
    {
      uint64_t v23 = v6;
      unint64_t v24 = *(void *)(a1 + 24);
      uint64_t v25 = *(char **)(a1 + 72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v246 = v23;
      uint64_t v26 = String.subscript.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      if (!((v26 ^ v28) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        a1 = (uint64_t)v251;
        char v6 = v246;
        goto LABEL_44;
      }
      uint64_t v42 = Substring.subscript.getter();
      uint64_t v44 = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v42 != 35 || v44 != 0xE100000000000000)
      {
        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v73) {
          goto LABEL_67;
        }
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
LABEL_67:
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v74 = Substring.index(_:offsetBy:limitedBy:)();
      char v76 = v75;
      unint64_t result = swift_bridgeObjectRelease();
      if (v76)
      {
        strcpy((char *)v252, "UNREACHABLE: ");
        HIWORD(v252[1]) = -4864;
        v77._uint64_t countAndFlagsBits = 0xD000000000000015;
        v77._uint64_t object = v239;
        String.append(_:)(v77);
        swift_bridgeObjectRelease();
        uint64_t v78 = v252[0];
        uint64_t v79 = v252[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25);
        }
        unint64_t v81 = *((void *)v25 + 2);
        unint64_t v80 = *((void *)v25 + 3);
        if (v81 >= v80 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v25);
        }
        *((void *)v25 + 2) = v81 + 1;
        uint64_t v82 = &v25[80 * v81];
        v82[32] = 0;
        *((void *)v82 + 5) = v78;
        *((void *)v82 + 6) = v79;
        unint64_t v83 = (unint64_t)v246;
        *((void *)v82 + 7) = v246;
        *((void *)v82 + 8) = v83;
        *(_OWORD *)(v82 + 72) = 0u;
        *(_OWORD *)(v82 + 88) = 0u;
        v82[104] = -1;
        v251[9] = v25;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v84 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v84 < 1)
        {
          unint64_t v74 = v83;
          a1 = (uint64_t)v251;
LABEL_92:
          v252[0] = 0;
          v252[1] = 0xE000000000000000;
          unint64_t result = closure #1 in closure #1 in Parser.lexComment()(a1);
          unint64_t v103 = v74;
          unint64_t v241 = v74;
          unint64_t v104 = v74;
          if (result)
          {
LABEL_110:
            if (v103 >> 14 < v241 >> 14) {
              goto LABEL_229;
            }
            uint64_t v55 = v252[1];
            char v6 = v246;
            goto LABEL_41;
          }
          while (1)
          {
            unint64_t v103 = *(void *)(a1 + 16);
            unint64_t v105 = *(void *)(a1 + 24);
            unint64_t v106 = *(char **)(a1 + 72);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v250 = v105;
            uint64_t v107 = String.subscript.getter();
            unint64_t v109 = v108;
            swift_bridgeObjectRelease();
            if (!((v107 ^ v109) >> 14))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t result = swift_bridgeObjectRelease();
              unint64_t v103 = v104;
              a1 = (uint64_t)v251;
              goto LABEL_110;
            }
            uint64_t v110 = Substring.subscript.getter();
            uint64_t v244 = v111;
            unint64_t v245 = v110;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            unint64_t v112 = Substring.index(_:offsetBy:limitedBy:)();
            char v114 = v113;
            unint64_t result = swift_bridgeObjectRelease();
            if ((v114 & 1) == 0) {
              break;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v106 + 2) + 1, 1, v106);
            }
            unint64_t v116 = *((void *)v106 + 2);
            unint64_t v115 = *((void *)v106 + 3);
            if (v116 >= v115 >> 1) {
              unint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v115 > 1), v116 + 1, 1, v106);
            }
            *((void *)v106 + 2) = v116 + 1;
            unint64_t v117 = &v106[80 * v116];
            v117[32] = 0;
            unint64_t v118 = v242;
            *((void *)v117 + 5) = 0xD000000000000022;
            *((void *)v117 + 6) = v118;
            *((void *)v117 + 7) = v103;
            *((void *)v117 + 8) = v103;
            *(_OWORD *)(v117 + 72) = 0u;
            *(_OWORD *)(v117 + 88) = 0u;
            v117[104] = -1;
            v251[9] = v106;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            uint64_t v119 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            if (v119 < 1)
            {
              a1 = (uint64_t)v251;
            }
            else
            {
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              unint64_t v120 = Substring.index(_:offsetBy:limitedBy:)();
              char v122 = v121;
              unint64_t result = swift_bridgeObjectRelease();
              a1 = (uint64_t)v251;
              if ((v122 & 1) == 0)
              {
                if (v250 >> 14 < v120 >> 14) {
                  goto LABEL_228;
                }
                unint64_t v103 = v120;
LABEL_108:
                unint64_t v123 = v250;
                a1 = (uint64_t)v251;
                v251[2] = v103;
                *(void *)(a1 + 24) = v123;
              }
            }
            MEMORY[0x2105617C0](v245, v244);
            swift_bridgeObjectRelease();
            unint64_t result = closure #1 in closure #1 in Parser.lexComment()(a1);
            unint64_t v104 = v103;
            if (result) {
              goto LABEL_110;
            }
          }
          if (v250 >> 14 < v112 >> 14) {
            goto LABEL_221;
          }
          unint64_t v103 = v112;
          goto LABEL_108;
        }
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v85 = Substring.index(_:offsetBy:limitedBy:)();
        char v87 = v86;
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v74 = v83;
        a1 = (uint64_t)v251;
        if (v87) {
          goto LABEL_92;
        }
        if (v24 >> 14 < v85 >> 14) {
          goto LABEL_240;
        }
        unint64_t v74 = v85;
      }
      else
      {
        a1 = (uint64_t)v251;
        if (v24 >> 14 < v74 >> 14) {
          goto LABEL_235;
        }
      }
      *(void *)(a1 + 16) = v74;
      *(void *)(a1 + 24) = v24;
      goto LABEL_92;
    }
LABEL_44:
    if ((*(unsigned char *)(a1 + 56) & 1) == 0) {
      goto LABEL_113;
    }
    swift_bridgeObjectRetain();
    unint64_t v56 = String.subscript.getter();
    unint64_t v58 = v57;
    unint64_t result = swift_bridgeObjectRelease();
    if (v58 >> 14 < v56 >> 14) {
      goto LABEL_216;
    }
    v246 = v6;
    unint64_t v59 = Substring.subscript.getter();
    unint64_t v61 = v60;
    swift_bridgeObjectRelease();
    unint64_t v62 = v59 >> 14;
    unint64_t v63 = v61 >> 14;
    if (v59 >> 14 == v61 >> 14) {
      goto LABEL_81;
    }
    unint64_t v64 = Substring.subscript.getter();
    unint64_t result = specialized Collection.first.getter(v64, v65);
    if ((result & 0x100000000) != 0) {
      goto LABEL_242;
    }
    uint64_t v66 = v248;
    Unicode.Scalar.properties.getter();
    char v67 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    swift_bridgeObjectRelease();
    unint64_t v250 = *v247;
    ((void (*)(char *, uint64_t))v250)(v66, v249);
    if ((v67 & 1) == 0) {
      goto LABEL_81;
    }
    unint64_t result = Substring.index(after:)();
    unint64_t v68 = result >> 14;
    if (result >> 14 == v63) {
      goto LABEL_80;
    }
    unint64_t v245 = v59 >> 14;
    while (1)
    {
      unint64_t result = Substring.subscript.getter();
      if ((v69 & 0x2000000000000000) != 0) {
        uint64_t v70 = HIBYTE(v69) & 0xF;
      }
      else {
        uint64_t v70 = result & 0xFFFFFFFFFFFFLL;
      }
      if (!v70)
      {
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }
      if ((v69 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v69 & 0x2000000000000000) != 0)
        {
          v252[0] = result;
          v252[1] = v69 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((result & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      Swift::String v71 = v248;
      Unicode.Scalar.properties.getter();
      char v72 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
      swift_bridgeObjectRelease();
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v250)(v71, v249);
      if ((v72 & 1) == 0) {
        break;
      }
      unint64_t result = Substring.index(after:)();
      unint64_t v68 = result >> 14;
      if (result >> 14 == v63)
      {
        if (v63 >= v245) {
          goto LABEL_81;
        }
        goto LABEL_217;
      }
    }
    unint64_t v63 = v68;
    unint64_t v62 = v245;
LABEL_80:
    if (v63 < v62) {
      goto LABEL_217;
    }
LABEL_81:
    uint64_t v88 = Substring.subscript.getter();
    unint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v94 = v93;
    swift_bridgeObjectRelease();
    if (!((v88 ^ v90) >> 14))
    {
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v251;
LABEL_113:
      unint64_t v124 = *(void *)(a1 + 16);
      v125._uint64_t countAndFlagsBits = 45;
      v125._uint64_t object = (void *)0xE100000000000000;
      unint64_t result = Parser.tryEat(_:)(v125);
      if ((result & 1) == 0) {
        goto LABEL_213;
      }
      unint64_t v126 = *(void *)(a1 + 16);
      if (v126 >> 14 < v124 >> 14) {
        goto LABEL_238;
      }
      unint64_t v242 = v238 | 0x8000000000000000;
      v239 = (void *)(v243 | 0x8000000000000000);
      unint64_t v237 = v124;
      unint64_t v238 = v126;
      while (1)
      {
        if ((*(unsigned char *)(a1 + 32) & 1) != 0
          || (swift_bridgeObjectRetain(),
              uint64_t v127 = String.subscript.getter(),
              unint64_t v129 = v128,
              swift_bridgeObjectRelease(),
              LOBYTE(v127) = specialized Sequence<>.starts<A>(with:)(2309928, 0xE300000000000000, v127, v129),
              swift_bridgeObjectRelease(),
              (v127 & 1) == 0))
        {
          uint64_t v143 = *(void *)(a1 + 56);
          if ((v143 & 8) == 0
            || (swift_bridgeObjectRetain(),
                uint64_t v144 = String.subscript.getter(),
                unint64_t v146 = v145,
                swift_bridgeObjectRelease(),
                LOBYTE(v144) = specialized Sequence<>.starts<A>(with:)(10799, 0xE200000000000000, v144, v146),
                swift_bridgeObjectRelease(),
                (v144 & 1) == 0))
          {
            if ((v143 & 2) == 0) {
              goto LABEL_143;
            }
            unint64_t v158 = v126;
            unint64_t v159 = *(void *)(a1 + 24);
            char v160 = *(char **)(a1 + 72);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v246 = (char *)v158;
            uint64_t v161 = String.subscript.getter();
            unint64_t v163 = v162;
            swift_bridgeObjectRelease();
            if (!((v161 ^ v163) >> 14))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_142:
              a1 = (uint64_t)v251;
              unint64_t v126 = (unint64_t)v246;
              goto LABEL_143;
            }
            uint64_t v180 = Substring.subscript.getter();
            uint64_t v182 = v181;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v180 == 35 && v182 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v183 & 1) == 0) {
                goto LABEL_142;
              }
            }
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            unint64_t v184 = Substring.index(_:offsetBy:limitedBy:)();
            char v186 = v185;
            unint64_t result = swift_bridgeObjectRelease();
            if ((v186 & 1) == 0)
            {
              uint64_t v187 = (uint64_t)v251;
              if (v159 >> 14 < v184 >> 14) {
                goto LABEL_239;
              }
              goto LABEL_179;
            }
            strcpy((char *)v252, "UNREACHABLE: ");
            HIWORD(v252[1]) = -4864;
            v188._uint64_t countAndFlagsBits = 0xD000000000000015;
            v188._uint64_t object = v239;
            String.append(_:)(v188);
            swift_bridgeObjectRelease();
            uint64_t v189 = v252[0];
            uint64_t v190 = v252[1];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v160 + 2) + 1, 1, v160);
            }
            unint64_t v192 = *((void *)v160 + 2);
            unint64_t v191 = *((void *)v160 + 3);
            if (v192 >= v191 >> 1) {
              char v160 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v191 > 1), v192 + 1, 1, v160);
            }
            *((void *)v160 + 2) = v192 + 1;
            BOOL v193 = &v160[80 * v192];
            v193[32] = 0;
            *((void *)v193 + 5) = v189;
            *((void *)v193 + 6) = v190;
            unint64_t v194 = (unint64_t)v246;
            *((void *)v193 + 7) = v246;
            *((void *)v193 + 8) = v194;
            *(_OWORD *)(v193 + 72) = 0u;
            *(_OWORD *)(v193 + 88) = 0u;
            v193[104] = -1;
            uint64_t v187 = (uint64_t)v251;
            v251[9] = v160;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            uint64_t v195 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            unint64_t v184 = v194;
            if (v195 >= 1)
            {
              swift_bridgeObjectRetain();
              unint64_t v196 = (unint64_t)v246;
              String.subscript.getter();
              swift_bridgeObjectRelease();
              unint64_t v197 = Substring.index(_:offsetBy:limitedBy:)();
              char v199 = v198;
              unint64_t result = swift_bridgeObjectRelease();
              unint64_t v184 = v196;
              if ((v199 & 1) == 0)
              {
                if (v159 >> 14 < v197 >> 14) {
                  goto LABEL_241;
                }
                unint64_t v184 = v197;
                uint64_t v187 = (uint64_t)v251;
LABEL_179:
                *(void *)(v187 + 16) = v184;
                *(void *)(v187 + 24) = v159;
              }
            }
            v252[0] = 0;
            v252[1] = 0xE000000000000000;
            unint64_t result = closure #1 in closure #1 in Parser.lexComment()(v187);
            unint64_t v200 = v184;
            unint64_t v241 = v184;
            a1 = v187;
            if (result)
            {
LABEL_209:
              if (v200 >> 14 < v241 >> 14) {
                goto LABEL_236;
              }
              uint64_t v157 = v252[1];
              unint64_t v126 = (unint64_t)v246;
              goto LABEL_136;
            }
            while (2)
            {
              unint64_t v200 = *(void *)(a1 + 16);
              unint64_t v202 = *(void *)(a1 + 24);
              BOOL v203 = *(char **)(a1 + 72);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v250 = v202;
              uint64_t v204 = String.subscript.getter();
              unint64_t v206 = v205;
              swift_bridgeObjectRelease();
              if (!((v204 ^ v206) >> 14))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t result = swift_bridgeObjectRelease();
                unint64_t v200 = v184;
                a1 = (uint64_t)v251;
                goto LABEL_209;
              }
              uint64_t v244 = Substring.subscript.getter();
              unint64_t v245 = v207;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              unint64_t v208 = Substring.index(_:offsetBy:limitedBy:)();
              char v210 = v209;
              unint64_t result = swift_bridgeObjectRelease();
              if ((v210 & 1) == 0)
              {
                a1 = (uint64_t)v251;
                if (v250 >> 14 < v208 >> 14) {
                  goto LABEL_226;
                }
                unint64_t v200 = v208;
                goto LABEL_183;
              }
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              a1 = (uint64_t)v251;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                BOOL v203 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v203 + 2) + 1, 1, v203);
              }
              unint64_t v213 = *((void *)v203 + 2);
              unint64_t v212 = *((void *)v203 + 3);
              if (v213 >= v212 >> 1) {
                BOOL v203 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v212 > 1), v213 + 1, 1, v203);
              }
              *((void *)v203 + 2) = v213 + 1;
              BOOL v214 = &v203[80 * v213];
              v214[32] = 0;
              unint64_t v215 = v242;
              *((void *)v214 + 5) = 0xD000000000000022;
              *((void *)v214 + 6) = v215;
              *((void *)v214 + 7) = v200;
              *((void *)v214 + 8) = v200;
              *(_OWORD *)(v214 + 72) = 0u;
              *(_OWORD *)(v214 + 88) = 0u;
              v214[104] = -1;
              *(void *)(a1 + 72) = v203;
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              uint64_t v216 = Substring.distance(from:to:)();
              swift_bridgeObjectRelease();
              if (v216 >= 1)
              {
                swift_bridgeObjectRetain();
                String.subscript.getter();
                swift_bridgeObjectRelease();
                unint64_t v217 = Substring.index(_:offsetBy:limitedBy:)();
                char v219 = v218;
                unint64_t result = swift_bridgeObjectRelease();
                if ((v219 & 1) == 0)
                {
                  if (v250 >> 14 < v217 >> 14) {
                    goto LABEL_232;
                  }
                  unint64_t v200 = v217;
LABEL_183:
                  unint64_t v201 = v250;
                  *(void *)(a1 + 16) = v200;
                  *(void *)(a1 + 24) = v201;
                }
              }
              MEMORY[0x2105617C0](v244, v245);
              swift_bridgeObjectRelease();
              unint64_t result = closure #1 in closure #1 in Parser.lexComment()(a1);
              unint64_t v184 = v200;
              if (result) {
                goto LABEL_209;
              }
              continue;
            }
          }
          Swift::Int v147 = String.count.getter();
          if (!Source.tryAdvance(_:)(v147))
          {
            uint64_t v148 = *(void *)(a1 + 16);
            strcpy((char *)v252, "UNREACHABLE: ");
            HIWORD(v252[1]) = -4864;
            v149._uint64_t countAndFlagsBits = 0xD000000000000015;
            v149._uint64_t object = (void *)(v243 | 0x8000000000000000);
            String.append(_:)(v149);
            swift_bridgeObjectRelease();
            uint64_t v150 = v252[0];
            uint64_t v151 = v252[1];
            long long v152 = *(char **)(a1 + 72);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v152 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v152 + 2) + 1, 1, v152);
            }
            unint64_t v154 = *((void *)v152 + 2);
            unint64_t v153 = *((void *)v152 + 3);
            if (v154 >= v153 >> 1) {
              long long v152 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v153 > 1), v154 + 1, 1, v152);
            }
            *((void *)v152 + 2) = v154 + 1;
            uint64_t v155 = &v152[80 * v154];
            v155[32] = 0;
            *((void *)v155 + 5) = v150;
            *((void *)v155 + 6) = v151;
            *((void *)v155 + 7) = v148;
            *((void *)v155 + 8) = v148;
            *(_OWORD *)(v155 + 72) = 0u;
            *(_OWORD *)(v155 + 88) = 0u;
            v155[104] = -1;
            *(void *)(a1 + 72) = v152;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            Swift::Int v156 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            Source.tryAdvance(_:)(v156);
          }
          long long v140 = (void *)a1;
          uint64_t v141 = 12074;
          uint64_t v142 = 0xE200000000000000;
        }
        else
        {
          Swift::Int v130 = String.count.getter();
          if (!Source.tryAdvance(_:)(v130))
          {
            uint64_t v131 = *(void *)(a1 + 16);
            strcpy((char *)v252, "UNREACHABLE: ");
            HIWORD(v252[1]) = -4864;
            v132._uint64_t countAndFlagsBits = 0xD000000000000015;
            v132._uint64_t object = (void *)(v243 | 0x8000000000000000);
            String.append(_:)(v132);
            swift_bridgeObjectRelease();
            uint64_t v133 = v252[0];
            uint64_t v134 = v252[1];
            long long v135 = *(char **)(a1 + 72);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v135 + 2) + 1, 1, v135);
            }
            unint64_t v137 = *((void *)v135 + 2);
            unint64_t v136 = *((void *)v135 + 3);
            if (v137 >= v136 >> 1) {
              long long v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v136 > 1), v137 + 1, 1, v135);
            }
            *((void *)v135 + 2) = v137 + 1;
            long long v138 = &v135[80 * v137];
            v138[32] = 0;
            *((void *)v138 + 5) = v133;
            *((void *)v138 + 6) = v134;
            *((void *)v138 + 7) = v131;
            *((void *)v138 + 8) = v131;
            *(_OWORD *)(v138 + 72) = 0u;
            *(_OWORD *)(v138 + 88) = 0u;
            v138[104] = -1;
            *(void *)(a1 + 72) = v135;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            Swift::Int v139 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            Source.tryAdvance(_:)(v139);
          }
          long long v140 = (void *)a1;
          uint64_t v141 = 41;
          uint64_t v142 = 0xE100000000000000;
        }
        unint64_t result = specialized Parser.lexUntil(_:)(v140, v141, v142, v252);
        uint64_t v157 = v252[1];
LABEL_136:
        if (*(void *)(a1 + 16) >> 14 < v126 >> 14) {
          goto LABEL_225;
        }
        if (v157) {
          goto LABEL_116;
        }
        unint64_t v126 = *(void *)(a1 + 16);
LABEL_143:
        if ((*(unsigned char *)(a1 + 56) & 1) == 0) {
          goto LABEL_212;
        }
        swift_bridgeObjectRetain();
        unint64_t v164 = String.subscript.getter();
        unint64_t v166 = v165;
        unint64_t result = swift_bridgeObjectRelease();
        if (v166 >> 14 < v164 >> 14)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v246 = (char *)v126;
        unint64_t v167 = Substring.subscript.getter();
        unint64_t v169 = v168;
        swift_bridgeObjectRelease();
        unint64_t v170 = v169 >> 14;
        unint64_t v245 = v167 >> 14;
        if (v167 >> 14 != v169 >> 14)
        {
          unint64_t v171 = Substring.subscript.getter();
          unint64_t result = specialized Collection.first.getter(v171, v172);
          if ((result & 0x100000000) != 0) {
            goto LABEL_243;
          }
          BOOL v173 = v248;
          Unicode.Scalar.properties.getter();
          char v174 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
          swift_bridgeObjectRelease();
          unint64_t v250 = *v247;
          ((void (*)(char *, uint64_t))v250)(v173, v249);
          if (v174)
          {
            unint64_t result = Substring.index(after:)();
            unint64_t v175 = result >> 14;
            if (result >> 14 != v170)
            {
              while (1)
              {
                unint64_t result = Substring.subscript.getter();
                if (!((v176 & 0x2000000000000000) != 0 ? HIBYTE(v176) & 0xF : result & 0xFFFFFFFFFFFFLL)) {
                  break;
                }
                if ((v176 & 0x1000000000000000) != 0)
                {
                  _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                }
                else
                {
                  if ((v176 & 0x2000000000000000) != 0)
                  {
                    v252[0] = result;
                    v252[1] = v176 & 0xFFFFFFFFFFFFFFLL;
                  }
                  else if ((result & 0x1000000000000000) == 0)
                  {
                    _StringObject.sharedUTF8.getter();
                  }
                  _decodeScalar(_:startingAt:)();
                }
                BOOL v178 = v248;
                Unicode.Scalar.properties.getter();
                char v179 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
                swift_bridgeObjectRelease();
                unint64_t result = ((uint64_t (*)(char *, uint64_t))v250)(v178, v249);
                if ((v179 & 1) == 0)
                {
                  unint64_t v170 = v175;
LABEL_198:
                  a1 = (uint64_t)v251;
                  goto LABEL_199;
                }
                unint64_t result = Substring.index(after:)();
                unint64_t v175 = result >> 14;
                if (result >> 14 == v170) {
                  goto LABEL_198;
                }
              }
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
              goto LABEL_222;
            }
LABEL_199:
            if (v170 < v245)
            {
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
          }
        }
        uint64_t v220 = Substring.subscript.getter();
        unint64_t v222 = v221;
        uint64_t v224 = v223;
        uint64_t v226 = v225;
        swift_bridgeObjectRelease();
        if (!((v220 ^ v222) >> 14))
        {
          swift_bridgeObjectRelease();
LABEL_212:
          unint64_t result = Parser.lexCustomCCStart()(v252);
          if (LOBYTE(v252[0]) != 2)
          {
            v235 = v240;
            unint64_t v236 = v238;
            unint64_t *v240 = v237;
            v235[1] = v236;
            *((unsigned char *)v235 + 16) = 0;
            return result;
          }
LABEL_213:
          BOOL v234 = v240;
          unint64_t *v240 = 0;
          v234[1] = 0;
          *((unsigned char *)v234 + 16) = 1;
          return result;
        }
        if (Substring.distance(from:to:)() >= 1)
        {
          unint64_t v227 = *(void *)(a1 + 24);
          swift_bridgeObjectRetain();
          unint64_t v250 = String.subscript.getter();
          unint64_t v245 = v228;
          swift_bridgeObjectRelease();
          a1 = (uint64_t)v251;
          unint64_t v229 = Substring.index(_:offsetBy:limitedBy:)();
          char v231 = v230;
          unint64_t result = swift_bridgeObjectRelease();
          if ((v231 & 1) == 0)
          {
            if (v227 >> 14 < v229 >> 14) {
              goto LABEL_230;
            }
            *(void *)(a1 + 16) = v229;
            *(void *)(a1 + 24) = v227;
          }
        }
        MEMORY[0x210561700](v220, v222, v224, v226);
        uint64_t v233 = v232;
        unint64_t result = swift_bridgeObjectRelease();
        if (*(void *)(a1 + 16) >> 14 < (unint64_t)v246 >> 14)
        {
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
        if (!v233) {
          goto LABEL_212;
        }
LABEL_116:
        swift_bridgeObjectRelease();
        unint64_t v126 = *(void *)(a1 + 16);
      }
    }
    uint64_t v95 = Substring.distance(from:to:)();
    a1 = (uint64_t)v251;
    if (v95 >= 1)
    {
      unint64_t v96 = v251[3];
      swift_bridgeObjectRetain();
      unint64_t v250 = String.subscript.getter();
      unint64_t v245 = v97;
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v251;
      unint64_t v98 = Substring.index(_:offsetBy:limitedBy:)();
      char v100 = v99;
      unint64_t result = swift_bridgeObjectRelease();
      if ((v100 & 1) == 0) {
        break;
      }
    }
LABEL_86:
    MEMORY[0x210561700](v88, v90, v92, v94);
    uint64_t v102 = v101;
    unint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(a1 + 16) >> 14 < (unint64_t)v246 >> 14) {
      goto LABEL_219;
    }
    if (!v102) {
      goto LABEL_113;
    }
LABEL_2:
    swift_bridgeObjectRelease();
  }
  if (v96 >> 14 >= v98 >> 14)
  {
    *(void *)(a1 + 16) = v98;
    *(void *)(a1 + 24) = v96;
    goto LABEL_86;
  }
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
  return result;
}

uint64_t Parser.lexPOSIXCharacterProperty()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v80 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  char v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  unint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v12);
  unint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  uint64_t v16 = v1[1];
  unint64_t v17 = v1[2];
  uint64_t v76 = v1[3];
  uint64_t v77 = v15;
  LOBYTE(v13) = *((unsigned char *)v1 + 32);
  uint64_t v18 = v1[5];
  uint64_t v19 = v1[6];
  uint64_t v74 = v1[7];
  uint64_t v75 = v18;
  int v73 = *((unsigned __int8 *)v1 + 64);
  uint64_t v20 = v1[9];
  char v81 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()(v1, (uint64_t)v6);
  char v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v78 = v11 + 48;
  uint64_t v79 = v21;
  if (v21(v6, 1, v10) == 1)
  {
    uint64_t v67 = v11;
    unint64_t v68 = v9;
    uint64_t v66 = v19;
    uint64_t v71 = v17;
    uint64_t v72 = v16;
    uint64_t v69 = v10;
    uint64_t v70 = v14;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v22 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = specialized Collection.dropFirst(_:)(*(void *)(v20 + 16), v22);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    int64_t v29 = v28 >> 1;
    uint64_t v64 = v22;
    swift_bridgeObjectRetain();
    uint64_t v65 = v23;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v31 = v25 - 32;
    uint64_t v32 = v27;
    uint64_t v33 = v27;
LABEL_3:
    uint64_t v34 = v80;
    uint64_t v35 = v31 + 80 * v32;
    uint64_t v36 = v72;
    while (1)
    {
      if (v29 == v33)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v49 = v81;
        uint64_t *v1 = v77;
        v1[1] = v36;
        unint64_t v17 = v71;
        uint64_t v50 = v76;
        v1[2] = v71;
        v1[3] = v50;
        *((unsigned char *)v1 + 32) = v49;
        uint64_t v51 = v66;
        uint64_t v52 = v67;
        v1[5] = v75;
        v1[6] = v51;
        v1[7] = v74;
        *((unsigned char *)v1 + 64) = v73;
        v1[9] = v20;
        unint64_t v9 = v68;
        uint64_t v10 = v69;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v68, 1, 1, v69);
        unint64_t v14 = v70;
        goto LABEL_15;
      }
      if (v32 < v27 || v33 >= v29) {
        break;
      }
      int v37 = *(unsigned __int8 *)(v35 + 32);
      ++v33;
      v35 += 80;
      if (!v37)
      {
        uint64_t v63 = v31;
        uint64_t v38 = *(void *)(v35 - 32);
        uint64_t v59 = *(void *)(v35 - 40);
        uint64_t v58 = *(void *)(v35 - 24);
        uint64_t v39 = *(void *)(v35 - 8);
        uint64_t v57 = *(void *)(v35 - 16);
        uint64_t v40 = *(void *)v35;
        uint64_t v41 = *(void *)(v35 + 8);
        uint64_t v42 = *(void *)(v35 + 16);
        unsigned __int8 v43 = *(unsigned char *)(v35 + 24);
        uint64_t v62 = v38;
        swift_bridgeObjectRetain();
        uint64_t v60 = v39;
        uint64_t v61 = v40;
        uint64_t v44 = v40;
        uint64_t v45 = v41;
        outlined copy of ParseError?(v39, v44, v41, v42, v43);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
          uint64_t v20 = result;
        }
        unint64_t v47 = *(void *)(v20 + 16);
        unint64_t v46 = *(void *)(v20 + 24);
        uint64_t v31 = v63;
        if (v47 >= v46 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, (char *)v20);
          uint64_t v31 = v63;
          uint64_t v20 = result;
        }
        *(void *)(v20 + 16) = v47 + 1;
        unint64_t v48 = v20 + 80 * v47;
        *(unsigned char *)(v48 + 32) = 0;
        *(void *)(v48 + 40) = v59;
        *(void *)(v48 + 48) = v62;
        *(void *)(v48 + 56) = v58;
        *(void *)(v48 + 64) = v57;
        *(void *)(v48 + 72) = v60;
        *(void *)(v48 + 80) = v61;
        *(void *)(v48 + 88) = v45;
        *(void *)(v48 + 96) = v42;
        *(unsigned char *)(v48 + 104) = v43;
        uint64_t v32 = v33;
        goto LABEL_3;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    uint64_t v34 = v80;
LABEL_15:
    if (v79(v9, 1, v10) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v9, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v34, 1, 1, v53);
    }
    outlined init with take of AST.Atom.Kind((uint64_t)v9, (uint64_t)v14, type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t result = outlined init with take of AST.Atom.Kind((uint64_t)v14, v34, type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v54 = v1[2];
    if (v54 >> 14 >= v17 >> 14)
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      unint64_t v56 = (unint64_t *)(v34 + *(int *)(v55 + 28));
      *unint64_t v56 = v17;
      v56[1] = v54;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v34, 0, 1, v55);
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x270FA5388](v4 - 8, v5);
  uint64_t v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (specialized Parser.tryEat<A>(sequence:)(14939, 0xE200000000000000))
  {
    v8._uint64_t countAndFlagsBits = 94;
    v8._uint64_t object = (void *)0xE100000000000000;
    BOOL v9 = Parser.tryEat(_:)(v8);
    specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v26);
    uint64_t v11 = v26;
    uint64_t v10 = v27;
    uint64_t v12 = v28;
    uint64_t v13 = v29;
    v14._uint64_t countAndFlagsBits = 61;
    v14._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v14))
    {
      uint64_t v23 = v13;
      BOOL v24 = v9;
      specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v26);
      uint64_t v16 = v26;
      uint64_t v15 = v27;
      uint64_t v17 = v28;
      uint64_t v13 = v29;
      if (specialized Parser.tryEat<A>(sequence:)(23866, 0xE200000000000000))
      {
        if (v10)
        {
          uint64_t v26 = v11;
          uint64_t v27 = v10;
          uint64_t v28 = v12;
          uint64_t v29 = v23;
          v25[0] = v16;
          v25[1] = v15;
          v25[2] = v17;
          v25[3] = v13;
          Parser.classifyCharacterProperty(key:value:)(&v26, v25, v7);
          swift_bridgeObjectRelease();
LABEL_12:
          swift_bridgeObjectRelease();
          outlined init with take of AST.Atom.Kind((uint64_t)v7, a2, type metadata accessor for AST.Atom.CharacterProperty.Kind);
          uint64_t v21 = type metadata accessor for AST.Atom.CharacterProperty(0);
          *(unsigned char *)(a2 + *(int *)(v21 + 20)) = v24;
          *(unsigned char *)(a2 + *(int *)(v21 + 24)) = 1;
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a2, 0, 1, v21);
        }
LABEL_11:
        uint64_t v26 = v16;
        uint64_t v27 = v15;
        uint64_t v28 = v17;
        uint64_t v29 = v13;
        Parser.classifyCharacterPropertyValueOnly(_:)(&v26, v7);
        goto LABEL_12;
      }
    }
    else if (specialized Parser.tryEat<A>(sequence:)(23866, 0xE200000000000000))
    {
      BOOL v24 = v9;
      uint64_t v16 = v11;
      uint64_t v15 = v10;
      uint64_t v17 = v12;
      goto LABEL_11;
    }
    uint64_t v22 = type metadata accessor for AST.Atom.CharacterProperty(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a2, 1, 1, v22);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = type metadata accessor for AST.Atom.CharacterProperty(0);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    return v19(a2, 1, 1, v18);
  }
}

uint64_t Parser.lexNamedCharacter()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x270FA5388](v3 - 8, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = v1[2];
  if (specialized Parser.tryEat<A>(sequence:)(31566, 0xE200000000000000))
  {
    if (specialized Parser.tryEat<A>(sequence:)(11093, 0xE200000000000000))
    {
      specialized Parser.lexUntil(_:)(v1, 125, 0xE100000000000000, v22);
      Parser.validateUnicodeScalar(_:_:)(v22, 2u, (uint64_t)&v20);
      swift_bridgeObjectRelease();
      *(_DWORD *)uint64_t v6 = v20;
      *(_OWORD *)(v6 + 8) = v21;
    }
    else
    {
      specialized Parser.lexUntil(_:)(v1, 125, 0xE100000000000000, v22);
      uint64_t v13 = v22[1];
      *(void *)uint64_t v6 = v22[0];
      *((void *)v6 + 1) = v13;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v11, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind((uint64_t)v11, a1, type metadata accessor for AST.Atom.Kind);
    unint64_t v16 = v1[2];
    if (v16 >> 14 < v12 >> 14)
    {
      __break(1u);
    }
    else
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      uint64_t v18 = (unint64_t *)(a1 + *(int *)(v17 + 28));
      *uint64_t v18 = v12;
      v18[1] = v16;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 0, 1, v17);
    }
  }
  return result;
}

uint64_t atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue()()
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = String.subscript.getter();
  if (!((v0 ^ v1) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v2 = Substring.subscript.getter();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v2 == 61 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 58 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 91 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 93 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 125 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 92 && v4 == 0xE100000000000000)
  {
    goto LABEL_7;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t Parser.lexCharacterProperty()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  MEMORY[0x270FA5388](v3 - 8, v4);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = v1[2];
  closure #1 in Parser.lexCharacterProperty()(v1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v11, type metadata accessor for AST.Atom.CharacterProperty);
    uint64_t result = outlined init with take of AST.Atom.Kind((uint64_t)v11, a1, type metadata accessor for AST.Atom.CharacterProperty);
    unint64_t v15 = v1[2];
    if (v15 >> 14 < v12 >> 14)
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      uint64_t v17 = (unint64_t *)(a1 + *(int *)(v16 + 28));
      *uint64_t v17 = v12;
      v17[1] = v15;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 0, 1, v16);
    }
  }
  return result;
}

uint64_t closure #1 in Parser.lexCharacterProperty()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x270FA5388](v4 - 8, v5);
  uint64_t v34 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(31600, 0xE200000000000000, v7, v9);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0
    || (swift_bridgeObjectRetain(),
        uint64_t v10 = String.subscript.getter(),
        unint64_t v12 = v11,
        swift_bridgeObjectRelease(),
        LOBYTE(v10) = specialized Sequence<>.starts<A>(with:)(31568, 0xE200000000000000, v10, v12),
        swift_bridgeObjectRelease(),
        (v10 & 1) != 0))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = String.subscript.getter();
    if ((v13 ^ v14) >> 14)
    {
      uint64_t v15 = Substring.subscript.getter();
      uint64_t v16 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      if (v15 == 80 && v16 == 0xE100000000000000) {
        char v18 = 1;
      }
      else {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v19 = v34;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v18 = 0;
      uint64_t v19 = v34;
    }
    Parser.advance(_:)(2);
    specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v38);
    unint64_t v23 = *((void *)&v38 + 1);
    unint64_t v24 = v38;
    uint64_t v26 = v39;
    uint64_t v25 = v40;
    v27._uint64_t countAndFlagsBits = 61;
    v27._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v27))
    {
      specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v38);
      unsigned long long v28 = v38;
      uint64_t v29 = v39;
      uint64_t v30 = v40;
      if (v23)
      {
        unsigned long long v38 = __PAIR128__(v23, v24);
        uint64_t v39 = v26;
        uint64_t v40 = v25;
        unsigned long long v35 = v28;
        uint64_t v36 = v29;
        uint64_t v37 = v30;
        Parser.classifyCharacterProperty(key:value:)((uint64_t *)&v38, (uint64_t *)&v35, v19);
        swift_bridgeObjectRelease();
LABEL_21:
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 125;
        v31._uint64_t object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v31))
        {
          unsigned long long v38 = xmmword_20D9D7510;
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          char v41 = 3;
          Parser.errorAtCurrentPosition(_:)((long long *)&v38);
        }
        outlined init with take of AST.Atom.Kind((uint64_t)v19, a2, type metadata accessor for AST.Atom.CharacterProperty.Kind);
        uint64_t v32 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *(unsigned char *)(a2 + *(int *)(v32 + 20)) = v18 & 1;
        *(unsigned char *)(a2 + *(int *)(v32 + 24)) = 0;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 0, 1, v32);
      }
      uint64_t v25 = v40;
      uint64_t v26 = v39;
      unint64_t v23 = *((void *)&v38 + 1);
      unint64_t v24 = v38;
    }
    *(void *)&unsigned long long v38 = v24;
    *((void *)&v38 + 1) = v23;
    uint64_t v39 = v26;
    uint64_t v40 = v25;
    Parser.classifyCharacterPropertyValueOnly(_:)((uint64_t *)&v38, v19);
    goto LABEL_21;
  }
  uint64_t v20 = type metadata accessor for AST.Atom.CharacterProperty(0);
  long long v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);

  return v21(a2, 1, 1, v20);
}

uint64_t Parser.lexRecursionLevel()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  v4._uint64_t countAndFlagsBits = 43;
  v4._uint64_t object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v4))
  {
    uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v9);
    if ((v12 & 1) == 0)
    {
      if ((v10 & 1) == 0)
      {
        uint64_t v6 = v9;
        goto LABEL_12;
      }
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v9 = 0;
    long long v10 = xmmword_20D9D7550;
    uint64_t v11 = 0;
    char v12 = 2;
    uint64_t result = Parser.errorAtCurrentPosition(_:)((long long *)&v9);
    goto LABEL_8;
  }
  v7._uint64_t countAndFlagsBits = 45;
  v7._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v7);
  if ((result & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v9);
  if (v12) {
    goto LABEL_7;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v6 = -v9;
    if (__OFSUB__(0, v9))
    {
LABEL_15:
      __break(1u);
      return result;
    }
LABEL_12:
    unint64_t v8 = *(void *)(v1 + 16);
    if (v8 >> 14 >= v3 >> 14)
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = v3;
      *(void *)(a1 + 24) = v8;
      *(unsigned char *)(a1 + 32) = 0;
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_8:
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t Parser.lexEscapedReference()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v178 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  uint64_t v6 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  uint64_t v176 = (uint64_t)&v155 - v8;
  uint64_t v9 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v179 = *(void *)(v9 - 8);
  uint64_t v10 = v179;
  MEMORY[0x270FA5388](v9, v11);
  uint64_t v169 = (uint64_t)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v1;
  uint64_t v13 = v1[1];
  unint64_t v15 = v1[2];
  uint64_t v16 = v1[3];
  LOBYTE(v12) = *((unsigned char *)v1 + 32);
  uint64_t v17 = v1[6];
  uint64_t v166 = v1[5];
  uint64_t v165 = v1[7];
  int v164 = *((unsigned __int8 *)v1 + 64);
  uint64_t v18 = v1[9];
  char v180 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v173 = v15;
  uint64_t v167 = v16;
  uint64_t v168 = v14;
  uint64_t v19 = String.subscript.getter();
  BOOL v177 = v1;
  uint64_t v172 = v10;
  uint64_t v174 = v13;
  if (!((v19 ^ v20) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v179;
    unint64_t v175 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
    v175(v6, 1, 1, v9);
    uint64_t v22 = v17;
    uint64_t v23 = (uint64_t)v6;
    uint64_t v24 = v178;
    uint64_t v25 = v9;
    goto LABEL_38;
  }
  uint64_t v25 = v9;
  unint64_t v163 = v6;
  uint64_t v26 = Substring.subscript.getter();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 103;
  v29._uint64_t object = (void *)0xE100000000000000;
  uint64_t v22 = v17;
  if (Parser.tryEat(_:)(v29))
  {
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 123;
    v30._uint64_t object = (void *)0xE100000000000000;
    Swift::Bool v31 = Parser.tryEat(_:)(v30);
    uint64_t v23 = (uint64_t)v163;
    uint64_t v24 = v178;
    uint64_t v170 = v25;
    uint64_t v171 = v22;
    if (v31)
    {
      uint64_t v162 = v18;
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v181);
      unsigned __int8 v32 = v183;
      if (v183 == 255)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(125, 0xE100000000000000, 1, 0, (uint64_t)&v181);
        uint64_t v33 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)&v181 + 1);
        uint64_t v34 = v181;
        uint64_t v36 = *((void *)&v182 + 1);
        unsigned long long v35 = (unsigned int (*)(void, void, void))v182;
        unsigned __int8 v32 = v183;
        uint64_t v38 = *((void *)&v184 + 1);
        uint64_t v37 = v184;
        uint64_t v40 = *((void *)&v185 + 1);
        uint64_t v39 = v185;
        char v41 = v186;
        uint64_t v43 = *((void *)&v187 + 1);
        uint64_t v42 = v187;
      }
      else
      {
        unint64_t v175 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)&v181 + 1);
        uint64_t v34 = v181;
        uint64_t v160 = *((void *)&v182 + 1);
        uint64_t v161 = (unsigned int (*)(void, void, void))v182;
        uint64_t v38 = *((void *)&v184 + 1);
        uint64_t v159 = v184;
        uint64_t v40 = *((void *)&v185 + 1);
        uint64_t v39 = v185;
        char v84 = v186;
        uint64_t v42 = v187;
        LODWORD(v158) = v186 & 1;
        uint64_t v43 = *((void *)&v187 + 1);
        if ((specialized Parser.tryEat<A>(sequence:)(125, 0xE100000000000000) & 1) == 0)
        {
          *(void *)&long long v181 = 125;
          *((void *)&v181 + 1) = 0xE100000000000000;
          *(void *)&long long v188 = String.init<A>(_:)();
          *((void *)&v188 + 1) = v85;
          uint64_t v189 = 0;
          uint64_t v190 = 0;
          char v191 = 3;
          Parser.errorAtCurrentPosition(_:)(&v188);
          swift_bridgeObjectRelease();
        }
        *(void *)&long long v181 = v34;
        uint64_t v33 = v175;
        *((void *)&v181 + 1) = v175;
        unsigned long long v35 = v161;
        *(void *)&long long v182 = v161;
        uint64_t v36 = v160;
        *((void *)&v182 + 1) = v160;
        unsigned __int8 v183 = v32;
        uint64_t v37 = v159;
        *(void *)&long long v184 = v159;
        *((void *)&v184 + 1) = v38;
        *(void *)&long long v185 = v39;
        *((void *)&v185 + 1) = v40;
        LOBYTE(v186) = v84 & 1;
        *(void *)&long long v187 = v42;
        *((void *)&v187 + 1) = v43;
        uint64_t v23 = (uint64_t)v163;
        char v41 = v158;
      }
      *(void *)uint64_t v23 = v34;
      *(void *)(v23 + 8) = v33;
      *(void *)(v23 + 16) = v35;
      *(void *)(v23 + 24) = v36;
      *(unsigned char *)(v23 + 32) = v32;
      *(void *)(v23 + 40) = v37;
      *(void *)(v23 + 48) = v38;
      *(void *)(v23 + 56) = v39;
      *(void *)(v23 + 64) = v40;
      *(unsigned char *)(v23 + 72) = v41;
      *(void *)(v23 + 80) = v42;
      *(void *)(v23 + 88) = v43;
      uint64_t v25 = v170;
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v179;
      unint64_t v175 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
      v175((char *)v23, 0, 1, v25);
      uint64_t v22 = v171;
      uint64_t v18 = v162;
      uint64_t v24 = v178;
      goto LABEL_37;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_20D9D7470;
    *(void *)(v65 + 32) = 60;
    *(void *)(v65 + 40) = 0xE100000000000000;
    *(void *)(v65 + 48) = 39;
    *(void *)(v65 + 56) = 0xE100000000000000;
    uint64_t v66 = specialized Parser.tryEat<A>(anyOf:)(v65);
    uint64_t v68 = v67;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v68)
    {
      uint64_t v162 = v18;
      uint64_t v69 = Parser.getClosingDelimiter(for:)(v66, v68);
      uint64_t v71 = v70;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(1, 0, (uint64_t)&v181);
      unsigned __int8 v72 = v183;
      if (v183 == 255)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v69, v71, 1, 0, (uint64_t)&v181);
        swift_bridgeObjectRelease();
        int v73 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)&v181 + 1);
        uint64_t v74 = v181;
        uint64_t v76 = *((void *)&v182 + 1);
        uint64_t v75 = (unsigned int (*)(void, void, void))v182;
        unsigned __int8 v72 = v183;
        uint64_t v78 = *((void *)&v184 + 1);
        uint64_t v77 = v184;
        uint64_t v80 = *((void *)&v185 + 1);
        uint64_t v79 = v185;
        char v81 = v186;
        uint64_t v83 = *((void *)&v187 + 1);
        uint64_t v82 = v187;
      }
      else
      {
        unint64_t v175 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)&v181 + 1);
        uint64_t v74 = v181;
        uint64_t v160 = *((void *)&v182 + 1);
        uint64_t v161 = (unsigned int (*)(void, void, void))v182;
        uint64_t v159 = v184;
        uint64_t v79 = v185;
        uint64_t v158 = *((void *)&v184 + 1);
        uint64_t v80 = *((void *)&v185 + 1);
        char v103 = v186;
        uint64_t v83 = *((void *)&v187 + 1);
        uint64_t v82 = v187;
        LODWORD(v157) = v186 & 1;
        if ((specialized Parser.tryEat<A>(sequence:)(v69, v71) & 1) == 0)
        {
          *(void *)&long long v181 = v69;
          *((void *)&v181 + 1) = v71;
          *(void *)&long long v188 = String.init<A>(_:)();
          *((void *)&v188 + 1) = v104;
          uint64_t v189 = 0;
          uint64_t v190 = 0;
          char v191 = 3;
          Parser.errorAtCurrentPosition(_:)(&v188);
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v181 = v74;
        int v73 = v175;
        *((void *)&v181 + 1) = v175;
        uint64_t v75 = v161;
        *(void *)&long long v182 = v161;
        uint64_t v76 = v160;
        *((void *)&v182 + 1) = v160;
        unsigned __int8 v183 = v72;
        uint64_t v77 = v159;
        uint64_t v78 = v158;
        *(void *)&long long v184 = v159;
        *((void *)&v184 + 1) = v158;
        *(void *)&long long v185 = v79;
        *((void *)&v185 + 1) = v80;
        LOBYTE(v186) = v103 & 1;
        *(void *)&long long v187 = v82;
        *((void *)&v187 + 1) = v83;
        char v81 = v157;
      }
      unint64_t v105 = v163;
      *unint64_t v163 = v74;
      v105[1] = v73;
      v105[2] = v75;
      v105[3] = v76;
      *((unsigned char *)v105 + 32) = v72;
      v105[5] = v77;
      v105[6] = v78;
      v105[7] = v79;
      v105[8] = v80;
      *((unsigned char *)v105 + 72) = v81;
      v105[10] = v82;
      v105[11] = v83;
      uint64_t v23 = (uint64_t)v105;
      uint64_t v25 = v170;
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v179;
      unint64_t v175 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
      v175((char *)v23, 0, 1, v25);
      uint64_t v24 = v178;
      uint64_t v22 = v171;
      uint64_t v18 = v162;
      goto LABEL_37;
    }
    Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v181);
    unsigned __int8 v96 = v183;
    uint64_t v25 = v170;
    uint64_t v22 = v171;
    if (v183 == 255)
    {
      uint64_t v21 = v179;
      unint64_t v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
      uint64_t v98 = v23;
      uint64_t v99 = 1;
    }
    else
    {
      char v147 = v186;
      long long v148 = v182;
      long long v149 = v184;
      long long v150 = v185;
      long long v151 = v187;
      *(_OWORD *)uint64_t v23 = v181;
      *(_OWORD *)(v23 + 16) = v148;
      *(unsigned char *)(v23 + 32) = v96;
      *(_OWORD *)(v23 + 40) = v149;
      *(_OWORD *)(v23 + 56) = v150;
      *(unsigned char *)(v23 + 72) = v147 & 1;
      *(_OWORD *)(v23 + 80) = v151;
      swift_storeEnumTagMultiPayload();
      uint64_t v21 = v179;
      unint64_t v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
      uint64_t v98 = v23;
      uint64_t v99 = 0;
    }
    unint64_t v175 = v97;
    v97((char *)v98, v99, 1, v25);
  }
  else
  {
    v44._uint64_t countAndFlagsBits = 107;
    v44._uint64_t object = (void *)0xE100000000000000;
    Swift::Bool v45 = Parser.tryEat(_:)(v44);
    uint64_t v23 = (uint64_t)v163;
    if (!v45)
    {
      uint64_t v21 = v179;
      if (v26 == 48 && v28 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = v178;
      }
      else
      {
        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v24 = v178;
        if ((v87 & 1) == 0)
        {
          Parser.lexNumber(_:)(1, (uint64_t)&v181);
          if ((v183 & 1) == 0)
          {
            uint64_t v152 = *((void *)&v182 + 1);
            uint64_t v153 = v182;
            uint64_t v154 = BYTE8(v181) & 1;
            *(void *)uint64_t v23 = v181;
            *(void *)(v23 + 8) = v154;
            *(void *)(v23 + 16) = v153;
            *(void *)(v23 + 24) = v152;
            *(unsigned char *)(v23 + 32) = 0;
            *(_OWORD *)(v23 + 40) = 0u;
            *(_OWORD *)(v23 + 56) = 0u;
            *(unsigned char *)(v23 + 72) = 1;
            *(void *)(v23 + 80) = v153;
            *(void *)(v23 + 88) = v152;
            swift_storeEnumTagMultiPayload();
            uint64_t v86 = v179;
            unint64_t v175 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
            v175((char *)v23, 0, 1, v25);
LABEL_37:
            uint64_t v21 = v86;
            goto LABEL_38;
          }
          uint64_t v21 = v179;
        }
      }
      unint64_t v175 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
      v175((char *)v23, 1, 1, v25);
      goto LABEL_38;
    }
    uint64_t v171 = v22;
    uint64_t v170 = v25;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20D9D7470;
    *(void *)(inited + 32) = 60;
    *(void *)(inited + 40) = 0xE100000000000000;
    *(void *)(inited + 48) = 39;
    *(void *)(inited + 56) = 0xE100000000000000;
    uint64_t v47 = specialized Parser.tryEat<A>(anyOf:)(inited);
    uint64_t v49 = v48;
    swift_setDeallocating();
    swift_arrayDestroy();
    if (v49)
    {
      uint64_t v162 = v18;
      uint64_t v50 = Parser.getClosingDelimiter(for:)(v47, v49);
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 1, (uint64_t)&v181);
      unsigned __int8 v53 = v183;
      if (v183 == 255)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v50, v52, 1, 1, (uint64_t)&v181);
        swift_bridgeObjectRelease();
        unint64_t v54 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)&v181 + 1);
        uint64_t v55 = v181;
        uint64_t v57 = *((void *)&v182 + 1);
        unint64_t v56 = (unsigned int (*)(void, void, void))v182;
        unsigned __int8 v53 = v183;
        uint64_t v59 = *((void *)&v184 + 1);
        uint64_t v58 = v184;
        uint64_t v61 = *((void *)&v185 + 1);
        uint64_t v60 = v185;
        char v62 = v186;
        uint64_t v64 = *((void *)&v187 + 1);
        uint64_t v63 = v187;
      }
      else
      {
        unint64_t v175 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)&v181 + 1);
        uint64_t v55 = v181;
        uint64_t v160 = *((void *)&v182 + 1);
        uint64_t v161 = (unsigned int (*)(void, void, void))v182;
        uint64_t v159 = v184;
        uint64_t v60 = v185;
        uint64_t v158 = *((void *)&v184 + 1);
        uint64_t v61 = *((void *)&v185 + 1);
        char v100 = v186;
        uint64_t v64 = *((void *)&v187 + 1);
        uint64_t v63 = v187;
        LODWORD(v157) = v186 & 1;
        if ((specialized Parser.tryEat<A>(sequence:)(v50, v52) & 1) == 0)
        {
          *(void *)&long long v181 = v50;
          *((void *)&v181 + 1) = v52;
          *(void *)&long long v192 = String.init<A>(_:)();
          *((void *)&v192 + 1) = v101;
          uint64_t v193 = 0;
          uint64_t v194 = 0;
          char v195 = 3;
          Parser.errorAtCurrentPosition(_:)(&v192);
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v181 = v55;
        unint64_t v54 = v175;
        *((void *)&v181 + 1) = v175;
        unint64_t v56 = v161;
        *(void *)&long long v182 = v161;
        uint64_t v57 = v160;
        *((void *)&v182 + 1) = v160;
        unsigned __int8 v183 = v53;
        uint64_t v58 = v159;
        uint64_t v59 = v158;
        *(void *)&long long v184 = v159;
        *((void *)&v184 + 1) = v158;
        *(void *)&long long v185 = v60;
        *((void *)&v185 + 1) = v61;
        LOBYTE(v186) = v100 & 1;
        *(void *)&long long v187 = v63;
        *((void *)&v187 + 1) = v64;
        char v62 = v157;
      }
      uint64_t v102 = v163;
      *unint64_t v163 = v55;
      v102[1] = v54;
      v102[2] = v56;
      v102[3] = v57;
      *((unsigned char *)v102 + 32) = v53;
      v102[5] = v58;
      v102[6] = v59;
      v102[7] = v60;
      v102[8] = v61;
      *((unsigned char *)v102 + 72) = v62;
      v102[10] = v63;
      v102[11] = v64;
      uint64_t v23 = (uint64_t)v102;
      uint64_t v25 = v170;
      swift_storeEnumTagMultiPayload();
      uint64_t v21 = v179;
      unint64_t v175 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
      v175((char *)v23, 0, 1, v25);
      uint64_t v24 = v178;
      uint64_t v22 = v171;
      uint64_t v18 = v162;
    }
    else
    {
      v88._uint64_t countAndFlagsBits = 123;
      v88._uint64_t object = (void *)0xE100000000000000;
      Swift::Bool v89 = Parser.tryEat(_:)(v88);
      uint64_t v25 = v170;
      uint64_t v22 = v171;
      if (v89)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(125, 0xE100000000000000, 1, 0, (uint64_t)&v181);
        unsigned __int8 v90 = v183;
        char v91 = v186;
        long long v92 = v182;
        *(_OWORD *)uint64_t v23 = v181;
        *(_OWORD *)(v23 + 16) = v92;
        *(unsigned char *)(v23 + 32) = v90;
        *(_OWORD *)(v23 + 40) = v184;
        *(_OWORD *)(v23 + 56) = v185;
        *(unsigned char *)(v23 + 72) = v91;
        *(_OWORD *)(v23 + 80) = v187;
        swift_storeEnumTagMultiPayload();
        uint64_t v21 = v179;
        uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
        uint64_t v94 = v23;
        uint64_t v95 = 0;
      }
      else
      {
        uint64_t v21 = v179;
        uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
        uint64_t v94 = v23;
        uint64_t v95 = 1;
      }
      unint64_t v175 = v93;
      v93((char *)v94, v95, 1, v25);
      uint64_t v24 = v178;
    }
  }
LABEL_38:
  unint64_t v108 = *(unsigned int (**)(void, void, void))(v21 + 48);
  uint64_t v106 = v21 + 48;
  uint64_t v107 = v108;
  if (v108(v23, 1, v25) == 1)
  {
    uint64_t v171 = v22;
    uint64_t v179 = v106;
    outlined destroy of _ASTParent?(v23, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v109 = v177[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v110 = v18;
    uint64_t v111 = specialized Collection.dropFirst(_:)(*(void *)(v18 + 16), v109);
    uint64_t v113 = v112;
    uint64_t v115 = v114;
    int64_t v117 = v116 >> 1;
    swift_bridgeObjectRetain();
    unint64_t v163 = (void *)v111;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v119 = v113 - 32;
    uint64_t v120 = v115;
    uint64_t v121 = v115;
    uint64_t v122 = v176;
LABEL_40:
    uint64_t v123 = v119 + 80 * v120;
    while (1)
    {
      if (v117 == v121)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v137 = v180;
        unint64_t v136 = v177;
        uint64_t v138 = v174;
        *BOOL v177 = v168;
        v136[1] = v138;
        uint64_t v139 = v167;
        v136[2] = v173;
        v136[3] = v139;
        *((unsigned char *)v136 + 32) = v137;
        uint64_t v140 = v171;
        v136[5] = v166;
        v136[6] = v140;
        v136[7] = v165;
        *((unsigned char *)v136 + 64) = v164;
        v136[9] = v110;
        v175((char *)v122, 1, 1, v25);
        goto LABEL_52;
      }
      if (v120 < v115 || v121 >= v117) {
        break;
      }
      int v124 = *(unsigned __int8 *)(v123 + 32);
      ++v121;
      v123 += 80;
      if (!v124)
      {
        uint64_t v162 = v119;
        uint64_t v160 = v109;
        uint64_t v161 = v107;
        uint64_t v170 = v25;
        uint64_t v125 = *(void *)(v123 - 32);
        uint64_t v158 = *(void *)(v123 - 40);
        uint64_t v157 = *(void *)(v123 - 24);
        uint64_t v126 = *(void *)(v123 - 8);
        uint64_t v156 = *(void *)(v123 - 16);
        uint64_t v127 = *(void *)v123;
        uint64_t v128 = *(void *)(v123 + 8);
        uint64_t v129 = *(void *)(v123 + 16);
        unsigned __int8 v130 = *(unsigned char *)(v123 + 24);
        uint64_t v155 = v125;
        swift_bridgeObjectRetain();
        uint64_t v159 = v127;
        outlined copy of ParseError?(v126, v127, v128, v129, v130);
        uint64_t v131 = v110;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v110 + 16) + 1, 1, (char *)v110);
          uint64_t v131 = result;
        }
        unint64_t v133 = *(void *)(v131 + 16);
        unint64_t v132 = *(void *)(v131 + 24);
        uint64_t v119 = v162;
        if (v133 >= v132 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v132 > 1), v133 + 1, 1, (char *)v131);
          uint64_t v119 = v162;
          uint64_t v131 = result;
        }
        *(void *)(v131 + 16) = v133 + 1;
        unint64_t v134 = v131 + 80 * v133;
        *(unsigned char *)(v134 + 32) = 0;
        *(void *)(v134 + 40) = v158;
        *(void *)(v134 + 48) = v155;
        *(void *)(v134 + 56) = v157;
        *(void *)(v134 + 64) = v156;
        *(void *)(v134 + 72) = v126;
        *(void *)(v134 + 80) = v159;
        *(void *)(v134 + 88) = v128;
        *(void *)(v134 + 96) = v129;
        *(unsigned char *)(v134 + 104) = v130;
        uint64_t v110 = v131;
        uint64_t v120 = v121;
        uint64_t v24 = v178;
        uint64_t v122 = v176;
        uint64_t v25 = v170;
        uint64_t v107 = v161;
        uint64_t v109 = v160;
        goto LABEL_40;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v135 = v23;
    uint64_t v122 = v176;
    outlined init with take of AST.Atom.Kind(v135, v176, type metadata accessor for AST.Atom.Kind);
    v175((char *)v122, 0, 1, v25);
    unint64_t v136 = v177;
LABEL_52:
    if (v107(v122, 1, v25) == 1)
    {
      outlined destroy of _ASTParent?(v122, &demangling cache variable for type metadata for AST.Atom.Kind?);
      uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56))(v24, 1, 1, v141);
    }
    uint64_t v142 = v169;
    outlined init with take of AST.Atom.Kind(v122, v169, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind(v142, v24, type metadata accessor for AST.Atom.Kind);
    unint64_t v143 = v136[2];
    unint64_t v144 = v173;
    if (v143 >> 14 >= v173 >> 14)
    {
      uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      unint64_t v146 = (unint64_t *)(v24 + *(int *)(v145 + 28));
      *unint64_t v146 = v144;
      v146[1] = v143;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v145 - 8) + 56))(v24, 0, 1, v145);
    }
  }
  __break(1u);
  return result;
}

uint64_t Parser.lexGroupLikeReference()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v109 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  uint64_t v6 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  uint64_t v9 = (char *)&v86 - v8;
  uint64_t v111 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v10 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111, v11);
  unint64_t v108 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v1[1];
  uint64_t v99 = *v1;
  unint64_t v14 = v1[2];
  uint64_t v103 = v1[3];
  LOBYTE(v12) = *((unsigned char *)v1 + 32);
  uint64_t v15 = v1[6];
  uint64_t v102 = v1[5];
  uint64_t v101 = v1[7];
  int v100 = *((unsigned __int8 *)v1 + 64);
  uint64_t v16 = (char *)v1[9];
  char v112 = v12;
  swift_bridgeObjectRetain();
  uint64_t v106 = v15;
  swift_bridgeObjectRetain();
  uint64_t v110 = v16;
  swift_bridgeObjectRetain();
  char v17 = specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000);
  unint64_t v107 = v14;
  if (v17)
  {
    uint64_t v18 = v10;
    if (specialized Parser.tryEat<A>(sequence:)(15696, 0xE200000000000000))
    {
      Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 1, 0, (uint64_t)&v113);
      unsigned __int8 v19 = v115;
      char v20 = v118;
      long long v21 = v114;
      *(_OWORD *)uint64_t v6 = v113;
      *((_OWORD *)v6 + 1) = v21;
      v6[32] = v19;
      *(_OWORD *)(v6 + 40) = v116;
      *(_OWORD *)(v6 + 56) = v117;
      unsigned char v6[72] = v20;
      *((_OWORD *)v6 + 5) = v119;
      uint64_t v22 = v111;
      swift_storeEnumTagMultiPayload();
      *(void *)&long long v105 = *(void *)(v10 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v105)(v6, 0, 1, v22);
      uint64_t v23 = v109;
LABEL_7:
      uint64_t v24 = (uint64_t)v108;
      goto LABEL_8;
    }
    char v25 = specialized Parser.tryEat<A>(sequence:)(15952, 0xE200000000000000);
    uint64_t v23 = v109;
    if (v25)
    {
      Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 1, 0, (uint64_t)&v113);
      unsigned __int8 v26 = v115;
      char v27 = v118;
      long long v28 = v114;
      *(_OWORD *)uint64_t v6 = v113;
      *((_OWORD *)v6 + 1) = v28;
      v6[32] = v26;
      *(_OWORD *)(v6 + 40) = v116;
      *(_OWORD *)(v6 + 56) = v117;
      unsigned char v6[72] = v27;
      *((_OWORD *)v6 + 5) = v119;
      uint64_t v29 = v111;
      swift_storeEnumTagMultiPayload();
      *(void *)&long long v105 = *(void *)(v10 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v105)(v6, 0, 1, v29);
      goto LABEL_7;
    }
    v71._uint64_t countAndFlagsBits = 38;
    v71._uint64_t object = (void *)0xE100000000000000;
    Swift::Bool v72 = Parser.tryEat(_:)(v71);
    uint64_t v24 = (uint64_t)v108;
    if (v72)
    {
      Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 1, 0, (uint64_t)&v113);
      unsigned __int8 v73 = v115;
      char v74 = v118;
      long long v75 = v114;
      *(_OWORD *)uint64_t v6 = v113;
      *((_OWORD *)v6 + 1) = v75;
      v6[32] = v73;
      *(_OWORD *)(v6 + 40) = v116;
      *(_OWORD *)(v6 + 56) = v117;
      unsigned char v6[72] = v74;
      *((_OWORD *)v6 + 5) = v119;
      uint64_t v76 = v111;
      swift_storeEnumTagMultiPayload();
      *(void *)&long long v105 = *(void *)(v10 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v105)(v6, 0, 1, v76);
      goto LABEL_8;
    }
    uint64_t v98 = v13;
    unint64_t v77 = v1[2];
    v78._uint64_t countAndFlagsBits = 82;
    v78._uint64_t object = (void *)0xE100000000000000;
    uint64_t result = Parser.tryEat(_:)(v78);
    if (result)
    {
      uint64_t v97 = v10;
      unint64_t v79 = v1[2];
      if (v79 >> 14 < v77 >> 14) {
        goto LABEL_42;
      }
      v80._uint64_t countAndFlagsBits = 41;
      v80._uint64_t object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v80))
      {
        long long v113 = xmmword_20D9D7520;
        long long v114 = 0uLL;
        unsigned __int8 v115 = 3;
        Parser.errorAtCurrentPosition(_:)(&v113);
      }
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = v77;
      *((void *)v6 + 3) = v79;
      v6[32] = 0;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      unsigned char v6[72] = 1;
      *((void *)v6 + 10) = v77;
      *((void *)v6 + 11) = v79;
    }
    else
    {
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(1, 0, (uint64_t)&v113);
      unsigned __int8 v81 = v115;
      if (v115 == 255)
      {
        *(void *)&long long v105 = *(void *)(v10 + 56);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v105)(v6, 1, 1, v111);
LABEL_39:
        uint64_t v13 = v98;
        goto LABEL_8;
      }
      uint64_t v97 = v10;
      long long v95 = v113;
      long long v94 = v114;
      long long v104 = v116;
      long long v96 = v117;
      long long v105 = v119;
      char v82 = v118;
      v83._uint64_t countAndFlagsBits = 41;
      v83._uint64_t object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v83))
      {
        long long v113 = xmmword_20D9D7520;
        long long v114 = 0uLL;
        unsigned __int8 v115 = 3;
        Parser.errorAtCurrentPosition(_:)(&v113);
      }
      long long v84 = v94;
      *(_OWORD *)uint64_t v6 = v95;
      *((_OWORD *)v6 + 1) = v84;
      v6[32] = v81;
      *(_OWORD *)(v6 + 40) = v104;
      *(_OWORD *)(v6 + 56) = v96;
      unsigned char v6[72] = v82 & 1;
      *((_OWORD *)v6 + 5) = v105;
    }
    uint64_t v85 = v111;
    swift_storeEnumTagMultiPayload();
    *(void *)&long long v105 = *(void *)(v10 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v105)(v6, 0, 1, v85);
    uint64_t v18 = v97;
    goto LABEL_39;
  }
  *(void *)&long long v105 = *(void *)(v10 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v105)(v6, 1, 1, v111);
  uint64_t v24 = (uint64_t)v108;
  uint64_t v23 = v109;
  uint64_t v18 = v10;
LABEL_8:
  Swift::Bool v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v30 = v10 + 48;
  *(void *)&long long v104 = v31;
  if (v31(v6, 1, v111) == 1)
  {
    uint64_t v98 = v13;
    *(void *)&long long v96 = v30;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v32 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = v18;
    uint64_t v34 = v23;
    uint64_t v35 = v24;
    uint64_t v36 = specialized Collection.dropFirst(_:)(*((void *)v110 + 2), v32);
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    int64_t v42 = v41 >> 1;
    *(void *)&long long v95 = v32;
    swift_bridgeObjectRetain();
    *(void *)&long long v94 = v36;
    uint64_t v24 = v35;
    uint64_t v23 = v34;
    uint64_t v43 = v33;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v45 = v38 - 32;
    uint64_t v46 = v40;
    uint64_t v47 = v40;
    unint64_t v48 = v107;
LABEL_10:
    uint64_t v49 = v45 + 80 * v46;
    while (1)
    {
      if (v42 == v47)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        char v62 = v112;
        uint64_t v63 = v98;
        uint64_t *v1 = v99;
        v1[1] = v63;
        uint64_t v64 = v103;
        v1[2] = v48;
        v1[3] = v64;
        *((unsigned char *)v1 + 32) = v62;
        uint64_t v65 = v106;
        v1[5] = v102;
        v1[6] = v65;
        v1[7] = v101;
        *((unsigned char *)v1 + 64) = v100;
        uint64_t v66 = v111;
        v1[9] = (uint64_t)v110;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v105)(v9, 1, 1, v66);
        goto LABEL_22;
      }
      if (v46 < v40 || v47 >= v42) {
        break;
      }
      int v50 = *(unsigned __int8 *)(v49 + 32);
      ++v47;
      v49 += 80;
      if (!v50)
      {
        uint64_t v93 = v45;
        long long v92 = v9;
        uint64_t v51 = *(void *)(v49 - 32);
        uint64_t v89 = *(void *)(v49 - 40);
        uint64_t v88 = *(void *)(v49 - 24);
        uint64_t v52 = *(void *)(v49 - 8);
        uint64_t v87 = *(void *)(v49 - 16);
        uint64_t v53 = *(void *)v49;
        uint64_t v54 = *(void *)(v49 + 8);
        uint64_t v55 = *(void *)(v49 + 16);
        unsigned __int8 v56 = *(unsigned char *)(v49 + 24);
        uint64_t v86 = v51;
        swift_bridgeObjectRetain();
        uint64_t v91 = v54;
        uint64_t v90 = v55;
        outlined copy of ParseError?(v52, v53, v54, v55, v56);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v97 = v43;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v110 + 2) + 1, 1, v110);
          uint64_t v110 = (char *)result;
        }
        unint64_t v58 = *((void *)v110 + 2);
        unint64_t v57 = *((void *)v110 + 3);
        uint64_t v45 = v93;
        if (v58 >= v57 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v110);
          uint64_t v45 = v93;
          uint64_t v110 = (char *)result;
        }
        uint64_t v59 = v110;
        *((void *)v110 + 2) = v58 + 1;
        uint64_t v60 = &v59[80 * v58];
        v60[32] = 0;
        *((void *)v60 + 5) = v89;
        *((void *)v60 + 6) = v86;
        *((void *)v60 + 7) = v88;
        *((void *)v60 + 8) = v87;
        *((void *)v60 + 9) = v52;
        uint64_t v61 = v91;
        *((void *)v60 + 10) = v53;
        *((void *)v60 + 11) = v61;
        *((void *)v60 + 12) = v90;
        v60[104] = v56;
        uint64_t v46 = v47;
        uint64_t v24 = (uint64_t)v108;
        uint64_t v23 = v109;
        uint64_t v9 = v92;
        unint64_t v48 = v107;
        uint64_t v43 = v97;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v9, type metadata accessor for AST.Atom.Kind);
    ((void (*)(char *, void, uint64_t, uint64_t))v105)(v9, 0, 1, v111);
    unint64_t v48 = v107;
LABEL_22:
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v104)(v9, 1, v111) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v9, &demangling cache variable for type metadata for AST.Atom.Kind?);
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v23, 1, 1, v67);
    }
    outlined init with take of AST.Atom.Kind((uint64_t)v9, v24, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind(v24, v23, type metadata accessor for AST.Atom.Kind);
    unint64_t v68 = v1[2];
    if (v68 >> 14 >= v48 >> 14)
    {
      uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      uint64_t v70 = (unint64_t *)(v23 + *(int *)(v69 + 28));
      *uint64_t v70 = v48;
      v70[1] = v68;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v23, 0, 1, v69);
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t closure #1 in Parser.shouldLexGroupLikeAtom()@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  v4._uint64_t countAndFlagsBits = 40;
  v4._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v4);
  if (result)
  {
    v6._uint64_t countAndFlagsBits = 63;
    v6._uint64_t object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v6))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      char v8 = *(unsigned char *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a1 + 72);
      char v13 = *(unsigned char *)(a1 + 64);
      uint64_t v44 = *(void *)a1;
      uint64_t v45 = v7;
      long long v46 = *(_OWORD *)(a1 + 16);
      LOBYTE(v47) = v8;
      uint64_t v48 = v9;
      uint64_t v49 = v10;
      uint64_t v50 = v11;
      char v51 = v13;
      uint64_t v52 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = 80;
      v14._uint64_t object = (void *)0xE100000000000000;
      LOBYTE(v10) = Parser.tryEat(_:)(v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
      if (v10)
      {
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_20D9D7470;
        *(void *)(inited + 32) = 61;
        *(void *)(inited + 40) = 0xE100000000000000;
        *(void *)(inited + 48) = 62;
        *(void *)(inited + 56) = 0xE100000000000000;
        specialized Parser.tryEat<A>(anyOf:)(inited);
        uint64_t v17 = v16;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v17)
        {
          char v18 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_20D9D7470;
        *(void *)(v21 + 32) = 38;
        *(void *)(v21 + 40) = 0xE100000000000000;
        *(void *)(v21 + 48) = 82;
        *(void *)(v21 + 56) = 0xE100000000000000;
        specialized Parser.tryEat<A>(anyOf:)(v21);
        uint64_t v23 = v22;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v23)
        {
          uint64_t v54 = v44;
          uint64_t v55 = v45;
          long long v56 = v46;
          char v57 = v47;
          uint64_t v58 = v48;
          uint64_t v59 = v49;
          uint64_t v60 = v50;
          char v61 = v51;
          uint64_t v62 = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
          uint64_t v24 = swift_initStackObject();
          *(void *)(v24 + 32) = 43;
          *(_OWORD *)(v24 + 16) = xmmword_20D9D7470;
          *(void *)(v24 + 40) = 0xE100000000000000;
          *(void *)(v24 + 48) = 45;
          *(void *)(v24 + 56) = 0xE100000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Parser.tryEat<A>(anyOf:)(v24);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          uint64_t v25 = v62;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v26 = String.subscript.getter();
          if ((v26 ^ v27) >> 14)
          {
            Substring.subscript.getter();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            char v18 = Character.isNumber.getter();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            char v18 = 0;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v53 = v25;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v53);
          swift_bridgeObjectRelease();
LABEL_14:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v54 = v52;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v54);
          uint64_t result = swift_bridgeObjectRelease();
          if ((v18 & 1) != 0
            || (v28._uint64_t countAndFlagsBits = 67,
                v28._uint64_t object = (void *)0xE100000000000000,
                uint64_t result = Parser.tryEat(_:)(v28),
                (result & 1) != 0)
            || (v29._uint64_t countAndFlagsBits = 123,
                v29._uint64_t object = (void *)0xE100000000000000,
                uint64_t result = Parser.tryEat(_:)(v29),
                (result & 1) != 0))
          {
            char v19 = 1;
            goto LABEL_18;
          }
          uint64_t v30 = *(void *)(a1 + 8);
          char v31 = *(unsigned char *)(a1 + 32);
          uint64_t v32 = *(void *)(a1 + 40);
          uint64_t v33 = *(void *)(a1 + 48);
          uint64_t v34 = *(void *)(a1 + 56);
          char v35 = *(unsigned char *)(a1 + 64);
          uint64_t v36 = *(void *)(a1 + 72);
          uint64_t v54 = *(void *)a1;
          uint64_t v55 = v30;
          long long v56 = *(_OWORD *)(a1 + 16);
          char v57 = v31;
          uint64_t v58 = v32;
          uint64_t v59 = v33;
          uint64_t v60 = v34;
          char v61 = v35;
          uint64_t v62 = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          Parser.lexMatchingOptionSequence()((unint64_t *)&v44);
          if (*((void *)&v46 + 1))
          {
            outlined consume of AST.MatchingOptionSequence?(v44, v45, v46, *((uint64_t *)&v46 + 1));
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v37 = String.subscript.getter();
            if ((v37 ^ v38) >= 0x4000)
            {
              uint64_t v39 = Substring.subscript.getter();
              uint64_t v41 = v40;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v39 == 41 && v41 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                char v19 = 0;
                if ((v42 & 1) == 0) {
                  goto LABEL_28;
                }
              }
              char v19 = 1;
              Parser.advance(_:)(1);
              goto LABEL_28;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          char v19 = 0;
LABEL_28:
          uint64_t v43 = v62;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v44 = v43;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v44);
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      char v18 = 1;
      goto LABEL_14;
    }
    v20._uint64_t countAndFlagsBits = 42;
    v20._uint64_t object = (void *)0xE100000000000000;
    uint64_t result = Parser.tryEat(_:)(v20);
    char v19 = result;
  }
  else
  {
    char v19 = 0;
  }
LABEL_18:
  *a2 = v19 & 1;
  return result;
}

uint64_t closure #1 in Parser.expectEscaped()@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x270FA5388](v3 - 8, v4);
  uint64_t v72 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v71 = *(void *)(v75 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v75, v6);
  uint64_t v70 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v69 = (uint64_t)&v66 - v11;
  MEMORY[0x270FA5388](v10, v12);
  unint64_t v68 = (char *)&v66 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x270FA5388](v14 - 8, v15);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  uint64_t v74 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18, v19);
  uint64_t v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  uint64_t v24 = MEMORY[0x270FA5388](v22 - 8, v23);
  uint64_t v26 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24, v27);
  Swift::String v29 = (char *)&v66 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30, v32);
  uint64_t v34 = (char *)&v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v73 = *(unsigned __int8 *)(a1 + 32);
  v35._uint64_t countAndFlagsBits = 99;
  v35._uint64_t object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v35) || (specialized Parser.tryEat<A>(sequence:)(11587, 0xE200000000000000) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v77);
    uint64_t v36 = *((void *)&v77 + 1);
    if (*((void *)&v77 + 1))
    {
      uint64_t v37 = v76;
      *uint64_t v76 = v77;
      v37[1] = v36;
    }
LABEL_11:
    return swift_storeEnumTagMultiPayload();
  }
  if (specialized Parser.tryEat<A>(sequence:)(0x2D435C2D4DLL, 0xE500000000000000))
  {
    Parser.expectASCII()((uint64_t)&v77);
    uint64_t v38 = *((void *)&v77 + 1);
    if (*((void *)&v77 + 1))
    {
      uint64_t v39 = v76;
      *uint64_t v76 = v77;
      v39[1] = v38;
    }
    goto LABEL_11;
  }
  if (specialized Parser.tryEat<A>(sequence:)(11597, 0xE200000000000000))
  {
    Parser.expectASCII()((uint64_t)&v77);
    uint64_t v40 = *((void *)&v77 + 1);
    if (*((void *)&v77 + 1))
    {
      uint64_t v41 = v76;
      *uint64_t v76 = v77;
      v41[1] = v40;
    }
    goto LABEL_11;
  }
  Parser.lexNamedCharacter()((uint64_t)v29);
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v43(v29, 1, v30) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v29, (uint64_t)v34, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return outlined init with take of AST.Atom.Kind((uint64_t)v34, (uint64_t)v76, type metadata accessor for AST.Atom.Kind);
  }
  uint64_t v67 = v43;
  outlined destroy of _ASTParent?((uint64_t)v29, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  Parser.lexCharacterProperty()((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v17, 1, v18) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    outlined init with take of AST.Atom.Kind((uint64_t)v21, (uint64_t)v76, type metadata accessor for AST.Atom.CharacterProperty);
    return swift_storeEnumTagMultiPayload();
  }
  outlined destroy of _ASTParent?((uint64_t)v17, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  uint64_t v44 = v75;
  if (v73) {
    goto LABEL_19;
  }
  Parser.lexEscapedReference()((uint64_t)v26);
  if (v67(v26, 1, v30) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v26, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
LABEL_19:
    uint64_t v45 = v72;
    Parser.lexUnicodeScalar()(v72);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v45, 1, v44) == 1)
    {
      outlined destroy of _ASTParent?(v45, &demangling cache variable for type metadata for AST.Atom.Kind?);
      long long v46 = *(char **)(a1 + 8);
      unint64_t v47 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v48 = String.subscript.getter();
      uint64_t v50 = v49;
      if (!((v48 ^ v51) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_36:
        long long v77 = 2uLL;
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        char v80 = 36;
        Parser.errorAtCurrentPosition(_:)(&v77);
        return swift_storeEnumTagMultiPayload();
      }
      uint64_t v55 = Substring.subscript.getter();
      uint64_t v57 = v56;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v58 = a1;
      Parser.advance(_:)(1);
      unint64_t v59 = *(void *)(a1 + 16);
      if (v59 >> 14 < v47 >> 14)
      {
        __break(1u);
      }
      else
      {
        if (!v57) {
          goto LABEL_36;
        }
        static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)(v55, v57, v73, (char *)&v77);
        char v60 = v77;
        if (v77 != 31)
        {
          swift_bridgeObjectRelease();
          *(unsigned char *)uint64_t v76 = v60;
          return swift_storeEnumTagMultiPayload();
        }
        swift_bridgeObjectRetain();
        if (((Character.asciiValue.getter() & 0x100) != 0
           || (Character.isLetter.getter() & 1) == 0 && (Character.isNumber.getter() & 1) == 0)
          && ((Character.asciiValue.getter() & 0x100) == 0 || (Character.isWhitespace.getter() & 1) != 0))
        {
          swift_bridgeObjectRelease();
LABEL_42:
          uint64_t v65 = v76;
          *uint64_t v76 = v55;
          v65[1] = v57;
          return swift_storeEnumTagMultiPayload();
        }
        *(void *)&long long v77 = v55;
        *((void *)&v77 + 1) = v57;
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        char v80 = 10;
        swift_bridgeObjectRetain();
        unint64_t v58 = ParseError.description.getter();
        uint64_t v50 = v61;
        long long v46 = *(char **)(a1 + 72);
        swift_bridgeObjectRetain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_39:
          unint64_t v63 = *((void *)v46 + 2);
          unint64_t v62 = *((void *)v46 + 3);
          if (v63 >= v62 >> 1) {
            long long v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v46);
          }
          *((void *)v46 + 2) = v63 + 1;
          uint64_t v64 = &v46[80 * v63];
          v64[32] = 1;
          *((void *)v64 + 5) = v58;
          *((void *)v64 + 6) = v50;
          *((void *)v64 + 7) = v47;
          *((void *)v64 + 8) = v59;
          *((void *)v64 + 9) = v55;
          *((void *)v64 + 10) = v57;
          *((void *)v64 + 11) = 0;
          *((void *)v64 + 12) = 0;
          v64[104] = 10;
          swift_bridgeObjectRelease_n();
          *(void *)(a1 + 72) = v46;
          goto LABEL_42;
        }
      }
      long long v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v46 + 2) + 1, 1, v46);
      goto LABEL_39;
    }
    uint64_t v52 = v45;
    uint64_t v53 = (uint64_t)v70;
    goto LABEL_26;
  }
  uint64_t v54 = v69;
  outlined init with copy of AST.Atom((uint64_t)v26, v69, type metadata accessor for AST.Atom.Kind);
  outlined destroy of _ASTParent?((uint64_t)v26, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v52 = v54;
  uint64_t v53 = (uint64_t)v68;
LABEL_26:
  outlined init with take of AST.Atom.Kind(v52, v53, type metadata accessor for AST.Atom.Kind);
  return outlined init with take of AST.Atom.Kind(v53, (uint64_t)v76, type metadata accessor for AST.Atom.Kind);
}

uint64_t Parser.lexPCRECallout()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  if ((specialized Parser.tryEat<A>(sequence:)(4407080, 0xE300000000000000) & 1) == 0)
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v70);
    return outlined init with take of AST.Conditional.Condition?((uint64_t)&v70, a1);
  }
  uint64_t v4 = (char *)*((void *)v1 + 2);
  Parser.lexNumber(_:)(1, (uint64_t)&v70);
  if ((v73 & 1) == 0)
  {
    char v11 = 0;
    uint64_t inited = v71;
    uint64_t v10 = v72;
    uint64_t v12 = v70;
    unint64_t v6 = BYTE8(v70) & 1;
    goto LABEL_41;
  }
  uint64_t inited = *((void *)v1 + 2);
  unint64_t v6 = *((void *)v1 + 6);
  uint64_t v1 = (long long *)*((void *)v1 + 9);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.subscript.getter();
  if ((v7 ^ v8) >> 14)
  {
    uint64_t v9 = Substring.subscript.getter();
    uint64_t v10 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (v9 == 41 && v10 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      char v11 = 0;
      uint64_t v12 = 0;
      unint64_t v6 = 0;
      uint64_t v10 = inited;
      goto LABEL_41;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_13;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 96;
  *(_OWORD *)(inited + 16) = xmmword_20D9D7560;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 48) = 39;
  *(void *)(inited + 56) = 0xE100000000000000;
  *(void *)(inited + 64) = 34;
  *(void *)(inited + 72) = 0xE100000000000000;
  *(void *)(inited + 80) = 94;
  *(void *)(inited + 88) = 0xE100000000000000;
  *(void *)(inited + 96) = 37;
  *(void *)(inited + 104) = 0xE100000000000000;
  *(void *)(inited + 112) = 35;
  *(void *)(inited + 120) = 0xE100000000000000;
  *(void *)(inited + 128) = 36;
  *(void *)(inited + 136) = 0xE100000000000000;
  *(void *)(inited + 144) = 123;
  *(void *)(inited + 152) = 0xE100000000000000;
  uint64_t v1 = (long long *)specialized Parser.tryEat<A>(anyOf:)(inited);
  uint64_t v16 = v15;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v16)
  {
    uint64_t v17 = Parser.getClosingDelimiter(for:)((uint64_t)v1, v16);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    char v11 = 1;
    uint64_t v20 = v17;
    uint64_t v1 = v2;
    Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(v20, v19, 1, 0, 1, (uint64_t *)&v60);
    swift_bridgeObjectRelease();
    uint64_t inited = 0;
    uint64_t v10 = 0;
    unint64_t v6 = *((void *)&v60 + 1);
    uint64_t v12 = v60;
    goto LABEL_41;
  }
  uint64_t v21 = a1;
  unint64_t v22 = *((void *)v2 + 2);
  *(void *)&long long v60 = 0;
  *((void *)&v60 + 1) = 0xE000000000000000;
  uint64_t v54 = v4;
  unint64_t v55 = v22;
  uint64_t v56 = a1;
  uint64_t v57 = v2;
  if (closure #1 in closure #1 in Parser.lexPCRECallout()()) {
    goto LABEL_32;
  }
  a1 = v22;
  while (1)
  {
    uint64_t v1 = *(long long **)v2;
    unint64_t v22 = *((void *)v2 + 2);
    unint64_t v23 = *((void *)v2 + 3);
    uint64_t v4 = (char *)*((void *)v2 + 9);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v59 = v23;
    unint64_t v6 = String.subscript.getter();
    uint64_t v10 = v24;
    uint64_t inited = v25;
    swift_bridgeObjectRelease();
    if (!((v6 ^ v10) >> 14)) {
      break;
    }
    uint64_t v58 = Substring.subscript.getter();
    unint64_t v6 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    uint64_t v10 = v27;
    swift_bridgeObjectRelease();
    unint64_t v28 = Substring.index(_:offsetBy:limitedBy:)();
    uint64_t inited = v29;
    swift_bridgeObjectRelease();
    if (inited)
    {
      a1 = v56;
      uint64_t v2 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
      }
      unint64_t v31 = *((void *)v4 + 2);
      unint64_t v30 = *((void *)v4 + 3);
      if (v31 >= v30 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v4);
      }
      *((void *)v4 + 2) = v31 + 1;
      uint64_t v32 = &v4[80 * v31];
      v32[32] = 0;
      *((void *)v32 + 5) = 0xD000000000000022;
      *((void *)v32 + 6) = 0x800000020D9E0210;
      *((void *)v32 + 7) = v22;
      *((void *)v32 + 8) = v22;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      v32[104] = -1;
      *((void *)v57 + 9) = v4;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      uint64_t inited = v33;
      uint64_t v10 = v34;
      uint64_t v4 = v35;
      swift_bridgeObjectRelease();
      uint64_t v36 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v36 < 1) {
        goto LABEL_20;
      }
      swift_bridgeObjectRetain();
      String.subscript.getter();
      uint64_t v10 = v37;
      uint64_t v4 = v38;
      swift_bridgeObjectRelease();
      uint64_t v2 = v57;
      unint64_t v28 = Substring.index(_:offsetBy:limitedBy:)();
      uint64_t inited = v39;
      swift_bridgeObjectRelease();
      if (inited) {
        goto LABEL_20;
      }
      if (v59 >> 14 < v28 >> 14) {
        goto LABEL_49;
      }
    }
    else
    {
      a1 = v56;
      uint64_t v2 = v57;
      if (v59 >> 14 < v28 >> 14) {
        goto LABEL_48;
      }
    }
    unint64_t v22 = v28;
    *((void *)v2 + 2) = v28;
    *((void *)v2 + 3) = v59;
LABEL_20:
    uint64_t v21 = a1;
    uint64_t v1 = &v60;
    MEMORY[0x2105617C0](v58, v6);
    swift_bridgeObjectRelease();
    a1 = v22;
    if (closure #1 in closure #1 in Parser.lexPCRECallout()()) {
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v22 = a1;
  uint64_t v21 = v56;
  uint64_t v2 = v57;
LABEL_32:
  if (v22 >> 14 < v55 >> 14) {
    goto LABEL_50;
  }
  unint64_t v40 = v22;
  unint64_t v6 = *((void *)&v60 + 1);
  uint64_t v41 = v60;
  swift_bridgeObjectRetain();
  uint64_t v42 = String.subscript.getter();
  unint64_t v44 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 ^ v44) >> 14) {
    goto LABEL_37;
  }
  uint64_t v45 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v45 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v45)
  {
LABEL_37:
    unint64_t v59 = v40;
    *(void *)&long long v60 = 4407080;
    *((void *)&v60 + 1) = 0xE300000000000000;
    swift_bridgeObjectRetain();
    a1 = v41;
    v46._uint64_t countAndFlagsBits = v41;
    v46._uint64_t object = (void *)v6;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._uint64_t countAndFlagsBits = 41;
    v47._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    uint64_t v10 = *((void *)&v60 + 1);
    uint64_t inited = v60;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    char v63 = 15;
    unint64_t v22 = ParseError.description.getter();
    uint64_t v4 = v48;
    uint64_t v1 = (long long *)*((void *)v2 + 9);
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_38;
    }
    goto LABEL_51;
  }
  long long v60 = xmmword_20D9D7520;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v63 = 3;
  uint64_t v1 = v2;
  Parser.errorAtCurrentPosition(_:)(&v60);
  uint64_t inited = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  uint64_t v4 = v54;
  a1 = v21;
  uint64_t v12 = v41;
LABEL_41:
  while (1)
  {
    unint64_t v22 = *((void *)v2 + 2);
    if (v22 >> 14 >= (unint64_t)v4 >> 14) {
      break;
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    uint64_t v1 = (long long *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v1 + 2) + 1, 1, (char *)v1);
LABEL_38:
    unint64_t v50 = *((void *)v1 + 2);
    unint64_t v49 = *((void *)v1 + 3);
    uint64_t v12 = a1;
    if (v50 >= v49 >> 1) {
      uint64_t v1 = (long long *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, (char *)v1);
    }
    *((void *)v1 + 2) = v50 + 1;
    unint64_t v51 = &v1[5 * v50];
    char v11 = 1;
    *((unsigned char *)v51 + 32) = 1;
    *((void *)v51 + 5) = v22;
    *((void *)v51 + 6) = v4;
    *((void *)v51 + 7) = v55;
    *((void *)v51 + 8) = v59;
    *((void *)v51 + 9) = inited;
    *((void *)v51 + 10) = v10;
    *((void *)v51 + 11) = 0;
    *((void *)v51 + 12) = 0;
    *((unsigned char *)v51 + 104) = 15;
    swift_bridgeObjectRelease();
    uint64_t inited = 0;
    uint64_t v10 = 0;
    a1 = v56;
    uint64_t v2 = v57;
    *((void *)v57 + 9) = v1;
    uint64_t v4 = v54;
  }
  v52._uint64_t countAndFlagsBits = 41;
  v52._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v52))
  {
    long long v66 = xmmword_20D9D7520;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v69 = 3;
    Parser.errorAtCurrentPosition(_:)(&v66);
  }
  *(void *)&long long v60 = v12;
  *((void *)&v60 + 1) = v6;
  uint64_t v61 = inited;
  uint64_t v62 = v10;
  char v63 = v11;
  uint64_t v64 = v4;
  unint64_t v65 = v22;
  _s12_RegexParser3ASTV4AtomV7CalloutOWOi_((uint64_t)&v60);
  outlined init with take of AST.Atom.Callout(&v60, &v70);
  AST.root.modify(&v70);
  return outlined init with take of AST.Conditional.Condition?((uint64_t)&v70, a1);
}

uint64_t closure #1 in closure #1 in Parser.lexPCRECallout()()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = String.subscript.getter();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v0 ^ v2) >= 0x4000)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = String.subscript.getter();
    if ((v4 ^ v5) >> 14)
    {
      uint64_t v6 = Substring.subscript.getter();
      uint64_t v7 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7)
    {
      if (v6 == 41 && v7 == 0xE100000000000000) {
        char v3 = 1;
      }
      else {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = 0;
    }
  }
  else
  {
    char v3 = 1;
  }
  return v3 & 1;
}

unint64_t Parser.expectOnigurumaCalloutArgList(leftBrace:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v84 = a1[1];
  uint64_t v85 = *a1;
  unint64_t v3 = v2[2];
  unint64_t v4 = v2[3];
  swift_bridgeObjectRetain();
  unint64_t result = String.subscript.getter();
  if (v6 >> 14 < result >> 14)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v88 = (char *)MEMORY[0x263F8EE78];
  uint64_t v89 = v2;
  while (1)
  {
    unint64_t v90 = v3;
    unint64_t v9 = Substring.subscript.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    unint64_t v12 = v9 >> 14;
    unint64_t v13 = v11 >> 14;
    unint64_t v91 = v4;
    if (v9 >> 14 != v11 >> 14)
    {
      uint64_t v15 = Substring.subscript.getter();
      uint64_t v16 = v14;
      if (v15 == 44 && v14 == 0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v15 == 125 && v16 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          unint64_t result = Substring.index(after:)();
          unint64_t v77 = result >> 14;
          if (result >> 14 != v13)
          {
            while (1)
            {
              unint64_t v87 = v77;
              uint64_t v79 = Substring.subscript.getter();
              uint64_t v80 = v78;
              if (v79 == 44 && v78 == 0xE100000000000000) {
                break;
              }
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || v79 == 125 && v80 == 0xE100000000000000) {
                break;
              }
              char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
              unint64_t result = swift_bridgeObjectRelease();
              if (v81) {
                goto LABEL_73;
              }
              unint64_t result = Substring.index(after:)();
              unint64_t v77 = result >> 14;
              if (result >> 14 == v13)
              {
                if (v13 >= v12) {
                  goto LABEL_11;
                }
                goto LABEL_81;
              }
            }
            unint64_t result = swift_bridgeObjectRelease();
LABEL_73:
            if (v87 >= v12) {
              goto LABEL_11;
            }
            goto LABEL_81;
          }
          if (v13 < v12) {
            goto LABEL_81;
          }
        }
      }
    }
LABEL_11:
    uint64_t v17 = Substring.subscript.getter();
    unint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!((v17 ^ v19) >> 14))
    {
      swift_bridgeObjectRelease();
      unint64_t v24 = v90;
LABEL_24:
      Swift::String v35 = v89;
      uint64_t v36 = (char *)v89[9];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
      }
      unint64_t v38 = *((void *)v36 + 2);
      unint64_t v37 = *((void *)v36 + 3);
      if (v38 >= v37 >> 1) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v36);
      }
      *((void *)v36 + 2) = v38 + 1;
      uint64_t v39 = &v36[80 * v38];
      v39[32] = 1;
      *((void *)v39 + 5) = 0xD00000000000001CLL;
      *((void *)v39 + 6) = 0x800000020D9DF750;
      *((void *)v39 + 7) = v24;
      *((void *)v39 + 8) = v24;
      *((void *)v39 + 9) = 15;
      *((void *)v39 + 10) = 0;
      *((void *)v39 + 11) = 0;
      *((void *)v39 + 12) = 0;
      v39[104] = 36;
      v89[9] = v36;
      goto LABEL_29;
    }
    unint64_t v25 = v90;
    unint64_t v24 = v90;
    if (Substring.distance(from:to:)() >= 1)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v26 = Substring.index(_:offsetBy:limitedBy:)();
      char v28 = v27;
      unint64_t v25 = v90;
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v24 = v90;
      if ((v28 & 1) == 0)
      {
        if (v91 >> 14 < v26 >> 14) {
          goto LABEL_84;
        }
        v89[2] = v26;
        v89[3] = v91;
        unint64_t v24 = v26;
      }
    }
    uint64_t v29 = MEMORY[0x210561700](v17, v19, v21, v23);
    uint64_t v31 = v30;
    unint64_t result = swift_bridgeObjectRelease();
    if (v24 >> 14 < v25 >> 14) {
      goto LABEL_82;
    }
    if (!v31) {
      goto LABEL_24;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v88 + 2) + 1, 1, v88, &demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Located<String>>);
    }
    unint64_t v33 = *((void *)v88 + 2);
    unint64_t v32 = *((void *)v88 + 3);
    if (v33 >= v32 >> 1) {
      uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v88, &demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Located<String>>);
    }
    *((void *)v88 + 2) = v33 + 1;
    uint64_t v34 = &v88[32 * v33];
    *((void *)v34 + 4) = v29;
    *((void *)v34 + 5) = v31;
    *((void *)v34 + 6) = v90;
    *((void *)v34 + 7) = v24;
    Swift::String v35 = v89;
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v40 = String.subscript.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 ^ v42) < 0x4000) {
      goto LABEL_76;
    }
    unint64_t v43 = (char *)v35[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = String.subscript.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    if (!((v44 ^ v46) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    uint64_t v47 = Substring.subscript.getter();
    uint64_t v49 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v49) {
      break;
    }
LABEL_36:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v51 = String.subscript.getter();
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    if (!((v51 ^ v53) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      *(void *)&long long v92 = 0x6465746365707865;
      *((void *)&v92 + 1) = 0xEA00000000002720;
      v62._uint64_t countAndFlagsBits = 44;
      v62._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      v63._uint64_t countAndFlagsBits = 39;
      v63._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      long long v64 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
      }
      unint64_t v66 = *((void *)v43 + 2);
      unint64_t v65 = *((void *)v43 + 3);
      if (v66 >= v65 >> 1) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v43);
      }
      *((void *)v43 + 2) = v66 + 1;
      uint64_t v7 = &v43[80 * v66];
      v7[32] = 1;
      *(_OWORD *)(v7 + 40) = v64;
      *((void *)v7 + 7) = v24;
      *((void *)v7 + 8) = v24;
      *(_OWORD *)(v7 + 72) = xmmword_20D9D7570;
      *((void *)v7 + 11) = 0;
      *((void *)v7 + 12) = 0;
      v7[104] = 3;
      v35[9] = v43;
      goto LABEL_4;
    }
    uint64_t v54 = Substring.subscript.getter();
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v54 == 44 && v56 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      unint64_t v57 = v91;
    }
    else
    {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v57 = v91;
      if ((v58 & 1) == 0) {
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v59 = Substring.index(_:offsetBy:limitedBy:)();
    char v61 = v60;
    unint64_t result = swift_bridgeObjectRelease();
    if (v61)
    {
      strcpy((char *)&v92, "UNREACHABLE: ");
      HIWORD(v92) = -4864;
      v67._uint64_t countAndFlagsBits = 0xD000000000000015;
      v67._uint64_t object = (void *)0x800000020D9E0190;
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      long long v68 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
      }
      unint64_t v70 = *((void *)v43 + 2);
      unint64_t v69 = *((void *)v43 + 3);
      if (v70 >= v69 >> 1) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v43);
      }
      *((void *)v43 + 2) = v70 + 1;
      uint64_t v71 = &v43[80 * v70];
      v71[32] = 0;
      *(_OWORD *)(v71 + 40) = v68;
      *((void *)v71 + 7) = v24;
      *((void *)v71 + 8) = v24;
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 88) = 0u;
      v71[104] = -1;
      v35[9] = v43;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v72 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v72 >= 1)
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        unint64_t v73 = Substring.index(_:offsetBy:limitedBy:)();
        char v75 = v74;
        unint64_t result = swift_bridgeObjectRelease();
        if ((v75 & 1) == 0)
        {
          if (v91 >> 14 < v73 >> 14) {
            goto LABEL_85;
          }
          void v35[2] = v73;
          v35[3] = v91;
        }
      }
    }
    else
    {
      if (v57 >> 14 < v59 >> 14) {
        goto LABEL_83;
      }
      void v35[2] = v59;
      v35[3] = v57;
    }
LABEL_4:
    unint64_t v3 = v35[2];
    unint64_t v4 = v35[3];
    swift_bridgeObjectRetain();
    unint64_t result = String.subscript.getter();
    if (v8 >> 14 < result >> 14) {
      goto LABEL_80;
    }
  }
  if (v47 != 125 || v49 != 0xE100000000000000)
  {
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v50) {
      goto LABEL_76;
    }
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
LABEL_76:
  v82._uint64_t countAndFlagsBits = 125;
  v82._uint64_t object = (void *)0xE100000000000000;
  unint64_t result = Parser.tryEat(_:)(v82);
  if ((result & 1) == 0)
  {
    long long v92 = xmmword_20D9D7510;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    char v95 = 3;
    unint64_t result = Parser.errorAtCurrentPosition(_:)(&v92);
  }
  unint64_t v83 = v35[2];
  if (v83 >> 14 >= v24 >> 14)
  {
    *a2 = v85;
    a2[1] = v84;
    a2[2] = v88;
    a2[3] = v24;
    a2[4] = v83;
    return result;
  }
LABEL_86:
  __break(1u);
  return result;
}

uint64_t Parser.lexOnigurumaCalloutTag()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = v1[2];
  v4._uint64_t countAndFlagsBits = 91;
  v4._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v4);
  if (result)
  {
    unint64_t v6 = v1[2];
    if (v6 >> 14 < v3 >> 14)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 93, 0xE100000000000000, 2u, &v11);
      unint64_t v7 = v1[2];
      if (v7 >> 14 >= v6 >> 14)
      {
        long long v8 = v11;
        v9._uint64_t countAndFlagsBits = 93;
        v9._uint64_t object = (void *)0xE100000000000000;
        uint64_t result = Parser.tryEat(_:)(v9);
        if ((result & 1) == 0)
        {
          long long v11 = xmmword_20D9D7580;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          char v14 = 3;
          uint64_t result = Parser.errorAtCurrentPosition(_:)(&v11);
        }
        unint64_t v10 = v1[2];
        if (v7 >> 14 <= v10 >> 14)
        {
          *(void *)a1 = v3;
          *(void *)(a1 + 8) = v6;
          *(_OWORD *)(a1 + 16) = v8;
          *(void *)(a1 + 32) = v6;
          *(void *)(a1 + 40) = v7;
          *(void *)(a1 + 48) = v7;
          *(void *)(a1 + 56) = v10;
          return result;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t Parser.lexOnigurumaNamedCallout()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v61 = v1[2];
  uint64_t v62 = *v1;
  uint64_t v60 = v1[3];
  char v59 = *((unsigned char *)v1 + 32);
  uint64_t v4 = v1[6];
  uint64_t v57 = v1[7];
  uint64_t v58 = v1[5];
  char v56 = *((unsigned char *)v1 + 64);
  uint64_t v5 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v64 = v3;
  unint64_t v65 = a1;
  uint64_t v63 = v4;
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) == 0)
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v87);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v87, (uint64_t)v71);
LABEL_11:
    outlined init with take of AST.Conditional.Condition?((uint64_t)v71, (uint64_t)&v72);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)&v87);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)&v87) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)&v67);
      outlined init with take of AST.Atom.Callout(&v67, a1);
      return AST.root.modify(a1);
    }
    uint64_t v19 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v5;
    uint64_t v21 = specialized Collection.dropFirst(_:)(*(void *)(v5 + 16), v19);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    int64_t v27 = v26 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v28 = v23 - 32;
    uint64_t v29 = v25;
    uint64_t v30 = v25;
LABEL_13:
    uint64_t v31 = v28 + 80 * v29;
    while (1)
    {
      if (v27 == v30)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        uint64_t *v1 = v62;
        v1[1] = v3;
        v1[2] = v61;
        v1[3] = v60;
        *((unsigned char *)v1 + 32) = v59;
        v1[5] = v58;
        v1[6] = v4;
        v1[7] = v57;
        *((unsigned char *)v1 + 64) = v56;
        v1[9] = v20;
        return outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)a1);
      }
      if (v29 < v25 || v30 >= v27) {
        break;
      }
      int v32 = *(unsigned __int8 *)(v31 + 32);
      ++v30;
      v31 += 80;
      if (!v32)
      {
        uint64_t v53 = v28;
        uint64_t v55 = v21;
        uint64_t v66 = v19;
        uint64_t v48 = *(void *)(v31 - 24);
        uint64_t v50 = *(void *)(v31 - 40);
        uint64_t v33 = *(void *)(v31 - 8);
        uint64_t v44 = *(void *)(v31 - 32);
        uint64_t v46 = *(void *)(v31 - 16);
        uint64_t v34 = *(void *)v31;
        uint64_t v35 = *(void *)(v31 + 8);
        uint64_t v36 = *(void *)(v31 + 16);
        unsigned __int8 v37 = *(unsigned char *)(v31 + 24);
        swift_bridgeObjectRetain();
        outlined copy of ParseError?(v33, v34, v35, v36, v37);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
          uint64_t v20 = result;
        }
        uint64_t v38 = v20;
        unint64_t v39 = *(void *)(v20 + 16);
        uint64_t v40 = v38;
        unint64_t v41 = *(void *)(v38 + 24);
        if (v39 >= v41 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v39 + 1, 1, (char *)v40);
          uint64_t v40 = result;
        }
        *(void *)(v40 + 16) = v39 + 1;
        unint64_t v42 = v40 + 80 * v39;
        uint64_t v20 = v40;
        *(unsigned char *)(v42 + 32) = 0;
        *(void *)(v42 + 40) = v50;
        *(void *)(v42 + 48) = v44;
        *(void *)(v42 + 56) = v48;
        *(void *)(v42 + 64) = v46;
        *(void *)(v42 + 72) = v33;
        *(void *)(v42 + 80) = v34;
        *(void *)(v42 + 88) = v35;
        *(void *)(v42 + 96) = v36;
        *(unsigned char *)(v42 + 104) = v37;
        uint64_t v29 = v30;
        uint64_t v3 = v64;
        a1 = v65;
        uint64_t v4 = v63;
        uint64_t v19 = v66;
        uint64_t v28 = v53;
        uint64_t v21 = v55;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v6 = v1[2];
  uint64_t result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 41, 0xE100000000000000, 1u, &v87);
  unint64_t v8 = v1[2];
  unint64_t v54 = v6;
  if (v8 >> 14 < v6 >> 14)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  long long v9 = v87;
  Parser.lexOnigurumaCalloutTag()((uint64_t)&v87);
  long long v10 = v87;
  uint64_t v51 = v89;
  uint64_t v52 = v88;
  uint64_t v47 = v91;
  uint64_t v49 = v90;
  uint64_t v43 = v93;
  uint64_t v45 = v92;
  unint64_t v11 = v1[2];
  v12._uint64_t countAndFlagsBits = 123;
  v12._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v12);
  if ((result & 1) == 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_8;
  }
  unint64_t v13 = v1[2];
  if (v13 >> 14 >= v11 >> 14)
  {
    *(void *)&long long v72 = v11;
    *((void *)&v72 + 1) = v13;
    Parser.expectOnigurumaCalloutArgList(leftBrace:)((uint64_t *)&v72, &v87);
    uint64_t v15 = *((void *)&v87 + 1);
    uint64_t v14 = v87;
    uint64_t v16 = v88;
    uint64_t v17 = v89;
LABEL_8:
    v18._uint64_t countAndFlagsBits = 41;
    v18._uint64_t object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v18))
    {
      long long v67 = xmmword_20D9D7520;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      char v70 = 3;
      Parser.errorAtCurrentPosition(_:)(&v67);
    }
    long long v72 = v9;
    unint64_t v73 = v54;
    unint64_t v74 = v8;
    long long v75 = v10;
    uint64_t v76 = v52;
    uint64_t v77 = v51;
    uint64_t v78 = v49;
    uint64_t v79 = v47;
    uint64_t v80 = v45;
    uint64_t v81 = v43;
    uint64_t v82 = v14;
    uint64_t v83 = v15;
    uint64_t v84 = v16;
    uint64_t v85 = v17;
    uint64_t v86 = *((void *)&v10 + 1);
    _s12_RegexParser3ASTV4AtomV7CalloutOWOi0_((uint64_t)&v72);
    outlined init with take of AST.Atom.Callout(&v72, &v87);
    AST.root.modify(&v87);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v87, (uint64_t)v71);
    uint64_t v3 = v64;
    a1 = v65;
    uint64_t v4 = v63;
    goto LABEL_11;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t Parser.lexOnigurumaCalloutOfContents()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v67 = v1[2];
  uint64_t v68 = *v1;
  uint64_t v66 = v1[3];
  char v65 = *((unsigned char *)v1 + 32);
  uint64_t v4 = v1[6];
  uint64_t v63 = v1[7];
  uint64_t v64 = v1[5];
  char v62 = *((unsigned char *)v1 + 64);
  uint64_t v5 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000) & 1) == 0
    || (specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v1, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)&v98), !*((void *)&v98 + 1)))
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v98);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v98, (uint64_t)v79);
LABEL_16:
    outlined init with take of AST.Conditional.Condition?((uint64_t)v79, (uint64_t)&v80);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)&v98);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)&v98) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)&v75);
      outlined init with take of AST.Atom.Callout(&v75, a1);
      return AST.root.modify(a1);
    }
    uint64_t v22 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = specialized Collection.dropFirst(_:)(*(void *)(v5 + 16), v22);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    int64_t v29 = v28 >> 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v30 = v25 - 32;
    uint64_t v31 = v27;
    uint64_t v32 = v27;
LABEL_18:
    uint64_t v33 = v30 + 80 * v31;
    while (1)
    {
      if (v29 == v32)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        uint64_t *v1 = v68;
        v1[1] = v3;
        v1[2] = v67;
        v1[3] = v66;
        *((unsigned char *)v1 + 32) = v65;
        v1[5] = v64;
        v1[6] = v4;
        v1[7] = v63;
        *((unsigned char *)v1 + 64) = v62;
        v1[9] = v5;
        return outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)a1);
      }
      if (v31 < v27 || v32 >= v29) {
        break;
      }
      int v34 = *(unsigned __int8 *)(v33 + 32);
      ++v32;
      v33 += 80;
      if (!v34)
      {
        uint64_t v60 = v23;
        uint64_t v61 = v22;
        uint64_t v58 = v30;
        uint64_t v70 = v4;
        uint64_t v72 = v3;
        unint64_t v74 = a1;
        uint64_t v51 = *(void *)(v33 - 24);
        uint64_t v53 = *(void *)(v33 - 40);
        uint64_t v35 = *(void *)(v33 - 8);
        uint64_t v47 = *(void *)(v33 - 32);
        uint64_t v49 = *(void *)(v33 - 16);
        uint64_t v36 = *(void *)v33;
        uint64_t v37 = *(void *)(v33 + 8);
        uint64_t v38 = *(void *)(v33 + 16);
        unsigned __int8 v39 = *(unsigned char *)(v33 + 24);
        swift_bridgeObjectRetain();
        uint64_t v55 = v35;
        outlined copy of ParseError?(v35, v36, v37, v38, v39);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
          uint64_t v5 = result;
        }
        unint64_t v41 = *(void *)(v5 + 16);
        unint64_t v40 = *(void *)(v5 + 24);
        uint64_t v42 = v5;
        if (v41 >= v40 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, (char *)v5);
          uint64_t v42 = result;
        }
        *(void *)(v42 + 16) = v41 + 1;
        uint64_t v5 = v42;
        unint64_t v43 = v42 + 80 * v41;
        *(unsigned char *)(v43 + 32) = 0;
        *(void *)(v43 + 40) = v53;
        *(void *)(v43 + 48) = v47;
        *(void *)(v43 + 56) = v51;
        *(void *)(v43 + 64) = v49;
        *(void *)(v43 + 72) = v55;
        *(void *)(v43 + 80) = v36;
        *(void *)(v43 + 88) = v37;
        *(void *)(v43 + 96) = v38;
        *(unsigned char *)(v43 + 104) = v39;
        uint64_t v31 = v32;
        uint64_t v3 = v72;
        a1 = v74;
        uint64_t v4 = v70;
        uint64_t v23 = v60;
        uint64_t v22 = v61;
        uint64_t v30 = v58;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = v99;
  unint64_t v6 = v100;
  swift_bridgeObjectRetain();
  uint64_t v8 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(125, 0xE100000000000000, v8, 0, 1, (uint64_t *)&v98);
  unint64_t v10 = v100;
  unint64_t v11 = v1[2];
  if (v11 >> 14 >= v100 >> 14)
  {
    uint64_t v69 = v4;
    uint64_t v71 = v3;
    uint64_t v57 = v98;
    uint64_t v59 = v7;
    uint64_t v54 = v99;
    uint64_t v56 = *((void *)&v98 + 1);
    Parser.lexOnigurumaCalloutTag()((uint64_t)&v98);
    uint64_t v50 = *((void *)&v98 + 1);
    uint64_t v52 = v98;
    unint64_t v12 = v100;
    uint64_t v13 = v101;
    uint64_t v46 = v102;
    uint64_t v48 = v99;
    uint64_t v44 = v104;
    uint64_t v45 = v103;
    unint64_t v14 = v1[2];
    v15._uint64_t countAndFlagsBits = 62;
    v15._uint64_t object = (void *)0xE100000000000000;
    uint64_t result = Parser.tryEat(_:)(v15);
    unint64_t v73 = a1;
    unint64_t v16 = v6;
    if (result)
    {
      char v17 = 0;
    }
    else
    {
      v18._uint64_t countAndFlagsBits = 60;
      v18._uint64_t object = (void *)0xE100000000000000;
      uint64_t result = Parser.tryEat(_:)(v18);
      if (result)
      {
        char v17 = 1;
      }
      else
      {
        v19._uint64_t countAndFlagsBits = 88;
        v19._uint64_t object = (void *)0xE100000000000000;
        uint64_t result = Parser.tryEat(_:)(v19);
        if (result) {
          char v17 = 2;
        }
        else {
          char v17 = 0;
        }
      }
    }
    unint64_t v20 = v1[2];
    if (v20 >> 14 < v14 >> 14) {
      goto LABEL_32;
    }
    v21._uint64_t countAndFlagsBits = 41;
    v21._uint64_t object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v21))
    {
      long long v75 = xmmword_20D9D7520;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      char v78 = 3;
      Parser.errorAtCurrentPosition(_:)(&v75);
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v80 = v59;
    *((void *)&v80 + 1) = v16;
    uint64_t v81 = v57;
    uint64_t v82 = v56;
    uint64_t v83 = v54;
    unint64_t v84 = v10;
    unint64_t v85 = v10;
    unint64_t v86 = v11;
    uint64_t v87 = v52;
    uint64_t v88 = v50;
    uint64_t v89 = v48;
    unint64_t v90 = v12;
    uint64_t v91 = v13;
    uint64_t v92 = v46;
    uint64_t v93 = v45;
    uint64_t v94 = v44;
    char v95 = v17;
    unint64_t v96 = v14;
    unint64_t v97 = v20;
    _s12_RegexParser3ASTV4AtomV7CalloutOWOi1_((uint64_t)&v80);
    outlined init with take of AST.Atom.Callout(&v80, &v98);
    AST.root.modify(&v98);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v98, (uint64_t)v79);
    uint64_t v3 = v71;
    a1 = v73;
    uint64_t v4 = v69;
    goto LABEL_16;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t Parser.lexBacktrackingDirective()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v72 = v1[3];
  uint64_t v73 = v1[2];
  char v71 = *((unsigned char *)v1 + 32);
  uint64_t v6 = v1[6];
  uint64_t v69 = v1[7];
  uint64_t v70 = v1[5];
  char v68 = *((unsigned char *)v1 + 64);
  uint64_t v7 = (uint64_t *)v1[9];
  uint64_t v81 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t v8 = v1[2];
  if (specialized Parser.tryEat<A>(sequence:)(0x545045434341, 0xE600000000000000))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(1279869254, 0xE400000000000000) & 1) != 0
    || (v11._uint64_t countAndFlagsBits = 70, v11._object = (void *)0xE100000000000000, Parser.tryEat(_:)(v11)))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 1;
    goto LABEL_7;
  }
  if (specialized Parser.tryEat<A>(sequence:)(1263681869, 0xE400000000000000))
  {
    uint64_t v9 = 1;
    uint64_t v10 = 2;
    goto LABEL_7;
  }
  unint64_t v75 = v8;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = String.subscript.getter();
  if ((v30 ^ v31) >> 14)
  {
    uint64_t v32 = Substring.subscript.getter();
    uint64_t v2 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = 0;
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v32 == 58 && v2 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      uint64_t v9 = 1;
      uint64_t v10 = 2;
      unint64_t v8 = v75;
      goto LABEL_7;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_33;
    }
  }
  if (specialized Parser.tryEat<A>(sequence:)(0x54494D4D4F43, 0xE600000000000000))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 3;
    unint64_t v8 = v75;
    goto LABEL_7;
  }
  unint64_t v8 = v75;
  if (specialized Parser.tryEat<A>(sequence:)(0x454E555250, 0xE500000000000000))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 4;
    goto LABEL_7;
  }
  if (specialized Parser.tryEat<A>(sequence:)(1346980691, 0xE400000000000000))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 5;
    goto LABEL_7;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(1313163348, 0xE400000000000000) & 1) == 0)
  {
LABEL_42:
    uint64_t v74 = v6;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = 0;
    unint64_t v80 = 0;
    unint64_t v8 = 0;
    uint64_t v79 = 0;
LABEL_43:
    uint64_t v2 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(v7[2], v2);
    uint64_t v36 = v35;
    uint64_t v6 = v37;
    uint64_t v39 = v38 >> 1;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v40 = v36 - 32;
    uint64_t v41 = v6;
    uint64_t v9 = v6;
    uint64_t v42 = v81;
LABEL_44:
    uint64_t v43 = v40 + 80 * v41;
    while (1)
    {
      if (v39 == v9)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *uint64_t v3 = v5;
        v3[1] = v42;
        void v3[2] = v73;
        uint64_t v3[3] = v72;
        *((unsigned char *)v3 + 32) = v71;
        v3[5] = v70;
        v3[6] = v74;
        v3[7] = v69;
        *((unsigned char *)v3 + 64) = v68;
        v3[9] = (uint64_t)v7;
        *a1 = v79;
        a1[1] = v8;
        a1[2] = v80;
        a1[3] = v78;
        a1[4] = 1;
        goto LABEL_55;
      }
      if (v41 < v6 || v9 >= v39) {
        break;
      }
      int v44 = *(unsigned __int8 *)(v43 + 32);
      ++v9;
      v43 += 80;
      if (!v44)
      {
        uint64_t v64 = v40;
        uint64_t v65 = v2;
        uint64_t v67 = v5;
        unint64_t v75 = v8;
        uint64_t v66 = a1;
        uint64_t v59 = *(void *)(v43 - 24);
        uint64_t v60 = *(void *)(v43 - 40);
        uint64_t v45 = *(void *)(v43 - 8);
        uint64_t v58 = *(void *)(v43 - 16);
        uint64_t v46 = *(void *)v43;
        uint64_t v47 = *(void *)(v43 + 8);
        uint64_t v48 = *(void *)(v43 + 16);
        uint64_t v49 = (char *)v7;
        unsigned __int8 v50 = *(unsigned char *)(v43 + 24);
        uint64_t v63 = *(void *)(v43 - 32);
        swift_bridgeObjectRetain();
        uint64_t v61 = v45;
        uint64_t v51 = v45;
        uint64_t v52 = v48;
        uint64_t v53 = v46;
        unsigned __int8 v62 = v50;
        outlined copy of ParseError?(v51, v46, v47, v52, v50);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
        }
        unint64_t v55 = *((void *)v49 + 2);
        unint64_t v54 = *((void *)v49 + 3);
        uint64_t v56 = v49;
        if (v55 >= v54 >> 1) {
          uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v49);
        }
        *((void *)v56 + 2) = v55 + 1;
        uint64_t v7 = (uint64_t *)v56;
        uint64_t v57 = &v56[80 * v55];
        v57[32] = 0;
        *((void *)v57 + 5) = v60;
        *((void *)v57 + 6) = v63;
        *((void *)v57 + 7) = v59;
        *((void *)v57 + 8) = v58;
        *((void *)v57 + 9) = v61;
        *((void *)v57 + 10) = v53;
        *((void *)v57 + 11) = v47;
        *((void *)v57 + 12) = v52;
        v57[104] = v62;
        uint64_t v41 = v9;
        uint64_t v2 = v65;
        a1 = v66;
        uint64_t v42 = v81;
        unint64_t v8 = v75;
        uint64_t v5 = v67;
        uint64_t v40 = v64;
        goto LABEL_44;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 6;
LABEL_7:
  unint64_t v80 = v1[2];
  if (v80 >> 14 < v8 >> 14)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v79 = v10;
  v12._uint64_t countAndFlagsBits = 58;
  v12._uint64_t object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v12))
  {
    Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(41, 0xE100000000000000, 1, 0, 0, &v82);
    unint64_t v13 = v83;
    uint64_t v77 = v84;
    uint64_t v78 = v82;
    uint64_t v76 = v85;
  }
  else
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    unint64_t v13 = 0;
    uint64_t v76 = 0;
  }
  v14._uint64_t countAndFlagsBits = 41;
  v14._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v14))
  {
    long long v86 = xmmword_20D9D7520;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    char v89 = 3;
    Parser.errorAtCurrentPosition(_:)(&v86);
  }
  char v15 = v9 ^ 1;
  if (v13) {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v75 = v8;
    uint64_t v16 = String.subscript.getter();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x210561700](v16, v18, v20, v22);
    uint64_t v7 = v23;
    swift_bridgeObjectRelease();
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v82 = 0xD000000000000018;
    unint64_t v83 = 0x800000020D9DFBD0;
    v24._uint64_t countAndFlagsBits = v6;
    v24._uint64_t object = v7;
    String.append(_:)(v24);
    v25._uint64_t object = (void *)0x800000020D9DFBF0;
    v25._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v25);
    uint64_t v2 = v82;
    unint64_t v8 = v83;
    uint64_t v9 = v1[9];
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_17:
      unint64_t v27 = *(void *)(v9 + 16);
      unint64_t v26 = *(void *)(v9 + 24);
      if (v27 >= v26 >> 1) {
        uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, (char *)v9);
      }
      *(void *)(v9 + 16) = v27 + 1;
      uint64_t v28 = v9 + 80 * v27;
      *(unsigned char *)(v28 + 32) = 1;
      *(void *)(v28 + 40) = v2;
      *(void *)(v28 + 48) = v8;
      unint64_t v8 = v75;
      *(void *)(v28 + 56) = v75;
      *(void *)(v28 + 64) = v80;
      *(void *)(v28 + 72) = v6;
      *(void *)(v28 + 80) = v7;
      *(void *)(v28 + 88) = 0;
      *(void *)(v28 + 96) = 0;
      *(unsigned char *)(v28 + 104) = 13;
      swift_bridgeObjectRelease();
      unint64_t v13 = 0;
      v3[9] = v9;
      goto LABEL_22;
    }
LABEL_58:
    uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
    goto LABEL_17;
  }
  if (v13 == 1)
  {
    uint64_t v74 = v6;
    goto LABEL_43;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a1 = v79;
  a1[1] = v8;
  a1[2] = v80;
  a1[3] = v78;
  a1[4] = v13;
LABEL_55:
  a1[5] = v77;
  a1[6] = v76;
  return result;
}

uint64_t Parser.expectGroupLikeAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  MEMORY[0x270FA5388](v4 - 8, v5);
  uint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  Swift::String v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parser.lexGroupLikeReference()((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v7, (uint64_t)v12, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return outlined init with take of AST.Atom.Kind((uint64_t)v12, a1, type metadata accessor for AST.Atom.Kind);
  }
  outlined destroy of _ASTParent?((uint64_t)v7, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  Parser.lexChangeMatchingOptionAtom()((uint64_t)v79);
  uint64_t v13 = v80;
  if (!v80)
  {
    Parser.lexBacktrackingDirective()((uint64_t *)v79);
    uint64_t v19 = *(void *)v81;
    if (*(void *)v81 != 1)
    {
      uint64_t v34 = v80;
      long long v35 = *(_OWORD *)&v79[8];
      long long v36 = *(_OWORD *)&v81[8];
      *(unsigned char *)a1 = v79[0];
      *(_OWORD *)(a1 + 8) = v35;
      *(void *)(a1 + 24) = v34;
      *(void *)(a1 + 32) = v19;
      *(_OWORD *)(a1 + 40) = v36;
      type metadata accessor for AST.Atom.Kind(0);
      return swift_storeEnumTagMultiPayload();
    }
    Parser.lexGlobalMatchingOption()((uint64_t)v83);
    if (v84 >> 1 == 0xFFFFFFFF)
    {
      Parser.lexPCRECallout()((uint64_t)v77);
      outlined init with take of AST.Conditional.Condition?((uint64_t)v77, (uint64_t)v78);
      outlined init with take of AST.Conditional.Condition?((uint64_t)v78, (uint64_t)v79);
      if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v79) == 1)
      {
        Parser.lexOnigurumaNamedCallout()(v74);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v74, (uint64_t)v75);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v75, (uint64_t)v76);
        if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v76) == 1)
        {
          Parser.lexOnigurumaCalloutOfContents()(&v68);
          outlined init with take of AST.Conditional.Condition?((uint64_t)&v68, (uint64_t)v72);
          outlined init with take of AST.Conditional.Condition?((uint64_t)v72, (uint64_t)v73);
          if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v73) == 1)
          {
            v20._uint64_t countAndFlagsBits = 40;
            v20._uint64_t object = (void *)0xE100000000000000;
            if (!Parser.tryEat(_:)(v20))
            {
              long long v68 = xmmword_20D9D7590;
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              char v71 = 3;
              Parser.errorAtCurrentPosition(_:)(&v68);
            }
            specialized Parser.lexUntil(_:)(v1, closure #1 in Parser.expectGroupLikeAtom(), &v87);
            long long v21 = v87;
            uint64_t v22 = v88;
            uint64_t v23 = v89;
            uint64_t v24 = HIBYTE(*((void *)&v87 + 1)) & 0xFLL;
            if ((*((void *)&v87 + 1) & 0x2000000000000000) == 0) {
              uint64_t v24 = v87 & 0xFFFFFFFFFFFFLL;
            }
            if (v24)
            {
              uint64_t v88 = 0;
              uint64_t v89 = 0;
              char v90 = 14;
              swift_bridgeObjectRetain();
              unint64_t v25 = ParseError.description.getter();
              unint64_t v66 = v26;
              *(void *)&long long v67 = v25;
              unint64_t v27 = (char *)v1[9];
              swift_bridgeObjectRetain();
              uint64_t v28 = v22;
              uint64_t v29 = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
              }
              unint64_t v31 = *((void *)v27 + 2);
              unint64_t v30 = *((void *)v27 + 3);
              if (v31 >= v30 >> 1) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v27);
              }
              *((void *)v27 + 2) = v31 + 1;
              uint64_t v32 = &v27[80 * v31];
              v32[32] = 1;
              unint64_t v33 = v66;
              *((void *)v32 + 5) = v67;
              *((void *)v32 + 6) = v33;
              *((void *)v32 + 7) = v28;
              *((void *)v32 + 8) = v29;
              *(_OWORD *)(v32 + 72) = v21;
              *((void *)v32 + 11) = 0;
              *((void *)v32 + 12) = 0;
              v32[104] = 14;
              swift_bridgeObjectRelease();
            }
            else
            {
              long long v67 = xmmword_20D9D7520;
              long long v87 = xmmword_20D9D7520;
              uint64_t v88 = 0;
              uint64_t v89 = 0;
              char v90 = 3;
              unint64_t v66 = ParseError.description.getter();
              uint64_t v60 = v59;
              unint64_t v27 = (char *)v1[9];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
              }
              unint64_t v62 = *((void *)v27 + 2);
              unint64_t v61 = *((void *)v27 + 3);
              if (v62 >= v61 >> 1) {
                unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v27);
              }
              *((void *)v27 + 2) = v62 + 1;
              uint64_t v63 = &v27[80 * v62];
              v63[32] = 1;
              *((void *)v63 + 5) = v66;
              *((void *)v63 + 6) = v60;
              *((void *)v63 + 7) = v22;
              *((void *)v63 + 8) = v23;
              *(_OWORD *)(v63 + 72) = v67;
              *((void *)v63 + 11) = 0;
              *((void *)v63 + 12) = 0;
              v63[104] = 3;
            }
LABEL_26:
            swift_bridgeObjectRelease();
            v2[9] = v27;
            type metadata accessor for AST.Atom.Kind(0);
            return swift_storeEnumTagMultiPayload();
          }
          uint64_t v58 = v73;
        }
        else
        {
          uint64_t v58 = v76;
        }
      }
      else
      {
        uint64_t v58 = v79;
      }
      outlined init with take of AST.Atom.Callout(v58, (_OWORD *)a1);
      type metadata accessor for AST.Atom.Kind(0);
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t v37 = v85;
    uint64_t v38 = v86;
    swift_bridgeObjectRetain();
    *(void *)&long long v67 = v37;
    uint64_t v39 = String.subscript.getter();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x210561700](v39, v41, v43, v45);
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v79 = 0;
    *(void *)&v79[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v49._uint64_t object = (void *)0x800000020D9DFAF0;
    v49._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = v46;
    v50._uint64_t object = v48;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v51._uint64_t object = (void *)0x800000020D9DFB10;
    String.append(_:)(v51);
    uint64_t v52 = *(void *)v79;
    uint64_t v53 = *(void *)&v79[8];
    unint64_t v27 = (char *)v2[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    unint64_t v55 = *((void *)v27 + 2);
    unint64_t v54 = *((void *)v27 + 3);
    unint64_t v56 = v55 + 1;
    if (v55 >= v54 >> 1)
    {
      unint64_t v66 = v55 + 1;
      uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v27);
      unint64_t v56 = v66;
      unint64_t v27 = v64;
    }
    *((void *)v27 + 2) = v56;
    uint64_t v57 = &v27[80 * v55];
    v57[32] = 1;
    *((void *)v57 + 5) = v52;
    *((void *)v57 + 6) = v53;
    *((void *)v57 + 7) = v67;
    *((void *)v57 + 8) = v38;
    *((void *)v57 + 9) = v46;
    *((void *)v57 + 10) = v48;
    *((void *)v57 + 11) = 0;
    *((void *)v57 + 12) = 0;
    v57[104] = 8;
    goto LABEL_26;
  }
  uint64_t v14 = v82;
  char v15 = v81[16];
  char v16 = v79[16];
  long long v17 = *(_OWORD *)v81;
  *(_OWORD *)a1 = *(_OWORD *)v79;
  *(unsigned char *)(a1 + 16) = v16 & 1;
  *(void *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 48) = v15 & 1;
  *(void *)(a1 + 56) = v14;
  type metadata accessor for AST.Atom.Kind(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Parser.lexGlobalMatchingOption()@<X0>(uint64_t a1@<X8>)
{
  int64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  unint64_t v5 = *(void *)(v1 + 8);
  unint64_t v6 = *(void *)(v1 + 16);
  int64_t v7 = *(void *)(v1 + 24);
  v60.i32[0] = *(unsigned __int8 *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v58 = *(void *)(v1 + 56);
  uint64_t v59 = *(void *)(v1 + 40);
  char v57 = *(unsigned char *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&long long v61 = v9;
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) == 0) {
    goto LABEL_49;
  }
  int64_t v10 = *(void *)(v1 + 16);
  if ((specialized Parser.tryEat<A>(sequence:)(0x43594E415F525342, 0xEB00000000464C52) & 1) == 0)
  {
    if (specialized Parser.tryEat<A>(sequence:)(0x43494E555F525342, 0xEB0000000045444FLL))
    {
      unint64_t v11 = 0;
      unint64_t v13 = 0x8000000000000000;
      uint64_t v12 = 1;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(1179406915, 0xE400000000000000))
    {
      unint64_t v11 = 0;
      unint64_t v13 = 0x6000000000000000;
      uint64_t v12 = 2;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(21059, 0xE200000000000000))
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0x6000000000000000;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(0x464C5243594E41, 0xE700000000000000))
    {
      unint64_t v11 = 0;
      unint64_t v13 = 0x6000000000000000;
      uint64_t v12 = 3;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(5852737, 0xE300000000000000))
    {
      unint64_t v11 = 0;
      unint64_t v13 = 0x6000000000000000;
      uint64_t v12 = 4;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(17996, 0xE200000000000000))
    {
      unint64_t v11 = 0;
      unint64_t v13 = 0x6000000000000000;
      uint64_t v12 = 1;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(5002574, 0xE300000000000000))
    {
      unint64_t v11 = 0;
      unint64_t v13 = 0x6000000000000000;
      uint64_t v12 = 5;
      goto LABEL_46;
    }
    if (specialized Parser.tryEat<A>(sequence:)(0x45445F54494D494CLL, 0xEB00000000485450))
    {
      v14._uint64_t countAndFlagsBits = 61;
      v14._uint64_t object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v14))
      {
        long long v67 = xmmword_20D9D7530;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        char v70 = 3;
        Parser.errorAtCurrentPosition(_:)(&v67);
      }
      Parser.lexNumber(_:)(1, (uint64_t)&v62);
      if (v65)
      {
        uint64_t v66 = 0;
        char v15 = &v66;
        unint64_t v13 = 1;
LABEL_34:
        *(_OWORD *)(v15 + 1) = xmmword_20D9D7550;
        v15[3] = 0;
        *((unsigned char *)v15 + 32) = 2;
        Parser.errorAtCurrentPosition(_:)((long long *)v15);
        uint64_t v12 = 0;
        unint64_t v11 = *(void *)(v1 + 16);
        goto LABEL_46;
      }
      int64x2_t v17 = v64;
      uint64_t v12 = v62;
      unint64_t v13 = v63 & 1;
    }
    else
    {
      if (specialized Parser.tryEat<A>(sequence:)(0x45485F54494D494CLL, 0xEA00000000005041))
      {
        v16._uint64_t countAndFlagsBits = 61;
        v16._uint64_t object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v16))
        {
          long long v72 = xmmword_20D9D7530;
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          char v75 = 3;
          Parser.errorAtCurrentPosition(_:)(&v72);
        }
        Parser.lexNumber(_:)(1, (uint64_t)&v62);
        if (v65)
        {
          uint64_t v71 = 0;
          unint64_t v13 = 0x2000000000000001;
          char v15 = &v71;
          goto LABEL_34;
        }
        int64x2_t v17 = v64;
        uint64_t v12 = v62;
        char v19 = v63;
        uint64_t v20 = 0x2000000000000000;
      }
      else
      {
        if ((specialized Parser.tryEat<A>(sequence:)(0x414D5F54494D494CLL, 0xEB00000000484354) & 1) == 0)
        {
          if (specialized Parser.tryEat<A>(sequence:)(0xD000000000000010, 0x800000020D9DFEE0))
          {
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 1;
          }
          else if (specialized Parser.tryEat<A>(sequence:)(0x5954504D45544F4ELL, 0xE800000000000000))
          {
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            unint64_t v13 = 0xA000000000000000;
          }
          else if (specialized Parser.tryEat<A>(sequence:)(0x5F4F5455415F4F4ELL, 0xEF53534553534F50))
          {
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 2;
          }
          else if (specialized Parser.tryEat<A>(sequence:)(0xD000000000000011, 0x800000020D9DFEC0))
          {
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 3;
          }
          else if (specialized Parser.tryEat<A>(sequence:)(0x54494A5F4F4ELL, 0xE600000000000000))
          {
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 4;
          }
          else if (specialized Parser.tryEat<A>(sequence:)(0x54524154535F4F4ELL, 0xEC00000054504F5FLL))
          {
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 5;
          }
          else if (specialized Parser.tryEat<A>(sequence:)(4609109, 0xE300000000000000))
          {
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 6;
          }
          else
          {
            if ((specialized Parser.tryEat<A>(sequence:)(5260117, 0xE300000000000000) & 1) == 0) {
              goto LABEL_49;
            }
            unint64_t v11 = 0;
            unint64_t v13 = 0xA000000000000000;
            uint64_t v12 = 7;
          }
          goto LABEL_46;
        }
        v18._uint64_t countAndFlagsBits = 61;
        v18._uint64_t object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v18))
        {
          long long v77 = xmmword_20D9D7530;
          uint64_t v78 = 0;
          uint64_t v79 = 0;
          char v80 = 3;
          Parser.errorAtCurrentPosition(_:)(&v77);
        }
        Parser.lexNumber(_:)(1, (uint64_t)&v62);
        if (v65)
        {
          uint64_t v76 = 0;
          unint64_t v13 = 0x4000000000000001;
          char v15 = &v76;
          goto LABEL_34;
        }
        int64x2_t v17 = v64;
        uint64_t v12 = v62;
        char v19 = v63;
        uint64_t v20 = 0x4000000000000000;
      }
      unint64_t v13 = v20 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    }
    if (v13 >> 1 == 0xFFFFFFFF) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0x8000000000000000;
LABEL_46:
  int64x2_t v17 = vdupq_n_s64(v11);
LABEL_47:
  if (*(void *)(v1 + 16) >> 14 < (unint64_t)v10 >> 14) {
    goto LABEL_69;
  }
  if (v13 >> 1 != 0xFFFFFFFF)
  {
    int64x2_t v60 = v17;
    uint64_t v4 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 41;
    v39._uint64_t object = (void *)0xE100000000000000;
    uint64_t result = Parser.tryEat(_:)(v39);
    if ((result & 1) == 0)
    {
      long long v61 = xmmword_20D9D7520;
      long long v77 = xmmword_20D9D7520;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      char v80 = 3;
      int64_t v7 = *(void *)(v1 + 16);
      int64_t v1 = ParseError.description.getter();
      uint64_t v59 = v40;
      int64_t v10 = *(void *)(v2 + 72);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v5 = v6;
      if (result) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
    goto LABEL_66;
  }
LABEL_49:
  int64_t v56 = v7;
  unint64_t v13 = *(void *)(v1 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.dropFirst(_:)(*(void *)(v61 + 16), v13);
  uint64_t v22 = v21;
  int64_t v7 = v23;
  int64_t v1 = v24 >> 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v25 = v22 - 32;
  int64_t v26 = v7;
  int64_t v10 = v7;
LABEL_50:
  uint64_t v27 = v25 + 80 * v26;
  while (1)
  {
    if (v1 == v10)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_unknownObjectRelease_n();
      *(void *)int64_t v2 = v4;
      *(void *)(v2 + 8) = v5;
      *(void *)(v2 + 16) = v6;
      *(void *)(v2 + 24) = v56;
      *(unsigned char *)(v2 + 32) = v60.i8[0];
      *(void *)(v2 + 40) = v59;
      *(void *)(v2 + 48) = v8;
      *(void *)(v2 + 56) = v58;
      *(unsigned char *)(v2 + 64) = v57;
      *(void *)(v2 + 72) = v61;
      *(_OWORD *)a1 = xmmword_20D9D74C0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      return result;
    }
    if (v26 < v7 || v10 >= v1) {
      break;
    }
    int v28 = *(unsigned __int8 *)(v27 + 32);
    ++v10;
    v27 += 80;
    if (!v28)
    {
      uint64_t v51 = v8;
      unint64_t v52 = v5;
      uint64_t v54 = a1;
      uint64_t v55 = v25;
      unint64_t v49 = v13;
      unint64_t v53 = v6;
      uint64_t v47 = *(void *)(v27 - 24);
      uint64_t v48 = *(void *)(v27 - 40);
      uint64_t v29 = *(void *)(v27 - 8);
      uint64_t v45 = *(void *)(v27 - 32);
      uint64_t v46 = *(void *)(v27 - 16);
      uint64_t v30 = *(void *)v27;
      uint64_t v31 = *(void *)(v27 + 8);
      uint64_t v32 = *(void *)(v27 + 16);
      unsigned __int8 v33 = *(unsigned char *)(v27 + 24);
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v29, v30, v31, v32, v33);
      uint64_t v50 = v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        *(void *)&long long v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v61 + 16) + 1, 1, (char *)v61);
      }
      unint64_t v35 = *(void *)(v61 + 16);
      unint64_t v34 = *(void *)(v61 + 24);
      uint64_t v25 = v55;
      if (v35 >= v34 >> 1)
      {
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v61);
        uint64_t v25 = v55;
        *(void *)&long long v61 = v37;
      }
      *(void *)(v61 + 16) = v35 + 1;
      uint64_t v36 = v61 + 80 * v35;
      *(unsigned char *)(v36 + 32) = 0;
      *(void *)(v36 + 40) = v48;
      *(void *)(v36 + 48) = v45;
      *(void *)(v36 + 56) = v47;
      *(void *)(v36 + 64) = v46;
      *(void *)(v36 + 72) = v29;
      *(void *)(v36 + 80) = v30;
      *(void *)(v36 + 88) = v31;
      *(void *)(v36 + 96) = v32;
      *(unsigned char *)(v36 + 104) = v33;
      int64_t v26 = v10;
      unint64_t v6 = v53;
      a1 = v54;
      uint64_t v8 = v51;
      unint64_t v5 = v52;
      unint64_t v13 = v49;
      uint64_t v4 = v50;
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
  do
  {
    __break(1u);
LABEL_71:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
    int64_t v10 = result;
LABEL_63:
    unint64_t v42 = *(void *)(v10 + 16);
    unint64_t v41 = *(void *)(v10 + 24);
    if (v42 >= v41 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, (char *)v10);
      int64_t v10 = result;
    }
    *(void *)(v10 + 16) = v42 + 1;
    unint64_t v43 = v10 + 80 * v42;
    *(unsigned char *)(v43 + 32) = 1;
    *(void *)(v43 + 40) = v1;
    *(void *)(v43 + 48) = v59;
    *(void *)(v43 + 56) = v7;
    *(void *)(v43 + 64) = v7;
    *(_OWORD *)(v43 + 72) = v61;
    *(void *)(v43 + 88) = 0;
    *(void *)(v43 + 96) = 0;
    *(unsigned char *)(v43 + 104) = 3;
    *(void *)(v2 + 72) = v10;
    unint64_t v6 = v5;
LABEL_66:
    unint64_t v44 = *(void *)(v2 + 16);
  }
  while (v44 >> 14 < v6 >> 14);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v13;
  *(int64x2_t *)(a1 + 16) = v60;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v44;
  return result;
}

uint64_t closure #1 in Parser.expectGroupLikeAtom()()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = String.subscript.getter();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v0 ^ v2) < 0x4000) {
    return 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 58;
  *(_OWORD *)(inited + 16) = xmmword_20D9D7470;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 48) = 41;
  *(void *)(inited + 56) = 0xE100000000000000;
  specialized Parser.tryEat<A>(anyOf:)(inited);
  uint64_t v5 = v4;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return 0;
}

uint64_t Parser.lexAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v43 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x270FA5388](v7 - 8, v8);
  int64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  uint64_t v42 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16);
  Swift::String v18 = (char *)&v41 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  uint64_t v21 = MEMORY[0x270FA5388](v19 - 8, v20);
  int64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21, v24);
  int64_t v26 = (char *)&v41 - v25;
  unint64_t v27 = *(void *)(v2 + 16);
  closure #1 in Parser.lexAtom()((void *)v2, *(unsigned __int8 *)(v2 + 32), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v10, &demangling cache variable for type metadata for AST.Atom.Kind?);
    uint64_t v28 = 1;
  }
  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v10, (uint64_t)v18, type metadata accessor for AST.Atom.Kind);
    uint64_t result = outlined init with take of AST.Atom.Kind((uint64_t)v18, (uint64_t)v26, type metadata accessor for AST.Atom.Kind);
    unint64_t v30 = *(void *)(v2 + 16);
    if (v30 >> 14 < v27 >> 14)
    {
      __break(1u);
      return result;
    }
    uint64_t v28 = 0;
    uint64_t v31 = &v26[*(int *)(v3 + 28)];
    *(void *)uint64_t v31 = v27;
    *((void *)v31 + 1) = v30;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v26, v28, 1, v3);
  outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v26, (uint64_t)v23, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v23, 1, v3) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v23, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
    uint64_t v32 = type metadata accessor for AST.Atom(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v44, 1, 1, v32);
  }
  else
  {
    uint64_t v33 = v43;
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v23, v43, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    uint64_t v34 = v42;
    outlined init with copy of AST.Atom(v33, v42, type metadata accessor for AST.Atom.Kind);
    unint64_t v35 = (uint64_t *)(v33 + *(int *)(v3 + 28));
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    outlined destroy of _ASTParent?(v33, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    uint64_t v38 = v44;
    outlined init with take of AST.Atom.Kind(v34, v44, type metadata accessor for AST.Atom.Kind);
    uint64_t v39 = type metadata accessor for AST.Atom(0);
    uint64_t v40 = (void *)(v38 + *(int *)(v39 + 20));
    *uint64_t v40 = v36;
    v40[1] = v37;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
}

unint64_t closure #1 in Parser.lexAtom()@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v107 = (uint64_t *)&v104[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x270FA5388](v9 - 8, v10);
  *(void *)&long long v111 = &v104[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for AST.Atom.CharacterProperty(0);
  uint64_t v14 = MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v110 = &v104[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14, v16);
  uint64_t v109 = &v104[-v17];
  uint64_t v18 = *a1;
  uint64_t v19 = a1[2];
  char v112 = a1;
  swift_bridgeObjectRetain();
  uint64_t v20 = String.subscript.getter();
  uint64_t v22 = v21;
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 ^ (unint64_t)v22) >> 14)
  {
    unint64_t v108 = (void *)a3;
    unint64_t v29 = (unint64_t)v112;
    unsigned int v105 = a2;
    if (a2) {
      goto LABEL_4;
    }
    uint64_t v37 = v112[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v106 = v37;
    swift_bridgeObjectRetain();
    uint64_t v38 = String.subscript.getter();
    uint64_t v22 = v39;
    if ((v38 ^ v40) >> 14)
    {
      unint64_t v24 = Substring.subscript.getter();
      uint64_t v41 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v24 = 0;
      uint64_t v41 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41)
    {
      if (v24 == 41 && v41 == 0xE100000000000000) {
        goto LABEL_26;
      }
      uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v22)
      {
LABEL_27:
        uint64_t v66 = type metadata accessor for AST.Atom.Kind(0);
        int64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56);
        uint64_t v27 = v66;
        uint64_t v28 = (uint64_t)v108;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v48 = String.subscript.getter();
    uint64_t v18 = v49;
    if ((v48 ^ v50) >> 14)
    {
      uint64_t v19 = Substring.subscript.getter();
      uint64_t v51 = v65;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = 0;
      uint64_t v51 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v51)
    {
      if (v19 == 124 && v51 == 0xE100000000000000)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v76) {
        goto LABEL_27;
      }
    }
LABEL_4:
    uint64_t v30 = v111;
    Parser.lexPOSIXCharacterProperty()(v111);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) != 1)
    {
      uint64_t v42 = v110;
      outlined init with copy of AST.Atom(v30, (uint64_t)v110, type metadata accessor for AST.Atom.CharacterProperty);
      outlined destroy of _ASTParent?(v30, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      uint64_t v43 = v109;
      outlined init with take of AST.Atom.Kind((uint64_t)v42, (uint64_t)v109, type metadata accessor for AST.Atom.CharacterProperty);
      uint64_t v44 = (uint64_t)v43;
      uint64_t v36 = v108;
      outlined init with take of AST.Atom.Kind(v44, (uint64_t)v108, type metadata accessor for AST.Atom.CharacterProperty);
      uint64_t v45 = type metadata accessor for AST.Atom.Kind(0);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v36, 0, 1, v45);
    }
    outlined destroy of _ASTParent?(v30, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
    unint64_t v32 = v105;
    if (v105)
    {
LABEL_6:
      unint64_t v33 = *(void *)(v29 + 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v34 = String.subscript.getter();
      if (!((v34 ^ v35) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v36 = v108;
LABEL_40:
        v75._uint64_t object = (void *)0x800000020D9E0290;
        v75._uint64_t countAndFlagsBits = 0xD000000000000017;
        Parser.unreachable(_:)(v75);
        uint64_t v61 = type metadata accessor for AST.Atom.Kind(0);
        uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56);
        uint64_t v63 = v36;
        uint64_t v64 = 1;
        return v62(v63, v64, 1, v61);
      }
      unint64_t v67 = Substring.subscript.getter();
      unint64_t v69 = v68;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      Parser.advance(_:)(1);
      unint64_t v70 = *(void *)(v29 + 16);
      uint64_t v71 = (char *)(v70 >> 14);
      if (v70 >> 14 < v33 >> 14)
      {
        __break(1u);
        goto LABEL_95;
      }
      uint64_t v36 = v108;
      if (!v69) {
        goto LABEL_40;
      }
      if (v67 == 41 && v69 == 0xE100000000000000
        || ((char v94 = _stringCompareWithSmolCheck(_:_:expecting:)(), v67 == 124)
          ? (BOOL v95 = v69 == 0xE100000000000000)
          : (BOOL v95 = 0),
            (uint64_t v36 = v108, !v95) ? (v96 = 0) : (v96 = 1),
            (v94 & 1) != 0 || (v96 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (v32)
        {
LABEL_38:
          *uint64_t v36 = v67;
          v36[1] = v69;
LABEL_39:
          uint64_t v45 = type metadata accessor for AST.Atom.Kind(0);
          goto LABEL_11;
        }
        unint64_t v72 = 0xD00000000000001DLL;
        uint64_t v73 = "Is as a termination condition";
      }
      else
      {
        if (v67 == 40 && v69 == 0xE100000000000000)
        {
          if (v32) {
            goto LABEL_66;
          }
        }
        else if (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v32)
        {
          if (v67 == 46 && v69 == 0xE100000000000000) {
            goto LABEL_73;
          }
LABEL_66:
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
LABEL_73:
            swift_bridgeObjectRelease();
            if ((v32 & 1) == 0) {
              goto LABEL_39;
            }
            uint64_t v97 = 46;
            goto LABEL_80;
          }
          if (v67 == 94 && v69 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if ((v32 & 1) == 0) {
              goto LABEL_39;
            }
            uint64_t v97 = 94;
            goto LABEL_80;
          }
          if (v67 == 36 && v69 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if ((v32 & 1) == 0) {
              goto LABEL_39;
            }
            uint64_t v97 = 36;
LABEL_80:
            *uint64_t v36 = v97;
            v36[1] = 0xE100000000000000;
            goto LABEL_39;
          }
          if (v67 == 92 && v69 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            unint64_t v98 = (unint64_t)v112;
            closure #1 in Parser.expectEscaped()((unint64_t)v112, v107);
            if ((unint64_t)v71 <= *(void *)(v98 + 16) >> 14)
            {
              uint64_t v99 = (uint64_t)v108;
              outlined init with take of AST.Atom.Kind((uint64_t)v107, (uint64_t)v108, type metadata accessor for AST.Atom.Kind);
              uint64_t v61 = type metadata accessor for AST.Atom.Kind(0);
              uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56);
              uint64_t v63 = (void *)v99;
              goto LABEL_21;
            }
            __break(1u);
            goto LABEL_115;
          }
LABEL_95:
          uint64_t v36 = v108;
          if (v67 == 93 && v69 == 0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || (uint64_t)specialized Collection.count.getter(v67, v69) < 2)
          {
            goto LABEL_38;
          }
          swift_bridgeObjectRetain();
          unint64_t result = specialized Collection.first.getter(v67, v69);
          if ((result & 0x100000000) != 0)
          {
            __break(1u);
            return result;
          }
          if ((result & 0xFFFFFF80) != 0
            || v67 == 2573 && v69 == 0xE200000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || (Character.isLetter.getter() & 1) != 0
            || (Character.isNumber.getter() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_107:
            uint64_t v36 = v108;
            goto LABEL_38;
          }
          unint64_t v125 = v67;
          *(void *)uint64_t v126 = v69;
          *(_OWORD *)&v126[8] = 0uLL;
          v126[24] = 11;
          swift_bridgeObjectRetain();
          unint64_t v32 = ParseError.description.getter();
          unint64_t v29 = v100;
          uint64_t v71 = (char *)v112[9];
          swift_bridgeObjectRetain();
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_111:
            unint64_t v102 = *((void *)v71 + 2);
            unint64_t v101 = *((void *)v71 + 3);
            if (v102 >= v101 >> 1) {
              uint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v101 > 1), v102 + 1, 1, v71);
            }
            *((void *)v71 + 2) = v102 + 1;
            uint64_t v103 = &v71[80 * v102];
            v103[32] = 1;
            *((void *)v103 + 5) = v32;
            *((void *)v103 + 6) = v29;
            *((void *)v103 + 7) = v33;
            *((void *)v103 + 8) = v70;
            *((void *)v103 + 9) = v67;
            *((void *)v103 + 10) = v69;
            *((void *)v103 + 11) = 0;
            *((void *)v103 + 12) = 0;
            v103[104] = 11;
            swift_bridgeObjectRelease_n();
            v112[9] = v71;
            goto LABEL_107;
          }
LABEL_115:
          uint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v71 + 2) + 1, 1, v71);
          goto LABEL_111;
        }
        unint64_t v72 = 0xD00000000000002CLL;
        uint64_t v73 = "Should have lexed a group or group-like atom";
      }
      unint64_t v74 = (unint64_t)(v73 - 32) | 0x8000000000000000;
      Parser.unreachable(_:)(*(Swift::String *)&v72);
      goto LABEL_38;
    }
    uint64_t v52 = *(void *)(v29 + 8);
    char v53 = *(unsigned char *)(v29 + 32);
    uint64_t v54 = *(void *)(v29 + 40);
    uint64_t v55 = *(void *)(v29 + 48);
    uint64_t v56 = *(void *)(v29 + 56);
    char v57 = *(unsigned char *)(v29 + 64);
    uint64_t v58 = *(void *)(v29 + 72);
    unint64_t v125 = *(void *)v29;
    *(void *)uint64_t v126 = v52;
    long long v111 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)&v126[8] = v111;
    v126[24] = v53;
    *(void *)&long long v127 = v54;
    *((void *)&v127 + 1) = v55;
    *(void *)&long long v128 = v56;
    BYTE8(v128) = v57;
    uint64_t v129 = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in Parser.shouldLexGroupLikeAtom()((uint64_t)&v125, &v113);
    uint64_t v59 = v129;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v122[0] = v59;
    Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)v122);
    swift_bridgeObjectRelease();
    if (v113 == 1)
    {
      uint64_t v60 = (uint64_t)v108;
      Parser.expectGroupLikeAtom()((uint64_t)v108);
      uint64_t v61 = type metadata accessor for AST.Atom.Kind(0);
      uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56);
      uint64_t v63 = (void *)v60;
LABEL_21:
      uint64_t v64 = 0;
      return v62(v63, v64, 1, v61);
    }
    long long v77 = (char *)v29;
    Parser.lexQuantifier()(&v113);
    if ((unint64_t)v114 >> 1 == 0xFFFFFFFF && (unint64_t)v116 < 2)
    {
      _s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOi0_(v122);
      outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v122, (uint64_t)&v125, &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    }
    else
    {
      unint64_t v78 = *(void *)(v29 + 16);
      if (v78 >> 14 < (unint64_t)v111 >> 14)
      {
        __break(1u);
        goto LABEL_109;
      }
      *(_OWORD *)uint64_t v126 = v114;
      *(_OWORD *)&v126[16] = v115;
      long long v127 = v116;
      long long v128 = v117;
      unint64_t v125 = v113;
      uint64_t v129 = v118;
      char v130 = v119;
      long long v131 = v120;
      uint64_t v132 = v121;
      uint64_t v133 = v111;
      unint64_t v134 = v78;
      AST.root.modify(&v125);
    }
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)&v125, (uint64_t)&v113, &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)&v113, (uint64_t)v122, &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    if (_s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOg((uint64_t)v122) == 1) {
      goto LABEL_6;
    }
    uint64_t v79 = v123;
    uint64_t v80 = v124;
    swift_bridgeObjectRetain();
    *(void *)&long long v111 = v80;
    uint64_t v81 = String.subscript.getter();
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x210561700](v81, v83, v85, v87);
    uint64_t v18 = v88;
    outlined retain of AST.Conditional.Condition(&v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    swift_bridgeObjectRelease();
    uint64_t v135 = v22;
    uint64_t v136 = v18;
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    char v139 = 12;
    unint64_t v24 = ParseError.description.getter();
    unint64_t v32 = v89;
    long long v77 = *(char **)(v29 + 72);
    swift_bridgeObjectRetain();
    uint64_t v19 = v79;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_51:
      unint64_t v91 = *((void *)v77 + 2);
      unint64_t v90 = *((void *)v77 + 3);
      if (v91 >= v90 >> 1) {
        long long v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v77);
      }
      *((void *)v77 + 2) = v91 + 1;
      uint64_t v92 = &v77[80 * v91];
      v92[32] = 1;
      *((void *)v92 + 5) = v24;
      *((void *)v92 + 6) = v32;
      uint64_t v93 = v111;
      *((void *)v92 + 7) = v19;
      *((void *)v92 + 8) = v93;
      *((void *)v92 + 9) = v22;
      *((void *)v92 + 10) = v18;
      *((void *)v92 + 11) = 0;
      *((void *)v92 + 12) = 0;
      v92[104] = 12;
      swift_bridgeObjectRelease();
      *(void *)(v29 + 72) = v77;
      uint64_t v45 = type metadata accessor for AST.Atom.Kind(0);
      uint64_t v36 = v108;
      goto LABEL_11;
    }
LABEL_109:
    long long v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v77 + 2) + 1, 1, v77);
    goto LABEL_51;
  }
  uint64_t v25 = type metadata accessor for AST.Atom.Kind(0);
  int64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  uint64_t v27 = v25;
  uint64_t v28 = a3;
LABEL_28:

  return v26(v28, 1, 1, v27);
}

unint64_t Character.isConfusable.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  if ((uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v5 | (v4 << 16), a1, a2) < 2) {
    goto LABEL_10;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF80) == 0 && (a1 != 2573 || a2 != 0xE200000000000000))
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v7 = 0;
      if (v8) {
        return v7 & 1;
      }
      if ((Character.isLetter.getter() & 1) == 0)
      {
        char v7 = Character.isNumber.getter() ^ 1;
        return v7 & 1;
      }
    }
LABEL_10:
    char v7 = 0;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional Parser.lexCustomCharacterClassRangeOperator()@<W0>(uint64_t a1@<X8>)
{
  long long v6 = *(_OWORD *)(v1 + 16);
  result.value = Parser.peekCCBinOp()().value;
  if (v7 == 3
    && (v4._uint64_t countAndFlagsBits = 45,
        v4._uint64_t object = (void *)0xE100000000000000,
        result.value = Parser.tryEat(_:)(v4),
        (result.value & 1) != 0))
  {
    unint64_t v5 = *(void *)(v1 + 16);
    if (v5 >> 14 < (unint64_t)v6 >> 14)
    {
      __break(1u);
    }
    else
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v5;
      *(unsigned char *)(a1 + 16) = 0;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return result;
}

_RegexParser::AST::GlobalMatchingOptionSequence_optional __swiftcall Parser.lexGlobalMatchingOptionSequence()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)Parser.lexGlobalMatchingOption()((uint64_t)&v17);
  unint64_t v4 = v18;
  unint64_t v5 = (char *)MEMORY[0x263F8EE78];
  if (v18 >> 1 != 0xFFFFFFFF)
  {
    long long v7 = v19;
    long long v6 = v20;
    do
    {
      long long v15 = v7;
      long long v16 = v6;
      uint64_t v8 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v10 = *((void *)v5 + 2);
      unint64_t v9 = *((void *)v5 + 3);
      long long v12 = v15;
      long long v11 = v16;
      if (v10 >= v9 >> 1)
      {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
        long long v12 = v15;
        long long v11 = v16;
        unint64_t v5 = v14;
      }
      *((void *)v5 + 2) = v10 + 1;
      uint64_t v13 = &v5[48 * v10];
      *((void *)v13 + 4) = v8;
      *((void *)v13 + 5) = v4;
      *((_OWORD *)v13 + 3) = v12;
      *((_OWORD *)v13 + 4) = v11;
      uint64_t v2 = (void *)Parser.lexGlobalMatchingOption()((uint64_t)&v17);
      unint64_t v4 = v18;
      long long v7 = v19;
      long long v6 = v20;
    }
    while (v18 >> 1 != 0xFFFFFFFF);
  }
  if (!*((void *)v5 + 2))
  {
    uint64_t v2 = (void *)swift_bridgeObjectRelease();
    unint64_t v5 = 0;
  }
  void *v1 = v5;
  result.value.options._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = ~v7;
  uint64_t v11 = *(void *)(a3 + 48);
  while (1)
  {
    long long v12 = (void *)(v11 + 16 * v8);
    BOOL v13 = *v12 == a1 && v12[1] == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    unint64_t v8 = (v8 + 1) & v10;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

void static SyntaxOptions.experimentalRanges.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static SyntaxOptions.experimentalCaptures.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static SyntaxOptions.experimentalQuotes.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static SyntaxOptions.experimentalComments.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static SyntaxOptions.nonSemanticWhitespace.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static SyntaxOptions.endOfLineComments.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t Parser.parse()@<X0>(void *a1@<X8>)
{
  Parser.lexGlobalMatchingOptionSequence()();
  uint64_t v3 = v24;
  if (v24)
  {
    uint64_t v4 = *(void *)(v24 + 16);
    uint64_t v5 = v24 + 48 * v4 + 32;
    uint64_t v6 = v4 + 1;
    while (--v6)
    {
      uint64_t v7 = (void *)(v5 - 48);
      uint64_t v8 = *(void *)(v5 - 40) >> 61;
      v5 -= 48;
      if (v8 == 3)
      {
        *(unsigned char *)(v1 + 64) = *v7;
        break;
      }
    }
  }
  Parser.parseNode()(&v24);
  uint64_t v9 = v24;
  unint64_t v10 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = String.subscript.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 ^ v13) >= 0x4000)
  {
    v14._uint64_t countAndFlagsBits = 41;
    v14._uint64_t object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v14))
    {
      v20._uint64_t object = (void *)0x800000020D9E0170;
      v20._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      Parser.unreachable(_:)(v20);
      goto LABEL_14;
    }
    unint64_t v15 = *(void *)(v1 + 16);
    if (v15 >> 14 < v10 >> 14)
    {
      __break(1u);
    }
    else
    {
      uint64_t v11 = *(void *)(v1 + 72);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_10:
        unint64_t v17 = *(void *)(v11 + 16);
        unint64_t v16 = *(void *)(v11 + 24);
        unint64_t v18 = v17 + 1;
        if (v17 >= v16 >> 1)
        {
          unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v11);
          unint64_t v18 = v17 + 1;
          uint64_t v11 = (uint64_t)v23;
        }
        *(void *)(v11 + 16) = v18;
        uint64_t v19 = v11 + 80 * v17;
        *(unsigned char *)(v19 + 32) = 1;
        *(void *)(v19 + 40) = 0xD000000000000030;
        *(void *)(v19 + 48) = 0x800000020D9DF8B0;
        *(void *)(v19 + 56) = v10;
        *(void *)(v19 + 64) = v15;
        *(void *)(v19 + 72) = 10;
        *(void *)(v19 + 80) = 0;
        *(void *)(v19 + 88) = 0;
        *(void *)(v19 + 96) = 0;
        *(unsigned char *)(v19 + 104) = 36;
        *(void *)(v1 + 72) = v11;
        goto LABEL_14;
      }
    }
    uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v21 = *(void *)(v1 + 72);
  *a1 = v9;
  a1[1] = v3;
  a1[2] = v21;

  return swift_bridgeObjectRetain();
}

uint64_t Parser.parseNode()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v4 ^ v6) >> 14))
  {
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(void *)(result + 24) = v3;
    *a1 = result | 0xB000000000000000;
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_20D9D7460;
  Parser.parseConcatenation()((unint64_t *)(v8 + 32));
  unint64_t v9 = *(void *)(v1 + 16);
  v10._uint64_t countAndFlagsBits = 124;
  v10._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v10);
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  if (result)
  {
    while (1)
    {
      unint64_t v12 = *(void *)(v1 + 16);
      if (v12 >> 14 < v9 >> 14) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      }
      unint64_t v14 = *((void *)v11 + 2);
      unint64_t v13 = *((void *)v11 + 3);
      if (v14 >= v13 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v14 + 1;
      unint64_t v15 = &v11[16 * v14];
      *((void *)v15 + 4) = v9;
      *((void *)v15 + 5) = v12;
      Parser.parseConcatenation()(&v21);
      unint64_t v16 = v21;
      unint64_t v18 = *(void *)(v8 + 16);
      unint64_t v17 = *(void *)(v8 + 24);
      if (v18 >= v17 >> 1) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v8);
      }
      *(void *)(v8 + 16) = v18 + 1;
      *(void *)(v8 + 8 * v18 + 32) = v16;
      unint64_t v9 = *(void *)(v1 + 16);
      v19._uint64_t countAndFlagsBits = 124;
      v19._uint64_t object = (void *)0xE100000000000000;
      uint64_t result = Parser.tryEat(_:)(v19);
      if ((result & 1) == 0) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v20 = *(void *)(v8 + 16);
  if (v20 != 1)
  {
    uint64_t result = swift_allocObject();
    if (v20)
    {
      if (*((void *)v11 + 2) == v20 - 1)
      {
        *(void *)(result + 16) = v8;
        *(void *)(result + 24) = v11;
        *a1 = result;
        return result;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!*(void *)(v8 + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *a1 = *(void *)(v8 + 32);
  swift_retain();

  return swift_bridgeObjectRelease();
}

uint64_t Parser.parseConcatenation()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v136 = (char *)MEMORY[0x263F8EE78];
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v130 = v2;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = String.subscript.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 ^ v6) < 0x4000) {
      goto LABEL_72;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = String.subscript.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    if ((v7 ^ v9) >> 14)
    {
      uint64_t v10 = Substring.subscript.getter();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
        if (v10 == 124 && v12 == 0xE100000000000000)
        {
LABEL_71:
          swift_bridgeObjectRelease();
          goto LABEL_72;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v13) {
          goto LABEL_72;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = String.subscript.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if ((v14 ^ v16) >> 14)
    {
      uint64_t v17 = Substring.subscript.getter();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
      {
        if (v17 == 41 && v19 == 0xE100000000000000) {
          goto LABEL_71;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_72;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    unint64_t v21 = v137;
    uint64_t result = closure #1 in Parser.lexComment()(v137, &v138);
    unint64_t v23 = v139;
    if (v139)
    {
      unint64_t v24 = *(void *)(v137 + 16);
      if (v24 >> 14 >= v2 >> 14)
      {
        uint64_t v25 = v138;
LABEL_20:
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v25;
        *(void *)(v26 + 24) = v23;
        *(void *)(v26 + 32) = v2;
        *(void *)(v26 + 40) = v24;
        uint64_t v27 = v136;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v136 + 2) + 1, 1, v136);
        }
        unint64_t v29 = *((void *)v27 + 2);
        unint64_t v28 = *((void *)v27 + 3);
        unint64_t v30 = v29 + 1;
        if (v29 >= v28 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v27);
        }
        uint64_t v3 = v26 | 0x6000000000000000;
        goto LABEL_3;
      }
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    if (*(unsigned char *)(v137 + 56))
    {
      unint64_t v31 = *(void *)(v137 + 8);
      unint64_t v32 = *(void *)(v137 + 16);
      unint64_t v33 = *(void *)(v137 + 24);
      uint64_t v138 = *(void *)v137;
      unint64_t v139 = v31;
      unint64_t v140 = v32;
      unint64_t v141 = v33;
      unint64_t v34 = specialized Source.peekPrefix(maxLength:_:)(0, 1);
      if (v37)
      {
        uint64_t v38 = v35;
        uint64_t v39 = v37;
        unint64_t v40 = v34;
        uint64_t v134 = v36;
        unint64_t v24 = v32;
        if (Substring.distance(from:to:)() >= 1)
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          unint64_t v41 = Substring.index(_:offsetBy:limitedBy:)();
          char v43 = v42;
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v24 = v32;
          if ((v43 & 1) == 0)
          {
            if (v33 >> 14 < v41 >> 14) {
              goto LABEL_87;
            }
            *(void *)(v137 + 16) = v41;
            *(void *)(v137 + 24) = v33;
            unint64_t v24 = v41;
          }
        }
        uint64_t v25 = MEMORY[0x210561700](v40, v38, v134, v39);
        unint64_t v23 = v44;
        uint64_t result = swift_bridgeObjectRelease();
        if (v24 >> 14 < v32 >> 14) {
          goto LABEL_86;
        }
        unint64_t v21 = v137;
        if (v23)
        {
          unint64_t v2 = v32;
          goto LABEL_20;
        }
      }
    }
    unint64_t v45 = *(void *)(v21 + 16);
    uint64_t result = closure #1 in Parser.lexQuote()(v21, &v138);
    unint64_t v46 = v139;
    if (v139)
    {
      unint64_t v47 = *(void *)(v21 + 16);
      if (v47 >> 14 < v45 >> 14) {
        goto LABEL_85;
      }
      uint64_t v48 = v138;
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v48;
      *(void *)(v49 + 24) = v46;
      *(void *)(v49 + 32) = v45;
      *(void *)(v49 + 40) = v47;
      uint64_t v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v136 + 2) + 1, 1, v136);
      }
      unint64_t v29 = *((void *)v27 + 2);
      unint64_t v50 = *((void *)v27 + 3);
      unint64_t v30 = v29 + 1;
      if (v29 >= v50 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v29 + 1, 1, v27);
      }
      uint64_t v3 = v49 | 0x5000000000000000;
      goto LABEL_3;
    }
    Parser.lexInterpolation()((uint64_t)&v138);
    unint64_t v51 = v139;
    if (v139)
    {
      unint64_t v53 = v140;
      unint64_t v52 = v141;
      uint64_t v54 = v138;
      uint64_t v55 = swift_allocObject();
      *(void *)(v55 + 16) = v54;
      *(void *)(v55 + 24) = v51;
      *(void *)(v55 + 32) = v53;
      *(void *)(v55 + 40) = v52;
      uint64_t v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v136 + 2) + 1, 1, v136);
      }
      unint64_t v29 = *((void *)v27 + 2);
      unint64_t v56 = *((void *)v27 + 3);
      unint64_t v30 = v29 + 1;
      if (v29 >= v56 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v29 + 1, 1, v27);
      }
      uint64_t v3 = v55 | 0x7000000000000000;
      goto LABEL_3;
    }
    Parser.parseQuantifierOperand()((unint64_t *)&v138);
    uint64_t v57 = v138;
    if ((~v138 & 0xF000000000000007) == 0) {
      break;
    }
    uint64_t v59 = *(void *)v21;
    uint64_t v58 = *(void *)(v21 + 8);
    uint64_t v60 = *(void *)(v21 + 16);
    uint64_t v128 = *(void *)(v21 + 24);
    char v126 = *(unsigned char *)(v21 + 32);
    uint64_t v61 = *(void *)(v21 + 48);
    uint64_t v122 = *(void *)(v21 + 56);
    uint64_t v124 = *(void *)(v21 + 40);
    char v120 = *(unsigned char *)(v21 + 64);
    uint64_t v62 = *(void *)(v21 + 72);
    swift_bridgeObjectRetain();
    uint64_t v132 = v61;
    swift_bridgeObjectRetain();
    uint64_t v135 = v62;
    swift_bridgeObjectRetain();
    closure #1 in Parser.lexQuantifier()(v21, (uint64_t)&v138);
    unint64_t v63 = v141;
    uint64_t v65 = v142;
    unint64_t v64 = v143;
    uint64_t v131 = v57;
    if (v139 >> 1 == 0xFFFFFFFF && v143 < 2)
    {
      uint64_t v116 = v60;
      uint64_t v118 = v58;
      uint64_t v66 = v137;
      uint64_t v67 = *(void *)(v137 + 72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = specialized Collection.dropFirst(_:)(*(void *)(v135 + 16), v67);
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      int64_t v74 = v73 >> 1;
      swift_bridgeObjectRetain();
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v75 = v70 - 32;
      uint64_t v76 = v72;
      uint64_t v77 = v72;
      uint64_t v78 = v132;
LABEL_50:
      uint64_t v79 = v75 + 80 * v76;
      while (v74 != v77)
      {
        if (v76 < v72 || v77 >= v74)
        {
          __break(1u);
          goto LABEL_84;
        }
        int v80 = *(unsigned __int8 *)(v79 + 32);
        ++v77;
        v79 += 80;
        if (!v80)
        {
          uint64_t v112 = v68;
          uint64_t v114 = v59;
          uint64_t v115 = v75;
          uint64_t v108 = *(void *)(v79 - 24);
          uint64_t v109 = *(void *)(v79 - 40);
          uint64_t v81 = *(void *)(v79 - 8);
          uint64_t v107 = *(void *)(v79 - 16);
          uint64_t v83 = *(void *)v79;
          uint64_t v82 = *(void *)(v79 + 8);
          uint64_t v84 = *(void *)(v79 + 16);
          unsigned __int8 v85 = *(unsigned char *)(v79 + 24);
          uint64_t v111 = *(void *)(v79 - 32);
          swift_bridgeObjectRetain();
          uint64_t v110 = v83;
          uint64_t v86 = v83;
          unsigned __int8 v87 = v85;
          outlined copy of ParseError?(v81, v86, v82, v84, v85);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v113 = v67;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v135 + 16) + 1, 1, (char *)v135);
            uint64_t v135 = result;
          }
          unint64_t v89 = *(void *)(v135 + 16);
          unint64_t v88 = *(void *)(v135 + 24);
          uint64_t v75 = v115;
          if (v89 >= v88 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, (char *)v135);
            uint64_t v75 = v115;
            uint64_t v135 = result;
          }
          *(void *)(v135 + 16) = v89 + 1;
          unint64_t v90 = v135 + 80 * v89;
          *(unsigned char *)(v90 + 32) = 0;
          *(void *)(v90 + 40) = v109;
          uint64_t v68 = v112;
          *(void *)(v90 + 48) = v111;
          *(void *)(v90 + 56) = v108;
          *(void *)(v90 + 64) = v107;
          *(void *)(v90 + 72) = v81;
          *(void *)(v90 + 80) = v110;
          *(void *)(v90 + 88) = v82;
          *(void *)(v90 + 96) = v84;
          *(unsigned char *)(v90 + 104) = v87;
          uint64_t v76 = v77;
          uint64_t v66 = v137;
          uint64_t v57 = v131;
          uint64_t v78 = v132;
          uint64_t v67 = v113;
          uint64_t v59 = v114;
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      *(void *)uint64_t v66 = v59;
      *(void *)(v66 + 8) = v118;
      *(void *)(v66 + 16) = v116;
      *(void *)(v66 + 24) = v128;
      *(unsigned char *)(v66 + 32) = v126;
      *(void *)(v66 + 40) = v124;
      *(void *)(v66 + 48) = v78;
      *(void *)(v66 + 56) = v122;
      *(unsigned char *)(v66 + 64) = v120;
      unint64_t v98 = v136;
      *(void *)(v66 + 72) = v135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v136 + 2) + 1, 1, v136);
      }
      unint64_t v100 = *((void *)v98 + 2);
      unint64_t v99 = *((void *)v98 + 3);
      if (v100 >= v99 >> 1) {
        unint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v98);
      }
      *((void *)v98 + 2) = v100 + 1;
      uint64_t v136 = v98;
      *(void *)&v98[8 * v100 + 32] = v57;
      unint64_t v2 = *(void *)(v66 + 16);
    }
    else
    {
      uint64_t v119 = v149;
      uint64_t v121 = v144;
      unint64_t v91 = v139;
      uint64_t v123 = v147;
      uint64_t v125 = v146;
      uint64_t v127 = v145;
      uint64_t v129 = v150;
      unint64_t v92 = v140;
      uint64_t v93 = v138;
      uint64_t v117 = v151;
      char v94 = v148;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v95 = *(void *)(v137 + 16);
      if (v95 >> 14 < v2 >> 14) {
        goto LABEL_90;
      }
      uint64_t v96 = swift_allocObject();
      *(void *)(v96 + 16) = v93;
      *(void *)(v96 + 24) = v91;
      *(void *)(v96 + 32) = v92;
      *(void *)(v96 + 40) = v63;
      *(void *)(v96 + 48) = v65;
      *(void *)(v96 + 56) = v64;
      *(void *)(v96 + 64) = v121;
      *(void *)(v96 + 72) = v127;
      *(void *)(v96 + 80) = v125;
      *(void *)(v96 + 88) = v123;
      *(unsigned char *)(v96 + 96) = v94;
      *(void *)(v96 + 104) = v119;
      *(void *)(v96 + 112) = v129;
      *(void *)(v96 + 120) = v131;
      *(void *)(v96 + 128) = v2;
      *(void *)(v96 + 136) = v95;
      *(void *)(v96 + 144) = v117;
      uint64_t v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v136 + 2) + 1, 1, v136);
      }
      unint64_t v21 = v137;
      unint64_t v29 = *((void *)v27 + 2);
      unint64_t v97 = *((void *)v27 + 3);
      unint64_t v30 = v29 + 1;
      if (v29 >= v97 >> 1) {
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v29 + 1, 1, v27);
      }
      uint64_t v3 = v96 | 0x4000000000000000;
LABEL_3:
      *((void *)v27 + 2) = v30;
      uint64_t v136 = v27;
      *(void *)&v27[8 * v29 + 32] = v3;
      unint64_t v2 = *(void *)(v21 + 16);
    }
  }
  v106._uint64_t object = (void *)0x800000020D9E01B0;
  v106._uint64_t countAndFlagsBits = 0xD000000000000023;
  Parser.unreachable(_:)(v106);
LABEL_72:
  uint64_t v101 = *((void *)v136 + 2);
  if (!v101)
  {
    uint64_t result = swift_allocObject();
    unint64_t v102 = *(void *)(v137 + 16);
    if (v102 >> 14 >= v130 >> 14)
    {
      uint64_t v103 = result;
      *(void *)(result + 16) = v130;
      *(void *)(result + 24) = v102;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v104 = v103 | 0xB000000000000000;
LABEL_81:
      *a1 = v104;
      return result;
    }
    goto LABEL_88;
  }
  if (v101 == 1)
  {
    *a1 = *((void *)v136 + 4);
    swift_retain();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = swift_allocObject();
  unint64_t v105 = *(void *)(v137 + 16);
  if (v105 >> 14 >= v130 >> 14)
  {
    *(void *)(result + 16) = v136;
    *(void *)(result + 24) = v130;
    *(void *)(result + 32) = v105;
    unint64_t v104 = result | 0x1000000000000000;
    goto LABEL_81;
  }
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
  return result;
}

uint64_t Parser.parseQuantifierOperand()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v2, v3);
  unint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AST.Atom(0);
  uint64_t v56 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v11);
  char v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *(void *)(v1 + 16);
  Parser.lexKnownConditionalStart()(&v79);
  outlined init with take of AST.Conditional.Condition?((uint64_t)&v79, (uint64_t)v87);
  outlined init with take of AST.Conditional.Condition?((uint64_t)v87, (uint64_t)v88);
  if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)v88) == 1)
  {
    uint64_t v15 = v56;
    uint64_t v16 = (uint64_t)v9;
    uint64_t v54 = v2;
    unint64_t v55 = v14;
    Parser.lexGroupConditionalStart()((uint64_t)&v71);
    char v17 = v76;
    if (v76 == -1)
    {
      Parser.lexAbsentFunctionStart()((uint64_t)&v79);
      char v18 = v79;
      if (v79 == 2)
      {
        Parser.lexGroupStart()((uint64_t)&v79);
        char v19 = v84[0];
        if (v84[0] == 0xFF)
        {
          Parser.lexCustomCCStart()(&v79);
          char v20 = v79;
          if (v79 == 2)
          {
            Parser.lexAtom()(v16);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v10) == 1)
            {
              uint64_t result = outlined destroy of _ASTParent?(v16, &demangling cache variable for type metadata for AST.Atom?);
              unint64_t v22 = 0xF000000000000007;
            }
            else
            {
              uint64_t v43 = (uint64_t)v13;
              outlined init with take of AST.Atom.Kind(v16, (uint64_t)v13, type metadata accessor for AST.Atom);
              outlined init with copy of AST.Atom((uint64_t)v13, (uint64_t)v5, type metadata accessor for AST.Atom.Kind);
              if (swift_getEnumCaseMultiPayload() == 13)
              {
                char v44 = v5[16];
                uint64_t v45 = *((void *)v5 + 3);
                char v46 = v5[48];
                uint64_t v47 = *((void *)v5 + 7);
                long long v79 = *(_OWORD *)v5;
                LOBYTE(v80) = v44;
                *((void *)&v80 + 1) = v45;
                long long v81 = *((_OWORD *)v5 + 2);
                LOBYTE(v82) = v46;
                *((void *)&v82 + 1) = v47;
                Parser.applySyntaxOptions(of:isScoped:)(&v79);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                outlined destroy of AST.Atom((uint64_t)v5, type metadata accessor for AST.Atom.Kind);
              }
              uint64_t v48 = swift_allocBox();
              uint64_t result = outlined init with take of AST.Atom.Kind(v43, v49, type metadata accessor for AST.Atom);
              unint64_t v22 = v48 | 0x8000000000000000;
            }
          }
          else
          {
            uint64_t v40 = v80;
            uint64_t v41 = *((void *)&v79 + 1);
            uint64_t v42 = swift_allocObject();
            LOBYTE(v79) = v20 & 1;
            *((void *)&v79 + 1) = v41;
            *(void *)&long long v80 = v40;
            uint64_t result = Parser.parseCustomCharacterClass(_:)((unsigned __int8 *)&v79, (unsigned char *)(v42 + 16));
            unint64_t v22 = v42 | 0x9000000000000000;
          }
        }
        else
        {
          long long v53 = *(_OWORD *)&v84[8];
          long long v52 = v83;
          uint64_t v56 = *((void *)&v82 + 1);
          uint64_t v32 = v82;
          uint64_t v33 = *((void *)&v81 + 1);
          uint64_t v34 = v81;
          uint64_t v35 = *((void *)&v80 + 1);
          uint64_t v36 = v80;
          long long v51 = v80;
          uint64_t v37 = *((void *)&v79 + 1);
          uint64_t v38 = v79;
          long long v50 = v79;
          uint64_t v54 = swift_allocObject();
          *(void *)&long long v79 = v38;
          *((void *)&v79 + 1) = v37;
          *(void *)&long long v80 = v36;
          *((void *)&v80 + 1) = v35;
          *(void *)&long long v81 = v34;
          *((void *)&v81 + 1) = v33;
          *(void *)&long long v82 = v32;
          *((void *)&v82 + 1) = v56;
          long long v39 = v52;
          long long v83 = v52;
          v84[0] = v19;
          *(_OWORD *)&v84[8] = v53;
          Parser.parseGroupBody(start:_:)(v55, (uint64_t)&v79, v54 + 16);
          uint64_t result = outlined consume of Source.Located<AST.Group.Kind>?(v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v34, v33, v32, v56, v39, *((uint64_t *)&v39 + 1), v19);
          unint64_t v22 = v54 | 0x2000000000000000;
        }
      }
      else
      {
        uint64_t v29 = v80;
        uint64_t v30 = *((void *)&v79 + 1);
        uint64_t v31 = swift_allocObject();
        LOBYTE(v79) = v18 & 1;
        *((void *)&v79 + 1) = v30;
        *(void *)&long long v80 = v29;
        uint64_t result = Parser.parseAbsentFunctionBody(_:)((uint64_t)&v79, v31 + 16);
        unint64_t v22 = v31 | 0xA000000000000000;
      }
    }
    else
    {
      uint64_t v23 = *((void *)&v75 + 1);
      uint64_t v56 = *((void *)&v74 + 1);
      uint64_t v54 = v74;
      *((void *)&v52 + 1) = v75;
      long long v53 = v73;
      uint64_t v24 = *((void *)&v72 + 1);
      uint64_t v25 = v72;
      uint64_t v26 = *((void *)&v71 + 1);
      uint64_t v27 = v71;
      long long v58 = v71;
      long long v59 = v72;
      long long v60 = v73;
      long long v61 = v74;
      long long v62 = v75;
      LOBYTE(v63) = v76;
      *((void *)&v63 + 1) = v77;
      *(void *)&long long v64 = v78;
      Parser.parseGroupBody(start:_:)(v77, (uint64_t)&v58, (uint64_t)&v79);
      outlined consume of Source.Located<AST.Group.Kind>?(v27, v26, v25, v24, v53, *((uint64_t *)&v53 + 1), v54, v56, *((uint64_t *)&v52 + 1), v23, v17);
      v68[4] = v83;
      v68[5] = *(_OWORD *)v84;
      v68[6] = *(_OWORD *)&v84[16];
      long long v69 = v85;
      v68[0] = v79;
      v68[1] = v80;
      v68[2] = v81;
      v68[3] = v82;
      v70[6] = *(_OWORD *)&v84[16];
      v70[7] = v85;
      v70[4] = v83;
      v70[5] = *(_OWORD *)v84;
      v70[2] = v81;
      v70[3] = v82;
      v70[0] = v79;
      v70[1] = v80;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi2_((uint64_t)v70);
      long long v28 = v69;
      outlined init with take of AST.Conditional.Condition.Kind(v70, &v79);
      long long v86 = v28;
      long long v64 = *(_OWORD *)&v84[16];
      long long v65 = v85;
      long long v66 = v28;
      long long v60 = v81;
      long long v61 = v82;
      long long v62 = v83;
      long long v63 = *(_OWORD *)v84;
      long long v58 = v79;
      long long v59 = v80;
      Parser.parseConditionalBranches(start:_:)(v55, &v58, (unint64_t)&v67);
      uint64_t result = outlined release of AST.Group((uint64_t)v68);
      unint64_t v22 = v67;
    }
  }
  else
  {
    *(_OWORD *)&v84[16] = v88[6];
    long long v85 = v88[7];
    long long v86 = v88[8];
    long long v81 = v88[2];
    long long v82 = v88[3];
    long long v83 = v88[4];
    *(_OWORD *)uint64_t v84 = v88[5];
    long long v79 = v88[0];
    long long v80 = v88[1];
    Parser.parseConditionalBranches(start:_:)(v14, &v79, (unint64_t)&v58);
    uint64_t result = outlined release of AST.Conditional.Condition?((uint64_t)v87);
    unint64_t v22 = v58;
  }
  *uint64_t v57 = v22;
  return result;
}

void *Parser.parseConditionalBranches(start:_:)@<X0>(unint64_t a1@<X0>, long long *a2@<X1>, unint64_t a3@<X8>)
{
  void (*v39)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void v51[2];
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;

  unint64_t v5 = v3;
  long long v8 = a2[7];
  long long v58 = a2[6];
  long long v59 = v8;
  long long v60 = a2[8];
  long long v9 = a2[3];
  uint64_t v54 = a2[2];
  unint64_t v55 = v9;
  long long v10 = a2[5];
  uint64_t v56 = a2[4];
  uint64_t v57 = v10;
  long long v11 = a2[1];
  long long v52 = *a2;
  long long v53 = v11;
  Parser.parseNode()(&v47);
  uint64_t v12 = v47;
  unint64_t v13 = (unint64_t)v47 >> 60;
  char v46 = (void *)a3;
  if ((unint64_t)v47 >> 60)
  {
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = *((void *)v3 + 2);
    *(void *)(v14 + 16) = v17;
    *(void *)(v14 + 24) = v17;
    a3 = v14 | 0xB000000000000000;
  }
  else
  {
    char v18 = *(void **)(v47 + 24);
    if (!v18[2]) {
      goto LABEL_17;
    }
    char v19 = *(void **)(v47 + 16);
    unint64_t v20 = v19[2];
    if (!v20) {
      goto LABEL_18;
    }
    if (v20 == 1) {
      goto LABEL_19;
    }
    uint64_t v15 = v18[4];
    uint64_t v16 = v18[5];
    uint64_t v4 = v19[4];
    a3 = v19[5];
    if (v20 != 2)
    {
      uint64_t v42 = v18[5];
      uint64_t v43 = v18[4];
      char v44 = (unint64_t)v47 >> 60;
      uint64_t v45 = a1;
      v51[0] = v47;
      unint64_t v37 = v20;
      AST.Node._associatedValue.getter((uint64_t *)&v47);
      uint64_t v22 = v49;
      uint64_t v21 = v50;
      __swift_project_boxed_opaque_existential_1Tm(&v47, v49);
      long long v39 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 16);
      uint64_t v40 = v4;
      uint64_t v41 = a3;
      swift_retain();
      swift_retain();
      v39(v51, v22, v21);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v47);
      uint64_t v4 = v51[0];
      uint64_t v38 = v51[1];
      *(void *)&uint64_t v47 = 0;
      *((void *)&v47 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      *(void *)&uint64_t v47 = 0xD000000000000029;
      *((void *)&v47 + 1) = 0x800000020D9DFBA0;
      a3 = v37;
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      unint64_t v13 = *((void *)&v47 + 1);
      a1 = v47;
      uint64_t v3 = (char *)*((void *)v3 + 9);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
    swift_retain();
    swift_retain();
    swift_release();
    uint64_t v12 = v4;
  }
  while (1)
  {
    v28._uint64_t countAndFlagsBits = 41;
    v28._uint64_t object = (void *)0xE100000000000000;
    uint64_t v3 = v5;
    if (!Parser.tryEat(_:)(v28))
    {
      uint64_t v47 = xmmword_20D9D7520;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      LOBYTE(v50) = 3;
      uint64_t v3 = v5;
      Parser.errorAtCurrentPosition(_:)(&v47);
    }
    uint64_t v29 = swift_allocObject();
    unint64_t v30 = *((void *)v5 + 2);
    if (v30 >> 14 >= a1 >> 14) {
      break;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
LABEL_9:
    unint64_t v25 = *((void *)v3 + 2);
    unint64_t v24 = *((void *)v3 + 3);
    unint64_t v26 = v25 + 1;
    uint64_t v16 = v42;
    if (v25 >= v24 >> 1)
    {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v3);
      unint64_t v26 = v25 + 1;
      uint64_t v3 = v36;
    }
    *((void *)v3 + 2) = v26;
    uint64_t v27 = &v3[80 * v25];
    v27[32] = 1;
    *((void *)v27 + 5) = a1;
    *((void *)v27 + 6) = v13;
    *((void *)v27 + 7) = v4;
    *((void *)v27 + 8) = v38;
    *((void *)v27 + 9) = a3;
    *((void *)v27 + 10) = 0;
    *((void *)v27 + 11) = 0;
    *((void *)v27 + 12) = 0;
    v27[104] = 5;
    swift_release();
    *((void *)v5 + 9) = v3;
    unint64_t v13 = v44;
    a1 = v45;
    uint64_t v15 = v43;
    uint64_t v12 = v40;
    a3 = v41;
  }
  LOBYTE(v51[0]) = v13 != 0;
  *(void *)(v29 + 16) = a1;
  *(void *)(v29 + 24) = v30;
  long long v31 = v59;
  *(_OWORD *)(v29 + 128) = v58;
  *(_OWORD *)(v29 + 144) = v31;
  *(_OWORD *)(v29 + 160) = v60;
  long long v32 = v55;
  *(_OWORD *)(v29 + 64) = v54;
  *(_OWORD *)(v29 + 80) = v32;
  long long v33 = v57;
  *(_OWORD *)(v29 + 96) = v56;
  *(_OWORD *)(v29 + 112) = v33;
  long long v34 = v53;
  *(_OWORD *)(v29 + 32) = v52;
  *(_OWORD *)(v29 + 48) = v34;
  *(void *)(v29 + 176) = v12;
  *(void *)(v29 + 184) = v15;
  *(void *)(v29 + 192) = v16;
  *(unsigned char *)(v29 + 200) = v51[0];
  *(void *)(v29 + 208) = a3;
  char *v46 = v29 | 0x3000000000000000;
  return outlined retain of AST.Conditional.Condition(&v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
}

uint64_t Parser.applySyntaxOptions(of:isScoped:)(long long *a1)
{
  long long v2 = a1[1];
  long long v26 = *a1;
  long long v27 = v2;
  long long v3 = a1[3];
  long long v28 = a1[2];
  long long v29 = v3;
  uint64_t v25 = 128;
  v24[16] = 3;
  uint64_t result = mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(&v25, (uint64_t (*)(unsigned char *))closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)partial apply, (uint64_t)v24, (uint64_t)&v26, v1);
  if ((*(unsigned char *)(v1 + 56) & 0x40) != 0)
  {
    unint64_t v5 = (unsigned char *)(*((void *)&v29 + 1) + 32);
    uint64_t v6 = *(void *)(*((void *)&v29 + 1) + 16) + 1;
    while (--v6)
    {
      uint64_t v7 = v5 + 24;
      int v8 = *v5 & 0xFE;
      v5 += 24;
      if (v8 == 6)
      {
        uint64_t v9 = *((void *)v7 - 2);
        uint64_t v10 = *((void *)v7 - 1);
        uint64_t v11 = *(void *)(v1 + 72);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v12 = *(void *)(v11 + 16);
        unint64_t v13 = *(void *)(v11 + 24);
        unint64_t v14 = v12 + 1;
        if (v12 >= v13 >> 1)
        {
          unint64_t v23 = v12 + 1;
          unint64_t v20 = (char *)v11;
          unint64_t v21 = *(void *)(v11 + 16);
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v20);
          unint64_t v12 = v21;
          unint64_t v14 = v23;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v14;
        unint64_t v15 = v11 + 80 * v12;
        *(unsigned char *)(v15 + 32) = 1;
        *(void *)(v15 + 40) = 0xD000000000000036;
        *(void *)(v15 + 48) = 0x800000020D9DF7C0;
        *(void *)(v15 + 56) = v9;
        *(void *)(v15 + 64) = v10;
        uint64_t v16 = 13;
        goto LABEL_17;
      }
    }
    if (v27) {
      return result;
    }
    long long v22 = v26;
    uint64_t v11 = *(void *)(v1 + 72);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
      uint64_t v11 = result;
    }
    unint64_t v18 = *(void *)(v11 + 16);
    unint64_t v17 = *(void *)(v11 + 24);
    unint64_t v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v11);
      unint64_t v19 = v18 + 1;
      uint64_t v11 = result;
    }
    *(void *)(v11 + 16) = v19;
    unint64_t v15 = v11 + 80 * v18;
    *(unsigned char *)(v15 + 32) = 1;
    *(void *)(v15 + 40) = 0xD00000000000004BLL;
    *(void *)(v15 + 48) = 0x800000020D9DF770;
    *(_OWORD *)(v15 + 56) = v22;
    uint64_t v16 = 14;
LABEL_17:
    *(void *)(v15 + 72) = v16;
    *(void *)(v15 + 80) = 0;
    *(void *)(v15 + 88) = 0;
    *(void *)(v15 + 96) = 0;
    *(unsigned char *)(v15 + 104) = 36;
    *(void *)(v1 + 72) = v11;
  }
  else
  {
    uint64_t v25 = 3;
    return mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(&v25, (uint64_t (*)(unsigned char *))specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:), 0, (uint64_t)&v26, v1);
  }
  return result;
}

uint64_t mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(uint64_t *a1, uint64_t (*a2)(unsigned char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  outlined init with take of AST.Conditional.Condition?(a4, (uint64_t)v14);
  outlined init with take of AST.Conditional.Condition?((uint64_t)v14, (uint64_t)v15);
  if ((v15[16] & 1) == 0)
  {
    uint64_t v10 = *(void *)(a5 + 56);
    if ((v10 & v9) != 0) {
      *(void *)(a5 + 56) = v10 & ~v9;
    }
  }
  if (specialized Sequence.contains(where:)(a2, a3, *(void *)(a4 + 24)))
  {
    uint64_t v11 = *(void *)(a5 + 56);
    if ((v9 & ~v11) != 0) {
      *(void *)(a5 + 56) = v11 | v9;
    }
  }
  uint64_t result = specialized Sequence.contains(where:)(a2, a3, *(void *)(a4 + 56));
  if (result)
  {
    uint64_t v13 = *(void *)(a5 + 56);
    if ((v13 & v9) != 0) {
      *(void *)(a5 + 56) = v13 & ~v9;
    }
  }
  return result;
}

void static SyntaxOptions.extendedSyntax.getter(void *a1@<X8>)
{
  *a1 = 3;
}

BOOL specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:)(unsigned char *a1)
{
  return (*a1 & 0xFE) == 6;
}

uint64_t Parser.parseGroupBody(start:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v28)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v49;
  uint64_t v50;
  char v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Int v56;
  long long v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67[3];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  Swift::Int v75[2];
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;

  long long v66 = a1;
  uint64_t v12 = *((void *)v4 + 5);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    goto LABEL_21;
  }
  long long v3 = v4;
  Swift::Int v6 = *(void *)a2;
  Swift::Int v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v19 = *(void *)(a2 + 72);
  int v20 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v57 = *(_OWORD *)(a2 + 88);
  *((void *)v4 + 5) = v14;
  long long v63 = v16;
  long long v62 = v17;
  long long v60 = v18;
  long long v59 = v19;
  long long v58 = v20;
  if (v20 == 1)
  {
    if (!v7)
    {
LABEL_8:
      uint64_t v21 = *((void *)v4 + 7);
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
LABEL_7:
    specialized Set._Variant.insert(_:)(v75, v6, v7);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if (!v20)
  {
    outlined copy of AST.Group.Kind(v6, v7, v8, v9, v10, v15, v16, v17, v18, v19, 0);
    goto LABEL_7;
  }
  uint64_t v21 = *((void *)v4 + 7);
  if (v20 == 2)
  {
    v75[0] = v6;
    v75[1] = v7;
    long long v65 = v21;
    char v76 = v8 & 1;
    unint64_t v77 = v9;
    uint64_t v78 = v10;
    long long v79 = v15;
    long long v80 = v63 & 1;
    long long v81 = v62;
    v67[0] = 128;
    MEMORY[0x270FA5388](a1, a2);
    long long v51 = 3;
    mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(v67, (uint64_t (*)(unsigned char *))partial apply for closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:), (uint64_t)&v50, (uint64_t)v75, (uint64_t)v4);
    v67[0] = 3;
    mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(v67, (uint64_t (*)(unsigned char *))specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:), 0, (uint64_t)v75, (uint64_t)v4);
    uint64_t v21 = v65;
  }
LABEL_11:
  long long v65 = v21;
  BOOL v22 = (~(_BYTE)v21 & 3) == 0 && (~*((_DWORD *)v4 + 14) & 3) != 0;
  long long v61 = v15;
  Parser.parseNode()(v67);
  long long v64 = v67[0];
  v23._uint64_t countAndFlagsBits = 41;
  v23._uint64_t object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v23))
  {
    long long v71 = xmmword_20D9D7520;
    long long v72 = 0;
    long long v73 = 0;
    long long v74 = 3;
    Parser.errorAtCurrentPosition(_:)(&v71);
  }
  unint64_t v5 = *((void *)v4 + 2);
  unint64_t v24 = v66;
  if (v5 >> 14 < v66 >> 14) {
    goto LABEL_26;
  }
  if (!v22) {
    goto LABEL_24;
  }
  if ((v4[56] & 0x40) == 0) {
    goto LABEL_24;
  }
  long long v52 = *(void *)v4;
  uint64_t v70 = v64;
  AST.Node._associatedValue.getter(v67);
  uint64_t v56 = v7;
  unint64_t v55 = v8;
  uint64_t v25 = v68;
  uint64_t v26 = v69;
  __swift_project_boxed_opaque_existential_1Tm(v67, v68);
  uint64_t v54 = v9;
  long long v53 = v10;
  Swift::Int v27 = v6;
  long long v28 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v28(&v70, v25, v26);
  Swift::Int v6 = v27;
  uint64_t v10 = v53;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
  long long v29 = String.subscript.getter();
  long long v31 = v30;
  long long v33 = v32;
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = v31;
  Swift::Int v7 = v56;
  unint64_t v37 = v33;
  uint64_t v8 = v55;
  LOBYTE(v29) = specialized Sequence.contains(where:)(v29, v36, v37, v35);
  uint64_t v9 = v54;
  swift_bridgeObjectRelease();
  unint64_t v24 = v66;
  if ((v29 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v4 = (char *)*((void *)v3 + 9);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_27;
  }
LABEL_21:
  long long v39 = *((void *)v4 + 2);
  uint64_t v38 = *((void *)v4 + 3);
  uint64_t v40 = v39 + 1;
  unint64_t v24 = v66;
  if (v39 >= v38 >> 1)
  {
    long long v52 = v39 + 1;
    uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v40, 1, v4);
    unint64_t v24 = v66;
    uint64_t v40 = v52;
    uint64_t v4 = v49;
  }
  *((void *)v4 + 2) = v40;
  uint64_t v41 = &v4[80 * v39];
  v41[32] = 1;
  *((void *)v41 + 5) = 0xD000000000000053;
  *((void *)v41 + 6) = 0x800000020D9DFC60;
  *((void *)v41 + 7) = v24;
  *((void *)v41 + 8) = v5;
  *((void *)v41 + 9) = 4;
  *((void *)v41 + 10) = 0;
  *((void *)v41 + 11) = 0;
  *((void *)v41 + 12) = 0;
  v41[104] = 36;
  *((void *)v3 + 9) = v4;
LABEL_24:
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  uint64_t v42 = v61;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v42;
  uint64_t v43 = v63;
  char v44 = v62;
  *(void *)(a3 + 48) = v63;
  *(void *)(a3 + 56) = v44;
  uint64_t v45 = v60;
  char v46 = v59;
  *(void *)(a3 + 64) = v60;
  *(void *)(a3 + 72) = v46;
  uint64_t v47 = v58;
  *(unsigned char *)(a3 + 80) = v58;
  *(_OWORD *)(a3 + 88) = v57;
  *(void *)(a3 + 104) = v64;
  *(void *)(a3 + 112) = v24;
  *(void *)(a3 + 120) = v5;
  *((void *)v3 + 7) = v65;
  return outlined copy of AST.Group.Kind(v6, v7, v8, v9, v10, v42, v43, v44, v45, v46, v47);
}

uint64_t Parser.parseAbsentFunctionBody(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v22)(void *__return_ptr, uint64_t, uint64_t);
  Swift::String v23;
  Swift::String v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  Swift::String v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  long long v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void v44[2];

  uint64_t v6 = v2;
  long long v39 = *(_OWORD *)(a1 + 8);
  if (*(unsigned char *)a1 == 1)
  {
    Parser.parseNode()(&v40);
    uint64_t v8 = 0;
    uint64_t v4 = 0;
    uint64_t i = 0;
    uint64_t v5 = v40;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = String.subscript.getter();
  uint64_t v8 = v11;
  if ((v10 ^ v12) >> 14)
  {
    uint64_t v3 = Substring.subscript.getter();
    uint64_t v13 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0;
    uint64_t v13 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_12;
  }
  if (v3 != 41 || v13 != 0xE100000000000000)
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v16 = (char *)v6;
    Parser.parseNode()(&v40);
    if ((unint64_t)v40 >> 60)
    {
      uint64_t v8 = 0;
      uint64_t v4 = 0;
      uint64_t i = 4;
      uint64_t v5 = v40;
    }
    else
    {
      uint64_t v17 = *(void **)(v40 + 16);
      unint64_t v18 = v17[2];
      if (!v18) {
        goto LABEL_29;
      }
      uint64_t v19 = *(void **)(v40 + 24);
      if (!v19[2]) {
        goto LABEL_30;
      }
      if (v18 < 2) {
        goto LABEL_31;
      }
      uint64_t v8 = v19[4];
      uint64_t v4 = v19[5];
      uint64_t v5 = v17[4];
      uint64_t v20 = v17[5];
      if (v18 != 2)
      {
        v44[0] = v40;
        uint64_t v38 = v18;
        AST.Node._associatedValue.getter((uint64_t *)&v40);
        uint64_t v21 = v43;
        uint64_t v36 = v42;
        long long v33 = v43;
        __swift_project_boxed_opaque_existential_1Tm(&v40, v42);
        BOOL v22 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 16);
        unint64_t v37 = v20;
        swift_retain();
        swift_retain();
        v22(v44, v36, v33);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v40);
        long long v34 = v44[1];
        uint64_t v35 = v44[0];
        *(void *)&uint64_t v40 = 0;
        *((void *)&v40 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v23._uint64_t object = (void *)0x800000020D9DFB40;
        v23._uint64_t countAndFlagsBits = 0xD000000000000032;
        String.append(_:)(v23);
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        uint64_t v3 = *((void *)&v40 + 1);
        long long v32 = v40;
        uint64_t v16 = *(char **)(v6 + 72);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_21;
        }
        goto LABEL_32;
      }
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t i = v20 | 2;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v5 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  for (uint64_t i = 6; ; uint64_t i = v37 | 2)
  {
LABEL_24:
    v29._uint64_t countAndFlagsBits = 41;
    v29._uint64_t object = (void *)0xE100000000000000;
    uint64_t v16 = (char *)v6;
    uint64_t result = Parser.tryEat(_:)(v29);
    if ((result & 1) == 0)
    {
      uint64_t v40 = xmmword_20D9D7520;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      LOBYTE(v43) = 3;
      uint64_t v16 = (char *)v6;
      uint64_t result = Parser.errorAtCurrentPosition(_:)(&v40);
    }
    long long v31 = *(void *)(v6 + 16);
    if (v31 >> 14 >= (unint64_t)v39 >> 14) {
      break;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
LABEL_21:
    Swift::Int v27 = *((void *)v16 + 2);
    uint64_t v26 = *((void *)v16 + 3);
    if (v27 >= v26 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v27 + 1;
    long long v28 = &v16[80 * v27];
    v28[32] = 1;
    *((void *)v28 + 5) = v32;
    *((void *)v28 + 6) = v3;
    *((void *)v28 + 7) = v35;
    *((void *)v28 + 8) = v34;
    *((void *)v28 + 9) = v38;
    *((void *)v28 + 10) = 0;
    *((void *)v28 + 11) = 0;
    *((void *)v28 + 12) = 0;
    v28[104] = 7;
    swift_release();
    *(void *)(v6 + 72) = v16;
  }
  *(_OWORD *)a2 = v39;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = i;
  *(void *)(a2 + 48) = v39;
  *(void *)(a2 + 56) = v31;
  return result;
}

uint64_t Parser.parseCustomCharacterClass(_:)@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  long long v86 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  uint64_t v6 = MEMORY[0x270FA5388](v4 - 8, v5);
  unint64_t v8 = (unint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v9);
  uint64_t v11 = (char *)&v83 - v10;
  uint64_t v12 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  uint64_t v96 = (uint64_t)&v83 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  unint64_t v24 = (char *)&v83 - v23;
  uint64_t v26 = MEMORY[0x270FA5388](v22, v25);
  uint64_t v99 = (uint64_t)&v83 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  long long v31 = (char *)&v83 - v30;
  uint64_t v33 = MEMORY[0x270FA5388](v29, v32);
  unint64_t v92 = (char *)&v83 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33, v35);
  uint64_t v38 = (char *)&v83 - v37;
  MEMORY[0x270FA5388](v36, v39);
  uint64_t v97 = (uint64_t)&v83 - v40;
  int v84 = *a1;
  unint64_t v41 = *((void *)a1 + 1);
  uint64_t v88 = *((void *)a1 + 2);
  unint64_t v89 = v41;
  int v85 = *(unsigned __int8 *)(v2 + 32);
  *(unsigned char *)(v2 + 32) = 1;
  uint64_t v42 = MEMORY[0x263F8EE78];
  into._rawValue = (void *)MEMORY[0x263F8EE78];
  Parser.parseCCCMember()((uint64_t)v11);
  unint64_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v101 = v13 + 48;
  if (v100(v11, 1, v12) != 1)
  {
    char v94 = v11;
    unint64_t v95 = v31;
    uint64_t v93 = v38;
    do
    {
      uint64_t v43 = (uint64_t)v11;
      uint64_t v44 = v97;
      outlined init with take of AST.Atom.Kind(v43, v97, type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with take of AST.Atom.Kind(v44, (uint64_t)v38, type metadata accessor for AST.CustomCharacterClass.Member);
      rawValue = into._rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
      }
      unint64_t v47 = rawValue[2];
      unint64_t v46 = rawValue[3];
      if (v47 >= v46 >> 1) {
        rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, rawValue);
      }
      rawValue[2] = v47 + 1;
      uint64_t v38 = v93;
      outlined init with take of AST.Atom.Kind((uint64_t)v93, (uint64_t)rawValue+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v47, type metadata accessor for AST.CustomCharacterClass.Member);
      into._rawValue = rawValue;
      Parser.parsePotentialCCRange(into:)(&into);
      uint64_t v11 = v94;
      Parser.parseCCCMember()((uint64_t)v94);
      int v48 = v100(v11, 1, v12);
      long long v31 = v95;
    }
    while (v48 != 1);
    uint64_t v42 = (uint64_t)into._rawValue;
  }
  outlined destroy of _ASTParent?((uint64_t)v11, &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  uint64_t v49 = *(void *)(v42 + 16);
  swift_bridgeObjectRetain();
  uint64_t v97 = v49;
  if (v49)
  {
    unint64_t v50 = 0;
    uint64_t v51 = (uint64_t)v92;
    do
    {
      if (v50 >= *(void *)(v42 + 16)) {
        goto LABEL_45;
      }
      outlined init with copy of AST.Atom(v42+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v50, v51, type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with take of AST.Atom.Kind(v51, (uint64_t)v31, type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom((uint64_t)v31, type metadata accessor for AST.CustomCharacterClass.Member);
        goto LABEL_19;
      }
      ++v50;
      outlined destroy of AST.Atom((uint64_t)v31, type metadata accessor for AST.CustomCharacterClass.Member);
    }
    while (v97 != v50);
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(v2 + 72);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_47;
  }
  while (1)
  {
    unint64_t v53 = *(void *)(v42 + 16);
    unint64_t v52 = *(void *)(v42 + 24);
    if (v53 >= v52 >> 1) {
      uint64_t v42 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, (char *)v42);
    }
    *(void *)(v42 + 16) = v53 + 1;
    uint64_t v54 = v42 + 80 * v53;
    *(unsigned char *)(v54 + 32) = 1;
    *(void *)(v54 + 40) = 0xD000000000000027;
    *(void *)(v54 + 48) = 0x800000020D9DF9C0;
    uint64_t v55 = v88;
    *(void *)(v54 + 56) = v89;
    *(void *)(v54 + 64) = v55;
    *(void *)(v54 + 72) = 7;
    *(void *)(v54 + 80) = 0;
    *(void *)(v54 + 88) = 0;
    *(void *)(v54 + 96) = 0;
    *(unsigned char *)(v54 + 104) = 36;
    *(void *)(v2 + 72) = v42;
LABEL_19:
    Parser.lexCustomCCBinOp()(v103);
    rawValue_low = (char *)LOBYTE(v103[0]._rawValue);
    if (LOBYTE(v103[0]._rawValue) == 3) {
      break;
    }
    long long v65 = (char *)v103[1]._rawValue;
    uint64_t v64 = v104;
    unint64_t v87 = 0x800000020D9DF9C0;
    long long v90 = xmmword_20D9D7460;
    unint64_t v91 = v8;
    unint64_t v92 = v17;
    uint64_t v98 = v12;
    while (1)
    {
      uint64_t v93 = v65;
      char v94 = (char *)v64;
      unint64_t v95 = rawValue_low;
      long long v69 = (void *)MEMORY[0x263F8EE78];
      v103[0]._rawValue = (void *)MEMORY[0x263F8EE78];
      Parser.parseCCCMember()(v8);
      if (v100((char *)v8, 1, v12) != 1)
      {
        do
        {
          uint64_t v70 = v99;
          outlined init with take of AST.Atom.Kind(v8, v99, type metadata accessor for AST.CustomCharacterClass.Member);
          outlined init with take of AST.Atom.Kind(v70, (uint64_t)v24, type metadata accessor for AST.CustomCharacterClass.Member);
          long long v71 = v103[0]._rawValue;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v71 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
          }
          unint64_t v73 = v71[2];
          unint64_t v72 = v71[3];
          if (v73 >= v72 >> 1) {
            long long v71 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1, v71);
          }
          v71[2] = v73 + 1;
          outlined init with take of AST.Atom.Kind((uint64_t)v24, (uint64_t)v71+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v73, type metadata accessor for AST.CustomCharacterClass.Member);
          v103[0]._rawValue = v71;
          Parser.parsePotentialCCRange(into:)(v103);
          Parser.parseCCCMember()(v8);
        }
        while (v100((char *)v8, 1, v12) != 1);
        long long v69 = v103[0]._rawValue;
      }
      outlined destroy of _ASTParent?(v8, &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
      uint64_t v42 = v69[2];
      swift_bridgeObjectRetain();
      uint64_t v97 = v42;
      if (v42) {
        break;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t v78 = *(char **)(v2 + 72);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v78 + 2) + 1, 1, v78);
      }
      unint64_t v79 = v89;
      unint64_t v81 = *((void *)v78 + 2);
      unint64_t v80 = *((void *)v78 + 3);
      if (v81 >= v80 >> 1) {
        uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v78);
      }
      unint64_t v8 = v91;
      *((void *)v78 + 2) = v81 + 1;
      long long v82 = &v78[80 * v81];
      v82[32] = 1;
      *((void *)v82 + 5) = 0xD000000000000027;
      *((void *)v82 + 6) = v87;
      *((void *)v82 + 7) = v79;
      *((void *)v82 + 8) = v88;
      *((void *)v82 + 9) = 7;
      *((void *)v82 + 10) = 0;
      *((void *)v82 + 11) = 0;
      *((void *)v82 + 12) = 0;
      v82[104] = 36;
      *(void *)(v2 + 72) = v78;
      unint64_t v75 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
LABEL_26:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = v90;
      unint64_t v66 = v42 + v75;
      unint64_t v67 = v103[0]._rawValue;
      *(Swift::OpaquePointer *)unint64_t v66 = into;
      *(unsigned char *)(v66 + 8) = (_BYTE)v95;
      uint64_t v68 = (uint64_t)v94;
      *(void *)(v66 + 16) = v93;
      *(void *)(v66 + 24) = v68;
      *(void *)(v66 + 32) = v67;
      uint64_t v12 = v98;
      swift_storeEnumTagMultiPayload();
      into._rawValue = (void *)v42;
      Parser.lexCustomCCBinOp()(v103);
      rawValue_low = (char *)LOBYTE(v103[0]._rawValue);
      long long v65 = (char *)v103[1]._rawValue;
      uint64_t v64 = v104;
      uint64_t v17 = v92;
      if (LOBYTE(v103[0]._rawValue) == 3) {
        goto LABEL_20;
      }
    }
    unint64_t v8 = 0;
    while (v8 < v69[2])
    {
      long long v74 = v24;
      uint64_t v42 = *(unsigned __int8 *)(v13 + 80);
      unint64_t v75 = (v42 + 32) & ~v42;
      uint64_t v76 = v13;
      uint64_t v12 = *(void *)(v13 + 72);
      uint64_t v77 = v96;
      outlined init with copy of AST.Atom((uint64_t)v69 + v75 + v12 * v8, v96, type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with take of AST.Atom.Kind(v77, (uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom((uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
        unint64_t v8 = v91;
        uint64_t v13 = v76;
        unint64_t v24 = v74;
        goto LABEL_26;
      }
      ++v8;
      outlined destroy of AST.Atom((uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
      uint64_t v13 = v76;
      unint64_t v24 = v74;
      if (v97 == v8) {
        goto LABEL_39;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t v42 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1, (char *)v42);
  }
LABEL_20:
  v57._uint64_t countAndFlagsBits = 93;
  v57._uint64_t object = (void *)0xE100000000000000;
  uint64_t result = Parser.tryEat(_:)(v57);
  if ((result & 1) == 0)
  {
    *(_OWORD *)&v103[0]._rawValue = xmmword_20D9D7580;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    char v106 = 3;
    uint64_t result = Parser.errorAtCurrentPosition(_:)((long long *)v103);
  }
  unint64_t v59 = *(void *)(v2 + 16);
  unint64_t v60 = v89;
  if (v59 >> 14 < v89 >> 14) {
    goto LABEL_46;
  }
  long long v61 = into._rawValue;
  long long v62 = v86;
  *long long v86 = v84;
  uint64_t v63 = v88;
  v62[1] = v60;
  v62[2] = v63;
  v62[3] = v61;
  v62[4] = v60;
  v62[5] = v59;
  *(unsigned char *)(v2 + 32) = v85;
  return result;
}

uint64_t Parser.parseCCCMember()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  MEMORY[0x270FA5388](v4 - 8, v5);
  uint64_t v49 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for AST.Atom(0);
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  MEMORY[0x270FA5388](v7, v8);
  unint64_t v46 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *v1;
  uint64_t v11 = v2[1];
  uint64_t v12 = v2[2];
  uint64_t v13 = v2[3];
  swift_bridgeObjectRetain();
  uint64_t v14 = String.subscript.getter();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 ^ v16) < 0x4000) {
    goto LABEL_14;
  }
  uint64_t v45 = a1;
  int v44 = *((unsigned __int8 *)v2 + 32);
  uint64_t v17 = v2[5];
  uint64_t v18 = v2[6];
  uint64_t v42 = v2[7];
  uint64_t v43 = v17;
  int v41 = *((unsigned __int8 *)v2 + 64);
  uint64_t v19 = v2[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = String.subscript.getter();
  if ((v20 ^ v21) >> 14)
  {
    uint64_t v22 = Substring.subscript.getter();
    uint64_t v23 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v45;
  if (v23)
  {
    if (v22 == 93 && v23 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_14;
    }
  }
  uint64_t v52 = v10;
  *(void *)unint64_t v53 = v11;
  *(void *)&v53[8] = v12;
  *(void *)&v53[16] = v13;
  LOBYTE(v54) = v44;
  *((void *)&v54 + 1) = v43;
  uint64_t v55 = v18;
  uint64_t v56 = v42;
  char v57 = v41;
  uint64_t v58 = v19;
  Parser.peekCCBinOp()();
  if (v50[0] == 3)
  {
    Parser.lexCustomCCStart()(&v52);
    if (v52 == 2)
    {
      Parser.lexQuote()((void *(*)(uint64_t *__return_ptr, uint64_t))closure #1 in Parser.lexQuote(), &v52);
      uint64_t v26 = *(void *)v53;
      if (*(void *)v53
        || (Parser.lexQuote()((void *(*)(uint64_t *__return_ptr, uint64_t))closure #1 in Parser.lexComment(), &v52), (uint64_t v26 = *(void *)v53) != 0)|| (v37 = (uint64_t)v49, (v2[7] & 1) != 0)&& (specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v2, (uint64_t (*)(uint64_t, void, void *))specialized Source.peekPrefix(maxLength:_:), &v52), (uint64_t v26 = *(void *)v53) != 0))
      {
        long long v35 = *(_OWORD *)&v53[8];
        *(void *)a1 = v52;
        *(void *)(a1 + 8) = v26;
        *(_OWORD *)(a1 + 16) = v35;
        uint64_t v36 = type metadata accessor for AST.CustomCharacterClass.Member(0);
        swift_storeEnumTagMultiPayload();
        uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56);
        uint64_t v30 = a1;
        uint64_t v31 = 0;
        uint64_t v29 = v36;
        goto LABEL_15;
      }
      Parser.lexAtom()(v37);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v37, 1, v48) == 1)
      {
        outlined destroy of _ASTParent?(v37, &demangling cache variable for type metadata for AST.Atom?);
        uint64_t v38 = type metadata accessor for AST.CustomCharacterClass.Member(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(a1, 1, 1, v38);
      }
      uint64_t v39 = v46;
      outlined init with take of AST.Atom.Kind(v37, (uint64_t)v46, type metadata accessor for AST.Atom);
      outlined init with take of AST.Atom.Kind((uint64_t)v39, a1, type metadata accessor for AST.Atom);
      uint64_t v34 = type metadata accessor for AST.CustomCharacterClass.Member(0);
    }
    else
    {
      v50[0] = v52 & 1;
      long long v51 = *(_OWORD *)v53;
      Parser.parseCustomCharacterClass(_:)(&v52, v50);
      uint64_t v33 = *(void *)&v53[16];
      *(unsigned char *)a1 = v52;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v53;
      *(void *)(a1 + 24) = v33;
      *(_OWORD *)(a1 + 32) = v54;
      uint64_t v34 = type metadata accessor for AST.CustomCharacterClass.Member(0);
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a1, 0, 1, v34);
  }
LABEL_14:
  uint64_t v27 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  uint64_t v29 = v27;
  uint64_t v30 = a1;
  uint64_t v31 = 1;
LABEL_15:

  return v28(v30, v31, 1, v29);
}

Swift::Void __swiftcall Parser.parsePotentialCCRange(into:)(Swift::OpaquePointer *into)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  uint64_t v6 = MEMORY[0x270FA5388](v4 - 8, v5);
  uint64_t v8 = (char *)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v9);
  uint64_t v196 = (uint64_t)&v182 - v10;
  uint64_t v11 = type metadata accessor for AST.Atom(0);
  uint64_t v197 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  unint64_t v15 = (char *)&v182 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v16);
  uint64_t v195 = (uint64_t)&v182 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  MEMORY[0x270FA5388](v18 - 8, v19);
  uint64_t v199 = (uint64_t)&v182 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v212 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v21 = *(void *)(v212 - 8);
  MEMORY[0x270FA5388](v212, v22);
  BOOL v211 = (char *)&v182 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v26 = MEMORY[0x270FA5388](*(void *)(v24 - 8), v25);
  uint64_t v28 = MEMORY[0x270FA5388](v26, v27);
  uint64_t v194 = (Swift::OpaquePointer *)((char *)&v182 - v29);
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  char v198 = (char *)&v182 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31, v33);
  uint64_t v36 = MEMORY[0x270FA5388](v34, v35);
  uint64_t v38 = MEMORY[0x270FA5388](v36, v37);
  unint64_t v208 = (uint64_t *)((char *)&v182 - v39);
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v43 = MEMORY[0x270FA5388](v41, (char *)&v182 - v42);
  uint64_t v45 = (uint64_t *)((char *)&v182 - v44);
  uint64_t v47 = MEMORY[0x270FA5388](v43, v46);
  uint64_t v49 = (char *)&v182 - v48;
  uint64_t v51 = MEMORY[0x270FA5388](v47, v50);
  char v57 = (char *)&v182 - v53;
  rawValue = into->_rawValue;
  uint64_t v59 = *((void *)into->_rawValue + 2);
  if (!v59) {
    return;
  }
  uint64_t v193 = v52;
  uint64_t v191 = v56;
  uint64_t v189 = v55;
  uint64_t v192 = v11;
  long long v188 = v8;
  long long v187 = v15;
  uint64_t v186 = v54;
  int64_t v60 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  uint64_t v190 = v51;
  unint64_t v61 = *(void *)(v51 + 72);
  outlined init with copy of AST.Atom((uint64_t)rawValue + v60 + v61 * (v59 - 1), (uint64_t)&v182 - v53, type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom((uint64_t)v57, (uint64_t)v49, type metadata accessor for AST.CustomCharacterClass.Member);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    outlined destroy of AST.Atom((uint64_t)v57, type metadata accessor for AST.CustomCharacterClass.Member);
    uint64_t v62 = (uint64_t)v49;
    goto LABEL_44;
  }
  long long v185 = v57;
  outlined destroy of AST.Atom((uint64_t)v49, type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t v184 = *((void *)into->_rawValue + 2);
  uint64_t v209 = v2;
  char v210 = (char *)(v21 + 8);
  BOOL v203 = into;
  uint64_t v206 = v24;
  int64_t v204 = v60;
  unint64_t v205 = v61;
  unint64_t v200 = v45;
  while (1)
  {
    unint64_t v63 = *(void *)(v2 + 16);
    closure #1 in Parser.lexComment()(v2, &v214);
    uint64_t v64 = v215;
    if (!v215) {
      break;
    }
    unint64_t v65 = *(void *)(v2 + 16);
    if (v65 >> 14 < v63 >> 14)
    {
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    uint64_t v66 = v214;
LABEL_36:
    *uint64_t v45 = v66;
    v45[1] = v64;
    v45[2] = v63;
    v45[3] = v65;
    swift_storeEnumTagMultiPayload();
    long long v90 = into->_rawValue;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v90 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
    }
    unint64_t v92 = v90[2];
    unint64_t v91 = v90[3];
    if (v92 >= v91 >> 1) {
      long long v90 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1, v90);
    }
    v90[2] = v92 + 1;
    outlined init with take of AST.Atom.Kind((uint64_t)v45, (uint64_t)v90 + v60 + v92 * v61, type metadata accessor for AST.CustomCharacterClass.Member);
    into->_rawValue = v90;
  }
  if ((*(unsigned char *)(v2 + 56) & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t v61 = *(void *)(v2 + 8);
  uint64_t v24 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  unint64_t v67 = String.subscript.getter();
  Swift::OpaquePointer into = v68;
  unint64_t v63 = v69;
  swift_bridgeObjectRelease();
  if ((unint64_t)into >> 14 < v67 >> 14) {
    goto LABEL_127;
  }
  unint64_t v207 = v24;
  unint64_t v70 = Substring.subscript.getter();
  unint64_t v72 = v71;
  Swift::OpaquePointer into = v73;
  swift_bridgeObjectRelease();
  int64_t v60 = (unint64_t)v72 >> 14;
  if (v70 >> 14 == (unint64_t)v72 >> 14) {
    goto LABEL_29;
  }
  unint64_t v61 = v70;
  unint64_t v202 = v70 >> 14;
  unint64_t v74 = v70 >> 14;
  do
  {
    uint64_t v75 = Substring.subscript.getter();
    if ((v76 & 0x2000000000000000) != 0) {
      uint64_t v77 = HIBYTE(v76) & 0xF;
    }
    else {
      uint64_t v77 = v75 & 0xFFFFFFFFFFFFLL;
    }
    if (!v77)
    {
      __break(1u);
LABEL_114:
      unint64_t v61 = v205;
LABEL_115:
      swift_unknownObjectRelease();
      unint64_t v158 = v63;
      uint64_t v159 = v203;
      specialized RangeReplaceableCollection<>.removeLast(_:)(v158);
      uint64_t v160 = v186;
      outlined init with take of AST.Atom.Kind(v195, v186, type metadata accessor for AST.Atom);
      uint64_t v161 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
      outlined init with take of AST.Atom.Kind((uint64_t)v187, v160 + v161[6], type metadata accessor for AST.Atom);
      uint64_t v162 = (uint64_t **)(v160 + v161[5]);
      unint64_t v163 = (uint64_t *)v183;
      *uint64_t v162 = v200;
      v162[1] = v163;
      *(void *)(v160 + v161[7]) = v72;
      swift_storeEnumTagMultiPayload();
      int v164 = v159->_rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v164 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1, v164);
      }
      uint64_t v165 = v209;
      int64_t v166 = v204;
      unint64_t v168 = v164[2];
      unint64_t v167 = v164[3];
      if (v168 >= v167 >> 1) {
        int v164 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v167 > 1, v168 + 1, 1, v164);
      }
      v164[2] = v168 + 1;
      outlined init with take of AST.Atom.Kind(v186, (uint64_t)v164 + v166 + v168 * v61, type metadata accessor for AST.CustomCharacterClass.Member);
      v159->_rawValue = v164;
      uint64_t v169 = *(void *)(v165 + 8);
      char v170 = *(unsigned char *)(v165 + 32);
      uint64_t v171 = *(void *)(v165 + 40);
      uint64_t v172 = *(void *)(v165 + 48);
      uint64_t v173 = *(void *)(v165 + 56);
      char v174 = *(unsigned char *)(v165 + 64);
      unint64_t v175 = (char **)(v165 + 72);
      uint64_t v176 = *(void *)(v165 + 72);
      uint64_t v214 = *(void *)v165;
      uint64_t v215 = v169;
      long long v216 = *(_OWORD *)(v165 + 16);
      char v217 = v170;
      uint64_t v218 = v171;
      uint64_t v219 = v172;
      uint64_t v220 = v173;
      char v221 = v174;
      uint64_t v222 = v176;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in Parser.canLexDotNetCharClassSubtraction()((uint64_t)&v214, (unint64_t *)&v223);
      uint64_t v177 = v222;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v213 = v177;
      Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v213);
      swift_bridgeObjectRelease();
      if ((v224 & 1) == 0)
      {
        long long v212 = v223;
        uint64_t v178 = *v175;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v178 + 2) + 1, 1, v178);
        }
        unint64_t v180 = *((void *)v178 + 2);
        unint64_t v179 = *((void *)v178 + 3);
        if (v180 >= v179 >> 1) {
          uint64_t v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v179 > 1), v180 + 1, 1, v178);
        }
        *((void *)v178 + 2) = v180 + 1;
        long long v181 = &v178[80 * v180];
        v181[32] = 1;
        *((void *)v181 + 5) = 0xD000000000000035;
        *((void *)v181 + 6) = 0x800000020D9DF950;
        *(_OWORD *)(v181 + 56) = v212;
        *((void *)v181 + 9) = 17;
        *((void *)v181 + 10) = 0;
        *((void *)v181 + 11) = 0;
        *((void *)v181 + 12) = 0;
        v181[104] = 36;
        *unint64_t v175 = v178;
      }
      return;
    }
    if ((v76 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v76 & 0x2000000000000000) != 0)
      {
        uint64_t v214 = v75;
        uint64_t v215 = v76 & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((v75 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    unint64_t v63 = (unint64_t)v211;
    Unicode.Scalar.properties.getter();
    uint64_t v24 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, void))v210)(v63, v212);
    if ((v24 & 1) == 0) {
      goto LABEL_27;
    }
    unint64_t v61 = Substring.index(after:)();
    unint64_t v74 = v61 >> 14;
  }
  while (v61 >> 14 != v60);
  unint64_t v74 = (unint64_t)v72 >> 14;
LABEL_27:
  BOOL v78 = v74 >= v202;
  uint64_t v2 = v209;
  if (!v78)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
LABEL_29:
  uint64_t v79 = Substring.subscript.getter();
  unint64_t v81 = v80;
  Swift::OpaquePointer into = v82;
  unint64_t v63 = v83;
  swift_bridgeObjectRelease();
  if ((v79 ^ v81) < 0x4000)
  {
    swift_bridgeObjectRelease();
    Swift::OpaquePointer into = v203;
    uint64_t v24 = v206;
    int64_t v60 = v204;
    unint64_t v61 = v205;
LABEL_42:
    Parser.lexCustomCharacterClassRangeOperator()((uint64_t)&v214);
    if ((v216 & 1) == 0)
    {
      uint64_t v93 = (uint64_t *)v214;
      uint64_t v94 = v215;
      unint64_t v95 = v193;
      *uint64_t v193 = 45;
      v95[1] = 0xE100000000000000;
      type metadata accessor for AST.Atom.Kind(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v96 = (uint64_t **)((char *)v95 + *(int *)(v192 + 20));
      *uint64_t v96 = v93;
      v96[1] = (uint64_t *)v94;
      swift_storeEnumTagMultiPayload();
      unint64_t v63 = (unint64_t)into->_rawValue;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v200 = v93;
      uint64_t v183 = v94;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_137;
      }
      goto LABEL_47;
    }
    uint64_t v62 = (uint64_t)v185;
LABEL_44:
    outlined destroy of AST.Atom(v62, type metadata accessor for AST.CustomCharacterClass.Member);
    return;
  }
  if (Substring.distance(from:to:)() < 1) {
    goto LABEL_34;
  }
  unint64_t v61 = *(void *)(v209 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  unint64_t v202 = v84;
  uint64_t v201 = v85;
  uint64_t v24 = v86;
  uint64_t v2 = v209;
  swift_bridgeObjectRelease();
  unint64_t v87 = Substring.index(_:offsetBy:limitedBy:)();
  int64_t v60 = v88;
  swift_bridgeObjectRelease();
  if (v60)
  {
LABEL_34:
    uint64_t v66 = MEMORY[0x210561700](v79, v81, into, v63);
    uint64_t v64 = v89;
    swift_bridgeObjectRelease();
    unint64_t v65 = *(void *)(v2 + 16);
    unint64_t v63 = v207;
    unint64_t v61 = v205;
    if (v65 >> 14 < v207 >> 14)
    {
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    Swift::OpaquePointer into = v203;
    uint64_t v24 = v206;
    int64_t v60 = v204;
    uint64_t v45 = v200;
    if (!v64) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }
  if (v61 >> 14 >= v87 >> 14)
  {
    *(void *)(v2 + 16) = v87;
    *(void *)(v2 + 24) = v61;
    goto LABEL_34;
  }
LABEL_134:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, (void *)v63);
LABEL_47:
    unint64_t v99 = *(void *)(v63 + 16);
    unint64_t v98 = *(void *)(v63 + 24);
    if (v99 >= v98 >> 1) {
      unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1, (void *)v63);
    }
    *(void *)(v63 + 16) = v99 + 1;
    uint64_t v100 = v63 + v60 + v99 * v61;
    uint64_t v101 = (uint64_t)v193;
    while (2)
    {
      outlined init with take of AST.Atom.Kind(v101, v100, type metadata accessor for AST.CustomCharacterClass.Member);
      into->_rawValue = (void *)v63;
      unint64_t v63 = *(void *)(v2 + 16);
      closure #1 in Parser.lexComment()(v2, &v214);
      uint64_t v102 = v215;
      if (v215)
      {
        unint64_t v103 = *(void *)(v2 + 16);
        if (v103 >> 14 < v63 >> 14) {
          goto LABEL_130;
        }
        uint64_t v104 = v214;
LABEL_81:
        uint64_t v125 = v208;
        *unint64_t v208 = v104;
        v125[1] = v102;
        v125[2] = v63;
        v125[3] = v103;
        swift_storeEnumTagMultiPayload();
        unint64_t v63 = (unint64_t)into->_rawValue;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, (void *)v63);
        }
        unint64_t v127 = *(void *)(v63 + 16);
        unint64_t v126 = *(void *)(v63 + 24);
        if (v127 >= v126 >> 1) {
          unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v126 > 1, v127 + 1, 1, (void *)v63);
        }
        *(void *)(v63 + 16) = v127 + 1;
        uint64_t v100 = v63 + v60 + v127 * v61;
        uint64_t v101 = (uint64_t)v208;
        continue;
      }
      break;
    }
    if ((*(unsigned char *)(v2 + 56) & 1) == 0) {
      goto LABEL_87;
    }
    int64_t v60 = *(void *)(v2 + 8);
    uint64_t v24 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain();
    unint64_t v105 = String.subscript.getter();
    Swift::OpaquePointer into = v106;
    unint64_t v63 = v107;
    swift_bridgeObjectRelease();
    if ((unint64_t)into >> 14 < v105 >> 14) {
      goto LABEL_131;
    }
    unint64_t v207 = v24;
    unint64_t v108 = Substring.subscript.getter();
    Swift::OpaquePointer into = v109;
    unint64_t v61 = v110;
    swift_bridgeObjectRelease();
    int64_t v60 = (unint64_t)into >> 14;
    if (v108 >> 14 != (unint64_t)into >> 14)
    {
      unint64_t v202 = v108 >> 14;
      uint64_t v2 = v108 >> 14;
      while (1)
      {
        uint64_t v111 = Substring.subscript.getter();
        if ((v112 & 0x2000000000000000) != 0) {
          uint64_t v113 = HIBYTE(v112) & 0xF;
        }
        else {
          uint64_t v113 = v111 & 0xFFFFFFFFFFFFLL;
        }
        if (!v113)
        {
          __break(1u);
          goto LABEL_126;
        }
        if ((v112 & 0x1000000000000000) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v112 & 0x2000000000000000) != 0)
          {
            uint64_t v214 = v111;
            uint64_t v215 = v112 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v111 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          _decodeScalar(_:startingAt:)();
        }
        unint64_t v63 = (unint64_t)v211;
        Unicode.Scalar.properties.getter();
        uint64_t v24 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, void))v210)(v63, v212);
        if ((v24 & 1) == 0) {
          break;
        }
        uint64_t v2 = (unint64_t)Substring.index(after:)() >> 14;
        if (v2 == v60)
        {
          uint64_t v2 = (unint64_t)into >> 14;
          break;
        }
      }
      BOOL v78 = v2 >= v202;
      uint64_t v2 = v209;
      if (v78) {
        goto LABEL_74;
      }
      goto LABEL_132;
    }
LABEL_74:
    uint64_t v114 = Substring.subscript.getter();
    unint64_t v116 = v115;
    Swift::OpaquePointer into = v117;
    unint64_t v63 = v118;
    swift_bridgeObjectRelease();
    if ((v114 ^ v116) >= 0x4000)
    {
      if (Substring.distance(from:to:)() >= 1)
      {
        unint64_t v61 = *(void *)(v209 + 24);
        swift_bridgeObjectRetain();
        String.subscript.getter();
        unint64_t v202 = v119;
        uint64_t v201 = v120;
        uint64_t v24 = v121;
        swift_bridgeObjectRelease();
        uint64_t v2 = v209;
        unint64_t v122 = Substring.index(_:offsetBy:limitedBy:)();
        int64_t v60 = v123;
        swift_bridgeObjectRelease();
        if ((v60 & 1) == 0)
        {
          if (v61 >> 14 < v122 >> 14) {
            continue;
          }
          *(void *)(v2 + 16) = v122;
          *(void *)(v2 + 24) = v61;
        }
      }
      uint64_t v104 = MEMORY[0x210561700](v114, v116, into, v63);
      uint64_t v102 = v124;
      swift_bridgeObjectRelease();
      unint64_t v103 = *(void *)(v2 + 16);
      unint64_t v63 = v207;
      unint64_t v61 = v205;
      if (v103 >> 14 < v207 >> 14) {
        goto LABEL_133;
      }
      Swift::OpaquePointer into = v203;
      uint64_t v24 = v206;
      int64_t v60 = v204;
      if (!v102) {
        goto LABEL_87;
      }
      goto LABEL_81;
    }
    break;
  }
  swift_bridgeObjectRelease();
  Swift::OpaquePointer into = v203;
  uint64_t v24 = v206;
  int64_t v60 = v204;
  unint64_t v61 = v205;
LABEL_87:
  uint64_t v128 = v199;
  Parser.parseCCCMember()(v199);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v128, 1, v24) == 1)
  {
    outlined destroy of AST.Atom((uint64_t)v185, type metadata accessor for AST.CustomCharacterClass.Member);
    outlined destroy of _ASTParent?(v128, &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
    return;
  }
  uint64_t v129 = v128;
  uint64_t v130 = v189;
  outlined init with take of AST.Atom.Kind(v129, v189, type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom(v130, v191, type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t v131 = into->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v131 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v131[2] + 1, 1, v131);
  }
  uint64_t v24 = (uint64_t)v198;
  unint64_t v133 = v131[2];
  unint64_t v132 = v131[3];
  if (v133 >= v132 >> 1) {
    uint64_t v131 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1, v131);
  }
  v131[2] = v133 + 1;
  outlined init with take of AST.Atom.Kind(v191, (uint64_t)v131 + v60 + v133 * v61, type metadata accessor for AST.CustomCharacterClass.Member);
  into->_rawValue = v131;
  uint64_t v134 = v196;
  uint64_t v135 = (uint64_t)v185;
  makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)((uint64_t)v185, 1, v2, v196);
  outlined destroy of AST.Atom(v135, type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t v136 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48);
  uint64_t v137 = v192;
  if (v136(v134, 1, v192) == 1)
  {
    uint64_t v138 = type metadata accessor for AST.CustomCharacterClass.Member;
    uint64_t v139 = v189;
    goto LABEL_97;
  }
  uint64_t v140 = v195;
  outlined init with take of AST.Atom.Kind(v134, v195, type metadata accessor for AST.Atom);
  uint64_t v134 = (uint64_t)v188;
  uint64_t v141 = v189;
  makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)(v189, 0, v2, (uint64_t)v188);
  outlined destroy of AST.Atom(v141, type metadata accessor for AST.CustomCharacterClass.Member);
  if (v136(v134, 1, v137) != 1)
  {
    outlined init with take of AST.Atom.Kind(v134, (uint64_t)v187, type metadata accessor for AST.Atom);
    unint64_t v63 = *((void *)into->_rawValue + 2) - v184 + 1;
    uint64_t v142 = specialized BidirectionalCollection.suffix(_:)(v63, (uint64_t)into->_rawValue);
    uint64_t v144 = v143;
    uint64_t v2 = v145;
    uint64_t v147 = v146 >> 1;
    swift_bridgeObjectRetain();
    unint64_t v72 = (char *)MEMORY[0x263F8EE78];
    if (v2 != v147)
    {
      char v210 = (char *)(v147 - 1);
      BOOL v211 = v144;
      int64_t v60 = v2;
      *(void *)&long long v212 = v142;
LABEL_100:
      uint64_t v148 = (uint64_t)&v144[v61 * v60];
      uint64_t v149 = (char *)v60;
      Swift::OpaquePointer into = v194;
      while (v60 >= v2 && (uint64_t)v149 < v147)
      {
        outlined init with copy of AST.Atom(v148, v24, type metadata accessor for AST.CustomCharacterClass.Member);
        unint64_t v61 = (unint64_t)(v149 + 1);
        outlined init with take of AST.Atom.Kind(v24, (uint64_t)into, type metadata accessor for AST.CustomCharacterClass.Member);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          uint64_t v150 = into->_rawValue;
          unint64_t v208 = into[1]._rawValue;
          uint64_t v151 = into[2]._rawValue;
          unint64_t v207 = (unint64_t)into[3]._rawValue;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v72 + 2) + 1, 1, v72, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          }
          unint64_t v153 = *((void *)v72 + 2);
          unint64_t v152 = *((void *)v72 + 3);
          if (v153 >= v152 >> 1) {
            unint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v152 > 1), v153 + 1, 1, v72, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          }
          *((void *)v72 + 2) = v153 + 1;
          uint64_t v154 = &v72[32 * v153];
          uint64_t v155 = v208;
          *((void *)v154 + 4) = v150;
          *((void *)v154 + 5) = v155;
          unint64_t v156 = v207;
          *((void *)v154 + 6) = v151;
          *((void *)v154 + 7) = v156;
          int64_t v60 = (int64_t)(v149 + 1);
          BOOL v157 = v210 == v149;
          unint64_t v61 = v205;
          uint64_t v24 = (uint64_t)v198;
          uint64_t v144 = v211;
          if (v157) {
            goto LABEL_115;
          }
          goto LABEL_100;
        }
        outlined destroy of AST.Atom((uint64_t)into, type metadata accessor for AST.CustomCharacterClass.Member);
        v148 += v205;
        ++v149;
        if (v147 == v61) {
          goto LABEL_114;
        }
      }
      goto LABEL_136;
    }
    goto LABEL_115;
  }
  uint64_t v138 = type metadata accessor for AST.Atom;
  uint64_t v139 = v140;
LABEL_97:
  outlined destroy of AST.Atom(v139, v138);
  outlined destroy of _ASTParent?(v134, &demangling cache variable for type metadata for AST.Atom?);
}

uint64_t makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x270FA5388](v8, v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(a1, (uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Member);
      unint64_t v12 = 0x6C20646573726150;
      unint64_t v13 = 0xEC00000072657461;
      goto LABEL_16;
    case 2u:
      outlined init with take of AST.Atom.Kind((uint64_t)v11, a4, type metadata accessor for AST.Atom);
      uint64_t v22 = type metadata accessor for AST.Atom(0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a4, 0, 1, v22);
    case 3u:
      outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Member);
      AST.CustomCharacterClass.Member.location.getter(&v43);
      unint64_t v24 = v43;
      uint64_t v25 = v44;
      unint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v41 = 0xD00000000000001ALL;
      unint64_t v42 = 0x800000020D9E0270;
      v26._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v26._uint64_t object = (void *)0x800000020D9DF620;
      String.append(_:)(v26);
      unint64_t v28 = v41;
      unint64_t v27 = v42;
      uint64_t v29 = *(char **)(a3 + 72);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a3 + 72) = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v29 + 2) + 1, 1, v29);
        *(void *)(a3 + 72) = v29;
      }
      unint64_t v32 = *((void *)v29 + 2);
      unint64_t v31 = *((void *)v29 + 3);
      if (v32 >= v31 >> 1)
      {
        uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v29);
        *(void *)(a3 + 72) = v29;
      }
      *((void *)v29 + 2) = v32 + 1;
      uint64_t v20 = &v29[80 * v32];
      v20[32] = 1;
      *((void *)v20 + 5) = v28;
      *((void *)v20 + 6) = v27;
      *((void *)v20 + 7) = v24;
      *((void *)v20 + 8) = v25;
      *((void *)v20 + 9) = 0xD00000000000001ALL;
      *((void *)v20 + 10) = 0x800000020D9E0270;
      *((void *)v20 + 11) = 0;
      *((void *)v20 + 12) = 0;
      char v33 = 29;
      goto LABEL_23;
    case 4u:
      outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Member);
      unint64_t v12 = 0xD000000000000021;
      unint64_t v13 = 0x800000020D9E0240;
LABEL_16:
      Parser.unreachable(_:)(*(Swift::String *)&v12);
      goto LABEL_24;
    default:
      outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Member);
      if (a2)
      {
        AST.CustomCharacterClass.Member.location.getter(&v43);
        unint64_t v14 = v43;
        uint64_t v15 = v44;
        uint64_t v16 = *(char **)(a3 + 72);
        char v17 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a3 + 72) = v16;
        if ((v17 & 1) == 0)
        {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
          *(void *)(a3 + 72) = v16;
        }
        unint64_t v19 = *((void *)v16 + 2);
        unint64_t v18 = *((void *)v16 + 3);
        if (v19 >= v18 >> 1)
        {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v16);
          *(void *)(a3 + 72) = v16;
        }
        *((void *)v16 + 2) = v19 + 1;
        uint64_t v20 = &v16[80 * v19];
        v20[32] = 1;
        *((void *)v20 + 5) = 0xD000000000000027;
        *((void *)v20 + 6) = 0x800000020D9DF990;
        *((void *)v20 + 7) = v14;
        *((void *)v20 + 8) = v15;
        uint64_t v21 = 16;
      }
      else
      {
        AST.CustomCharacterClass.Member.location.getter(&v43);
        unint64_t v34 = v43;
        uint64_t v35 = v44;
        uint64_t v36 = *(char **)(a3 + 72);
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a3 + 72) = v36;
        if ((v37 & 1) == 0)
        {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
          *(void *)(a3 + 72) = v36;
        }
        unint64_t v39 = *((void *)v36 + 2);
        unint64_t v38 = *((void *)v36 + 3);
        if (v39 >= v38 >> 1)
        {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v36);
          *(void *)(a3 + 72) = v36;
        }
        *((void *)v36 + 2) = v39 + 1;
        uint64_t v20 = &v36[80 * v39];
        v20[32] = 1;
        *((void *)v20 + 5) = 0xD000000000000035;
        *((void *)v20 + 6) = 0x800000020D9DF950;
        *((void *)v20 + 7) = v34;
        *((void *)v20 + 8) = v35;
        uint64_t v21 = 17;
      }
      *((void *)v20 + 9) = v21;
      *((void *)v20 + 10) = 0;
      *((void *)v20 + 11) = 0;
      *((void *)v20 + 12) = 0;
      char v33 = 36;
LABEL_23:
      v20[104] = v33;
LABEL_24:
      uint64_t v40 = type metadata accessor for AST.Atom(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(a4, 1, 1, v40);
  }
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for AST.CustomCharacterClass.Member(0);
    return a2;
  }
  return result;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized parseWithRecovery<A>(_:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a1;
  unint64_t v21 = a2;
  swift_bridgeObjectRetain();
  uint64_t v6 = String.init<A>(_:)();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = v6;
  }
  uint64_t v9 = 7;
  if (((v7 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0) {
    uint64_t v9 = 11;
  }
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v20 = v6;
  unint64_t v21 = v7;
  uint64_t v22 = 15;
  uint64_t v23 = v9 | (v8 << 16);
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = MEMORY[0x263F8EE88];
  uint64_t v27 = a3;
  char v28 = 3;
  Parser.parse()(&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v17;
  uint64_t v11 = v18;
  uint64_t v13 = v19;
  v15[0] = v17;
  v15[1] = v18;
  _OWORD v15[2] = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v15, v16);
  v15[3] = v12;
  v15[4] = v11;
  v15[5] = v13;
  v16[1] = v10;
  RegexValidator.validate()(a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t parseWithRecovery<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v6 = *v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v9 = String.init<A>(_:)();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v9;
  }
  uint64_t v12 = 7;
  if (((v10 >> 60) & ((v9 & 0x800000000000000) == 0)) != 0) {
    uint64_t v12 = 11;
  }
  uint64_t v13 = (char *)MEMORY[0x263F8EE78];
  uint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v24 = v9;
  unint64_t v25 = v10;
  uint64_t v26 = 15;
  uint64_t v27 = v12 | (v11 << 16);
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = MEMORY[0x263F8EE88];
  uint64_t v31 = v6;
  char v32 = 3;
  Parser.parse()(&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v21;
  uint64_t v14 = v22;
  uint64_t v16 = v23;
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v19, v20);
  v19[3] = v15;
  v19[4] = v14;
  v19[5] = v16;
  v20[1] = v13;
  RegexValidator.validate()(a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t validate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  v7[0] = *a1;
  uint64_t v4 = v7[0];
  v7[1] = v3;
  v7[2] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v7, v8);
  _OWORD v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v8[1] = (char *)MEMORY[0x263F8EE78];
  RegexValidator.validate()(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t parse<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *a2;
  uint64_t result = parseWithRecovery<A>(_:_:)(a1, (uint64_t)&v23, (uint64_t)v21);
  uint64_t v5 = v21[1];
  uint64_t v6 = v22;
  uint64_t v7 = *(void *)(v22 + 16) + 1;
  uint64_t v8 = v22;
  while (--v7)
  {
    uint64_t v9 = v8 + 80;
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    v8 += 80;
    if (v10 <= 1)
    {
      uint64_t v11 = *(void *)(v9 - 32);
      uint64_t v12 = *(void *)(v9 - 24);
      uint64_t v13 = *(void *)(v9 - 16);
      uint64_t v19 = *(void *)(v9 - 8);
      uint64_t v20 = *(void *)(v9 - 40);
      uint64_t v14 = *(void *)(v9 + 16);
      uint64_t v17 = *(void *)(v9 + 8);
      uint64_t v18 = *(void *)v9;
      unsigned __int8 v15 = *(unsigned char *)(v9 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      swift_allocError();
      *(unsigned char *)uint64_t v16 = v10;
      *(void *)(v16 + 8) = v20;
      *(void *)(v16 + 16) = v11;
      *(void *)(v16 + 24) = v12;
      *(void *)(v16 + 32) = v13;
      *(void *)(v16 + 40) = v19;
      *(void *)(v16 + 48) = v18;
      *(void *)(v16 + 56) = v17;
      *(void *)(v16 + 64) = v14;
      *(unsigned char *)(v16 + 72) = v15;
      *(void *)(v16 + 80) = v12;
      *(void *)(v16 + 88) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v19, v18, v17, v14, v15);
      swift_willThrow();
      swift_bridgeObjectRelease_n();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  *a3 = v21[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void static SyntaxOptions.traditional.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static SyntaxOptions.experimental.getter(void *a1@<X8>)
{
  *a1 = 61;
}

uint64_t parseWithDelimitersWithRecovery<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1, a1);
  (*(void (**)(unsigned char *))(v4 + 16))(&v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v5 = (void *)String.init<A>(_:)();
  v6._uint64_t countAndFlagsBits = (uint64_t)v12;
  v6._uint64_t object = v5;
  unsigned long long v7 = (unsigned __int128)droppingRegexDelimiters(_:)(v6);
  uint64_t v8 = v7;
  unint64_t v9 = *((void *)&v7 + 1);
  swift_bridgeObjectRelease();
  if (v12[0])
  {
    uint64_t v10 = 61;
  }
  else if (v13 >= 1 && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v8, v9) & 1) != 0)
  {
    uint64_t v10 = 67;
  }
  else
  {
    uint64_t v10 = 0;
  }
  specialized parseWithRecovery<A>(_:_:)(v8, v9, v10, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Collection.offsets(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t (*)(void))Collection.offset(of:))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Range();
  uint64_t result = Collection.offset(of:)(a1 + *(int *)(v7 + 36), a2, a3);
  if (result >= v6) {
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t Collection.index(atOffset:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v2);
  uint64_t v4 = (char *)&v6 - v3;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
}

uint64_t Error.addingLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v9, v12);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  ((void (*)(unsigned char *, uint64_t))v13)(&v23[-v14 - 8], v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    uint64_t v15 = swift_allocError();
    v13(v16, v4, a3);
  }
  else
  {
    v13((uint64_t)v11, v4, a3);
    uint64_t v17 = type metadata accessor for Source.LocatedError();
    swift_getWitnessTable();
    uint64_t v15 = swift_allocError();
    uint64_t v19 = v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v11, a3);
    uint64_t v20 = (void *)(v19 + *(int *)(v17 + 36));
    *uint64_t v20 = a1;
    v20[1] = a2;
  }
  return v15;
}

double RegexValidator.validate()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (*(void *)(v1 + 8)) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  uint64_t v44 = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v43 = v3;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (_OWORD *)(v44 + 64);
    while (v4 < *(void *)(v44 + 16))
    {
      ++v4;
      long long v46 = *v5;
      unint64_t v8 = *((void *)v5 - 3);
      switch(v8 >> 61)
      {
        case 3uLL:
          _StringGuts.grow(_:)(29);
          swift_bridgeObjectRelease();
          *(void *)&long long v50 = 0xD000000000000015;
          *((void *)&v50 + 1) = 0x800000020D9E0130;
          v17._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v17._uint64_t object = (void *)0x800000020D9DF620;
          String.append(_:)(v17);
          unint64_t v10 = 0x800000020D9E0130;
          unint64_t v11 = 0xD000000000000015;
          uint64_t v12 = (char *)v48[4];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          unint64_t v14 = *((void *)v12 + 2);
          unint64_t v18 = *((void *)v12 + 3);
          unint64_t v15 = v14 + 1;
          unint64_t v16 = 0x800000020D9E0130;
          if (v14 >= v18 >> 1) {
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v14 + 1, 1, v12);
          }
          unint64_t v6 = 0xD000000000000015;
          break;
        case 4uLL:
          _StringGuts.grow(_:)(29);
          swift_bridgeObjectRelease();
          unint64_t v6 = 0xD00000000000001ELL;
          *(void *)&long long v50 = 0xD00000000000001ELL;
          *((void *)&v50 + 1) = 0x800000020D9E0110;
          v19._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v19._uint64_t object = (void *)0x800000020D9DF620;
          String.append(_:)(v19);
          unint64_t v10 = 0x800000020D9E0110;
          unint64_t v11 = 0xD00000000000001ELL;
          uint64_t v12 = (char *)v48[4];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          unint64_t v14 = *((void *)v12 + 2);
          unint64_t v20 = *((void *)v12 + 3);
          unint64_t v15 = v14 + 1;
          unint64_t v16 = 0x800000020D9E0110;
          if (v14 >= v20 >> 1)
          {
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v14 + 1, 1, v12);
            unint64_t v6 = 0xD00000000000001ELL;
          }
          break;
        default:
          _StringGuts.grow(_:)(29);
          swift_bridgeObjectRelease();
          unint64_t v6 = 0xD000000000000016;
          v9._uint64_t object = (void *)0x800000020D9DF620;
          *(void *)&long long v50 = 0xD000000000000016;
          *((void *)&v50 + 1) = 0x800000020D9E0150;
          v9._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v9);
          unint64_t v10 = 0x800000020D9E0150;
          unint64_t v11 = 0xD000000000000016;
          uint64_t v12 = (char *)v48[4];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          unint64_t v14 = *((void *)v12 + 2);
          unint64_t v13 = *((void *)v12 + 3);
          unint64_t v15 = v14 + 1;
          unint64_t v16 = 0x800000020D9E0150;
          if (v14 >= v13 >> 1)
          {
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
            unint64_t v6 = 0xD000000000000016;
          }
          break;
      }
      *((void *)v12 + 2) = v15;
      uint64_t v7 = &v12[80 * v14];
      v7[32] = 1;
      *((void *)v7 + 5) = v11;
      *((void *)v7 + 6) = v10;
      *(_OWORD *)(v7 + 56) = v46;
      *((void *)v7 + 9) = v6;
      *((void *)v7 + 10) = v16;
      *((void *)v7 + 11) = 0;
      *((void *)v7 + 12) = 0;
      v7[104] = 29;
      v48[4] = v12;
      v5 += 3;
      if (v43 == v4) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    JUMPOUT(0x20D99939CLL);
  }
LABEL_21:
  swift_bridgeObjectRelease();
  v49[2] = MEMORY[0x263F8EE88];
  uint64_t v21 = v48[3];
  uint64_t v22 = *(void *)(v21 + 16);
  swift_bridgeObjectRetain();
  if (v22)
  {
    unint64_t v23 = 0;
    uint64_t v45 = v22;
    uint64_t v24 = (_OWORD *)(v21 + 64);
    while (v23 < *(void *)(v21 + 16))
    {
      Swift::Int v25 = *((void *)v24 - 3);
      if (v25)
      {
        Swift::Int v26 = *((void *)v24 - 4);
        long long v47 = *v24;
        swift_bridgeObjectRetain_n();
        char v27 = specialized Set._Variant.insert(_:)(v49, v26, v25);
        swift_bridgeObjectRelease();
        if (v27)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          *(void *)&long long v50 = v26;
          *((void *)&v50 + 1) = v25;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          char v53 = 33;
          unint64_t v28 = ParseError.description.getter();
          uint64_t v30 = v29;
          uint64_t v31 = (char *)v48[4];
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
          }
          long long v32 = v47;
          unint64_t v34 = *((void *)v31 + 2);
          unint64_t v33 = *((void *)v31 + 3);
          if (v34 >= v33 >> 1)
          {
            uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v31);
            long long v32 = v47;
            uint64_t v31 = v36;
          }
          *((void *)v31 + 2) = v34 + 1;
          uint64_t v35 = &v31[80 * v34];
          v35[32] = 1;
          *((void *)v35 + 5) = v28;
          *((void *)v35 + 6) = v30;
          *(_OWORD *)(v35 + 56) = v32;
          *((void *)v35 + 9) = v26;
          *((void *)v35 + 10) = v25;
          *((void *)v35 + 11) = 0;
          *((void *)v35 + 12) = 0;
          v35[104] = 33;
          swift_bridgeObjectRelease_n();
          v48[4] = v31;
          uint64_t v22 = v45;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v23;
      uint64_t v24 = (_OWORD *)((char *)v24 + 56);
      if (v22 == v23) {
        goto LABEL_34;
      }
    }
    goto LABEL_36;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v50 = *v48;
  RegexValidator.validateNode(_:)((uint64_t *)&v50);
  uint64_t v37 = v48[1];
  uint64_t v38 = v48[2];
  *(void *)&long long v50 = *v48;
  *((void *)&v50 + 1) = v37;
  uint64_t v51 = v38;
  uint64_t v39 = v48[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Array.append<A>(contentsOf:)(v39);
  uint64_t v40 = v51;
  double result = *(double *)&v50;
  *(_OWORD *)a1 = v50;
  *(void *)(a1 + 16) = v40;
  return result;
}

void RegexValidator.validateNode(_:)(uint64_t *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8, v8);
  unint64_t v10 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v11 - 8, v12);
  unint64_t v14 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  switch((unint64_t)*a1 >> 60)
  {
    case 1uLL:
      uint64_t v19 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v10 = *(char **)(v19 + 16);
      if (v10)
      {
        unint64_t v17 = 0;
        uint64_t v18 = v19 + 32;
        do
        {
          if (v17 >= *(void *)(v19 + 16)) {
            goto LABEL_85;
          }
          uint64_t v2 = (char *)(v17 + 1);
          *(void *)&long long v116 = *(void *)(v18 + 8 * v17);
          RegexValidator.validateNode(_:)(&v116);
          unint64_t v17 = (unint64_t)v2;
        }
        while (v10 != v2);
      }
      return;
    case 2uLL:
      uint64_t v20 = v15 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v3 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v23 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v22 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v24 = *(void *)(v20 + 48);
      uint64_t v25 = *(void *)(v20 + 56);
      uint64_t v27 = *(void *)(v20 + 64);
      uint64_t v26 = *(void *)(v20 + 72);
      int v28 = *(unsigned __int8 *)(v20 + 96);
      uint64_t v2 = *(char **)(v20 + 104);
      uint64_t v18 = *(void *)(v20 + 112);
      unint64_t v10 = *(char **)(v20 + 120);
      switch(*(unsigned char *)(v20 + 96))
      {
        case 1:
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_14;
        case 2:
          *(void *)&long long v116 = v3;
          *((void *)&v116 + 1) = v21;
          char v117 = v23 & 1;
          uint64_t v118 = v22;
          uint64_t v119 = v24;
          uint64_t v120 = v25;
          char v121 = v27 & 1;
          uint64_t v122 = v26;
          RegexValidator.validateMatchingOptions(_:)((uint64_t)&v116);
          goto LABEL_82;
        case 3:
          uint64_t v90 = v23 | v21;
          uint64_t v91 = v24 | v25 | v27;
          uint64_t v92 = v26 | *(void *)(v20 + 80) | *(void *)(v20 + 88);
          if (!(v90 | v3 | v22 | v91 | v92)) {
            goto LABEL_82;
          }
          unint64_t v17 = v90 | v22 | v91 | v92;
          if (v3 == 1 && v17 == 0) {
            goto LABEL_82;
          }
          if (v3 != 2 || v17)
          {
            if (v3 - 3 <= 2 && !v17) {
              goto LABEL_82;
            }
            if (v3 != 6 || v17) {
              goto LABEL_87;
            }
            *(void *)&long long v116 = 0;
            *((void *)&v116 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(29);
            swift_bridgeObjectRelease();
            unint64_t v94 = 0xD000000000000014;
            unint64_t v95 = "non-atomic lookahead";
          }
          else
          {
            *(void *)&long long v116 = 0;
            *((void *)&v116 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(29);
            swift_bridgeObjectRelease();
            unint64_t v94 = 0xD000000000000012;
            unint64_t v95 = "branch reset group";
          }
          uint64_t v96 = v95 - 32;
          *(void *)&long long v116 = v94;
          *((void *)&v116 + 1) = (unint64_t)(v95 - 32) | 0x8000000000000000;
          v97._uint64_t object = (void *)0x800000020D9DF620;
          v97._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v97);
          long long v98 = v116;
          unint64_t v99 = *(char **)(v4 + 32);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v115 = (char *)*((void *)&v98 + 1);
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v99 + 2) + 1, 1, v99);
          }
          unint64_t v102 = *((void *)v99 + 2);
          unint64_t v101 = *((void *)v99 + 3);
          if (v102 >= v101 >> 1) {
            unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v101 > 1), v102 + 1, 1, v99);
          }
          *((void *)v99 + 2) = v102 + 1;
          unint64_t v103 = &v99[80 * v102];
          v103[32] = 1;
          uint64_t v104 = v115;
          *((void *)v103 + 5) = v98;
          *((void *)v103 + 6) = v104;
          *((void *)v103 + 7) = v2;
          *((void *)v103 + 8) = v18;
          *((void *)v103 + 9) = v94;
          *((void *)v103 + 10) = (unint64_t)v96 | 0x8000000000000000;
          break;
        default:
LABEL_14:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v29 = HIBYTE(v21) & 0xF;
          if ((v21 & 0x2000000000000000) == 0) {
            uint64_t v29 = v3 & 0xFFFFFFFFFFFFLL;
          }
          if (!v29)
          {
            *(void *)&long long v116 = v2;
            *((void *)&v116 + 1) = v18;
            RegexValidator.expectInvalid(at:)(&v116);
          }
          if (v28)
          {
LABEL_19:
            unint64_t v115 = v10;
            *(void *)&long long v116 = 0;
            uint64_t v30 = v2;
            *((void *)&v116 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(29);
            swift_bridgeObjectRelease();
            *(void *)&long long v116 = 0xD000000000000010;
            *((void *)&v116 + 1) = 0x800000020D9DFF40;
            v31._uint64_t object = (void *)0x800000020D9DF620;
            v31._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
            String.append(_:)(v31);
            long long v32 = v116;
            unint64_t v33 = *(char **)(v4 + 32);
            uint64_t v34 = v18;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33);
            }
            unint64_t v36 = *((void *)v33 + 2);
            unint64_t v35 = *((void *)v33 + 3);
            if (v36 >= v35 >> 1) {
              unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33);
            }
            *((void *)v33 + 2) = v36 + 1;
            uint64_t v37 = &v33[80 * v36];
            v37[32] = 1;
            *(_OWORD *)(v37 + 40) = v32;
            *((void *)v37 + 7) = v30;
            *((void *)v37 + 8) = v34;
            *((void *)v37 + 9) = 0xD000000000000010;
            *((void *)v37 + 10) = 0x800000020D9DFF40;
            *((void *)v37 + 11) = 0;
            *((void *)v37 + 12) = 0;
            v37[104] = 29;
            *(void *)(v4 + 32) = v33;
            unint64_t v10 = v115;
          }
          goto LABEL_82;
      }
      goto LABEL_81;
    case 3uLL:
      uint64_t v38 = v15 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v39 = *(void *)(v38 + 16);
      uint64_t v40 = *(void *)(v38 + 24);
      *(void *)&long long v116 = 0;
      *((void *)&v116 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      strcpy((char *)&v116, "conditional");
      HIDWORD(v116) = -352321536;
      v41._uint64_t object = (void *)0x800000020D9DF620;
      v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v41);
      long long v42 = v116;
      uint64_t v43 = *(char **)(v4 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
      }
      unint64_t v45 = *((void *)v43 + 2);
      unint64_t v44 = *((void *)v43 + 3);
      if (v45 >= v44 >> 1) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v43);
      }
      *((void *)v43 + 2) = v45 + 1;
      long long v46 = &v43[80 * v45];
      v46[32] = 1;
      *(_OWORD *)(v46 + 40) = v42;
      *((void *)v46 + 7) = v39;
      *((void *)v46 + 8) = v40;
      long long v47 = xmmword_20D9D75C0;
      goto LABEL_59;
    case 4uLL:
      uint64_t v48 = (void *)(v15 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v50 = v48[2];
      uint64_t v49 = v48[3];
      uint64_t v51 = v48[6];
      unint64_t v52 = v48[7];
      uint64_t v54 = (char *)v48[16];
      uint64_t v55 = v48[17];
      *(void *)&long long v116 = v48[15];
      uint64_t v53 = v116;
      RegexValidator.validateNode(_:)(&v116);
      *(void *)&long long v116 = v53;
      if ((AST.Node.isQuantifiable.getter() & 1) == 0)
      {
        uint64_t v114 = v49;
        unint64_t v115 = v54;
        uint64_t v49 = v51;
        uint64_t v56 = v50;
        v123[0] = v53;
        AST.Node._associatedValue.getter((uint64_t *)&v116);
        uint64_t v57 = v118;
        uint64_t v58 = v119;
        __swift_project_boxed_opaque_existential_1Tm(&v116, v118);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v58 + 16))(v123, v57, v58);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v116);
        uint64_t v59 = v123[0];
        uint64_t v60 = v123[1];
        unint64_t v61 = *(char **)(v4 + 32);
        uint64_t v62 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v61 + 2) + 1, 1, v61);
        }
        unint64_t v64 = *((void *)v61 + 2);
        unint64_t v63 = *((void *)v61 + 3);
        if (v64 >= v63 >> 1) {
          unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, v61);
        }
        *((void *)v61 + 2) = v64 + 1;
        unint64_t v65 = &v61[80 * v64];
        v65[32] = 1;
        *((void *)v65 + 5) = 0xD00000000000001ELL;
        *((void *)v65 + 6) = 0x800000020D9DF4E0;
        *((void *)v65 + 7) = v59;
        *((void *)v65 + 8) = v60;
        *((void *)v65 + 9) = 18;
        *((void *)v65 + 10) = 0;
        *((void *)v65 + 11) = 0;
        *((void *)v65 + 12) = 0;
        v65[104] = 36;
        *(void *)(v4 + 32) = v61;
        uint64_t v55 = v62;
        uint64_t v50 = v56;
        uint64_t v51 = v49;
        LODWORD(v49) = v114;
        uint64_t v54 = v115;
      }
      if (v52 >> 61 != 3) {
        return;
      }
      if ((v49 | v52))
      {
        *(void *)&long long v116 = v54;
        *((void *)&v116 + 1) = v55;
        RegexValidator.expectInvalid(at:)(&v116);
      }
      else if (v51 < v50)
      {
        *(void *)&long long v116 = 0;
        *((void *)&v116 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(69);
        v66._uint64_t countAndFlagsBits = 0xD000000000000013;
        v66._uint64_t object = (void *)0x800000020D9DF530;
        String.append(_:)(v66);
        v123[0] = v50;
        v67._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v67);
        swift_bridgeObjectRelease();
        v68._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
        v68._uint64_t object = (void *)0x800000020D9DF550;
        String.append(_:)(v68);
        v123[0] = v51;
        v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        v70._uint64_t countAndFlagsBits = 39;
        v70._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v70);
        long long v71 = v116;
        uint64_t v43 = *(char **)(v4 + 32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
        }
        unint64_t v73 = *((void *)v43 + 2);
        unint64_t v72 = *((void *)v43 + 3);
        if (v73 >= v72 >> 1) {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v43);
        }
        *((void *)v43 + 2) = v73 + 1;
        long long v46 = &v43[80 * v73];
        v46[32] = 1;
        *(_OWORD *)(v46 + 40) = v71;
        *((void *)v46 + 7) = v54;
        *((void *)v46 + 8) = v55;
        *((void *)v46 + 9) = v50;
        *((void *)v46 + 10) = v51;
        *((void *)v46 + 11) = 0;
        *((void *)v46 + 12) = 0;
        char v74 = 34;
LABEL_60:
        v46[104] = v74;
        *(void *)(v4 + 32) = v43;
      }
      return;
    case 5uLL:
    case 6uLL:
    case 0xBuLL:
      return;
    case 7uLL:
      uint64_t v75 = v15 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v76 = *(void *)(v75 + 32);
      uint64_t v77 = *(void *)(v75 + 40);
      *(void *)&long long v116 = 0;
      *((void *)&v116 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      strcpy((char *)&v116, "interpolation");
      HIWORD(v116) = -4864;
      v78._uint64_t object = (void *)0x800000020D9DF620;
      v78._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v78);
      long long v79 = v116;
      uint64_t v43 = *(char **)(v4 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
      }
      unint64_t v81 = *((void *)v43 + 2);
      unint64_t v80 = *((void *)v43 + 3);
      if (v81 >= v80 >> 1) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v43);
      }
      *((void *)v43 + 2) = v81 + 1;
      long long v46 = &v43[80 * v81];
      v46[32] = 1;
      *(_OWORD *)(v46 + 40) = v79;
      *((void *)v46 + 7) = v76;
      *((void *)v46 + 8) = v77;
      long long v47 = xmmword_20D9D75B0;
      goto LABEL_59;
    case 8uLL:
      uint64_t v82 = swift_projectBox();
      outlined init with copy of AST.Atom(v82, (uint64_t)v14, type metadata accessor for AST.Atom);
      RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v14, 0);
      outlined destroy of AST.Atom((uint64_t)v14, type metadata accessor for AST.Atom);
      return;
    case 9uLL:
      uint64_t v18 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v2 = *(char **)(v18 + 16);
      if (!v2) {
        return;
      }
      unint64_t v17 = 0;
      while (v17 < *(void *)(v18 + 16))
      {
        unint64_t v3 = v17 + 1;
        outlined init with copy of AST.Atom(v18+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17, (uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
        RegexValidator.validateCharacterClassMember(_:)((uint64_t)v10);
        outlined destroy of AST.Atom((uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
        unint64_t v17 = v3;
        if (v2 == (char *)v3) {
          return;
        }
      }
      goto LABEL_86;
    case 0xAuLL:
      uint64_t v83 = v15 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v84 = *(void *)(v83 + 64);
      uint64_t v85 = *(void *)(v83 + 72);
      *(void *)&long long v116 = 0;
      *((void *)&v116 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      *(void *)&long long v116 = 0x6620746E65736261;
      *((void *)&v116 + 1) = 0xEF6E6F6974636E75;
      v86._uint64_t object = (void *)0x800000020D9DF620;
      v86._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v86);
      long long v87 = v116;
      uint64_t v43 = *(char **)(v4 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
      }
      unint64_t v89 = *((void *)v43 + 2);
      unint64_t v88 = *((void *)v43 + 3);
      if (v89 >= v88 >> 1) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, v43);
      }
      *((void *)v43 + 2) = v89 + 1;
      long long v46 = &v43[80 * v89];
      v46[32] = 1;
      *(_OWORD *)(v46 + 40) = v87;
      *((void *)v46 + 7) = v84;
      *((void *)v46 + 8) = v85;
      long long v47 = xmmword_20D9D75A0;
LABEL_59:
      *(_OWORD *)(v46 + 72) = v47;
      *((void *)v46 + 11) = 0;
      *((void *)v46 + 12) = 0;
      char v74 = 29;
      goto LABEL_60;
    default:
      uint64_t v16 = *(void *)(v15 + 16);
      unint64_t v10 = *(char **)(v16 + 16);
      if (!v10) {
        return;
      }
      unint64_t v17 = 0;
      uint64_t v18 = v16 + 32;
      break;
  }
  while (v17 < *(void *)(v16 + 16))
  {
    uint64_t v2 = (char *)(v17 + 1);
    *(void *)&long long v116 = *(void *)(v18 + 8 * v17);
    RegexValidator.validateNode(_:)(&v116);
    unint64_t v17 = (unint64_t)v2;
    if (v10 == v2) {
      return;
    }
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  if (v3 - 7 > 2 || v17)
  {
    *(void *)&long long v116 = 0;
    *((void *)&v116 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    strcpy((char *)&v116, "script run");
    BYTE11(v116) = 0;
    HIDWORD(v116) = -369098752;
    v110._uint64_t object = (void *)0x800000020D9DF620;
    v110._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v110);
    long long v111 = v116;
    unint64_t v99 = *(char **)(v4 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v99 + 2) + 1, 1, v99);
    }
    unint64_t v113 = *((void *)v99 + 2);
    unint64_t v112 = *((void *)v99 + 3);
    if (v113 >= v112 >> 1) {
      unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v112 > 1), v113 + 1, 1, v99);
    }
    *((void *)v99 + 2) = v113 + 1;
    unint64_t v103 = &v99[80 * v113];
    v103[32] = 1;
    *(_OWORD *)(v103 + 40) = v111;
    *((void *)v103 + 7) = v2;
    *((void *)v103 + 8) = v18;
    long long v109 = xmmword_20D9D75D0;
  }
  else
  {
    *(void *)&long long v116 = 0;
    *((void *)&v116 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    strcpy((char *)&v116, "lookbehind");
    BYTE11(v116) = 0;
    HIDWORD(v116) = -369098752;
    v105._uint64_t object = (void *)0x800000020D9DF620;
    v105._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v105);
    long long v106 = v116;
    unint64_t v99 = *(char **)(v4 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v99 + 2) + 1, 1, v99);
    }
    unint64_t v108 = *((void *)v99 + 2);
    unint64_t v107 = *((void *)v99 + 3);
    if (v108 >= v107 >> 1) {
      unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v107 > 1), v108 + 1, 1, v99);
    }
    *((void *)v99 + 2) = v108 + 1;
    unint64_t v103 = &v99[80 * v108];
    v103[32] = 1;
    *(_OWORD *)(v103 + 40) = v106;
    *((void *)v103 + 7) = v2;
    *((void *)v103 + 8) = v18;
    long long v109 = xmmword_20D9D75E0;
  }
  *(_OWORD *)(v103 + 72) = v109;
LABEL_81:
  *((void *)v103 + 11) = 0;
  *((void *)v103 + 12) = 0;
  v103[104] = 29;
  *(void *)(v4 + 32) = v99;
LABEL_82:
  *(void *)&long long v116 = v10;
  RegexValidator.validateNode(_:)(&v116);
}

double RegexValidator.expectInvalid(at:)(long long *a1)
{
  uint64_t v2 = v1;
  long long v3 = *a1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (unsigned __int8 *)(v4 + 32);
  uint64_t v6 = *(void *)(v4 + 16) + 1;
  while (--v6)
  {
    unsigned int v7 = *v5;
    v5 += 80;
    if (v7 < 2) {
      return *(double *)&v3;
    }
  }
  long long v17 = *a1;
  strcpy((char *)v18, "UNREACHABLE: ");
  HIWORD(v18[1]) = -4864;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v8._uint64_t object = (void *)0x800000020D9DFF60;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = v18[0];
  uint64_t v10 = v18[1];
  uint64_t v11 = *(char **)(v1 + 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
  }
  unint64_t v13 = *((void *)v11 + 2);
  unint64_t v12 = *((void *)v11 + 3);
  long long v3 = v17;
  if (v13 >= v12 >> 1)
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v11);
    long long v3 = v17;
    uint64_t v11 = v15;
  }
  *((void *)v11 + 2) = v13 + 1;
  unint64_t v14 = &v11[80 * v13];
  v14[32] = 0;
  *((void *)v14 + 5) = v9;
  *((void *)v14 + 6) = v10;
  *(_OWORD *)(v14 + 56) = v3;
  *(void *)&long long v3 = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  v14[104] = -1;
  *(void *)(v2 + 32) = v11;
  return *(double *)&v3;
}

uint64_t RegexValidator.validateMatchingOption(_:)(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v4 = v1;
  switch(*(unsigned char *)result)
  {
    case 1:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000016;
      uint64_t v6 = "duplicate group naming";
      goto LABEL_12;
    case 8:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001ALL;
      uint64_t v6 = "unicode word boundary mode";
      goto LABEL_12;
    case 0xD:
    case 0xE:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000011;
      uint64_t v6 = "text segment mode";
      goto LABEL_12;
    case 0xF:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000016;
      uint64_t v6 = "grapheme semantic mode";
      goto LABEL_12;
    case 0x10:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v7._uint64_t object = (void *)0x800000020D9DF620;
      v7._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v7);
      uint64_t v8 = *(void *)(v1 + 32);
      double result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
        uint64_t v8 = result;
      }
      unint64_t v9 = *(void *)(v8 + 16);
      unint64_t v10 = *(void *)(v8 + 24);
      unint64_t v11 = v9 + 1;
      if (v9 >= v10 >> 1)
      {
        unint64_t v23 = v9 + 1;
        uint64_t v20 = (char *)v8;
        unint64_t v21 = *(void *)(v8 + 16);
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v9 + 1, 1, v20);
        unint64_t v9 = v21;
        unint64_t v11 = v23;
        uint64_t v8 = result;
      }
      *(void *)(v8 + 16) = v11;
      unint64_t v12 = v8 + 80 * v9;
      *(unsigned char *)(v12 + 32) = 1;
      *(void *)(v12 + 40) = 0xD00000000000001CLL;
      *(void *)(v12 + 48) = 0x800000020D9DFFA0;
      *(void *)(v12 + 56) = v3;
      *(void *)(v12 + 64) = v2;
      *(void *)(v12 + 72) = 0xD00000000000001CLL;
      *(void *)(v12 + 80) = 0x800000020D9DFFA0;
      goto LABEL_17;
    case 0x11:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000012;
      uint64_t v6 = "byte semantic mode";
LABEL_12:
      unint64_t v13 = v6 - 32;
      unint64_t v24 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      v14._uint64_t object = (void *)0x800000020D9DF620;
      v14._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v14);
      uint64_t v8 = *(void *)(v1 + 32);
      double result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
        uint64_t v8 = result;
      }
      unint64_t v15 = *(void *)(v8 + 16);
      unint64_t v16 = *(void *)(v8 + 24);
      unint64_t v17 = v15 + 1;
      if (v15 >= v16 >> 1)
      {
        unint64_t v22 = v15 + 1;
        uint64_t v18 = (char *)v8;
        unint64_t v19 = *(void *)(v8 + 16);
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v15 + 1, 1, v18);
        unint64_t v15 = v19;
        unint64_t v17 = v22;
        uint64_t v8 = result;
      }
      *(void *)(v8 + 16) = v17;
      unint64_t v12 = v8 + 80 * v15;
      *(unsigned char *)(v12 + 32) = 1;
      *(void *)(v12 + 40) = v5;
      *(void *)(v12 + 48) = v24;
      *(void *)(v12 + 56) = v3;
      *(void *)(v12 + 64) = v2;
      *(void *)(v12 + 72) = v5;
      *(void *)(v12 + 80) = (unint64_t)v13 | 0x8000000000000000;
LABEL_17:
      *(void *)(v12 + 88) = 0;
      *(void *)(v12 + 96) = 0;
      *(unsigned char *)(v12 + 104) = 29;
      *(void *)(v4 + 32) = v8;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RegexValidator.validateMatchingOptions(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (_OWORD *)(v1 + 40);
    while (v4 < *(void *)(v1 + 16))
    {
      ++v4;
      v11[0] = *((unsigned char *)v5 - 8);
      long long v6 = *v5;
      unint64_t v5 = (_OWORD *)((char *)v5 + 24);
      long long v12 = v6;
      double result = RegexValidator.validateMatchingOption(_:)((uint64_t)v11);
      if (v3 == v4) {
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = (_OWORD *)(v2 + 40);
    while (v8 < *(void *)(v2 + 16))
    {
      ++v8;
      v11[0] = *((unsigned char *)v9 - 8);
      long long v10 = *v9;
      unint64_t v9 = (_OWORD *)((char *)v9 + 24);
      long long v12 = v10;
      double result = RegexValidator.validateMatchingOption(_:)((uint64_t)v11);
      if (v7 == v8) {
        return result;
      }
    }
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t Unicode.BinaryProperty.rawValue.getter()
{
  uint64_t result = 0xD000000000000015;
  switch(*v0)
  {
    case 1:
      return 0x7465626168706C41;
    case 2:
      unsigned int v2 = 1768188226;
      return v2 | 0x6E6F435F00000000;
    case 3:
      return 0x72694D5F69646942;
    case 4:
      return 0x6465736143;
    case 5:
    case 0x17:
    case 0x2A:
      return result;
    case 6:
      return 0x6E67495F65736143;
    case 7:
    case 8:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x24:
    case 0x27:
      return 0xD000000000000017;
    case 9:
      return 0xD00000000000001CLL;
    case 0xD:
      return 1752392004;
    case 0xE:
      return 0x7461636572706544;
    case 0xF:
      return 0xD00000000000001CLL;
    case 0x10:
      return 0x6974697263616944;
    case 0x11:
      return 0xD000000000000013;
    case 0x12:
      return 0x6F435F696A6F6D45;
    case 0x13:
      return 0x6F4D5F696A6F6D45;
    case 0x14:
      return 0x696A6F6D45;
    case 0x15:
      return 0xD000000000000012;
    case 0x16:
      return 0x7265646E65747845;
    case 0x18:
      return 0xD00000000000001ALL;
    case 0x19:
    case 0x1A:
    case 0x1B:
      return 0x656D656870617247;
    case 0x1C:
      return 0x696769445F786548;
    case 0x1D:
      return 0x6E6568707948;
    case 0x1E:
      return 0x69746E6F435F4449;
    case 0x1F:
      return 0x706172676F656449;
    case 0x20:
      return 0x74726174535F4449;
    case 0x21:
      return 0xD000000000000013;
    case 0x22:
      return 0xD000000000000014;
    case 0x23:
      unsigned int v2 = 1852403530;
      return v2 | 0x6E6F435F00000000;
    case 0x25:
      unsigned int v3 = 1702326092;
      goto LABEL_51;
    case 0x26:
      return 1752457549;
    case 0x28:
      return 0xD000000000000010;
    case 0x29:
      return 0xD000000000000022;
    case 0x2B:
      return 0xD000000000000011;
    case 0x2C:
      return 0x44495F726568744FLL;
    case 0x2D:
      return 0x6F4C5F726568744FLL;
    case 0x2E:
      return 0x614D5F726568744FLL;
    case 0x2F:
      return 0x70555F726568744FLL;
    case 0x30:
      return 0x5F6E726574746150;
    case 0x31:
      return 0xD000000000000013;
    case 0x32:
      return 0xD00000000000001CLL;
    case 0x33:
      return 0x6F697461746F7551;
    case 0x34:
      return 0x6C616369646152;
    case 0x35:
      return 0xD000000000000012;
    case 0x36:
      return 0x746F445F74666F53;
    case 0x37:
      return 0xD000000000000011;
    case 0x38:
      return 0xD000000000000014;
    case 0x39:
      return 0xD000000000000011;
    case 0x3A:
      unsigned int v3 = 1701867605;
LABEL_51:
      uint64_t result = v3 | 0x7361637200000000;
      break;
    case 0x3B:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x3C:
      uint64_t result = 0x70535F6574696857;
      break;
    case 0x3D:
      uint64_t result = 0x746E6F435F444958;
      break;
    case 0x3E:
      uint64_t result = 0x726174535F444958;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
      uint64_t result = 0x5F73646E61707845;
      break;
    default:
      uint64_t result = 0x65485F4949435341;
      break;
  }
  return result;
}

double RegexValidator.validateCharacterProperty(_:at:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x270FA5388](v6, v7);
  unint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  outlined init with copy of AST.Atom(a1, (uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      switch(*v9)
      {
        case 5:
        case 0x12:
        case 0x17:
        case 0x1B:
        case 0x1D:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x32:
          LOBYTE(v56) = *v9;
          v13._uint64_t countAndFlagsBits = Unicode.BinaryProperty.rawValue.getter();
          *(void *)&long long v56 = 39;
          *((void *)&v56 + 1) = 0xE100000000000000;
          String.append(_:)(v13);
          swift_bridgeObjectRelease();
          v14._uint64_t countAndFlagsBits = 39;
          v14._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v14);
          long long v15 = v56;
          *(void *)&long long v56 = 0;
          *((void *)&v56 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(29);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          long long v56 = v15;
          v16._uint64_t object = (void *)0x800000020D9DF620;
          v16._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v16);
          long long v17 = v56;
          uint64_t v18 = *(char **)(v3 + 32);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
          }
          unint64_t v19 = *((void *)v18 + 2);
          unint64_t v20 = *((void *)v18 + 3);
          unint64_t v21 = v19 + 1;
          if (v19 >= v20 >> 1)
          {
            uint64_t v49 = v18;
            unint64_t v50 = *((void *)v18 + 2);
            uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v19 + 1, 1, v49);
            unint64_t v19 = v50;
            uint64_t v18 = v51;
          }
          *((void *)v18 + 2) = v21;
          unint64_t v22 = &v18[80 * v19];
          v22[32] = 1;
          *(_OWORD *)(v22 + 40) = v17;
          *((void *)v22 + 7) = v11;
          *((void *)v22 + 8) = v10;
          *(_OWORD *)(v22 + 72) = v15;
          *((void *)v22 + 11) = 0;
          *((void *)v22 + 12) = 0;
          char v23 = 29;
          goto LABEL_34;
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
          LOBYTE(v56) = *v9;
          v38._uint64_t countAndFlagsBits = Unicode.BinaryProperty.rawValue.getter();
          *(void *)&long long v56 = 39;
          *((void *)&v56 + 1) = 0xE100000000000000;
          String.append(_:)(v38);
          swift_bridgeObjectRelease();
          v39._uint64_t countAndFlagsBits = 39;
          v39._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v39);
          Swift::String v40 = (Swift::String)v56;
          *(void *)&long long v56 = 0;
          *((void *)&v56 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(57);
          String.append(_:)(v40);
          v41._uint64_t countAndFlagsBits = 0xD000000000000037;
          v41._uint64_t object = (void *)0x800000020D9DF5E0;
          String.append(_:)(v41);
          long long v42 = v56;
          uint64_t v18 = *(char **)(v3 + 32);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
          }
          unint64_t v44 = *((void *)v18 + 2);
          unint64_t v43 = *((void *)v18 + 3);
          unint64_t v45 = v44 + 1;
          if (v44 >= v43 >> 1)
          {
            unint64_t v55 = v44 + 1;
            unint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v18);
            unint64_t v45 = v55;
            uint64_t v18 = v52;
          }
          *((void *)v18 + 2) = v45;
          unint64_t v22 = &v18[80 * v44];
          v22[32] = 1;
          *(_OWORD *)(v22 + 40) = v42;
          *((void *)v22 + 7) = v11;
          *((void *)v22 + 8) = v10;
          *(Swift::String *)(v22 + 72) = v40;
          *((void *)v22 + 11) = 0;
          *((void *)v22 + 12) = 0;
          char v23 = 30;
LABEL_34:
          v22[104] = v23;
          swift_bridgeObjectRelease();
          goto LABEL_26;
        default:
          return *(double *)&v12;
      }
    case 4u:
    case 5u:
    case 7u:
    case 8u:
      outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      return *(double *)&v12;
    case 0xAu:
      *(void *)&long long v56 = 0;
      *((void *)&v56 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      *(void *)&long long v56 = 0xD000000000000016;
      *((void *)&v56 + 1) = 0x800000020D9E00B0;
      v24._uint64_t object = (void *)0x800000020D9DF620;
      v24._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v24);
      long long v25 = v56;
      uint64_t v18 = *(char **)(v3 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
      }
      unint64_t v26 = *((void *)v18 + 2);
      unint64_t v27 = *((void *)v18 + 3);
      unint64_t v28 = v26 + 1;
      if (v26 >= v27 >> 1)
      {
        long long v46 = v18;
        unint64_t v47 = *((void *)v18 + 2);
        uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v26 + 1, 1, v46);
        unint64_t v26 = v47;
        uint64_t v18 = v48;
      }
      *((void *)v18 + 2) = v28;
      uint64_t v29 = &v18[80 * v26];
      v29[32] = 1;
      *(_OWORD *)(v29 + 40) = v25;
      *((void *)v29 + 7) = v11;
      *((void *)v29 + 8) = v10;
      *((void *)v29 + 9) = 0xD000000000000016;
      *((void *)v29 + 10) = 0x800000020D9E00B0;
      goto LABEL_25;
    case 0xCu:
      *(void *)&long long v56 = 0;
      *((void *)&v56 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      strcpy((char *)&v56, "PCRE property");
      HIWORD(v56) = -4864;
      v30._uint64_t object = (void *)0x800000020D9DF620;
      v30._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v30);
      long long v31 = v56;
      uint64_t v18 = *(char **)(v3 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
      }
      unint64_t v33 = *((void *)v18 + 2);
      unint64_t v32 = *((void *)v18 + 3);
      if (v33 >= v32 >> 1) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v18);
      }
      *((void *)v18 + 2) = v33 + 1;
      uint64_t v29 = &v18[80 * v33];
      v29[32] = 1;
      *(_OWORD *)(v29 + 40) = v31;
      *((void *)v29 + 7) = v11;
      *((void *)v29 + 8) = v10;
      long long v12 = xmmword_20D9D7600;
      goto LABEL_24;
    case 0xDu:
      *(void *)&long long v56 = 0;
      *((void *)&v56 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      strcpy((char *)&v56, "Java property");
      HIWORD(v56) = -4864;
      v34._uint64_t object = (void *)0x800000020D9DF620;
      v34._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v34);
      long long v35 = v56;
      uint64_t v18 = *(char **)(v3 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
      }
      unint64_t v37 = *((void *)v18 + 2);
      unint64_t v36 = *((void *)v18 + 3);
      if (v37 >= v36 >> 1) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v18);
      }
      *((void *)v18 + 2) = v37 + 1;
      uint64_t v29 = &v18[80 * v37];
      v29[32] = 1;
      *(_OWORD *)(v29 + 40) = v35;
      *((void *)v29 + 7) = v11;
      *((void *)v29 + 8) = v10;
      long long v12 = xmmword_20D9D75F0;
LABEL_24:
      *(_OWORD *)(v29 + 72) = v12;
LABEL_25:
      *((void *)v29 + 11) = 0;
      *((void *)v29 + 12) = 0;
      v29[104] = 29;
LABEL_26:
      *(void *)(v3 + 32) = v18;
      break;
    case 0xEu:
      outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      *(void *)&long long v56 = v11;
      *((void *)&v56 + 1) = v10;
      *(double *)&long long v12 = RegexValidator.expectInvalid(at:)(&v56);
      break;
    default:
      return *(double *)&v12;
  }
  return *(double *)&v12;
}

void RegexValidator.validateAtom(_:inCustomCharacterClass:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v10, v11);
  Swift::String v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(a1, (uint64_t)v13, type metadata accessor for AST.Atom.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      return;
    case 2u:
      outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.Atom.Kind);
      if (a2)
      {
        unint64_t v19 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        *(void *)&long long v107 = 0xD000000000000029;
        *((void *)&v107 + 1) = 0x800000020D9E0040;
        v22._uint64_t object = (void *)0x800000020D9DF620;
        v22._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v22);
        long long v23 = v107;
        Swift::String v24 = *(char **)(v3 + 32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v26 = *((void *)v24 + 2);
        unint64_t v25 = *((void *)v24 + 3);
        if (v26 >= v25 >> 1) {
          Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v24);
        }
        *((void *)v24 + 2) = v26 + 1;
        unint64_t v27 = &v24[80 * v26];
        v27[32] = 1;
        *(_OWORD *)(v27 + 40) = v23;
        *((void *)v27 + 7) = v20;
        *((void *)v27 + 8) = v21;
        *((void *)v27 + 9) = 0xD000000000000029;
        *((void *)v27 + 10) = 0x800000020D9E0040;
        goto LABEL_48;
      }
      return;
    case 3u:
      outlined init with take of AST.Atom.Kind((uint64_t)v13, (uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty);
      long long v107 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
      RegexValidator.validateCharacterProperty(_:at:)((uint64_t)v9, (uint64_t *)&v107);
      outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty);
      return;
    case 4u:
      char v28 = *v13;
      uint64_t v29 = type metadata accessor for AST.Atom(0);
      if (((1 << v28) & 0x67FFF7BF) == 0)
      {
        long long v106 = *(_OWORD *)(a1 + *(int *)(v29 + 20));
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = 0xE000000000000000;
        v30._uint64_t countAndFlagsBits = 23591;
        v30._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v30);
        LOBYTE(v113) = v28;
        AST.Atom.EscapedBuiltin.character.getter();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 39;
        v31._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        long long v32 = v107;
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        long long v107 = v32;
        v33._uint64_t object = (void *)0x800000020D9DF620;
        v33._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v33);
        long long v34 = v107;
        Swift::String v24 = *(char **)(v3 + 32);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v36 = *((void *)v24 + 2);
        unint64_t v35 = *((void *)v24 + 3);
        long long v37 = v106;
        if (v36 >= v35 >> 1)
        {
          unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v24);
          long long v37 = v106;
          Swift::String v24 = v99;
        }
        *((void *)v24 + 2) = v36 + 1;
        Swift::String v38 = &v24[80 * v36];
        v38[32] = 1;
        *(_OWORD *)(v38 + 40) = v34;
        *(_OWORD *)(v38 + 56) = v37;
        *(_OWORD *)(v38 + 72) = v32;
        *((void *)v38 + 11) = 0;
        *((void *)v38 + 12) = 0;
        v38[104] = 29;
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      return;
    case 5u:
    case 6u:
    case 7u:
      outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.Atom.Kind);
      Swift::String v14 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v17 = 0xD000000000000010;
      uint64_t v18 = "control sequence";
      goto LABEL_43;
    case 9u:
      uint64_t v39 = *(void *)v13;
      unint64_t v40 = *((void *)v13 + 1);
      uint64_t v42 = *((void *)v13 + 2);
      uint64_t v41 = *((void *)v13 + 3);
      int v43 = v13[32];
      char v44 = v13[72];
      unint64_t v45 = *((void *)v13 + 11);
      *(void *)&long long v106 = *((void *)v13 + 10);
      if ((v44 & 1) == 0)
      {
        unint64_t v104 = v40;
        unint64_t v105 = v45;
        long long v103 = *(_OWORD *)(v13 + 56);
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        *(void *)&long long v107 = 0x6F69737275636572;
        *((void *)&v107 + 1) = 0xEF6C6576656C206ELL;
        v46._uint64_t object = (void *)0x800000020D9DF620;
        v46._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v46);
        long long v47 = v107;
        uint64_t v48 = *(char **)(v3 + 32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
        }
        unint64_t v50 = *((void *)v48 + 2);
        unint64_t v49 = *((void *)v48 + 3);
        if (v50 >= v49 >> 1) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v48);
        }
        *((void *)v48 + 2) = v50 + 1;
        uint64_t v51 = &v48[80 * v50];
        v51[32] = 1;
        *(_OWORD *)(v51 + 40) = v47;
        *(_OWORD *)(v51 + 56) = v103;
        *(_OWORD *)(v51 + 72) = xmmword_20D9D7630;
        *((void *)v51 + 11) = 0;
        *((void *)v51 + 12) = 0;
        v51[104] = 29;
        *(void *)(v3 + 32) = v48;
        unint64_t v40 = v104;
        unint64_t v45 = v105;
      }
      if (!v43)
      {
        if ((v40 & 1) == 0)
        {
          if (v39 < *(void *)(*(void *)(v3 + 24) + 16)) {
            goto LABEL_71;
          }
          unint64_t v104 = v42;
          unint64_t v105 = v45;
          *(void *)&long long v107 = 0;
          *((void *)&v107 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          *(void *)&long long v107 = 0xD000000000000014;
          *((void *)&v107 + 1) = 0x800000020D9DF5C0;
          uint64_t v113 = v39;
          v85._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          long long v86 = v107;
          uint64_t v53 = *(char **)(v3 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v53 + 2) + 1, 1, v53);
          }
          unint64_t v88 = *((void *)v53 + 2);
          unint64_t v87 = *((void *)v53 + 3);
          if (v88 >= v87 >> 1) {
            uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v88 + 1, 1, v53);
          }
          *((void *)v53 + 2) = v88 + 1;
          long long v56 = &v53[80 * v88];
          v56[32] = 1;
          *(_OWORD *)(v56 + 40) = v86;
          unint64_t v89 = v105;
          *((void *)v56 + 7) = v106;
          *((void *)v56 + 8) = v89;
          *((void *)v56 + 9) = v39;
          *((void *)v56 + 10) = 0;
          *((void *)v56 + 11) = 0;
          *((void *)v56 + 12) = 0;
          char v59 = 31;
          goto LABEL_60;
        }
        goto LABEL_70;
      }
      if (v43 == 1)
      {
        if ((v40 & 1) == 0)
        {
          unint64_t v104 = v42;
          unint64_t v105 = v45;
          *(void *)&long long v107 = 0;
          *((void *)&v107 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(29);
          swift_bridgeObjectRelease();
          *(void *)&long long v107 = 0xD00000000000001ALL;
          *((void *)&v107 + 1) = 0x800000020D9E00D0;
          v52._uint64_t object = (void *)0x800000020D9DF620;
          v52._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v52);
          uint64_t v102 = *((void *)&v107 + 1);
          *(void *)&long long v103 = v107;
          uint64_t v53 = *(char **)(v3 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v53 + 2) + 1, 1, v53);
          }
          unint64_t v55 = *((void *)v53 + 2);
          unint64_t v54 = *((void *)v53 + 3);
          if (v55 >= v54 >> 1) {
            uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v53);
          }
          *((void *)v53 + 2) = v55 + 1;
          long long v56 = &v53[80 * v55];
          v56[32] = 1;
          uint64_t v57 = v102;
          *((void *)v56 + 5) = v103;
          *((void *)v56 + 6) = v57;
          unint64_t v58 = v105;
          *((void *)v56 + 7) = v106;
          *((void *)v56 + 8) = v58;
          *((void *)v56 + 9) = 0xD00000000000001ALL;
          *((void *)v56 + 10) = 0x800000020D9E00D0;
          *((void *)v56 + 11) = 0;
          *((void *)v56 + 12) = 0;
          char v59 = 29;
LABEL_60:
          v56[104] = v59;
          *(void *)(v3 + 32) = v53;
          uint64_t v42 = v104;
          goto LABEL_71;
        }
LABEL_70:
        *(void *)&long long v107 = v106;
        *((void *)&v107 + 1) = v45;
        RegexValidator.expectInvalid(at:)(&v107);
        goto LABEL_71;
      }
      uint64_t v90 = HIBYTE(v40) & 0xF;
      if ((v40 & 0x2000000000000000) == 0) {
        uint64_t v90 = v39 & 0xFFFFFFFFFFFFLL;
      }
      if (v90)
      {
        *(void *)&long long v107 = *(void *)(v3 + 24);
        v91._uint64_t countAndFlagsBits = v39;
        v91._uint64_t object = (void *)v40;
        Swift::Int_optional v114 = CaptureList.indexOfCapture(named:)(v91);
        if (v114.is_nil)
        {
          *(void *)&long long v107 = v39;
          *((void *)&v107 + 1) = v40;
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          LOBYTE(v110) = 32;
          outlined copy of AST.Reference.Kind(v39, v40, v42, v41, 2);
          unint64_t v105 = ParseError.description.getter();
          uint64_t v93 = v92;
          unint64_t v94 = *(char **)(v3 + 32);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v94 + 2) + 1, 1, v94);
          }
          unint64_t v96 = *((void *)v94 + 2);
          unint64_t v95 = *((void *)v94 + 3);
          unint64_t v97 = v96 + 1;
          if (v96 >= v95 >> 1)
          {
            unint64_t v104 = v96 + 1;
            uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v95 > 1), v96 + 1, 1, v94);
            unint64_t v97 = v104;
            unint64_t v94 = v100;
          }
          *((void *)v94 + 2) = v97;
          long long v98 = &v94[80 * v96];
          v98[32] = 1;
          *((void *)v98 + 5) = v105;
          *((void *)v98 + 6) = v93;
          *((void *)v98 + 7) = v106;
          *((void *)v98 + 8) = v45;
          *((void *)v98 + 9) = v39;
          *((void *)v98 + 10) = v40;
          *((void *)v98 + 11) = 0;
          *((void *)v98 + 12) = 0;
          v98[104] = 32;
          outlined consume of AST.Reference.Kind(v39, v40, v42, v41, 2);
          *(void *)(v3 + 32) = v94;
        }
      }
LABEL_71:
      outlined consume of AST.Reference.Kind(v39, v40, v42, v41, v43);
      return;
    case 0xAu:
      outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.Atom.Kind);
      uint64_t v60 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
      uint64_t v61 = *v60;
      uint64_t v62 = v60[1];
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      *(void *)&long long v107 = 0x6574746170627573;
      *((void *)&v107 + 1) = 0xEA00000000006E72;
      v63._uint64_t object = (void *)0x800000020D9DF620;
      v63._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v63);
      long long v64 = v107;
      Swift::String v24 = *(char **)(v3 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
      }
      unint64_t v66 = *((void *)v24 + 2);
      unint64_t v65 = *((void *)v24 + 3);
      if (v66 >= v65 >> 1) {
        Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v66 + 1;
      unint64_t v27 = &v24[80 * v66];
      v27[32] = 1;
      *(_OWORD *)(v27 + 40) = v64;
      *((void *)v27 + 7) = v61;
      *((void *)v27 + 8) = v62;
      long long v67 = xmmword_20D9D7620;
      goto LABEL_41;
    case 0xBu:
      outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.Atom.Kind);
      Swift::String v68 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
      uint64_t v69 = *v68;
      uint64_t v70 = v68[1];
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      *(void *)&long long v107 = 0x74756F6C6C6163;
      *((void *)&v107 + 1) = 0xE700000000000000;
      v71._uint64_t object = (void *)0x800000020D9DF620;
      v71._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v71);
      long long v72 = v107;
      Swift::String v24 = *(char **)(v3 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
      }
      unint64_t v74 = *((void *)v24 + 2);
      unint64_t v73 = *((void *)v24 + 3);
      if (v74 >= v73 >> 1) {
        Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v74 + 1;
      unint64_t v27 = &v24[80 * v74];
      v27[32] = 1;
      *(_OWORD *)(v27 + 40) = v72;
      *((void *)v27 + 7) = v69;
      *((void *)v27 + 8) = v70;
      long long v67 = xmmword_20D9D7610;
LABEL_41:
      *(_OWORD *)(v27 + 72) = v67;
      goto LABEL_48;
    case 0xCu:
      outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.Atom.Kind);
      uint64_t v75 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
      uint64_t v15 = *v75;
      uint64_t v16 = v75[1];
      *(void *)&long long v107 = 0;
      *((void *)&v107 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      unint64_t v17 = 0xD000000000000016;
      uint64_t v18 = "backtracking directive";
LABEL_43:
      uint64_t v76 = v18 - 32;
      *(void *)&long long v107 = v17;
      *((void *)&v107 + 1) = (unint64_t)(v18 - 32) | 0x8000000000000000;
      v77._uint64_t object = (void *)0x800000020D9DF620;
      v77._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v77);
      long long v78 = v107;
      Swift::String v24 = *(char **)(v3 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
      }
      unint64_t v80 = *((void *)v24 + 2);
      unint64_t v79 = *((void *)v24 + 3);
      if (v80 >= v79 >> 1) {
        Swift::String v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v80 + 1;
      unint64_t v27 = &v24[80 * v80];
      v27[32] = 1;
      *(_OWORD *)(v27 + 40) = v78;
      *((void *)v27 + 7) = v15;
      *((void *)v27 + 8) = v16;
      *((void *)v27 + 9) = v17;
      *((void *)v27 + 10) = (unint64_t)v76 | 0x8000000000000000;
LABEL_48:
      *((void *)v27 + 11) = 0;
      *((void *)v27 + 12) = 0;
      v27[104] = 29;
LABEL_49:
      *(void *)(v3 + 32) = v24;
      return;
    case 0xDu:
      char v81 = v13[16];
      uint64_t v82 = *((void *)v13 + 3);
      char v83 = v13[48];
      uint64_t v84 = *((void *)v13 + 7);
      long long v107 = *(_OWORD *)v13;
      LOBYTE(v108) = v81;
      uint64_t v109 = v82;
      long long v110 = *((_OWORD *)v13 + 2);
      char v111 = v83;
      uint64_t v112 = v84;
      RegexValidator.validateMatchingOptions(_:)((uint64_t)&v107);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    case 0x11u:
      long long v107 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
      RegexValidator.expectInvalid(at:)(&v107);
      return;
    default:
      outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.Atom.Kind);
      return;
  }
}

uint64_t RegexValidator.validateCharacterClassMember(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v2 - 8, v3);
  unint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v16);
  uint64_t v18 = (uint64_t *)((char *)&v34 - v17);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v34 - v17, type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of AST.Atom.Kind((uint64_t)v18, (uint64_t)v9, type metadata accessor for AST.CustomCharacterClass.Range);
      RegexValidator.validateCharacterClassRange(_:)((uint64_t)v9);
      unint64_t v19 = type metadata accessor for AST.CustomCharacterClass.Range;
      uint64_t v20 = (uint64_t)v9;
      return outlined destroy of AST.Atom(v20, v19);
    case 2u:
      outlined init with take of AST.Atom.Kind((uint64_t)v18, (uint64_t)v5, type metadata accessor for AST.Atom);
      RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v5, 1);
      unint64_t v19 = type metadata accessor for AST.Atom;
      uint64_t v20 = (uint64_t)v5;
      return outlined destroy of AST.Atom(v20, v19);
    case 3u:
    case 4u:
      unint64_t v19 = type metadata accessor for AST.CustomCharacterClass.Member;
      uint64_t v20 = (uint64_t)v18;
      return outlined destroy of AST.Atom(v20, v19);
    case 5u:
      uint64_t v26 = *v18;
      uint64_t v27 = v18[4];
      uint64_t v28 = *(void *)(*v18 + 16);
      if (!v28) {
        goto LABEL_15;
      }
      unint64_t v29 = 0;
      do
      {
        if (v29 >= *(void *)(v26 + 16)) {
          goto LABEL_22;
        }
        unint64_t v30 = v29 + 1;
        outlined init with copy of AST.Atom(v26+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v29, (uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
        RegexValidator.validateCharacterClassMember(_:)(v15);
        outlined destroy of AST.Atom((uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
        unint64_t v29 = v30;
      }
      while (v28 != v30);
LABEL_15:
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v27 + 16);
      if (!v31) {
        return swift_bridgeObjectRelease();
      }
      unint64_t v32 = 0;
      while (v32 < *(void *)(v27 + 16))
      {
        unint64_t v33 = v32 + 1;
        outlined init with copy of AST.Atom(v27+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v32, (uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
        RegexValidator.validateCharacterClassMember(_:)(v15);
        outlined destroy of AST.Atom((uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
        unint64_t v32 = v33;
        if (v31 == v33) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_23;
    default:
      uint64_t v21 = v18[3];
      uint64_t v22 = *(void *)(v21 + 16);
      if (!v22) {
        return swift_bridgeObjectRelease();
      }
      unint64_t v23 = 0;
      do
      {
        if (v23 >= *(void *)(v21 + 16))
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x20D99C7DCLL);
        }
        unint64_t v24 = v23 + 1;
        outlined init with copy of AST.Atom(v21+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v23, (uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
        RegexValidator.validateCharacterClassMember(_:)(v15);
        outlined destroy of AST.Atom((uint64_t)v15, type metadata accessor for AST.CustomCharacterClass.Member);
        unint64_t v23 = v24;
      }
      while (v22 != v24);
      return swift_bridgeObjectRelease();
  }
}

uint64_t RegexValidator.validateCharacterClassRange(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom(0);
  uint64_t v6 = MEMORY[0x270FA5388](v4, v5);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v9);
  uint64_t v11 = (char *)&v58 - v10;
  outlined init with copy of AST.Atom(a1, (uint64_t)&v58 - v10, type metadata accessor for AST.Atom);
  uint64_t v12 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  outlined init with copy of AST.Atom(a1 + *(int *)(v12 + 24), (uint64_t)v8, type metadata accessor for AST.Atom);
  RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v11, 1);
  RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v8, 1);
  if ((AST.Atom.isValidCharacterClassRangeBound.getter() & 1) == 0)
  {
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    unint64_t v33 = &v11[*(int *)(v4 + 20)];
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *((void *)v33 + 1);
    uint64_t v36 = (uint64_t)v11;
LABEL_17:
    outlined destroy of AST.Atom(v36, type metadata accessor for AST.Atom);
    uint64_t v27 = *(char **)(v1 + 32);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
      uint64_t v27 = (char *)result;
    }
    unint64_t v39 = *((void *)v27 + 2);
    unint64_t v38 = *((void *)v27 + 3);
    if (v39 >= v38 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v27);
      uint64_t v27 = (char *)result;
    }
    *((void *)v27 + 2) = v39 + 1;
    unint64_t v40 = &v27[80 * v39];
    v40[32] = 1;
    *((void *)v40 + 5) = 0xD000000000000027;
    *((void *)v40 + 6) = 0x800000020D9DF990;
    *((void *)v40 + 7) = v34;
    *((void *)v40 + 8) = v35;
    *((void *)v40 + 9) = 16;
    *((void *)v40 + 10) = 0;
    *((void *)v40 + 11) = 0;
    *((void *)v40 + 12) = 0;
    char v41 = 36;
    goto LABEL_22;
  }
  if ((AST.Atom.isValidCharacterClassRangeBound.getter() & 1) == 0)
  {
    outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
    long long v37 = &v8[*(int *)(v4 + 20)];
    uint64_t v34 = *(void *)v37;
    uint64_t v35 = *((void *)v37 + 1);
    uint64_t v36 = (uint64_t)v8;
    goto LABEL_17;
  }
  uint64_t v13 = AST.Atom.literalCharacterValue.getter();
  if (!v14)
  {
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    uint64_t v42 = &v11[*(int *)(v4 + 20)];
    uint64_t v43 = *(void *)v42;
    uint64_t v44 = *((void *)v42 + 1);
    outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
    unint64_t v61 = 0;
    unint64_t v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v61 = 0xD00000000000001DLL;
    unint64_t v62 = 0x800000020D9E00F0;
    v45._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v45._uint64_t object = (void *)0x800000020D9DF620;
    String.append(_:)(v45);
    unint64_t v46 = v61;
    unint64_t v47 = v62;
    uint64_t v27 = *(char **)(v1 + 32);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
      uint64_t v27 = (char *)result;
    }
    unint64_t v49 = *((void *)v27 + 2);
    unint64_t v48 = *((void *)v27 + 3);
    if (v49 >= v48 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v27);
      uint64_t v27 = (char *)result;
    }
    *((void *)v27 + 2) = v49 + 1;
    unint64_t v40 = &v27[80 * v49];
    v40[32] = 1;
    *((void *)v40 + 5) = v46;
    *((void *)v40 + 6) = v47;
    *((void *)v40 + 7) = v43;
    *((void *)v40 + 8) = v44;
    goto LABEL_35;
  }
  unint64_t v15 = v13;
  unint64_t v16 = v14;
  outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
  uint64_t v17 = AST.Atom.literalCharacterValue.getter();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    unint64_t v50 = &v8[*(int *)(v4 + 20)];
    uint64_t v51 = *(void *)v50;
    uint64_t v52 = *((void *)v50 + 1);
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    unint64_t v61 = 0;
    unint64_t v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v61 = 0xD00000000000001DLL;
    unint64_t v62 = 0x800000020D9E00F0;
    v53._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v53._uint64_t object = (void *)0x800000020D9DF620;
    String.append(_:)(v53);
    unint64_t v54 = v61;
    unint64_t v55 = v62;
    uint64_t v27 = *(char **)(v1 + 32);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
      uint64_t v27 = (char *)result;
    }
    unint64_t v57 = *((void *)v27 + 2);
    unint64_t v56 = *((void *)v27 + 3);
    if (v57 >= v56 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v27);
      uint64_t v27 = (char *)result;
    }
    *((void *)v27 + 2) = v57 + 1;
    unint64_t v40 = &v27[80 * v57];
    v40[32] = 1;
    *((void *)v40 + 5) = v54;
    *((void *)v40 + 6) = v55;
    *((void *)v40 + 7) = v51;
    *((void *)v40 + 8) = v52;
LABEL_35:
    *((void *)v40 + 9) = 0xD00000000000001DLL;
    *((void *)v40 + 10) = 0x800000020D9E00F0;
    *((void *)v40 + 11) = 0;
    *((void *)v40 + 12) = 0;
    char v41 = 29;
LABEL_22:
    v40[104] = v41;
LABEL_23:
    *(void *)(v2 + 32) = v27;
    return result;
  }
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
  BOOL v21 = v19 == v15 && v20 == v16;
  if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v61 = v15;
    unint64_t v62 = v16;
    uint64_t v63 = v19;
    uint64_t v64 = v20;
    char v65 = 35;
    uint64_t v22 = (uint64_t *)(a1 + *(int *)(v12 + 20));
    uint64_t v23 = *v22;
    uint64_t v59 = v22[1];
    uint64_t v60 = v23;
    unint64_t v24 = ParseError.description.getter();
    uint64_t v26 = v25;
    uint64_t v27 = *(char **)(v1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    if (v29 >= v28 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v29 + 1;
    unint64_t v30 = &v27[80 * v29];
    v30[32] = 1;
    *((void *)v30 + 5) = v24;
    *((void *)v30 + 6) = v26;
    uint64_t v31 = v59;
    *((void *)v30 + 7) = v60;
    *((void *)v30 + 8) = v31;
    *((void *)v30 + 9) = v15;
    *((void *)v30 + 10) = v16;
    *((void *)v30 + 11) = v19;
    *((void *)v30 + 12) = v20;
    v30[104] = 35;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t specialized Source.peekPrefix(maxLength:_:)(uint64_t a1, char a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_27:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v8) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = result;
    }
    if (v9 >> 14 < v4 >> 14) {
      goto LABEL_26;
    }
  }
  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    v24[0] = Substring.subscript.getter();
    v24[1] = v14;
    key path getter for Character.isWordCharacter : Character(v24, &v23);
    swift_bridgeObjectRelease();
    if (v23)
    {
      while (1)
      {
        unint64_t result = Substring.index(after:)();
        unint64_t v15 = result >> 14;
        if (result >> 14 == v13) {
          break;
        }
        uint64_t v16 = Substring.subscript.getter();
        uint64_t v18 = v17;
        if ((Character.isLetter.getter() & 1) != 0
          || (Character.isNumber.getter() & 1) != 0
          || v16 == 95 && v18 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          unint64_t result = swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v13 = v15;
            break;
          }
        }
      }
      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_25;
      }
    }
  }
  uint64_t v20 = Substring.subscript.getter();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (!((v20 ^ v22) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  uint64_t v31 = type metadata accessor for Unicode.Scalar.Properties();
  unint64_t v4 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  char v8 = String.subscript.getter();
  unint64_t v10 = v9;
  unint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if (v10 >> 14 < v8 >> 14)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v12) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = result;
    }
    if (v13 >> 14 < v8 >> 14) {
      goto LABEL_36;
    }
  }
  uint64_t v14 = Substring.subscript.getter();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 >> 14;
  unint64_t v28 = v14 >> 14;
  if (v14 >> 14 != v16 >> 14)
  {
    uint64_t v18 = Substring.subscript.getter();
    unint64_t result = specialized Collection.first.getter(v18, v19);
    if ((result & 0x100000000) != 0)
    {
LABEL_37:
      __break(1u);
      return result;
    }
    Unicode.Scalar.properties.getter();
    uint64_t v20 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    unint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v30 = v4 + 8;
    v29(v7, v31);
    swift_bridgeObjectRelease();
    if (v20)
    {
      while (1)
      {
        unint64_t result = Substring.index(after:)();
        unint64_t v21 = result >> 14;
        if (result >> 14 == v17) {
          break;
        }
        unint64_t result = Substring.subscript.getter();
        if ((v22 & 0x2000000000000000) != 0) {
          char v23 = HIBYTE(v22) & 0xF;
        }
        else {
          char v23 = result & 0xFFFFFFFFFFFFLL;
        }
        if (!v23)
        {
          __break(1u);
          goto LABEL_33;
        }
        if ((v22 & 0x1000000000000000) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v22 & 0x2000000000000000) != 0)
          {
            unint64_t v32 = result;
            unint64_t v33 = v22 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((result & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          _decodeScalar(_:startingAt:)();
        }
        Unicode.Scalar.properties.getter();
        unint64_t v24 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
        v29(v7, v31);
        unint64_t result = swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          uint64_t v17 = v21;
          break;
        }
      }
      if (v17 >= v28) {
        goto LABEL_29;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
LABEL_29:
  uint64_t v25 = Substring.subscript.getter();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (!((v25 ^ v27) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v25;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if (v6 >> 14 >= v4 >> 14) {
      goto LABEL_9;
    }
LABEL_30:
    __break(1u);
    return result;
  }
  if (a1 < 0) {
    goto LABEL_28;
  }
  unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v8) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = result;
  }
  if (v9 >> 14 < v4 >> 14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_9:
  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v10 >> 14;
  uint64_t v14 = v12 >> 14;
  if (v10 >> 14 == v12 >> 14) {
    goto LABEL_23;
  }
  if (Substring.subscript.getter() == 123 && v15 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      goto LABEL_23;
    }
  }
  unint64_t result = Substring.index(after:)();
  uint64_t v17 = result >> 14;
  if (result >> 14 == v14)
  {
LABEL_22:
    if (v14 < v13) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  while (1)
  {
    if (Substring.subscript.getter() == 123 && v19 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      break;
    }
LABEL_17:
    unint64_t result = Substring.index(after:)();
    uint64_t v17 = result >> 14;
    if (result >> 14 == v14)
    {
      unint64_t v13 = v10 >> 14;
      goto LABEL_22;
    }
  }
  if (v17 < v10 >> 14)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_23:
  uint64_t v20 = Substring.subscript.getter();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (!((v20 ^ v22) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v8) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = result;
    }
    if (v9 >> 14 < v4 >> 14) {
      goto LABEL_22;
    }
  }
  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    uint64_t v14 = Substring.subscript.getter();
    uint64_t v16 = Character.isOctalDigit.getter(v14, v15);
    swift_bridgeObjectRelease();
    if (v16)
    {
      unint64_t result = Substring.index(after:)();
      uint64_t v17 = result >> 14;
      if (result >> 14 != v13)
      {
        uint64_t v18 = Substring.subscript.getter();
        uint64_t v20 = Character.isOctalDigit.getter(v18, v19);
        unint64_t result = swift_bridgeObjectRelease();
        if (v20)
        {
          while (1)
          {
            unint64_t result = Substring.index(after:)();
            uint64_t v17 = result >> 14;
            if (result >> 14 == v13) {
              break;
            }
            unint64_t v21 = Substring.subscript.getter();
            char v23 = Character.isOctalDigit.getter(v21, v22);
            unint64_t result = swift_bridgeObjectRelease();
            if ((v23 & 1) == 0) {
              goto LABEL_15;
            }
          }
        }
        else
        {
LABEL_15:
          unint64_t v13 = v17;
        }
      }
      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_21;
      }
    }
  }
  unint64_t v24 = Substring.subscript.getter();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (!((v24 ^ v26) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v24;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  swift_bridgeObjectRetain();
  unint64_t v4 = String.subscript.getter();
  unint64_t v6 = v5;
  unint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v8) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = result;
    }
    if (v9 >> 14 < v4 >> 14) {
      goto LABEL_22;
    }
  }
  unint64_t v10 = Substring.subscript.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    Substring.subscript.getter();
    Character.hexDigitValue.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      unint64_t result = Substring.index(after:)();
      uint64_t v16 = result >> 14;
      if (result >> 14 != v13)
      {
        Substring.subscript.getter();
        Character.hexDigitValue.getter();
        uint64_t v18 = v17;
        unint64_t result = swift_bridgeObjectRelease();
        if (v18)
        {
LABEL_15:
          unint64_t v13 = v16;
        }
        else
        {
          while (1)
          {
            unint64_t result = Substring.index(after:)();
            uint64_t v16 = result >> 14;
            if (result >> 14 == v13) {
              break;
            }
            Substring.subscript.getter();
            Character.hexDigitValue.getter();
            uint64_t v20 = v19;
            unint64_t result = swift_bridgeObjectRelease();
            if (v20) {
              goto LABEL_15;
            }
          }
        }
      }
      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_21;
      }
    }
  }
  unint64_t v21 = Substring.subscript.getter();
  char v23 = v22;
  swift_bridgeObjectRelease();
  if (!((v21 ^ v23) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v21;
}

unint64_t Source.peekPrefix(maxLength:_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  swift_bridgeObjectRetain();
  unint64_t v6 = String.subscript.getter();
  unint64_t v8 = v7;
  unint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    if (v8 >> 14 < v6 >> 14)
    {
LABEL_24:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v10) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = result;
    }
    if (v11 >> 14 < v6 >> 14) {
      goto LABEL_23;
    }
  }
  unint64_t v12 = Substring.subscript.getter();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t v15 = v12 >> 14;
  unint64_t v16 = v14 >> 14;
  if (v12 >> 14 != v14 >> 14)
  {
    uint64_t v17 = Substring.subscript.getter();
    char v18 = a3(v17);
    swift_bridgeObjectRelease();
    if (v18)
    {
      uint64_t v25 = a3;
      unint64_t result = Substring.index(after:)();
      unint64_t v19 = result >> 14;
      if (result >> 14 != v16)
      {
        while (1)
        {
          uint64_t v20 = Substring.subscript.getter();
          char v21 = v25(v20);
          unint64_t result = swift_bridgeObjectRelease();
          if ((v21 & 1) == 0) {
            break;
          }
          unint64_t result = Substring.index(after:)();
          unint64_t v19 = result >> 14;
          if (result >> 14 == v16) {
            goto LABEL_16;
          }
        }
        unint64_t v16 = v19;
LABEL_16:
        unint64_t v15 = v12 >> 14;
      }
      if (v16 < v15)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }
  uint64_t v22 = Substring.subscript.getter();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if ((v22 ^ v24) < 0x4000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v22;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3 ^ a4;
  swift_bridgeObjectRetain();
  if (v5 >= 0x4000)
  {
    while (1)
    {
      uint64_t v9 = Substring.subscript.getter();
      unint64_t v11 = v10;
      uint64_t v12 = Substring.index(after:)();
      Swift::String_optional v13 = String.Iterator.next()();
      if (!v13.value._object) {
        break;
      }
      if (v9 == v13.value._countAndFlagsBits && v13.value._object == v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          goto LABEL_3;
        }
      }
      if ((v12 ^ a4) < 0x4000) {
        goto LABEL_2;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_2:
    uint64_t object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    if (object)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return 1;
}

uint64_t Source.Location.range.getter()
{
  return *(void *)v0;
}

uint64_t Source.Location.range.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Source.Location.range.modify())()
{
  return AST.root.modify;
}

double Source.Location.init<A>(_:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  swift_bridgeObjectRelease();
  double result = *(double *)&v7;
  *a3 = v7;
  return result;
}

uint64_t Source.Location.init(from:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a2 >> 14 < a1 >> 14)
  {
    __break(1u);
  }
  else
  {
    *a3 = a1;
    a3[1] = a2;
  }
  return result;
}

BOOL Source.Location.isFake.getter()
{
  return *v0 < 0x4000uLL && v0[1] < 0x4000uLL;
}

BOOL Source.Location.isReal.getter()
{
  return ((*v0 | v0[1]) & 0xFFFFFFFFFFFFC000) != 0;
}

void Source.Location.hash(into:)()
{
  unint64_t v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int Source.Location.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 Source.LocatedError.location.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 36));
  *a2 = result;
  return result;
}

uint64_t Source.LocatedError.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for Source.LocatedError();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 36));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t Source.LocatedError._typeErasedError.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v1, v2);
  return v3;
}

uint64_t Source.LocatedError.error.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Source.Located.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Source.Located.value.modify())()
{
  return AST.root.modify;
}

__n128 Source.Located.location.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 28));
  *a2 = result;
  return result;
}

__n128 Source.Located.location.setter(__n128 *a1, uint64_t a2)
{
  __n128 result = *a1;
  *(__n128 *)(v2 + *(int *)(a2 + 28)) = *a1;
  return result;
}

uint64_t (*Source.Located.location.modify())()
{
  return AST.root.modify;
}

int64x2_t Source.Located.init(faking:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v4 = type metadata accessor for Source.Located();
  int64x2_t result = vdupq_n_s64(0xFuLL);
  *(int64x2_t *)(a3 + *(int *)(v4 + 28)) = result;
  return result;
}

uint64_t Source.Located.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v13(v5);
  if (!v6)
  {
    unint64_t v15 = (uint64_t *)(v5 + *(int *)(a3 + 28));
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a4);
    uint64_t result = type metadata accessor for Source.Located();
    char v18 = (void *)(a5 + *(int *)(result + 28));
    *char v18 = v16;
    v18[1] = v17;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
  return static Source.Located<A>.== infix(_:_:)(a1, a2);
}

void specialized Source.Located<A>.hash(into:)()
{
  outlined init with take of ParseError((long long *)v0, (uint64_t)v6);
  outlined init with take of ParseError(v6, (uint64_t)&v7);
  Swift::UInt v1 = v7;
  if (v11)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    char v2 = v8;
    unint64_t v4 = v9;
    unint64_t v3 = v10;
    Hasher._combine(_:)(0);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  unint64_t v5 = *(void *)(v0 + 48);
  Hasher._combine(_:)(*(void *)(v0 + 40) >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

void Source.Located<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v4 = (void *)(v2 + *(int *)(a2 + 28));
  unint64_t v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int Source.Located<A>.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Source.Located<A>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> Source.Located<A>(uint64_t a1)
{
  return Source.Located<A>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Source.Located<A>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t Source.LocatedError.description.getter()
{
  return 0;
}

uint64_t SyntaxOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t SyntaxOptions.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*SyntaxOptions.rawValue.modify())()
{
  return AST.root.modify;
}

_RegexParser::SyntaxOptions __swiftcall SyntaxOptions.init(rawValue:)(_RegexParser::SyntaxOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

_RegexParser::SyntaxOptions __swiftcall SyntaxOptions.init()()
{
  *uint64_t v0 = 0;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance SyntaxOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance SyntaxOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance SyntaxOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance SyntaxOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SyntaxOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SyntaxOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance SyntaxOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance SyntaxOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance SyntaxOptions(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance SyntaxOptions(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SyntaxOptions(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance SyntaxOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SyntaxOptions(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SyntaxOptions(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SyntaxOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SyntaxOptions()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance SyntaxOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance SyntaxOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance SyntaxOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SyntaxOptions(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SyntaxOptions(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1)
{
  AST.Node._associatedValue.getter(v34);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v35, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
    v34[0] = a1;
    AST.Node._associatedValue.getter((uint64_t *)&v35);
    uint64_t v19 = *((void *)&v36 + 1);
    uint64_t v20 = v37;
    __swift_project_boxed_opaque_existential_1Tm(&v35, *((uint64_t *)&v36 + 1));
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)(v20 + 8) + 24))(v19);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v35);
    return v21;
  }
  uint64_t v2 = *((void *)&v36 + 1);
  uint64_t v3 = v37;
  __swift_project_boxed_opaque_existential_1Tm(&v35, *((uint64_t *)&v36 + 1));
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v35);
  uint64_t result = swift_release();
  uint64_t v6 = *(void *)(v4 + 16);
  if (!v6)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    goto LABEL_20;
  }
  unint64_t v7 = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
  do
  {
    unint64_t v9 = v7;
    while (1)
    {
      if (v9 >= *(void *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v4 + 32 + 8 * v9);
      if (v10 >> 60 != 6) {
        break;
      }
LABEL_5:
      if (v6 == ++v9) {
        goto LABEL_20;
      }
    }
    swift_retain();
    uint64_t v11 = specialized _ASTPrintable._dump()(v10);
    unint64_t v13 = v12;
    swift_release();
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      uint64_t v8 = result;
    }
    unint64_t v16 = *(void *)(v8 + 16);
    unint64_t v15 = *(void *)(v8 + 24);
    unint64_t v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, (char *)v8);
      unint64_t v17 = v16 + 1;
      uint64_t v8 = result;
    }
    unint64_t v7 = v9 + 1;
    *(void *)(v8 + 16) = v17;
    uint64_t v18 = v8 + 16 * v16;
    *(void *)(v18 + 32) = v11;
    *(void *)(v18 + 40) = v13;
  }
  while (v6 - 1 != v9);
LABEL_20:
  swift_bridgeObjectRelease();
  v34[0] = a1;
  AST.Node._associatedValue.getter((uint64_t *)&v35);
  uint64_t v23 = *((void *)&v36 + 1);
  uint64_t v22 = v37;
  __swift_project_boxed_opaque_existential_1Tm(&v35, *((uint64_t *)&v36 + 1));
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)(v22 + 8) + 24))(v23);
  unint64_t v25 = v24;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v35);
  uint64_t v26 = *(void *)(v8 + 16);
  if (v26)
  {
    if (v26 != 1) {
      goto LABEL_25;
    }
    uint64_t v27 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v27 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v27)
    {
LABEL_25:
      *(void *)&long long v35 = v21;
      *((void *)&v35 + 1) = v25;
      v28._uint64_t countAndFlagsBits = 40;
      v28._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      v34[0] = v8;
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
      uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = v29;
      v32._uint64_t object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 41;
      v33._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      return v35;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      uint64_t v21 = *(void *)(v8 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
LABEL_31:
    __break(1u);
  }
  else
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return v21;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v6 = v4 <= v2 ? v2 : v4;
      unint64_t v7 = v4;
      while (1)
      {
        if (v6 == v7)
        {
          __break(1u);
          return result;
        }
        uint64_t v8 = *(void *)(a1 + 32 + 8 * v7);
        if (v8 >> 60 != 6) {
          break;
        }
LABEL_7:
        if (v2 == ++v7) {
          goto LABEL_21;
        }
      }
      swift_retain();
      unint64_t v9 = specialized _ASTPrintable._dump()(v8);
      uint64_t v11 = v10;
      swift_release();
      unint64_t v12 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0) {
        unint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
      }
      if (!v12) {
        break;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
        uint64_t v5 = result;
      }
      uint64_t v14 = *(void *)(v5 + 16);
      unint64_t v13 = *(void *)(v5 + 24);
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v5);
        uint64_t v5 = result;
      }
      uint64_t v4 = v7 + 1;
      *(void *)(v5 + 16) = v14 + 1;
      unint64_t v15 = v5 + 16 * v14;
      *(void *)(v15 + 32) = v9;
      *(void *)(v15 + 40) = v11;
      if (v2 - 1 == v7) {
        goto LABEL_21;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_21:
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void *)(v5 + 16);
  if (v16)
  {
    if (v16 == 1)
    {
      unint64_t v17 = *(void *)(v5 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18._uint64_t countAndFlagsBits = 40;
      v18._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
      uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = v19;
      v22._uint64_t object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 41;
      v23._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v17;
}

{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  void v28[2];

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    goto LABEL_21;
  }
  uint64_t v4 = 0;
  uint64_t v5 = MEMORY[0x263F8EE78];
  do
  {
    if (v4 <= v2) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = v4;
    }
    unint64_t v7 = v4;
    while (1)
    {
      if (v6 == v7)
      {
        __break(1u);
        goto LABEL_32;
      }
      uint64_t v8 = *(void *)(a1 + 32 + 8 * v7);
      if (v8 >> 60 != 6) {
        break;
      }
LABEL_7:
      if (v2 == ++v7) {
        goto LABEL_21;
      }
    }
    swift_retain();
    unint64_t v9 = specialized _ASTPrintable._dump()(v8);
    uint64_t v11 = v10;
    swift_release();
    unint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v12)
    {
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
      uint64_t v5 = result;
    }
    uint64_t v14 = *(void *)(v5 + 16);
    unint64_t v13 = *(void *)(v5 + 24);
    unint64_t v15 = v14 + 1;
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v5);
      unint64_t v15 = v14 + 1;
      uint64_t v5 = result;
    }
    uint64_t v4 = v7 + 1;
    *(void *)(v5 + 16) = v15;
    unint64_t v16 = v5 + 16 * v14;
    *(void *)(v16 + 32) = v9;
    *(void *)(v16 + 40) = v11;
  }
  while (v2 - 1 != v7);
LABEL_21:
  swift_bridgeObjectRelease();
  strcpy((char *)v28, "alternation<");
  BYTE5(v28[1]) = 0;
  HIWORD(v28[1]) = -5120;
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 62;
  v18._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v28[0];
  uint64_t v20 = *(void *)(v5 + 16);
  if (v20)
  {
    if (v20 != 1) {
      goto LABEL_26;
    }
    uint64_t v21 = HIBYTE(v28[1]) & 0xF;
    if ((v28[1] & 0x2000000000000000) == 0) {
      uint64_t v21 = v28[0] & 0xFFFFFFFFFFFFLL;
    }
    if (v21)
    {
LABEL_26:
      v22._uint64_t countAndFlagsBits = 40;
      v22._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
      uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = v23;
      v26._uint64_t object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 41;
      v27._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      return v28[0];
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v5 + 16))
    {
      uint64_t v19 = *(void *)(v5 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
LABEL_32:
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, uint64_t a2)
{
  String.append(_:)(*(Swift::String *)&a1);
  v2._uint64_t countAndFlagsBits = 34;
  v2._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x222065746F7571;
}

uint64_t specialized _ASTPrintable._dump()()
{
  outlined init with take of AST.Node((void *)v0 + 13, &v38);
  long long v1 = v0[5];
  long long v34 = v0[4];
  long long v35 = v1;
  long long v2 = v0[7];
  long long v36 = v0[6];
  long long v37 = v2;
  long long v3 = v0[1];
  long long v30 = *v0;
  long long v31 = v3;
  long long v4 = v0[3];
  long long v32 = v0[2];
  long long v33 = v4;
  outlined init with take of AST.Node(&v38, &v29);
  outlined retain of AST.Node((uint64_t)&v38);
  uint64_t v5 = v29;
  if (v29 >> 60 == 6) {
    goto LABEL_11;
  }
  swift_retain();
  uint64_t v6 = specialized _ASTPrintable._dump()(v5);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_12;
  }
  unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  unint64_t v13 = v12 + 1;
  if (v12 >= v11 >> 1)
  {
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
    unint64_t v13 = v12 + 1;
    unint64_t v10 = v27;
  }
  *((void *)v10 + 2) = v13;
  uint64_t v14 = &v10[16 * v12];
  *((void *)v14 + 4) = v6;
  *((void *)v14 + 5) = v8;
LABEL_12:
  swift_arrayDestroy();
  uint64_t v15 = AST.Group._dumpBase.getter();
  uint64_t v17 = v15;
  uint64_t v18 = *((void *)v10 + 2);
  if (!v18)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v17;
  }
  if (v18 != 1) {
    goto LABEL_17;
  }
  uint64_t v19 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
LABEL_17:
    uint64_t v28 = v15;
    v20._uint64_t countAndFlagsBits = 40;
    v20._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = v21;
    v24._uint64_t object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 41;
    v25._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    return v28;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v10 + 2))
  {
    uint64_t v17 = *((void *)v10 + 4);
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

{
  Swift::String *v0;
  Swift::String v1;

  String.append(_:)(v0[1]);
  v1._uint64_t countAndFlagsBits = 93;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 91;
}

{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  long long v3 = AST.Atom._dumpBase.getter();
  v0._uint64_t countAndFlagsBits = 45;
  v0._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  v1._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  long long *v0;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t result;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;

  outlined init with take of AST.Node((void *)v0 + 13, &v39);
  long long v1 = v0[7];
  long long v36 = v0[6];
  long long v37 = v1;
  uint64_t v38 = *((void *)v0 + 16);
  long long v2 = v0[3];
  long long v32 = v0[2];
  long long v33 = v2;
  long long v3 = v0[5];
  long long v34 = v0[4];
  long long v35 = v3;
  long long v4 = v0[1];
  long long v30 = *v0;
  long long v31 = v4;
  outlined init with take of AST.Node(&v39, &v29);
  outlined retain of AST.Node((uint64_t)&v39);
  uint64_t v5 = v29;
  if (v29 >> 60 == 6) {
    goto LABEL_11;
  }
  swift_retain();
  uint64_t v6 = specialized _ASTPrintable._dump()(v5);
  unint64_t v8 = v7;
  swift_release();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_12;
  }
  unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  unint64_t v13 = v12 + 1;
  if (v12 >= v11 >> 1)
  {
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
    unint64_t v13 = v12 + 1;
    unint64_t v10 = v27;
  }
  *((void *)v10 + 2) = v13;
  uint64_t v14 = &v10[16 * v12];
  *((void *)v14 + 4) = v6;
  *((void *)v14 + 5) = v8;
LABEL_12:
  swift_arrayDestroy();
  uint64_t v15 = AST.Quantification._dumpBase.getter();
  uint64_t v17 = v15;
  uint64_t v18 = *((void *)v10 + 2);
  if (!v18)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v17;
  }
  if (v18 != 1) {
    goto LABEL_17;
  }
  uint64_t v19 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
LABEL_17:
    uint64_t v28 = v15;
    v20._uint64_t countAndFlagsBits = 40;
    v20._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = v21;
    v24._uint64_t object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 41;
    v25._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    return v28;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v10 + 2))
  {
    uint64_t v17 = *((void *)v10 + 4);
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t v9;

  long long v1 = (void *)0xE90000000000003ELL;
  long long v2 = 0x64696C61766E693CLL;
  long long v3 = 0x64696C61766E693CLL;
  if ((*(unsigned char *)(v0 + 8) & 1) == 0) {
    long long v3 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  uint64_t v9 = v3;
  long long v4 = *(unsigned char *)(v0 + 40);
  v5._uint64_t countAndFlagsBits = 46;
  v5._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if ((v4 & 1) == 0)
  {
    long long v2 = dispatch thunk of CustomStringConvertible.description.getter();
    long long v1 = v6;
  }
  v7._uint64_t countAndFlagsBits = v2;
  v7._uint64_t object = v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

{
  unsigned char *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;

  if (*v0) {
    long long v1 = 15678;
  }
  else {
    long long v1 = 61;
  }
  if (*v0) {
    long long v2 = 0xE200000000000000;
  }
  else {
    long long v2 = 0xE100000000000000;
  }
  long long v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x4E4F4953524556;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, char a2)
{
  if (a2) {
    return 0x64696C61766E693CLL;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

unint64_t specialized _ASTPrintable._dump()(uint64_t a1)
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = MEMORY[0x210561950](a1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

uint64_t specialized _ASTPrintable._dump()(char a1)
{
  return *(void *)&aEager_0[8 * a1];
}

{
  if (a1) {
    return 15678;
  }
  else {
    return 61;
  }
}

unint64_t specialized _ASTPrintable._dump()()
{
  outlined init with take of AST.AbsentFunction.Kind((_OWORD *)(v0 + 16), v30);
  outlined init with take of AST.AbsentFunction.Kind(v30, &v31);
  switch((v32 >> 1) & 3)
  {
    case 1u:
      v32 &= 0xFFFFFFFFFFFFFFF9;
      uint64_t v4 = v32;
      uint64_t v5 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_20D9D7470;
      *(void *)(v2 + 32) = v5;
      *(void *)(v2 + 40) = v4;
      uint64_t v3 = 2;
      goto LABEL_4;
    case 3u:
      outlined release of AST.AbsentFunction((uint64_t *)v0);
      uint64_t v2 = MEMORY[0x263F8EE78];
      uint64_t v3 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v7 = (char *)MEMORY[0x263F8EE78];
      if (!v3) {
        goto LABEL_21;
      }
      goto LABEL_5;
    default:
      v32 &= 0xFFFFFFFFFFFFFFF9;
      uint64_t v1 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_20D9D7460;
      *(void *)(v2 + 32) = v1;
      uint64_t v3 = 1;
LABEL_4:
      outlined retain of AST.AbsentFunction((uint64_t *)v0);
LABEL_5:
      unint64_t v6 = 0;
      unint64_t v7 = (char *)MEMORY[0x263F8EE78];
      break;
  }
  do
  {
    unint64_t v8 = v6;
    while (1)
    {
      if (v8 >= *(void *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
      unint64_t v9 = *(void *)(v2 + 32 + 8 * v8);
      if (v9 >> 60 != 6) {
        break;
      }
LABEL_8:
      if (v3 == ++v8) {
        goto LABEL_21;
      }
    }
    swift_retain();
    uint64_t v10 = specialized _ASTPrintable._dump()(v9);
    unint64_t v12 = v11;
    swift_release();
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    }
    unint64_t v15 = *((void *)v7 + 2);
    unint64_t v14 = *((void *)v7 + 3);
    if (v15 >= v14 >> 1) {
      unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v7);
    }
    unint64_t v6 = v8 + 1;
    *((void *)v7 + 2) = v15 + 1;
    unint64_t v16 = &v7[16 * v15];
    *((void *)v16 + 4) = v10;
    *((void *)v16 + 5) = v12;
  }
  while (v3 - 1 != v8);
LABEL_21:
  swift_bridgeObjectRelease();
  unint64_t v17 = AST.AbsentFunction._dumpBase.getter();
  unint64_t v19 = v17;
  uint64_t v20 = *((void *)v7 + 2);
  if (!v20)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return v19;
  }
  if (v20 == 1)
  {
    uint64_t v21 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0) {
      uint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (!v21)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v7 + 2))
      {
        unint64_t v19 = *((void *)v7 + 4);
        swift_bridgeObjectRetain();
        goto LABEL_29;
      }
LABEL_32:
      __break(1u);
      JUMPOUT(0x20D99F7E8);
    }
  }
  unint64_t v29 = v17;
  v22._uint64_t countAndFlagsBits = 40;
  v22._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
  uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v25 = v24;
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = v23;
  v26._uint64_t object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 41;
  v27._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return v29;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = a1;
  v4._uint64_t object = a2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 62;
  v5._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x6C6F707265746E69;
}

Swift::String __swiftcall _ASTPrintable._dump()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t isUniquelyReferenced_nonNull_native = _ASTPrintable._children.getter(v0, v1);
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v6 = isUniquelyReferenced_nonNull_native;
    uint64_t v7 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    if (v7)
    {
      unint64_t v8 = 0;
      unint64_t v9 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        long long v35 = v9;
        unint64_t v10 = v8;
        while (1)
        {
          if (v10 >= *(void *)(v6 + 16))
          {
            __break(1u);
            goto LABEL_33;
          }
          unint64_t v11 = *(void *)(v6 + 32 + 8 * v10);
          if (v11 >> 60 != 6) {
            break;
          }
LABEL_5:
          if (v7 == ++v10)
          {
            unint64_t v9 = v35;
            goto LABEL_22;
          }
        }
        swift_retain();
        uint64_t v12 = specialized _ASTPrintable._dump()(v11);
        unint64_t v14 = v13;
        swift_release();
        uint64_t v15 = HIBYTE(v14) & 0xF;
        if ((v14 & 0x2000000000000000) == 0) {
          uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
        }
        if (!v15) {
          break;
        }
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, (char *)v35);
          long long v35 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v17 = v35[2];
        unint64_t v16 = v35[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v16 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v35);
          unint64_t v18 = v17 + 1;
          long long v35 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v8 = v10 + 1;
        void v35[2] = v18;
        unint64_t v19 = &v35[2 * v17];
        v19[4] = v12;
        v19[5] = v14;
        BOOL v20 = v7 - 1 == v10;
        unint64_t v9 = v35;
        if (v20) {
          goto LABEL_22;
        }
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
    uint64_t v21 = v24;
    uint64_t v23 = (void *)v25;
    uint64_t v26 = v9[2];
    if (v26)
    {
      if (v26 != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = HIBYTE(v25) & 0xF;
      if ((v25 & 0x2000000000000000) == 0) {
        uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (v27)
      {
LABEL_27:
        uint64_t v36 = v24;
        long long v37 = (void *)v25;
        v28._uint64_t countAndFlagsBits = 40;
        v28._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        swift_getCanonicalSpecializedMetadata();
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
        uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
        long long v31 = v30;
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = v29;
        v32._uint64_t object = v31;
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        v33._uint64_t countAndFlagsBits = 41;
        v33._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v33);
        uint64_t v21 = v36;
        uint64_t v23 = v37;
        goto LABEL_31;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if (!v9[2])
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v21 = v9[4];
      uint64_t v23 = (void *)v9[5];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
  uint64_t v23 = v22;
LABEL_31:
  uint64_t isUniquelyReferenced_nonNull_native = v21;
  Swift::String v5 = v23;
LABEL_34:
  result._uint64_t object = v5;
  result._uint64_t countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

uint64_t _ASTPrintable._children.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v8);
  unint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v9((char *)&v18[-1] - v10, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (!swift_dynamicCast())
  {
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for _ASTParent?);
    v9(v7, v2, a1);
    if (swift_dynamicCast())
    {
      uint64_t v17 = v19;
      AST.Node._associatedValue.getter(v18);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
      if (swift_dynamicCast())
      {
        uint64_t v14 = *((void *)&v20 + 1);
        uint64_t v15 = v21;
        __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
        swift_release();
        return v13;
      }
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for _ASTParent?);
      swift_release();
    }
    return 0;
  }
  uint64_t v11 = *((void *)&v20 + 1);
  uint64_t v12 = v21;
  __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
  return v13;
}

uint64_t AST._dumpBase.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  if (v1)
  {
    v7._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()(v1);
    v7._uint64_t object = v3;
    v4._uint64_t countAndFlagsBits = 32;
    v4._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  v5._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()(v2);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST()
{
  return AST._dumpBase.getter();
}

uint64_t AST.Node._dumpBase.getter()
{
  AST.Node._associatedValue.getter(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 24))(v0);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Node()
{
  AST.Node._associatedValue.getter(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 24))(v0);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Node()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Conditional.Condition._dumpBase.getter()
{
  outlined init with take of AST.Conditional.Condition.Kind(v0, v5);
  uint64_t v3 = 0;
  unint64_t v4 = 0xE000000000000000;
  outlined init with take of AST.Conditional.Condition.Kind(v5, v2);
  _print_unlocked<A, B>(_:_:)();
  return v3;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Conditional.Condition()
{
  outlined init with take of AST.Conditional.Condition.Kind(v0, v5);
  uint64_t v3 = 0;
  unint64_t v4 = 0xE000000000000000;
  outlined init with take of AST.Conditional.Condition.Kind(v5, v2);
  _print_unlocked<A, B>(_:_:)();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.Conditional.Condition.PCREVersionCheck.Kind._dumpBase.getter()
{
  if (*v0) {
    return 15678;
  }
  else {
    return 61;
  }
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  if (*v0) {
    return 15678;
  }
  else {
    return 61;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Conditional.Condition.PCREVersionNumber._dumpBase.getter()
{
  uint64_t v1 = (void *)0xE90000000000003ELL;
  uint64_t v2 = 0x64696C61766E693CLL;
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = 0x64696C61766E693CLL;
  if ((*(unsigned char *)(v0 + 8) & 1) == 0) {
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  uint64_t v9 = v4;
  v5._uint64_t countAndFlagsBits = 46;
  v5._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if ((v3 & 1) == 0)
  {
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v1 = v6;
  }
  v7._uint64_t countAndFlagsBits = v2;
  v7._uint64_t object = v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Conditional.Condition.PCREVersionCheck._dumpBase.getter()
{
  if (*v0) {
    uint64_t v1 = 15678;
  }
  else {
    uint64_t v1 = 61;
  }
  if (*v0) {
    unint64_t v2 = 0xE200000000000000;
  }
  else {
    unint64_t v2 = 0xE100000000000000;
  }
  unint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x4E4F4953524556;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Reference._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 72);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = 0;
  if ((v2 & 1) == 0)
  {
    if (v1)
    {
      unint64_t v6 = 0xE90000000000003ELL;
      uint64_t v4 = 0x64696C61766E693CLL;
    }
    else
    {
      uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v6 = v5;
    }
    unint64_t v7 = v6;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t AST.Atom.Number._dumpBase.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x64696C61766E693CLL;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Number()
{
  return specialized _ASTPrintable._dump()(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t AST.Atom.Callout._dumpBase.getter()
{
  outlined init with take of AST.Atom.Callout(v0, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
    }
    else
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
    }
  }
  else
  {
    AST.root.modify(v5);
    unint64_t v3 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
    return (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))(&type metadata for AST.Atom.Callout.PCRE, v3);
  }
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Atom.Callout()
{
  outlined init with take of AST.Atom.Callout(v0, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  int v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
    }
    else
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
    }
  }
  else
  {
    AST.root.modify(v5);
    unint64_t v3 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
    return (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))(&type metadata for AST.Atom.Callout.PCRE, v3);
  }
}

uint64_t AST.Atom.Callout.PCRE._dumpBase.getter()
{
  v0._uint64_t countAndFlagsBits = 0x6C61632045524350;
  v0._uint64_t object = (void *)0xED00002074756F6CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Atom.Callout.PCRE()
{
  v0._uint64_t countAndFlagsBits = 0x6C61632045524350;
  v0._uint64_t object = (void *)0xED00002074756F6CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.PCRE(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.Atom.Callout.OnigurumaTag._dumpBase.getter()
{
  String.append(_:)(v0[1]);
  v1._uint64_t countAndFlagsBits = 93;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 91;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.OnigurumaTag()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    unint64_t v4 = 0;
    unint64_t v5 = (uint64_t *)(v1 + 40);
    while (v4 < *(void *)(v1 + 16))
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = *(void *)(v16 + 16);
      unint64_t v8 = *(void *)(v16 + 24);
      uint64_t result = swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      }
      ++v4;
      *(void *)(v16 + 16) = v9 + 1;
      uint64_t v10 = v16 + 16 * v9;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = v6;
      v5 += 4;
      if (v2 == v4) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
    uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = v11;
    v14._uint64_t object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 125;
    v15._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    return 123;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  return AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter();
}

unint64_t AST.Atom.Callout.OnigurumaNamed._dumpBase.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = (void *)v0[1];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[14];
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = v1;
  v5._uint64_t object = v2;
  String.append(_:)(v5);
  if (v3)
  {
    v6._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  if (v4)
  {
    v7._uint64_t countAndFlagsBits = AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  return 0xD000000000000018;
}

unint64_t AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter()
{
  uint64_t v1 = v0[2];
  int64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[11];
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._uint64_t object = v2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 125;
  v5._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if (v3)
  {
    v6._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  v7._uint64_t countAndFlagsBits = 32;
  v7._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 0;
  v8._uint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Reference()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 72);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = 0;
  if ((v3 & 1) == 0)
  {
    v5._uint64_t countAndFlagsBits = specialized _ASTPrintable._dump()(v1, v2 & 1);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

unint64_t AST.Group.Kind._dumpBase.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  switch(*((unsigned char *)v0 + 80))
  {
    case 1:
      _StringGuts.grow(_:)(19);
      uint64_t v7 = swift_bridgeObjectRelease();
      unint64_t v21 = 0xD000000000000011;
      v15._uint64_t countAndFlagsBits = AST.Group.BalancedCapture._canonicalBase.getter(v7, v8, v9, v10, v11, v12, v13, v14);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2:
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v21 = 0xD000000000000016;
      v16._uint64_t countAndFlagsBits = AST.MatchingOptionSequence._dumpBase.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 62;
      v17._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v17);
LABEL_5:
      unint64_t result = v21;
      break;
    case 3:
      uint64_t v18 = v0[4] | v0[5] | v0[6];
      uint64_t v19 = v0[7] | v0[8] | v0[9];
      if (v4 | v2 | v1 | v3 | v18 | v19)
      {
        unint64_t result = 0x75747061436E6F6ELL;
        uint64_t v20 = v4 | v2 | v3 | v18 | v19;
        if ((v1 != 1 || v20) && (v1 != 2 || v20))
        {
          unint64_t result = 0xD000000000000012;
          if (v1 != 3 || v20)
          {
            if (v1 != 4 || v20)
            {
              if (v1 != 5 || v20)
              {
                if (v1 != 6 || v20)
                {
                  if (v1 != 7 || v20)
                  {
                    if (v1 != 8 || v20)
                    {
                      if (v1 != 9 || v20)
                      {
                        if (v1 == 10 && v20 == 0) {
                          unint64_t result = 0x7552747069726373;
                        }
                        else {
                          unint64_t result = 0x635363696D6F7461;
                        }
                      }
                      else
                      {
                        unint64_t result = 0xD000000000000013;
                      }
                    }
                  }
                  else
                  {
                    unint64_t result = 0x696865626B6F6F6CLL;
                  }
                }
              }
              else
              {
                unint64_t result = 0xD000000000000011;
              }
            }
            else
            {
              unint64_t result = 0x616568616B6F6F6CLL;
            }
          }
        }
      }
      else
      {
        unint64_t result = 0x65727574706163;
      }
      break;
    default:
      String.append(_:)(*(Swift::String *)v0);
      v5._uint64_t countAndFlagsBits = 62;
      v5._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      unint64_t result = 0x3C65727574706163;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group.Kind()
{
  return AST.Group.Kind._dumpBase.getter();
}

uint64_t AST.Group._dumpBase.getter()
{
  v0._uint64_t countAndFlagsBits = AST.Group.Kind._dumpBase.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x5F70756F7267;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Quantification.Amount._printBase.getter()
{
  return AST.Quantification.Amount._canonicalBase.getter();
}

uint64_t AST.Quantification.Amount._canonicalBase.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[3];
  unint64_t v4 = v0[5];
  switch(v4 >> 61)
  {
    case 1uLL:
      uint64_t v28 = 123;
      if (v2)
      {
        uint64_t v7 = 0x7265626D756E233CLL;
        unint64_t v9 = 0xEA00000000003E23;
      }
      else
      {
        uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v9 = v8;
      }
      unint64_t v27 = v9;
      String.append(_:)(*(Swift::String *)&v7);
      swift_bridgeObjectRelease();
      uint64_t v19 = 32044;
      unint64_t v20 = 0xE200000000000000;
      goto LABEL_30;
    case 2uLL:
      uint64_t v28 = 11387;
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      unint64_t v6 = 0xE90000000000003ELL;
      uint64_t v11 = 0x64696C61766E693CLL;
      uint64_t v28 = 123;
      uint64_t v12 = 0x64696C61766E693CLL;
      unint64_t v13 = 0xE90000000000003ELL;
      if ((v2 & 1) == 0)
      {
        uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v13 = v14;
      }
      unint64_t v15 = v13;
      String.append(_:)(*(Swift::String *)&v12);
      swift_bridgeObjectRelease();
      v16._uint64_t countAndFlagsBits = 44;
      v16._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      if ((v4 & 1) == 0)
      {
        uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v6 = v17;
      }
      uint64_t v5 = v11;
      goto LABEL_13;
    case 4uLL:
      uint64_t v21 = v0[2] | v2;
      uint64_t v22 = v0[4] | v0[6] | v0[7];
      if (v4 == 0x8000000000000000 && (v21 | v1 | v3 | v22) == 0) {
        return 42;
      }
      if (v21 | v3 | v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v1 == 1;
      }
      if (v24 && v4 == 0x8000000000000000) {
        return 43;
      }
      else {
        return 63;
      }
    default:
      uint64_t v28 = 123;
      if (v2)
      {
LABEL_3:
        uint64_t v5 = 0x7265626D756E233CLL;
        unint64_t v6 = 0xEA00000000003E23;
      }
      else
      {
LABEL_7:
        uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v6 = v10;
      }
LABEL_13:
      unint64_t v18 = v6;
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
      uint64_t v19 = 125;
      unint64_t v20 = 0xE100000000000000;
LABEL_30:
      String.append(_:)(*(Swift::String *)&v19);
      return v28;
  }
}

uint64_t AST.Quantification.Amount._dumpBase.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[3];
  unint64_t v4 = v0[5];
  switch(v4 >> 61)
  {
    case 1uLL:
      uint64_t v5 = 0x3C65726F4D724F6ELL;
      goto LABEL_18;
    case 2uLL:
      uint64_t v5 = 0x3C4E6F747075;
      goto LABEL_18;
    case 3uLL:
      unint64_t v14 = 0xE90000000000003ELL;
      uint64_t v15 = 0x64696C61766E693CLL;
      uint64_t v24 = 0x3C65676E61722ELL;
      uint64_t v16 = 0x64696C61766E693CLL;
      unint64_t v17 = 0xE90000000000003ELL;
      if ((v2 & 1) == 0)
      {
        uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v17 = v18;
      }
      unint64_t v19 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 3026478;
      v20._uint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v20);
      if ((v4 & 1) == 0)
      {
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v14 = v21;
      }
      uint64_t v12 = v15;
      goto LABEL_26;
    case 4uLL:
      uint64_t v6 = v0[2] | v2;
      uint64_t v7 = v0[4] | v0[6] | v0[7];
      if (v4 == 0x8000000000000000 && (v6 | v1 | v3 | v7) == 0) {
        return 0x6F4D724F6F72657ALL;
      }
      if (v6 | v3 | v7) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v1 == 1;
      }
      if (v9 && v4 == 0x8000000000000000) {
        return 0x726F4D724F656E6FLL;
      }
      else {
        return 0x6E4F724F6F72657ALL;
      }
    default:
      uint64_t v5 = 0x3C796C7463617865;
LABEL_18:
      uint64_t v24 = v5;
      if (v2)
      {
        uint64_t v12 = 0x64696C61766E693CLL;
        unint64_t v14 = 0xE90000000000003ELL;
      }
      else
      {
        uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v14 = v13;
      }
LABEL_26:
      unint64_t v22 = v14;
      String.append(_:)(*(Swift::String *)&v12);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 62;
      v23._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      return v24;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification.Amount()
{
  return AST.Quantification.Amount._dumpBase.getter();
}

uint64_t AST.Quantification.Kind._printBase.getter()
{
  uint64_t v1 = 63;
  if (*v0 != 1) {
    uint64_t v1 = 43;
  }
  if (*v0) {
    return v1;
  }
  else {
    return *v0;
  }
}

uint64_t AST.Quantification.Kind._dumpBase.getter()
{
  return *(void *)&aEager_0[8 * *v0];
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Quantification.Kind()
{
  return *(void *)&aEager_0[8 * *v0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification.Kind()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Quantification._printBase.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80);
  v2._uint64_t countAndFlagsBits = AST.Quantification.Amount._canonicalBase.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = 63;
  if (v1 != 1) {
    uint64_t v3 = 43;
  }
  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v1;
  }
  if (v1) {
    unint64_t v5 = 0xE100000000000000;
  }
  else {
    unint64_t v5 = 0xE000000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return 0x5F746E617571;
}

uint64_t AST.Quantification._dumpBase.getter()
{
  uint64_t v1 = *(char *)(v0 + 80);
  v2._uint64_t countAndFlagsBits = AST.Quantification.Amount._dumpBase.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 95;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = *(void *)&aEager_0[8 * v1];
  v4._uint64_t object = *(void **)&aReluctanposses[8 * v1 + 16];
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x5F746E617571;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification()
{
  return specialized _ASTPrintable._dump()();
}

unint64_t AST.CustomCharacterClass._dumpBase.getter()
{
  int v1 = *v0;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xD00000000000001FLL;
  unint64_t v17 = 0x800000020D9DDF40;
  if (v1 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x65736C6166;
      goto LABEL_6;
    }
  }
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = 1702195828;
LABEL_6:
  unint64_t v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8236;
  v6._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  AST.CustomCharacterClass.strippingTriviaShallow.getter((uint64_t)v15);
  uint64_t v7 = v15[3];
  uint64_t v8 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v9 = MEMORY[0x210561950](v7, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v9;
  v12._uint64_t object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.CustomCharacterClass@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.CustomCharacterClass()
{
  return AST.CustomCharacterClass._dumpBase.getter();
}

unint64_t AST.CustomCharacterClass.Member._dumpBase.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x270FA5388](v2 - 8, v3);
  unint64_t v5 = &v74[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v6 - 8, v7);
  uint64_t v9 = &v74[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  char v81 = &v74[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v76 = &v74[-v17];
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  unint64_t v21 = &v74[-v20];
  uint64_t v23 = MEMORY[0x270FA5388](v19, v22);
  uint64_t v82 = &v74[-v24];
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v28 = &v74[-v27];
  uint64_t v30 = MEMORY[0x270FA5388](v26, v29);
  Swift::String v32 = &v74[-v31];
  MEMORY[0x270FA5388](v30, v33);
  long long v35 = (uint64_t *)&v74[-v34];
  outlined init with copy of AST.Atom(v1, (uint64_t)&v74[-v34], type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of AST.Atom.Kind((uint64_t)v35, (uint64_t)v5, type metadata accessor for AST.CustomCharacterClass.Range);
      unint64_t v37 = specialized _ASTPrintable._dump()();
      outlined destroy of AST.Atom((uint64_t)v5, type metadata accessor for AST.CustomCharacterClass.Range);
      return v37;
    case 2u:
      outlined init with take of AST.Atom.Kind((uint64_t)v35, (uint64_t)v9, type metadata accessor for AST.Atom);
      unint64_t v37 = AST.Atom._dumpBase.getter();
      outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.Atom);
      return v37;
    case 3u:
      unint64_t v37 = specialized _ASTPrintable._dump()(*v35, v35[1]);
      swift_bridgeObjectRelease();
      return v37;
    case 4u:
      swift_bridgeObjectRelease();
      return 0;
    case 5u:
      uint64_t v38 = *v35;
      int v75 = *((unsigned __int8 *)v35 + 8);
      uint64_t v80 = v35[4];
      uint64_t v83 = 0;
      *(void *)&long long v84 = 0xE000000000000000;
      v39._uint64_t countAndFlagsBits = 2125935;
      v39._uint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v39);
      uint64_t v40 = MEMORY[0x263F8EE78];
      uint64_t v87 = MEMORY[0x263F8EE78];
      uint64_t v41 = *(void *)(v38 + 16);
      Swift::String v77 = v21;
      uint64_t v78 = v10;
      uint64_t v79 = v41;
      if (v41)
      {
        unint64_t v42 = 0;
        uint64_t v43 = MEMORY[0x263F8EE78];
        do
        {
          if (v42 >= *(void *)(v38 + 16))
          {
            __break(1u);
LABEL_36:
            __break(1u);
            JUMPOUT(0x20D9A2C48);
          }
          unint64_t v44 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
          uint64_t v45 = *(void *)(v11 + 72);
          outlined init with copy of AST.Atom(v38 + v44 + v45 * v42, (uint64_t)v32, type metadata accessor for AST.CustomCharacterClass.Member);
          outlined init with copy of AST.Atom((uint64_t)v32, (uint64_t)v28, type metadata accessor for AST.CustomCharacterClass.Member);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          outlined destroy of AST.Atom((uint64_t)v28, type metadata accessor for AST.CustomCharacterClass.Member);
          if (EnumCaseMultiPayload == 4)
          {
            outlined destroy of AST.Atom((uint64_t)v32, type metadata accessor for AST.CustomCharacterClass.Member);
          }
          else
          {
            outlined init with take of AST.Atom.Kind((uint64_t)v32, (uint64_t)v82, type metadata accessor for AST.CustomCharacterClass.Member);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1);
            }
            uint64_t v43 = v87;
            unint64_t v48 = *(void *)(v87 + 16);
            unint64_t v47 = *(void *)(v87 + 24);
            if (v48 >= v47 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
              uint64_t v43 = v87;
            }
            *(void *)(v43 + 16) = v48 + 1;
            outlined init with take of AST.Atom.Kind((uint64_t)v82, v43 + v44 + v48 * v45, type metadata accessor for AST.CustomCharacterClass.Member);
            uint64_t v10 = v78;
          }
          ++v42;
        }
        while (v79 != v42);
        uint64_t v49 = v87;
        uint64_t v50 = (uint64_t)v76;
        uint64_t v40 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v49 = MEMORY[0x263F8EE78];
        uint64_t v50 = (uint64_t)v76;
      }
      char v51 = v75;
      swift_bridgeObjectRelease();
      uint64_t v52 = MEMORY[0x210561950](v49, v10);
      unint64_t v54 = v53;
      swift_release();
      v55._uint64_t countAndFlagsBits = v52;
      v55._uint64_t object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 32;
      v56._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      LOBYTE(v87) = v51;
      _print_unlocked<A, B>(_:_:)();
      v57._uint64_t countAndFlagsBits = 32;
      v57._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      uint64_t v87 = v40;
      uint64_t v58 = v80;
      uint64_t v59 = *(void *)(v80 + 16);
      if (v59)
      {
        unint64_t v60 = 0;
        uint64_t v61 = MEMORY[0x263F8EE78];
        uint64_t v62 = (uint64_t)v77;
        do
        {
          if (v60 >= *(void *)(v58 + 16)) {
            goto LABEL_36;
          }
          unint64_t v63 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
          uint64_t v64 = *(void *)(v11 + 72);
          outlined init with copy of AST.Atom(v58 + v63 + v64 * v60, v62, type metadata accessor for AST.CustomCharacterClass.Member);
          outlined init with copy of AST.Atom(v62, v50, type metadata accessor for AST.CustomCharacterClass.Member);
          int v65 = swift_getEnumCaseMultiPayload();
          outlined destroy of AST.Atom(v50, type metadata accessor for AST.CustomCharacterClass.Member);
          if (v65 == 4)
          {
            outlined destroy of AST.Atom(v62, type metadata accessor for AST.CustomCharacterClass.Member);
          }
          else
          {
            outlined init with take of AST.Atom.Kind(v62, (uint64_t)v81, type metadata accessor for AST.CustomCharacterClass.Member);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v61 + 16) + 1, 1);
            }
            uint64_t v61 = v87;
            unint64_t v67 = *(void *)(v87 + 16);
            unint64_t v66 = *(void *)(v87 + 24);
            if (v67 >= v66 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
              uint64_t v61 = v87;
            }
            *(void *)(v61 + 16) = v67 + 1;
            outlined init with take of AST.Atom.Kind((uint64_t)v81, v61 + v63 + v67 * v64, type metadata accessor for AST.CustomCharacterClass.Member);
            uint64_t v10 = v78;
          }
          ++v60;
          uint64_t v58 = v80;
        }
        while (v59 != v60);
        uint64_t v68 = v87;
      }
      else
      {
        uint64_t v68 = v40;
      }
      swift_bridgeObjectRelease();
      uint64_t v69 = MEMORY[0x210561950](v68, v10);
      Swift::String v71 = v70;
      swift_release();
      v72._uint64_t countAndFlagsBits = v69;
      v72._uint64_t object = v71;
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      return v83;
    default:
      uint64_t v36 = v35[3];
      LOBYTE(v83) = *(unsigned char *)v35;
      long long v84 = *(_OWORD *)(v35 + 1);
      uint64_t v85 = v36;
      long long v86 = *((_OWORD *)v35 + 2);
      unint64_t v37 = AST.CustomCharacterClass._dumpBase.getter();
      swift_bridgeObjectRelease();
      return v37;
  }
}

uint64_t AST.CustomCharacterClass.Range._dumpBase.getter()
{
  uint64_t v3 = AST.Atom._dumpBase.getter();
  v0._uint64_t countAndFlagsBits = 45;
  v0._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  v1._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.CustomCharacterClass.Range()
{
  uint64_t v3 = AST.Atom._dumpBase.getter();
  v0._uint64_t countAndFlagsBits = 45;
  v0._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AST.Atom.BacktrackingDirective._dumpBase.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = 0;
  if (v2)
  {
    v4._uint64_t countAndFlagsBits = v1;
    v4._uint64_t object = v2;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 8250;
    v5._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.BacktrackingDirective()
{
  return AST.Atom.BacktrackingDirective._dumpBase.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group.BalancedCapture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return AST.Group.BalancedCapture._canonicalBase.getter(a1, a2, a3, a4, a5, a6, a7, a8, *v8, v8[1]);
}

uint64_t AST.AbsentFunction.Kind._dumpBase.getter()
{
  return *(void *)&aRepeaterexpres[8 * ((*(unsigned __int8 *)(v0 + 24) >> 1) & 3)];
}

uint64_t AST.GlobalMatchingOption.Kind._dumpBase.getter()
{
  return AST.GlobalMatchingOption.Kind._canonicalBase.getter();
}

uint64_t AST.GlobalMatchingOption.Kind._canonicalBase.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  switch(v2 >> 61)
  {
    case 1uLL:
      uint64_t v12 = 0x45485F54494D494CLL;
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 2uLL:
      uint64_t v3 = 0x414D5F54494D494CLL;
      goto LABEL_6;
    case 3uLL:
      uint64_t result = 5002574;
      switch(*v0)
      {
        case 1u:
          uint64_t result = 17996;
          break;
        case 2u:
          uint64_t result = 1179406915;
          break;
        case 3u:
          uint64_t result = 0x464C5243594E41;
          break;
        case 4u:
          uint64_t result = 5852737;
          break;
        case 5u:
          return result;
        default:
          uint64_t result = 21059;
          break;
      }
      return result;
    case 4uLL:
      if (v1) {
        return 0x43494E555F525342;
      }
      else {
        return 0x43594E415F525342;
      }
    case 5uLL:
      if (v2 == 0xA000000000000000 && (v0[3] | v0[2] | v1) == 0) {
        return 0x5954504D45544F4ELL;
      }
      uint64_t result = 0xD000000000000010;
      if (v2 != 0xA000000000000000 || v1 != 1 || *((_OWORD *)v0 + 1) != 0)
      {
        if (v2 == 0xA000000000000000 && v1 == 2 && *((_OWORD *)v0 + 1) == 0)
        {
          return 0x5F4F5455415F4F4ELL;
        }
        else if (v2 == 0xA000000000000000 && v1 == 3 && *((_OWORD *)v0 + 1) == 0)
        {
          return 0xD000000000000011;
        }
        else if (v2 == 0xA000000000000000 && v1 == 4 && *((_OWORD *)v0 + 1) == 0)
        {
          return 0x54494A5F4F4ELL;
        }
        else if (v2 == 0xA000000000000000 && v1 == 5 && *((_OWORD *)v0 + 1) == 0)
        {
          return 0x54524154535F4F4ELL;
        }
        else if (*((_OWORD *)v0 + 1) == 0 && v1 == 6 && v2 == 0xA000000000000000)
        {
          return 4609109;
        }
        else
        {
          return 5260117;
        }
      }
      return result;
    default:
      uint64_t v3 = 0x45445F54494D494CLL;
LABEL_6:
      uint64_t v12 = v3;
      if (v2)
      {
LABEL_4:
        uint64_t v4 = 0x7265626D756E233CLL;
        unint64_t v5 = 0xEA00000000003E23;
      }
      else
      {
LABEL_7:
        uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v5 = v6;
      }
      unint64_t v7 = v5;
      String.append(_:)(*(Swift::String *)&v4);
      swift_bridgeObjectRelease();
      return v12;
  }
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.GlobalMatchingOption.Kind()
{
  return AST.GlobalMatchingOption.Kind._canonicalBase.getter();
}

uint64_t AST.GlobalMatchingOption._dumpBase.getter()
{
  return AST.GlobalMatchingOption.Kind._canonicalBase.getter();
}

unint64_t AST.GlobalMatchingOptionSequence._dumpBase.getter()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = MEMORY[0x210561950](v1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.GlobalMatchingOptionSequence()
{
  uint64_t v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = MEMORY[0x210561950](v1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.GlobalMatchingOptionSequence()
{
  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t PrettyPrinter.maxTopDownLevels.getter()
{
  return *(void *)v0;
}

uint64_t PrettyPrinter.maxTopDownLevels.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PrettyPrinter.maxTopDownLevels.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.minBottomUpLevels.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PrettyPrinter.minBottomUpLevels.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*PrettyPrinter.minBottomUpLevels.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.indentWidth.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PrettyPrinter.indentWidth.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*PrettyPrinter.indentWidth.modify())()
{
  return AST.root.modify;
}

void PrettyPrinter.quantificationBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 72);
}

unsigned char *PrettyPrinter.quantificationBehavior.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 72) = *result;
  return result;
}

uint64_t (*PrettyPrinter.quantificationBehavior.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.inlineMatchingOptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrettyPrinter.inlineMatchingOptions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*PrettyPrinter.inlineMatchingOptions.modify())()
{
  return AST.root.modify;
}

void __swiftcall PrettyPrinter.init(maxTopDownLevels:minBottomUpLevels:)(_RegexParser::PrettyPrinter *__return_ptr retstr, Swift::Int_optional maxTopDownLevels, Swift::Int_optional minBottomUpLevels)
{
  retstr->maxTopDownLevels.value = maxTopDownLevels.value;
  retstr->maxTopDownLevels.is_nil = maxTopDownLevels.is_nil;
  retstr->minBottomUpLevels.value = minBottomUpLevels.value;
  retstr->minBottomUpLevels.is_nil = minBottomUpLevels.is_nil;
  *(_OWORD *)&retstr->indentWidth = xmmword_20D9D7490;
  retstr->result._uint64_t object = (void *)0xE000000000000000;
  retstr->startOfLine = 1;
  retstr->Swift::Int indentLevel = 0;
  retstr->quantificationBehavior = _RegexParser_AST_Quantification_Kind_eager;
  retstr->inlineMatchingOptions._rawValue = (void *)MEMORY[0x263F8EE78];
}

Swift::Void __swiftcall PrettyPrinter.output(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall PrettyPrinter.terminateLine()()
{
  v1._uint64_t countAndFlagsBits = 10;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  *(unsigned char *)(v0 + 56) = 1;
}

Swift::Void __swiftcall PrettyPrinter.indent()()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v0 + 64) * (__int128)*(uint64_t *)(v0 + 32)) >> 64 == (uint64_t)(*(void *)(v0 + 64) * *(void *)(v0 + 32)) >> 63)
    {
      v1._uint64_t countAndFlagsBits = MEMORY[0x210561880](32, 0xE100000000000000);
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v0 + 56) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t PrettyPrinter.depth.getter()
{
  return *(void *)(v0 + 64);
}

void PrettyPrinter.printLine(_:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t))a1;
  if (*(unsigned char *)(v1 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v1 + 64) * (__int128)*(uint64_t *)(v1 + 32)) >> 64 != (uint64_t)(*(void *)(v1 + 64) * *(void *)(v1 + 32)) >> 63)
    {
      __break(1u);
      return;
    }
    v3._uint64_t countAndFlagsBits = MEMORY[0x210561880](32, 0xE100000000000000);
    String.append(_:)(v3);
    a1 = swift_bridgeObjectRelease();
    *(unsigned char *)(v1 + 56) = 0;
  }
  uint64_t v4 = v2(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    do
    {
      uint64_t v7 = v6;
      String.append(_:)(*(Swift::String *)&v4);
      uint64_t v8 = swift_bridgeObjectRelease();
      uint64_t v4 = v2(v8);
      uint64_t v6 = v9;
    }
    while (v9);
  }
  v10._uint64_t countAndFlagsBits = 10;
  v10._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  *(unsigned char *)(v1 + 56) = 1;
}

uint64_t (*PrettyPrinter.printIndented(_:)(uint64_t (*result)(uint64_t)))(uint64_t)
{
  uint64_t v2 = *(void *)(v1 + 64);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 64) = v4;
    uint64_t result = (uint64_t (*)(uint64_t))result(v1);
    uint64_t v5 = *(void *)(v1 + 64);
    BOOL v3 = __OFSUB__(v5, 1);
    uint64_t v6 = v5 - 1;
    if (!v3)
    {
      *(void *)(v1 + 64) = v6;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall PrettyPrinter.pushMatchingOptions(_:isAdded:)(Swift::OpaquePointer _, Swift::Bool isAdded)
{
  uint64_t v6 = *(void *)(v3 + 64);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    Swift::Bool v2 = isAdded;
    rawValue = _._rawValue;
    *(void *)(v3 + 64) = v8;
    uint64_t v5 = *(void **)(v3 + 80);
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
LABEL_3:
  unint64_t v10 = v5[2];
  unint64_t v9 = v5[3];
  if (v10 >= v9 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
  }
  long long v5[2] = v10 + 1;
  uint64_t v11 = &v5[2 * v10];
  v11[4] = rawValue;
  *((unsigned char *)v11 + 40) = v2;
  *(void *)(v3 + 80) = v5;
}

Swift::tuple_OpaquePointer_Bool __swiftcall PrettyPrinter.popMatchingOptions()()
{
  uint64_t v2 = *(void *)(v1 + 64);
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(void *)(v1 + 64) = v4;
  uint64_t v0 = *(void **)(v1 + 80);
  if (!v0[2])
  {
LABEL_7:
    __break(1u);
LABEL_8:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v0);
    uint64_t v0 = (void *)isUniquelyReferenced_nonNull_native;
    uint64_t v7 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    if (v7) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = v0[2];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v8 = v7 - 1;
  unint64_t v9 = &v0[2 * v8];
  uint64_t isUniquelyReferenced_nonNull_native = v9[4];
  char v6 = *((unsigned char *)v9 + 40);
  v0[2] = v8;
  *(void *)(v1 + 80) = v0;
LABEL_10:
  result._0._rawValue = (void *)isUniquelyReferenced_nonNull_native;
  result._1 = v6;
  return result;
}

Swift::String __swiftcall AST.renderAsCanonical(showDelimiters:terminateLine:)(Swift::Bool showDelimiters, Swift::Bool terminateLine)
{
  uint64_t v3 = *((void *)v2 + 2);
  uint64_t v11 = 0;
  char v12 = 1;
  uint64_t v13 = 0;
  char v14 = 1;
  long long v15 = xmmword_20D9D7490;
  unint64_t v16 = 0xE000000000000000;
  char v17 = 1;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = MEMORY[0x263F8EE78];
  long long v9 = *v2;
  uint64_t v10 = v3;
  PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)((unint64_t *)&v9, showDelimiters, terminateLine);
  uint64_t v4 = *((void *)&v15 + 1);
  uint64_t v5 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  result._uint64_t object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

void PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)(unint64_t *a1, char a2, char a3)
{
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if (*(unsigned char *)(v3 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v3 + 64) * (__int128)*(uint64_t *)(v3 + 32)) >> 64 != (uint64_t)(*(void *)(v3 + 64) * *(void *)(v3 + 32)) >> 63)
    {
      __break(1u);
      return;
    }
    v8._uint64_t countAndFlagsBits = MEMORY[0x210561880](32, 0xE100000000000000);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v3 + 56) = 0;
  }
  if (a2)
  {
    v9._uint64_t countAndFlagsBits = 12071;
    v9._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v9);
  }
  if (v7)
  {
    unint64_t v12 = v7;
    PrettyPrinter.outputAsCanonical(_:)((_RegexParser::AST::GlobalMatchingOptionSequence)&v12);
  }
  unint64_t v12 = v6;
  PrettyPrinter.outputAsCanonical(_:)(&v12);
  if (a2)
  {
    v10._uint64_t countAndFlagsBits = 10031;
    v10._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v10);
  }
  if (a3)
  {
    v11._uint64_t countAndFlagsBits = 10;
    v11._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    *(unsigned char *)(v3 + 56) = 1;
  }
}

Swift::String __swiftcall AST.Node.renderAsCanonical(showDelimiters:terminateLine:)(Swift::Bool showDelimiters, Swift::Bool terminateLine)
{
  unint64_t v5 = *v2;
  v11[3] = 0;
  char v12 = 1;
  uint64_t v13 = 0;
  char v14 = 1;
  long long v15 = xmmword_20D9D7490;
  unint64_t v16 = 0xE000000000000000;
  char v17 = 1;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = MEMORY[0x263F8EE78];
  v11[0] = v5;
  v11[1] = 0;
  void v11[2] = MEMORY[0x263F8EE78];
  swift_retain();
  PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)(v11, showDelimiters, terminateLine);
  uint64_t v6 = *((void *)&v15 + 1);
  unint64_t v7 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6;
  Swift::String v9 = v7;
  result._uint64_t object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.outputAsCanonical(_:)(_RegexParser::AST::GlobalMatchingOptionSequence a1)
{
  uint64_t v1 = *(void *)a1.options._rawValue;
  uint64_t v2 = *(void *)(*(void *)a1.options._rawValue + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v1 + 48;
    while (v3 < *(void *)(v1 + 16))
    {
      ++v3;
      v5._uint64_t countAndFlagsBits = AST.GlobalMatchingOption.Kind._canonicalBase.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = 41;
      v6._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 10792;
      v7._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v4 += 48;
      if (v2 == v3) {
        return;
      }
    }
    __break(1u);
  }
}

void PrettyPrinter.outputAsCanonical(_:)(unint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v218 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  uint64_t v5 = MEMORY[0x270FA5388](v218, v4);
  uint64_t v217 = (uint64_t)&v204 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5, v7);
  uint64_t v211 = (uint64_t)&v204 - v9;
  MEMORY[0x270FA5388](v8, v10);
  char v12 = (char *)&v204 - v11;
  uint64_t v13 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v18 = (uint64_t *)((char *)&v204 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x270FA5388](v16, v19);
  long long v212 = (uint64_t *)((char *)&v204 - v21);
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v24 = (uint64_t *)((char *)&v204 - v23);
  uint64_t v25 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v25 - 8, v26);
  uint64_t v219 = (uint64_t)&v204 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v28 = *a1;
  switch(*a1 >> 60)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v34 = v28 & 0xFFFFFFFFFFFFFFFLL;
      char v35 = *(unsigned char *)(v34 + 96);
      uint64_t v36 = *(void *)(v34 + 120);
      long long v37 = *(_OWORD *)(v34 + 32);
      Swift::String v227 = *(Swift::String *)(v34 + 16);
      long long v228 = v37;
      long long v38 = *(_OWORD *)(v34 + 64);
      long long v229 = *(_OWORD *)(v34 + 48);
      long long v230 = v38;
      long long v231 = *(_OWORD *)(v34 + 80);
      LOBYTE(v232) = v35;
      v39._uint64_t countAndFlagsBits = AST.Group.Kind._canonicalBase.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v227._uint64_t countAndFlagsBits = v36;
      PrettyPrinter.outputAsCanonical(_:)(&v227);
      uint64_t v40 = 41;
      unint64_t v41 = 0xE100000000000000;
      goto LABEL_82;
    case 3uLL:
      uint64_t v42 = v28 & 0xFFFFFFFFFFFFFFFLL;
      long long v43 = *(_OWORD *)(v42 + 128);
      long long v232 = *(_OWORD *)(v42 + 112);
      long long v233 = v43;
      long long v44 = *(_OWORD *)(v42 + 160);
      long long v234 = *(_OWORD *)(v42 + 144);
      long long v235 = v44;
      long long v45 = *(_OWORD *)(v42 + 48);
      long long v46 = *(_OWORD *)(v42 + 80);
      long long v47 = *(_OWORD *)(v42 + 96);
      long long v229 = *(_OWORD *)(v42 + 64);
      long long v230 = v46;
      long long v231 = v47;
      Swift::String v227 = *(Swift::String *)(v42 + 32);
      long long v228 = v45;
      uint64_t v48 = *(void *)(v42 + 176);
      uint64_t v49 = *(void *)(v42 + 208);
      v50._uint64_t countAndFlagsBits = 40;
      v50._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      *(void *)&v225[0] = 0;
      *((void *)&v225[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v226._uint64_t countAndFlagsBits = 0xD000000000000015;
      v226._uint64_t object = (void *)0x800000020D9DFE30;
      v225[6] = v233;
      v225[7] = v234;
      v225[8] = v235;
      v225[2] = v229;
      v225[3] = v230;
      v225[4] = v231;
      v225[5] = v232;
      v225[0] = v227;
      v225[1] = v228;
      unint64_t v51 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
      v52._uint64_t countAndFlagsBits = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v51 + 24))(&type metadata for AST.Conditional.Condition, v51);
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._uint64_t countAndFlagsBits = 690956832;
      v53._uint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v53);
      String.append(_:)(v226);
      swift_bridgeObjectRelease();
      *(void *)&v225[0] = v48;
      PrettyPrinter.outputAsCanonical(_:)(v225);
      v54._uint64_t countAndFlagsBits = 124;
      v54._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      *(void *)&v225[0] = v49;
      PrettyPrinter.outputAsCanonical(_:)(v225);
      return;
    case 4uLL:
      uint64_t v55 = v28 & 0xFFFFFFFFFFFFFFFLL;
      Swift::String v56 = *(Swift::String *)(v55 + 16);
      long long v223 = *(_OWORD *)(v55 + 32);
      Swift::String v224 = v56;
      long long v222 = *(_OWORD *)(v55 + 48);
      uint64_t v57 = *(void *)(v55 + 64);
      uint64_t v58 = *(void *)(v55 + 72);
      uint64_t v59 = *(unsigned __int8 *)(v55 + 96);
      v227._uint64_t countAndFlagsBits = *(void *)(v55 + 120);
      PrettyPrinter.outputAsCanonical(_:)(&v227);
      Swift::String v227 = v224;
      long long v228 = v223;
      long long v229 = v222;
      *(void *)&long long v230 = v57;
      *((void *)&v230 + 1) = v58;
      v60._uint64_t countAndFlagsBits = AST.Quantification.Amount._canonicalBase.getter();
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      if (v59)
      {
        uint64_t v61 = (void *)0xE100000000000000;
        if (v59 == 1) {
          uint64_t v59 = 63;
        }
        else {
          uint64_t v59 = 43;
        }
      }
      else
      {
        uint64_t v61 = (void *)0xE000000000000000;
      }
      v203._uint64_t countAndFlagsBits = v59;
      v203._uint64_t object = v61;
      String.append(_:)(v203);
      goto LABEL_87;
    case 5uLL:
      uint64_t v62 = v28 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v63 = *(void *)(v62 + 16);
      uint64_t v64 = *(void **)(v62 + 24);
      v227._uint64_t countAndFlagsBits = 20828;
      v227._uint64_t object = (void *)0xE200000000000000;
      swift_bridgeObjectRetain();
      v65._uint64_t countAndFlagsBits = v63;
      v65._uint64_t object = v64;
      String.append(_:)(v65);
      uint64_t v66 = 17756;
      goto LABEL_15;
    case 6uLL:
    case 0xBuLL:
      return;
    case 7uLL:
      uint64_t v67 = v28 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v68 = *(void *)(v67 + 16);
      uint64_t v69 = *(void **)(v67 + 24);
      v227._uint64_t countAndFlagsBits = 31548;
      v227._uint64_t object = (void *)0xE200000000000000;
      swift_bridgeObjectRetain();
      v70._uint64_t countAndFlagsBits = v68;
      v70._uint64_t object = v69;
      String.append(_:)(v70);
      uint64_t v66 = 15997;
LABEL_15:
      unint64_t v71 = 0xE200000000000000;
      String.append(_:)(*(Swift::String *)&v66);
      swift_bridgeObjectRelease();
      String.append(_:)(v227);
LABEL_87:
      swift_bridgeObjectRelease();
      return;
    case 8uLL:
      uint64_t v72 = swift_projectBox();
      uint64_t v73 = v219;
      outlined init with copy of AST.Atom(v72, v219, type metadata accessor for AST.Atom);
      uint64_t v74 = AST.Atom._canonicalBase.getter();
      uint64_t v76 = v75;
      outlined destroy of AST.Atom(v73, type metadata accessor for AST.Atom);
      v77._uint64_t countAndFlagsBits = v74;
      v77._uint64_t object = v76;
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      return;
    case 9uLL:
      int64_t v204 = v12;
      uint64_t v78 = v28 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v79 = *(void *)(v78 + 40);
      BOOL v80 = *(unsigned char *)(v78 + 16) == 0;
      if (*(unsigned char *)(v78 + 16)) {
        uint64_t v81 = 24155;
      }
      else {
        uint64_t v81 = 91;
      }
      char v210 = v24;
      if (v80) {
        unint64_t v82 = 0xE100000000000000;
      }
      else {
        unint64_t v82 = 0xE200000000000000;
      }
      unint64_t v83 = v82;
      v224._uint64_t countAndFlagsBits = v2 + 40;
      String.append(_:)(*(Swift::String *)&v81);
      long long v84 = v210;
      swift_bridgeObjectRelease();
      uint64_t v209 = *(void *)(v79 + 16);
      if (v209)
      {
        uint64_t v85 = *(void *)(v14 + 72);
        unint64_t v214 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
        uint64_t v208 = v79 + v214;
        uint64_t v86 = 0;
        unint64_t v207 = (unint64_t)"number overflow: ";
        uint64_t v215 = (void *)0x800000020D9DFE10;
        do
        {
          uint64_t v100 = v208 + v85 * v86++;
          outlined init with copy of AST.Atom(v100, (uint64_t)v84, type metadata accessor for AST.CustomCharacterClass.Member);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v206 = v86;
              uint64_t v184 = (uint64_t)v204;
              outlined init with take of AST.Atom.Kind((uint64_t)v84, (uint64_t)v204, type metadata accessor for AST.CustomCharacterClass.Range);
              v185._uint64_t countAndFlagsBits = AST.Atom._canonicalBase.getter();
              String.append(_:)(v185);
              swift_bridgeObjectRelease();
              v186._uint64_t countAndFlagsBits = 45;
              v186._uint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v186);
              uint64_t v187 = AST.Atom._canonicalBase.getter();
              uint64_t v189 = v188;
              uint64_t v190 = v184;
              uint64_t v86 = v206;
              outlined destroy of AST.Atom(v190, type metadata accessor for AST.CustomCharacterClass.Range);
              uint64_t countAndFlagsBits = v187;
              unint64_t v99 = v189;
              goto LABEL_27;
            case 2u:
              uint64_t v191 = v86;
              uint64_t v192 = v219;
              outlined init with take of AST.Atom.Kind((uint64_t)v84, v219, type metadata accessor for AST.Atom);
              uint64_t v193 = AST.Atom._canonicalBase.getter();
              uint64_t object = v194;
              uint64_t v195 = v192;
              uint64_t v86 = v191;
              outlined destroy of AST.Atom(v195, type metadata accessor for AST.Atom);
              uint64_t countAndFlagsBits = v193;
              goto LABEL_26;
            case 3u:
              v196._uint64_t countAndFlagsBits = *v84;
              uint64_t v197 = (void *)v210[1];
              v227._uint64_t countAndFlagsBits = 20828;
              v227._uint64_t object = (void *)0xE200000000000000;
              v196._uint64_t object = v197;
              String.append(_:)(v196);
              v198._uint64_t countAndFlagsBits = 17756;
              v198._uint64_t object = (void *)0xE200000000000000;
              String.append(_:)(v198);
              swift_bridgeObjectRelease();
              uint64_t object = v227._object;
              uint64_t countAndFlagsBits = v227._countAndFlagsBits;
              goto LABEL_26;
            case 4u:
              outlined destroy of AST.Atom((uint64_t)v84, type metadata accessor for AST.CustomCharacterClass.Member);
              break;
            case 5u:
              outlined destroy of AST.Atom((uint64_t)v84, type metadata accessor for AST.CustomCharacterClass.Member);
              v227._uint64_t countAndFlagsBits = 0;
              v227._uint64_t object = (void *)0xE000000000000000;
              _StringGuts.grow(_:)(28);
              v225[0] = v227;
              v87._uint64_t object = (void *)(v207 | 0x8000000000000000);
              v87._uint64_t countAndFlagsBits = 0xD000000000000017;
              String.append(_:)(v87);
              char v88 = *(unsigned char *)(v2 + 8);
              uint64_t v89 = *(void *)(v2 + 16);
              char v90 = *(unsigned char *)(v2 + 24);
              uint64_t v91 = *(void *)(v2 + 48);
              char v92 = *(unsigned char *)(v2 + 56);
              uint64_t v93 = *(void *)(v2 + 64);
              char v94 = *(unsigned char *)(v2 + 72);
              uint64_t v95 = *(void *)(v2 + 80);
              v227._uint64_t countAndFlagsBits = *(void *)v2;
              LOBYTE(v227._object) = v88;
              *(void *)&long long v228 = v89;
              BYTE8(v228) = v90;
              long long v229 = *(_OWORD *)(v2 + 32);
              *(void *)&long long v230 = v91;
              BYTE8(v230) = v92;
              *(void *)&long long v231 = v93;
              BYTE8(v231) = v94;
              *(void *)&long long v232 = v95;
              _print_unlocked<A, B>(_:_:)();
              v96._uint64_t countAndFlagsBits = 3090976;
              v96._uint64_t object = (void *)0xE300000000000000;
              String.append(_:)(v96);
              uint64_t object = (void *)*((void *)&v225[0] + 1);
              uint64_t countAndFlagsBits = *(void *)&v225[0];
LABEL_26:
              unint64_t v99 = object;
LABEL_27:
              String.append(_:)(*(Swift::String *)&countAndFlagsBits);
              long long v84 = v210;
              swift_bridgeObjectRelease();
              break;
            default:
              uint64_t v206 = v86;
              uint64_t v101 = v84[3];
              if (*(unsigned char *)v84) {
                uint64_t v102 = 24155;
              }
              else {
                uint64_t v102 = 91;
              }
              if (*(unsigned char *)v84) {
                unint64_t v103 = 0xE200000000000000;
              }
              else {
                unint64_t v103 = 0xE100000000000000;
              }
              unint64_t v104 = v103;
              String.append(_:)(*(Swift::String *)&v102);
              swift_bridgeObjectRelease();
              uint64_t v205 = v101;
              uint64_t v105 = *(void *)(v101 + 16);
              long long v106 = v212;
              uint64_t v221 = v105;
              if (v105)
              {
                uint64_t v107 = 0;
                unint64_t v220 = v205 + v214;
                do
                {
                  uint64_t v122 = v220 + v107 * v85;
                  ++v107;
                  outlined init with copy of AST.Atom(v122, (uint64_t)v106, type metadata accessor for AST.CustomCharacterClass.Member);
                  switch(swift_getEnumCaseMultiPayload())
                  {
                    case 1u:
                      uint64_t v167 = v211;
                      outlined init with take of AST.Atom.Kind((uint64_t)v106, v211, type metadata accessor for AST.CustomCharacterClass.Range);
                      uint64_t v216 = v107;
                      v168._uint64_t countAndFlagsBits = AST.Atom._canonicalBase.getter();
                      String.append(_:)(v168);
                      swift_bridgeObjectRelease();
                      v169._uint64_t countAndFlagsBits = 45;
                      v169._uint64_t object = (void *)0xE100000000000000;
                      String.append(_:)(v169);
                      uint64_t v170 = AST.Atom._canonicalBase.getter();
                      uint64_t v172 = v171;
                      outlined destroy of AST.Atom(v167, type metadata accessor for AST.CustomCharacterClass.Range);
                      v173._uint64_t countAndFlagsBits = v170;
                      v173._uint64_t object = v172;
                      String.append(_:)(v173);
                      uint64_t v107 = v216;
                      goto LABEL_40;
                    case 2u:
                      uint64_t v174 = v219;
                      outlined init with take of AST.Atom.Kind((uint64_t)v106, v219, type metadata accessor for AST.Atom);
                      uint64_t v175 = v107;
                      uint64_t v176 = AST.Atom._canonicalBase.getter();
                      uint64_t v178 = v177;
                      outlined destroy of AST.Atom(v174, type metadata accessor for AST.Atom);
                      v179._uint64_t countAndFlagsBits = v176;
                      v179._uint64_t object = v178;
                      String.append(_:)(v179);
                      uint64_t v107 = v175;
                      goto LABEL_40;
                    case 3u:
                      v180._uint64_t countAndFlagsBits = *v106;
                      long long v181 = (void *)v106[1];
                      v227._uint64_t countAndFlagsBits = 20828;
                      v227._uint64_t object = (void *)0xE200000000000000;
                      uint64_t v108 = v107;
                      v180._uint64_t object = v181;
                      String.append(_:)(v180);
                      v182._uint64_t countAndFlagsBits = 17756;
                      v182._uint64_t object = (void *)0xE200000000000000;
                      String.append(_:)(v182);
                      swift_bridgeObjectRelease();
                      uint64_t v120 = v227._object;
                      uint64_t v119 = v227._countAndFlagsBits;
                      goto LABEL_39;
                    case 4u:
                      outlined destroy of AST.Atom((uint64_t)v106, type metadata accessor for AST.CustomCharacterClass.Member);
                      break;
                    case 5u:
                      outlined destroy of AST.Atom((uint64_t)v106, type metadata accessor for AST.CustomCharacterClass.Member);
                      v227._uint64_t countAndFlagsBits = 0;
                      v227._uint64_t object = (void *)0xE000000000000000;
                      uint64_t v108 = v107;
                      _StringGuts.grow(_:)(28);
                      v225[0] = v227;
                      v109._uint64_t object = (void *)(v207 | 0x8000000000000000);
                      v109._uint64_t countAndFlagsBits = 0xD000000000000017;
                      String.append(_:)(v109);
                      char v110 = *(unsigned char *)(v2 + 8);
                      uint64_t v111 = *(void *)(v2 + 16);
                      char v112 = *(unsigned char *)(v2 + 24);
                      uint64_t v113 = *(void *)(v2 + 48);
                      char v114 = *(unsigned char *)(v2 + 56);
                      uint64_t v115 = *(void *)(v2 + 64);
                      char v116 = *(unsigned char *)(v2 + 72);
                      uint64_t v117 = *(void *)(v2 + 80);
                      v227._uint64_t countAndFlagsBits = *(void *)v2;
                      LOBYTE(v227._object) = v110;
                      *(void *)&long long v228 = v111;
                      BYTE8(v228) = v112;
                      long long v229 = *(_OWORD *)(v2 + 32);
                      *(void *)&long long v230 = v113;
                      BYTE8(v230) = v114;
                      *(void *)&long long v231 = v115;
                      BYTE8(v231) = v116;
                      *(void *)&long long v232 = v117;
                      _print_unlocked<A, B>(_:_:)();
                      v118._uint64_t countAndFlagsBits = 3090976;
                      v118._uint64_t object = (void *)0xE300000000000000;
                      String.append(_:)(v118);
                      uint64_t v120 = (void *)*((void *)&v225[0] + 1);
                      uint64_t v119 = *(void *)&v225[0];
LABEL_39:
                      char v121 = v120;
                      String.append(_:)(*(Swift::String *)&v119);
                      uint64_t v107 = v108;
LABEL_40:
                      swift_bridgeObjectRelease();
                      break;
                    default:
                      uint64_t v216 = v107;
                      int v123 = *(unsigned __int8 *)v106;
                      uint64_t v124 = v106[3];
                      if (v123) {
                        uint64_t v125 = 24155;
                      }
                      else {
                        uint64_t v125 = 91;
                      }
                      if (v123) {
                        unint64_t v126 = 0xE200000000000000;
                      }
                      else {
                        unint64_t v126 = 0xE100000000000000;
                      }
                      unint64_t v127 = v126;
                      String.append(_:)(*(Swift::String *)&v125);
                      swift_bridgeObjectRelease();
                      uint64_t v213 = v124;
                      uint64_t v128 = *(void *)(v124 + 16);
                      if (v128)
                      {
                        uint64_t v129 = 0;
                        unint64_t v130 = v213 + v214;
                        *(void *)&long long v222 = v128;
                        *(void *)&long long v223 = v213 + v214;
                        do
                        {
                          uint64_t v144 = v130 + v129 * v85;
                          ++v129;
                          outlined init with copy of AST.Atom(v144, (uint64_t)v18, type metadata accessor for AST.CustomCharacterClass.Member);
                          switch(swift_getEnumCaseMultiPayload())
                          {
                            case 1u:
                              uint64_t v153 = v217;
                              outlined init with take of AST.Atom.Kind((uint64_t)v18, v217, type metadata accessor for AST.CustomCharacterClass.Range);
                              v154._uint64_t countAndFlagsBits = AST.Atom._canonicalBase.getter();
                              String.append(_:)(v154);
                              swift_bridgeObjectRelease();
                              v155._uint64_t countAndFlagsBits = 45;
                              v155._uint64_t object = (void *)0xE100000000000000;
                              String.append(_:)(v155);
                              uint64_t v156 = AST.Atom._canonicalBase.getter();
                              unint64_t v158 = v157;
                              uint64_t v159 = v153;
                              unint64_t v130 = v223;
                              outlined destroy of AST.Atom(v159, type metadata accessor for AST.CustomCharacterClass.Range);
                              uint64_t v141 = v156;
                              unint64_t v143 = v158;
                              uint64_t v128 = v222;
                              goto LABEL_53;
                            case 2u:
                              uint64_t v160 = v219;
                              outlined init with take of AST.Atom.Kind((uint64_t)v18, v219, type metadata accessor for AST.Atom);
                              uint64_t v161 = AST.Atom._canonicalBase.getter();
                              uint64_t v142 = v162;
                              uint64_t v163 = v160;
                              unint64_t v130 = v223;
                              outlined destroy of AST.Atom(v163, type metadata accessor for AST.Atom);
                              uint64_t v141 = v161;
                              goto LABEL_52;
                            case 3u:
                              v164._uint64_t countAndFlagsBits = *v18;
                              uint64_t v165 = (void *)v18[1];
                              v227._uint64_t countAndFlagsBits = 20828;
                              v227._uint64_t object = (void *)0xE200000000000000;
                              v164._uint64_t object = v165;
                              String.append(_:)(v164);
                              v166._uint64_t countAndFlagsBits = 17756;
                              v166._uint64_t object = (void *)0xE200000000000000;
                              String.append(_:)(v166);
                              swift_bridgeObjectRelease();
                              uint64_t v142 = v227._object;
                              uint64_t v141 = v227._countAndFlagsBits;
                              goto LABEL_52;
                            case 4u:
                              outlined destroy of AST.Atom((uint64_t)v18, type metadata accessor for AST.CustomCharacterClass.Member);
                              break;
                            case 5u:
                              outlined destroy of AST.Atom((uint64_t)v18, type metadata accessor for AST.CustomCharacterClass.Member);
                              v227._uint64_t countAndFlagsBits = 0;
                              v227._uint64_t object = (void *)0xE000000000000000;
                              _StringGuts.grow(_:)(28);
                              v225[0] = v227;
                              v131._uint64_t countAndFlagsBits = 0xD000000000000017;
                              v131._uint64_t object = v215;
                              String.append(_:)(v131);
                              char v132 = *(unsigned char *)(v2 + 8);
                              uint64_t v133 = *(void *)(v2 + 16);
                              char v134 = *(unsigned char *)(v2 + 24);
                              uint64_t v135 = *(void *)(v2 + 48);
                              char v136 = *(unsigned char *)(v2 + 56);
                              uint64_t v137 = *(void *)(v2 + 64);
                              char v138 = *(unsigned char *)(v2 + 72);
                              uint64_t v139 = *(void *)(v2 + 80);
                              v227._uint64_t countAndFlagsBits = *(void *)v2;
                              LOBYTE(v227._object) = v132;
                              *(void *)&long long v228 = v133;
                              BYTE8(v228) = v134;
                              long long v229 = *(_OWORD *)(v2 + 32);
                              *(void *)&long long v230 = v135;
                              BYTE8(v230) = v136;
                              *(void *)&long long v231 = v137;
                              BYTE8(v231) = v138;
                              *(void *)&long long v232 = v139;
                              _print_unlocked<A, B>(_:_:)();
                              v140._uint64_t countAndFlagsBits = 3090976;
                              v140._uint64_t object = (void *)0xE300000000000000;
                              String.append(_:)(v140);
                              uint64_t v142 = (void *)*((void *)&v225[0] + 1);
                              uint64_t v141 = *(void *)&v225[0];
LABEL_52:
                              unint64_t v143 = v142;
LABEL_53:
                              String.append(_:)(*(Swift::String *)&v141);
                              swift_bridgeObjectRelease();
                              break;
                            default:
                              uint64_t v145 = v13;
                              uint64_t v146 = v18[3];
                              if (*(unsigned char *)v18) {
                                uint64_t v147 = 24155;
                              }
                              else {
                                uint64_t v147 = 91;
                              }
                              if (*(unsigned char *)v18) {
                                unint64_t v148 = 0xE200000000000000;
                              }
                              else {
                                unint64_t v148 = 0xE100000000000000;
                              }
                              unint64_t v149 = v148;
                              String.append(_:)(*(Swift::String *)&v147);
                              swift_bridgeObjectRelease();
                              uint64_t v150 = *(void *)(v146 + 16);
                              if (v150)
                              {
                                uint64_t v151 = v146 + v214;
                                do
                                {
                                  PrettyPrinter.outputAsCanonical(_:)(v151);
                                  v151 += v85;
                                  --v150;
                                }
                                while (v150);
                              }
                              v152._uint64_t countAndFlagsBits = 93;
                              v152._uint64_t object = (void *)0xE100000000000000;
                              String.append(_:)(v152);
                              swift_bridgeObjectRelease();
                              uint64_t v13 = v145;
                              uint64_t v128 = v222;
                              unint64_t v130 = v223;
                              break;
                          }
                        }
                        while (v129 != v128);
                      }
                      v183._uint64_t countAndFlagsBits = 93;
                      v183._uint64_t object = (void *)0xE100000000000000;
                      String.append(_:)(v183);
                      swift_bridgeObjectRelease();
                      long long v106 = v212;
                      uint64_t v107 = v216;
                      break;
                  }
                }
                while (v107 != v221);
              }
              v199._uint64_t countAndFlagsBits = 93;
              v199._uint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v199);
              swift_bridgeObjectRelease();
              long long v84 = v210;
              uint64_t v86 = v206;
              break;
          }
        }
        while (v86 != v209);
      }
      uint64_t v40 = 93;
      unint64_t v41 = 0xE100000000000000;
LABEL_82:
      String.append(_:)(*(Swift::String *)&v40);
      return;
    case 0xAuLL:
      unint64_t v200 = (_OWORD *)(v28 & 0xFFFFFFFFFFFFFFFLL);
      long long v201 = v200[2];
      Swift::String v227 = (Swift::String)v200[1];
      long long v228 = v201;
      long long v202 = v200[4];
      long long v229 = v200[3];
      long long v230 = v202;
      PrettyPrinter.outputAsCanonical(_:)((uint64_t)&v227);
      return;
    default:
      uint64_t v29 = *(void *)(v28 + 16);
      uint64_t v30 = *(void *)(v29 + 16);
      if (!v30) {
        return;
      }
      unint64_t v31 = 0;
      uint64_t v32 = v30 - 1;
      break;
  }
  while (1)
  {
    v227._uint64_t countAndFlagsBits = *(void *)(v29 + 32 + 8 * v31);
    PrettyPrinter.outputAsCanonical(_:)(&v227);
    if (v32 == v31) {
      break;
    }
    ++v31;
    v33._uint64_t countAndFlagsBits = 124;
    v33._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    unint64_t v28 = *(void *)(v29 + 16);
    if (v31 >= v28)
    {
      __break(1u);
LABEL_7:
      specialized Sequence.forEach(_:)(*(void *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
      return;
    }
  }
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(result + 32);
    do
    {
      uint64_t v3 = *v2++;
      uint64_t v4 = v3;
      Swift::String result = PrettyPrinter.outputAsCanonical(_:)(&v4);
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(result + 32);
    while (2)
    {
      uint64_t v7 = *v6;
      unint64_t v8 = (unint64_t)*v6 >> 60;
      unint64_t v83 = v6 + 1;
      switch(v8)
      {
        case 1uLL:
          uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v13 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v78 = &type metadata for AST.Concatenation;
          unint64_t v14 = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
          int v75 = (void *)v11;
          uint64_t v76 = v12;
          unint64_t v79 = v14;
          uint64_t v77 = v13;
          goto LABEL_15;
        case 2uLL:
          long long v15 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          long long v66 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          long long v67 = v15;
          long long v16 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
          long long v68 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
          long long v69 = v16;
          long long v17 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          long long v62 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          long long v63 = v17;
          long long v18 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          long long v64 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          long long v65 = v18;
          uint64_t v78 = &type metadata for AST.Group;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
          int v75 = (void *)swift_allocObject();
          memmove(v75 + 2, (const void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x80uLL);
          outlined retain of AST.Group((uint64_t)&v62);
          goto LABEL_16;
        case 3uLL:
          long long v19 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0xB0);
          long long v71 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0xA0);
          long long v72 = v19;
          long long v73 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0xC0);
          uint64_t v74 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0xD0);
          long long v20 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
          long long v67 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          long long v68 = v20;
          long long v21 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
          long long v69 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
          long long v70 = v21;
          long long v22 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          long long v63 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          long long v64 = v22;
          long long v23 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          long long v65 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          long long v66 = v23;
          long long v62 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v78 = &type metadata for AST.Conditional;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional();
          int v75 = (void *)swift_allocObject();
          memmove(v75 + 2, (const void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 16), 0xC8uLL);
          outlined retain of AST.Conditional((uint64_t)&v62);
          goto LABEL_16;
        case 4uLL:
          long long v24 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
          long long v67 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          long long v68 = v24;
          long long v69 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
          *(void *)&long long v70 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
          long long v25 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          long long v63 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          long long v64 = v25;
          long long v26 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          long long v65 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          long long v66 = v26;
          long long v62 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v78 = &type metadata for AST.Quantification;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
          int v75 = (void *)swift_allocObject();
          memmove(v75 + 2, (const void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x88uLL);
          outlined retain of AST.Quantification((uint64_t)&v62);
          goto LABEL_16;
        case 5uLL:
          uint64_t v28 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v27 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v29 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v30 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v78 = &type metadata for AST.Quote;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote();
          goto LABEL_12;
        case 6uLL:
          uint64_t v28 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v27 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v29 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v30 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v78 = &type metadata for AST.Trivia;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia();
          goto LABEL_12;
        case 7uLL:
          uint64_t v28 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v27 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v29 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v30 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v78 = &type metadata for AST.Interpolation;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation();
LABEL_12:
          unint64_t v31 = (void *)swift_allocObject();
          int v75 = v31;
          void v31[2] = v28;
          v31[3] = v27;
          v31[4] = v29;
          v31[5] = v30;
          goto LABEL_15;
        case 8uLL:
          uint64_t v32 = type metadata accessor for AST.Atom(0);
          uint64_t v33 = swift_projectBox();
          uint64_t v78 = (ValueMetadata *)v32;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
          boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)&v75);
          outlined init with copy of AST.Atom(v33, (uint64_t)boxed_opaque_existential_1Tm, type metadata accessor for AST.Atom);
          goto LABEL_16;
        case 9uLL:
          char v35 = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v36 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v37 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v60 = v3;
          uint64_t v38 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v39 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          uint64_t v58 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          uint64_t v78 = &type metadata for AST.CustomCharacterClass;
          unint64_t v79 = lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass();
          uint64_t v40 = swift_allocObject();
          int v75 = (void *)v40;
          *(unsigned char *)(v40 + 16) = v35;
          *(void *)(v40 + 24) = v36;
          *(void *)(v40 + 32) = v37;
          *(void *)(v40 + 40) = v38;
          *(void *)(v40 + 48) = v39;
          uint64_t v3 = v60;
          *(void *)(v40 + 56) = v58;
          goto LABEL_15;
        case 0xAuLL:
          uint64_t v61 = v3;
          uint64_t v47 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v48 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v49 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v51 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          uint64_t v50 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          uint64_t v57 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          uint64_t v59 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v56 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
          uint64_t v78 = &type metadata for AST.AbsentFunction;
          unint64_t v79 = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
          Swift::String v52 = (void *)swift_allocObject();
          int v75 = v52;
          v52[2] = v47;
          uint64_t v3 = v61;
          v52[3] = v59;
          v52[4] = v48;
          v52[5] = v49;
          v52[6] = v51;
          v52[7] = v50;
          v52[8] = v57;
          v52[9] = v56;
          outlined copy of AST.AbsentFunction.Kind(v48, v49, v51, v50);
          goto LABEL_16;
        case 0xBuLL:
          uint64_t v53 = v3;
          uint64_t v54 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v55 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v78 = &type metadata for AST.Empty;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
          int v75 = (void *)v54;
          uint64_t v76 = v55;
          uint64_t v3 = v53;
          goto LABEL_16;
        default:
          uint64_t v9 = *(void *)(v7 + 16);
          uint64_t v10 = *(void *)(v7 + 24);
          uint64_t v78 = &type metadata for AST.Alternation;
          unint64_t v79 = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
          int v75 = (void *)v9;
          uint64_t v76 = v10;
          swift_bridgeObjectRetain();
LABEL_15:
          swift_bridgeObjectRetain();
LABEL_16:
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
          if (swift_dynamicCast())
          {
            uint64_t v41 = *((void *)&v81 + 1);
            uint64_t v42 = v82;
            __swift_project_boxed_opaque_existential_1Tm(&v80, *((uint64_t *)&v81 + 1));
            uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v80);
            swift_release();
            specialized Sequence.forEach(_:)(v43, a2);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v82 = 0;
            long long v80 = 0u;
            long long v81 = 0u;
            outlined destroy of _ASTParent?((uint64_t)&v80, &demangling cache variable for type metadata for _ASTParent?);
            swift_release();
          }
          uint64_t v44 = *a2;
          swift_retain();
          Swift::String result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            Swift::String result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, (char *)v44);
            uint64_t v44 = result;
          }
          unint64_t v46 = *(void *)(v44 + 16);
          unint64_t v45 = *(void *)(v44 + 24);
          if (v46 >= v45 >> 1)
          {
            Swift::String result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, (char *)v44);
            uint64_t v44 = result;
          }
          *(void *)(v44 + 16) = v46 + 1;
          *(void *)(v44 + 8 * v46 + 32) = v7;
          *a2 = v44;
          --v4;
          uint64_t v6 = v83;
          if (!v4) {
            return result;
          }
          continue;
      }
    }
  }
  return result;
}

unint64_t AST.Group.Kind._canonicalBase.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v5 = 0xD00000000000002FLL;
  switch(*((unsigned char *)v0 + 80))
  {
    case 1:
      v8._uint64_t countAndFlagsBits = AST.Group.BalancedCapture._dumpBase.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 62;
      v9._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      unint64_t v5 = 3948328;
      break;
    case 2:
      return v5;
    case 3:
      uint64_t v10 = v0[4] | v0[5] | v0[6];
      uint64_t v11 = v0[7] | v0[8] | v0[9];
      if (v4 | v2 | v1 | v3 | v10 | v11)
      {
        uint64_t v12 = v4 | v2 | v3 | v10 | v11;
        if (v1 != 1 || v12)
        {
          if (v1 != 2 || v12)
          {
            if (v1 != 3 || v12)
            {
              if (v1 != 4 || v12)
              {
                if (v1 != 5 || v12)
                {
                  if (v1 != 6 || v12)
                  {
                    if (v1 != 7 || v12)
                    {
                      if (v1 != 8 || v12)
                      {
                        if (v1 != 9 || v12)
                        {
                          BOOL v13 = v1 != 10 || v12 != 0;
                          unint64_t v5 = 0x3A7273612A28;
                          if (!v13) {
                            unint64_t v5 = 0x3A72732A28;
                          }
                        }
                        else
                        {
                          unint64_t v5 = 708591400;
                        }
                      }
                      else
                      {
                        unint64_t v5 = 557596456;
                      }
                    }
                    else
                    {
                      unint64_t v5 = 1027358504;
                    }
                  }
                  else
                  {
                    unint64_t v5 = 2768680;
                  }
                }
                else
                {
                  unint64_t v5 = 2178856;
                }
              }
              else
              {
                unint64_t v5 = 4013864;
              }
            }
            else
            {
              unint64_t v5 = 4079400;
            }
          }
          else
          {
            unint64_t v5 = 8142632;
          }
        }
        else
        {
          unint64_t v5 = 3817256;
        }
      }
      else
      {
        unint64_t v5 = 40;
      }
      break;
    default:
      uint64_t v6 = v0[1];
      String.append(_:)(*(Swift::String *)&v1);
      v7._uint64_t countAndFlagsBits = 62;
      v7._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      unint64_t v5 = 3948328;
      break;
  }
  return v5;
}

uint64_t AST.Atom._canonicalBase.getter()
{
  uint64_t v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = AST.Atom.literalStringValue.getter();
  if (v6)
  {
    uint64_t v7 = v5;
    if (v5 == 46 && v6 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 11868;
    }
  }
  else
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    uint64_t v7 = 94;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        char v9 = *v4;
        v20[0] = 0;
        v20[1] = 0xE000000000000000;
        v10._uint64_t countAndFlagsBits = 92;
        v10._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        v19[15] = v9;
        AST.Atom.EscapedBuiltin.character.getter();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        uint64_t v7 = v20[0];
        break;
      case 9u:
        uint64_t v14 = *((void *)v4 + 1);
        uint64_t v15 = *((void *)v4 + 2);
        uint64_t v16 = *((void *)v4 + 3);
        char v17 = v4[72];
        char v18 = v4[32];
        v20[0] = *(void *)v4;
        uint64_t v13 = v20[0];
        v20[1] = v14;
        v20[2] = v15;
        v20[3] = v16;
        char v21 = v18;
        long long v22 = *(_OWORD *)(v4 + 40);
        long long v23 = *(_OWORD *)(v4 + 56);
        char v24 = v17;
        long long v25 = *((_OWORD *)v4 + 5);
        uint64_t v7 = AST.Reference._canonicalBase.getter();
        outlined consume of AST.Reference.Kind(v13, v14, v15, v16, v18);
        break;
      case 0xFu:
        return v7;
      case 0x10u:
        uint64_t v7 = 36;
        break;
      default:
        v20[0] = 0;
        v20[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        strcpy((char *)v20, "/* TODO: atom ");
        HIBYTE(v20[1]) = -18;
        v11._uint64_t countAndFlagsBits = AST.Atom._dumpBase.getter();
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._uint64_t countAndFlagsBits = 3090976;
        v12._uint64_t object = (void *)0xE300000000000000;
        String.append(_:)(v12);
        uint64_t v7 = v20[0];
        outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
        break;
    }
  }
  return v7;
}

void PrettyPrinter.outputAsCanonical(_:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  v3._uint64_t countAndFlagsBits = 8273704;
  v3._uint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  switch((v2 >> 1) & 3)
  {
    case 1u:
      v4._uint64_t countAndFlagsBits = 124;
      v4._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      unint64_t v9 = v1;
      PrettyPrinter.outputAsCanonical(_:)(&v9);
      v5._uint64_t countAndFlagsBits = 124;
      v5._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      unint64_t v9 = v2 & 0xFFFFFFFFFFFFFFF9;
      goto LABEL_5;
    case 2u:
      v6._uint64_t countAndFlagsBits = 124;
      v6._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      goto LABEL_4;
    case 3u:
      v7._uint64_t countAndFlagsBits = 124;
      v7._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      goto LABEL_7;
    default:
LABEL_4:
      unint64_t v9 = v1;
LABEL_5:
      PrettyPrinter.outputAsCanonical(_:)(&v9);
LABEL_7:
      v8._uint64_t countAndFlagsBits = 41;
      v8._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      return;
  }
}

uint64_t PrettyPrinter.outputAsCanonical(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v4 - 8, v5);
  Swift::String v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x270FA5388](v8, v9);
  Swift::String v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AST.Atom(a1, (uint64_t)v16, type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of AST.Atom.Kind((uint64_t)v16, (uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Range);
      v26._uint64_t countAndFlagsBits = AST.Atom._canonicalBase.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 45;
      v27._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      uint64_t v28 = AST.Atom._canonicalBase.getter();
      uint64_t v30 = v29;
      outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.CustomCharacterClass.Range);
      uint64_t countAndFlagsBits = v28;
      uint64_t object = v30;
      goto LABEL_15;
    case 2u:
      outlined init with take of AST.Atom.Kind((uint64_t)v16, (uint64_t)v7, type metadata accessor for AST.Atom);
      uint64_t v31 = AST.Atom._canonicalBase.getter();
      uint64_t v33 = v32;
      outlined destroy of AST.Atom((uint64_t)v7, type metadata accessor for AST.Atom);
      v34._uint64_t countAndFlagsBits = v31;
      v34._uint64_t object = v33;
      String.append(_:)(v34);
      return swift_bridgeObjectRelease();
    case 3u:
      v35._uint64_t countAndFlagsBits = *v16;
      uint64_t v36 = (void *)v16[1];
      v50._uint64_t countAndFlagsBits = 20828;
      v50._uint64_t object = (void *)0xE200000000000000;
      v35._uint64_t object = v36;
      String.append(_:)(v35);
      v37._uint64_t countAndFlagsBits = 17756;
      v37._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v50._countAndFlagsBits;
      uint64_t object = v50._object;
      goto LABEL_15;
    case 4u:
      return outlined destroy of AST.Atom((uint64_t)v16, type metadata accessor for AST.CustomCharacterClass.Member);
    case 5u:
      outlined destroy of AST.Atom((uint64_t)v16, type metadata accessor for AST.CustomCharacterClass.Member);
      v50._uint64_t countAndFlagsBits = 0;
      v50._uint64_t object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(28);
      Swift::String v59 = v50;
      v39._uint64_t object = (void *)0x800000020D9DFE10;
      v39._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v39);
      char v40 = *(unsigned char *)(v2 + 8);
      uint64_t v41 = *(void *)(v2 + 16);
      char v42 = *(unsigned char *)(v2 + 24);
      uint64_t v43 = *(void *)(v2 + 48);
      char v44 = *(unsigned char *)(v2 + 56);
      uint64_t v45 = *(void *)(v2 + 64);
      char v46 = *(unsigned char *)(v2 + 72);
      uint64_t v47 = *(void *)(v2 + 80);
      v50._uint64_t countAndFlagsBits = *(void *)v2;
      LOBYTE(v50._object) = v40;
      uint64_t v51 = v41;
      char v52 = v42;
      long long v53 = *(_OWORD *)(v2 + 32);
      uint64_t v54 = v43;
      char v55 = v44;
      uint64_t v56 = v45;
      char v57 = v46;
      uint64_t v58 = v47;
      _print_unlocked<A, B>(_:_:)();
      v48._uint64_t countAndFlagsBits = 3090976;
      v48._uint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v48);
      String.append(_:)(v59);
      return swift_bridgeObjectRelease();
    default:
      uint64_t v17 = v16[3];
      if (*(unsigned char *)v16) {
        uint64_t v18 = 24155;
      }
      else {
        uint64_t v18 = 91;
      }
      if (*(unsigned char *)v16) {
        unint64_t v19 = 0xE200000000000000;
      }
      else {
        unint64_t v19 = 0xE100000000000000;
      }
      unint64_t v20 = v19;
      String.append(_:)(*(Swift::String *)&v18);
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v17 + 16);
      if (v21)
      {
        unint64_t v22 = v17 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
        uint64_t v23 = *(void *)(v13 + 72);
        do
        {
          PrettyPrinter.outputAsCanonical(_:)(v22);
          v22 += v23;
          --v21;
        }
        while (v21);
      }
      uint64_t countAndFlagsBits = 93;
      uint64_t object = (void *)0xE100000000000000;
LABEL_15:
      String.append(_:)(*(Swift::String *)&countAndFlagsBits);
      return swift_bridgeObjectRelease();
  }
}

uint64_t AST.Group.BalancedCapture._dumpBase.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[6];
  Swift::String v3 = (void *)v0[7];
  if (v1) {
    uint64_t v4 = *v0;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v1) {
    uint64_t v5 = (void *)v0[1];
  }
  else {
    uint64_t v5 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._uint64_t object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 45;
  v7._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v2;
  v8._uint64_t object = v3;
  String.append(_:)(v8);
  return 0;
}

uint64_t AST.Reference._canonicalBase.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 72);
  if (v1 == 2)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD000000000000019;
  }
  else
  {
    if (v1 != 1)
    {
      if (!(*(void *)(v0 + 8) & 1 | *(void *)v0)) {
        return 693255976;
      }
      if (*(void *)(v0 + 8))
      {
        uint64_t v8 = 0x64696C61766E693CLL;
        unint64_t v10 = 0xE90000000000003ELL;
      }
      else
      {
        uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v10 = v9;
      }
      unint64_t v15 = v10;
      String.append(_:)(*(Swift::String *)&v8);
      swift_bridgeObjectRelease();
      return 92;
    }
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD00000000000001CLL;
  }
  _print_unlocked<A, B>(_:_:)();
  uint64_t v4 = 0;
  if ((v3 & 1) == 0)
  {
    if (v2)
    {
      uint64_t v5 = 0x64696C61766E693CLL;
      unint64_t v7 = 0xE90000000000003ELL;
    }
    else
    {
      uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v7 = v6;
    }
    unint64_t v11 = v7;
    String.append(_:)(*(Swift::String *)&v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
  }
  unint64_t v12 = 0xE000000000000000;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 3090976;
  v13._uint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return v16;
}

Swift::Void __swiftcall AST.Node._postOrder(into:)(Swift::OpaquePointer *into)
{
  uint64_t v3 = *v1;
  AST.Node._associatedValue.getter(v10);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (swift_dynamicCast())
  {
    uint64_t v4 = *((void *)&v12 + 1);
    uint64_t v5 = v13;
    __swift_project_boxed_opaque_existential_1Tm(&v11, *((uint64_t *)&v12 + 1));
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v11);
    swift_release();
    specialized Sequence.forEach(_:)(v6, (uint64_t *)into);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v11, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
  }
  rawValue = (char *)into->_rawValue;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)rawValue + 2) + 1, 1, rawValue);
  }
  unint64_t v9 = *((void *)rawValue + 2);
  unint64_t v8 = *((void *)rawValue + 3);
  if (v9 >= v8 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, rawValue);
  }
  *((void *)rawValue + 2) = v9 + 1;
  *(void *)&rawValue[8 * v9 + 32] = v3;
  into->_rawValue = rawValue;
}

Swift::Void __swiftcall AST.Node._renderRange(count:into:)(Swift::Int count, Swift::String *into)
{
  if (count >= 1)
  {
    v16[8] = v3;
    v16[9] = v4;
    uint64_t v5 = *v2;
    uint64_t v12 = MEMORY[0x210561880](45, 0xE100000000000000, count - 1);
    uint64_t v13 = v6;
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = 94;
    v7._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    uint64_t v9 = v12;
    uint64_t v8 = v13;
    v16[0] = v5;
    AST.Node._associatedValue.getter(&v12);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    __swift_project_boxed_opaque_existential_1Tm(&v12, v14);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v16, v10, v11);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v12);
    uint64_t v12 = v9;
    uint64_t v13 = v8;
    lazy protocol witness table accessor for type String and conformance String();
    String.replaceSubrange<A>(_:with:)();
    swift_bridgeObjectRelease();
  }
}

void *AST.Node._render(in:)(uint64_t a1, uint64_t a2)
{
  void (*v48)(Swift::OpaquePointer *__return_ptr, ValueMetadata *, unint64_t);
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v66;
  void *v67;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  Swift::OpaquePointer into[2];
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  ValueMetadata *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94[3];

  uint64_t v3 = *v2;
  uint64_t v4 = String.count.getter();
  uint64_t v5 = MEMORY[0x210561880](32, 0xE100000000000000, v4);
  Swift::String v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v8 = (void *)swift_allocObject();
  *((_OWORD *)v8 + 1) = xmmword_20D9D7460;
  long long v66 = v5;
  v8[4] = v5;
  v8[5] = v7;
  v94[0] = (uint64_t)v8;
  uint64_t v9 = MEMORY[0x263F8EE78];
  into[0]._rawValue = (void *)MEMORY[0x263F8EE78];
  char v88 = (void *)v3;
  long long v67 = v7;
  swift_bridgeObjectRetain();
  AST.Node._postOrder(into:)(into);
  rawValue = into[0]._rawValue;
  uint64_t v93 = v9;
  uint64_t v74 = *((void *)into[0]._rawValue + 2);
  if (v74)
  {
    unint64_t v11 = 0;
    long long v72 = into[0]._rawValue;
    long long v73 = (char *)into[0]._rawValue + 32;
    while (2)
    {
      if (v11 < rawValue[2])
      {
        unint64_t v12 = *(void *)&v73[8 * v11++];
        switch(v12 >> 60)
        {
          case 1uLL:
            uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v16 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v91 = &type metadata for AST.Concatenation;
            unint64_t v18 = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
            char v88 = (void *)v15;
            uint64_t v89 = v16;
            char v92 = v18;
            char v90 = v17;
            goto LABEL_18;
          case 2uLL:
            long long v19 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
            unint64_t v79 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
            long long v80 = v19;
            long long v20 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
            long long v81 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
            uint64_t v82 = v20;
            long long v21 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            *(_OWORD *)&into[0]._rawValue = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v76 = v21;
            long long v22 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
            uint64_t v77 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            uint64_t v78 = v22;
            uint64_t v91 = &type metadata for AST.Group;
            char v92 = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
            char v88 = (void *)swift_allocObject();
            memmove(v88 + 2, (const void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x80uLL);
            outlined retain of AST.Group((uint64_t)into);
            goto LABEL_19;
          case 3uLL:
            long long v23 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xB0);
            long long v84 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xA0);
            uint64_t v85 = v23;
            uint64_t v86 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xC0);
            Swift::String v87 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xD0);
            long long v24 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
            long long v80 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
            long long v81 = v24;
            long long v25 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
            uint64_t v82 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
            unint64_t v83 = v25;
            long long v26 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            uint64_t v76 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v77 = v26;
            long long v27 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
            uint64_t v78 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
            unint64_t v79 = v27;
            *(_OWORD *)&into[0]._rawValue = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v91 = &type metadata for AST.Conditional;
            char v92 = lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional();
            char v88 = (void *)swift_allocObject();
            memmove(v88 + 2, (const void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 16), 0xC8uLL);
            outlined retain of AST.Conditional((uint64_t)into);
            goto LABEL_19;
          case 4uLL:
            long long v28 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
            long long v80 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
            long long v81 = v28;
            uint64_t v82 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
            *(void *)&unint64_t v83 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
            long long v29 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            uint64_t v76 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v77 = v29;
            long long v30 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
            uint64_t v78 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
            unint64_t v79 = v30;
            *(_OWORD *)&into[0]._rawValue = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v91 = &type metadata for AST.Quantification;
            char v92 = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
            char v88 = (void *)swift_allocObject();
            memmove(v88 + 2, (const void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x88uLL);
            outlined retain of AST.Quantification((uint64_t)into);
            goto LABEL_19;
          case 5uLL:
            uint64_t v32 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v31 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v33 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v34 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v91 = &type metadata for AST.Quote;
            char v92 = lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote();
            goto LABEL_15;
          case 6uLL:
            uint64_t v32 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v31 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v33 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v34 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v91 = &type metadata for AST.Trivia;
            char v92 = lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia();
            goto LABEL_15;
          case 7uLL:
            uint64_t v32 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v31 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v33 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v34 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v91 = &type metadata for AST.Interpolation;
            char v92 = lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation();
LABEL_15:
            Swift::String v35 = (void *)swift_allocObject();
            char v88 = v35;
            void v35[2] = v32;
            v35[3] = v31;
            v35[4] = v33;
            v35[5] = v34;
            rawValue = v72;
            goto LABEL_18;
          case 8uLL:
            uint64_t v36 = (ValueMetadata *)type metadata accessor for AST.Atom(0);
            uint64_t v37 = swift_projectBox();
            uint64_t v91 = v36;
            char v92 = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
            boxed_opaque_existential_1Tm = __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)&v88);
            outlined init with copy of AST.Atom(v37, (uint64_t)boxed_opaque_existential_1Tm, type metadata accessor for AST.Atom);
            goto LABEL_19;
          case 9uLL:
            char v39 = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v40 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v41 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v42 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v43 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            uint64_t v44 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
            uint64_t v91 = &type metadata for AST.CustomCharacterClass;
            char v92 = lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass();
            uint64_t v45 = swift_allocObject();
            char v88 = (void *)v45;
            *(unsigned char *)(v45 + 16) = v39;
            *(void *)(v45 + 24) = v40;
            *(void *)(v45 + 32) = v41;
            rawValue = v72;
            *(void *)(v45 + 40) = v42;
            *(void *)(v45 + 48) = v43;
            *(void *)(v45 + 56) = v44;
            goto LABEL_18;
          case 0xAuLL:
            uint64_t v51 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            char v52 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            long long v53 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v54 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            uint64_t v56 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            char v55 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
            long long v70 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
            long long v71 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
            uint64_t v91 = &type metadata for AST.AbsentFunction;
            char v92 = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
            char v57 = (void *)swift_allocObject();
            char v88 = v57;
            v57[2] = v51;
            v57[3] = v52;
            v57[4] = v53;
            v57[5] = v54;
            v57[6] = v56;
            v57[7] = v55;
            v57[8] = v71;
            v57[9] = v70;
            uint64_t v58 = v56;
            rawValue = v72;
            outlined copy of AST.AbsentFunction.Kind(v53, v54, v58, v55);
            goto LABEL_19;
          case 0xBuLL:
            Swift::String v59 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v60 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v91 = &type metadata for AST.Empty;
            char v92 = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
            char v88 = (void *)v59;
            uint64_t v89 = v60;
            goto LABEL_19;
          default:
            uint64_t v13 = *(void *)(v12 + 16);
            uint64_t v14 = *(void *)(v12 + 24);
            uint64_t v91 = &type metadata for AST.Alternation;
            char v92 = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
            char v88 = (void *)v13;
            uint64_t v89 = v14;
            swift_bridgeObjectRetain();
LABEL_18:
            swift_bridgeObjectRetain();
LABEL_19:
            char v46 = v91;
            unint64_t v47 = v92;
            __swift_project_boxed_opaque_existential_1Tm(&v88, (uint64_t)v91);
            Swift::String v48 = *(void (**)(Swift::OpaquePointer *__return_ptr, ValueMetadata *, unint64_t))(v47 + 16);
            swift_retain();
            v48(into, v46, v47);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v88);
            if ((unint64_t)into[0]._rawValue >> 14 || into[1]._rawValue >= (void *)0x4000)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
              }
              uint64_t v9 = v93;
              Swift::String v50 = *(void *)(v93 + 16);
              uint64_t v49 = *(void *)(v93 + 24);
              if (v50 >= v49 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1);
                uint64_t v9 = v93;
              }
              *(void *)(v9 + 16) = v50 + 1;
              *(void *)(v9 + 8 * v50 + 32) = v12;
            }
            else
            {
              swift_release();
            }
            if (v74 != v11) {
              continue;
            }
            goto LABEL_28;
        }
      }
      break;
    }
    __break(1u);
LABEL_38:
    __break(1u);
    JUMPOUT(0x20D9A6AF4);
  }
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v9, a1, a2, v94, v66, v67);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v61 = (void *)v94[0];
  if (!*(void *)(v94[0] + 16)) {
    goto LABEL_38;
  }
  long long v62 = *(void *)(v94[0] + 40);
  long long v63 = HIBYTE(v62) & 0xF;
  if ((v62 & 0x2000000000000000) == 0) {
    long long v63 = *(void *)(v94[0] + 32) & 0xFFFFFFFFFFFFLL;
  }
  into[0] = *(Swift::OpaquePointer *)(v94[0] + 32);
  into[1]._rawValue = (void *)v62;
  *(void *)&uint64_t v76 = 0;
  *((void *)&v76 + 1) = v63;
  swift_bridgeObjectRetain_n();
  while ((unint64_t)String.Iterator.next()().value._object)
  {
    long long v64 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    if ((v64 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = (void *)MEMORY[0x263F8EE78];
LABEL_36:
  swift_bridgeObjectRelease();
  return v61;
}

void *AST._render(in:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  uint64_t v4 = AST.Node._render(in:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t _TreeNode.height.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v3) {
    return 1;
  }
  *(void *)&long long v14 = v3;
  uint64_t v4 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x210561910](&v11, v4, WitnessTable);
  uint64_t v6 = swift_bridgeObjectRelease();
  uint64_t v13 = v11;
  MEMORY[0x270FA5388](v6, v7);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = KeyPath;
  type metadata accessor for LazySequence();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  long long v11 = v14;
  uint64_t v12 = v15;
  type metadata accessor for LazyMapSequence();
  swift_getWitnessTable();
  Sequence<>.max()();
  swift_release();
  swift_bridgeObjectRelease();
  if (v17) {
    return 1;
  }
  uint64_t result = v16 + 1;
  if (__OFADD__(v16, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for _TreeNode.height : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = _TreeNode.height.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t Unicode.Scalar.AllScalars.startIndex.getter()
{
  return 0;
}

uint64_t Unicode.Scalar.AllScalars.endIndex.getter()
{
  return 1112064;
}

uint64_t Unicode.Scalar.AllScalars.subscript.getter(uint64_t result)
{
  if (result >= 55296)
  {
    BOOL v1 = __OFADD__(result, 2048);
    result += 2048;
    if (v1) {
      goto LABEL_11;
    }
  }
  if (result < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (HIDWORD(result))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result >> 11 == 27)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (WORD1(result) > 0x10u) {
    goto LABEL_10;
  }
  return result;
}

uint64_t Unicode.Scalar.AllScalars._customIndexOfEquatableElement(_:)(uint64_t result)
{
  if (result >= 0xE000) {
    return result - 2048;
  }
  else {
    return result;
  }
}

uint64_t Unicode.Scalar.AllScalars._customContainsEquatableElement(_:)()
{
  return 1;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Unicode.Scalar.AllScalars@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >> 11 <= 0x21E)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Unicode.Scalar.AllScalars(unint64_t *result)
{
  unint64_t v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v1 >> 11 <= 0x21E)
  {
    *uint64_t result = v1;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Unicode.Scalar.AllScalars(void *a1@<X8>)
{
  *a1 = 1112064;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Unicode.Scalar.AllScalars(uint64_t (*result)(), unint64_t *a2))()
{
  unint64_t v2 = *a2;
  if ((uint64_t)*a2 >= 55296)
  {
    BOOL v3 = __OFADD__(v2, 2048);
    v2 += 2048;
    if (v3) {
      goto LABEL_11;
    }
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (HIDWORD(v2))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 >> 11 != 27)
  {
    if (WORD1(v2) <= 0x10u)
    {
      *(_DWORD *)uint64_t result = v2;
      return AST.root.modify;
    }
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

void *protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.AllScalars@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if ((*result & 0x8000000000000000) != 0 || (uint64_t v2 = result[1], v2 > 1112064))
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = v2;
  }
  return result;
}

double protocol witness for Collection.indices.getter in conformance Unicode.Scalar.AllScalars@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_20D9D7640;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance Unicode.Scalar.AllScalars()
{
  return 0;
}

uint64_t protocol witness for Collection.count.getter in conformance Unicode.Scalar.AllScalars()
{
  return 1112064;
}

unsigned int *protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance Unicode.Scalar.AllScalars@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  if (v2 >= 0xE000) {
    v2 -= 2048;
  }
  *(void *)a2 = v2;
  *(_WORD *)(a2 + 8) = 0;
  return result;
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance Unicode.Scalar.AllScalars(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Unicode.Scalar.AllScalars@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v3 <= 0x10F800)
  {
    *a3 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.AllScalars@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Unicode.Scalar.AllScalars(void *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*result <= 0x10F800uLL && v2 <= 0x10F800) {
    return (void *)(v2 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance Unicode.Scalar.AllScalars(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance Unicode.Scalar.AllScalars(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance Unicode.Scalar.AllScalars@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >> 11 > 0x21EuLL) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance Unicode.Scalar.AllScalars(void *result)
{
  if (*result >> 11 > 0x21EuLL) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance Unicode.Scalar.AllScalars()
{
  return 1;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Unicode.Scalar.AllScalars()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t Unsupported.description.getter()
{
  return Unsupported.description.getter(0x726F707075736E55);
}

uint64_t Unreachable.description.getter()
{
  return Unsupported.description.getter(0x6168636165726E55);
}

uint64_t Unsupported.description.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  BOOL v4 = (void *)v1[1];
  uint64_t v5 = v1[2];
  char v6 = (void *)v1[3];
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v3;
  v7._uint64_t object = v4;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 538970663;
  v8._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v5;
  v9._uint64_t object = v6;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 58;
  v10._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t Unsupported.init(_:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, void *a4@<X8>)
{
  uint64_t result = StaticString.description.getter();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = v9;
  a4[4] = a3;
  return result;
}

uint64_t Range.destructure.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v9(a1, v3, v6);
  uint64_t v7 = v3 + *(int *)(a3 + 36);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a2, v7, v6);
}

uint64_t BidirectionalCollection.mapOffsets(_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v44 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = MEMORY[0x270FA5388](TupleTypeMetadata2, v3);
  uint64_t v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4, v6);
  uint64_t v38 = (char *)&v37 - v8;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v7, v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v11, v14);
  char v17 = (char *)&v37 - v16;
  MEMORY[0x270FA5388](v15, v18);
  long long v20 = (char *)&v37 - v19;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  uint64_t v39 = v9;
  long long v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v17, AssociatedTypeWitness);
  dispatch thunk of Collection.endIndex.getter();
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  uint64_t v44 = v9 + 8;
  uint64_t v41 = v21;
  v21(v13, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v24 = TupleTypeMetadata2;
    uint64_t v25 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v37 = AssociatedConformanceWitness;
    long long v26 = v38;
    uint64_t v27 = v39;
    long long v28 = &v38[v25];
    long long v29 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v29(v38, v20, AssociatedTypeWitness);
    v29(v28, v17, AssociatedTypeWitness);
    long long v30 = v40;
    uint64_t v31 = &v40[*(int *)(v24 + 48)];
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v32(v40, v26, AssociatedTypeWitness);
    v32(v31, v28, AssociatedTypeWitness);
    uint64_t v33 = v43;
    v29(v43, v30, AssociatedTypeWitness);
    uint64_t v34 = (uint64_t (*)(char *, uint64_t))v41;
    v41(v31, AssociatedTypeWitness);
    Swift::String v35 = &v30[*(int *)(v24 + 48)];
    v29(v30, v26, AssociatedTypeWitness);
    v29(v35, v28, AssociatedTypeWitness);
    uint64_t v36 = type metadata accessor for Range();
    v29(&v33[*(int *)(v36 + 36)], v35, AssociatedTypeWitness);
    return v34(v30, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t BidirectionalCollection.flatmapOffsets(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char *a4@<X8>)
{
  LODWORD(v44) = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v43 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2, v5);
  uint64_t v39 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v38 = (char *)&v37 - v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Range();
  uint64_t v12 = MEMORY[0x270FA5388](v10, v11);
  uint64_t v13 = *(void **)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  char v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15, v18);
  long long v22 = (char *)&v37 - v21;
  if (v44)
  {
    uint64_t v41 = v20;
    uint64_t v44 = v19;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v40 = v10;
      uint64_t v26 = TupleTypeMetadata2;
      uint64_t v27 = v38;
      long long v28 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
      long long v29 = (void (*)(char *, char *, uint64_t))v13[4];
      v29(v38, v22, AssociatedTypeWitness);
      v29(v28, v17, AssociatedTypeWitness);
      long long v30 = v39;
      uint64_t v31 = &v39[*(int *)(v26 + 48)];
      uint64_t v32 = (void (*)(char *, char *, uint64_t))v13[2];
      v32(v39, v27, AssociatedTypeWitness);
      v32(v31, v28, AssociatedTypeWitness);
      uint64_t v33 = v41;
      v29((char *)v41, v30, AssociatedTypeWitness);
      uint64_t v34 = (void (*)(char *, uint64_t))v13[1];
      v34(v31, AssociatedTypeWitness);
      Swift::String v35 = &v30[*(int *)(TupleTypeMetadata2 + 48)];
      v29(v30, v27, AssociatedTypeWitness);
      v29(v35, v28, AssociatedTypeWitness);
      uint64_t v36 = v40;
      v29((char *)(v33 + *(int *)(v40 + 36)), v35, AssociatedTypeWitness);
      v34(v30, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 32))(v43, v33, v36);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    long long v23 = v43;
    uint64_t v24 = v41;
    return BidirectionalCollection.mapOffsets(_:)(v24, v23);
  }
  return result;
}

uint64_t Collection.split(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for PartialRangeFrom();
  uint64_t v27 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v12);
  uint64_t v26 = (char *)&v23 - v13;
  uint64_t v14 = type metadata accessor for PartialRangeUpTo();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14, v16);
  uint64_t v18 = (char *)&v23 - v17;
  uint64_t v28 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v24 = v11;
    uint64_t v25 = a3;
    long long v23 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);
    v23(v18, a4, AssociatedTypeWitness);
    swift_getWitnessTable();
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    dispatch thunk of Collection.subscript.getter();
    uint64_t v20 = a4 + *(int *)(type metadata accessor for Range() + 36);
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if (result)
    {
      uint64_t v21 = v26;
      v23(v26, v20, AssociatedTypeWitness);
      uint64_t v22 = v24;
      swift_getWitnessTable();
      Collection.subscript.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v21, v22);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Collection.offset(ofIndex:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v2);
  uint64_t v4 = (char *)&v7 - v3;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v5 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
  return v5;
}

uint64_t Collection.convertByOffset<A>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, char *a5@<X8>)
{
  uint64_t v44 = a5;
  uint64_t v45 = a1;
  uint64_t v46 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2, v9);
  uint64_t v43 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  uint64_t v41 = (char *)&v40 - v14;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v19);
  uint64_t v21 = (char *)&v40 - v20;
  Collection.offset(of:)(a1, a2, a3);
  Collection.index(atOffset:)();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for Range();
  Collection.offset(of:)(v45 + *(int *)(v22 + 36), a2, a3);
  Collection.index(atOffset:)();
  long long v23 = v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v46 = AssociatedConformanceWitness;
    uint64_t v27 = v41;
    uint64_t v26 = v42;
    uint64_t v28 = v43;
    uint64_t v29 = v18;
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v32(v41, v23, AssociatedTypeWitness);
    uint64_t v33 = v31;
    v32(v31, v29, AssociatedTypeWitness);
    uint64_t v34 = &v28[*(int *)(v30 + 48)];
    Swift::String v35 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v35(v28, v27, AssociatedTypeWitness);
    v35(v34, v33, AssociatedTypeWitness);
    uint64_t v36 = v44;
    v32(v44, v28, AssociatedTypeWitness);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v26 + 8);
    v37(v34, AssociatedTypeWitness);
    uint64_t v38 = &v28[*(int *)(TupleTypeMetadata2 + 48)];
    v32(v28, v27, AssociatedTypeWitness);
    v32(v38, v33, AssociatedTypeWitness);
    uint64_t v39 = type metadata accessor for Range();
    v32(&v36[*(int *)(v39 + 36)], v38, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v37)(v28, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Collection.convertByOffset<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Collection.index(atOffset:)();
}

uint64_t UnsafeMutableRawPointer.roundedUp<A>(toAlignmentOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a3 - 8) + 80);
  if (!__OFADD__(a2, v3)) {
    return (a2 + v3) & ~v3;
  }
  __break(1u);
  return result;
}

BOOL String.isOnGraphemeClusterBoundary(_:)()
{
  swift_bridgeObjectRetain();
  String.Index.init(_:within:)();
  return (v0 & 1) == 0;
}

uint64_t String.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in String.init<A>(_:), 0, a2, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], a3, MEMORY[0x263F8E658], a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt32] and conformance [A]);
  lazy protocol witness table accessor for type Unicode.UTF32 and conformance Unicode.UTF32();
  uint64_t result = static String._fromCodeUnits<A, B>(_:encoding:repair:)();
  if (v11)
  {
    uint64_t v12 = result;
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *closure #1 in String.init<A>(_:)@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t AnyType.base.getter()
{
  return *(void *)v0;
}

uint64_t (*AnyType.base.modify())()
{
  return AST.root.modify;
}

BOOL static AnyType.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void AnyType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AnyType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Unicode.Script.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v4 = v2 - 128;
  if (v2 >= 0x80)
  {
    char v5 = -111;
    LOBYTE(v2) = 0x80;
    switch(v4)
    {
      case 0uLL:
        goto LABEL_2;
      case 1uLL:
        LOBYTE(v2) = -127;
        goto LABEL_2;
      case 2uLL:
        LOBYTE(v2) = -126;
        goto LABEL_2;
      case 3uLL:
        LOBYTE(v2) = -125;
        goto LABEL_2;
      case 4uLL:
        LOBYTE(v2) = -124;
        goto LABEL_2;
      case 5uLL:
        LOBYTE(v2) = -123;
        goto LABEL_2;
      case 6uLL:
        LOBYTE(v2) = -122;
        goto LABEL_2;
      case 7uLL:
        LOBYTE(v2) = -121;
        goto LABEL_2;
      case 8uLL:
        LOBYTE(v2) = -120;
        goto LABEL_2;
      case 9uLL:
        LOBYTE(v2) = -119;
        goto LABEL_2;
      case 0xAuLL:
        LOBYTE(v2) = -118;
        goto LABEL_2;
      case 0xBuLL:
        LOBYTE(v2) = -117;
        goto LABEL_2;
      case 0xCuLL:
        LOBYTE(v2) = -116;
        goto LABEL_2;
      case 0xDuLL:
        LOBYTE(v2) = -115;
        goto LABEL_2;
      case 0xEuLL:
        LOBYTE(v2) = -114;
        goto LABEL_2;
      case 0xFuLL:
        LOBYTE(v2) = -113;
        goto LABEL_2;
      case 0x10uLL:
        LOBYTE(v2) = -112;
        goto LABEL_2;
      case 0x11uLL:
        break;
      case 0x12uLL:
        char v5 = -110;
        break;
      case 0x13uLL:
        char v5 = -109;
        break;
      case 0x14uLL:
        char v5 = -108;
        break;
      case 0x15uLL:
        char v5 = -107;
        break;
      case 0x16uLL:
        char v5 = -106;
        break;
      case 0x17uLL:
        char v5 = -105;
        break;
      case 0x18uLL:
        char v5 = -104;
        break;
      case 0x19uLL:
        char v5 = -103;
        break;
      case 0x1AuLL:
        char v5 = -102;
        break;
      case 0x1BuLL:
        char v5 = -101;
        break;
      case 0x1CuLL:
        char v5 = -100;
        break;
      case 0x1DuLL:
        char v5 = -99;
        break;
      case 0x1EuLL:
        char v5 = -98;
        break;
      case 0x1FuLL:
        char v5 = -97;
        break;
      case 0x20uLL:
        char v5 = -96;
        break;
      case 0x21uLL:
        char v5 = -95;
        break;
      case 0x22uLL:
        char v5 = -94;
        break;
      default:
        char v5 = -93;
        break;
    }
  }
  else
  {
LABEL_2:
    char v5 = v2;
  }
  *a1 = v5;
  return result;
}

void *static Unicode.Script.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.Script.allCases.getter;
}

uint64_t Unicode.Script.rawValue.getter()
{
  uint64_t result = 0xD000000000000015;
  switch(*v0)
  {
    case 1:
      return 1836017729;
    case 2:
      return result;
    case 3:
      return 0x636962617241;
    case 4:
      return 0x6E61696E656D7241;
    case 5:
      unsigned int v2 = 1936029249;
      goto LABEL_158;
    case 6:
      unsigned int v3 = 1768710466;
      return v3 | 0x6573656E00000000;
    case 7:
      return 0x6D756D6142;
    case 8:
      return 0x61565F6173736142;
    case 9:
      return 0x6B61746142;
    case 0xA:
      return 0x696C61676E6542;
    case 0xB:
      return 0x6B75736B69616842;
    case 0xC:
      return 0x6F666F6D6F706F42;
    case 0xD:
      return 0x696D68617242;
    case 0xE:
      return 0x656C6C69617242;
    case 0xF:
      unsigned int v3 = 1768387906;
      return v3 | 0x6573656E00000000;
    case 0x10:
      return 0x6469687542;
    case 0x11:
      return 0xD000000000000013;
    case 0x12:
      return 0x6E6169726143;
    case 0x13:
      return 0xD000000000000012;
    case 0x14:
      return 0x616D6B616843;
    case 0x15:
      return 1835100227;
    case 0x16:
      return 0x65656B6F72656843;
    case 0x17:
      return 0x696D7361726F6843;
    case 0x18:
      return 0x6E6F6D6D6F43;
    case 0x19:
      return 0x636974706F43;
    case 0x1A:
      return 0x726F6669656E7543;
    case 0x1B:
      return 0x746F6972707943;
    case 0x1C:
      return 0x63696C6C69727943;
    case 0x1D:
      return 0x694D5F6F72707943;
    case 0x1E:
      return 0x74657265736544;
    case 0x1F:
      return 0x6167616E61766544;
    case 0x20:
      return 0x6B415F7365766944;
    case 0x21:
      return 0x6172676F44;
    case 0x22:
      return 0x6E61796F6C707544;
    case 0x23:
      return 0xD000000000000014;
    case 0x24:
      return 0x6E617361626C45;
    case 0x25:
      unsigned int v4 = 1836674117;
      return v4 | 0x63696100000000;
    case 0x26:
      return 0x6369706F69687445;
    case 0x27:
      return 0x6E616967726F6547;
    case 0x28:
      return 0x74696C6F67616C47;
    case 0x29:
      return 0x636968746F47;
    case 0x2A:
      return 0x6168746E617247;
    case 0x2B:
      return 0x6B65657247;
    case 0x2C:
      return 0x69746172616A7547;
    case 0x2D:
      return 0x5F616C616A6E7547;
    case 0x2E:
      return 0x69686B756D727547;
    case 0x2F:
      return 7233864;
    case 0x30:
      return 0x6C75676E6148;
    case 0x31:
      return 0x525F6966696E6148;
    case 0x32:
      return 0x6F6F6E756E6148;
    case 0x33:
      return 0x6E6172746148;
    case 0x34:
      return 0x776572626548;
    case 0x35:
      return 0x616E616761726948;
    case 0x36:
    case 0x58:
    case 0xA2:
      return 0xD000000000000010;
    case 0x37:
      return 0x6574697265686E49;
    case 0x38:
      return 0xD000000000000015;
    case 0x39:
      return 0xD000000000000016;
    case 0x3A:
      unsigned int v3 = 1635148106;
      return v3 | 0x6573656E00000000;
    case 0x3B:
      return 0x69687469614BLL;
    case 0x3C:
      unsigned int v5 = 1852727627;
      return v5 | 0x61646100000000;
    case 0x3D:
      return 0x616E616B6174614BLL;
    case 0x3E:
      return 0xD000000000000014;
    case 0x3F:
      return 0x694C5F686179614BLL;
    case 0x40:
      return 0x7468736F7261684BLL;
    case 0x41:
      return 0xD000000000000013;
    case 0x42:
      return 0x72656D684BLL;
    case 0x43:
      return 0x696B6A6F684BLL;
    case 0x44:
      return 0x646177616475684BLL;
    case 0x45:
      return 7299404;
    case 0x46:
      return 0x6E6974614CLL;
    case 0x47:
      return 0x61686370654CLL;
    case 0x48:
      return 0x75626D694CLL;
    case 0x49:
      return 0x415F7261656E694CLL;
    case 0x4A:
      return 0x425F7261656E694CLL;
    case 0x4B:
      return 1970497868;
    case 0x4C:
      return 0x6E616963794CLL;
    case 0x4D:
      return 0x6E616964794CLL;
    case 0x4E:
      return 0x696E616A6168614DLL;
    case 0x4F:
      return 0x726173616B614DLL;
    case 0x50:
      return 0x616C6179616C614DLL;
    case 0x51:
      unsigned int v4 = 1684955469;
      return v4 | 0x63696100000000;
    case 0x52:
      return 0x65616863696E614DLL;
    case 0x53:
      return 0x6E65686372614DLL;
    case 0x54:
      return 0x5F6D61726173614DLL;
    case 0x55:
      return 0x646961666564654DLL;
    case 0x56:
      return 0x4D5F69657465654DLL;
    case 0x57:
      return 0x694B5F65646E654DLL;
    case 0x59:
      return 0xD000000000000014;
    case 0x5A:
      return 1868654925;
    case 0x5B:
      return 1768189773;
    case 0x5C:
      return 0x61696C6F676E6F4DLL;
    case 0x5D:
      return 7303757;
    case 0x5E:
      return 0x696E61746C754DLL;
    case 0x5F:
      return 0x72616D6E61794DLL;
    case 0x60:
      return 0x616561746162614ELL;
    case 0x61:
      return 0x67616E69646E614ELL;
    case 0x62:
      return 1635214670;
    case 0x63:
      return 0x5F6961545F77654ELL;
    case 0x64:
      return 7301966;
    case 0x65:
      return 0x756873754ELL;
    case 0x66:
      return 0xD000000000000016;
    case 0x67:
      return 0x6D6168674FLL;
    case 0x68:
      return 0x696B6968435F6C4FLL;
    case 0x69:
      return 0x676E75485F646C4FLL;
    case 0x6A:
      return 0x6C6174495F646C4FLL;
    case 0x6B:
      return 0xD000000000000011;
    case 0x6C:
      return 0x6D7265505F646C4FLL;
    case 0x6D:
      return 0x737265505F646C4FLL;
    case 0x6E:
      return 0x64676F535F646C4FLL;
    case 0x6F:
      return 0xD000000000000011;
    case 0x70:
      return 0x6B7275545F646C4FLL;
    case 0x71:
      return 0x686779555F646C4FLL;
    case 0x72:
      return 0x617969724FLL;
    case 0x73:
      return 0x656761734FLL;
    case 0x74:
      return 0x61796E616D734FLL;
    case 0x75:
      return 0x485F687761686150;
    case 0x76:
      return 0x6E6572796D6C6150;
    case 0x77:
      return 0x5F6E69435F756150;
    case 0x78:
      return 0x61505F7367616850;
    case 0x79:
      return 0x6963696E656F6850;
    case 0x7A:
      return 0x5F7265746C617350;
    case 0x7B:
      return 0x676E616A6552;
    case 0x7C:
      return 0x63696E7552;
    case 0x7D:
      return 0x61746972616D6153;
    case 0x7E:
      return 0x7468736172756153;
    case 0x7F:
      unsigned int v5 = 1918986323;
      return v5 | 0x61646100000000;
    case 0x80:
      unsigned int v6 = 1986095187;
      goto LABEL_139;
    case 0x81:
      return 0x6D616864646953;
    case 0x82:
      return 0x746972576E676953;
    case 0x83:
      return 0x616C61686E6953;
    case 0x84:
      unsigned int v6 = 1684500307;
LABEL_139:
      uint64_t result = v6 | 0x6E616900000000;
      break;
    case 0x85:
      uint64_t result = 0x6D6F535F61726F53;
      break;
    case 0x86:
      uint64_t result = 0x6F626D6F796F53;
      break;
    case 0x87:
      uint64_t result = 0x73656E61646E7553;
      break;
    case 0x88:
      uint64_t result = 0x4E5F69746F6C7953;
      break;
    case 0x89:
      uint64_t result = 0x636169727953;
      break;
    case 0x8A:
      uint64_t result = 0x676F6C61676154;
      break;
    case 0x8B:
      uint64_t result = 0x61776E6162676154;
      break;
    case 0x8C:
      uint64_t result = 0x654C5F696154;
      break;
    case 0x8D:
      uint64_t result = 0x6D6168545F696154;
      break;
    case 0x8E:
      uint64_t result = 0x746569565F696154;
      break;
    case 0x8F:
      uint64_t result = 0x69726B6154;
      break;
    case 0x90:
      uint64_t result = 0x6C696D6154;
      break;
    case 0x91:
      uint64_t result = 0x6173676E6154;
      break;
    case 0x92:
      uint64_t result = 0x7475676E6154;
      break;
    case 0x93:
      uint64_t result = 0x7567756C6554;
      break;
    case 0x94:
      uint64_t result = 0x616E61616854;
      break;
    case 0x95:
      uint64_t result = 1767991380;
      break;
    case 0x96:
      unsigned int v2 = 1700948308;
LABEL_158:
      uint64_t result = v2 | 0x6E617400000000;
      break;
    case 0x97:
      uint64_t result = 0x6867616E69666954;
      break;
    case 0x98:
      uint64_t result = 0x61747568726954;
      break;
    case 0x99:
      uint64_t result = 1869901652;
      break;
    case 0x9A:
      uint64_t result = 0x6369746972616755;
      break;
    case 0x9B:
      uint64_t result = 0x6E776F6E6B6E55;
      break;
    case 0x9C:
      uint64_t result = 6906198;
      break;
    case 0x9D:
      uint64_t result = 0x6971756B68746956;
      break;
    case 0x9E:
      uint64_t result = 0x6F68636E6157;
      break;
    case 0x9F:
      uint64_t result = 0x435F676E61726157;
      break;
    case 0xA0:
      uint64_t result = 0x6964697A6559;
      break;
    case 0xA1:
      uint64_t result = 26969;
      break;
    default:
      uint64_t result = 0x6D616C6441;
      break;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.Script(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, Unicode.Script.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.Script@<X0>(char *a1@<X8>)
{
  return Unicode.Script.init(rawValue:)(a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.Script@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Unicode.Script.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.Script(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))Unicode.Script.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.Script(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))Unicode.Script.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.Script(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))Unicode.Script.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.Script(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.Script.allCases.getter;
}

void *static Unicode.POSIXProperty.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.POSIXProperty.allCases.getter;
}

uint64_t Unicode.POSIXProperty.rawValue.getter()
{
  return *(void *)&aAlnum_1[8 * *v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.POSIXProperty(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.POSIXProperty@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Unicode.POSIXProperty.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.POSIXProperty(void *a1@<X8>)
{
  uint64_t v2 = 8 * *v1;
  uint64_t v3 = *(void *)&aAlnum_1[v2];
  uint64_t v4 = *(void *)((char *)&unk_20D9DCBE8 + v2);
  *a1 = v3;
  a1[1] = v4;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.POSIXProperty()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.POSIXProperty()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.POSIXProperty()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.POSIXProperty(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.POSIXProperty.allCases.getter;
}

uint64_t Unicode.ExtendedGeneralCategory.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 0;
  char v5 = 20;
  switch(v2)
  {
    case 0:
      goto LABEL_22;
    case 1:
      char v4 = 1;
      goto LABEL_22;
    case 2:
      char v4 = 2;
      goto LABEL_22;
    case 3:
      char v4 = 3;
      goto LABEL_22;
    case 4:
      char v4 = 4;
      goto LABEL_22;
    case 5:
      char v4 = 5;
      goto LABEL_22;
    case 6:
      char v4 = 6;
      goto LABEL_22;
    case 7:
      char v4 = 7;
      goto LABEL_22;
    case 8:
      char v4 = 8;
      goto LABEL_22;
    case 9:
      char v4 = 9;
      goto LABEL_22;
    case 10:
      char v4 = 10;
      goto LABEL_22;
    case 11:
      char v4 = 11;
      goto LABEL_22;
    case 12:
      char v4 = 12;
      goto LABEL_22;
    case 13:
      char v4 = 13;
      goto LABEL_22;
    case 14:
      char v4 = 14;
      goto LABEL_22;
    case 15:
      char v4 = 15;
      goto LABEL_22;
    case 16:
      char v4 = 16;
      goto LABEL_22;
    case 17:
      char v4 = 17;
      goto LABEL_22;
    case 18:
      char v4 = 18;
      goto LABEL_22;
    case 19:
      char v4 = 19;
LABEL_22:
      char v5 = v4;
      break;
    case 20:
      break;
    case 21:
      char v5 = 21;
      break;
    case 22:
      char v5 = 22;
      break;
    case 23:
      char v5 = 23;
      break;
    case 24:
      char v5 = 24;
      break;
    case 25:
      char v5 = 25;
      break;
    case 26:
      char v5 = 26;
      break;
    case 27:
      char v5 = 27;
      break;
    case 28:
      char v5 = 28;
      break;
    case 29:
      char v5 = 29;
      break;
    case 30:
      char v5 = 30;
      break;
    case 31:
      char v5 = 31;
      break;
    case 32:
      char v5 = 32;
      break;
    case 33:
      char v5 = 33;
      break;
    case 34:
      char v5 = 34;
      break;
    case 35:
      char v5 = 35;
      break;
    case 36:
      char v5 = 36;
      break;
    case 37:
      char v5 = 37;
      break;
    default:
      char v5 = 38;
      break;
  }
  *a1 = v5;
  return result;
}

void *static Unicode.ExtendedGeneralCategory.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.ExtendedGeneralCategory.allCases.getter;
}

uint64_t Unicode.ExtendedGeneralCategory.rawValue.getter()
{
  return qword_20D9DCC18[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, Unicode.ExtendedGeneralCategory.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.ExtendedGeneralCategory@<X0>(char *a1@<X8>)
{
  return Unicode.ExtendedGeneralCategory.init(rawValue:)(a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.ExtendedGeneralCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Unicode.ExtendedGeneralCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))Unicode.ExtendedGeneralCategory.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))Unicode.ExtendedGeneralCategory.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))Unicode.ExtendedGeneralCategory.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.ExtendedGeneralCategory(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.ExtendedGeneralCategory.allCases.getter;
}

uint64_t Unicode.BinaryProperty.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 0;
  char v5 = 49;
  switch(v2)
  {
    case 0:
      goto LABEL_51;
    case 1:
      char v4 = 1;
      goto LABEL_51;
    case 2:
      char v4 = 2;
      goto LABEL_51;
    case 3:
      char v4 = 3;
      goto LABEL_51;
    case 4:
      char v4 = 4;
      goto LABEL_51;
    case 5:
      char v4 = 5;
      goto LABEL_51;
    case 6:
      char v4 = 6;
      goto LABEL_51;
    case 7:
      char v4 = 7;
      goto LABEL_51;
    case 8:
      char v4 = 8;
      goto LABEL_51;
    case 9:
      char v4 = 9;
      goto LABEL_51;
    case 10:
      char v4 = 10;
      goto LABEL_51;
    case 11:
      char v4 = 11;
      goto LABEL_51;
    case 12:
      char v4 = 12;
      goto LABEL_51;
    case 13:
      char v4 = 13;
      goto LABEL_51;
    case 14:
      char v4 = 14;
      goto LABEL_51;
    case 15:
      char v4 = 15;
      goto LABEL_51;
    case 16:
      char v4 = 16;
      goto LABEL_51;
    case 17:
      char v4 = 17;
      goto LABEL_51;
    case 18:
      char v4 = 18;
      goto LABEL_51;
    case 19:
      char v4 = 19;
      goto LABEL_51;
    case 20:
      char v4 = 20;
      goto LABEL_51;
    case 21:
      char v4 = 21;
      goto LABEL_51;
    case 22:
      char v4 = 22;
      goto LABEL_51;
    case 23:
      char v4 = 23;
      goto LABEL_51;
    case 24:
      char v4 = 24;
      goto LABEL_51;
    case 25:
      char v4 = 25;
      goto LABEL_51;
    case 26:
      char v4 = 26;
      goto LABEL_51;
    case 27:
      char v4 = 27;
      goto LABEL_51;
    case 28:
      char v4 = 28;
      goto LABEL_51;
    case 29:
      char v4 = 29;
      goto LABEL_51;
    case 30:
      char v4 = 30;
      goto LABEL_51;
    case 31:
      char v4 = 31;
      goto LABEL_51;
    case 32:
      char v4 = 32;
      goto LABEL_51;
    case 33:
      char v4 = 33;
      goto LABEL_51;
    case 34:
      char v4 = 34;
      goto LABEL_51;
    case 35:
      char v4 = 35;
      goto LABEL_51;
    case 36:
      char v4 = 36;
      goto LABEL_51;
    case 37:
      char v4 = 37;
      goto LABEL_51;
    case 38:
      char v4 = 38;
      goto LABEL_51;
    case 39:
      char v4 = 39;
      goto LABEL_51;
    case 40:
      char v4 = 40;
      goto LABEL_51;
    case 41:
      char v4 = 41;
      goto LABEL_51;
    case 42:
      char v4 = 42;
      goto LABEL_51;
    case 43:
      char v4 = 43;
      goto LABEL_51;
    case 44:
      char v4 = 44;
      goto LABEL_51;
    case 45:
      char v4 = 45;
      goto LABEL_51;
    case 46:
      char v4 = 46;
      goto LABEL_51;
    case 47:
      char v4 = 47;
      goto LABEL_51;
    case 48:
      char v4 = 48;
LABEL_51:
      char v5 = v4;
      break;
    case 49:
      break;
    case 50:
      char v5 = 50;
      break;
    case 51:
      char v5 = 51;
      break;
    case 52:
      char v5 = 52;
      break;
    case 53:
      char v5 = 53;
      break;
    case 54:
      char v5 = 54;
      break;
    case 55:
      char v5 = 55;
      break;
    case 56:
      char v5 = 56;
      break;
    case 57:
      char v5 = 57;
      break;
    case 58:
      char v5 = 58;
      break;
    case 59:
      char v5 = 59;
      break;
    case 60:
      char v5 = 60;
      break;
    case 61:
      char v5 = 61;
      break;
    case 62:
      char v5 = 62;
      break;
    case 63:
      char v5 = 63;
      break;
    case 64:
      char v5 = 64;
      break;
    case 65:
      char v5 = 65;
      break;
    case 66:
      char v5 = 66;
      break;
    default:
      char v5 = 67;
      break;
  }
  *a1 = v5;
  return result;
}

void *static Unicode.BinaryProperty.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.BinaryProperty.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, Unicode.BinaryProperty.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5();
  uint64_t v8 = v7;
  if (v6 == a5() && v8 == v9) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.BinaryProperty@<X0>(char *a1@<X8>)
{
  return Unicode.BinaryProperty.init(rawValue:)(a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.BinaryProperty@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Unicode.BinaryProperty.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))Unicode.BinaryProperty.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = Hasher.init(_seed:)();
  a3(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))Unicode.BinaryProperty.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))Unicode.BinaryProperty.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = Hasher.init(_seed:)();
  a4(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.BinaryProperty(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.BinaryProperty.allCases.getter;
}

uint64_t Unicode.Block.init(rawValue:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int16 *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StaticString>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 32) = "Basic_Latin";
  *(void *)(v6 + 40) = 11;
  *(void *)(v6 + 104) = "Latin_Extended_B";
  *(void *)(v6 + 128) = "IPA_Extensions";
  *(void *)(v6 + 176) = "Combining_Diacritical_Marks";
  *(void *)(v6 + 184) = 27;
  *(void *)(v6 + 200) = "Greek_and_Coptic";
  *(void *)(v6 + 272) = "Armenian";
  *(void *)(v6 + 296) = "Hebrew";
  *(void *)(v6 + 320) = "Arabic";
  *(void *)(v6 + 344) = "Syriac";
  *(void *)(v6 + 392) = "Thaana";
  *(void *)(v6 + 464) = "Mandaic";
  *(void *)(v6 + 472) = 7;
  *(void *)(v6 + 488) = "Syriac_Supplement";
  *(void *)(v6 + 512) = "Arabic_Extended_B";
  *(void *)(v6 + 536) = "Arabic_Extended_A";
  *(void *)(v6 + 560) = "Devanagari";
  *(void *)(v6 + 568) = 10;
  *(void *)(v6 + 584) = "Bengali";
  *(void *)(v6 + 592) = 7;
  *(void *)(v6 + 608) = "Gurmukhi";
  *(void *)(v6 + 632) = "Gujarati";
  *(void *)(v6 + 656) = "Oriya";
  *(void *)(v6 + 680) = "Tamil";
  *(void *)(v6 + 704) = "Telugu";
  *(void *)(v6 + 728) = "Kannada";
  *(void *)(v6 + 736) = 7;
  *(void *)(v6 + 752) = "Malayalam";
  *(void *)(v6 + 776) = "Sinhala";
  *(void *)(v6 + 784) = 7;
  *(void *)(v6 + 800) = "Thai";
  *(void *)(v6 + 824) = "Lao";
  *(void *)(v6 + 848) = "Tibetan";
  *(void *)(v6 + 856) = 7;
  *(void *)(v6 + 872) = "Myanmar";
  *(void *)(v6 + 880) = 7;
  *(void *)(v6 + 896) = "Georgian";
  *(void *)(v6 + 920) = "Hangul_Jamo";
  *(void *)(v6 + 944) = "Ethiopic";
  *(void *)(v6 + 968) = "Ethiopic_Supplement";
  *(void *)(v6 + 992) = "Cherokee";
  *(void *)(v6 + 1016) = "Unified_Canadian_Aboriginal_Syllabics";
  *(void *)(v6 + 1040) = "Ogham";
  *(void *)(v6 + 1064) = "Runic";
  *(void *)(v6 + 1088) = "Tagalog";
  *(void *)(v6 + 1096) = 7;
  *(void *)(v6 + 1112) = "Hanunoo";
  *(void *)(v6 + 1120) = 7;
  *(void *)(v6 + 1136) = "Buhid";
  *(void *)(v6 + 1160) = "Tagbanwa";
  *(void *)(v6 + 1184) = "Khmer";
  *(void *)(v6 + 1208) = "Mongolian";
  *(void *)(v6 + 1232) = "Unified_Canadian_Aboriginal_Syllabics_Extended";
  *(void *)(v6 + 1240) = 46;
  *(void *)(v6 + 1256) = "Limbu";
  *(void *)(v6 + 1280) = "Tai_Le";
  *(void *)(v6 + 1304) = "New_Tai_Lue";
  *(void *)(v6 + 1328) = "Khmer_Symbols";
  *(void *)(v6 + 1352) = "Buginese";
  *(void *)(v6 + 1376) = "Tai_Tham";
  *(void *)(v6 + 1400) = "Combining_Diacritical_Marks_Extended";
  *(void *)(v6 + 1424) = "Balinese";
  *(void *)(v6 + 1448) = "Sundanese";
  *(void *)(v6 + 1472) = "Batak";
  *(void *)(v6 + 1496) = "Lepcha";
  *(void *)(v6 + 1520) = "Ol_Chiki";
  *(void *)(v6 + 1544) = "Cyrillic_Extended_C";
  *(void *)(v6 + 1568) = "Georgian_Extended";
  *(void *)(v6 + 1592) = "Sundanese_Supplement";
  *(void *)(v6 + 1616) = "Vedic_Extensions";
  *(void *)(v6 + 1640) = "Phonetic_Extensions";
  *(void *)(v6 + 1664) = "Phonetic_Extensions_Supplement";
  *(void *)(v6 + 1688) = "Combining_Diacritical_Marks_Supplement";
  *(void *)(v6 + 1712) = "Latin_Extended_Additional";
  *(void *)(v6 + 1736) = "Greek_Extended";
  *(void *)(v6 + 1760) = "General_Punctuation";
  *(void *)(v6 + 1784) = "Superscripts_and_Subscripts";
  *(void *)(v6 + 1808) = "Currency_Symbols";
  *(void *)(v6 + 1832) = "Combining_Diacritical_Marks_for_Symbols";
  *(void *)(v6 + 1856) = "Letterlike_Symbols";
  *(void *)(v6 + 1880) = "Number_Forms";
  *(void *)(v6 + 1904) = "Arrows";
  *(void *)(v6 + 1928) = "Mathematical_Operators";
  *(void *)(v6 + 1952) = "Miscellaneous_Technical";
  *(void *)(v6 + 1976) = "Control_Pictures";
  *(void *)(v6 + 2000) = "Optical_Character_Recognition";
  *(void *)(v6 + 2024) = "Enclosed_Alphanumerics";
  *(void *)(v6 + 2048) = "Box_Drawing";
  *(void *)(v6 + 2072) = "Block_Elements";
  *(void *)(v6 + 2096) = "Geometric_Shapes";
  *(void *)(v6 + 2120) = "Miscellaneous_Symbols";
  *(void *)(v6 + 2144) = "Dingbats";
  *(void *)(v6 + 2168) = "Miscellaneous_Mathematical_Symbols_A";
  *(void *)(v6 + 2192) = "Supplemental_Arrows_A";
  *(void *)(v6 + 2216) = "Braille_Patterns";
  *(void *)(v6 + 2240) = "Supplemental_Arrows_B";
  *(void *)(v6 + 2264) = "Miscellaneous_Mathematical_Symbols_B";
  *(void *)(v6 + 2288) = "Supplemental_Mathematical_Operators";
  *(void *)(v6 + 2312) = "Miscellaneous_Symbols_and_Arrows";
  *(void *)(v6 + 2336) = "Glagolitic";
  *(void *)(v6 + 2360) = "Latin_Extended_C";
  *(void *)(v6 + 2384) = "Coptic";
  *(void *)(v6 + 2408) = "Georgian_Supplement";
  *(void *)(v6 + 2432) = "Tifinagh";
  *(void *)(v6 + 2456) = "Ethiopic_Extended";
  *(void *)(v6 + 2480) = "Cyrillic_Extended_A";
  *(void *)(v6 + 2504) = "Supplemental_Punctuation";
  *(void *)(v6 + 2528) = "CJK_Radicals_Supplement";
  *(void *)(v6 + 2552) = "Kangxi_Radicals";
  *(void *)(v6 + 2576) = "Ideographic_Description_Characters";
  *(void *)(v6 + 2600) = "CJK_Symbols_and_Punctuation";
  *(void *)(v6 + 2624) = "Hiragana";
  *(void *)(v6 + 2648) = "Katakana";
  *(void *)(v6 + 2672) = "Bopomofo";
  *(void *)(v6 + 2696) = "Hangul_Compatibility_Jamo";
  *(void *)(v6 + 2720) = "Kanbun";
  *(void *)(v6 + 2744) = "Bopomofo_Extended";
  *(void *)(v6 + 2768) = "CJK_Strokes";
  *(void *)(v6 + 2792) = "Katakana_Phonetic_Extensions";
  *(void *)(v6 + 2816) = "Enclosed_CJK_Letters_and_Months";
  *(void *)(v6 + 2840) = "CJK_Compatibility";
  *(void *)(v6 + 2864) = "CJK_Unified_Ideographs_Extension_A";
  *(void *)(v6 + 2888) = "Yijing_Hexagram_Symbols";
  *(void *)(v6 + 2912) = "CJK_Unified_Ideographs";
  *(void *)(v6 + 2936) = "Yi_Syllables";
  *(void *)(v6 + 2960) = "Yi_Radicals";
  *(void *)(v6 + 2984) = "Lisu";
  *(void *)(v6 + 3008) = "Vai";
  *(void *)(v6 + 3032) = "Cyrillic_Extended_B";
  *(void *)(v6 + 3056) = "Bamum";
  *(void *)(v6 + 3080) = "Modifier_Tone_Letters";
  *(void *)(v6 + 3104) = "Latin_Extended_D";
  *(void *)(v6 + 3128) = "Syloti_Nagri";
  *(void *)(v6 + 3152) = "Common_Indic_Number_Forms";
  *(void *)(v6 + 3176) = "Phags_pa";
  *(void *)(v6 + 3200) = "Saurashtra";
  *(void *)(v6 + 3224) = "Devanagari_Extended";
  *(void *)(v6 + 3248) = "Kayah_Li";
  *(void *)(v6 + 3272) = "Rejang";
  *(void *)(v6 + 3296) = "Hangul_Jamo_Extended_A";
  *(void *)(v6 + 3320) = "Javanese";
  *(void *)(v6 + 3344) = "Myanmar_Extended_B";
  *(void *)(v6 + 3368) = "Cham";
  *(void *)(v6 + 3392) = "Myanmar_Extended_A";
  *(void *)(v6 + 3416) = "Tai_Viet";
  *(void *)(v6 + 3440) = "Meetei_Mayek_Extensions";
  *(void *)(v6 + 3464) = "Ethiopic_Extended_A";
  *(void *)(v6 + 3488) = "Latin_Extended_E";
  *(void *)(v6 + 3512) = "Cherokee_Supplement";
  *(void *)(v6 + 3536) = "Meetei_Mayek";
  *(void *)(v6 + 3560) = "Hangul_Syllables";
  *(void *)(v6 + 3584) = "Hangul_Jamo_Extended_B";
  *(void *)(v6 + 3608) = "High_Surrogates";
  *(void *)(v6 + 3632) = "High_Private_Use_Surrogates";
  *(void *)(v6 + 3656) = "Low_Surrogates";
  *(void *)(v6 + 3680) = "Private_Use_Area";
  *(void *)(v6 + 3704) = "CJK_Compatibility_Ideographs";
  *(void *)(v6 + 3728) = "Alphabetic_Presentation_Forms";
  *(void *)(v6 + 3752) = "Arabic_Presentation_Forms_A";
  *(void *)(v6 + 3776) = "Variation_Selectors";
  *(void *)(v6 + 3800) = "Vertical_Forms";
  *(void *)(v6 + 3824) = "Combining_Half_Marks";
  *(void *)(v6 + 3848) = "CJK_Compatibility_Forms";
  *(void *)(v6 + 3872) = "Small_Form_Variants";
  *(void *)(v6 + 1792) = 27;
  *(void *)(v6 + 3896) = "Arabic_Presentation_Forms_B";
  *(void *)(v6 + 2008) = 29;
  *(void *)(v6 + 2344) = 10;
  *(void *)(v6 + 2608) = 27;
  *(void *)(v6 + 3208) = 10;
  *(void *)(v6 + 3640) = 27;
  *(void *)(v6 + 3760) = 27;
  *(void *)(v6 + 3904) = 27;
  *(void *)(v6 + 3736) = 29;
  *(void *)(v6 + 3920) = "Halfwidth_and_Fullwidth_Forms";
  *(void *)(v6 + 3928) = 29;
  *(void *)(v6 + 3944) = "Specials";
  *(void *)(v6 + 3968) = "Linear_B_Syllabary";
  *(void *)(v6 + 3992) = "Linear_B_Ideograms";
  *(void *)(v6 + 4016) = "Aegean_Numbers";
  *(void *)(v6 + 4040) = "Ancient_Greek_Numbers";
  *(void *)(v6 + 4064) = "Ancient_Symbols";
  *(void *)(v6 + 4088) = "Phaistos_Disc";
  *(void *)(v6 + 4112) = "Lycian";
  *(void *)(v6 + 4136) = "Carian";
  *(void *)(v6 + 4160) = "Coptic_Epact_Numbers";
  *(void *)(v6 + 4184) = "Old_Italic";
  *(void *)(v6 + 4192) = 10;
  *(void *)(v6 + 4208) = "Gothic";
  *(void *)(v6 + 4232) = "Old_Permic";
  *(void *)(v6 + 4240) = 10;
  *(void *)(v6 + 4256) = "Ugaritic";
  *(void *)(v6 + 4280) = "Old_Persian";
  *(void *)(v6 + 4304) = "Deseret";
  *(void *)(v6 + 4328) = "Shavian";
  *(void *)(v6 + 4352) = "Osmanya";
  *(void *)(v6 + 4376) = "Osage";
  *(void *)(v6 + 4400) = "Elbasan";
  *(void *)(v6 + 4424) = "Caucasian_Albanian";
  *(void *)(v6 + 4448) = "Vithkuqi";
  *(void *)(v6 + 4472) = "Linear_A";
  *(void *)(v6 + 4496) = "Latin_Extended_F";
  *(void *)(v6 + 4520) = "Cypriot_Syllabary";
  *(void *)(v6 + 4544) = "Imperial_Aramaic";
  *(void *)(v6 + 4568) = "Palmyrene";
  *(void *)(v6 + 4592) = "Nabataean";
  *(void *)(v6 + 4616) = "Hatran";
  *(void *)(v6 + 4640) = "Phoenician";
  *(void *)(v6 + 4648) = 10;
  *(void *)(v6 + 4664) = "Lydian";
  *(void *)(v6 + 4688) = "Meroitic_Hieroglyphs";
  *(void *)(v6 + 4712) = "Meroitic_Cursive";
  *(void *)(v6 + 4736) = "Kharoshthi";
  *(void *)(v6 + 4744) = 10;
  *(void *)(v6 + 4760) = "Old_South_Arabian";
  *(void *)(v6 + 4784) = "Old_North_Arabian";
  *(void *)(v6 + 4808) = "Manichaean";
  *(void *)(v6 + 4816) = 10;
  *(void *)(v6 + 4832) = "Avestan";
  *(void *)(v6 + 4856) = "Inscriptional_Parthian";
  *(void *)(v6 + 4880) = "Inscriptional_Pahlavi";
  *(void *)(v6 + 4904) = "Psalter_Pahlavi";
  *(void *)(v6 + 4928) = "Old_Turkic";
  *(void *)(v6 + 4936) = 10;
  *(void *)(v6 + 4952) = "Old_Hungarian";
  *(void *)(v6 + 4976) = "Hanifi_Rohingya";
  *(void *)(v6 + 5000) = "Rumi_Numeral_Symbols";
  *(void *)(v6 + 5024) = "Yezidi";
  *(void *)(v6 + 5048) = "Old_Sogdian";
  *(void *)(v6 + 5072) = "Sogdian";
  *(void *)(v6 + 5096) = "Old_Uyghur";
  *(void *)(v6 + 5104) = 10;
  *(void *)(v6 + 5120) = "Chorasmian";
  *(void *)(v6 + 5128) = 10;
  *(void *)(v6 + 5144) = "Elymaic";
  *(void *)(v6 + 5168) = "Brahmi";
  *(void *)(v6 + 5312) = "Sinhala_Archaic_Numbers";
  *(void *)(v6 + 5336) = "Khojki";
  *(void *)(v6 + 5360) = "Multani";
  *(void *)(v6 + 5384) = "Khudawadi";
  *(void *)(v6 + 5408) = "Grantha";
  *(void *)(v6 + 5672) = "Nandinagari";
  *(void *)(v6 + 5656) = 11;
  *(unsigned char *)(v6 + 5664) = 2;
  *(void *)(v6 + 5432) = "Newa";
  *(void *)(v6 + 5632) = 11;
  *(unsigned char *)(v6 + 5640) = 2;
  *(void *)(v6 + 5648) = "Dives_Akuru";
  *(void *)(v6 + 5624) = "Warang_Citi";
  *(unsigned char *)(v6 + 5616) = 2;
  *(void *)(v6 + 5480) = "Siddham";
  *(unsigned char *)(v6 + 5592) = 2;
  *(void *)(v6 + 5600) = "Dogra";
  *(void *)(v6 + 5608) = 5;
  *(void *)(v6 + 5576) = "Ahom";
  *(unsigned char *)(v6 + 5568) = 2;
  *(void *)(v6 + 5584) = 4;
  *(void *)(v6 + 1960) = 23;
  *(void *)(v6 + 5552) = "Takri";
  *(unsigned char *)(v6 + 5544) = 2;
  *(void *)(v6 + 5560) = 5;
  *(void *)(v6 + 5528) = "Mongolian_Supplement";
  *(void *)(v6 + 5512) = 4;
  *(unsigned char *)(v6 + 5520) = 2;
  *(void *)(v6 + 5536) = 20;
  *(void *)(v6 + 5504) = "Modi";
  *(unsigned char *)(v6 + 5472) = 2;
  *(void *)(v6 + 5488) = 7;
  *(unsigned char *)(v6 + 5496) = 2;
  *(void *)(v6 + 5456) = "Tirhuta";
  *(void *)(v6 + 2536) = 23;
  *(void *)(v6 + 5440) = 4;
  *(unsigned char *)(v6 + 5448) = 2;
  *(void *)(v6 + 5464) = 7;
  *(void *)(v6 + 2896) = 23;
  *(void *)(v6 + 3448) = 23;
  *(void *)(v6 + 5392) = 9;
  *(unsigned char *)(v6 + 5400) = 2;
  *(void *)(v6 + 5416) = 7;
  *(unsigned char *)(v6 + 5424) = 2;
  *(void *)(v6 + 3856) = 23;
  *(unsigned char *)(v6 + 5112) = 2;
  *(void *)(v6 + 5344) = 6;
  *(unsigned char *)(v6 + 5352) = 2;
  *(void *)(v6 + 5368) = 7;
  *(unsigned char *)(v6 + 5376) = 2;
  *(unsigned char *)(v6 + 5136) = 2;
  *(void *)(v6 + 5152) = 7;
  *(unsigned char *)(v6 + 5160) = 2;
  *(unsigned char *)(v6 + 5304) = 2;
  *(void *)(v6 + 5320) = 23;
  *(unsigned char *)(v6 + 5328) = 2;
  *(void *)(v6 + 5272) = 8;
  *(unsigned char *)(v6 + 5280) = 2;
  *(void *)(v6 + 5288) = "Sharada";
  *(void *)(v6 + 5296) = 7;
  *(unsigned char *)(v6 + 5184) = 2;
  *(void *)(v6 + 5248) = 6;
  *(unsigned char *)(v6 + 5256) = 2;
  *(void *)(v6 + 5264) = "Mahajani";
  *(void *)(v6 + 5240) = "Chakma";
  *(unsigned char *)(v6 + 5232) = 2;
  *(void *)(v6 + 5192) = "Kaithi";
  *(unsigned char *)(v6 + 5208) = 2;
  *(void *)(v6 + 5216) = "Sora_Sompeng";
  *(void *)(v6 + 5224) = 12;
  *(void *)(v6 + 5200) = 6;
  *(void *)(v6 + 5696) = "Zanabazar_Square";
  *(void *)(v6 + 5176) = 6;
  *(void *)(v6 + 5720) = "Soyombo";
  *(void *)(v6 + 5744) = "Unified_Canadian_Aboriginal_Syllabics_Extended_A";
  *(void *)(v6 + 5752) = 48;
  *(void *)(v6 + 5768) = "Pau_Cin_Hau";
  *(void *)(v6 + 5792) = "Bhaiksuki";
  *(void *)(v6 + 5816) = "Marchen";
  *(void *)(v6 + 5840) = "Masaram_Gondi";
  *(void *)(v6 + 5864) = "Gunjala_Gondi";
  *(void *)(v6 + 5888) = "Makasar";
  *(void *)(v6 + 5056) = 11;
  *(unsigned char *)(v6 + 5064) = 2;
  *(void *)(v6 + 5080) = 7;
  *(unsigned char *)(v6 + 5088) = 2;
  *(void *)(v6 + 4312) = 7;
  *(void *)(v6 + 4336) = 7;
  *(void *)(v6 + 4360) = 7;
  *(unsigned char *)(v6 + 5016) = 2;
  *(void *)(v6 + 5032) = 6;
  *(unsigned char *)(v6 + 5040) = 2;
  *(void *)(v6 + 4408) = 7;
  *(void *)(v6 + 4840) = 7;
  *(void *)(v6 + 4888) = 21;
  *(void *)(v6 + 4984) = 15;
  *(unsigned char *)(v6 + 4992) = 2;
  *(void *)(v6 + 5008) = 20;
  *(unsigned char *)(v6 + 4896) = 2;
  *(void *)(v6 + 4912) = 15;
  *(unsigned char *)(v6 + 4920) = 2;
  *(unsigned char *)(v6 + 4944) = 2;
  *(void *)(v6 + 4960) = 13;
  *(unsigned char *)(v6 + 4968) = 2;
  *(void *)(v6 + 5728) = 7;
  *(void *)(v6 + 5824) = 7;
  *(void *)(v6 + 5896) = 7;
  *(void *)(v6 + 5912) = "Lisu_Supplement";
  *(void *)(v6 + 5936) = "Tamil_Supplement";
  *(void *)(v6 + 5960) = "Cuneiform";
  *(void *)(v6 + 5984) = "Cuneiform_Numbers_and_Punctuation";
  *(void *)(v6 + 6008) = "Early_Dynastic_Cuneiform";
  *(void *)(v6 + 152) = "Spacing_Modifier_Letters";
  *(void *)(v6 + 160) = 24;
  *(unsigned char *)(v6 + 4848) = 2;
  *(void *)(v6 + 4864) = 22;
  *(unsigned char *)(v6 + 4872) = 2;
  *(void *)(v6 + 2512) = 24;
  *(unsigned char *)(v6 + 4752) = 2;
  *(void *)(v6 + 4768) = 17;
  *(unsigned char *)(v6 + 4776) = 2;
  *(unsigned char *)(v6 + 4824) = 2;
  *(void *)(v6 + 4792) = 17;
  *(unsigned char *)(v6 + 4800) = 2;
  *(void *)(v6 + 6016) = 24;
  *(void *)(v6 + 6032) = "Cypro_Minoan";
  *(void *)(v6 + 6056) = "Egyptian_Hieroglyphs";
  *(void *)(v6 + 6080) = "Egyptian_Hieroglyph_Format_Controls";
  *(void *)(v6 + 6104) = "Anatolian_Hieroglyphs";
  *(void *)(v6 + 6128) = "Bamum_Supplement";
  *(void *)(v6 + 6152) = "Mro";
  *(void *)(v6 + 4720) = 16;
  *(unsigned char *)(v6 + 4728) = 2;
  *(void *)(v6 + 416) = "NKo";
  *(void *)(v6 + 424) = 3;
  *(void *)(v6 + 4672) = 6;
  *(unsigned char *)(v6 + 4680) = 2;
  *(void *)(v6 + 4696) = 20;
  *(unsigned char *)(v6 + 4704) = 2;
  *(void *)(v6 + 832) = 3;
  *(void *)(v6 + 928) = 11;
  *(void *)(v6 + 4624) = 6;
  *(unsigned char *)(v6 + 4632) = 2;
  *(unsigned char *)(v6 + 4656) = 2;
  *(void *)(v6 + 1312) = 11;
  *(void *)(v6 + 2056) = 11;
  *(void *)(v6 + 4576) = 9;
  *(unsigned char *)(v6 + 4584) = 2;
  *(void *)(v6 + 4600) = 9;
  *(unsigned char *)(v6 + 4608) = 2;
  *(void *)(v6 + 3016) = 3;
  *(void *)(v6 + 4456) = 8;
  *(void *)(v6 + 4528) = 17;
  *(unsigned char *)(v6 + 4536) = 2;
  *(void *)(v6 + 4552) = 16;
  *(unsigned char *)(v6 + 4560) = 2;
  *(unsigned char *)(v6 + 4464) = 2;
  *(void *)(v6 + 4480) = 8;
  *(unsigned char *)(v6 + 4488) = 2;
  *(void *)(v6 + 4504) = 16;
  *(unsigned char *)(v6 + 4512) = 2;
  *(void *)(v6 + 6160) = 3;
  *(void *)(v6 + 6176) = "Tangsa";
  *(void *)(v6 + 6200) = "Bassa_Vah";
  *(void *)(v6 + 6224) = "Pahawh_Hmong";
  *(void *)(v6 + 6248) = "Medefaidrin";
  *(void *)(v6 + 2296) = 35;
  *(void *)(v6 + 2776) = 11;
  *(unsigned char *)(v6 + 4416) = 2;
  *(void *)(v6 + 4432) = 18;
  *(unsigned char *)(v6 + 4440) = 2;
  *(void *)(v6 + 2968) = 11;
  *(unsigned char *)(v6 + 4272) = 2;
  *(void *)(v6 + 4288) = 11;
  *(unsigned char *)(v6 + 4368) = 2;
  *(void *)(v6 + 4384) = 5;
  *(unsigned char *)(v6 + 4392) = 2;
  *(unsigned char *)(v6 + 4296) = 2;
  *(unsigned char *)(v6 + 4320) = 2;
  *(unsigned char *)(v6 + 4344) = 2;
  *(void *)(v6 + 5680) = 11;
  *(void *)(v6 + 5776) = 11;
  *(void *)(v6 + 6088) = 35;
  *(void *)(v6 + 6256) = 11;
  *(void *)(v6 + 6272) = "Miao";
  *(void *)(v6 + 6296) = "Ideographic_Symbols_and_Punctuation";
  *(void *)(v6 + 6304) = 35;
  *(void *)(v6 + 6320) = "Tangut";
  *(void *)(v6 + 6344) = "Tangut_Components";
  *(void *)(v6 + 6368) = "Khitan_Small_Script";
  *(void *)(v6 + 6392) = "Tangut_Supplement";
  *(unsigned char *)(v6 + 4248) = 2;
  *(void *)(v6 + 4264) = 8;
  *(void *)(v6 + 368) = "Arabic_Supplement";
  *(void *)(v6 + 376) = 17;
  *(void *)(v6 + 496) = 17;
  *(unsigned char *)(v6 + 4200) = 2;
  *(void *)(v6 + 4216) = 6;
  *(unsigned char *)(v6 + 4224) = 2;
  *(void *)(v6 + 520) = 17;
  *(void *)(v6 + 544) = 17;
  *(void *)(v6 + 4144) = 6;
  *(unsigned char *)(v6 + 4152) = 2;
  *(void *)(v6 + 4168) = 20;
  *(unsigned char *)(v6 + 4176) = 2;
  *(void *)(v6 + 1576) = 17;
  *(void *)(v6 + 2464) = 17;
  *(void *)(v6 + 4096) = 13;
  *(unsigned char *)(v6 + 4104) = 2;
  *(void *)(v6 + 4120) = 6;
  *(unsigned char *)(v6 + 4128) = 2;
  *(void *)(v6 + 2752) = 17;
  *(void *)(v6 + 2848) = 17;
  *(void *)(v6 + 4048) = 21;
  *(unsigned char *)(v6 + 4056) = 2;
  *(void *)(v6 + 4072) = 15;
  *(unsigned char *)(v6 + 4080) = 2;
  *(unsigned char *)(v6 + 3960) = 2;
  *(void *)(v6 + 3976) = 18;
  *(unsigned char *)(v6 + 3984) = 2;
  *(unsigned char *)(v6 + 4008) = 2;
  *(void *)(v6 + 4024) = 14;
  *(unsigned char *)(v6 + 4032) = 2;
  *(void *)(v6 + 4000) = 18;
  *(void *)(v6 + 6352) = 17;
  *(void *)(v6 + 6400) = 17;
  *(void *)(v6 + 6416) = "Kana_Extended_B";
  *(void *)(v6 + 6440) = "Kana_Supplement";
  *(void *)(v6 + 6464) = "Kana_Extended_A";
  *(void *)(v6 + 6488) = "Small_Kana_Extension";
  *(unsigned char *)(v6 + 3936) = 2;
  *(void *)(v6 + 3952) = 8;
  *(void *)(v6 + 1600) = 20;
  *(void *)(v6 + 3784) = 19;
  *(unsigned char *)(v6 + 3792) = 2;
  *(void *)(v6 + 3880) = 19;
  *(unsigned char *)(v6 + 3888) = 2;
  *(unsigned char *)(v6 + 3912) = 2;
  *(void *)(v6 + 3808) = 14;
  *(unsigned char *)(v6 + 3816) = 2;
  *(void *)(v6 + 3832) = 20;
  *(unsigned char *)(v6 + 3840) = 2;
  *(unsigned char *)(v6 + 3864) = 2;
  *(void *)(v6 + 6064) = 20;
  *(void *)(v6 + 6496) = 20;
  *(void *)(v6 + 6512) = "Nushu";
  *(void *)(v6 + 6536) = "Duployan";
  *(void *)(v6 + 6560) = "Shorthand_Format_Controls";
  *(void *)(v6 + 6584) = "Znamenny_Musical_Notation";
  *(void *)(v6 + 6608) = "Byzantine_Musical_Symbols";
  *(void *)(v6 + 2560) = 15;
  *(void *)(v6 + 6632) = "Musical_Symbols";
  *(void *)(v6 + 3616) = 15;
  *(unsigned char *)(v6 + 3744) = 2;
  *(unsigned char *)(v6 + 3768) = 2;
  *(unsigned char *)(v6 + 3648) = 2;
  *(void *)(v6 + 3664) = 14;
  *(void *)(v6 + 3688) = 16;
  *(unsigned char *)(v6 + 3696) = 2;
  *(void *)(v6 + 3712) = 28;
  *(unsigned char *)(v6 + 3720) = 2;
  *(unsigned char *)(v6 + 3672) = 2;
  *(void *)(v6 + 5920) = 15;
  *(void *)(v6 + 6424) = 15;
  *(void *)(v6 + 6448) = 15;
  *(void *)(v6 + 6472) = 15;
  *(void *)(v6 + 6640) = 15;
  *(void *)(v6 + 6656) = "Ancient_Greek_Musical_Notation";
  *(void *)(v6 + 6680) = "Mayan_Numerals";
  *(void *)(v6 + 80) = "Latin_Extended_A";
  *(void *)(v6 + 88) = 16;
  *(void *)(v6 + 3592) = 22;
  *(unsigned char *)(v6 + 3600) = 2;
  *(unsigned char *)(v6 + 3624) = 2;
  *(void *)(v6 + 112) = 16;
  *(void *)(v6 + 3544) = 12;
  *(unsigned char *)(v6 + 3552) = 2;
  *(void *)(v6 + 3568) = 16;
  *(unsigned char *)(v6 + 3576) = 2;
  *(void *)(v6 + 136) = 14;
  *(void *)(v6 + 208) = 16;
  *(void *)(v6 + 3496) = 16;
  *(unsigned char *)(v6 + 3504) = 2;
  *(void *)(v6 + 3520) = 19;
  *(unsigned char *)(v6 + 3528) = 2;
  *(void *)(v6 + 304) = 6;
  *(void *)(v6 + 328) = 6;
  *(void *)(v6 + 352) = 6;
  *(unsigned char *)(v6 + 3456) = 2;
  *(void *)(v6 + 3472) = 19;
  *(unsigned char *)(v6 + 3480) = 2;
  *(void *)(v6 + 400) = 6;
  *(void *)(v6 + 712) = 6;
  *(void *)(v6 + 3400) = 18;
  *(unsigned char *)(v6 + 3408) = 2;
  *(void *)(v6 + 3424) = 8;
  *(unsigned char *)(v6 + 3432) = 2;
  *(void *)(v6 + 1288) = 6;
  *(void *)(v6 + 1744) = 14;
  *(void *)(v6 + 3352) = 18;
  *(unsigned char *)(v6 + 3360) = 2;
  *(void *)(v6 + 3376) = 4;
  *(unsigned char *)(v6 + 3384) = 2;
  *(void *)(v6 + 2080) = 14;
  *(unsigned char *)(v6 + 3216) = 2;
  *(void *)(v6 + 3304) = 22;
  *(unsigned char *)(v6 + 3312) = 2;
  *(void *)(v6 + 3328) = 8;
  *(unsigned char *)(v6 + 3336) = 2;
  *(void *)(v6 + 3232) = 19;
  *(unsigned char *)(v6 + 3240) = 2;
  *(void *)(v6 + 3256) = 8;
  *(unsigned char *)(v6 + 3264) = 2;
  *(void *)(v6 + 3280) = 6;
  *(unsigned char *)(v6 + 3288) = 2;
  *(void *)(v6 + 6688) = 14;
  *(void *)(v6 + 6704) = "Tai_Xuan_Jing_Symbols";
  *(void *)(v6 + 6728) = "Counting_Rod_Numerals";
  *(void *)(v6 + 6752) = "Mathematical_Alphanumeric_Symbols";
  *(void *)(v6 + 5992) = 33;
  *(void *)(v6 + 6760) = 33;
  *(void *)(v6 + 6776) = "Sutton_SignWriting";
  *(void *)(v6 + 6800) = "Latin_Extended_G";
  *(void *)(v6 + 3160) = 25;
  *(unsigned char *)(v6 + 3168) = 2;
  *(void *)(v6 + 3184) = 8;
  *(unsigned char *)(v6 + 3192) = 2;
  *(void *)(v6 + 1504) = 6;
  *(void *)(v6 + 1624) = 16;
  *(void *)(v6 + 3112) = 16;
  *(unsigned char *)(v6 + 3120) = 2;
  *(void *)(v6 + 3136) = 12;
  *(unsigned char *)(v6 + 3144) = 2;
  *(void *)(v6 + 1816) = 16;
  *(void *)(v6 + 1912) = 6;
  *(void *)(v6 + 3064) = 5;
  *(unsigned char *)(v6 + 3072) = 2;
  *(void *)(v6 + 3088) = 21;
  *(unsigned char *)(v6 + 3096) = 2;
  *(void *)(v6 + 1936) = 22;
  *(void *)(v6 + 1984) = 16;
  *(void *)(v6 + 2032) = 22;
  *(unsigned char *)(v6 + 3024) = 2;
  *(void *)(v6 + 3040) = 19;
  *(unsigned char *)(v6 + 3048) = 2;
  *(void *)(v6 + 2104) = 16;
  *(void *)(v6 + 2224) = 16;
  *(void *)(v6 + 2368) = 16;
  *(unsigned char *)(v6 + 2976) = 2;
  *(void *)(v6 + 2992) = 4;
  *(unsigned char *)(v6 + 3000) = 2;
  *(unsigned char *)(v6 + 2904) = 2;
  *(void *)(v6 + 2920) = 22;
  *(unsigned char *)(v6 + 2928) = 2;
  *(void *)(v6 + 2944) = 12;
  *(unsigned char *)(v6 + 2952) = 2;
  *(void *)(v6 + 5704) = 16;
  *(void *)(v6 + 5944) = 16;
  *(void *)(v6 + 6136) = 16;
  *(void *)(v6 + 6808) = 16;
  *(void *)(v6 + 6824) = "Glagolitic_Supplement";
  *(void *)(v6 + 6848) = "Nyiakeng_Puachue_Hmong";
  *(unsigned char *)(v6 + 2808) = 2;
  *(unsigned char *)(v6 + 2880) = 2;
  *(unsigned char *)(v6 + 2856) = 2;
  *(void *)(v6 + 2872) = 34;
  *(void *)(v6 + 6856) = 22;
  *(void *)(v6 + 6872) = "Toto";
  *(void *)(v6 + 6896) = "Wancho";
  *(void *)(v6 + 2824) = 31;
  *(unsigned char *)(v6 + 2832) = 2;
  *(void *)(v6 + 2392) = 6;
  *(unsigned char *)(v6 + 2712) = 2;
  *(void *)(v6 + 2728) = 6;
  *(unsigned char *)(v6 + 2736) = 2;
  *(unsigned char *)(v6 + 2784) = 2;
  *(void *)(v6 + 2800) = 28;
  *(unsigned char *)(v6 + 2760) = 2;
  *(void *)(v6 + 6184) = 6;
  *(void *)(v6 + 6328) = 6;
  *(void *)(v6 + 6904) = 6;
  *(void *)(v6 + 6920) = "Ethiopic_Extended_B";
  *(void *)(v6 + 6944) = "Mende_Kikakui";
  *(void *)(v6 + 6968) = "Adlam";
  *(void *)(v6 + 664) = 5;
  *(unsigned char *)(v6 + 2664) = 2;
  *(void *)(v6 + 2680) = 8;
  *(unsigned char *)(v6 + 2688) = 2;
  *(void *)(v6 + 2704) = 25;
  *(void *)(v6 + 688) = 5;
  *(void *)(v6 + 1048) = 5;
  *(unsigned char *)(v6 + 2616) = 2;
  *(void *)(v6 + 2632) = 8;
  *(unsigned char *)(v6 + 2640) = 2;
  *(void *)(v6 + 2656) = 8;
  *(void *)(v6 + 1072) = 5;
  *(void *)(v6 + 1144) = 5;
  *(void *)(v6 + 1192) = 5;
  *(unsigned char *)(v6 + 2568) = 2;
  *(void *)(v6 + 2584) = 34;
  *(unsigned char *)(v6 + 2592) = 2;
  *(void *)(v6 + 1264) = 5;
  *(void *)(v6 + 1480) = 5;
  *(unsigned char *)(v6 + 2520) = 2;
  *(unsigned char *)(v6 + 2544) = 2;
  *(void *)(v6 + 6520) = 5;
  *(void *)(v6 + 6976) = 5;
  *(void *)(v6 + 6992) = "Indic_Siyaq_Numbers";
  *(void *)(v6 + 7016) = "Ottoman_Siyaq_Numbers";
  *(void *)(v6 + 7040) = "Arabic_Mathematical_Alphabetic_Symbols";
  *(void *)(v6 + 2488) = 19;
  *(unsigned char *)(v6 + 2496) = 2;
  *(void *)(v6 + 1696) = 38;
  *(unsigned char *)(v6 + 2424) = 2;
  *(void *)(v6 + 2440) = 8;
  *(unsigned char *)(v6 + 2448) = 2;
  *(unsigned char *)(v6 + 2472) = 2;
  *(void *)(v6 + 7048) = 38;
  *(void *)(v6 + 7064) = "Mahjong_Tiles";
  *(void *)(v6 + 7088) = "Domino_Tiles";
  *(void *)(v6 + 1024) = 37;
  *(void *)(v6 + 1888) = 12;
  *(unsigned char *)(v6 + 2352) = 2;
  *(unsigned char *)(v6 + 2400) = 2;
  *(void *)(v6 + 2416) = 19;
  *(unsigned char *)(v6 + 2376) = 2;
  *(void *)(v6 + 6040) = 12;
  *(void *)(v6 + 6232) = 12;
  *(void *)(v6 + 7096) = 12;
  *(void *)(v6 + 7112) = "Playing_Cards";
  *(void *)(v6 + 7136) = "Enclosed_Alphanumeric_Supplement";
  *(unsigned char *)(v6 + 2304) = 2;
  *(void *)(v6 + 7160) = "Enclosed_Ideographic_Supplement";
  *(void *)(v6 + 2320) = 32;
  *(unsigned char *)(v6 + 2328) = 2;
  *(void *)(v6 + 7168) = 31;
  *(void *)(v6 + 7184) = "Miscellaneous_Symbols_and_Pictographs";
  *(void *)(v6 + 2248) = 21;
  *(unsigned char *)(v6 + 2280) = 2;
  *(unsigned char *)(v6 + 2256) = 2;
  *(void *)(v6 + 2272) = 36;
  *(void *)(v6 + 7192) = 37;
  *(void *)(v6 + 7208) = "Emoticons";
  *(void *)(v6 + 440) = "Samaritan";
  *(void *)(v6 + 448) = 9;
  *(void *)(v6 + 2200) = 21;
  *(unsigned char *)(v6 + 2208) = 2;
  *(unsigned char *)(v6 + 2232) = 2;
  *(void *)(v6 + 760) = 9;
  *(void *)(v6 + 2152) = 8;
  *(unsigned char *)(v6 + 2160) = 2;
  *(void *)(v6 + 2176) = 36;
  *(unsigned char *)(v6 + 2184) = 2;
  *(void *)(v6 + 1216) = 9;
  *(void *)(v6 + 1456) = 9;
  *(unsigned char *)(v6 + 2088) = 2;
  *(unsigned char *)(v6 + 2112) = 2;
  *(void *)(v6 + 2128) = 21;
  *(unsigned char *)(v6 + 2136) = 2;
  *(void *)(v6 + 5800) = 9;
  *(void *)(v6 + 5968) = 9;
  *(void *)(v6 + 6208) = 9;
  *(void *)(v6 + 7216) = 9;
  *(void *)(v6 + 7232) = "Ornamental_Dingbats";
  *(void *)(v6 + 248) = "Cyrillic_Supplement";
  *(void *)(v6 + 256) = 19;
  *(unsigned char *)(v6 + 2040) = 2;
  *(unsigned char *)(v6 + 2064) = 2;
  *(void *)(v6 + 976) = 19;
  *(void *)(v6 + 1552) = 19;
  *(void *)(v6 + 1648) = 19;
  *(unsigned char *)(v6 + 1992) = 2;
  *(unsigned char *)(v6 + 2016) = 2;
  *(void *)(v6 + 1768) = 19;
  *(unsigned char *)(v6 + 1944) = 2;
  *(unsigned char *)(v6 + 1968) = 2;
  *(void *)(v6 + 6376) = 19;
  *(void *)(v6 + 6928) = 19;
  *(void *)(v6 + 7000) = 19;
  *(void *)(v6 + 7240) = 19;
  *(void *)(v6 + 7256) = "Transport_and_Map_Symbols";
  *(void *)(v6 + 7280) = "Alchemical_Symbols";
  *(void *)(v6 + 56) = "Latin_1_Supplement";
  *(void *)(v6 + 64) = 18;
  *(unsigned char *)(v6 + 1896) = 2;
  *(unsigned char *)(v6 + 1920) = 2;
  *(unsigned char *)(v6 + 1824) = 2;
  *(void *)(v6 + 1864) = 18;
  *(unsigned char *)(v6 + 1872) = 2;
  *(void *)(v6 + 6784) = 18;
  *(void *)(v6 + 7288) = 18;
  *(void *)(v6 + 7304) = "Geometric_Shapes_Extended";
  *(void *)(v6 + 1840) = 39;
  *(unsigned char *)(v6 + 1848) = 2;
  *(void *)(v6 + 1408) = 36;
  *(void *)(v6 + 1720) = 25;
  *(unsigned char *)(v6 + 1752) = 2;
  *(unsigned char *)(v6 + 1776) = 2;
  *(unsigned char *)(v6 + 1800) = 2;
  *(void *)(v6 + 6568) = 25;
  *(void *)(v6 + 6592) = 25;
  *(void *)(v6 + 6616) = 25;
  *(void *)(v6 + 7264) = 25;
  *(void *)(v6 + 7312) = 25;
  *(unsigned char *)(v6 + 1656) = 2;
  *(void *)(v6 + 7328) = "Supplemental_Arrows_C";
  *(void *)(v6 + 1672) = 30;
  *(unsigned char *)(v6 + 1704) = 2;
  *(unsigned char *)(v6 + 1728) = 2;
  *(unsigned char *)(v6 + 1680) = 2;
  *(void *)(v6 + 6112) = 21;
  *(void *)(v6 + 6712) = 21;
  *(void *)(v6 + 6736) = 21;
  *(void *)(v6 + 6832) = 21;
  *(void *)(v6 + 7024) = 21;
  *(void *)(v6 + 7336) = 21;
  *(void *)(v6 + 7352) = "Supplemental_Symbols_and_Pictographs";
  *(void *)(v6 + 7360) = 36;
  *(void *)(v6 + 7376) = "Chess_Symbols";
  *(void *)(v6 + 1336) = 13;
  *(void *)(v6 + 1528) = 8;
  *(unsigned char *)(v6 + 1608) = 2;
  *(unsigned char *)(v6 + 1632) = 2;
  *(unsigned char *)(v6 + 1536) = 2;
  *(unsigned char *)(v6 + 1560) = 2;
  *(unsigned char *)(v6 + 1584) = 2;
  *(void *)(v6 + 5848) = 13;
  *(void *)(v6 + 5872) = 13;
  *(void *)(v6 + 6952) = 13;
  *(void *)(v6 + 7072) = 13;
  *(void *)(v6 + 7120) = 13;
  *(void *)(v6 + 7384) = 13;
  *(void *)(v6 + 7400) = "Symbols_and_Pictographs_Extended_A";
  *(void *)(v6 + 7424) = "Symbols_for_Legacy_Computing";
  *(unsigned char *)(v6 + 1488) = 2;
  *(unsigned char *)(v6 + 1512) = 2;
  *(void *)(v6 + 7432) = 28;
  *(void *)(v6 + 7448) = "CJK_Unified_Ideographs_Extension_B";
  *(void *)(v6 + 7472) = "CJK_Unified_Ideographs_Extension_C";
  *(void *)(v6 + 7496) = "CJK_Unified_Ideographs_Extension_D";
  *(unsigned char *)(v6 + 1464) = 2;
  *(void *)(v6 + 224) = "Cyrillic";
  *(void *)(v6 + 232) = 8;
  *(unsigned char *)(v6 + 48) = 2;
  *(unsigned char *)(v6 + 72) = 2;
  *(unsigned char *)(v6 + 1416) = 2;
  *(void *)(v6 + 1432) = 8;
  *(unsigned char *)(v6 + 1440) = 2;
  *(unsigned char *)(v6 + 96) = 2;
  *(unsigned char *)(v6 + 120) = 2;
  *(void *)(v6 + 1360) = 8;
  *(unsigned char *)(v6 + 1368) = 2;
  *(void *)(v6 + 1384) = 8;
  *(unsigned char *)(v6 + 1392) = 2;
  *(unsigned char *)(v6 + 144) = 2;
  *(unsigned char *)(v6 + 168) = 2;
  *(unsigned char *)(v6 + 192) = 2;
  *(unsigned char *)(v6 + 216) = 2;
  *(unsigned char *)(v6 + 1320) = 2;
  *(unsigned char *)(v6 + 1344) = 2;
  *(unsigned char *)(v6 + 240) = 2;
  *(unsigned char *)(v6 + 264) = 2;
  *(void *)(v6 + 280) = 8;
  *(unsigned char *)(v6 + 1272) = 2;
  *(unsigned char *)(v6 + 1296) = 2;
  *(unsigned char *)(v6 + 288) = 2;
  *(unsigned char *)(v6 + 312) = 2;
  *(unsigned char *)(v6 + 336) = 2;
  *(unsigned char *)(v6 + 360) = 2;
  *(unsigned char *)(v6 + 1224) = 2;
  *(unsigned char *)(v6 + 1248) = 2;
  *(unsigned char *)(v6 + 384) = 2;
  *(unsigned char *)(v6 + 408) = 2;
  *(unsigned char *)(v6 + 432) = 2;
  *(void *)(v6 + 1168) = 8;
  *(unsigned char *)(v6 + 1176) = 2;
  *(unsigned char *)(v6 + 1200) = 2;
  *(unsigned char *)(v6 + 456) = 2;
  *(unsigned char *)(v6 + 480) = 2;
  *(unsigned char *)(v6 + 504) = 2;
  *(unsigned char *)(v6 + 528) = 2;
  *(unsigned char *)(v6 + 1128) = 2;
  *(unsigned char *)(v6 + 1152) = 2;
  *(unsigned char *)(v6 + 552) = 2;
  *(unsigned char *)(v6 + 576) = 2;
  *(unsigned char *)(v6 + 600) = 2;
  *(void *)(v6 + 616) = 8;
  *(unsigned char *)(v6 + 1080) = 2;
  *(unsigned char *)(v6 + 1104) = 2;
  *(unsigned char *)(v6 + 624) = 2;
  *(void *)(v6 + 640) = 8;
  *(unsigned char *)(v6 + 648) = 2;
  *(unsigned char *)(v6 + 672) = 2;
  *(unsigned char *)(v6 + 1032) = 2;
  *(unsigned char *)(v6 + 1056) = 2;
  *(unsigned char *)(v6 + 696) = 2;
  *(unsigned char *)(v6 + 720) = 2;
  *(unsigned char *)(v6 + 744) = 2;
  *(unsigned char *)(v6 + 984) = 2;
  *(void *)(v6 + 1000) = 8;
  *(unsigned char *)(v6 + 1008) = 2;
  *(unsigned char *)(v6 + 768) = 2;
  *(unsigned char *)(v6 + 792) = 2;
  *(void *)(v6 + 808) = 4;
  *(unsigned char *)(v6 + 936) = 2;
  *(void *)(v6 + 952) = 8;
  *(unsigned char *)(v6 + 960) = 2;
  *(unsigned char *)(v6 + 816) = 2;
  *(unsigned char *)(v6 + 840) = 2;
  *(unsigned char *)(v6 + 864) = 2;
  *(unsigned char *)(v6 + 888) = 2;
  *(void *)(v6 + 904) = 8;
  *(unsigned char *)(v6 + 912) = 2;
  *(unsigned char *)(v6 + 5688) = 2;
  *(unsigned char *)(v6 + 5712) = 2;
  *(unsigned char *)(v6 + 5736) = 2;
  *(unsigned char *)(v6 + 5760) = 2;
  *(unsigned char *)(v6 + 5784) = 2;
  *(unsigned char *)(v6 + 5808) = 2;
  *(unsigned char *)(v6 + 5832) = 2;
  *(unsigned char *)(v6 + 5856) = 2;
  *(unsigned char *)(v6 + 5880) = 2;
  *(unsigned char *)(v6 + 5904) = 2;
  *(unsigned char *)(v6 + 5928) = 2;
  *(unsigned char *)(v6 + 5952) = 2;
  *(unsigned char *)(v6 + 5976) = 2;
  *(unsigned char *)(v6 + 6000) = 2;
  *(unsigned char *)(v6 + 6024) = 2;
  *(unsigned char *)(v6 + 6048) = 2;
  *(unsigned char *)(v6 + 6072) = 2;
  *(unsigned char *)(v6 + 6096) = 2;
  *(unsigned char *)(v6 + 6120) = 2;
  *(unsigned char *)(v6 + 6144) = 2;
  *(unsigned char *)(v6 + 6168) = 2;
  *(unsigned char *)(v6 + 6192) = 2;
  *(unsigned char *)(v6 + 6216) = 2;
  *(unsigned char *)(v6 + 6240) = 2;
  *(unsigned char *)(v6 + 6264) = 2;
  *(unsigned char *)(v6 + 6288) = 2;
  *(unsigned char *)(v6 + 6312) = 2;
  *(unsigned char *)(v6 + 6336) = 2;
  *(unsigned char *)(v6 + 6360) = 2;
  *(unsigned char *)(v6 + 6384) = 2;
  *(unsigned char *)(v6 + 6408) = 2;
  *(unsigned char *)(v6 + 6432) = 2;
  *(unsigned char *)(v6 + 6456) = 2;
  *(unsigned char *)(v6 + 6480) = 2;
  *(unsigned char *)(v6 + 6504) = 2;
  *(unsigned char *)(v6 + 6528) = 2;
  *(unsigned char *)(v6 + 6552) = 2;
  *(unsigned char *)(v6 + 6576) = 2;
  *(unsigned char *)(v6 + 6600) = 2;
  *(unsigned char *)(v6 + 6624) = 2;
  *(unsigned char *)(v6 + 6648) = 2;
  *(unsigned char *)(v6 + 6672) = 2;
  *(unsigned char *)(v6 + 6696) = 2;
  *(unsigned char *)(v6 + 6720) = 2;
  *(unsigned char *)(v6 + 6744) = 2;
  *(unsigned char *)(v6 + 6768) = 2;
  *(unsigned char *)(v6 + 6792) = 2;
  *(unsigned char *)(v6 + 6816) = 2;
  *(unsigned char *)(v6 + 6840) = 2;
  *(unsigned char *)(v6 + 6864) = 2;
  *(unsigned char *)(v6 + 6888) = 2;
  *(unsigned char *)(v6 + 6912) = 2;
  *(unsigned char *)(v6 + 6936) = 2;
  *(unsigned char *)(v6 + 6960) = 2;
  *(unsigned char *)(v6 + 6984) = 2;
  *(unsigned char *)(v6 + 7008) = 2;
  *(unsigned char *)(v6 + 7032) = 2;
  *(unsigned char *)(v6 + 7056) = 2;
  *(unsigned char *)(v6 + 7080) = 2;
  *(unsigned char *)(v6 + 7104) = 2;
  *(unsigned char *)(v6 + 7128) = 2;
  *(unsigned char *)(v6 + 7152) = 2;
  *(unsigned char *)(v6 + 7176) = 2;
  *(unsigned char *)(v6 + 7200) = 2;
  *(unsigned char *)(v6 + 7224) = 2;
  *(unsigned char *)(v6 + 7248) = 2;
  *(unsigned char *)(v6 + 7272) = 2;
  *(unsigned char *)(v6 + 7296) = 2;
  *(unsigned char *)(v6 + 7320) = 2;
  *(unsigned char *)(v6 + 7344) = 2;
  *(unsigned char *)(v6 + 7368) = 2;
  *(unsigned char *)(v6 + 7392) = 2;
  *(unsigned char *)(v6 + 7416) = 2;
  *(unsigned char *)(v6 + 7440) = 2;
  *(unsigned char *)(v6 + 7464) = 2;
  *(unsigned char *)(v6 + 7488) = 2;
  *(unsigned char *)(v6 + 7512) = 2;
  *(unsigned char *)(v6 + 7536) = 2;
  *(unsigned char *)(v6 + 7560) = 2;
  *(unsigned char *)(v6 + 7584) = 2;
  *(unsigned char *)(v6 + 7608) = 2;
  *(unsigned char *)(v6 + 7632) = 2;
  *(unsigned char *)(v6 + 7656) = 2;
  *(unsigned char *)(v6 + 7680) = 2;
  *(unsigned char *)(v6 + 7704) = 2;
  *(unsigned char *)(v6 + 7728) = 2;
  *(void *)(v6 + 7520) = "CJK_Unified_Ideographs_Extension_E";
  *(void *)(v6 + 7544) = "CJK_Unified_Ideographs_Extension_F";
  *(void *)(v6 + 7568) = "CJK_Compatibility_Ideographs_Supplement";
  *(void *)(v6 + 7576) = 39;
  *(void *)(v6 + 7592) = "CJK_Unified_Ideographs_Extension_G";
  *(void *)(v6 + 7408) = 34;
  *(void *)(v6 + 7456) = 34;
  *(void *)(v6 + 7480) = 34;
  *(void *)(v6 + 7504) = 34;
  *(void *)(v6 + 7528) = 34;
  *(void *)(v6 + 7552) = 34;
  *(void *)(v6 + 7600) = 34;
  *(void *)(v6 + 7616) = "Tags";
  *(void *)(v6 + 6280) = 4;
  *(void *)(v6 + 6880) = 4;
  *(void *)(v6 + 7624) = 4;
  *(void *)(v6 + 7640) = "Variation_Selectors_Supplement";
  *(void *)(v6 + 6664) = 30;
  *(void *)(v6 + 7648) = 30;
  *(void *)(v6 + 7664) = "Supplementary_Private_Use_Area_A";
  *(void *)(v6 + 7688) = "Supplementary_Private_Use_Area_B";
  *(_OWORD *)(v6 + 16) = xmmword_20D9D7650;
  *(void *)(v6 + 7144) = 32;
  *(void *)(v6 + 7672) = 32;
  *(void *)(v6 + 7696) = 32;
  *(void *)(v6 + 7712) = "No_Block";
  *(void *)(v6 + 6544) = 8;
  *(void *)(v6 + 7720) = 8;
  v7._uint64_t countAndFlagsBits = a1;
  v7._uint64_t object = a2;
  unint64_t v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v6, v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 >= 0x80 && v8 - 128 >= 0x40 && v8 - 192 >= 0x40)
  {
    unint64_t v11 = v8 - 256;
    __int16 v10 = 303;
    LOWORD(v8) = 256;
    switch(v11)
    {
      case 0uLL:
        goto LABEL_4;
      case 1uLL:
        LOWORD(v8) = 257;
        goto LABEL_4;
      case 2uLL:
        LOWORD(v8) = 258;
        goto LABEL_4;
      case 3uLL:
        LOWORD(v8) = 259;
        goto LABEL_4;
      case 4uLL:
        LOWORD(v8) = 260;
        goto LABEL_4;
      case 5uLL:
        LOWORD(v8) = 261;
        goto LABEL_4;
      case 6uLL:
        LOWORD(v8) = 262;
        goto LABEL_4;
      case 7uLL:
        LOWORD(v8) = 263;
        goto LABEL_4;
      case 8uLL:
        LOWORD(v8) = 264;
        goto LABEL_4;
      case 9uLL:
        LOWORD(v8) = 265;
        goto LABEL_4;
      case 0xAuLL:
        LOWORD(v8) = 266;
        goto LABEL_4;
      case 0xBuLL:
        LOWORD(v8) = 267;
        goto LABEL_4;
      case 0xCuLL:
        LOWORD(v8) = 268;
        goto LABEL_4;
      case 0xDuLL:
        LOWORD(v8) = 269;
        goto LABEL_4;
      case 0xEuLL:
        LOWORD(v8) = 270;
        goto LABEL_4;
      case 0xFuLL:
        LOWORD(v8) = 271;
        goto LABEL_4;
      case 0x10uLL:
        LOWORD(v8) = 272;
        goto LABEL_4;
      case 0x11uLL:
        LOWORD(v8) = 273;
        goto LABEL_4;
      case 0x12uLL:
        LOWORD(v8) = 274;
        goto LABEL_4;
      case 0x13uLL:
        LOWORD(v8) = 275;
        goto LABEL_4;
      case 0x14uLL:
        LOWORD(v8) = 276;
        goto LABEL_4;
      case 0x15uLL:
        LOWORD(v8) = 277;
        goto LABEL_4;
      case 0x16uLL:
        LOWORD(v8) = 278;
        goto LABEL_4;
      case 0x17uLL:
        LOWORD(v8) = 279;
        goto LABEL_4;
      case 0x18uLL:
        LOWORD(v8) = 280;
        goto LABEL_4;
      case 0x19uLL:
        LOWORD(v8) = 281;
        goto LABEL_4;
      case 0x1AuLL:
        LOWORD(v8) = 282;
        goto LABEL_4;
      case 0x1BuLL:
        LOWORD(v8) = 283;
        goto LABEL_4;
      case 0x1CuLL:
        LOWORD(v8) = 284;
        goto LABEL_4;
      case 0x1DuLL:
        LOWORD(v8) = 285;
        goto LABEL_4;
      case 0x1EuLL:
        LOWORD(v8) = 286;
        goto LABEL_4;
      case 0x1FuLL:
        LOWORD(v8) = 287;
        goto LABEL_4;
      case 0x20uLL:
        LOWORD(v8) = 288;
        goto LABEL_4;
      case 0x21uLL:
        LOWORD(v8) = 289;
        goto LABEL_4;
      case 0x22uLL:
        LOWORD(v8) = 290;
        goto LABEL_4;
      case 0x23uLL:
        LOWORD(v8) = 291;
        goto LABEL_4;
      case 0x24uLL:
        LOWORD(v8) = 292;
        goto LABEL_4;
      case 0x25uLL:
        LOWORD(v8) = 293;
        goto LABEL_4;
      case 0x26uLL:
        LOWORD(v8) = 294;
        goto LABEL_4;
      case 0x27uLL:
        LOWORD(v8) = 295;
        goto LABEL_4;
      case 0x28uLL:
        LOWORD(v8) = 296;
        goto LABEL_4;
      case 0x29uLL:
        LOWORD(v8) = 297;
        goto LABEL_4;
      case 0x2AuLL:
        LOWORD(v8) = 298;
        goto LABEL_4;
      case 0x2BuLL:
        LOWORD(v8) = 299;
        goto LABEL_4;
      case 0x2CuLL:
        LOWORD(v8) = 300;
        goto LABEL_4;
      case 0x2DuLL:
        LOWORD(v8) = 301;
        goto LABEL_4;
      case 0x2EuLL:
        LOWORD(v8) = 302;
        goto LABEL_4;
      case 0x2FuLL:
        break;
      case 0x30uLL:
        __int16 v10 = 304;
        break;
      case 0x31uLL:
        __int16 v10 = 305;
        break;
      case 0x32uLL:
        __int16 v10 = 306;
        break;
      case 0x33uLL:
        __int16 v10 = 307;
        break;
      case 0x34uLL:
        __int16 v10 = 308;
        break;
      case 0x35uLL:
        __int16 v10 = 309;
        break;
      case 0x36uLL:
        __int16 v10 = 310;
        break;
      case 0x37uLL:
        __int16 v10 = 311;
        break;
      case 0x38uLL:
        __int16 v10 = 312;
        break;
      case 0x39uLL:
        __int16 v10 = 313;
        break;
      case 0x3AuLL:
        __int16 v10 = 314;
        break;
      case 0x3BuLL:
        __int16 v10 = 315;
        break;
      case 0x3CuLL:
        __int16 v10 = 316;
        break;
      case 0x3DuLL:
        __int16 v10 = 317;
        break;
      case 0x3EuLL:
        __int16 v10 = 318;
        break;
      case 0x3FuLL:
        __int16 v10 = 319;
        break;
      default:
        __int16 v10 = 321;
        break;
    }
  }
  else
  {
LABEL_4:
    __int16 v10 = v8;
  }
  *a3 = v10;
  return result;
}

void *static Unicode.Block.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.Block.allCases.getter;
}

uint64_t Unicode.Block.rawValue.getter()
{
  uint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      return result;
    case 2:
    case 3:
    case 7:
    case 0x42:
    case 0x4A:
    case 0x51:
    case 0x56:
    case 0x5B:
    case 0x61:
    case 0x80:
    case 0x90:
    case 0x93:
    case 0x98:
    case 0xBA:
    case 0xBC:
    case 0xC3:
    case 0xEC:
    case 0xF6:
    case 0xFE:
    case 0x11A:
      return 0xD000000000000010;
    case 4:
      return 0x657478455F415049;
    case 5:
      return 0xD000000000000018;
    case 6:
      return 0xD00000000000001BLL;
    case 8:
      return 0x63696C6C69727943;
    case 9:
      return 0xD000000000000013;
    case 0xA:
      return 0x6E61696E656D7241;
    case 0xB:
      return 0x776572626548;
    case 0xC:
      return 0x636962617241;
    case 0xD:
      return 0x636169727953;
    case 0xE:
      return 0xD000000000000011;
    case 0xF:
      return 0x616E61616854;
    case 0x10:
      return 7293774;
    case 0x11:
      return 0x61746972616D6153;
    case 0x12:
      unsigned int v2 = 1684955469;
      goto LABEL_205;
    case 0x13:
      return 0xD000000000000011;
    case 0x14:
      return 0xD000000000000011;
    case 0x15:
      return 0xD000000000000011;
    case 0x16:
      return 0x6167616E61766544;
    case 0x17:
      return 0x696C61676E6542;
    case 0x18:
      return 0x69686B756D727547;
    case 0x19:
      return 0x69746172616A7547;
    case 0x1A:
      return 0x617969724FLL;
    case 0x1B:
      return 0x6C696D6154;
    case 0x1C:
      return 0x7567756C6554;
    case 0x1D:
      unsigned int v3 = 1852727627;
      goto LABEL_212;
    case 0x1E:
      return 0x616C6179616C614DLL;
    case 0x1F:
      return 0x616C61686E6953;
    case 0x20:
      return 1767991380;
    case 0x21:
      return 7299404;
    case 0x22:
      unsigned int v4 = 1700948308;
      return v4 | 0x6E617400000000;
    case 0x23:
      return 0x72616D6E61794DLL;
    case 0x24:
      return 0x6E616967726F6547;
    case 0x25:
      return 0x4A5F6C75676E6148;
    case 0x26:
      return 0x6369706F69687445;
    case 0x27:
      return 0xD000000000000013;
    case 0x28:
      return 0x65656B6F72656843;
    case 0x29:
      return 0xD000000000000025;
    case 0x2A:
      return 0x6D6168674FLL;
    case 0x2B:
      return 0x63696E7552;
    case 0x2C:
      return 0x676F6C61676154;
    case 0x2D:
      return 0x6F6F6E756E6148;
    case 0x2E:
      return 0x6469687542;
    case 0x2F:
      return 0x61776E6162676154;
    case 0x30:
      return 0x72656D684BLL;
    case 0x31:
      return 0x61696C6F676E6F4DLL;
    case 0x32:
      return 0xD00000000000002ELL;
    case 0x33:
      return 0x75626D694CLL;
    case 0x34:
      return 0x654C5F696154;
    case 0x35:
      return 0x5F6961545F77654ELL;
    case 0x36:
      return 0x79535F72656D684BLL;
    case 0x37:
      unsigned int v5 = 1768387906;
      return v5 | 0x6573656E00000000;
    case 0x38:
      return 0x6D6168545F696154;
    case 0x39:
      return 0xD000000000000024;
    case 0x3A:
      unsigned int v5 = 1768710466;
      return v5 | 0x6573656E00000000;
    case 0x3B:
      return 0x73656E61646E7553;
    case 0x3C:
      return 0x6B61746142;
    case 0x3D:
      return 0x61686370654CLL;
    case 0x3E:
      return 0x696B6968435F6C4FLL;
    case 0x3F:
      return 0xD000000000000013;
    case 0x40:
      return 0xD000000000000011;
    case 0x41:
      return 0xD000000000000014;
    case 0x43:
      return 0xD000000000000013;
    case 0x44:
      return 0xD00000000000001ELL;
    case 0x45:
      return 0xD000000000000026;
    case 0x46:
      return 0xD000000000000019;
    case 0x47:
      return 0x78455F6B65657247;
    case 0x48:
      return 0xD000000000000013;
    case 0x49:
      return 0xD00000000000001BLL;
    case 0x4B:
      return 0xD000000000000027;
    case 0x4C:
      return 0xD000000000000012;
    case 0x4D:
      return 0x465F7265626D754ELL;
    case 0x4E:
      return 0x73776F727241;
    case 0x4F:
      return 0xD000000000000016;
    case 0x50:
      return 0xD000000000000017;
    case 0x52:
      return 0xD00000000000001DLL;
    case 0x53:
      return 0xD000000000000016;
    case 0x54:
      return 0x776172445F786F42;
    case 0x55:
      return 0x6C455F6B636F6C42;
    case 0x57:
      return 0xD000000000000015;
    case 0x58:
      return 0x73746162676E6944;
    case 0x59:
      return 0xD000000000000024;
    case 0x5A:
      return 0xD000000000000015;
    case 0x5C:
      return 0xD000000000000015;
    case 0x5D:
      return 0xD000000000000024;
    case 0x5E:
      return 0xD000000000000023;
    case 0x5F:
      return 0xD000000000000020;
    case 0x60:
      return 0x74696C6F67616C47;
    case 0x62:
      return 0x636974706F43;
    case 0x63:
      return 0xD000000000000013;
    case 0x64:
      return 0x6867616E69666954;
    case 0x65:
      return 0xD000000000000011;
    case 0x66:
      return 0xD000000000000013;
    case 0x67:
      return 0xD000000000000018;
    case 0x68:
      return 0xD000000000000017;
    case 0x69:
      return 0x525F6978676E614BLL;
    case 0x6A:
      return 0xD000000000000022;
    case 0x6B:
      return 0xD00000000000001BLL;
    case 0x6C:
      return 0x616E616761726948;
    case 0x6D:
      return 0x616E616B6174614BLL;
    case 0x6E:
      return 0x6F666F6D6F706F42;
    case 0x6F:
      return 0xD000000000000019;
    case 0x70:
      return 0x6E75626E614BLL;
    case 0x71:
      return 0xD000000000000011;
    case 0x72:
      return 0x6F7274535F4B4A43;
    case 0x73:
      return 0xD00000000000001CLL;
    case 0x74:
      return 0xD00000000000001FLL;
    case 0x75:
      return 0xD000000000000011;
    case 0x76:
      return 0xD000000000000022;
    case 0x77:
      return 0xD000000000000017;
    case 0x78:
      return 0xD000000000000016;
    case 0x79:
      return 0x616C6C79535F6959;
    case 0x7A:
      return 0x63696461525F6959;
    case 0x7B:
      return 1970497868;
    case 0x7C:
      return 6906198;
    case 0x7D:
      return 0xD000000000000013;
    case 0x7E:
      return 0x6D756D6142;
    case 0x7F:
      return 0xD000000000000015;
    case 0x81:
      return 0x4E5F69746F6C7953;
    case 0x82:
      return 0xD000000000000019;
    case 0x83:
      return 0x61705F7367616850;
    case 0x84:
      return 0x7468736172756153;
    case 0x85:
      return 0xD000000000000013;
    case 0x86:
      return 0x694C5F686179614BLL;
    case 0x87:
      return 0x676E616A6552;
    case 0x88:
      return 0xD000000000000016;
    case 0x89:
      unsigned int v5 = 1635148106;
      return v5 | 0x6573656E00000000;
    case 0x8A:
      return 0xD000000000000012;
    case 0x8B:
      return 1835100227;
    case 0x8C:
      return 0xD000000000000012;
    case 0x8D:
      return 0x746569565F696154;
    case 0x8E:
      return 0xD000000000000017;
    case 0x8F:
      return 0xD000000000000013;
    case 0x91:
      return 0xD000000000000013;
    case 0x92:
      return 0x4D5F69657465654DLL;
    case 0x94:
      return 0xD000000000000016;
    case 0x95:
      return 0x7275535F68676948;
    case 0x96:
      return 0xD00000000000001BLL;
    case 0x97:
      return 0x727275535F776F4CLL;
    case 0x99:
      return 0xD00000000000001CLL;
    case 0x9A:
      return 0xD00000000000001DLL;
    case 0x9B:
      return 0xD00000000000001BLL;
    case 0x9C:
      return 0xD000000000000013;
    case 0x9D:
      return 0x6C61636974726556;
    case 0x9E:
      return 0xD000000000000014;
    case 0x9F:
      return 0xD000000000000017;
    case 0xA0:
      return 0xD000000000000013;
    case 0xA1:
      return 0xD00000000000001BLL;
    case 0xA2:
      return 0xD00000000000001DLL;
    case 0xA3:
      return 0x736C616963657053;
    case 0xA4:
      return 0xD000000000000012;
    case 0xA5:
      return 0xD000000000000012;
    case 0xA6:
      return 0x4E5F6E6165676541;
    case 0xA7:
      return 0xD000000000000015;
    case 0xA8:
      return 0x5F746E6569636E41;
    case 0xA9:
      return 0x736F747369616850;
    case 0xAA:
      return 0x6E616963794CLL;
    case 0xAB:
      return 0x6E6169726143;
    case 0xAC:
      return 0xD000000000000014;
    case 0xAD:
      return 0x6C6174495F646C4FLL;
    case 0xAE:
      return 0x636968746F47;
    case 0xAF:
      return 0x6D7265505F646C4FLL;
    case 0xB0:
      return 0x6369746972616755;
    case 0xB1:
      return 0x737265505F646C4FLL;
    case 0xB2:
      return 0x74657265736544;
    case 0xB3:
      unsigned int v6 = 1986095187;
      goto LABEL_201;
    case 0xB4:
      return 0x61796E616D734FLL;
    case 0xB5:
      return 0x656761734FLL;
    case 0xB6:
      return 0x6E617361626C45;
    case 0xB7:
      return 0xD000000000000012;
    case 0xB8:
      return 0x6971756B68746956;
    case 0xB9:
      return 0x415F7261656E694CLL;
    case 0xBB:
      return 0xD000000000000011;
    case 0xBD:
      return 0x6E6572796D6C6150;
    case 0xBE:
      return 0x616561746162614ELL;
    case 0xBF:
      return 0x6E6172746148;
    case 0xC0:
      return 0x6963696E656F6850;
    case 0xC1:
      return 0x6E616964794CLL;
    case 0xC2:
      return 0xD000000000000014;
    case 0xC4:
      return 0x7468736F7261684BLL;
    case 0xC5:
      return 0xD000000000000011;
    case 0xC6:
      return 0xD000000000000011;
    case 0xC7:
      return 0x65616863696E614DLL;
    case 0xC8:
      unsigned int v4 = 1936029249;
      return v4 | 0x6E617400000000;
    case 0xC9:
      return 0xD000000000000016;
    case 0xCA:
      return 0xD000000000000015;
    case 0xCB:
      return 0x5F7265746C617350;
    case 0xCC:
      return 0x6B7275545F646C4FLL;
    case 0xCD:
      return 0x676E75485F646C4FLL;
    case 0xCE:
      return 0x525F6966696E6148;
    case 0xCF:
      return 0xD000000000000014;
    case 0xD0:
      return 0x6964697A6559;
    case 0xD1:
      return 0x64676F535F646C4FLL;
    case 0xD2:
      unsigned int v6 = 1684500307;
LABEL_201:
      uint64_t result = v6 | 0x6E616900000000;
      break;
    case 0xD3:
      uint64_t result = 0x686779555F646C4FLL;
      break;
    case 0xD4:
      uint64_t result = 0x696D7361726F6843;
      break;
    case 0xD5:
      unsigned int v2 = 1836674117;
LABEL_205:
      uint64_t result = v2 | 0x63696100000000;
      break;
    case 0xD6:
      uint64_t result = 0x696D68617242;
      break;
    case 0xD7:
      uint64_t result = 0x69687469614BLL;
      break;
    case 0xD8:
      uint64_t result = 0x6D6F535F61726F53;
      break;
    case 0xD9:
      uint64_t result = 0x616D6B616843;
      break;
    case 0xDA:
      uint64_t result = 0x696E616A6168614DLL;
      break;
    case 0xDB:
      unsigned int v3 = 1918986323;
LABEL_212:
      uint64_t result = v3 | 0x61646100000000;
      break;
    case 0xDC:
      uint64_t result = 0xD000000000000017;
      break;
    case 0xDD:
      uint64_t result = 0x696B6A6F684BLL;
      break;
    case 0xDE:
      uint64_t result = 0x696E61746C754DLL;
      break;
    case 0xDF:
      uint64_t result = 0x646177616475684BLL;
      break;
    case 0xE0:
      uint64_t result = 0x6168746E617247;
      break;
    case 0xE1:
      uint64_t result = 1635214670;
      break;
    case 0xE2:
      uint64_t result = 0x61747568726954;
      break;
    case 0xE3:
      uint64_t result = 0x6D616864646953;
      break;
    case 0xE4:
      uint64_t result = 1768189773;
      break;
    case 0xE5:
      uint64_t result = 0xD000000000000014;
      break;
    case 0xE6:
      uint64_t result = 0x69726B6154;
      break;
    case 0xE7:
      uint64_t result = 1836017729;
      break;
    case 0xE8:
      uint64_t result = 0x6172676F44;
      break;
    case 0xE9:
      uint64_t result = 0x435F676E61726157;
      break;
    case 0xEA:
      uint64_t result = 0x6B415F7365766944;
      break;
    case 0xEB:
      uint64_t result = 0x67616E69646E614ELL;
      break;
    case 0xED:
      uint64_t result = 0x6F626D6F796F53;
      break;
    case 0xEE:
      uint64_t result = 0xD000000000000030;
      break;
    case 0xEF:
      uint64_t result = 0x5F6E69435F756150;
      break;
    case 0xF0:
      uint64_t result = 0x6B75736B69616842;
      break;
    case 0xF1:
      uint64_t result = 0x6E65686372614DLL;
      break;
    case 0xF2:
      uint64_t result = 0x5F6D61726173614DLL;
      break;
    case 0xF3:
      uint64_t result = 0x5F616C616A6E7547;
      break;
    case 0xF4:
      uint64_t result = 0x726173616B614DLL;
      break;
    case 0xF5:
      uint64_t result = 0x7075535F7573694CLL;
      break;
    case 0xF7:
      uint64_t result = 0x726F6669656E7543;
      break;
    case 0xF8:
      uint64_t result = 0xD000000000000021;
      break;
    case 0xF9:
      uint64_t result = 0xD000000000000018;
      break;
    case 0xFA:
      uint64_t result = 0x694D5F6F72707943;
      break;
    case 0xFB:
      uint64_t result = 0xD000000000000014;
      break;
    case 0xFC:
      uint64_t result = 0xD000000000000023;
      break;
    case 0xFD:
      uint64_t result = 0xD000000000000015;
      break;
    case 0xFF:
      uint64_t result = 7303757;
      break;
    case 0x100:
      uint64_t result = 0x6173676E6154;
      break;
    case 0x101:
      uint64_t result = 0x61565F6173736142;
      break;
    case 0x102:
      uint64_t result = 0x485F687761686150;
      break;
    case 0x103:
      uint64_t result = 0x646961666564654DLL;
      break;
    case 0x104:
      uint64_t result = 1868654925;
      break;
    case 0x105:
      uint64_t result = 0xD000000000000023;
      break;
    case 0x106:
      uint64_t result = 0x7475676E6154;
      break;
    case 0x107:
      uint64_t result = 0xD000000000000011;
      break;
    case 0x108:
      uint64_t result = 0xD000000000000013;
      break;
    case 0x109:
      uint64_t result = 0xD000000000000011;
      break;
    case 0x10A:
    case 0x10C:
      uint64_t result = 0x7478455F616E614BLL;
      break;
    case 0x10B:
      uint64_t result = 0x7075535F616E614BLL;
      break;
    case 0x10D:
      uint64_t result = 0xD000000000000014;
      break;
    case 0x10E:
      uint64_t result = 0x756873754ELL;
      break;
    case 0x10F:
      uint64_t result = 0x6E61796F6C707544;
      break;
    case 0x110:
      uint64_t result = 0xD000000000000019;
      break;
    case 0x111:
      uint64_t result = 0xD000000000000019;
      break;
    case 0x112:
      uint64_t result = 0xD000000000000019;
      break;
    case 0x113:
      uint64_t result = 0x5F6C61636973754DLL;
      break;
    case 0x114:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 0x115:
      uint64_t result = 0x754E5F6E6179614DLL;
      break;
    case 0x116:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x117:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x118:
      uint64_t result = 0xD000000000000021;
      break;
    case 0x119:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x11B:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x11C:
      uint64_t result = 0xD000000000000016;
      break;
    case 0x11D:
      uint64_t result = 1869901652;
      break;
    case 0x11E:
      uint64_t result = 0x6F68636E6157;
      break;
    case 0x11F:
      uint64_t result = 0xD000000000000013;
      break;
    case 0x120:
      uint64_t result = 0x694B5F65646E654DLL;
      break;
    case 0x121:
      uint64_t result = 0x6D616C6441;
      break;
    case 0x122:
      uint64_t result = 0xD000000000000013;
      break;
    case 0x123:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x124:
      uint64_t result = 0xD000000000000026;
      break;
    case 0x125:
      uint64_t result = 0x5F676E6F6A68614DLL;
      break;
    case 0x126:
      uint64_t result = 0x545F6F6E696D6F44;
      break;
    case 0x127:
      uint64_t result = 0x5F676E6979616C50;
      break;
    case 0x128:
      uint64_t result = 0xD000000000000020;
      break;
    case 0x129:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 0x12A:
      uint64_t result = 0xD000000000000025;
      break;
    case 0x12B:
      uint64_t result = 0x6E6F6369746F6D45;
      break;
    case 0x12C:
      uint64_t result = 0xD000000000000013;
      break;
    case 0x12D:
      uint64_t result = 0xD000000000000019;
      break;
    case 0x12E:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x12F:
      uint64_t result = 0xD000000000000019;
      break;
    case 0x130:
      uint64_t result = 0xD000000000000015;
      break;
    case 0x131:
      uint64_t result = 0xD000000000000024;
      break;
    case 0x132:
      uint64_t result = 0x79535F7373656843;
      break;
    case 0x133:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x134:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 0x135:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x136:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x137:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x138:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x139:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x13A:
      uint64_t result = 0xD000000000000027;
      break;
    case 0x13B:
      uint64_t result = 0xD000000000000022;
      break;
    case 0x13C:
      uint64_t result = 1936154964;
      break;
    case 0x13D:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 0x13E:
      uint64_t result = 0xD000000000000020;
      break;
    case 0x13F:
      uint64_t result = 0xD000000000000020;
      break;
    case 0x140:
      uint64_t result = 0x6B636F6C425F6F4ELL;
      break;
    default:
      uint64_t result = 0x614C5F6369736142;
      break;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.Block()
{
  uint64_t v0 = Unicode.Block.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == Unicode.Block.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.Block@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  return Unicode.Block.init(rawValue:)(*(void *)a1, *(void **)(a1 + 8), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.Block@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Unicode.Block.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.Block()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.Block()
{
  Unicode.Block.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.Block()
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.Block(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.Block.allCases.getter;
}

uint64_t specialized static TypeConstruction.tupleType<A>(of:labels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t TupleTypeMetadata = specialized String.withCString<A>(_:)(a2, a3);
  }
  else {
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v4 = TupleTypeMetadata;
  swift_bridgeObjectRelease();
  if (v4) {
    return v4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static TypeConstruction.tupleType<A>(of:labels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  dispatch thunk of Collection.count.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: Any.Type, state: Int));
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
    return v7;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      if a1 <= 0x20u && ((0x100003E01uLL >> a1)) {
        return 0;
      }
LABEL_9:
      uint64_t v4 = (unsigned char *)_swift_stdlib_strtod_clocale();
      if (v4) {
        return *v4 == 0;
      }
      return 0;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v3 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      if (v3 < 0x21 && ((0x100003E01uLL >> v3) & 1) != 0) {
        return 0;
      }
      goto LABEL_9;
    }
  }
  _StringGuts._slowWithCString<A>(_:)();
  if (!v2) {
    return v7;
  }
  return v5;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) == 0 && ((a2 & 0x2000000000000000) != 0 || (a1 & 0x1000000000000000) != 0)) {
    return swift_getTupleTypeMetadata();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: Any.Type, state: Int));
  uint64_t result = _StringGuts._slowWithCString<A>(_:)();
  if (!v2) {
    return v4;
  }
  return result;
}

uint64_t static TypeConstruction.tuple<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in static TypeConstruction.tuple<A>(of:), 0, a2, v8, MEMORY[0x263F8E628], *(void *)(a3 + 8), MEMORY[0x263F8E658], v9);
  uint64_t v11 = specialized static TypeConstruction.tupleType<A>(of:labels:)(v10, 0, 0);
  create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)(a1, a2, v11, a4);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v12(a1, a2);
}

uint64_t create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = static UnsafeMutablePointer.allocate(capacity:)();
  uint64_t v25 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v24) {
      break;
    }
    outlined init with take of AST.AbsentFunction.Kind(&v23, &v21);
    uint64_t v16 = v22;
    uint64_t v17 = __swift_project_boxed_opaque_existential_1Tm(&v21, v22);
    specialized initializeElement #1 <A><A1><A2>(_:) in create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)((uint64_t)v17, &v25, v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  uint64_t v18 = v20;
  v20[3] = a3;
  __swift_allocate_boxed_opaque_existential_1Tm(v18);
  UnsafeMutablePointer.move()();
  return MEMORY[0x210561A30](v15, a3);
}

uint64_t specialized initializeElement #1 <A><A1><A2>(_:) in create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t result = MEMORY[0x270FA5388](a1, a1);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  if (__OFADD__(*a2, v8))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = (*a2 + v8) & ~v8;
    *a2 = v9;
    (*(void (**)(char *))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9, (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
    *a2 += v6;
  }
  return result;
}

uint64_t closure #1 in static TypeConstruction.tuple<A>(of:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  uint64_t result = swift_getDynamicType();
  *a2 = result;
  return result;
}

uint64_t static TypeConstruction.arrayType(of:)()
{
  return type metadata accessor for Array();
}

uint64_t static TypeConstruction.optionalType(of:)()
{
  return type metadata accessor for Optional();
}

uint64_t static TypeConstruction.optionalType<A>(of:depth:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 <= 4) {
    goto LABEL_3;
  }
  while (1)
  {
    type metadata accessor for Optional();
    type metadata accessor for Optional();
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for Optional();
    BOOL v4 = __OFSUB__(v2, 4);
    v2 -= 4;
    if (v4)
    {
      __break(1u);
      JUMPOUT(0x20D9AEDECLL);
    }
LABEL_3:
    switch(v2)
    {
      case 0uLL:
        return result;
      case 1uLL:
        return type metadata accessor for Optional();
      case 2uLL:
        goto LABEL_6;
      case 3uLL:
        goto LABEL_5;
      case 4uLL:
        type metadata accessor for Optional();
LABEL_5:
        type metadata accessor for Optional();
LABEL_6:
        type metadata accessor for Optional();
        return type metadata accessor for Optional();
      default:
        continue;
    }
  }
}

uint64_t static MemoryLayout.tupleElementIndex<A>(of:elementTypes:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v7 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x270FA5388](v7, v8);
  uint64_t v9 = type metadata accessor for EnumeratedSequence.Iterator();
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v10);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  uint64_t v14 = v13;
  if ((v15 & 1) != 0 || !v13) {
    return v14;
  }
  MEMORY[0x2105618F0](a3, v6);
  EnumeratedSequence.makeIterator()();
  uint64_t v16 = 0;
  uint64_t v17 = (void *)MEMORY[0x263F8DD50];
  while (1)
  {
    uint64_t result = EnumeratedSequence.Iterator.next()();
    if (!v26 || !*(void *)(*(void *)(*(void *)(v5 + *v17) - 8) + 64))
    {
      uint64_t v14 = 0;
LABEL_15:
      (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v9);
      return v14;
    }
    uint64_t v19 = *(void *)(v26 - 8);
    uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
    uint64_t v21 = *(void *)(v19 + 64);
    if (__OFADD__(v16, v20)) {
      break;
    }
    uint64_t v22 = (v16 + v20) & ~v20;
    if (v22 == v14)
    {
      uint64_t v14 = v25;
      goto LABEL_15;
    }
    uint64_t v16 = v22 + v21;
    if (__OFADD__(v22, v21))
    {
      __break(1u);
      return v14;
    }
  }
  __break(1u);
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CaptureStructure>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
  uint64_t v10 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    size_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    size_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x210561820](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  uint64_t v0 = (void *)swift_allocObject();
  int64_t v1 = _swift_stdlib_malloc_size(v0);
  uint64_t v2 = v1 - 32;
  if (v1 < 32) {
    uint64_t v2 = v1 - 29;
  }
  v0[2] = 1112064;
  v0[3] = 2 * (v2 >> 2);
  size_t result = specialized Sequence._copySequenceContents(initializing:)(&v4, (uint64_t)(v0 + 4), 1112064);
  if (result == (uint64_t *)1112064) {
    return v0;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CaptureList.Capture>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Diagnostic>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.GlobalMatchingOption>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 48 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Location>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Atom.Scalar>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.MatchingOption>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
  uint64_t v10 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<([AST.MatchingOption], Bool)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AST.MatchingOption], Bool));
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = (unsigned __int16)specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FF;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  int v3 = a2;
  uint64_t v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        unsigned __int8 v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned int v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned int v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              char v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  unsigned __int8 v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  unsigned int v12 = -87;
                }
                else
                {
                  unsigned int v12 = -55;
                }
              }
              else
              {
                unsigned int v12 = -48;
              }
              unint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              unint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unint64_t v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unint64_t v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        unsigned __int8 v26 = 0;
        do
        {
          unsigned __int8 v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              unsigned int v28 = -87;
            }
            else
            {
              unsigned int v28 = -55;
            }
          }
          else
          {
            unsigned int v28 = -48;
          }
          unsigned int v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          unsigned __int8 v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  unsigned __int8 v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  uint64_t v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    uint64_t v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int8 v19 = result + 1;
  do
  {
    uint64_t v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        unsigned __int8 v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        unsigned int v21 = -87;
      }
      else
      {
        unsigned int v21 = -55;
      }
    }
    else
    {
      unsigned int v21 = -48;
    }
    char v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    unint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      unint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          uint64_t v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unsigned __int8 v18 = result + 1;
          do
          {
            unsigned __int8 v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                uint64_t v20 = -87;
              }
              else
              {
                uint64_t v20 = -55;
              }
            }
            else
            {
              uint64_t v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned int v21 = a3 + 87;
        if (a3 > 10)
        {
          char v22 = a3 + 55;
        }
        else
        {
          unsigned int v21 = 97;
          char v22 = 65;
        }
        if (a3 <= 10) {
          unint64_t v23 = a3 + 48;
        }
        else {
          unint64_t v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned __int8 v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                unsigned __int8 v26 = -87;
              }
              else
              {
                unsigned __int8 v26 = -55;
              }
            }
            else
            {
              unsigned __int8 v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x210561750);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x210561750](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x210561750]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  long long v4[2] = a1;
  uint64_t v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a2)
  {
    uint64_t v13 = 0;
    unint64_t v15 = a4;
LABEL_34:
    *(void *)size_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = a6;
    *(void *)(result + 24) = a7;
    *(void *)(result + 32) = v15;
    return v13;
  }
  if (!a3)
  {
    unint64_t v15 = a4;
    uint64_t v13 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v11 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v11;
  if (a3 < 0) {
    goto LABEL_37;
  }
  unint64_t v23 = result;
  unint64_t v24 = a5;
  uint64_t v13 = 0;
  unint64_t v14 = a5 >> 14;
  unint64_t v15 = a4;
  uint64_t v16 = 4 << v10;
  unint64_t v17 = a4 >> 14;
  uint64_t v25 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v26 = a7 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v22 = a4;
  unint64_t v28 = a4 >> 14;
  while (1)
  {
    unint64_t v18 = v15 >> 14;
    if (v15 >> 14 == v14) {
      goto LABEL_33;
    }
    unint64_t v19 = v15 & 0xC;
    unint64_t v20 = v15;
    if (v19 == v16) {
      break;
    }
    if (v18 < v17) {
      goto LABEL_35;
    }
LABEL_14:
    if (v18 >= v14) {
      goto LABEL_35;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      size_t result = String.UTF8View._foreignSubscript(position:)();
      unint64_t v17 = v28;
      char v21 = result;
      if (v19 != v16) {
        goto LABEL_22;
      }
    }
    else if ((a7 & 0x2000000000000000) != 0)
    {
      v29[0] = a6;
      v29[1] = v26;
      char v21 = *((unsigned char *)v29 + (v20 >> 16));
      if (v19 != v16) {
        goto LABEL_22;
      }
    }
    else
    {
      size_t result = v25;
      if ((a6 & 0x1000000000000000) == 0)
      {
        size_t result = _StringObject.sharedUTF8.getter();
        unint64_t v17 = v28;
      }
      char v21 = *(unsigned char *)(result + (v20 >> 16));
      if (v19 != v16)
      {
LABEL_22:
        if ((a7 & 0x1000000000000000) != 0) {
          goto LABEL_23;
        }
        goto LABEL_9;
      }
    }
    size_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a6, a7);
    unint64_t v17 = v28;
    unint64_t v15 = result;
    if ((a7 & 0x1000000000000000) != 0)
    {
LABEL_23:
      if (v27 <= v15 >> 16) {
        goto LABEL_36;
      }
      size_t result = String.UTF8View._foreignIndex(after:)();
      unint64_t v17 = v28;
      unint64_t v15 = result;
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_10:
    *(unsigned char *)(a2 + v13++) = v21;
    if (a3 == v13)
    {
      uint64_t v13 = a3;
LABEL_33:
      size_t result = v23;
      a5 = v24;
      a4 = v22;
      goto LABEL_34;
    }
  }
  size_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a6, a7);
  unint64_t v17 = v28;
  unint64_t v20 = result;
  unint64_t v18 = result >> 14;
  if (result >> 14 >= v28) {
    goto LABEL_14;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8 = specialized Collection.count.getter(a1, a2, a3, a4);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0);
    unint64_t v11 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v10 + 4), v9, a1, a2, a3, a4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v11 != v9) {
      __break(1u);
    }
  }
  uint64_t v12 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v12;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v7 + 48);
    while (1)
    {
      uint64_t v13 = (void *)(v12 + 16 * v10);
      BOOL v14 = *v13 == a2 && v13[1] == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v17 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
    Swift::Int v18 = v17[1];
    *a1 = *v17;
    a1[1] = v18;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_43:
    uint64_t result = swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v37 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v16 >= v8) {
      goto LABEL_33;
    }
    unint64_t v17 = v37[v16];
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v8) {
        goto LABEL_33;
      }
      unint64_t v17 = v37[v11];
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v37[v11];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v8)
  {
LABEL_33:
    swift_release();
    unint64_t v1 = v0;
    char v29 = *(unsigned char *)(v2 + 32);
    uint64_t v30 = 1 << v29;
    if (1 << v29 > 63)
    {
      unint64_t v31 = (unint64_t)(v30 + 63) >> 6;
      if ((v29 & 0x3Fu) >= 8)
      {
        uint64_t v32 = v31 & 0x3FFFFFFFFFFFFFCLL;
        uint64_t v33 = (_OWORD *)(v2 + 72);
        uint64_t v34 = v31 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v33 - 1) = 0uLL;
          *uint64_t v33 = 0uLL;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v31 == v32) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      unint64_t v35 = v31 - v32;
      uint64_t v36 = (void *)(v2 + 8 * v32 + 56);
      do
      {
        *v36++ = 0;
        --v35;
      }
      while (v35);
    }
    else
    {
      *uint64_t v37 = -1 << v30;
    }
LABEL_42:
    *(void *)(v2 + 16) = 0;
    goto LABEL_43;
  }
  unint64_t v17 = v37[v18];
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_33;
    }
    unint64_t v17 = v37[v11];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_16;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_16;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v11 + 48);
    do
    {
      int64_t v16 = (void *)(v15 + 16 * a3);
      if (*v16 == v8 && v16[1] == a2) {
        goto LABEL_19;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_19;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_16:
  uint64_t v18 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v19 = (Swift::Int *)(*(void *)(v18 + 48) + 16 * a3);
  *uint64_t v19 = v8;
  v19[1] = a2;
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v18 + 16) = v22;
    return result;
  }
  __break(1u);
LABEL_19:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain_n();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *specialized Sequence._copySequenceContents(initializing:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    a3 = 0;
    goto LABEL_15;
  }
  if (!a3)
  {
LABEL_15:
    *uint64_t result = a3;
    return (uint64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_19;
  }
  unint64_t v3 = 0;
  while (1)
  {
    if (v3 == 1112064)
    {
      a3 = 1112064;
      goto LABEL_15;
    }
    unsigned int v4 = v3;
    if (v3 >> 11 >= 0x1B) {
      break;
    }
LABEL_9:
    if (v4 >> 11 == 27) {
      goto LABEL_18;
    }
    if (HIWORD(v4) > 0x10u) {
      goto LABEL_17;
    }
    *(_DWORD *)(a2 + 4 * v3++) = v4;
    if (a3 == v3) {
      goto LABEL_15;
    }
  }
  if (v3 <= 0xFFFFF7FF)
  {
    unsigned int v4 = v3 + 2048;
    goto LABEL_9;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
    uint64_t v6 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)(a1);
      v6 += v7;
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;

  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8;
      AST.Node.hash(into:)(a1);
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 40);
    do
    {
      uint64_t v5 = *v4;
      Hasher._combine(_:)(*(v4 - 1) >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 56);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 56);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      swift_bridgeObjectRelease();
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 48);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      Hasher._combine(_:)(*((_DWORD *)v4 - 4));
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 72);
    while (2)
    {
      uint64_t v5 = *(v4 - 5);
      uint64_t v6 = *(v4 - 4);
      unint64_t v8 = *(v4 - 3);
      uint64_t v7 = *(v4 - 2);
      uint64_t v10 = *(v4 - 1);
      uint64_t v9 = *v4;
      v4 += 6;
      switch(v6 >> 61)
      {
        case 1uLL:
          Hasher._combine(_:)(1uLL);
          if ((v6 & 1) == 0) {
            goto LABEL_3;
          }
          goto LABEL_12;
        case 2uLL:
          Hasher._combine(_:)(2uLL);
          if (v6) {
            goto LABEL_12;
          }
          goto LABEL_3;
        case 3uLL:
          Hasher._combine(_:)(0xBuLL);
          Hasher._combine(_:)(v5);
          goto LABEL_5;
        case 4uLL:
          Hasher._combine(_:)(0xCuLL);
          Hasher._combine(_:)(v5 & 1);
          goto LABEL_5;
        case 5uLL:
          int64_t v11 = v7 | v8;
          if (v6 == 0xA000000000000000 && (v7 | v8 | v5) == 0)
          {
            Hasher._combine(_:)(3uLL);
          }
          else if (v6 == 0xA000000000000000 && v5 == 1 && v11 == 0)
          {
            Hasher._combine(_:)(4uLL);
          }
          else if (v6 == 0xA000000000000000 && v5 == 2 && !v11)
          {
            Hasher._combine(_:)(5uLL);
          }
          else if (v6 == 0xA000000000000000 && v5 == 3 && !v11)
          {
            Hasher._combine(_:)(6uLL);
          }
          else if (v6 == 0xA000000000000000 && v5 == 4 && !v11)
          {
            Hasher._combine(_:)(7uLL);
          }
          else if (v6 == 0xA000000000000000 && v5 == 5 && !v11)
          {
            Hasher._combine(_:)(8uLL);
          }
          else if (v6 == 0xA000000000000000 && v5 == 6 && !v11)
          {
            Hasher._combine(_:)(9uLL);
          }
          else
          {
            Hasher._combine(_:)(0xAuLL);
          }
          goto LABEL_5;
        default:
          Hasher._combine(_:)(0);
          if (v6)
          {
LABEL_12:
            Hasher._combine(_:)(0);
          }
          else
          {
LABEL_3:
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v5);
          }
          Hasher._combine(_:)(v8 >> 14);
          Hasher._combine(_:)(v7 >> 14);
LABEL_5:
          Hasher._combine(_:)(v10 >> 14);
          Hasher._combine(_:)(v9 >> 14);
          if (--v3) {
            continue;
          }
          return;
      }
    }
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 48);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      Hasher._combine(_:)(*((unsigned __int8 *)v4 - 16));
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  unint64_t v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unint64_t *)(a2 + 56);
    do
    {
      unint64_t v8 = v4[2];
      uint64_t v9 = v4[3];
      int64_t v11 = v4[4];
      uint64_t v10 = v4[5];
      unint64_t v12 = *((unsigned __int8 *)v4 + 48);
      unint64_t v17 = *v4;
      int64_t v18 = v4[1];
      Hasher._combine(_:)(*((unsigned __int8 *)v4 - 24));
      swift_bridgeObjectRetain();
      unint64_t v15 = v8;
      int64_t v16 = v11;
      int64_t v13 = v8;
      unint64_t v14 = v9;
      outlined copy of ParseError?(v13, v9, v11, v10, v12);
      String.hash(into:)();
      Hasher._combine(_:)(v17 >> 14);
      Hasher._combine(_:)(v18 >> 14);
      if (v12 == 255)
      {
        Hasher._combine(_:)(0);
        uint64_t v5 = v15;
        uint64_t v6 = v16;
        uint64_t v7 = v10;
      }
      else
      {
        uint64_t v5 = v15;
        Hasher._combine(_:)(1u);
        ParseError.hash(into:)();
        uint64_t v6 = v16;
        uint64_t v7 = v10;
      }
      v4 += 10;
      swift_bridgeObjectRelease();
      outlined consume of ParseError?(v5, v14, v6, v7, v12);
      --v3;
    }
    while (v3);
  }
}

unint64_t String.UnicodeScalarView.distance(from:to:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8jK14V_s0C0O0H0OTG5Tf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0) {
    return 0;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v8 = v10;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v8 = (void *)_StringObject.sharedUTF8.getter();
  }
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8iJ14V_s0C0O0H0OTG5Tf1nnc_nTf4xn_n((uint64_t)v8, a1, a2, a3, a4);
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if (result)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

BOOL specialized static AST.Group.BalancedCapture.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  unint64_t v9 = a1[8];
  unint64_t v8 = a1[9];
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  uint64_t v14 = a2[7];
  uint64_t v16 = a2[8];
  uint64_t v15 = a2[9];
  if (v3)
  {
    if (!v10) {
      return 0;
    }
    unint64_t v18 = a1[2];
    unint64_t v17 = a1[3];
    uint64_t v20 = a2[2];
    uint64_t v19 = a2[3];
    if (*a1 == *a2 && v3 == v10)
    {
      if ((v20 ^ v18) >> 14) {
        return 0;
      }
      goto LABEL_11;
    }
    uint64_t v27 = a2[3];
    unint64_t v28 = a1[3];
    uint64_t v29 = a2[8];
    uint64_t v30 = a2[9];
    unint64_t v31 = a1[8];
    unint64_t v32 = a1[9];
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if (v22)
    {
      unint64_t v9 = v31;
      unint64_t v8 = v32;
      uint64_t v16 = v29;
      uint64_t v15 = v30;
      uint64_t v19 = v27;
      unint64_t v17 = v28;
      if ((v20 ^ v18) < 0x4000)
      {
LABEL_11:
        BOOL result = 0;
        if ((v19 ^ v17) >> 14) {
          return result;
        }
LABEL_12:
        if ((v11 ^ v4) >= 0x4000) {
          return result;
        }
        if ((v12 ^ v5) >> 14) {
          return 0;
        }
        if (v6 == v13 && v7 == v14)
        {
          if ((v16 ^ v9) >> 14) {
            return 0;
          }
        }
        else
        {
          uint64_t v23 = v16;
          unint64_t v24 = v9;
          unint64_t v25 = v8;
          uint64_t v26 = v15;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          uint64_t v15 = v26;
          unint64_t v8 = v25;
          if ((v23 ^ v24) >= 0x4000) {
            return 0;
          }
        }
        return (v15 ^ v8) < 0x4000;
      }
    }
  }
  else
  {
    BOOL result = 0;
    if (!v10) {
      goto LABEL_12;
    }
  }
  return result;
}

BOOL specialized static AST.MatchingOptionSequence.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  char v8 = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  char v10 = *(unsigned char *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  char v14 = *(unsigned char *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  if (v4)
  {
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  else if ((v10 & 1) != 0 || (*(void *)a2 ^ *(void *)a1) >> 14 || (*(void *)(a2 + 8) ^ *(void *)(a1 + 8)) >> 14)
  {
    return 0;
  }
  if (!specialized static Array<A>.== infix(_:_:)(v5, v11)) {
    return 0;
  }
  if (v8)
  {
    if (v14) {
      goto LABEL_15;
    }
    return 0;
  }
  if ((v14 & 1) != 0 || (v13 ^ v7) >> 14 || (v12 ^ v6) >> 14) {
    return 0;
  }
LABEL_15:

  return specialized static Array<A>.== infix(_:_:)(v9, v15);
}

BOOL specialized static AST.Group.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v14 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v22 = *(void *)(a2 + 64);
  uint64_t v21 = *(void *)(a2 + 72);
  int v23 = *(unsigned __int8 *)(a2 + 80);
  v111[0] = v2;
  v111[1] = v3;
  v111[2] = v5;
  v111[3] = v4;
  v111[4] = v6;
  v111[5] = v7;
  v111[6] = v9;
  v111[7] = v8;
  v111[8] = v10;
  v111[9] = v11;
  char v112 = v12;
  uint64_t v113 = v14;
  uint64_t v114 = v13;
  uint64_t v115 = v15;
  uint64_t v116 = v16;
  uint64_t v117 = v18;
  uint64_t v118 = v17;
  uint64_t v119 = v19;
  uint64_t v120 = v20;
  uint64_t v89 = v4;
  uint64_t v90 = v22;
  uint64_t v121 = v22;
  uint64_t v122 = v21;
  char v123 = v23;
  uint64_t v24 = v2;
  uint64_t v25 = v14;
  uint64_t v26 = v13;
  uint64_t v27 = v15;
  switch(v12)
  {
    case 1:
      if (v23 != 1) {
        goto LABEL_73;
      }
      uint64_t v75 = v2;
      uint64_t v77 = v14;
      uint64_t v101 = v2;
      uint64_t v102 = v3;
      uint64_t v103 = v5;
      uint64_t v104 = v4;
      uint64_t v105 = v6;
      uint64_t v106 = v7;
      uint64_t v107 = v9;
      uint64_t v108 = v8;
      uint64_t v109 = v10;
      uint64_t v110 = v11;
      uint64_t v91 = v14;
      uint64_t v92 = v13;
      uint64_t v66 = v13;
      uint64_t v68 = v21;
      uint64_t v93 = v15;
      uint64_t v94 = v16;
      uint64_t v95 = v18;
      uint64_t v96 = v17;
      uint64_t v97 = v19;
      uint64_t v98 = v20;
      uint64_t v99 = v22;
      uint64_t v100 = v21;
      uint64_t v71 = v20;
      uint64_t v29 = v4;
      uint64_t v30 = v10;
      uint64_t v31 = v6;
      uint64_t v84 = v9;
      uint64_t v87 = v8;
      uint64_t v64 = v19;
      uint64_t v32 = v15;
      uint64_t v33 = v17;
      uint64_t v34 = v18;
      outlined copy of AST.Group.Kind(v14, v13, v15, v16, v18, v17, v19, v20, v22, v21, 1);
      outlined copy of AST.Group.Kind(v75, v3, v5, v29, v31, v7, v84, v87, v30, v11, 1);
      outlined copy of AST.Group.Kind(v77, v66, v32, v16, v34, v33, v64, v71, v90, v68, 1);
      outlined copy of AST.Group.Kind(v75, v3, v5, v89, v31, v7, v84, v87, v30, v11, 1);
      BOOL v35 = specialized static AST.Group.BalancedCapture.== infix(_:_:)(&v101, &v91);
      outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v111);
      outlined consume of AST.Group.Kind(v77, v66, v32, v16, v34, v33, v64, v71, v90, v68, 1);
      outlined consume of AST.Group.Kind(v75, v3, v5, v89, v31, v7, v84, v87, v30, v11, 1);
      return v35;
    case 2:
      if (v23 != 2) {
        goto LABEL_73;
      }
      uint64_t v76 = v2;
      uint64_t v78 = v14;
      uint64_t v101 = v2;
      uint64_t v102 = v3;
      LOBYTE(v103) = v5 & 1;
      uint64_t v104 = v4;
      uint64_t v105 = v6;
      uint64_t v106 = v7;
      LOBYTE(v107) = v9 & 1;
      uint64_t v108 = v8;
      uint64_t v91 = v14;
      uint64_t v92 = v13;
      LOBYTE(v93) = v15 & 1;
      uint64_t v94 = v16;
      uint64_t v95 = v18;
      uint64_t v96 = v17;
      LOBYTE(v97) = v19 & 1;
      uint64_t v98 = v20;
      uint64_t v36 = v13;
      uint64_t v37 = v21;
      uint64_t v69 = v5;
      uint64_t v72 = v6;
      uint64_t v88 = v8;
      uint64_t v82 = v7;
      uint64_t v85 = v9;
      uint64_t v73 = v3;
      uint64_t v80 = v10;
      uint64_t v38 = v15;
      uint64_t v39 = v20;
      uint64_t v40 = v19;
      uint64_t v41 = v17;
      uint64_t v42 = v18;
      BOOL v35 = specialized static AST.MatchingOptionSequence.== infix(_:_:)((uint64_t)&v101, (uint64_t)&v91);
      outlined copy of AST.Group.Kind(v78, v36, v38, v16, v42, v41, v40, v39, v90, v37, 2);
      outlined copy of AST.Group.Kind(v76, v73, v69, v89, v72, v82, v85, v88, v80, v11, 2);
      outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v111);
      return v35;
    case 3:
      uint64_t v43 = v18;
      uint64_t v44 = v6 | v7 | v9;
      uint64_t v45 = v8 | v10 | v11;
      if (v5 | v3 | v2 | v4 | v44 | v45)
      {
        uint64_t v46 = v5 | v3 | v4 | v44 | v45;
        if (v24 != 1 || v46)
        {
          uint64_t v18 = v43;
          if (v24 != 2 || v46)
          {
            if (v24 != 3 || v46)
            {
              if (v24 != 4 || v46)
              {
                if (v24 != 5 || v46)
                {
                  if (v24 != 6 || v46)
                  {
                    if (v24 != 7 || v46)
                    {
                      if (v24 != 8 || v46)
                      {
                        if (v24 != 9 || v46)
                        {
                          if (v24 != 10 || v46)
                          {
                            if (v23 != 3 || v25 != 11) {
                              goto LABEL_73;
                            }
                          }
                          else if (v23 != 3 || v25 != 10)
                          {
                            goto LABEL_73;
                          }
                        }
                        else if (v23 != 3 || v25 != 9)
                        {
                          goto LABEL_73;
                        }
                      }
                      else if (v23 != 3 || v25 != 8)
                      {
                        goto LABEL_73;
                      }
                    }
                    else if (v23 != 3 || v25 != 7)
                    {
                      goto LABEL_73;
                    }
                  }
                  else if (v23 != 3 || v25 != 6)
                  {
                    goto LABEL_73;
                  }
                }
                else if (v23 != 3 || v25 != 5)
                {
                  goto LABEL_73;
                }
              }
              else if (v23 != 3 || v25 != 4)
              {
                goto LABEL_73;
              }
            }
            else if (v23 != 3 || v25 != 3)
            {
              goto LABEL_73;
            }
          }
          else if (v23 != 3 || v25 != 2)
          {
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v18 = v43;
          if (v23 != 3 || v25 != 1) {
            goto LABEL_73;
          }
        }
        uint64_t v47 = v15 | v13 | v16 | v18 | v17 | v19 | v20;
        uint64_t v48 = v90;
      }
      else
      {
        uint64_t v18 = v43;
        if (v23 != 3) {
          goto LABEL_73;
        }
        uint64_t v47 = v15 | v13 | v25 | v16 | v43 | v17 | v19;
        uint64_t v48 = v20 | v90;
      }
      if (v47 | v48 | v21) {
        goto LABEL_73;
      }
      outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v111);
      return 1;
    default:
      if (v23)
      {
LABEL_73:
        uint64_t v63 = v21;
        uint64_t v55 = v25;
        uint64_t v56 = v5;
        uint64_t v57 = v3;
        uint64_t v58 = v24;
        uint64_t v59 = v10;
        uint64_t v60 = v6;
        uint64_t v61 = v8;
        outlined copy of AST.Group.Kind(v55, v13, v15, v16, v18, v17, v19, v20, v90, v63, v23);
        outlined copy of AST.Group.Kind(v58, v57, v56, v89, v60, v7, v9, v61, v59, v11, v12);
        outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v111);
        return 0;
      }
      uint64_t v79 = v10;
      uint64_t v81 = v7;
      uint64_t v67 = v5;
      uint64_t v70 = v6;
      uint64_t v83 = v9;
      uint64_t v86 = v8;
      if (v2 == v14 && v3 == v13)
      {
        uint64_t v28 = v16;
        outlined copy of AST.Group.Kind(v2, v3, v15, v16, v18, v17, v19, v20, v22, v21, 0);
        outlined copy of AST.Group.Kind(v24, v3, v5, v89, v70, v7, v9, v86, v79, v11, 0);
        outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v111);
        if ((v27 ^ (unint64_t)v5) >> 14) {
          return 0;
        }
      }
      else
      {
        uint64_t v49 = v21;
        uint64_t v74 = v3;
        uint64_t v50 = v20;
        uint64_t v51 = v19;
        uint64_t v52 = v17;
        uint64_t v53 = v18;
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v54 = v26;
        uint64_t v28 = v16;
        outlined copy of AST.Group.Kind(v25, v54, v27, v16, v53, v52, v51, v50, v90, v49, 0);
        outlined copy of AST.Group.Kind(v24, v74, v67, v89, v70, v81, v83, v86, v79, v11, 0);
        outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v111);
        if ((v65 & 1) == 0 || (v27 ^ (unint64_t)v67) >= 0x4000) {
          return 0;
        }
      }
      return (v28 ^ (unint64_t)v89) < 0x4000;
  }
}

uint64_t specialized static AST.Reference.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 32);
  if (!*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32))
    {
      outlined consume of AST.Reference.Kind(*(void *)a1, v3, v5, v4, 0);
      outlined consume of AST.Reference.Kind(v7, v8, v10, v9, 0);
      if ((v3 & 1) == 0) {
        goto LABEL_5;
      }
LABEL_10:
      if (v8) {
        return !((v10 ^ (unint64_t)v5) >> 14) && (v9 ^ (unint64_t)v4) < 0x4000;
      }
      return 0;
    }
LABEL_21:
    outlined copy of AST.Reference.Kind(v7, v8, v10, v9, v11);
    outlined consume of AST.Reference.Kind(v2, v3, v5, v4, v6);
    outlined consume of AST.Reference.Kind(v7, v8, v10, v9, v11);
    return 0;
  }
  if (v6 == 1)
  {
    if (v11 == 1)
    {
      outlined consume of AST.Reference.Kind(*(void *)a1, v3, v5, v4, 1);
      outlined consume of AST.Reference.Kind(v7, v8, v10, v9, 1);
      if ((v3 & 1) == 0)
      {
LABEL_5:
        if ((v8 & 1) != 0 || v2 != v7) {
          return 0;
        }
        return !((v10 ^ (unint64_t)v5) >> 14) && (v9 ^ (unint64_t)v4) < 0x4000;
      }
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  if (v11 != 2)
  {
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)a1;
  if (v2 == v7 && v3 == v8)
  {
    outlined copy of AST.Reference.Kind(v13, v3, v10, v9, 2);
    outlined copy of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v2, v3, v10, v9, 2);
    return 1;
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of AST.Reference.Kind(v7, v8, v10, v9, 2);
    outlined copy of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v7, v8, v10, v9, 2);
    return v15 & 1;
  }
}

BOOL specialized static AST.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  unint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = *(void *)(a1 + 56);
  char v5 = *(unsigned char *)(a1 + 72);
  unint64_t v20 = *(void *)(a1 + 80);
  unint64_t v21 = *(void *)(a1 + 88);
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  long long v14 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v14;
  char v25 = v2;
  long long v15 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v15;
  char v23 = v6;
  if ((specialized static AST.Reference.Kind.== infix(_:_:)((uint64_t)v24, (uint64_t)v22) & 1) == 0) {
    return 0;
  }
  if ((v5 & 1) == 0)
  {
    if ((v11 & 1) == 0)
    {
      if (v4)
      {
        if ((v7 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        BOOL result = 0;
        if ((v7 & 1) != 0 || v3 != v8) {
          return result;
        }
      }
      BOOL result = 0;
      if ((v10 ^ v19) >> 14 || (v9 ^ v18) >> 14) {
        return result;
      }
      return (v13 ^ v20) < 0x4000 && (v12 ^ v21) < 0x4000;
    }
    return 0;
  }
  if ((v11 & 1) == 0) {
    return 0;
  }
  return (v13 ^ v20) < 0x4000 && (v12 ^ v21) < 0x4000;
}

BOOL specialized static AST.Conditional.Condition.PCREVersionNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 == *(void *)a2) {
      char v10 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
  }
  BOOL result = 0;
  if (!((*(void *)(a2 + 16) ^ v3) >> 14) && !((*(void *)(a2 + 24) ^ v2) >> 14))
  {
    if (v5)
    {
      if (!*(unsigned char *)(a2 + 40)) {
        return 0;
      }
    }
    else
    {
      if (v4 == *(void *)(a2 + 32)) {
        char v12 = *(unsigned char *)(a2 + 40);
      }
      else {
        char v12 = 1;
      }
      if (v12) {
        return 0;
      }
    }
    BOOL result = 0;
    if (!((*(void *)(a2 + 48) ^ v7) >> 14) && !((*(void *)(a2 + 56) ^ v6) >> 14))
    {
      unint64_t v13 = *(void *)(a2 + 72) ^ v8;
      return (*(void *)(a2 + 64) ^ v9) < 0x4000 && v13 < 0x4000;
    }
  }
  return result;
}

uint64_t specialized static AST.Quantification.Amount.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  unint64_t v6 = a1[5];
  unint64_t v9 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v13 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t v15 = a2[4];
  unint64_t v14 = a2[5];
  uint64_t v17 = a2[6];
  uint64_t v16 = a2[7];
  switch(v6 >> 61)
  {
    case 1uLL:
      if (v14 >> 61 == 1) {
        goto LABEL_7;
      }
      return 0;
    case 2uLL:
      if (v14 >> 61 == 2) {
        goto LABEL_7;
      }
      return 0;
    case 3uLL:
      if (v14 >> 61 != 3) {
        return 0;
      }
      if (v3)
      {
        if ((v10 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if ((v10 & 1) != 0 || v2 != v11) {
          return result;
        }
      }
      uint64_t result = 0;
      if ((v13 ^ v4) >> 14 || (v12 ^ v5) >> 14) {
        return result;
      }
      if (v6)
      {
        if ((v14 & 1) == 0) {
          return 0;
        }
      }
      else if ((v14 & 1) != 0 || v7 != v15)
      {
        return 0;
      }
      if ((v17 ^ v9) >> 14) {
        return 0;
      }
      unint64_t v21 = v16 ^ v8;
      goto LABEL_25;
    case 4uLL:
      uint64_t v19 = v4 | v3;
      uint64_t v20 = v7 | v9 | v8;
      if (v6 == 0x8000000000000000 && !(v19 | v2 | v5 | v20)) {
        return v14 >> 61 == 4 && v14 == 0x8000000000000000 && !(v13 | v10 | v11 | v12 | v15 | v17 | v16);
      }
      if (v6 == 0x8000000000000000 && v2 == 1 && !(v19 | v5 | v20))
      {
        if (v14 >> 61 != 4 || v14 != 0x8000000000000000 || v11 != 1) {
          return 0;
        }
      }
      else if (v14 >> 61 != 4 || v14 != 0x8000000000000000 || v11 != 2)
      {
        return 0;
      }
      return !(v13 | v10 | v12 | v15) && !(v16 | v17);
    default:
      if (v14 >> 61) {
        return 0;
      }
LABEL_7:
      if (v3)
      {
        if ((v10 & 1) == 0) {
          return 0;
        }
      }
      else if ((v10 & 1) != 0 || v2 != v11)
      {
        return 0;
      }
      if (!((v13 ^ v4) >> 14))
      {
        unint64_t v21 = v12 ^ v5;
LABEL_25:
        if (v21 < 0x4000) {
          return 1;
        }
      }
      return 0;
  }
}

uint64_t specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(uint64_t a1, char *a2)
{
  uint64_t v154 = a1;
  Swift::String v155 = a2;
  uint64_t v2 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v143 = *(void *)(v2 - 8);
  uint64_t v144 = v2;
  MEMORY[0x270FA5388](v2, v3);
  Swift::String v140 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Unicode.NumericType();
  uint64_t v141 = *(void *)(v5 - 8);
  uint64_t v142 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v139 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v10 = MEMORY[0x270FA5388](v8, v9);
  uint64_t v153 = (uint64_t *)((char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  Swift::String v152 = (char *)&v139 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v151 = (char *)&v139 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  unint64_t v149 = (char *)&v139 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  unint64_t v148 = (__int16 *)((char *)&v139 - v23);
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v147 = (char **)((char *)&v139 - v26);
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v150 = (uint64_t)&v139 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  uint64_t v145 = (unsigned __int8 *)&v139 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31, v33);
  uint64_t v36 = (double *)((char *)&v139 - v35);
  uint64_t v38 = MEMORY[0x270FA5388](v34, v37);
  uint64_t v146 = (uint64_t)&v139 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v43 = (uint64_t *)((char *)&v139 - v42);
  uint64_t v45 = MEMORY[0x270FA5388](v41, v44);
  uint64_t v47 = (char *)&v139 - v46;
  uint64_t v49 = MEMORY[0x270FA5388](v45, v48);
  uint64_t v51 = (char *)&v139 - v50;
  uint64_t v53 = MEMORY[0x270FA5388](v49, v52);
  uint64_t v55 = (char *)&v139 - v54;
  MEMORY[0x270FA5388](v53, v56);
  uint64_t v58 = (char *)&v139 - v57;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.CharacterProperty.Kind, AST.Atom.CharacterProperty.Kind));
  uint64_t v61 = MEMORY[0x270FA5388](v59 - 8, v60);
  uint64_t v63 = (char *)&v139 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = (uint64_t)&v63[*(int *)(v61 + 56)];
  outlined init with copy of AST.Atom(v154, (uint64_t)v63, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  uint64_t v65 = (uint64_t)v155;
  Swift::String v155 = (char *)v64;
  outlined init with copy of AST.Atom(v65, v64, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v55, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      char v73 = v55[1];
      uint64_t v74 = v155;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_67;
      }
      char v75 = *v74;
      char v76 = v74[1];
      char v159 = *v55;
      char v158 = v75;
      uint64_t v77 = Unicode.BinaryProperty.rawValue.getter();
      uint64_t v79 = v78;
      if (v77 == Unicode.BinaryProperty.rawValue.getter() && v79 == v80)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v135 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v135 & 1) == 0) {
          goto LABEL_83;
        }
      }
      outlined destroy of AST.Atom((uint64_t)v63, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      char v105 = v73 ^ v76 ^ 1;
      return v105 & 1;
    case 2u:
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v51, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v81 = v155;
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_67;
      }
      char v82 = *v81;
      char v161 = *v51;
      char v160 = v82;
      unint64_t v68 = Unicode.Script.rawValue.getter();
      uint64_t v70 = v83;
      unint64_t v71 = Unicode.Script.rawValue.getter();
      goto LABEL_44;
    case 3u:
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v47, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v84 = v155;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_67;
      }
      char v85 = *v84;
      char v163 = *v47;
      char v162 = v85;
      unint64_t v68 = Unicode.Script.rawValue.getter();
      uint64_t v70 = v86;
      unint64_t v71 = Unicode.Script.rawValue.getter();
      goto LABEL_44;
    case 4u:
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v43, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v88 = *v43;
      uint64_t v87 = v43[1];
      uint64_t v89 = (uint64_t *)v155;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_66;
      }
      uint64_t v90 = *v89;
      uint64_t v91 = v89[1];
      if (v88 != v90 || v87 != v91) {
        goto LABEL_78;
      }
      goto LABEL_46;
    case 5u:
      uint64_t v92 = v146;
      outlined init with copy of AST.Atom((uint64_t)v63, v146, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v93 = v155;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v95 = v141;
        uint64_t v94 = v142;
        uint64_t v96 = v139;
        (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v139, v93, v142);
        char v97 = MEMORY[0x210561DB0](v92, v96);
        goto LABEL_27;
      }
      uint64_t v134 = v141;
      uint64_t v133 = v142;
      goto LABEL_64;
    case 6u:
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v36, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v98 = (double *)v155;
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_67;
      }
      BOOL v99 = *v36 == *v98;
      goto LABEL_31;
    case 7u:
      uint64_t v100 = v145;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v145, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v102 = *((void *)v100 + 1);
      uint64_t v101 = *((void *)v100 + 2);
      uint64_t v103 = v155;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_66;
      }
      if (*v100 != *v103) {
        goto LABEL_81;
      }
      if (v102 != *((void *)v103 + 1) || v101 != *((void *)v103 + 2)) {
        goto LABEL_47;
      }
      goto LABEL_46;
    case 8u:
      uint64_t v92 = v150;
      outlined init with copy of AST.Atom((uint64_t)v63, v150, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v104 = v155;
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v95 = v143;
        uint64_t v94 = v144;
        uint64_t v96 = v140;
        (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v140, v104, v144);
        char v97 = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
LABEL_27:
        char v105 = v97;
        uint64_t v106 = *(void (**)(char *, uint64_t))(v95 + 8);
        v106(v96, v94);
        v106((char *)v92, v94);
LABEL_41:
        outlined destroy of AST.Atom((uint64_t)v63, type metadata accessor for AST.Atom.CharacterProperty.Kind);
        return v105 & 1;
      }
      uint64_t v134 = v143;
      uint64_t v133 = v144;
LABEL_64:
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v92, v133);
      goto LABEL_67;
    case 9u:
      uint64_t v107 = v147;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v147, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v108 = v107[1];
      uint64_t v109 = v155;
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_67;
      }
      if (*v107 != *(void *)v109) {
        goto LABEL_83;
      }
      BOOL v99 = v108 == *((void *)v109 + 1);
LABEL_31:
      char v105 = v99;
      goto LABEL_41;
    case 0xAu:
      uint64_t v110 = v148;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v148, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v111 = (__int16 *)v155;
      if (swift_getEnumCaseMultiPayload() != 10) {
        goto LABEL_67;
      }
      __int16 v112 = *v111;
      __int16 v165 = *v110;
      __int16 v164 = v112;
      unint64_t v68 = Unicode.Block.rawValue.getter();
      uint64_t v70 = v113;
      unint64_t v71 = Unicode.Block.rawValue.getter();
      goto LABEL_44;
    case 0xBu:
      uint64_t v114 = v149;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v149, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v115 = v155;
      if (swift_getEnumCaseMultiPayload() != 11) {
        goto LABEL_67;
      }
      char v116 = specialized == infix<A>(_:_:)(*v114, *v115);
      goto LABEL_40;
    case 0xCu:
      uint64_t v117 = v151;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v151, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v118 = v155;
      if (swift_getEnumCaseMultiPayload() != 12) {
        goto LABEL_67;
      }
      char v116 = specialized == infix<A>(_:_:)(*v117, *v118);
LABEL_40:
      char v105 = v116;
      goto LABEL_41;
    case 0xDu:
      uint64_t v119 = v152;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v152, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v120 = v155;
      if (swift_getEnumCaseMultiPayload() != 13) {
        goto LABEL_67;
      }
      char v121 = *v120;
      char v167 = *v119;
      char v166 = v121;
      unint64_t v68 = AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter();
      uint64_t v70 = v122;
      unint64_t v71 = AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter();
      goto LABEL_44;
    case 0xEu:
      uint64_t v124 = v153;
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v153, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v126 = *v124;
      uint64_t v125 = v124[1];
      uint64_t v128 = v124[2];
      uint64_t v127 = v124[3];
      uint64_t v129 = v155;
      if (swift_getEnumCaseMultiPayload() != 14)
      {
        swift_bridgeObjectRelease();
LABEL_66:
        swift_bridgeObjectRelease();
LABEL_67:
        outlined destroy of _ASTParent?((uint64_t)v63, &demangling cache variable for type metadata for (AST.Atom.CharacterProperty.Kind, AST.Atom.CharacterProperty.Kind));
        goto LABEL_68;
      }
      uint64_t v131 = *((void *)v129 + 1);
      uint64_t v130 = *((void *)v129 + 2);
      uint64_t v132 = *((void *)v129 + 3);
      if (!v125)
      {
        if (!v131) {
          goto LABEL_76;
        }
        goto LABEL_73;
      }
      if (!v131)
      {
LABEL_73:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_82;
      }
      if (v126 != *(void *)v129 || v125 != v131)
      {
        char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v136) {
          goto LABEL_76;
        }
LABEL_81:
        swift_bridgeObjectRelease();
LABEL_82:
        swift_bridgeObjectRelease();
LABEL_83:
        outlined destroy of AST.Atom((uint64_t)v63, type metadata accessor for AST.Atom.CharacterProperty.Kind);
LABEL_68:
        char v105 = 0;
        return v105 & 1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_76:
      if (v128 != v130 || v127 != v132)
      {
LABEL_78:
        char v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v137) {
          goto LABEL_79;
        }
        goto LABEL_83;
      }
LABEL_46:
      swift_bridgeObjectRelease_n();
LABEL_79:
      outlined destroy of AST.Atom((uint64_t)v63, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      char v105 = 1;
      return v105 & 1;
    case 0xFu:
      if (swift_getEnumCaseMultiPayload() == 15) {
        goto LABEL_79;
      }
      goto LABEL_67;
    case 0x10u:
      if (swift_getEnumCaseMultiPayload() == 16) {
        goto LABEL_79;
      }
      goto LABEL_67;
    case 0x11u:
      if (swift_getEnumCaseMultiPayload() == 17) {
        goto LABEL_79;
      }
      goto LABEL_67;
    default:
      outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v58, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      uint64_t v66 = v155;
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_67;
      }
      char v67 = *v66;
      char v157 = *v58;
      char v156 = v67;
      unint64_t v68 = Unicode.ExtendedGeneralCategory.rawValue.getter();
      uint64_t v70 = v69;
      unint64_t v71 = Unicode.ExtendedGeneralCategory.rawValue.getter();
LABEL_44:
      if (v68 == v71 && v70 == v72) {
        goto LABEL_46;
      }
LABEL_47:
      char v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v123 & 1) == 0) {
        goto LABEL_83;
      }
      goto LABEL_79;
  }
}

BOOL specialized static AST.Atom.Callout.OnigurumaTag.== infix(_:_:)(void *a1, void *a2)
{
  if ((*a2 ^ *a1) >> 14 || (a1[1] ^ a2[1]) >> 14) {
    return 0;
  }
  unint64_t v3 = a1[4];
  unint64_t v2 = a1[5];
  unint64_t v5 = a1[6];
  unint64_t v4 = a1[7];
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v8 = a2[7];
  if (a1[2] == a2[2] && a1[3] == a2[3])
  {
    if ((v7 ^ v3) >> 14) {
      return 0;
    }
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v10 & 1) == 0 || (v7 ^ v3) >= 0x4000) {
      return result;
    }
  }
  if ((v6 ^ v2) >= 0x4000) {
    return 0;
  }
  return (v9 ^ v5) < 0x4000 && (v8 ^ v4) < 0x4000;
}

BOOL specialized static AST.Atom.Callout.OnigurumaNamed.ArgList.== infix(_:_:)(void *a1, void *a2)
{
  if ((*a2 ^ *a1) >> 14) {
    return 0;
  }
  if ((a1[1] ^ a2[1]) >> 14) {
    return 0;
  }
  unint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0) {
    return 0;
  }
  return (v4 ^ v2) < 0x4000 && (v5 ^ v3) < 0x4000;
}

BOOL specialized static AST.Atom.Callout.OnigurumaNamed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  long long v12 = *(_OWORD *)(a1 + 112);
  long long v59 = *(_OWORD *)(a1 + 96);
  uint64_t v58 = *(void *)(a1 + 128);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 64);
  uint64_t v19 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 80);
  uint64_t v21 = *(void *)(a2 + 88);
  uint64_t v23 = *(void *)(a2 + 112);
  long long v56 = *(_OWORD *)(a2 + 120);
  long long v57 = *(_OWORD *)(a2 + 96);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if ((v14 ^ v2) >> 14) {
      return 0;
    }
LABEL_7:
    if ((v13 ^ v3) >= 0x4000) {
      return 0;
    }
    if (v8)
    {
      *(void *)&long long v68 = v4;
      *((void *)&v68 + 1) = v6;
      *(void *)&long long v69 = v5;
      *((void *)&v69 + 1) = v8;
      uint64_t v70 = v7;
      uint64_t v71 = v9;
      uint64_t v72 = v10;
      uint64_t v73 = v11;
      if (v18)
      {
        *(void *)&long long v62 = v15;
        *((void *)&v62 + 1) = v16;
        uint64_t v63 = v17;
        *(void *)&long long v64 = v18;
        *((void *)&v64 + 1) = v20;
        uint64_t v65 = v19;
        uint64_t v66 = v22;
        uint64_t v67 = v21;
        long long v61 = v12;
        uint64_t v33 = v23;
        BOOL v34 = specialized static AST.Atom.Callout.OnigurumaTag.== infix(_:_:)(&v68, &v62);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v23 = v33;
        long long v12 = v61;
        if (!v34) {
          return 0;
        }
LABEL_13:
        if ((void)v12)
        {
          long long v68 = v59;
          long long v69 = v12;
          uint64_t v70 = v58;
          if (v23)
          {
            long long v62 = v57;
            uint64_t v63 = v23;
            long long v64 = v56;
            BOOL v35 = specialized static AST.Atom.Callout.OnigurumaNamed.ArgList.== infix(_:_:)(&v68, &v62);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return v35;
          }
          swift_bridgeObjectRetain();
        }
        else if (!v23)
        {
          return 1;
        }
        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t v53 = v10;
      uint64_t v55 = v7;
      uint64_t v36 = v9;
      uint64_t v37 = v11;
      uint64_t v49 = v17;
      uint64_t v51 = v19;
      uint64_t v38 = v20;
      uint64_t v45 = v15;
      uint64_t v47 = v16;
      swift_bridgeObjectRetain();
      uint64_t v15 = v45;
      uint64_t v16 = v47;
      uint64_t v17 = v49;
      uint64_t v19 = v51;
      uint64_t v20 = v38;
      uint64_t v11 = v37;
      uint64_t v10 = v53;
      uint64_t v7 = v55;
      uint64_t v9 = v36;
    }
    else if (!v18)
    {
      goto LABEL_13;
    }
    *(void *)&long long v68 = v4;
    *((void *)&v68 + 1) = v6;
    *(void *)&long long v69 = v5;
    *((void *)&v69 + 1) = v8;
    uint64_t v70 = v7;
    uint64_t v71 = v9;
    uint64_t v72 = v10;
    uint64_t v73 = v11;
    uint64_t v74 = v15;
    uint64_t v75 = v16;
    uint64_t v76 = v17;
    uint64_t v77 = v18;
    uint64_t v78 = v20;
    uint64_t v79 = v19;
    uint64_t v80 = v22;
    uint64_t v81 = v21;
    swift_bridgeObjectRetain();
    outlined release of (AST.Atom.Callout.OnigurumaTag?, AST.Atom.Callout.OnigurumaTag?)((uint64_t)&v68);
    return 0;
  }
  unint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = *(void *)(a2 + 64);
  uint64_t v44 = *(void *)(a2 + 32);
  uint64_t v46 = *(void *)(a2 + 40);
  uint64_t v48 = *(void *)(a2 + 48);
  uint64_t v50 = *(void *)(a2 + 72);
  uint64_t v41 = *(void *)(a1 + 88);
  uint64_t v42 = *(void *)(a1 + 72);
  uint64_t v52 = *(void *)(a1 + 80);
  uint64_t v54 = *(void *)(a1 + 64);
  uint64_t v43 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a2 + 56);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v28 = *(void *)(a2 + 80);
  uint64_t v29 = *(void *)(a2 + 88);
  uint64_t v30 = *(void *)(a2 + 112);
  long long v60 = *(_OWORD *)(a1 + 112);
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v31)
  {
    long long v12 = v60;
    uint64_t v23 = v30;
    uint64_t v21 = v29;
    uint64_t v22 = v28;
    uint64_t v4 = v27;
    uint64_t v6 = v26;
    uint64_t v8 = v25;
    uint64_t v18 = v24;
    uint64_t v9 = v42;
    uint64_t v5 = v43;
    uint64_t v10 = v52;
    uint64_t v7 = v54;
    uint64_t v20 = v40;
    uint64_t v11 = v41;
    uint64_t v17 = v48;
    uint64_t v19 = v50;
    uint64_t v15 = v44;
    uint64_t v16 = v46;
    unint64_t v3 = v39;
    if ((v14 ^ v2) < 0x4000) {
      goto LABEL_7;
    }
  }
  return result;
}

BOOL specialized static AST.Atom.Callout.OnigurumaOfContents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(void *)a2 ^ *(void *)a1) >> 14 || (*(void *)(a1 + 8) ^ *(void *)(a2 + 8)) >> 14) {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  unint64_t v68 = *(void *)(a1 + 48);
  unint64_t v69 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 64);
  unint64_t v66 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120);
  int v11 = *(unsigned __int8 *)(a1 + 128);
  unint64_t v13 = *(void *)(a1 + 136);
  unint64_t v12 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v67 = *(void *)(a2 + 48);
  uint64_t v65 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 72);
  uint64_t v64 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 80);
  uint64_t v18 = *(void *)(a2 + 88);
  uint64_t v19 = *(void *)(a2 + 96);
  uint64_t v20 = *(void *)(a2 + 104);
  uint64_t v22 = *(void *)(a2 + 112);
  uint64_t v21 = *(void *)(a2 + 120);
  int v23 = *(unsigned __int8 *)(a2 + 128);
  uint64_t v24 = *(void *)(a2 + 136);
  uint64_t v25 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    if ((v14 ^ v2) >> 14) {
      return 0;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(a2 + 80);
    uint64_t v47 = *(void *)(a2 + 96);
    uint64_t v48 = *(void *)(a2 + 136);
    int v49 = *(unsigned __int8 *)(a2 + 128);
    uint64_t v58 = *(void *)(a2 + 104);
    uint64_t v60 = *(void *)(a2 + 120);
    uint64_t v50 = *(void *)(a2 + 112);
    uint64_t v51 = *(void *)(a2 + 144);
    uint64_t v52 = *(void *)(a1 + 120);
    uint64_t v53 = *(void *)(a1 + 104);
    uint64_t v62 = *(void *)(a1 + 112);
    uint64_t v54 = *(void *)(a1 + 96);
    uint64_t v55 = *(void *)(a1 + 80);
    uint64_t v26 = *(void *)(a1 + 72);
    uint64_t v27 = *(void *)(a1 + 64);
    uint64_t v28 = *(void *)(a2 + 88);
    unint64_t v29 = *(void *)(a1 + 136);
    int v30 = *(unsigned __int8 *)(a1 + 128);
    uint64_t v31 = *(void *)(a1 + 88);
    unint64_t v32 = *(void *)(a1 + 144);
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v33 & 1) == 0) {
      return result;
    }
    unint64_t v12 = v32;
    uint64_t v6 = v31;
    int v11 = v30;
    unint64_t v13 = v29;
    uint64_t v18 = v28;
    uint64_t v3 = v27;
    uint64_t v4 = v26;
    uint64_t v7 = v54;
    uint64_t v5 = v55;
    uint64_t v10 = v52;
    uint64_t v9 = v53;
    uint64_t v21 = v60;
    uint64_t v8 = v62;
    uint64_t v22 = v50;
    uint64_t v25 = v51;
    uint64_t v17 = v56;
    uint64_t v20 = v58;
    int v23 = v49;
    uint64_t v19 = v47;
    uint64_t v24 = v48;
    if ((v14 ^ v2) >= 0x4000) {
      return result;
    }
  }
  BOOL result = 0;
  if ((v15 ^ v69) >> 14 || (v67 ^ v68) >> 14 || (v65 ^ v66) >= 0x4000) {
    return result;
  }
  if (v6)
  {
    uint64_t v71 = v3;
    uint64_t v72 = v4;
    uint64_t v73 = v5;
    uint64_t v74 = v6;
    uint64_t v75 = v7;
    uint64_t v76 = v9;
    uint64_t v77 = v8;
    uint64_t v78 = v10;
    if (v18)
    {
      v70[0] = v64;
      v70[1] = v16;
      v70[2] = v17;
      v70[3] = v18;
      v70[4] = v19;
      v70[5] = v20;
      v70[6] = v22;
      v70[7] = v21;
      unint64_t v35 = v12;
      int v36 = v11;
      unint64_t v37 = v13;
      uint64_t v38 = v25;
      int v39 = v23;
      uint64_t v40 = v24;
      BOOL v41 = specialized static AST.Atom.Callout.OnigurumaTag.== infix(_:_:)(&v71, v70);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v24 = v40;
      int v23 = v39;
      uint64_t v25 = v38;
      unint64_t v13 = v37;
      int v11 = v36;
      unint64_t v12 = v35;
      if (v41) {
        return v11 == v23 && (v24 ^ v13) < 0x4000 && (v25 ^ v12) < 0x4000;
      }
      return 0;
    }
    uint64_t v61 = v21;
    uint64_t v63 = v8;
    uint64_t v44 = v10;
    uint64_t v45 = v22;
    uint64_t v57 = v17;
    uint64_t v59 = v20;
    uint64_t v46 = v19;
    swift_bridgeObjectRetain();
    uint64_t v17 = v57;
    uint64_t v19 = v46;
    uint64_t v20 = v59;
    uint64_t v21 = v61;
    uint64_t v22 = v45;
    uint64_t v10 = v44;
    uint64_t v8 = v63;
LABEL_27:
    uint64_t v71 = v3;
    uint64_t v72 = v4;
    uint64_t v73 = v5;
    uint64_t v74 = v6;
    uint64_t v75 = v7;
    uint64_t v76 = v9;
    uint64_t v77 = v8;
    uint64_t v78 = v10;
    uint64_t v79 = v64;
    uint64_t v80 = v16;
    uint64_t v81 = v17;
    uint64_t v82 = v18;
    uint64_t v83 = v19;
    uint64_t v84 = v20;
    uint64_t v85 = v22;
    uint64_t v86 = v21;
    swift_bridgeObjectRetain();
    outlined release of (AST.Atom.Callout.OnigurumaTag?, AST.Atom.Callout.OnigurumaTag?)((uint64_t)&v71);
    return 0;
  }
  if (v18) {
    goto LABEL_27;
  }
  return v11 == v23 && (v24 ^ v13) < 0x4000 && (v25 ^ v12) < 0x4000;
}

BOOL specialized static AST.Atom.Callout.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  outlined init with take of AST.Atom.Callout(a1, v58);
  outlined init with take of AST.Atom.Callout(a2, v59);
  outlined init with take of AST.Atom.Callout(v58, v60);
  outlined init with take of AST.Atom.Callout(v59, v61);
  outlined init with take of AST.Atom.Callout(v58, v62);
  int v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v62);
  if (!v3)
  {
    uint64_t v15 = AST.root.modify(v62);
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v19 = *(void *)(v15 + 24);
    char v20 = *(unsigned char *)(v15 + 32);
    uint64_t v21 = *(void *)(v15 + 40);
    uint64_t v22 = *(void *)(v15 + 48);
    outlined init with take of AST.Atom.Callout(v59, v57);
    if (!_s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v57))
    {
      uint64_t v23 = AST.root.modify(v57);
      char v24 = *(unsigned char *)(v23 + 32);
      *(void *)&long long v38 = v16;
      *((void *)&v38 + 1) = v17;
      *(void *)&long long v39 = v18;
      *((void *)&v39 + 1) = v19;
      LOBYTE(v40) = v20;
      *((void *)&v40 + 1) = v21;
      *(void *)&long long v41 = v22;
      long long v25 = *(_OWORD *)(v23 + 16);
      long long v48 = *(_OWORD *)v23;
      long long v49 = v25;
      v50[0] = v24;
      *(_OWORD *)&char v50[8] = *(_OWORD *)(v23 + 40);
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      BOOL v14 = specialized static Source.Located<A>.== infix(_:_:)((uint64_t)&v38, (uint64_t)&v48);
      goto LABEL_9;
    }
LABEL_10:
    outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
    outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
    outlined release of (AST.Atom.Callout, AST.Atom.Callout)((uint64_t)v60);
    return 0;
  }
  if (v3 != 1)
  {
    uint64_t v26 = AST.root.modify(v62);
    outlined init with take of AST.Atom.Callout(v59, v57);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v57) == 2)
    {
      uint64_t v27 = AST.root.modify(v57);
      long long v28 = *(_OWORD *)(v26 + 112);
      long long v53 = *(_OWORD *)(v26 + 96);
      long long v54 = v28;
      long long v55 = *(_OWORD *)(v26 + 128);
      uint64_t v56 = *(void *)(v26 + 144);
      long long v29 = *(_OWORD *)(v26 + 48);
      *(_OWORD *)uint64_t v50 = *(_OWORD *)(v26 + 32);
      *(_OWORD *)&v50[16] = v29;
      long long v30 = *(_OWORD *)(v26 + 80);
      long long v51 = *(_OWORD *)(v26 + 64);
      long long v52 = v30;
      long long v31 = *(_OWORD *)(v26 + 16);
      long long v48 = *(_OWORD *)v26;
      long long v49 = v31;
      long long v32 = *(_OWORD *)(v27 + 112);
      long long v44 = *(_OWORD *)(v27 + 96);
      long long v45 = v32;
      long long v46 = *(_OWORD *)(v27 + 128);
      uint64_t v47 = *(void *)(v27 + 144);
      long long v33 = *(_OWORD *)(v27 + 48);
      long long v40 = *(_OWORD *)(v27 + 32);
      long long v41 = v33;
      long long v34 = *(_OWORD *)(v27 + 80);
      long long v42 = *(_OWORD *)(v27 + 64);
      long long v43 = v34;
      long long v35 = *(_OWORD *)(v27 + 16);
      long long v38 = *(_OWORD *)v27;
      long long v39 = v35;
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
      BOOL v14 = specialized static AST.Atom.Callout.OnigurumaOfContents.== infix(_:_:)((uint64_t)&v48, (uint64_t)&v38);
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  uint64_t v4 = AST.root.modify(v62);
  outlined init with take of AST.Atom.Callout(v59, v57);
  if (_s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v57) != 1) {
    goto LABEL_10;
  }
  uint64_t v5 = AST.root.modify(v57);
  long long v6 = *(_OWORD *)(v4 + 112);
  long long v53 = *(_OWORD *)(v4 + 96);
  long long v54 = v6;
  *(void *)&long long v55 = *(void *)(v4 + 128);
  long long v7 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)&v50[16] = v7;
  long long v8 = *(_OWORD *)(v4 + 80);
  long long v51 = *(_OWORD *)(v4 + 64);
  long long v52 = v8;
  long long v9 = *(_OWORD *)(v4 + 16);
  long long v48 = *(_OWORD *)v4;
  long long v49 = v9;
  long long v10 = *(_OWORD *)(v5 + 112);
  long long v44 = *(_OWORD *)(v5 + 96);
  long long v45 = v10;
  *(void *)&long long v46 = *(void *)(v5 + 128);
  long long v11 = *(_OWORD *)(v5 + 48);
  long long v40 = *(_OWORD *)(v5 + 32);
  long long v41 = v11;
  long long v12 = *(_OWORD *)(v5 + 80);
  long long v42 = *(_OWORD *)(v5 + 64);
  long long v43 = v12;
  long long v13 = *(_OWORD *)(v5 + 16);
  long long v38 = *(_OWORD *)v5;
  long long v39 = v13;
  outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AST.Atom.Callout);
  BOOL v14 = specialized static AST.Atom.Callout.OnigurumaNamed.== infix(_:_:)((uint64_t)&v48, (uint64_t)&v38);
LABEL_9:
  BOOL v36 = v14;
  outlined release of (AST.Atom.Callout, AST.Atom.Callout)((uint64_t)v60);
  outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
  return v36;
}

uint64_t specialized static AST.Atom.BacktrackingDirective.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = 0;
  if (!((a1[1] ^ a2[1]) >> 14) && !((a1[2] ^ a2[2]) >> 14))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a2[4];
    if (v3)
    {
      if (v4)
      {
        unint64_t v6 = a1[5];
        unint64_t v5 = a1[6];
        uint64_t v8 = a2[5];
        uint64_t v7 = a2[6];
        if (a1[3] == a2[3] && v3 == v4)
        {
          if ((v8 ^ v6) >> 14) {
            return 0;
          }
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v8 ^ v6) >= 0x4000)
        {
          return 0;
        }
        if ((v7 ^ v5) < 0x4000) {
          return 1;
        }
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return v2;
}

uint64_t specialized static AST.Atom.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v151 = (char *)a1;
  *(void *)&long long v152 = a2;
  uint64_t v140 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x270FA5388](v140, v2);
  uint64_t v141 = (char *)&v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v6 = MEMORY[0x270FA5388](v4, v5);
  uint64_t v147 = (uint64_t)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6, v8);
  uint64_t v150 = (uint64_t)&v140 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  unint64_t v148 = (_OWORD *)((char *)&v140 - v13);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v146 = (uint64_t)&v140 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v149 = (uint64_t)&v140 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v144 = (uint64_t *)((char *)&v140 - v22);
  uint64_t v24 = MEMORY[0x270FA5388](v21, v23);
  uint64_t v143 = (uint64_t *)((char *)&v140 - v25);
  uint64_t v27 = MEMORY[0x270FA5388](v24, v26);
  uint64_t v142 = (uint64_t *)((char *)&v140 - v28);
  uint64_t v30 = MEMORY[0x270FA5388](v27, v29);
  long long v32 = (uint64_t *)((char *)&v140 - v31);
  uint64_t v34 = MEMORY[0x270FA5388](v30, v33);
  BOOL v36 = (unsigned __int8 *)&v140 - v35;
  uint64_t v38 = MEMORY[0x270FA5388](v34, v37);
  uint64_t v145 = (uint64_t)&v140 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  long long v43 = (uint64_t *)((char *)&v140 - v42);
  uint64_t v45 = MEMORY[0x270FA5388](v41, v44);
  uint64_t v47 = (char *)&v140 - v46;
  MEMORY[0x270FA5388](v45, v48);
  uint64_t v50 = (uint64_t *)((char *)&v140 - v49);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Kind, AST.Atom.Kind));
  uint64_t v53 = MEMORY[0x270FA5388](v51 - 8, v52);
  long long v55 = (char *)&v140 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = (uint64_t)&v55[*(int *)(v53 + 56)];
  outlined init with copy of AST.Atom((uint64_t)v151, (uint64_t)v55, type metadata accessor for AST.Atom.Kind);
  uint64_t v57 = v152;
  *(void *)&long long v152 = v56;
  outlined init with copy of AST.Atom(v57, v56, type metadata accessor for AST.Atom.Kind);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v47, type metadata accessor for AST.Atom.Kind);
      unint64_t v97 = *((void *)v47 + 1);
      unint64_t v98 = *((void *)v47 + 2);
      uint64_t v99 = v152;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_60;
      }
      if (*(_DWORD *)v47 == *(_DWORD *)v99
        && !((*(void *)(v99 + 8) ^ v97) >> 14)
        && (*(void *)(v99 + 16) ^ v98) >> 14 == 0)
      {
        goto LABEL_56;
      }
      goto LABEL_48;
    case 2u:
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v43, type metadata accessor for AST.Atom.Kind);
      uint64_t v61 = *v43;
      uint64_t v62 = v43[1];
      uint64_t v63 = (uint64_t *)v152;
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_58;
      }
      uint64_t v64 = (uint64_t)v55;
      uint64_t v65 = v63[1];
      if (specialized static Array<A>.== infix(_:_:)(v61, *v63))
      {
        char v66 = specialized static Array<A>.== infix(_:_:)(v62, v65);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v66)
        {
          uint64_t v67 = v64;
          goto LABEL_57;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      outlined destroy of AST.Atom(v64, type metadata accessor for AST.Atom.Kind);
      goto LABEL_61;
    case 3u:
      uint64_t v101 = v145;
      outlined init with copy of AST.Atom((uint64_t)v55, v145, type metadata accessor for AST.Atom.Kind);
      uint64_t v102 = v152;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v103 = v141;
        outlined init with take of AST.Atom.Kind(v102, (uint64_t)v141, type metadata accessor for AST.Atom.CharacterProperty);
        if ((specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(v101, v103) & 1) == 0
          || *(unsigned __int8 *)(v101 + *(int *)(v140 + 20)) != v103[*(int *)(v140 + 20)])
        {
          outlined destroy of AST.Atom((uint64_t)v103, type metadata accessor for AST.Atom.CharacterProperty);
LABEL_35:
          outlined destroy of AST.Atom(v101, type metadata accessor for AST.Atom.CharacterProperty);
          goto LABEL_48;
        }
        uint64_t v137 = *(int *)(v140 + 24);
        int v138 = *(unsigned __int8 *)(v101 + v137);
        int v139 = v103[v137];
        outlined destroy of AST.Atom((uint64_t)v103, type metadata accessor for AST.Atom.CharacterProperty);
        if (v138 != v139) {
          goto LABEL_35;
        }
        outlined destroy of AST.Atom(v101, type metadata accessor for AST.Atom.CharacterProperty);
LABEL_56:
        uint64_t v67 = (uint64_t)v55;
LABEL_57:
        outlined destroy of AST.Atom(v67, type metadata accessor for AST.Atom.Kind);
        char v69 = 1;
      }
      else
      {
        outlined destroy of AST.Atom(v101, type metadata accessor for AST.Atom.CharacterProperty);
LABEL_60:
        outlined destroy of _ASTParent?((uint64_t)v55, &demangling cache variable for type metadata for (AST.Atom.Kind, AST.Atom.Kind));
LABEL_61:
        char v69 = 0;
      }
      return v69 & 1;
    case 4u:
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v36, type metadata accessor for AST.Atom.Kind);
      unint64_t v68 = (unsigned __int8 *)v152;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_60;
      }
      char v69 = *v36 == *v68;
      goto LABEL_16;
    case 5u:
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v32, type metadata accessor for AST.Atom.Kind);
      uint64_t v59 = *v32;
      uint64_t v58 = v32[1];
      uint64_t v60 = (uint64_t *)v152;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_59;
      }
      goto LABEL_43;
    case 6u:
      uint64_t v104 = v142;
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v142, type metadata accessor for AST.Atom.Kind);
      uint64_t v59 = *v104;
      uint64_t v58 = v104[1];
      uint64_t v60 = (uint64_t *)v152;
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_59;
      }
      goto LABEL_43;
    case 7u:
      char v105 = v143;
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v143, type metadata accessor for AST.Atom.Kind);
      uint64_t v59 = *v105;
      uint64_t v58 = v105[1];
      uint64_t v60 = (uint64_t *)v152;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_59;
      }
      goto LABEL_43;
    case 8u:
      uint64_t v106 = v144;
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v144, type metadata accessor for AST.Atom.Kind);
      uint64_t v59 = *v106;
      uint64_t v58 = v106[1];
      uint64_t v60 = (uint64_t *)v152;
      if (swift_getEnumCaseMultiPayload() == 8) {
        goto LABEL_43;
      }
      goto LABEL_59;
    case 9u:
      uint64_t v70 = v149;
      outlined init with copy of AST.Atom((uint64_t)v55, v149, type metadata accessor for AST.Atom.Kind);
      uint64_t v72 = *(void *)v70;
      uint64_t v71 = *(void *)(v70 + 8);
      uint64_t v74 = *(void *)(v70 + 16);
      uint64_t v73 = *(void *)(v70 + 24);
      char v75 = *(unsigned char *)(v70 + 32);
      uint64_t v76 = v152;
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        char v77 = *(unsigned char *)(v70 + 72);
        uint64_t v150 = *(void *)v76;
        uint64_t v151 = v55;
        uint64_t v78 = (_OWORD *)v70;
        uint64_t v79 = *(void *)(v76 + 8);
        uint64_t v80 = *(void *)(v76 + 16);
        unint64_t v148 = *(_OWORD **)(v76 + 24);
        char v81 = *(unsigned char *)(v76 + 72);
        char v82 = *(unsigned char *)(v76 + 32);
        *(void *)char v161 = v72;
        *(void *)&v161[8] = v71;
        *(void *)&v161[16] = v74;
        uint64_t v162 = v73;
        v163[0] = v75;
        *(_OWORD *)&_OWORD v163[8] = *(_OWORD *)((char *)v78 + 40);
        long long v164 = *(_OWORD *)((char *)v78 + 56);
        char v165 = v77;
        long long v166 = v78[5];
        *(void *)Swift::String v155 = v150;
        *(void *)&v155[8] = v79;
        *(void *)&v155[16] = v80;
        uint64_t v156 = (uint64_t)v148;
        v157[0] = v82;
        *(_OWORD *)&v157[8] = *(_OWORD *)(v76 + 40);
        long long v158 = *(_OWORD *)(v76 + 56);
        char v159 = v81;
        long long v160 = *(_OWORD *)(v76 + 80);
        char v69 = specialized static AST.Reference.== infix(_:_:)((uint64_t)v161, (uint64_t)v155);
        outlined consume of AST.Reference.Kind(v150, v79, v80, (uint64_t)v148, v82);
        uint64_t v83 = v72;
        uint64_t v84 = v71;
        uint64_t v85 = v74;
        uint64_t v86 = v73;
        char v87 = v75;
        goto LABEL_52;
      }
      outlined consume of AST.Reference.Kind(v72, v71, v74, v73, v75);
      goto LABEL_60;
    case 0xAu:
      uint64_t v111 = v146;
      outlined init with copy of AST.Atom((uint64_t)v55, v146, type metadata accessor for AST.Atom.Kind);
      uint64_t v113 = *(void *)v111;
      uint64_t v112 = *(void *)(v111 + 8);
      uint64_t v114 = (uint64_t)v55;
      uint64_t v116 = *(void *)(v111 + 16);
      uint64_t v115 = *(void *)(v111 + 24);
      char v117 = *(unsigned char *)(v111 + 32);
      uint64_t v118 = v152;
      if (swift_getEnumCaseMultiPayload() != 10)
      {
        outlined consume of AST.Reference.Kind(v113, v112, v116, v115, v117);
        long long v55 = (char *)v114;
        goto LABEL_60;
      }
      char v119 = *(unsigned char *)(v111 + 72);
      uint64_t v150 = *(void *)v118;
      uint64_t v151 = (char *)v114;
      uint64_t v120 = (_OWORD *)v118;
      uint64_t v121 = *(void *)(v118 + 8);
      uint64_t v122 = *(void *)(v118 + 16);
      uint64_t v149 = *(void *)(v118 + 24);
      char v123 = *(unsigned char *)(v118 + 72);
      char v124 = *(unsigned char *)(v118 + 32);
      *(void *)char v161 = v113;
      *(void *)&v161[8] = v112;
      *(void *)&v161[16] = v116;
      uint64_t v162 = v115;
      v163[0] = v117;
      *(_OWORD *)&_OWORD v163[8] = *(_OWORD *)(v111 + 40);
      long long v164 = *(_OWORD *)(v111 + 56);
      char v165 = v119;
      long long v166 = *(_OWORD *)(v111 + 80);
      *(void *)Swift::String v155 = v150;
      *(void *)&v155[8] = v121;
      *(void *)&v155[16] = v122;
      uint64_t v156 = v149;
      v157[0] = v124;
      *(_OWORD *)&v157[8] = *(_OWORD *)((char *)v120 + 40);
      long long v158 = *(_OWORD *)((char *)v120 + 56);
      char v159 = v123;
      long long v160 = v120[5];
      char v69 = specialized static AST.Reference.== infix(_:_:)((uint64_t)v161, (uint64_t)v155);
      outlined consume of AST.Reference.Kind(v150, v121, v122, v149, v124);
      uint64_t v83 = v113;
      uint64_t v84 = v112;
      uint64_t v85 = v116;
      uint64_t v86 = v115;
      char v87 = v117;
LABEL_52:
      outlined consume of AST.Reference.Kind(v83, v84, v85, v86, v87);
      outlined destroy of AST.Atom((uint64_t)v151, type metadata accessor for AST.Atom.Kind);
      return v69 & 1;
    case 0xBu:
      uint64_t v88 = v148;
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v148, type metadata accessor for AST.Atom.Kind);
      outlined init with take of AST.Atom.Callout(v88, v161);
      uint64_t v89 = (_OWORD *)v152;
      if (swift_getEnumCaseMultiPayload() != 11)
      {
        outlined release of AST.Atom.Callout((uint64_t)v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
        goto LABEL_60;
      }
      outlined init with take of AST.Atom.Callout(v89, v155);
      outlined init with take of AST.Atom.Callout(v161, v154);
      outlined init with take of AST.Atom.Callout(v155, v153);
      char v69 = specialized static AST.Atom.Callout.== infix(_:_:)(v154, v153);
      outlined release of AST.Atom.Callout((uint64_t)v155, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AST.Atom.Callout);
LABEL_16:
      outlined destroy of AST.Atom((uint64_t)v55, type metadata accessor for AST.Atom.Kind);
      return v69 & 1;
    case 0xCu:
      uint64_t v90 = v150;
      outlined init with copy of AST.Atom((uint64_t)v55, v150, type metadata accessor for AST.Atom.Kind);
      uint64_t v91 = *(void *)(v90 + 32);
      uint64_t v92 = (char *)v152;
      if (swift_getEnumCaseMultiPayload() != 12) {
        goto LABEL_59;
      }
      uint64_t v93 = *(void *)(v90 + 24);
      char v94 = *v92;
      uint64_t v95 = *((void *)v92 + 3);
      uint64_t v96 = *((void *)v92 + 6);
      v161[0] = *(unsigned char *)v90;
      *(_OWORD *)&v161[8] = *(_OWORD *)(v90 + 8);
      uint64_t v162 = v93;
      *(void *)char v163 = v91;
      *(_OWORD *)&_OWORD v163[8] = *(_OWORD *)(v90 + 40);
      v155[0] = v94;
      *(_OWORD *)&v155[8] = *(_OWORD *)(v92 + 8);
      uint64_t v156 = v95;
      long long v152 = *((_OWORD *)v92 + 2);
      *(_OWORD *)char v157 = v152;
      *(void *)&v157[16] = v96;
      char v69 = specialized static AST.Atom.BacktrackingDirective.== infix(_:_:)(v161, v155);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    case 0xDu:
      uint64_t v125 = v147;
      outlined init with copy of AST.Atom((uint64_t)v55, v147, type metadata accessor for AST.Atom.Kind);
      uint64_t v126 = *(void *)(v125 + 24);
      uint64_t v127 = *(void *)(v125 + 56);
      uint64_t v128 = v152;
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        char v129 = *(unsigned char *)(v125 + 48);
        char v130 = *(unsigned char *)(v125 + 16);
        char v131 = *(unsigned char *)(v128 + 16);
        uint64_t v132 = (uint64_t)v55;
        uint64_t v133 = *(void *)(v128 + 24);
        char v134 = *(unsigned char *)(v128 + 48);
        uint64_t v135 = *(void *)(v128 + 56);
        *(_OWORD *)char v161 = *(_OWORD *)v125;
        v161[16] = v130;
        uint64_t v162 = v126;
        *(_OWORD *)char v163 = *(_OWORD *)(v125 + 32);
        v163[16] = v129;
        *(void *)&long long v164 = v127;
        *(_OWORD *)Swift::String v155 = *(_OWORD *)v128;
        v155[16] = v131;
        uint64_t v156 = v133;
        *(_OWORD *)char v157 = *(_OWORD *)(v128 + 32);
        v157[16] = v134;
        *(void *)&long long v158 = v135;
        char v69 = specialized static AST.MatchingOptionSequence.== infix(_:_:)((uint64_t)v161, (uint64_t)v155);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom(v132, type metadata accessor for AST.Atom.Kind);
        return v69 & 1;
      }
LABEL_58:
      swift_bridgeObjectRelease();
LABEL_59:
      swift_bridgeObjectRelease();
      goto LABEL_60;
    case 0xEu:
      if (swift_getEnumCaseMultiPayload() != 14) {
        goto LABEL_60;
      }
      goto LABEL_56;
    case 0xFu:
      if (swift_getEnumCaseMultiPayload() != 15) {
        goto LABEL_60;
      }
      goto LABEL_56;
    case 0x10u:
      if (swift_getEnumCaseMultiPayload() != 16) {
        goto LABEL_60;
      }
      goto LABEL_56;
    case 0x11u:
      if (swift_getEnumCaseMultiPayload() == 17) {
        goto LABEL_56;
      }
      goto LABEL_60;
    default:
      outlined init with copy of AST.Atom((uint64_t)v55, (uint64_t)v50, type metadata accessor for AST.Atom.Kind);
      uint64_t v59 = *v50;
      uint64_t v58 = v50[1];
      uint64_t v60 = (uint64_t *)v152;
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_59;
      }
LABEL_43:
      uint64_t v107 = *v60;
      uint64_t v108 = v60[1];
      if (v59 == v107 && v58 == v108)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_56;
      }
      char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v110) {
        goto LABEL_56;
      }
LABEL_48:
      outlined destroy of AST.Atom((uint64_t)v55, type metadata accessor for AST.Atom.Kind);
      goto LABEL_61;
  }
}

uint64_t specialized static AST.CustomCharacterClass.Member.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v99 = a1;
  uint64_t v100 = (char *)a2;
  uint64_t v98 = type metadata accessor for AST.Atom(0);
  MEMORY[0x270FA5388](v98, v2);
  uint64_t v97 = (uint64_t)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x270FA5388](v95, v4);
  uint64_t v96 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  uint64_t v8 = MEMORY[0x270FA5388](v6, v7);
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  uint64_t v14 = (uint64_t *)((char *)&v95 - v13);
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v18 = (uint64_t *)((char *)&v95 - v17);
  uint64_t v20 = MEMORY[0x270FA5388](v16, v19);
  uint64_t v22 = (char *)&v95 - v21;
  uint64_t v24 = MEMORY[0x270FA5388](v20, v23);
  uint64_t v26 = (char *)&v95 - v25;
  MEMORY[0x270FA5388](v24, v27);
  uint64_t v29 = (char *)&v95 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.CustomCharacterClass.Member, AST.CustomCharacterClass.Member));
  uint64_t v32 = MEMORY[0x270FA5388](v30 - 8, v31);
  uint64_t v34 = (char *)&v95 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (uint64_t)&v34[*(int *)(v32 + 56)];
  outlined init with copy of AST.Atom(v99, (uint64_t)v34, type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom((uint64_t)v100, v35, type metadata accessor for AST.CustomCharacterClass.Member);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v65 = (uint64_t)v26;
      outlined init with copy of AST.Atom((uint64_t)v34, (uint64_t)v26, type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        outlined destroy of AST.Atom((uint64_t)v26, type metadata accessor for AST.CustomCharacterClass.Range);
        goto LABEL_48;
      }
      uint64_t v66 = v96;
      outlined init with take of AST.Atom.Kind(v35, v96, type metadata accessor for AST.CustomCharacterClass.Range);
      if (specialized static AST.Atom.Kind.== infix(_:_:)((uint64_t)v26, v66))
      {
        uint64_t v67 = *(int *)(v98 + 20);
        unint64_t v68 = &v26[v67];
        unint64_t v69 = *(void *)&v26[v67];
        uint64_t v70 = (void *)(v66 + v67);
        if (!((*v70 ^ v69) >> 14) && !((*((void *)v68 + 1) ^ v70[1]) >> 14))
        {
          uint64_t v71 = v95[5];
          uint64_t v72 = &v26[v71];
          unint64_t v73 = *(void *)&v26[v71];
          uint64_t v74 = (void *)(v66 + v71);
          if (!((*v74 ^ v73) >> 14) && !((*((void *)v72 + 1) ^ v74[1]) >> 14))
          {
            uint64_t v75 = v95[6];
            uint64_t v76 = &v26[v75];
            uint64_t v77 = v66 + v75;
            if (specialized static AST.Atom.Kind.== infix(_:_:)(v65 + v75, v66 + v75))
            {
              uint64_t v78 = *(int *)(v98 + 20);
              uint64_t v79 = &v76[v78];
              unint64_t v80 = *(void *)&v76[v78];
              char v81 = (void *)(v77 + v78);
              if (!((*v81 ^ v80) >> 14)
                && !((*((void *)v79 + 1) ^ v81[1]) >> 14)
                && (specialized static Array<A>.== infix(_:_:)(*(void *)(v65 + v95[7]), *(void *)(v66 + v95[7])) & 1) != 0)
              {
                outlined destroy of AST.Atom(v66, type metadata accessor for AST.CustomCharacterClass.Range);
                outlined destroy of AST.Atom(v65, type metadata accessor for AST.CustomCharacterClass.Range);
                goto LABEL_55;
              }
            }
          }
        }
      }
      outlined destroy of AST.Atom(v66, type metadata accessor for AST.CustomCharacterClass.Range);
      outlined destroy of AST.Atom(v65, type metadata accessor for AST.CustomCharacterClass.Range);
      goto LABEL_57;
    case 2u:
      outlined init with copy of AST.Atom((uint64_t)v34, (uint64_t)v22, type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        outlined destroy of AST.Atom((uint64_t)v22, type metadata accessor for AST.Atom);
        goto LABEL_48;
      }
      uint64_t v46 = v97;
      outlined init with take of AST.Atom.Kind(v35, v97, type metadata accessor for AST.Atom);
      if (specialized static AST.Atom.Kind.== infix(_:_:)((uint64_t)v22, v46))
      {
        uint64_t v47 = *(int *)(v98 + 20);
        unint64_t v49 = *(void *)&v22[v47];
        unint64_t v48 = *(void *)&v22[v47 + 8];
        uint64_t v50 = (uint64_t *)(v46 + v47);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        outlined destroy of AST.Atom(v46, type metadata accessor for AST.Atom);
        if (!((v52 ^ v49) >> 14) && (v51 ^ v48) < 0x4000)
        {
          outlined destroy of AST.Atom((uint64_t)v22, type metadata accessor for AST.Atom);
          goto LABEL_55;
        }
      }
      else
      {
        outlined destroy of AST.Atom(v46, type metadata accessor for AST.Atom);
      }
      outlined destroy of AST.Atom((uint64_t)v22, type metadata accessor for AST.Atom);
      goto LABEL_57;
    case 3u:
      outlined init with copy of AST.Atom((uint64_t)v34, (uint64_t)v18, type metadata accessor for AST.CustomCharacterClass.Member);
      uint64_t v54 = *v18;
      uint64_t v53 = v18[1];
      unint64_t v56 = v18[2];
      unint64_t v55 = v18[3];
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_47;
      }
      uint64_t v58 = *(void *)(v35 + 16);
      uint64_t v57 = *(void *)(v35 + 24);
      if (v54 == *(void *)v35 && v53 == *(void *)(v35 + 8)) {
        goto LABEL_53;
      }
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0) {
        goto LABEL_57;
      }
      goto LABEL_26;
    case 4u:
      outlined init with copy of AST.Atom((uint64_t)v34, (uint64_t)v14, type metadata accessor for AST.CustomCharacterClass.Member);
      uint64_t v62 = *v14;
      uint64_t v61 = v14[1];
      unint64_t v56 = v14[2];
      unint64_t v55 = v14[3];
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_47;
      }
      uint64_t v58 = *(void *)(v35 + 16);
      uint64_t v57 = *(void *)(v35 + 24);
      if (v62 == *(void *)v35 && v61 == *(void *)(v35 + 8))
      {
LABEL_53:
        swift_bridgeObjectRelease_n();
        if ((v58 ^ v56) >= 0x4000) {
          goto LABEL_57;
        }
      }
      else
      {
        char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v64 & 1) == 0) {
          goto LABEL_57;
        }
LABEL_26:
        if ((v58 ^ v56) >> 14) {
          goto LABEL_57;
        }
      }
      if ((v57 ^ v55) >> 14) {
        goto LABEL_57;
      }
      goto LABEL_55;
    case 5u:
      outlined init with copy of AST.Atom((uint64_t)v34, (uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
      uint64_t v82 = *(void *)v10;
      char v83 = v10[8];
      unint64_t v84 = *((void *)v10 + 2);
      unint64_t v85 = *((void *)v10 + 3);
      uint64_t v86 = *((void *)v10 + 4);
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        swift_bridgeObjectRelease();
LABEL_47:
        swift_bridgeObjectRelease();
LABEL_48:
        outlined destroy of _ASTParent?((uint64_t)v34, &demangling cache variable for type metadata for (AST.CustomCharacterClass.Member, AST.CustomCharacterClass.Member));
        goto LABEL_59;
      }
      uint64_t v100 = v34;
      uint64_t v87 = *(void *)v35;
      LODWORD(v99) = *(unsigned __int8 *)(v35 + 8);
      uint64_t v88 = *(void *)(v35 + 16);
      uint64_t v89 = *(void *)(v35 + 24);
      uint64_t v90 = *(void *)(v35 + 32);
      char v91 = specialized static Array<A>.== infix(_:_:)(v82, v87);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v91 & 1) != 0 && specialized static Source.Located<A>.== infix(_:_:)(v83, v84, v85, v99, v88, v89))
      {
        char v92 = specialized static Array<A>.== infix(_:_:)(v86, v90);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom((uint64_t)v100, type metadata accessor for AST.CustomCharacterClass.Member);
        return v92 & 1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v93 = (uint64_t)v100;
      goto LABEL_58;
    default:
      outlined init with copy of AST.Atom((uint64_t)v34, (uint64_t)v29, type metadata accessor for AST.CustomCharacterClass.Member);
      uint64_t v36 = *((void *)v29 + 3);
      unint64_t v37 = *((void *)v29 + 4);
      unint64_t v38 = *((void *)v29 + 5);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_47;
      }
      unint64_t v39 = *((void *)v29 + 1);
      unint64_t v40 = *((void *)v29 + 2);
      char v41 = *v29;
      uint64_t v42 = *(void *)(v35 + 24);
      uint64_t v43 = *(void *)(v35 + 32);
      uint64_t v44 = *(void *)(v35 + 40);
      if (specialized static Source.Located<A>.== infix(_:_:)(v41, v39, v40, *(unsigned char *)v35, *(void *)(v35 + 8), *(void *)(v35 + 16)))
      {
        char v45 = specialized static Array<A>.== infix(_:_:)(v36, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v45 & 1) != 0 && !((v43 ^ v37) >> 14) && (v44 ^ v38) < 0x4000)
        {
LABEL_55:
          outlined destroy of AST.Atom((uint64_t)v34, type metadata accessor for AST.CustomCharacterClass.Member);
          char v92 = 1;
          return v92 & 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_57:
      uint64_t v93 = (uint64_t)v34;
LABEL_58:
      outlined destroy of AST.Atom(v93, type metadata accessor for AST.CustomCharacterClass.Member);
LABEL_59:
      char v92 = 0;
      return v92 & 1;
  }
}

uint64_t specialized static AST.AbsentFunction.Kind.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  switch((v4 >> 1) & 3)
  {
    case 1u:
      if ((a2[3] & 6) != 2) {
        goto LABEL_18;
      }
      unint64_t v14 = *a2;
      unint64_t v15 = v3;
      outlined copy of AST.AbsentFunction.Kind(v3, v2, v5, v4);
      outlined copy of AST.AbsentFunction.Kind(v7, v6, v9, v8);
      swift_retain();
      swift_retain();
      if ((specialized static AST.Node.== infix(_:_:)(&v15, &v14) & 1) == 0
        || (v6 ^ (unint64_t)v2) >> 14
        || (v9 ^ (unint64_t)v5) >> 14)
      {
        swift_release();
        swift_release();
        goto LABEL_19;
      }
      unint64_t v14 = v8 & 0xFFFFFFFFFFFFFFF9;
      unint64_t v15 = v4 & 0xFFFFFFFFFFFFFFF9;
      char v10 = specialized static AST.Node.== infix(_:_:)(&v15, &v14);
      outlined consume of AST.AbsentFunction.Kind(v3, v2, v5, v4);
      outlined consume of AST.AbsentFunction.Kind(v7, v6, v9, v8);
      swift_release();
      swift_release();
      return v10 & 1;
    case 2u:
      if ((a2[3] & 6) != 4) {
        goto LABEL_18;
      }
      goto LABEL_10;
    case 3u:
      if ((~(_BYTE)v8 & 6) != 0 || (v6 | v7 | v9) != 0 || v8 != 6) {
        goto LABEL_18;
      }
      outlined consume of AST.AbsentFunction.Kind(*a1, v2, v5, v4);
      outlined consume of AST.AbsentFunction.Kind(0, 0, 0, 6u);
      char v10 = 1;
      break;
    default:
      if ((v8 & 6) != 0)
      {
LABEL_18:
        outlined copy of AST.AbsentFunction.Kind(*a1, v2, v5, v4);
        outlined copy of AST.AbsentFunction.Kind(v7, v6, v9, v8);
LABEL_19:
        outlined consume of AST.AbsentFunction.Kind(v3, v2, v5, v4);
        outlined consume of AST.AbsentFunction.Kind(v7, v6, v9, v8);
        char v10 = 0;
      }
      else
      {
LABEL_10:
        unint64_t v14 = *a2;
        unint64_t v15 = v3;
        outlined copy of AST.AbsentFunction.Kind(v7, v6, v9, v8);
        outlined copy of AST.AbsentFunction.Kind(v3, v2, v5, v4);
        outlined copy of AST.AbsentFunction.Kind(v3, v2, v5, v4);
        outlined copy of AST.AbsentFunction.Kind(v7, v6, v9, v8);
        char v10 = specialized static AST.Node.== infix(_:_:)(&v15, &v14);
        outlined consume of AST.AbsentFunction.Kind(v3, v2, v5, v4);
        outlined consume of AST.AbsentFunction.Kind(v7, v6, v9, v8);
        outlined consume of AST.AbsentFunction.Kind(v7, v6, v9, v8);
        outlined consume of AST.AbsentFunction.Kind(v3, v2, v5, v4);
      }
      break;
  }
  return v10 & 1;
}

BOOL specialized static AST.AbsentFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(void *)a2 ^ *(void *)a1) >> 14) {
    return 0;
  }
  if ((*(void *)(a1 + 8) ^ *(void *)(a2 + 8)) >> 14) {
    return 0;
  }
  long long v2 = *(_OWORD *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v2;
  v11[0] = v5;
  v11[1] = v6;
  if ((specialized static AST.AbsentFunction.Kind.== infix(_:_:)((uint64_t *)v12, (uint64_t *)v11) & 1) == 0) {
    return 0;
  }
  return (v8 ^ v4) < 0x4000 && (v7 ^ v3) < 0x4000;
}

uint64_t specialized static AST.Quantification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 64);
  unint64_t v2 = *(void *)(a1 + 72);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 80);
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void *)(a1 + 96);
  uint64_t v21 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v26 = *(void *)(a2 + 104);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v24 = *(void *)(a2 + 112);
  unint64_t v25 = *(void *)(a1 + 112);
  uint64_t v22 = *(void *)(a2 + 120);
  unint64_t v23 = *(void *)(a1 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  long long v12 = *(_OWORD *)(a1 + 16);
  v31[0] = *(_OWORD *)a1;
  v31[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  void v31[2] = *(_OWORD *)(a1 + 32);
  v31[3] = v13;
  unint64_t v32 = v3;
  unint64_t v33 = v2;
  long long v14 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  void v28[2] = *(_OWORD *)(a2 + 32);
  v28[3] = v15;
  uint64_t v29 = v8;
  uint64_t v30 = v7;
  char v16 = specialized static AST.Quantification.Amount.== infix(_:_:)((uint64_t *)v31, (uint64_t *)v28);
  char v17 = 0;
  if ((v16 & 1) != 0 && !((v8 ^ v3) >> 14) && !((v7 ^ v2) >> 14))
  {
    if (specialized static Source.Located<A>.== infix(_:_:)(v4, v5, v6, v9, v10, v11))
    {
      *(void *)&v31[0] = v27;
      *(void *)&v28[0] = v26;
      char v18 = specialized static AST.Node.== infix(_:_:)(v31, v28);
      char v17 = 0;
      if ((v18 & 1) != 0 && !((v24 ^ v25) >> 14) && !((v22 ^ v23) >> 14)) {
        char v17 = specialized static Array<A>.== infix(_:_:)(v21, v20);
      }
    }
    else
    {
      char v17 = 0;
    }
  }
  return v17 & 1;
}

uint64_t specialized static AST.Conditional.Condition.Kind.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of AST.Conditional.Condition.Kind(a1, v78);
  outlined init with take of AST.Conditional.Condition.Kind(a2, v79);
  outlined init with take of AST.Conditional.Condition.Kind(v78, v80);
  outlined init with take of AST.Conditional.Condition.Kind(v79, v81);
  outlined init with take of AST.Conditional.Condition.Kind(v78, v82);
  switch(_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v82))
  {
    case 1u:
      uint64_t v31 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v82);
      uint64_t v4 = *(void *)v31;
      uint64_t v5 = *(void *)(v31 + 8);
      uint64_t v6 = *(void *)(v31 + 16);
      uint64_t v7 = *(void *)(v31 + 24);
      char v8 = *(unsigned char *)(v31 + 32);
      uint64_t v9 = *(void *)(v31 + 40);
      uint64_t v10 = *(void *)(v31 + 48);
      uint64_t v11 = *(void *)(v31 + 56);
      uint64_t v12 = *(void *)(v31 + 64);
      char v13 = *(unsigned char *)(v31 + 72);
      uint64_t v59 = *(void *)(v31 + 88);
      uint64_t v61 = *(void *)(v31 + 80);
      outlined init with take of AST.Conditional.Condition.Kind(v79, v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v77) != 1) {
        goto LABEL_3;
      }
      goto LABEL_13;
    case 2u:
      long long v15 = (unsigned __int8 *)_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v82);
      int v16 = *v15;
      unint64_t v18 = *((void *)v15 + 1);
      unint64_t v17 = *((void *)v15 + 2);
      uint64_t v19 = *((void *)v15 + 3);
      unsigned __int8 v20 = v15[32];
      uint64_t v21 = *((void *)v15 + 5);
      uint64_t v60 = *((void *)v15 + 7);
      uint64_t v62 = *((void *)v15 + 6);
      unsigned __int8 v58 = v15[64];
      uint64_t v22 = *((void *)v15 + 9);
      uint64_t v23 = *((void *)v15 + 10);
      uint64_t v24 = *((void *)v15 + 11);
      uint64_t v25 = *((void *)v15 + 12);
      outlined init with take of AST.Conditional.Condition.Kind(v79, v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v77) != 2) {
        goto LABEL_20;
      }
      uint64_t v55 = v21;
      unsigned __int8 v56 = v20;
      uint64_t v57 = v19;
      uint64_t v26 = (unsigned __int8 *)_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v77);
      int v27 = *v26;
      uint64_t v29 = *((void *)v26 + 1);
      uint64_t v28 = *((void *)v26 + 2);
      uint64_t v54 = *((void *)v26 + 3);
      unsigned __int8 v53 = v26[32];
      uint64_t v51 = *((void *)v26 + 6);
      uint64_t v52 = *((void *)v26 + 5);
      uint64_t v50 = *((void *)v26 + 7);
      unsigned __int8 v49 = v26[64];
      uint64_t v47 = *((void *)v26 + 10);
      uint64_t v48 = *((void *)v26 + 9);
      uint64_t v45 = *((void *)v26 + 12);
      uint64_t v46 = *((void *)v26 + 11);
      outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)((uint64_t)v80);
      if ((v16 ^ v27)) {
        goto LABEL_21;
      }
      if ((v29 ^ v18) >> 14) {
        goto LABEL_21;
      }
      if ((v28 ^ v17) >> 14) {
        goto LABEL_21;
      }
      *(void *)&long long v69 = v57;
      BYTE8(v69) = v56;
      *(void *)&long long v70 = v55;
      *((void *)&v70 + 1) = v62;
      *(void *)&long long v71 = v60;
      BYTE8(v71) = v58;
      *(void *)&long long v72 = v22;
      *((void *)&v72 + 1) = v23;
      *(void *)&long long v73 = v24;
      *((void *)&v73 + 1) = v25;
      *(void *)&long long v63 = v54;
      BYTE8(v63) = v53;
      *(void *)&long long v64 = v52;
      *((void *)&v64 + 1) = v51;
      *(void *)uint64_t v65 = v50;
      v65[8] = v49;
      *(void *)&v65[16] = v48;
      *(void *)&v65[24] = v47;
      *(void *)&v65[32] = v46;
      *(void *)&v65[40] = v45;
      if (!specialized static AST.Conditional.Condition.PCREVersionNumber.== infix(_:_:)((uint64_t)&v69, (uint64_t)&v63)) {
        goto LABEL_21;
      }
      char v30 = 1;
      return v30 & 1;
    case 3u:
      unint64_t v37 = (long long *)_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v82);
      outlined init with take of AST.Conditional.Condition.Kind(v79, v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v77) == 3)
      {
        unint64_t v38 = (long long *)_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v77);
        long long v73 = v37[4];
        long long v74 = v37[5];
        long long v75 = v37[6];
        long long v76 = v37[7];
        long long v69 = *v37;
        long long v70 = v37[1];
        long long v71 = v37[2];
        long long v72 = v37[3];
        long long v39 = v38[5];
        *(_OWORD *)&v65[32] = v38[4];
        long long v66 = v39;
        long long v40 = v38[7];
        long long v67 = v38[6];
        long long v68 = v40;
        long long v41 = v38[1];
        long long v63 = *v38;
        long long v64 = v41;
        long long v42 = v38[3];
        *(_OWORD *)uint64_t v65 = v38[2];
        *(_OWORD *)&v65[16] = v42;
        outlined retain of AST.Conditional.Condition(v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        BOOL v36 = specialized static AST.Group.== infix(_:_:)((uint64_t)&v69, (uint64_t)&v63);
        goto LABEL_16;
      }
      outlined init with take of AST.Conditional.Condition.Kind(v78, &v69);
      uint64_t v43 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v69);
      outlined retain of AST.Group(v43);
      goto LABEL_20;
    case 4u:
      outlined init with take of AST.Conditional.Condition.Kind(v79, v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v77) != 4) {
        goto LABEL_20;
      }
      goto LABEL_18;
    case 5u:
      outlined init with take of AST.Conditional.Condition.Kind(v79, v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v77) != 5) {
        goto LABEL_20;
      }
LABEL_18:
      outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)((uint64_t)v80);
      char v30 = 1;
      return v30 & 1;
    default:
      uint64_t v3 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v82);
      uint64_t v4 = *(void *)v3;
      uint64_t v5 = *(void *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      char v8 = *(unsigned char *)(v3 + 32);
      uint64_t v9 = *(void *)(v3 + 40);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = *(void *)(v3 + 56);
      uint64_t v12 = *(void *)(v3 + 64);
      char v13 = *(unsigned char *)(v3 + 72);
      uint64_t v59 = *(void *)(v3 + 88);
      uint64_t v61 = *(void *)(v3 + 80);
      outlined init with take of AST.Conditional.Condition.Kind(v79, v77);
      if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v77))
      {
LABEL_3:
        outlined init with take of AST.Conditional.Condition.Kind(v78, &v69);
        uint64_t v14 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v69);
        outlined copy of AST.Reference.Kind(*(void *)v14, *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), *(unsigned char *)(v14 + 32));
LABEL_20:
        outlined retain of AST.Conditional.Condition(v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)((uint64_t)v80);
LABEL_21:
        char v30 = 0;
      }
      else
      {
LABEL_13:
        uint64_t v32 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v77);
        char v33 = *(unsigned char *)(v32 + 32);
        char v34 = *(unsigned char *)(v32 + 72);
        *(void *)&long long v69 = v4;
        *((void *)&v69 + 1) = v5;
        *(void *)&long long v70 = v6;
        *((void *)&v70 + 1) = v7;
        LOBYTE(v71) = v8;
        *((void *)&v71 + 1) = v9;
        *(void *)&long long v72 = v10;
        *((void *)&v72 + 1) = v11;
        *(void *)&long long v73 = v12;
        BYTE8(v73) = v13;
        *(void *)&long long v74 = v61;
        *((void *)&v74 + 1) = v59;
        long long v35 = *(_OWORD *)(v32 + 16);
        long long v63 = *(_OWORD *)v32;
        long long v64 = v35;
        v65[0] = v33;
        *(_OWORD *)&v65[8] = *(_OWORD *)(v32 + 40);
        *(_OWORD *)&v65[24] = *(_OWORD *)(v32 + 56);
        v65[40] = v34;
        long long v66 = *(_OWORD *)(v32 + 80);
        outlined retain of AST.Conditional.Condition(v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AST.Conditional.Condition.Kind);
        BOOL v36 = specialized static AST.Reference.== infix(_:_:)((uint64_t)&v69, (uint64_t)&v63);
LABEL_16:
        char v30 = v36;
        outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)((uint64_t)v80);
        outlined retain of AST.Conditional.Condition(v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AST.Conditional.Condition.Kind);
        outlined retain of AST.Conditional.Condition(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AST.Conditional.Condition.Kind);
      }
      return v30 & 1;
  }
}

uint64_t specialized static AST.Conditional.== infix(_:_:)(uint64_t *a1, long long *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  outlined init with take of AST.Conditional.Condition.Kind((long long *)a1 + 1, v28);
  unint64_t v7 = a1[18];
  unint64_t v6 = a1[19];
  uint64_t v9 = a1[20];
  unint64_t v8 = a1[21];
  char v10 = *((unsigned char *)a1 + 184);
  unint64_t v24 = a1[22];
  uint64_t v25 = a1[24];
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = *((void *)a2 + 1);
  outlined init with take of AST.Conditional.Condition.Kind(a2 + 1, v29);
  char v13 = 0;
  if (!((v11 ^ v4) >> 14) && !((v12 ^ v5) >> 14))
  {
    uint64_t v14 = *((void *)a2 + 20);
    uint64_t v22 = *((void *)a2 + 21);
    uint64_t v15 = *((void *)a2 + 22);
    char v23 = *((unsigned char *)a2 + 184);
    uint64_t v16 = *((void *)a2 + 24);
    uint64_t v19 = (uint64_t *)(a2 + 9);
    uint64_t v17 = *((void *)a2 + 18);
    uint64_t v18 = v19[1];
    outlined init with take of AST.Conditional.Condition.Kind(v28, v27);
    outlined init with take of AST.Conditional.Condition.Kind(v29, v26);
    char v20 = specialized static AST.Conditional.Condition.Kind.== infix(_:_:)(v27, v26);
    char v13 = 0;
    if ((v20 & 1) != 0 && !((v17 ^ v7) >> 14) && !((v18 ^ v6) >> 14))
    {
      *(void *)&v27[0] = v9;
      *(void *)&v26[0] = v14;
      if ((specialized static AST.Node.== infix(_:_:)(v27, v26) & 1) == 0) {
        goto LABEL_11;
      }
      if (v10)
      {
        if ((v23 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_15:
        *(void *)&v27[0] = v25;
        *(void *)&v26[0] = v16;
        char v13 = specialized static AST.Node.== infix(_:_:)(v27, v26);
        return v13 & 1;
      }
      if (v23)
      {
LABEL_11:
        char v13 = 0;
        return v13 & 1;
      }
      char v13 = 0;
      if (!((v22 ^ v8) >> 14) && !((v15 ^ v24) >> 14)) {
        goto LABEL_15;
      }
    }
  }
  return v13 & 1;
}

BOOL specialized static AST.Group.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 80);
  unint64_t v4 = *(void *)(a1 + 88);
  unint64_t v3 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  unint64_t v5 = *(void *)(a1 + 112);
  unint64_t v7 = *(void *)(a1 + 120);
  char v8 = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 120);
  long long v14 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 48);
  v25[2] = *(_OWORD *)(a1 + 32);
  v25[3] = v15;
  uint64_t v25[4] = *(_OWORD *)(a1 + 64);
  char v26 = v2;
  unint64_t v27 = v4;
  unint64_t v28 = v3;
  long long v16 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  void v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v17;
  v21[4] = *(_OWORD *)(a2 + 64);
  char v22 = v8;
  uint64_t v23 = v10;
  uint64_t v24 = v9;
  BOOL v18 = specialized static AST.Group.Kind.== infix(_:_:)((uint64_t)v25, (uint64_t)v21);
  BOOL result = 0;
  if (v18 && !((v10 ^ v4) >> 14) && !((v9 ^ v3) >> 14))
  {
    *(void *)&v25[0] = v6;
    *(void *)&v21[0] = v12;
    return (specialized static AST.Node.== infix(_:_:)(v25, v21) & 1) != 0 && (v11 ^ v5) < 0x4000 && (v13 ^ v7) < 0x4000;
  }
  return result;
}

uint64_t specialized static AST.Node.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AST.Atom(0);
  uint64_t v6 = MEMORY[0x270FA5388](v4, v5);
  char v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v9);
  uint64_t v11 = (char *)&v92 - v10;
  uint64_t v12 = *a1;
  unint64_t v13 = *a2;
  switch((unint64_t)*a1 >> 60)
  {
    case 1uLL:
      if (v13 >> 60 != 1) {
        goto LABEL_55;
      }
      unint64_t v20 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v19 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v21 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      char v22 = (void *)(v13 & 0xFFFFFFFFFFFFFFFLL);
      uint64_t v23 = v22[2];
      uint64_t v24 = v22[3];
      uint64_t v25 = v22[4];
      swift_retain();
      swift_retain();
      char v26 = specialized static Array<A>.== infix(_:_:)(v21, v23);
      swift_release();
      swift_release();
      if ((v25 ^ v19) < 0x4000) {
        char v27 = v26 & ((v24 ^ v20) < 0x4000);
      }
      else {
        char v27 = 0;
      }
      return v27 & 1;
    case 2uLL:
      if (v13 >> 60 != 2) {
        goto LABEL_55;
      }
      long long v28 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      long long v102 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      long long v103 = v28;
      long long v29 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
      long long v104 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v105 = v29;
      long long v30 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v98 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v99 = v30;
      long long v31 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v100 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v101 = v31;
      long long v32 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      long long v115 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      long long v116 = v32;
      long long v33 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
      long long v117 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v118 = v33;
      long long v34 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v111 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v112 = v34;
      long long v35 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v113 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v114 = v35;
      swift_retain();
      swift_retain();
      char v36 = specialized static AST.Group.== infix(_:_:)((uint64_t)&v111, (uint64_t)&v98);
      goto LABEL_41;
    case 3uLL:
      if (v13 >> 60 != 3) {
        goto LABEL_55;
      }
      long long v37 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0xC0);
      long long v108 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0xB0);
      long long v109 = v37;
      uint64_t v110 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0xD0);
      long long v38 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
      long long v104 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v105 = v38;
      long long v39 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0xA0);
      long long v106 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
      long long v107 = v39;
      long long v40 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v100 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v101 = v40;
      long long v41 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      long long v102 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      long long v103 = v41;
      long long v42 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v98 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v99 = v42;
      long long v43 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xC0);
      long long v121 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xB0);
      long long v122 = v43;
      uint64_t v123 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xD0);
      long long v44 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
      long long v117 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v118 = v44;
      long long v45 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0xA0);
      long long v119 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
      long long v120 = v45;
      long long v46 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v113 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v114 = v46;
      long long v47 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      long long v115 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      long long v116 = v47;
      long long v48 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v111 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v112 = v48;
      swift_retain();
      swift_retain();
      char v36 = specialized static AST.Conditional.== infix(_:_:)((uint64_t *)&v111, &v98);
      goto LABEL_41;
    case 4uLL:
      if (v13 >> 60 != 4) {
        goto LABEL_55;
      }
      long long v49 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
      long long v104 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v105 = v49;
      *(void *)&long long v106 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
      long long v50 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v100 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v101 = v50;
      long long v51 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      long long v102 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      long long v103 = v51;
      long long v52 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v98 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v99 = v52;
      long long v53 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
      long long v117 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v118 = v53;
      *(void *)&long long v119 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
      long long v54 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v113 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v114 = v54;
      long long v55 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      long long v115 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      long long v116 = v55;
      long long v56 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v111 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v112 = v56;
      swift_retain();
      swift_retain();
      char v36 = specialized static AST.Quantification.== infix(_:_:)((uint64_t)&v111, (uint64_t)&v98);
      goto LABEL_41;
    case 5uLL:
      if (v13 >> 60 == 5) {
        goto LABEL_21;
      }
      goto LABEL_55;
    case 6uLL:
      if (v13 >> 60 != 6) {
        goto LABEL_55;
      }
      goto LABEL_21;
    case 7uLL:
      if (v13 >> 60 != 7) {
        goto LABEL_55;
      }
LABEL_21:
      uint64_t v57 = (void *)(v12 & 0xFFFFFFFFFFFFFFFLL);
      unint64_t v59 = v57[4];
      unint64_t v58 = v57[5];
      uint64_t v60 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v61 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v63 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v62 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      if (v57[2] == v60 && v57[3] == v61)
      {
        if ((v63 ^ v59) >= 0x4000) {
          goto LABEL_55;
        }
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v63 ^ v59) >> 14)
      {
        goto LABEL_55;
      }
      if ((v62 ^ v58) >= 0x4000) {
        goto LABEL_55;
      }
      goto LABEL_51;
    case 8uLL:
      if (v13 >> 60 != 8) {
        goto LABEL_55;
      }
      uint64_t v65 = swift_projectBox();
      uint64_t v66 = swift_projectBox();
      outlined init with copy of AST.Atom(v65, (uint64_t)v11, type metadata accessor for AST.Atom);
      outlined init with copy of AST.Atom(v66, (uint64_t)v8, type metadata accessor for AST.Atom);
      swift_retain();
      swift_retain();
      if ((specialized static AST.Atom.Kind.== infix(_:_:)((uint64_t)v11, (uint64_t)v8) & 1) == 0)
      {
        outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
        outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
        swift_release();
        goto LABEL_54;
      }
      long long v67 = &v11[*(int *)(v4 + 20)];
      unint64_t v69 = *(void *)v67;
      unint64_t v68 = *((void *)v67 + 1);
      outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
      long long v70 = &v8[*(int *)(v4 + 20)];
      uint64_t v72 = *(void *)v70;
      uint64_t v71 = *((void *)v70 + 1);
      outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
      swift_release();
      swift_release();
      if ((v72 ^ v69) >> 14 || (v71 ^ v68) >= 0x4000) {
        goto LABEL_55;
      }
      goto LABEL_51;
    case 9uLL:
      if (v13 >> 60 != 9) {
        goto LABEL_55;
      }
      unint64_t v74 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v73 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      unint64_t v96 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v97 = v73;
      unint64_t v75 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      unint64_t v76 = *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      char v77 = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v78 = v13 & 0xFFFFFFFFFFFFFFFLL;
      char v79 = *(unsigned char *)(v78 + 16);
      uint64_t v81 = *(void *)(v78 + 24);
      uint64_t v80 = *(void *)(v78 + 32);
      uint64_t v83 = *(void *)(v78 + 40);
      uint64_t v82 = *(void *)(v78 + 48);
      unint64_t v94 = v75;
      uint64_t v95 = v82;
      uint64_t v93 = *(void *)(v78 + 56);
      swift_retain();
      swift_retain();
      if (!specialized static Source.Located<A>.== infix(_:_:)(v77, v76, v74, v79, v81, v80)) {
        goto LABEL_52;
      }
      char v84 = specialized static Array<A>.== infix(_:_:)(v97, v83);
      swift_release();
      swift_release();
      if ((v84 & 1) == 0 || (v95 ^ v96) >> 14 || (v93 ^ v94) >= 0x4000) {
        goto LABEL_55;
      }
      goto LABEL_51;
    case 0xAuLL:
      if (v13 >> 60 != 10) {
        goto LABEL_55;
      }
      long long v85 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v111 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v112 = v85;
      long long v86 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v113 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v114 = v86;
      long long v87 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v98 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v99 = v87;
      long long v88 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      long long v100 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v101 = v88;
      swift_retain();
      swift_retain();
      char v36 = specialized static AST.AbsentFunction.== infix(_:_:)((uint64_t)&v111, (uint64_t)&v98);
LABEL_41:
      char v27 = v36;
      swift_release();
      swift_release();
      return v27 & 1;
    case 0xBuLL:
      if (v13 >> 60 != 11) {
        goto LABEL_55;
      }
      BOOL v90 = (*(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10) ^ *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x10)) >= 0x4000uLL;
      unint64_t v89 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x18) ^ *(void *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      BOOL v90 = v90 || v89 >= 0x4000;
      char v27 = !v90;
      return v27 & 1;
    default:
      if (v13 >> 60) {
        goto LABEL_55;
      }
      uint64_t v15 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      uint64_t v17 = *(void *)(v13 + 16);
      uint64_t v16 = *(void *)(v13 + 24);
      swift_retain();
      swift_retain();
      if (specialized static Array<A>.== infix(_:_:)(v15, v17))
      {
        BOOL v18 = specialized static Array<A>.== infix(_:_:)(v14, v16);
        swift_release();
        swift_release();
        if (v18)
        {
LABEL_51:
          char v27 = 1;
          return v27 & 1;
        }
      }
      else
      {
LABEL_52:
        swift_release();
LABEL_54:
        swift_release();
      }
LABEL_55:
      char v27 = 0;
      return v27 & 1;
  }
}

BOOL specialized static AST.GlobalMatchingOption.Kind.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v4 = a1[3];
  uint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  switch(v3 >> 61)
  {
    case 1uLL:
      if (v6 >> 61 != 1) {
        return 0;
      }
      if (v3)
      {
        if ((v6 & 1) == 0) {
          return 0;
        }
      }
      else if ((v6 & 1) != 0 || v2 != v7)
      {
        return 0;
      }
      return !((v9 ^ v5) >> 14) && (v8 ^ v4) < 0x4000;
    case 2uLL:
      if (v6 >> 61 != 2) {
        return 0;
      }
      if (v3)
      {
        if ((v6 & 1) == 0) {
          return 0;
        }
      }
      else if ((v6 & 1) != 0 || v2 != v7)
      {
        return 0;
      }
      return !((v9 ^ v5) >> 14) && (v8 ^ v4) < 0x4000;
    case 3uLL:
      if (v6 >> 61 != 3) {
        return 0;
      }
      return v7 == v2;
    case 4uLL:
      if (v6 >> 61 != 4) {
        return 0;
      }
      return ((v7 ^ v2) & 1) == 0;
    case 5uLL:
      uint64_t v11 = v4 | v5;
      if (v3 == 0xA000000000000000 && (v11 | v2) == 0)
      {
        uint64_t v15 = v8 | v9 | v7;
        return v6 >> 61 == 5 && v6 == 0xA000000000000000 && v15 == 0;
      }
      else
      {
        if (v3 == 0xA000000000000000 && v2 == 1 && v11 == 0)
        {
          uint64_t v18 = v8 | v9;
          return v6 >> 61 == 5 && v7 == 1 && v6 == 0xA000000000000000 && v18 == 0;
        }
        if (v3 == 0xA000000000000000 && v2 == 2 && !v11) {
          return v6 >> 61 == 5 && v7 == 2 && v6 == 0xA000000000000000 && !(v8 | v9);
        }
        if (v3 == 0xA000000000000000 && v2 == 3 && !v11)
        {
          if (v6 >> 61 != 5 || v7 != 3) {
            return 0;
          }
          return v6 == 0xA000000000000000 && !(v8 | v9);
        }
        if (v3 == 0xA000000000000000 && v2 == 4 && !v11)
        {
          if (v6 >> 61 != 5 || v7 != 4) {
            return 0;
          }
          return v6 == 0xA000000000000000 && !(v8 | v9);
        }
        if (v3 == 0xA000000000000000 && v2 == 5 && !v11)
        {
          if (v6 >> 61 != 5 || v7 != 5) {
            return 0;
          }
          return v6 == 0xA000000000000000 && !(v8 | v9);
        }
        if (v3 == 0xA000000000000000 && v2 == 6 && !v11)
        {
          if (v6 >> 61 != 5 || v7 != 6) {
            return 0;
          }
          return v6 == 0xA000000000000000 && !(v8 | v9);
        }
        return v6 >> 61 == 5 && v7 == 7 && v6 == 0xA000000000000000 && !(v8 | v9);
      }
    default:
      if (v6 >> 61) {
        return 0;
      }
      if (v3)
      {
        if ((v6 & 1) == 0) {
          return 0;
        }
      }
      else if ((v6 & 1) != 0 || v2 != v7)
      {
        return 0;
      }
      return !((v9 ^ v5) >> 14) && (v8 ^ v4) < 0x4000;
  }
}

uint64_t specialized static ParseError.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of ParseError(a1, (uint64_t)&v42);
  unint64_t v3 = v42;
  int v4 = v42;
  switch(v46)
  {
    case 1:
      unint64_t v6 = v43;
      unint64_t v7 = v44;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 1) {
        goto LABEL_207;
      }
      uint64_t v8 = v40.i64[0];
      BOOL v9 = v3 == v39.i64[0] && v6 == v39.i64[1];
      if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v11 = 0, (v10 & 1) != 0))
      {
        BOOL v12 = v7 == v8;
        goto LABEL_80;
      }
      return v11 & 1;
    case 2:
      unint64_t v13 = v43;
      int v14 = v44;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 2) {
        goto LABEL_207;
      }
      int v15 = v40.u8[0];
      BOOL v16 = v3 == v39.i64[0] && v13 == v39.i64[1];
      if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v11 = 0, (v17 & 1) != 0))
      {
        BOOL v12 = v14 == v15;
        goto LABEL_80;
      }
      return v11 & 1;
    case 3:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 == 3) {
        goto LABEL_86;
      }
      goto LABEL_207;
    case 4:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 4) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 5:
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 5) {
        goto LABEL_207;
      }
      goto LABEL_79;
    case 6:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 6) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 7:
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 7) {
        goto LABEL_207;
      }
      goto LABEL_79;
    case 8:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 8) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 9:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 9) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 10:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 10) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 11:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 11) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 12:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 12) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 13:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 13) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 14:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 14) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 15:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 15) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 16:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 16) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 17:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 17) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 18:
      unint64_t v19 = v43;
      unint64_t v18 = v44;
      unint64_t v20 = v45;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 18) {
        goto LABEL_207;
      }
      int8x16_t v21 = v40;
      if (v19)
      {
        if (!v39.i64[1]) {
          goto LABEL_207;
        }
        if (__PAIR128__(v19, v3) != *(_OWORD *)&v39)
        {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v11 = 0;
          if ((v22 & 1) == 0) {
            return v11 & 1;
          }
        }
      }
      else if (v39.i64[1])
      {
        goto LABEL_207;
      }
      if (__PAIR128__(v20, v18) != *(_OWORD *)&v21)
      {
LABEL_90:
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        return v11 & 1;
      }
      goto LABEL_134;
    case 19:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 19) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 20:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 20) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 21:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 21) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 22:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 22) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 23:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 23) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 24:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 24) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 25:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 25) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 26:
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 26) {
        goto LABEL_207;
      }
      goto LABEL_73;
    case 27:
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 27) {
        goto LABEL_207;
      }
      goto LABEL_73;
    case 28:
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 28) {
        goto LABEL_207;
      }
LABEL_73:
      BOOL v12 = v39.u8[0] == v4;
      goto LABEL_80;
    case 29:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 29) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 30:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 30) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 31:
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 31) {
        goto LABEL_207;
      }
LABEL_79:
      BOOL v12 = v3 == v39.i64[0];
      goto LABEL_80;
    case 32:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 32) {
        goto LABEL_207;
      }
      goto LABEL_86;
    case 33:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 == 33) {
        goto LABEL_86;
      }
      goto LABEL_207;
    case 34:
      unint64_t v24 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 34 || v3 != v39.i64[0]) {
        goto LABEL_207;
      }
      BOOL v12 = v24 == v39.i64[1];
LABEL_80:
      char v11 = v12;
      return v11 & 1;
    case 35:
      unint64_t v26 = v43;
      unint64_t v25 = v44;
      unint64_t v27 = v45;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41 != 35) {
        goto LABEL_207;
      }
      int8x16_t v28 = v40;
      if (v3 != v39.i64[0] || v26 != v39.i64[1])
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v11 = 0;
        if ((v30 & 1) == 0) {
          return v11 & 1;
        }
      }
      if (v25 != v28.i64[0] || v27 != v28.i64[1]) {
        goto LABEL_90;
      }
      goto LABEL_134;
    case 36:
      if (!(v44 | v45 | v42 | v43))
      {
        outlined init with take of ParseError(a2, (uint64_t)&v39);
        int8x16_t v35 = vorrq_s8(v39, v40);
        int8x8_t v36 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
        if (v41 != 36 || *(void *)&v36 != 0) {
          goto LABEL_207;
        }
        goto LABEL_134;
      }
      uint64_t v32 = v44 | v45 | v43;
      if (v42 == 1 && v32 == 0)
      {
        outlined init with take of ParseError(a2, (uint64_t)&v39);
        if (v41 != 36 || v39.i64[0] != 1) {
          goto LABEL_207;
        }
      }
      else if (v42 == 2 && v32 == 0)
      {
        outlined init with take of ParseError(a2, (uint64_t)&v39);
        if (v41 != 36 || v39.i64[0] != 2) {
          goto LABEL_207;
        }
      }
      else if (v42 != 3 || v32)
      {
        if (v42 != 4 || v32)
        {
          if (v42 != 5 || v32)
          {
            if (v42 != 6 || v32)
            {
              if (v42 != 7 || v32)
              {
                if (v42 != 8 || v32)
                {
                  if (v42 != 9 || v32)
                  {
                    if (v42 != 10 || v32)
                    {
                      if (v42 != 11 || v32)
                      {
                        if (v42 != 12 || v32)
                        {
                          if (v42 != 13 || v32)
                          {
                            if (v42 != 14 || v32)
                            {
                              if (v42 != 15 || v32)
                              {
                                if (v42 != 16 || v32)
                                {
                                  if (v42 != 17 || v32)
                                  {
                                    outlined init with take of ParseError(a2, (uint64_t)&v39);
                                    if (v41 != 36 || v39.i64[0] != 18) {
                                      goto LABEL_207;
                                    }
                                  }
                                  else
                                  {
                                    outlined init with take of ParseError(a2, (uint64_t)&v39);
                                    if (v41 != 36 || v39.i64[0] != 17) {
                                      goto LABEL_207;
                                    }
                                  }
                                }
                                else
                                {
                                  outlined init with take of ParseError(a2, (uint64_t)&v39);
                                  if (v41 != 36 || v39.i64[0] != 16) {
                                    goto LABEL_207;
                                  }
                                }
                              }
                              else
                              {
                                outlined init with take of ParseError(a2, (uint64_t)&v39);
                                if (v41 != 36 || v39.i64[0] != 15) {
                                  goto LABEL_207;
                                }
                              }
                            }
                            else
                            {
                              outlined init with take of ParseError(a2, (uint64_t)&v39);
                              if (v41 != 36 || v39.i64[0] != 14) {
                                goto LABEL_207;
                              }
                            }
                          }
                          else
                          {
                            outlined init with take of ParseError(a2, (uint64_t)&v39);
                            if (v41 != 36 || v39.i64[0] != 13) {
                              goto LABEL_207;
                            }
                          }
                        }
                        else
                        {
                          outlined init with take of ParseError(a2, (uint64_t)&v39);
                          if (v41 != 36 || v39.i64[0] != 12) {
                            goto LABEL_207;
                          }
                        }
                      }
                      else
                      {
                        outlined init with take of ParseError(a2, (uint64_t)&v39);
                        if (v41 != 36 || v39.i64[0] != 11) {
                          goto LABEL_207;
                        }
                      }
                    }
                    else
                    {
                      outlined init with take of ParseError(a2, (uint64_t)&v39);
                      if (v41 != 36 || v39.i64[0] != 10) {
                        goto LABEL_207;
                      }
                    }
                  }
                  else
                  {
                    outlined init with take of ParseError(a2, (uint64_t)&v39);
                    if (v41 != 36 || v39.i64[0] != 9) {
                      goto LABEL_207;
                    }
                  }
                }
                else
                {
                  outlined init with take of ParseError(a2, (uint64_t)&v39);
                  if (v41 != 36 || v39.i64[0] != 8) {
                    goto LABEL_207;
                  }
                }
              }
              else
              {
                outlined init with take of ParseError(a2, (uint64_t)&v39);
                if (v41 != 36 || v39.i64[0] != 7) {
                  goto LABEL_207;
                }
              }
            }
            else
            {
              outlined init with take of ParseError(a2, (uint64_t)&v39);
              if (v41 != 36 || v39.i64[0] != 6) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            outlined init with take of ParseError(a2, (uint64_t)&v39);
            if (v41 != 36 || v39.i64[0] != 5) {
              goto LABEL_207;
            }
          }
        }
        else
        {
          outlined init with take of ParseError(a2, (uint64_t)&v39);
          if (v41 != 36 || v39.i64[0] != 4) {
            goto LABEL_207;
          }
        }
      }
      else
      {
        outlined init with take of ParseError(a2, (uint64_t)&v39);
        if (v41 != 36 || v39.i64[0] != 3) {
          goto LABEL_207;
        }
      }
      if (!(v40.i64[0] | v40.i64[1] | v39.i64[1]))
      {
LABEL_134:
        char v11 = 1;
        return v11 & 1;
      }
LABEL_207:
      char v11 = 0;
      return v11 & 1;
    default:
      unint64_t v5 = v43;
      outlined init with take of ParseError(a2, (uint64_t)&v39);
      if (v41) {
        goto LABEL_207;
      }
LABEL_86:
      if (v3 != v39.i64[0] || v5 != v39.i64[1]) {
        goto LABEL_90;
      }
      goto LABEL_134;
  }
}

uint64_t specialized static AST.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v8 = *a2;
  uint64_t v9 = v2;
  if ((specialized static AST.Node.== infix(_:_:)(&v9, &v8) & 1) == 0) {
    goto LABEL_5;
  }
  if (!v3)
  {
    if (v5)
    {
      LOBYTE(v5) = 0;
LABEL_10:
      swift_bridgeObjectRelease();
      return v5 & 1;
    }
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v5) = specialized static Array<A>.== infix(_:_:)(v4, v6);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (!v5)
  {
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
  if (specialized static Array<A>.== infix(_:_:)(v3, v5)) {
    goto LABEL_8;
  }
LABEL_5:
  LOBYTE(v5) = 0;
  return v5 & 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined copy of ParseError?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined copy of ParseError(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t outlined copy of ParseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 0x23u)
  {
    if (((1 << a5) & 0x363FBFF5FLL) == 0)
    {
      if (((1 << a5) & 0x800040000) == 0) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for AST.Atom(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom);
}

uint64_t type metadata accessor for AST.CustomCharacterClass.Member(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.CustomCharacterClass.Member);
}

BOOL specialized static AST.CustomCharacterClass.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  if (!specialized static Source.Located<A>.== infix(_:_:)(*(unsigned char *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16))|| (specialized static Array<A>.== infix(_:_:)(v2, v5) & 1) == 0)
  {
    return 0;
  }
  return (v6 ^ v3) < 0x4000 && (v7 ^ v4) < 0x4000;
}

uint64_t type metadata accessor for AST.Atom.Kind(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom.Kind);
}

uint64_t outlined destroy of AST.Atom(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AST.Atom(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4 = (a4 >> 1) & 3;
  if (v4 && v4 != 2)
  {
    if (v4 != 1) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4 = (a4 >> 1) & 3;
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      swift_release();
    }
    else if (v4)
    {
      return result;
    }
  }

  return swift_release();
}

BOOL specialized static Diagnostic.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  unint64_t v2 = *((void *)a1 + 3);
  unint64_t v4 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v6 = *((void *)a1 + 6);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v7 = *((void *)a1 + 8);
  int v8 = a1[72];
  uint64_t v10 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v12 = *((void *)a2 + 5);
  uint64_t v11 = *((void *)a2 + 6);
  uint64_t v14 = *((void *)a2 + 7);
  uint64_t v13 = *((void *)a2 + 8);
  int v15 = a2[72];
  if (*((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2))
  {
    if ((v10 ^ v2) >> 14) {
      return 0;
    }
LABEL_8:
    if ((v9 ^ v4) >> 14) {
      return 0;
    }
    if (v8 == 255)
    {
      if (v15 == 255) {
        return 1;
      }
    }
    else if (v15 != 255)
    {
      *(void *)&long long v32 = v3;
      *((void *)&v32 + 1) = v6;
      uint64_t v33 = v5;
      uint64_t v34 = v7;
      char v35 = v8;
      *(void *)&long long v36 = v12;
      *((void *)&v36 + 1) = v11;
      uint64_t v37 = v14;
      uint64_t v38 = v13;
      char v39 = v15;
      return (specialized static ParseError.== infix(_:_:)(&v32, &v36) & 1) != 0;
    }
    uint64_t v24 = v13;
    uint64_t v25 = v5;
    uint64_t v26 = v6;
    uint64_t v27 = v3;
    outlined copy of ParseError?(v3, v6, v5, v7, v8);
    outlined copy of ParseError?(v12, v11, v14, v24, v15);
    outlined consume of ParseError?(v27, v26, v25, v7, v8);
    outlined consume of ParseError?(v12, v11, v14, v24, v15);
    return 0;
  }
  uint64_t v28 = *((void *)a1 + 5);
  uint64_t v29 = *((void *)a1 + 6);
  uint64_t v30 = *((void *)a1 + 7);
  int v31 = a1[72];
  int v16 = a2[72];
  uint64_t v17 = *((void *)a1 + 8);
  uint64_t v18 = *((void *)a2 + 5);
  uint64_t v19 = *((void *)a2 + 6);
  uint64_t v20 = *((void *)a2 + 7);
  uint64_t v21 = *((void *)a2 + 8);
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v22)
  {
    uint64_t v13 = v21;
    uint64_t v14 = v20;
    uint64_t v11 = v19;
    uint64_t v12 = v18;
    uint64_t v7 = v17;
    int v15 = v16;
    int v8 = v31;
    uint64_t v6 = v29;
    uint64_t v5 = v30;
    uint64_t v3 = v28;
    if ((v10 ^ v2) < 0x4000) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL specialized static CaptureList.Capture.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v7 = a1[5];
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v12 = a2[5];
  if (!v3)
  {
    if (!v8) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!v8) {
    return 0;
  }
  if (*a1 != *a2 || v3 != v8)
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v13 & 1) == 0 || v6 != v11) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_10:
  BOOL result = 0;
  if (v6 != v11) {
    return result;
  }
LABEL_11:
  if (v4 == v9) {
    return (v10 ^ v5) < 0x4000 && (v12 ^ v7) < 0x4000;
  }
  return result;
}

BOOL specialized static AST.Conditional.Condition.PCREVersionCheck.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    BOOL v2 = 0;
    if (!((*((void *)a1 + 1) ^ *((void *)a2 + 1)) >> 14) && !((*((void *)a1 + 2) ^ *((void *)a2 + 2)) >> 14))
    {
      unsigned __int8 v3 = a1[32];
      long long v4 = *(_OWORD *)(a1 + 40);
      uint64_t v5 = *((void *)a1 + 7);
      unsigned __int8 v6 = a1[64];
      long long v7 = *(_OWORD *)(a1 + 72);
      long long v8 = *(_OWORD *)(a1 + 88);
      uint64_t v9 = *((void *)a2 + 3);
      unsigned __int8 v10 = a2[32];
      long long v11 = *(_OWORD *)(a2 + 40);
      uint64_t v12 = *((void *)a2 + 7);
      unsigned __int8 v13 = a2[64];
      long long v14 = *(_OWORD *)(a2 + 72);
      long long v15 = *(_OWORD *)(a2 + 88);
      uint64_t v24 = *((void *)a1 + 3);
      unsigned __int8 v25 = v3;
      long long v26 = v4;
      uint64_t v27 = v5;
      unsigned __int8 v28 = v6;
      long long v29 = v7;
      long long v30 = v8;
      uint64_t v17 = v9;
      unsigned __int8 v18 = v10;
      long long v19 = v11;
      uint64_t v20 = v12;
      unsigned __int8 v21 = v13;
      long long v22 = v14;
      long long v23 = v15;
      return specialized static AST.Conditional.Condition.PCREVersionNumber.== infix(_:_:)((uint64_t)&v24, (uint64_t)&v17);
    }
  }
  else
  {
    return 0;
  }
  return v2;
}

BOOL specialized static AST.Conditional.Condition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of AST.Conditional.Condition.Kind((long long *)a1, v12);
  unint64_t v5 = *(void *)(a1 + 128);
  unint64_t v4 = *(void *)(a1 + 136);
  outlined init with take of AST.Conditional.Condition.Kind((long long *)a2, v13);
  uint64_t v7 = *(void *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v12, v11);
  outlined init with take of AST.Conditional.Condition.Kind(v13, v10);
  if ((specialized static AST.Conditional.Condition.Kind.== infix(_:_:)(v11, v10) & 1) == 0) {
    return 0;
  }
  return (v7 ^ v5) < 0x4000 && (v6 ^ v4) < 0x4000;
}

BOOL specialized static AST.MatchingOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  return (*((void *)a1 + 1) ^ *((void *)a2 + 1)) < 0x4000
      && (*((void *)a1 + 2) ^ *((void *)a2 + 2)) < 0x4000uLL;
}

uint64_t specialized static AST.CustomCharacterClass.Range.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v4 = type metadata accessor for AST.Atom(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = a1 + v5;
  unint64_t v7 = *(void *)(a1 + v5);
  long long v8 = (void *)(a2 + v5);
  if ((*v8 ^ v7) >> 14) {
    goto LABEL_10;
  }
  if ((*(void *)(v6 + 8) ^ v8[1]) >> 14) {
    goto LABEL_10;
  }
  uint64_t v9 = v4;
  uint64_t v10 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = a1 + v11;
  unint64_t v13 = *(void *)(a1 + v11);
  long long v14 = (void *)(a2 + v11);
  if ((*v14 ^ v13) >> 14) {
    goto LABEL_10;
  }
  if ((*(void *)(v12 + 8) ^ v14[1]) >> 14) {
    goto LABEL_10;
  }
  uint64_t v15 = v10;
  uint64_t v16 = *(int *)(v10 + 24);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  if ((specialized static AST.Atom.Kind.== infix(_:_:)(a1 + v16, a2 + v16) & 1) == 0
    || (uint64_t v19 = *(int *)(v9 + 20),
        uint64_t v20 = v17 + v19,
        unint64_t v21 = *(void *)(v17 + v19),
        long long v22 = (void *)(v18 + v19),
        (*v22 ^ v21) >> 14)
    || (*(void *)(v20 + 8) ^ v22[1]) >> 14)
  {
LABEL_10:
    char v23 = 0;
  }
  else
  {
    char v23 = specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + *(int *)(v15 + 28)), *(void *)(a2 + *(int *)(v15 + 28)));
  }
  return v23 & 1;
}

BOOL specialized static AST.GlobalMatchingOption.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  if (!specialized static AST.GlobalMatchingOption.Kind.== infix(_:_:)((uint64_t *)v11, (uint64_t *)v10)) {
    return 0;
  }
  return (v5 ^ v3) < 0x4000 && (v4 ^ v2) < 0x4000;
}

BOOL specialized static AST.Atom.Number.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return (*(void *)(a2 + 16) ^ *(void *)(a1 + 16)) < 0x4000
      && (*(void *)(a2 + 24) ^ *(void *)(a1 + 24)) < 0x4000uLL;
}

uint64_t outlined copy of AST.Reference.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AST.Reference.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom.CharacterProperty);
}

_OWORD *outlined init with take of AST.Atom.Callout(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  long long v3 = a1[2];
  long long v4 = a1[3];
  long long v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  long long v6 = a1[6];
  long long v7 = a1[7];
  long long v8 = a1[8];
  *(_OWORD *)((char *)a2 + 137) = *(_OWORD *)((char *)a1 + 137);
  a2[7] = v7;
  a2[8] = v8;
  a2[6] = v6;
  return a2;
}

uint64_t _s12_RegexParser3ASTV4AtomV7CalloutOWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t outlined consume of AST.Atom.Callout(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  switch(a20)
  {
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 0:
      char v20 = a5 & 1;
      return outlined consume of AST.Atom.Callout.PCRE.Argument(result, a2, a3, a4, v20);
    default:
      return result;
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of AST.Atom.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty.Kind(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom.CharacterProperty.Kind);
}

BOOL specialized static AST.Atom.Callout.PCRE.Argument.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  char v11 = *(unsigned char *)(a2 + 32);
  if ((v6 & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0)
    {
      outlined consume of AST.Atom.Callout.PCRE.Argument(*(void *)a1, v3, v5, v4, 0);
      outlined consume of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, 0);
      if (v3)
      {
        if ((v8 & 1) == 0) {
          return 0;
        }
      }
      else if ((v8 & 1) != 0 || v2 != v7)
      {
        return 0;
      }
      return !((v10 ^ (unint64_t)v5) >> 14) && (v9 ^ (unint64_t)v4) < 0x4000;
    }
LABEL_14:
    outlined copy of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, v11);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, v6);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, v11);
    return 0;
  }
  if ((*(unsigned char *)(a2 + 32) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  if (v2 == v7 && v3 == v8)
  {
    outlined copy of AST.Atom.Callout.PCRE.Argument(*(void *)a1, v3, v10, v9, 1);
    outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v10, v9, 1);
    return 1;
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, 1);
    outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, 1);
    return v13 & 1;
  }
}

uint64_t outlined copy of AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for Source.Located()
{
  return __swift_instantiateCanonicalPrespecializedGenericMetadata();
}

uint64_t outlined copy of AST.Conditional.Condition.Kind(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 7) == 3)
  {
    outlined copy of AST.Group.Kind(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_retain();
  }
  else if ((a14 & 7u) <= 1)
  {
    return outlined copy of AST.Reference.Kind(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined copy of AST.Group.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a11 != 1 && a11 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of AST.Conditional.Condition.Kind(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 7) == 3)
  {
    outlined consume of AST.Group.Kind(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_release();
  }
  else if ((a14 & 7u) <= 1)
  {
    return outlined consume of AST.Reference.Kind(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined consume of AST.Group.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a11 != 1 && a11 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

_OWORD *outlined init with take of AST.Conditional.Condition.Kind(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v7 = a1[7];
  a2[6] = a1[6];
  a2[7] = v7;
  a2[4] = v5;
  a2[5] = v6;
  return a2;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(_DWORD *a1)
{
  int v1 = a1[26];
  if ((v1 & 4) != 0) {
    return (*a1 + 4);
  }
  else {
    return v1 & 7;
  }
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_(uint64_t result)
{
  *(void *)(result + 104) &= 0xFFFFFFFFFFFFFFF8;
  return result;
}

uint64_t type metadata accessor for AST.CustomCharacterClass.Range(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.CustomCharacterClass.Range);
}

uint64_t type metadata accessor for AST.Atom(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined assign with take of AST.Atom.CharacterProperty.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of AST.Group(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type CompilerParseError and conformance CompilerParseError()
{
  unint64_t result = lazy protocol witness table cache variable for type CompilerParseError and conformance CompilerParseError;
  if (!lazy protocol witness table cache variable for type CompilerParseError and conformance CompilerParseError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompilerParseError and conformance CompilerParseError);
  }
  return result;
}

uint64_t outlined consume of CaptureStructure(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1) {
    return swift_release();
  }
  if (!a4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of LocatedErrorProtocol(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t type metadata accessor for Source.LocatedError()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

uint64_t outlined retain of AST.Quantification(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

uint64_t outlined retain of AST.Conditional(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AST.Group and conformance AST.Group()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  outlined consume of AST.Group.Kind(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
  swift_release();

  return MEMORY[0x270FA0238](v0, 144, 7);
}

unint64_t lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    unint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t specialized static Parser.parseAge(_:)()
{
  unint64_t v0 = String.subscript.getter();
  unint64_t v2 = v1;
  unint64_t v3 = v1 >> 14;
  swift_bridgeObjectRetain();
  if (v3 == v0 >> 14) {
    goto LABEL_8;
  }
  uint64_t v4 = Substring.subscript.getter();
  if (!v5) {
    goto LABEL_8;
  }
  if (v4 == 86 && v5 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v8 = 46;
      goto LABEL_12;
    }
  }
  Substring.subscript.getter();
  swift_bridgeObjectRelease();
  unint64_t v9 = Substring.index(after:)();
  unint64_t result = swift_bridgeObjectRelease();
  if (v3 < v9 >> 14)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v0 = Substring.subscript.getter();
  unint64_t v2 = v11;
  swift_bridgeObjectRelease();
  uint64_t v8 = 95;
LABEL_12:
  unint64_t v12 = specialized Collection<>.firstIndex(of:)(v8, 0xE100000000000000, v0, v2);
  char v14 = v13;
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_28;
  }
  if (v12 >> 14 < v0 >> 14)
  {
    __break(1u);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = Substring.subscript.getter();
  uint64_t v19 = v18;
  if (!((v15 ^ v16) >> 14))
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  uint64_t v20 = v15;
  uint64_t v21 = v16;
  uint64_t v22 = v17;
  uint64_t v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v15, v16, v17, v18, 10);
  if ((v24 & 0x100) != 0)
  {
    uint64_t v26 = specialized _parseInteger<A, B>(ascii:radix:)(v20, v21, v22, v19, 10);
    char v25 = v27;
  }
  else
  {
    char v25 = v24;
    uint64_t v26 = (unsigned __int8 *)v23;
  }
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (v25) {
    goto LABEL_28;
  }
  if (v12 >> 14 > v2 >> 14) {
    goto LABEL_33;
  }
  Substring.subscript.getter();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v30) {
    unint64_t result = v29;
  }
  if (v29 >> 14 >= result >> 14)
  {
    uint64_t v31 = Substring.subscript.getter();
    unint64_t v33 = v32;
    unint64_t v35 = v34;
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) >= 0x4000)
    {
      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v31, v33, v35, v37, 10);
      if ((v38 & 0x100) != 0) {
        specialized _parseInteger<A, B>(ascii:radix:)(v31, v33, v35, v37, 10);
      }
      char v39 = v38;
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        return (unint64_t)v26;
      }
      return 0;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized String.UTF8View.subscript.getter(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6 = a2;
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a2 & 0xC) == 4 << v8)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    unint64_t v6 = result;
  }
  if ((v7 & 0xC) == v9)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    unint64_t v7 = result;
  }
  uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  if (v6 >> 14 <= 4 * v10 && v6 >> 14 >= v7 >> 14) {
    return v7;
  }
  __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a3;
    unint64_t v4 = a2;
    uint64_t v8 = HIBYTE(a3) & 0xF;
    uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0x2000000000000000) != 0) {
      unint64_t v6 = HIBYTE(a3) & 0xF;
    }
    else {
      unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v5 = v6 << 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      if (v6 >= a1)
      {
        unint64_t result = (a1 << 16) | 4;
        goto LABEL_18;
      }
      if ((a3 & 0x2000000000000000) == 0)
      {
        uint64_t v9 = a2 << 16;
        goto LABEL_17;
      }
      goto LABEL_13;
    }
  }
  unint64_t result = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
  if ((v11 & 1) == 0) {
    goto LABEL_18;
  }
  if ((v3 & 0x2000000000000000) != 0) {
LABEL_13:
  }
    uint64_t v7 = v8;
  uint64_t v9 = v7 << 16;
  if ((v3 & 0x1000000000000000) != 0 && (v4 & 0x800000000000000) == 0)
  {
    unint64_t result = v9 | 0xB;
    goto LABEL_18;
  }
LABEL_17:
  unint64_t result = v9 | 7;
LABEL_18:
  if (4 * v6 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = 7;
    if (((v3 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0) {
      uint64_t v12 = 11;
    }
    return specialized String.UTF8View.subscript.getter(result, v5 | v12, v4, v3);
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if (result > 0x10F800 || a3 > 0x10F800)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = a3 - result;
  if (a2 >= 1)
  {
    if (v4 < 0 || v4 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v4 <= 0 && v4 > a2) {
    return 0;
  }
LABEL_12:
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result > 0x10F800) {
LABEL_17:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a3;
    unint64_t v4 = a2;
    uint64_t v6 = HIBYTE(a3) & 0xF;
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0x2000000000000000) != 0) {
      unint64_t v7 = HIBYTE(a3) & 0xF;
    }
    else {
      unint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if ((a3 & 0x1000000000000000) == 0)
    {
      if (v7 >= a1)
      {
        unint64_t v9 = (a1 << 16) | 4;
        goto LABEL_19;
      }
      if ((a3 & 0x2000000000000000) == 0)
      {
        uint64_t v8 = a2 << 16;
        goto LABEL_18;
      }
      goto LABEL_14;
    }
  }
  uint64_t v10 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
  if ((v11 & 1) == 0)
  {
    unint64_t v9 = v10;
    goto LABEL_19;
  }
  if ((v3 & 0x2000000000000000) != 0) {
LABEL_14:
  }
    uint64_t v5 = v6;
  uint64_t v8 = v5 << 16;
  if ((v3 & 0x1000000000000000) != 0 && (v4 & 0x800000000000000) == 0)
  {
    unint64_t v9 = v8 | 0xB;
    goto LABEL_19;
  }
LABEL_18:
  unint64_t v9 = v8 | 7;
LABEL_19:

  return specialized String.UTF8View.subscript.getter(15, v9, v4, v3);
}

uint64_t specialized Substring.UTF8View.subscript.getter(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = result;
  uint64_t v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  if ((a2 & 0xC) == 4 << v12)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a5, a6);
    unint64_t v10 = result;
  }
  if ((v11 & 0xC) == v13)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a5, a6);
    unint64_t v11 = result;
  }
  if (v10 >> 14 <= a4 >> 14 && v11 >> 14 >= a3 >> 14 && v10 >> 14 >= v11 >> 14) {
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8iJ14V_s0C0O0H0OTG5Tf1nnc_nTf4xn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8 = a2;
  uint64_t v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  unint64_t v11 = a2 & 0xC;
  if (v11 == 4 << v9)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v12 = a2 >> 16;
      if (v11 != v10) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v13 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v13 = HIBYTE(a5) & 0xF;
  }
  if (v13 < a2 >> 16) {
    goto LABEL_28;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v12 = result;
  if (v11 == v10)
  {
LABEL_14:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a4, a5);
    unint64_t v8 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v10)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v8 >> 16);
LABEL_21:
    if (__OFADD__(v12, result))
    {
      __break(1u);
    }
    else if (v12 + result >= v12)
    {
      return static String._fromUTF8Repairing(_:)();
    }
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v14 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v14 < v8 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= a3 >> 16)
  {
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_21;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  unint64_t v13 = (char *)v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * v6;
  unint64_t v16 = &v13[v14 * v6];
  unint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v17 = v4[2];
  if (__OFSUB__(v17, a2)) {
    goto LABEL_30;
  }
  if (v15 < v14 * a2 || v16 >= &v13[v14 * a2 + (v17 - a2) * v14])
  {
    unint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v15 != v14 * a2)
  {
    unint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v19 = v4[2];
  BOOL v20 = __OFADD__(v19, v8);
  uint64_t v21 = v19 - v7;
  if (!v20)
  {
    long long v4[2] = v21;
LABEL_24:
    *(void *)uint64_t v2 = v4;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  v23._uint64_t countAndFlagsBits = a5;
  v23._uint64_t object = a6;
  uint64_t v25 = *(void *)(result + 16);
  if (v25)
  {
    uint64_t v6 = a4;
    uint64_t v7 = 0;
    uint64_t v24 = result + 32;
    while (1)
    {
      uint64_t v8 = *(void *)(v24 + 8 * v7);
      swift_retain();
      uint64_t v35 = v8;
      uint64_t v34 = v8;
      AST.Node._associatedValue.getter(&into._countAndFlagsBits);
      uint64_t v9 = v32;
      uint64_t v10 = v33;
      __swift_project_boxed_opaque_existential_1Tm(&into, v32);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 16))(&v34, v9, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&into);
      String.subscript.getter();
      uint64_t count = Substring.distance(from:to:)();
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v28 = *(void *)(*v6 + 16);
      if (v28) {
        break;
      }
LABEL_10:
      Swift::String into = v23;
      uint64_t v34 = v35;
      swift_bridgeObjectRetain();
      AST.Node._renderRange(count:into:)(count, &into);
      Swift::String v17 = into;
      unint64_t v18 = (char *)*v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v6 = (uint64_t)v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
        *uint64_t v6 = (uint64_t)v18;
      }
      unint64_t v21 = *((void *)v18 + 2);
      unint64_t v20 = *((void *)v18 + 3);
      if (v21 >= v20 >> 1)
      {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v18);
        *uint64_t v6 = (uint64_t)v18;
      }
      *((void *)v18 + 2) = v21 + 1;
      *(Swift::String *)&v18[16 * v21 + 32] = v17;
LABEL_19:
      unint64_t result = swift_release();
      if (!v26 && ++v7 != v25) {
        continue;
      }
      return result;
    }
    unint64_t v11 = 0;
LABEL_5:
    if (v11 >= *(void *)(*v6 + 16))
    {
      __break(1u);
    }
    else
    {
      unint64_t v29 = v11 + 1;
      swift_bridgeObjectRetain();
      uint64_t v12 = String.subscript.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v15 = v12;
      while ((v15 ^ v14) >= 0x4000)
      {
        Substring.subscript.getter();
        uint64_t v15 = Substring.index(after:)();
        char v16 = Character.isWhitespace.getter();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          unint64_t result = swift_bridgeObjectRelease();
          ++v11;
          uint64_t v6 = a4;
          if (v29 != v28) {
            goto LABEL_5;
          }
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      into._uint64_t countAndFlagsBits = v35;
      uint64_t v6 = a4;
      uint64_t v22 = *a4;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v22;
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        uint64_t v22 = result;
        *a4 = result;
      }
      if (v11 < *(void *)(v22 + 16))
      {
        AST.Node._renderRange(count:into:)(count, (Swift::String *)(v22 + 16 * v11 + 32));
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_20D9BBBFC()
{
  return 16;
}

__n128 sub_20D9BBC08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_20D9BBC14()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for implicit closure #1 in _TreeNode.height.getter(uint64_t a1)
{
  return MEMORY[0x270FA0310](a1, *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF32 and conformance Unicode.UTF32()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF32 and conformance Unicode.UTF32;
  if (!lazy protocol witness table cache variable for type Unicode.UTF32 and conformance Unicode.UTF32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF32 and conformance Unicode.UTF32);
  }
  return result;
}

uint64_t partial apply for closure #1 in static TypeConstruction.tupleType<A>(of:labels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    uint64_t result = specialized String.withCString<A>(_:)(*(void *)(v1 + 16), v3);
  }
  else {
    uint64_t result = swift_getTupleTypeMetadata();
  }
  *a1 = result;
  a1[1] = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type AST and conformance AST()
{
  unint64_t result = lazy protocol witness table cache variable for type AST and conformance AST;
  if (!lazy protocol witness table cache variable for type AST and conformance AST)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST and conformance AST);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST and conformance AST;
  if (!lazy protocol witness table cache variable for type AST and conformance AST)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST and conformance AST);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST and conformance AST;
  if (!lazy protocol witness table cache variable for type AST and conformance AST)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST and conformance AST);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Node and conformance AST.Node()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Node and conformance AST.Node;
  if (!lazy protocol witness table cache variable for type AST.Node and conformance AST.Node)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Node and conformance AST.Node);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Node and conformance AST.Node;
  if (!lazy protocol witness table cache variable for type AST.Node and conformance AST.Node)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Node and conformance AST.Node);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Node and conformance AST.Node;
  if (!lazy protocol witness table cache variable for type AST.Node and conformance AST.Node)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Node and conformance AST.Node);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Alternation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation);
}

unint64_t instantiation function for generic protocol witness table for AST.Concatenation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Concatenation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation);
}

unint64_t instantiation function for generic protocol witness table for AST.Quote(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Quote(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote);
}

unint64_t instantiation function for generic protocol witness table for AST.Trivia(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Trivia(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia);
}

unint64_t instantiation function for generic protocol witness table for AST.Interpolation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Interpolation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation);
}

unint64_t instantiation function for generic protocol witness table for AST.Empty(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Empty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty);
}

unint64_t lazy protocol witness table accessor for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.AbsentFunction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction);
}

unint64_t lazy protocol witness table accessor for type AST.Reference.Kind and conformance AST.Reference.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Reference.Kind and conformance AST.Reference.Kind;
  if (!lazy protocol witness table cache variable for type AST.Reference.Kind and conformance AST.Reference.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference.Kind and conformance AST.Reference.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Reference and conformance AST.Reference()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference;
  if (!lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference;
  if (!lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference;
  if (!lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Group(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Quantification(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom.Kind()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom.Kind and conformance AST.Atom.Kind, (void (*)(uint64_t))type metadata accessor for AST.Atom.Kind);
}

uint64_t lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
  uint64_t result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, (void (*)(uint64_t))type metadata accessor for AST.Atom);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Number and conformance AST.Atom.Number()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number;
  if (!lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number;
  if (!lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number;
  if (!lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Scalar and conformance AST.Atom.Scalar()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Scalar and conformance AST.Atom.Scalar;
  if (!lazy protocol witness table cache variable for type AST.Atom.Scalar and conformance AST.Atom.Scalar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Scalar and conformance AST.Atom.Scalar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence;
  if (!lazy protocol witness table cache variable for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin;
  if (!lazy protocol witness table cache variable for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom.CharacterProperty()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty and conformance AST.Atom.CharacterProperty, (void (*)(uint64_t))type metadata accessor for AST.Atom.CharacterProperty);
}

unint64_t lazy protocol witness table accessor for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind;
  if (!lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom.CharacterProperty.Kind()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind and conformance AST.Atom.CharacterProperty.Kind, (void (*)(uint64_t))type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

unint64_t lazy protocol witness table accessor for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory;
  if (!lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial;
  if (!lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AST.Atom.CharacterProperty.JavaSpecial()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [AST.Atom.CharacterProperty.JavaSpecial] and conformance [A]);
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout and conformance AST.Atom.Callout()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Conditional(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional);
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.CustomCharacterClass.Member()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Member and conformance AST.CustomCharacterClass.Member, (void (*)(uint64_t))type metadata accessor for AST.CustomCharacterClass.Member);
}

uint64_t base witness table accessor for Equatable in AST.CustomCharacterClass.Range()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Range and conformance AST.CustomCharacterClass.Range, (void (*)(uint64_t))type metadata accessor for AST.CustomCharacterClass.Range);
}

unint64_t lazy protocol witness table accessor for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Group.Kind and conformance AST.Group.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind;
  if (!lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind;
  if (!lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind;
  if (!lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture;
  if (!lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture;
  if (!lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture;
  if (!lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.MatchingOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption);
}

uint64_t instantiation function for generic protocol witness table for AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOption(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quantification.Amount and conformance AST.Quantification.Amount()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Delimiter and conformance Delimiter()
{
  unint64_t result = lazy protocol witness table cache variable for type Delimiter and conformance Delimiter;
  if (!lazy protocol witness table cache variable for type Delimiter and conformance Delimiter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delimiter and conformance Delimiter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind;
  if (!lazy protocol witness table cache variable for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Diagnostic and conformance Diagnostic()
{
  unint64_t result = lazy protocol witness table cache variable for type Diagnostic and conformance Diagnostic;
  if (!lazy protocol witness table cache variable for type Diagnostic and conformance Diagnostic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Diagnostic and conformance Diagnostic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Diagnostic.Behavior and conformance Diagnostic.Behavior()
{
  unint64_t result = lazy protocol witness table cache variable for type Diagnostic.Behavior and conformance Diagnostic.Behavior;
  if (!lazy protocol witness table cache variable for type Diagnostic.Behavior and conformance Diagnostic.Behavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Diagnostic.Behavior and conformance Diagnostic.Behavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Diagnostics and conformance Diagnostics()
{
  unint64_t result = lazy protocol witness table cache variable for type Diagnostics and conformance Diagnostics;
  if (!lazy protocol witness table cache variable for type Diagnostics and conformance Diagnostics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Diagnostics and conformance Diagnostics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Source.Location and conformance Source.Location()
{
  unint64_t result = lazy protocol witness table cache variable for type Source.Location and conformance Source.Location;
  if (!lazy protocol witness table cache variable for type Source.Location and conformance Source.Location)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Source.Location and conformance Source.Location);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Source.LocatedError<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in <A> Source.Located<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type SyntaxOptions and conformance SyntaxOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST and conformance AST, (uint64_t (*)(void))lazy protocol witness table accessor for type AST and conformance AST);
}

uint64_t instantiation function for generic protocol witness table for AST.Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Node and conformance AST.Node, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Node and conformance AST.Node);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition.PCREVersionCheck.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition.PCREVersionNumber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition.PCREVersionCheck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Number(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Number and conformance AST.Atom.Number, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Number and conformance AST.Atom.Number);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout and conformance AST.Atom.Callout, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout and conformance AST.Atom.Callout);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
}

uint64_t instantiation function for generic protocol witness table for AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Reference and conformance AST.Reference, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Reference and conformance AST.Reference);
}

uint64_t instantiation function for generic protocol witness table for AST.Group.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.Kind and conformance AST.Group.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.Kind and conformance AST.Group.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.Group(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group and conformance AST.Group, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group and conformance AST.Group);
}

uint64_t instantiation function for generic protocol witness table for AST.Quantification.Amount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Amount and conformance AST.Quantification.Amount, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
}

uint64_t instantiation function for generic protocol witness table for AST.Quantification.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.Quantification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification);
}

unint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
}

uint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass.Member(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Member and conformance AST.CustomCharacterClass.Member, (void (*)(uint64_t))type metadata accessor for AST.CustomCharacterClass.Member);
  uint64_t result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Member and conformance AST.CustomCharacterClass.Member, (void (*)(uint64_t))type metadata accessor for AST.CustomCharacterClass.Member);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass.Range(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Range and conformance AST.CustomCharacterClass.Range, (void (*)(uint64_t))type metadata accessor for AST.CustomCharacterClass.Range);
  uint64_t result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Range and conformance AST.CustomCharacterClass.Range, (void (*)(uint64_t))type metadata accessor for AST.CustomCharacterClass.Range);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
}

uint64_t instantiation function for generic protocol witness table for AST.Group.BalancedCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
}

uint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOption.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
}

uint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
}

uint64_t instantiation function for generic protocol witness table for AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
}

uint64_t lazy protocol witness table accessor for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<Unicode.Scalar.AllScalars>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in Unicode.Scalar.AllScalars()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Slice<Unicode.Scalar.AllScalars> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Unicode.Scalar.AllScalars>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type IndexingIterator<Unicode.Scalar.AllScalars> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<Unicode.Scalar.AllScalars>);
}

uint64_t lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyType and conformance AnyType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyType and conformance AnyType;
  if (!lazy protocol witness table cache variable for type AnyType and conformance AnyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyType and conformance AnyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Script and conformance Unicode.Script()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script;
  if (!lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.Script()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.Script] and conformance [A]);
}

unint64_t lazy protocol witness table accessor for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty;
  if (!lazy protocol witness table cache variable for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.POSIXProperty()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.POSIXProperty] and conformance [A]);
}

unint64_t lazy protocol witness table accessor for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory;
  if (!lazy protocol witness table cache variable for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.ExtendedGeneralCategory()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.ExtendedGeneralCategory] and conformance [A]);
}

unint64_t lazy protocol witness table accessor for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty;
  if (!lazy protocol witness table cache variable for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.BinaryProperty()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.BinaryProperty] and conformance [A]);
}

unint64_t lazy protocol witness table accessor for type Unicode.Block and conformance Unicode.Block()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.Block and conformance Unicode.Block;
  if (!lazy protocol witness table cache variable for type Unicode.Block and conformance Unicode.Block)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Block and conformance Unicode.Block);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.Block()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.Block] and conformance [A]);
}

uint64_t destroy for AST()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for AST(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AST(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AST(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST()
{
  return &type metadata for AST;
}

void *initializeBufferWithCopyOfBuffer for AST.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for AST.Node()
{
  return swift_release();
}

void *assignWithCopy for AST.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *assignWithTake for AST.Node(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Node(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x75 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 117);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x74) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x74)
  {
    *(void *)__n128 result = a2 - 117;
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for AST.Node(void *a1)
{
  return *a1 >> 60;
}

void *destructiveProjectEnumData for AST.Node(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for AST.Node(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  return result;
}

ValueMetadata *type metadata accessor for AST.Node()
{
  return &type metadata for AST.Node;
}

uint64_t destroy for AST.Alternation()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Alternation()
{
  return &type metadata for AST.Alternation;
}

uint64_t initializeBufferWithCopyOfBuffer for AST.Concatenation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AST.Concatenation()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AST.Concatenation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for AST.Concatenation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Concatenation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Concatenation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Concatenation()
{
  return &type metadata for AST.Concatenation;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Quote()
{
  return &type metadata for AST.Quote;
}

ValueMetadata *type metadata accessor for AST.Trivia()
{
  return &type metadata for AST.Trivia;
}

ValueMetadata *type metadata accessor for AST.Interpolation()
{
  return &type metadata for AST.Interpolation;
}

uint64_t getEnumTagSinglePayload for AST.Empty(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AST.Empty(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Empty()
{
  return &type metadata for AST.Empty;
}

uint64_t destroy for AST.AbsentFunction(uint64_t *a1)
{
  return outlined consume of AST.AbsentFunction.Kind(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t initializeWithCopy for AST.AbsentFunction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  outlined copy of AST.AbsentFunction.Kind(v4, v5, v6, v7);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void *assignWithCopy for AST.AbsentFunction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  outlined copy of AST.AbsentFunction.Kind(v4, v5, v6, v7);
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  outlined consume of AST.AbsentFunction.Kind(v8, v9, v10, v11);
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AST.AbsentFunction(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  long long v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = a2[2];
  outlined consume of AST.AbsentFunction.Kind(v4, v5, v6, v7);
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.AbsentFunction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3D && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 61);
  }
  unsigned int v3 = (((4 * (*(unsigned char *)(a1 + 16) & 7)) | (32 * *(_DWORD *)(a1 + 40))) & 0x3C | (*(_DWORD *)(a1 + 40) >> 1) & 3) ^ 0x3F;
  if (v3 >= 0x3C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.AbsentFunction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3C)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 61;
    if (a3 >= 0x3D) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3D) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = (-a2 >> 2) & 7;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = ((unint64_t)((-a2 >> 2) & 0xF | (16 * (-a2 & 0x3F))) >> 3) & 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.AbsentFunction()
{
  return &type metadata for AST.AbsentFunction;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.AbsentFunction.Start()
{
  return &type metadata for AST.AbsentFunction.Start;
}

uint64_t destroy for AST.AbsentFunction.Kind(uint64_t *a1)
{
  return outlined consume of AST.AbsentFunction.Kind(*a1, a1[1], a1[2], a1[3]);
}

uint64_t *initializeWithCopy for AST.AbsentFunction.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of AST.AbsentFunction.Kind(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AST.AbsentFunction.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of AST.AbsentFunction.Kind(*a2, v4, v5, v6);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of AST.AbsentFunction.Kind(v7, v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for AST.AbsentFunction.Kind(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  outlined consume of AST.AbsentFunction.Kind(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.AbsentFunction.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3D && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 61);
  }
  unsigned int v3 = (((4 * (*(unsigned char *)a1 & 7)) | (32 * *(_DWORD *)(a1 + 24))) & 0x3C | (*(_DWORD *)(a1 + 24) >> 1) & 3) ^ 0x3F;
  if (v3 >= 0x3C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.AbsentFunction.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3C)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 61;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3D) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3D) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = (-a2 >> 2) & 7;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = ((unint64_t)((-a2 >> 2) & 0xF | (16 * (-a2 & 0x3F))) >> 3) & 7;
    }
  }
  return result;
}

uint64_t getEnumTag for AST.AbsentFunction.Kind(uint64_t a1)
{
  unsigned int v1 = (*(_DWORD *)(a1 + 24) >> 1) & 3;
  if (v1 == 3) {
    return (*(void *)a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for AST.AbsentFunction.Kind(uint64_t result)
{
  *(void *)(result + 24) &= 0xFFFFFFFFFFFFFFF9;
  return result;
}

void *destructiveInjectEnumTag for AST.AbsentFunction.Kind(void *result, unsigned int a2)
{
  if (a2 < 3)
  {
    unint64_t v2 = result[3] & 0xFFFFFFFFFFFFFFF8 | (2 * (a2 & 3));
    *result &= 0xFFFFFFFFFFFFFFF8;
    result[3] = v2;
  }
  else
  {
    *__n128 result = 8 * (a2 - 3);
    result[1] = 0;
    result[2] = 0;
    result[3] = 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.AbsentFunction.Kind()
{
  return &type metadata for AST.AbsentFunction.Kind;
}

uint64_t destroy for AST.Reference(uint64_t a1, uint64_t a2)
{
  return destroy for AST.Reference(a1, a2, (uint64_t (*)(void, void, void, void, void))outlined consume of AST.Reference.Kind);
}

uint64_t initializeWithCopy for AST.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of AST.Reference.Kind(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for AST.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of AST.Reference.Kind(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  char v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of AST.Reference.Kind(v9, v10, v11, v12, v13);
  long long v14 = *(_OWORD *)(a2 + 40);
  long long v15 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for AST.Reference(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of AST.Reference.Kind(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Reference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Reference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Reference()
{
  return &type metadata for AST.Reference;
}

uint64_t initializeWithCopy for AST.Reference.Kind(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for AST.Reference.Kind(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AST.Reference.Kind);
}

uint64_t *assignWithCopy for AST.Reference.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for AST.Reference.Kind(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AST.Reference.Kind, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AST.Reference.Kind);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for AST.Reference.Kind(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for AST.Reference.Kind(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AST.Reference.Kind);
}

uint64_t getEnumTagSinglePayload for AST.Reference.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Reference.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AST.Reference.Kind(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for AST.Reference.Kind(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Reference.Kind()
{
  return &type metadata for AST.Reference.Kind;
}

ValueMetadata *type metadata accessor for AST.GlobalMatchingOptionSequence()
{
  return &type metadata for AST.GlobalMatchingOptionSequence;
}

uint64_t dispatch thunk of _ASTNode.location.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 2u:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 3u:
        uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            uint64_t v11 = a2[1];
            *a1 = *a2;
            a1[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_18;
          case 5u:
            uint64_t v25 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
            goto LABEL_18;
          case 7u:
            *(unsigned char *)a1 = *(unsigned char *)a2;
            uint64_t v26 = a2[2];
            a1[1] = a2[1];
            a1[2] = v26;
            swift_bridgeObjectRetain();
            goto LABEL_18;
          case 8u:
            uint64_t v27 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
            goto LABEL_18;
          case 0xEu:
            uint64_t v28 = a2[1];
            *a1 = *a2;
            a1[1] = v28;
            uint64_t v29 = a2[3];
            a1[2] = a2[2];
            a1[3] = v29;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_18:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
            break;
        }
        uint64_t v30 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((unsigned char *)a1 + *(int *)(v30 + 20)) = *((unsigned char *)a2 + *(int *)(v30 + 20));
        *((unsigned char *)a1 + *(int *)(v30 + 24)) = *((unsigned char *)a2 + *(int *)(v30 + 24));
        goto LABEL_20;
      case 9u:
      case 0xAu:
        uint64_t v14 = *a2;
        uint64_t v15 = a2[1];
        uint64_t v16 = a2[2];
        uint64_t v17 = a2[3];
        char v18 = *((unsigned char *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v15, v16, v17, v18);
        *a1 = v14;
        a1[1] = v15;
        a1[2] = v16;
        a1[3] = v17;
        *((unsigned char *)a1 + 32) = v18;
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_20;
      case 0xBu:
        uint64_t v19 = a2[1];
        uint64_t v20 = a2[2];
        uint64_t v21 = a2[3];
        uint64_t v22 = a2[4];
        uint64_t v32 = a2[7];
        uint64_t v33 = a2[5];
        uint64_t v34 = a2[8];
        uint64_t v35 = a2[9];
        uint64_t v36 = a2[10];
        uint64_t v37 = a2[11];
        uint64_t v38 = a2[12];
        uint64_t v39 = a2[13];
        uint64_t v40 = a2[14];
        uint64_t v41 = a2[15];
        uint64_t v42 = a2[16];
        uint64_t v43 = a2[17];
        uint64_t v44 = a2[18];
        char v45 = *((unsigned char *)a2 + 152);
        uint64_t v23 = *a2;
        uint64_t v24 = a2[6];
        outlined copy of AST.Atom.Callout(*a2, v19, v20, v21, v22, v33, v24, v32, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
          v45);
        *a1 = v23;
        a1[1] = v19;
        a1[2] = v20;
        a1[3] = v21;
        a1[4] = v22;
        a1[5] = v33;
        a1[6] = v24;
        a1[7] = v32;
        a1[8] = v34;
        a1[9] = v35;
        a1[10] = v36;
        a1[11] = v37;
        a1[12] = v38;
        a1[13] = v39;
        a1[14] = v40;
        a1[15] = v41;
        a1[16] = v42;
        a1[17] = v43;
        a1[18] = v44;
        *((unsigned char *)a1 + 152) = v45;
        goto LABEL_20;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v12 = a2[3];
        a1[2] = a2[2];
        a1[3] = v12;
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        a1[3] = a2[3];
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_20:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t outlined copy of AST.Atom.Callout(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  switch(a20)
  {
    case 2:
      swift_bridgeObjectRetain();
      break;
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 0:
      char v20 = a5 & 1;
      return outlined copy of AST.Atom.Callout.PCRE.Argument(result, a2, a3, a4, v20);
    default:
      return result;
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for AST.Atom(uint64_t a1)
{
  type metadata accessor for AST.Atom.Kind(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 5:
    case 6:
    case 7:
    case 8:
    case 12:
      goto LABEL_2;
    case 2:
    case 13:
LABEL_8:
      swift_bridgeObjectRelease();
LABEL_2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 4:
        case 7:
          goto LABEL_2;
        case 5:
          uint64_t v8 = type metadata accessor for Unicode.NumericType();
          goto LABEL_13;
        case 8:
          uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_13:
          uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
          uint64_t result = v9(a1, v8);
          break;
        case 14:
          goto LABEL_8;
        default:
          return result;
      }
      break;
    case 9:
    case 10:
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      char v7 = *(unsigned char *)(a1 + 32);
      uint64_t result = outlined consume of AST.Reference.Kind(v3, v4, v5, v6, v7);
      break;
    case 11:
      uint64_t result = outlined consume of AST.Atom.Callout(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
                 *(unsigned char *)(a1 + 152));
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for AST.Atom(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AST.Atom.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 2u:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 3u:
      uint64_t v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          uint64_t v9 = a2[1];
          *a1 = *a2;
          a1[1] = v9;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 5u:
          uint64_t v24 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
          goto LABEL_16;
        case 7u:
          *(unsigned char *)a1 = *(unsigned char *)a2;
          uint64_t v25 = a2[2];
          a1[1] = a2[1];
          a1[2] = v25;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 8u:
          uint64_t v26 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
          goto LABEL_16;
        case 0xEu:
          uint64_t v27 = a2[1];
          *a1 = *a2;
          a1[1] = v27;
          uint64_t v28 = a2[3];
          a1[2] = a2[2];
          a1[3] = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
          break;
      }
      uint64_t v29 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((unsigned char *)a1 + *(int *)(v29 + 20)) = *((unsigned char *)a2 + *(int *)(v29 + 20));
      *((unsigned char *)a1 + *(int *)(v29 + 24)) = *((unsigned char *)a2 + *(int *)(v29 + 24));
      goto LABEL_18;
    case 9u:
    case 0xAu:
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      uint64_t v14 = a2[2];
      uint64_t v15 = a2[3];
      char v16 = *((unsigned char *)a2 + 32);
      outlined copy of AST.Reference.Kind(*a2, v13, v14, v15, v16);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v14;
      a1[3] = v15;
      *((unsigned char *)a1 + 32) = v16;
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      goto LABEL_18;
    case 0xBu:
      uint64_t v17 = a2[1];
      uint64_t v18 = a2[2];
      uint64_t v19 = a2[3];
      uint64_t v20 = a2[4];
      uint64_t v31 = a2[7];
      uint64_t v32 = a2[8];
      uint64_t v33 = a2[9];
      uint64_t v34 = a2[10];
      uint64_t v35 = a2[11];
      uint64_t v36 = a2[12];
      uint64_t v37 = a2[13];
      uint64_t v38 = a2[14];
      uint64_t v39 = a2[15];
      uint64_t v40 = a2[16];
      uint64_t v41 = a2[17];
      uint64_t v42 = a2[18];
      char v43 = *((unsigned char *)a2 + 152);
      uint64_t v21 = *a2;
      uint64_t v44 = a3;
      uint64_t v22 = a2[5];
      uint64_t v23 = a2[6];
      outlined copy of AST.Atom.Callout(*a2, v17, v18, v19, v20, v22, v23, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
        v43);
      *a1 = v21;
      a1[1] = v17;
      a1[2] = v18;
      a1[3] = v19;
      a1[4] = v20;
      a1[5] = v22;
      a3 = v44;
      a1[6] = v23;
      a1[7] = v31;
      a1[8] = v32;
      a1[9] = v33;
      a1[10] = v34;
      a1[11] = v35;
      a1[12] = v36;
      a1[13] = v37;
      a1[14] = v38;
      a1[15] = v39;
      a1[16] = v40;
      a1[17] = v41;
      a1[18] = v42;
      *((unsigned char *)a1 + 152) = v43;
      goto LABEL_18;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      a1[4] = a2[4];
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for AST.Atom(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    uint64_t v6 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 3u:
        uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 5u:
            uint64_t v24 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
            goto LABEL_17;
          case 7u:
            *(unsigned char *)a1 = *(unsigned char *)a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 8u:
            uint64_t v25 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
            goto LABEL_17;
          case 0xEu:
            *a1 = *a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            a1[3] = a2[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_17:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
            break;
        }
        uint64_t v26 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((unsigned char *)a1 + *(int *)(v26 + 20)) = *((unsigned char *)a2 + *(int *)(v26 + 20));
        *((unsigned char *)a1 + *(int *)(v26 + 24)) = *((unsigned char *)a2 + *(int *)(v26 + 24));
        goto LABEL_19;
      case 9u:
      case 0xAu:
        uint64_t v11 = *a2;
        uint64_t v12 = a2[1];
        uint64_t v13 = a2[2];
        uint64_t v14 = a2[3];
        char v15 = *((unsigned char *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v12, v13, v14, v15);
        *a1 = v11;
        a1[1] = v12;
        a1[2] = v13;
        a1[3] = v14;
        *((unsigned char *)a1 + 32) = v15;
        long long v16 = *(_OWORD *)(a2 + 5);
        long long v17 = *(_OWORD *)(a2 + 7);
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        *(_OWORD *)(a1 + 7) = v17;
        *(_OWORD *)(a1 + 5) = v16;
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_19;
      case 0xBu:
        uint64_t v18 = a2[1];
        uint64_t v19 = a2[2];
        uint64_t v20 = a2[3];
        uint64_t v21 = a2[4];
        uint64_t v31 = a2[7];
        uint64_t v32 = a2[5];
        uint64_t v33 = a2[8];
        uint64_t v34 = a2[9];
        uint64_t v35 = a2[10];
        uint64_t v36 = a2[11];
        uint64_t v37 = a2[12];
        uint64_t v38 = a2[13];
        uint64_t v39 = a2[14];
        uint64_t v40 = a2[15];
        uint64_t v41 = a2[16];
        uint64_t v42 = a2[17];
        uint64_t v43 = a2[18];
        char v44 = *((unsigned char *)a2 + 152);
        uint64_t v22 = *a2;
        uint64_t v23 = a2[6];
        outlined copy of AST.Atom.Callout(*a2, v18, v19, v20, v21, v32, v23, v31, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
          v44);
        *a1 = v22;
        a1[1] = v18;
        a1[2] = v19;
        a1[3] = v20;
        a1[4] = v21;
        a1[5] = v32;
        a1[6] = v23;
        a1[7] = v31;
        a1[8] = v33;
        a1[9] = v34;
        a1[10] = v35;
        a1[11] = v36;
        a1[12] = v37;
        a1[13] = v38;
        a1[14] = v39;
        a1[15] = v40;
        a1[16] = v41;
        a1[17] = v42;
        a1[18] = v43;
        *((unsigned char *)a1 + 152) = v44;
        goto LABEL_19;
      case 0xCu:
        long long v8 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v8;
        a1[3] = a2[3];
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 0xDu:
        long long v9 = *(_OWORD *)a2;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        *(_OWORD *)a1 = v9;
        a1[3] = a2[3];
        long long v10 = *((_OWORD *)a2 + 2);
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        *((_OWORD *)a1 + 2) = v10;
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v27 = *(int *)(a3 + 20);
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  return a1;
}

char *initializeWithTake for AST.Atom(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AST.Atom.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      uint64_t v9 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
    a1[*(int *)(v11 + 20)] = a2[*(int *)(v11 + 20)];
    a1[*(int *)(v11 + 24)] = a2[*(int *)(v11 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for AST.Atom(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    uint64_t v6 = type metadata accessor for AST.Atom.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 8)
      {
        uint64_t v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 5)
      {
        uint64_t v9 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      uint64_t v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
      a1[*(int *)(v11 + 20)] = a2[*(int *)(v11 + 20)];
      a1[*(int *)(v11 + 24)] = a2[*(int *)(v11 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20D9C2A84);
}

uint64_t sub_20D9C2A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20D9C2B04);
}

uint64_t sub_20D9C2B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AST.Atom.Kind(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AST.Atom()
{
  uint64_t result = type metadata accessor for AST.Atom.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v13 = *a2;
        uint64_t v14 = a2[1];
        *a1 = v13;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            uint64_t v11 = a2[1];
            *a1 = *a2;
            a1[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_19;
          case 5u:
            uint64_t v29 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
            goto LABEL_19;
          case 7u:
            *(unsigned char *)a1 = *(unsigned char *)a2;
            uint64_t v30 = a2[2];
            a1[1] = a2[1];
            a1[2] = v30;
            swift_bridgeObjectRetain();
            goto LABEL_19;
          case 8u:
            uint64_t v31 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
            goto LABEL_19;
          case 0xEu:
            uint64_t v32 = a2[1];
            *a1 = *a2;
            a1[1] = v32;
            uint64_t v33 = a2[3];
            a1[2] = a2[2];
            a1[3] = v33;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_19:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
            break;
        }
        uint64_t v34 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((unsigned char *)a1 + *(int *)(v34 + 20)) = *((unsigned char *)a2 + *(int *)(v34 + 20));
        *((unsigned char *)a1 + *(int *)(v34 + 24)) = *((unsigned char *)a2 + *(int *)(v34 + 24));
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
      case 0xAu:
        uint64_t v15 = *a2;
        uint64_t v16 = a2[1];
        uint64_t v17 = a2[2];
        uint64_t v18 = a2[3];
        char v19 = *((unsigned char *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v16, v17, v18, v19);
        *a1 = v15;
        a1[1] = v16;
        a1[2] = v17;
        a1[3] = v18;
        *((unsigned char *)a1 + 32) = v19;
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
        uint64_t v20 = *a2;
        uint64_t v21 = a2[1];
        uint64_t v22 = a2[2];
        uint64_t v23 = a2[3];
        uint64_t v24 = a2[4];
        uint64_t v25 = a2[5];
        uint64_t v35 = a2[8];
        uint64_t v36 = a2[9];
        uint64_t v37 = a2[10];
        uint64_t v38 = a2[11];
        uint64_t v39 = a2[12];
        uint64_t v40 = a2[13];
        uint64_t v41 = a2[14];
        uint64_t v42 = a2[15];
        uint64_t v43 = a2[16];
        uint64_t v44 = a2[17];
        uint64_t v45 = a2[18];
        char v46 = *((unsigned char *)a2 + 152);
        uint64_t v26 = *a2;
        uint64_t v27 = a2[6];
        uint64_t v28 = a2[7];
        outlined copy of AST.Atom.Callout(v26, v21, v22, v23, v24, v25, v27, v28, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
          v46);
        *a1 = v20;
        a1[1] = v21;
        a1[2] = v22;
        a1[3] = v23;
        a1[4] = v24;
        a1[5] = v25;
        a1[6] = v27;
        a1[7] = v28;
        a1[8] = v35;
        a1[9] = v36;
        a1[10] = v37;
        a1[11] = v38;
        a1[12] = v39;
        a1[13] = v40;
        a1[14] = v41;
        a1[15] = v42;
        a1[16] = v43;
        a1[17] = v44;
        a1[18] = v45;
        *((unsigned char *)a1 + 152) = v46;
        swift_storeEnumTagMultiPayload();
        break;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v12 = a2[3];
        a1[2] = a2[2];
        a1[3] = v12;
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        a1[3] = a2[3];
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for AST.Atom.Kind(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 5:
    case 6:
    case 7:
    case 8:
    case 12:
      goto LABEL_2;
    case 2:
    case 13:
LABEL_8:
      swift_bridgeObjectRelease();
LABEL_2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 4:
        case 7:
          goto LABEL_2;
        case 5:
          uint64_t v8 = type metadata accessor for Unicode.NumericType();
          goto LABEL_13;
        case 8:
          uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_13:
          uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
          uint64_t result = v9(a1, v8);
          break;
        case 14:
          goto LABEL_8;
        default:
          return result;
      }
      break;
    case 9:
    case 10:
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      char v7 = *(unsigned char *)(a1 + 32);
      uint64_t result = outlined consume of AST.Reference.Kind(v3, v4, v5, v6, v7);
      break;
    case 11:
      uint64_t result = outlined consume of AST.Atom.Callout(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
                 *(unsigned char *)(a1 + 152));
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for AST.Atom.Kind(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 2u:
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      *a1 = v10;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 3u:
      uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          uint64_t v8 = a2[1];
          *a1 = *a2;
          a1[1] = v8;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 5u:
          uint64_t v26 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
          goto LABEL_16;
        case 7u:
          *(unsigned char *)a1 = *(unsigned char *)a2;
          uint64_t v27 = a2[2];
          a1[1] = a2[1];
          a1[2] = v27;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 8u:
          uint64_t v28 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
          goto LABEL_16;
        case 0xEu:
          uint64_t v29 = a2[1];
          *a1 = *a2;
          a1[1] = v29;
          uint64_t v30 = a2[3];
          a1[2] = a2[2];
          a1[3] = v30;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
          break;
      }
      uint64_t v31 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((unsigned char *)a1 + *(int *)(v31 + 20)) = *((unsigned char *)a2 + *(int *)(v31 + 20));
      *((unsigned char *)a1 + *(int *)(v31 + 24)) = *((unsigned char *)a2 + *(int *)(v31 + 24));
      goto LABEL_18;
    case 9u:
    case 0xAu:
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      uint64_t v14 = a2[2];
      uint64_t v15 = a2[3];
      char v16 = *((unsigned char *)a2 + 32);
      outlined copy of AST.Reference.Kind(*a2, v13, v14, v15, v16);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v14;
      a1[3] = v15;
      *((unsigned char *)a1 + 32) = v16;
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      goto LABEL_18;
    case 0xBu:
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      uint64_t v19 = a2[2];
      uint64_t v20 = a2[3];
      uint64_t v21 = a2[4];
      uint64_t v22 = a2[5];
      uint64_t v33 = a2[8];
      uint64_t v34 = a2[9];
      uint64_t v35 = a2[10];
      uint64_t v36 = a2[11];
      uint64_t v37 = a2[12];
      uint64_t v38 = a2[13];
      uint64_t v39 = a2[14];
      uint64_t v40 = a2[15];
      uint64_t v41 = a2[16];
      uint64_t v42 = a2[17];
      uint64_t v43 = a2[18];
      char v44 = *((unsigned char *)a2 + 152);
      uint64_t v23 = *a2;
      uint64_t v24 = a2[6];
      uint64_t v25 = a2[7];
      outlined copy of AST.Atom.Callout(v23, v18, v19, v20, v21, v22, v24, v25, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
        v44);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v24;
      a1[7] = v25;
      a1[8] = v33;
      a1[9] = v34;
      a1[10] = v35;
      a1[11] = v36;
      a1[12] = v37;
      a1[13] = v38;
      a1[14] = v39;
      a1[15] = v40;
      a1[16] = v41;
      a1[17] = v42;
      a1[18] = v43;
      *((unsigned char *)a1 + 152) = v44;
      goto LABEL_18;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      a1[4] = a2[4];
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for AST.Atom.Kind(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 3u:
        uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 5u:
            uint64_t v26 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
            goto LABEL_17;
          case 7u:
            *(unsigned char *)a1 = *(unsigned char *)a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 8u:
            uint64_t v27 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
            goto LABEL_17;
          case 0xEu:
            *a1 = *a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            a1[3] = a2[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_17:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
            break;
        }
        uint64_t v28 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((unsigned char *)a1 + *(int *)(v28 + 20)) = *((unsigned char *)a2 + *(int *)(v28 + 20));
        *((unsigned char *)a1 + *(int *)(v28 + 24)) = *((unsigned char *)a2 + *(int *)(v28 + 24));
        goto LABEL_19;
      case 9u:
      case 0xAu:
        uint64_t v10 = *a2;
        uint64_t v11 = a2[1];
        uint64_t v12 = a2[2];
        uint64_t v13 = a2[3];
        char v14 = *((unsigned char *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v11, v12, v13, v14);
        *a1 = v10;
        a1[1] = v11;
        a1[2] = v12;
        a1[3] = v13;
        *((unsigned char *)a1 + 32) = v14;
        long long v15 = *(_OWORD *)(a2 + 5);
        long long v16 = *(_OWORD *)(a2 + 7);
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        *(_OWORD *)(a1 + 7) = v16;
        *(_OWORD *)(a1 + 5) = v15;
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_19;
      case 0xBu:
        uint64_t v17 = *a2;
        uint64_t v18 = a2[1];
        uint64_t v19 = a2[2];
        uint64_t v20 = a2[3];
        uint64_t v21 = a2[4];
        uint64_t v22 = a2[5];
        uint64_t v30 = a2[8];
        uint64_t v31 = a2[9];
        uint64_t v32 = a2[10];
        uint64_t v33 = a2[11];
        uint64_t v34 = a2[12];
        uint64_t v35 = a2[13];
        uint64_t v36 = a2[14];
        uint64_t v37 = a2[15];
        uint64_t v38 = a2[16];
        uint64_t v39 = a2[17];
        uint64_t v40 = a2[18];
        char v41 = *((unsigned char *)a2 + 152);
        uint64_t v23 = *a2;
        uint64_t v24 = a2[6];
        uint64_t v25 = a2[7];
        outlined copy of AST.Atom.Callout(v23, v18, v19, v20, v21, v22, v24, v25, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
          v41);
        *a1 = v17;
        a1[1] = v18;
        a1[2] = v19;
        a1[3] = v20;
        a1[4] = v21;
        a1[5] = v22;
        a1[6] = v24;
        a1[7] = v25;
        a1[8] = v30;
        a1[9] = v31;
        a1[10] = v32;
        a1[11] = v33;
        a1[12] = v34;
        a1[13] = v35;
        a1[14] = v36;
        a1[15] = v37;
        a1[16] = v38;
        a1[17] = v39;
        a1[18] = v40;
        *((unsigned char *)a1 + 152) = v41;
        goto LABEL_19;
      case 0xCu:
        long long v7 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v7;
        a1[3] = a2[3];
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 0xDu:
        long long v8 = *(_OWORD *)a2;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        *(_OWORD *)a1 = v8;
        a1[3] = a2[3];
        long long v9 = *((_OWORD *)a2 + 2);
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        *((_OWORD *)a1 + 2) = v9;
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for AST.Atom.Kind(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      uint64_t v8 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty(0);
    *((unsigned char *)a1 + *(int *)(v10 + 20)) = *((unsigned char *)a2 + *(int *)(v10 + 20));
    *((unsigned char *)a1 + *(int *)(v10 + 24)) = *((unsigned char *)a2 + *(int *)(v10 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AST.Atom.Kind(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 8)
      {
        uint64_t v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 5)
      {
        uint64_t v8 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      uint64_t v10 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((unsigned char *)a1 + *(int *)(v10 + 20)) = *((unsigned char *)a2 + *(int *)(v10 + 20));
      *((unsigned char *)a1 + *(int *)(v10 + 24)) = *((unsigned char *)a2 + *(int *)(v10 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for AST.Atom.Kind()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AST.Atom.Kind()
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Number(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Number(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Number()
{
  return &type metadata for AST.Atom.Number;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Scalar(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Scalar(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Scalar()
{
  return &type metadata for AST.Atom.Scalar;
}

void *initializeBufferWithCopyOfBuffer for AST.Alternation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AST.Alternation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AST.Alternation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Alternation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Alternation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.ScalarSequence()
{
  return &type metadata for AST.Atom.ScalarSequence;
}

uint64_t getEnumTagSinglePayload for AST.Atom.EscapedBuiltin(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE2) {
    goto LABEL_17;
  }
  if (a2 + 30 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 30) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 30;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 30;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 30;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1F;
  int v8 = v6 - 31;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AST.Atom.EscapedBuiltin(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 30 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 30) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE1)
  {
    unsigned int v6 = ((a2 - 226) >> 8) + 1;
    *uint64_t result = a2 + 30;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20D9C47B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 30;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.EscapedBuiltin()
{
  return &type metadata for AST.Atom.EscapedBuiltin;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom.CharacterProperty(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 5u:
        uint64_t v10 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_10;
      case 7u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v11 = a2[2];
        a1[1] = a2[1];
        a1[2] = v11;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 8u:
        uint64_t v12 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        goto LABEL_10;
      case 0xEu:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    uint64_t v15 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  }
  return a1;
}

uint64_t destroy for AST.Atom.CharacterProperty(uint64_t a1)
{
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 4:
    case 7:
      goto LABEL_8;
    case 5:
      uint64_t v3 = type metadata accessor for Unicode.NumericType();
      goto LABEL_4;
    case 8:
      uint64_t v3 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_4:
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 14:
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for AST.Atom.CharacterProperty(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
      uint64_t v8 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_8;
    case 7u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v9 = a2[2];
      a1[1] = a2[1];
      a1[2] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 8u:
      uint64_t v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_8;
    case 0xEu:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v13 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  return a1;
}

void *assignWithCopy for AST.Atom.CharacterProperty(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
        uint64_t v7 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 7u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_9;
      case 0xEu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *initializeWithTake for AST.Atom.CharacterProperty(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 5)
  {
    uint64_t v8 = type metadata accessor for Unicode.NumericType();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v10 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  return a1;
}

void *assignWithTake for AST.Atom.CharacterProperty(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      uint64_t v8 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v10 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.CharacterProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20D9C51F4);
}

uint64_t sub_20D9C51F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AST.Atom.CharacterProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20D9C52D8);
}

uint64_t sub_20D9C52D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for AST.Atom.CharacterProperty()
{
  uint64_t result = type metadata accessor for AST.Atom.CharacterProperty.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom.CharacterProperty.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v10 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v11 = a2[2];
        a1[1] = a2[1];
        a1[2] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v12 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = a2[2];
        uint64_t v15 = a2[3];
        a1[2] = v14;
        a1[3] = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for AST.Atom.CharacterProperty.Kind(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 4:
    case 7:
      goto LABEL_8;
    case 5:
      uint64_t v3 = type metadata accessor for Unicode.NumericType();
      goto LABEL_4;
    case 8:
      uint64_t v3 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_4:
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 14:
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for AST.Atom.CharacterProperty.Kind(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
      uint64_t v7 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_8;
    case 7u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 8u:
      uint64_t v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_8;
    case 0xEu:
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[2];
      uint64_t v12 = a2[3];
      a1[2] = v11;
      a1[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for AST.Atom.CharacterProperty.Kind(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
        uint64_t v6 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 7u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        uint64_t v7 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 0xEu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for AST.Atom.CharacterProperty.Kind(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 5)
  {
    uint64_t v7 = type metadata accessor for Unicode.NumericType();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AST.Atom.CharacterProperty.Kind(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      uint64_t v7 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AST.Atom.CharacterProperty.Kind()
{
  uint64_t result = type metadata accessor for Unicode.NumericType();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Unicode.CanonicalCombiningClass();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.CharacterProperty.Kind.MapKind()
{
  return &type metadata for AST.Atom.CharacterProperty.Kind.MapKind;
}

ValueMetadata *type metadata accessor for AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return &type metadata for AST.Atom.CharacterProperty.PCRESpecialCategory;
}

uint64_t getEnumTagSinglePayload for AST.Atom.CharacterProperty.JavaSpecial(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AST.Atom.CharacterProperty.JavaSpecial(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20D9C6028);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.CharacterProperty.JavaSpecial()
{
  return &type metadata for AST.Atom.CharacterProperty.JavaSpecial;
}

uint64_t destroy for AST.Atom.Callout(uint64_t a1)
{
  return outlined consume of AST.Atom.Callout(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(unsigned char *)(a1 + 152));
}

uint64_t initializeWithCopy for AST.Atom.Callout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  char v23 = *(unsigned char *)(a2 + 152);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)a2;
  outlined copy of AST.Atom.Callout(*(void *)a2, v3, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(unsigned char *)(a1 + 152) = v23;
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v28 = *(void *)(a2 + 72);
  uint64_t v29 = *(void *)(a2 + 80);
  uint64_t v30 = *(void *)(a2 + 88);
  uint64_t v31 = *(void *)(a2 + 96);
  uint64_t v32 = *(void *)(a2 + 104);
  uint64_t v33 = *(void *)(a2 + 112);
  uint64_t v34 = *(void *)(a2 + 120);
  uint64_t v35 = *(void *)(a2 + 128);
  uint64_t v36 = *(void *)(a2 + 136);
  uint64_t v37 = *(void *)(a2 + 144);
  char v38 = *(unsigned char *)(a2 + 152);
  outlined copy of AST.Atom.Callout(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  long long v24 = *(_OWORD *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 144);
  char v26 = *(unsigned char *)(a1 + 152);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v28;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v30;
  *(void *)(a1 + 96) = v31;
  *(void *)(a1 + 104) = v32;
  *(void *)(a1 + 112) = v33;
  *(void *)(a1 + 120) = v34;
  *(void *)(a1 + 128) = v35;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(unsigned char *)(a1 + 152) = v38;
  outlined consume of AST.Atom.Callout(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    v26);
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 144);
  char v4 = *(unsigned char *)(a2 + 152);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 144);
  char v19 = *(unsigned char *)(a1 + 152);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v21;
  long long v22 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v22;
  long long v23 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v23;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = v3;
  *(unsigned char *)(a1 + 152) = v4;
  outlined consume of AST.Atom.Callout(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 153)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 153) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 152) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Atom.Callout(uint64_t result, char a2)
{
  *(unsigned char *)(result + 152) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout()
{
  return &type metadata for AST.Atom.Callout;
}

uint64_t initializeWithCopy for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v5, v6, v7, v8, v9);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.PCRE(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.PCRE(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.PCRE()
{
  return &type metadata for AST.Atom.Callout.PCRE;
}

uint64_t destroy for AST.Atom.Callout.PCRE(uint64_t a1)
{
  return outlined consume of AST.Atom.Callout.PCRE.Argument(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.PCRE.Argument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.PCRE.Argument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Atom.Callout.PCRE.Argument(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.PCRE.Argument()
{
  return &type metadata for AST.Atom.Callout.PCRE.Argument;
}

uint64_t destroy for AST.Atom.Callout.OnigurumaNamed()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AST.Atom.Callout.OnigurumaNamed(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaNamed()
{
  return &type metadata for AST.Atom.Callout.OnigurumaNamed;
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AST.Atom.Callout.OnigurumaNamed.ArgList(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  return &type metadata for AST.Atom.Callout.OnigurumaNamed.ArgList;
}

uint64_t destroy for AST.Atom.Callout.OnigurumaOfContents()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaOfContents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaOfContents()
{
  return &type metadata for AST.Atom.Callout.OnigurumaOfContents;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaOfContents.Direction()
{
  return &type metadata for AST.Atom.Callout.OnigurumaOfContents.Direction;
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaTag(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AST.Atom.Callout.OnigurumaTag(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaTag(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaTag()
{
  return &type metadata for AST.Atom.Callout.OnigurumaTag;
}

uint64_t destroy for AST.Atom.BacktrackingDirective()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.BacktrackingDirective(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.BacktrackingDirective(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.BacktrackingDirective()
{
  return &type metadata for AST.Atom.BacktrackingDirective;
}

uint64_t getEnumTagSinglePayload for AST.Atom.BacktrackingDirective.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AST.Atom.BacktrackingDirective.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20D9C7524);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.BacktrackingDirective.Kind()
{
  return &type metadata for AST.Atom.BacktrackingDirective.Kind;
}

uint64_t destroy for AST.Conditional(uint64_t a1)
{
  outlined consume of AST.Conditional.Condition.Kind(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_OWORD *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120));
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AST.Conditional(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a2 + 128);
  uint64_t v20 = *(void *)(a2 + 136);
  outlined copy of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  *(void *)(a1 + 104) = v16;
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v18;
  *(void *)(a1 + 128) = v19;
  *(void *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AST.Conditional(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  uint64_t v26 = *(void *)(a2 + 88);
  uint64_t v27 = *(void *)(a2 + 96);
  uint64_t v28 = *(void *)(a2 + 104);
  uint64_t v29 = *(void *)(a2 + 112);
  uint64_t v30 = *(void *)(a2 + 120);
  uint64_t v31 = *(void *)(a2 + 128);
  uint64_t v32 = *(void *)(a2 + 136);
  outlined copy of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  long long v20 = *(_OWORD *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 96);
  long long v22 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  *(void *)(a1 + 128) = v31;
  *(void *)(a1 + 136) = v32;
  outlined consume of AST.Conditional.Condition.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  long long v23 = *(_OWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v23;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AST.Conditional(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  long long v18 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  outlined consume of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, SBYTE8(v14));
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Conditional(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x75 && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 117);
  }
  unsigned int v3 = ((*(void *)(a1 + 160) >> 60) & 0x8F | (16 * (*(void *)(a1 + 160) & 7))) ^ 0x7F;
  if (v3 >= 0x74) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x74)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 117;
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if (a3 >= 0x75) {
      *(unsigned char *)(result + 200) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)(result + 160) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional()
{
  return &type metadata for AST.Conditional;
}

uint64_t initializeWithCopy for AST.Conditional.Condition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  uint64_t v20 = *(void *)(a2 + 120);
  outlined copy of AST.Conditional.Condition.Kind(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  *(void *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = v20;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for AST.Conditional.Condition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v24 = a2[8];
  uint64_t v25 = a2[9];
  uint64_t v26 = a2[10];
  uint64_t v27 = a2[11];
  uint64_t v28 = a2[12];
  uint64_t v29 = a2[13];
  uint64_t v30 = a2[14];
  uint64_t v31 = a2[15];
  outlined copy of AST.Conditional.Condition.Kind(*a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27, v28, v29);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v24;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 112) = v30;
  *(void *)(a1 + 120) = v31;
  outlined consume of AST.Conditional.Condition.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22));
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for AST.Conditional.Condition(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v17;
  long long v18 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v18;
  outlined consume of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, SBYTE8(v14));
  *(_OWORD *)(a1 + 128) = a2[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 4 && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 4);
  }
  unsigned int v3 = ~*(_DWORD *)(a1 + 104) & 7;
  if (v3 >= 3) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 4;
    if (a3 >= 4) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 4) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(void *)(result + 96) = 0;
      *(void *)(result + 104) = -a2 & 7;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition()
{
  return &type metadata for AST.Conditional.Condition;
}

uint64_t destroy for AST.Conditional.Condition(uint64_t a1)
{
  return outlined consume of AST.Conditional.Condition.Kind(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_OWORD *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104));
}

uint64_t *initializeWithCopy for AST.Conditional.Condition.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  outlined copy of AST.Conditional.Condition.Kind(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  return a1;
}

uint64_t assignWithCopy for AST.Conditional.Condition.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v25 = a2[10];
  uint64_t v26 = a2[11];
  uint64_t v27 = a2[12];
  uint64_t v28 = a2[13];
  uint64_t v29 = a2[14];
  uint64_t v30 = a2[15];
  outlined copy of AST.Conditional.Condition.Kind(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27, v28);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  outlined consume of AST.Conditional.Condition.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22));
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for AST.Conditional.Condition.Kind(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  long long v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  long long v17 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v17;
  outlined consume of AST.Conditional.Condition.Kind(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, SBYTE8(v13));
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 4 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 4);
  }
  unsigned int v3 = ~*(_DWORD *)(a1 + 104) & 7;
  if (v3 >= 3) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 4;
    if (a3 >= 4) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 4) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(void *)(result + 96) = 0;
      *(void *)(result + 104) = -a2 & 7;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 0;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Conditional.Condition.Kind(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(void *)(result + 104) = *(void *)(result + 104) & 0xFFFFFFFFFFFFFFF8 | a2;
  }
  else
  {
    *(void *)__n128 result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(void *)(result + 112) = 0;
    *(void *)(result + 120) = 0;
    *(void *)(result + 104) = 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.Kind()
{
  return &type metadata for AST.Conditional.Condition.Kind;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.PCREVersionNumber()
{
  return &type metadata for AST.Conditional.Condition.PCREVersionNumber;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionCheck(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[104]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionCheck(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.PCREVersionCheck()
{
  return &type metadata for AST.Conditional.Condition.PCREVersionCheck;
}

uint64_t getEnumTag for AST.Conditional.Condition.PCREVersionCheck.Kind(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for AST.Conditional.Condition.PCREVersionCheck.Kind(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  return &type metadata for AST.Conditional.Condition.PCREVersionCheck.Kind;
}

uint64_t destroy for AST.CustomCharacterClass()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AST.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.CustomCharacterClass(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.CustomCharacterClass(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.CustomCharacterClass()
{
  return &type metadata for AST.CustomCharacterClass;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.CustomCharacterClass.Member(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = type metadata accessor for AST.Atom.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
            uint64_t v10 = a2[1];
            *a1 = *a2;
            a1[1] = v10;
            swift_bridgeObjectRetain();
            goto LABEL_34;
          case 2u:
            uint64_t v27 = a2[1];
            *a1 = *a2;
            a1[1] = v27;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_34;
          case 3u:
            uint64_t v15 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 4u:
                uint64_t v16 = a2[1];
                *a1 = *a2;
                a1[1] = v16;
                swift_bridgeObjectRetain();
                goto LABEL_32;
              case 5u:
                uint64_t v46 = type metadata accessor for Unicode.NumericType();
                (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v46 - 8) + 16))(a1, a2, v46);
                goto LABEL_32;
              case 7u:
                *(unsigned char *)a1 = *(unsigned char *)a2;
                uint64_t v47 = a2[2];
                a1[1] = a2[1];
                a1[2] = v47;
                swift_bridgeObjectRetain();
                goto LABEL_32;
              case 8u:
                uint64_t v48 = type metadata accessor for Unicode.CanonicalCombiningClass();
                (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v48 - 8) + 16))(a1, a2, v48);
                goto LABEL_32;
              case 0xEu:
                uint64_t v49 = a2[1];
                *a1 = *a2;
                a1[1] = v49;
                uint64_t v50 = a2[3];
                a1[2] = a2[2];
                a1[3] = v50;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
LABEL_32:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
                break;
            }
            uint64_t v51 = type metadata accessor for AST.Atom.CharacterProperty(0);
            *((unsigned char *)a1 + *(int *)(v51 + 20)) = *((unsigned char *)a2 + *(int *)(v51 + 20));
            *((unsigned char *)a1 + *(int *)(v51 + 24)) = *((unsigned char *)a2 + *(int *)(v51 + 24));
            goto LABEL_34;
          case 9u:
          case 0xAu:
            uint64_t v28 = *a2;
            uint64_t v29 = a2[1];
            uint64_t v30 = a2[2];
            uint64_t v31 = a2[3];
            char v32 = *((unsigned char *)a2 + 32);
            outlined copy of AST.Reference.Kind(*a2, v29, v30, v31, v32);
            *a1 = v28;
            a1[1] = v29;
            a1[2] = v30;
            a1[3] = v31;
            *((unsigned char *)a1 + 32) = v32;
            *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
            *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
            *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
            *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
            goto LABEL_34;
          case 0xBu:
            uint64_t v33 = *a2;
            uint64_t v34 = a2[1];
            uint64_t v35 = a2[2];
            uint64_t v36 = a2[3];
            uint64_t v135 = v9;
            uint64_t v92 = a2[5];
            uint64_t v95 = a2[8];
            uint64_t v98 = a2[9];
            uint64_t v101 = a2[10];
            uint64_t v104 = a2[11];
            uint64_t v107 = a2[12];
            uint64_t v110 = a2[13];
            uint64_t v113 = a2[14];
            uint64_t v116 = a2[15];
            uint64_t v119 = a2[16];
            uint64_t v122 = a2[17];
            uint64_t v125 = a2[18];
            char v130 = *((unsigned char *)a2 + 152);
            uint64_t v37 = a2[4];
            uint64_t v38 = a2[6];
            uint64_t v39 = a2[7];
            outlined copy of AST.Atom.Callout(*a2, v34, v35, v36, v37, v92, v38, v39, v95, v98, v101, v104, v107, v110, v113, v116, v119, v122, v125,
              v130);
            *a1 = v33;
            a1[1] = v34;
            a1[2] = v35;
            a1[3] = v36;
            a1[4] = v37;
            a1[5] = v92;
            uint64_t v9 = v135;
            a1[6] = v38;
            a1[7] = v39;
            a1[8] = v95;
            a1[9] = v98;
            a1[10] = v101;
            a1[11] = v104;
            a1[12] = v107;
            a1[13] = v110;
            a1[14] = v113;
            a1[15] = v116;
            a1[16] = v119;
            a1[17] = v122;
            a1[18] = v125;
            *((unsigned char *)a1 + 152) = v130;
            goto LABEL_34;
          case 0xCu:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v17 = a2[3];
            a1[2] = a2[2];
            a1[3] = v17;
            a1[4] = a2[4];
            *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
            swift_bridgeObjectRetain();
            goto LABEL_34;
          case 0xDu:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
            a1[3] = a2[3];
            *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
            *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
            a1[7] = a2[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_34:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
            break;
        }
        uint64_t v52 = type metadata accessor for AST.Atom(0);
        *(_OWORD *)((char *)a1 + *(int *)(v52 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v52 + 20));
        long long v53 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
        *(_OWORD *)((char *)a1 + v53[5]) = *(_OWORD *)((char *)a2 + v53[5]);
        uint64_t v54 = v53[6];
        long long v55 = (uint64_t *)((char *)a1 + v54);
        long long v56 = (uint64_t *)((char *)a2 + v54);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
            uint64_t v57 = v56[1];
            *long long v55 = *v56;
            v55[1] = v57;
            swift_bridgeObjectRetain();
            goto LABEL_62;
          case 2u:
            uint64_t v61 = v56[1];
            *long long v55 = *v56;
            v55[1] = v61;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_62;
          case 3u:
            uint64_t v58 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 4u:
                uint64_t v59 = v56[1];
                *long long v55 = *v56;
                v55[1] = v59;
                swift_bridgeObjectRetain();
                goto LABEL_60;
              case 5u:
                uint64_t v81 = type metadata accessor for Unicode.NumericType();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v81 - 8) + 16))(v55, v56, v81);
                goto LABEL_60;
              case 7u:
                *(unsigned char *)long long v55 = *(unsigned char *)v56;
                uint64_t v82 = v56[2];
                v55[1] = v56[1];
                v55[2] = v82;
                swift_bridgeObjectRetain();
                goto LABEL_60;
              case 8u:
                uint64_t v83 = type metadata accessor for Unicode.CanonicalCombiningClass();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v83 - 8) + 16))(v55, v56, v83);
                goto LABEL_60;
              case 0xEu:
                uint64_t v84 = v56[1];
                *long long v55 = *v56;
                v55[1] = v84;
                uint64_t v85 = v56[3];
                v55[2] = v56[2];
                v55[3] = v85;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
LABEL_60:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
                break;
            }
            uint64_t v86 = type metadata accessor for AST.Atom.CharacterProperty(0);
            *((unsigned char *)v55 + *(int *)(v86 + 20)) = *((unsigned char *)v56 + *(int *)(v86 + 20));
            *((unsigned char *)v55 + *(int *)(v86 + 24)) = *((unsigned char *)v56 + *(int *)(v86 + 24));
            goto LABEL_62;
          case 9u:
            uint64_t v132 = v52;
            uint64_t v62 = *v56;
            uint64_t v63 = v56[1];
            uint64_t v64 = v56[2];
            uint64_t v65 = v56[3];
            char v127 = *((unsigned char *)v56 + 32);
            outlined copy of AST.Reference.Kind(*v56, v63, v64, v65, v127);
            *long long v55 = v62;
            v55[1] = v63;
            v55[2] = v64;
            v55[3] = v65;
            uint64_t v52 = v132;
            *((unsigned char *)v55 + 32) = v127;
            *(_OWORD *)(v55 + 5) = *(_OWORD *)(v56 + 5);
            *(_OWORD *)(v55 + 7) = *(_OWORD *)(v56 + 7);
            *((unsigned char *)v55 + 72) = *((unsigned char *)v56 + 72);
            *((_OWORD *)v55 + 5) = *((_OWORD *)v56 + 5);
            goto LABEL_62;
          case 0xAu:
            uint64_t v133 = v52;
            uint64_t v66 = *v56;
            uint64_t v67 = v56[1];
            uint64_t v68 = v56[2];
            uint64_t v69 = v56[3];
            char v128 = *((unsigned char *)v56 + 32);
            outlined copy of AST.Reference.Kind(*v56, v67, v68, v69, v128);
            *long long v55 = v66;
            v55[1] = v67;
            uint64_t v52 = v133;
            v55[2] = v68;
            v55[3] = v69;
            *((unsigned char *)v55 + 32) = v128;
            *(_OWORD *)(v55 + 5) = *(_OWORD *)(v56 + 5);
            *(_OWORD *)(v55 + 7) = *(_OWORD *)(v56 + 7);
            *((unsigned char *)v55 + 72) = *((unsigned char *)v56 + 72);
            *((_OWORD *)v55 + 5) = *((_OWORD *)v56 + 5);
            goto LABEL_62;
          case 0xBu:
            uint64_t v70 = v56[1];
            uint64_t v134 = v52;
            uint64_t v90 = v56[5];
            uint64_t v91 = v56[3];
            uint64_t v88 = v56[7];
            uint64_t v89 = v56[6];
            uint64_t v94 = v56[8];
            uint64_t v97 = v56[9];
            uint64_t v100 = v56[10];
            uint64_t v103 = v56[11];
            uint64_t v106 = v56[12];
            uint64_t v109 = v56[13];
            uint64_t v112 = v56[14];
            uint64_t v115 = v56[15];
            uint64_t v118 = v56[16];
            uint64_t v121 = v56[17];
            uint64_t v124 = v56[18];
            char v129 = *((unsigned char *)v56 + 152);
            uint64_t v71 = *v56;
            uint64_t v72 = v56[2];
            uint64_t v73 = v56[4];
            outlined copy of AST.Atom.Callout(*v56, v70, v72, v91, v73, v90, v89, v88, v94, v97, v100, v103, v106, v109, v112, v115, v118, v121, v124,
              v129);
            *long long v55 = v71;
            v55[1] = v70;
            uint64_t v52 = v134;
            v55[2] = v72;
            v55[3] = v91;
            v55[4] = v73;
            v55[5] = v90;
            v55[6] = v89;
            v55[7] = v88;
            v55[8] = v94;
            v55[9] = v97;
            v55[10] = v100;
            v55[11] = v103;
            v55[12] = v106;
            v55[13] = v109;
            v55[14] = v112;
            v55[15] = v115;
            v55[16] = v118;
            v55[17] = v121;
            v55[18] = v124;
            *((unsigned char *)v55 + 152) = v129;
            goto LABEL_62;
          case 0xCu:
            *(_OWORD *)long long v55 = *(_OWORD *)v56;
            uint64_t v60 = v56[3];
            v55[2] = v56[2];
            v55[3] = v60;
            v55[4] = v56[4];
            *(_OWORD *)(v55 + 5) = *(_OWORD *)(v56 + 5);
            swift_bridgeObjectRetain();
            goto LABEL_62;
          case 0xDu:
            *(_OWORD *)long long v55 = *(_OWORD *)v56;
            *((unsigned char *)v55 + 16) = *((unsigned char *)v56 + 16);
            v55[3] = v56[3];
            *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
            *((unsigned char *)v55 + 48) = *((unsigned char *)v56 + 48);
            v55[7] = v56[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_62:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v55, v56, *(void *)(*(void *)(v9 - 8) + 64));
            break;
        }
        *(_OWORD *)((char *)v55 + *(int *)(v52 + 20)) = *(_OWORD *)((char *)v56 + *(int *)(v52 + 20));
        *(uint64_t *)((char *)a1 + v53[7]) = *(uint64_t *)((char *)a2 + v53[7]);
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for AST.Atom.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
            uint64_t v12 = a2[1];
            *a1 = *a2;
            a1[1] = v12;
            swift_bridgeObjectRetain();
            goto LABEL_53;
          case 2u:
            uint64_t v18 = a2[1];
            *a1 = *a2;
            a1[1] = v18;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_53;
          case 3u:
            uint64_t v19 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 4u:
                uint64_t v20 = a2[1];
                *a1 = *a2;
                a1[1] = v20;
                swift_bridgeObjectRetain();
                goto LABEL_51;
              case 5u:
                uint64_t v74 = type metadata accessor for Unicode.NumericType();
                (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v74 - 8) + 16))(a1, a2, v74);
                goto LABEL_51;
              case 7u:
                *(unsigned char *)a1 = *(unsigned char *)a2;
                uint64_t v75 = a2[2];
                a1[1] = a2[1];
                a1[2] = v75;
                swift_bridgeObjectRetain();
                goto LABEL_51;
              case 8u:
                uint64_t v76 = type metadata accessor for Unicode.CanonicalCombiningClass();
                (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v76 - 8) + 16))(a1, a2, v76);
                goto LABEL_51;
              case 0xEu:
                uint64_t v77 = a2[1];
                *a1 = *a2;
                a1[1] = v77;
                uint64_t v78 = a2[3];
                a1[2] = a2[2];
                a1[3] = v78;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
LABEL_51:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
                break;
            }
            uint64_t v79 = type metadata accessor for AST.Atom.CharacterProperty(0);
            *((unsigned char *)a1 + *(int *)(v79 + 20)) = *((unsigned char *)a2 + *(int *)(v79 + 20));
            *((unsigned char *)a1 + *(int *)(v79 + 24)) = *((unsigned char *)a2 + *(int *)(v79 + 24));
            goto LABEL_53;
          case 9u:
          case 0xAu:
            uint64_t v21 = *a2;
            uint64_t v22 = a2[1];
            uint64_t v23 = a2[2];
            uint64_t v24 = a2[3];
            char v25 = *((unsigned char *)a2 + 32);
            outlined copy of AST.Reference.Kind(*a2, v22, v23, v24, v25);
            *a1 = v21;
            a1[1] = v22;
            a1[2] = v23;
            a1[3] = v24;
            *((unsigned char *)a1 + 32) = v25;
            *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
            *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
            *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
            *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
            goto LABEL_53;
          case 0xBu:
            uint64_t v40 = a2[1];
            uint64_t v41 = a2[2];
            uint64_t v42 = a2[3];
            uint64_t v43 = a2[4];
            uint64_t v93 = a2[7];
            uint64_t v96 = a2[5];
            uint64_t v99 = a2[8];
            uint64_t v102 = a2[9];
            uint64_t v105 = a2[10];
            uint64_t v108 = a2[11];
            uint64_t v111 = a2[12];
            uint64_t v114 = a2[13];
            uint64_t v117 = a2[14];
            uint64_t v120 = a2[15];
            uint64_t v123 = a2[16];
            uint64_t v126 = a2[17];
            uint64_t v131 = a2[18];
            char v136 = *((unsigned char *)a2 + 152);
            uint64_t v44 = *a2;
            uint64_t v45 = a2[6];
            outlined copy of AST.Atom.Callout(*a2, v40, v41, v42, v43, v96, v45, v93, v99, v102, v105, v108, v111, v114, v117, v120, v123, v126, v131,
              v136);
            *a1 = v44;
            a1[1] = v40;
            a1[2] = v41;
            a1[3] = v42;
            a1[4] = v43;
            a1[5] = v96;
            a1[6] = v45;
            a1[7] = v93;
            a1[8] = v99;
            a1[9] = v102;
            a1[10] = v105;
            a1[11] = v108;
            a1[12] = v111;
            a1[13] = v114;
            a1[14] = v117;
            a1[15] = v120;
            a1[16] = v123;
            a1[17] = v126;
            a1[18] = v131;
            *((unsigned char *)a1 + 152) = v136;
            goto LABEL_53;
          case 0xCu:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v26 = a2[3];
            a1[2] = a2[2];
            a1[3] = v26;
            a1[4] = a2[4];
            *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
            swift_bridgeObjectRetain();
            goto LABEL_53;
          case 0xDu:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
            a1[3] = a2[3];
            *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
            *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
            a1[7] = a2[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_53:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
            break;
        }
        uint64_t v80 = type metadata accessor for AST.Atom(0);
        *(_OWORD *)((char *)a1 + *(int *)(v80 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v80 + 20));
        break;
      case 3u:
      case 4u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        swift_bridgeObjectRetain();
        break;
      case 5u:
        *a1 = *a2;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        uint64_t v13 = a2[3];
        uint64_t v14 = a2[4];
        a1[3] = v13;
        a1[4] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = a2[3];
        a1[2] = a2[2];
        a1[3] = v6;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}