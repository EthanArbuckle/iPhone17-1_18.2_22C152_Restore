uint64_t swift_demangle_getDemangledName(char *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DemangledName_Options;
  void v8[3];
  void *v9;
  _WORD v10[9];
  char v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void v16[3];
  void *v17;

  *(void *)((char *)v10 + 1) = 0x101010101010101;
  HIBYTE(v10[4]) = 1;
  *(void *)&v10[5] = 0x101010100000000;
  v11 = 1;
  v12 = 256;
  v13 = 1;
  v14 = 0;
  v15 = 0;
  v16[0] = &unk_26C5DD7E8;
  v16[1] = swift::Demangle::genericParameterName;
  v17 = v16;
  LOBYTE(v10[0]) = 1;
  v9 = v8;
  v8[0] = &unk_26C5DD7E8;
  v8[1] = swift::Demangle::genericParameterName;
  DemangledName_Options = swift_demangle_getDemangledName_Options(a1, a2);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v9 + 40))(v9, v2, v3, v4, v5);
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v17 + 40))(v17, v2, v3, v4, v5);
  }
  return DemangledName_Options;
}

uint64_t swift_demangle_getDemangledName_Options(char *a1, const char *a2)
{
  if (swift::Demangle::isSwiftSymbol((swift::Demangle *)a1, a2))
  {
    if (a1) {
      strlen(a1);
    }
    swift::Demangle::demangleSymbolAsString();
  }
  return 0;
}

uint64_t swift_demangle_getSimplifiedDemangledName(char *a1, const char *a2)
{
  HIBYTE(v10[4]) = 1;
  char v11 = 1;
  __int16 v12 = 0;
  char v13 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v16[0] = &unk_26C5DD7E8;
  v16[1] = swift::Demangle::genericParameterName;
  v17 = v16;
  v10[0] = 257;
  *(_DWORD *)&v10[1] = 0;
  *(_DWORD *)((char *)&v10[2] + 1) = 0;
  *(void *)&v10[5] = 0x101000001010101;
  v9 = v8;
  v8[0] = &unk_26C5DD7E8;
  v8[1] = swift::Demangle::genericParameterName;
  uint64_t DemangledName_Options = swift_demangle_getDemangledName_Options(a1, a2);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v9 + 40))(v9, v2, v3, v4, v5);
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v17 + 40))(v17, v2, v3, v4, v5);
  }
  return DemangledName_Options;
}

void swift_demangle_getModuleName()
{
  swift::Demangle::Context::Context((swift::Demangle::Context *)v0);
}

void swift_demangle_hasSwiftCallingConvention()
{
  swift::Demangle::Context::Context((swift::Demangle::Context *)v0);
}

void std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::~__func()
{
}

void *std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C5DD7E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C5DD7E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

char *_swift_mangleSimpleClass(uint64_t a1, const char *a2)
{
  strlen((const char *)a1);
  strlen(a2);
  v6 = 0;
  if (a1
    && strlen((const char *)a1) == 5
    && (*(_DWORD *)a1 == 1718187859 ? (BOOL v4 = *(unsigned char *)(a1 + 4) == 116) : (BOOL v4 = 0), v4))
  {
    swift_asprintf(&v6, "_TtCs%zu%s");
  }
  else
  {
    swift_asprintf(&v6, "_TtC%zu%s%zu%s");
  }
  return v6;
}

void swift_asprintf(char **a1, const char *__format, ...)
{
  va_start(va, __format);
  int v4 = vsnprintf(0, 0, __format, va);
  *a1 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    size_t v5 = (v4 + 1);
    v6 = (char *)malloc_type_malloc(v5, 0x887381A9uLL);
    if (v6)
    {
      v7 = v6;
      if (vsnprintf(v6, v5, __format, va) < 0) {
        free(v7);
      }
      else {
        *a1 = v7;
      }
    }
  }
}

char *_swift_mangleSimpleProtocol(uint64_t a1, const char *a2)
{
  strlen((const char *)a1);
  strlen(a2);
  v6 = 0;
  if (a1
    && strlen((const char *)a1) == 5
    && (*(_DWORD *)a1 == 1718187859 ? (BOOL v4 = *(unsigned char *)(a1 + 4) == 116) : (BOOL v4 = 0), v4))
  {
    swift_asprintf(&v6, "_TtPs%zu%s_");
  }
  else
  {
    swift_asprintf(&v6, "_TtP%zu%s%zu%s_");
  }
  return v6;
}

void swift::Demangle::failAssert(swift::Demangle *this, const char *a2, swift::Demangle *a3, swift::Demangle::Node *a4, const char *a5)
{
  double NodeTreeAsString = swift::Demangle::getNodeTreeAsString(a3, &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v12 = &v13;
  }
  else {
    __int16 v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  swift::Demangle::fatal(0, "%s:%u: assertion failed for Node %p: %s\n%s:%u: Node %p is:\n%s\n", v9, v10, NodeTreeAsString, this, a2, a3, a4, this, a2, a3, v12);
}

uint64_t swift::Demangle::isContext()
{
  return 1;
}

uint64_t swift::Demangle::isFunctionAttr(int a1)
{
  int v1 = a1 - 53;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 24:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 91:
    case 107:
    case 111:
    case 117:
    case 118:
    case 203:
    case 224:
    case 234:
    case 235:
    case 266:
    case 275:
    case 276:
    case 277:
    case 279:
    case 280:
    case 287:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unsigned char *swift::Demangle::makeSymbolicMangledNameStringRef(unsigned char *this, const char *a2)
{
  if (this)
  {
    unsigned int v2 = *this;
    if (*this)
    {
      uint64_t v3 = this;
      do
      {
        if (v2 >= 0x18) {
          uint64_t v4 = 8 * ((v2 & 0xF8) == 24);
        }
        else {
          uint64_t v4 = 4;
        }
        size_t v5 = &v3[v4];
        unsigned int v6 = v5[1];
        uint64_t v3 = v5 + 1;
        unsigned int v2 = v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t swift::Demangle::getManglingPrefixLength(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 21284 && *(_WORD *)a1 != 29476) {
      return 0;
    }
    return 2;
  }
  if (*(_WORD *)a1 == 21599 && *(unsigned char *)(a1 + 2) == 48) {
    return 3;
  }
  if (*(_WORD *)a1 == 21284) {
    return 2;
  }
  if (*(_WORD *)a1 == 9311 && *(unsigned char *)(a1 + 2) == 83) {
    return 3;
  }
  if (*(_WORD *)a1 == 29476) {
    return 2;
  }
  if (*(_WORD *)a1 == 9311 && *(unsigned char *)(a1 + 2) == 115) {
    return 3;
  }
  if (a2 < 0xE) {
    return 0;
  }
  if (*(void *)a1 != 0x74666977735F5F40 || *(void *)(a1 + 6) != 0x5F6F7263616D7466) {
    return 0;
  }
  return 14;
}

BOOL swift::Demangle::isSwiftSymbol(_WORD *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599 || swift::Demangle::getManglingPrefixLength((uint64_t)a1, a2) != 0;
}

BOOL swift::Demangle::isOldFunctionTypeMangling(unsigned __int16 *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599;
}

BOOL swift::Demangle::isSwiftSymbol(swift::Demangle *this, const char *a2)
{
  if (this)
  {
    size_t v3 = strlen((const char *)this);
    if (v3 >= 2 && *(_WORD *)this == 21599) {
      return 1;
    }
  }
  else
  {
    size_t v3 = 0;
  }
  return swift::Demangle::getManglingPrefixLength((uint64_t)this, v3) != 0;
}

BOOL swift::Demangle::isObjCSymbol(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength = (int)swift::Demangle::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength) {
    unint64_t ManglingPrefixLength = a2;
  }
  if (a2 - ManglingPrefixLength < 2) {
    return 0;
  }
  if (*(_WORD *)(a1 + ManglingPrefixLength) == 28499) {
    return 1;
  }
  return *(unsigned __int16 *)(a1 + ManglingPrefixLength) == 17235;
}

unint64_t swift::Demangle::dropSwiftManglingPrefix(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength = (int)swift::Demangle::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength) {
    unint64_t ManglingPrefixLength = a2;
  }
  return a1 + ManglingPrefixLength;
}

BOOL swift::Demangle::isAlias(uint64_t a1, uint64_t a2)
{
  v12[1] = 0;
  v12[2] = 0;
  std::string v13 = 0;
  uint64_t v14 = 2400;
  uint64_t v15 = 0;
  char v16 = 0;
  v51 = 0;
  v12[0] = &unk_26C5DD858;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v49 = 0;
  char v11 = 0;
  unint64_t v2 = swift::Demangle::Demangler::demangleType((uint64_t)v12, a1, a2, v10);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v6 = v4 == 234;
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  v12[0] = &unk_26C5DD858;
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  v12[0] = &unk_26C5DD830;
  v7 = v13;
  if (v13)
  {
    do
    {
      v8 = (void *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
  }
  if (v15) {
    *(unsigned char *)(v15 + 48) = 0;
  }
  return v6;
}

unint64_t swift::Demangle::Demangler::demangleType(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      uint64_t v15 = v14;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v14);
    }
    else
    {
      uint64_t v15 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  swift::Demangle::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)v16, a1, a2, a3, (uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  unint64_t v8 = *(void *)(a1 + 64);
  while (*(void *)(a1 + 72) < v8)
  {
    v9 = swift::Demangle::Demangler::demangleOperator((swift::Demangle::Demangler *)a1);
    if (!v9) {
      break;
    }
    uint64_t v17 = v9;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v17, (void *)a1);
  }
  int v10 = *(_DWORD *)(a1 + 96);
  if (!v10 || (unsigned int v11 = v10 - 1, Node = *(void *)(*(void *)(a1 + 88) + 8 * v11), *(_DWORD *)(a1 + 96) = v11, !Node)) {
    unint64_t Node = swift::Demangle::NodeFactory::createNode((void *)a1, 221, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  swift::Demangle::Demangler::DemangleInitRAII::~DemangleInitRAII((swift::Demangle::Demangler::DemangleInitRAII *)v16);
  return Node;
}

void swift::Demangle::Demangler::~Demangler(swift::Demangle::Demangler *this)
{
  *(void *)this = &unk_26C5DD858;
  unint64_t v2 = (char *)this + 544;
  unint64_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_26C5DD830;
  int v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    do
    {
      int v5 = (void *)*v4;
      free(v4);
      int v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    *(unsigned char *)(v6 + 48) = 0;
  }
}

{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_26C5DD858;
  unint64_t v2 = (char *)this + 544;
  unint64_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_26C5DD830;
  int v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    do
    {
      int v5 = (void *)*v4;
      free(v4);
      int v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    *(unsigned char *)(v6 + 48) = 0;
  }

  JUMPOUT(0x2166B5A30);
}

BOOL swift::Demangle::isClass(uint64_t a1, uint64_t a2)
{
  v13[1] = 0;
  v13[2] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 2400;
  uint64_t v16 = 0;
  char v17 = 0;
  v52 = 0;
  v13[0] = &unk_26C5DD858;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  int v50 = 0;
  __int16 v12 = 0;
  unint64_t v2 = swift::Demangle::Demangler::demangleType((uint64_t)v13, a1, a2, v11);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v7 = v4 == 13 || v4 == 24;
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  v13[0] = &unk_26C5DD858;
  if (v52 == v51)
  {
    (*(void (**)(void *))(v51[0] + 32))(v51);
  }
  else if (v52)
  {
    (*(void (**)(void))(*v52 + 40))();
  }
  v13[0] = &unk_26C5DD830;
  unint64_t v8 = v14;
  if (v14)
  {
    do
    {
      v9 = (void *)*v8;
      free(v8);
      unint64_t v8 = v9;
    }
    while (v9);
  }
  if (v16) {
    *(unsigned char *)(v16 + 48) = 0;
  }
  return v7;
}

BOOL swift::Demangle::isEnum(uint64_t a1, uint64_t a2)
{
  v12[1] = 0;
  v12[2] = 0;
  std::string v13 = 0;
  uint64_t v14 = 2400;
  uint64_t v15 = 0;
  char v16 = 0;
  v51 = 0;
  v12[0] = &unk_26C5DD858;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v49 = 0;
  unsigned int v11 = 0;
  unint64_t v2 = swift::Demangle::Demangler::demangleType((uint64_t)v12, a1, a2, v10);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v6 = v4 == 14 || v4 == 61;
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  v12[0] = &unk_26C5DD858;
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  v12[0] = &unk_26C5DD830;
  BOOL v7 = v13;
  if (v13)
  {
    do
    {
      unint64_t v8 = (void *)*v7;
      free(v7);
      BOOL v7 = v8;
    }
    while (v8);
  }
  if (v15) {
    *(unsigned char *)(v15 + 48) = 0;
  }
  return v6;
}

BOOL swift::Demangle::isProtocol(uint64_t a1, unint64_t a2)
{
  v15[1] = 0;
  v15[2] = 0;
  char v16 = 0;
  uint64_t v17 = 2400;
  uint64_t v18 = 0;
  char v19 = 0;
  v54 = 0;
  v15[0] = &unk_26C5DD858;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  int v52 = 0;
  unint64_t ManglingPrefixLength = (int)swift::Demangle::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength) {
    unint64_t ManglingPrefixLength = a2;
  }
  uint64_t v14 = 0;
  unint64_t v5 = swift::Demangle::Demangler::demangleType((uint64_t)v15, a1 + ManglingPrefixLength, a2 - ManglingPrefixLength, v13);
  while (1)
  {
    int v7 = *(unsigned __int16 *)(v5 + 16);
    if (v7 != 232) {
      break;
    }
    unint64_t v6 = v5;
    int v8 = *(unsigned __int8 *)(v5 + 18);
    if ((v8 - 1) < 2)
    {
LABEL_6:
      unint64_t v5 = *(void *)v6;
    }
    else
    {
      unint64_t v5 = 0;
      if (v8 == 5)
      {
        unint64_t v5 = 0;
        if (*(_DWORD *)(v6 + 8))
        {
          unint64_t v6 = *(void *)v6;
          goto LABEL_6;
        }
      }
    }
  }
  BOOL v9 = (v7 - 180) < 2 || v7 == 347;
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  v15[0] = &unk_26C5DD858;
  if (v54 == v53)
  {
    (*(void (**)(void *))(v53[0] + 32))(v53);
  }
  else if (v54)
  {
    (*(void (**)(void))(*v54 + 40))();
  }
  v15[0] = &unk_26C5DD830;
  int v10 = v16;
  if (v16)
  {
    do
    {
      unsigned int v11 = (void *)*v10;
      free(v10);
      int v10 = v11;
    }
    while (v11);
  }
  if (v18) {
    *(unsigned char *)(v18 + 48) = 0;
  }
  return v9;
}

BOOL swift::Demangle::isStruct(uint64_t a1, uint64_t a2)
{
  v12[1] = 0;
  v12[2] = 0;
  std::string v13 = 0;
  uint64_t v14 = 2400;
  uint64_t v15 = 0;
  char v16 = 0;
  long long v51 = 0;
  v12[0] = &unk_26C5DD858;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v49 = 0;
  unsigned int v11 = 0;
  unint64_t v2 = swift::Demangle::Demangler::demangleType((uint64_t)v12, a1, a2, v10);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v6 = v4 == 15 || v4 == 219;
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  v12[0] = &unk_26C5DD858;
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  v12[0] = &unk_26C5DD830;
  int v7 = v13;
  if (v13)
  {
    do
    {
      int v8 = (void *)*v7;
      free(v7);
      int v7 = v8;
    }
    while (v8);
  }
  if (v15) {
    *(unsigned char *)(v15 + 48) = 0;
  }
  return v6;
}

void *swift::Demangle::mangledNameForTypeMetadataAccessor@<X0>(const void *a1@<X0>, size_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, __int16 a5@<W4>, std::string *a6@<X8>)
{
  uint64_t v58 = 0;
  char v59 = 0;
  v94 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v63 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  int v92 = 0;
  v53 = &unk_26C5DD858;
  uint64_t v60 = 0;
  uint64_t v57 = 4800;
  unsigned int v11 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  v56 = v11;
  *unsigned int v11 = 0;
  unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v12 + 24;
  __dst = (void *)(v12 + 24);
  unint64_t v55 = (unint64_t)(v11 + 601);
  *(_WORD *)(v12 + 16) = 99;
  *(unsigned char *)(v12 + 18) = 0;
  if (v12 + 48 > v55)
  {
    uint64_t v14 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v14 = 32;
    }
    uint64_t v57 = v14;
    uint64_t v15 = v14 + 8;
    char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *char v16 = v56;
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v16 + v15;
    v56 = v16;
  }
  *(_WORD *)(v13 + 16) = 238;
  *(unsigned char *)(v13 + 18) = 0;
  unint64_t v17 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)v17;
  if (!v17 || v17 + 24 > v55)
  {
    uint64_t v18 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v18 = 32;
    }
    uint64_t v57 = v18;
    uint64_t v19 = v18 + 8;
    char v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *char v20 = v56;
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v20 + v19;
    v56 = v20;
  }
  long long v21 = (char *)(v17 + 24);
  __dst = (void *)(v17 + 24);
  *(_WORD *)(v17 + 16) = 232;
  *(unsigned char *)(v17 + 18) = 0;
  if (a2)
  {
    long long v22 = &v21[a2];
    if ((unint64_t)&v21[a2] > v55)
    {
      uint64_t v23 = 2 * v57;
      if (2 * v57 <= a2 + 1) {
        uint64_t v23 = a2 + 1;
      }
      uint64_t v57 = v23;
      uint64_t v24 = v23 + 8;
      long long v25 = (char *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      *(void *)long long v25 = v56;
      long long v21 = v25 + 8;
      unint64_t v55 = (unint64_t)&v25[v24];
      v56 = v25;
      long long v22 = &v25[a2 + 8];
    }
    long long v26 = v21;
    __dst = v22;
    memmove(v21, a1, a2);
    long long v21 = (char *)__dst;
  }
  else
  {
    long long v26 = 0;
  }
  long long v27 = (void *)((unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  __dst = v27;
  if (!v27 || (unint64_t)(v27 + 3) > v55)
  {
    uint64_t v28 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v28 = 32;
    }
    uint64_t v57 = v28;
    long long v29 = a6;
    long long v30 = a3;
    uint64_t v31 = v28 + 8;
    long long v32 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
    *long long v32 = v56;
    long long v27 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v33 = (char *)v32 + v31;
    a3 = v30;
    a6 = v29;
    unint64_t v55 = (unint64_t)v33;
    v56 = v32;
  }
  __dst = v27 + 3;
  *((_WORD *)v27 + 8) = 153;
  *((unsigned char *)v27 + 18) = 3;
  *long long v27 = v26;
  v27[1] = a2;
  if (a4)
  {
    long long v34 = __dst;
    if (!__dst || (long long v35 = (char *)__dst + a4, (unint64_t)__dst + a4 > v55))
    {
      uint64_t v36 = 2 * v57;
      if (2 * v57 <= a4 + 1) {
        uint64_t v36 = a4 + 1;
      }
      uint64_t v57 = v36;
      uint64_t v37 = v36 + 8;
      long long v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      *long long v38 = v56;
      long long v34 = v38 + 1;
      unint64_t v55 = (unint64_t)v38 + v37;
      v56 = v38;
      long long v35 = (char *)v38 + a4 + 8;
    }
    __dst = v35;
    memmove(v34, a3, a4);
  }
  else
  {
    long long v34 = 0;
  }
  unint64_t v39 = ((unint64_t)__dst + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v39 || v39 + 24 > v55)
  {
    uint64_t v40 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v40 = 32;
    }
    uint64_t v57 = v40;
    uint64_t v41 = v40 + 8;
    long long v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
    *long long v42 = v56;
    unint64_t v39 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v42 + v41;
    v56 = v42;
  }
  __dst = (void *)(v39 + 24);
  *(_WORD *)(v39 + 16) = 101;
  *(unsigned char *)(v39 + 18) = 3;
  *(void *)unint64_t v39 = v34;
  *(void *)(v39 + 8) = a4;
  unint64_t v43 = ((unint64_t)__dst + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v43 || v43 + 24 > v55)
  {
    uint64_t v44 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v44 = 32;
    }
    uint64_t v57 = v44;
    uint64_t v45 = v44 + 8;
    long long v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
    *long long v46 = v56;
    unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v46 + v45;
    v56 = v46;
  }
  __dst = (void *)(v43 + 24);
  *(_WORD *)(v43 + 16) = a5;
  *(unsigned char *)(v43 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v43, (swift::Demangle::Node *)v27, (swift::Demangle::NodeFactory *)&v53);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v43, (swift::Demangle::Node *)v39, (swift::Demangle::NodeFactory *)&v53);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v17, (swift::Demangle::Node *)v43, (swift::Demangle::NodeFactory *)&v53);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v13, (swift::Demangle::Node *)v17, (swift::Demangle::NodeFactory *)&v53);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v12, (swift::Demangle::Node *)v13, (swift::Demangle::NodeFactory *)&v53);
  swift::Demangle::mangleNode((swift::Demangle *)v12, v47);
  if (SHIBYTE(v52) < 0)
  {
    std::string::__init_copy_ctor_external(a6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = __p;
    a6->__r_.__value_.__r.__words[2] = v52;
  }
  v53 = &unk_26C5DD858;
  if (v94 == v93)
  {
    (*(void (**)(void *))(v93[0] + 32))(v93);
  }
  else if (v94)
  {
    (*(void (**)(void))(*v94 + 40))();
  }
  v53 = &unk_26C5DD830;
  uint64_t result = v56;
  if (v56)
  {
    do
    {
      int v49 = (void *)*result;
      free(result);
      uint64_t result = v49;
    }
    while (v49);
  }
  if (v58) {
    *(unsigned char *)(v58 + 48) = 0;
  }
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(void *a1, __int16 a2)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v5 = 2 * a1[4];
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    a1[4] = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    void *v7 = a1[3];
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v7 + v6;
    a1[3] = v7;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(void *a1, __int16 a2, void *__src, size_t __len)
{
  if (__len)
  {
    int v8 = (void *)a1[1];
    size_t v9 = (size_t)v8 + __len;
    if (v8) {
      BOOL v10 = v9 > a1[2];
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      unint64_t v11 = 2 * a1[4];
      if (v11 <= __len + 1) {
        unint64_t v11 = __len + 1;
      }
      a1[4] = v11;
      unint64_t v12 = v11 + 8;
      unint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      uint64_t v14 = (char *)v13 + v12;
      *unint64_t v13 = a1[3];
      int v8 = v13 + 1;
      a1[2] = v14;
      a1[3] = v13;
      size_t v9 = (size_t)v13 + __len + 8;
    }
    a1[1] = v9;
    memmove(v8, __src, __len);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v16 = 2 * a1[4];
    if (v16 <= 0x20) {
      unint64_t v16 = 32;
    }
    a1[4] = v16;
    unint64_t v17 = v16 + 8;
    uint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    *uint64_t v18 = a1[3];
    unint64_t result = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v18 + v17;
    a1[3] = v18;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v8;
  *(void *)(result + 8) = __len;
  return result;
}

uint64_t swift::Demangle::Node::removeChildAt(uint64_t this, unsigned int a2)
{
  int v2 = *(unsigned __int8 *)(this + 18);
  switch(v2)
  {
    case 5:
      int v3 = *(_DWORD *)(this + 8) - 1;
      if (v3 != a2)
      {
        do
        {
          *(void *)(*(void *)this + 8 * a2) = *(void *)(*(void *)this + 8 * (a2 + 1));
          ++a2;
        }
        while (v3 != a2);
        int v3 = *(_DWORD *)(this + 8) - 1;
      }
      *(_DWORD *)(this + 8) = v3;
      break;
    case 2:
      if (!a2) {
        *(void *)this = *(void *)(this + 8);
      }
      *(unsigned char *)(this + 18) = 1;
      break;
    case 1:
      *(unsigned char *)(this + 18) = 0;
      break;
  }
  return this;
}

uint64_t swift::Demangle::Node::replaceChild(uint64_t this, unsigned int a2, swift::Demangle::Node *a3)
{
  int v3 = *(unsigned __int8 *)(this + 18);
  if (v3 != 1)
  {
    if (v3 == 5)
    {
      this = *(void *)this + 8 * a2;
    }
    else
    {
      if (v3 != 2) {
        return this;
      }
      this += 8 * a2;
    }
  }
  *(void *)this = a3;
  return this;
}

int8x16_t *swift::Demangle::Node::reverseChildren(int8x16_t *this, uint64_t a2)
{
  int v2 = this[1].u8[2];
  if (v2 == 5)
  {
    unint64_t v4 = this->i64[0] + 8 * a2;
    uint64_t v5 = this->u32[2];
    unint64_t v6 = (void *)(this->i64[0] + 8 * v5 - 8);
    if (v5 != a2 && (unint64_t)v6 > v4)
    {
      unint64_t v8 = v4 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8);
        *(void *)(v8 - 8) = *v6;
        *v6-- = v9;
        BOOL v10 = v8 >= (unint64_t)v6;
        v8 += 8;
      }
      while (!v10);
    }
  }
  else if (v2 == 2 && a2 == 0)
  {
    *this = vextq_s8(*this, *this, 8uLL);
  }
  return this;
}

uint64_t swift::Demangle::Node::findByKind(uint64_t result, uint64_t a2, int a3)
{
  int v3 = (void *)(result + 16);
  if (*(unsigned __int16 *)(result + 16) != a2)
  {
    uint64_t v4 = (a3 - 1);
    if (a3 < 1) {
      return 0;
    }
    int v6 = *(unsigned __int8 *)(result + 18);
    int v7 = (void *)result;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        unint64_t v8 = *(void **)result;
        int v7 = *(void **)result;
        goto LABEL_11;
      }
      int v7 = 0;
    }
    switch(v6)
    {
      case 1:
        int v3 = (void *)(result + 8);
        if (v7 != (void *)(result + 8)) {
          goto LABEL_12;
        }
        return 0;
      case 2:
        goto LABEL_12;
      case 5:
        unint64_t v8 = *(void **)result;
LABEL_11:
        int v3 = &v8[*(unsigned int *)(result + 8)];
        if (v7 != v3) {
          goto LABEL_12;
        }
        return 0;
    }
    int v3 = 0;
    if (!v7) {
      return 0;
    }
LABEL_12:
    while (1)
    {
      unint64_t result = swift::Demangle::Node::findByKind(*v7, a2, v4);
      if (result) {
        break;
      }
      if (++v7 == v3) {
        return 0;
      }
    }
  }
  return result;
}

void *swift::Demangle::NodeFactory::freeSlabs(void *result)
{
  if (result)
  {
    do
    {
      int v1 = (void *)*result;
      free(result);
      unint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

void *swift::Demangle::NodeFactory::clear(void *this)
{
  int v1 = (void **)this[3];
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        int v3 = (void *)*this;
        free(this);
        this = v3;
      }
      while (v3);
      int v1 = (void **)v2[3];
    }
    *int v1 = 0;
    v2[1] = v1 + 1;
  }
  return this;
}

__n128 swift::Demangle::NodeFactory::pushCheckpoint@<Q0>(swift::Demangle::NodeFactory *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *((void *)this + 3);
  __n128 result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 swift::Demangle::NodeFactory::popCheckpoint(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  int v6 = *(void **)a2;
  int v7 = *(void ***)(a1 + 24);
  if (*(void ***)a2 != v7)
  {
    if (v7)
    {
      if (*(void *)(a2 + 16) - *(void *)(a2 + 8) >= (unint64_t)(*(void *)(a1 + 16) - (void)v7 - 8) >> 4)
      {
        uint64_t v9 = 0;
        unint64_t v8 = *(void **)(a1 + 24);
LABEL_10:
        while (*(void **)a2 != v8)
        {
          *(void *)(a1 + 24) = *v8;
          free(v8);
          unint64_t v8 = *(void **)(a1 + 24);
          if (!v8)
          {
            int v6 = *(void **)a2;
            int v7 = v9;
            goto LABEL_13;
          }
        }
        int v7 = v9;
        if (v9) {
          goto LABEL_15;
        }
LABEL_17:
        __n128 result = *(__n128 *)(a2 + 8);
        *(__n128 *)(a1 + 8) = result;
        return result;
      }
      unint64_t v8 = *v7;
      *(void *)(a1 + 24) = *v7;
      uint64_t v9 = v7;
      if (v8) {
        goto LABEL_10;
      }
    }
LABEL_13:
    if (v6) {
      swift::Demangle::fatal(0, "Popping checkpoint {%p, %p, %p} with slab that is not within the allocator's slab chain.\n", a3, a4, v6, *(void *)(a2 + 8), *(void *)(a2 + 16));
    }
    unint64_t v8 = 0;
    if (v7)
    {
LABEL_15:
      void *v7 = v8;
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 8) = v7 + 1;
      return result;
    }
    goto LABEL_17;
  }
  unint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  if (v10 > *(void *)(a1 + 8)) {
    swift::Demangle::fatal(0, "Popping checkpoint {%p, %p, %p} that is after the current pointer.\n", a3, a4, v6, v10, v11);
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (v11 != v12) {
    swift::Demangle::fatal(0, "Popping checkpoint {%p, %p, %p} with End that does not match current End %p.\n", a3, a4, v6, v10, v11, v12);
  }
  *(void *)(a1 + 8) = v10;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(void *a1, __int16 a2, uint64_t a3)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v7 = 2 * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    void *v9 = a1[3];
    unint64_t result = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v9 + v8;
    a1[3] = v9;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = a3;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNodeWithAllocatedText(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v9 = 2 * a1[4];
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    a1[4] = v9;
    unint64_t v10 = v9 + 8;
    uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *uint64_t v11 = a1[3];
    unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v11 + v10;
    a1[3] = v11;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = a3;
  *(void *)(result + 8) = a4;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(void *a1, __int16 a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v8 = 2 * a1[4];
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    a1[4] = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    void *v10 = a1[3];
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v10 + v9;
    a1[3] = v10;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v5;
  *(void *)(result + 8) = v6;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(void *a1, __int16 a2, char *__s)
{
  unint64_t v6 = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = v6;
  if (!v6 || v6 + 24 > a1[2])
  {
    unint64_t v7 = 2 * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = a1[3];
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = v10;
    a1[3] = v9;
  }
  a1[1] = v6 + 24;
  if (__s) {
    size_t v11 = strlen(__s);
  }
  else {
    size_t v11 = 0;
  }
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 3;
  *(void *)unint64_t v6 = __s;
  *(void *)(v6 + 8) = v11;
  return v6;
}

void *swift::Demangle::CharVector::append(char **a1, void *__src, size_t __n, void *a4)
{
  uint64_t v7 = *((unsigned int *)a1 + 2);
  size_t v8 = *((unsigned int *)a1 + 3);
  unint64_t v9 = *a1;
  if (__n + v7 > v8)
  {
    size_t v11 = (char *)a4[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = &v9[v8 + __n];
      unint64_t v12 = a4[2];
      if ((unint64_t)v13 <= v12)
      {
        a4[1] = v13;
        LODWORD(v15) = __n;
LABEL_19:
        *((_DWORD *)a1 + 3) = v8 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v12 = a4[2];
    }
    size_t v14 = (2 * v8);
    if (__n > v14) {
      size_t v14 = __n;
    }
    if (v14 <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = v14;
    }
    size_t v16 = v15 + v8;
    if (!v11 || (unint64_t)&v11[v16] > v12)
    {
      unint64_t v17 = 2 * a4[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      a4[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      char v20 = (char *)v19 + v18;
      *uint64_t v19 = a4[3];
      size_t v11 = (char *)(v19 + 1);
      a4[2] = v20;
      a4[3] = v19;
    }
    a4[1] = &v11[v16];
    if (v8) {
      memcpy(v11, *a1, v8);
    }
    *a1 = v11;
    unint64_t v9 = v11;
    uint64_t v7 = *((unsigned int *)a1 + 2);
    LODWORD(v8) = *((_DWORD *)a1 + 3);
    goto LABEL_19;
  }
LABEL_20:
  unint64_t result = memcpy(&v9[v7], __src, __n);
  *((_DWORD *)a1 + 2) += __n;
  return result;
}

unsigned int *swift::Demangle::CharVector::append(unsigned int *this, unsigned int a2, swift::Demangle::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = this[2];
  size_t v6 = this[3];
  uint64_t v7 = *(char **)this;
  if (v5 + 11 > v6)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 11];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 11;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }
    if ((2 * v6) <= 0xB) {
      uint64_t v12 = 11;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }
    *((void *)a3 + 1) = &v9[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    }
    *(void *)uint64_t v4 = v9;
    uint64_t v7 = v9;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v17 = v5;
  unint64_t v18 = &v7[v5];
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v19 = 0;
    *unint64_t v18 = 45;
    unsigned int v25 = -a2;
    do
    {
      v18[++v19] = (v25 % 0xA) | 0x30;
      BOOL v20 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v20);
    v18[v19 + 1] = 0;
    long long v26 = &v18[v19 + 1];
    if (&v18[v19] > v18)
    {
      unint64_t v27 = (unint64_t)&v7[v17 + 2];
      do
      {
        char v28 = *--v26;
        *long long v26 = *(unsigned char *)(v27 - 1);
        *(unsigned char *)(v27 - 1) = v28;
        BOOL v24 = v27++ >= (unint64_t)v26;
      }
      while (!v24);
    }
  }
  else if (a2)
  {
    uint64_t v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      BOOL v20 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v20);
    long long v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      unint64_t v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        char v23 = *--v21;
        *long long v21 = *(unsigned char *)(v22 - 1);
        *(unsigned char *)(v22 - 1) = v23;
        BOOL v24 = v22++ >= (unint64_t)v21;
      }
      while (!v24);
    }
  }
  else
  {
    *(_WORD *)unint64_t v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

unsigned int *swift::Demangle::CharVector::append(unsigned int *this, unint64_t a2, swift::Demangle::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = this[2];
  size_t v6 = this[3];
  uint64_t v7 = *(char **)this;
  if (v5 + 21 > v6)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 21];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 21;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }
    if ((2 * v6) <= 0x15) {
      uint64_t v12 = 21;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }
    *((void *)a3 + 1) = &v9[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    }
    *(void *)uint64_t v4 = v9;
    uint64_t v7 = v9;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v17 = v5;
  unint64_t v18 = &v7[v5];
  if (a2)
  {
    uint64_t v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      BOOL v20 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v20);
    long long v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      unint64_t v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        char v23 = *--v21;
        *long long v21 = *(unsigned char *)(v22 - 1);
        *(unsigned char *)(v22 - 1) = v23;
      }
      while (v22++ < (unint64_t)v21);
    }
  }
  else
  {
    *(_WORD *)unint64_t v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

void *swift::Demangle::Demangler::clear(void *this)
{
  *((_DWORD *)this + 25) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 13) = 0;
  int v1 = (void **)*((void *)this + 3);
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        int v3 = *(void **)this;
        free(this);
        this = v3;
      }
      while (v3);
      int v1 = (void **)*((void *)v2 + 3);
    }
    *int v1 = 0;
    *((void *)v2 + 1) = v1 + 1;
  }
  return this;
}

uint64_t swift::Demangle::Demangler::DemangleInitRAII::DemangleInitRAII(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  uint64_t v10 = a2 + 544;
  uint64_t v11 = *(void *)(a2 + 568);
  if (v11)
  {
    if (v11 == v10)
    {
      *(void *)(a1 + 96) = a1 + 72;
      (*(void (**)(void))(**(void **)(a2 + 568) + 24))(*(void *)(a2 + 568));
    }
    else
    {
      *(void *)(a1 + 96) = v11;
      *(void *)(a2 + 568) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  unint64_t v12 = (*(void *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a2 + 8) = v12;
  if (!v12 || (unint64_t v13 = *(void *)(a2 + 16), v12 + 128 > v13))
  {
    unint64_t v14 = 2 * *(void *)(a2 + 32);
    if (v14 <= 0x88) {
      unint64_t v14 = 136;
    }
    *(void *)(a2 + 32) = v14;
    unint64_t v15 = v14 + 8;
    size_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (unint64_t)v16 + v15;
    *size_t v16 = *(void *)(a2 + 24);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 16) = (char *)v16 + v15;
    *(void *)(a2 + 24) = v16;
  }
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = 0x1000000000;
  unint64_t v17 = (v12 + 135) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a2 + 8) = v17;
  if (!v17 || v17 + 128 > v13)
  {
    unint64_t v18 = 2 * *(void *)(a2 + 32);
    if (v18 <= 0x88) {
      unint64_t v18 = 136;
    }
    *(void *)(a2 + 32) = v18;
    unint64_t v19 = v18 + 8;
    BOOL v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *BOOL v20 = *(void *)(a2 + 24);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 16) = (char *)v20 + v19;
    *(void *)(a2 + 24) = v20;
  }
  *(void *)(a2 + 8) = v17 + 128;
  *(void *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = 0x1000000000;
  *(_DWORD *)(a2 + 536) = 0;
  *(void *)(a2 + 56) = a3;
  *(void *)(a2 + 64) = a4;
  *(void *)(a2 + 72) = 0;
  uint64_t v21 = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  if (v21 != v10)
  {
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 40))(v21);
    }
    uint64_t v22 = *(void *)(a5 + 24);
    if (v22) {
      goto LABEL_20;
    }
LABEL_23:
    *(void *)(a2 + 568) = 0;
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v22 = *(void *)(a5 + 24);
  if (!v22) {
    goto LABEL_23;
  }
LABEL_20:
  if (v22 == a5)
  {
    *(void *)(a2 + 568) = v10;
    (*(void (**)(void, uint64_t))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), v10);
  }
  else
  {
    *(void *)(a2 + 568) = v22;
    *(void *)(a5 + 24) = 0;
  }
  return a1;
}

void swift::Demangle::Demangler::DemangleInitRAII::~DemangleInitRAII(swift::Demangle::Demangler::DemangleInitRAII *this)
{
  *(_OWORD *)(*(void *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(void *)this + 104) = *(_OWORD *)((char *)this + 24);
  uint64_t v2 = *(void *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  uint64_t v3 = *(void *)this;
  *(void *)(v3 + 72) = *((void *)this + 8);
  uint64_t v4 = v3 + 544;
  uint64_t v5 = *(void *)(v3 + 568);
  *(void *)(v3 + 568) = 0;
  if (v5 == v3 + 544)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v3 + 544);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  size_t v6 = (char *)this + 72;
  uint64_t v7 = (char *)*((void *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      *(void *)(v3 + 568) = v7;
      *((void *)this + 12) = 0;
      return;
    }
    *(void *)(v3 + 568) = v4;
    (*(void (**)(void, uint64_t))(**((void **)this + 12) + 24))(*((void *)this + 12), v3 + 544);
  }
  else
  {
    *(void *)(v3 + 568) = 0;
  }
  size_t v8 = (char *)*((void *)this + 12);
  if (v8 == v6)
  {
    (*(void (**)(char *))(*(void *)v6 + 32))((char *)this + 72);
  }
  else if (v8)
  {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
}

unint64_t swift::Demangle::Demangler::demangleSymbol(uint64_t a1, _WORD *a2, unint64_t a3, void *a4)
{
  uint64_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      long long v34 = v33;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v33);
    }
    else
    {
      long long v34 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    long long v34 = 0;
  }
  swift::Demangle::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)v35, a1, (uint64_t)a2, a3, (uint64_t)v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  size_t v8 = *(void *)(a1 + 64);
  size_t v9 = *(void *)(a1 + 72);
  if (v8 >= v9) {
    uint64_t v10 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 64);
  }
  if (v8 - v10 >= 3)
  {
    uint64_t v11 = *(_WORD **)(a1 + 56);
    unint64_t v12 = (_WORD *)((char *)v11 + v10);
    int v13 = *v12;
    int v14 = *((unsigned __int8 *)v12 + 2);
    if (v13 == 21599 && v14 == 116)
    {
      *(void *)(a1 + 72) = v9 + 3;
      unint64_t v20 = (unint64_t)swift::Demangle::demangleOldSymbolAsNode(v11, v8, (swift::Demangle::NodeFactory *)a1);
      goto LABEL_41;
    }
  }
  unsigned int ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  if (!ManglingPrefixLength) {
    goto LABEL_39;
  }
  BOOL v17 = a3 >= 2 && *a2 == 21599;
  *(unsigned char *)(a1 + 80) = v17;
  size_t v18 = v9 + ManglingPrefixLength;
  *(void *)(a1 + 72) = v18;
  while (*(void *)(a1 + 72) < v8)
  {
    unint64_t v19 = swift::Demangle::Demangler::demangleOperator((swift::Demangle::Demangler *)a1);
    if (!v19) {
      goto LABEL_39;
    }
    uint64_t v36 = v19;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v36, (void *)a1);
  }
  unint64_t v20 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 8) = v20;
  if (!v20 || v20 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v21 = 2 * *(void *)(a1 + 32);
    if (v21 <= 0x20) {
      unint64_t v21 = 32;
    }
    *(void *)(a1 + 32) = v21;
    unint64_t v22 = v21 + 8;
    char v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
    *char v23 = *(void *)(a1 + 24);
    unint64_t v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 16) = (char *)v23 + v22;
    *(void *)(a1 + 24) = v23;
  }
  *(void *)(a1 + 8) = v20 + 24;
  *(_WORD *)(v20 + 16) = 99;
  *(unsigned char *)(v20 + 18) = 0;
  unsigned int v24 = *(_DWORD *)(a1 + 96);
  if (!v24)
  {
LABEL_39:
    unint64_t v20 = 0;
    goto LABEL_41;
  }
  unsigned int v25 = (swift::Demangle::Node *)v20;
  do
  {
    long long v26 = *(uint64_t ***)(a1 + 88);
    unint64_t v27 = (unsigned __int16 *)v26[v24 - 1];
    if (!swift::Demangle::isFunctionAttr(v27[8]))
    {
      uint64_t v30 = 8 * v24;
      while (1)
      {
        uint64_t v31 = *v26;
        if (*((_WORD *)*v26 + 8) == 232)
        {
          int v32 = *((unsigned __int8 *)v31 + 18);
          if ((v32 - 1) >= 2)
          {
            if (v32 != 5 || !*((_DWORD *)v31 + 2))
            {
              uint64_t v31 = 0;
              goto LABEL_46;
            }
            uint64_t v31 = (uint64_t *)*v31;
          }
          uint64_t v31 = (uint64_t *)*v31;
        }
LABEL_46:
        swift::Demangle::Node::addChild(v25, (swift::Demangle::Node *)v31, (swift::Demangle::NodeFactory *)a1);
        ++v26;
        v30 -= 8;
        if (!v30) {
          goto LABEL_36;
        }
      }
    }
    *(_DWORD *)(a1 + 96) = v24 - 1;
    swift::Demangle::Node::addChild(v25, (swift::Demangle::Node *)v27, (swift::Demangle::NodeFactory *)a1);
    if ((v27[8] & 0xFFFE) == 0xAA) {
      unsigned int v25 = (swift::Demangle::Node *)v27;
    }
    unsigned int v24 = *(_DWORD *)(a1 + 96);
  }
  while (v24);
LABEL_36:
  int v28 = *(unsigned __int8 *)(v20 + 18);
  if ((v28 - 1) >= 2 && (v28 != 5 || !*(_DWORD *)(v20 + 8))) {
    goto LABEL_39;
  }
LABEL_41:
  swift::Demangle::Demangler::DemangleInitRAII::~DemangleInitRAII((swift::Demangle::Demangler::DemangleInitRAII *)v35);
  return v20;
}

BOOL swift::Demangle::Demangler::parseAndPushNodes(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  if (*((void *)this + 9) >= v1) {
    return 1;
  }
  uint64_t v3 = (const void **)((char *)this + 88);
  do
  {
    uint64_t v4 = swift::Demangle::Demangler::demangleOperator(this);
    BOOL v5 = v4 != 0;
    if (!v4) {
      break;
    }
    uint64_t v7 = v4;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v3, (uint64_t *)&v7, this);
  }
  while (*((void *)this + 9) < v1);
  return v5;
}

uint64_t swift::Demangle::Demangler::popNode<BOOL (*)(swift::Demangle::Node::Kind)>(uint64_t a1, unsigned int (*a2)(void))
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  if (!a2(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8 * (v2 - 1)) + 16))) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 96);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = v4 - 1;
  uint64_t result = *(void *)(*(void *)(a1 + 88) + 8 * v5);
  *(_DWORD *)(a1 + 96) = v5;
  return result;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleOperator(swift::Demangle::Demangler *this)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v3 <= v2) {
    unint64_t v4 = *((void *)this + 9);
  }
  else {
    unint64_t v4 = *((void *)this + 8);
  }
  while (2)
  {
    if (v4 == v2)
    {
      unint64_t v2 = v4;
LABEL_10:
      unint64_t v9 = v2 - 1;
LABEL_11:
      *((void *)this + 9) = v9;
      return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIdentifier(this);
    }
    else
    {
      uint64_t v5 = v2++;
      *((void *)this + 9) = v2;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(unsigned __int8 *)(v6 + v5);
      switch(*(unsigned char *)(v6 + v5))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleSymbolicReference(this, v7);
        case 0x2E:
          unint64_t v10 = v2 - 1;
          if (v3 < v10) {
            unint64_t v10 = v3;
          }
          uint64_t v11 = (char *)(v6 + v10);
          size_t v12 = v3 - v10;
          *((void *)this + 9) = v3;
          __int16 v13 = 221;
          goto LABEL_172;
        case 0x41:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleMultiSubstitutions(this);
        case 0x42:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBuiltinType(this);
        case 0x43:
          __int16 v14 = 24;
          goto LABEL_104;
        case 0x44:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleTypeMangling(this);
        case 0x45:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleExtensionContext(this);
        case 0x46:
          return swift::Demangle::Demangler::demanglePlainFunction(this);
        case 0x47:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBoundGenericType(this);
        case 0x48:
          if (v2 < v3)
          {
            unint64_t v15 = v2 + 1;
            *((void *)this + 9) = v2 + 1;
            switch(*(unsigned char *)(v6 + v2))
            {
              case 'A':
                size_t v16 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::Demangler::popDependentAssociatedConformance(this);
                int v18 = *((_DWORD *)this + 24);
                if (v18
                  && (unsigned int v19 = v18 - 1,
                      unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v19),
                      v20[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v19;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                v139 = this;
                __int16 v140 = 49;
                goto LABEL_300;
              case 'C':
                size_t v16 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAnyProtocolConformanceList(this);
                int v91 = *((_DWORD *)this + 24);
                if (v91
                  && ((unsigned int v92 = v91 - 1,
                       BOOL v17 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v92),
                       int v93 = v17[8],
                       v93 == 184)
                   || v93 == 183))
                {
                  *((_DWORD *)this + 24) = v92;
                }
                else
                {
                  BOOL v17 = (unsigned __int16 *)swift::Demangle::Demangler::demangleRetroactiveProtocolConformanceRef(this);
                  unsigned int v92 = *((_DWORD *)this + 24);
                }
                if (v92
                  && (v141 = v92 - 1, unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v141), v20[8] == 232))
                {
                  *((_DWORD *)this + 24) = v141;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                v139 = this;
                __int16 v140 = 26;
                goto LABEL_300;
              case 'D':
                size_t v16 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::Demangler::popProtocol(this);
                int v94 = *((_DWORD *)this + 24);
                if (v94
                  && (v95 = v94 - 1, unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v95), v20[8] == 232))
                {
                  *((_DWORD *)this + 24) = v95;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                v139 = this;
                __int16 v140 = 47;
                goto LABEL_300;
              case 'F':
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v96 = 2 * *((void *)this + 4);
                  if (v96 <= 0x20) {
                    unint64_t v96 = 32;
                  }
                  *((void *)this + 4) = v96;
                  unint64_t v97 = v96 + 8;
                  v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
                  v99 = (char *)v98 + v97;
                  void *v98 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v99;
                  *((void *)this + 3) = v98;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v26 = 330;
                goto LABEL_195;
              case 'I':
                size_t v16 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::Demangler::popProtocol(this);
                int v100 = *((_DWORD *)this + 24);
                if (v100
                  && (unsigned int v101 = v100 - 1,
                      unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v101),
                      v20[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v101;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                v139 = this;
                __int16 v140 = 48;
LABEL_300:
                return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(v139, v140, (swift::Demangle::Node *)v20, (swift::Demangle::Node *)v17, v16);
              case 'P':
                unint64_t v102 = swift::Demangle::Demangler::popProtocol(this);
                if (!v102) {
                  goto LABEL_286;
                }
                unint64_t v29 = v102;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v103 = 2 * *((void *)this + 4);
                  if (v103 <= 0x20) {
                    unint64_t v103 = 32;
                  }
                  *((void *)this + 4) = v103;
                  unint64_t v104 = v103 + 8;
                  v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
                  v106 = (char *)v105 + v104;
                  void *v105 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v106;
                  *((void *)this + 3) = v105;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 183;
                goto LABEL_216;
              case 'X':
                unint64_t v107 = swift::Demangle::Demangler::popAnyProtocolConformanceList(this);
                if (!v107) {
                  goto LABEL_286;
                }
                unint64_t v29 = v107;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v108 = 2 * *((void *)this + 4);
                  if (v108 <= 0x20) {
                    unint64_t v108 = 32;
                  }
                  *((void *)this + 4) = v108;
                  unint64_t v109 = v108 + 8;
                  v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
                  v111 = (char *)v110 + v109;
                  void *v110 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v111;
                  *((void *)this + 3) = v110;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 27;
                goto LABEL_216;
              case 'c':
                v112 = swift::Demangle::Demangler::popProtocolConformance(this);
                if (!v112) {
                  goto LABEL_286;
                }
                unint64_t v29 = (unint64_t)v112;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v113 = 2 * *((void *)this + 4);
                  if (v113 <= 0x20) {
                    unint64_t v113 = 32;
                  }
                  *((void *)this + 4) = v113;
                  unint64_t v114 = v113 + 8;
                  v115 = malloc_type_malloc(v113 + 8, 0xD0263BC5uLL);
                  v116 = (char *)v115 + v114;
                  void *v115 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v116;
                  *((void *)this + 3) = v115;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 189;
                goto LABEL_216;
              case 'n':
                int v117 = *((_DWORD *)this + 24);
                if (!v117) {
                  goto LABEL_286;
                }
                unsigned int v118 = v117 - 1;
                unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v118);
                if (*(_WORD *)(v29 + 16) != 232) {
                  goto LABEL_286;
                }
                *((_DWORD *)this + 24) = v118;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v119 = 2 * *((void *)this + 4);
                  if (v119 <= 0x20) {
                    unint64_t v119 = 32;
                  }
                  *((void *)this + 4) = v119;
                  unint64_t v120 = v119 + 8;
                  v121 = malloc_type_malloc(v119 + 8, 0xD0263BC5uLL);
                  v122 = (char *)v121 + v120;
                  void *v121 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v121 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v122;
                  *((void *)this + 3) = v121;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 159;
                goto LABEL_216;
              case 'o':
                int v123 = *((_DWORD *)this + 24);
                if (!v123) {
                  goto LABEL_286;
                }
                unsigned int v124 = v123 - 1;
                unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v124);
                *((_DWORD *)this + 24) = v124;
                if (!v29) {
                  goto LABEL_286;
                }
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v125 = 2 * *((void *)this + 4);
                  if (v125 <= 0x20) {
                    unint64_t v125 = 32;
                  }
                  *((void *)this + 4) = v125;
                  unint64_t v126 = v125 + 8;
                  v127 = malloc_type_malloc(v125 + 8, 0xD0263BC5uLL);
                  v128 = (char *)v127 + v126;
                  void *v127 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v128;
                  *((void *)this + 3) = v127;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 303;
                goto LABEL_216;
              case 'p':
                unint64_t v129 = swift::Demangle::Demangler::popProtocol(this);
                if (!v129) {
                  goto LABEL_286;
                }
                unint64_t v29 = v129;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v130 = 2 * *((void *)this + 4);
                  if (v130 <= 0x20) {
                    unint64_t v130 = 32;
                  }
                  *((void *)this + 4) = v130;
                  unint64_t v131 = v130 + 8;
                  v132 = malloc_type_malloc(v130 + 8, 0xD0263BC5uLL);
                  v133 = (char *)v132 + v131;
                  void *v132 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v132 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v133;
                  *((void *)this + 3) = v132;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 184;
                goto LABEL_216;
              case 'r':
                unint64_t v134 = swift::Demangle::Demangler::popProtocol(this);
                if (!v134) {
                  goto LABEL_286;
                }
                unint64_t v29 = v134;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v135 = 2 * *((void *)this + 4);
                  if (v135 <= 0x20) {
                    unint64_t v135 = 32;
                  }
                  *((void *)this + 4) = v135;
                  unint64_t v136 = v135 + 8;
                  v137 = malloc_type_malloc(v135 + 8, 0xD0263BC5uLL);
                  v138 = (char *)v137 + v136;
                  void *v137 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v138;
                  *((void *)this + 3) = v137;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 187;
                goto LABEL_216;
              default:
                goto LABEL_218;
            }
          }
          unint64_t v15 = v2;
LABEL_218:
          unint64_t v9 = v15 - 2;
          goto LABEL_11;
        case 0x49:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplFunctionType(this);
        case 0x4B:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v22 = 2 * *((void *)this + 4);
            if (v22 <= 0x20) {
              unint64_t v22 = 32;
            }
            *((void *)this + 4) = v22;
            unint64_t v23 = v22 + 8;
            unsigned int v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
            unsigned int v25 = (char *)v24 + v23;
            *unsigned int v24 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v25;
            *((void *)this + 3) = v24;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 272;
          goto LABEL_195;
        case 0x4C:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleLocalIdentifier(this);
        case 0x4D:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleMetatype(this);
        case 0x4E:
          int v27 = *((_DWORD *)this + 24);
          if (!v27) {
            goto LABEL_286;
          }
          unsigned int v28 = v27 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v28);
          if (*(_WORD *)(v29 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v28;
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v30 = 2 * *((void *)this + 4);
            if (v30 <= 0x20) {
              unint64_t v30 = 32;
            }
            *((void *)this + 4) = v30;
            unint64_t v31 = v30 + 8;
            int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
            long long v33 = (char *)v32 + v31;
            *int v32 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v33;
            *((void *)this + 3) = v32;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v34 = 237;
          goto LABEL_216;
        case 0x4F:
          __int16 v14 = 61;
          goto LABEL_104;
        case 0x50:
          __int16 v14 = 180;
          goto LABEL_104;
        case 0x51:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleArchetype(this);
        case 0x52:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericRequirement(this);
        case 0x53:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleStandardSubstitution(this);
        case 0x54:
          return swift::Demangle::Demangler::demangleThunkOrSpecialization(this);
        case 0x56:
          __int16 v14 = 219;
          goto LABEL_104;
        case 0x57:
          return swift::Demangle::Demangler::demangleWitness(this);
        case 0x58:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleSpecialType(this);
        case 0x59:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleTypeAnnotation(this);
        case 0x5A:
          int v35 = *((_DWORD *)this + 24);
          if (!v35) {
            goto LABEL_286;
          }
          int v36 = v35 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * (v35 - 1));
          if (*(_WORD *)(v29 + 16) != 232 && !swift::Demangle::isContext()) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v36;
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v37 = 2 * *((void *)this + 4);
            if (v37 <= 0x20) {
              unint64_t v37 = 32;
            }
            *((void *)this + 4) = v37;
            unint64_t v38 = v37 + 8;
            unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
            uint64_t v40 = (char *)v39 + v38;
            *unint64_t v39 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v40;
            *((void *)this + 3) = v39;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v34 = 218;
          goto LABEL_216;
        case 0x5F:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v41 = 2 * *((void *)this + 4);
            if (v41 <= 0x20) {
              unint64_t v41 = 32;
            }
            *((void *)this + 4) = v41;
            unint64_t v42 = v41 + 8;
            unint64_t v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
            uint64_t v44 = (char *)v43 + v42;
            *unint64_t v43 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v44;
            *((void *)this + 3) = v43;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 275;
          goto LABEL_195;
        case 0x61:
          __int16 v14 = 234;
LABEL_104:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleAnyGenericType(this, v14);
        case 0x63:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionType(this, 82, 0);
        case 0x64:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v45 = 2 * *((void *)this + 4);
            if (v45 <= 0x20) {
              unint64_t v45 = 32;
            }
            *((void *)this + 4) = v45;
            unint64_t v46 = v45 + 8;
            long long v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
            long long v48 = (char *)v47 + v46;
            *long long v47 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v48;
            *((void *)this + 3) = v47;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 276;
          goto LABEL_195;
        case 0x66:
          return swift::Demangle::Demangler::demangleFunctionEntity(this);
        case 0x67:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleRetroactiveConformance(this);
        case 0x68:
          int v49 = *((_DWORD *)this + 24);
          if (!v49) {
            goto LABEL_286;
          }
          int v50 = v49 - 1;
          unint64_t v51 = *(void *)(*((void *)this + 11) + 8 * (v49 - 1));
          if (*(_WORD *)(v51 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v50;
          int v52 = *(unsigned __int8 *)(v51 + 18);
          if (v52 == 1) {
            goto LABEL_128;
          }
          if (v52 != 5 || *(_DWORD *)(v51 + 8) != 1) {
            goto LABEL_286;
          }
          unint64_t v51 = *(void *)v51;
LABEL_128:
          unint64_t v21 = *(void *)v51;
          if (!*(void *)v51) {
            goto LABEL_287;
          }
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v53 = 2 * *((void *)this + 4);
            if (v53 <= 0x20) {
              unint64_t v53 = 32;
            }
            *((void *)this + 4) = v53;
            unint64_t v54 = v53 + 8;
            unint64_t v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
            v56 = (char *)v55 + v54;
            *unint64_t v55 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v56;
            *((void *)this + 3) = v55;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 208;
          goto LABEL_209;
        case 0x69:
          return swift::Demangle::Demangler::demangleSubscript(this);
        case 0x6C:
          int v58 = 0;
          goto LABEL_168;
        case 0x6D:
          int v59 = *((_DWORD *)this + 24);
          if (!v59) {
            goto LABEL_286;
          }
          unsigned int v60 = v59 - 1;
          unint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v60);
          if (*(_WORD *)(v21 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v60;
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v61 = 2 * *((void *)this + 4);
            if (v61 <= 0x20) {
              unint64_t v61 = 32;
            }
            *((void *)this + 4) = v61;
            unint64_t v62 = v61 + 8;
            char v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
            long long v64 = (char *)v63 + v62;
            *char v63 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v64;
            *((void *)this + 3) = v63;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 145;
          goto LABEL_209;
        case 0x6E:
          int v65 = *((_DWORD *)this + 24);
          if (!v65) {
            goto LABEL_286;
          }
          int v66 = v65 - 1;
          unint64_t v67 = *(void *)(*((void *)this + 11) + 8 * (v65 - 1));
          if (*(_WORD *)(v67 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v66;
          int v68 = *(unsigned __int8 *)(v67 + 18);
          if (v68 == 1) {
            goto LABEL_153;
          }
          if (v68 != 5 || *(_DWORD *)(v67 + 8) != 1) {
            goto LABEL_286;
          }
          unint64_t v67 = *(void *)v67;
LABEL_153:
          unint64_t v21 = *(void *)v67;
          if (!*(void *)v67) {
            goto LABEL_287;
          }
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v69 = 2 * *((void *)this + 4);
            if (v69 <= 0x20) {
              unint64_t v69 = 32;
            }
            *((void *)this + 4) = v69;
            unint64_t v70 = v69 + 8;
            long long v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
            long long v72 = (char *)v71 + v70;
            *long long v71 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v72;
            *((void *)this + 3) = v71;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 209;
          goto LABEL_209;
        case 0x6F:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleOperatorIdentifier(this);
        case 0x70:
          unint64_t DependentGenericParamType = swift::Demangle::Demangler::demangleProtocolList(this);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
          goto LABEL_188;
        case 0x71:
          unint64_t DependentGenericParamType = swift::Demangle::Demangler::demangleGenericParamIndex(this);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
          goto LABEL_188;
        case 0x72:
          int v58 = 1;
LABEL_168:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericSignature(this, v58);
        case 0x73:
          uint64_t v11 = "Swift";
          __int16 v13 = 153;
          size_t v12 = 5;
LABEL_172:
          return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this, v13, v11, v12);
        case 0x74:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::popTuple(this);
        case 0x75:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericType(this);
        case 0x76:
          long long v74 = swift::Demangle::Demangler::demangleEntity(this, 254);
          return swift::Demangle::Demangler::demangleAccessor(this, v74);
        case 0x77:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleValueWitness(this);
        case 0x78:
          unint64_t DependentGenericParamType = swift::Demangle::Demangler::getDependentGenericParamType(this, 0, 0);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
LABEL_188:
          unint64_t v29 = DependentGenericParamType;
          goto LABEL_210;
        case 0x79:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v75 = 2 * *((void *)this + 4);
            if (v75 <= 0x20) {
              unint64_t v75 = 32;
            }
            *((void *)this + 4) = v75;
            unint64_t v76 = v75 + 8;
            long long v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
            long long v78 = (char *)v77 + v76;
            *long long v77 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v78;
            *((void *)this + 3) = v77;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 274;
LABEL_195:
          *(_WORD *)(v21 + 16) = v26;
          *(unsigned char *)(v21 + 18) = 0;
          goto LABEL_287;
        case 0x7A:
          int v79 = *((_DWORD *)this + 24);
          if (!v79) {
            goto LABEL_286;
          }
          int v80 = v79 - 1;
          unint64_t v81 = *(void *)(*((void *)this + 11) + 8 * (v79 - 1));
          if (*(_WORD *)(v81 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v80;
          int v82 = *(unsigned __int8 *)(v81 + 18);
          if (v82 == 1) {
            goto LABEL_202;
          }
          if (v82 == 5 && *(_DWORD *)(v81 + 8) == 1)
          {
            unint64_t v81 = *(void *)v81;
LABEL_202:
            unint64_t v21 = *(void *)v81;
            if (*(void *)v81)
            {
              unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 1) = v29;
              if (!v29 || v29 + 24 > *((void *)this + 2))
              {
                unint64_t v83 = 2 * *((void *)this + 4);
                if (v83 <= 0x20) {
                  unint64_t v83 = 32;
                }
                *((void *)this + 4) = v83;
                unint64_t v84 = v83 + 8;
                long long v85 = malloc_type_malloc(v83 + 8, 0xD0263BC5uLL);
                long long v86 = (char *)v85 + v84;
                *long long v85 = *((void *)this + 3);
                unint64_t v29 = ((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 2) = v86;
                *((void *)this + 3) = v85;
              }
              *((void *)this + 1) = v29 + 24;
              __int16 v57 = 123;
LABEL_209:
              *(_WORD *)(v29 + 16) = v57;
              *(unsigned char *)(v29 + 18) = 0;
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v29, (swift::Demangle::Node *)v21, this);
LABEL_210:
              unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 1) = v21;
              if (!v21 || v21 + 24 > *((void *)this + 2))
              {
                unint64_t v87 = 2 * *((void *)this + 4);
                if (v87 <= 0x20) {
                  unint64_t v87 = 32;
                }
                *((void *)this + 4) = v87;
                unint64_t v88 = v87 + 8;
                long long v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
                long long v90 = (char *)v89 + v88;
                *long long v89 = *((void *)this + 3);
                unint64_t v21 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 2) = v90;
                *((void *)this + 3) = v89;
              }
              *((void *)this + 1) = v21 + 24;
              __int16 v34 = 232;
LABEL_216:
              *(_WORD *)(v21 + 16) = v34;
              *(unsigned char *)(v21 + 18) = 0;
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v21, (swift::Demangle::Node *)v29, this);
            }
          }
          else
          {
LABEL_286:
            unint64_t v21 = 0;
          }
LABEL_287:
          uint64_t result = (swift::Demangle::Node *)v21;
          break;
        case 0xFF:
          continue;
        default:
          goto LABEL_10;
      }
    }
    return result;
  }
}

swift::Demangle::Node *swift::Demangle::Demangler::addChild(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3)
{
  uint64_t result = 0;
  if (a2)
  {
    if (a3)
    {
      swift::Demangle::Node::addChild(a2, a3, this);
      return a2;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::createWithChild(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)a1 + 2))
  {
    unint64_t v7 = 2 * *((void *)a1 + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)a1 + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = *((void *)a1 + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v9;
  }
  *((void *)a1 + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, a3, a1);
  return v6;
}

unint64_t swift::Demangle::Demangler::createType(swift::Demangle::Demangler *this, swift::Demangle::Node *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, a2, this);
  return v4;
}

unint64_t swift::Demangle::Demangler::createWithChildren(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, swift::Demangle::Node *a4)
{
  unint64_t v4 = 0;
  if (a3 && a4)
  {
    unint64_t v4 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v4;
    if (!v4 || v4 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      size_t v12 = (char *)v11 + v10;
      *uint64_t v11 = *((void *)a1 + 3);
      unint64_t v4 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v4 + 24;
    *(_WORD *)(v4 + 16) = a2;
    *(unsigned char *)(v4 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, a3, a1);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, a4, a1);
  }
  return v4;
}

unint64_t swift::Demangle::Demangler::createWithChildren(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, swift::Demangle::Node *a4, swift::Demangle::Node *a5)
{
  unint64_t v5 = 0;
  if (a3 && a4 && a5)
  {
    unint64_t v5 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2 * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      __int16 v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      __int16 v14 = (char *)v13 + v12;
      *__int16 v13 = *((void *)a1 + 3);
      unint64_t v5 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }
    *((void *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v5, a3, a1);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v5, a4, a1);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v5, a5, a1);
  }
  return v5;
}

unint64_t swift::Demangle::Demangler::createWithChildren(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, swift::Demangle::Node *a4, swift::Demangle::Node *a5, swift::Demangle::Node *a6)
{
  unint64_t v6 = 0;
  if (a3 && a4 && a5 && a6)
  {
    unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v6;
    if (!v6 || v6 + 24 > *((void *)a1 + 2))
    {
      unint64_t v13 = 2 * *((void *)a1 + 4);
      if (v13 <= 0x20) {
        unint64_t v13 = 32;
      }
      *((void *)a1 + 4) = v13;
      unint64_t v14 = v13 + 8;
      unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)v15 + v14;
      *unint64_t v15 = *((void *)a1 + 3);
      unint64_t v6 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v16;
      *((void *)a1 + 3) = v15;
    }
    *((void *)a1 + 1) = v6 + 24;
    *(_WORD *)(v6 + 16) = a2;
    *(unsigned char *)(v6 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, a3, a1);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, a4, a1);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, a5, a1);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, a6, a1);
  }
  return v6;
}

unint64_t swift::Demangle::Demangler::changeKind(swift::Demangle::NodeFactory *a1, swift::Demangle::Node **a2, __int16 a3)
{
  if (!a2) {
    return 0;
  }
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 4)
  {
    unint64_t v13 = *a2;
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v14 = 2 * *((void *)a1 + 4);
      if (v14 <= 0x20) {
        unint64_t v14 = 32;
      }
      *((void *)a1 + 4) = v14;
      unint64_t v15 = v14 + 8;
      size_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      BOOL v17 = (char *)v16 + v15;
      *size_t v16 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v17;
      *((void *)a1 + 3) = v16;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 4;
    *(void *)unint64_t v8 = v13;
  }
  else if (v6 == 3)
  {
    long long v7 = *(_OWORD *)a2;
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      long long v28 = v7;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      long long v7 = v28;
      unint64_t v12 = (char *)v11 + v10;
      *unint64_t v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 3;
    *(_OWORD *)unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v18 = 2 * *((void *)a1 + 4);
      if (v18 <= 0x20) {
        unint64_t v18 = 32;
      }
      *((void *)a1 + 4) = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)v20 + v19;
      *unint64_t v20 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v21;
      *((void *)a1 + 3) = v20;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 0;
  }
  int v22 = *((unsigned __int8 *)a2 + 18);
  unint64_t v23 = a2;
  if ((v22 - 1) >= 2)
  {
    if (v22 == 5)
    {
      unsigned int v24 = *a2;
      unint64_t v23 = (swift::Demangle::Node **)*a2;
LABEL_31:
      unsigned int v25 = (swift::Demangle::Node **)((char *)v24 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_36;
    }
    unint64_t v23 = 0;
  }
  switch(v22)
  {
    case 1:
      unsigned int v25 = a2 + 1;
      break;
    case 2:
      unsigned int v25 = a2 + 2;
      break;
    case 5:
      unsigned int v24 = *a2;
      goto LABEL_31;
    default:
      unsigned int v25 = 0;
      break;
  }
LABEL_36:
  while (v23 != v25)
  {
    __int16 v26 = *v23++;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v8, v26, a1);
  }
  return v8;
}

unint64_t swift::Demangle::Demangler::demangleTypeMangling(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2
    && (unsigned int v3 = v2 - 1, v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v3), *((_WORD *)v4 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v3;
  }
  else
  {
    unint64_t v4 = 0;
  }
  unint64_t v5 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v4);
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 236;
  *(unsigned char *)(v6 + 18) = 0;
  if (v5 && v6) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v5, this);
  }
  unint64_t result = 0;
  if (v4)
  {
    if (v6)
    {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v4, this);
      return v6;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::popFunctionParamLabels(swift::Demangle::Demangler *this, swift::Demangle::Node *a2)
{
  if (!*((unsigned char *)this + 80))
  {
    int v5 = *((_DWORD *)this + 24);
    if (v5)
    {
      unsigned int v6 = v5 - 1;
      if (*(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v6) + 16) == 274)
      {
        *((_DWORD *)this + 24) = v6;
        unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v8 = 2 * *((void *)this + 4);
          if (v8 <= 0x20) {
            unint64_t v8 = 32;
          }
          *((void *)this + 4) = v8;
          unint64_t v9 = v8 + 8;
          unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
          unint64_t v11 = (char *)v10 + v9;
          void *v10 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v10;
        }
        *((void *)this + 1) = v7 + 24;
        *(_WORD *)(v7 + 16) = 290;
        *(unsigned char *)(v7 + 18) = 0;
        return v7;
      }
    }
  }
  if (!a2 || *((_WORD *)a2 + 8) != 232) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 18);
  if ((v3 - 1) < 2) {
    goto LABEL_8;
  }
  if (v3 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::Node **)a2;
LABEL_8:
    unint64_t v4 = *(uint64_t **)a2;
    goto LABEL_18;
  }
  unint64_t v4 = 0;
LABEL_18:
  if (*((_WORD *)v4 + 8) != 44) {
    goto LABEL_31;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      unint64_t v13 = 0;
      goto LABEL_25;
    }
    unint64_t v4 = (uint64_t *)*v4;
  }
  unint64_t v13 = (uint64_t *)v4[1];
LABEL_25:
  int v14 = *((unsigned __int8 *)v13 + 18);
  if ((v14 - 1) >= 2)
  {
    if (v14 != 5 || !*((_DWORD *)v13 + 2))
    {
      unint64_t v4 = 0;
      goto LABEL_31;
    }
    unint64_t v13 = (uint64_t *)*v13;
  }
  unint64_t v4 = (uint64_t *)*v13;
LABEL_31:
  int v15 = *((unsigned __int16 *)v4 + 8);
  if (v15 != 82 && v15 != 65) {
    return 0;
  }
  int v16 = *((unsigned __int8 *)v4 + 18);
  unsigned int v17 = v16 - 1;
  unint64_t v18 = v4;
  if ((v16 - 1) >= 2) {
    unint64_t v18 = (uint64_t *)*v4;
  }
  uint64_t v19 = *(unsigned __int16 *)(*v18 + 16) == 349;
  if (v17 >= 2)
  {
    unint64_t v20 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 67) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
  }
  else
  {
    if (*(_WORD *)(v4[v19] + 16) == 67) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
    unint64_t v20 = v4;
  }
  if (*(_WORD *)(v20[v19] + 16) == 129) {
    uint64_t v19 = (v19 + 1);
  }
  else {
    uint64_t v19 = v19;
  }
  if (v16 == 5)
  {
    unint64_t v21 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 130) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v21[v19] + 16) == 68) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
  }
  else
  {
    if (v16 == 2)
    {
      if (*(_WORD *)(v4[v19] + 16) == 130) {
        uint64_t v19 = (v19 + 1);
      }
      else {
        uint64_t v19 = v19;
      }
    }
    else
    {
      uint64_t v19 = *(unsigned __int16 *)(v4[v19] + 16) == 130;
    }
    if (*(_WORD *)(v4[v19] + 16) == 68) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
    unint64_t v21 = v4;
  }
  if (*(_WORD *)(v21[v19] + 16) == 272) {
    goto LABEL_65;
  }
  int v22 = v4;
  if (v17 >= 2) {
    int v22 = (uint64_t *)*v4;
  }
  if (*(_WORD *)(v22[v19] + 16) == 273) {
LABEL_65:
  }
    uint64_t v19 = (v19 + 1);
  if (v16 == 5)
  {
    unint64_t v24 = *((unsigned int *)v4 + 2);
    unsigned int v25 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 66) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v25[v19] + 16) == 271) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v25[v19] + 16) == 348) {
      LODWORD(v19) = v19 + 1;
    }
  }
  else if (v16 == 2)
  {
    if (*(_WORD *)(v4[v19] + 16) == 66) {
      unsigned int v23 = v19 + 1;
    }
    else {
      unsigned int v23 = v19;
    }
    if (*(_WORD *)(v4[v23] + 16) == 271) {
      ++v23;
    }
    if (*(_WORD *)(v4[v23] + 16) == 348) {
      LODWORD(v19) = v23 + 1;
    }
    else {
      LODWORD(v19) = v23;
    }
    unint64_t v24 = 2;
  }
  else
  {
    if (*(_WORD *)(v4[v19] + 16) == 66) {
      unsigned int v26 = v19 + 1;
    }
    else {
      unsigned int v26 = v19;
    }
    LODWORD(v19) = *(unsigned __int16 *)(v4[*(_WORD *)(v4[v26] + 16) == 271] + 16) == 348;
    unint64_t v24 = 1;
  }
  if (v24 <= v19)
  {
    int v27 = 0;
  }
  else
  {
    if (v17 >= 2) {
      unint64_t v4 = (uint64_t *)*v4;
    }
    int v27 = (uint64_t *)v4[v19];
  }
  int v28 = *((unsigned __int8 *)v27 + 18);
  unint64_t v29 = (uint64_t **)v27;
  if ((v28 - 1) < 2) {
    goto LABEL_97;
  }
  if (v28 == 5 && *((_DWORD *)v27 + 2))
  {
    unint64_t v29 = (uint64_t **)*v27;
LABEL_97:
    unint64_t v30 = *v29;
    goto LABEL_99;
  }
  unint64_t v30 = 0;
LABEL_99:
  int v31 = *((unsigned __int8 *)v30 + 18);
  if ((v31 - 1) < 2)
  {
LABEL_103:
    int v32 = (uint64_t *)*v30;
    goto LABEL_105;
  }
  if (v31 == 5 && *((_DWORD *)v30 + 2))
  {
    unint64_t v30 = (uint64_t *)*v30;
    goto LABEL_103;
  }
  int v32 = 0;
LABEL_105:
  if (*((_WORD *)v32 + 8) == 223)
  {
    int v33 = *((unsigned __int8 *)v32 + 18);
    if (v33 != 1)
    {
      if (v33 == 5)
      {
        int v33 = *((_DWORD *)v32 + 2);
        if (!v33) {
          return 0;
        }
      }
      else if (v33 != 2)
      {
        return 0;
      }
    }
  }
  else
  {
    int v33 = 1;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v34 = 2 * *((void *)this + 4);
    if (v34 <= 0x20) {
      unint64_t v34 = 32;
    }
    *((void *)this + 4) = v34;
    unint64_t v35 = v34 + 8;
    int v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
    unint64_t v37 = (char *)v36 + v35;
    *int v36 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v37;
    *((void *)this + 3) = v36;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 290;
  *(unsigned char *)(v7 + 18) = 0;
  int v38 = *((unsigned __int8 *)v27 + 18);
  if ((v38 - 1) < 2) {
    goto LABEL_120;
  }
  if (v38 == 5 && *((_DWORD *)v27 + 2))
  {
    int v27 = (uint64_t *)*v27;
LABEL_120:
    unint64_t v39 = (uint64_t *)*v27;
    goto LABEL_122;
  }
  unint64_t v39 = 0;
LABEL_122:
  int v40 = *((unsigned __int8 *)v39 + 18);
  if ((v40 - 1) < 2) {
    goto LABEL_126;
  }
  if (v40 == 5 && *((_DWORD *)v39 + 2))
  {
    unint64_t v39 = (uint64_t *)*v39;
LABEL_126:
    unint64_t v41 = (uint64_t *)*v39;
    if (!*((unsigned char *)this + 80)) {
      goto LABEL_131;
    }
LABEL_129:
    if (!v41 || *((_WORD *)v41 + 8) != 223) {
      return v7;
    }
    goto LABEL_131;
  }
  unint64_t v41 = 0;
  if (*((unsigned char *)this + 80)) {
    goto LABEL_129;
  }
LABEL_131:
  unint64_t v42 = 0;
  char v43 = 0;
  do
  {
    if (!*((unsigned char *)this + 80))
    {
      int v53 = *((_DWORD *)this + 24);
      if (v53)
      {
        unsigned int v54 = v53 - 1;
        unint64_t v48 = *(void *)(*((void *)this + 11) + 8 * v54);
        *((_DWORD *)this + 24) = v54;
        if (v48)
        {
          int v55 = *(unsigned __int16 *)(v48 + 16);
          if (v55 == 275 || v55 == 101) {
            goto LABEL_136;
          }
        }
      }
      return 0;
    }
    unint64_t v49 = *((unsigned __int8 *)v41 + 18);
    unsigned int v50 = v49 - 1;
    if (v49 == 1) {
      goto LABEL_142;
    }
    if (v49 != 5)
    {
      if (v49 != 2) {
        goto LABEL_152;
      }
      unint64_t v49 = 2;
LABEL_142:
      if (v49 > v42) {
        goto LABEL_143;
      }
      goto LABEL_152;
    }
    if (*((unsigned int *)v41 + 2) > v42)
    {
LABEL_143:
      unint64_t v51 = v41;
      if (v50 >= 2) {
        unint64_t v51 = (uint64_t *)*v41;
      }
      int v52 = (uint64_t *)v51[v42];
      goto LABEL_153;
    }
LABEL_152:
    int v52 = 0;
LABEL_153:
    int v56 = *((unsigned __int8 *)v52 + 18);
    switch(v56)
    {
      case 1:
        uint64_t v57 = *((unsigned __int8 *)v52 + 18);
        break;
      case 5:
        uint64_t v57 = *((unsigned int *)v52 + 2);
        if (!v57)
        {
LABEL_171:
          unint64_t v48 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v48;
          if (!v48 || v48 + 24 > *((void *)this + 2))
          {
            unint64_t v44 = 2 * *((void *)this + 4);
            if (v44 <= 0x20) {
              unint64_t v44 = 32;
            }
            *((void *)this + 4) = v44;
            unint64_t v45 = v44 + 8;
            unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            long long v47 = (char *)v46 + v45;
            *unint64_t v46 = *((void *)this + 3);
            unint64_t v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v47;
            *((void *)this + 3) = v46;
          }
          *((void *)this + 1) = v48 + 24;
          *(_WORD *)(v48 + 16) = 275;
          *(unsigned char *)(v48 + 18) = 0;
          goto LABEL_136;
        }
        break;
      case 2:
        uint64_t v57 = 2;
        break;
      default:
        goto LABEL_171;
    }
    unint64_t v58 = 0;
    unsigned int v59 = 1;
    while (1)
    {
      unint64_t v60 = *((unsigned __int8 *)v52 + 18);
      if (v56 == 1) {
        goto LABEL_163;
      }
      if (v56 != 5)
      {
        unint64_t v60 = 2;
LABEL_163:
        if (v60 <= v58) {
          goto LABEL_168;
        }
        goto LABEL_164;
      }
      if (*((unsigned int *)v52 + 2) <= v58)
      {
LABEL_168:
        unint64_t v62 = 0;
        goto LABEL_169;
      }
LABEL_164:
      unint64_t v61 = v52;
      if ((v56 - 1) >= 2) {
        unint64_t v61 = (uint64_t *)*v52;
      }
      unint64_t v62 = (long long *)v61[v58];
LABEL_169:
      if (*((_WORD *)v62 + 8) == 225) {
        break;
      }
      ++v58;
      ++v59;
      if (v57 == v58) {
        goto LABEL_171;
      }
    }
    if (v56 == 5)
    {
      int v63 = *((_DWORD *)v52 + 2);
      if (v58 - v63 == -1)
      {
        *((_DWORD *)v52 + 2) = v58;
      }
      else
      {
        do
        {
          *(void *)(*v52 + 8 * (v59 - 1)) = *(void *)(*v52 + 8 * v59);
          ++v59;
        }
        while (v63 != v59);
        --*((_DWORD *)v52 + 2);
      }
    }
    else if (v56 == 2)
    {
      if (!v58) {
        uint64_t *v52 = v52[1];
      }
      *((unsigned char *)v52 + 18) = 1;
    }
    else
    {
      *((unsigned char *)v52 + 18) = 0;
    }
    long long v64 = *v62;
    unint64_t v48 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v48;
    if (!v48 || v48 + 24 > *((void *)this + 2))
    {
      unint64_t v65 = 2 * *((void *)this + 4);
      if (v65 <= 0x20) {
        unint64_t v65 = 32;
      }
      *((void *)this + 4) = v65;
      unint64_t v66 = v65 + 8;
      long long v70 = v64;
      unint64_t v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
      long long v64 = v70;
      int v68 = (char *)v67 + v66;
      *unint64_t v67 = *((void *)this + 3);
      unint64_t v48 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v68;
      *((void *)this + 3) = v67;
    }
    *((void *)this + 1) = v48 + 24;
    *(_WORD *)(v48 + 16) = 101;
    *(unsigned char *)(v48 + 18) = 3;
    *(_OWORD *)unint64_t v48 = v64;
LABEL_136:
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, (swift::Demangle::Node *)v48, this);
    v43 |= *(unsigned __int16 *)(v48 + 16) != 275;
    ++v42;
  }
  while (v42 != v33);
  if (v43)
  {
    if (!*((unsigned char *)this + 80)) {
      swift::Demangle::Node::reverseChildren((int8x16_t *)v7, 0);
    }
    return v7;
  }

  return swift::Demangle::NodeFactory::createNode(this, 290);
}

uint64_t swift::Demangle::Demangler::demangleSymbolicReference(swift::Demangle::Demangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = v2 + 4;
  if ((unint64_t)(v2 + 4) > *((void *)this + 8)) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = (_DWORD *)(*((void *)this + 7) + v2);
  int v7 = *v6;
  *((void *)this + 9) = v3;
  int v8 = 0;
  char v9 = 0;
  int v10 = 0;
  int v11 = 1;
  switch(a2)
  {
    case 1:
      goto LABEL_10;
    case 2:
      int v8 = 0;
      char v9 = 0;
      int v10 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 9:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 10:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 2;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 11:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 3;
LABEL_10:
      uint64_t v12 = *((void *)this + 71);
      if (v12) {
        goto LABEL_11;
      }
      return 0;
    case 12:
      int v11 = 0;
      int v10 = 0;
      char v9 = 4;
      int v8 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
LABEL_11:
      char v18 = v9;
      int v16 = v7;
      int v17 = v10;
      uint64_t v19 = v6;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, int *, int *, _DWORD **))(*(void *)v12 + 48))(v12, &v18, &v17, &v16, &v19);
      uint64_t v5 = v13;
      if (v13)
      {
        if ((v11 | v8) == 1)
        {
          int v14 = *(unsigned __int16 *)(v13 + 16);
          if (v14 != 301 && v14 != 309)
          {
            uint64_t v19 = (_DWORD *)v13;
            swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v19, this);
          }
        }
      }
      break;
    default:
      return v5;
  }
  return v5;
}

unint64_t swift::Demangle::Demangler::demangleTypeAnnotation(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v7 = 2 * *((void *)this + 4);
        if (v7 <= 0x20) {
          unint64_t v7 = 32;
        }
        *((void *)this + 4) = v7;
        unint64_t v8 = v7 + 8;
        char v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
        int v10 = (char *)v9 + v8;
        void *v9 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v10;
        *((void *)this + 3) = v9;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 129;
      goto LABEL_50;
    case 'K':
      int v12 = *((_DWORD *)this + 24);
      if (!v12) {
        return 0;
      }
      int v13 = v12 - 1;
      unint64_t v14 = *(void *)(*((void *)this + 11) + 8 * (v12 - 1));
      if (*(_WORD *)(v14 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      int v15 = *(unsigned __int8 *)(v14 + 18);
      if (v15 == 1) {
        goto LABEL_15;
      }
      if (v15 != 5 || *(_DWORD *)(v14 + 8) != 1) {
        return 0;
      }
      unint64_t v14 = *(void *)v14;
LABEL_15:
      unint64_t v16 = *(void *)v14;
      if (!*(void *)v14) {
        return 0;
      }
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        uint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        unint64_t v20 = (char *)v19 + v18;
        *uint64_t v19 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v21 = 273;
      goto LABEL_128;
    case 'L':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      uint64_t v22 = *(char *)(v6 + v5);
      if (v22 == 115) {
        goto LABEL_26;
      }
      if (v22 != 105) {
        return 0;
      }
      uint64_t v22 = 105;
LABEL_26:
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v23 = 2 * *((void *)this + 4);
        if (v23 <= 0x20) {
          unint64_t v23 = 32;
        }
        *((void *)this + 4) = v23;
        unint64_t v24 = v23 + 8;
        unsigned int v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
        unsigned int v26 = (char *)v25 + v24;
        *unsigned int v25 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v26;
        *((void *)this + 3) = v25;
      }
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 349;
      *(unsigned char *)(v4 + 18) = 4;
      *(void *)unint64_t v4 = v22;
      return v4;
    case 'T':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2 * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        unint64_t v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        unint64_t v30 = (char *)v29 + v28;
        *unint64_t v29 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 130;
      goto LABEL_50;
    case 'a':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2 * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        int v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        unint64_t v34 = (char *)v33 + v32;
        *int v33 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 271;
      goto LABEL_50;
    case 'b':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2 * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        unint64_t v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        int v38 = (char *)v37 + v36;
        *unint64_t v37 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 66;
LABEL_50:
      *(_WORD *)(v4 + 16) = v11;
      *(unsigned char *)(v4 + 18) = 0;
      return v4;
    case 'c':
      int v39 = *((_DWORD *)this + 24);
      if (!v39) {
        return 0;
      }
      int v40 = v39 - 1;
      unint64_t v41 = *(void *)(*((void *)this + 11) + 8 * (v39 - 1));
      if (*(_WORD *)(v41 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v40;
      int v42 = *(unsigned __int8 *)(v41 + 18);
      if (v42 == 1) {
        goto LABEL_57;
      }
      if (v42 != 5 || *(_DWORD *)(v41 + 8) != 1) {
        return 0;
      }
      unint64_t v41 = *(void *)v41;
LABEL_57:
      unint64_t v16 = *(void *)v41;
      if (!*(void *)v41) {
        return 0;
      }
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v43 = 2 * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        unint64_t v46 = (char *)v45 + v44;
        *unint64_t v45 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v46;
        *((void *)this + 3) = v45;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v21 = 67;
      goto LABEL_128;
    case 'i':
      int v47 = *((_DWORD *)this + 24);
      if (!v47) {
        return 0;
      }
      int v48 = v47 - 1;
      unint64_t v49 = *(void *)(*((void *)this + 11) + 8 * (v47 - 1));
      if (*(_WORD *)(v49 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v48;
      int v50 = *(unsigned __int8 *)(v49 + 18);
      if (v50 == 1) {
        goto LABEL_70;
      }
      if (v50 != 5 || *(_DWORD *)(v49 + 8) != 1) {
        return 0;
      }
      unint64_t v49 = *(void *)v49;
LABEL_70:
      unint64_t v4 = *(void *)v49;
      if (!*(void *)v49) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v51 = 2 * *((void *)this + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32;
        }
        *((void *)this + 4) = v51;
        unint64_t v52 = v51 + 8;
        int v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unsigned int v54 = (char *)v53 + v52;
        void *v53 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v54;
        *((void *)this + 3) = v53;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 127;
      break;
    case 'j':
      return swift::Demangle::Demangler::demangleDifferentiableFunctionType(this);
    case 'k':
      int v57 = *((_DWORD *)this + 24);
      if (!v57) {
        return 0;
      }
      int v58 = v57 - 1;
      unint64_t v59 = *(void *)(*((void *)this + 11) + 8 * (v57 - 1));
      if (*(_WORD *)(v59 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v58;
      int v60 = *(unsigned __int8 *)(v59 + 18);
      if (v60 == 1) {
        goto LABEL_86;
      }
      if (v60 != 5 || *(_DWORD *)(v59 + 8) != 1) {
        return 0;
      }
      unint64_t v59 = *(void *)v59;
LABEL_86:
      unint64_t v4 = *(void *)v59;
      if (!*(void *)v59) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v61 = 2 * *((void *)this + 4);
        if (v61 <= 0x20) {
          unint64_t v61 = 32;
        }
        *((void *)this + 4) = v61;
        unint64_t v62 = v61 + 8;
        int v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
        long long v64 = (char *)v63 + v62;
        *int v63 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v64;
        *((void *)this + 3) = v63;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 326;
      break;
    case 'l':
      return swift::Demangle::Demangler::demangleLifetimeDependenceKind(this, 0);
    case 't':
      int v65 = *((_DWORD *)this + 24);
      if (!v65) {
        return 0;
      }
      int v66 = v65 - 1;
      unint64_t v67 = *(void *)(*((void *)this + 11) + 8 * (v65 - 1));
      if (*(_WORD *)(v67 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v66;
      int v68 = *(unsigned __int8 *)(v67 + 18);
      if (v68 == 1) {
        goto LABEL_102;
      }
      if (v68 != 5 || *(_DWORD *)(v67 + 8) != 1) {
        return 0;
      }
      unint64_t v67 = *(void *)v67;
LABEL_102:
      unint64_t v4 = *(void *)v67;
      if (!*(void *)v67) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v69 = 2 * *((void *)this + 4);
        if (v69 <= 0x20) {
          unint64_t v69 = 32;
        }
        *((void *)this + 4) = v69;
        unint64_t v70 = v69 + 8;
        long long v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
        long long v72 = (char *)v71 + v70;
        *long long v71 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v72;
        *((void *)this + 3) = v71;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 331;
      break;
    case 'u':
      int v73 = *((_DWORD *)this + 24);
      if (!v73) {
        return 0;
      }
      int v74 = v73 - 1;
      unint64_t v75 = *(void *)(*((void *)this + 11) + 8 * (v73 - 1));
      if (*(_WORD *)(v75 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v74;
      int v76 = *(unsigned __int8 *)(v75 + 18);
      if (v76 == 1) {
        goto LABEL_115;
      }
      if (v76 != 5 || *(_DWORD *)(v75 + 8) != 1) {
        return 0;
      }
      unint64_t v75 = *(void *)v75;
LABEL_115:
      unint64_t v4 = *(void *)v75;
      if (!*(void *)v75) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v77 = 2 * *((void *)this + 4);
        if (v77 <= 0x20) {
          unint64_t v77 = 32;
        }
        *((void *)this + 4) = v77;
        unint64_t v78 = v77 + 8;
        int v79 = malloc_type_malloc(v77 + 8, 0xD0263BC5uLL);
        int v80 = (char *)v79 + v78;
        *int v79 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v80;
        *((void *)this + 3) = v79;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 128;
      break;
    default:
      return v4;
  }
  *(_WORD *)(v16 + 16) = v55;
  *(unsigned char *)(v16 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v16, (swift::Demangle::Node *)v4, this);
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v81 = 2 * *((void *)this + 4);
    if (v81 <= 0x20) {
      unint64_t v81 = 32;
    }
    *((void *)this + 4) = v81;
    unint64_t v82 = v81 + 8;
    unint64_t v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
    unint64_t v84 = (char *)v83 + v82;
    *unint64_t v83 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v84;
    *((void *)this + 3) = v83;
  }
  *((void *)this + 1) = v4 + 24;
  __int16 v21 = 232;
LABEL_128:
  *(_WORD *)(v4 + 16) = v21;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v16, this);
  return v4;
}

uint64_t *swift::Demangle::Demangler::popTypeAndGetChild(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (v1)
  {
    int v2 = v1 - 1;
    uint64_t v3 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
    if (*((_WORD *)v3 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v2;
      int v4 = *((unsigned __int8 *)v3 + 18);
      if (v4 == 1) {
        return (uint64_t *)*v3;
      }
      if (v4 == 5 && *((_DWORD *)v3 + 2) == 1)
      {
        uint64_t v3 = (uint64_t *)*v3;
        return (uint64_t *)*v3;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleDifferentiableFunctionType(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    int v3 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    int v3 = *(char *)(*((void *)this + 7) + v2);
  }
  HIDWORD(v5) = v3;
  LODWORD(v5) = v3 - 100;
  unsigned int v4 = v5 >> 1;
  if (v4 > 7 || ((0x93u >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = qword_21527B720[v4];
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    int v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    void *v10 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v10 + v9;
    *((void *)this + 3) = v10;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 68;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = v7;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleLifetimeDependenceKind(swift::Demangle::Demangler *this, int a2)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v2 + 1;
  uint64_t v4 = *(char *)(*((void *)this + 7) + v2);
  if (v4 != 115)
  {
    if (v4 != 105) {
      return 0;
    }
    uint64_t v4 = 105;
  }
  unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v5;
  if (a2)
  {
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v6 = 2 * *((void *)this + 4);
      if (v6 <= 0x20) {
        unint64_t v6 = 32;
      }
      *((void *)this + 4) = v6;
      unint64_t v7 = v6 + 8;
      unint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
      unint64_t v9 = (char *)v8 + v7;
      void *v8 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v9;
      *((void *)this + 3) = v8;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 349;
    *(unsigned char *)(v5 + 18) = 4;
    *(void *)unint64_t v5 = v4;
    return v5;
  }
  if (!v5 || v5 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    int v13 = (char *)v12 + v11;
    *int v12 = *((void *)this + 3);
    unint64_t v5 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v5 + 24;
  *(_WORD *)(v5 + 16) = 102;
  *(unsigned char *)(v5 + 18) = 4;
  *(void *)unint64_t v5 = v4;
  int v14 = *((_DWORD *)this + 24);
  if (!v14) {
    return 0;
  }
  int v15 = v14 - 1;
  unint64_t v16 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v14 - 1));
  if (*((_WORD *)v16 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v15;
  int v17 = *((unsigned __int8 *)v16 + 18);
  if (v17 != 1)
  {
    if (v17 != 5 || *((_DWORD *)v16 + 2) != 1) {
      return 0;
    }
    unint64_t v16 = *(swift::Demangle::Node **)v16;
  }
  unint64_t v18 = *(swift::Demangle::Node **)v16;
  if (!*(void *)v16) {
    return 0;
  }
  unint64_t v19 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v19;
  if (!v19 || v19 + 24 > *((void *)this + 2))
  {
    unint64_t v20 = 2 * *((void *)this + 4);
    if (v20 <= 0x20) {
      unint64_t v20 = 32;
    }
    *((void *)this + 4) = v20;
    unint64_t v21 = v20 + 8;
    uint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    unint64_t v23 = (char *)v22 + v21;
    *uint64_t v22 = *((void *)this + 3);
    unint64_t v19 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v23;
    *((void *)this + 3) = v22;
  }
  *((void *)this + 1) = v19 + 24;
  *(_WORD *)(v19 + 16) = 348;
  *(unsigned char *)(v19 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v19, (swift::Demangle::Node *)v5, this);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v19, v18, this);
  unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v5;
  if (!v5 || v5 + 24 > *((void *)this + 2))
  {
    unint64_t v24 = 2 * *((void *)this + 4);
    if (v24 <= 0x20) {
      unint64_t v24 = 32;
    }
    *((void *)this + 4) = v24;
    unint64_t v25 = v24 + 8;
    unsigned int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
    unint64_t v27 = (char *)v26 + v25;
    *unsigned int v26 = *((void *)this + 3);
    unint64_t v5 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v27;
    *((void *)this + 3) = v26;
  }
  *((void *)this + 1) = v5 + 24;
  *(_WORD *)(v5 + 16) = 232;
  *(unsigned char *)(v5 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v5, (swift::Demangle::Node *)v19, this);
  return v5;
}

uint64_t swift::Demangle::Demangler::demangleMultiSubstitutions(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v4 = (const void **)((char *)this + 88);
    int v5 = -1;
    do
    {
      *((void *)this + 9) = v1 + 1;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(char *)(v6 + v1);
      if (!*(unsigned char *)(v6 + v1)) {
        break;
      }
      if ((v7 - 97) > 0x19u)
      {
        if ((v7 - 65) <= 0x19u)
        {
          uint64_t v8 = 0;
          if (v5 <= 2048 && *((unsigned int *)this + 28) > (unint64_t)(*(char *)(v6 + v1) - 65))
          {
            uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 65));
            if (v5 >= 2)
            {
              unsigned int v12 = v5 + 1;
              do
              {
                uint64_t v15 = v8;
                swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v4, &v15, this);
                --v12;
              }
              while (v12 > 2);
            }
          }
          return v8;
        }
        if (v7 == 95)
        {
          unsigned int v13 = v5 + 27;
          if (*((_DWORD *)this + 28) <= v13) {
            return 0;
          }
          return *(void *)(*((void *)this + 13) + 8 * v13);
        }
        *((void *)this + 9) = v1;
        if (v1 >= v2 || *(unsigned __int8 *)(v6 + v1) - 48 > 9) {
          return 0;
        }
        int v5 = 0;
        while (1)
        {
          int v10 = *(unsigned __int8 *)(v6 + v1);
          if ((v10 - 48) > 9) {
            break;
          }
          int v11 = v10 + 10 * v5 - 48;
          if (v11 < v5) {
            return 0;
          }
          *((void *)this + 9) = ++v1;
          int v5 = v11;
          if (v2 == v1)
          {
            unint64_t v1 = v2;
            int v5 = v11;
            break;
          }
        }
        if (v5 < 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v8 = 0;
        if (v5 > 2048 || *((unsigned int *)this + 28) <= (unint64_t)(*(char *)(v6 + v1) - 97)) {
          return v8;
        }
        uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 97));
        if (v5 >= 2)
        {
          unsigned int v9 = v5 + 1;
          do
          {
            uint64_t v15 = v8;
            swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v4, &v15, this);
            --v9;
          }
          while (v9 > 2);
        }
        if (!v8) {
          return v8;
        }
        uint64_t v15 = v8;
        swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v4, &v15, this);
        unint64_t v2 = *((void *)this + 8);
        unint64_t v1 = *((void *)this + 9);
        int v5 = -1;
      }
    }
    while (v1 < v2);
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleBuiltinType(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'B':
      int v7 = "Builtin.UnsafeValueBuffer";
      size_t v8 = 25;
      goto LABEL_45;
    case 'D':
      int v7 = "Builtin.DefaultActorStorage";
      size_t v8 = 27;
      goto LABEL_45;
    case 'I':
      int v7 = "Builtin.IntLiteral";
      goto LABEL_38;
    case 'O':
      int v7 = "Builtin.UnknownObject";
      size_t v8 = 21;
      goto LABEL_45;
    case 'P':
      int v7 = "Builtin.PackIndex";
      size_t v8 = 17;
      goto LABEL_45;
    case 'T':
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v10 = 2 * *((void *)this + 4);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *((void *)this + 4) = v10;
        unint64_t v11 = v10 + 8;
        unsigned int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        *unsigned int v12 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v12 + v11;
        *((void *)this + 3) = v12;
      }
      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 21;
      *(unsigned char *)(Node + 18) = 0;
      goto LABEL_46;
    case 'b':
      int v7 = "Builtin.BridgeObject";
      goto LABEL_36;
    case 'c':
      int v7 = "Builtin.RawUnsafeContinuation";
      size_t v8 = 29;
      goto LABEL_45;
    case 'd':
      int v7 = "Builtin.NonDefaultDistributedActorStorage";
      size_t v8 = 41;
      goto LABEL_45;
    case 'e':
      int v7 = "Builtin.Executor";
      goto LABEL_40;
    case 'f':
      if (v5 >= v1) {
        return 0;
      }
      int v13 = *(unsigned __int8 *)(v6 + v5);
      if (v13 == 95) {
        goto LABEL_43;
      }
      if ((v13 - 48) > 9) {
        return 0;
      }
      signed int v14 = 0;
      while (1)
      {
        int v15 = *(unsigned __int8 *)(v6 + v5);
        if ((v15 - 48) > 9) {
          break;
        }
        int v16 = v15 + 10 * v14 - 48;
        if (v16 < v14) {
          return 0;
        }
        unint64_t v4 = 0;
        *((void *)this + 9) = ++v5;
        signed int v14 = v16;
        if (v1 == v5) {
          return v4;
        }
      }
      unint64_t v4 = 0;
      if (v14 < 0 || v5 >= v1 || v15 != 95) {
        return v4;
      }
      *((void *)this + 9) = v5 + 1;
      if ((v14 - 1) > 0xFFF) {
        return 0;
      }
      unint64_t v49 = 0;
      unint64_t v27 = (char *)*((void *)this + 1);
      if (!v27 || (unint64_t)(v27 + 14) > *((void *)this + 2))
      {
        unint64_t v28 = 2 * *((void *)this + 4);
        if (v28 <= 0xF) {
          unint64_t v28 = 15;
        }
        *((void *)this + 4) = v28;
        unint64_t v29 = v28 + 8;
        unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
        *unint64_t v30 = *((void *)this + 3);
        unint64_t v27 = (char *)(v30 + 1);
        *((void *)this + 2) = (char *)v30 + v29;
        *((void *)this + 3) = v30;
      }
      *((void *)this + 1) = v27 + 14;
      unint64_t v49 = v27;
      qmemcpy(v27, "Builtin.FPIEEE", 14);
      uint64_t v31 = 0xE0000000ELL;
      goto LABEL_78;
    case 'i':
      if (v5 >= v1) {
        return 0;
      }
      int v17 = *(unsigned __int8 *)(v6 + v5);
      if (v17 == 95) {
        goto LABEL_43;
      }
      if ((v17 - 48) > 9) {
        return 0;
      }
      signed int v14 = 0;
      while (1)
      {
        int v18 = *(unsigned __int8 *)(v6 + v5);
        if ((v18 - 48) > 9) {
          break;
        }
        int v19 = v18 + 10 * v14 - 48;
        if (v19 < v14) {
          return 0;
        }
        unint64_t v4 = 0;
        *((void *)this + 9) = ++v5;
        signed int v14 = v19;
        if (v1 == v5) {
          return v4;
        }
      }
      unint64_t v4 = 0;
      if (v14 < 0 || v5 >= v1 || v18 != 95) {
        return v4;
      }
      *((void *)this + 9) = v5 + 1;
      if ((v14 - 1) > 0xFFF) {
        return 0;
      }
      unint64_t v49 = 0;
      unint64_t v32 = (void *)*((void *)this + 1);
      if (!v32 || (unint64_t)v32 + 11 > *((void *)this + 2))
      {
        unint64_t v33 = 2 * *((void *)this + 4);
        if (v33 <= 0xC) {
          unint64_t v33 = 12;
        }
        *((void *)this + 4) = v33;
        unint64_t v34 = v33 + 8;
        unint64_t v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
        *unint64_t v35 = *((void *)this + 3);
        unint64_t v32 = v35 + 1;
        *((void *)this + 2) = (char *)v35 + v34;
        *((void *)this + 3) = v35;
      }
      *((void *)this + 1) = (char *)v32 + 11;
      unint64_t v49 = (char *)v32;
      *(_DWORD *)((char *)v32 + 7) = 1953384750;
      *unint64_t v32 = *(void *)"Builtin.Int";
      uint64_t v31 = 0xB0000000BLL;
LABEL_78:
      uint64_t v50 = v31;
      swift::Demangle::CharVector::append((unsigned int *)&v49, v14, this);
      unint64_t v36 = v49;
      uint64_t v37 = v50;
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v38 = 2 * *((void *)this + 4);
        if (v38 <= 0x20) {
          unint64_t v38 = 32;
        }
        *((void *)this + 4) = v38;
        unint64_t v39 = v38 + 8;
        int v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *int v40 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v40 + v39;
        *((void *)this + 3) = v40;
      }
      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 20;
      *(unsigned char *)(Node + 18) = 3;
      *(void *)unint64_t Node = v36;
      *(void *)(Node + 8) = v37;
      goto LABEL_46;
    case 'j':
      int v7 = "Builtin.Job";
      size_t v8 = 11;
      goto LABEL_45;
    case 'o':
      int v7 = "Builtin.NativeObject";
LABEL_36:
      size_t v8 = 20;
      goto LABEL_45;
    case 'p':
      int v7 = "Builtin.RawPointer";
LABEL_38:
      size_t v8 = 18;
      goto LABEL_45;
    case 't':
      int v7 = "Builtin.SILToken";
LABEL_40:
      size_t v8 = 16;
      goto LABEL_45;
    case 'v':
      if (v5 >= v1) {
        return 0;
      }
      int v20 = *(unsigned __int8 *)(v6 + v5);
      if (v20 == 95)
      {
LABEL_43:
        unint64_t v4 = 0;
        *((void *)this + 9) = v2 + 2;
        return v4;
      }
      if ((v20 - 48) > 9) {
        return 0;
      }
      signed int v24 = 0;
      break;
    case 'w':
      int v7 = "Builtin.Word";
      size_t v8 = 12;
LABEL_45:
      unint64_t Node = swift::Demangle::NodeFactory::createNode(this, 20, v7, v8);
      if (Node) {
        goto LABEL_46;
      }
      return 0;
    default:
      return v4;
  }
  while (1)
  {
    int v25 = *(unsigned __int8 *)(v6 + v5);
    if ((v25 - 48) > 9) {
      break;
    }
    int v26 = v25 + 10 * v24 - 48;
    if (v26 < v24) {
      return 0;
    }
    unint64_t v4 = 0;
    *((void *)this + 9) = ++v5;
    signed int v24 = v26;
    if (v1 == v5) {
      return v4;
    }
  }
  unint64_t v4 = 0;
  if (v24 < 0 || v5 >= v1 || v25 != 95) {
    return v4;
  }
  *((void *)this + 9) = v5 + 1;
  if ((v24 - 4097) < 0xFFFFF000) {
    return 0;
  }
  int v41 = *((_DWORD *)this + 24);
  if (!v41) {
    return 0;
  }
  int v42 = v41 - 1;
  unint64_t v43 = *(void *)(*((void *)this + 11) + 8 * (v41 - 1));
  if (*(_WORD *)(v43 + 16) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v42;
  int v44 = *(unsigned __int8 *)(v43 + 18);
  if (v44 == 1) {
    goto LABEL_94;
  }
  if (v44 != 5 || *(_DWORD *)(v43 + 8) != 1) {
    return 0;
  }
  unint64_t v43 = *(void *)v43;
LABEL_94:
  unint64_t v4 = *(void *)v43;
  if (*(void *)v43)
  {
    if (*(_WORD *)(v4 + 16) != 20 || *(void *)(v4 + 8) < 8uLL || **(void **)v4 != 0x2E6E69746C697542) {
      return 0;
    }
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    swift::Demangle::CharVector::append(&v49, "Builtin.Vec", 0xBuLL, this);
    swift::Demangle::CharVector::append((unsigned int *)&v49, v24, this);
    char v48 = 120;
    swift::Demangle::Vector<char>::push_back((unsigned int *)&v49, &v48, this);
    unint64_t v45 = *(void *)(v4 + 8);
    uint64_t v46 = 8;
    if (v45 < 8) {
      uint64_t v46 = *(void *)(v4 + 8);
    }
    swift::Demangle::CharVector::append(&v49, (void *)(*(void *)v4 + v46), v45 - v46, this);
    unint64_t Node = swift::Demangle::NodeFactory::createNode(this, 20, (uint64_t *)&v49);
    if (!Node) {
      return 0;
    }
LABEL_46:
    unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v4;
    if (!v4 || v4 + 24 > *((void *)this + 2))
    {
      unint64_t v21 = 2 * *((void *)this + 4);
      if (v21 <= 0x20) {
        unint64_t v21 = 32;
      }
      *((void *)this + 4) = v21;
      unint64_t v22 = v21 + 8;
      unint64_t v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *unint64_t v23 = *((void *)this + 3);
      unint64_t v4 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v23 + v22;
      *((void *)this + 3) = v23;
    }
    *((void *)this + 1) = v4 + 24;
    *(_WORD *)(v4 + 16) = 232;
    *(unsigned char *)(v4 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)Node, this);
  }
  return v4;
}

unint64_t swift::Demangle::Demangler::demangleAnyGenericType(swift::Demangle::Demangler *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 24);
  if (!v4
    || ((unsigned int v5 = v4 - 1,
         uint64_t v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5),
         int v7 = v6[8],
         (v7 - 173) <= 0x3C)
      ? (BOOL v8 = ((1 << (v7 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v8 = 1),
        v8
     && ((v7 - 101) <= 0x24
       ? (BOOL v9 = ((1 << (v7 - 101)) & 0x1000800001) == 0)
       : (BOOL v9 = 1),
         v9 && v7 != 347)))
  {
    uint64_t v6 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v5;
  }
  unint64_t v10 = swift::Demangle::Demangler::popContext(this);
  if (!v6) {
    return 0;
  }
  unint64_t v11 = v10;
  if (!v10) {
    return 0;
  }
  unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (!v12 || v12 + 24 > *((void *)this + 2))
  {
    unint64_t v13 = 2 * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    int v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    int v16 = (char *)v15 + v14;
    *int v15 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = a2;
  *(unsigned char *)(v12 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v12, v11, this);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v12, (swift::Demangle::Node *)v6, this);
  unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v17;
  if (!v17 || v17 + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2 * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    int v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    unint64_t v21 = (char *)v20 + v19;
    *int v20 = *((void *)this + 3);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v21;
    *((void *)this + 3) = v20;
  }
  *((void *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = 232;
  *(unsigned char *)(v17 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v17, (swift::Demangle::Node *)v12, this);
  unint64_t v23 = v17;
  swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v23, this);
  return v17;
}

unint64_t swift::Demangle::Demangler::demangleExtensionContext(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2)
  {
    unsigned int v5 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 11);
  unsigned int v5 = *(swift::Demangle::Node **)(v4 + 8 * (v2 - 1));
  if (*((_WORD *)v5 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v3;
    if (v2 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v3 = *((_DWORD *)this + 24);
  }
  unsigned int v6 = v3 - 1;
  unint64_t v7 = *(void *)(v4 + 8 * v6);
  int v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 == 153)
  {
    *((_DWORD *)this + 24) = v6;
    goto LABEL_12;
  }
  if (v8 != 101) {
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v6;
  unint64_t v7 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v7, 153);
LABEL_12:
  AnyGeneric = swift::Demangle::Demangler::popTypeAndGetAnyGeneric(this);
  unint64_t v10 = 0;
  if (v7)
  {
    unint64_t v11 = (swift::Demangle::Node *)AnyGeneric;
    if (AnyGeneric)
    {
      unint64_t v10 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v10;
      if (!v10 || v10 + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        int v15 = (char *)v14 + v13;
        *unint64_t v14 = *((void *)this + 3);
        unint64_t v10 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v15;
        *((void *)this + 3) = v14;
      }
      *((void *)this + 1) = v10 + 24;
      *(_WORD *)(v10 + 16) = 71;
      *(unsigned char *)(v10 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, (swift::Demangle::Node *)v7, this);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, v11, this);
      if (v5) {
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, v5, this);
      }
    }
  }
  return v10;
}

swift::Demangle::Node *swift::Demangle::Demangler::demanglePlainFunction(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2
    && (unsigned int v3 = v2 - 1, v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v3), *((_WORD *)v4 + 8) == 43))
  {
    *((_DWORD *)this + 24) = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unint64_t v5 = swift::Demangle::Demangler::popFunctionType(this, 82, 0);
  unsigned int v6 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, (swift::Demangle::Node *)v5);
  if (v4 && v5)
  {
    unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v7;
    if (!v7 || v7 + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2 * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      unint64_t v11 = (char *)v10 + v9;
      void *v10 = *((void *)this + 3);
      unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v11;
      *((void *)this + 3) = v10;
    }
    *((void *)this + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = 44;
    *(unsigned char *)(v7 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v4, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, (swift::Demangle::Node *)v5, this);
    unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      int v15 = (char *)v14 + v13;
      *unint64_t v14 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 232;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v5, (swift::Demangle::Node *)v7, this);
  }
  int v16 = *((_DWORD *)this + 24);
  if (!v16
    || ((unsigned int v17 = v16 - 1,
         unint64_t v18 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v17),
         int v19 = v18[8],
         (v19 - 173) <= 0x3C)
      ? (BOOL v20 = ((1 << (v19 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v20 = 1),
        v20
     && ((v19 - 101) <= 0x24
       ? (BOOL v21 = ((1 << (v19 - 101)) & 0x1000800001) == 0)
       : (BOOL v21 = 1),
         v21 && v19 != 347)))
  {
    unint64_t v18 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v17;
  }
  unint64_t v22 = swift::Demangle::Demangler::popContext(this);
  if (v6) {
    unint64_t v23 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 76, v22, (swift::Demangle::Node *)v18, v6, (swift::Demangle::Node *)v5);
  }
  else {
    unint64_t v23 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 76, v22, (swift::Demangle::Node *)v18, (swift::Demangle::Node *)v5);
  }

  return setParentForOpaqueReturnTypeNodes(this, v23, (swift::Demangle::Node *)v5);
}

unint64_t swift::Demangle::Demangler::demangleBoundGenericType(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 2);
  unsigned int v3 = (char *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v3;
  if (v3) {
    BOOL v4 = (unint64_t)(v3 + 32) > v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x28) {
      unint64_t v5 = 40;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    void *v7 = *((void *)this + 3);
    unsigned int v3 = (char *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }
  unsigned int v17 = 0;
  *((void *)this + 1) = v3 + 32;
  v16[0] = v3;
  v16[1] = (const void *)0x400000000;
  unint64_t v8 = 0;
  if (swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, v16, (unint64_t *)&v17))
  {
    AnyGeneric = swift::Demangle::Demangler::popTypeAndGetAnyGeneric(this);
    if (AnyGeneric
      && (unint64_t v10 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBoundGenericArgs(this, (unint64_t)AnyGeneric, (uint64_t)v16, 0)) != 0)
    {
      unint64_t v11 = v10;
      if (v17) {
        swift::Demangle::Node::addChild(v10, v17, this);
      }
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        *unint64_t v14 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v14 + v13;
        *((void *)this + 3) = v14;
      }
      *((void *)this + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 232;
      *(unsigned char *)(v8 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v8, v11, this);
      unint64_t v18 = v8;
      swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v18, this);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

unint64_t swift::Demangle::Demangler::demangleDependentProtocolConformanceAssociated(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
  unsigned int v3 = (swift::Demangle::Node *)swift::Demangle::Demangler::popDependentAssociatedConformance(this);
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1, v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5), v6[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    unint64_t v6 = 0;
  }

  return swift::Demangle::Demangler::createWithChildren(this, 49, (swift::Demangle::Node *)v6, v3, v2);
}

unint64_t swift::Demangle::Demangler::demangleConcreteProtocolConformance(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAnyProtocolConformanceList(this);
  int v3 = *((_DWORD *)this + 24);
  if (v3
    && ((unsigned int v4 = v3 - 1, v5 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v4), v6 = v5[8], v6 == 184) || v6 == 183))
  {
    *((_DWORD *)this + 24) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v5 = (unsigned __int16 *)swift::Demangle::Demangler::demangleRetroactiveProtocolConformanceRef(this);
    unsigned int v4 = *((_DWORD *)this + 24);
    if (!v4) {
      goto LABEL_9;
    }
  }
  unsigned int v7 = v4 - 1;
  unint64_t v8 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v7);
  if (*((_WORD *)v8 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v7;
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v8 = 0;
LABEL_10:

  return swift::Demangle::Demangler::createWithChildren(this, 26, v8, (swift::Demangle::Node *)v5, v2);
}

unint64_t swift::Demangle::Demangler::demangleDependentProtocolConformanceRoot(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
  int v3 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1, v6 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v5), *((_WORD *)v6 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    int v6 = 0;
  }

  return swift::Demangle::Demangler::createWithChildren(this, 47, v6, v3, v2);
}

unint64_t swift::Demangle::Demangler::demangleDependentProtocolConformanceInherited(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
  int v3 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1, v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5), v6[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    int v6 = 0;
  }

  return swift::Demangle::Demangler::createWithChildren(this, 48, (swift::Demangle::Node *)v6, v3, v2);
}

unint64_t swift::Demangle::Demangler::popProtocol(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    goto LABEL_21;
  }
  unsigned int v3 = v2 - 1;
  int v4 = *(uint64_t **)(*((void *)this + 11) + 8 * v3);
  int v5 = *((unsigned __int16 *)v4 + 8);
  uint64_t v6 = (v5 - 173);
  if (v6 > 0x3C)
  {
LABEL_14:
    if ((v5 - 101) <= 0x24 && ((1 << (v5 - 101)) & 0x1000800001) != 0) {
      goto LABEL_18;
    }
    if (v5 == 347)
    {
LABEL_20:
      *((_DWORD *)this + 24) = v3;
      return (unint64_t)v4;
    }
LABEL_21:
    int v4 = 0;
    goto LABEL_22;
  }
  if (((1 << (v5 + 83)) & 0x100000010000000DLL) == 0)
  {
    if (v6 == 8) {
      goto LABEL_20;
    }
    if (v6 == 59)
    {
      *((_DWORD *)this + 24) = v3;
      int v7 = *((unsigned __int8 *)v4 + 18);
      if ((v7 - 1) >= 2 && (v7 != 5 || !*((_DWORD *)v4 + 2))) {
        return 0;
      }
      unsigned __int16 v8 = 232;
      unint64_t v9 = v4;
      while (v8 == 232)
      {
        if (*((unsigned __int8 *)v9 + 18) - 1 >= 2) {
          unint64_t v9 = (uint64_t *)*v9;
        }
        unint64_t v9 = (uint64_t *)*v9;
        unsigned __int16 v8 = *((_WORD *)v9 + 8);
      }
      unsigned int v23 = v8 - 180;
      if (v8 == 347) {
        signed int v24 = v4;
      }
      else {
        signed int v24 = 0;
      }
      if (v23 >= 2) {
        return (unint64_t)v24;
      }
      else {
        return (unint64_t)v4;
      }
    }
    goto LABEL_14;
  }
LABEL_18:
  *((_DWORD *)this + 24) = v3;
LABEL_22:
  unint64_t v12 = swift::Demangle::Demangler::popContext(this);
  unint64_t v11 = 0;
  if (v4)
  {
    unint64_t v13 = v12;
    if (v12)
    {
      unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v14;
      if (!v14 || v14 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2 * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unsigned int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        unint64_t v18 = (char *)v17 + v16;
        void *v17 = *((void *)this + 3);
        unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }
      *((void *)this + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 180;
      *(unsigned char *)(v14 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, v13, this);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, (swift::Demangle::Node *)v4, this);
      unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v11;
      if (!v11 || v11 + 24 > *((void *)this + 2))
      {
        unint64_t v19 = 2 * *((void *)this + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32;
        }
        *((void *)this + 4) = v19;
        unint64_t v20 = v19 + 8;
        BOOL v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *BOOL v21 = *((void *)this + 3);
        unint64_t v11 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v21 + v20;
        *((void *)this + 3) = v21;
      }
      *((void *)this + 1) = v11 + 24;
      *(_WORD *)(v11 + 16) = 232;
      *(unsigned char *)(v11 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, (swift::Demangle::Node *)v14, this);
    }
  }
  return v11;
}

unint64_t swift::Demangle::Demangler::demanglePackProtocolConformance(swift::Demangle::Demangler *this)
{
  unint64_t v2 = swift::Demangle::Demangler::popAnyProtocolConformanceList(this);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = (swift::Demangle::Node *)v2;
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned __int16 v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 27;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v3, this);
  return v4;
}

swift::Demangle::Node *swift::Demangle::Demangler::popProtocolConformance(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2)
  {
    unint64_t v5 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 11);
  unint64_t v5 = *(swift::Demangle::Node **)(v4 + 8 * (v2 - 1));
  if (*((_WORD *)v5 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v3;
    if (v2 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v5 = 0;
    int v3 = *((_DWORD *)this + 24);
  }
  unsigned int v6 = v3 - 1;
  unint64_t v7 = *(void *)(v4 + 8 * v6);
  int v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 != 153)
  {
    if (v8 == 101)
    {
      *((_DWORD *)this + 24) = v6;
      unint64_t v7 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v7, 153);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v6;
LABEL_12:
  unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
  int v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    unint64_t v11 = 0;
    int v12 = v10 - 1;
    uint64_t v13 = *((void *)this + 11);
    unint64_t v14 = *(unsigned __int16 **)(v13 + 8 * (v10 - 1));
    int v15 = v14[8];
    if (v15 == 232) {
      goto LABEL_18;
    }
    if (v15 == 101)
    {
      *((_DWORD *)this + 24) = v12;
      if (v10 == 1)
      {
        unint64_t v16 = 0;
        if (!v5) {
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      unint64_t v11 = v14;
      --v10;
    }
    int v12 = v10 - 1;
    unint64_t v14 = *(unsigned __int16 **)(v13 + 8 * (v10 - 1));
    if (v14[8] == 232)
    {
LABEL_18:
      *((_DWORD *)this + 24) = v12;
      unint64_t v16 = (unint64_t)v14;
      unint64_t v14 = v11;
      if (!v5) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v14 = v11;
      if (!v5) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v14 = 0;
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_25:
  if (v16)
  {
    unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v17;
    if (!v17 || v17 + 24 > *((void *)this + 2))
    {
      unint64_t v18 = 2 * *((void *)this + 4);
      if (v18 <= 0x20) {
        unint64_t v18 = 32;
      }
      *((void *)this + 4) = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v21 = (char *)v20 + v19;
      *unint64_t v20 = *((void *)this + 3);
      unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v21;
      *((void *)this + 3) = v20;
    }
    *((void *)this + 1) = v17 + 24;
    *(_WORD *)(v17 + 16) = 44;
    *(unsigned char *)(v17 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v17, v5, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v17, (swift::Demangle::Node *)v16, this);
    unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v22 = 2 * *((void *)this + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)this + 4) = v22;
      unint64_t v23 = v22 + 8;
      signed int v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *signed int v24 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v24 + v23;
      *((void *)this + 3) = v24;
    }
    *((void *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 232;
    *(unsigned char *)(v16 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v16, (swift::Demangle::Node *)v17, this);
  }
LABEL_37:
  int v25 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 182, (swift::Demangle::Node *)v16, v9, (swift::Demangle::Node *)v7);
  int v26 = v25;
  if (v14 && v25) {
    swift::Demangle::Node::addChild(v25, (swift::Demangle::Node *)v14, this);
  }
  return v26;
}

_WORD *swift::Demangle::Demangler::demangleIdentifier(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v2);
  if ((v5 - 48) > 9) {
    return 0;
  }
  if (v5 == 48)
  {
    *((void *)this + 9) = v2 + 1;
    if (v2 + 1 < v1 && *(unsigned char *)(v4 + v2 + 1) == 48)
    {
      char v6 = 0;
      v2 += 2;
      *((void *)this + 9) = v2;
      int v75 = 1;
    }
    else
    {
      int v75 = 0;
      char v6 = 1;
      ++v2;
    }
  }
  else
  {
    int v75 = 0;
    char v6 = 0;
  }
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  unint64_t v9 = 0;
  do
  {
    if ((v6 & 1) == 0)
    {
      char v10 = 0;
      goto LABEL_40;
    }
    do
    {
      unint64_t v2 = *((void *)this + 9);
      if (v2 >= *((void *)this + 8) || (uint64_t v11 = *((void *)this + 7), (*(unsigned char *)(v11 + v2) & 0xDFu) - 65 > 0x19))
      {
        char v10 = 1;
        goto LABEL_40;
      }
      *((void *)this + 9) = v2 + 1;
      int v12 = *(char *)(v11 + v2);
      unsigned __int8 v13 = v12 - 97;
      if ((v12 - 97) >= 0x1A) {
        int v14 = -65;
      }
      else {
        int v14 = -97;
      }
      int v15 = v14 + v12;
      if (v15 >= *((_DWORD *)this + 134)) {
        return 0;
      }
      unint64_t v16 = (char *)this + 16 * v15;
      unint64_t v18 = (const void *)*((void *)v16 + 15);
      size_t v17 = *((void *)v16 + 16);
      uint64_t v19 = v8;
      size_t v20 = v7;
      if (v17 + v8 > v7)
      {
        __src = v9;
        BOOL v21 = &v9[v7];
        unint64_t v9 = (char *)*((void *)this + 1);
        if (v21 == v9)
        {
          unint64_t v23 = &v21[v17];
          unint64_t v22 = *((void *)this + 2);
          if ((unint64_t)v23 <= v22)
          {
            unsigned int v24 = v7;
            *((void *)this + 1) = v23;
            LODWORD(v26) = v17;
            unint64_t v9 = __src;
LABEL_13:
            unsigned int v7 = v24 + v26;
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v22 = *((void *)this + 2);
        }
        unsigned int v81 = v8;
        unsigned int v24 = v7;
        unint64_t v25 = 2 * v7;
        if (v17 > v25) {
          unint64_t v25 = v17;
        }
        if (v25 <= 4) {
          uint64_t v26 = 4;
        }
        else {
          uint64_t v26 = v25;
        }
        size_t v27 = v26 + v20;
        if (!v9 || (unint64_t)&v9[v27] > v22)
        {
          unint64_t v28 = 2 * *((void *)this + 4);
          if (v28 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          *((void *)this + 4) = v28;
          int v76 = v18;
          unint64_t v29 = v28 + 8;
          unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
          *unint64_t v30 = *((void *)this + 3);
          unint64_t v9 = (char *)(v30 + 1);
          uint64_t v31 = (char *)v30 + v29;
          unint64_t v18 = v76;
          *((void *)this + 2) = v31;
          *((void *)this + 3) = v30;
        }
        *((void *)this + 1) = &v9[v27];
        if (v24) {
          memcpy(v9, __src, v20);
        }
        unsigned int v8 = v81;
        goto LABEL_13;
      }
LABEL_14:
      memcpy(&v9[v19], v18, v17);
      v8 += v17;
    }
    while (v13 < 0x1Au);
    char v10 = 0;
    unint64_t v2 = *((void *)this + 9);
LABEL_40:
    unint64_t v32 = *((void *)this + 8);
    if (v2 >= v32) {
      return 0;
    }
    uint64_t v33 = *((void *)this + 7);
    if (*(unsigned char *)(v33 + v2) == 48)
    {
      *((void *)this + 9) = v2 + 1;
      break;
    }
    if (*(unsigned __int8 *)(v33 + v2) - 48 > 9) {
      return 0;
    }
    LODWORD(v34) = 0;
    while (1)
    {
      int v35 = *(unsigned __int8 *)(v33 + v2);
      if ((v35 - 48) > 9) {
        break;
      }
      int v36 = v35 + 10 * v34 - 48;
      if (v36 < (int)v34) {
        return 0;
      }
      *((void *)this + 9) = ++v2;
      LODWORD(v34) = v36;
      if (v32 == v2)
      {
        unint64_t v2 = v32;
        LODWORD(v34) = v36;
        break;
      }
    }
    if ((int)v34 < 1) {
      return 0;
    }
    char v77 = v10;
    if (!v75)
    {
      uint64_t v37 = v34;
      if (v2 + v34 <= v32)
      {
        uint64_t v42 = v8;
        if (v34 + (unint64_t)v8 > v7)
        {
          __srca = v9;
          unint64_t v43 = &v9[v7];
          unint64_t v9 = (char *)*((void *)this + 1);
          if (v43 != v9)
          {
            unint64_t v44 = *((void *)this + 2);
            goto LABEL_70;
          }
          uint64_t v46 = &v43[v34];
          unint64_t v44 = *((void *)this + 2);
          if ((unint64_t)v46 <= v44)
          {
            *((void *)this + 1) = v46;
            int v51 = v34;
            unint64_t v9 = __srca;
          }
          else
          {
LABEL_70:
            unsigned int v82 = v8;
            LODWORD(v47) = 2 * v7;
            if (v34 > 2 * v7) {
              LODWORD(v47) = v34;
            }
            if (v47 <= 4) {
              uint64_t v47 = 4;
            }
            else {
              uint64_t v47 = v47;
            }
            int v74 = v47;
            uint64_t v48 = v47 + v7;
            if (!v9 || (unint64_t)&v9[v48] > v44)
            {
              unint64_t v49 = 2 * *((void *)this + 4);
              if (v49 <= v48 + 1) {
                unint64_t v49 = v48 + 1;
              }
              *((void *)this + 4) = v49;
              unint64_t v73 = v49 + 8;
              uint64_t v50 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
              *uint64_t v50 = *((void *)this + 3);
              unint64_t v9 = (char *)(v50 + 1);
              *((void *)this + 2) = (char *)v50 + v73;
              *((void *)this + 3) = v50;
            }
            *((void *)this + 1) = &v9[v48];
            if (v7) {
              memcpy(v9, __srca, v7);
            }
            unsigned int v8 = v82;
            int v51 = v74;
          }
          v7 += v51;
        }
        uint64_t v52 = v33 + v2;
        memcpy(&v9[v42], (const void *)(v33 + v2), v34);
        unint64_t v53 = 0;
        unsigned int v54 = -1;
        while (2)
        {
          if (v53 >= v34)
          {
            int v57 = 0;
            if ((v54 & 0x80000000) == 0) {
              goto LABEL_99;
            }
LABEL_86:
            if ((v57 - 58) < 0xFFFFFFF6 && v57 != 95 && v57 != 0) {
              unsigned int v54 = v53;
            }
          }
          else
          {
            int v57 = *(unsigned __int8 *)(v52 + v53);
            if ((v54 & 0x80000000) != 0) {
              goto LABEL_86;
            }
LABEL_99:
            if (!v57
              || v57 == 95
              || (v57 - 65) <= 0x19
              && *(unsigned __int8 *)(v52 + v53 - 1) - 91 <= 0xFFFFFFE5)
            {
              if ((int)(v53 - v54) >= 2)
              {
                uint64_t v58 = *((int *)this + 134);
                if ((int)v58 <= 25)
                {
                  *((_DWORD *)this + 134) = v58 + 1;
                  unint64_t v59 = (char *)this + 16 * v58;
                  *((void *)v59 + 15) = v52 + v54;
                  *((void *)v59 + 16) = v53 - v54;
                }
              }
              unsigned int v54 = -1;
              goto LABEL_86;
            }
          }
          if (v34 + 1 == ++v53)
          {
            char v45 = v77;
            goto LABEL_124;
          }
          continue;
        }
      }
      return 0;
    }
    if (v2 < v32 && *(unsigned char *)(v33 + v2) == 95) {
      *((void *)this + 9) = ++v2;
    }
    uint64_t v37 = v34;
    if (v2 + v34 > v32) {
      return 0;
    }
    long long __p = 0;
    size_t v85 = 0;
    uint64_t v86 = 0;
    if (!swift::Punycode::decodePunycodeUTF8((unsigned __int8 *)(v33 + v2), v34, (uint64_t)&__p))
    {
      if (v86 < 0) {
        operator delete(__p);
      }
      return 0;
    }
    if (v86 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v86 >= 0) {
      size_t v34 = HIBYTE(v86);
    }
    else {
      size_t v34 = v85;
    }
    uint64_t v39 = v8;
    if (v34 + v8 <= v7)
    {
      char v45 = v77;
    }
    else
    {
      int v40 = (char *)*((void *)this + 1);
      if (&v9[v7] != v40)
      {
        unint64_t v41 = *((void *)this + 2);
        goto LABEL_108;
      }
      int v60 = &v9[v7 + v34];
      unint64_t v41 = *((void *)this + 2);
      if ((unint64_t)v60 <= v41)
      {
        *((void *)this + 1) = v60;
        LODWORD(v62) = v34;
      }
      else
      {
LABEL_108:
        unsigned int v83 = v8;
        unint64_t v61 = 2 * v7;
        if (v34 > v61) {
          unint64_t v61 = v34;
        }
        if (v61 <= 4) {
          uint64_t v62 = 4;
        }
        else {
          uint64_t v62 = v61;
        }
        uint64_t v63 = v62 + v7;
        if (!v40 || (unint64_t)&v40[v63] > v41)
        {
          unint64_t v64 = 2 * *((void *)this + 4);
          if (v64 <= v63 + 1) {
            unint64_t v64 = v63 + 1;
          }
          *((void *)this + 4) = v64;
          __srcb = (char *)(v64 + 8);
          int v65 = p_p;
          int v66 = malloc_type_malloc(v64 + 8, 0xD0263BC5uLL);
          p_p = v65;
          *(void *)int v66 = *((void *)this + 3);
          int v40 = (char *)v66 + 8;
          *((void *)this + 2) = &__srcb[(void)v66];
          *((void *)this + 3) = v66;
        }
        *((void *)this + 1) = &v40[v63];
        if (v7)
        {
          unint64_t v67 = p_p;
          memcpy(v40, v9, v7);
          p_p = v67;
        }
        unint64_t v9 = v40;
        unsigned int v8 = v83;
      }
      char v45 = v77;
      v7 += v62;
    }
    memcpy(&v9[v39], p_p, v34);
    if (SHIBYTE(v86) < 0) {
      operator delete(__p);
    }
LABEL_124:
    v8 += v34;
    unint64_t v2 = *((void *)this + 9) + v37;
    *((void *)this + 9) = v2;
    char v6 = 1;
  }
  while ((v45 & 1) != 0);
  if (!v8) {
    return 0;
  }
  int v68 = (_WORD *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v68;
  if (!v68 || (unint64_t)(v68 + 12) > *((void *)this + 2))
  {
    unint64_t v69 = 2 * *((void *)this + 4);
    if (v69 <= 0x20) {
      unint64_t v69 = 32;
    }
    *((void *)this + 4) = v69;
    unint64_t v70 = v69 + 8;
    long long v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
    *long long v71 = *((void *)this + 3);
    int v68 = (_WORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = (char *)v71 + v70;
    *((void *)this + 3) = v71;
  }
  *((void *)this + 1) = v68 + 12;
  v68[8] = 101;
  *((unsigned char *)v68 + 18) = 3;
  *(void *)int v68 = v9;
  *((void *)v68 + 1) = v8;
  long long __p = v68;
  swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&__p, this);
  return v68;
}

unint64_t swift::Demangle::Demangler::demangleImplFunctionType(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v5 + v4;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 115;
  *(unsigned char *)(v2 + 18) = 0;
  unint64_t v7 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 < v7 && *(unsigned char *)(*((void *)this + 7) + v6) == 115)
  {
    *((void *)this + 9) = v6 + 1;
    v137 = 0;
    uint64_t v138 = 0;
    unint64_t v136 = 0;
    if (!swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v137, (unint64_t *)&v136))return 0; {
    int v8 = *((_DWORD *)this + 24);
    }
    if (!v8) {
      return 0;
    }
    unsigned int v9 = v8 - 1;
    char v10 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v9);
    if (*((_WORD *)v10 + 8) != 43) {
      return 0;
    }
    *((_DWORD *)this + 24) = v9;
    unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v11;
    if (!v11 || v11 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *int v14 = *((void *)this + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 119;
    *(unsigned char *)(v11 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v10, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, *v137, this);
    if (v136) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v136, this);
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v11, this);
    unint64_t v7 = *((void *)this + 8);
    unint64_t v6 = *((void *)this + 9);
  }
  if (v6 < v7 && *(unsigned char *)(*((void *)this + 7) + v6) == 73)
  {
    *((void *)this + 9) = v6 + 1;
    v137 = 0;
    uint64_t v138 = 0;
    unint64_t v136 = 0;
    if (!swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v137, (unint64_t *)&v136))return 0; {
    unint64_t v15 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 1) = v15;
    if (!v15 || v15 + 24 > *((void *)this + 2))
    {
      unint64_t v16 = 2 * *((void *)this + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32;
      }
      *((void *)this + 4) = v16;
      unint64_t v17 = v16 + 8;
      unint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      *unint64_t v18 = *((void *)this + 3);
      unint64_t v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v18 + v17;
      *((void *)this + 3) = v18;
    }
    *((void *)this + 1) = v15 + 24;
    *(_WORD *)(v15 + 16) = 116;
    *(unsigned char *)(v15 + 18) = 0;
    if (v138 != 1) {
      return 0;
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v15, *v137, this);
    if (v136) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v15, v136, this);
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v15, this);
  }
  int v19 = *((_DWORD *)this + 24);
  if (v19 && (unsigned int v20 = v19 - 1, v21 = *(void *)(*((void *)this + 11) + 8 * v20), *(_WORD *)(v21 + 16) == 43))
  {
    *((_DWORD *)this + 24) = v20;
    unint64_t v22 = *((void *)this + 9);
    if (v22 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v22) == 80)
    {
      *((void *)this + 9) = v22 + 1;
      unint64_t v21 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v21, 46);
    }
  }
  else
  {
    unint64_t v21 = 0;
  }
  unint64_t v24 = *((void *)this + 8);
  unint64_t v23 = *((void *)this + 9);
  if (v23 < v24 && *(unsigned char *)(*((void *)this + 7) + v23) == 101)
  {
    *((void *)this + 9) = v23 + 1;
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *unint64_t v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 105;
    *(unsigned char *)(v25 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v25, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 < v24 && *(unsigned char *)(*((void *)this + 7) + v23) == 65)
  {
    *((void *)this + 9) = v23 + 1;
    unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v29;
    if (!v29 || v29 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2 * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      unint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      *unint64_t v32 = *((void *)this + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v32 + v31;
      *((void *)this + 3) = v32;
    }
    *((void *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 108;
    *(unsigned char *)(v29 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v29, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 >= v24) {
    int v33 = 0;
  }
  else {
    int v33 = *(unsigned __int8 *)(*((void *)this + 7) + v23);
  }
  HIDWORD(v34) = v33;
  LODWORD(v34) = (v33 << 24) - 1677721600;
  unsigned int v35 = (v34 >> 25);
  if (v35 <= 7 && ((1 << v35) & 0x93) != 0)
  {
    if (v23 >= v24)
    {
      char v36 = 0;
    }
    else
    {
      *((void *)this + 9) = v23 + 1;
      char v36 = *(unsigned char *)(*((void *)this + 7) + v23);
    }
    uint64_t v37 = v36;
    unint64_t v38 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v38;
    if (!v38 || v38 + 24 > *((void *)this + 2))
    {
      unint64_t v39 = 2 * *((void *)this + 4);
      if (v39 <= 0x20) {
        unint64_t v39 = 32;
      }
      *((void *)this + 4) = v39;
      unint64_t v40 = v39 + 8;
      unint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      *unint64_t v41 = *((void *)this + 3);
      unint64_t v38 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v41 + v40;
      *((void *)this + 3) = v41;
    }
    *((void *)this + 1) = v38 + 24;
    *(_WORD *)(v38 + 16) = 107;
    *(unsigned char *)(v38 + 18) = 4;
    *(void *)unint64_t v38 = v37;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v38, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 >= v24) {
    return 0;
  }
  unint64_t v42 = 0;
  *((void *)this + 9) = v23 + 1;
  unint64_t v43 = "@callee_unowned";
  switch(*(unsigned char *)(*((void *)this + 7) + v23))
  {
    case 'g':
      unint64_t v43 = "@callee_guaranteed";
      goto LABEL_72;
    case 't':
      unint64_t v43 = "@convention(thin)";
      goto LABEL_72;
    case 'x':
      unint64_t v43 = "@callee_owned";
      goto LABEL_72;
    case 'y':
LABEL_72:
      unint64_t v44 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v44;
      unint64_t v135 = (swift::Demangle::Node *)v2;
      if (!v44 || v44 + 24 > *((void *)this + 2))
      {
        unint64_t v45 = 2 * *((void *)this + 4);
        if (v45 <= 0x20) {
          unint64_t v45 = 32;
        }
        *((void *)this + 4) = v45;
        unint64_t v46 = v45 + 8;
        uint64_t v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        *uint64_t v47 = *((void *)this + 3);
        unint64_t v44 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v48 = (char *)v47 + v46;
        unint64_t v2 = (unint64_t)v135;
        *((void *)this + 2) = v48;
        *((void *)this + 3) = v47;
      }
      *((void *)this + 1) = v44 + 24;
      size_t v49 = strlen(v43);
      *(_WORD *)(v44 + 16) = 106;
      *(unsigned char *)(v44 + 18) = 3;
      *(void *)unint64_t v44 = v43;
      *(void *)(v44 + 8) = v49;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v44, this);
      unint64_t v50 = *((void *)this + 8);
      unint64_t v51 = *((void *)this + 9);
      if (v51 < v50)
      {
        unint64_t v52 = v51 + 1;
        *((void *)this + 9) = v51 + 1;
        uint64_t v53 = *((void *)this + 7);
        int v54 = 0;
        __int16 v55 = "block";
        switch(*(unsigned char *)(v53 + v51))
        {
          case 'B':
            goto LABEL_89;
          case 'C':
            int v54 = 0;
            goto LABEL_80;
          case 'K':
            int v54 = 0;
            __int16 v55 = "closure";
            goto LABEL_89;
          case 'M':
            int v54 = 0;
            __int16 v55 = "method";
            goto LABEL_89;
          case 'O':
            int v54 = 0;
            __int16 v55 = "objc_method";
            goto LABEL_89;
          case 'W':
            int v54 = 0;
            __int16 v55 = "witness_method";
            goto LABEL_89;
          case 'z':
            if (v52 >= v50) {
              goto LABEL_220;
            }
            unint64_t v133 = v51 + 2;
            *((void *)this + 9) = v133;
            int v134 = *(char *)(v53 + v52);
            if (v134 == 66)
            {
              int v54 = 1;
            }
            else
            {
              unint64_t v52 = v133;
              if (v134 != 67)
              {
LABEL_220:
                unint64_t v56 = v52 - 2;
                goto LABEL_83;
              }
              int v54 = 1;
LABEL_80:
              __int16 v55 = "c";
            }
LABEL_89:
            unint64_t v57 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v57;
            if (!v57 || (unint64_t v58 = *((void *)this + 2), v57 + 24 > v58))
            {
              unint64_t v59 = 2 * *((void *)this + 4);
              if (v59 <= 0x20) {
                unint64_t v59 = 32;
              }
              *((void *)this + 4) = v59;
              unint64_t v60 = v59 + 8;
              unint64_t v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
              *unint64_t v61 = *((void *)this + 3);
              unint64_t v57 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v58 = (unint64_t)v61 + v60;
              *((void *)this + 2) = (char *)v61 + v60;
              *((void *)this + 3) = v61;
            }
            *(_WORD *)(v57 + 16) = 113;
            *(unsigned char *)(v57 + 18) = 0;
            unint64_t v62 = (v57 + 31) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v62;
            if (!v62 || v62 + 24 > v58)
            {
              unint64_t v63 = 2 * *((void *)this + 4);
              if (v63 <= 0x20) {
                unint64_t v63 = 32;
              }
              *((void *)this + 4) = v63;
              unint64_t v64 = v63 + 8;
              int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
              *int v65 = *((void *)this + 3);
              unint64_t v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v65 + v64;
              *((void *)this + 3) = v65;
            }
            *((void *)this + 1) = v62 + 24;
            size_t v66 = strlen(v55);
            *(_WORD *)(v62 + 16) = 114;
            *(unsigned char *)(v62 + 18) = 3;
            *(void *)unint64_t v62 = v55;
            *(void *)(v62 + 8) = v66;
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v57, (swift::Demangle::Node *)v62, this);
            if (v54)
            {
              unint64_t v67 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleClangType(this);
              if (v67) {
                swift::Demangle::Node::addChild((swift::Demangle::Node *)v57, v67, this);
              }
            }
            unint64_t v2 = (unint64_t)v135;
            swift::Demangle::Node::addChild(v135, (swift::Demangle::Node *)v57, this);
            unint64_t v50 = *((void *)this + 8);
            unint64_t v56 = *((void *)this + 9);
            if (v56 < v50) {
              goto LABEL_103;
            }
            goto LABEL_113;
          default:
            goto LABEL_82;
        }
      }
      unint64_t v52 = *((void *)this + 9);
LABEL_82:
      unint64_t v56 = v52 - 1;
LABEL_83:
      *((void *)this + 9) = v56;
      if (v56 >= v50) {
        goto LABEL_113;
      }
LABEL_103:
      int v68 = *(unsigned __int8 *)(*((void *)this + 7) + v56);
      if (v68 == 65)
      {
        unint64_t v69 = "@yield_once";
      }
      else
      {
        if (v68 != 71) {
          goto LABEL_113;
        }
        unint64_t v69 = "@yield_many";
      }
      *((void *)this + 9) = v56 + 1;
      unint64_t v70 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v70;
      if (!v70 || v70 + 24 > *((void *)this + 2))
      {
        unint64_t v71 = 2 * *((void *)this + 4);
        if (v71 <= 0x20) {
          unint64_t v71 = 32;
        }
        *((void *)this + 4) = v71;
        unint64_t v72 = v71 + 8;
        unint64_t v73 = malloc_type_malloc(v71 + 8, 0xD0263BC5uLL);
        *unint64_t v73 = *((void *)this + 3);
        unint64_t v70 = ((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v73 + v72;
        *((void *)this + 3) = v73;
      }
      *((void *)this + 1) = v70 + 24;
      *(_WORD *)(v70 + 16) = 112;
      *(unsigned char *)(v70 + 18) = 3;
      *(void *)unint64_t v70 = v69;
      *(void *)(v70 + 8) = 11;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v70, this);
      unint64_t v50 = *((void *)this + 8);
      unint64_t v56 = *((void *)this + 9);
LABEL_113:
      if (v56 < v50 && *(unsigned char *)(*((void *)this + 7) + v56) == 104)
      {
        *((void *)this + 9) = v56 + 1;
        unint64_t v74 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v74;
        if (!v74 || v74 + 24 > *((void *)this + 2))
        {
          unint64_t v75 = 2 * *((void *)this + 4);
          if (v75 <= 0x20) {
            unint64_t v75 = 32;
          }
          *((void *)this + 4) = v75;
          unint64_t v76 = v75 + 8;
          char v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
          *char v77 = *((void *)this + 3);
          unint64_t v74 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v77 + v76;
          *((void *)this + 3) = v77;
        }
        *((void *)this + 1) = v74 + 24;
        *(_WORD *)(v74 + 16) = 112;
        *(unsigned char *)(v74 + 18) = 3;
        *(void *)unint64_t v74 = "@Sendable";
        *(void *)(v74 + 8) = 9;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v74, this);
        unint64_t v50 = *((void *)this + 8);
        unint64_t v56 = *((void *)this + 9);
      }
      if (v56 < v50 && *(unsigned char *)(*((void *)this + 7) + v56) == 72)
      {
        *((void *)this + 9) = v56 + 1;
        unint64_t v78 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v78;
        if (!v78 || v78 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2 * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unsigned int v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          *unsigned int v81 = *((void *)this + 3);
          unint64_t v78 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v81 + v80;
          *((void *)this + 3) = v81;
        }
        *((void *)this + 1) = v78 + 24;
        *(_WORD *)(v78 + 16) = 112;
        *(unsigned char *)(v78 + 18) = 3;
        *(void *)unint64_t v78 = "@async";
        *(void *)(v78 + 8) = 6;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v78, this);
      }
      if (v21) {
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v21, this);
      }
      unint64_t v82 = swift::Demangle::Demangler::demangleImplParamConvention(this, 118);
      if (v82)
      {
        unsigned int v83 = (swift::Demangle::Node *)v82;
        int v84 = 0;
        do
        {
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v83, this);
          unint64_t v89 = *((void *)this + 9);
          long long v90 = (const char *)&unk_215276E75;
          if (v89 < *((void *)this + 8))
          {
            long long v90 = (const char *)&unk_215276E75;
            if (*(unsigned char *)(*((void *)this + 7) + v89) == 119)
            {
              *((void *)this + 9) = v89 + 1;
              long long v90 = "@noDerivative";
            }
          }
          unint64_t v91 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v91;
          if (!v91 || v91 + 24 > *((void *)this + 2))
          {
            unint64_t v92 = 2 * *((void *)this + 4);
            if (v92 <= 0x20) {
              unint64_t v92 = 32;
            }
            *((void *)this + 4) = v92;
            unint64_t v93 = v92 + 8;
            int v94 = malloc_type_malloc(v92 + 8, 0xD0263BC5uLL);
            void *v94 = *((void *)this + 3);
            unint64_t v91 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v95 = (char *)v94 + v93;
            unint64_t v2 = (unint64_t)v135;
            *((void *)this + 2) = v95;
            *((void *)this + 3) = v94;
          }
          *((void *)this + 1) = v91 + 24;
          size_t v96 = strlen(v90);
          *(_WORD *)(v91 + 16) = 110;
          *(unsigned char *)(v91 + 18) = 3;
          *(void *)unint64_t v91 = v90;
          *(void *)(v91 + 8) = v96;
          swift::Demangle::Node::addChild(v83, (swift::Demangle::Node *)v91, this);
          unint64_t v97 = *((void *)this + 9);
          if (v97 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v97) == 84)
          {
            *((void *)this + 9) = v97 + 1;
            unint64_t v88 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v88;
            if (!v88 || v88 + 24 > *((void *)this + 2))
            {
              unint64_t v85 = 2 * *((void *)this + 4);
              if (v85 <= 0x20) {
                unint64_t v85 = 32;
              }
              *((void *)this + 4) = v85;
              unint64_t v86 = v85 + 8;
              unint64_t v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
              *unint64_t v87 = *((void *)this + 3);
              unint64_t v88 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v87 + v86;
              *((void *)this + 3) = v87;
            }
            *((void *)this + 1) = v88 + 24;
            *(_WORD *)(v88 + 16) = 111;
            *(unsigned char *)(v88 + 18) = 3;
            *(void *)unint64_t v88 = "sending";
            *(void *)(v88 + 8) = 7;
            swift::Demangle::Node::addChild(v83, (swift::Demangle::Node *)v88, this);
          }
          ++v84;
          unsigned int v83 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplParamConvention(this, 118);
        }
        while (v83);
      }
      else
      {
        int v84 = 0;
      }
      unint64_t v98 = *((void *)this + 9);
      if (v98 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v98) == 84)
      {
        *((void *)this + 9) = v98 + 1;
        unint64_t v99 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v99;
        if (!v99 || v99 + 24 > *((void *)this + 2))
        {
          unint64_t v100 = 2 * *((void *)this + 4);
          if (v100 <= 0x20) {
            unint64_t v100 = 32;
          }
          *((void *)this + 4) = v100;
          unint64_t v101 = v100 + 8;
          unint64_t v102 = malloc_type_malloc(v100 + 8, 0xD0263BC5uLL);
          *unint64_t v102 = *((void *)this + 3);
          unint64_t v99 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v102 + v101;
          *((void *)this + 3) = v102;
        }
        *((void *)this + 1) = v99 + 24;
        *(_WORD *)(v99 + 16) = 109;
        *(unsigned char *)(v99 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v99, this);
      }
      unint64_t v103 = swift::Demangle::Demangler::demangleImplResultConvention(this, 120);
      if (v103)
      {
        unint64_t v104 = (swift::Demangle::Node *)v103;
        do
        {
          if (v2) {
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v104, this);
          }
          unint64_t v111 = *((void *)this + 9);
          v112 = (const char *)&unk_215276E75;
          if (v111 < *((void *)this + 8))
          {
            v112 = (const char *)&unk_215276E75;
            if (*(unsigned char *)(*((void *)this + 7) + v111) == 119)
            {
              *((void *)this + 9) = v111 + 1;
              v112 = "@noDerivative";
            }
          }
          unint64_t v108 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v108;
          if (!v108 || v108 + 24 > *((void *)this + 2))
          {
            unint64_t v105 = 2 * *((void *)this + 4);
            if (v105 <= 0x20) {
              unint64_t v105 = 32;
            }
            *((void *)this + 4) = v105;
            unint64_t v106 = v105 + 8;
            unint64_t v107 = malloc_type_malloc(v105 + 8, 0xD0263BC5uLL);
            *unint64_t v107 = *((void *)this + 3);
            unint64_t v108 = ((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v109 = (char *)v107 + v106;
            unint64_t v2 = (unint64_t)v135;
            *((void *)this + 2) = v109;
            *((void *)this + 3) = v107;
          }
          *((void *)this + 1) = v108 + 24;
          size_t v110 = strlen(v112);
          *(_WORD *)(v108 + 16) = 110;
          *(unsigned char *)(v108 + 18) = 3;
          *(void *)unint64_t v108 = v112;
          *(void *)(v108 + 8) = v110;
          swift::Demangle::Node::addChild(v104, (swift::Demangle::Node *)v108, this);
          ++v84;
          unint64_t v104 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplResultConvention(this, 120);
        }
        while (v104);
      }
      unint64_t v114 = *((void *)this + 8);
      unint64_t v113 = *((void *)this + 9);
      if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 89) {
        goto LABEL_182;
      }
      int v115 = v84 + 1;
      break;
    default:
      return v42;
  }
  do
  {
    int v84 = v115;
    *((void *)this + 9) = v113 + 1;
    v116 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplParamConvention(this, 121);
    if (!v116) {
      return 0;
    }
    if (v2) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v116, this);
    }
    unint64_t v114 = *((void *)this + 8);
    unint64_t v113 = *((void *)this + 9);
    if (v113 >= v114) {
      break;
    }
    int v115 = v84 + 1;
  }
  while (*(unsigned char *)(*((void *)this + 7) + v113) == 89);
LABEL_182:
  if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 122) {
    goto LABEL_188;
  }
  *((void *)this + 9) = v113 + 1;
  int v117 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplResultConvention(this, 122);
  if (!v117) {
    return 0;
  }
  if (v2) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v117, this);
  }
  ++v84;
  unint64_t v114 = *((void *)this + 8);
  unint64_t v113 = *((void *)this + 9);
LABEL_188:
  if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 95) {
    return 0;
  }
  *((void *)this + 9) = v113 + 1;
  if (v84 >= 1)
  {
    unint64_t v118 = 0;
    uint64_t v119 = 0;
    do
    {
      int v121 = *((_DWORD *)this + 24);
      if (!v121) {
        return 0;
      }
      unsigned int v122 = v121 - 1;
      int v123 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v122);
      if (*((_WORD *)v123 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v122;
      int v124 = *(unsigned __int8 *)(v2 + 18);
      switch(v124)
      {
        case 5:
          unint64_t v126 = *(unsigned int *)(v2 + 8);
          unint64_t v125 = v126 + ~v119;
          if (v126 > v125) {
            goto LABEL_204;
          }
          break;
        case 2:
          unint64_t v125 = 1 - v119;
          if ((unint64_t)(1 - v119) < 2) {
            goto LABEL_204;
          }
          break;
        case 1:
          unint64_t v125 = v118;
          if (!v118)
          {
LABEL_204:
            unsigned int v127 = v124 - 1;
            unint64_t v128 = v2;
            if (v127 >= 2) {
              unint64_t v128 = *(void *)v2;
            }
            unint64_t v120 = *(swift::Demangle::Node **)(v128 + 8 * v125);
            goto LABEL_193;
          }
          break;
      }
      unint64_t v120 = 0;
LABEL_193:
      swift::Demangle::Node::addChild(v120, v123, this);
      ++v119;
      --v118;
    }
    while (-(uint64_t)v84 != v118);
  }
  if (!v2) {
    return 0;
  }
  unint64_t v42 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v42;
  if (!v42 || v42 + 24 > *((void *)this + 2))
  {
    unint64_t v129 = 2 * *((void *)this + 4);
    if (v129 <= 0x20) {
      unint64_t v129 = 32;
    }
    *((void *)this + 4) = v129;
    unint64_t v130 = v129 + 8;
    unint64_t v131 = malloc_type_malloc(v129 + 8, 0xD0263BC5uLL);
    *unint64_t v131 = *((void *)this + 3);
    unint64_t v42 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v131 + v130;
    *((void *)this + 3) = v131;
  }
  *((void *)this + 1) = v42 + 24;
  *(_WORD *)(v42 + 16) = 232;
  *(unsigned char *)(v42 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v42, (swift::Demangle::Node *)v2, this);
  return v42;
}

unint64_t swift::Demangle::Demangler::demangleLocalIdentifier(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    goto LABEL_18;
  }
  uint64_t v3 = *((void *)this + 7);
  unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
  if (v4 == 108)
  {
    *((void *)this + 9) = v2 + 1;
    int v9 = *((_DWORD *)this + 24);
    if (v9)
    {
      unsigned int v10 = v9 - 1;
      unint64_t v11 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v10);
      if (*((_WORD *)v11 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v10;
        unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v12;
        if (!v12 || v12 + 24 > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          unint64_t v16 = (char *)v15 + v14;
          *unint64_t v15 = *((void *)this + 3);
          unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v16;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = v12 + 24;
        *(_WORD *)(v12 + 16) = 176;
        *(unsigned char *)(v12 + 18) = 0;
        unint64_t v17 = (swift::Demangle::Node *)v12;
        unint64_t v18 = v11;
        goto LABEL_38;
      }
    }
    return 0;
  }
  if (v4 == 76)
  {
    *((void *)this + 9) = v2 + 1;
    int v5 = *((_DWORD *)this + 24);
    if (v5)
    {
      uint64_t v6 = (v5 - 1);
      uint64_t v7 = *((void *)this + 11);
      int v8 = *(swift::Demangle::Node **)(v7 + 8 * v6);
      if (*((_WORD *)v8 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v6;
        if (v5 == 1) {
          return 0;
        }
        uint64_t v6 = (v5 - 2);
      }
      else
      {
        int v8 = 0;
      }
      unint64_t v22 = *(unsigned __int16 **)(v7 + 8 * v6);
      int v35 = v22[8];
      BOOL v36 = (v35 - 173) > 0x3C || ((1 << (v35 + 83)) & 0x100000010000010DLL) == 0;
      if (!v36
        || ((v35 - 101) <= 0x24
          ? (BOOL v37 = ((1 << (v35 - 101)) & 0x1000800001) == 0)
          : (BOOL v37 = 1),
            !v37 || v35 == 347))
      {
        *((_DWORD *)this + 24) = v6;
        if (v8)
        {
          unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v12;
          if (!v12 || v12 + 24 > *((void *)this + 2))
          {
            unint64_t v38 = 2 * *((void *)this + 4);
            if (v38 <= 0x20) {
              unint64_t v38 = 32;
            }
            *((void *)this + 4) = v38;
            unint64_t v39 = v38 + 8;
            unint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
            unint64_t v41 = (char *)v40 + v39;
            *unint64_t v40 = *((void *)this + 3);
            unint64_t v12 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = v40;
          }
          *((void *)this + 1) = v12 + 24;
          __int16 v30 = 176;
LABEL_37:
          *(_WORD *)(v12 + 16) = v30;
          *(unsigned char *)(v12 + 18) = 0;
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v12, v8, this);
          unint64_t v17 = (swift::Demangle::Node *)v12;
          unint64_t v18 = (swift::Demangle::Node *)v22;
LABEL_38:
          swift::Demangle::Node::addChild(v17, v18, this);
          return v12;
        }
      }
    }
    return 0;
  }
  if ((char)v4 < 97)
  {
    if (v4 - 65 <= 9) {
      goto LABEL_40;
    }
LABEL_18:
    unint64_t v19 = swift::Demangle::Demangler::demangleIndexAsNode(this);
    int v20 = *((_DWORD *)this + 24);
    if (v20)
    {
      int v8 = (swift::Demangle::Node *)v19;
      unsigned int v21 = v20 - 1;
      unint64_t v22 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v21);
      int v23 = v22[8];
      BOOL v24 = (v23 - 173) > 0x3C || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0;
      if (!v24
        || ((v23 - 101) <= 0x24
          ? (BOOL v25 = ((1 << (v23 - 101)) & 0x1000800001) == 0)
          : (BOOL v25 = 1),
            !v25 || v23 == 347))
      {
        *((_DWORD *)this + 24) = v21;
        if (v19)
        {
          unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v12;
          if (!v12 || v12 + 24 > *((void *)this + 2))
          {
            unint64_t v26 = 2 * *((void *)this + 4);
            if (v26 <= 0x20) {
              unint64_t v26 = 32;
            }
            *((void *)this + 4) = v26;
            unint64_t v27 = v26 + 8;
            unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
            unint64_t v29 = (char *)v28 + v27;
            *unint64_t v28 = *((void *)this + 3);
            unint64_t v12 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v29;
            *((void *)this + 3) = v28;
          }
          *((void *)this + 1) = v12 + 24;
          __int16 v30 = 137;
          goto LABEL_37;
        }
      }
    }
    return 0;
  }
  if (v4 >= 0x6B) {
    goto LABEL_18;
  }
LABEL_40:
  *((void *)this + 9) = v2 + 1;
  char __src = *(unsigned char *)(v3 + v2);
  unint64_t v31 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this, 101, &__src, 1uLL);
  int v32 = *((_DWORD *)this + 24);
  if (v32)
  {
    unsigned int v33 = v32 - 1;
    unint64_t v34 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v33);
    *((_DWORD *)this + 24) = v33;
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v43;
  if (!v43 || v43 + 24 > *((void *)this + 2))
  {
    unint64_t v44 = 2 * *((void *)this + 4);
    if (v44 <= 0x20) {
      unint64_t v44 = 32;
    }
    *((void *)this + 4) = v44;
    unint64_t v45 = v44 + 8;
    unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
    uint64_t v47 = (char *)v46 + v45;
    *unint64_t v46 = *((void *)this + 3);
    unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v47;
    *((void *)this + 3) = v46;
  }
  *((void *)this + 1) = v43 + 24;
  *(_WORD *)(v43 + 16) = 205;
  *(unsigned char *)(v43 + 18) = 0;
  if (v31 && v43) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v43, v31, this);
  }
  unint64_t v12 = 0;
  if (v34 && v43)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v43, v34, this);
    return v43;
  }
  return v12;
}

unint64_t swift::Demangle::Demangler::demangleMetatype(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 < *((void *)this + 8))
  {
    unint64_t v3 = 0;
    *((void *)this + 9) = v1 + 1;
    switch(*(unsigned char *)(*((void *)this + 7) + v1))
    {
      case 'A':
        unsigned int v4 = swift::Demangle::Demangler::popProtocolConformance(this);
        if (!v4) {
          return 0;
        }
        int v5 = v4;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v6 = 2 * *((void *)this + 4);
          if (v6 <= 0x20) {
            unint64_t v6 = 32;
          }
          *((void *)this + 4) = v6;
          unint64_t v7 = v6 + 8;
          int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
          int v9 = (char *)v8 + v7;
          void *v8 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v9;
          *((void *)this + 3) = v8;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 260;
        goto LABEL_293;
      case 'B':
        int v11 = *((_DWORD *)this + 24);
        if (!v11) {
          return 0;
        }
        unsigned int v12 = v11 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v12);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v12;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          unint64_t v16 = (char *)v15 + v14;
          *unint64_t v15 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v16;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 258;
        goto LABEL_293;
      case 'C':
        int v17 = *((_DWORD *)this + 24);
        if (!v17) {
          return 0;
        }
        unsigned int v18 = v17 - 1;
        unint64_t v19 = *(uint64_t **)(*((void *)this + 11) + 8 * v18);
        if (*((_WORD *)v19 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v18;
        int v20 = *((unsigned __int8 *)v19 + 18);
        unsigned int v21 = (swift::Demangle::Node *)v19;
        if ((v20 - 1) >= 2) {
          unsigned int v21 = (swift::Demangle::Node *)*v19;
        }
          return 0;
        if ((v20 - 1) < 2) {
          goto LABEL_27;
        }
        if (v20 == 5 && *((_DWORD *)v19 + 2))
        {
          unint64_t v19 = (uint64_t *)*v19;
LABEL_27:
          unint64_t v22 = (swift::Demangle::Node *)*v19;
        }
        else
        {
          unint64_t v22 = 0;
        }
        return swift::Demangle::Demangler::createWithChild(this, 261, v22);
      case 'D':
        int v23 = *((_DWORD *)this + 24);
        if (!v23) {
          return 0;
        }
        unsigned int v24 = v23 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v24);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v24;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v25 = 2 * *((void *)this + 4);
          if (v25 <= 0x20) {
            unint64_t v25 = 32;
          }
          *((void *)this + 4) = v25;
          unint64_t v26 = v25 + 8;
          unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
          unint64_t v28 = (char *)v27 + v26;
          *unint64_t v27 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v28;
          *((void *)this + 3) = v27;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 243;
        goto LABEL_293;
      case 'F':
        int v29 = *((_DWORD *)this + 24);
        if (!v29) {
          return 0;
        }
        unsigned int v30 = v29 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v30);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v30;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v31 = 2 * *((void *)this + 4);
          if (v31 <= 0x20) {
            unint64_t v31 = 32;
          }
          *((void *)this + 4) = v31;
          unint64_t v32 = v31 + 8;
          unsigned int v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          unint64_t v34 = (char *)v33 + v32;
          *unsigned int v33 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v34;
          *((void *)this + 3) = v33;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 259;
        goto LABEL_293;
      case 'I':
        int v35 = *((_DWORD *)this + 24);
        if (!v35) {
          return 0;
        }
        unsigned int v36 = v35 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v36);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v36;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v37 = 2 * *((void *)this + 4);
          if (v37 <= 0x20) {
            unint64_t v37 = 32;
          }
          *((void *)this + 4) = v37;
          unint64_t v38 = v37 + 8;
          unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
          unint64_t v40 = (char *)v39 + v38;
          *unint64_t v39 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v40;
          *((void *)this + 3) = v39;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 240;
        goto LABEL_293;
      case 'J':
        int v41 = *((_DWORD *)this + 24);
        if (!v41) {
          return 0;
        }
        unsigned int v42 = v41 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v42);
        *((_DWORD *)this + 24) = v42;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v43 = 2 * *((void *)this + 4);
          if (v43 <= 0x20) {
            unint64_t v43 = 32;
          }
          *((void *)this + 4) = v43;
          unint64_t v44 = v43 + 8;
          unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
          unint64_t v46 = (char *)v45 + v44;
          *unint64_t v45 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v46;
          *((void *)this + 3) = v45;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 314;
        goto LABEL_293;
      case 'K':
        int v47 = *((_DWORD *)this + 24);
        if (!v47) {
          return 0;
        }
        unsigned int v48 = v47 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v48);
        *((_DWORD *)this + 24) = v48;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v49 = 2 * *((void *)this + 4);
          if (v49 <= 0x20) {
            unint64_t v49 = 32;
          }
          *((void *)this + 4) = v49;
          unint64_t v50 = v49 + 8;
          unint64_t v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
          unint64_t v52 = (char *)v51 + v50;
          void *v51 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v52;
          *((void *)this + 3) = v51;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 312;
        goto LABEL_293;
      case 'L':
        int v53 = *((_DWORD *)this + 24);
        if (!v53) {
          return 0;
        }
        unsigned int v54 = v53 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v54);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v54;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v55 = 2 * *((void *)this + 4);
          if (v55 <= 0x20) {
            unint64_t v55 = 32;
          }
          *((void *)this + 4) = v55;
          unint64_t v56 = v55 + 8;
          unint64_t v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
          unint64_t v58 = (char *)v57 + v56;
          *unint64_t v57 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v58;
          *((void *)this + 3) = v57;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 244;
        goto LABEL_293;
      case 'M':
        int v59 = *((_DWORD *)this + 24);
        if (!v59) {
          return 0;
        }
        unsigned int v60 = v59 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v60);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v60;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v61 = 2 * *((void *)this + 4);
          if (v61 <= 0x20) {
            unint64_t v61 = 32;
          }
          *((void *)this + 4) = v61;
          unint64_t v62 = v61 + 8;
          unint64_t v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          unint64_t v64 = (char *)v63 + v62;
          *unint64_t v63 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v64;
          *((void *)this + 3) = v63;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 310;
        goto LABEL_293;
      case 'N':
        int v65 = *((_DWORD *)this + 24);
        if (!v65) {
          return 0;
        }
        unsigned int v66 = v65 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v66);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v66;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v67 = 2 * *((void *)this + 4);
          if (v67 <= 0x20) {
            unint64_t v67 = 32;
          }
          *((void *)this + 4) = v67;
          unint64_t v68 = v67 + 8;
          unint64_t v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
          unint64_t v70 = (char *)v69 + v68;
          *unint64_t v69 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v70;
          *((void *)this + 3) = v69;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 313;
        goto LABEL_293;
      case 'P':
        int v71 = *((_DWORD *)this + 24);
        if (!v71) {
          return 0;
        }
        unsigned int v72 = v71 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v72);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v72;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v73 = 2 * *((void *)this + 4);
          if (v73 <= 0x20) {
            unint64_t v73 = 32;
          }
          *((void *)this + 4) = v73;
          unint64_t v74 = v73 + 8;
          unint64_t v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
          unint64_t v76 = (char *)v75 + v74;
          *unint64_t v75 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v76;
          *((void *)this + 3) = v75;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 97;
        goto LABEL_293;
      case 'Q':
        int v77 = *((_DWORD *)this + 24);
        if (!v77) {
          return 0;
        }
        unsigned int v78 = v77 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v78);
        *((_DWORD *)this + 24) = v78;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2 * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unsigned int v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          unint64_t v82 = (char *)v81 + v80;
          *unsigned int v81 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v82;
          *((void *)this + 3) = v81;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 302;
        goto LABEL_293;
      case 'S':
        unint64_t v83 = swift::Demangle::Demangler::popProtocol(this);
        if (!v83) {
          return 0;
        }
        int v5 = (swift::Demangle::Node *)v83;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v84 = 2 * *((void *)this + 4);
          if (v84 <= 0x20) {
            unint64_t v84 = 32;
          }
          *((void *)this + 4) = v84;
          unint64_t v85 = v84 + 8;
          unint64_t v86 = malloc_type_malloc(v84 + 8, 0xD0263BC5uLL);
          unint64_t v87 = (char *)v86 + v85;
          *unint64_t v86 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v87;
          *((void *)this + 3) = v86;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 193;
        goto LABEL_293;
      case 'U':
        int v88 = *((_DWORD *)this + 24);
        if (!v88) {
          return 0;
        }
        unsigned int v89 = v88 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v89);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v89;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v90 = 2 * *((void *)this + 4);
          if (v90 <= 0x20) {
            unint64_t v90 = 32;
          }
          *((void *)this + 4) = v90;
          unint64_t v91 = v90 + 8;
          unint64_t v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          unint64_t v93 = (char *)v92 + v91;
          *unint64_t v92 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v93;
          *((void *)this + 3) = v92;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 149;
        goto LABEL_293;
      case 'V':
        int v94 = *((_DWORD *)this + 24);
        if (!v94) {
          return 0;
        }
        int v95 = v94 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v94 - 1));
        if (*((_WORD *)v5 + 8) != 232 && !swift::Demangle::isContext()) {
          return 0;
        }
        *((_DWORD *)this + 24) = v95;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v96 = 2 * *((void *)this + 4);
          if (v96 <= 0x20) {
            unint64_t v96 = 32;
          }
          *((void *)this + 4) = v96;
          unint64_t v97 = v96 + 8;
          unint64_t v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          unint64_t v99 = (char *)v98 + v97;
          void *v98 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v99;
          *((void *)this + 3) = v98;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 177;
        goto LABEL_293;
      case 'X':
        return swift::Demangle::Demangler::demanglePrivateContextDescriptor(this);
      case 'a':
        int v101 = *((_DWORD *)this + 24);
        if (!v101) {
          return 0;
        }
        unsigned int v102 = v101 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v102);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v102;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v103 = 2 * *((void *)this + 4);
          if (v103 <= 0x20) {
            unint64_t v103 = 32;
          }
          *((void *)this + 4) = v103;
          unint64_t v104 = v103 + 8;
          unint64_t v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
          unint64_t v106 = (char *)v105 + v104;
          void *v105 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v106;
          *((void *)this + 3) = v105;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 238;
        goto LABEL_293;
      case 'b':
        int v107 = *((_DWORD *)this + 24);
        if (!v107) {
          return 0;
        }
        unsigned int v108 = v107 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v108);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v108;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v109 = 2 * *((void *)this + 4);
          if (v109 <= 0x20) {
            unint64_t v109 = 32;
          }
          *((void *)this + 4) = v109;
          unint64_t v110 = v109 + 8;
          unint64_t v111 = malloc_type_malloc(v109 + 8, 0xD0263BC5uLL);
          v112 = (char *)v111 + v110;
          void *v111 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v112;
          *((void *)this + 3) = v111;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 311;
        goto LABEL_293;
      case 'c':
        unint64_t v113 = swift::Demangle::Demangler::popProtocolConformance(this);
        if (!v113) {
          return 0;
        }
        int v5 = v113;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v114 = 2 * *((void *)this + 4);
          if (v114 <= 0x20) {
            unint64_t v114 = 32;
          }
          *((void *)this + 4) = v114;
          unint64_t v115 = v114 + 8;
          v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
          int v117 = (char *)v116 + v115;
          void *v116 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v117;
          *((void *)this + 3) = v116;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 188;
        goto LABEL_293;
      case 'f':
        int v118 = *((_DWORD *)this + 24);
        if (!v118) {
          return 0;
        }
        unsigned int v119 = v118 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v119);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v119;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v120 = 2 * *((void *)this + 4);
          if (v120 <= 0x20) {
            unint64_t v120 = 32;
          }
          *((void *)this + 4) = v120;
          unint64_t v121 = v120 + 8;
          unsigned int v122 = malloc_type_malloc(v120 + 8, 0xD0263BC5uLL);
          int v123 = (char *)v122 + v121;
          void *v122 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v123;
          *((void *)this + 3) = v122;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 75;
        goto LABEL_293;
      case 'g':
        int v124 = *((_DWORD *)this + 24);
        if (!v124) {
          return 0;
        }
        unsigned int v125 = v124 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v125);
        *((_DWORD *)this + 24) = v125;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v126 = 2 * *((void *)this + 4);
          if (v126 <= 0x20) {
            unint64_t v126 = 32;
          }
          *((void *)this + 4) = v126;
          unint64_t v127 = v126 + 8;
          unint64_t v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
          unint64_t v129 = (char *)v128 + v127;
          void *v128 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v129;
          *((void *)this + 3) = v128;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 304;
        goto LABEL_293;
      case 'h':
        int v130 = *((_DWORD *)this + 24);
        if (!v130) {
          return 0;
        }
        unsigned int v131 = v130 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v131);
        *((_DWORD *)this + 24) = v131;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v132 = 2 * *((void *)this + 4);
          if (v132 <= 0x20) {
            unint64_t v132 = 32;
          }
          *((void *)this + 4) = v132;
          unint64_t v133 = v132 + 8;
          int v134 = malloc_type_malloc(v132 + 8, 0xD0263BC5uLL);
          unint64_t v135 = (char *)v134 + v133;
          *int v134 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v134 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v135;
          *((void *)this + 3) = v134;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 305;
        goto LABEL_293;
      case 'i':
        int v136 = *((_DWORD *)this + 24);
        if (!v136) {
          return 0;
        }
        unsigned int v137 = v136 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v137);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v137;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v138 = 2 * *((void *)this + 4);
          if (v138 <= 0x20) {
            unint64_t v138 = 32;
          }
          *((void *)this + 4) = v138;
          unint64_t v139 = v138 + 8;
          __int16 v140 = malloc_type_malloc(v138 + 8, 0xD0263BC5uLL);
          unsigned int v141 = (char *)v140 + v139;
          *__int16 v140 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v141;
          *((void *)this + 3) = v140;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 241;
        goto LABEL_293;
      case 'j':
        int v142 = *((_DWORD *)this + 24);
        if (!v142) {
          return 0;
        }
        unsigned int v143 = v142 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v143);
        *((_DWORD *)this + 24) = v143;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v144 = 2 * *((void *)this + 4);
          if (v144 <= 0x20) {
            unint64_t v144 = 32;
          }
          *((void *)this + 4) = v144;
          unint64_t v145 = v144 + 8;
          v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
          v147 = (char *)v146 + v145;
          void *v146 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v147;
          *((void *)this + 3) = v146;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 306;
        goto LABEL_293;
      case 'k':
        int v148 = *((_DWORD *)this + 24);
        if (!v148) {
          return 0;
        }
        unsigned int v149 = v148 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v149);
        *((_DWORD *)this + 24) = v149;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v150 = 2 * *((void *)this + 4);
          if (v150 <= 0x20) {
            unint64_t v150 = 32;
          }
          *((void *)this + 4) = v150;
          unint64_t v151 = v150 + 8;
          v152 = malloc_type_malloc(v150 + 8, 0xD0263BC5uLL);
          v153 = (char *)v152 + v151;
          void *v152 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v153;
          *((void *)this + 3) = v152;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 307;
        goto LABEL_293;
      case 'l':
        int v154 = *((_DWORD *)this + 24);
        if (!v154) {
          return 0;
        }
        unsigned int v155 = v154 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v155);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v155;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v156 = 2 * *((void *)this + 4);
          if (v156 <= 0x20) {
            unint64_t v156 = 32;
          }
          *((void *)this + 4) = v156;
          unint64_t v157 = v156 + 8;
          v158 = malloc_type_malloc(v156 + 8, 0xD0263BC5uLL);
          v159 = (char *)v158 + v157;
          void *v158 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v159;
          *((void *)this + 3) = v158;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 242;
        goto LABEL_293;
      case 'm':
        int v160 = *((_DWORD *)this + 24);
        if (!v160) {
          return 0;
        }
        unsigned int v161 = v160 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v161);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v161;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v162 = 2 * *((void *)this + 4);
          if (v162 <= 0x20) {
            unint64_t v162 = 32;
          }
          *((void *)this + 4) = v162;
          unint64_t v163 = v162 + 8;
          v164 = malloc_type_malloc(v162 + 8, 0xD0263BC5uLL);
          v165 = (char *)v164 + v163;
          void *v164 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v165;
          *((void *)this + 3) = v164;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 147;
        goto LABEL_293;
      case 'n':
        int v166 = *((_DWORD *)this + 24);
        if (!v166) {
          return 0;
        }
        unsigned int v167 = v166 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v167);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v167;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v168 = 2 * *((void *)this + 4);
          if (v168 <= 0x20) {
            unint64_t v168 = 32;
          }
          *((void *)this + 4) = v168;
          unint64_t v169 = v168 + 8;
          v170 = malloc_type_malloc(v168 + 8, 0xD0263BC5uLL);
          v171 = (char *)v170 + v169;
          void *v170 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v171;
          *((void *)this + 3) = v170;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 158;
        goto LABEL_293;
      case 'o':
        int v172 = *((_DWORD *)this + 24);
        if (!v172) {
          return 0;
        }
        unsigned int v173 = v172 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v173);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v173;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v174 = 2 * *((void *)this + 4);
          if (v174 <= 0x20) {
            unint64_t v174 = 32;
          }
          *((void *)this + 4) = v174;
          unint64_t v175 = v174 + 8;
          v176 = malloc_type_malloc(v174 + 8, 0xD0263BC5uLL);
          v177 = (char *)v176 + v175;
          void *v176 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v177;
          *((void *)this + 3) = v176;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 25;
        goto LABEL_293;
      case 'p':
        unint64_t v178 = swift::Demangle::Demangler::popProtocol(this);
        if (!v178) {
          return 0;
        }
        int v5 = (swift::Demangle::Node *)v178;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v179 = 2 * *((void *)this + 4);
          if (v179 <= 0x20) {
            unint64_t v179 = 32;
          }
          *((void *)this + 4) = v179;
          unint64_t v180 = v179 + 8;
          v181 = malloc_type_malloc(v179 + 8, 0xD0263BC5uLL);
          v182 = (char *)v181 + v180;
          void *v181 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v182;
          *((void *)this + 3) = v181;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 186;
        goto LABEL_293;
      case 'q':
        int v183 = *((_DWORD *)this + 24);
        if (!v183) {
          return 0;
        }
        unsigned int v184 = v183 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v184);
        *((_DWORD *)this + 24) = v184;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v185 = 2 * *((void *)this + 4);
          if (v185 <= 0x20) {
            unint64_t v185 = 32;
          }
          *((void *)this + 4) = v185;
          unint64_t v186 = v185 + 8;
          v187 = malloc_type_malloc(v185 + 8, 0xD0263BC5uLL);
          v188 = (char *)v187 + v186;
          void *v187 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v187 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v188;
          *((void *)this + 3) = v187;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 335;
        goto LABEL_293;
      case 'r':
        int v189 = *((_DWORD *)this + 24);
        if (!v189) {
          return 0;
        }
        unsigned int v190 = v189 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v190);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v190;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v191 = 2 * *((void *)this + 4);
          if (v191 <= 0x20) {
            unint64_t v191 = 32;
          }
          *((void *)this + 4) = v191;
          unint64_t v192 = v191 + 8;
          v193 = malloc_type_malloc(v191 + 8, 0xD0263BC5uLL);
          v194 = (char *)v193 + v192;
          void *v193 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v194;
          *((void *)this + 3) = v193;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 239;
        goto LABEL_293;
      case 's':
        int v195 = *((_DWORD *)this + 24);
        if (!v195) {
          return 0;
        }
        unsigned int v196 = v195 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v196);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v196;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v197 = 2 * *((void *)this + 4);
          if (v197 <= 0x20) {
            unint64_t v197 = 32;
          }
          *((void *)this + 4) = v197;
          unint64_t v198 = v197 + 8;
          v199 = malloc_type_malloc(v197 + 8, 0xD0263BC5uLL);
          v200 = (char *)v199 + v198;
          void *v199 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v200;
          *((void *)this + 3) = v199;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 150;
        goto LABEL_293;
      case 't':
        int v201 = *((_DWORD *)this + 24);
        if (!v201) {
          return 0;
        }
        unsigned int v202 = v201 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v202);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v202;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v203 = 2 * *((void *)this + 4);
          if (v203 <= 0x20) {
            unint64_t v203 = 32;
          }
          *((void *)this + 4) = v203;
          unint64_t v204 = v203 + 8;
          v205 = malloc_type_malloc(v203 + 8, 0xD0263BC5uLL);
          v206 = (char *)v205 + v204;
          void *v205 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v206;
          *((void *)this + 3) = v205;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 151;
        goto LABEL_293;
      case 'u':
        int v207 = *((_DWORD *)this + 24);
        if (!v207) {
          return 0;
        }
        unsigned int v208 = v207 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v208);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v208;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v209 = 2 * *((void *)this + 4);
          if (v209 <= 0x20) {
            unint64_t v209 = 32;
          }
          *((void *)this + 4) = v209;
          unint64_t v210 = v209 + 8;
          v211 = malloc_type_malloc(v209 + 8, 0xD0263BC5uLL);
          v212 = (char *)v211 + v210;
          void *v211 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v212;
          *((void *)this + 3) = v211;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 148;
        goto LABEL_293;
      case 'z':
        int v213 = *((_DWORD *)this + 24);
        if (!v213) {
          return 0;
        }
        unsigned int v214 = v213 - 1;
        int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v214);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v214;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v215 = 2 * *((void *)this + 4);
          if (v215 <= 0x20) {
            unint64_t v215 = 32;
          }
          *((void *)this + 4) = v215;
          unint64_t v216 = v215 + 8;
          v217 = malloc_type_malloc(v215 + 8, 0xD0263BC5uLL);
          v218 = (char *)v217 + v216;
          void *v217 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v218;
          *((void *)this + 3) = v217;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 318;
LABEL_293:
        *(_WORD *)(v3 + 16) = v10;
        *(unsigned char *)(v3 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v3, v5, this);
        return v3;
      default:
        return v3;
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleArchetype(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t Type = 0;
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'O':
      unint64_t v7 = swift::Demangle::Demangler::popContext(this);
      if (!v7) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v7;
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
        unint64_t v9 = 2 * *((void *)v3 + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)v3 + 4) = v9;
        unint64_t v10 = v9 + 8;
        int v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        *int v11 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v11 + v10;
        *((void *)v3 + 3) = v11;
      }
      *((void *)v3 + 1) = Type + 24;
      __int16 v12 = 309;
      goto LABEL_71;
    case 'P':
      return swift::Demangle::Demangler::popPack(this);
    case 'R':
      if (v5 >= v1) {
        return 0;
      }
      int v14 = *(unsigned __int8 *)(v6 + v5);
      if (v14 == 95)
      {
        uint64_t v15 = 0;
        *((void *)this + 9) = v2 + 2;
      }
      else
      {
        if ((v14 - 48) > 9) {
          return 0;
        }
        int v79 = 0;
        while (1)
        {
          int v80 = *(unsigned __int8 *)(v6 + v5);
          if ((v80 - 48) > 9) {
            break;
          }
          int v81 = v80 + 10 * v79 - 48;
          if (v81 < v79) {
            return 0;
          }
          unint64_t Type = 0;
          *((void *)this + 9) = ++v5;
          int v79 = v81;
          if (v1 == v5) {
            return Type;
          }
        }
        unint64_t Type = 0;
        if (v79 < 0 || v5 >= v1 || v80 != 95) {
          return Type;
        }
        *((void *)this + 9) = v5 + 1;
        uint64_t v15 = (v79 + 1);
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        *unint64_t v19 = *((void *)v3 + 3);
        unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v19 + v18;
        *((void *)v3 + 3) = v19;
      }
      *((void *)v3 + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 341;
      *(unsigned char *)(v16 + 18) = 4;
      *(void *)unint64_t v16 = v15;
      unint64_t v8 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)v3 + 2))
      {
        unint64_t v20 = 2 * *((void *)v3 + 4);
        if (v20 <= 0x20) {
          unint64_t v20 = 32;
        }
        *((void *)v3 + 4) = v20;
        unint64_t v21 = v20 + 8;
        unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        *unint64_t v22 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v22 + v21;
        *((void *)v3 + 3) = v22;
      }
      *((void *)v3 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 308;
      *(unsigned char *)(v8 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v8, (swift::Demangle::Node *)v16, v3);
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
LABEL_67:
        unint64_t v47 = 2 * *((void *)v3 + 4);
        if (v47 <= 0x20) {
          unint64_t v47 = 32;
        }
        *((void *)v3 + 4) = v47;
        unint64_t v48 = v47 + 8;
        unint64_t v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
        *unint64_t v49 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v49 + v48;
        *((void *)v3 + 3) = v49;
      }
LABEL_70:
      *((void *)v3 + 1) = Type + 24;
      __int16 v12 = 232;
LABEL_71:
      *(_WORD *)(Type + 16) = v12;
      *(unsigned char *)(Type + 18) = 0;
      unint64_t v50 = (swift::Demangle::Node *)Type;
      unint64_t v51 = (swift::Demangle::Node *)v8;
      goto LABEL_72;
    case 'S':
      return swift::Demangle::Demangler::popSILPack(this);
    case 'X':
      int v23 = (swift::Demangle::Node **)swift::Demangle::Demangler::demangleAssociatedTypeCompound(this, 0);
      goto LABEL_78;
    case 'Y':
      unint64_t DependentGenericParamType = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericParamIndex(this);
      goto LABEL_35;
    case 'Z':
      unint64_t DependentGenericParamType = (swift::Demangle::Node *)swift::Demangle::Demangler::getDependentGenericParamType(this, 0, 0);
LABEL_35:
      int v23 = (swift::Demangle::Node **)swift::Demangle::Demangler::demangleAssociatedTypeCompound(v3, DependentGenericParamType);
      goto LABEL_78;
    case 'a':
      int v25 = *((_DWORD *)this + 24);
      if (!v25) {
        return 0;
      }
      int v26 = v25 - 1;
      uint64_t v27 = *((void *)this + 11);
      unint64_t v28 = *(swift::Demangle::Node **)(v27 + 8 * (v25 - 1));
      if (*((_WORD *)v28 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v26;
        if (v25 == 1) {
          return 0;
        }
      }
      else
      {
        unint64_t v28 = 0;
        int v26 = *((_DWORD *)this + 24);
      }
      unsigned int v68 = v26 - 1;
      unint64_t v69 = *(swift::Demangle::Node **)(v27 + 8 * v68);
      if (*((_WORD *)v69 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v68;
      int v70 = *((unsigned __int8 *)v69 + 18);
      if (v70 == 1) {
        goto LABEL_103;
      }
      if (v70 != 5 || *((_DWORD *)v69 + 2) != 1) {
        return 0;
      }
      unint64_t v69 = *(swift::Demangle::Node **)v69;
LABEL_103:
      if (!v28) {
        return 0;
      }
      int v71 = *(swift::Demangle::Node **)v69;
      if (!*(void *)v69) {
        return 0;
      }
      unint64_t v72 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v72;
      if (!v72 || v72 + 24 > *((void *)this + 2))
      {
        unint64_t v73 = 2 * *((void *)this + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32;
        }
        *((void *)this + 4) = v73;
        unint64_t v74 = v73 + 8;
        unint64_t v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        *unint64_t v75 = *((void *)v3 + 3);
        unint64_t v72 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v75 + v74;
        *((void *)v3 + 3) = v75;
      }
      *((void *)v3 + 1) = v72 + 24;
      *(_WORD *)(v72 + 16) = 5;
      *(unsigned char *)(v72 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v72, v71, v3);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v72, v28, v3);
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
        unint64_t v76 = 2 * *((void *)v3 + 4);
        if (v76 <= 0x20) {
          unint64_t v76 = 32;
        }
        *((void *)v3 + 4) = v76;
        unint64_t v77 = v76 + 8;
        unsigned int v78 = malloc_type_malloc(v76 + 8, 0xD0263BC5uLL);
        *unsigned int v78 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v78 + v77;
        *((void *)v3 + 3) = v78;
      }
      *((void *)v3 + 1) = Type + 24;
      *(_WORD *)(Type + 16) = 232;
      *(unsigned char *)(Type + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)Type, (swift::Demangle::Node *)v72, v3);
      unint64_t v106 = (swift::Demangle::Node **)Type;
LABEL_79:
      unsigned int v54 = (const void **)((char *)v3 + 104);
      unint64_t v55 = (uint64_t *)&v106;
      goto LABEL_80;
    case 'e':
      int v29 = *((_DWORD *)this + 24);
      if (!v29) {
        goto LABEL_81;
      }
      int v30 = v29 - 1;
      unint64_t v31 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v29 - 1));
      if (*((_WORD *)v31 + 8) != 232) {
        goto LABEL_81;
      }
      *((_DWORD *)this + 24) = v30;
      int v32 = *((unsigned __int8 *)v31 + 18);
      if (v32 == 1) {
        goto LABEL_46;
      }
      if (v32 == 5 && *((_DWORD *)v31 + 2) == 1)
      {
        unint64_t v31 = *(swift::Demangle::Node **)v31;
LABEL_46:
        unsigned int v33 = *(swift::Demangle::Node **)v31;
      }
      else
      {
LABEL_81:
        unsigned int v33 = 0;
      }
      if (v5 >= v1) {
        return 0;
      }
      int v56 = *(unsigned __int8 *)(v6 + v5);
      if (v56 == 95)
      {
        uint64_t v57 = 0;
        *((void *)this + 9) = v2 + 2;
      }
      else
      {
        if ((v56 - 48) > 9) {
          return 0;
        }
        int v92 = 0;
        while (1)
        {
          int v93 = *(unsigned __int8 *)(v6 + v5);
          if ((v93 - 48) > 9) {
            break;
          }
          int v94 = v93 + 10 * v92 - 48;
          if (v94 < v92) {
            return 0;
          }
          unint64_t Type = 0;
          *((void *)this + 9) = ++v5;
          int v92 = v94;
          if (v1 == v5) {
            return Type;
          }
        }
        unint64_t Type = 0;
        if (v92 < 0 || v5 >= v1 || v93 != 95) {
          return Type;
        }
        *((void *)this + 9) = v5 + 1;
        uint64_t v57 = (v92 + 1);
      }
      unint64_t v58 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v58;
      if (!v58 || v58 + 24 > *((void *)this + 2))
      {
        unint64_t v59 = 2 * *((void *)this + 4);
        if (v59 <= 0x20) {
          unint64_t v59 = 32;
        }
        *((void *)this + 4) = v59;
        unint64_t v60 = v59 + 8;
        unint64_t v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
        *unint64_t v61 = *((void *)v3 + 3);
        unint64_t v58 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v61 + v60;
        *((void *)v3 + 3) = v61;
      }
      *((void *)v3 + 1) = v58 + 24;
      *(_WORD *)(v58 + 16) = 231;
      *(unsigned char *)(v58 + 18) = 4;
      *(void *)unint64_t v58 = v57;
      if (v33)
      {
        unint64_t v62 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 1) = v62;
        if (!v62 || v62 + 24 > *((void *)v3 + 2))
        {
          unint64_t v63 = 2 * *((void *)v3 + 4);
          if (v63 <= 0x20) {
            unint64_t v63 = 32;
          }
          *((void *)v3 + 4) = v63;
          unint64_t v64 = v63 + 8;
          int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
          *int v65 = *((void *)v3 + 3);
          unint64_t v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 2) = (char *)v65 + v64;
          *((void *)v3 + 3) = v65;
        }
        *((void *)v3 + 1) = v62 + 24;
        *(_WORD *)(v62 + 16) = 230;
        *(unsigned char *)(v62 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v62, v33, v3);
        unsigned int v66 = (swift::Demangle::Node *)v62;
        unint64_t v67 = (swift::Demangle::Node *)v58;
        goto LABEL_160;
      }
      return 0;
    case 'o':
      if (v5 >= v1) {
        goto LABEL_128;
      }
      int v34 = *(unsigned __int8 *)(v6 + v5);
      if (v34 == 95)
      {
        uint64_t v35 = 0;
        *((void *)this + 9) = v2 + 2;
        goto LABEL_129;
      }
      if ((v34 - 48) > 9) {
        goto LABEL_128;
      }
      int v82 = 0;
      break;
    case 'p':
      int v36 = *((_DWORD *)this + 24);
      if (!v36) {
        return 0;
      }
      int v37 = v36 - 1;
      uint64_t v38 = *((void *)this + 11);
      unint64_t v39 = *(swift::Demangle::Node **)(v38 + 8 * (v36 - 1));
      if (*((_WORD *)v39 + 8) != 232)
      {
        int v41 = 0;
        int v37 = *((_DWORD *)this + 24);
        goto LABEL_147;
      }
      *((_DWORD *)this + 24) = v37;
      int v40 = *((unsigned __int8 *)v39 + 18);
      if (v40 == 1) {
        goto LABEL_56;
      }
      if (v40 == 5 && *((_DWORD *)v39 + 2) == 1)
      {
        unint64_t v39 = *(swift::Demangle::Node **)v39;
LABEL_56:
        int v41 = *(swift::Demangle::Node **)v39;
      }
      else
      {
        int v41 = 0;
      }
      if (!v37) {
        return 0;
      }
LABEL_147:
      unsigned int v95 = v37 - 1;
      unint64_t v96 = *(swift::Demangle::Node **)(v38 + 8 * v95);
      if (*((_WORD *)v96 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v95;
      int v97 = *((unsigned __int8 *)v96 + 18);
      if (v97 == 1) {
        goto LABEL_152;
      }
      if (v97 != 5 || *((_DWORD *)v96 + 2) != 1) {
        return 0;
      }
      unint64_t v96 = *(swift::Demangle::Node **)v96;
LABEL_152:
      unint64_t Type = 0;
      if (v41)
      {
        unint64_t v98 = *(swift::Demangle::Node **)v96;
        if (*(void *)v96)
        {
          unint64_t v62 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v62;
          if (!v62 || v62 + 24 > *((void *)this + 2))
          {
            unint64_t v99 = 2 * *((void *)this + 4);
            if (v99 <= 0x20) {
              unint64_t v99 = 32;
            }
            *((void *)this + 4) = v99;
            unint64_t v100 = v99 + 8;
            int v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
            *int v101 = *((void *)v3 + 3);
            unint64_t v62 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)v3 + 2) = (char *)v101 + v100;
            *((void *)v3 + 3) = v101;
          }
          *((void *)v3 + 1) = v62 + 24;
          *(_WORD *)(v62 + 16) = 229;
          *(unsigned char *)(v62 + 18) = 0;
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v62, v98, v3);
          unsigned int v66 = (swift::Demangle::Node *)v62;
          unint64_t v67 = v41;
LABEL_160:
          swift::Demangle::Node::addChild(v66, v67, v3);
          unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 1) = Type;
          if (!Type || Type + 24 > *((void *)v3 + 2))
          {
            unint64_t v102 = 2 * *((void *)v3 + 4);
            if (v102 <= 0x20) {
              unint64_t v102 = 32;
            }
            *((void *)v3 + 4) = v102;
            unint64_t v103 = v102 + 8;
            unint64_t v104 = malloc_type_malloc(v102 + 8, 0xD0263BC5uLL);
            *unint64_t v104 = *((void *)v3 + 3);
            unint64_t Type = ((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)v3 + 2) = (char *)v104 + v103;
            *((void *)v3 + 3) = v104;
          }
          *((void *)v3 + 1) = Type + 24;
          *(_WORD *)(Type + 16) = 232;
          *(unsigned char *)(Type + 18) = 0;
          unint64_t v50 = (swift::Demangle::Node *)Type;
          unint64_t v51 = (swift::Demangle::Node *)v62;
LABEL_72:
          swift::Demangle::Node::addChild(v50, v51, v3);
        }
      }
      return Type;
    case 'r':
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || (unint64_t v42 = *((void *)this + 2), v8 + 24 > v42))
      {
        unint64_t v43 = 2 * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        *unint64_t v45 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v42 = (unint64_t)v45 + v44;
        *((void *)v3 + 2) = (char *)v45 + v44;
        *((void *)v3 + 3) = v45;
      }
      *(_WORD *)(v8 + 16) = 308;
      *(unsigned char *)(v8 + 18) = 0;
      unint64_t Type = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (Type) {
        BOOL v46 = Type + 24 > v42;
      }
      else {
        BOOL v46 = 1;
      }
      if (!v46) {
        goto LABEL_70;
      }
      goto LABEL_67;
    case 'x':
      unint64_t v52 = 0;
      goto LABEL_77;
    case 'y':
      unint64_t v53 = swift::Demangle::Demangler::demangleGenericParamIndex(this);
      goto LABEL_76;
    case 'z':
      unint64_t v53 = swift::Demangle::Demangler::getDependentGenericParamType(this, 0, 0);
LABEL_76:
      unint64_t v52 = (swift::Demangle::Node *)v53;
      this = v3;
LABEL_77:
      int v23 = (swift::Demangle::Node **)swift::Demangle::Demangler::demangleAssociatedTypeSimple(this, v52);
LABEL_78:
      unint64_t Type = (unint64_t)v23;
      unint64_t v106 = v23;
      if (v23) {
        goto LABEL_79;
      }
      return Type;
    default:
      return Type;
  }
  while (1)
  {
    int v83 = *(unsigned __int8 *)(v6 + v5);
    if ((v83 - 48) > 9) {
      break;
    }
    int v84 = v83 + 10 * v82 - 48;
    if (v84 >= v82)
    {
      *((void *)this + 9) = ++v5;
      int v82 = v84;
      if (v1 != v5) {
        continue;
      }
    }
LABEL_128:
    uint64_t v35 = -1000;
    goto LABEL_129;
  }
  uint64_t v35 = -1000;
  if ((v82 & 0x80000000) == 0 && v5 < v1 && v83 == 95)
  {
    *((void *)this + 9) = v5 + 1;
    uint64_t v35 = (v82 + 1);
  }
LABEL_129:
  unint64_t v106 = 0;
  uint64_t v107 = 0;
  unint64_t v105 = 0;
  unint64_t Type = 0;
  if (swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v106, (unint64_t *)&v105))
  {
    int v85 = *((_DWORD *)v3 + 24);
    if (v85)
    {
      unsigned int v86 = v85 - 1;
      unint64_t Type = *(void *)(*((void *)v3 + 11) + 8 * v86);
      *((_DWORD *)v3 + 24) = v86;
      if (Type)
      {
        unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v3, 102, v35);
        int v88 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(v3, 300, (swift::Demangle::Node *)Type, Node);
        unsigned int v89 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v3, 235);
        if (v107)
        {
          unsigned int v90 = v107 - 1;
          do
          {
            uint64_t v91 = v90;
            swift::Demangle::Node::addChild(v89, v106[v90--], v3);
          }
          while (v91);
        }
        swift::Demangle::Node::addChild(v88, v89, v3);
        if (v105) {
          swift::Demangle::Node::addChild(v88, v105, v3);
        }
        unint64_t Type = swift::Demangle::Demangler::createType(v3, v88);
        unint64_t v108 = Type;
        if (Type)
        {
          unsigned int v54 = (const void **)((char *)v3 + 104);
          unint64_t v55 = (uint64_t *)&v108;
LABEL_80:
          swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v54, v55, v3);
        }
      }
      return Type;
    }
    return 0;
  }
  return Type;
}

unint64_t swift::Demangle::Demangler::demangleGenericRequirement(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    unint64_t v3 = *((void *)this + 9);
LABEL_6:
    int v6 = 0;
    unsigned int v4 = 0;
    *((void *)this + 9) = v3 - 1;
LABEL_7:
    uint64_t v8 = swift::Demangle::Demangler::demangleGenericParamIndex(this);
    if (v8)
    {
      unint64_t v9 = (swift::Demangle::Node *)v8;
      unint64_t v10 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v10;
      if (!v10 || v10 + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2 * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *unint64_t v13 = *((void *)this + 3);
        unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }
      *((void *)this + 1) = v10 + 24;
      *(_WORD *)(v10 + 16) = 232;
      *(unsigned char *)(v10 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, v9, this);
    }
    else
    {
      unint64_t v10 = 0;
    }
LABEL_40:
    switch(v6)
    {
      case 0:
        unint64_t v20 = swift::Demangle::Demangler::popProtocol(this);
        unint64_t v21 = 0;
        if (!v10) {
          return v21;
        }
        unsigned int v4 = (swift::Demangle::Node *)v20;
        if (!v20) {
          return v21;
        }
        goto LABEL_47;
      case 1:
        int v22 = *((_DWORD *)this + 24);
        if (!v22) {
          goto LABEL_122;
        }
        unsigned int v23 = v22 - 1;
        unsigned int v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v23);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v23;
        if (!v10) {
          goto LABEL_122;
        }
LABEL_47:
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v24 = 2 * *((void *)this + 4);
          if (v24 <= 0x20) {
            unint64_t v24 = 32;
          }
          *((void *)this + 4) = v24;
          unint64_t v25 = v24 + 8;
          int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          *int v26 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v26 + v25;
          *((void *)this + 3) = v26;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 36;
        goto LABEL_89;
      case 2:
        int v28 = *((_DWORD *)this + 24);
        if (!v28) {
          goto LABEL_122;
        }
        unsigned int v29 = v28 - 1;
        unsigned int v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v29);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v29;
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v30 = 2 * *((void *)this + 4);
          if (v30 <= 0x20) {
            unint64_t v30 = 32;
          }
          *((void *)this + 4) = v30;
          unint64_t v31 = v30 + 8;
          int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
          *int v32 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v32 + v31;
          *((void *)this + 3) = v32;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 39;
        goto LABEL_89;
      case 3:
        int v33 = *((_DWORD *)this + 24);
        if (!v33) {
          goto LABEL_122;
        }
        unsigned int v34 = v33 - 1;
        unsigned int v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v34);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v34;
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v35 = 2 * *((void *)this + 4);
          if (v35 <= 0x20) {
            unint64_t v35 = 32;
          }
          *((void *)this + 4) = v35;
          unint64_t v36 = v35 + 8;
          int v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
          *int v37 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v37 + v36;
          *((void *)this + 3) = v37;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 40;
        goto LABEL_89;
      case 4:
        unint64_t v38 = *((void *)this + 9);
        if (v38 >= *((void *)this + 8)) {
          goto LABEL_122;
        }
        unint64_t v21 = 0;
        *((void *)this + 9) = v38 + 1;
        unint64_t v39 = "U";
        int v40 = 0;
        switch(*(unsigned char *)(*((void *)this + 7) + v38))
        {
          case 'B':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "B";
            goto LABEL_106;
          case 'C':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "C";
            goto LABEL_106;
          case 'D':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "D";
            goto LABEL_106;
          case 'E':
            unint64_t v21 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            if (!v21) {
              return v21;
            }
            int v40 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
            unint64_t v39 = "E";
            goto LABEL_106;
          case 'M':
            unint64_t v21 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            if (!v21) {
              return v21;
            }
            int v40 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
            unint64_t v39 = "M";
            goto LABEL_106;
          case 'N':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "N";
            goto LABEL_106;
          case 'R':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "R";
            goto LABEL_106;
          case 'S':
            unint64_t v49 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v49) {
              return 0;
            }
            unint64_t v21 = v49;
            unint64_t v39 = "S";
            goto LABEL_106;
          case 'T':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "T";
            goto LABEL_106;
          case 'U':
            goto LABEL_106;
          case 'e':
            unint64_t v50 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v50) {
              return 0;
            }
            unint64_t v21 = v50;
            unint64_t v39 = "e";
            goto LABEL_106;
          case 'm':
            unint64_t v51 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v51) {
              return 0;
            }
            unint64_t v21 = v51;
            unint64_t v39 = "m";
LABEL_106:
            unint64_t v52 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v52;
            if (!v52 || v52 + 24 > *((void *)this + 2))
            {
              unint64_t v53 = 2 * *((void *)this + 4);
              if (v53 <= 0x20) {
                unint64_t v53 = 32;
              }
              *((void *)this + 4) = v53;
              unint64_t v54 = v53 + 8;
              unint64_t v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
              *unint64_t v55 = *((void *)this + 3);
              unint64_t v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v55 + v54;
              *((void *)this + 3) = v55;
            }
            *((void *)this + 1) = v52 + 24;
            *(_WORD *)(v52 + 16) = 101;
            *(unsigned char *)(v52 + 18) = 3;
            *(void *)unint64_t v52 = v39;
            *(void *)(v52 + 8) = 1;
            if (!v10) {
              goto LABEL_122;
            }
            unint64_t v56 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v56;
            if (!v56 || v56 + 24 > *((void *)this + 2))
            {
              unint64_t v57 = 2 * *((void *)this + 4);
              if (v57 <= 0x20) {
                unint64_t v57 = 32;
              }
              *((void *)this + 4) = v57;
              unint64_t v58 = v57 + 8;
              unint64_t v59 = malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              *unint64_t v59 = *((void *)this + 3);
              unint64_t v56 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v59 + v58;
              *((void *)this + 3) = v59;
            }
            *((void *)this + 1) = v56 + 24;
            *(_WORD *)(v56 + 16) = 41;
            *(unsigned char *)(v56 + 18) = 0;
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v56, (swift::Demangle::Node *)v10, this);
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v56, (swift::Demangle::Node *)v52, this);
            if (v21) {
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v56, (swift::Demangle::Node *)v21, this);
            }
            if (v40) {
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v56, v40, this);
            }
            unint64_t v21 = v56;
            break;
          default:
            return v21;
        }
        return v21;
      case 5:
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v41 = 2 * *((void *)this + 4);
          if (v41 <= 0x20) {
            unint64_t v41 = 32;
          }
          *((void *)this + 4) = v41;
          unint64_t v42 = v41 + 8;
          unint64_t v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
          *unint64_t v43 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v43 + v42;
          *((void *)this + 3) = v43;
        }
        *((void *)this + 1) = v21 + 24;
        *(_WORD *)(v21 + 16) = 42;
        *(unsigned char *)(v21 + 18) = 0;
        unint64_t v44 = (swift::Demangle::Node *)v21;
        unint64_t v45 = (swift::Demangle::Node *)v10;
        goto LABEL_90;
      case 6:
        unint64_t v21 = 0;
        if (!v4 || !v10) {
          return v21;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v46 = 2 * *((void *)this + 4);
          if (v46 <= 0x20) {
            unint64_t v46 = 32;
          }
          *((void *)this + 4) = v46;
          unint64_t v47 = v46 + 8;
          unint64_t v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
          *unint64_t v48 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v48 + v47;
          *((void *)this + 3) = v48;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 354;
LABEL_89:
        *(_WORD *)(v21 + 16) = v27;
        *(unsigned char *)(v21 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v21, (swift::Demangle::Node *)v10, this);
        unint64_t v44 = (swift::Demangle::Node *)v21;
        unint64_t v45 = v4;
LABEL_90:
        swift::Demangle::Node::addChild(v44, v45, this);
        break;
      default:
        goto LABEL_122;
    }
  }
  else
  {
    unint64_t v3 = v2 + 1;
    *((void *)this + 9) = v2 + 1;
    unsigned int v4 = 0;
    int v5 = 1;
    int v6 = 5;
    switch(*(unsigned char *)(*((void *)this + 7) + v2))
    {
      case 'B':
        goto LABEL_20;
      case 'C':
        goto LABEL_25;
      case 'I':
        unint64_t v7 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        if (!v7) {
          goto LABEL_122;
        }
        unsigned int v4 = (swift::Demangle::Node *)v7;
        int v5 = 6;
LABEL_20:
        int v14 = *((_DWORD *)this + 24);
        if (v14 && (unsigned int v15 = v14 - 1, v10 = *(void *)(*((void *)this + 11) + 8 * v15), *(_WORD *)(v10 + 16) == 232)) {
          *((_DWORD *)this + 24) = v15;
        }
        else {
          unint64_t v10 = 0;
        }
        goto LABEL_39;
      case 'L':
        unsigned int v4 = 0;
        int v5 = 4;
        goto LABEL_20;
      case 'M':
        int v5 = 4;
        goto LABEL_25;
      case 'P':
        int v5 = 0;
        goto LABEL_25;
      case 'Q':
        int v5 = 0;
        unsigned int v4 = 0;
        goto LABEL_20;
      case 'S':
        unsigned int v4 = 0;
        int v5 = 2;
        goto LABEL_20;
      case 'T':
        int v5 = 2;
LABEL_25:
        unint64_t v16 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericParamIndex(this);
        unint64_t v17 = swift::Demangle::Demangler::demangleAssociatedTypeCompound(this, v16);
        goto LABEL_36;
      case 'b':
        unsigned int v4 = 0;
        int v6 = 1;
        goto LABEL_7;
      case 'c':
        goto LABEL_35;
      case 'h':
        unsigned int v4 = 0;
        int v6 = 3;
        goto LABEL_7;
      case 'i':
        unint64_t v18 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        if (v18)
        {
          unsigned int v4 = (swift::Demangle::Node *)v18;
          int v6 = 6;
          goto LABEL_7;
        }
LABEL_122:
        unint64_t v21 = 0;
        break;
      case 'l':
        unsigned int v4 = 0;
        int v6 = 4;
        goto LABEL_7;
      case 'm':
        int v5 = 4;
        goto LABEL_35;
      case 'p':
        int v5 = 0;
        goto LABEL_35;
      case 's':
        unsigned int v4 = 0;
        int v6 = 2;
        goto LABEL_7;
      case 't':
        int v5 = 2;
LABEL_35:
        unint64_t v19 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericParamIndex(this);
        unint64_t v17 = swift::Demangle::Demangler::demangleAssociatedTypeSimple(this, v19);
LABEL_36:
        unint64_t v10 = v17;
        unint64_t v61 = v17;
        if (v17) {
          swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v61, this);
        }
        unsigned int v4 = 0;
LABEL_39:
        int v6 = v5;
        goto LABEL_40;
      case 'v':
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  return v21;
}

unint64_t swift::Demangle::Demangler::demangleStandardSubstitution(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= v2) {
    goto LABEL_6;
  }
  *((void *)this + 9) = v3 + 1;
  int v4 = *(char *)(*((void *)this + 7) + v3);
  if (v4 == 67)
  {
    int v5 = "__C_Synthesized";
    size_t v6 = 15;
    goto LABEL_28;
  }
  if (v4 == 103)
  {
    Swiftunint64_t Type = swift::Demangle::Demangler::createSwiftType(this, 61, "Optional");
    int v18 = *((_DWORD *)this + 24);
    if (v18)
    {
      unsigned int v19 = v18 - 1;
      unint64_t v20 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v19);
      if (*((_WORD *)v20 + 8) == 232)
      {
        unint64_t v21 = (swift::Demangle::Node *)SwiftType;
        *((_DWORD *)this + 24) = v19;
        unint64_t v22 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v22;
        if (!v22 || v22 + 24 > *((void *)this + 2))
        {
          unint64_t v23 = 2 * *((void *)this + 4);
          if (v23 <= 0x20) {
            unint64_t v23 = 32;
          }
          *((void *)this + 4) = v23;
          unint64_t v24 = v23 + 8;
          unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
          *unint64_t v25 = *((void *)this + 3);
          unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v25 + v24;
          *((void *)this + 3) = v25;
        }
        *((void *)this + 1) = v22 + 24;
        *(_WORD *)(v22 + 16) = 235;
        *(unsigned char *)(v22 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v22, v20, this);
        if (v21)
        {
          if (v22)
          {
            unint64_t v26 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v26;
            if (!v26 || v26 + 24 > *((void *)this + 2))
            {
              unint64_t v27 = 2 * *((void *)this + 4);
              if (v27 <= 0x20) {
                unint64_t v27 = 32;
              }
              *((void *)this + 4) = v27;
              unint64_t v28 = v27 + 8;
              unsigned int v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
              *unsigned int v29 = *((void *)this + 3);
              unint64_t v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v29 + v28;
              *((void *)this + 3) = v29;
            }
            *((void *)this + 1) = v26 + 24;
            *(_WORD *)(v26 + 16) = 14;
            *(unsigned char *)(v26 + 18) = 0;
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v26, v21, this);
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v26, (swift::Demangle::Node *)v22, this);
            unint64_t StandardSubstitution = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = StandardSubstitution;
            if (!StandardSubstitution || StandardSubstitution + 24 > *((void *)this + 2))
            {
              unint64_t v30 = 2 * *((void *)this + 4);
              if (v30 <= 0x20) {
                unint64_t v30 = 32;
              }
              *((void *)this + 4) = v30;
              unint64_t v31 = v30 + 8;
              int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
              *int v32 = *((void *)this + 3);
              unint64_t StandardSubstitution = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v32 + v31;
              *((void *)this + 3) = v32;
            }
            *((void *)this + 1) = StandardSubstitution + 24;
            *(_WORD *)(StandardSubstitution + 16) = 232;
            *(unsigned char *)(StandardSubstitution + 18) = 0;
            swift::Demangle::Node::addChild((swift::Demangle::Node *)StandardSubstitution, (swift::Demangle::Node *)v26, this);
            unint64_t v33 = StandardSubstitution;
            swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v33, this);
            return StandardSubstitution;
          }
        }
      }
    }
    return 0;
  }
  ++v3;
  if (v4 != 111)
  {
LABEL_6:
    unint64_t v7 = v3 - 1;
    *((void *)this + 9) = v7;
    if (v7 >= v2 || (uint64_t v8 = *((void *)this + 7), *(unsigned __int8 *)(v8 + v7) - 48 > 9))
    {
LABEL_16:
      int v9 = -1000;
      if (v7 >= v2) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    int v9 = 0;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(v8 + v7);
      if ((v10 - 48) > 9) {
        break;
      }
      int v11 = v10 + 10 * v9 - 48;
      if (v11 < v9) {
        goto LABEL_16;
      }
      *((void *)this + 9) = ++v7;
      int v9 = v11;
      if (v2 == v7)
      {
        unint64_t v7 = v2;
        int v9 = v11;
        break;
      }
    }
    if (v9 <= 2048)
    {
      if (v7 >= v2) {
        goto LABEL_20;
      }
LABEL_17:
      if (*(unsigned char *)(*((void *)this + 7) + v7) == 99)
      {
        *((void *)this + 9) = ++v7;
        int v12 = 1;
        if (v7 >= v2)
        {
LABEL_19:
          char v13 = 0;
LABEL_22:
          unint64_t StandardSubstitution = swift::Demangle::Demangler::createStandardSubstitution(this, v13, v12);
          if (StandardSubstitution && v9 >= 2)
          {
            unsigned int v15 = v9 + 1;
            do
            {
              unint64_t v33 = StandardSubstitution;
              swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 11, (uint64_t *)&v33, this);
              --v15;
            }
            while (v15 > 2);
          }
          return StandardSubstitution;
        }
LABEL_21:
        *((void *)this + 9) = v7 + 1;
        char v13 = *(unsigned char *)(*((void *)this + 7) + v7);
        goto LABEL_22;
      }
LABEL_20:
      int v12 = 0;
      if (v7 >= v2) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
    return 0;
  }
  int v5 = "__C";
  size_t v6 = 3;
LABEL_28:

  return swift::Demangle::NodeFactory::createNode(this, 153, v5, v6);
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleThunkOrSpecialization(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t Node = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  int v7 = *(unsigned __int8 *)(v6 + v1);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      __int16 v65 = 170;
      goto LABEL_187;
    case 'B':
      __int16 v66 = 93;
      goto LABEL_171;
    case 'C':
      int v67 = *((_DWORD *)this + 24);
      if (v67
        && (unsigned int v68 = v67 - 1,
            unint64_t v69 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v68),
            *((_WORD *)v69 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v68;
      }
      else
      {
        unint64_t v69 = 0;
      }
      __int16 v72 = 30;
      goto LABEL_193;
    case 'D':
      __int16 v65 = 55;
      goto LABEL_187;
    case 'E':
      __int16 v65 = 53;
      goto LABEL_187;
    case 'F':
      __int16 v65 = 54;
      goto LABEL_187;
    case 'G':
      __int16 v66 = 92;
      goto LABEL_171;
    case 'H':
    case 'h':
      if (v7 == 72) {
        __int16 v22 = 133;
      }
      else {
        __int16 v22 = 134;
      }
      if (v5 < v2 && *(unsigned char *)(v6 + v5) == 113)
      {
        *((void *)this + 9) = v1 + 2;
        int v23 = 1;
      }
      else
      {
        int v23 = 0;
      }
      memset(&__p, 0, sizeof(__p));
      int v37 = *((_DWORD *)this + 24);
      if (!v37) {
        goto LABEL_267;
      }
      int v38 = v37 - 1;
      unint64_t v39 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * (v37 - 1));
      *((_DWORD *)this + 24) = v37 - 1;
      int v148 = v39;
      if (!v39) {
        goto LABEL_267;
      }
      int v40 = v39[8];
      if (v40 == 43)
      {
        __int16 v145 = v22;
        int v146 = v23;
      }
      else
      {
        if (v40 != 232)
        {
LABEL_267:
          unint64_t Node = 0;
          goto LABEL_268;
        }
        __int16 v145 = v22;
        int v146 = v23;
        std::vector<swift::Demangle::Node *>::push_back[abi:nn180100]((void **)&__p.__r_.__value_.__l.__data_, &v148);
        unint64_t v39 = 0;
        int v38 = *((_DWORD *)v3 + 24);
      }
      for (; v38; __p.__r_.__value_.__l.__size_ = v120)
      {
        uint64_t v121 = *(void *)(*((void *)v3 + 11) + 8 * --v38);
        *((_DWORD *)v3 + 24) = v38;
        if (!v121) {
          break;
        }
        if (*(_WORD *)(v121 + 16) != 232) {
          goto LABEL_267;
        }
        size = (unsigned char *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
        {
          *(void *)__p.__r_.__value_.__l.__size_ = v121;
          std::string::size_type v120 = (std::string::size_type)(size + 8);
        }
        else
        {
          std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
          std::string::size_type v124 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          uint64_t v125 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 61) {
            goto LABEL_289;
          }
          int64_t v127 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v126) {
            unint64_t v126 = v127 >> 2;
          }
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v128 = v126;
          }
          if (v128)
          {
            if (v128 >> 61) {
              goto LABEL_290;
            }
            unint64_t v129 = operator new(8 * v128);
          }
          else
          {
            unint64_t v129 = 0;
          }
          int v130 = &v129[8 * v125];
          *int v130 = v121;
          std::string::size_type v120 = (std::string::size_type)(v130 + 1);
          if (size != (unsigned char *)v123)
          {
            unint64_t v131 = (unint64_t)&size[-v123 - 8];
            if (v131 < 0x58) {
              goto LABEL_293;
            }
            if ((unint64_t)(size - &v129[v124]) < 0x20) {
              goto LABEL_293;
            }
            uint64_t v132 = (v131 >> 3) + 1;
            uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
            int v134 = &size[-v133];
            int v130 = (void *)((char *)v130 - v133);
            unint64_t v135 = &v129[8 * v125 - 16];
            int v136 = (long long *)(size - 16);
            uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v138 = *v136;
              *(v135 - 1) = *(v136 - 1);
              *unint64_t v135 = v138;
              v135 -= 2;
              v136 -= 2;
              v137 -= 4;
            }
            while (v137);
            size = v134;
            if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_293:
              do
              {
                uint64_t v139 = *((void *)size - 1);
                size -= 8;
                *--int v130 = v139;
              }
              while (size != (unsigned char *)v123);
            }
            size = (unsigned char *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
          __p.__r_.__value_.__l.__size_ = v120;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v129[8 * v128];
          if (size)
          {
            operator delete(size);
            int v38 = *((_DWORD *)v3 + 24);
          }
        }
      }
      unint64_t Node = swift::Demangle::NodeFactory::createNode(v3, v145);
      std::string::size_type v116 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v117 = __p.__r_.__value_.__r.__words[0];
      while (v116 != v117)
      {
        int v118 = *(swift::Demangle::Node **)(v116 - 8);
        v116 -= 8;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v118, v3);
      }
      if (v39) {
        swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, (swift::Demangle::Node *)v39, v3);
      }
      if (v146)
      {
        unsigned int v119 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v3, 217);
        swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v119, v3);
      }
LABEL_268:
      unint64_t v115 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        return (swift::Demangle::Node *)Node;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_270;
    case 'I':
      __int16 v65 = 58;
      goto LABEL_187;
    case 'J':
      if (v5 >= v2) {
        goto LABEL_212;
      }
      int v70 = *(char *)(v6 + v5);
      if (v70 == 79)
      {
        *((void *)this + 9) = v1 + 2;
        return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(this);
      }
      else
      {
        if (v70 == 86)
        {
          *((void *)this + 9) = v1 + 2;
          __int16 v110 = 324;
        }
        else
        {
          if (v70 == 83)
          {
            *((void *)this + 9) = v1 + 2;
            return swift::Demangle::Demangler::demangleAutoDiffSubsetParametersThunk(this);
          }
LABEL_212:
          __int16 v110 = 320;
        }
        return swift::Demangle::Demangler::demangleAutoDiffFunctionOrSimpleThunk(this, v110);
      }
    case 'K':
    case 'k':
      if (v7 == 75) {
        __int16 v24 = 131;
      }
      else {
        __int16 v24 = 132;
      }
      if (v5 < v2 && *(unsigned char *)(v6 + v5) == 113)
      {
        *((void *)this + 9) = v1 + 2;
        char v25 = 1;
      }
      else
      {
        char v25 = 0;
      }
      int v41 = *((_DWORD *)this + 24);
      if (!v41) {
        return 0;
      }
      int v42 = v41 - 1;
      unint64_t Node = *(void *)(*((void *)this + 11) + 8 * (v41 - 1));
      *((_DWORD *)this + 24) = v41 - 1;
      if (!Node) {
        return (swift::Demangle::Node *)Node;
      }
      if (*(_WORD *)(Node + 16) != 232) {
        return 0;
      }
      char v147 = v25;
      unint64_t v43 = 0;
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      break;
    case 'L':
      unint64_t v69 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
      this = v3;
      __int16 v72 = 266;
      goto LABEL_193;
    case 'M':
      unint64_t v69 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAssocTypeName(this);
      this = v3;
      __int16 v72 = 7;
      goto LABEL_193;
    case 'N':
      unint64_t v73 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
      unint64_t v74 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAssocTypePath(v3);
      int v75 = *((_DWORD *)v3 + 24);
      if (v75
        && (unsigned int v76 = v75 - 1,
            unint64_t v77 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v76),
            *((_WORD *)v77 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v76;
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v108 = v3;
      __int16 v109 = 268;
      goto LABEL_205;
    case 'O':
      __int16 v65 = 160;
      goto LABEL_187;
    case 'P':
      __int16 v78 = 87;
      goto LABEL_162;
    case 'Q':
    case 'Y':
      unint64_t v26 = swift::Demangle::Demangler::demangleIndexAsNode(this);
      if (v7 == 81) {
        __int16 v27 = 328;
      }
      else {
        __int16 v27 = 329;
      }
      if (!v26) {
        return 0;
      }
      unint64_t v28 = (swift::Demangle::Node *)v26;
      unint64_t Node = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Node;
      if (!Node || Node + 24 > *((void *)v3 + 2))
      {
        unint64_t v29 = 2 * *((void *)v3 + 4);
        if (v29 <= 0x20) {
          unint64_t v29 = 32;
        }
        *((void *)v3 + 4) = v29;
        unint64_t v30 = v29 + 8;
        unint64_t v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *unint64_t v31 = *((void *)v3 + 3);
        unint64_t Node = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v31 + v30;
        *((void *)v3 + 3) = v31;
      }
      *((void *)v3 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v27;
      *(unsigned char *)(Node + 18) = 0;
      goto LABEL_225;
    case 'R':
    case 'r':
    case 'y':
      if (v7 == 121) {
        __int16 v8 = 202;
      }
      else {
        __int16 v8 = 200;
      }
      BOOL v9 = v7 == 82;
      BOOL v10 = v7 != 82 && v7 == 121;
      if (v9) {
        __int16 v11 = 201;
      }
      else {
        __int16 v11 = v8;
      }
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        *int v14 = *((void *)v3 + 3);
        unint64_t Node = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v14 + v13;
        *((void *)v3 + 3) = v14;
      }
      *((void *)v3 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v11;
      *(unsigned char *)(Node + 18) = 0;
      int v15 = *((_DWORD *)v3 + 24);
      if (!v15) {
        return (swift::Demangle::Node *)Node;
      }
      unint64_t v16 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v16 + 8) == 43)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v16, v3);
        int v15 = *((_DWORD *)v3 + 24);
      }
      if (!v10) {
        goto LABEL_24;
      }
      if (!v15) {
        return (swift::Demangle::Node *)Node;
      }
      unint64_t v17 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v17 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v17, v3);
        int v15 = *((_DWORD *)v3 + 24);
LABEL_24:
        if (!v15) {
          return (swift::Demangle::Node *)Node;
        }
      }
      int v18 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v18 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v18, v3);
        int v15 = *((_DWORD *)v3 + 24);
        if (!v15) {
          return (swift::Demangle::Node *)Node;
        }
      }
      unsigned int v19 = v15 - 1;
      unint64_t v20 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v19);
      if (*((_WORD *)v20 + 8) != 232) {
        return (swift::Demangle::Node *)Node;
      }
      *((_DWORD *)v3 + 24) = v19;
      unint64_t v21 = (swift::Demangle::Node *)Node;
      goto LABEL_226;
    case 'S':
      this = v3;
      __int16 v72 = 194;
      goto LABEL_193;
    case 'U':
      int v79 = *((_DWORD *)this + 24);
      if (!v79) {
        return 0;
      }
      uint64_t v80 = *((void *)this + 11);
      unint64_t v28 = *(swift::Demangle::Node **)(v80 + 8 * (v79 - 1));
      if (*((_WORD *)v28 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v79 - 1;
      if (v79 == 1) {
        return 0;
      }
      unsigned int v81 = v79 - 2;
      int v82 = *(swift::Demangle::Node **)(v80 + 8 * v81);
      *((_DWORD *)this + 24) = v81;
      if (!v82) {
        return 0;
      }
      unint64_t Node = swift::Demangle::NodeFactory::createNode(this, 203);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v82, v3);
      goto LABEL_225;
    case 'V':
      int v85 = v3;
      __int16 v86 = 255;
      unint64_t v87 = (swift::Demangle::Node *)v83;
      goto LABEL_200;
    case 'W':
      int v84 = swift::Demangle::Demangler::popProtocolConformance(v3);
      int v85 = v3;
      __int16 v86 = 196;
      unint64_t v87 = (swift::Demangle::Node *)v88;
      goto LABEL_200;
    case 'X':
      __int16 v65 = 60;
      goto LABEL_187;
    case 'Z':
    case 'z':
      int v32 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
      int v33 = *((_DWORD *)v3 + 24);
      if (!v33)
      {
        unint64_t v36 = 0;
        unint64_t v28 = 0;
        goto LABEL_219;
      }
      int v34 = v33 - 1;
      uint64_t v35 = *((void *)v3 + 11);
      unint64_t v28 = *(swift::Demangle::Node **)(v35 + 8 * (v33 - 1));
      if (*((_WORD *)v28 + 8) == 43)
      {
        *((_DWORD *)v3 + 24) = v34;
        if (v33 == 1)
        {
          unint64_t v36 = 0;
          goto LABEL_219;
        }
      }
      else
      {
        unint64_t v28 = 0;
        int v34 = *((_DWORD *)v3 + 24);
      }
      unint64_t v36 = *(swift::Demangle::Node **)(v35 + 8 * (v34 - 1));
      if (*((_WORD *)v36 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v34 - 1;
        if (v34 == 1) {
          goto LABEL_219;
        }
        --v34;
      }
      else
      {
        unint64_t v36 = 0;
      }
      unsigned int v111 = v34 - 1;
      v112 = *(swift::Demangle::Node **)(v35 + 8 * v111);
      if (*((_WORD *)v112 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v111;
        goto LABEL_220;
      }
LABEL_219:
      v112 = 0;
LABEL_220:
      if (v7 == 122) {
        __int16 v113 = 162;
      }
      else {
        __int16 v113 = 163;
      }
      unint64_t v114 = swift::Demangle::Demangler::createWithChildren(v3, v113, v112, v36, v32);
      unint64_t Node = v114;
      if (v28 && v114)
      {
LABEL_225:
        unint64_t v21 = (swift::Demangle::Node *)Node;
        unint64_t v20 = v28;
LABEL_226:
        swift::Demangle::Node::addChild(v21, v20, v3);
      }
      return (swift::Demangle::Node *)Node;
    case 'a':
      __int16 v65 = 171;
      goto LABEL_187;
    case 'b':
      unint64_t v87 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
      int v89 = *((_DWORD *)v3 + 24);
      if (v89
        && (unsigned int v90 = v89 - 1,
            int v84 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v90),
            *((_WORD *)v84 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v90;
      }
      else
      {
        int v84 = 0;
      }
      int v85 = v3;
      __int16 v86 = 269;
LABEL_200:
      return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(v85, v86, v84, v87);
    case 'c':
      this = v3;
      __int16 v72 = 263;
      goto LABEL_193;
    case 'd':
      __int16 v65 = 56;
      goto LABEL_187;
    case 'e':
      swift::Demangle::Demangler::demangleBridgedMethodParams(this, &__p);
      char v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v92 = __p.__r_.__value_.__l.__size_;
      }
      if (v92)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unint64_t Node = swift::Demangle::NodeFactory::createNode(v3, 277, p_p, v92);
        char v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        unint64_t Node = 0;
      }
      if ((v91 & 0x80) == 0) {
        return (swift::Demangle::Node *)Node;
      }
      unint64_t v115 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_270;
    case 'f':
      return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleFunctionSpecialization(this);
    case 'g':
      __int16 v66 = 91;
      goto LABEL_171;
    case 'i':
      __int16 v66 = 96;
      goto LABEL_171;
    case 'j':
      this = v3;
      __int16 v72 = 264;
      goto LABEL_193;
    case 'l':
      unint64_t v94 = swift::Demangle::Demangler::popAssocTypeName(this);
      if (!v94) {
        return 0;
      }
      unint64_t v69 = (swift::Demangle::Node *)v94;
      this = v3;
      __int16 v72 = 270;
LABEL_193:
      return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChild(this, v72, v69);
    case 'm':
      __int16 v65 = 144;
      goto LABEL_187;
    case 'n':
      unint64_t v73 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
      unint64_t v74 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAssocTypePath(v3);
      int v95 = *((_DWORD *)v3 + 24);
      if (v95
        && (unsigned int v96 = v95 - 1,
            unint64_t v77 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v96),
            *((_WORD *)v77 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v96;
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v108 = v3;
      __int16 v109 = 267;
LABEL_205:
      return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(v108, v109, v77, v74, v73);
    case 'o':
      __int16 v65 = 164;
      goto LABEL_187;
    case 'p':
      __int16 v78 = 86;
LABEL_162:
      int v97 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleSpecAttributes(this, v78);
      int v98 = *((_DWORD *)v3 + 24);
      if (v98
        && (unsigned int v99 = v98 - 1,
            unint64_t v100 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v99),
            *((_WORD *)v100 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v99;
      }
      else
      {
        unint64_t v100 = 0;
      }
      int v101 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChild(v3, 94, v100);
      unint64_t Node = 0;
      if (v97 && v101)
      {
        swift::Demangle::Node::addChild(v97, v101, v3);
        return v97;
      }
      return (swift::Demangle::Node *)Node;
    case 'q':
      this = v3;
      __int16 v72 = 265;
      goto LABEL_193;
    case 's':
      __int16 v66 = 95;
LABEL_171:
      return swift::Demangle::Demangler::demangleGenericSpecialization(this, v66);
    case 'u':
      __int16 v65 = 319;
      goto LABEL_187;
    case 'v':
      unsigned int v102 = swift::Demangle::Demangler::demangleIndex(this);
      if ((v102 & 0x80000000) != 0) {
        return 0;
      }
      unint64_t v103 = *((void *)v3 + 9);
      if (v103 < *((void *)v3 + 8) && (*((void *)v3 + 9) = v103 + 1, *(unsigned char *)(*((void *)v3 + 7) + v103) == 114))
      {
        uint64_t v104 = v102;
        unint64_t v105 = v3;
        __int16 v106 = 288;
      }
      else
      {
        uint64_t v104 = v102;
        unint64_t v105 = v3;
        __int16 v106 = 287;
      }
      return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v105, v106, v104);
    case 'w':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v107 = *(char *)(v6 + v5);
      switch(v107)
      {
        case 'B':
          __int16 v65 = 333;
          break;
        case 'S':
          __int16 v65 = 340;
          break;
        case 'b':
          __int16 v65 = 332;
          break;
        default:
          return 0;
      }
LABEL_187:
      return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this, v65);
    case 'x':
      __int16 v65 = 59;
      goto LABEL_187;
    default:
      return (swift::Demangle::Node *)Node;
  }
  do
  {
    if (v44 < v43)
    {
      *v44++ = Node;
      int v46 = v42;
      goto LABEL_87;
    }
    uint64_t v47 = v44 - v45;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
LABEL_289:
    }
      abort();
    if (((char *)v43 - (char *)v45) >> 2 > v48) {
      unint64_t v48 = ((char *)v43 - (char *)v45) >> 2;
    }
    if ((unint64_t)((char *)v43 - (char *)v45) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      if (v49 >> 61) {
LABEL_290:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      unint64_t v50 = (char *)operator new(8 * v49);
    }
    else
    {
      unint64_t v50 = 0;
    }
    unint64_t v51 = (unint64_t *)&v50[8 * v47];
    unint64_t *v51 = Node;
    unint64_t v52 = v51 + 1;
    if (v44 != v45)
    {
      unint64_t v53 = (char *)v44 - (char *)v45 - 8;
      if (v53 >= 0x168)
      {
        unint64_t v58 = ((char *)(v44 - 1) - (char *)v45) & 0xFFFFFFFFFFFFFFF8;
        if (&v50[(char *)v44 - (char *)v45 - 8 - v58] > &v50[(char *)v44 - (char *)v45 - 8])
        {
          unint64_t v54 = v44;
        }
        else if ((unint64_t *)((char *)v44 - v58 - 8) > v44 - 1)
        {
          unint64_t v54 = v44;
        }
        else if ((unint64_t)((char *)v45 - v50) >= 0x20)
        {
          uint64_t v59 = (v53 >> 3) + 1;
          uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v54 = &v44[v60 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v51 = (unint64_t *)((char *)v51 - v60);
          unint64_t v61 = &v50[8 * v47 - 16];
          unint64_t v62 = v44 - 2;
          uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v64 = *(_OWORD *)v62;
            *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
            *(_OWORD *)unint64_t v61 = v64;
            v61 -= 32;
            v62 -= 4;
            v63 -= 4;
          }
          while (v63);
          if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_82;
          }
        }
        else
        {
          unint64_t v54 = v44;
        }
      }
      else
      {
        unint64_t v54 = v44;
      }
      do
      {
        unint64_t v55 = *--v54;
        *--unint64_t v51 = v55;
      }
      while (v54 != v45);
LABEL_82:
      unint64_t v44 = v45;
    }
    unint64_t v45 = v51;
    unint64_t v43 = (unint64_t *)&v50[8 * v49];
    if (v44)
    {
      operator delete(v44);
      int v46 = *((_DWORD *)v3 + 24);
    }
    else
    {
      int v46 = v42;
    }
    unint64_t v44 = v52;
LABEL_87:
    if (!v46) {
      goto LABEL_275;
    }
    int v42 = v46 - 1;
    uint64_t v56 = *((void *)v3 + 11);
    unint64_t Node = *(void *)(v56 + 8 * (v46 - 1));
    *((_DWORD *)v3 + 24) = v46 - 1;
    if (!Node) {
      goto LABEL_287;
    }
    int v57 = *(unsigned __int16 *)(Node + 16);
  }
  while (v57 == 232);
  if (v57 == 43)
  {
    if (v46 == 1
      || (unsigned int v140 = v46 - 2, v141 = *(swift::Demangle::Node **)(v56 + 8 * v140), *((_DWORD *)v3 + 24) = v140, !v141))
    {
LABEL_275:
      unint64_t Node = 0;
      goto LABEL_287;
    }
    unint64_t v142 = swift::Demangle::Demangler::createWithChildren(v3, v24, v141, (swift::Demangle::Node *)Node);
  }
  else
  {
    unint64_t v142 = swift::Demangle::Demangler::createWithChild(v3, v24, (swift::Demangle::Node *)Node);
  }
  unint64_t Node = v142;
  while (v44 != v45)
  {
    unsigned int v143 = (swift::Demangle::Node *)*--v44;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v143, v3);
  }
  if (v147)
  {
    unint64_t v144 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v3, 217);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)Node, v144, v3);
  }
LABEL_287:
  if (v45)
  {
    unint64_t v115 = v45;
LABEL_270:
    operator delete(v115);
  }
  return (swift::Demangle::Node *)Node;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleWitness(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  char v7 = *(unsigned char *)(v6 + v1);
  switch(v7)
  {
    case 'C':
      int v37 = *((_DWORD *)this + 24);
      if (!v37) {
        return 0;
      }
      int v38 = v37 - 1;
      unint64_t v39 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v37 - 1));
      if (*((_WORD *)v39 + 8) != 232 && !swift::Demangle::isContext()) {
        return 0;
      }
      *((_DWORD *)v3 + 24) = v38;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v40 = 2 * *((void *)v3 + 4);
        if (v40 <= 0x20) {
          unint64_t v40 = 32;
        }
        *((void *)v3 + 4) = v40;
        unint64_t v41 = v40 + 8;
        int v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
        unint64_t v43 = (char *)v42 + v41;
        *int v42 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v43;
        *((void *)v3 + 3) = v42;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 62;
      goto LABEL_154;
    case 'G':
      unint64_t v45 = swift::Demangle::Demangler::popProtocolConformance(this);
      if (!v45) {
        return 0;
      }
      unint64_t v39 = v45;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v46 = 2 * *((void *)v3 + 4);
        if (v46 <= 0x20) {
          unint64_t v46 = 32;
        }
        *((void *)v3 + 4) = v46;
        unint64_t v47 = v46 + 8;
        unint64_t v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
        unint64_t v49 = (char *)v48 + v47;
        *unint64_t v48 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v49;
        *((void *)v3 + 3) = v48;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 88;
      goto LABEL_154;
    case 'I':
      unint64_t v50 = swift::Demangle::Demangler::popProtocolConformance(this);
      if (!v50) {
        return 0;
      }
      unint64_t v39 = v50;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v51 = 2 * *((void *)v3 + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32;
        }
        *((void *)v3 + 4) = v51;
        unint64_t v52 = v51 + 8;
        unint64_t v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unint64_t v54 = (char *)v53 + v52;
        void *v53 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v54;
        *((void *)v3 + 3) = v53;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 89;
      goto LABEL_154;
    case 'J':
      return swift::Demangle::Demangler::demangleDifferentiabilityWitness(this);
    case 'L':
      uint64_t v56 = swift::Demangle::Demangler::popProtocolConformance(this);
      int v57 = *((_DWORD *)v3 + 24);
      if (!v57) {
        return 0;
      }
      unsigned int v58 = v57 - 1;
      uint64_t v59 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v58);
      if (*((_WORD *)v59 + 8) != 232) {
        return 0;
      }
      unint64_t v39 = v56;
      *((_DWORD *)v3 + 24) = v58;
      if (!v56) {
        return 0;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v60 = 2 * *((void *)v3 + 4);
        if (v60 <= 0x20) {
          unint64_t v60 = 32;
        }
        *((void *)v3 + 4) = v60;
        unint64_t v61 = v60 + 8;
        unint64_t v62 = malloc_type_malloc(v60 + 8, 0xD0263BC5uLL);
        uint64_t v63 = (char *)v62 + v61;
        *unint64_t v62 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v63;
        *((void *)v3 + 3) = v62;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 136;
      goto LABEL_186;
    case 'O':
      if (v5 >= v2) {
        return 0;
      }
      unint64_t v4 = 0;
      *((void *)this + 9) = v1 + 2;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'C':
          int v65 = *((_DWORD *)this + 24);
          if (!v65) {
            goto LABEL_316;
          }
          int v66 = v65 - 1;
          uint64_t v67 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v67 + 8 * (v65 - 1));
          int v69 = v68[8];
          if (v69 == 232)
          {
            *((_DWORD *)this + 24) = v66;
          }
          else
          {
            if (v69 == 43)
            {
              *((_DWORD *)this + 24) = v66;
              if (v65 == 1 || (unsigned int v70 = v65 - 2, v71 = *(unsigned __int16 **)(v67 + 8 * v70), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v70;
              }
              __int16 v232 = 350;
LABEL_359:
              return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, v232, (swift::Demangle::Node *)v71, (swift::Demangle::Node *)v68);
            }
LABEL_316:
            unsigned int v68 = 0;
          }
          __int16 v231 = 350;
          goto LABEL_368;
        case 'D':
          int v156 = *((_DWORD *)this + 24);
          if (!v156) {
            goto LABEL_317;
          }
          int v157 = v156 - 1;
          uint64_t v158 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v158 + 8 * (v156 - 1));
          int v159 = v68[8];
          if (v159 == 232)
          {
            *((_DWORD *)this + 24) = v157;
          }
          else
          {
            if (v159 == 43)
            {
              *((_DWORD *)this + 24) = v157;
              if (v156 == 1 || (v160 = v156 - 2, int v71 = *(unsigned __int16 **)(v158 + 8 * v160), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v160;
              }
              __int16 v232 = 351;
              goto LABEL_359;
            }
LABEL_317:
            unsigned int v68 = 0;
          }
          __int16 v231 = 351;
          goto LABEL_368;
        case 'F':
          int v161 = *((_DWORD *)this + 24);
          if (!v161) {
            goto LABEL_318;
          }
          int v162 = v161 - 1;
          uint64_t v163 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v163 + 8 * (v161 - 1));
          int v164 = v68[8];
          if (v164 == 232)
          {
            *((_DWORD *)this + 24) = v162;
          }
          else
          {
            if (v164 == 43)
            {
              *((_DWORD *)this + 24) = v162;
              if (v161 == 1 || (v165 = v161 - 2, int v71 = *(unsigned __int16 **)(v163 + 8 * v165), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v165;
              }
              __int16 v232 = 352;
              goto LABEL_359;
            }
LABEL_318:
            unsigned int v68 = 0;
          }
          __int16 v231 = 352;
          goto LABEL_368;
        case 'H':
          int v166 = *((_DWORD *)this + 24);
          if (!v166) {
            goto LABEL_319;
          }
          int v167 = v166 - 1;
          uint64_t v168 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v168 + 8 * (v166 - 1));
          int v169 = v68[8];
          if (v169 == 232)
          {
            *((_DWORD *)this + 24) = v167;
          }
          else
          {
            if (v169 == 43)
            {
              *((_DWORD *)this + 24) = v167;
              if (v166 == 1 || (v170 = v166 - 2, int v71 = *(unsigned __int16 **)(v168 + 8 * v170), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v170;
              }
              __int16 v232 = 353;
              goto LABEL_359;
            }
LABEL_319:
            unsigned int v68 = 0;
          }
          __int16 v231 = 353;
          goto LABEL_368;
        case 'b':
          int v171 = *((_DWORD *)this + 24);
          if (!v171) {
            goto LABEL_320;
          }
          int v172 = v171 - 1;
          uint64_t v173 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v173 + 8 * (v171 - 1));
          int v174 = v68[8];
          if (v174 == 232)
          {
            *((_DWORD *)this + 24) = v172;
          }
          else
          {
            if (v174 == 43)
            {
              *((_DWORD *)this + 24) = v172;
              if (v171 == 1 || (v175 = v171 - 2, int v71 = *(unsigned __int16 **)(v173 + 8 * v175), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v175;
              }
              __int16 v232 = 282;
              goto LABEL_359;
            }
LABEL_320:
            unsigned int v68 = 0;
          }
          __int16 v231 = 282;
          goto LABEL_368;
        case 'c':
          int v176 = *((_DWORD *)this + 24);
          if (!v176) {
            goto LABEL_321;
          }
          int v177 = v176 - 1;
          uint64_t v178 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v178 + 8 * (v176 - 1));
          int v179 = v68[8];
          if (v179 == 232)
          {
            *((_DWORD *)this + 24) = v177;
          }
          else
          {
            if (v179 == 43)
            {
              *((_DWORD *)this + 24) = v177;
              if (v176 == 1 || (v180 = v176 - 2, int v71 = *(unsigned __int16 **)(v178 + 8 * v180), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v180;
              }
              __int16 v232 = 283;
              goto LABEL_359;
            }
LABEL_321:
            unsigned int v68 = 0;
          }
          __int16 v231 = 283;
          goto LABEL_368;
        case 'd':
          int v181 = *((_DWORD *)this + 24);
          if (!v181) {
            goto LABEL_322;
          }
          int v182 = v181 - 1;
          uint64_t v183 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v183 + 8 * (v181 - 1));
          int v184 = v68[8];
          if (v184 == 232)
          {
            *((_DWORD *)this + 24) = v182;
          }
          else
          {
            if (v184 == 43)
            {
              *((_DWORD *)this + 24) = v182;
              if (v181 == 1 || (v185 = v181 - 2, int v71 = *(unsigned __int16 **)(v183 + 8 * v185), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v185;
              }
              __int16 v232 = 284;
              goto LABEL_359;
            }
LABEL_322:
            unsigned int v68 = 0;
          }
          __int16 v231 = 284;
          goto LABEL_368;
        case 'e':
          int v186 = *((_DWORD *)this + 24);
          if (!v186) {
            goto LABEL_323;
          }
          int v187 = v186 - 1;
          uint64_t v188 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v188 + 8 * (v186 - 1));
          int v189 = v68[8];
          if (v189 == 232)
          {
            *((_DWORD *)this + 24) = v187;
          }
          else
          {
            if (v189 == 43)
            {
              *((_DWORD *)this + 24) = v187;
              if (v186 == 1 || (v190 = v186 - 2, int v71 = *(unsigned __int16 **)(v188 + 8 * v190), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v190;
              }
              __int16 v232 = 279;
              goto LABEL_359;
            }
LABEL_323:
            unsigned int v68 = 0;
          }
          __int16 v231 = 279;
          goto LABEL_368;
        case 'f':
          int v191 = *((_DWORD *)this + 24);
          if (!v191) {
            goto LABEL_324;
          }
          int v192 = v191 - 1;
          uint64_t v193 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v193 + 8 * (v191 - 1));
          int v194 = v68[8];
          if (v194 == 232)
          {
            *((_DWORD *)this + 24) = v192;
          }
          else
          {
            if (v194 == 43)
            {
              *((_DWORD *)this + 24) = v192;
              if (v191 == 1 || (v195 = v191 - 2, int v71 = *(unsigned __int16 **)(v193 + 8 * v195), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v195;
              }
              __int16 v232 = 285;
              goto LABEL_359;
            }
LABEL_324:
            unsigned int v68 = 0;
          }
          __int16 v231 = 285;
          goto LABEL_368;
        case 'g':
          int v196 = *((_DWORD *)this + 24);
          if (!v196) {
            goto LABEL_325;
          }
          int v197 = v196 - 1;
          uint64_t v198 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v198 + 8 * (v196 - 1));
          int v199 = v68[8];
          if (v199 == 232)
          {
            *((_DWORD *)this + 24) = v197;
          }
          else
          {
            if (v199 == 43)
            {
              *((_DWORD *)this + 24) = v197;
              if (v196 == 1 || (v200 = v196 - 2, int v71 = *(unsigned __int16 **)(v198 + 8 * v200), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v200;
              }
              __int16 v232 = 345;
              goto LABEL_359;
            }
LABEL_325:
            unsigned int v68 = 0;
          }
          __int16 v231 = 345;
          goto LABEL_368;
        case 'h':
          int v201 = *((_DWORD *)this + 24);
          if (!v201) {
            goto LABEL_326;
          }
          int v202 = v201 - 1;
          uint64_t v203 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v203 + 8 * (v201 - 1));
          int v204 = v68[8];
          if (v204 == 232)
          {
            *((_DWORD *)this + 24) = v202;
          }
          else
          {
            if (v204 == 43)
            {
              *((_DWORD *)this + 24) = v202;
              if (v201 == 1 || (v205 = v201 - 2, int v71 = *(unsigned __int16 **)(v203 + 8 * v205), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v205;
              }
              __int16 v232 = 286;
              goto LABEL_359;
            }
LABEL_326:
            unsigned int v68 = 0;
          }
          __int16 v231 = 286;
          goto LABEL_368;
        case 'i':
          std::string::size_type v124 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
          int v206 = *((_DWORD *)v3 + 24);
          if (!v206) {
            goto LABEL_327;
          }
          int v207 = v206 - 1;
          uint64_t v208 = *((void *)v3 + 11);
          std::string::size_type v123 = *(unsigned __int16 **)(v208 + 8 * (v206 - 1));
          int v209 = v123[8];
          if (v209 == 232)
          {
            *((_DWORD *)v3 + 24) = v207;
            goto LABEL_355;
          }
          if (v209 != 43)
          {
LABEL_327:
            std::string::size_type v123 = 0;
LABEL_355:
            this = v3;
            __int16 v232 = 343;
            goto LABEL_358;
          }
          *((_DWORD *)v3 + 24) = v207;
          if (v206 == 1
            || (v210 = v206 - 2, std::string::size_type v120 = *(swift::Demangle::Node **)(v208 + 8 * v210), *((_WORD *)v120 + 8) != 232))
          {
            std::string::size_type v120 = 0;
          }
          else
          {
            *((_DWORD *)v3 + 24) = v210;
          }
          uint64_t v121 = v3;
          __int16 v122 = 343;
LABEL_165:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(v121, v122, v120, (swift::Demangle::Node *)v123, v124);
        case 'j':
          std::string::size_type v124 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
          int v211 = *((_DWORD *)v3 + 24);
          if (!v211) {
            goto LABEL_328;
          }
          int v212 = v211 - 1;
          uint64_t v213 = *((void *)v3 + 11);
          std::string::size_type v123 = *(unsigned __int16 **)(v213 + 8 * (v211 - 1));
          int v214 = v123[8];
          if (v214 == 232)
          {
            *((_DWORD *)v3 + 24) = v212;
          }
          else
          {
            if (v214 == 43)
            {
              *((_DWORD *)v3 + 24) = v212;
              if (v211 == 1
                || (v215 = v211 - 2, std::string::size_type v120 = *(swift::Demangle::Node **)(v213 + 8 * v215), *((_WORD *)v120 + 8) != 232))
              {
                std::string::size_type v120 = 0;
              }
              else
              {
                *((_DWORD *)v3 + 24) = v215;
              }
              uint64_t v121 = v3;
              __int16 v122 = 344;
              goto LABEL_165;
            }
LABEL_328:
            std::string::size_type v123 = 0;
          }
          this = v3;
          __int16 v232 = 344;
LABEL_358:
          int v71 = v123;
          unsigned int v68 = (unsigned __int16 *)v124;
          goto LABEL_359;
        case 'r':
          int v216 = *((_DWORD *)this + 24);
          if (!v216) {
            goto LABEL_329;
          }
          int v217 = v216 - 1;
          uint64_t v218 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v218 + 8 * (v216 - 1));
          int v219 = v68[8];
          if (v219 == 232)
          {
            *((_DWORD *)this + 24) = v217;
          }
          else
          {
            if (v219 == 43)
            {
              *((_DWORD *)this + 24) = v217;
              if (v216 == 1 || (v220 = v216 - 2, int v71 = *(unsigned __int16 **)(v218 + 8 * v220), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v220;
              }
              __int16 v232 = 280;
              goto LABEL_359;
            }
LABEL_329:
            unsigned int v68 = 0;
          }
          __int16 v231 = 280;
          goto LABEL_368;
        case 's':
          int v221 = *((_DWORD *)this + 24);
          if (!v221) {
            goto LABEL_330;
          }
          int v222 = v221 - 1;
          uint64_t v223 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v223 + 8 * (v221 - 1));
          int v224 = v68[8];
          if (v224 == 232)
          {
            *((_DWORD *)this + 24) = v222;
          }
          else
          {
            if (v224 == 43)
            {
              *((_DWORD *)this + 24) = v222;
              if (v221 == 1 || (v225 = v221 - 2, int v71 = *(unsigned __int16 **)(v223 + 8 * v225), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v225;
              }
              __int16 v232 = 281;
              goto LABEL_359;
            }
LABEL_330:
            unsigned int v68 = 0;
          }
          __int16 v231 = 281;
          goto LABEL_368;
        case 'y':
          int v226 = *((_DWORD *)this + 24);
          if (!v226) {
            goto LABEL_331;
          }
          int v227 = v226 - 1;
          uint64_t v228 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v228 + 8 * (v226 - 1));
          int v229 = v68[8];
          if (v229 == 232)
          {
            *((_DWORD *)this + 24) = v227;
          }
          else
          {
            if (v229 == 43)
            {
              *((_DWORD *)this + 24) = v227;
              if (v226 == 1 || (v230 = v226 - 2, int v71 = *(unsigned __int16 **)(v228 + 8 * v230), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v230;
              }
              __int16 v232 = 278;
              goto LABEL_359;
            }
LABEL_331:
            unsigned int v68 = 0;
          }
          __int16 v231 = 278;
LABEL_368:
          return (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChild(this, v231, (swift::Demangle::Node *)v68);
        default:
          return (swift::Demangle::Node *)v4;
      }
    case 'P':
      __int16 v72 = swift::Demangle::Demangler::popProtocolConformance(this);
      if (!v72) {
        return 0;
      }
      unint64_t v39 = v72;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v73 = 2 * *((void *)v3 + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32;
        }
        *((void *)v3 + 4) = v73;
        unint64_t v74 = v73 + 8;
        int v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        unsigned int v76 = (char *)v75 + v74;
        *int v75 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v76;
        *((void *)v3 + 3) = v75;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 197;
      goto LABEL_154;
    case 'S':
      unint64_t v77 = swift::Demangle::Demangler::popProtocol(this);
      if (!v77) {
        return 0;
      }
      unint64_t v39 = (swift::Demangle::Node *)v77;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v78 = 2 * *((void *)v3 + 4);
        if (v78 <= 0x20) {
          unint64_t v78 = 32;
        }
        *((void *)v3 + 4) = v78;
        unint64_t v79 = v78 + 8;
        uint64_t v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
        unsigned int v81 = (char *)v80 + v79;
        *uint64_t v80 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v81;
        *((void *)v3 + 3) = v80;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 195;
      goto LABEL_154;
    case 'T':
      int v82 = *((_DWORD *)this + 24);
      if (v82
        && (unsigned int v83 = v82 - 1,
            int v84 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v83),
            *((_WORD *)v84 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v83;
      }
      else
      {
        int v84 = 0;
      }
      unint64_t v119 = swift::Demangle::Demangler::popAssocTypePath(this);
      std::string::size_type v120 = swift::Demangle::Demangler::popProtocolConformance(v3);
      uint64_t v121 = v3;
      __int16 v122 = 9;
      std::string::size_type v123 = (unsigned __int16 *)v119;
      std::string::size_type v124 = v84;
      goto LABEL_165;
    case 'V':
      int v85 = *((_DWORD *)this + 24);
      if (!v85) {
        return 0;
      }
      unsigned int v86 = v85 - 1;
      unint64_t v39 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v86);
      if (*((_WORD *)v39 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v86;
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v87 = 2 * *((void *)this + 4);
        if (v87 <= 0x20) {
          unint64_t v87 = 32;
        }
        *((void *)this + 4) = v87;
        unint64_t v88 = v87 + 8;
        int v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        unsigned int v90 = (char *)v89 + v88;
        *int v89 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v90;
        *((void *)v3 + 3) = v89;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 253;
      goto LABEL_154;
    case 'Z':
    case 'z':
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        __int16 v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        *__int16 v11 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v11 + v10;
        *((void *)v3 + 3) = v11;
      }
      *((void *)v3 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 317;
      *(unsigned char *)(v8 + 18) = 0;
      unsigned int v12 = *((_DWORD *)v3 + 24);
      if (!v12)
      {
        unint64_t v13 = 0;
        goto LABEL_195;
      }
      char v233 = v7;
      unint64_t v13 = 0;
      int v14 = 0;
      int v15 = 0;
      while (2)
      {
        uint64_t v17 = *((void *)v3 + 11);
        if (*(_WORD *)(*(void *)(v17 + 8 * (v12 - 1)) + 16) == 275)
        {
          *((_DWORD *)v3 + 24) = v12 - 1;
          if (v12 == 1) {
            goto LABEL_207;
          }
          v12 -= 2;
          uint64_t v18 = *(void *)(v17 + 8 * v12);
          int v19 = *(unsigned __int16 *)(v18 + 16);
          if ((v19 - 173) > 0x3C || ((1 << (v19 + 83)) & 0x100000010000010DLL) == 0)
          {
            BOOL v21 = (v19 - 101) > 0x24 || ((1 << (v19 - 101)) & 0x1000800001) == 0;
            if (v21 && v19 != 347) {
              goto LABEL_207;
            }
          }
          *((_DWORD *)v3 + 24) = v12;
          if (v14 < v15)
          {
            *(void *)int v14 = v18;
            unint64_t v16 = v14 + 8;
            v14 += 8;
            if (!v12) {
              goto LABEL_190;
            }
            continue;
          }
          uint64_t v22 = (v14 - v13) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            abort();
          }
          if ((v15 - v13) >> 2 > v23) {
            unint64_t v23 = (v15 - v13) >> 2;
          }
          if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            if (v24 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            char v25 = operator new(8 * v24);
          }
          else
          {
            char v25 = 0;
          }
          unint64_t v26 = &v25[8 * v22];
          *(void *)unint64_t v26 = v18;
          unint64_t v16 = v26 + 8;
          if (v14 == v13) {
            goto LABEL_39;
          }
          unint64_t v27 = v14 - v13 - 8;
          if (v27 < 0x168)
          {
            unint64_t v28 = v14;
            goto LABEL_38;
          }
          unint64_t v30 = (v14 - 8 - v13) & 0xFFFFFFFFFFFFFFF8;
          if (&v25[v14 - v13 - 8 - v30] > &v25[v14 - v13 - 8])
          {
            unint64_t v28 = v14;
          }
          else
          {
            if (&v14[-v30 - 8] <= v14 - 8)
            {
              if ((unint64_t)(v13 - v25) < 0x20)
              {
                unint64_t v28 = v14;
                goto LABEL_38;
              }
              uint64_t v31 = (v27 >> 3) + 1;
              uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v28 = &v14[-v32];
              v26 -= v32;
              int v33 = &v25[8 * v22 - 16];
              int v34 = v14 - 16;
              uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *int v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_38;
              }
LABEL_39:
              int v15 = &v25[8 * v24];
              if (v13)
              {
                operator delete(v13);
                unsigned int v12 = *((_DWORD *)v3 + 24);
              }
              unint64_t v13 = v26;
              int v14 = v16;
              if (!v12) {
                goto LABEL_190;
              }
              continue;
            }
            unint64_t v28 = v14;
          }
          do
          {
LABEL_38:
            uint64_t v29 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v28 != v13);
          goto LABEL_39;
        }
        break;
      }
      unint64_t v16 = v14;
LABEL_190:
      if (v16 == v13)
      {
        unint64_t v13 = v16;
      }
      else
      {
        do
        {
          uint64_t v137 = (swift::Demangle::Node *)*((void *)v16 - 1);
          v16 -= 8;
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v8, v137, v3);
        }
        while (v16 != v13);
      }
      char v7 = v233;
LABEL_195:
      long long v138 = swift::Demangle::Demangler::popContext(v3);
      if (v138 && (v7 == 90 ? (__int16 v139 = 315) : (__int16 v139 = 316), v8))
      {
        unsigned int v140 = v138;
        unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 1) = v4;
        if (!v4 || v4 + 24 > *((void *)v3 + 2))
        {
          unint64_t v141 = 2 * *((void *)v3 + 4);
          if (v141 <= 0x20) {
            unint64_t v141 = 32;
          }
          *((void *)v3 + 4) = v141;
          unint64_t v142 = v141 + 8;
          unsigned int v143 = malloc_type_malloc(v141 + 8, 0xD0263BC5uLL);
          unint64_t v144 = (char *)v143 + v142;
          *unsigned int v143 = *((void *)v3 + 3);
          unint64_t v4 = ((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 2) = v144;
          *((void *)v3 + 3) = v143;
        }
        *((void *)v3 + 1) = v4 + 24;
        *(_WORD *)(v4 + 16) = v139;
        *(unsigned char *)(v4 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v140, v3);
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v8, v3);
        if (!v13) {
          return (swift::Demangle::Node *)v4;
        }
      }
      else
      {
LABEL_207:
        unint64_t v4 = 0;
        if (!v13) {
          return (swift::Demangle::Node *)v4;
        }
      }
      operator delete(v13);
      return (swift::Demangle::Node *)v4;
    case 'a':
      char v91 = swift::Demangle::Demangler::popProtocolConformance(this);
      if (!v91) {
        return 0;
      }
      unint64_t v39 = v91;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v92 = 2 * *((void *)v3 + 4);
        if (v92 <= 0x20) {
          unint64_t v92 = 32;
        }
        *((void *)v3 + 4) = v92;
        unint64_t v93 = v92 + 8;
        unint64_t v94 = malloc_type_malloc(v92 + 8, 0xD0263BC5uLL);
        int v95 = (char *)v94 + v93;
        void *v94 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v95;
        *((void *)v3 + 3) = v94;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 198;
      goto LABEL_154;
    case 'b':
      int v96 = *((_DWORD *)this + 24);
      if (v96
        && (unsigned int v97 = v96 - 1,
            unint64_t v39 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v97),
            *((_WORD *)v39 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v97;
      }
      else
      {
        unint64_t v39 = 0;
      }
      uint64_t v125 = swift::Demangle::Demangler::popProtocolConformance(this);
      unint64_t v4 = 0;
      if (!v39) {
        return (swift::Demangle::Node *)v4;
      }
      uint64_t v59 = v125;
      if (!v125) {
        return (swift::Demangle::Node *)v4;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v126 = 2 * *((void *)v3 + 4);
        if (v126 <= 0x20) {
          unint64_t v126 = 32;
        }
        *((void *)v3 + 4) = v126;
        unint64_t v127 = v126 + 8;
        unint64_t v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        unint64_t v129 = (char *)v128 + v127;
        void *v128 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v129;
        *((void *)v3 + 3) = v128;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 10;
      goto LABEL_186;
    case 'l':
      int v98 = swift::Demangle::Demangler::popProtocolConformance(this);
      int v99 = *((_DWORD *)v3 + 24);
      if (!v99) {
        return 0;
      }
      unsigned int v100 = v99 - 1;
      uint64_t v59 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * v100);
      if (*((_WORD *)v59 + 8) != 232) {
        return 0;
      }
      unint64_t v39 = v98;
      *((_DWORD *)v3 + 24) = v100;
      if (!v98) {
        return 0;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v101 = 2 * *((void *)v3 + 4);
        if (v101 <= 0x20) {
          unint64_t v101 = 32;
        }
        *((void *)v3 + 4) = v101;
        unint64_t v102 = v101 + 8;
        unint64_t v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
        uint64_t v104 = (char *)v103 + v102;
        *unint64_t v103 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v104;
        *((void *)v3 + 3) = v103;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 135;
      goto LABEL_186;
    case 'p':
      unint64_t v105 = swift::Demangle::Demangler::popProtocolConformance(this);
      if (!v105) {
        return 0;
      }
      unint64_t v39 = v105;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v106 = 2 * *((void *)v3 + 4);
        if (v106 <= 0x20) {
          unint64_t v106 = 32;
        }
        *((void *)v3 + 4) = v106;
        unint64_t v107 = v106 + 8;
        unint64_t v108 = malloc_type_malloc(v106 + 8, 0xD0263BC5uLL);
        __int16 v109 = (char *)v108 + v107;
        *unint64_t v108 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v109;
        *((void *)v3 + 3) = v108;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 199;
      goto LABEL_154;
    case 'r':
      __int16 v110 = swift::Demangle::Demangler::popProtocolConformance(this);
      if (!v110) {
        return 0;
      }
      unint64_t v39 = v110;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v111 = 2 * *((void *)v3 + 4);
        if (v111 <= 0x20) {
          unint64_t v111 = 32;
        }
        *((void *)v3 + 4) = v111;
        unint64_t v112 = v111 + 8;
        __int16 v113 = malloc_type_malloc(v111 + 8, 0xD0263BC5uLL);
        unint64_t v114 = (char *)v113 + v112;
        *__int16 v113 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v114;
        *((void *)v3 + 3) = v113;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 90;
LABEL_154:
      *(_WORD *)(v4 + 16) = v44;
      *(unsigned char *)(v4 + 18) = 0;
      goto LABEL_187;
    case 't':
      int v115 = *((_DWORD *)this + 24);
      if (v115 {
        && (int v116 = v115 - 1,
      }
            unint64_t v39 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v115 - 1)),
      {
        *((_DWORD *)v3 + 24) = v116;
      }
      else
      {
        unint64_t v39 = 0;
      }
      int v130 = swift::Demangle::Demangler::popProtocolConformance(v3);
      unint64_t v4 = 0;
      if (!v39) {
        return (swift::Demangle::Node *)v4;
      }
      uint64_t v59 = v130;
      if (!v130) {
        return (swift::Demangle::Node *)v4;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v131 = 2 * *((void *)v3 + 4);
        if (v131 <= 0x20) {
          unint64_t v131 = 32;
        }
        *((void *)v3 + 4) = v131;
        unint64_t v132 = v131 + 8;
        uint64_t v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
        int v134 = (char *)v133 + v132;
        void *v133 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v134;
        *((void *)v3 + 3) = v133;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 6;
LABEL_186:
      *(_WORD *)(v4 + 16) = v64;
      *(unsigned char *)(v4 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v59, v3);
LABEL_187:
      unint64_t v135 = (swift::Demangle::Node *)v4;
      int v136 = v39;
      goto LABEL_188;
    case 'v':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v117 = *(char *)(v6 + v5);
      if (v117 == 100)
      {
        uint64_t v118 = 0;
      }
      else
      {
        unint64_t v4 = 0;
        if (v117 != 105) {
          return (swift::Demangle::Node *)v4;
        }
        uint64_t v118 = 1;
      }
      unint64_t v145 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v145;
      if (!v145 || v145 + 24 > *((void *)this + 2))
      {
        unint64_t v146 = 2 * *((void *)this + 4);
        if (v146 <= 0x20) {
          unint64_t v146 = 32;
        }
        *((void *)this + 4) = v146;
        unint64_t v147 = v146 + 8;
        int v148 = malloc_type_malloc(v146 + 8, 0xD0263BC5uLL);
        *int v148 = *((void *)v3 + 3);
        unint64_t v145 = ((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v148 + v147;
        *((void *)v3 + 3) = v148;
      }
      *((void *)v3 + 1) = v145 + 24;
      *(_WORD *)(v145 + 16) = 52;
      *(unsigned char *)(v145 + 18) = 4;
      *(void *)unint64_t v145 = v118;
      int v149 = *((_DWORD *)v3 + 24);
      if (!v149) {
        return 0;
      }
      int v150 = v149 - 1;
      unint64_t v151 = *(swift::Demangle::Node **)(*((void *)v3 + 11) + 8 * (v149 - 1));
      if (*((_WORD *)v151 + 8) != 232 && !swift::Demangle::isContext()) {
        return 0;
      }
      *((_DWORD *)v3 + 24) = v150;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v152 = 2 * *((void *)v3 + 4);
        if (v152 <= 0x20) {
          unint64_t v152 = 32;
        }
        *((void *)v3 + 4) = v152;
        unint64_t v153 = v152 + 8;
        int v154 = malloc_type_malloc(v152 + 8, 0xD0263BC5uLL);
        unsigned int v155 = (char *)v154 + v153;
        *int v154 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v155;
        *((void *)v3 + 3) = v154;
      }
      *((void *)v3 + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 73;
      *(unsigned char *)(v4 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v145, v3);
      unint64_t v135 = (swift::Demangle::Node *)v4;
      int v136 = v151;
LABEL_188:
      swift::Demangle::Node::addChild(v135, v136, v3);
      return (swift::Demangle::Node *)v4;
    default:
      return (swift::Demangle::Node *)v4;
  }
}

unint64_t swift::Demangle::Demangler::demangleSpecialType(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  int v7 = *(unsigned __int8 *)(v6 + v1);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      __int16 v14 = 64;
      goto LABEL_79;
    case 'B':
      __int16 v14 = 165;
      goto LABEL_79;
    case 'C':
      __int16 v14 = 22;
      goto LABEL_79;
    case 'D':
      int v15 = *((_DWORD *)this + 24);
      if (!v15) {
        return 0;
      }
      unsigned int v16 = v15 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v16);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v16;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v18 = 2 * *((void *)this + 4);
        if (v18 <= 0x20) {
          unint64_t v18 = 32;
        }
        *((void *)this + 4) = v18;
        unint64_t v19 = v18 + 8;
        unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
        BOOL v21 = (char *)v20 + v19;
        *unint64_t v20 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v21;
        *((void *)this + 3) = v20;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 57;
      goto LABEL_135;
    case 'E':
      __int16 v14 = 65;
      goto LABEL_79;
    case 'G':
    case 'g':
      return swift::Demangle::Demangler::demangleExtendedExistentialShape(this, (char)v7);
    case 'K':
      __int16 v14 = 11;
      goto LABEL_79;
    case 'L':
      __int16 v14 = 166;
      goto LABEL_79;
    case 'M':
      unint64_t v23 = swift::Demangle::Demangler::demangleMetatypeRepresentation(this);
      int v24 = *((_DWORD *)this + 24);
      if (!v24) {
        return 0;
      }
      unsigned int v25 = v24 - 1;
      unint64_t v26 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v25);
      if (*((_WORD *)v26 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v23;
      *((_DWORD *)this + 24) = v25;
      if (!v23) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2 * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        uint64_t v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        unint64_t v30 = (char *)v29 + v28;
        *uint64_t v29 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v31 = 145;
      goto LABEL_102;
    case 'P':
      unint64_t v32 = swift::Demangle::Demangler::demangleConstrainedExistentialRequirementList(this);
      int v33 = *((_DWORD *)this + 24);
      if (!v33) {
        return 0;
      }
      unsigned int v34 = v33 - 1;
      uint64_t v35 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v34);
      if (*((_WORD *)v35 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v32;
      *((_DWORD *)this + 24) = v34;
      if (!v32) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v36 = 2 * *((void *)this + 4);
        if (v36 <= 0x20) {
          unint64_t v36 = 32;
        }
        *((void *)this + 4) = v36;
        unint64_t v37 = v36 + 8;
        int v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
        unint64_t v39 = (char *)v38 + v37;
        *int v38 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v39;
        *((void *)this + 3) = v38;
      }
      *((void *)this + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 83;
      *(unsigned char *)(v17 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v17, v35, this);
      goto LABEL_136;
    case 'S':
      if (v5 >= v2) {
        return 0;
      }
      unint64_t v4 = 0;
      *((void *)this + 9) = v1 + 2;
      int v40 = *(char *)(v6 + v5);
      if (v40 > 111)
      {
        if (v40 == 112)
        {
          int v166 = *((_DWORD *)this + 24);
          if (v166
            && (unsigned int v167 = v166 - 1,
                unint64_t v43 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v167),
                *((_WORD *)v43 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v167;
          }
          else
          {
            unint64_t v43 = 0;
          }
          __int16 v168 = 298;
        }
        else
        {
          if (v40 != 113) {
            return v4;
          }
          int v131 = *((_DWORD *)this + 24);
          if (v131
            && (unsigned int v132 = v131 - 1,
                unint64_t v43 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v132),
                *((_WORD *)v43 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v132;
          }
          else
          {
            unint64_t v43 = 0;
          }
          __int16 v168 = 295;
        }
        goto LABEL_261;
      }
      if (v40 != 68)
      {
        if (v40 != 97) {
          return v4;
        }
        int v41 = *((_DWORD *)this + 24);
        if (v41
          && (unsigned int v42 = v41 - 1,
              unint64_t v43 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v42),
              *((_WORD *)v43 + 8) == 232))
        {
          *((_DWORD *)this + 24) = v42;
        }
        else
        {
          unint64_t v43 = 0;
        }
        __int16 v168 = 296;
LABEL_261:
        int v169 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChild(this, v168, v43);
        goto LABEL_268;
      }
      int v162 = *((_DWORD *)this + 24);
      if (v162)
      {
        int v163 = v162 - 1;
        uint64_t v164 = *((void *)this + 11);
        unsigned int v165 = *(swift::Demangle::Node **)(v164 + 8 * (v162 - 1));
        if (*((_WORD *)v165 + 8) == 232)
        {
          *((_DWORD *)this + 24) = v163;
          if (v162 == 1) {
            goto LABEL_266;
          }
        }
        else
        {
          unsigned int v165 = 0;
          int v163 = *((_DWORD *)this + 24);
        }
        unsigned int v170 = v163 - 1;
        int v171 = *(swift::Demangle::Node **)(v164 + 8 * v170);
        if (*((_WORD *)v171 + 8) == 232)
        {
          *((_DWORD *)this + 24) = v170;
          goto LABEL_267;
        }
      }
      else
      {
        unsigned int v165 = 0;
      }
LABEL_266:
      int v171 = 0;
LABEL_267:
      int v169 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 297, v171, v165);
LABEL_268:
      return swift::Demangle::Demangler::createType(this, v169);
    case 'U':
      __int16 v14 = 245;
      goto LABEL_79;
    case 'X':
    case 'x':
      if (v7 == 88)
      {
        int v9 = *((_DWORD *)this + 24);
        if (!v9) {
          return 0;
        }
        unsigned int v10 = v9 - 1;
        __int16 v11 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v10);
        if (*((_WORD *)v11 + 8) != 43) {
          return 0;
        }
        *((_DWORD *)this + 24) = v10;
        unint64_t v12 = swift::Demangle::Demangler::popTypeList(this);
        if (!v12) {
          return 0;
        }
        unint64_t v13 = (swift::Demangle::Node *)v12;
      }
      else
      {
        unint64_t v13 = 0;
        __int16 v11 = 0;
      }
      unint64_t v107 = swift::Demangle::Demangler::popTypeList(this);
      if (!v107) {
        return 0;
      }
      unint64_t v108 = v107;
      unint64_t v109 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v109;
      if (!v109 || v109 + 24 > *((void *)this + 2))
      {
        unint64_t v110 = 2 * *((void *)this + 4);
        if (v110 <= 0x20) {
          unint64_t v110 = 32;
        }
        *((void *)this + 4) = v110;
        unint64_t v111 = v110 + 8;
        unint64_t v112 = malloc_type_malloc(v110 + 8, 0xD0263BC5uLL);
        __int16 v113 = (char *)v112 + v111;
        void *v112 = *((void *)this + 3);
        unint64_t v109 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v113;
        *((void *)this + 3) = v112;
      }
      unint64_t v114 = v109 + 24;
      *((void *)this + 1) = v109 + 24;
      *(_WORD *)(v109 + 16) = 212;
      *(unsigned char *)(v109 + 18) = 0;
      uint64_t v115 = *(unsigned __int8 *)(v108 + 18);
      switch(v115)
      {
        case 1:
          break;
        case 5:
          uint64_t v115 = *(unsigned int *)(v108 + 8);
          if (!v115) {
            goto LABEL_234;
          }
          break;
        case 2:
          uint64_t v115 = 2;
          break;
        default:
          goto LABEL_234;
      }
      int v172 = v13;
      unint64_t v133 = 0;
      break;
    case 'Y':
      return swift::Demangle::Demangler::demangleAnyGenericType(this, 167);
    case 'Z':
      __int16 v44 = (swift::Demangle::Node *)swift::Demangle::Demangler::popTypeList(this);
      int v45 = *((_DWORD *)this + 24);
      if (v45
        && (unsigned int v46 = v45 - 1,
            unint64_t v47 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v46),
            *((_WORD *)v47 + 8) == 101))
      {
        *((_DWORD *)this + 24) = v46;
      }
      else
      {
        unint64_t v47 = 0;
      }
      int v116 = swift::Demangle::Demangler::popContext(this);
      unint64_t v117 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v117;
      if (!v117 || v117 + 24 > *((void *)this + 2))
      {
        unint64_t v118 = 2 * *((void *)this + 4);
        if (v118 <= 0x20) {
          unint64_t v118 = 32;
        }
        *((void *)this + 4) = v118;
        unint64_t v119 = v118 + 8;
        std::string::size_type v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
        *std::string::size_type v120 = *((void *)this + 3);
        unint64_t v117 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v120 + v119;
        *((void *)this + 3) = v120;
      }
      unint64_t v4 = 0;
      *((void *)this + 1) = v117 + 24;
      *(_WORD *)(v117 + 16) = 1;
      *(unsigned char *)(v117 + 18) = 0;
      if (!v47 || !v117) {
        return v4;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v117, v47, this);
      if (!v116) {
        return 0;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v117, v116, this);
      if (!v44) {
        return 0;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v117, v44, this);
      return v117;
    case 'b':
      int v48 = *((_DWORD *)this + 24);
      if (!v48) {
        return 0;
      }
      unsigned int v49 = v48 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v49);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v49;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v50 = 2 * *((void *)this + 4);
        if (v50 <= 0x20) {
          unint64_t v50 = 32;
        }
        *((void *)this + 4) = v50;
        unint64_t v51 = v50 + 8;
        unint64_t v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
        unint64_t v53 = (char *)v52 + v51;
        void *v52 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v53;
        *((void *)this + 3) = v52;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 210;
      goto LABEL_135;
    case 'c':
      int v54 = *((_DWORD *)this + 24);
      if (v54
        && (unsigned int v55 = v54 - 1,
            uint64_t v56 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v55),
            *((_WORD *)v56 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v55;
      }
      else
      {
        uint64_t v56 = 0;
      }
      unint64_t v121 = swift::Demangle::Demangler::demangleProtocolList(this);
      unint64_t v4 = 0;
      if (!v56) {
        return v4;
      }
      __int16 v122 = (swift::Demangle::Node *)v121;
      if (!v121) {
        return v4;
      }
      unint64_t v123 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v123;
      if (!v123 || v123 + 24 > *((void *)this + 2))
      {
        unint64_t v124 = 2 * *((void *)this + 4);
        if (v124 <= 0x20) {
          unint64_t v124 = 32;
        }
        *((void *)this + 4) = v124;
        unint64_t v125 = v124 + 8;
        unint64_t v126 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
        *unint64_t v126 = *((void *)this + 3);
        unint64_t v123 = ((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v126 + v125;
        *((void *)this + 3) = v126;
      }
      *((void *)this + 1) = v123 + 24;
      *(_WORD *)(v123 + 16) = 191;
      *(unsigned char *)(v123 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v123, v122, this);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v123, v56, this);
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v127 = 2 * *((void *)this + 4);
        if (v127 <= 0x20) {
          unint64_t v127 = 32;
        }
        *((void *)this + 4) = v127;
        unint64_t v128 = v127 + 8;
        unint64_t v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
        int v130 = (char *)v129 + v128;
        *unint64_t v129 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v130;
        *((void *)this + 3) = v129;
      }
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 232;
      *(unsigned char *)(v4 + 18) = 0;
      uint64_t v104 = (swift::Demangle::Node *)v4;
      unint64_t v105 = (swift::Demangle::Node *)v123;
      goto LABEL_143;
    case 'e':
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || (unint64_t v57 = *((void *)this + 2), v17 + 24 > v57))
      {
        unint64_t v58 = 2 * *((void *)this + 4);
        if (v58 <= 0x20) {
          unint64_t v58 = 32;
        }
        *((void *)this + 4) = v58;
        unint64_t v59 = v58 + 8;
        unint64_t v60 = malloc_type_malloc(v58 + 8, 0xD0263BC5uLL);
        unint64_t v57 = (unint64_t)v60 + v59;
        *unint64_t v60 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v60 + v59;
        *((void *)this + 3) = v60;
      }
      *(_WORD *)(v17 + 16) = 63;
      *(unsigned char *)(v17 + 18) = 0;
      unint64_t v4 = (v17 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (v4) {
        BOOL v61 = v4 + 24 > v57;
      }
      else {
        BOOL v61 = 1;
      }
      if (!v61) {
        goto LABEL_142;
      }
      goto LABEL_139;
    case 'f':
      __int16 v14 = 222;
LABEL_79:
      int v62 = 0;
      goto LABEL_80;
    case 'j':
      return swift::Demangle::Demangler::demangleSymbolicExtendedExistentialType(this);
    case 'l':
      unint64_t v4 = swift::Demangle::Demangler::demangleProtocolList(this);
      if (!v4) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v63 = 2 * *((void *)this + 4);
        if (v63 <= 0x20) {
          unint64_t v63 = 32;
        }
        *((void *)this + 4) = v63;
        unint64_t v64 = v63 + 8;
        int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
        int v66 = (char *)v65 + v64;
        *int v65 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v66;
        *((void *)this + 3) = v65;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 192;
      goto LABEL_135;
    case 'm':
      unint64_t v67 = swift::Demangle::Demangler::demangleMetatypeRepresentation(this);
      int v68 = *((_DWORD *)this + 24);
      if (!v68) {
        return 0;
      }
      unsigned int v69 = v68 - 1;
      unint64_t v26 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v69);
      if (*((_WORD *)v26 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v67;
      *((_DWORD *)this + 24) = v69;
      if (!v67) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v70 = 2 * *((void *)this + 4);
        if (v70 <= 0x20) {
          unint64_t v70 = 32;
        }
        *((void *)this + 4) = v70;
        unint64_t v71 = v70 + 8;
        __int16 v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
        unint64_t v73 = (char *)v72 + v71;
        *__int16 v72 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v73;
        *((void *)this + 3) = v72;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v31 = 69;
LABEL_102:
      *(_WORD *)(v17 + 16) = v31;
      *(unsigned char *)(v17 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v17, (swift::Demangle::Node *)v4, this);
      unint64_t v74 = (swift::Demangle::Node *)v17;
      int v75 = v26;
      goto LABEL_137;
    case 'o':
      int v76 = *((_DWORD *)this + 24);
      if (!v76) {
        return 0;
      }
      unsigned int v77 = v76 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v77);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v77;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v78 = 2 * *((void *)this + 4);
        if (v78 <= 0x20) {
          unint64_t v78 = 32;
        }
        *((void *)this + 4) = v78;
        unint64_t v79 = v78 + 8;
        uint64_t v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
        unsigned int v81 = (char *)v80 + v79;
        *uint64_t v80 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v81;
        *((void *)this + 3) = v80;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 248;
      goto LABEL_135;
    case 'p':
      int v82 = *((_DWORD *)this + 24);
      if (!v82) {
        return 0;
      }
      unsigned int v83 = v82 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v83);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v83;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v84 = 2 * *((void *)this + 4);
        if (v84 <= 0x20) {
          unint64_t v84 = 32;
        }
        *((void *)this + 4) = v84;
        unint64_t v85 = v84 + 8;
        unsigned int v86 = malloc_type_malloc(v84 + 8, 0xD0263BC5uLL);
        unint64_t v87 = (char *)v86 + v85;
        *unsigned int v86 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v87;
        *((void *)this + 3) = v86;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 69;
      goto LABEL_135;
    case 'u':
      int v88 = *((_DWORD *)this + 24);
      if (!v88) {
        return 0;
      }
      unsigned int v89 = v88 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v89);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v89;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v90 = 2 * *((void *)this + 4);
        if (v90 <= 0x20) {
          unint64_t v90 = 32;
        }
        *((void *)this + 4) = v90;
        unint64_t v91 = v90 + 8;
        unint64_t v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
        unint64_t v93 = (char *)v92 + v91;
        *unint64_t v92 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v93;
        *((void *)this + 3) = v92;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 249;
      goto LABEL_135;
    case 'w':
      int v94 = *((_DWORD *)this + 24);
      if (!v94) {
        return 0;
      }
      unsigned int v95 = v94 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v95);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v95;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v96 = 2 * *((void *)this + 4);
        if (v96 <= 0x20) {
          unint64_t v96 = 32;
        }
        *((void *)this + 4) = v96;
        unint64_t v97 = v96 + 8;
        int v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
        int v99 = (char *)v98 + v97;
        void *v98 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v99;
        *((void *)this + 3) = v98;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 247;
LABEL_135:
      *(_WORD *)(v17 + 16) = v22;
      *(unsigned char *)(v17 + 18) = 0;
LABEL_136:
      unint64_t v74 = (swift::Demangle::Node *)v17;
      int v75 = (swift::Demangle::Node *)v4;
LABEL_137:
      swift::Demangle::Node::addChild(v74, v75, this);
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
LABEL_139:
        unint64_t v100 = 2 * *((void *)this + 4);
        if (v100 <= 0x20) {
          unint64_t v100 = 32;
        }
        *((void *)this + 4) = v100;
        unint64_t v101 = v100 + 8;
        unint64_t v102 = malloc_type_malloc(v100 + 8, 0xD0263BC5uLL);
        unint64_t v103 = (char *)v102 + v101;
        *unint64_t v102 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v103;
        *((void *)this + 3) = v102;
      }
LABEL_142:
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 232;
      *(unsigned char *)(v4 + 18) = 0;
      uint64_t v104 = (swift::Demangle::Node *)v4;
      unint64_t v105 = (swift::Demangle::Node *)v17;
      goto LABEL_143;
    case 'z':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v106 = *(char *)(v6 + v5);
      if (v106 == 67)
      {
        __int16 v14 = 22;
        int v62 = 1;
      }
      else
      {
        if (v106 != 66) {
          return 0;
        }
        __int16 v14 = 165;
        int v62 = 1;
      }
LABEL_80:
      return swift::Demangle::Demangler::popFunctionType(this, v14, v62);
    default:
      return v4;
  }
  do
  {
    unint64_t v139 = *(unsigned __int8 *)(v108 + 18);
    unsigned int v140 = v139 - 1;
    if (v139 == 1) {
      goto LABEL_201;
    }
    if (v139 != 5)
    {
      if (v139 != 2) {
        goto LABEL_206;
      }
      unint64_t v139 = 2;
LABEL_201:
      if (v139 <= v133) {
        goto LABEL_206;
      }
      goto LABEL_202;
    }
    if (*(unsigned int *)(v108 + 8) <= v133)
    {
LABEL_206:
      unint64_t v142 = 0;
      goto LABEL_207;
    }
LABEL_202:
    unint64_t v141 = v108;
    if (v140 >= 2) {
      unint64_t v141 = *(void *)v108;
    }
    unint64_t v142 = *(void *)(v141 + 8 * v133);
LABEL_207:
    int v143 = *(unsigned __int8 *)(v142 + 18);
    unint64_t v144 = v142;
    if ((v143 - 1) >= 2) {
      unint64_t v144 = *(void *)v142;
    }
    if (*(_WORD *)(*(void *)v144 + 16) == 123)
    {
      if ((v143 - 1) >= 2)
      {
        if (v143 != 5 || !*(_DWORD *)(v142 + 8))
        {
          unint64_t v145 = 0;
LABEL_217:
          int v147 = *((unsigned __int8 *)v145 + 18);
          if ((v147 - 1) >= 2)
          {
            if (v147 != 5 || !*((_DWORD *)v145 + 2)) {
              goto LABEL_228;
            }
            unint64_t v145 = *(swift::Demangle::Node **)v145;
          }
          int v148 = *(swift::Demangle::Node **)v145;
          if (*(void *)v145)
          {
            unint64_t v142 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v142;
            if (!v142 || v142 + 24 > *((void *)this + 2))
            {
              unint64_t v149 = 2 * *((void *)this + 4);
              if (v149 <= 0x20) {
                unint64_t v149 = 32;
              }
              *((void *)this + 4) = v149;
              unint64_t v150 = v149 + 8;
              unint64_t v151 = malloc_type_malloc(v149 + 8, 0xD0263BC5uLL);
              unint64_t v152 = (char *)v151 + v150;
              *unint64_t v151 = *((void *)this + 3);
              unint64_t v142 = ((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = v152;
              *((void *)this + 3) = v151;
            }
            *((void *)this + 1) = v142 + 24;
            *(_WORD *)(v142 + 16) = 232;
            *(unsigned char *)(v142 + 18) = 0;
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v142, v148, this);
            goto LABEL_229;
          }
LABEL_228:
          unint64_t v142 = 0;
LABEL_229:
          __int16 v146 = 213;
          goto LABEL_230;
        }
        unint64_t v142 = *(void *)v142;
      }
      unint64_t v145 = *(swift::Demangle::Node **)v142;
      goto LABEL_217;
    }
    __int16 v146 = 214;
LABEL_230:
    unint64_t v138 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v138;
    if (!v138 || v138 + 24 > *((void *)this + 2))
    {
      unint64_t v134 = 2 * *((void *)this + 4);
      if (v134 <= 0x20) {
        unint64_t v134 = 32;
      }
      *((void *)this + 4) = v134;
      unint64_t v135 = v134 + 8;
      int v136 = malloc_type_malloc(v134 + 8, 0xD0263BC5uLL);
      uint64_t v137 = (char *)v136 + v135;
      *int v136 = *((void *)this + 3);
      unint64_t v138 = ((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v137;
      *((void *)this + 3) = v136;
    }
    *((void *)this + 1) = v138 + 24;
    *(_WORD *)(v138 + 16) = v146;
    *(unsigned char *)(v138 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v138, (swift::Demangle::Node *)v142, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v109, (swift::Demangle::Node *)v138, this);
    ++v133;
  }
  while (v115 != v133);
  unint64_t v114 = *((void *)this + 1);
  unint64_t v13 = v172;
LABEL_234:
  unint64_t v153 = (v114 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v153;
  if (!v153 || v153 + 24 > *((void *)this + 2))
  {
    unint64_t v154 = 2 * *((void *)this + 4);
    if (v154 <= 0x20) {
      unint64_t v154 = 32;
    }
    *((void *)this + 4) = v154;
    unint64_t v155 = v154 + 8;
    int v156 = malloc_type_malloc(v154 + 8, 0xD0263BC5uLL);
    int v157 = (char *)v156 + v155;
    *int v156 = *((void *)this + 3);
    unint64_t v153 = ((unint64_t)v156 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v157;
    *((void *)this + 3) = v156;
  }
  *((void *)this + 1) = v153 + 24;
  *(_WORD *)(v153 + 16) = 211;
  *(unsigned char *)(v153 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v153, (swift::Demangle::Node *)v109, this);
  if (v11)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v153, v11, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v153, v13, this);
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v158 = 2 * *((void *)this + 4);
    if (v158 <= 0x20) {
      unint64_t v158 = 32;
    }
    *((void *)this + 4) = v158;
    unint64_t v159 = v158 + 8;
    unsigned int v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
    int v161 = (char *)v160 + v159;
    *unsigned int v160 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v161;
    *((void *)this + 3) = v160;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  uint64_t v104 = (swift::Demangle::Node *)v4;
  unint64_t v105 = (swift::Demangle::Node *)v153;
LABEL_143:
  swift::Demangle::Node::addChild(v104, v105, this);
  return v4;
}

uint64_t anonymous namespace'::isEntity(int a1)
{
  if (a1 == 232) {
    return 1;
  }
  else {
    return swift::Demangle::isContext();
  }
}

unint64_t swift::Demangle::Demangler::popFunctionType(swift::Demangle::Demangler *this, __int16 a2, int a3)
{
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    int v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unsigned int v10 = (char *)v9 + v8;
    void *v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 0;
  if (a3)
  {
    __int16 v11 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleClangType(this);
    if (v11) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v11, this);
    }
  }
  int v12 = *((_DWORD *)this + 24);
  if (v12)
  {
    unint64_t v13 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
    if (*((_WORD *)v13 + 8) != 349
      || (*((_DWORD *)this + 24) = v12 - 1,
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v13, this),
          (int v12 = *((_DWORD *)this + 24)) != 0))
    {
      __int16 v14 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
      if (*((_WORD *)v14 + 8) != 67
        || (*((_DWORD *)this + 24) = v12 - 1,
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v14, this),
            (int v12 = *((_DWORD *)this + 24)) != 0))
      {
        int v15 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
        if (*((_WORD *)v15 + 8) != 129
          || (*((_DWORD *)this + 24) = v12 - 1,
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v15, this),
              (int v12 = *((_DWORD *)this + 24)) != 0))
        {
          unsigned int v16 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
          if (*((_WORD *)v16 + 8) != 130
            || (*((_DWORD *)this + 24) = v12 - 1,
                swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v16, this),
                (int v12 = *((_DWORD *)this + 24)) != 0))
          {
            unint64_t v17 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
            if (*((_WORD *)v17 + 8) != 68
              || (*((_DWORD *)this + 24) = v12 - 1,
                  swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v17, this),
                  (int v12 = *((_DWORD *)this + 24)) != 0))
            {
              unint64_t v18 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
              if ((*((_WORD *)v18 + 8) & 0xFFFE) != 0x110
                || (*((_DWORD *)this + 24) = v12 - 1,
                    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v18, this),
                    (int v12 = *((_DWORD *)this + 24)) != 0))
              {
                unint64_t v19 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
                if (*((_WORD *)v19 + 8) != 66
                  || (*((_DWORD *)this + 24) = v12 - 1,
                      swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v19, this),
                      (int v12 = *((_DWORD *)this + 24)) != 0))
                {
                  unsigned int v20 = v12 - 1;
                  BOOL v21 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v20);
                  if (*((_WORD *)v21 + 8) == 271)
                  {
                    *((_DWORD *)this + 24) = v20;
                    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v21, this);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __int16 v22 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParams((uint64_t)this, 3);
  if (v22) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v22, this);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v23 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParams((uint64_t)this, 207);
  unint64_t v24 = 0;
  if (v6 && v23)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, v23, this);
    unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v24;
    if (!v24 || v24 + 24 > *((void *)this + 2))
    {
      unint64_t v25 = 2 * *((void *)this + 4);
      if (v25 <= 0x20) {
        unint64_t v25 = 32;
      }
      *((void *)this + 4) = v25;
      unint64_t v26 = v25 + 8;
      unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      unint64_t v28 = (char *)v27 + v26;
      *unint64_t v27 = *((void *)this + 3);
      unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v28;
      *((void *)this + 3) = v27;
    }
    *((void *)this + 1) = v24 + 24;
    *(_WORD *)(v24 + 16) = 232;
    *(unsigned char *)(v24 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v24, (swift::Demangle::Node *)v6, this);
  }
  return v24;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleFunctionEntity(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 < *((void *)this + 8))
  {
    unint64_t v3 = 0;
    *((void *)this + 9) = v1 + 1;
    int v4 = *(char *)(*((void *)this + 7) + v1) - 65;
    __int16 v5 = 0;
    int v6 = 0;
    __int16 v7 = 70;
    __int16 v8 = 31;
    int v9 = 0;
    unsigned int v10 = 0;
    switch(v4)
    {
      case 0:
        unint64_t v3 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        int v9 = 0;
        unsigned int v10 = 0;
        int v6 = 3;
        __int16 v8 = 33;
        goto LABEL_35;
      case 2:
        goto LABEL_11;
      case 3:
        goto LABEL_35;
      case 4:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 104;
        goto LABEL_35;
      case 12:
        return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleMacroExpansion(this);
      case 15:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 178;
        goto LABEL_35;
      case 20:
        goto LABEL_24;
      case 22:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 179;
        goto LABEL_35;
      case 34:
        __int16 v5 = 29;
LABEL_11:
        __int16 v8 = v5;
        int v12 = *((_DWORD *)this + 24);
        if (v12)
        {
          int v13 = v12 - 1;
          uint64_t v14 = *((void *)this + 11);
          unint64_t v3 = *(void *)(v14 + 8 * (v12 - 1));
          if (*(_WORD *)(v3 + 16) == 176)
          {
            *((_DWORD *)this + 24) = v13;
            if (v12 == 1) {
              goto LABEL_33;
            }
          }
          else
          {
            unint64_t v3 = 0;
            int v13 = *((_DWORD *)this + 24);
          }
          unsigned int v18 = v13 - 1;
          int v9 = *(swift::Demangle::Node **)(v14 + 8 * v18);
          if (*((_WORD *)v9 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v18;
            goto LABEL_34;
          }
        }
        else
        {
          unint64_t v3 = 0;
        }
LABEL_33:
        int v9 = 0;
LABEL_34:
        unsigned int v10 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v9);
        int v6 = 1;
LABEL_35:
        unint64_t v19 = (swift::Demangle::Node *)v3;
        unsigned int v20 = swift::Demangle::Demangler::popContext(this);
        if (v20)
        {
          BOOL v21 = v20;
          unint64_t v22 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v22;
          if (!v22 || v22 + 24 > *((void *)this + 2))
          {
            unint64_t v23 = 2 * *((void *)this + 4);
            if (v23 <= 0x20) {
              unint64_t v23 = 32;
            }
            *((void *)this + 4) = v23;
            unint64_t v24 = v23 + 8;
            unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
            unint64_t v26 = (char *)v25 + v24;
            *unint64_t v25 = *((void *)this + 3);
            unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v26;
            *((void *)this + 3) = v25;
          }
          *((void *)this + 1) = v22 + 24;
          *(_WORD *)(v22 + 16) = v8;
          *(unsigned char *)(v22 + 18) = 0;
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v22, v21, this);
          if (v6 != 1)
          {
LABEL_42:
            if (v6 == 2)
            {
              unint64_t v3 = 0;
              if (!v19 || !v22) {
                return (swift::Demangle::Node *)v3;
              }
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v22, v19, this);
              if (!v9) {
                return 0;
              }
              unint64_t v27 = (swift::Demangle::Node *)v22;
              unint64_t v28 = v9;
              goto LABEL_59;
            }
            if (v6 == 3)
            {
              unint64_t v3 = 0;
              if (!v19 || !v22) {
                return (swift::Demangle::Node *)v3;
              }
              goto LABEL_54;
            }
            return (swift::Demangle::Node *)v22;
          }
        }
        else
        {
          unint64_t v22 = 0;
          if (v6 != 1) {
            goto LABEL_42;
          }
        }
        if (v10 && v22) {
          swift::Demangle::Node::addChild((swift::Demangle::Node *)v22, v10, this);
        }
        unint64_t v3 = 0;
        if (!v9 || !v22) {
          return (swift::Demangle::Node *)v3;
        }
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v22, v9, this);
        if (v19)
        {
LABEL_54:
          unint64_t v27 = (swift::Demangle::Node *)v22;
          unint64_t v28 = v19;
LABEL_59:
          swift::Demangle::Node::addChild(v27, v28, this);
        }
        return (swift::Demangle::Node *)v22;
      case 35:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 50;
        goto LABEL_35;
      case 36:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 103;
        goto LABEL_35;
      case 40:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 125;
        goto LABEL_35;
      case 44:
        __int16 v15 = 138;
        goto LABEL_20;
      case 47:
        __int16 v15 = 262;
LABEL_20:
        return swift::Demangle::Demangler::demangleEntity(this, v15);
      case 52:
        __int16 v7 = 117;
LABEL_24:
        unint64_t v3 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        int v16 = *((_DWORD *)this + 24);
        if (v16
          && (unsigned int v17 = v16 - 1,
              int v9 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v17),
              *((_WORD *)v9 + 8) == 232))
        {
          unsigned int v10 = 0;
          *((_DWORD *)this + 24) = v17;
        }
        else
        {
          int v9 = 0;
          unsigned int v10 = 0;
        }
        int v6 = 2;
        __int16 v8 = v7;
        goto LABEL_35;
      default:
        return (swift::Demangle::Node *)v3;
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleRetroactiveConformance(swift::Demangle::Demangler *this)
{
  unint64_t v2 = swift::Demangle::Demangler::demangleIndexAsNode(this);
  int v3 = *((_DWORD *)this + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3 - 1;
  __int16 v5 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v4);
  unsigned int v6 = v5[8];
  BOOL v7 = v6 > 0x31;
  uint64_t v8 = (1 << v6) & 0x380000C000000;
  if (v7 || v8 == 0) {
    return 0;
  }
  unsigned int v10 = (swift::Demangle::Node *)v2;
  *((_DWORD *)this + 24) = v4;
  if (!v2) {
    return 0;
  }
  unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    uint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    __int16 v15 = (char *)v14 + v13;
    *uint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 206;
  *(unsigned char *)(v11 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v10, this);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, (swift::Demangle::Node *)v5, this);
  return v11;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleSubscript(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2)
  {
    int v3 = v2 - 1;
    uint64_t v4 = *((void *)this + 11);
    __int16 v5 = *(swift::Demangle::Node **)(v4 + 8 * (v2 - 1));
    if (*((_WORD *)v5 + 8) == 176)
    {
      *((_DWORD *)this + 24) = v3;
      if (v2 == 1) {
        goto LABEL_9;
      }
    }
    else
    {
      __int16 v5 = 0;
      int v3 = *((_DWORD *)this + 24);
    }
    unsigned int v6 = v3 - 1;
    BOOL v7 = *(swift::Demangle::Node **)(v4 + 8 * v6);
    if (*((_WORD *)v7 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v6;
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v5 = 0;
  }
LABEL_9:
  BOOL v7 = 0;
LABEL_10:
  uint64_t v8 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v7);
  int v9 = swift::Demangle::Demangler::popContext(this);
  if (!v7) {
    return 0;
  }
  unsigned int v10 = v9;
  unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    uint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    __int16 v15 = (char *)v14 + v13;
    *uint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  int v16 = 0;
  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 220;
  *(unsigned char *)(v11 + 18) = 0;
  if (v10 && v11)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v10, this);
    if (v8) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v8, this);
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v7, this);
    if (v5) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, v5, this);
    }
    int v16 = (swift::Demangle::Node *)v11;
  }
  unsigned int v17 = setParentForOpaqueReturnTypeNodes(this, v16, v7);

  return swift::Demangle::Demangler::demangleAccessor(this, v17);
}

uint64_t swift::Demangle::Demangler::demangleGenericSignature(swift::Demangle::Demangler *this, int a2)
{
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || (unint64_t v5 = *((void *)this + 2), v4 + 24 > v5))
  {
    unint64_t v6 = 2 * *((void *)this + 4);
    if (v6 <= 0x20) {
      unint64_t v6 = 32;
    }
    *((void *)this + 4) = v6;
    unint64_t v7 = v6 + 8;
    uint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    unint64_t v5 = (unint64_t)v8 + v7;
    void *v8 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v5;
    *((void *)this + 3) = v8;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 43;
  *(unsigned char *)(v4 + 18) = 0;
  if (!a2)
  {
    unint64_t v22 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v22;
    if (v22) {
      BOOL v23 = v22 + 24 > v5;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23)
    {
      unint64_t v24 = 2 * *((void *)this + 4);
      if (v24 <= 0x20) {
        unint64_t v24 = 32;
      }
      *((void *)this + 4) = v24;
      unint64_t v25 = v24 + 8;
      unint64_t v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      *unint64_t v26 = *((void *)this + 3);
      unint64_t v22 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v26 + v25;
      *((void *)this + 3) = v26;
    }
    *((void *)this + 1) = v22 + 24;
    *(_WORD *)(v22 + 16) = 37;
    *(unsigned char *)(v22 + 18) = 4;
    *(void *)unint64_t v22 = 1;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v22, this);
LABEL_39:
    uint64_t v27 = *(unsigned __int8 *)(v4 + 18);
    uint64_t v28 = v27;
    if (v27 != 1)
    {
      if (v27 != 5)
      {
        if (v27 == 2)
        {
          uint64_t v28 = 2;
          int v29 = *((_DWORD *)this + 24);
          if (!v29) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v28 = 0;
          int v29 = *((_DWORD *)this + 24);
          if (!v29) {
            goto LABEL_49;
          }
        }
        goto LABEL_54;
      }
      uint64_t v28 = *(unsigned int *)(v4 + 8);
    }
    int v29 = *((_DWORD *)this + 24);
    if (!v29)
    {
LABEL_49:
      if (v27 != 5) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }
    do
    {
LABEL_54:
      int v30 = v29 - 1;
      __int16 v31 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * (v29 - 1));
      int v32 = v31[8];
      if ((v32 - 39) >= 4 && v32 != 354 && v32 != 36) {
        break;
      }
      *((_DWORD *)this + 24) = v30;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v31, this);
      int v29 = *((_DWORD *)this + 24);
    }
    while (v29);
    LODWORD(v27) = *(unsigned __int8 *)(v4 + 18);
    if (v27 != 5)
    {
LABEL_50:
      if (v27 == 2 && !v28) {
        *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
      }
      return v4;
    }
LABEL_58:
    uint64_t v33 = *(unsigned int *)(v4 + 8);
    if (v28 != v33)
    {
      unsigned int v34 = (void *)(*(void *)v4 + 8 * v33 - 8);
      if ((unint64_t)v34 > *(void *)v4 + 8 * v28)
      {
        unint64_t v35 = *(void *)v4 + 8 * v28 + 8;
        do
        {
          uint64_t v36 = *(void *)(v35 - 8);
          *(void *)(v35 - 8) = *v34;
          *v34-- = v36;
          BOOL v37 = v35 >= (unint64_t)v34;
          v35 += 8;
        }
        while (!v37);
      }
    }
    return v4;
  }
  unint64_t v10 = *((void *)this + 8);
  unint64_t v9 = *((void *)this + 9);
  if (v9 < v10)
  {
    while (1)
    {
      uint64_t v11 = *((void *)this + 7);
      int v12 = *(unsigned __int8 *)(v11 + v9);
      switch(v12)
      {
        case '_':
          *((void *)this + 9) = v9 + 1;
          unsigned int v16 = 1;
          break;
        case 'z':
          unsigned int v16 = 0;
          *((void *)this + 9) = v9 + 1;
          break;
        case 'l':
          *((void *)this + 9) = v9 + 1;
          goto LABEL_39;
        default:
          if ((v12 - 48) > 9) {
            return 0;
          }
          int v13 = 0;
          while (1)
          {
            int v14 = *(unsigned __int8 *)(v11 + v9);
            if ((v14 - 48) > 9) {
              break;
            }
            int v15 = v14 + 10 * v13 - 48;
            if (v15 >= v13)
            {
              *((void *)this + 9) = ++v9;
              int v13 = v15;
              if (v10 != v9) {
                continue;
              }
            }
            return 0;
          }
          uint64_t result = 0;
          if (v13 < 0 || v9 >= v10 || v14 != 95) {
            return result;
          }
          *((void *)this + 9) = v9 + 1;
          unsigned int v16 = v13 + 2;
          break;
      }
      unint64_t v18 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v18;
      if (!v18 || v18 + 24 > *((void *)this + 2))
      {
        unint64_t v19 = 2 * *((void *)this + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32;
        }
        *((void *)this + 4) = v19;
        unint64_t v20 = v19 + 8;
        BOOL v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *BOOL v21 = *((void *)this + 3);
        unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v21 + v20;
        *((void *)this + 3) = v21;
      }
      *((void *)this + 1) = v18 + 24;
      *(_WORD *)(v18 + 16) = 37;
      *(unsigned char *)(v18 + 18) = 4;
      *(void *)unint64_t v18 = v16;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v18, this);
      uint64_t result = 0;
      unint64_t v10 = *((void *)this + 8);
      unint64_t v9 = *((void *)this + 9);
      if (v9 >= v10) {
        return result;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleOperatorIdentifier(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  unint64_t v4 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 101) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  uint64_t v5 = v4[1];
  if (!v5)
  {
    uint64_t v21 = 0;
    unint64_t v7 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = *v4;
  uint64_t v41 = *v4;
  do
  {
    uint64_t v10 = *(char *)(v9 + v6);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 - 97) > 0x19 || ((0x17007A2uLL >> (v10 - 97))) {
        return 0;
      }
      LOBYTE(v10) = swift::Demangle::Demangler::demangleOperatorIdentifier(void)::op_char_table[v10 - 97];
    }
    if (v6 >= v8)
    {
      uint64_t v11 = &v7[v8];
      int v12 = (char *)*((void *)this + 1);
      if (v11 == v12)
      {
        int v14 = v11 + 1;
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v14 <= v13)
        {
          *((void *)this + 1) = v14;
          LODWORD(v15) = 1;
LABEL_6:
          v8 += v15;
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v13 = *((void *)this + 2);
      }
      if (2 * v8 <= 4) {
        uint64_t v15 = 4;
      }
      else {
        uint64_t v15 = 2 * v8;
      }
      uint64_t v16 = v15 + v8;
      if (!v12 || (unint64_t)&v12[v16] > v13)
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        unint64_t v20 = (char *)v19 + v18;
        *unint64_t v19 = *((void *)this + 3);
        int v12 = (char *)(v19 + 1);
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }
      *((void *)this + 1) = &v12[v16];
      if (v8) {
        memcpy(v12, v7, v8);
      }
      unint64_t v7 = v12;
      uint64_t v9 = v41;
      goto LABEL_6;
    }
LABEL_7:
    v7[v6++] = v10;
  }
  while (v5 != v6);
  uint64_t v21 = v6;
LABEL_29:
  unint64_t v22 = *((void *)this + 9);
  if (v22 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v22 + 1;
  int v23 = *(char *)(*((void *)this + 7) + v22);
  if (v23 == 80)
  {
    unint64_t v24 = (void *)((char *)this + 8);
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (result && result + 24 <= *((void *)this + 2))
    {
      __int16 v32 = 173;
      goto LABEL_50;
    }
    unint64_t v33 = 2 * *((void *)this + 4);
    if (v33 <= 0x20) {
      unint64_t v33 = 32;
    }
    *((void *)this + 4) = v33;
    unint64_t v34 = v33 + 8;
    unint64_t v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    uint64_t v36 = *((void *)this + 3);
    *((void *)this + 3) = v35;
    int v30 = (char *)v35 + v34;
    *unint64_t v35 = v36;
    __int16 v31 = v35 + 1;
    __int16 v32 = 173;
    goto LABEL_49;
  }
  if (v23 == 112)
  {
    unint64_t v24 = (void *)((char *)this + 8);
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (result && result + 24 <= *((void *)this + 2))
    {
      __int16 v32 = 175;
      goto LABEL_50;
    }
    unint64_t v37 = 2 * *((void *)this + 4);
    if (v37 <= 0x20) {
      unint64_t v37 = 32;
    }
    *((void *)this + 4) = v37;
    unint64_t v38 = v37 + 8;
    unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    uint64_t v40 = *((void *)this + 3);
    *((void *)this + 3) = v39;
    int v30 = (char *)v39 + v38;
    *unint64_t v39 = v40;
    __int16 v31 = v39 + 1;
    __int16 v32 = 175;
LABEL_49:
    unint64_t result = ((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v30;
    goto LABEL_50;
  }
  if (v23 != 105) {
    return 0;
  }
  unint64_t v24 = (void *)((char *)this + 8);
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v26 = 2 * *((void *)this + 4);
    if (v26 <= 0x20) {
      unint64_t v26 = 32;
    }
    *((void *)this + 4) = v26;
    unint64_t v27 = v26 + 8;
    uint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    uint64_t v29 = *((void *)this + 3);
    *((void *)this + 3) = v28;
    int v30 = (char *)v28 + v27;
    *uint64_t v28 = v29;
    __int16 v31 = v28 + 1;
    __int16 v32 = 124;
    goto LABEL_49;
  }
  __int16 v32 = 124;
LABEL_50:
  *unint64_t v24 = result + 24;
  *(_WORD *)(result + 16) = v32;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v7;
  *(void *)(result + 8) = v21;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleProtocolListType(swift::Demangle::Demangler *this)
{
  unint64_t v2 = swift::Demangle::Demangler::demangleProtocolList(this);
  if (!v2) {
    return 0;
  }
  int v3 = (swift::Demangle::Node *)v2;
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned int v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v3, this);
  return v4;
}

uint64_t swift::Demangle::Demangler::demangleGenericParamIndex(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= v2)
  {
LABEL_10:
    unsigned int v5 = -999;
  }
  else
  {
    uint64_t v4 = *((void *)this + 7);
    switch(*(unsigned char *)(v4 + v3))
    {
      case '_':
        *((void *)this + 9) = v3 + 1;
        unsigned int v5 = 1;
        goto LABEL_11;
      case 'd':
        unint64_t v11 = v3 + 1;
        *((void *)this + 9) = v3 + 1;
        if (v3 + 1 >= v2) {
          goto LABEL_31;
        }
        int v12 = *(unsigned __int8 *)(v4 + v11);
        if (v12 == 95)
        {
          unint64_t v11 = v3 + 2;
          *((void *)this + 9) = v3 + 2;
          unsigned int v9 = 1;
          goto LABEL_32;
        }
        if ((v12 - 48) > 9) {
          goto LABEL_31;
        }
        int v16 = 0;
        while (2)
        {
          int v17 = *(unsigned __int8 *)(v4 + v11);
          if ((v17 - 48) > 9)
          {
            unsigned int v9 = -999;
            if ((v16 & 0x80000000) == 0 && v11 < v2 && v17 == 95)
            {
              *((void *)this + 9) = ++v11;
              unsigned int v9 = v16 + 2;
            }
          }
          else
          {
            int v18 = v17 + 10 * v16 - 48;
            if (v18 >= v16)
            {
              *((void *)this + 9) = ++v11;
              int v16 = v18;
              if (v2 == v11)
              {
                unsigned int v5 = -1000;
                unsigned int v9 = -999;
                goto LABEL_12;
              }
              continue;
            }
LABEL_31:
            unsigned int v9 = -999;
          }
          break;
        }
LABEL_32:
        if (v11 >= v2) {
          goto LABEL_40;
        }
        int v19 = *(unsigned __int8 *)(v4 + v11);
        if (v19 == 95)
        {
          unsigned int v5 = 0;
          *((void *)this + 9) = v11 + 1;
          goto LABEL_12;
        }
        if ((v19 - 48) > 9) {
          goto LABEL_40;
        }
        int v20 = 0;
        while (1)
        {
          int v21 = *(unsigned __int8 *)(v4 + v11);
          if ((v21 - 48) > 9) {
            break;
          }
          int v22 = v21 + 10 * v20 - 48;
          if (v22 >= v20)
          {
            *((void *)this + 9) = ++v11;
            int v20 = v22;
            if (v2 != v11) {
              continue;
            }
          }
LABEL_40:
          unsigned int v5 = -1000;
          goto LABEL_12;
        }
        unsigned int v5 = -1000;
        if ((v20 & 0x80000000) == 0 && v11 < v2 && v21 == 95)
        {
          *((void *)this + 9) = v11 + 1;
          unsigned int v5 = v20 + 1;
        }
        goto LABEL_12;
      case 's':
        *((void *)this + 9) = v3 + 1;
        uint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = result;
        if (!result || (unint64_t)(result + 24) > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          uint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          *uint64_t v15 = *((void *)this + 3);
          uint64_t result = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v15 + v14;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = result + 24;
        *(_WORD *)(result + 16) = 85;
        *(unsigned char *)(result + 18) = 0;
        return result;
      case 'z':
        *((void *)this + 9) = v3 + 1;
        unsigned int v9 = 0;
        unsigned int v5 = 0;
        goto LABEL_12;
      default:
        if (*(unsigned __int8 *)(v4 + v3) - 48 > 9) {
          goto LABEL_10;
        }
        int v6 = 0;
        unsigned int v5 = -999;
        break;
    }
    while (1)
    {
      int v7 = *(unsigned __int8 *)(v4 + v3);
      if ((v7 - 48) > 9) {
        break;
      }
      int v8 = v7 + 10 * v6 - 48;
      if (v8 < v6) {
        goto LABEL_10;
      }
      *((void *)this + 9) = ++v3;
      int v6 = v8;
      if (v2 == v3) {
        goto LABEL_11;
      }
    }
    unsigned int v5 = -999;
    if ((v6 & 0x80000000) == 0 && v3 < v2 && v7 == 95)
    {
      *((void *)this + 9) = v3 + 1;
      unsigned int v5 = v6 + 2;
    }
  }
LABEL_11:
  unsigned int v9 = 0;
LABEL_12:

  return swift::Demangle::Demangler::getDependentGenericParamType(this, v9, v5);
}

unint64_t swift::Demangle::Demangler::popTuple(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unsigned int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *unsigned int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 223;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)this + 24);
      if (v14
        && (uint64_t v15 = *(void *)(*((void *)this + 11) + 8 * (v14 - 1)), *(_WORD *)(v15 + 16) == 275))
      {
        *((_DWORD *)this + 24) = --v14;
      }
      else
      {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        int v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        int v20 = (char *)v19 + v18;
        *int v19 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
        int v14 = *((_DWORD *)this + 24);
      }
      *((void *)this + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 224;
      *(unsigned char *)(v16 + 18) = 0;
      if (!v14) {
        return 0;
      }
      int v21 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v21 + 8) == 276)
      {
        *((_DWORD *)this + 24) = v14 - 1;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v16, v21, this);
        int v14 = *((_DWORD *)this + 24);
        if (!v14) {
          return 0;
        }
      }
      int v22 = *(long long **)(*((void *)this + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v22 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v14 - 1;
        long long v23 = *v22;
        unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v24;
        if (!v24 || v24 + 24 > *((void *)this + 2))
        {
          unint64_t v25 = 2 * *((void *)this + 4);
          if (v25 <= 0x20) {
            unint64_t v25 = 32;
          }
          *((void *)this + 4) = v25;
          unint64_t v26 = v25 + 8;
          long long v37 = v23;
          unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
          long long v23 = v37;
          *unint64_t v27 = *((void *)this + 3);
          unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v27 + v26;
          *((void *)this + 3) = v27;
        }
        *((void *)this + 1) = v24 + 24;
        *(_WORD *)(v24 + 16) = 225;
        *(unsigned char *)(v24 + 18) = 3;
        *(_OWORD *)unint64_t v24 = v23;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v16, (swift::Demangle::Node *)v24, this);
        int v14 = *((_DWORD *)this + 24);
        if (!v14) {
          return 0;
        }
      }
      unsigned int v28 = v14 - 1;
      uint64_t v29 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v28);
      if (*((_WORD *)v29 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v28;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v16, v29, this);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v16, this);
    }
    while (!v15);
    int v30 = *(unsigned __int8 *)(v2 + 18);
    if (v30 == 5)
    {
      uint64_t v32 = *(unsigned int *)(v2 + 8);
      if (v32)
      {
        unint64_t v33 = (void *)(*(void *)v2 + 8 * v32 - 8);
        if ((unint64_t)v33 > *(void *)v2)
        {
          unint64_t v34 = *(void *)v2 + 8;
          do
          {
            uint64_t v35 = *(void *)(v34 - 8);
            *(void *)(v34 - 8) = *v33;
            *v33-- = v35;
            BOOL v36 = v34 >= (unint64_t)v33;
            v34 += 8;
          }
          while (!v36);
        }
      }
    }
    else if (v30 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (char *)v12 + v11;
    *int v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 232;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, (swift::Demangle::Node *)v2, this);
  return v9;
}

unint64_t swift::Demangle::Demangler::demangleGenericType(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  uint64_t v4 = *((void *)this + 11);
  unsigned int v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
  int v6 = v5[8];
  if (v6 == 232)
  {
    unint64_t v14 = 0;
    *((_DWORD *)this + 24) = v3;
    return v14;
  }
  if (v6 != 43) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  if (v1 == 1) {
    return 0;
  }
  unsigned int v7 = v1 - 2;
  unsigned int v8 = *(swift::Demangle::Node **)(v4 + 8 * v7);
  if (*((_WORD *)v8 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v7;
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (char *)v12 + v11;
    *int v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 44;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, (swift::Demangle::Node *)v5, this);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, v8, this);
  unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)this + 2))
  {
    unint64_t v15 = 2 * *((void *)this + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)this + 4) = v15;
    unint64_t v16 = v15 + 8;
    unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    unint64_t v18 = (char *)v17 + v16;
    void *v17 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v18;
    *((void *)this + 3) = v17;
  }
  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 232;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, (swift::Demangle::Node *)v9, this);
  return v14;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleVariable(swift::Demangle::Demangler *this)
{
  unint64_t v2 = swift::Demangle::Demangler::demangleEntity(this, 254);

  return swift::Demangle::Demangler::demangleAccessor(this, v2);
}

unint64_t swift::Demangle::Demangler::demangleValueWitness(swift::Demangle::Demangler *this)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v3)
  {
    char v4 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    char v4 = *(unsigned char *)(*((void *)this + 7) + v2++);
  }
  LOBYTE(v21) = v4;
  if (v2 >= v3)
  {
    char v5 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    char v5 = *(unsigned char *)(*((void *)this + 7) + v2);
  }
  HIBYTE(v21) = v5;
  switch(v21)
  {
    case 0x6C61u:
      uint64_t v6 = 0;
      break;
    case 0x6163u:
      uint64_t v6 = 1;
      break;
    case 0x6174u:
      uint64_t v6 = 2;
      break;
    case 0x6564u:
      uint64_t v6 = 3;
      break;
    case 0x7878u:
      uint64_t v6 = 4;
      break;
    case 0x5858u:
      uint64_t v6 = 5;
      break;
    case 0x7858u:
      uint64_t v6 = 6;
      break;
    case 0x5043u:
      uint64_t v6 = 7;
      break;
    case 0x7043u:
      uint64_t v6 = 8;
      break;
    case 0x7063u:
      uint64_t v6 = 9;
      break;
    case 0x6B54u:
      uint64_t v6 = 10;
      break;
    case 0x6B74u:
      uint64_t v6 = 11;
      break;
    case 0x7270u:
      uint64_t v6 = 12;
      break;
    case 0x4B54u:
      uint64_t v6 = 13;
      break;
    case 0x6343u:
      uint64_t v6 = 14;
      break;
    case 0x7454u:
      uint64_t v6 = 15;
      break;
    case 0x5474u:
      uint64_t v6 = 16;
      break;
    case 0x7378u:
      uint64_t v6 = 17;
      break;
    case 0x6778u:
      uint64_t v6 = 18;
      break;
    case 0x6775u:
      uint64_t v6 = 19;
      break;
    case 0x7075u:
      uint64_t v6 = 20;
      break;
    case 0x6975u:
      uint64_t v6 = 21;
      break;
    case 0x7465u:
      uint64_t v6 = 22;
      break;
    default:
      if (bswap32(v21) >> 16 != 29556) {
        return 0;
      }
      uint64_t v6 = 23;
      break;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || (unint64_t v8 = *((void *)this + 2), v7 + 24 > v8))
  {
    unint64_t v9 = 2 * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (unint64_t)v11 + v10;
    *unint64_t v11 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v11;
  }
  *(_WORD *)(v7 + 16) = 252;
  *(unsigned char *)(v7 + 18) = 0;
  unint64_t v12 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (v12) {
    BOOL v13 = v12 + 24 > v8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2 * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v16 + v15;
    *((void *)this + 3) = v16;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 102;
  *(unsigned char *)(v12 + 18) = 4;
  *(void *)unint64_t v12 = v6;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, (swift::Demangle::Node *)v12, this);
  int v17 = *((_DWORD *)this + 24);
  if (!v17) {
    return 0;
  }
  unsigned int v18 = v17 - 1;
  int v19 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v18);
  if (*((_WORD *)v19 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v18;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v19, this);
  return v7;
}

unint64_t swift::Demangle::Demangler::getDependentGenericParamType(swift::Demangle::Demangler *this, unsigned int a2, unsigned int a3)
{
  if (((a3 | a2) & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || (unint64_t v7 = *((void *)this + 2), v6 + 24 > v7))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    unint64_t v7 = (unint64_t)v10 + v9;
    void *v10 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v10;
  }
  *(_WORD *)(v6 + 16) = 38;
  *(unsigned char *)(v6 + 18) = 0;
  uint64_t v11 = a2;
  unint64_t v12 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (v12) {
    BOOL v13 = v12 + 24 > v7;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2 * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v16 + v15;
    *((void *)this + 3) = v16;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 102;
  *(unsigned char *)(v12 + 18) = 4;
  *(void *)unint64_t v12 = v11;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, (swift::Demangle::Node *)v12, this);
  uint64_t v17 = a3;
  unint64_t v18 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v18;
  if (!v18 || v18 + 24 > *((void *)this + 2))
  {
    unint64_t v19 = 2 * *((void *)this + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *((void *)this + 4) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    *unsigned __int16 v21 = *((void *)this + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v21 + v20;
    *((void *)this + 3) = v21;
  }
  *((void *)this + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 102;
  *(unsigned char *)(v18 + 18) = 4;
  *(void *)unint64_t v18 = v17;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, (swift::Demangle::Node *)v18, this);
  return v6;
}

uint64_t swift::Demangle::Demangler::demangleNatural(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 4294966296;
  }
  uint64_t v3 = *((void *)this + 7);
  if (*(unsigned __int8 *)(v3 + v1) - 48 > 9) {
    return 4294966296;
  }
  uint64_t v4 = 0;
  while (1)
  {
    int v5 = *(unsigned __int8 *)(v3 + v1);
    if ((v5 - 48) > 9) {
      break;
    }
    uint64_t v6 = (v5 + 10 * v4 - 48);
    if ((int)v6 < (int)v4) {
      return 4294966296;
    }
    *((void *)this + 9) = ++v1;
    uint64_t v4 = v6;
    if (v2 == v1) {
      return v6;
    }
  }
  return v4;
}

uint64_t swift::Demangle::Demangler::demangleIndex(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v3 = *((void *)this + 7);
    int v4 = *(unsigned __int8 *)(v3 + v1);
    if (v4 == 95)
    {
      *((void *)this + 9) = v1 + 1;
      return 0;
    }
    if ((v4 - 48) <= 9)
    {
      int v6 = 0;
      while (1)
      {
        int v7 = *(unsigned __int8 *)(v3 + v1);
        if ((v7 - 48) > 9) {
          break;
        }
        int v8 = v7 + 10 * v6 - 48;
        if (v8 < v6) {
          return 4294966296;
        }
        *((void *)this + 9) = ++v1;
        int v6 = v8;
        if (v2 == v1)
        {
          unint64_t v1 = v2;
          int v6 = v8;
          break;
        }
      }
      uint64_t v9 = 4294966296;
      if (v6 < 0 || v1 >= v2) {
        return v9;
      }
      if (*(unsigned char *)(v3 + v1) == 95)
      {
        *((void *)this + 9) = v1 + 1;
        return (v6 + 1);
      }
    }
  }
  return 4294966296;
}

unint64_t swift::Demangle::Demangler::demangleIndexAsNode(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    uint64_t v6 = 0;
    *((void *)this + 9) = v1 + 1;
    goto LABEL_4;
  }
  if ((v5 - 48) > 9) {
    return 0;
  }
  int v11 = 0;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(v4 + v1);
    if ((v12 - 48) > 9) {
      break;
    }
    int v13 = v12 + 10 * v11 - 48;
    if (v13 >= v11)
    {
      *((void *)this + 9) = ++v1;
      int v11 = v13;
      if (v2 != v1) {
        continue;
      }
    }
    return 0;
  }
  unint64_t result = 0;
  if ((v11 & 0x80000000) == 0 && v1 < v2 && v12 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    uint64_t v6 = (v11 + 1);
LABEL_4:
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2 * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      void *v10 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v10 + v9;
      *((void *)this + 3) = v10;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 161;
    *(unsigned char *)(result + 18) = 4;
    *(void *)unint64_t result = v6;
  }
  return result;
}

uint64_t swift::Demangle::Demangler::pushMultiSubstitutions(swift::Demangle::Demangler *this, int a2, unint64_t a3)
{
  uint64_t v3 = 0;
  if (a2 <= 2048 && *((unsigned int *)this + 28) > a3)
  {
    uint64_t v3 = *(void *)(*((void *)this + 13) + 8 * a3);
    if (a2 >= 2)
    {
      unsigned int v5 = a2 + 1;
      do
      {
        uint64_t v7 = v3;
        swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 11, &v7, this);
        --v5;
      }
      while (v5 > 2);
    }
  }
  return v3;
}

unint64_t swift::Demangle::Demangler::createSwiftType(swift::Demangle::NodeFactory *a1, __int16 a2, const char *a3)
{
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a1, 153, "Swift", 5uLL);
  unint64_t v7 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)a1 + 2))
  {
    unint64_t v8 = 2 * *((void *)a1 + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)a1 + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    int v11 = (char *)v10 + v9;
    void *v10 = *((void *)a1 + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v10;
  }
  *((void *)a1 + 1) = v7 + 24;
  if (a3) {
    size_t v12 = strlen(a3);
  }
  else {
    size_t v12 = 0;
  }
  *(_WORD *)(v7 + 16) = 101;
  *(unsigned char *)(v7 + 18) = 3;
  *(void *)unint64_t v7 = a3;
  *(void *)(v7 + 8) = v12;
  if (!Node) {
    return 0;
  }
  unint64_t v13 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v13;
  if (!v13 || v13 + 24 > *((void *)a1 + 2))
  {
    unint64_t v14 = 2 * *((void *)a1 + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)a1 + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    uint64_t v17 = (char *)v16 + v15;
    *unint64_t v16 = *((void *)a1 + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v17;
    *((void *)a1 + 3) = v16;
  }
  *((void *)a1 + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = a2;
  *(unsigned char *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v13, Node, a1);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v13, (swift::Demangle::Node *)v7, a1);
  unint64_t v18 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v18;
  if (!v18 || v18 + 24 > *((void *)a1 + 2))
  {
    unint64_t v19 = 2 * *((void *)a1 + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *((void *)a1 + 4) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    int v22 = (char *)v21 + v20;
    *unsigned __int16 v21 = *((void *)a1 + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v22;
    *((void *)a1 + 3) = v21;
  }
  *((void *)a1 + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 232;
  *(unsigned char *)(v18 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v18, (swift::Demangle::Node *)v13, a1);
  return v18;
}

unint64_t swift::Demangle::Demangler::createStandardSubstitution(swift::Demangle::Demangler *this, int a2, int a3)
{
  if (a2 == 65 && a3 != 1)
  {
    uint64_t v3 = "AutoreleasingUnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 97 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Array";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 98 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Bool";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 68 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Dictionary";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 100 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Double";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v6 = a3;
  if (a2 == 102) {
    char v7 = a3;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v3 = "Float";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 104) {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v3 = "Set";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v8 = a3;
  if (a2 == 73) {
    char v9 = a3;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v3 = "DefaultIndices";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 105) {
    char v8 = 1;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v3 = "Int";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v10 = a3;
  if (a2 != 74) {
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v3 = "Character";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 78 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ClosedRange";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 110 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Range";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 79 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ObjectIdentifier";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v11 = a3;
  if (a2 != 80) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v3 = "UnsafePointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 112 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 82 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 114 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v12 = a3;
  if (a2 == 83) {
    char v13 = a3;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    uint64_t v3 = "String";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 115) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v3 = "Substring";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 117 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UInt";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 86 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 118 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 87 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 119 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 113 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Optional";
    __int16 v4 = 61;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 66 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryFloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v14 = a3;
  if (a2 == 69) {
    char v15 = a3;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    uint64_t v3 = "Encodable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 101) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v3 = "Decodable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v16 = a3;
  if (a2 == 70) {
    char v17 = a3;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0)
  {
    uint64_t v3 = "FloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 71) {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    uint64_t v3 = "RandomNumberGenerator";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 72 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Hashable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 106 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Numeric";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 75 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BidirectionalCollection";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 107 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RandomAccessCollection";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 76 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Comparable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 108 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Collection";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v18 = a3;
  if (a2 != 77) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    uint64_t v3 = "MutableCollection";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 109 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeReplaceableCollection";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 81 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Equatable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  char v19 = a3;
  if (a2 == 84) {
    char v20 = a3;
  }
  else {
    char v20 = 1;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v3 = "Sequence";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 116) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v3 = "IteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 85 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 88 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeExpression";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 120 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Strideable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 89 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RawRepresentable";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 121 && (a3 & 1) == 0)
  {
    uint64_t v3 = "StringProtocol";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 90 && (a3 & 1) == 0)
  {
    uint64_t v3 = "SignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 122 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryInteger";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 65 && a3)
  {
    uint64_t v3 = "Actor";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 67 && a3)
  {
    uint64_t v3 = "CheckedContinuation";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 99 && a3)
  {
    uint64_t v3 = "UnsafeContinuation";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 69 && a3)
  {
    uint64_t v3 = "CancellationError";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 101 && a3)
  {
    uint64_t v3 = "UnownedSerialExecutor";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 70 && a3)
  {
    uint64_t v3 = "Executor";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 102 && a3)
  {
    uint64_t v3 = "SerialExecutor";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 71 && a3)
  {
    uint64_t v3 = "TaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 103 && a3)
  {
    uint64_t v3 = "ThrowingTaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 104 && a3)
  {
    uint64_t v3 = "TaskExecutor";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 73 && a3)
  {
    uint64_t v3 = "AsyncIteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 105 && a3)
  {
    uint64_t v3 = "AsyncSequence";
    __int16 v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 74 && a3)
  {
    uint64_t v3 = "UnownedJob";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 77 && a3)
  {
    uint64_t v3 = "MainActor";
    __int16 v4 = 24;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 80 && a3)
  {
    uint64_t v3 = "TaskPriority";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 83 && a3)
  {
    uint64_t v3 = "AsyncStream";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 115 && a3)
  {
    uint64_t v3 = "AsyncThrowingStream";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 84 && a3)
  {
    uint64_t v3 = "Task";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 116 && a3)
  {
    uint64_t v3 = "UnsafeCurrentTask";
    __int16 v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  return 0;
}

unsigned int *swift::Demangle::Vector<char>::push_back(unsigned int *result, char *a2, void *a3)
{
  __int16 v4 = (const void **)result;
  unsigned int v5 = result[2];
  size_t v6 = result[3];
  char v7 = *(char **)result;
  if (v5 >= v6)
  {
    char v9 = (char *)a3[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = a3[2];
      if (v11 <= v10)
      {
        a3[1] = v11;
        LODWORD(v12) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * a3[4];
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      a3[4] = v14;
      unint64_t v15 = v14 + 8;
      unint64_t result = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      char v16 = (char *)result + v15;
      *(void *)unint64_t result = a3[3];
      char v9 = (char *)(result + 2);
      a3[2] = v16;
      a3[3] = result;
    }
    a3[1] = &v9[v13];
    if (v6) {
      unint64_t result = (unsigned int *)memcpy(v9, *v4, v6);
    }
    *__int16 v4 = v9;
    char v7 = v9;
    unsigned int v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  char v17 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  v7[v5] = v17;
  return result;
}

BOOL anonymous namespace'::isDeclName(int a1)
{
  BOOL result = 1;
  if (((a1 - 173) > 0x3C || ((1 << (a1 + 83)) & 0x100000010000010DLL) == 0)
    && ((a1 - 101) > 0x24 || ((1 << (a1 - 101)) & 0x1000800001) == 0))
  {
    return a1 == 347;
  }
  return result;
}

unint64_t swift::Demangle::Demangler::popModule(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = v1 - 1;
  uint64_t v3 = *(void *)(*((void *)this + 11) + 8 * v2);
  int v4 = *(unsigned __int16 *)(v3 + 16);
  if (v4 != 153)
  {
    if (v4 == 101)
    {
      *((_DWORD *)this + 24) = v2;
      return swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v3, 153);
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v2;
  return v3;
}

swift::Demangle::Node *swift::Demangle::Demangler::popContext(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  int v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v1 - 1));
  int v5 = *((unsigned __int16 *)v4 + 8);
  if (v5 == 101)
  {
    *((_DWORD *)this + 24) = v3;
    int v4 = (swift::Demangle::Node *)swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v4, 153);
    if (v4) {
      return v4;
    }
    int v1 = *((_DWORD *)this + 24);
    if (!v1) {
      return 0;
    }
  }
  else if (v5 == 153)
  {
    *((_DWORD *)this + 24) = v3;
    return v4;
  }
  int v6 = v1 - 1;
  int v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 232)
  {
    if (swift::Demangle::isContext())
    {
      *((_DWORD *)this + 24) = v6;
      return v4;
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v6;
  int v7 = *((unsigned __int8 *)v4 + 18);
  if (v7 == 1) {
    goto LABEL_12;
  }
  if (v7 != 5 || *((_DWORD *)v4 + 2) != 1) {
    return 0;
  }
  int v4 = *(swift::Demangle::Node **)v4;
LABEL_12:
  int v4 = *(swift::Demangle::Node **)v4;
  if (!swift::Demangle::isContext()) {
    return 0;
  }
  return v4;
}

uint64_t *swift::Demangle::Demangler::popTypeAndGetAnyGeneric(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v2 = v1 - 1;
  int v3 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v3 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v2;
  int v4 = *((unsigned __int8 *)v3 + 18);
  if (v4 != 1)
  {
    if (v4 != 5 || *((_DWORD *)v3 + 2) != 1) {
      return 0;
    }
    int v3 = (uint64_t *)*v3;
  }
  int v5 = (uint64_t *)*v3;
  if (!v5) {
    return 0;
  }
  BOOL result = 0;
  unsigned int v7 = *((unsigned __int16 *)v5 + 8);
  if (v7 > 0xB3)
  {
    BOOL v8 = v7 - 180 > 0x36 || ((1 << (v7 + 76)) & 0x60008000000003) == 0;
    if (v8 && v7 != 347) {
      return result;
    }
    return v5;
  }
  BOOL v9 = v7 > 0x3D || ((1 << v7) & 0x2000000001200000) == 0;
  if (!v9 || v7 == 167) {
    return v5;
  }
  return result;
}

uint64_t anonymous namespace'::isAnyGeneric(int a1)
{
  uint64_t result = 1;
  if (a1 <= 179)
  {
    if ((a1 > 0x3D || ((1 << a1) & 0x2000000001200000) == 0) && a1 != 167) {
      return 0;
    }
  }
  else if (((a1 - 180) > 0x36 || ((1 << (a1 + 76)) & 0x60008000000003) == 0) {
         && a1 != 347)
  }
  {
    return 0;
  }
  return result;
}

swift::Demangle::Node *setParentForOpaqueReturnTypeNodes(swift::Demangle::Demangler *a1, swift::Demangle::Node *a2, swift::Demangle::Node *a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    unsigned int v7 = *((unsigned __int16 *)a3 + 8);
    if (v7 <= 0xFD)
    {
      if (v7 != 76 && v7 != 220) {
        goto LABEL_14;
      }
      return a2;
    }
    if (v7 == 254) {
      return a2;
    }
    if (v7 != 308)
    {
LABEL_14:
      uint64_t v12 = *((unsigned __int8 *)a3 + 18);
      switch(v12)
      {
        case 1:
LABEL_31:
          unint64_t v17 = 0;
          while (1)
          {
            unint64_t v19 = *((unsigned __int8 *)a3 + 18);
            unsigned int v20 = v19 - 1;
            if (v19 == 1) {
              goto LABEL_38;
            }
            if (v19 != 5) {
              break;
            }
            if (*((unsigned int *)a3 + 2) > v17)
            {
LABEL_41:
              unsigned __int16 v21 = a3;
              if (v20 >= 2) {
                unsigned __int16 v21 = *(swift::Demangle::Node **)a3;
              }
              char v18 = (swift::Demangle::Node *)*((void *)v21 + v17);
              goto LABEL_33;
            }
LABEL_32:
            char v18 = 0;
LABEL_33:
            setParentForOpaqueReturnTypeNodes(a1, a2, v18);
            if (v12 == ++v17) {
              return a2;
            }
          }
          if (v19 != 2) {
            goto LABEL_32;
          }
          unint64_t v19 = 2;
LABEL_38:
          if (v19 > v17) {
            goto LABEL_41;
          }
          goto LABEL_32;
        case 5:
          uint64_t v12 = *((unsigned int *)a3 + 2);
          if (v12) {
            goto LABEL_31;
          }
          break;
        case 2:
          uint64_t v12 = 2;
          goto LABEL_31;
      }
      return a2;
    }
    int v8 = *((unsigned __int8 *)a3 + 18);
    switch(v8)
    {
      case 1:
        uint64_t v10 = 0;
        break;
      case 2:
        uint64_t v10 = 1;
        break;
      case 5:
        uint64_t v9 = *((unsigned int *)a3 + 2);
        if (!v9) {
          goto LABEL_22;
        }
        uint64_t v10 = v9 - 1;
        unint64_t v11 = *(swift::Demangle::Node **)a3;
LABEL_21:
        if (*(_WORD *)(*((void *)v11 + v10) + 16) == 342) {
          return a2;
        }
LABEL_22:
        unint64_t v13 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 1) = v13;
        if (!v13 || v13 + 24 > *((void *)a1 + 2))
        {
          unint64_t v14 = 2 * *((void *)a1 + 4);
          if (v14 <= 0x20) {
            unint64_t v14 = 32;
          }
          *((void *)a1 + 4) = v14;
          unint64_t v15 = v14 + 8;
          char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
          *char v16 = *((void *)a1 + 3);
          unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)a1 + 2) = (char *)v16 + v15;
          *((void *)a1 + 3) = v16;
        }
        *((void *)a1 + 1) = v13 + 24;
        *(_WORD *)(v13 + 16) = 342;
        *(unsigned char *)(v13 + 18) = 4;
        *(void *)unint64_t v13 = a2;
        swift::Demangle::Node::addChild(a3, (swift::Demangle::Node *)v13, a1);
        return a2;
      default:
        goto LABEL_22;
    }
    unint64_t v11 = a3;
    goto LABEL_21;
  }
  return result;
}

unint64_t swift::Demangle::Demangler::demangleClangType(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  if (*(unsigned __int8 *)(v4 + v1) - 48 > 9) {
    return 0;
  }
  unsigned int v5 = 0;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(v4 + v1);
    if ((v6 - 48) > 9) {
      break;
    }
    int v7 = v6 + 10 * v5 - 48;
    if (v7 < (int)v5) {
      return 0;
    }
    *((void *)this + 9) = ++v1;
    unsigned int v5 = v7;
    if (v2 == v1)
    {
      unint64_t v1 = v2;
      unsigned int v5 = v7;
      break;
    }
  }
  if ((int)v5 < 1) {
    return 0;
  }
  size_t v8 = v5;
  if (v1 + v5 > v2) {
    return 0;
  }
  uint64_t v10 = (const void *)(v4 + v1);
  unint64_t v11 = (char *)*((void *)this + 1);
  if (v11)
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v5;
    }
    if ((unint64_t)&v11[v12] <= *((void *)this + 2))
    {
LABEL_24:
      unint64_t v17 = &v11[v12];
      goto LABEL_26;
    }
LABEL_21:
    unint64_t v13 = 2 * *((void *)this + 4);
    if (v13 <= v12 + 1) {
      unint64_t v13 = v12 + 1;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    char v16 = (char *)v15 + v14;
    *unint64_t v15 = *((void *)this + 3);
    unint64_t v11 = (char *)(v15 + 1);
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
    goto LABEL_24;
  }
  if ((unint64_t)v5 > *((void *)this + 2))
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v5;
    }
    goto LABEL_21;
  }
  unint64_t v11 = 0;
  unint64_t v17 = (char *)v5;
LABEL_26:
  *((void *)this + 1) = v17;
  memcpy(v11, v10, v8);
  *((void *)this + 9) += v8;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2 * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    unsigned int v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *unsigned int v20 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v20 + v19;
    *((void *)this + 3) = v20;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 23;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v11;
  *(void *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::Demangler::popFunctionParams(uint64_t a1, __int16 a2)
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  unsigned int v5 = v2 - 1;
  unint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8 * v5);
  int v7 = *(unsigned __int16 *)(v6 + 16);
  if (v7 != 232)
  {
    if (v7 == 274)
    {
      *(_DWORD *)(a1 + 96) = v5;
      unint64_t v8 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 8) = v8;
      if (!v8 || (unint64_t v9 = *(void *)(a1 + 16), v8 + 24 > v9))
      {
        unint64_t v10 = 2 * *(void *)(a1 + 32);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *(void *)(a1 + 32) = v10;
        unint64_t v11 = v10 + 8;
        uint64_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        unint64_t v9 = (unint64_t)v12 + v11;
        *uint64_t v12 = *(void *)(a1 + 24);
        unint64_t v8 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a1 + 16) = (char *)v12 + v11;
        *(void *)(a1 + 24) = v12;
      }
      *(_WORD *)(v8 + 16) = 223;
      *(unsigned char *)(v8 + 18) = 0;
      unint64_t v6 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 8) = v6;
      if (v6) {
        BOOL v13 = v6 + 24 > v9;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 2 * *(void *)(a1 + 32);
        if (v14 <= 0x20) {
          unint64_t v14 = 32;
        }
        *(void *)(a1 + 32) = v14;
        unint64_t v15 = v14 + 8;
        char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        unint64_t v17 = (char *)v16 + v15;
        *char v16 = *(void *)(a1 + 24);
        unint64_t v6 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
      }
      *(void *)(a1 + 8) = v6 + 24;
      *(_WORD *)(v6 + 16) = 232;
      *(unsigned char *)(v6 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, (swift::Demangle::Node *)v8, (swift::Demangle::NodeFactory *)a1);
      goto LABEL_20;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 96) = v5;
LABEL_20:
  unint64_t v18 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 8) = v18;
  if (!v18 || v18 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v19 = 2 * *(void *)(a1 + 32);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *(void *)(a1 + 32) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    int v22 = (char *)v21 + v20;
    *unsigned __int16 v21 = *(void *)(a1 + 24);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 16) = v22;
    *(void *)(a1 + 24) = v21;
  }
  *(void *)(a1 + 8) = v18 + 24;
  *(_WORD *)(v18 + 16) = a2;
  *(unsigned char *)(v18 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v18, (swift::Demangle::Node *)v6, (swift::Demangle::NodeFactory *)a1);
  return v18;
}

unint64_t swift::Demangle::Demangler::popPack(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unsigned int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unsigned int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 226;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)this + 24);
      if (!v14) {
        return 0;
      }
      int v15 = v14 - 1;
      uint64_t v16 = *((void *)this + 11);
      int v17 = *(unsigned __int16 *)(*(void *)(v16 + 8 * (v14 - 1)) + 16);
      if (v17 == 275)
      {
        *((_DWORD *)this + 24) = v15;
        --v14;
        if (!v15) {
          return 0;
        }
      }
      unsigned int v18 = v14 - 1;
      unint64_t v19 = *(swift::Demangle::Node **)(v16 + 8 * v18);
      if (*((_WORD *)v19 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v18;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v19, this);
    }
    while (v17 != 275);
    int v20 = *(unsigned __int8 *)(v2 + 18);
    if (v20 == 5)
    {
      uint64_t v22 = *(unsigned int *)(v2 + 8);
      if (v22)
      {
        long long v23 = (void *)(*(void *)v2 + 8 * v22 - 8);
        if ((unint64_t)v23 > *(void *)v2)
        {
          unint64_t v24 = *(void *)v2 + 8;
          do
          {
            uint64_t v25 = *(void *)(v24 - 8);
            *(void *)(v24 - 8) = *v23;
            *v23-- = v25;
            BOOL v26 = v24 >= (unint64_t)v23;
            v24 += 8;
          }
          while (!v26);
        }
      }
    }
    else if (v20 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    uint64_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    BOOL v13 = (char *)v12 + v11;
    *uint64_t v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 232;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, (swift::Demangle::Node *)v2, this);
  return v9;
}

unint64_t swift::Demangle::Demangler::popSILPack(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 105)
  {
    unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v4;
    if (v4 && v4 + 24 <= *((void *)this + 2))
    {
      __int16 v9 = 228;
      goto LABEL_15;
    }
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v7 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    void *v7 = *((void *)this + 3);
    *((void *)this + 3) = v7;
    unsigned int v8 = (char *)v7 + v11;
    __int16 v9 = 228;
    goto LABEL_14;
  }
  if (v3 != 100) {
    return 0;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (v4 && v4 + 24 <= *((void *)this + 2))
  {
    __int16 v9 = 227;
    goto LABEL_15;
  }
  unint64_t v5 = 2 * *((void *)this + 4);
  if (v5 <= 0x20) {
    unint64_t v5 = 32;
  }
  *((void *)this + 4) = v5;
  unint64_t v6 = v5 + 8;
  int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
  void *v7 = *((void *)this + 3);
  *((void *)this + 3) = v7;
  unsigned int v8 = (char *)v7 + v6;
  __int16 v9 = 227;
LABEL_14:
  unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 2) = v8;
LABEL_15:
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + 18) = 0;
  int v12 = *((_DWORD *)this + 24);
  if (!v12 || (unsigned int v13 = v12 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v13) + 16) != 274))
  {
    while (1)
    {
      int v19 = *((_DWORD *)this + 24);
      if (!v19) {
        return 0;
      }
      int v20 = v19 - 1;
      uint64_t v21 = *((void *)this + 11);
      int v22 = *(unsigned __int16 *)(*(void *)(v21 + 8 * (v19 - 1)) + 16);
      if (v22 == 275)
      {
        *((_DWORD *)this + 24) = v20;
        --v19;
        if (!v20) {
          return 0;
        }
      }
      unsigned int v23 = v19 - 1;
      unint64_t v24 = *(swift::Demangle::Node **)(v21 + 8 * v23);
      if (*((_WORD *)v24 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v23;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v24, this);
      if (v22 == 275)
      {
        int v25 = *(unsigned __int8 *)(v4 + 18);
        if (v25 == 5)
        {
          uint64_t v27 = *(unsigned int *)(v4 + 8);
          if (v27)
          {
            unsigned int v28 = (void *)(*(void *)v4 + 8 * v27 - 8);
            if ((unint64_t)v28 > *(void *)v4)
            {
              unint64_t v29 = *(void *)v4 + 8;
              do
              {
                uint64_t v30 = *(void *)(v29 - 8);
                *(void *)(v29 - 8) = *v28;
                *v28-- = v30;
                BOOL v31 = v29 >= (unint64_t)v28;
                v29 += 8;
              }
              while (!v31);
            }
          }
        }
        else if (v25 == 2)
        {
          *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
        }
        goto LABEL_18;
      }
    }
  }
  *((_DWORD *)this + 24) = v13;
LABEL_18:
  unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)this + 2))
  {
    unint64_t v15 = 2 * *((void *)this + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)this + 4) = v15;
    unint64_t v16 = v15 + 8;
    int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    unsigned int v18 = (char *)v17 + v16;
    void *v17 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v18;
    *((void *)this + 3) = v17;
  }
  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 232;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, (swift::Demangle::Node *)v4, this);
  return v14;
}

unint64_t swift::Demangle::Demangler::popTypeList(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 235;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v9 = *((_DWORD *)this + 24);
      if (!v9) {
        return 0;
      }
      int v10 = v9 - 1;
      uint64_t v11 = *((void *)this + 11);
      int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v9 - 1)) + 16);
      if (v12 == 275)
      {
        *((_DWORD *)this + 24) = v10;
        --v9;
        if (!v10) {
          return 0;
        }
      }
      unsigned int v13 = v9 - 1;
      unint64_t v14 = *(swift::Demangle::Node **)(v11 + 8 * v13);
      if (*((_WORD *)v14 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v14, this);
    }
    while (v12 != 275);
    int v15 = *(unsigned __int8 *)(v2 + 18);
    if (v15 == 5)
    {
      uint64_t v17 = *(unsigned int *)(v2 + 8);
      if (v17)
      {
        unsigned int v18 = (void *)(*(void *)v2 + 8 * v17 - 8);
        if ((unint64_t)v18 > *(void *)v2)
        {
          unint64_t v19 = *(void *)v2 + 8;
          do
          {
            uint64_t v20 = *(void *)(v19 - 8);
            *(void *)(v19 - 8) = *v18;
            *v18-- = v20;
            BOOL v21 = v19 >= (unint64_t)v18;
            v19 += 8;
          }
          while (!v21);
        }
      }
    }
    else if (v15 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v2;
}

unint64_t swift::Demangle::Demangler::popAnyProtocolConformanceList(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 2;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v9 = *((_DWORD *)this + 24);
      if (!v9) {
        return 0;
      }
      int v10 = v9 - 1;
      uint64_t v11 = *((void *)this + 11);
      int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v9 - 1)) + 16);
      if (v12 == 275)
      {
        *((_DWORD *)this + 24) = v10;
        --v9;
        if (!v10) {
          return 0;
        }
      }
      unsigned int v13 = v9 - 1;
      unint64_t v14 = *(unsigned __int16 **)(v11 + 8 * v13);
      unsigned int v15 = v14[8];
      BOOL v16 = v15 > 0x31;
      uint64_t v17 = (1 << v15) & 0x380000C000000;
      if (v16 || v17 == 0) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v14, this);
    }
    while (v12 != 275);
    int v19 = *(unsigned __int8 *)(v2 + 18);
    if (v19 == 5)
    {
      uint64_t v21 = *(unsigned int *)(v2 + 8);
      if (v21)
      {
        int v22 = (void *)(*(void *)v2 + 8 * v21 - 8);
        if ((unint64_t)v22 > *(void *)v2)
        {
          unint64_t v23 = *(void *)v2 + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v2;
}

uint64_t swift::Demangle::Demangler::popAnyProtocolConformance(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unsigned int v3 = v1 - 1;
  uint64_t result = *(void *)(*((void *)this + 11) + 8 * v3);
  unsigned int v5 = *(unsigned __int16 *)(result + 16);
  BOOL v6 = v5 > 0x31;
  uint64_t v7 = (1 << v5) & 0x380000C000000;
  if (v6 || v7 == 0) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleRetroactiveProtocolConformanceRef(swift::Demangle::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    goto LABEL_5;
  }
  unsigned int v3 = v2 - 1;
  unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v3);
  int v5 = *(unsigned __int16 *)(v4 + 16);
  if (v5 == 153)
  {
    *((_DWORD *)this + 24) = v3;
    goto LABEL_7;
  }
  if (v5 == 101)
  {
    *((_DWORD *)this + 24) = v3;
    unint64_t v4 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v4, 153);
  }
  else
  {
LABEL_5:
    unint64_t v4 = 0;
  }
LABEL_7:
  unint64_t v6 = swift::Demangle::Demangler::popProtocol(this);
  unint64_t v7 = 0;
  if (v4)
  {
    unsigned int v8 = (swift::Demangle::Node *)v6;
    if (v6)
    {
      unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        int v12 = (char *)v11 + v10;
        *uint64_t v11 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v12;
        *((void *)this + 3) = v11;
      }
      *((void *)this + 1) = v7 + 24;
      *(_WORD *)(v7 + 16) = 185;
      *(unsigned char *)(v7 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v8, this);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, (swift::Demangle::Node *)v4, this);
    }
  }
  return v7;
}

uint64_t swift::Demangle::Demangler::popDependentProtocolConformance(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unsigned int v3 = v1 - 1;
  uint64_t result = *(void *)(*((void *)this + 11) + 8 * v3);
  if (*(unsigned __int16 *)(result + 16) - 47 > 2) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleDependentConformanceIndex(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    unint64_t result = 0;
    *((void *)this + 9) = v1 + 1;
    return result;
  }
  if ((v5 - 48) > 9) {
    return 0;
  }
  int v7 = 0;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(v4 + v1);
    if ((v8 - 48) > 9) {
      break;
    }
    int v9 = v8 + 10 * v7 - 48;
    if (v9 >= v7)
    {
      *((void *)this + 9) = ++v1;
      int v7 = v9;
      if (v2 != v1) {
        continue;
      }
    }
    return 0;
  }
  unint64_t result = 0;
  if ((v7 & 0x80000000) == 0 && v1 < v2 && v8 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    if (v7)
    {
      uint64_t v10 = (v7 - 1);
      unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = result;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2 * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unsigned int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *unsigned int v13 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }
      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 102;
      *(unsigned char *)(result + 18) = 4;
      *(void *)unint64_t result = v10;
    }
    else
    {
      unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = result;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v14 = 2 * *((void *)this + 4);
        if (v14 <= 0x20) {
          unint64_t v14 = 32;
        }
        *((void *)this + 4) = v14;
        unint64_t v15 = v14 + 8;
        BOOL v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *BOOL v16 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v16 + v15;
        *((void *)this + 3) = v16;
      }
      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 246;
      *(unsigned char *)(result + 18) = 0;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::popDependentAssociatedConformance(swift::Demangle::Demangler *this)
{
  unint64_t v2 = swift::Demangle::Demangler::popProtocol(this);
  int v3 = *((_DWORD *)this + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3 - 1;
  int v5 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v4);
  if (*((_WORD *)v5 + 8) != 232) {
    return 0;
  }
  unint64_t v6 = (swift::Demangle::Node *)v2;
  *((_DWORD *)this + 24) = v4;
  if (!v2) {
    return 0;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    unint64_t v11 = (char *)v10 + v9;
    void *v10 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v11;
    *((void *)this + 3) = v10;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 34;
  *(unsigned char *)(v7 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v5, this);
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v6, this);
  return v7;
}

unint64_t swift::Demangle::Demangler::popRetroactiveConformances(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    unsigned int v8 = v1 - 1;
    unint64_t v9 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v8);
    if (*((_WORD *)v9 + 8) != 206) {
      break;
    }
    *((_DWORD *)this + 24) = v8;
    if (!v3)
    {
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v4 = 2 * *((void *)this + 4);
        if (v4 <= 0x20) {
          unint64_t v4 = 32;
        }
        *((void *)this + 4) = v4;
        unint64_t v5 = v4 + 8;
        unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
        unint64_t v7 = (char *)v6 + v5;
        void *v6 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v7;
        *((void *)this + 3) = v6;
      }
      *((void *)this + 1) = v3 + 24;
      *(_WORD *)(v3 + 16) = 235;
      *(unsigned char *)(v3 + 18) = 0;
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v3, v9, this);
    int v1 = *((_DWORD *)this + 24);
    if (!v1) {
      goto LABEL_15;
    }
  }
  if (!v3) {
    return v3;
  }
LABEL_15:
  int v10 = *(unsigned __int8 *)(v3 + 18);
  if (v10 == 5)
  {
    uint64_t v11 = *(unsigned int *)(v3 + 8);
    if (v11)
    {
      unint64_t v12 = (void *)(*(void *)v3 + 8 * v11 - 8);
      if ((unint64_t)v12 > *(void *)v3)
      {
        unint64_t v13 = *(void *)v3 + 8;
        do
        {
          uint64_t v14 = *(void *)(v13 - 8);
          *(void *)(v13 - 8) = *v12;
          *v12-- = v14;
          BOOL v15 = v13 >= (unint64_t)v12;
          v13 += 8;
        }
        while (!v15);
      }
    }
  }
  else if (v10 == 2)
  {
    *(int8x16_t *)unint64_t v3 = vextq_s8(*(int8x16_t *)v3, *(int8x16_t *)v3, 8uLL);
  }
  return v3;
}

uint64_t swift::Demangle::Demangler::demangleBoundGenerics(uint64_t a1, const void **a2, unint64_t *a3)
{
  *a3 = swift::Demangle::Demangler::popRetroactiveConformances((swift::Demangle::Demangler *)a1);
  while (1)
  {
    int v22 = 0;
    unint64_t v5 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (!v5 || v5 + 24 > *(void *)(a1 + 16))
    {
      unint64_t v6 = 2 * *(void *)(a1 + 32);
      if (v6 <= 0x20) {
        unint64_t v6 = 32;
      }
      *(void *)(a1 + 32) = v6;
      unint64_t v7 = v6 + 8;
      unsigned int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
      void *v8 = *(void *)(a1 + 24);
      unint64_t v5 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 16) = (char *)v8 + v7;
      *(void *)(a1 + 24) = v8;
    }
    *(void *)(a1 + 8) = v5 + 24;
    *(_WORD *)(v5 + 16) = 235;
    *(unsigned char *)(v5 + 18) = 0;
    int v22 = (swift::Demangle::Node *)v5;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back(a2, (uint64_t *)&v22, (void *)a1);
    for (int i = *(_DWORD *)(a1 + 96); i; int i = *(_DWORD *)(a1 + 96))
    {
      int v10 = *(swift::Demangle::Node **)(*(void *)(a1 + 88) + 8 * (i - 1));
      if (*((_WORD *)v10 + 8) != 232) {
        break;
      }
      *(_DWORD *)(a1 + 96) = i - 1;
      swift::Demangle::Node::addChild(v22, v10, (swift::Demangle::NodeFactory *)a1);
    }
    int v11 = *((unsigned __int8 *)v22 + 18);
    if (v11 == 5)
    {
      unint64_t v12 = *(void *)v22;
      uint64_t v13 = *((unsigned int *)v22 + 2);
      uint64_t v14 = (void *)(*(void *)v22 + 8 * v13 - 8);
      if (v13 && (unint64_t)v14 > v12)
      {
        unint64_t v16 = v12 + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 8);
          *(void *)(v16 - 8) = *v14;
          *v14-- = v17;
          BOOL v18 = v16 >= (unint64_t)v14;
          v16 += 8;
        }
        while (!v18);
      }
    }
    else if (v11 == 2)
    {
      *(int8x16_t *)int v22 = vextq_s8(*(int8x16_t *)v22, *(int8x16_t *)v22, 8uLL);
    }
    if (!i) {
      break;
    }
    unsigned int v19 = i - 1;
    int v20 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8 * v19) + 16);
    if (v20 != 275)
    {
      if (v20 == 274)
      {
        *(_DWORD *)(a1 + 96) = v19;
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(a1 + 96) = v19;
  }
  return 0;
}

const void **swift::Demangle::Vector<swift::Demangle::Node *>::push_back(const void **result, uint64_t *a2, void *a3)
{
  unint64_t v4 = result;
  unsigned int v5 = *((_DWORD *)result + 2);
  uint64_t v6 = *((unsigned int *)result + 3);
  unint64_t v7 = (char *)*result;
  if (v5 >= v6)
  {
    unint64_t v9 = &v7[8 * v6];
    int v10 = (char *)a3[1];
    if (v9 == v10)
    {
      unint64_t v12 = v9 + 8;
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v11 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = 8 * (v13 + v6);
    unint64_t v7 = (char *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)&v7[v14] > v11)
    {
      unint64_t v15 = 2 * a3[4];
      if (v15 <= v14 + 8) {
        unint64_t v15 = v14 + 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t result = (const void **)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      uint64_t v17 = (char *)result + v16;
      swift::Demangle::Node *result = (const void *)a3[3];
      unint64_t v7 = (char *)(((unint64_t)result + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v17;
      a3[3] = result;
    }
    a3[1] = &v7[v14];
    if (v6) {
      unint64_t result = (const void **)memcpy(v7, *v4, 8 * v6);
    }
    *unint64_t v4 = v7;
    unsigned int v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v18 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  *(void *)&v7[8 * v5] = v18;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleBoundGenericArgs(swift::Demangle::NodeFactory *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = a4;
  unint64_t v6 = *(unsigned int *)(a3 + 8);
  if (v6 <= a4) {
    return 0;
  }
  unint64_t v7 = a2;
  int v9 = *(unsigned __int16 *)(a2 + 16);
  if (v9 == 233 || v9 == 181)
  {
    unint64_t v10 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2 * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      uint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      uint64_t v14 = (char *)v13 + v12;
      *uint64_t v13 = *((void *)a1 + 3);
      unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }
    unint64_t v15 = v10 + 24;
    *((void *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = 235;
    *(unsigned char *)(v10 + 18) = 0;
    unsigned int v16 = *(_DWORD *)(a3 + 8);
    unint64_t v17 = v16 - 1;
    if (v17 >= v4 && v16 != 0)
    {
      while (1)
      {
        uint64_t v20 = *(void *)(*(void *)a3 + 8 * v17);
        int v21 = *(unsigned __int8 *)(v20 + 18);
        int v22 = (swift::Demangle::Node **)v20;
        if ((v21 - 1) >= 2)
        {
          if (v21 == 5)
          {
            unint64_t v23 = *(swift::Demangle::Node **)v20;
            int v22 = *(swift::Demangle::Node ***)v20;
            goto LABEL_29;
          }
          int v22 = 0;
        }
        switch(v21)
        {
          case 1:
            uint64_t v24 = (swift::Demangle::Node **)(v20 + 8);
            if (v22 != (swift::Demangle::Node **)(v20 + 8)) {
              goto LABEL_36;
            }
            break;
          case 2:
            uint64_t v24 = (swift::Demangle::Node **)(v20 + 16);
            if (v22 != (swift::Demangle::Node **)(v20 + 16)) {
              goto LABEL_36;
            }
            break;
          case 5:
            unint64_t v23 = *(swift::Demangle::Node **)v20;
LABEL_29:
            uint64_t v24 = (swift::Demangle::Node **)((char *)v23 + 8 * *(unsigned int *)(v20 + 8));
            if (v22 != v24) {
              goto LABEL_36;
            }
            break;
          default:
            uint64_t v24 = 0;
            if (v22)
            {
              do
              {
LABEL_36:
                BOOL v25 = *v22++;
                swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, v25, a1);
              }
              while (v22 != v24);
              unsigned int v16 = *(_DWORD *)(a3 + 8);
            }
            break;
        }
        unint64_t v17 = (v17 - 1);
        if (v17 < v4 || v16 <= v17)
        {
          unint64_t v15 = *((void *)a1 + 1);
          break;
        }
      }
    }
    unint64_t v29 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v29;
    if (!v29 || v29 + 24 > *((void *)a1 + 2))
    {
      unint64_t v30 = 2 * *((void *)a1 + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32;
      }
      *((void *)a1 + 4) = v30;
      unint64_t v31 = v30 + 8;
      uint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      unint64_t v33 = (char *)v32 + v31;
      *uint64_t v32 = *((void *)a1 + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v33;
      *((void *)a1 + 3) = v32;
    }
    *((void *)a1 + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 232;
    *(unsigned char *)(v29 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v29, (swift::Demangle::Node *)v7, a1);
    unint64_t v34 = 0;
    if (v10 && v29)
    {
      unint64_t v34 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v34;
      if (!v34 || v34 + 24 > *((void *)a1 + 2))
      {
        unint64_t v35 = 2 * *((void *)a1 + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)a1 + 4) = v35;
        unint64_t v36 = v35 + 8;
        long long v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        *long long v37 = *((void *)a1 + 3);
        unint64_t v34 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v37 + v36;
        *((void *)a1 + 3) = v37;
      }
      *((void *)a1 + 1) = v34 + 24;
      *(_WORD *)(v34 + 16) = 17;
      *(unsigned char *)(v34 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v34, (swift::Demangle::Node *)v29, a1);
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v34, (swift::Demangle::Node *)v10, a1);
    }
    return v34;
  }
  int v26 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v27 = (void *)a2;
  if ((v26 - 1) >= 2)
  {
    if (v26 == 5 && *(_DWORD *)(a2 + 8))
    {
      uint64_t v27 = *(void **)a2;
      goto LABEL_42;
    }
    return 0;
  }
LABEL_42:
  int v28 = 0;
  if (*(unsigned __int16 *)(a2 + 16) > 0xD9u)
  {
    unsigned int v38 = v9 - 218;
    if (v38 > 0x24 || ((1 << v38) & 0x1000000005) == 0)
    {
LABEL_64:
      ++a4;
      int v28 = 1;
    }
  }
  else if (((v9 - 117) > 0x3E || ((1 << (v9 - 117)) & 0x6000000000000101) == 0) {
         && v9 != 33
  }
         && v9 != 70)
  {
    goto LABEL_64;
  }
  uint64_t v39 = *(void *)(*(void *)a3 + 8 * v4);
  if (a4 < v6)
  {
    uint64_t v40 = *v27;
    if (*(_WORD *)(*v27 + 16) != 71)
    {
      __int16 v44 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBoundGenericArgs(a1, *v27, a3);
LABEL_85:
      if (v44)
      {
LABEL_86:
        __int16 v51 = *(_WORD *)(v7 + 16);
        unint64_t v52 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 1) = v52;
        if (!v52 || v52 + 24 > *((void *)a1 + 2))
        {
          unint64_t v53 = 2 * *((void *)a1 + 4);
          if (v53 <= 0x20) {
            unint64_t v53 = 32;
          }
          *((void *)a1 + 4) = v53;
          unint64_t v54 = v53 + 8;
          unsigned int v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
          uint64_t v56 = (char *)v55 + v54;
          *unsigned int v55 = *((void *)a1 + 3);
          unint64_t v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)a1 + 2) = v56;
          *((void *)a1 + 3) = v55;
        }
        *((void *)a1 + 1) = v52 + 24;
        *(_WORD *)(v52 + 16) = v51;
        *(unsigned char *)(v52 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v52, v44, a1);
        for (unsigned int i = 1; ; unsigned int i = v61 + 1)
        {
          unint64_t v59 = *(unsigned __int8 *)(v7 + 18);
          switch(v59)
          {
            case 1:
              unint64_t v60 = *(unsigned __int8 *)(v7 + 18);
              break;
            case 5:
              unint64_t v60 = *(unsigned int *)(v7 + 8);
              break;
            case 2:
              unint64_t v60 = 2;
              break;
            default:
              goto LABEL_112;
          }
          unint64_t v61 = i;
          if (v60 <= i)
          {
LABEL_112:
            unint64_t v7 = v52;
            goto LABEL_113;
          }
          unsigned int v62 = v59 - 1;
          if (v59 != 1)
          {
            if (v59 == 5)
            {
              if (*(unsigned int *)(v7 + 8) <= v61) {
                continue;
              }
              goto LABEL_108;
            }
            unint64_t v59 = 2;
          }
          if (v59 <= v61) {
            continue;
          }
LABEL_108:
          unint64_t v63 = v7;
          if (v62 >= 2) {
            unint64_t v63 = *(void *)v7;
          }
          unint64_t v64 = *(swift::Demangle::Node **)(v63 + 8 * v61);
          if (v64) {
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v52, v64, a1);
          }
        }
      }
      return 0;
    }
    int v41 = *(unsigned __int8 *)(v40 + 18);
    unsigned int v42 = (swift::Demangle::Node *)v40;
    if (v41 != 2)
    {
      if (v41 != 5 || *(_DWORD *)(v40 + 8) < 2u)
      {
        uint64_t v43 = 0;
LABEL_74:
        int v45 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBoundGenericArgs(a1, v43, a3);
        int v46 = *(unsigned __int8 *)(v40 + 18);
        unint64_t v47 = (swift::Demangle::Node **)v40;
        if ((v46 - 1) >= 2)
        {
          if (v46 != 5 || !*(_DWORD *)(v40 + 8))
          {
            int v48 = 0;
            goto LABEL_80;
          }
          unint64_t v47 = *(swift::Demangle::Node ***)v40;
        }
        int v48 = *v47;
LABEL_80:
        unsigned int v49 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(a1, 71, v48, v45);
        __int16 v44 = v49;
        if (*(unsigned char *)(v40 + 18) == 5 && *(_DWORD *)(v40 + 8) == 3)
        {
          if (v49)
          {
            unint64_t v50 = *(swift::Demangle::Node **)(*(void *)v40 + 16);
            if (v50)
            {
              swift::Demangle::Node::addChild(v49, v50, a1);
              goto LABEL_86;
            }
          }
        }
        goto LABEL_85;
      }
      unsigned int v42 = *(swift::Demangle::Node **)v40;
    }
    uint64_t v43 = *((void *)v42 + 1);
    goto LABEL_74;
  }
LABEL_113:
  if (!v28) {
    return v7;
  }
  int v65 = *(unsigned __int8 *)(v39 + 18);
  if ((v65 - 1) >= 2 && (v65 != 5 || !*(_DWORD *)(v39 + 8))) {
    return v7;
  }
  unint64_t v34 = 0;
  unsigned int v66 = *(unsigned __int16 *)(v7 + 16);
  if (v66 > 0xA6)
  {
    if (*(unsigned __int16 *)(v7 + 16) > 0xDAu)
    {
      if (v66 == 234)
      {
        __int16 v67 = 18;
      }
      else
      {
        if (v66 != 219) {
          return v34;
        }
        __int16 v67 = 15;
      }
    }
    else if (v66 == 167)
    {
      __int16 v67 = 17;
    }
    else
    {
      if (v66 != 180) {
        return v34;
      }
      __int16 v67 = 16;
    }
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(v7 + 16) > 0x3Cu)
  {
    if (v66 != 61)
    {
      if (v66 != 76) {
        return v34;
      }
      goto LABEL_129;
    }
    __int16 v67 = 14;
LABEL_137:
    unint64_t Type = (swift::Demangle::Node *)swift::Demangle::Demangler::createType(a1, (swift::Demangle::Node *)v7);
    int v68 = a1;
    __int16 v69 = v67;
    goto LABEL_138;
  }
  if (v66 == 24)
  {
    __int16 v67 = 13;
    goto LABEL_137;
  }
  if (v66 != 29) {
    return v34;
  }
LABEL_129:
  int v68 = a1;
  __int16 v69 = 19;
  unint64_t Type = (swift::Demangle::Node *)v7;
LABEL_138:

  return swift::Demangle::Demangler::createWithChildren(v68, v69, Type, (swift::Demangle::Node *)v39);
}

uint64_t swift::Demangle::nodeConsumesGenericArgs(swift::Demangle *this, swift::Demangle::Node *a2)
{
  uint64_t result = 0;
  int v4 = *((unsigned __int16 *)this + 8);
  if (v4 > 217)
  {
    unsigned int v6 = v4 - 218;
    BOOL v7 = v6 > 0x24;
    uint64_t v8 = (1 << v6) & 0x1000000005;
    if (v7 || v8 == 0) {
      return 1;
    }
  }
  else
  {
    BOOL v5 = (v4 - 117) > 0x3E || ((1 << (v4 - 117)) & 0x6000000000000101) == 0;
    if (v5 && v4 != 33 && v4 != 70) {
      return 1;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::demangleImplParamConvention(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_16:
    unint64_t v14 = 0;
    *((void *)a1 + 9) = v4 - 1;
    return v14;
  }
  unint64_t v4 = v3 + 1;
  *((void *)a1 + 9) = v3 + 1;
  uint64_t v5 = *(char *)(*((void *)a1 + 7) + v3) - 98;
  if (v5 >= 0x18 || ((0xD05CABu >> v5) & 1) == 0) {
    goto LABEL_16;
  }
  BOOL v7 = (&off_264237EE0)[v5];
  unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2 * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    unint64_t v12 = (char *)v11 + v10;
    *unint64_t v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v12;
    *((void *)a1 + 3) = v11;
  }
  *((void *)a1 + 1) = v8 + 24;
  size_t v13 = strlen(v7);
  *(_WORD *)(v8 + 16) = 106;
  *(unsigned char *)(v8 + 18) = 3;
  *(void *)unint64_t v8 = v7;
  *(void *)(v8 + 8) = v13;
  unint64_t v14 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)a1 + 2))
  {
    unint64_t v15 = 2 * *((void *)a1 + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)a1 + 4) = v15;
    unint64_t v16 = v15 + 8;
    unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    uint64_t v18 = (char *)v17 + v16;
    void *v17 = *((void *)a1 + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v18;
    *((void *)a1 + 3) = v17;
  }
  *((void *)a1 + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = a2;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, (swift::Demangle::Node *)v8, a1);
  return v14;
}

unint64_t swift::Demangle::Demangler::demangleImplResultConvention(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_5:
    unint64_t v7 = 0;
    *((void *)a1 + 9) = v4 - 1;
  }
  else
  {
    unint64_t v4 = v3 + 1;
    *((void *)a1 + 9) = v3 + 1;
    unsigned int v6 = "@out";
    switch(*(unsigned char *)(*((void *)a1 + 7) + v3))
    {
      case 'a':
        unsigned int v6 = "@autoreleased";
        break;
      case 'd':
        unsigned int v6 = "@unowned";
        break;
      case 'k':
        unsigned int v6 = "@pack_out";
        break;
      case 'o':
        unsigned int v6 = "@owned";
        break;
      case 'r':
        break;
      case 'u':
        unsigned int v6 = "@unowned_inner_pointer";
        break;
      default:
        goto LABEL_5;
    }
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      unint64_t v12 = (char *)v11 + v10;
      *unint64_t v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v8 + 24;
    size_t v13 = strlen(v6);
    *(_WORD *)(v8 + 16) = 106;
    *(unsigned char *)(v8 + 18) = 3;
    *(void *)unint64_t v8 = v6;
    *(void *)(v8 + 8) = v13;
    unint64_t v7 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v7;
    if (!v7 || v7 + 24 > *((void *)a1 + 2))
    {
      unint64_t v14 = 2 * *((void *)a1 + 4);
      if (v14 <= 0x20) {
        unint64_t v14 = 32;
      }
      *((void *)a1 + 4) = v14;
      unint64_t v15 = v14 + 8;
      unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)v16 + v15;
      *unint64_t v16 = *((void *)a1 + 3);
      unint64_t v7 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v17;
      *((void *)a1 + 3) = v16;
    }
    *((void *)a1 + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = a2;
    *(unsigned char *)(v7 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, (swift::Demangle::Node *)v8, a1);
  }
  return v7;
}

unint64_t swift::Demangle::Demangler::demangleImplParameterSending(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v1) != 84) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unsigned int v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    void *v6 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v6 + v5;
    *((void *)this + 3) = v6;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 111;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = "sending";
  *(void *)(result + 8) = 7;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleImplParameterResultDifferentiability(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v2) == 119)
  {
    *((void *)this + 9) = v2 + 1;
    unint64_t v3 = "@noDerivative";
  }
  else
  {
    unint64_t v3 = (const char *)&unk_215276E75;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  size_t v9 = strlen(v3);
  *(_WORD *)(v4 + 16) = 110;
  *(unsigned char *)(v4 + 18) = 3;
  *(void *)unint64_t v4 = v3;
  *(void *)(v4 + 8) = v9;
  return v4;
}

unint64_t swift::Demangle::Demangler::demanglePrivateContextDescriptor(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  unint64_t v3 = 0;
  *((void *)this + 9) = v1 + 1;
  switch(*(unsigned char *)(*((void *)this + 7) + v1))
  {
    case 'A':
      unint64_t v4 = swift::Demangle::Demangler::popAssocTypePath(this);
      if (!v4) {
        return 0;
      }
      int v5 = *((_DWORD *)this + 24);
      if (!v5) {
        return 0;
      }
      unsigned int v6 = v5 - 1;
      unint64_t v7 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v6);
      if (*((_WORD *)v7 + 8) != 232) {
        return 0;
      }
      unint64_t v8 = v4;
      *((_DWORD *)this + 24) = v6;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        unint64_t v12 = (char *)v11 + v10;
        *unint64_t v11 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v12;
        *((void *)this + 3) = v11;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v13 = 294;
      goto LABEL_39;
    case 'E':
      unint64_t v14 = swift::Demangle::Demangler::popContext(this);
      if (!v14) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v14;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2 * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        uint64_t v18 = (char *)v17 + v16;
        void *v17 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 292;
      goto LABEL_47;
    case 'M':
      int v20 = *((_DWORD *)this + 24);
      if (!v20) {
        return 0;
      }
      unsigned int v21 = v20 - 1;
      unint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v21);
      int v22 = *(unsigned __int16 *)(v8 + 16);
      if (v22 == 101)
      {
        *((_DWORD *)this + 24) = v21;
        unint64_t v8 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v8, 153);
        if (!v8) {
          return 0;
        }
      }
      else
      {
        if (v22 != 153) {
          return 0;
        }
        *((_DWORD *)this + 24) = v21;
      }
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2 * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        long long v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        unsigned int v38 = (char *)v37 + v36;
        *long long v37 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 291;
LABEL_47:
      *(_WORD *)(v3 + 16) = v19;
      *(unsigned char *)(v3 + 18) = 0;
LABEL_48:
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v3, (swift::Demangle::Node *)v8, this);
      break;
    case 'X':
      unint64_t v23 = swift::Demangle::Demangler::popContext(this);
      if (!v23) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v23;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v24 = 2 * *((void *)this + 4);
        if (v24 <= 0x20) {
          unint64_t v24 = 32;
        }
        *((void *)this + 4) = v24;
        unint64_t v25 = v24 + 8;
        int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        uint64_t v27 = (char *)v26 + v25;
        *int v26 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v27;
        *((void *)this + 3) = v26;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 293;
      goto LABEL_47;
    case 'Y':
      int v28 = *((_DWORD *)this + 24);
      if (!v28) {
        return 0;
      }
      unsigned int v29 = v28 - 1;
      unint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v29);
      *((_DWORD *)this + 24) = v29;
      if (!v8) {
        return 0;
      }
      unint64_t v30 = swift::Demangle::Demangler::popContext(this);
      if (!v30) {
        return 0;
      }
      unint64_t v7 = v30;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2 * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        unint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        unint64_t v34 = (char *)v33 + v32;
        *unint64_t v33 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v13 = 293;
LABEL_39:
      *(_WORD *)(v3 + 16) = v13;
      *(unsigned char *)(v3 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v3, v7, this);
      goto LABEL_48;
    default:
      return v3;
  }
  return v3;
}

unint64_t swift::Demangle::Demangler::popAssocTypePath(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unsigned int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 289;
  *(unsigned char *)(v2 + 18) = 0;
  do
  {
    int v7 = *((_DWORD *)this + 24);
    if (v7 && (unsigned int v8 = v7 - 1, v9 = *(void *)(*((void *)this + 11) + 8 * v8), *(_WORD *)(v9 + 16) == 275)) {
      *((_DWORD *)this + 24) = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAssocTypeName(this);
    if (!v10) {
      return 0;
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v10, this);
  }
  while (!v9);
  int v11 = *(unsigned __int8 *)(v2 + 18);
  if (v11 == 5)
  {
    uint64_t v13 = *(unsigned int *)(v2 + 8);
    if (v13)
    {
      unint64_t v14 = (void *)(*(void *)v2 + 8 * v13 - 8);
      if ((unint64_t)v14 > *(void *)v2)
      {
        unint64_t v15 = *(void *)v2 + 8;
        do
        {
          uint64_t v16 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = *v14;
          *v14-- = v16;
          BOOL v17 = v15 >= (unint64_t)v14;
          v15 += 8;
        }
        while (!v17);
      }
    }
  }
  else if (v11 == 2)
  {
    *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
  }
  return v2;
}

unint64_t swift::Demangle::Demangler::demangleAssociatedTypeSimple(swift::Demangle::Demangler *this, swift::Demangle::Node *a2)
{
  unint64_t v4 = swift::Demangle::Demangler::popAssocTypeName(this);
  unint64_t v5 = v4;
  if (!a2)
  {
    int v20 = *((_DWORD *)this + 24);
    if (!v20) {
      return 0;
    }
    unsigned int v21 = v20 - 1;
    unint64_t v6 = *(void *)(*((void *)this + 11) + 8 * v21);
    if (*(_WORD *)(v6 + 16) != 232) {
      return 0;
    }
    *((_DWORD *)this + 24) = v21;
    if (!v4) {
      return v5;
    }
    goto LABEL_8;
  }
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 232;
  *(unsigned char *)(v6 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v6, a2, this);
  if (v5)
  {
LABEL_8:
    unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v11;
    if (!v11 || v11 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      unint64_t v15 = (char *)v14 + v13;
      *unint64_t v14 = *((void *)this + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 45;
    *(unsigned char *)(v11 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, (swift::Demangle::Node *)v6, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v11, (swift::Demangle::Node *)v5, this);
    unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v16 = 2 * *((void *)this + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32;
      }
      *((void *)this + 4) = v16;
      unint64_t v17 = v16 + 8;
      uint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      __int16 v19 = (char *)v18 + v17;
      *uint64_t v18 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v19;
      *((void *)this + 3) = v18;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 232;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v5, (swift::Demangle::Node *)v11, this);
  }
  return v5;
}

unint64_t swift::Demangle::Demangler::demangleAssociatedTypeCompound(swift::Demangle::Demangler *this, swift::Demangle::Node *a2)
{
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (char *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v4;
  if (v4) {
    BOOL v5 = (unint64_t)(v4 + 32) > v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unint64_t v6 = 2 * *((void *)this + 4);
    if (v6 <= 0x28) {
      unint64_t v6 = 40;
    }
    *((void *)this + 4) = v6;
    unint64_t v7 = v6 + 8;
    unint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    uint64_t v9 = (char *)v8 + v7;
    void *v8 = *((void *)this + 3);
    unint64_t v4 = (char *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v8;
  }
  unsigned int v10 = 0;
  *((void *)this + 1) = v4 + 32;
  unsigned int v11 = 4;
  do
  {
    int v13 = *((_DWORD *)this + 24);
    if (v13 && (unsigned int v14 = v13 - 1, v15 = *(void *)(*((void *)this + 11) + 8 * v14), *(_WORD *)(v15 + 16) == 275)) {
      *((_DWORD *)this + 24) = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = swift::Demangle::Demangler::popAssocTypeName(this);
    if (!v16) {
      return 0;
    }
    unint64_t v17 = v16;
    if (v10 >= v11)
    {
      uint64_t v18 = &v4[8 * v11];
      __int16 v19 = (char *)*((void *)this + 1);
      if (v18 == v19)
      {
        unsigned int v21 = v18 + 8;
        unint64_t v20 = *((void *)this + 2);
        if ((unint64_t)v21 <= v20)
        {
          *((void *)this + 1) = v21;
          LODWORD(v22) = 1;
LABEL_11:
          v11 += v22;
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v20 = *((void *)this + 2);
      }
      if (2 * v11 <= 4) {
        uint64_t v22 = 4;
      }
      else {
        uint64_t v22 = 2 * v11;
      }
      uint64_t v23 = 8 * (v22 + v11);
      unint64_t v24 = (char *)((unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)this + 1) = v24;
      if (!v24 || (unint64_t)&v24[v23] > v20)
      {
        unint64_t v25 = 2 * *((void *)this + 4);
        if (v25 <= v23 + 8) {
          unint64_t v25 = v23 + 8;
        }
        *((void *)this + 4) = v25;
        unint64_t v26 = v25 + 8;
        uint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
        int v28 = (char *)v27 + v26;
        *uint64_t v27 = *((void *)this + 3);
        unint64_t v24 = (char *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((void *)this + 2) = v28;
        *((void *)this + 3) = v27;
      }
      *((void *)this + 1) = &v24[v23];
      if (v11) {
        memcpy(v24, v4, 8 * v11);
      }
      unint64_t v4 = v24;
      goto LABEL_11;
    }
LABEL_12:
    unsigned int v12 = v10 + 1;
    *(void *)&v4[8 * v10++] = v17;
  }
  while (!v15);
  if (a2)
  {
    unint64_t v30 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v30;
    if (!v30 || v30 + 24 > *((void *)this + 2))
    {
      unint64_t v31 = 2 * *((void *)this + 4);
      if (v31 <= 0x20) {
        unint64_t v31 = 32;
      }
      *((void *)this + 4) = v31;
      unint64_t v32 = v31 + 8;
      unint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      unint64_t v34 = (char *)v33 + v32;
      *unint64_t v33 = *((void *)this + 3);
      unint64_t v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v34;
      *((void *)this + 3) = v33;
    }
    *((void *)this + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 232;
    *(unsigned char *)(v30 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v30, a2, this);
    if (!v12) {
      return v30;
    }
LABEL_47:
    uint64_t v37 = 8 * v12;
    unsigned int v38 = v4 - 8;
    while (1)
    {
      unsigned int v42 = *(swift::Demangle::Node **)&v38[v37];
      if (!v42) {
        break;
      }
      unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v43;
      if (!v43 || v43 + 24 > *((void *)this + 2))
      {
        unint64_t v44 = 2 * *((void *)this + 4);
        if (v44 <= 0x20) {
          unint64_t v44 = 32;
        }
        *((void *)this + 4) = v44;
        unint64_t v45 = v44 + 8;
        int v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
        unint64_t v47 = (char *)v46 + v45;
        *int v46 = *((void *)this + 3);
        unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v47;
        *((void *)this + 3) = v46;
      }
      unint64_t v29 = 0;
      *((void *)this + 1) = v43 + 24;
      *(_WORD *)(v43 + 16) = 45;
      *(unsigned char *)(v43 + 18) = 0;
      if (v30 && v43)
      {
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v43, (swift::Demangle::Node *)v30, this);
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v43, v42, this);
        unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v29;
        if (!v29 || v29 + 24 > *((void *)this + 2))
        {
          unint64_t v39 = 2 * *((void *)this + 4);
          if (v39 <= 0x20) {
            unint64_t v39 = 32;
          }
          *((void *)this + 4) = v39;
          unint64_t v40 = v39 + 8;
          int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
          *int v41 = *((void *)this + 3);
          unint64_t v29 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v41 + v40;
          *((void *)this + 3) = v41;
        }
        *((void *)this + 1) = v29 + 24;
        *(_WORD *)(v29 + 16) = 232;
        *(unsigned char *)(v29 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v29, (swift::Demangle::Node *)v43, this);
      }
      unint64_t v30 = v29;
      v37 -= 8;
      if (!v37) {
        return v29;
      }
    }
    return v30;
  }
  int v35 = *((_DWORD *)this + 24);
  if (v35 && (v36 = v35 - 1, unint64_t v30 = *(void *)(*((void *)this + 11) + 8 * v36), *(_WORD *)(v30 + 16) == 232))
  {
    *((_DWORD *)this + 24) = v36;
    if (v12) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v30 = 0;
    if (v12) {
      goto LABEL_47;
    }
  }
  return v30;
}

unint64_t swift::Demangle::Demangler::popAssocTypeName(swift::Demangle::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  uint64_t v4 = *((void *)this + 11);
  BOOL v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
  int v6 = v5[8];
  if (v6 == 181)
  {
LABEL_16:
    *((_DWORD *)this + 24) = v3;
    int v1 = v3;
    if (!v3) {
      return 0;
    }
    goto LABEL_19;
  }
  if (v6 != 232)
  {
LABEL_15:
    int v3 = v1 - 1;
    BOOL v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
    if (v5[8] != 347)
    {
      BOOL v5 = 0;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *((_DWORD *)this + 24) = v3;
  unint64_t v7 = v5;
  while ((unsigned __int16)v6 == 232)
  {
    if (*((unsigned __int8 *)v7 + 18) - 1 >= 2) {
      unint64_t v7 = *(unsigned __int16 **)v7;
    }
    unint64_t v7 = *(unsigned __int16 **)v7;
    LOWORD(v6) = v7[8];
  }
  if ((unsigned __int16)v6 - 180 >= 2 && (unsigned __int16)v6 != 347) {
    return 0;
  }
  if (!v5)
  {
    int v1 = v3;
    if (!v3) {
      return 0;
    }
    goto LABEL_15;
  }
  int v1 = v3;
  if (!v3) {
    return 0;
  }
LABEL_19:
  unint64_t v8 = *(swift::Demangle::Node **)(v4 + 8 * (v1 - 1));
  if (*((_WORD *)v8 + 8) != 101) {
    return 0;
  }
  *((_DWORD *)this + 24) = v1 - 1;
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    unsigned int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    int v13 = (char *)v12 + v11;
    *unsigned int v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 35;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, v8, this);
  if (v5 && v9) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, (swift::Demangle::Node *)v5, this);
  }
  return v9;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleGenericSpecialization(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  int v3 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleSpecAttributes(a1, a2);
  if (!v3) {
    return v3;
  }
  unint64_t v4 = swift::Demangle::Demangler::popTypeList(a1);
  if (!v4) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(v4 + 18);
  int v6 = (swift::Demangle::Node **)v4;
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5)
    {
      unint64_t v7 = *(swift::Demangle::Node ***)v4;
      int v6 = *(swift::Demangle::Node ***)v4;
LABEL_12:
      unint64_t v8 = &v7[*(unsigned int *)(v4 + 8)];
      if (v6 == v8) {
        return v3;
      }
      goto LABEL_22;
    }
    int v6 = 0;
  }
  switch(v5)
  {
    case 1:
      unint64_t v8 = (swift::Demangle::Node **)(v4 + 8);
      if (v6 == (swift::Demangle::Node **)(v4 + 8)) {
        return v3;
      }
      break;
    case 2:
      unint64_t v8 = (swift::Demangle::Node **)(v4 + 16);
      if (v6 == (swift::Demangle::Node **)(v4 + 16)) {
        return v3;
      }
      break;
    case 5:
      unint64_t v7 = *(swift::Demangle::Node ***)v4;
      goto LABEL_12;
    default:
      unint64_t v8 = 0;
      if (!v6) {
        return v3;
      }
      goto LABEL_22;
  }
  do
  {
LABEL_22:
    unint64_t v10 = *v6;
    if (*v6)
    {
      unint64_t v9 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v9;
      if (!v9 || v9 + 24 > *((void *)a1 + 2))
      {
        unint64_t v11 = 2 * *((void *)a1 + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)a1 + 4) = v11;
        unint64_t v12 = v11 + 8;
        int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        unsigned int v14 = (char *)v13 + v12;
        *int v13 = *((void *)a1 + 3);
        unint64_t v9 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = v14;
        *((void *)a1 + 3) = v13;
      }
      *((void *)a1 + 1) = v9 + 24;
      *(_WORD *)(v9 + 16) = 94;
      *(unsigned char *)(v9 + 18) = 0;
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v9, v10, a1);
    }
    else
    {
      unint64_t v9 = 0;
    }
    swift::Demangle::Node::addChild(v3, (swift::Demangle::Node *)v9, a1);
    ++v6;
  }
  while (v6 != v8);
  return v3;
}

unint64_t swift::Demangle::Demangler::demangleSpecAttributes(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  unint64_t v5 = *((void *)a1 + 8);
  unint64_t v4 = *((void *)a1 + 9);
  if (v4 < v5 && *(unsigned char *)(*((void *)a1 + 7) + v4) == 109)
  {
    *((void *)a1 + 9) = ++v4;
    int v6 = 1;
    if (v4 >= v5) {
      goto LABEL_9;
    }
  }
  else
  {
    int v6 = 0;
    if (v4 >= v5) {
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(*((void *)a1 + 7) + v4) == 113)
  {
    *((void *)a1 + 9) = ++v4;
    int v7 = 1;
    if (v4 >= v5) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_9:
  int v7 = 0;
  if (v4 >= v5) {
    goto LABEL_13;
  }
LABEL_10:
  if (*(unsigned char *)(*((void *)a1 + 7) + v4) != 97)
  {
LABEL_13:
    int v8 = 0;
    if (v4 < v5) {
      goto LABEL_14;
    }
    return 0;
  }
  *((void *)a1 + 9) = ++v4;
  int v8 = 1;
  if (v4 >= v5) {
    return 0;
  }
LABEL_14:
  *((void *)a1 + 9) = v4 + 1;
  int v9 = *(char *)(*((void *)a1 + 7) + v4);
  if ((v9 - 58) < 0xF6u) {
    return 0;
  }
  unint64_t v10 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v10;
  if (!v10 || (unint64_t v11 = *((void *)a1 + 2), v10 + 24 > v11))
  {
    unint64_t v12 = 2 * *((void *)a1 + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)a1 + 4) = v12;
    unint64_t v13 = v12 + 8;
    unsigned int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    unint64_t v11 = (unint64_t)v14 + v13;
    *unsigned int v14 = *((void *)a1 + 3);
    unint64_t v10 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v14;
  }
  unint64_t v15 = v10 + 24;
  *(_WORD *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 18) = 0;
  if (!v6)
  {
    if (!v7) {
      goto LABEL_28;
    }
LABEL_31:
    unint64_t v21 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v21;
    if (!v21 || v21 + 24 > *((void *)a1 + 2))
    {
      unint64_t v22 = 2 * *((void *)a1 + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)a1 + 4) = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *unint64_t v24 = *((void *)a1 + 3);
      unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = (char *)v24 + v23;
      *((void *)a1 + 3) = v24;
    }
    *((void *)a1 + 1) = v21 + 24;
    *(_WORD *)(v21 + 16) = 217;
    *(unsigned char *)(v21 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, (swift::Demangle::Node *)v21, a1);
    unint64_t v15 = *((void *)a1 + 1);
    unsigned int v20 = v9 - 48;
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  unint64_t v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v16;
  if (!v16 || v16 + 24 > v11)
  {
    unint64_t v17 = 2 * *((void *)a1 + 4);
    if (v17 <= 0x20) {
      unint64_t v17 = 32;
    }
    *((void *)a1 + 4) = v17;
    unint64_t v18 = v17 + 8;
    __int16 v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
    *__int16 v19 = *((void *)a1 + 3);
    unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v19 + v18;
    *((void *)a1 + 3) = v19;
  }
  *((void *)a1 + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = 339;
  *(unsigned char *)(v16 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, (swift::Demangle::Node *)v16, a1);
  unint64_t v15 = *((void *)a1 + 1);
  if (v7) {
    goto LABEL_31;
  }
LABEL_28:
  unsigned int v20 = v9 - 48;
  if (v8)
  {
LABEL_37:
    unint64_t v25 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)a1 + 2))
    {
      unint64_t v26 = 2 * *((void *)a1 + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)a1 + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *int v28 = *((void *)a1 + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = (char *)v28 + v27;
      *((void *)a1 + 3) = v28;
    }
    *((void *)a1 + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 346;
    *(unsigned char *)(v25 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, (swift::Demangle::Node *)v25, a1);
    unint64_t v15 = *((void *)a1 + 1);
  }
LABEL_43:
  unint64_t v29 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v29;
  if (!v29 || v29 + 24 > *((void *)a1 + 2))
  {
    unint64_t v30 = 2 * *((void *)a1 + 4);
    if (v30 <= 0x20) {
      unint64_t v30 = 32;
    }
    *((void *)a1 + 4) = v30;
    unint64_t v31 = v30 + 8;
    unint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
    *unint64_t v32 = *((void *)a1 + 3);
    unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v32 + v31;
    *((void *)a1 + 3) = v32;
  }
  *((void *)a1 + 1) = v29 + 24;
  *(_WORD *)(v29 + 16) = 216;
  *(unsigned char *)(v29 + 18) = 4;
  *(void *)unint64_t v29 = v20;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v10, (swift::Demangle::Node *)v29, a1);
  return v10;
}

uint64_t swift::Demangle::Demangler::demangleFunctionSpecialization(swift::Demangle::Demangler *this)
{
  unint64_t v2 = swift::Demangle::Demangler::demangleSpecAttributes(this, 77);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = *((void *)this + 9);
      if (v3 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v3) == 95) {
        break;
      }
      unint64_t v4 = swift::Demangle::Demangler::demangleFuncSpecParam(this, 78);
      if (!v4)
      {
        unint64_t v2 = 0;
        goto LABEL_8;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v4, this);
    }
    *((void *)this + 9) = v3 + 1;
  }
LABEL_8:
  unint64_t v5 = *((void *)this + 9);
  if (v5 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v5) == 110)
  {
    *((void *)this + 9) = v5 + 1;
    if (!v2) {
      return 0;
    }
  }
  else
  {
    int v7 = swift::Demangle::Demangler::demangleFuncSpecParam(this, 79);
    uint64_t result = 0;
    if (!v2 || !v7) {
      return result;
    }
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v7, this);
  }
  uint64_t v8 = *(unsigned __int8 *)(v2 + 18);
  if (v8 == 1) {
    goto LABEL_20;
  }
  if (v8 == 5)
  {
    uint64_t v8 = *(unsigned int *)(v2 + 8);
    if (v8) {
      goto LABEL_20;
    }
    return v2;
  }
  if (v8 != 2) {
    return v2;
  }
  uint64_t v8 = 2;
LABEL_20:
  uint64_t v9 = 0;
  while (1)
  {
    unint64_t v10 = *(unsigned __int8 *)(v2 + 18);
    unsigned int v11 = v10 - 1;
    if (v10 != 1)
    {
      if (v10 == 5)
      {
        unint64_t v10 = *(unsigned int *)(v2 + 8);
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_31;
        }
        unint64_t v10 = 2;
      }
    }
    unint64_t v12 = v8 + ~v9;
    if (v10 <= v12)
    {
LABEL_31:
      uint64_t v14 = 0;
      goto LABEL_32;
    }
    unint64_t v13 = v2;
    if (v11 >= 2) {
      unint64_t v13 = *(void *)v2;
    }
    uint64_t v14 = *(void *)(v13 + 8 * v12);
LABEL_32:
    if (*(_WORD *)(v14 + 16) != 78) {
      goto LABEL_21;
    }
    uint64_t v15 = *(unsigned __int8 *)(v14 + 18);
    unint64_t v16 = (unsigned int **)v14;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*(_DWORD *)(v14 + 8)) {
        goto LABEL_21;
      }
      unint64_t v16 = *(unsigned int ***)v14;
    }
    unsigned int v17 = **v16;
    if (v17 > 9 || ((1 << v17) & 0x233) == 0) {
      goto LABEL_21;
    }
    if (v15 == 1) {
      goto LABEL_47;
    }
    if (v15 == 5) {
      break;
    }
    if (v15 == 2)
    {
      uint64_t v15 = 2;
      int v19 = *((_DWORD *)this + 24);
      if (v19) {
        goto LABEL_52;
      }
      return 0;
    }
    uint64_t v15 = 0;
    int v19 = *((_DWORD *)this + 24);
    if (!v19) {
      return 0;
    }
LABEL_52:
    while (1)
    {
      unsigned int v20 = v19 - 1;
      uint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v20);
      int v22 = *(unsigned __int16 *)(v21 + 16);
      if (v22 != 232) {
        break;
      }
      *((_DWORD *)this + 24) = v20;
      if (v17 == 9 || v17 == 5)
      {
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, (swift::Demangle::Node *)v21, this);
        int v19 = *((_DWORD *)this + 24);
        if (v19) {
          continue;
        }
      }
      return 0;
    }
    if (v22 != 101) {
      return 0;
    }
    *((_DWORD *)this + 24) = v20;
    unint64_t v24 = *(unsigned char **)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    if (v17 == 4 && v23 && *v24 == 95)
    {
      --v23;
      ++v24;
    }
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *int v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 81;
    *(unsigned char *)(v25 + 18) = 3;
    *(void *)unint64_t v25 = v24;
    *(void *)(v25 + 8) = v23;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v14, (swift::Demangle::Node *)v25, this);
    int v29 = *(unsigned __int8 *)(v14 + 18);
    if (v29 == 5)
    {
      uint64_t v30 = *(unsigned int *)(v14 + 8);
      if (v15 != v30)
      {
        unint64_t v31 = (void *)(*(void *)v14 + 8 * v30 - 8);
        if ((unint64_t)v31 > *(void *)v14 + 8 * v15)
        {
          unint64_t v32 = *(void *)v14 + 8 * v15 + 8;
          do
          {
            uint64_t v33 = *(void *)(v32 - 8);
            *(void *)(v32 - 8) = *v31;
            *v31-- = v33;
            BOOL v34 = v32 >= (unint64_t)v31;
            v32 += 8;
          }
          while (!v34);
        }
      }
    }
    else if (v29 == 2 && !v15)
    {
      *(int8x16_t *)uint64_t v14 = vextq_s8(*(int8x16_t *)v14, *(int8x16_t *)v14, 8uLL);
    }
LABEL_21:
    if (++v9 == v8) {
      return v2;
    }
  }
  uint64_t v15 = *(unsigned int *)(v14 + 8);
LABEL_47:
  int v19 = *((_DWORD *)this + 24);
  if (v19) {
    goto LABEL_52;
  }
  return 0;
}

void std::vector<swift::Demangle::Node *>::push_back[abi:nn180100](void **a1, void *a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  int v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      int v19 = &v14[8 * v10 - 16];
      unsigned int v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *int v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
      int v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *a2;
    int v7 = v5 + 8;
  }
  a1[1] = v7;
}

double swift::Demangle::Demangler::demangleBridgedMethodParams@<D0>(swift::Demangle::Demangler *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= *((void *)this + 8)) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(*((void *)this + 7) + v3) == 95)
  {
    *((void *)this + 9) = v3 + 1;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  memset(&v12, 0, sizeof(v12));
  *((void *)this + 9) = v3 + 1;
  int v5 = *(char *)(*((void *)this + 7) + v3);
  if ((v5 - 97) > 0xF || ((1 << (v5 - 97)) & 0xD001) == 0)
  {
LABEL_22:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  std::string::push_back(&v12, v5);
  do
  {
    unint64_t v8 = *((void *)this + 9);
    if (v8 >= *((void *)this + 8))
    {
      int v10 = 0;
LABEL_17:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      continue;
    }
    int v9 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    *((void *)this + 9) = v8 + 1;
    if (v9 == 95)
    {
      double result = *(double *)&v12.__r_.__value_.__l.__data_;
      *a2 = v12;
      return result;
    }
    int v10 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    if ((v10 - 98) > 0xC || ((1 << (v10 - 98)) & 0x1021) == 0) {
      goto LABEL_17;
    }
    std::string::push_back(&v12, v10);
  }
  while ((v10 - 98) <= 0xC && ((1 << (v10 - 98)) & 0x1021) != 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return result;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleAutoDiffSubsetParametersThunk(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 323;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7)
  {
    do
    {
      unsigned int v8 = v7 - 1;
      int v9 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v8);
      *((_DWORD *)this + 24) = v8;
      if (!v9) {
        break;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v9, this);
      int v7 = *((_DWORD *)this + 24);
    }
    while (v7);
    int v10 = *(unsigned __int8 *)(v2 + 18);
    if (v10 == 5)
    {
      unint64_t v11 = *(void *)v2;
      uint64_t v12 = *(unsigned int *)(v2 + 8);
      unint64_t v13 = (void *)(*(void *)v2 + 8 * v12 - 8);
      if (v12) {
        BOOL v14 = (unint64_t)v13 > v11;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        unint64_t v15 = v11 + 8;
        do
        {
          uint64_t v16 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = *v13;
          *v13-- = v16;
          BOOL v17 = v15 >= (unint64_t)v13;
          v15 += 8;
        }
        while (!v17);
      }
    }
    else if (v10 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v18 = *((void *)this + 9);
  if (v18 >= *((void *)this + 8))
  {
    int v19 = 0;
  }
  else
  {
    *((void *)this + 9) = v18 + 1;
    int v19 = *(unsigned __int8 *)(*((void *)this + 7) + v18);
  }
  HIDWORD(v20) = v19;
  LODWORD(v20) = (v19 << 24) - 1677721600;
  unsigned int v21 = (v20 >> 25);
  BOOL v14 = v21 > 7;
  int v22 = (1 << v21) & 0xC3;
  if (v14 || v22 == 0)
  {
    unint64_t v2 = 0;
  }
  else
  {
    uint64_t v24 = (char)v19;
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *int v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 321;
    *(unsigned char *)(v25 + 18) = 4;
    *(void *)unint64_t v25 = v24;
    if (v2) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v25, this);
    }
  }
  int v29 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  uint64_t v30 = 0;
  if (v2 && v29)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v29, this);
    uint64_t v30 = (swift::Demangle::Node *)v2;
  }
  unint64_t v31 = *((void *)this + 9);
  if (v31 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v31) != 112) {
    return 0;
  }
  *((void *)this + 9) = v31 + 1;
  unint64_t v32 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  uint64_t v33 = 0;
  if (v30 && v32)
  {
    swift::Demangle::Node::addChild(v30, v32, this);
    uint64_t v33 = v30;
  }
  unint64_t v34 = *((void *)this + 9);
  if (v34 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v34) != 114) {
    return 0;
  }
  *((void *)this + 9) = v34 + 1;
  int v35 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  double result = 0;
  if (v33 && v35)
  {
    swift::Demangle::Node::addChild(v33, v35, this);
    double result = v33;
  }
  unint64_t v37 = *((void *)this + 9);
  if (v37 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v37) != 80) {
    return 0;
  }
  *((void *)this + 9) = v37 + 1;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 322;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (!v7) {
    goto LABEL_18;
  }
  unsigned int v8 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v7 - 1));
  if (*((_WORD *)v8 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7 - 1;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v8, this);
    int v7 = *((_DWORD *)this + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  int v9 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v7 - 1));
  if (*((_WORD *)v9 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v7 - 1;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v9, this);
    int v7 = *((_DWORD *)this + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  unsigned int v10 = v7 - 1;
  unint64_t v11 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v10);
  if (*((_WORD *)v11 + 8) != 232)
  {
LABEL_18:
    unint64_t v2 = 0;
    goto LABEL_19;
  }
  *((_DWORD *)this + 24) = v10;
  if (v2)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v11, this);
    int v12 = *(unsigned __int8 *)(v2 + 18);
    if (v12 == 5)
    {
      uint64_t v26 = *(unsigned int *)(v2 + 8);
      if (v26)
      {
        unint64_t v27 = (void *)(*(void *)v2 + 8 * v26 - 8);
        if ((unint64_t)v27 > *(void *)v2)
        {
          unint64_t v28 = *(void *)v2 + 8;
          do
          {
            uint64_t v29 = *(void *)(v28 - 8);
            *(void *)(v28 - 8) = *v27;
            *v27-- = v29;
            BOOL v30 = v28 >= (unint64_t)v27;
            v28 += 8;
          }
          while (!v30);
        }
      }
    }
    else if (v12 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
LABEL_19:
  unint64_t v13 = *((void *)this + 9);
  if (v13 >= *((void *)this + 8))
  {
    int v14 = 0;
  }
  else
  {
    *((void *)this + 9) = v13 + 1;
    int v14 = *(unsigned __int8 *)(*((void *)this + 7) + v13);
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = (v14 << 24) - 1677721600;
  unsigned int v16 = (v15 >> 25);
  BOOL v17 = v16 > 7;
  int v18 = (1 << v16) & 0xC3;
  if (v17 || v18 == 0) {
    return 0;
  }
  uint64_t v20 = (char)v14;
  unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v21;
  if (!v21 || v21 + 24 > *((void *)this + 2))
  {
    unint64_t v22 = 2 * *((void *)this + 4);
    if (v22 <= 0x20) {
      unint64_t v22 = 32;
    }
    *((void *)this + 4) = v22;
    unint64_t v23 = v22 + 8;
    uint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    *uint64_t v24 = *((void *)this + 3);
    unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v24 + v23;
    *((void *)this + 3) = v24;
  }
  *((void *)this + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = 321;
  *(unsigned char *)(v21 + 18) = 4;
  *(void *)unint64_t v21 = v20;
  if (v2) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v21, this);
  }
  return v2;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleAutoDiffFunctionOrSimpleThunk(swift::Demangle::Demangler *this, __int16 a2)
{
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned int v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 18) = 0;
  int v9 = *((_DWORD *)this + 24);
  if (v9)
  {
    do
    {
      unsigned int v10 = v9 - 1;
      unint64_t v11 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v10);
      *((_DWORD *)this + 24) = v10;
      if (!v11) {
        break;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v11, this);
      int v9 = *((_DWORD *)this + 24);
    }
    while (v9);
    int v12 = *(unsigned __int8 *)(v4 + 18);
    if (v12 == 5)
    {
      unint64_t v13 = *(void *)v4;
      uint64_t v14 = *(unsigned int *)(v4 + 8);
      unint64_t v15 = (void *)(*(void *)v4 + 8 * v14 - 8);
      if (v14) {
        BOOL v16 = (unint64_t)v15 > v13;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        unint64_t v17 = v13 + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v15;
          *v15-- = v18;
          BOOL v19 = v17 >= (unint64_t)v15;
          v17 += 8;
        }
        while (!v19);
      }
    }
    else if (v12 == 2)
    {
      *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
    }
  }
  unint64_t v20 = *((void *)this + 9);
  if (v20 >= *((void *)this + 8))
  {
    int v21 = 0;
  }
  else
  {
    *((void *)this + 9) = v20 + 1;
    int v21 = *(unsigned __int8 *)(*((void *)this + 7) + v20);
  }
  HIDWORD(v22) = v21;
  LODWORD(v22) = (v21 << 24) - 1677721600;
  unsigned int v23 = (v22 >> 25);
  BOOL v16 = v23 > 7;
  int v24 = (1 << v23) & 0xC3;
  if (v16 || v24 == 0)
  {
    unint64_t v4 = 0;
  }
  else
  {
    uint64_t v26 = (char)v21;
    unint64_t v27 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v27;
    if (!v27 || v27 + 24 > *((void *)this + 2))
    {
      unint64_t v28 = 2 * *((void *)this + 4);
      if (v28 <= 0x20) {
        unint64_t v28 = 32;
      }
      *((void *)this + 4) = v28;
      unint64_t v29 = v28 + 8;
      BOOL v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      *BOOL v30 = *((void *)this + 3);
      unint64_t v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v30 + v29;
      *((void *)this + 3) = v30;
    }
    *((void *)this + 1) = v27 + 24;
    *(_WORD *)(v27 + 16) = 321;
    *(unsigned char *)(v27 + 18) = 4;
    *(void *)unint64_t v27 = v26;
    if (v4) {
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v27, this);
    }
  }
  unint64_t v31 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  unint64_t v32 = 0;
  if (v4 && v31)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, v31, this);
    unint64_t v32 = (swift::Demangle::Node *)v4;
  }
  unint64_t v33 = *((void *)this + 9);
  if (v33 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v33) != 112) {
    return 0;
  }
  *((void *)this + 9) = v33 + 1;
  unint64_t v34 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  double result = 0;
  if (v32 && v34)
  {
    swift::Demangle::Node::addChild(v32, v34, this);
    double result = v32;
  }
  unint64_t v36 = *((void *)this + 9);
  if (v36 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v36) != 114) {
    return 0;
  }
  *((void *)this + 9) = v36 + 1;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleAutoDiffFunctionKind(swift::Demangle::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    int v3 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    int v3 = *(unsigned __int8 *)(*((void *)this + 7) + v2);
  }
  HIDWORD(v4) = v3;
  LODWORD(v4) = (v3 << 24) - 1677721600;
  unsigned int v5 = (v4 >> 25);
  BOOL v6 = v5 > 7;
  int v7 = (1 << v5) & 0xC3;
  if (v6 || v7 == 0) {
    return 0;
  }
  uint64_t v9 = (char)v3;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v11 = 2 * *((void *)this + 4);
    if (v11 <= 0x20) {
      unint64_t v11 = 32;
    }
    *((void *)this + 4) = v11;
    unint64_t v12 = v11 + 8;
    unint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *unint64_t v13 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v13 + v12;
    *((void *)this + 3) = v13;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 321;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = v9;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleIndexSubset(swift::Demangle::Demangler *this)
{
  memset(&v10, 0, sizeof(v10));
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    std::string::value_type v3 = 0;
  }
  else {
    std::string::value_type v3 = *(unsigned char *)(*((void *)this + 7) + v2);
  }
  while (v3 == 83 || v3 == 85)
  {
    std::string::push_back(&v10, v3);
    unint64_t v5 = *((void *)this + 8);
    unint64_t v4 = *((void *)this + 9);
    if (v4 < v5) {
      *((void *)this + 9) = ++v4;
    }
    std::string::value_type v3 = 0;
    if (v4 < v5) {
      std::string::value_type v3 = *(unsigned char *)(*((void *)this + 7) + v4);
    }
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v10.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    unint64_t Node = 0;
    if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) == 0) {
      return Node;
    }
    goto LABEL_18;
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v10;
  }
  else {
    int v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  unint64_t Node = swift::Demangle::NodeFactory::createNode(this, 327, v7, size);
  if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_18:
  }
    operator delete(v10.__r_.__value_.__l.__data_);
  return Node;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleDifferentiabilityWitness(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v5 + v4;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 325;
  *(unsigned char *)(v2 + 18) = 0;
  int v6 = *((_DWORD *)this + 24);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v6 - 1));
    if (*((_WORD *)v8 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v7;
      if (v6 == 1) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v8 = 0;
      int v7 = *((_DWORD *)this + 24);
    }
    do
    {
      unsigned int v9 = v7 - 1;
      std::string v10 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v9);
      *((_DWORD *)this + 24) = v9;
      if (!v10) {
        break;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v10, this);
      int v7 = *((_DWORD *)this + 24);
    }
    while (v7);
    int v11 = *(unsigned __int8 *)(v2 + 18);
    if (v11 == 5)
    {
      unint64_t v12 = *(void *)v2;
      uint64_t v13 = *(unsigned int *)(v2 + 8);
      uint64_t v14 = (void *)(*(void *)v2 + 8 * v13 - 8);
      if (v13) {
        BOOL v15 = (unint64_t)v14 > v12;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        unint64_t v16 = v12 + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 8);
          *(void *)(v16 - 8) = *v14;
          *v14-- = v17;
          BOOL v18 = v16 >= (unint64_t)v14;
          v16 += 8;
        }
        while (!v18);
      }
    }
    else if (v11 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_25:
  unint64_t v19 = *((void *)this + 9);
  if (v19 >= *((void *)this + 8))
  {
    int v20 = 0;
  }
  else
  {
    *((void *)this + 9) = v19 + 1;
    int v20 = *(char *)(*((void *)this + 7) + v19);
  }
  HIDWORD(v22) = v20;
  LODWORD(v22) = v20 - 100;
  unsigned int v21 = v22 >> 1;
  if (v21 > 7 || ((0x93u >> v21) & 1) == 0) {
    return 0;
  }
  uint64_t v23 = qword_21527B720[v21];
  unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v24;
  if (!v24 || v24 + 24 > *((void *)this + 2))
  {
    unint64_t v25 = 2 * *((void *)this + 4);
    if (v25 <= 0x20) {
      unint64_t v25 = 32;
    }
    *((void *)this + 4) = v25;
    unint64_t v26 = v25 + 8;
    unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
    *unint64_t v27 = *((void *)this + 3);
    unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v27 + v26;
    *((void *)this + 3) = v27;
  }
  *((void *)this + 1) = v24 + 24;
  *(_WORD *)(v24 + 16) = 102;
  *(unsigned char *)(v24 + 18) = 4;
  *(void *)unint64_t v24 = v23;
  if (v2) {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v24, this);
  }
  unint64_t v28 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  unint64_t v29 = 0;
  if (v2 && v28)
  {
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v28, this);
    unint64_t v29 = (swift::Demangle::Node *)v2;
  }
  unint64_t v30 = *((void *)this + 9);
  if (v30 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v30) != 112) {
    return 0;
  }
  *((void *)this + 9) = v30 + 1;
  unint64_t v31 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  unint64_t v32 = 0;
  if (v29 && v31)
  {
    swift::Demangle::Node::addChild(v29, v31, this);
    unint64_t v32 = v29;
  }
  unint64_t v33 = *((void *)this + 9);
  if (v33 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v33) != 114) {
    return 0;
  }
  *((void *)this + 9) = v33 + 1;
  if (v8 && v32) {
    swift::Demangle::Node::addChild(v32, v8, this);
  }
  return v32;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleFuncSpecParam(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  unint64_t v4 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v4;
  if (!v4 || (unint64_t v5 = *((void *)a1 + 2), v4 + 24 > v5))
  {
    unint64_t v6 = 2 * *((void *)a1 + 4);
    if (v6 <= 0x20) {
      unint64_t v6 = 32;
    }
    *((void *)a1 + 4) = v6;
    unint64_t v7 = v6 + 8;
    unsigned int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    unint64_t v5 = (unint64_t)v8 + v7;
    void *v8 = *((void *)a1 + 3);
    unint64_t v4 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v5;
    *((void *)a1 + 3) = v8;
  }
  *((void *)a1 + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 18) = 0;
  unint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *((void *)a1 + 9);
  if (v10 >= v9) {
    return 0;
  }
  unint64_t v11 = v10 + 1;
  *((void *)a1 + 9) = v10 + 1;
  uint64_t v12 = *((void *)a1 + 7);
  unint64_t result = (swift::Demangle::Node *)v4;
  switch(*(unsigned char *)(v12 + v10))
  {
    case 'c':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v15 = v14 + 24 > v5;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        unint64_t v16 = 2 * *((void *)a1 + 4);
        if (v16 <= 0x20) {
          unint64_t v16 = 32;
        }
        *((void *)a1 + 4) = v16;
        unint64_t v17 = v16 + 8;
        BOOL v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
        *BOOL v18 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v18 + v17;
        *((void *)a1 + 3) = v18;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 5;
      break;
    case 'd':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 71)
      {
        unint64_t v11 = v10 + 2;
        *((void *)a1 + 9) = v10 + 2;
        unsigned int v19 = 192;
      }
      else
      {
        unsigned int v19 = 64;
      }
      goto LABEL_74;
    case 'e':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 68)
      {
        unint64_t v11 = v10 + 2;
        *((void *)a1 + 9) = v10 + 2;
        unsigned int v19 = 1088;
      }
      else
      {
        unsigned int v19 = 1024;
      }
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 71)
      {
        *((void *)a1 + 9) = ++v11;
        v19 |= 0x80u;
      }
LABEL_74:
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 79)
      {
        *((void *)a1 + 9) = ++v11;
        v19 |= 0x200u;
      }
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v11 + 1;
        v19 |= 0x100u;
      }
      uint64_t v20 = v19;
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (!v14 || v14 + 24 > v5) {
        goto LABEL_89;
      }
      goto LABEL_92;
    case 'g':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v10 + 2;
        uint64_t v20 = 384;
      }
      else
      {
        uint64_t v20 = 128;
      }
      goto LABEL_84;
    case 'i':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v21 = v14 + 24 > v5;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        unint64_t v22 = 2 * *((void *)a1 + 4);
        if (v22 <= 0x20) {
          unint64_t v22 = 32;
        }
        *((void *)a1 + 4) = v22;
        unint64_t v23 = v22 + 8;
        unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
        *unint64_t v24 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v24 + v23;
        *((void *)a1 + 3) = v24;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 6;
      break;
    case 'n':
      return result;
    case 'o':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v10 + 2;
        uint64_t v20 = 768;
      }
      else
      {
        uint64_t v20 = 512;
      }
LABEL_84:
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v41 = v14 + 24 > v5;
      }
      else {
        BOOL v41 = 1;
      }
      if (v41)
      {
LABEL_89:
        unint64_t v42 = 2 * *((void *)a1 + 4);
        if (v42 <= 0x20) {
          unint64_t v42 = 32;
        }
        *((void *)a1 + 4) = v42;
        unint64_t v43 = v42 + 8;
        unint64_t v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        *unint64_t v44 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v44 + v43;
        *((void *)a1 + 3) = v44;
      }
LABEL_92:
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = v20;
      break;
    case 'p':
      if (v11 >= v9) {
        return 0;
      }
      unint64_t result = 0;
      unint64_t v29 = v10 + 2;
      *((void *)a1 + 9) = v10 + 2;
      switch(*(unsigned char *)(v12 + v11))
      {
        case 'd':
          unint64_t v30 = a1;
          unint64_t v31 = (swift::Demangle::Node *)v4;
          unsigned int v32 = 3;
          goto LABEL_104;
        case 'f':
          unint64_t v45 = a1;
          uint64_t v46 = 0;
          goto LABEL_108;
        case 'g':
          unint64_t v45 = a1;
          uint64_t v46 = 1;
          goto LABEL_108;
        case 'i':
          unint64_t v30 = a1;
          unint64_t v31 = (swift::Demangle::Node *)v4;
          unsigned int v32 = 2;
LABEL_104:
          return swift::Demangle::Demangler::addFuncSpecParamNumber(v30, v31, v32);
        case 'k':
          unint64_t v45 = a1;
          uint64_t v46 = 9;
LABEL_108:
          unint64_t result = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v45, 80, v46);
          if (result) {
            goto LABEL_109;
          }
          return result;
        case 's':
          if (v29 >= v9) {
            return 0;
          }
          *((void *)a1 + 9) = v10 + 3;
          int v47 = *(char *)(v12 + v29);
          switch(v47)
          {
            case 'b':
              int v48 = "u8";
              break;
            case 'c':
              int v48 = "objc";
              break;
            case 'w':
              int v48 = "u16";
              break;
            default:
              return 0;
          }
          unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a1, 80, 4);
          if (Node) {
            swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, Node, a1);
          }
          unint64_t result = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a1, 81, v48);
          if (!result) {
            return result;
          }
LABEL_109:
          unint64_t v14 = (unint64_t)result;
          break;
        default:
          return result;
      }
      break;
    case 'r':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v33 = v14 + 24 > v5;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33)
      {
        unint64_t v34 = 2 * *((void *)a1 + 4);
        if (v34 <= 0x20) {
          unint64_t v34 = 32;
        }
        *((void *)a1 + 4) = v34;
        unint64_t v35 = v34 + 8;
        unint64_t v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
        *unint64_t v36 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v36 + v35;
        *((void *)a1 + 3) = v36;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 8;
      break;
    case 's':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v37 = v14 + 24 > v5;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37)
      {
        unint64_t v38 = 2 * *((void *)a1 + 4);
        if (v38 <= 0x20) {
          unint64_t v38 = 32;
        }
        *((void *)a1 + 4) = v38;
        unint64_t v39 = v38 + 8;
        unint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *unint64_t v40 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v40 + v39;
        *((void *)a1 + 3) = v40;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 7;
      break;
    case 'x':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v25 = v14 + 24 > v5;
      }
      else {
        BOOL v25 = 1;
      }
      if (v25)
      {
        unint64_t v26 = 2 * *((void *)a1 + 4);
        if (v26 <= 0x20) {
          unint64_t v26 = 32;
        }
        *((void *)a1 + 4) = v26;
        unint64_t v27 = v26 + 8;
        unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        *unint64_t v28 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v28 + v27;
        *((void *)a1 + 3) = v28;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 256;
      break;
    default:
      return 0;
  }
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v4, (swift::Demangle::Node *)v14, a1);
  return (swift::Demangle::Node *)v4;
}

swift::Demangle::Node *swift::Demangle::Demangler::addFuncSpecParamNumber(swift::Demangle::NodeFactory *a1, swift::Demangle::Node *a2, unsigned int a3)
{
  uint64_t v5 = a3;
  unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)a1 + 2))
  {
    unint64_t v7 = 2 * *((void *)a1 + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)a1 + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    void *v9 = *((void *)a1 + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v9 + v8;
    *((void *)a1 + 3) = v9;
  }
  *((void *)a1 + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 80;
  *(unsigned char *)(v6 + 18) = 4;
  *(void *)unint64_t v6 = v5;
  swift::Demangle::Node::addChild(a2, (swift::Demangle::Node *)v6, a1);
  unint64_t v10 = *((void *)a1 + 9);
  if (v10 >= *((void *)a1 + 8)) {
    return 0;
  }
  BOOL v33 = a2;
  unint64_t v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  while (1)
  {
    uint64_t v15 = *((void *)a1 + 7);
    if (*(unsigned __int8 *)(v15 + v10) - 48 > 9) {
      break;
    }
    *((void *)a1 + 9) = v10 + 1;
    char v16 = *(unsigned char *)(v15 + v10);
    if (v13 < v12) {
      goto LABEL_10;
    }
    unint64_t v17 = &v11[v12];
    BOOL v18 = (char *)*((void *)a1 + 1);
    if (v17 != v18)
    {
      unint64_t v19 = *((void *)a1 + 2);
LABEL_16:
      if (2 * v12 <= 4) {
        uint64_t v21 = 4;
      }
      else {
        uint64_t v21 = 2 * v12;
      }
      uint64_t v22 = v21 + v12;
      if (!v18 || (unint64_t)&v18[v22] > v19)
      {
        unint64_t v23 = 2 * *((void *)a1 + 4);
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        *((void *)a1 + 4) = v23;
        unint64_t v24 = v23 + 8;
        BOOL v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
        unint64_t v26 = (char *)v25 + v24;
        *BOOL v25 = *((void *)a1 + 3);
        BOOL v18 = (char *)(v25 + 1);
        *((void *)a1 + 2) = v26;
        *((void *)a1 + 3) = v25;
      }
      *((void *)a1 + 1) = &v18[v22];
      if (v12) {
        memcpy(v18, v11, v12);
      }
      unint64_t v11 = v18;
      goto LABEL_9;
    }
    uint64_t v20 = v17 + 1;
    unint64_t v19 = *((void *)a1 + 2);
    if ((unint64_t)v20 > v19) {
      goto LABEL_16;
    }
    *((void *)a1 + 1) = v20;
    LODWORD(v21) = 1;
LABEL_9:
    v12 += v21;
LABEL_10:
    unsigned int v14 = v13 + 1;
    v11[v13] = v16;
    unint64_t v10 = *((void *)a1 + 9);
    ++v13;
    if (v10 >= *((void *)a1 + 8)) {
      goto LABEL_28;
    }
  }
  unsigned int v14 = v13;
LABEL_28:
  if (!v14) {
    return 0;
  }
  unint64_t v27 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v27;
  if (!v27 || v27 + 24 > *((void *)a1 + 2))
  {
    unint64_t v28 = 2 * *((void *)a1 + 4);
    if (v28 <= 0x20) {
      unint64_t v28 = 32;
    }
    *((void *)a1 + 4) = v28;
    unint64_t v29 = v28 + 8;
    unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
    *unint64_t v30 = *((void *)a1 + 3);
    unint64_t v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v30 + v29;
    *((void *)a1 + 3) = v30;
  }
  *((void *)a1 + 1) = v27 + 24;
  *(_WORD *)(v27 + 16) = 81;
  *(unsigned char *)(v27 + 18) = 3;
  *(void *)unint64_t v27 = v11;
  *(void *)(v27 + 8) = v14;
  unint64_t v31 = v33;
  if (v33) {
    swift::Demangle::Node::addChild(v33, (swift::Demangle::Node *)v27, a1);
  }
  return v31;
}

unint64_t swift::Demangle::Demangler::demangleExtendedExistentialShape(swift::Demangle::Demangler *this, int a2)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v2 - 1));
  if (*((_WORD *)v4 + 8) == 232)
  {
    *((_DWORD *)this + 24) = --v2;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v4 = 0;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }
  if (v2)
  {
    unsigned int v5 = v2 - 1;
    unint64_t v6 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v5);
    if (*((_WORD *)v6 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v5;
      if (v4)
      {
        unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v8 = 2 * *((void *)this + 4);
          if (v8 <= 0x20) {
            unint64_t v8 = 32;
          }
          *((void *)this + 4) = v8;
          unint64_t v9 = v8 + 8;
          unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
          unint64_t v11 = (char *)v10 + v9;
          void *v10 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v10;
        }
        *((void *)this + 1) = v7 + 24;
        *(_WORD *)(v7 + 16) = 334;
        *(unsigned char *)(v7 + 18) = 0;
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v6, this);
        goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_15:
  if (!v4) {
    return 0;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    unsigned int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    uint64_t v15 = (char *)v14 + v13;
    *unsigned int v14 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 334;
  *(unsigned char *)(v7 + 18) = 0;
LABEL_22:
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, v4, this);
  return v7;
}

unint64_t swift::Demangle::Demangler::demangleSymbolicExtendedExistentialType(swift::Demangle::Demangler *this)
{
  int v2 = (swift::Demangle::Node *)swift::Demangle::Demangler::popRetroactiveConformances(this);
  unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v3;
  if (!v3 || v3 + 24 > *((void *)this + 2))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    unint64_t v7 = (char *)v6 + v5;
    void *v6 = *((void *)this + 3);
    unint64_t v3 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v6;
  }
  *((void *)this + 1) = v3 + 24;
  *(_WORD *)(v3 + 16) = 235;
  *(unsigned char *)(v3 + 18) = 0;
  int v8 = *((_DWORD *)this + 24);
  if (!v8) {
    return 0;
  }
  do
  {
    unint64_t v9 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * (v8 - 1));
    if (*((_WORD *)v9 + 8) != 232) {
      break;
    }
    *((_DWORD *)this + 24) = v8 - 1;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v3, v9, this);
    int v8 = *((_DWORD *)this + 24);
  }
  while (v8);
  int v10 = *(unsigned __int8 *)(v3 + 18);
  if (v10 == 5)
  {
    unint64_t v11 = *(void *)v3;
    uint64_t v12 = *(unsigned int *)(v3 + 8);
    unint64_t v13 = (void *)(*(void *)v3 + 8 * v12 - 8);
    if (v12) {
      BOOL v14 = (unint64_t)v13 > v11;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      unint64_t v15 = v11 + 8;
      do
      {
        uint64_t v16 = *(void *)(v15 - 8);
        *(void *)(v15 - 8) = *v13;
        *v13-- = v16;
        BOOL v17 = v15 >= (unint64_t)v13;
        v15 += 8;
      }
      while (!v17);
    }
  }
  else if (v10 == 2)
  {
    *(int8x16_t *)unint64_t v3 = vextq_s8(*(int8x16_t *)v3, *(int8x16_t *)v3, 8uLL);
  }
  if (!v8) {
    return 0;
  }
  unsigned int v18 = v8 - 1;
  unint64_t v19 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v18);
  *((_DWORD *)this + 24) = v18;
  if (!v19 || (*((_WORD *)v19 + 8) & 0xFFFE) != 0x150) {
    return 0;
  }
  if (v2)
  {
    unint64_t v20 = swift::Demangle::Demangler::createWithChildren(this, 338, v19, (swift::Demangle::Node *)v3, v2);
    if (!v20) {
      return 0;
    }
  }
  else
  {
    if (!v3) {
      return v3;
    }
    unint64_t v20 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v20;
    if (!v20 || v20 + 24 > *((void *)this + 2))
    {
      unint64_t v22 = 2 * *((void *)this + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)this + 4) = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      BOOL v25 = (char *)v24 + v23;
      *unint64_t v24 = *((void *)this + 3);
      unint64_t v20 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v25;
      *((void *)this + 3) = v24;
    }
    *((void *)this + 1) = v20 + 24;
    *(_WORD *)(v20 + 16) = 338;
    *(unsigned char *)(v20 + 18) = 0;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v20, v19, this);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v20, (swift::Demangle::Node *)v3, this);
  }
  unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v3;
  if (!v3 || v3 + 24 > *((void *)this + 2))
  {
    unint64_t v26 = 2 * *((void *)this + 4);
    if (v26 <= 0x20) {
      unint64_t v26 = 32;
    }
    *((void *)this + 4) = v26;
    unint64_t v27 = v26 + 8;
    unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    unint64_t v29 = (char *)v28 + v27;
    *unint64_t v28 = *((void *)this + 3);
    unint64_t v3 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v29;
    *((void *)this + 3) = v28;
  }
  *((void *)this + 1) = v3 + 24;
  *(_WORD *)(v3 + 16) = 232;
  *(unsigned char *)(v3 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v3, (swift::Demangle::Node *)v20, this);
  return v3;
}

unint64_t swift::Demangle::Demangler::demangleMetatypeRepresentation(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 84)
  {
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v9 = 2 * *((void *)this + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)this + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      *unint64_t v11 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v11 + v10;
      *((void *)this + 3) = v11;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(unsigned char *)(result + 18) = 3;
    *(void *)unint64_t result = "@thick";
    uint64_t v8 = 6;
    goto LABEL_24;
  }
  if (v3 == 111)
  {
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      BOOL v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *BOOL v14 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(unsigned char *)(result + 18) = 3;
    *(void *)unint64_t result = "@objc_metatype";
    uint64_t v8 = 14;
    goto LABEL_24;
  }
  if (v3 != 116) {
    return 0;
  }
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    void *v7 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 146;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = "@thin";
  uint64_t v8 = 5;
LABEL_24:
  *(void *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleConstrainedExistentialRequirementList(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 84;
  *(unsigned char *)(v2 + 18) = 0;
  do
  {
    int v9 = *((_DWORD *)this + 24);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = (v9 - 1);
    uint64_t v11 = *((void *)this + 11);
    int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * v10) + 16);
    if (v12 == 275)
    {
      *((_DWORD *)this + 24) = v10;
      if (v9 == 1) {
        return 0;
      }
      uint64_t v10 = (v9 - 2);
    }
    unint64_t v7 = *(unsigned __int16 **)(v11 + 8 * v10);
    int v8 = v7[8];
    if ((v8 - 39) >= 4 && v8 != 354 && v8 != 36) {
      return 0;
    }
    *((_DWORD *)this + 24) = v10;
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, (swift::Demangle::Node *)v7, this);
  }
  while (v12 != 275);
  int v14 = *(unsigned __int8 *)(v2 + 18);
  if (v14 == 5)
  {
    uint64_t v15 = *(unsigned int *)(v2 + 8);
    if (v15)
    {
      uint64_t v16 = (void *)(*(void *)v2 + 8 * v15 - 8);
      if ((unint64_t)v16 > *(void *)v2)
      {
        unint64_t v17 = *(void *)v2 + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v16;
          *v16-- = v18;
          BOOL v19 = v17 >= (unint64_t)v16;
          v17 += 8;
        }
        while (!v19);
      }
    }
  }
  else if (v14 == 2)
  {
    *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
  }
  return v2;
}

unint64_t swift::Demangle::Demangler::demangleProtocolList(swift::Demangle::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || (unint64_t v3 = *((void *)this + 2), v2 + 24 > v3))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    unint64_t v3 = (unint64_t)v6 + v5;
    void *v6 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v3;
    *((void *)this + 3) = v6;
  }
  *(_WORD *)(v2 + 16) = 235;
  *(unsigned char *)(v2 + 18) = 0;
  unint64_t v7 = (v2 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (v7) {
    BOOL v8 = v7 + 24 > v3;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = 2 * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    int v12 = (char *)v11 + v10;
    *uint64_t v11 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v12;
    *((void *)this + 3) = v11;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 190;
  *(unsigned char *)(v7 + 18) = 0;
  swift::Demangle::Node::addChild((swift::Demangle::Node *)v7, (swift::Demangle::Node *)v2, this);
  int v13 = *((_DWORD *)this + 24);
  if (v13 && (unsigned int v14 = v13 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v14) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v14;
  }
  else
  {
    do
    {
      int v15 = *((_DWORD *)this + 24);
      if (v15 && (unsigned int v16 = v15 - 1, v17 = *(void *)(*((void *)this + 11) + 8 * v16), *(_WORD *)(v17 + 16) == 275)) {
        *((_DWORD *)this + 24) = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this);
      if (!v18) {
        return 0;
      }
      swift::Demangle::Node::addChild((swift::Demangle::Node *)v2, v18, this);
    }
    while (!v17);
    int v19 = *(unsigned __int8 *)(v2 + 18);
    if (v19 == 5)
    {
      uint64_t v21 = *(unsigned int *)(v2 + 8);
      if (v21)
      {
        unint64_t v22 = (void *)(*(void *)v2 + 8 * v21 - 8);
        if ((unint64_t)v22 > *(void *)v2)
        {
          unint64_t v23 = *(void *)v2 + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v7;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleAccessor(swift::Demangle::Demangler *this, swift::Demangle::Node *a2)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v3) {
    return 0;
  }
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  __int16 v8 = 141;
  unint64_t v9 = a2;
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'G':
      __int16 v8 = 100;
      goto LABEL_17;
    case 'M':
      __int16 v8 = 152;
      goto LABEL_17;
    case 'W':
      __int16 v8 = 51;
      goto LABEL_17;
    case 'a':
      if (v5 >= v3) {
        return 0;
      }
      unint64_t v9 = 0;
      *((void *)this + 9) = v2 + 2;
      __int16 v8 = 169;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'O':
          goto LABEL_17;
        case 'P':
          __int16 v8 = 157;
          goto LABEL_17;
        case 'o':
          __int16 v8 = 155;
          goto LABEL_17;
        case 'u':
          __int16 v8 = 251;
          goto LABEL_17;
        default:
          return v9;
      }
      return v9;
    case 'g':
      __int16 v8 = 98;
      goto LABEL_17;
    case 'i':
      __int16 v8 = 126;
      goto LABEL_17;
    case 'l':
      if (v5 >= v3) {
        return 0;
      }
      unint64_t v9 = 0;
      *((void *)this + 9) = v2 + 2;
      __int16 v8 = 168;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'O':
          goto LABEL_17;
        case 'o':
          __int16 v8 = 154;
          goto LABEL_17;
        case 'p':
          __int16 v8 = 156;
          goto LABEL_17;
        case 'u':
          __int16 v8 = 250;
          goto LABEL_17;
        default:
          return v9;
      }
      return v9;
    case 'm':
      goto LABEL_17;
    case 'p':
      return v9;
    case 'r':
      __int16 v8 = 204;
      goto LABEL_17;
    case 's':
      __int16 v8 = 215;
      goto LABEL_17;
    case 'w':
      __int16 v8 = 257;
LABEL_17:
      if (!a2) {
        return 0;
      }
      unint64_t v9 = (swift::Demangle::Node *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)this + 1) = v9;
      if (!v9 || (unint64_t)v9 + 24 > *((void *)this + 2))
      {
        unint64_t v10 = 2 * *((void *)this + 4);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *((void *)this + 4) = v10;
        unint64_t v11 = v10 + 8;
        int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        int v13 = (char *)v12 + v11;
        *int v12 = *((void *)this + 3);
        unint64_t v9 = (swift::Demangle::Node *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((void *)this + 2) = v13;
        *((void *)this + 3) = v12;
      }
      *((void *)this + 1) = (char *)v9 + 24;
      *((_WORD *)v9 + 8) = v8;
      *((unsigned char *)v9 + 18) = 0;
      swift::Demangle::Node::addChild(v9, a2, this);
      break;
    default:
      return 0;
  }
  return v9;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleEntity(swift::Demangle::Demangler *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1, v6 = *(swift::Demangle::Node **)(*((void *)this + 11) + 8 * v5), *((_WORD *)v6 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v6);
  int v8 = *((_DWORD *)this + 24);
  if (!v8
    || ((unsigned int v9 = v8 - 1,
         unint64_t v10 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v9),
         int v11 = v10[8],
         (v11 - 173) <= 0x3C)
      ? (BOOL v12 = ((1 << (v11 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v12 = 1),
        v12
     && ((v11 - 101) <= 0x24
       ? (BOOL v13 = ((1 << (v11 - 101)) & 0x1000800001) == 0)
       : (BOOL v13 = 1),
         v13 && v11 != 347)))
  {
    unint64_t v10 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v9;
  }
  unsigned int v14 = swift::Demangle::Demangler::popContext(this);
  if (v7) {
    int v15 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, a2, v14, (swift::Demangle::Node *)v10, v7, v6);
  }
  else {
    int v15 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, a2, v14, (swift::Demangle::Node *)v10, v6);
  }

  return setParentForOpaqueReturnTypeNodes(this, v15, v6);
}

unint64_t swift::Demangle::Demangler::demangleMacroExpansion(swift::Demangle::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 < v1)
  {
    int v4 = 0;
    unint64_t v5 = v2 + 1;
    *((void *)this + 9) = v2 + 1;
    uint64_t v6 = *((void *)this + 7);
    __int16 v7 = 8;
    int v8 = 1;
    switch(*(unsigned char *)(v6 + v2))
    {
      case 'X':
        if (v5 >= v1) {
          goto LABEL_76;
        }
        int v9 = *(unsigned __int8 *)(v6 + v5);
        if (v9 == 95)
        {
          uint64_t v10 = 0;
          unint64_t v5 = v2 + 2;
          *((void *)this + 9) = v2 + 2;
        }
        else if ((v9 - 48) > 9)
        {
LABEL_76:
          uint64_t v10 = -1000;
        }
        else
        {
          int v30 = 0;
          while (1)
          {
            int v31 = *(unsigned __int8 *)(v6 + v5);
            if ((v31 - 48) > 9) {
              break;
            }
            int v32 = v31 + 10 * v30 - 48;
            if (v32 < v30) {
              goto LABEL_76;
            }
            *((void *)this + 9) = ++v5;
            int v30 = v32;
            if (v1 == v5)
            {
              uint64_t v10 = -1000;
LABEL_85:
              uint64_t v34 = -1000;
              goto LABEL_86;
            }
          }
          uint64_t v10 = -1000;
          if ((v30 & 0x80000000) == 0 && v5 < v1 && v31 == 95)
          {
            *((void *)this + 9) = ++v5;
            uint64_t v10 = (v30 + 1);
          }
        }
        if (v5 >= v1) {
          goto LABEL_85;
        }
        int v33 = *(unsigned __int8 *)(v6 + v5);
        if (v33 == 95)
        {
          uint64_t v34 = 0;
          *((void *)this + 9) = v5 + 1;
          goto LABEL_86;
        }
        if ((v33 - 48) > 9) {
          goto LABEL_85;
        }
        int v35 = 0;
        while (1)
        {
          int v36 = *(unsigned __int8 *)(v6 + v5);
          if ((v36 - 48) > 9) {
            break;
          }
          int v37 = v36 + 10 * v35 - 48;
          if (v37 >= v35)
          {
            *((void *)this + 9) = ++v5;
            int v35 = v37;
            if (v1 != v5) {
              continue;
            }
          }
          goto LABEL_85;
        }
        uint64_t v34 = -1000;
        if ((v35 & 0x80000000) == 0 && v5 < v1 && v36 == 95)
        {
          *((void *)this + 9) = v5 + 1;
          uint64_t v34 = (v35 + 1);
        }
LABEL_86:
        unint64_t v38 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v38;
        if (!v38 || v38 + 24 > *((void *)this + 2))
        {
          unint64_t v39 = 2 * *((void *)this + 4);
          if (v39 <= 0x20) {
            unint64_t v39 = 32;
          }
          *((void *)this + 4) = v39;
          unint64_t v40 = v39 + 8;
          BOOL v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
          unint64_t v42 = (char *)v41 + v40;
          *BOOL v41 = *((void *)this + 3);
          unint64_t v38 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v42;
          *((void *)this + 3) = v41;
        }
        *((void *)this + 1) = v38 + 24;
        *(_WORD *)(v38 + 16) = 102;
        *(unsigned char *)(v38 + 18) = 4;
        *(void *)unint64_t v38 = v10;
        unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v43;
        if (!v43 || v43 + 24 > *((void *)this + 2))
        {
          unint64_t v44 = 2 * *((void *)this + 4);
          if (v44 <= 0x20) {
            unint64_t v44 = 32;
          }
          *((void *)this + 4) = v44;
          unint64_t v45 = v44 + 8;
          uint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
          *uint64_t v46 = *((void *)this + 3);
          unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v46 + v45;
          *((void *)this + 3) = v46;
        }
        *((void *)this + 1) = v43 + 24;
        *(_WORD *)(v43 + 16) = 102;
        *(unsigned char *)(v43 + 18) = 4;
        *(void *)unint64_t v43 = v34;
        int v47 = *((_DWORD *)this + 24);
        if (v47)
        {
          uint64_t v48 = (v47 - 1);
          uint64_t v49 = *((void *)this + 11);
          unint64_t v50 = *(swift::Demangle::Node **)(v49 + 8 * v48);
          if (*((_WORD *)v50 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v48;
            if (v47 == 1) {
              goto LABEL_104;
            }
            uint64_t v48 = (v47 - 2);
          }
          else
          {
            unint64_t v50 = 0;
          }
          __int16 v51 = *(swift::Demangle::Node **)(v49 + 8 * v48);
          if (*((_WORD *)v51 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v48;
            goto LABEL_105;
          }
        }
        else
        {
          unint64_t v50 = 0;
        }
LABEL_104:
        __int16 v51 = 0;
LABEL_105:
        return swift::Demangle::Demangler::createWithChildren(this, 139, v51, v50, (swift::Demangle::Node *)v38, (swift::Demangle::Node *)v43);
      case 'a':
        goto LABEL_17;
      case 'b':
        __int16 v7 = 12;
        goto LABEL_17;
      case 'c':
        __int16 v7 = 28;
        goto LABEL_17;
      case 'e':
        __int16 v7 = 72;
        goto LABEL_17;
      case 'f':
        int v8 = 0;
        int v11 = (_DWORD *)((char *)this + 96);
        int v12 = *((_DWORD *)this + 24);
        __int16 v7 = 74;
        if (v12)
        {
          int v13 = 1;
          goto LABEL_19;
        }
        uint64_t v17 = 0;
        int v15 = 0;
        uint64_t v18 = 0;
        goto LABEL_64;
      case 'm':
        __int16 v7 = 142;
        goto LABEL_17;
      case 'p':
        __int16 v7 = 172;
        goto LABEL_17;
      case 'q':
        __int16 v7 = 174;
        goto LABEL_17;
      case 'r':
        __int16 v7 = 143;
        goto LABEL_17;
      case 'u':
        int v8 = 0;
        __int16 v7 = 140;
LABEL_17:
        int v11 = (_DWORD *)((char *)this + 96);
        int v12 = *((_DWORD *)this + 24);
        if (v12)
        {
          int v13 = 0;
LABEL_19:
          uint64_t v14 = *((void *)this + 11);
          int v15 = *(swift::Demangle::Node **)(v14 + 8 * (v12 - 1));
          if (*((_WORD *)v15 + 8) == 101)
          {
            *int v11 = --v12;
            if (!v13)
            {
LABEL_44:
              LODWORD(v16) = v12;
              uint64_t v17 = 0;
              if (!v8)
              {
LABEL_45:
                uint64_t v18 = 0;
                if (!v16) {
                  goto LABEL_64;
                }
                goto LABEL_46;
              }
LABEL_30:
              if (!v16)
              {
                uint64_t v18 = 0;
                int v8 = 1;
                goto LABEL_64;
              }
              uint64_t v16 = (v16 - 1);
              uint64_t v19 = *((void *)this + 11);
              uint64_t v18 = *(unsigned __int16 **)(v19 + 8 * v16);
              int v20 = v18[8];
              if ((v20 - 173) > 0x3C
                || ((1 << (v20 + 83)) & 0x100000010000010DLL) == 0)
              {
                BOOL v22 = (v20 - 101) > 0x24 || ((1 << (v20 - 101)) & 0x1000800001) == 0;
                if (v22 && v20 != 347)
                {
                  uint64_t v18 = 0;
                  int v8 = 1;
LABEL_47:
                  unint64_t v23 = *(unsigned __int16 **)(v19 + 8 * v16);
                  int v24 = v23[8];
                  BOOL v25 = (v24 - 139) > 0x21 || ((1 << (v24 + 117)) & 0x200000019) == 0;
                  if (!v25
                    || ((v24 - 28) <= 0x2E
                      ? (BOOL v26 = ((1 << (v24 - 28)) & 0x500000000001) == 0)
                      : (BOOL v26 = 1),
                        v26 ? (BOOL v27 = v24 == 8) : (BOOL v27 = 1),
                        v27))
                  {
                    *((_DWORD *)this + 24) = v16;
                    unint64_t v28 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
                    if (v8)
                    {
LABEL_65:
                      int v4 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, v7, (swift::Demangle::Node *)v23, (swift::Demangle::Node *)v18, v15, v28);
                      if (!v17) {
                        return (unint64_t)v4;
                      }
LABEL_66:
                      swift::Demangle::Node::addChild(v4, v17, this);
                      return (unint64_t)v4;
                    }
LABEL_61:
                    int v4 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, v7, (swift::Demangle::Node *)v23, v15, v28);
                    if (!v17) {
                      return (unint64_t)v4;
                    }
                    goto LABEL_66;
                  }
LABEL_64:
                  unint64_t v23 = (unsigned __int16 *)swift::Demangle::Demangler::popContext(this);
                  unint64_t v28 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
                  if (v8) {
                    goto LABEL_65;
                  }
                  goto LABEL_61;
                }
              }
              *int v11 = v16;
              int v8 = 1;
              if (!v16) {
                goto LABEL_64;
              }
LABEL_46:
              uint64_t v19 = *((void *)this + 11);
              uint64_t v16 = (v16 - 1);
              goto LABEL_47;
            }
          }
          else
          {
            int v15 = 0;
            if (!v13) {
              goto LABEL_44;
            }
          }
          if (v12)
          {
            LODWORD(v16) = v12 - 1;
            uint64_t v17 = *(swift::Demangle::Node **)(v14 + 8 * (v12 - 1));
            if (*((_WORD *)v17 + 8) == 176)
            {
              *int v11 = v16;
              if ((v8 & 1) == 0)
              {
                int v8 = 0;
                uint64_t v18 = 0;
                if (v12 == 1) {
                  goto LABEL_64;
                }
                goto LABEL_46;
              }
              goto LABEL_30;
            }
            goto LABEL_44;
          }
        }
        else
        {
          int v15 = 0;
        }
        LODWORD(v16) = 0;
        uint64_t v17 = 0;
        if (!v8) {
          goto LABEL_45;
        }
        goto LABEL_30;
      default:
        return (unint64_t)v4;
    }
  }
  return 0;
}

void swift::Demangle::NodeFactory::~NodeFactory(swift::Demangle::NodeFactory *this)
{
  *(void *)this = &unk_26C5DD830;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26C5DD830;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }

  JUMPOUT(0x2166B5A30);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void swift::Demangle::Context::Context(swift::Demangle::Context *this)
{
}

{
  operator new();
}

void swift::Demangle::Context::~Context(swift::Demangle::Context *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

uint64_t swift::Demangle::Context::clear(swift::Demangle::Context *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 16))();
}

swift::Demangle::Node *swift::Demangle::Context::demangleSymbolAsNode(swift::Demangle::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  std::string::size_type v7 = *a1;
  if (ManglingPrefixLength)
  {
    int v11 = 0;
    unint64_t v8 = swift::Demangle::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v10);
    if (v11 == v10)
    {
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else if (v11)
    {
      (*(void (**)(void))(*v11 + 40))();
    }
    return (swift::Demangle::Node *)v8;
  }
  else
  {
    return swift::Demangle::demangleOldSymbolAsNode(a2, a3, v7);
  }
}

unint64_t swift::Demangle::Context::demangleTypeAsNode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  std::string::size_type v7 = 0;
  unint64_t v4 = swift::Demangle::Demangler::demangleType(v3, a2, a3, v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return v4;
}

void swift::Demangle::Context::demangleSymbolAsString(swift::Demangle::NodeFactory **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, swift::Demangle::Node *a4@<X3>, void *a5@<X8>)
{
  int ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  int v11 = *a1;
  if (!ManglingPrefixLength)
  {
    int v13 = (uint64_t *)swift::Demangle::demangleOldSymbolAsNode(a2, a3, v11);
    goto LABEL_7;
  }
  int v24 = 0;
  int v13 = (uint64_t *)swift::Demangle::Demangler::demangleSymbol((uint64_t)v11, a2, a3, __p);
  if (v24 == __p)
  {
    (*((void (**)(void **))__p[0] + 4))(__p);
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (!v24)
  {
LABEL_7:
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  (*((void (**)(void))*v24 + 5))();
  if (!v13)
  {
LABEL_13:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        uint64_t v16 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17) {
          uint64_t v16 = a3 | 7;
        }
        uint64_t v17 = v16 + 1;
        uint64_t v18 = operator new(v16 + 1);
        a5[1] = a3;
        a5[2] = v17 | 0x8000000000000000;
        *a5 = v18;
        a5 = v18;
      }
      else
      {
        *((unsigned char *)a5 + 23) = a3;
        if (!a3) {
          goto LABEL_28;
        }
      }
      memmove(a5, a2, a3);
LABEL_28:
      *((unsigned char *)a5 + a3) = 0;
      return;
    }
LABEL_38:
    abort();
  }
LABEL_8:
  swift::Demangle::nodeToString((uint64_t *)__p, v13, a4, v12);
  uint64_t v14 = (void *)HIBYTE(v23);
  char v15 = HIBYTE(v23);
  if (v23 < 0) {
    uint64_t v14 = __p[1];
  }
  if (v14)
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    a5[2] = v23;
    return;
  }
  if (a2)
  {
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_38;
    }
    if (a3 >= 0x17)
    {
      uint64_t v19 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v19 = a3 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v21 = operator new(v19 + 1);
      a5[1] = a3;
      a5[2] = v20 | 0x8000000000000000;
      *a5 = v21;
      a5 = v21;
    }
    else
    {
      *((unsigned char *)a5 + 23) = a3;
      if (!a3)
      {
LABEL_35:
        *((unsigned char *)a5 + a3) = 0;
        if ((v23 & 0x8000000000000000) == 0) {
          return;
        }
        goto LABEL_36;
      }
    }
    memmove(a5, a2, a3);
    goto LABEL_35;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v15 & 0x80) == 0) {
    return;
  }
LABEL_36:
  operator delete(__p[0]);
}

const void **llvm::StringRef::str@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (void *)a2;
  uint64_t v3 = *this;
  if (!*this)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return this;
  }
  size_t v4 = (size_t)this[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v5 = v4 | 7;
    }
    uint64_t v6 = v5 + 1;
    std::string::size_type v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *unint64_t v2 = v7;
    unint64_t v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v4;
    if (!v4) {
      goto LABEL_11;
    }
  }
  this = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((unsigned char *)v2 + v4) = 0;
  return this;
}

void swift::Demangle::Context::demangleTypeAsString(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, swift::Demangle::Node *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *a1;
  BOOL v22 = 0;
  int v11 = (uint64_t *)swift::Demangle::Demangler::demangleType(v9, (uint64_t)a2, a3, __p);
  if (v22 == __p)
  {
    (*((void (**)(void **))__p[0] + 4))(__p);
    if (v11) {
      goto LABEL_5;
    }
LABEL_10:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_35;
    }
    if (a3 >= 0x17)
    {
      uint64_t v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v14 = a3 | 7;
      }
      uint64_t v15 = v14 + 1;
      uint64_t v16 = operator new(v14 + 1);
      a5[1] = a3;
      a5[2] = v15 | 0x8000000000000000;
      *a5 = v16;
      a5 = v16;
    }
    else
    {
      *((unsigned char *)a5 + 23) = a3;
      if (!a3) {
        goto LABEL_25;
      }
    }
    memmove(a5, a2, a3);
LABEL_25:
    *((unsigned char *)a5 + a3) = 0;
    return;
  }
  if (v22) {
    (*((void (**)(void))*v22 + 5))();
  }
  if (!v11) {
    goto LABEL_10;
  }
LABEL_5:
  swift::Demangle::nodeToString((uint64_t *)__p, v11, a4, v10);
  int v12 = (void *)HIBYTE(v21);
  char v13 = HIBYTE(v21);
  if (v21 < 0) {
    int v12 = __p[1];
  }
  if (v12)
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    a5[2] = v21;
    return;
  }
  if (a2)
  {
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        uint64_t v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17) {
          uint64_t v17 = a3 | 7;
        }
        uint64_t v18 = v17 + 1;
        uint64_t v19 = operator new(v17 + 1);
        a5[1] = a3;
        a5[2] = v18 | 0x8000000000000000;
        *a5 = v19;
        a5 = v19;
      }
      else
      {
        *((unsigned char *)a5 + 23) = a3;
        if (!a3)
        {
LABEL_32:
          *((unsigned char *)a5 + a3) = 0;
          if ((v21 & 0x8000000000000000) == 0) {
            return;
          }
          goto LABEL_33;
        }
      }
      memmove(a5, a2, a3);
      goto LABEL_32;
    }
LABEL_35:
    abort();
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v13 & 0x80) == 0) {
    return;
  }
LABEL_33:
  operator delete(__p[0]);
}

BOOL swift::Demangle::Context::isThunkSymbol(uint64_t *a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3))
  {
    if (v3 < 2) {
      return 0;
    }
    if (*(_WORD *)a2 != 21599) {
      return 0;
    }
    unint64_t v8 = v3 - 2;
    if (v3 - 2 < 2) {
      return 0;
    }
    uint64_t v9 = a2 + 2;
    if (*((_WORD *)a2 + 1) != 28500 && *v9 != 20308)
    {
      if (v8 < 3) {
        return 0;
      }
      BOOL v10 = *v9 == 16720 && a2[4] == 95;
      if (!v10 && (v8 < 4 || *(_DWORD *)v9 != 1601126736)) {
        return 0;
      }
    }
    return 1;
  }
  if (a2[v3 - 1] - 48 > 9)
  {
    if (!v3) {
      return 0;
    }
  }
  else
  {
    if (!v3) {
      return 0;
    }
    uint64_t v6 = memchr(a2, 46, v3);
    size_t v7 = v3 >= v6 - a2 ? v6 - a2 : v3;
    if (v6)
    {
      if (v6 - a2 != -1)
      {
        size_t v3 = v7;
        if (!v7) {
          return 0;
        }
      }
    }
  }
  if (a2[v3 - 1] == 95)
  {
    unint64_t v11 = v3 - 1;
    if (v3 < v3 - 1) {
      unint64_t v11 = v3;
    }
    if (v11)
    {
      while (a2[v11 - 1] - 48 <= 9)
      {
        if (v11 >= v11 - 1) {
          --v11;
        }
        if (!v11) {
          goto LABEL_40;
        }
      }
      if (v11 >= 2 && (*(_WORD *)&a2[v11 - 2] == 20820 || *(_WORD *)&a2[v11 - 2] == 22868))
      {
        if (v11 >= v11 - 2) {
          size_t v3 = v11 - 2;
        }
        else {
          size_t v3 = v11;
        }
      }
    }
  }
LABEL_40:
  if (v3 < 2) {
    return 0;
  }
  int v12 = &a2[v3];
  if (*(_WORD *)&a2[v3 - 2] != 16724
    && *((_WORD *)v12 - 1) != 24916
    && *((_WORD *)v12 - 1) != 28500
    && *((_WORD *)v12 - 1) != 20308
    && *((_WORD *)v12 - 1) != 21076
    && *((_WORD *)v12 - 1) != 29268
    && *((_WORD *)v12 - 1) != 22356
    && *((_WORD *)v12 - 1) != 17254)
  {
    return 0;
  }
  uint64_t v13 = *a1;
  uint64_t v21 = 0;
  unint64_t v14 = swift::Demangle::Demangler::demangleSymbol(v13, a2, v3, v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    if (!v14) {
      return 0;
    }
  }
  if (*(_WORD *)(v14 + 16) == 99)
  {
    int v15 = *(unsigned __int8 *)(v14 + 18);
    if ((v15 - 1) < 2) {
      goto LABEL_60;
    }
    if (v15 == 5 && *(_DWORD *)(v14 + 8))
    {
      unint64_t v14 = *(void *)v14;
LABEL_60:
      int v16 = *(unsigned __int16 *)(*(void *)v14 + 16);
      return (v16 - 160) <= 0x29 && ((1 << (v16 + 96)) & 0x31000000C11) != 0
          || v16 == 0;
    }
  }
  return 0;
}

void swift::Demangle::Context::getThunkTarget(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v4 = (char *)a3;
  v43[0] = (const void *)a2;
  if (!swift::Demangle::Context::isThunkSymbol(a1, (char *)a2, a3)) {
    goto LABEL_81;
  }
  if (!swift::Demangle::getManglingPrefixLength(a2, (unint64_t)v4))
  {
    if ((unint64_t)v4 >= 2) {
      uint64_t v12 = 2;
    }
    else {
      uint64_t v12 = (uint64_t)v4;
    }
    uint64_t v13 = (char *)(a2 + v12);
    unint64_t v14 = (unint64_t)&v4[-v12];
    if (v14 < 3)
    {
LABEL_26:
      *((unsigned char *)&v42.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v42, "_T");
      if (v14 >= 2) {
        uint64_t v16 = 2;
      }
      else {
        uint64_t v16 = v14;
      }
      if (!a2)
      {
        std::string::size_type v20 = 0;
        uint64_t v21 = 0;
        unsigned int v22 = 0;
        std::string __p = 0;
        size_t v40 = 0;
        unint64_t v41 = 0;
LABEL_51:
        if ((v22 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = v21;
        }
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v26 = v22;
        }
        else {
          std::string::size_type v26 = v20;
        }
        BOOL v27 = std::string::append(&v42, (const std::string::value_type *)p_p, v26);
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)a4 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        *(void *)(a4 + 16) = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v41) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        return;
      }
      size_t v17 = v14 - v16;
      if (v14 - v16 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v17 >= 0x17)
        {
          uint64_t v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v23 = v17 | 7;
          }
          uint64_t v24 = v23 + 1;
          uint64_t v18 = operator new(v23 + 1);
          size_t v40 = v17;
          unint64_t v41 = v24 | 0x8000000000000000;
          std::string __p = v18;
        }
        else
        {
          HIBYTE(v41) = v14 - v16;
          uint64_t v18 = &__p;
          if (v14 < 3) {
            goto LABEL_50;
          }
        }
        memmove(v18, &v13[v16], v17);
LABEL_50:
        *((unsigned char *)v18 + v17) = 0;
        unsigned int v22 = HIBYTE(v41);
        uint64_t v21 = (void **)__p;
        std::string::size_type v20 = v40;
        goto LABEL_51;
      }
LABEL_96:
      abort();
    }
    if (*(_WORD *)v13 == 16720 && v13[2] == 95)
    {
      uint64_t v34 = 3;
      size_t v35 = v14 - 3;
      if (v14 - 3 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      if (v35 < 0x17)
      {
        *(unsigned char *)(a4 + 23) = v35;
        if (v14 < 4) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (v14 < 4 || *(_DWORD *)v13 != 1601126736) {
        goto LABEL_26;
      }
      uint64_t v34 = 4;
      size_t v35 = v14 - 4;
      if (v14 - 4 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      if (v35 < 0x17)
      {
        *(unsigned char *)(a4 + 23) = v35;
        if (v14 < 5) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    uint64_t v36 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v36 = v35 | 7;
    }
    uint64_t v37 = v36 + 1;
    unint64_t v38 = operator new(v36 + 1);
    *(void *)(a4 + 8) = v35;
    *(void *)(a4 + 16) = v37 | 0x8000000000000000;
    *(void *)a4 = v38;
    a4 = (uint64_t)v38;
LABEL_94:
    memmove((void *)a4, &v13[v34], v35);
LABEL_95:
    *(unsigned char *)(a4 + v35) = 0;
    return;
  }
  int v7 = v4[a2 - 1];
  if ((v7 - 48) <= 9 && v4)
  {
    unint64_t v8 = memchr((void *)a2, 46, (size_t)v4);
    uint64_t v9 = v4 >= &v8[-a2] ? &v8[-a2] : v4;
    BOOL v10 = &v8[-a2] == (unsigned char *)-1 || v8 == 0;
    unint64_t v11 = v10 ? v4 : v9;
    if (v11 != v4) {
      goto LABEL_81;
    }
  }
  if (!v4) {
    goto LABEL_68;
  }
  if (v4 >= v4 - 1) {
    unint64_t v19 = (unint64_t)(v4 - 1);
  }
  else {
    unint64_t v19 = (unint64_t)v4;
  }
  if (v19 && v7 == 95)
  {
    while (*(unsigned __int8 *)(a2 + v19 - 1) - 48 <= 9)
    {
      if (v19 >= v19 - 1) {
        --v19;
      }
      if (!v19) {
        goto LABEL_67;
      }
    }
    if (v19 >= 2 && (*(_WORD *)(a2 + v19 - 2) == 20820 || *(_WORD *)(a2 + v19 - 2) == 22868))
    {
      if (v19 >= v19 - 2) {
        size_t v4 = (char *)(v19 - 2);
      }
      else {
        size_t v4 = (char *)v19;
      }
    }
  }
LABEL_67:
  v43[1] = v4;
  if ((unint64_t)v4 < 2) {
    goto LABEL_68;
  }
  int v30 = &v4[a2];
  if (*(_WORD *)&v4[a2 - 2] == 21076 || *((_WORD *)v30 - 1) == 29268 || *((_WORD *)v30 - 1) == 22356)
  {
LABEL_81:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    return;
  }
  if (*((_WORD *)v30 - 1) != 17254)
  {
LABEL_68:
    std::string::size_type v29 = (std::string::size_type)(v4 - 2);
    if (v4 < v4 - 2) {
      std::string::size_type v29 = (std::string::size_type)v4;
    }
    v42.__r_.__value_.__r.__words[0] = a2;
    v42.__r_.__value_.__l.__size_ = v29;
    llvm::StringRef::str((const void **)&v42.__r_.__value_.__l.__data_, a4);
    return;
  }
  llvm::StringRef::str(v43, a4);
  uint64_t v31 = *(unsigned __int8 *)(a4 + 23);
  BOOL v32 = (v31 & 0x80u) != 0;
  if ((v31 & 0x80u) != 0) {
    uint64_t v31 = *(void *)(a4 + 8);
  }
  if (v32) {
    uint64_t v33 = *(void *)a4;
  }
  else {
    uint64_t v33 = a4;
  }
  *(unsigned char *)(v31 + v33 - 1) = 99;
}

uint64_t swift::Demangle::Context::hasSwiftCallingConvention(swift::Demangle::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  int v7 = *a1;
  if (ManglingPrefixLength)
  {
    int v15 = 0;
    unint64_t v8 = swift::Demangle::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v14);
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
      if (!v8) {
        return 0;
      }
      goto LABEL_8;
    }
    if (v15)
    {
      (*(void (**)(void))(*v15 + 40))();
      if (!v8) {
        return 0;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)swift::Demangle::demangleOldSymbolAsNode(a2, a3, v7);
  }
  if (!v8) {
    return 0;
  }
LABEL_8:
  if (*(_WORD *)(v8 + 16) != 99) {
    return 0;
  }
  int v9 = *(unsigned __int8 *)(v8 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*(_DWORD *)(v8 + 8)) {
      return 0;
    }
    unint64_t v8 = *(void *)v8;
  }
  uint64_t result = 0;
  unsigned int v11 = *(unsigned __int16 *)(*(void *)v8 + 16);
  if (v11 <= 0x86)
  {
    BOOL v13 = v11 > 0xA || ((1 << v11) & 0x640) == 0;
    if (v13 && v11 != 89) {
      return 1;
    }
  }
  else
  {
    BOOL v12 = v11 - 135 > 0x3F || ((1 << (v11 + 121)) & 0x8000000020000001) == 0;
    if (v12 && v11 != 238 && v11 != 252) {
      return 1;
    }
  }
  return result;
}

uint64_t swift::Demangle::Context::getModuleName@<X0>(swift::Demangle::Node **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  int ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  int v9 = *a1;
  if (!ManglingPrefixLength)
  {
    uint64_t result = (uint64_t)swift::Demangle::demangleOldSymbolAsNode(a2, a3, v9);
    unint64_t v11 = result;
    goto LABEL_7;
  }
  BOOL v25 = 0;
  unint64_t v11 = swift::Demangle::Demangler::demangleSymbol((uint64_t)v9, a2, a3, v24);
  uint64_t result = (uint64_t)v25;
  if (v25 != v24)
  {
    if (v25)
    {
      uint64_t result = (*(uint64_t (**)(void))(*v25 + 40))();
      if (v11) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
LABEL_7:
    if (v11) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
  if (!v11)
  {
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  while (1)
  {
LABEL_15:
    unint64_t v15 = v11 + 16;
    unsigned int v14 = *(unsigned __int16 *)(v11 + 16);
    if (v14 > 0xE7)
    {
      if (v14 == 232 || v14 == 236) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }
    if (v14 == 99)
    {
      int v16 = *(unsigned __int8 *)(v11 + 18);
      size_t v17 = (unint64_t *)v11;
      if ((v16 - 1) >= 2)
      {
        if (v16 == 5)
        {
          unint64_t v18 = *(void *)v11;
          size_t v17 = *(unint64_t **)v11;
          goto LABEL_35;
        }
        size_t v17 = 0;
      }
      if (v16 == 1)
      {
        unint64_t v15 = v11 + 8;
        goto LABEL_39;
      }
      if (v16 == 2) {
        goto LABEL_39;
      }
      if (v16 != 5)
      {
        unint64_t v15 = 0;
LABEL_39:
        while (v17 != (unint64_t *)v15)
        {
          unint64_t v11 = *v17;
          uint64_t result = swift::Demangle::isFunctionAttr(*(unsigned __int16 *)(*v17 + 16));
          if ((result & 1) == 0) {
            goto LABEL_14;
          }
          ++v17;
        }
        goto LABEL_8;
      }
      unint64_t v18 = *(void *)v11;
LABEL_35:
      unint64_t v15 = v18 + 8 * *(unsigned int *)(v11 + 8);
      goto LABEL_39;
    }
    if (v14 == 153) {
      break;
    }
LABEL_27:
    if (swift::Demangle::isSpecialized((swift::Demangle *)v11, v10))
    {
      uint64_t result = swift::Demangle::getUnspecialized(v11, *a1, (uint64_t)v24);
      if (LODWORD(v24[0])) {
        goto LABEL_8;
      }
      unint64_t v11 = (unint64_t)v25;
      goto LABEL_14;
    }
    uint64_t result = swift::Demangle::isContext();
    if (!result) {
      goto LABEL_8;
    }
LABEL_12:
    int v13 = *(unsigned __int8 *)(v11 + 18);
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*(_DWORD *)(v11 + 8)) {
        goto LABEL_8;
      }
      unint64_t v11 = *(void *)v11;
    }
    unint64_t v11 = *(void *)v11;
LABEL_14:
    if (!v11) {
      goto LABEL_8;
    }
  }
  unint64_t v19 = *(const void **)v11;
  if (!*(void *)v11) {
    goto LABEL_8;
  }
  size_t v20 = *(void *)(v11 + 8);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v20 >= 0x17)
  {
    uint64_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v21 = v20 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v23 = operator new(v21 + 1);
    a4[1] = v20;
    a4[2] = v22 | 0x8000000000000000;
    *a4 = v23;
    a4 = v23;
    goto LABEL_50;
  }
  *((unsigned char *)a4 + 23) = v20;
  if (v20) {
LABEL_50:
  }
    uint64_t result = (uint64_t)memmove(a4, v19, v20);
  *((unsigned char *)a4 + v20) = 0;
  return result;
}

void swift::Demangle::demangleSymbolAsString()
{
}

void swift::Demangle::demangleTypeAsString(swift::Demangle *this, const char *a2, unint64_t a3, const swift::Demangle::DemangleOptions *a4)
{
}

BOOL swift::Mangle::isNonAscii(char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2 - 1;
  do
  {
    int v3 = *a1++;
    BOOL v4 = v3 < 0;
    if (v3 < 0) {
      break;
    }
  }
  while (v2--);
  return v4;
}

uint64_t swift::Mangle::needsPunycodeEncoding(unsigned char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  while (1)
  {
    if ((*a1 - 48) >= 0xAu && ((*a1 & 0xDF) - 65) >= 0x1Au)
    {
      int v4 = *a1;
      if (v4 != 95 && v4 != 36) {
        break;
      }
    }
    ++a1;
    if (!--a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t swift::Mangle::translateOperatorChar(swift::Mangle *this)
{
  int v2 = this - 33;
  uint64_t result = 97;
  switch(v2)
  {
    case 0:
      uint64_t result = 110;
      break;
    case 4:
      uint64_t result = 114;
      break;
    case 5:
      return result;
    case 9:
      uint64_t result = 109;
      break;
    case 10:
      uint64_t result = 112;
      break;
    case 12:
      uint64_t result = 115;
      break;
    case 13:
      uint64_t result = 122;
      break;
    case 14:
      uint64_t result = 100;
      break;
    case 27:
      uint64_t result = 108;
      break;
    case 28:
      uint64_t result = 101;
      break;
    case 29:
      uint64_t result = 103;
      break;
    case 30:
      uint64_t result = 113;
      break;
    case 31:
      uint64_t result = 99;
      break;
    case 61:
      uint64_t result = 120;
      break;
    case 91:
      uint64_t result = 111;
      break;
    case 93:
      uint64_t result = 116;
      break;
    default:
      uint64_t result = (uint64_t)this;
      break;
  }
  return result;
}

void swift::Mangle::translateOperator(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v6 = *a1++;
      std::string::value_type v7 = swift::Mangle::translateOperatorChar((swift::Mangle *)v6);
      std::string::push_back(a3, v7);
      --v3;
    }
    while (v3);
  }
}

void *swift::Mangle::getStandardTypeSubst@<X0>(void *result@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  switch(a2)
  {
    case 3uLL:
      uint64_t result = (void *)memcmp(result, "Set", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Int", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "i";
      }
      else
      {
        unint64_t v8 = "h";
      }
      goto LABEL_167;
    case 4uLL:
      uint64_t result = (void *)memcmp(result, "Bool", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "UInt", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "u";
      }
      else
      {
        unint64_t v8 = "b";
      }
      goto LABEL_167;
    case 5uLL:
      uint64_t result = (void *)memcmp(result, "Array", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Float", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "Range", a2);
          if (result) {
            goto LABEL_97;
          }
          unint64_t v8 = "n";
        }
        else
        {
          unint64_t v8 = "f";
        }
      }
      else
      {
        unint64_t v8 = "a";
      }
      goto LABEL_167;
    case 6uLL:
      uint64_t result = (void *)memcmp(result, "Double", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "String", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "S";
      }
      else
      {
        unint64_t v8 = "d";
      }
      goto LABEL_167;
    case 7uLL:
      uint64_t result = (void *)memcmp(result, "Numeric", a2);
      if (result) {
        goto LABEL_97;
      }
      unint64_t v8 = "j";
      goto LABEL_167;
    case 8uLL:
      uint64_t result = (void *)memcmp(result, "Optional", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Hashable", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "Sequence", a2);
          if (result) {
            goto LABEL_97;
          }
          unint64_t v8 = "T";
        }
        else
        {
          unint64_t v8 = "H";
        }
      }
      else
      {
        unint64_t v8 = "q";
      }
      goto LABEL_167;
    case 9uLL:
      uint64_t result = (void *)memcmp(result, "Character", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Substring", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "Encodable", a2);
          if (result)
          {
            if (*v6 == 0x6C6261646F636544 && *((unsigned char *)v6 + 8) == 101)
            {
              unint64_t v8 = "e";
            }
            else
            {
              uint64_t result = (void *)memcmp(v6, "Equatable", a2);
              if (result) {
                goto LABEL_97;
              }
              unint64_t v8 = "Q";
            }
          }
          else
          {
            unint64_t v8 = "E";
          }
        }
        else
        {
          unint64_t v8 = "s";
        }
      }
      else
      {
        unint64_t v8 = "J";
      }
      goto LABEL_167;
    case 0xAuLL:
      uint64_t result = (void *)memcmp(result, "Dictionary", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Comparable", a2);
        if (result)
        {
          if (*v6 == 0x697463656C6C6F43 && *((_WORD *)v6 + 4) == 28271)
          {
            unint64_t v8 = "l";
          }
          else
          {
            uint64_t result = (void *)memcmp(v6, "Strideable", a2);
            if (result) {
              goto LABEL_97;
            }
            unint64_t v8 = "x";
          }
        }
        else
        {
          unint64_t v8 = "L";
        }
      }
      else
      {
        unint64_t v8 = "D";
      }
      goto LABEL_167;
    case 0xBuLL:
      uint64_t result = (void *)memcmp(result, "ClosedRange", a2);
      if (result) {
        goto LABEL_97;
      }
      unint64_t v8 = "N";
      goto LABEL_167;
    case 0xDuLL:
      uint64_t result = (void *)memcmp(result, "UnsafePointer", a2);
      if (!result)
      {
        unint64_t v8 = "P";
        goto LABEL_167;
      }
      uint64_t result = (void *)memcmp(v6, "FloatingPoint", a2);
      if (!result)
      {
        unint64_t v8 = "F";
        goto LABEL_167;
      }
      uint64_t result = (void *)memcmp(v6, "SignedInteger", a2);
      if (!result)
      {
        unint64_t v8 = "Z";
        goto LABEL_167;
      }
      if (*v6 == 0x6E497972616E6942 && *(void *)((char *)v6 + 5) == 0x72656765746E4979)
      {
        unint64_t v8 = "z";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0xEuLL:
      uint64_t result = (void *)memcmp(result, "DefaultIndices", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "StringProtocol", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "y";
      }
      else
      {
        unint64_t v8 = "I";
      }
      goto LABEL_167;
    case 0xFuLL:
      uint64_t result = (void *)memcmp(result, "UnsignedInteger", a2);
      if (!result)
      {
        unint64_t v8 = "U";
        goto LABEL_167;
      }
      if (*v6 == 0x70784565676E6152 && *(void *)((char *)v6 + 7) == 0x6E6F697373657270)
      {
        unint64_t v8 = "X";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0x10uLL:
      uint64_t result = (void *)memcmp(result, "ObjectIdentifier", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "UnsafeRawPointer", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "IteratorProtocol", a2);
          if (result)
          {
            uint64_t result = (void *)memcmp(v6, "RawRepresentable", a2);
            if (result) {
              goto LABEL_97;
            }
            unint64_t v8 = "Y";
          }
          else
          {
            unint64_t v8 = "t";
          }
        }
        else
        {
          unint64_t v8 = "V";
        }
      }
      else
      {
        unint64_t v8 = "O";
      }
      goto LABEL_167;
    case 0x11uLL:
      uint64_t result = (void *)memcmp(result, "MutableCollection", a2);
      if (result) {
        goto LABEL_97;
      }
      unint64_t v8 = "M";
      goto LABEL_167;
    case 0x13uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeBufferPointer", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "BinaryFloatingPoint", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "B";
      }
      else
      {
        unint64_t v8 = "R";
      }
      goto LABEL_167;
    case 0x14uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutablePointer", a2);
      if (result) {
        goto LABEL_97;
      }
      unint64_t v8 = "p";
      goto LABEL_167;
    case 0x15uLL:
      uint64_t result = (void *)memcmp(result, "RandomNumberGenerator", a2);
      if (result) {
        goto LABEL_97;
      }
      unint64_t v8 = "G";
      goto LABEL_167;
    case 0x16uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeRawBufferPointer", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "RandomAccessCollection", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "k";
      }
      else
      {
        unint64_t v8 = "W";
      }
      goto LABEL_167;
    case 0x17uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableRawPointer", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "BidirectionalCollection", a2);
        if (result) {
          goto LABEL_97;
        }
        unint64_t v8 = "K";
      }
      else
      {
        unint64_t v8 = "v";
      }
      goto LABEL_167;
    case 0x1AuLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableBufferPointer", a2);
      if (!result)
      {
        unint64_t v8 = "r";
        goto LABEL_167;
      }
      uint64_t result = (void *)memcmp(v6, "RangeReplaceableCollection", a2);
      if (!result)
      {
        unint64_t v8 = "m";
LABEL_167:
        *(void *)a4 = v8;
        *(void *)(a4 + 8) = 1;
        char v18 = 1;
        goto LABEL_168;
      }
LABEL_97:
      if (a3)
      {
        switch(a2)
        {
          case 4uLL:
            uint64_t result = (void *)memcmp(v6, "Task", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "cT";
            goto LABEL_171;
          case 5uLL:
            if (*(_DWORD *)v6 != 1869898561 || *((unsigned char *)v6 + 4) != 114) {
              goto LABEL_150;
            }
            size_t v17 = "cA";
            goto LABEL_171;
          case 8uLL:
            uint64_t result = (void *)memcmp(v6, "Executor", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "cF";
            goto LABEL_171;
          case 9uLL:
            uint64_t result = (void *)memcmp(v6, "TaskGroup", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "MainActor", a2);
              if (result) {
                goto LABEL_150;
              }
              size_t v17 = "cM";
            }
            else
            {
              size_t v17 = "cG";
            }
            goto LABEL_171;
          case 0xAuLL:
            uint64_t result = (void *)memcmp(v6, "UnownedJob", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "cJ";
            goto LABEL_171;
          case 0xBuLL:
            uint64_t result = (void *)memcmp(v6, "AsyncStream", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "cS";
            goto LABEL_171;
          case 0xCuLL:
            uint64_t result = (void *)memcmp(v6, "TaskExecutor", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "TaskPriority", a2);
              if (result) {
                goto LABEL_150;
              }
              size_t v17 = "cP";
            }
            else
            {
              size_t v17 = "ch";
            }
            goto LABEL_171;
          case 0xDuLL:
            uint64_t result = (void *)memcmp(v6, "AsyncSequence", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "ci";
            goto LABEL_171;
          case 0xEuLL:
            uint64_t result = (void *)memcmp(v6, "SerialExecutor", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "cf";
            goto LABEL_171;
          case 0x11uLL:
            uint64_t result = (void *)memcmp(v6, "CancellationError", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "ThrowingTaskGroup", a2);
              if (result)
              {
                uint64_t result = (void *)memcmp(v6, "UnsafeCurrentTask", a2);
                if (result) {
                  goto LABEL_150;
                }
                size_t v17 = "ct";
              }
              else
              {
                size_t v17 = "cg";
              }
            }
            else
            {
              size_t v17 = "cE";
            }
            goto LABEL_171;
          case 0x12uLL:
            uint64_t result = (void *)memcmp(v6, "UnsafeContinuation", a2);
            if (result) {
              goto LABEL_150;
            }
            size_t v17 = "cc";
            goto LABEL_171;
          case 0x13uLL:
            uint64_t result = (void *)memcmp(v6, "CheckedContinuation", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "AsyncThrowingStream", a2);
              if (result) {
                goto LABEL_150;
              }
              size_t v17 = "cs";
            }
            else
            {
              size_t v17 = "cC";
            }
            goto LABEL_171;
          case 0x15uLL:
            uint64_t result = (void *)memcmp(v6, "UnownedSerialExecutor", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "AsyncIteratorProtocol", a2);
              if (result) {
                goto LABEL_150;
              }
              size_t v17 = "cI";
            }
            else
            {
              size_t v17 = "ce";
            }
LABEL_171:
            *(void *)a4 = v17;
            *(void *)(a4 + 8) = 2;
            char v18 = 1;
            break;
          default:
            goto LABEL_150;
        }
      }
      else
      {
LABEL_150:
        char v18 = 0;
        *(unsigned char *)a4 = 0;
      }
LABEL_168:
      *(unsigned char *)(a4 + 16) = v18;
      return result;
    case 0x1DuLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableRawBufferPointer", a2);
      if (result) {
        goto LABEL_97;
      }
      unint64_t v8 = "w";
      goto LABEL_167;
    case 0x21uLL:
      if (*result != 0x656C65726F747541
        || result[1] != 0x736E55676E697361
        || result[2] != 0x626174754D656661
        || result[3] != 0x65746E696F50656CLL
        || *((unsigned char *)result + 32) != 114)
      {
        goto LABEL_97;
      }
      char v18 = 1;
      *(void *)a4 = "A";
      *(void *)(a4 + 8) = 1;
      goto LABEL_168;
    default:
      goto LABEL_97;
  }
}

const char *swift::Demangle::getNodeKindString(unsigned int a1)
{
  if (a1 > 0x162) {
    return "Demangle::Node::Kind::???";
  }
  else {
    return (&off_264237FA0)[(__int16)a1];
  }
}

double swift::Demangle::getNodeTreeAsString@<D0>(swift::Demangle *this@<X0>, std::string *a2@<X8>)
{
  memset(&v5, 0, sizeof(v5));
  printNode(&v5, this, 0);
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void printNode(std::string *a1, const swift::Demangle::Node *a2, int a3)
{
  for (int i = 2 * a3; i; --i)
    std::string::push_back(a1, 32);
  if (a2)
  {
    std::string::append(a1, "kind=", 5uLL);
    std::string::value_type v7 = (char *)a2 + 16;
    NodeKindString = swift::Demangle::getNodeKindString(*((unsigned __int16 *)a2 + 8));
    size_t v9 = strlen(NodeKindString);
    std::string::append(a1, NodeKindString, v9);
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 == 3)
    {
      std::string::append(a1, ", text=\"", 8uLL);
      std::string::append(a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      std::string::push_back(a1, 34);
      int v10 = *((unsigned __int8 *)a2 + 18);
    }
    if (v10 == 4)
    {
      std::string::append(a1, ", index=", 8uLL);
      swift::Demangle::DemanglerPrinter::operator<<(a1, *(void *)a2);
    }
    std::string::push_back(a1, 10);
    int v11 = *((unsigned __int8 *)a2 + 18);
    BOOL v12 = (const std::string::value_type *)a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        int v13 = *(const std::string::value_type **)a2;
        BOOL v12 = *(const std::string::value_type **)a2;
        goto LABEL_19;
      }
      BOOL v12 = 0;
    }
    switch(v11)
    {
      case 1:
        std::string::value_type v7 = (char *)a2 + 8;
        break;
      case 2:
        break;
      case 5:
        int v13 = *(const std::string::value_type **)a2;
LABEL_19:
        std::string::value_type v7 = &v13[8 * *((unsigned int *)a2 + 2)];
        if (v12 == v7) {
          return;
        }
        goto LABEL_23;
      default:
        std::string::value_type v7 = 0;
        if (!v12) {
          return;
        }
LABEL_23:
        unsigned int v14 = a3 + 1;
        do
        {
          unint64_t v15 = *(const swift::Demangle::Node **)v12;
          v12 += 8;
          printNode((swift::Demangle::DemanglerPrinter *)a1, v15, v14);
        }
        while (v12 != v7);
        return;
    }
    if (v12 == v7) {
      return;
    }
    goto LABEL_23;
  }

  std::string::append(a1, "<<NULL>>", 8uLL);
}

void swift::Demangle::Node::dump(swift::Demangle::Node *this)
{
  memset(&v3, 0, sizeof(v3));
  printNode(&v3, this, 0);
  std::string __p = v3;
  if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v3.__r_.__value_.__r.__words[0];
  }
  fputs((const char *)p_p, (FILE *)*MEMORY[0x263EF8348]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t swift::Demangle::Demangler::dump(swift::Demangle::Demangler *this)
{
  int v2 = (FILE **)MEMORY[0x263EF8348];
  if (*((_DWORD *)this + 28))
  {
    uint64_t v3 = 0;
    do
    {
      fprintf(*v2, "Substitution[%c]:\n", v3 + 65);
      int v4 = *(const swift::Demangle::Node **)(*((void *)this + 13) + 8 * v3);
      memset(&v11, 0, sizeof(v11));
      printNode(&v11, v4, 0);
      std::string __p = v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      fputs((const char *)p_p, *v2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      fputc(10, *v2);
      ++v3;
    }
    while (*((_DWORD *)this + 28) > v3);
  }
  if (*((_DWORD *)this + 24))
  {
    uint64_t v6 = 0;
    do
    {
      fprintf(*v2, "NodeStack[%u]:\n", v6);
      std::string::value_type v7 = *(const swift::Demangle::Node **)(*((void *)this + 11) + 8 * v6);
      memset(&v11, 0, sizeof(v11));
      printNode(&v11, v7, 0);
      std::string __p = v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v8 = &__p;
      }
      else {
        unint64_t v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      fputs((const char *)v8, *v2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      fputc(10, *v2);
      ++v6;
    }
    while (*((_DWORD *)this + 24) > v6);
  }
  return fprintf(*v2, "Position = %zd:\n%.*s\n%*s\n", *((void *)this + 9), *((void *)this + 8), *((const char **)this + 7), *((void *)this + 9) + 1, "^");
}

std::string *swift::Demangle::DemanglerPrinter::operator<<(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

{
  char __str[32];

  snprintf(__str, 0x20uLL, "%lld", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *swift::Demangle::DemanglerPrinter::writeHex(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x20uLL, "%llX", a2);
  std::string::append(a1, __str);
  return a1;
}

double swift::Demangle::genericParameterName@<D0>(swift::Demangle *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  do
  {
    std::string::push_back(&v8, a2 % 0x1A + 65);
    BOOL v6 = a2 > 0x19;
    a2 /= 0x1AuLL;
  }
  while (v6);
  if (this)
  {
    snprintf(__str, 0x20uLL, "%llu", this);
    std::string::append(&v8, __str);
  }
  double result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

uint64_t **matchSequenceOfKinds(uint64_t **result, void *a2)
{
  if (result)
  {
    uint64_t v2 = ((uint64_t)(a2[1] - *a2) >> 4) + 1;
    for (int i = (unint64_t *)(*a2 + 8); ; i += 2)
    {
      if (!--v2) {
        return result;
      }
      int v4 = *((unsigned __int16 *)i - 4);
      unint64_t v5 = *i;
      unint64_t v6 = *((unsigned __int8 *)result + 18);
      unsigned int v7 = v6 - 1;
      if (v6 != 1)
      {
        if (v6 == 5)
        {
          if (*((unsigned int *)result + 2) <= v5) {
            return 0;
          }
          goto LABEL_11;
        }
        if (v6 != 2) {
          return 0;
        }
        unint64_t v6 = 2;
      }
      if (v6 <= v5) {
        return 0;
      }
LABEL_11:
      if (v7 >= 2) {
        double result = (uint64_t **)*result;
      }
      double result = (uint64_t **)result[v5];
      if (!result) {
        return result;
      }
      if (*((unsigned __int16 *)result + 8) != v4) {
        return 0;
      }
    }
  }
  return result;
}

void swift::Demangle::keyPathSourceString(swift::Demangle *this, const char *a2)
{
  char v4 = 3;
  LODWORD(v3) = 2112095;
  swift::Demangle::Context::Context((swift::Demangle::Context *)v2);
}

void swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_1::operator()(void *a1@<X0>, char *a2@<X8>)
{
  int v3 = *((unsigned __int16 *)a1 + 8);
  if (v3 != 137)
  {
    if (v3 != 101)
    {
      a2[23] = 9;
      strcpy(a2, "<unknown>");
      return;
    }
    size_t v4 = a1[1];
    if (v4 <= 0x7FFFFFFFFFFFFFF7)
    {
      unint64_t v5 = (void *)*a1;
      if (v4 >= 0x17)
      {
        uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v11 = v4 | 7;
        }
        uint64_t v12 = v11 + 1;
        int v13 = (char *)operator new(v11 + 1);
        *((void *)a2 + 1) = v4;
        *((void *)a2 + 2) = v12 | 0x8000000000000000;
        *(void *)a2 = v13;
        a2 = v13;
      }
      else
      {
        a2[23] = v4;
        if (!v4) {
          goto LABEL_18;
        }
      }
      memmove(a2, v5, v4);
LABEL_18:
      a2[v4] = 0;
      return;
    }
LABEL_36:
    abort();
  }
  if (*((unsigned char *)a1 + 18) == 5) {
    a1 = (void *)*a1;
  }
  uint64_t v6 = a1[1];
  std::string::size_type v7 = *(void *)(v6 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_36;
  }
  std::string v8 = *(const void **)v6;
  unint64_t v9 = *(void *)*a1 + 1;
  if (v7 >= 0x17)
  {
    uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v14 = v7 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v6 + 8);
  p_dst = &__dst;
  if (v7) {
LABEL_22:
  }
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  int v16 = std::string::append(&__dst, " #");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  size_t v20 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  *(std::string *)a2 = *v20;
  v20->__r_.__value_.__r.__words[0] = 0;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::size_type v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_0::operator()(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = **a1;
  if (0xAAAAAAAAAAAAAAABLL * (((*a1)[1] - v3) >> 3) <= a2)
  {
    *(unsigned char *)(a3 + 23) = 9;
    strcpy((char *)a3, "<unknown>");
  }
  else
  {
    int v4 = (long long *)(v3 + 24 * a2);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      *(void *)(a3 + 16) = *((void *)v4 + 2);
      *(_OWORD *)a3 = v5;
    }
  }
}

void *std::string::basic_string<llvm::StringRef,0>(void *__dst, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    void *__dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v2;
    long long v5 = __dst;
    if (!v2) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((unsigned char *)v5 + v2) = 0;
  return __dst;
}

uint64_t *swift::Demangle::nodeToString@<X0>(uint64_t *__return_ptr a1@<X8>, uint64_t *this@<X0>, swift::Demangle::Node *a3@<X1>, const swift::Demangle::DemangleOptions *a4@<X2>)
{
  if (!this)
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return this;
  }
  long long v5 = (swift::Demangle::Node *)this;
  long long v9 = *(_OWORD *)a3;
  long long v10 = *((_OWORD *)a3 + 1);
  uint64_t v11 = *((void *)a3 + 4);
  uint64_t v6 = (swift::Demangle::Node *)*((void *)a3 + 8);
  if (v6)
  {
    if (v6 == (swift::Demangle::Node *)((char *)a3 + 40))
    {
      int v13 = v12;
      (*(void (**)(swift::Demangle::Node *, void *, const swift::Demangle::DemangleOptions *))(*(void *)v6 + 24))(v6, v12, a4);
      uint64_t v7 = v13;
    }
    else
    {
      uint64_t v7 = (uint64_t *)(*(uint64_t (**)(swift::Demangle::Node *))(*(void *)v6 + 16))(v6);
      int v13 = v7;
    }
    memset(&__p, 0, sizeof(__p));
    long long v15 = v9;
    long long v16 = v10;
    uint64_t v17 = v11;
    if (v7)
    {
      if (v7 == v12)
      {
        unint64_t v19 = v18;
        (*(void (**)(void *, void *))(v12[0] + 24))(v12, v18);
      }
      else
      {
        unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
  }
  else
  {
    int v13 = 0;
    memset(&__p, 0, sizeof(__p));
    long long v8 = *((_OWORD *)a3 + 1);
    long long v15 = *(_OWORD *)a3;
    long long v16 = v8;
    uint64_t v17 = *((void *)a3 + 4);
    unint64_t v19 = 0;
  }
  __int16 v20 = 256;
  if (HIBYTE(v20))
  {
    *(std::string *)a1 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  if (v19 != v18)
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  (*(void (**)(void *))(v18[0] + 32))(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_21:
  this = v13;
  if (v13 == v12) {
    return (uint64_t *)(*(uint64_t (**)(void *))(v12[0] + 32))(v12);
  }
  if (v13) {
    return (uint64_t *)(*(uint64_t (**)(void))(*v13 + 40))();
  }
  return this;
}

void swift::Demangle::DemangleOptions::~DemangleOptions(swift::Demangle::DemangleOptions *this)
{
  uint64_t v1 = (char *)this + 40;
  size_t v2 = (char *)*((void *)this + 8);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

swift::Demangle::Node *anonymous namespace'::NodePrinter::print(std::string *this, swift::Demangle::Node *a2, const swift::Demangle::DemangleOptions *a3, const swift::Demangle::DemangleOptions *a4)
{
  uint64_t v5 = a3 < 0x301;
  if (a3 > 0x300)
  {
LABEL_820:
    std::string::append(this, "<<too complex>>", 0xFuLL);
    long long v10 = 0;
    char v8 = v5;
    goto LABEL_824;
  }
  char v6 = (char)a4;
  unsigned int v7 = a3;
  char v8 = 0;
  while (2)
  {
    if (!a2)
    {
      v274 = "<null node pointer>";
      v275 = this;
      std::string::size_type v276 = 19;
LABEL_822:
      std::string::append(v275, v274, v276);
      goto LABEL_823;
    }
    int v11 = *((unsigned __int16 *)a2 + 8);
    long long v10 = 0;
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        v415 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          v415 = *(swift::Demangle::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v415 + 16) == 24) {
          size_t v416 = 17;
        }
        else {
          size_t v416 = 4;
        }
        if (*(_WORD *)(*(void *)v415 + 16) == 24) {
          v281 = "__allocating_init";
        }
        else {
          v281 = "init";
        }
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        goto LABEL_1344;
      case 1:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_823;
        }
        int v366 = *((unsigned __int8 *)a2 + 18);
        v367 = a2;
        if (v366 == 2) {
          goto LABEL_979;
        }
        if (v366 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v367 = *(swift::Demangle::Node **)a2;
LABEL_979:
          v368 = (swift::Demangle::Node *)*((void *)v367 + 1);
        }
        else
        {
          v368 = 0;
        }
        unsigned int v599 = v7 + 1;
        std::string::append(this, ".(unknown context at ", 0x15uLL);
        int v600 = *((unsigned __int8 *)a2 + 18);
        v601 = (swift::Demangle::Node **)a2;
        if ((v600 - 1) < 2) {
          goto LABEL_1766;
        }
        if (v600 == 5 && *((_DWORD *)a2 + 2))
        {
          v601 = *(swift::Demangle::Node ***)a2;
LABEL_1766:
          v602 = *v601;
        }
        else
        {
          v602 = 0;
        }
        std::string::append(this, ")", 1uLL);
        if (*((unsigned char *)a2 + 18) != 5) {
          goto LABEL_823;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        uint64_t v606 = *(void *)(*(void *)a2 + 16);
        int v607 = *(unsigned __int8 *)(v606 + 18);
        if ((v607 - 1) >= 2 && (v607 != 5 || !*(_DWORD *)(v606 + 8))) {
          goto LABEL_823;
        }
        std::string::push_back(this, 60);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v608 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
        }
        else {
          v608 = 0;
        }
        v588 = this;
        std::string::value_type v589 = 62;
        goto LABEL_1729;
      case 2:
        int v314 = *((unsigned __int8 *)a2 + 18);
        if ((v314 - 1) >= 2 && (v314 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v315 = *((unsigned __int8 *)a2 + 18);
        v316 = (swift::Demangle::Node **)a2;
        if ((v315 - 1) < 2) {
          goto LABEL_881;
        }
        if (v315 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1495;
        }
        v316 = *(swift::Demangle::Node ***)a2;
LABEL_881:
        unsigned int v317 = v7 + 1;
        unint64_t v318 = 1;
        while (2)
        {
          unint64_t v320 = *((unsigned __int8 *)a2 + 18);
          if (v320 == 2) {
            goto LABEL_887;
          }
          if (v320 != 5) {
            goto LABEL_1495;
          }
          unint64_t v320 = *((unsigned int *)a2 + 2);
LABEL_887:
          if (v320 <= v318) {
            goto LABEL_1495;
          }
          std::string::append(this, ", ", 2uLL);
          int v321 = *((unsigned __int8 *)a2 + 18);
          if (v321 == 2)
          {
            unint64_t v322 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v321 != 5) {
              goto LABEL_882;
            }
            unint64_t v322 = *((unsigned int *)a2 + 2);
          }
          if (v322 > v318)
          {
            unsigned int v323 = v321 - 1;
            v324 = a2;
            if (v323 >= 2) {
              v324 = *(swift::Demangle::Node **)a2;
            }
            v319 = (swift::Demangle::Node *)*((void *)v324 + v318);
            goto LABEL_883;
          }
LABEL_882:
          v319 = 0;
LABEL_883:
          ++v318;
          continue;
        }
      case 3:
        goto LABEL_823;
      case 4:
      case 0x72:
      case 0x122:
      case 0x155:
      case 0x156:
        goto LABEL_824;
      case 5:
        int v489 = *((unsigned __int8 *)a2 + 18);
        v490 = (swift::Demangle::Node **)a2;
        if ((v489 - 1) < 2) {
          goto LABEL_1379;
        }
        if (v489 == 5 && *((_DWORD *)a2 + 2))
        {
          v490 = *(swift::Demangle::Node ***)a2;
LABEL_1379:
          v491 = *v490;
        }
        else
        {
          v491 = 0;
        }
        std::string::push_back(this, 46);
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::Node **)a2;
        }
        uint64_t v564 = *((void *)a2 + 1);
        v274 = *(const std::string::value_type **)v564;
        std::string::size_type v276 = *(void *)(v564 + 8);
        v275 = this;
        goto LABEL_822;
      case 6:
        std::string::append(this, "associated type metadata accessor for ", 0x26uLL);
        int v46 = *((unsigned __int8 *)a2 + 18);
        int v47 = a2;
        if (v46 == 2) {
          goto LABEL_91;
        }
        if (v46 != 5) {
          goto LABEL_92;
        }
        goto LABEL_89;
      case 7:
        unint64_t v43 = "default associated type metadata accessor for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 46;
        goto LABEL_318;
      case 8:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v346 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v346 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v346, (swift::Demangle::Node *)&__str, a3);
        v495 = "accessor macro @";
        goto LABEL_1408;
      case 9:
        std::string::append(this, "associated type witness table accessor for ", 0x2BuLL);
        int v133 = *((unsigned __int8 *)a2 + 18);
        unint64_t v134 = a2;
        if (v133 == 2) {
          goto LABEL_341;
        }
        if (v133 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v134 = *(swift::Demangle::Node **)a2;
LABEL_341:
          unint64_t v135 = (swift::Demangle::Node *)*((void *)v134 + 1);
        }
        else
        {
          unint64_t v135 = 0;
        }
        std::string::append(this, " : ", 3uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v52 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
        }
        else {
          unint64_t v52 = 0;
        }
        goto LABEL_468;
      case 0xA:
        std::string::append(this, "base witness table accessor for ", 0x20uLL);
        int v51 = *((unsigned __int8 *)a2 + 18);
        int v47 = a2;
        if (v51 == 2) {
          goto LABEL_91;
        }
        if (v51 != 5) {
          goto LABEL_92;
        }
LABEL_89:
        if (*((_DWORD *)a2 + 2) < 2u)
        {
LABEL_92:
          unint64_t v52 = 0;
        }
        else
        {
          int v47 = *(swift::Demangle::Node **)a2;
LABEL_91:
          unint64_t v52 = (swift::Demangle::Node *)*((void *)v47 + 1);
        }
        ++v7;
LABEL_468:
        unsigned int v180 = " in ";
        int v181 = this;
        std::string::size_type v182 = 4;
        goto LABEL_469;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
      case 0xF5:
        v278 = this;
        v279 = 0;
        v280 = a2;
        goto LABEL_828;
      case 0xC:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v481 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v481 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v481, (swift::Demangle::Node *)&__str, a3);
        v495 = "body macro @";
        goto LABEL_1408;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_823;
      case 0x13:
      case 0x4C:
        v281 = (std::string::value_type *)&unk_215276E75;
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        goto LABEL_1482;
      case 0x14:
      case 0x17:
      case 0x65:
      case 0x6A:
      case 0x70:
      case 0x92:
        goto LABEL_1007;
      case 0x15:
        v274 = "Builtin.TheTupleType";
        v275 = this;
        std::string::size_type v276 = 20;
        goto LABEL_822;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xB4:
      case 0xDB:
      case 0xEA:
      case 0x106:
        v281 = (std::string::value_type *)&unk_215276E75;
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
        goto LABEL_1482;
      case 0x19:
        unint64_t v43 = "class metadata base offset for ";
        goto LABEL_108;
      case 0x1A:
        std::string::append(this, "concrete protocol conformance ", 0x1EuLL);
        int v144 = *((unsigned __int8 *)a2 + 18);
        if (v144 == 4)
        {
          std::string::append(this, "#", 1uLL);
          unint64_t v145 = swift::Demangle::DemanglerPrinter::operator<<(this, *(void *)a2);
          std::string::append(v145, " ", 1uLL);
          int v144 = *((unsigned __int8 *)a2 + 18);
        }
        __int16 v146 = (swift::Demangle::Node **)a2;
        if ((v144 - 1) < 2) {
          goto LABEL_365;
        }
        if (v144 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v146 = *(swift::Demangle::Node ***)a2;
LABEL_365:
          int v147 = *v146;
        }
        else
        {
          int v147 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        int v193 = *((unsigned __int8 *)a2 + 18);
        int v194 = a2;
        if (v193 == 2) {
          goto LABEL_515;
        }
        if (v193 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v194 = *(swift::Demangle::Node **)a2;
LABEL_515:
          unsigned int v195 = (swift::Demangle::Node *)*((void *)v194 + 1);
        }
        else
        {
          unsigned int v195 = 0;
        }
        if (*((unsigned char *)a2 + 18) != 5) {
          goto LABEL_823;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        uint64_t v196 = *(void *)(*(void *)a2 + 16);
        int v197 = *(unsigned __int8 *)(v196 + 18);
        if ((v197 - 1) >= 2 && (v197 != 5 || !*(_DWORD *)(v196 + 8))) {
          goto LABEL_823;
        }
        int v157 = " with conditional requirements: ";
        unint64_t v158 = this;
        std::string::size_type v159 = 32;
        goto LABEL_523;
      case 0x1B:
        v372 = "pack protocol conformance ";
        v373 = this;
        std::string::size_type v374 = 26;
        goto LABEL_1513;
      case 0x1C:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v377 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v377 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v377, (swift::Demangle::Node *)&__str, a3);
        v495 = "conformance macro @";
        goto LABEL_1408;
      case 0x1D:
        int v488 = *((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u;
        goto LABEL_1485;
      case 0x1E:
        std::string::size_type v28 = "coroutine continuation prototype for ";
        goto LABEL_118;
      case 0x1F:
        v479 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          v479 = *(swift::Demangle::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v479 + 16) == 24) {
          size_t v416 = 21;
        }
        else {
          size_t v416 = 6;
        }
        if (*(_WORD *)(*(void *)v479 + 16) == 24) {
          v281 = "__deallocating_deinit";
        }
        else {
          v281 = "deinit";
        }
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
LABEL_1344:
        int v443 = 0;
        goto LABEL_1484;
      case 0x20:
      case 0xE8:
        goto LABEL_311;
      case 0x21:
        v360 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v360 = *(swift::Demangle::Node **)a2;
        }
        goto LABEL_1485;
      case 0x22:
        v372 = "dependent associated conformance ";
        v373 = this;
        std::string::size_type v374 = 33;
        goto LABEL_1513;
      case 0x23:
        int v106 = *((unsigned __int8 *)a2 + 18);
        unint64_t v107 = a2;
        if (v106 == 2) {
          goto LABEL_251;
        }
        if (v106 != 5) {
          goto LABEL_252;
        }
        unsigned int v108 = *((_DWORD *)a2 + 2);
        if (v108 < 2) {
          goto LABEL_255;
        }
        unint64_t v107 = *(swift::Demangle::Node **)a2;
LABEL_251:
        std::string::push_back(this, 46);
        int v106 = *((unsigned __int8 *)a2 + 18);
LABEL_252:
        if ((v106 - 1) < 2) {
          goto LABEL_299;
        }
        if (v106 != 5) {
          goto LABEL_496;
        }
        unsigned int v108 = *((_DWORD *)a2 + 2);
LABEL_255:
        if (!v108) {
          goto LABEL_496;
        }
        goto LABEL_298;
      case 0x24:
        int v103 = *((unsigned __int8 *)a2 + 18);
        uint64_t v104 = (swift::Demangle::Node **)a2;
        if ((v103 - 1) < 2) {
          goto LABEL_244;
        }
        if (v103 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v105 = 0;
            goto LABEL_801;
          }
          uint64_t v104 = *(swift::Demangle::Node ***)a2;
LABEL_244:
          unint64_t v105 = *v104;
        }
        else
        {
          unint64_t v105 = 0;
        }
        if (v103 == 2) {
          goto LABEL_631;
        }
        if (v103 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_631:
          long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
          goto LABEL_802;
        }
LABEL_801:
        long long v10 = 0;
LABEL_802:
        std::string::append(this, ": ", 2uLL);
        goto LABEL_7;
      case 0x25:
      case 0x2A:
        printer_unreachable("should be printed as a child of a DependentGenericSignature");
      case 0x26:
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::Node **)a2;
        }
        std::function<std::string ()(unsigned long long,unsigned long long)>::operator()((uint64_t)&this[2].__r_.__value_.__r.__words[2], **(unsigned int **)a2, **((unsigned int **)a2 + 1));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(this, (const std::string::value_type *)p_str, size);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_823;
      case 0x27:
        int v38 = *((unsigned __int8 *)a2 + 18);
        unint64_t v39 = (swift::Demangle::Node **)a2;
        if ((v38 - 1) < 2) {
          goto LABEL_62;
        }
        if (v38 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            size_t v40 = 0;
            goto LABEL_733;
          }
          unint64_t v39 = *(swift::Demangle::Node ***)a2;
LABEL_62:
          size_t v40 = *v39;
        }
        else
        {
          size_t v40 = 0;
        }
        if (v38 == 2) {
          goto LABEL_600;
        }
        if (v38 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_600:
          long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
          goto LABEL_734;
        }
LABEL_733:
        long long v10 = 0;
LABEL_734:
        std::string::append(this, " == ", 4uLL);
        goto LABEL_7;
      case 0x28:
        int v356 = *((unsigned __int8 *)a2 + 18);
        v357 = (swift::Demangle::Node **)a2;
        if ((v356 - 1) < 2) {
          goto LABEL_947;
        }
        if (v356 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v358 = 0;
LABEL_1808:
            v567 = 0;
LABEL_1809:
            unsigned int v609 = v7 + 1;
            std::string::append(this, ".shape == ", 0xAuLL);
            v538 = ".shape";
            v562 = this;
            std::string::size_type v563 = 6;
LABEL_1810:
            std::string::append(v562, v538, v563);
            return 0;
          }
          v357 = *(swift::Demangle::Node ***)a2;
LABEL_947:
          v358 = *v357;
        }
        else
        {
          v358 = 0;
        }
        if (v356 == 2)
        {
LABEL_1659:
          v567 = (swift::Demangle::Node *)*((void *)a2 + 1);
          goto LABEL_1809;
        }
        if (v356 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1659;
        }
        goto LABEL_1808;
      case 0x29:
        int v485 = *((unsigned __int8 *)a2 + 18);
        v486 = (swift::Demangle::Node **)a2;
        if ((v485 - 1) < 2) {
          goto LABEL_1366;
        }
        if (v485 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v487 = 0;
LABEL_1812:
            v577 = 0;
LABEL_1813:
            unsigned int v610 = v7 + 1;
            std::string::append(this, ": ", 2uLL);
            v611 = "_UnknownLayout";
            std::string::size_type v612 = 14;
            switch(**v577)
            {
              case 'C':
                v611 = "AnyObject";
                std::string::size_type v612 = 9;
                break;
              case 'D':
                v611 = "_NativeClass";
                std::string::size_type v612 = 12;
                break;
              case 'N':
                v611 = "_NativeRefCountedObject";
                std::string::size_type v612 = 23;
                break;
              case 'R':
                v611 = "_RefCountedObject";
                std::string::size_type v612 = 17;
                break;
              case 'T':
                goto LABEL_1818;
              case 'U':
                break;
              default:
                int v613 = **v577 & 0xDF;
                if (v613 == 77)
                {
                  v611 = "_TrivialAtMost";
                  std::string::size_type v612 = 14;
                }
                else if (v613 == 69)
                {
LABEL_1818:
                  v611 = "_Trivial";
                  std::string::size_type v612 = 8;
                }
                else
                {
                  std::string::size_type v612 = 0;
                  v611 = 0;
                }
                break;
            }
            std::string::append(this, v611, v612);
            if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
              goto LABEL_823;
            }
            std::string::append(this, "(", 1uLL);
            if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
              v625 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
            }
            else {
              v625 = 0;
            }
            if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
            {
              std::string::append(this, ", ", 2uLL);
              if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u) {
                v403 = *(swift::Demangle::Node **)(*(void *)a2 + 24);
              }
              else {
                v403 = 0;
              }
              v405 = (_anonymous_namespace_::NodePrinter *)this;
              unsigned int v404 = v610;
LABEL_1116:
            }
            goto LABEL_1495;
          }
          v486 = *(swift::Demangle::Node ***)a2;
LABEL_1366:
          v487 = *v486;
        }
        else
        {
          v487 = 0;
        }
        v576 = a2;
        if (v485 == 2)
        {
LABEL_1700:
          v577 = (unsigned char **)*((void *)v576 + 1);
          goto LABEL_1813;
        }
        if (v485 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v576 = *(swift::Demangle::Node **)a2;
          goto LABEL_1700;
        }
        goto LABEL_1812;
      case 0x2B:
      case 0x2E:
        goto LABEL_823;
      case 0x2C:
        int v141 = *((unsigned __int8 *)a2 + 18);
        unint64_t v142 = (swift::Demangle::Node **)a2;
        if ((v141 - 1) < 2) {
          goto LABEL_358;
        }
        if (v141 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            int v143 = 0;
LABEL_804:
            long long v10 = 0;
LABEL_805:
            v269 = v10;
            while (1)
            {
              while (1)
              {
                v270 = v269;
                int v271 = *((unsigned __int16 *)v269 + 8);
                if (v271 != 232)
                {
                  BOOL v273 = (v271 - 44) > 0x26
                      || ((1 << (v271 - 44)) & 0x4000200001) == 0;
                  if (v273 && v271 != 245) {
                    std::string::push_back(this, 32);
                  }
                  goto LABEL_7;
                }
                int v272 = *((unsigned __int8 *)v270 + 18);
                if ((v272 - 1) >= 2) {
                  break;
                }
LABEL_808:
                v269 = *(swift::Demangle::Node **)v270;
              }
              v269 = 0;
              if (v272 == 5)
              {
                v269 = 0;
                if (*((_DWORD *)v270 + 2))
                {
                  v270 = *(swift::Demangle::Node **)v270;
                  goto LABEL_808;
                }
              }
            }
          }
          unint64_t v142 = *(swift::Demangle::Node ***)a2;
LABEL_358:
          int v143 = *v142;
        }
        else
        {
          int v143 = 0;
        }
        if (v141 == 2)
        {
LABEL_637:
          long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
          goto LABEL_805;
        }
        if (v141 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_637;
        }
        goto LABEL_804;
      case 0x2D:
        int v139 = *((unsigned __int8 *)a2 + 18);
        unsigned int v66 = (swift::Demangle::Node **)a2;
        if ((v139 - 1) < 2) {
          goto LABEL_353;
        }
        if (v139 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_352;
        }
        goto LABEL_403;
      case 0x2F:
        int v94 = "dependent root protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 36;
        goto LABEL_324;
      case 0x30:
        int v94 = "dependent inherited protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 41;
        goto LABEL_324;
      case 0x31:
        int v94 = "dependent associated protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 42;
LABEL_324:
        std::string::append(v95, v94, v96);
        int v126 = *((unsigned __int8 *)a2 + 18);
        if (v126 == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v127 = *(void *)(*(void *)a2 + 16);
        }
        else {
          uint64_t v127 = 0;
        }
        if (*(unsigned char *)(v127 + 18) == 4)
        {
          std::string::append(this, "#", 1uLL);
          snprintf((char *)&__str, 0x20uLL, "%llu", *(void *)v127);
          std::string::append(this, (const std::string::value_type *)&__str);
          std::string::append(this, " ", 1uLL);
          int v126 = *((unsigned __int8 *)a2 + 18);
        }
        unint64_t v128 = (swift::Demangle::Node **)a2;
        if ((v126 - 1) < 2) {
          goto LABEL_334;
        }
        if (v126 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v128 = *(swift::Demangle::Node ***)a2;
LABEL_334:
          unint64_t v129 = *v128;
        }
        else
        {
          unint64_t v129 = 0;
        }
        int v130 = " to ";
        int v131 = this;
        std::string::size_type v132 = 4;
        goto LABEL_504;
      case 0x32:
        goto LABEL_1485;
      case 0x33:
        int v361 = *((unsigned __int8 *)a2 + 18);
        if ((v361 - 1) < 2) {
          goto LABEL_959;
        }
        if (v361 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_959:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "didset";
        goto LABEL_1545;
      case 0x34:
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 != 1) {
            printer_unreachable("bad directness");
          }
          v311 = "indirect";
          std::string::size_type v312 = 8;
        }
        else
        {
          v311 = "direct";
          std::string::size_type v312 = 6;
        }
        std::string::append(this, v311, v312);
        v274 = " ";
        goto LABEL_1496;
      case 0x35:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "distributed thunk ";
LABEL_1320:
        v275 = this;
        std::string::size_type v276 = 18;
        goto LABEL_822;
      case 0x36:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "distributed accessor for ";
LABEL_1291:
        v275 = this;
        std::string::size_type v276 = 25;
        goto LABEL_822;
      case 0x37:
        v274 = "dynamic ";
        goto LABEL_1758;
      case 0x38:
        v274 = "super ";
        goto LABEL_1286;
      case 0x39:
      case 0x55:
        v274 = "Self";
        goto LABEL_1032;
      case 0x3A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "dynamically replaceable thunk for ";
        v275 = this;
        std::string::size_type v276 = 34;
        goto LABEL_822;
      case 0x3B:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "dynamically replaceable key for ";
        v275 = this;
        std::string::size_type v276 = 32;
        goto LABEL_822;
      case 0x3C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "dynamically replaceable variable for ";
        v275 = this;
        std::string::size_type v276 = 37;
        goto LABEL_822;
      case 0x3E:
        unint64_t v43 = "enum case for ";
        goto LABEL_208;
      case 0x3F:
        v274 = "<ERROR TYPE>";
        goto LABEL_1062;
      case 0x42:
        v274 = "@Sendable ";
        goto LABEL_1246;
      case 0x43:
        int v431 = *((unsigned __int8 *)a2 + 18);
        if ((v431 - 1) >= 2 && (v431 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        std::string::push_back(this, 64);
        int v432 = *((unsigned __int8 *)a2 + 18);
        if ((v432 - 1) < 2) {
          goto LABEL_1180;
        }
        if (v432 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1180:
          v433 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v433 = 0;
        }
        v588 = this;
        std::string::value_type v589 = 32;
LABEL_1729:
        std::string::push_back(v588, v589);
        return 0;
      case 0x44:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v359 = *(unsigned __int8 *)a2;
        switch(v359)
        {
          case 'r':
            v292 = "(reverse)";
            break;
          case 'l':
            v292 = "(_linear)";
            break;
          case 'f':
            v292 = "(_forward)";
            v293 = this;
            std::string::size_type v291 = 10;
LABEL_1663:
            std::string::append(v293, v292, v291);
LABEL_1664:
            std::string::push_back(this, 32);
            goto LABEL_823;
          default:
            goto LABEL_1664;
        }
        v293 = this;
        std::string::size_type v291 = 9;
        goto LABEL_1663;
      case 0x45:
        int v335 = *((unsigned __int8 *)a2 + 18);
        v336 = (swift::Demangle::Node **)a2;
        if (v335 == 2) {
          goto LABEL_912;
        }
        switch(v335)
        {
          case 5:
            unsigned int v337 = *((_DWORD *)a2 + 2);
            if (v337 != 2)
            {
              unint64_t v338 = 0;
              goto LABEL_1771;
            }
            v336 = *(swift::Demangle::Node ***)a2;
LABEL_912:
            unint64_t v338 = 1;
            std::string::append(this, " ", 1uLL);
            char v339 = 0;
            int v335 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v338 = 0;
            v597 = 0;
            if ((v339 & 1) == 0) {
              goto LABEL_1775;
            }
            goto LABEL_1773;
          case 2:
LABEL_1773:
            v597 = (swift::Demangle::Node *)*((void *)a2 + v338);
            goto LABEL_1775;
          default:
            unint64_t v338 = 0;
            char v339 = 1;
            break;
        }
        if (v335 != 5)
        {
LABEL_1774:
          v597 = 0;
LABEL_1775:
          v538 = ".Type";
          v562 = this;
          std::string::size_type v563 = 5;
          goto LABEL_1810;
        }
        unsigned int v337 = *((_DWORD *)a2 + 2);
LABEL_1771:
        if (v338 < v337)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1773;
        }
        goto LABEL_1774;
      case 0x46:
        v492 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v492 = *(swift::Demangle::Node **)a2;
        }
        goto LABEL_1485;
      case 0x47:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_709;
        }
        std::string::append(this, "(extension in ", 0xEuLL);
        int v136 = *((unsigned __int8 *)a2 + 18);
        uint64_t v137 = (swift::Demangle::Node **)a2;
        if ((v136 - 1) < 2) {
          goto LABEL_348;
        }
        if (v136 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v137 = *(swift::Demangle::Node ***)a2;
LABEL_348:
          unint64_t v138 = *v137;
        }
        else
        {
          unint64_t v138 = 0;
        }
        std::string::append(this, "):", 2uLL);
LABEL_709:
        int v245 = *((unsigned __int8 *)a2 + 18);
        v246 = a2;
        if (v245 == 2) {
          goto LABEL_713;
        }
        if (v245 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v246 = *(swift::Demangle::Node **)a2;
LABEL_713:
          v247 = (swift::Demangle::Node *)*((void *)v246 + 1);
        }
        else
        {
          v247 = 0;
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3 && !this[1].__r_.__value_.__s.__data_[19]) {
          goto LABEL_718;
        }
        goto LABEL_823;
      case 0x48:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v428 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v428 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v428, (swift::Demangle::Node *)&__str, a3);
        v495 = "extension macro @";
        goto LABEL_1408;
      case 0x49:
        int v35 = *((unsigned __int8 *)a2 + 18);
        uint64_t v36 = (swift::Demangle::Node **)a2;
        if ((v35 - 1) < 2) {
          goto LABEL_57;
        }
        if (v35 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v36 = *(swift::Demangle::Node ***)a2;
LABEL_57:
          uint64_t v37 = *v36;
        }
        else
        {
          uint64_t v37 = 0;
        }
        int v130 = "field offset for ";
        goto LABEL_499;
      case 0x4A:
        goto LABEL_1485;
      case 0x4B:
        unint64_t v43 = "full type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 23;
        goto LABEL_318;
      case 0x4D:
        v287 = "function signature specialization";
        v288 = this;
        v289 = (uint64_t *)a2;
        std::string::size_type v290 = 33;
        goto LABEL_1356;
      case 0x4E:
      case 0x4F:
        printer_unreachable("should be handled in printSpecializationPrefix");
      case 0x50:
        uint64_t v313 = *(void *)a2;
        if ((*(void *)a2 & 0x400) != 0)
        {
          std::string::append(this, "Existential To Protocol Constrained Generic", 0x2BuLL);
          if ((v313 & 0x40) == 0)
          {
            if ((v313 & 0x80) == 0) {
              goto LABEL_1647;
            }
LABEL_1645:
            std::string::append(this, " and ", 5uLL);
LABEL_1646:
            std::string::append(this, "Owned To Guaranteed", 0x13uLL);
            goto LABEL_1647;
          }
          std::string::append(this, " and ", 5uLL);
        }
        else if ((v313 & 0x40) == 0)
        {
          if ((v313 & 0x80) == 0)
          {
            if ((v313 & 0x200) == 0)
            {
              if ((v313 & 0x100) == 0)
              {
                long long v10 = 0;
                if ((int)v313 <= 127)
                {
                  switch((int)v313)
                  {
                    case 0:
                      v274 = "Constant Propagated Function";
                      v275 = this;
                      std::string::size_type v276 = 28;
                      goto LABEL_822;
                    case 1:
                      v274 = "Constant Propagated Global";
                      goto LABEL_1051;
                    case 2:
                      v274 = "Constant Propagated Integer";
                      goto LABEL_1880;
                    case 3:
                      v274 = "Constant Propagated Float";
                      goto LABEL_1291;
                    case 4:
                      v274 = "Constant Propagated String";
                      goto LABEL_1051;
                    case 5:
                      v274 = "Closure Propagated";
                      goto LABEL_1320;
                    case 6:
                      v274 = "Value Promoted from Box";
                      goto LABEL_1760;
                    case 7:
                      v274 = "Stack Promoted from Box";
                      goto LABEL_1760;
                    case 8:
                      v274 = "InOut Converted to Out";
                      goto LABEL_1023;
                    case 9:
                      v274 = "Constant Propagated KeyPath";
LABEL_1880:
                      v275 = this;
                      std::string::size_type v276 = 27;
                      goto LABEL_822;
                    case 64:
                      goto LABEL_1887;
                    default:
                      goto LABEL_824;
                  }
                }
                if ((int)v313 > 511)
                {
                  if (v313 != 512 && v313 != 1024) {
                    goto LABEL_824;
                  }
                }
                else if (v313 != 128 && v313 != 256)
                {
                  goto LABEL_824;
                }
LABEL_1887:
                printer_unreachable("option sets should have been handled earlier");
              }
              goto LABEL_1653;
            }
            goto LABEL_1651;
          }
          goto LABEL_1646;
        }
        std::string::append(this, "Dead", 4uLL);
        if ((v313 & 0x80) == 0)
        {
LABEL_1647:
          if ((v313 & 0x200) == 0)
          {
            if ((v313 & 0x100) == 0) {
              goto LABEL_823;
            }
LABEL_1652:
            std::string::append(this, " and ", 5uLL);
LABEL_1653:
            v274 = "Exploded";
LABEL_1758:
            v275 = this;
            std::string::size_type v276 = 8;
            goto LABEL_822;
          }
          std::string::append(this, " and ", 5uLL);
LABEL_1651:
          std::string::append(this, "Guaranteed To Owned", 0x13uLL);
          if ((v313 & 0x100) == 0) {
            goto LABEL_823;
          }
          goto LABEL_1652;
        }
        goto LABEL_1645;
      case 0x51:
        v474 = *(swift::Demangle **)a2;
        v475 = (const char *)*((void *)a2 + 1);
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::demangleSymbolAsString((uint64_t *)&v640, v474, v475, (unint64_t)&__str, a4);
        swift::Demangle::DemangleOptions::~DemangleOptions((swift::Demangle::DemangleOptions *)&__str);
        if (v641 >= 0) {
          std::string::size_type v476 = HIBYTE(v641);
        }
        else {
          std::string::size_type v476 = *((void *)&v640 + 1);
        }
        if (v476)
        {
          if (v641 >= 0) {
            v477 = (const std::string::value_type *)&v640;
          }
          else {
            v477 = (const std::string::value_type *)v640;
          }
        }
        else
        {
          v477 = *(const std::string::value_type **)a2;
          std::string::size_type v476 = *((void *)a2 + 1);
        }
        std::string::append(this, v477, v476);
        if (SHIBYTE(v641) < 0) {
          operator delete((void *)v640);
        }
        goto LABEL_823;
      case 0x53:
        std::string::append(this, "any ", 4uLL);
        int v482 = *((unsigned __int8 *)a2 + 18);
        v483 = (swift::Demangle::Node **)a2;
        if ((v482 - 1) < 2) {
          goto LABEL_1361;
        }
        if (v482 == 5 && *((_DWORD *)a2 + 2))
        {
          v483 = *(swift::Demangle::Node ***)a2;
LABEL_1361:
          v484 = *v483;
        }
        else
        {
          v484 = 0;
        }
        unsigned int v559 = v7 + 1;
        std::string::append(this, "<", 1uLL);
        int v560 = *((unsigned __int8 *)a2 + 18);
        if (v560 == 2) {
          goto LABEL_1612;
        }
        if (v560 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1612:
          v561 = (swift::Demangle::Node *)*((void *)a2 + 1);
        }
        else
        {
          v561 = 0;
        }
        v538 = ">";
        goto LABEL_1615;
      case 0x54:
        v434 = ", ";
        goto LABEL_1329;
      case 0x56:
        v328 = "generic partial specialization";
        v329 = this;
        v330 = (uint64_t *)a2;
        std::string::size_type v331 = 30;
        goto LABEL_1370;
      case 0x57:
        v328 = "generic not-reabstracted partial specialization";
        v329 = this;
        v330 = (uint64_t *)a2;
        std::string::size_type v331 = 47;
LABEL_1370:
        goto LABEL_823;
      case 0x58:
        unint64_t v43 = "generic protocol witness table for ";
        goto LABEL_317;
      case 0x59:
        unint64_t v43 = "instantiation function for generic protocol witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 62;
        goto LABEL_318;
      case 0x5A:
        unint64_t v43 = "resilient protocol witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 37;
        goto LABEL_318;
      case 0x5B:
      case 0x5D:
        v287 = "generic specialization";
        v288 = this;
        v289 = (uint64_t *)a2;
        std::string::size_type v290 = 22;
        goto LABEL_1356;
      case 0x5C:
        v287 = "generic not re-abstracted specialization";
        v288 = this;
        v289 = (uint64_t *)a2;
        std::string::size_type v290 = 40;
        goto LABEL_1356;
      case 0x5E:
        int v435 = *((unsigned __int8 *)a2 + 18);
        v436 = (swift::Demangle::Node **)a2;
        if ((v435 - 1) < 2) {
          goto LABEL_1192;
        }
        if (v435 == 5 && *((_DWORD *)a2 + 2))
        {
          v436 = *(swift::Demangle::Node ***)a2;
LABEL_1192:
          v437 = *v436;
        }
        else
        {
          v437 = 0;
        }
        unsigned int v553 = v7 + 1;
        unsigned int v554 = *((unsigned __int8 *)a2 + 18);
        if (v554 != 2)
        {
          if (v554 != 5) {
            goto LABEL_823;
          }
          unsigned int v554 = *((_DWORD *)a2 + 2);
          if (v554 < 2) {
            goto LABEL_823;
          }
        }
        uint64_t v555 = v554;
        std::string::append(this, " with ", 6uLL);
        int v556 = *((unsigned __int8 *)a2 + 18);
        v557 = a2;
        if (v556 == 2) {
          goto LABEL_1600;
        }
        if (v556 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v557 = *(swift::Demangle::Node **)a2;
LABEL_1600:
          v558 = (swift::Demangle::Node *)*((void *)v557 + 1);
        }
        else
        {
          v558 = 0;
        }
        if (v555 == 2) {
          goto LABEL_823;
        }
        unint64_t v570 = 2;
        while (1)
        {
          std::string::append(this, " and ", 5uLL);
          int v572 = *((unsigned __int8 *)a2 + 18);
          if (v572 == 2)
          {
            unint64_t v573 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v572 != 5) {
              goto LABEL_1677;
            }
            unint64_t v573 = *((unsigned int *)a2 + 2);
          }
          if (v573 > v570)
          {
            unsigned int v574 = v572 - 1;
            v575 = a2;
            if (v574 >= 2) {
              v575 = *(swift::Demangle::Node **)a2;
            }
            v571 = (swift::Demangle::Node *)*((void *)v575 + v570);
            goto LABEL_1678;
          }
LABEL_1677:
          v571 = 0;
LABEL_1678:
          if (v555 == ++v570) {
            goto LABEL_823;
          }
        }
      case 0x5F:
        v287 = "generic pre-specialization";
        v288 = this;
        v289 = (uint64_t *)a2;
        std::string::size_type v290 = 26;
        goto LABEL_1356;
      case 0x60:
        v287 = "inlined generic function";
        v288 = this;
        v289 = (uint64_t *)a2;
        std::string::size_type v290 = 24;
LABEL_1356:
        goto LABEL_823;
      case 0x61:
        unint64_t v43 = "generic type metadata pattern for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 34;
        goto LABEL_318;
      case 0x62:
        int v447 = *((unsigned __int8 *)a2 + 18);
        if ((v447 - 1) < 2) {
          goto LABEL_1350;
        }
        if (v447 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1446;
        }
        goto LABEL_1349;
      case 0x63:
      case 0xEB:
        goto LABEL_1514;
      case 0x64:
        int v480 = *((unsigned __int8 *)a2 + 18);
        if ((v480 - 1) < 2) {
          goto LABEL_1350;
        }
        if (v480 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_1349:
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1350:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
LABEL_1446:
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "getter";
        goto LABEL_1545;
      case 0x66:
      case 0xA1:
      case 0xD8:
        goto LABEL_1155;
      case 0x67:
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v281 = "__ivar_initializer";
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
        goto LABEL_1204;
      case 0x68:
        goto LABEL_1485;
      case 0x69:
        v274 = "@escaping";
        goto LABEL_1790;
      case 0x6B:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v464 = *(unsigned __int8 *)a2;
        switch(v464)
        {
          case 'f':
            v274 = "(_forward)";
LABEL_1246:
            v275 = this;
            std::string::size_type v276 = 10;
            goto LABEL_822;
          case 'r':
            v274 = "(reverse)";
            break;
          case 'l':
            v274 = "(_linear)";
            break;
          default:
            goto LABEL_823;
        }
        goto LABEL_1790;
      case 0x6C:
        v274 = "@isolated(any)";
        goto LABEL_1454;
      case 0x6D:
        v274 = "sending";
        goto LABEL_1633;
      case 0x6E:
      case 0x6F:
        std::string::size_type v291 = *((void *)a2 + 1);
        if (!v291) {
          goto LABEL_823;
        }
        v292 = *(const std::string::value_type **)a2;
        v293 = this;
        goto LABEL_1663;
      case 0x71:
        std::string::append(this, "@convention(", 0xCuLL);
        int v340 = *((unsigned __int8 *)a2 + 18);
        if (v340 == 1) {
          goto LABEL_1694;
        }
        v341 = (const std::string::value_type ***)a2;
        if (v340 == 2) {
          goto LABEL_1831;
        }
        if (v340 != 5) {
          goto LABEL_1838;
        }
        int v342 = *((_DWORD *)a2 + 2);
        if (v342 != 2)
        {
          if (v342 == 1) {
            goto LABEL_1693;
          }
          goto LABEL_1838;
        }
        v341 = *(const std::string::value_type ****)a2;
LABEL_1831:
        std::string::append(this, **v341, (std::string::size_type)(*v341)[1]);
        std::string::append(this, ", mangledCType: \"", 0x11uLL);
        int v615 = *((unsigned __int8 *)a2 + 18);
        if (v615 == 2) {
          goto LABEL_1835;
        }
        if (v615 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1835:
          v616 = (swift::Demangle::Node *)*((void *)a2 + 1);
        }
        else
        {
          v616 = 0;
        }
        std::string::push_back(this, 34);
        goto LABEL_1838;
      case 0x73:
        goto LABEL_823;
      case 0x74:
        std::string::append(this, "for <", 5uLL);
        int v445 = *((unsigned __int8 *)a2 + 18);
        if ((v445 - 1) < 2) {
          goto LABEL_1214;
        }
        if (v445 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1528;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1214:
        v446 = *(swift::Demangle::Node **)a2;
        goto LABEL_1529;
      case 0x75:
        int v286 = 2 * this[1].__r_.__value_.__s.__data_[15];
        v442 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v442 = *(swift::Demangle::Node **)a2;
        }
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = **((_DWORD **)v442 + 1) + 1;
        int v282 = v6 & 1;
        v281 = "implicit closure #";
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
LABEL_1204:
        int v443 = 0;
        size_t v416 = 18;
        goto LABEL_1484;
      case 0x76:
      case 0x78:
        int v12 = *((unsigned __int8 *)a2 + 18);
        int v13 = (swift::Demangle::Node **)a2;
        if ((v12 - 1) < 2) {
          goto LABEL_14;
        }
        if (v12 == 5 && *((_DWORD *)a2 + 2))
        {
          int v13 = *(swift::Demangle::Node ***)a2;
LABEL_14:
          uint64_t v14 = *v13;
        }
        else
        {
          uint64_t v14 = 0;
        }
        std::string::append(this, " ", 1uLL);
        int v151 = *((unsigned __int8 *)a2 + 18);
        if (v151 != 5) {
          goto LABEL_549;
        }
        uint64_t v152 = *((unsigned int *)a2 + 2);
        if (v152 != 3) {
          goto LABEL_384;
        }
        int v151 = *((unsigned __int8 *)a2 + 18);
        if (v151 != 5) {
          goto LABEL_549;
        }
        uint64_t v152 = *((unsigned int *)a2 + 2);
LABEL_384:
        if (v152 != 4) {
          goto LABEL_553;
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v153 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
        }
        else {
          unint64_t v153 = 0;
        }
        int v151 = *((unsigned __int8 *)a2 + 18);
LABEL_549:
        switch(v151)
        {
          case 1:
            long long v10 = *(swift::Demangle::Node **)a2;
            goto LABEL_7;
          case 2:
            long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
            goto LABEL_7;
          case 5:
            uint64_t v152 = *((unsigned int *)a2 + 2);
LABEL_553:
            if (v152)
            {
              long long v10 = *(swift::Demangle::Node **)(*(void *)a2 + 8 * (v152 - 1));
              goto LABEL_7;
            }
            break;
        }
        goto LABEL_799;
      case 0x77:
        std::string::append(this, "@substituted ", 0xDuLL);
        int v353 = *((unsigned __int8 *)a2 + 18);
        v354 = (swift::Demangle::Node **)a2;
        if ((v353 - 1) < 2) {
          goto LABEL_942;
        }
        if (v353 == 5 && *((_DWORD *)a2 + 2))
        {
          v354 = *(swift::Demangle::Node ***)a2;
LABEL_942:
          v355 = *v354;
        }
        else
        {
          v355 = 0;
        }
        std::string::append(this, " for <", 6uLL);
        int v537 = *((unsigned __int8 *)a2 + 18);
        if (v537 == 2) {
          goto LABEL_1527;
        }
        if (v537 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1527:
          v446 = (swift::Demangle::Node *)*((void *)a2 + 1);
        }
        else
        {
LABEL_1528:
          v446 = 0;
        }
LABEL_1529:
        goto LABEL_1530;
      case 0x79:
        v343 = "@yields ";
        v344 = this;
        std::string::size_type v345 = 8;
        goto LABEL_1185;
      case 0x7A:
        v343 = "@error ";
        v344 = this;
        std::string::size_type v345 = 7;
LABEL_1185:
        std::string::append(v344, v343, v345);
        v434 = " ";
LABEL_1329:
        v478 = this;
        v457 = a2;
        goto LABEL_1330;
      case 0x7B:
        unint64_t v43 = "inout ";
        unint64_t v44 = this;
        std::string::size_type v45 = 6;
        goto LABEL_318;
      case 0x7C:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        v274 = " infix";
        goto LABEL_1286;
      case 0x7D:
        goto LABEL_1485;
      case 0x7E:
        int v379 = *((unsigned __int8 *)a2 + 18);
        if ((v379 - 1) < 2) {
          goto LABEL_1029;
        }
        if (v379 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1029:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "init";
        goto LABEL_1605;
      case 0x7F:
        unint64_t v43 = "isolated ";
        goto LABEL_292;
      case 0x80:
        unint64_t v43 = "sending ";
        goto LABEL_290;
      case 0x81:
        v274 = "@isolated(any) ";
        v275 = this;
        std::string::size_type v276 = 15;
        goto LABEL_822;
      case 0x82:
        v274 = "sending ";
        goto LABEL_1758;
      case 0x83:
      case 0x84:
        if (v11 == 131) {
          v299 = "key path getter for ";
        }
        else {
          v299 = "key path setter for ";
        }
        std::string::append(this, v299, 0x14uLL);
        int v300 = *((unsigned __int8 *)a2 + 18);
        v301 = (swift::Demangle::Node **)a2;
        if ((v300 - 1) < 2) {
          goto LABEL_850;
        }
        if (v300 == 5 && *((_DWORD *)a2 + 2))
        {
          v301 = *(swift::Demangle::Node ***)a2;
LABEL_850:
          v302 = *v301;
        }
        else
        {
          v302 = 0;
        }
        unsigned int v507 = v7 + 1;
        std::string::append(this, " : ", 3uLL);
        int v508 = *((unsigned __int8 *)a2 + 18);
        v509 = a2;
        if (v508 == 2) {
          goto LABEL_1438;
        }
        if (v508 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v509 = *(swift::Demangle::Node **)a2;
LABEL_1438:
          v510 = (swift::Demangle::Node *)*((void *)v509 + 1);
          if (*((_WORD *)v510 + 8) == 217) {
            std::string::append(this, ", ", 2uLL);
          }
          if (*((unsigned char *)a2 + 18) == 5)
          {
            unint64_t v511 = 2;
            do
            {
              if (v511 >= *((unsigned int *)a2 + 2)) {
                break;
              }
              v512 = *(swift::Demangle::Node **)(*(void *)a2 + 8 * v511);
              if (*((_WORD *)v512 + 8) == 217) {
                std::string::append(this, ", ", 2uLL);
              }
              ++v511;
            }
            while (*((unsigned char *)a2 + 18) == 5);
          }
        }
        goto LABEL_823;
      case 0x85:
      case 0x86:
        std::string::append(this, "key path index ", 0xFuLL);
        int v303 = *((unsigned __int16 *)a2 + 8);
        if (v303 == 133) {
          v304 = "equality";
        }
        else {
          v304 = "hash";
        }
        if (v303 == 133) {
          std::string::size_type v305 = 8;
        }
        else {
          std::string::size_type v305 = 4;
        }
        std::string::append(this, v304, v305);
        std::string::append(this, " operator for ", 0xEuLL);
        int v306 = *((unsigned __int8 *)a2 + 18);
        unsigned int v307 = v306 - 1;
        switch(v306)
        {
          case 1:
            uint64_t v309 = 0;
            int v308 = 1;
            v310 = a2;
            goto LABEL_1459;
          case 5:
            int v308 = *((_DWORD *)a2 + 2);
            if (v308)
            {
              uint64_t v309 = (v308 - 1);
              v310 = *(swift::Demangle::Node **)a2;
              int v306 = *((_DWORD *)a2 + 2);
              goto LABEL_1459;
            }
            break;
          case 2:
            int v308 = 2;
            uint64_t v309 = 1;
            int v306 = 2;
            v310 = a2;
LABEL_1459:
            v515 = (unsigned __int16 *)*((void *)v310 + v309);
            goto LABEL_1461;
        }
        int v306 = 0;
        int v308 = 0;
        v515 = 0;
LABEL_1461:
        int v516 = v515[8];
        if (v516 == 217)
        {
          --v306;
          uint64_t v517 = (v308 - 2);
          v518 = a2;
          if (v307 >= 2) {
            v518 = *(swift::Demangle::Node **)a2;
          }
          v515 = (unsigned __int16 *)*((void *)v518 + v517);
          int v516 = v515[8];
        }
        if (v516 == 43)
        {
          --v306;
        }
        std::string::append(this, "(", 1uLL);
        if (!v306) {
          goto LABEL_1495;
        }
        unsigned int v519 = v7 + 1;
        int v520 = *((unsigned __int8 *)a2 + 18);
        v521 = (swift::Demangle::Node **)a2;
        if ((v520 - 1) < 2) {
          goto LABEL_1472;
        }
        if (v520 == 5 && *((_DWORD *)a2 + 2))
        {
          v521 = *(swift::Demangle::Node ***)a2;
LABEL_1472:
          v522 = *v521;
        }
        else
        {
          v522 = 0;
        }
        if (v306 == 1)
        {
LABEL_1495:
          v274 = ")";
LABEL_1496:
          v275 = this;
          std::string::size_type v276 = 1;
          goto LABEL_822;
        }
        unint64_t v527 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v529 = *((unsigned __int8 *)a2 + 18);
          if (v529 == 2)
          {
            unint64_t v530 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v529 != 5) {
              goto LABEL_1498;
            }
            unint64_t v530 = *((unsigned int *)a2 + 2);
          }
          if (v530 > v527)
          {
            unsigned int v531 = v529 - 1;
            v532 = a2;
            if (v531 >= 2) {
              v532 = *(swift::Demangle::Node **)a2;
            }
            v528 = (swift::Demangle::Node *)*((void *)v532 + v527);
            goto LABEL_1499;
          }
LABEL_1498:
          v528 = 0;
LABEL_1499:
          if (v306 == ++v527) {
            goto LABEL_1495;
          }
        }
      case 0x87:
        std::string::append(this, "lazy protocol witness table accessor for type ", 0x2EuLL);
        int v41 = *((unsigned __int8 *)a2 + 18);
        std::string v42 = (swift::Demangle::Node **)a2;
        if ((v41 - 1) < 2) {
          goto LABEL_261;
        }
        if (v41 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_388;
        }
        goto LABEL_260;
      case 0x88:
        std::string::append(this, "lazy protocol witness table cache variable for type ", 0x34uLL);
        int v109 = *((unsigned __int8 *)a2 + 18);
        std::string v42 = (swift::Demangle::Node **)a2;
        if ((v109 - 1) < 2) {
          goto LABEL_261;
        }
        if (v109 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_260:
          std::string v42 = *(swift::Demangle::Node ***)a2;
LABEL_261:
          unint64_t v110 = *v42;
        }
        else
        {
LABEL_388:
          unint64_t v110 = 0;
        }
        int v130 = " and conformance ";
LABEL_499:
        int v131 = this;
        std::string::size_type v132 = 17;
        goto LABEL_504;
      case 0x89:
        int v465 = *((unsigned __int8 *)a2 + 18);
        v466 = a2;
        if (v465 == 2) {
          goto LABEL_1284;
        }
        if (v465 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v466 = *(swift::Demangle::Node **)a2;
LABEL_1284:
          v467 = (swift::Demangle::Node *)*((void *)v466 + 1);
        }
        else
        {
          v467 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[9]) {
          goto LABEL_823;
        }
        std::string::append(this, " #", 2uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          a2 = *(swift::Demangle::Node **)a2;
        }
        uint64_t v425 = **(void **)a2 + 1;
        goto LABEL_1156;
      case 0x8A:
        if (*((unsigned char *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) == 3) {
            int v286 = 1;
          }
          else {
            int v286 = 2;
          }
        }
        else
        {
          int v286 = 2;
        }
        v281 = (std::string::value_type *)&unk_215276E75;
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        goto LABEL_1482;
      case 0x8B:
        int v83 = *((unsigned __int8 *)a2 + 18);
        if ((v83 - 1) < 2) {
          goto LABEL_183;
        }
        if (v83 != 5) {
          goto LABEL_559;
        }
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
LABEL_183:
        std::string::append(this, "module ", 7uLL);
        int v84 = *((unsigned __int8 *)a2 + 18);
        unint64_t v85 = (swift::Demangle::Node **)a2;
        if ((v84 - 1) < 2) {
          goto LABEL_187;
        }
        if (v84 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v85 = *(swift::Demangle::Node ***)a2;
LABEL_187:
          unsigned int v86 = *v85;
        }
        else
        {
          unsigned int v86 = 0;
        }
        int v83 = *((unsigned __int8 *)a2 + 18);
LABEL_559:
        if (v83 == 2) {
          goto LABEL_562;
        }
        if (v83 != 5) {
          goto LABEL_569;
        }
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_823;
        }
LABEL_562:
        std::string::append(this, " file ", 6uLL);
        int v206 = *((unsigned __int8 *)a2 + 18);
        int v207 = a2;
        if (v206 == 2) {
          goto LABEL_566;
        }
        if (v206 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v207 = *(swift::Demangle::Node **)a2;
LABEL_566:
          uint64_t v208 = (swift::Demangle::Node *)*((void *)v207 + 1);
        }
        else
        {
          uint64_t v208 = 0;
        }
        int v83 = *((unsigned __int8 *)a2 + 18);
LABEL_569:
        if (v83 != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        std::string::append(this, " line ", 6uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          int v209 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
        }
        else {
          int v209 = 0;
        }
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_823;
        }
        std::string::append(this, " column ", 8uLL);
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_799;
        }
        long long v10 = *(swift::Demangle::Node **)(*(void *)a2 + 24);
        goto LABEL_7;
      case 0x8C:
        goto LABEL_1485;
      case 0x8D:
        int v453 = *((unsigned __int8 *)a2 + 18);
        if ((v453 - 1) < 2) {
          goto LABEL_1244;
        }
        if (v453 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1244:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "materializeForSet";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 17;
        goto LABEL_1606;
      case 0x8E:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v380 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v380 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v380, (swift::Demangle::Node *)&__str, a3);
        v495 = "member macro @";
        goto LABEL_1408;
      case 0x8F:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v378 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v378 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v378, (swift::Demangle::Node *)&__str, a3);
        v495 = "memberAttribute macro @";
        goto LABEL_1408;
      case 0x90:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "merged ";
        goto LABEL_1633;
      case 0x91:
        int v385 = *((unsigned __int8 *)a2 + 18);
        v386 = (swift::Demangle::Node **)a2;
        if (v385 == 2) {
          goto LABEL_1067;
        }
        switch(v385)
        {
          case 5:
            unsigned int v387 = *((_DWORD *)a2 + 2);
            if (v387 != 2)
            {
              unint64_t v388 = 0;
              goto LABEL_1777;
            }
            v386 = *(swift::Demangle::Node ***)a2;
LABEL_1067:
            unint64_t v388 = 1;
            std::string::append(this, " ", 1uLL);
            char v389 = 0;
            int v385 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v388 = 0;
            v598 = 0;
            if ((v389 & 1) == 0) {
              goto LABEL_1781;
            }
            goto LABEL_1779;
          case 2:
LABEL_1779:
            v598 = (unsigned __int16 *)*((void *)a2 + v388);
            goto LABEL_1781;
          default:
            unint64_t v388 = 0;
            char v389 = 1;
            break;
        }
        if (v385 != 5)
        {
LABEL_1780:
          v598 = 0;
LABEL_1781:
          int v603 = *((unsigned __int8 *)v598 + 18);
          if ((v603 - 1) >= 2)
          {
            if (v603 != 5 || !*((_DWORD *)v598 + 2))
            {
              v604 = 0;
              goto LABEL_1787;
            }
            v598 = *(unsigned __int16 **)v598;
          }
          v604 = *(unsigned __int16 **)v598;
LABEL_1787:
          int v605 = v604[8];
          if ((v605 - 190) < 3 || v605 == 69)
          {
            v274 = ".Protocol";
LABEL_1790:
            v275 = this;
            std::string::size_type v276 = 9;
          }
          else
          {
            v274 = ".Type";
LABEL_1014:
            v275 = this;
            std::string::size_type v276 = 5;
          }
          goto LABEL_822;
        }
        unsigned int v387 = *((_DWORD *)a2 + 2);
LABEL_1777:
        if (v388 < v387)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1779;
        }
        goto LABEL_1780;
      case 0x93:
        unint64_t v43 = "metaclass for ";
        goto LABEL_208;
      case 0x94:
        long long v15 = "method lookup function for ";
        goto LABEL_309;
      case 0x95:
        long long v15 = "ObjC metadata update function for ";
        uint64_t v31 = this;
        std::string::size_type v32 = 34;
        goto LABEL_310;
      case 0x96:
        long long v15 = "ObjC resilient class stub for ";
        uint64_t v31 = this;
        std::string::size_type v32 = 30;
        goto LABEL_310;
      case 0x97:
        long long v15 = "full ObjC resilient class stub for ";
        uint64_t v31 = this;
        std::string::size_type v32 = 35;
        goto LABEL_310;
      case 0x98:
        int v370 = *((unsigned __int8 *)a2 + 18);
        if ((v370 - 1) < 2) {
          goto LABEL_989;
        }
        if (v370 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_989:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "modify";
        goto LABEL_1545;
      case 0x99:
        if (!this[1].__r_.__value_.__s.__data_[4]) {
          goto LABEL_823;
        }
        goto LABEL_1007;
      case 0x9A:
        int v347 = *((unsigned __int8 *)a2 + 18);
        if ((v347 - 1) < 2) {
          goto LABEL_930;
        }
        if (v347 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_930:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "nativeOwningAddressor";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 21;
        goto LABEL_1606;
      case 0x9B:
        int v326 = *((unsigned __int8 *)a2 + 18);
        if ((v326 - 1) < 2) {
          goto LABEL_901;
        }
        if (v326 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_901:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "nativeOwningMutableAddressor";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 28;
        goto LABEL_1606;
      case 0x9C:
        int v371 = *((unsigned __int8 *)a2 + 18);
        if ((v371 - 1) < 2) {
          goto LABEL_994;
        }
        if (v371 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_994:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "nativePinningAddressor";
        goto LABEL_1569;
      case 0x9D:
        int v414 = *((unsigned __int8 *)a2 + 18);
        if ((v414 - 1) < 2) {
          goto LABEL_1137;
        }
        if (v414 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1137:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "nativePinningMutableAddressor";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 29;
        goto LABEL_1606;
      case 0x9E:
        unint64_t v43 = "nominal type descriptor for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 28;
        goto LABEL_318;
      case 0x9F:
        unint64_t v43 = "nominal type descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 43;
        goto LABEL_318;
      case 0xA0:
        v274 = "@nonobjc ";
        goto LABEL_1790;
      case 0xA2:
        goto LABEL_961;
      case 0xA3:
        std::string::append(this, "predefined ", 0xBuLL);
LABEL_961:
        std::string::append(this, "@objc completion handler block implementation for ", 0x32uLL);
        int v362 = *((unsigned __int8 *)a2 + 18);
        if (v362 != 5) {
          goto LABEL_964;
        }
        unsigned int v363 = *((_DWORD *)a2 + 2);
        if (v363 < 4) {
          goto LABEL_967;
        }
        int v362 = *((unsigned __int8 *)a2 + 18);
LABEL_964:
        v364 = (swift::Demangle::Node **)a2;
        if ((v362 - 1) < 2) {
          goto LABEL_969;
        }
        if (v362 != 5) {
          goto LABEL_1421;
        }
        unsigned int v363 = *((_DWORD *)a2 + 2);
LABEL_967:
        if (v363)
        {
          v364 = *(swift::Demangle::Node ***)a2;
LABEL_969:
          v365 = *v364;
        }
        else
        {
LABEL_1421:
          v365 = 0;
        }
        unsigned int v502 = v7 + 1;
        std::string::append(this, " with result type ", 0x12uLL);
        int v503 = *((unsigned __int8 *)a2 + 18);
        v504 = a2;
        if (v503 == 2) {
          goto LABEL_1426;
        }
        if (v503 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v504 = *(swift::Demangle::Node **)a2;
LABEL_1426:
          v505 = (swift::Demangle::Node *)*((void *)v504 + 1);
        }
        else
        {
          v505 = 0;
        }
        uint64_t v506 = **(void **)(*(void *)a2 + 16);
        switch(v506)
        {
          case 0:
            goto LABEL_823;
          case 2:
            v274 = " zero on error";
LABEL_1454:
            v275 = this;
            std::string::size_type v276 = 14;
            break;
          case 1:
            v274 = " nonzero on error";
LABEL_1432:
            v275 = this;
            std::string::size_type v276 = 17;
            break;
          default:
            v274 = " <invalid error flag>";
            v275 = this;
            std::string::size_type v276 = 21;
            break;
        }
        goto LABEL_822;
      case 0xA4:
        v274 = "@objc ";
        goto LABEL_1286;
      case 0xA8:
        int v390 = *((unsigned __int8 *)a2 + 18);
        if ((v390 - 1) < 2) {
          goto LABEL_1074;
        }
        if (v390 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1074:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "owningAddressor";
        goto LABEL_1548;
      case 0xA9:
        int v375 = *((unsigned __int8 *)a2 + 18);
        if ((v375 - 1) < 2) {
          goto LABEL_1003;
        }
        if (v375 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1003:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "owningMutableAddressor";
        goto LABEL_1569;
      case 0xAA:
        if (this[1].__r_.__value_.__s.__data_[10]) {
          goto LABEL_1039;
        }
        v348 = "partial apply forwarder";
        v349 = this;
        std::string::size_type v350 = 23;
        goto LABEL_1509;
      case 0xAB:
        if (this[1].__r_.__value_.__s.__data_[10])
        {
LABEL_1039:
          v348 = "partial apply";
          v349 = this;
          std::string::size_type v350 = 13;
        }
        else
        {
          v348 = "partial apply ObjC forwarder";
          v349 = this;
          std::string::size_type v350 = 28;
        }
LABEL_1509:
        std::string::append(v349, v348, v350);
        int v533 = *((unsigned __int8 *)a2 + 18);
        if ((v533 - 1) >= 2 && (v533 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        v372 = " for ";
        v373 = this;
        std::string::size_type v374 = 5;
        goto LABEL_1513;
      case 0xAC:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v444 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v444 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v444, (swift::Demangle::Node *)&__str, a3);
        v495 = "peer macro @";
        goto LABEL_1408;
      case 0xAD:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        v274 = " postfix";
        goto LABEL_1758;
      case 0xAE:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v393 = *(swift::Demangle **)(*(void *)a2 + 16);
        }
        else {
          v393 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v633 = 0;
        uint64_t v634 = 0;
        v635 = &unk_26C5DD7E8;
        v636 = swift::Demangle::genericParameterName;
        v637 = &v635;
        swift::Demangle::nodeToString((uint64_t *)&v638, v393, (swift::Demangle::Node *)&__str, a3);
        v495 = "preamble macro @";
LABEL_1408:
        v496 = std::string::insert(&v638, 0, v495);
        std::string::size_type v497 = v496->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v639.__r_.__value_.__l.__data_ = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
        v639.__r_.__value_.__r.__words[2] = v497;
        v496->__r_.__value_.__l.__size_ = 0;
        v496->__r_.__value_.__r.__words[2] = 0;
        v496->__r_.__value_.__r.__words[0] = 0;
        v498 = std::string::append(&v639, " expansion #");
        std::string::size_type v499 = v498->__r_.__value_.__r.__words[2];
        long long v640 = *(_OWORD *)&v498->__r_.__value_.__l.__data_;
        uint64_t v641 = v499;
        v498->__r_.__value_.__l.__size_ = 0;
        v498->__r_.__value_.__r.__words[2] = 0;
        v498->__r_.__value_.__r.__words[0] = 0;
        if (v641 >= 0) {
          v500 = (std::string::value_type *)&v640;
        }
        else {
          v500 = (std::string::value_type *)v640;
        }
        if (v641 >= 0) {
          size_t v501 = HIBYTE(v641);
        }
        else {
          size_t v501 = *((void *)&v640 + 1);
        }
        if (SHIBYTE(v641) < 0)
        {
          operator delete((void *)v640);
          if ((SHIBYTE(v639.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_1416:
            if ((SHIBYTE(v638.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_1417;
            }
            goto LABEL_1420;
          }
        }
        else if ((SHIBYTE(v639.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_1416;
        }
        operator delete(v639.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v638.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1417;
        }
LABEL_1420:
        operator delete(v638.__r_.__value_.__l.__data_);
LABEL_1417:
        swift::Demangle::DemangleOptions::~DemangleOptions((swift::Demangle::DemangleOptions *)&__str);
        goto LABEL_824;
      case 0xAF:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        v274 = " prefix";
        goto LABEL_1633;
      case 0xB0:
        int v471 = *((unsigned __int8 *)a2 + 18);
        if (v471 != 2 && (v471 != 5 || *((_DWORD *)a2 + 2) < 2u))
        {
          if (!this[1].__r_.__value_.__s.__data_[14]) {
            goto LABEL_823;
          }
          v523 = "(in ";
          goto LABEL_1692;
        }
        if (this[1].__r_.__value_.__s.__data_[14])
        {
          std::string::push_back(this, 40);
          int v471 = *((unsigned __int8 *)a2 + 18);
        }
        v472 = a2;
        if (v471 == 2) {
          goto LABEL_1316;
        }
        if (v471 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v472 = *(swift::Demangle::Node **)a2;
LABEL_1316:
          v473 = (swift::Demangle::Node *)*((void *)v472 + 1);
        }
        else
        {
          v473 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[14]) {
          goto LABEL_823;
        }
        v523 = " in ";
LABEL_1692:
        std::string::append(this, v523, 4uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
LABEL_1693:
        }
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1694:
        std::string::append(this, **(const std::string::value_type ***)a2, *(void *)(*(void *)a2 + 8));
        goto LABEL_1838;
      case 0xB1:
        unint64_t v43 = "property descriptor for ";
        goto LABEL_305;
      case 0xB2:
        goto LABEL_1485;
      case 0xB3:
        goto LABEL_1485;
      case 0xB5:
        v332 = "protocol symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 30;
        goto LABEL_1248;
      case 0xB6:
        int v48 = *((unsigned __int8 *)a2 + 18);
        uint64_t v49 = (swift::Demangle::Node **)a2;
        if ((v48 - 1) < 2) {
          goto LABEL_78;
        }
        if (v48 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            long long v10 = 0;
            unint64_t v50 = 0;
            goto LABEL_736;
          }
          uint64_t v49 = *(swift::Demangle::Node ***)a2;
LABEL_78:
          unint64_t v50 = *v49;
        }
        else
        {
          unint64_t v50 = 0;
        }
        long long v10 = 0;
        if (v48 == 1)
        {
          int v217 = 0;
          goto LABEL_737;
        }
        unsigned int v215 = a2;
        if (v48 == 2) {
          goto LABEL_607;
        }
        if (v48 != 5) {
          goto LABEL_608;
        }
        if (*((_DWORD *)a2 + 2) < 2u)
        {
          long long v10 = 0;
        }
        else
        {
          unsigned int v215 = *(swift::Demangle::Node **)a2;
LABEL_607:
          long long v10 = (swift::Demangle::Node *)*((void *)v215 + 1);
LABEL_608:
          if (v48 == 5)
          {
            unsigned int v216 = *((_DWORD *)a2 + 2);
            if (v216 >= 3)
            {
              int v217 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
              if (v216 == 4)
              {
                std::string::append(this, "property behavior storage of ", 0x1DuLL);
                std::string::append(this, " in ", 4uLL);
                std::string::append(this, " : ", 3uLL);
                goto LABEL_7;
              }
LABEL_737:
              if (this[1].__r_.__value_.__s.__data_[6])
              {
                std::string::append(this, " : ", 3uLL);
                std::string::append(this, " in ", 4uLL);
                long long v10 = v217;
                goto LABEL_7;
              }
              goto LABEL_823;
            }
          }
        }
LABEL_736:
        int v217 = 0;
        goto LABEL_737;
      case 0xB7:
        v372 = "protocol conformance ref (type's module) ";
        v373 = this;
        std::string::size_type v374 = 41;
        goto LABEL_1513;
      case 0xB8:
        v372 = "protocol conformance ref (protocol's module) ";
        v373 = this;
        std::string::size_type v374 = 45;
        goto LABEL_1513;
      case 0xB9:
        v372 = "protocol conformance ref (retroactive) ";
        v373 = this;
        std::string::size_type v374 = 39;
        goto LABEL_1513;
      case 0xBA:
        unint64_t v43 = "protocol descriptor for ";
LABEL_305:
        unint64_t v44 = this;
        std::string::size_type v45 = 24;
        goto LABEL_318;
      case 0xBB:
        unint64_t v43 = "protocol descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 39;
        goto LABEL_318;
      case 0xBC:
        unint64_t v43 = "protocol conformance descriptor for ";
        goto LABEL_315;
      case 0xBD:
        unint64_t v43 = "protocol conformance descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 51;
        goto LABEL_318;
      case 0xBE:
        int v456 = *((unsigned __int8 *)a2 + 18);
        if ((v456 - 1) < 2) {
          goto LABEL_1261;
        }
        if (v456 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1261:
        v457 = *(swift::Demangle::Node **)a2;
        if (!*(void *)a2) {
          goto LABEL_823;
        }
        int v458 = *((unsigned __int8 *)v457 + 18);
        if ((v458 - 1) < 2 || v458 == 5 && *((_DWORD *)v457 + 2)) {
          goto LABEL_1631;
        }
        v274 = "Any";
LABEL_1253:
        v275 = this;
        std::string::size_type v276 = 3;
        goto LABEL_822;
      case 0xBF:
        int v351 = *((unsigned __int8 *)a2 + 18);
        if (v351 == 2)
        {
          v352 = a2;
        }
        else
        {
          if (v351 != 5 || *((_DWORD *)a2 + 2) < 2u) {
            goto LABEL_823;
          }
          v352 = *(swift::Demangle::Node **)a2;
        }
        v565 = *(swift::Demangle::Node **)v352;
        std::string::append(this, " & ", 3uLL);
        int v566 = *((unsigned __int8 *)v565 + 18);
        if ((v566 - 1) >= 2)
        {
          if (v566 != 5 || !*((_DWORD *)v565 + 2)) {
            goto LABEL_823;
          }
          v565 = *(swift::Demangle::Node **)v565;
        }
        v457 = *(swift::Demangle::Node **)v565;
LABEL_1631:
        v434 = " & ";
        v478 = this;
LABEL_1330:
        goto LABEL_823;
      case 0xC0:
        int v448 = *((unsigned __int8 *)a2 + 18);
        if ((v448 - 1) < 2) {
          goto LABEL_1227;
        }
        if (v448 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1227:
        v449 = *(_DWORD **)a2;
        int v450 = *(unsigned __int8 *)(*(void *)a2 + 18);
        if ((v450 - 1) < 2) {
          goto LABEL_1231;
        }
        if (v450 != 5 || !v449[2]) {
          goto LABEL_823;
        }
        v449 = *(_DWORD **)v449;
LABEL_1231:
        v451 = *(swift::Demangle::Node **)v449;
        int v452 = *(unsigned __int8 *)(*(void *)v449 + 18);
        if ((v452 - 1) < 2 || v452 == 5 && *((_DWORD *)v451 + 2))
        {
          std::string::append(this, " & ", 3uLL);
        }
        if (this[1].__r_.__value_.__s.__data_[1] && this[1].__r_.__value_.__s.__data_[17])
        {
          std::string::append(this, "Swift", 5uLL);
          std::string::append(this, ".", 1uLL);
        }
        v274 = "AnyObject";
        goto LABEL_1790;
      case 0xC1:
        unint64_t v43 = "protocol self-conformance descriptor for ";
        goto LABEL_219;
      case 0xC2:
        unint64_t v43 = "protocol self-conformance witness for ";
        goto LABEL_246;
      case 0xC3:
        unint64_t v43 = "protocol self-conformance witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 44;
        goto LABEL_318;
      case 0xC4:
        std::string::append(this, "protocol witness for ", 0x15uLL);
        int v97 = *((unsigned __int8 *)a2 + 18);
        int v98 = a2;
        if (v97 == 2) {
          goto LABEL_225;
        }
        if (v97 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v98 = *(swift::Demangle::Node **)a2;
LABEL_225:
          int v99 = (swift::Demangle::Node *)*((void *)v98 + 1);
        }
        else
        {
          int v99 = 0;
        }
        unsigned int v180 = " in conformance ";
        goto LABEL_462;
      case 0xC5:
        unint64_t v43 = "protocol witness table for ";
        goto LABEL_145;
      case 0xC6:
        unint64_t v43 = "protocol witness table accessor for ";
        goto LABEL_315;
      case 0xC7:
        unint64_t v43 = "protocol witness table pattern for ";
LABEL_317:
        unint64_t v44 = this;
        std::string::size_type v45 = 35;
        goto LABEL_318;
      case 0xC8:
      case 0xC9:
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "thunk for ", 0xAuLL);
          int v33 = *((unsigned __int8 *)a2 + 18);
          if (v33 == 1)
          {
            uint64_t v34 = 0;
          }
          else if (v33 == 5)
          {
            uint64_t v205 = *((unsigned int *)a2 + 2);
            if (!v205) {
              goto LABEL_544;
            }
            uint64_t v34 = v205 - 1;
            a2 = *(swift::Demangle::Node **)a2;
          }
          else
          {
            long long v10 = 0;
            if (v33 != 2) {
              goto LABEL_6;
            }
            uint64_t v34 = 1;
          }
          long long v10 = (swift::Demangle::Node *)*((void *)a2 + v34);
          goto LABEL_6;
        }
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_WORD *)a2 + 8) == 201) {
          std::string::append(this, "helper ", 7uLL);
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          unint64_t v74 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          unint64_t v74 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        int v161 = *((unsigned __int8 *)a2 + 18);
        if (v161 == 2)
        {
          unint64_t v162 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v161 != 5) {
            goto LABEL_585;
          }
          unint64_t v162 = *((unsigned int *)a2 + 2);
        }
        if (v162 > v74 + 1)
        {
          unsigned int v210 = v161 - 1;
          int v211 = a2;
          if (v210 >= 2) {
            int v211 = *(swift::Demangle::Node **)a2;
          }
          int v212 = (swift::Demangle::Node *)*((void *)v211 + v74 + 1);
          goto LABEL_586;
        }
LABEL_585:
        int v212 = 0;
LABEL_586:
        int v201 = " to ";
        int v202 = this;
        std::string::size_type v203 = 4;
        goto LABEL_587;
      case 0xCA:
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 4)
        {
          unint64_t v74 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          unint64_t v74 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((unsigned int *)a2 + 2) > (v74 | 2)) {
          int v148 = *(swift::Demangle::Node **)(*(void *)a2 + 8 * (v74 | 2));
        }
        else {
          int v148 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        int v149 = *((unsigned __int8 *)a2 + 18);
        if (v149 == 2)
        {
          unint64_t v150 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v149 != 5) {
            goto LABEL_531;
          }
          unint64_t v150 = *((unsigned int *)a2 + 2);
        }
        if (v150 > v74 + 1)
        {
          unsigned int v198 = v149 - 1;
          int v199 = a2;
          if (v198 >= 2) {
            int v199 = *(swift::Demangle::Node **)a2;
          }
          unsigned int v200 = (swift::Demangle::Node *)*((void *)v199 + v74 + 1);
LABEL_532:
          int v201 = " self ";
          int v202 = this;
          std::string::size_type v203 = 6;
LABEL_587:
          std::string::append(v202, v201, v203);
          unint64_t v213 = *((unsigned __int8 *)a2 + 18);
          unsigned int v214 = v213 - 1;
          if (v213 != 1)
          {
            if (v213 == 2)
            {
LABEL_594:
              long long v10 = (swift::Demangle::Node *)*((void *)a2 + v74);
              goto LABEL_7;
            }
            if (v213 != 5)
            {
LABEL_799:
              long long v10 = 0;
              goto LABEL_7;
            }
            unint64_t v213 = *((unsigned int *)a2 + 2);
          }
          if (v213 > v74)
          {
            if (v214 >= 2) {
              a2 = *(swift::Demangle::Node **)a2;
            }
            goto LABEL_594;
          }
          goto LABEL_799;
        }
LABEL_531:
        unsigned int v200 = 0;
        goto LABEL_532;
      case 0xCB:
        int v121 = *((unsigned __int8 *)a2 + 18);
        __int16 v122 = (swift::Demangle::Node **)a2;
        if ((v121 - 1) < 2) {
          goto LABEL_288;
        }
        if (v121 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v122 = *(swift::Demangle::Node ***)a2;
LABEL_288:
          unint64_t v123 = *v122;
        }
        else
        {
          unint64_t v123 = 0;
        }
        int v130 = " with global actor constraint ";
        int v131 = this;
        std::string::size_type v132 = 30;
        goto LABEL_504;
      case 0xCC:
        int v468 = *((unsigned __int8 *)a2 + 18);
        if ((v468 - 1) < 2) {
          goto LABEL_1296;
        }
        if (v468 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1296:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "read";
LABEL_1605:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 4;
        goto LABEL_1606;
      case 0xCD:
        std::string::append(this, "related decl '", 0xEuLL);
        unint64_t v54 = (const std::string::value_type ***)a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          unint64_t v54 = *(const std::string::value_type ****)a2;
        }
        std::string::append(this, **v54, (std::string::size_type)(*v54)[1]);
        std::string::append(this, "' for ", 6uLL);
        int v55 = *((unsigned __int8 *)a2 + 18);
        if (v55 == 2) {
          goto LABEL_539;
        }
        if (v55 == 5 && *((_DWORD *)a2 + 2) >= 2u) {
          goto LABEL_538;
        }
        goto LABEL_313;
      case 0xCE:
        int v111 = *((unsigned __int8 *)a2 + 18);
        if (v111 != 2 && (v111 != 5 || *((_DWORD *)a2 + 2) != 2)) {
          goto LABEL_823;
        }
        std::string::append(this, "retroactive @ ", 0xEuLL);
        int v112 = *((unsigned __int8 *)a2 + 18);
        __int16 v113 = (swift::Demangle::Node **)a2;
        if ((v112 - 1) < 2) {
          goto LABEL_270;
        }
        if (v112 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v113 = *(swift::Demangle::Node ***)a2;
LABEL_270:
          unint64_t v114 = *v113;
        }
        else
        {
          unint64_t v114 = 0;
        }
        goto LABEL_505;
      case 0xCF:
        int v376 = *((unsigned __int8 *)a2 + 18);
        if ((v376 - 1) < 2 || v376 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_1514;
        }
LABEL_1007:
        v274 = *(const std::string::value_type **)a2;
        std::string::size_type v276 = *((void *)a2 + 1);
        v275 = this;
        goto LABEL_822;
      case 0xD0:
        unint64_t v43 = "__shared ";
LABEL_292:
        unint64_t v44 = this;
        std::string::size_type v45 = 9;
        goto LABEL_318;
      case 0xD1:
        unint64_t v43 = "__owned ";
LABEL_290:
        unint64_t v44 = this;
        std::string::size_type v45 = 8;
        goto LABEL_318;
      case 0xD2:
        std::string::size_type v28 = "@box ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 5;
        goto LABEL_295;
      case 0xD3:
        int v67 = *((unsigned __int8 *)a2 + 18);
        int v68 = (swift::Demangle::Node **)a2;
        if ((v67 - 1) < 2) {
          goto LABEL_151;
        }
        if (v67 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_496:
            long long v10 = 0;
            goto LABEL_6;
          }
          int v68 = *(swift::Demangle::Node ***)a2;
LABEL_151:
          long long v10 = *v68;
        }
        else
        {
          long long v10 = 0;
        }
        if (v67 == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          uint64_t v524 = *(void *)(*(void *)a2 + 16);
          unsigned int v525 = v7 + 1;
          std::string::push_back(this, 32);
          if (!v524) {
            goto LABEL_823;
          }
          std::string::append(this, " <", 2uLL);
          int v526 = *(unsigned __int8 *)(v524 + 18);
          if (v526 == 5)
          {
            v617 = (unsigned int *)(v524 + 8);
            uint64_t v618 = *(unsigned int *)(v524 + 8);
            if (!v618
            {
LABEL_1530:
              std::string::push_back(this, 62);
              goto LABEL_823;
            }
          }
          else
          {
            if (v526 != 2)
            {
              if (v526 == 1) {
              goto LABEL_1530;
              }
            }
            v617 = (unsigned int *)(v524 + 8);
            uint64_t v618 = 2;
          }
          unint64_t v619 = 1;
          while (1)
          {
            std::string::append(this, ", ", 2uLL);
            int v621 = *(unsigned __int8 *)(v524 + 18);
            if (v621 == 2)
            {
              unint64_t v622 = *(unsigned __int8 *)(v524 + 18);
            }
            else
            {
              if (v621 != 5) {
                goto LABEL_1844;
              }
              unint64_t v622 = *v617;
            }
            if (v622 > v619)
            {
              unsigned int v623 = v621 - 1;
              v624 = (swift::Demangle::Node **)v524;
              if (v623 >= 2) {
                v624 = *(swift::Demangle::Node ***)v524;
              }
              v620 = v624[v619];
              goto LABEL_1845;
            }
LABEL_1844:
            v620 = 0;
LABEL_1845:
            if (v618 == ++v619) {
              goto LABEL_1530;
            }
          }
        }
        goto LABEL_6;
      case 0xD4:
        std::string::push_back(this, 123);
        int v459 = *((unsigned __int8 *)a2 + 18);
        if ((v459 - 1) >= 2 && (v459 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_1746;
        }
        unsigned int v460 = v7 + 1;
        std::string::push_back(this, 32);
        int v461 = *((unsigned __int8 *)a2 + 18);
        v462 = (swift::Demangle::Node **)a2;
        if ((v461 - 1) < 2) {
          goto LABEL_1275;
        }
        if (v461 == 5 && *((_DWORD *)a2 + 2))
        {
          v462 = *(swift::Demangle::Node ***)a2;
LABEL_1275:
          v463 = *v462;
        }
        else
        {
          v463 = 0;
        }
        unint64_t v590 = 1;
        while (2)
        {
          unint64_t v592 = *((unsigned __int8 *)a2 + 18);
          if (v592 == 2) {
            goto LABEL_1737;
          }
          if (v592 == 5)
          {
            unint64_t v592 = *((unsigned int *)a2 + 2);
LABEL_1737:
            if (v592 > v590)
            {
              std::string::push_back(this, 44);
              std::string::push_back(this, 32);
              int v593 = *((unsigned __int8 *)a2 + 18);
              if (v593 == 2)
              {
                unint64_t v594 = *((unsigned __int8 *)a2 + 18);
              }
              else
              {
                if (v593 != 5) {
                  goto LABEL_1732;
                }
                unint64_t v594 = *((unsigned int *)a2 + 2);
              }
              if (v594 > v590)
              {
                unsigned int v595 = v593 - 1;
                v596 = a2;
                if (v595 >= 2) {
                  v596 = *(swift::Demangle::Node **)a2;
                }
                v591 = (swift::Demangle::Node *)*((void *)v596 + v590);
                goto LABEL_1733;
              }
LABEL_1732:
              v591 = 0;
LABEL_1733:
              ++v590;
              continue;
            }
          }
          break;
        }
LABEL_1746:
        v274 = " }";
LABEL_1747:
        v275 = this;
        std::string::size_type v276 = 2;
        goto LABEL_822;
      case 0xD5:
      case 0xD6:
        if (v11 == 214) {
          std::string::size_type v28 = "let ";
        }
        else {
          std::string::size_type v28 = "var ";
        }
        std::string::size_type v29 = this;
        std::string::size_type v30 = 4;
        goto LABEL_295;
      case 0xD7:
        int v383 = *((unsigned __int8 *)a2 + 18);
        if ((v383 - 1) < 2) {
          goto LABEL_1056;
        }
        if (v383 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1056:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "setter";
LABEL_1545:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 6;
        goto LABEL_1606;
      case 0xD9:
        v274 = "serialized";
        goto LABEL_1246;
      case 0xDA:
        std::string::size_type v28 = "static ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 7;
        goto LABEL_295;
      case 0xDC:
        v627 = "subscript";
        std::string::size_type v628 = 9;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v281 = (std::string::value_type *)&unk_215276E75;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        int v443 = 0;
        goto LABEL_1483;
      case 0xDD:
        if (this[1].__r_.__value_.__s.__data_[3])
        {
          std::string::append(this, " with unmangled suffix ", 0x17uLL);
          long long v640 = *(_OWORD *)a2;
          llvm::StringRef::str((const void **)&v640, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = __p;
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_823;
      case 0xDF:
        std::string::append(this, "(", 1uLL);
        goto LABEL_1495;
      case 0xE0:
        if (ChildIf)
        {
          std::string::append(this, *(const std::string::value_type **)ChildIf, *(void *)(ChildIf + 8));
          std::string::append(this, ": ", 2uLL);
        }
          goto LABEL_823;
        v274 = "...";
        goto LABEL_1253;
      case 0xE1:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        v274 = ": ";
        goto LABEL_1747;
      case 0xE2:
        v296 = "Pack{";
        v297 = this;
        std::string::size_type v298 = 5;
        goto LABEL_972;
      case 0xE3:
      case 0xE4:
        if (v11 == 227) {
          v294 = "@direct";
        }
        else {
          v294 = "@indirect";
        }
        if (v11 == 227) {
          std::string::size_type v295 = 7;
        }
        else {
          std::string::size_type v295 = 9;
        }
        std::string::append(this, v294, v295);
        v296 = " Pack{";
        v297 = this;
        std::string::size_type v298 = 6;
LABEL_972:
        std::string::append(v297, v296, v298);
        v274 = "}";
        goto LABEL_1496;
      case 0xE5:
        unint64_t v43 = "repeat ";
        goto LABEL_204;
      case 0xE6:
        std::string::append(this, "/* level: ", 0xAuLL);
        unint64_t v53 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          unint64_t v53 = *(swift::Demangle::Node **)a2;
        }
        snprintf((char *)&__str, 0x20uLL, "%llu", **((void **)v53 + 1));
        std::string::append(this, (const std::string::value_type *)&__str);
        std::string::append(this, " */ ", 4uLL);
        unint64_t v43 = "each ";
        unint64_t v44 = this;
        std::string::size_type v45 = 5;
        goto LABEL_318;
      case 0xE7:
        printer_unreachable("should be handled in Node::Kind::PackElement");
      case 0xE9:
        v332 = "type symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 26;
        goto LABEL_1248;
      case 0xEC:
        int v118 = *((unsigned __int8 *)a2 + 18);
        unsigned int v119 = v118 - 1;
        std::string::size_type v120 = a2;
        if ((v118 - 1) >= 2) {
          std::string::size_type v120 = *(swift::Demangle::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v120 + 16) != 290)
        {
          if (v119 >= 2)
          {
LABEL_312:
            if (v118 != 5 || !*((_DWORD *)a2 + 2))
            {
LABEL_313:
              long long v10 = 0;
              goto LABEL_6;
            }
LABEL_4:
            a2 = *(swift::Demangle::Node **)a2;
          }
LABEL_5:
          long long v10 = *(swift::Demangle::Node **)a2;
LABEL_6:
          ++v7;
          goto LABEL_7;
        }
        v494 = (swift::Demangle::Node **)a2;
        if (v119 < 2) {
          goto LABEL_1391;
        }
        if (v118 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v279 = 0;
            goto LABEL_1822;
          }
          v494 = *(swift::Demangle::Node ***)a2;
LABEL_1391:
          v279 = *v494;
        }
        else
        {
          v279 = 0;
        }
        if (v118 == 2)
        {
LABEL_1721:
          v587 = (swift::Demangle::Node *)*((void *)a2 + 1);
          goto LABEL_1823;
        }
        if (v118 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1721;
        }
LABEL_1822:
        v587 = 0;
LABEL_1823:
        int v614 = *((unsigned __int8 *)v587 + 18);
        if ((v614 - 1) >= 2)
        {
          if (v614 != 5 || !*((_DWORD *)v587 + 2))
          {
            v280 = 0;
LABEL_1829:
            v278 = this;
LABEL_828:
            goto LABEL_823;
          }
          v587 = *(swift::Demangle::Node **)v587;
        }
        v280 = *(swift::Demangle::Node **)v587;
        goto LABEL_1829;
      case 0xED:
        unint64_t v43 = "type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 18;
        goto LABEL_318;
      case 0xEE:
        unint64_t v43 = "type metadata accessor for ";
        goto LABEL_145;
      case 0xEF:
        unint64_t v43 = "type metadata completion function for ";
        goto LABEL_246;
      case 0xF0:
        unint64_t v43 = "type metadata instantiation cache for ";
LABEL_246:
        unint64_t v44 = this;
        std::string::size_type v45 = 38;
        goto LABEL_318;
      case 0xF1:
        unint64_t v43 = "type metadata instantiation function for ";
        goto LABEL_219;
      case 0xF2:
        unint64_t v43 = "type metadata singleton initialization cache for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 49;
        goto LABEL_318;
      case 0xF3:
        unint64_t v43 = "demangling cache variable for type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 48;
        goto LABEL_318;
      case 0xF4:
        unint64_t v43 = "lazy cache variable for type metadata for ";
        goto LABEL_276;
      case 0xF6:
        v274 = "unknown index";
        v275 = this;
        std::string::size_type v276 = 13;
        goto LABEL_822;
      case 0xF7:
        uint64_t v115 = "weak";
        int v116 = this;
        std::string::size_type v117 = 4;
        goto LABEL_278;
      case 0xF8:
        uint64_t v115 = "unowned";
        int v116 = this;
        std::string::size_type v117 = 7;
        goto LABEL_278;
      case 0xF9:
        uint64_t v115 = "unowned(unsafe)";
        int v116 = this;
        std::string::size_type v117 = 15;
LABEL_278:
        std::string::append(v116, v115, v117);
        unint64_t v43 = " ";
        unint64_t v44 = this;
        std::string::size_type v45 = 1;
        goto LABEL_318;
      case 0xFA:
        int v369 = *((unsigned __int8 *)a2 + 18);
        if ((v369 - 1) < 2) {
          goto LABEL_984;
        }
        if (v369 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_984:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "unsafeAddressor";
LABEL_1548:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 15;
        goto LABEL_1606;
      case 0xFB:
        int v401 = *((unsigned __int8 *)a2 + 18);
        if ((v401 - 1) < 2) {
          goto LABEL_1107;
        }
        if (v401 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1107:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "unsafeMutableAddressor";
LABEL_1569:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 22;
        goto LABEL_1606;
      case 0xFC:
        __int16 v69 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          __int16 v69 = *(swift::Demangle::Node **)a2;
        }
        uint64_t v70 = **(void **)v69;
        if (v70 >= 0x18) {
          printer_unreachable("bad value witness kind");
        }
        std::string::append(this, (&off_264238AB8)[(int)v70], qword_21527B770[(int)v70]);
        if (this[1].__r_.__value_.__s.__data_[12])
        {
          unint64_t v71 = " for ";
          __int16 v72 = this;
          std::string::size_type v73 = 5;
        }
        else
        {
          unint64_t v71 = " value witness for ";
          __int16 v72 = this;
          std::string::size_type v73 = 19;
        }
        std::string::append(v72, v71, v73);
        int v191 = *((unsigned __int8 *)a2 + 18);
        if (v191 == 2) {
          goto LABEL_495;
        }
        if (v191 == 5) {
          goto LABEL_493;
        }
        goto LABEL_496;
      case 0xFD:
        std::string::size_type v28 = "value witness table for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 24;
        goto LABEL_295;
      case 0xFE:
        v281 = (std::string::value_type *)&unk_215276E75;
        v627 = (char *)&unk_215276E75;
        std::string::size_type v628 = 0;
        unsigned int v626 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 1;
LABEL_1482:
        int v443 = 1;
LABEL_1483:
        size_t v416 = 0;
LABEL_1484:
LABEL_1485:
        long long v10 = v325;
        goto LABEL_824;
      case 0xFF:
        std::string::append(this, "vtable thunk for ", 0x11uLL);
        int v60 = *((unsigned __int8 *)a2 + 18);
        unint64_t v61 = a2;
        if (v60 == 2) {
          goto LABEL_124;
        }
        if (v60 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v61 = *(swift::Demangle::Node **)a2;
LABEL_124:
          unsigned int v62 = (swift::Demangle::Node *)*((void *)v61 + 1);
        }
        else
        {
          unsigned int v62 = 0;
        }
        unsigned int v180 = " dispatching to ";
LABEL_462:
        int v181 = this;
        std::string::size_type v182 = 16;
LABEL_469:
        std::string::append(v181, v180, v182);
        int v183 = *((unsigned __int8 *)a2 + 18);
        if ((v183 - 1) < 2) {
          goto LABEL_473;
        }
        if (v183 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_799;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_473:
        long long v10 = *(swift::Demangle::Node **)a2;
        goto LABEL_7;
      case 0x100:
        v274 = "override ";
        goto LABEL_1790;
      case 0x101:
        int v397 = *((unsigned __int8 *)a2 + 18);
        if ((v397 - 1) < 2) {
          goto LABEL_1096;
        }
        if (v397 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1096:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v513 = v6 & 1;
        v514 = "willset";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        int v535 = v7;
        size_t v536 = 7;
LABEL_1606:
        goto LABEL_824;
      case 0x102:
        std::string::size_type v28 = "reflection metadata builtin descriptor ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 39;
        goto LABEL_295;
      case 0x103:
        std::string::size_type v28 = "reflection metadata field descriptor ";
LABEL_118:
        std::string::size_type v29 = this;
        std::string::size_type v30 = 37;
        goto LABEL_295;
      case 0x104:
        std::string::size_type v28 = "reflection metadata associated type descriptor ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 47;
        goto LABEL_295;
      case 0x105:
        std::string::size_type v28 = "reflection metadata superclass descriptor ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 42;
        goto LABEL_295;
      case 0x107:
        long long v15 = "curry thunk of ";
        uint64_t v31 = this;
        std::string::size_type v32 = 15;
        goto LABEL_310;
      case 0x108:
        long long v15 = "dispatch thunk of ";
        goto LABEL_272;
      case 0x109:
        long long v15 = "method descriptor for ";
        uint64_t v31 = this;
        std::string::size_type v32 = 22;
        goto LABEL_310;
      case 0x10A:
        unint64_t v43 = "protocol requirements base descriptor for ";
        goto LABEL_276;
      case 0x10B:
        std::string::append(this, "associated conformance descriptor for ", 0x26uLL);
        int v58 = *((unsigned __int8 *)a2 + 18);
        unint64_t v59 = (swift::Demangle::Node **)a2;
        if ((v58 - 1) < 2) {
          goto LABEL_129;
        }
        if (v58 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_390;
        }
        goto LABEL_128;
      case 0x10C:
        std::string::append(this, "default associated conformance accessor for ", 0x2CuLL);
        int v63 = *((unsigned __int8 *)a2 + 18);
        unint64_t v59 = (swift::Demangle::Node **)a2;
        if ((v63 - 1) < 2) {
          goto LABEL_129;
        }
        if (v63 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_128:
          unint64_t v59 = *(swift::Demangle::Node ***)a2;
LABEL_129:
          unint64_t v64 = *v59;
        }
        else
        {
LABEL_390:
          unint64_t v64 = 0;
        }
        std::string::append(this, ".", 1uLL);
        int v154 = *((unsigned __int8 *)a2 + 18);
        unint64_t v155 = a2;
        if (v154 == 2) {
          goto LABEL_395;
        }
        if (v154 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v155 = *(swift::Demangle::Node **)a2;
LABEL_395:
          int v156 = (swift::Demangle::Node *)*((void *)v155 + 1);
        }
        else
        {
          int v156 = 0;
        }
        int v157 = ": ";
        unint64_t v158 = this;
        std::string::size_type v159 = 2;
LABEL_523:
        std::string::append(v158, v157, v159);
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_799;
        }
LABEL_718:
        long long v10 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
        goto LABEL_7;
      case 0x10D:
        std::string::append(this, "base conformance descriptor for ", 0x20uLL);
        int v100 = *((unsigned __int8 *)a2 + 18);
        unint64_t v101 = (swift::Demangle::Node **)a2;
        if ((v100 - 1) < 2) {
          goto LABEL_231;
        }
        if (v100 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v101 = *(swift::Demangle::Node ***)a2;
LABEL_231:
          unint64_t v102 = *v101;
        }
        else
        {
          unint64_t v102 = 0;
        }
        int v130 = ": ";
        int v131 = this;
        std::string::size_type v132 = 2;
LABEL_504:
        std::string::append(v131, v130, v132);
        goto LABEL_505;
      case 0x10E:
        unint64_t v43 = "associated type descriptor for ";
LABEL_108:
        unint64_t v44 = this;
        std::string::size_type v45 = 31;
        goto LABEL_318;
      case 0x10F:
        v274 = " async";
LABEL_1286:
        v275 = this;
        std::string::size_type v276 = 6;
        goto LABEL_822;
      case 0x110:
        v274 = " throws";
        goto LABEL_1633;
      case 0x111:
        std::string::append(this, " throws(", 8uLL);
        int v402 = *((unsigned __int8 *)a2 + 18);
        if (v402 == 1) {
          goto LABEL_1115;
        }
        if (v402 != 5 || *((_DWORD *)a2 + 2) != 1) {
          goto LABEL_1495;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1115:
        v403 = *(swift::Demangle::Node **)a2;
        unsigned int v404 = v7 + 1;
        v405 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1116;
      case 0x112:
        v274 = " empty-list ";
LABEL_1062:
        v275 = this;
        std::string::size_type v276 = 12;
        goto LABEL_822;
      case 0x113:
        v274 = " first-element-marker ";
        goto LABEL_1023;
      case 0x114:
        v274 = " variadic-marker ";
        goto LABEL_1432;
      case 0x115:
        std::string::append(this, "outlined bridged method (", 0x19uLL);
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        v274 = ") of ";
        goto LABEL_1014;
      case 0x116:
        std::string::append(this, "outlined copy of ", 0x11uLL);
        int v56 = *((unsigned __int8 *)a2 + 18);
        unint64_t v57 = (swift::Demangle::Node **)a2;
        if ((v56 - 1) < 2) {
          goto LABEL_196;
        }
        if (v56 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_398;
        }
        goto LABEL_195;
      case 0x117:
        std::string::append(this, "outlined consume of ", 0x14uLL);
        int v88 = *((unsigned __int8 *)a2 + 18);
        unint64_t v57 = (swift::Demangle::Node **)a2;
        if ((v88 - 1) < 2) {
          goto LABEL_196;
        }
        if (v88 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_195:
          unint64_t v57 = *(swift::Demangle::Node ***)a2;
LABEL_196:
          unsigned int v89 = *v57;
        }
        else
        {
LABEL_398:
          unsigned int v89 = 0;
        }
        int v160 = *((unsigned __int8 *)a2 + 18);
        if (v160 == 2) {
          goto LABEL_509;
        }
        if (v160 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_823;
        }
        goto LABEL_508;
      case 0x118:
        long long v15 = "outlined retain of ";
        uint64_t v31 = this;
        std::string::size_type v32 = 19;
        goto LABEL_310;
      case 0x119:
        long long v15 = "outlined release of ";
        goto LABEL_235;
      case 0x11A:
        long long v15 = "outlined init with take of ";
        goto LABEL_309;
      case 0x11B:
      case 0x15E:
        long long v15 = "outlined init with copy of ";
        goto LABEL_309;
      case 0x11C:
      case 0x15F:
        long long v15 = "outlined assign with take of ";
        goto LABEL_46;
      case 0x11D:
      case 0x160:
        long long v15 = "outlined assign with copy of ";
LABEL_46:
        uint64_t v31 = this;
        std::string::size_type v32 = 29;
        goto LABEL_310;
      case 0x11E:
      case 0x161:
        long long v15 = "outlined destroy of ";
LABEL_235:
        uint64_t v31 = this;
        std::string::size_type v32 = 20;
        goto LABEL_310;
      case 0x11F:
        v417 = "outlined variable #";
        v418 = this;
        std::string::size_type v419 = 19;
        goto LABEL_1182;
      case 0x120:
        v417 = "outlined read-only object #";
        v418 = this;
        std::string::size_type v419 = 27;
LABEL_1182:
        std::string::append(v418, v417, v419);
        v275 = swift::Demangle::DemanglerPrinter::operator<<(this, *(void *)a2);
        v274 = " of ";
        std::string::size_type v276 = 4;
        goto LABEL_822;
      case 0x121:
        int v406 = *((unsigned __int8 *)a2 + 18);
        v407 = (swift::Demangle::Node *const *)a2;
        if ((v406 - 1) < 2) {
          goto LABEL_1666;
        }
        if (v406 == 5)
        {
          v407 = *(swift::Demangle::Node *const **)a2;
        }
        else
        {
          v407 = 0;
LABEL_1666:
          if (v406 != 5)
          {
            v568 = (swift::Demangle::Node *const *)((char *)a2 + 8);
            if (v406 != 1) {
              v568 = 0;
            }
            if (v406 == 2) {
              v569 = (swift::Demangle::Node *const *)((char *)a2 + 16);
            }
            else {
              v569 = v568;
            }
LABEL_1673:
            goto LABEL_823;
          }
        }
        v569 = (swift::Demangle::Node *const *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_1673;
      case 0x123:
        std::string::size_type v28 = "module descriptor ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 18;
        goto LABEL_295;
      case 0x124:
        std::string::size_type v28 = "extension descriptor ";
        goto LABEL_239;
      case 0x125:
        std::string::size_type v28 = "anonymous descriptor ";
LABEL_239:
        std::string::size_type v29 = this;
        std::string::size_type v30 = 21;
        goto LABEL_295;
      case 0x126:
        v372 = "generic parameter reference for associated type ";
        v373 = this;
        std::string::size_type v374 = 48;
LABEL_1513:
        std::string::append(v373, v372, v374);
LABEL_1514:
        goto LABEL_823;
      case 0x127:
        int v429 = *((unsigned __int8 *)a2 + 18);
        if ((v429 - 1) < 2) {
          goto LABEL_1171;
        }
        if (v429 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1171:
          v430 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v430 = 0;
        }
        v274 = "?";
        goto LABEL_1496;
      case 0x128:
        std::string::append(this, "[", 1uLL);
        int v408 = *((unsigned __int8 *)a2 + 18);
        if ((v408 - 1) < 2) {
          goto LABEL_1124;
        }
        if (v408 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1124:
          v409 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v409 = 0;
        }
        unsigned int v544 = v7 + 1;
        v543 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1572;
      case 0x129:
        std::string::append(this, "[", 1uLL);
        int v398 = *((unsigned __int8 *)a2 + 18);
        v399 = (swift::Demangle::Node **)a2;
        if ((v398 - 1) < 2) {
          goto LABEL_1101;
        }
        if (v398 == 5 && *((_DWORD *)a2 + 2))
        {
          v399 = *(swift::Demangle::Node ***)a2;
LABEL_1101:
          v400 = *v399;
        }
        else
        {
          v400 = 0;
        }
        unsigned int v541 = v7 + 1;
        std::string::append(this, " : ", 3uLL);
        int v542 = *((unsigned __int8 *)a2 + 18);
        if (v542 == 2) {
          goto LABEL_1564;
        }
        if (v542 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1564:
          v409 = (swift::Demangle::Node *)*((void *)a2 + 1);
        }
        else
        {
          v409 = 0;
        }
        v543 = (_anonymous_namespace_::NodePrinter *)this;
        unsigned int v544 = v541;
LABEL_1572:
        v538 = "]";
LABEL_1615:
        v562 = this;
        std::string::size_type v563 = 1;
        goto LABEL_1810;
      case 0x12A:
        std::string::append(this, "(", 1uLL);
        int v391 = *((unsigned __int8 *)a2 + 18);
        if ((v391 - 1) < 2) {
          goto LABEL_1079;
        }
        if (v391 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1079:
          v392 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v392 = 0;
        }
        v538 = ")";
        goto LABEL_1615;
      case 0x12B:
        std::string::append(this, "accessor function at ", 0x15uLL);
LABEL_1155:
        uint64_t v425 = *(void *)a2;
LABEL_1156:
        swift::Demangle::DemanglerPrinter::operator<<(this, v425);
        goto LABEL_823;
      case 0x12C:
        int v65 = *((unsigned __int8 *)a2 + 18);
        unsigned int v66 = (swift::Demangle::Node **)a2;
        if ((v65 - 1) < 2) {
          goto LABEL_353;
        }
        if (v65 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_352:
          unsigned int v66 = *(swift::Demangle::Node ***)a2;
LABEL_353:
          unsigned int v140 = *v66;
        }
        else
        {
LABEL_403:
          unsigned int v140 = 0;
        }
        std::string::push_back(this, 46);
LABEL_505:
        int v192 = *((unsigned __int8 *)a2 + 18);
        if (v192 == 2) {
          goto LABEL_509;
        }
        if (v192 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_799;
        }
LABEL_508:
        a2 = *(swift::Demangle::Node **)a2;
LABEL_509:
        long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
        goto LABEL_7;
      case 0x12D:
        v332 = "opaque type symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 33;
        goto LABEL_1248;
      case 0x12E:
        unint64_t v43 = "opaque type descriptor for ";
LABEL_145:
        unint64_t v44 = this;
        std::string::size_type v45 = 27;
        goto LABEL_318;
      case 0x12F:
        unint64_t v43 = "opaque type descriptor runtime record for ";
LABEL_276:
        unint64_t v44 = this;
        std::string::size_type v45 = 42;
        goto LABEL_318;
      case 0x130:
        unint64_t v43 = "opaque type descriptor accessor for ";
LABEL_315:
        unint64_t v44 = this;
        std::string::size_type v45 = 36;
        goto LABEL_318;
      case 0x131:
        unint64_t v43 = "opaque type descriptor accessor impl for ";
LABEL_219:
        unint64_t v44 = this;
        std::string::size_type v45 = 41;
        goto LABEL_318;
      case 0x132:
        std::string::append(this, "opaque type descriptor accessor key for ", 0x28uLL);
        int v87 = *((unsigned __int8 *)a2 + 18);
        if ((v87 - 1) < 2) {
          goto LABEL_299;
        }
        if (v87 != 5) {
          goto LABEL_544;
        }
        goto LABEL_297;
      case 0x133:
        std::string::size_type v28 = "opaque type descriptor accessor var for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 40;
        goto LABEL_295;
      case 0x134:
        v274 = "some";
LABEL_1032:
        v275 = this;
        std::string::size_type v276 = 4;
        goto LABEL_822;
      case 0x135:
        std::string::append(this, "<<opaque return type of ", 0x18uLL);
        v274 = ">>";
        goto LABEL_1747;
      case 0x136:
        std::string::size_type v28 = "specialized generic metaclass for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 34;
        goto LABEL_295;
      case 0x137:
        std::string::size_type v28 = "canonical specialized generic type metadata accessor for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 57;
        goto LABEL_295;
      case 0x138:
        std::string::size_type v28 = "metadata instantiation cache for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 33;
        goto LABEL_295;
      case 0x139:
        std::string::size_type v28 = "noncanonical specialized generic type metadata for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 51;
        goto LABEL_295;
      case 0x13A:
        std::string::size_type v28 = "cache variable for noncanonical specialized generic type metadata for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 70;
        goto LABEL_295;
      case 0x13B:
      case 0x13C:
        if (v11 == 316) {
          long long v16 = "one-time initialization token for ";
        }
        else {
          long long v16 = "one-time initialization function for ";
        }
        if (v11 == 316) {
          std::string::size_type v17 = 34;
        }
        else {
          std::string::size_type v17 = 37;
        }
        std::string::append(this, v16, v17);
        int v18 = *((unsigned __int8 *)a2 + 18);
        if (v18 == 2) {
          goto LABEL_495;
        }
        if (v18 != 5) {
          goto LABEL_496;
        }
LABEL_493:
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_496;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_495:
        long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
        goto LABEL_6;
      case 0x13D:
        int v75 = *((unsigned __int8 *)a2 + 18);
        if (v75 == 1) {
          goto LABEL_5;
        }
        if (v75 == 5 && *((_DWORD *)a2 + 2) == 1) {
          goto LABEL_4;
        }
        std::string::push_back(this, 40);
        int v493 = *((unsigned __int8 *)a2 + 18);
        if (v493 == 5)
        {
          v578 = (unsigned int *)((char *)a2 + 8);
          uint64_t v579 = *((unsigned int *)a2 + 2);
          if (!v579
            || (unsigned int v580 = v7 + 1,
          {
LABEL_1838:
            std::string::push_back(this, 41);
            goto LABEL_823;
          }
        }
        else
        {
          if (v493 != 2)
          {
            if (v493 == 1) {
            goto LABEL_1838;
            }
          }
          v578 = (unsigned int *)((char *)a2 + 8);
          unsigned int v580 = v7 + 1;
          uint64_t v579 = 2;
        }
        unint64_t v581 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v583 = *((unsigned __int8 *)a2 + 18);
          if (v583 == 2)
          {
            unint64_t v584 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v583 != 5) {
              goto LABEL_1706;
            }
            unint64_t v584 = *v578;
          }
          if (v584 > v581)
          {
            unsigned int v585 = v583 - 1;
            v586 = a2;
            if (v585 >= 2) {
              v586 = *(swift::Demangle::Node **)a2;
            }
            v582 = (swift::Demangle::Node *)*((void *)v586 + v581);
            goto LABEL_1707;
          }
LABEL_1706:
          v582 = 0;
LABEL_1707:
          if (v579 == ++v581) {
            goto LABEL_1838;
          }
        }
      case 0x13E:
        std::string::size_type v28 = "flag for loading of canonical specialized generic type metadata for ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 68;
        goto LABEL_295;
      case 0x13F:
        v274 = "async function pointer to ";
        goto LABEL_1051;
      case 0x140:
      case 0x144:
        unsigned int v630 = v5;
        int v19 = 0;
        unint64_t v20 = 0;
        unint64_t v21 = *((unsigned __int8 *)a2 + 18);
        unint64_t v22 = v21;
        unsigned int v23 = v21 - 1;
        int v24 = -1;
        while (2)
        {
          uint64_t v25 = *((unsigned __int8 *)a2 + 18);
          if (v21 == 1) {
            goto LABEL_30;
          }
          if (v21 == 5)
          {
            if (v20 == *((_DWORD *)a2 + 2)) {
              break;
            }
            goto LABEL_31;
          }
          uint64_t v25 = 2;
          if (v21 != 2) {
            uint64_t v25 = 0;
          }
LABEL_30:
          if (v20 != v25)
          {
LABEL_31:
            std::string::size_type v26 = a2;
            if ((v21 - 1) >= 2) {
              std::string::size_type v26 = *(swift::Demangle::Node **)a2;
            }
            if (*(_WORD *)(*((void *)v26 + v20) + 16) != 321)
            {
              ++v20;
              ++v24;
              ++v19;
              continue;
            }
          }
          break;
        }
        unint64_t v27 = *((unsigned __int8 *)a2 + 18);
        switch(v21)
        {
          case 1:
            break;
          case 5:
            unint64_t v27 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v27 = 2;
            break;
          default:
            goto LABEL_414;
        }
        if (v27 > v20)
        {
          int v163 = a2;
          if (v23 >= 2) {
            int v163 = *(swift::Demangle::Node **)a2;
          }
          uint64_t v164 = (swift::Demangle::Node *)*((void *)v163 + v20);
LABEL_415:
          if (v21 != 1)
          {
            if (v21 == 5)
            {
              unint64_t v22 = *((unsigned int *)a2 + 2);
            }
            else
            {
              if (v21 != 2) {
                goto LABEL_424;
              }
              unint64_t v22 = 2;
            }
          }
          unint64_t v165 = (v20 + 1);
          if (v22 > v165)
          {
            int v166 = a2;
            if (v23 >= 2) {
              int v166 = *(swift::Demangle::Node **)a2;
            }
            unsigned int v167 = (swift::Demangle::Node *)*((void *)v166 + v165);
LABEL_425:
            if (v21 != 1)
            {
              if (v21 == 5)
              {
                unint64_t v21 = *((unsigned int *)a2 + 2);
              }
              else
              {
                if (v21 != 2) {
                  goto LABEL_434;
                }
                unint64_t v21 = 2;
              }
            }
            unint64_t v168 = (v20 + 2);
            if (v21 > v168)
            {
              int v169 = a2;
              if (v23 >= 2) {
                int v169 = *(swift::Demangle::Node **)a2;
              }
              unsigned int v170 = (swift::Demangle::Node *)*((void *)v169 + v168);
              goto LABEL_435;
            }
LABEL_434:
            unsigned int v170 = 0;
LABEL_435:
            if (v11 == 324) {
              std::string::append(this, "vtable thunk for ", 0x11uLL);
            }
            std::string::append(this, " of ", 4uLL);
            if (!v20)
            {
              long long v10 = 0;
              uint64_t v5 = v630;
              goto LABEL_728;
            }
            v629 = v170;
            int v171 = v167;
            unint64_t v172 = 0;
            unint64_t v173 = (v20 - 1);
            while (1)
            {
              unint64_t v175 = *((unsigned __int8 *)a2 + 18);
              if (v24 == v172)
              {
                if ((v175 - 1) >= 2)
                {
                  char v176 = 0;
                  int v177 = *(swift::Demangle::Node **)a2;
                }
                else
                {
                  char v176 = 1;
                  int v177 = a2;
                }
                if (*(_WORD *)(*((void *)v177 + v173) + 16) == 43)
                {
                  if (v175 == 1)
                  {
                    uint64_t v5 = v630;
                    unsigned int v167 = v171;
                  }
                  else
                  {
                    uint64_t v5 = v630;
                    unsigned int v167 = v171;
                    if (v175 != 5)
                    {
                      unsigned int v170 = v629;
                      if (v175 == 2)
                      {
                        unint64_t v175 = 2;
                        goto LABEL_723;
                      }
                      goto LABEL_727;
                    }
                    unint64_t v175 = *((unsigned int *)a2 + 2);
                  }
                  unsigned int v170 = v629;
LABEL_723:
                  if (v175 <= v173)
                  {
LABEL_727:
                    long long v10 = 0;
                  }
                  else
                  {
                    if ((v176 & 1) == 0) {
                      a2 = *(swift::Demangle::Node **)a2;
                    }
                    long long v10 = (swift::Demangle::Node *)*((void *)a2 + v173);
                  }
LABEL_728:
                  if (this[1].__r_.__value_.__s.__data_[11]) {
                    goto LABEL_823;
                  }
                  std::string::append(this, " with respect to parameters ", 0x1CuLL);
                  std::string::append(this, " and results ", 0xDuLL);
                  if (v10)
                  {
                    if (this[1].__r_.__value_.__s.__data_[7])
                    {
LABEL_731:
                      std::string::append(this, " with ", 6uLL);
                      goto LABEL_7;
                    }
                    goto LABEL_823;
                  }
                  goto LABEL_824;
                }
              }
              unsigned int v178 = v175 - 1;
              if (v175 == 1) {
                goto LABEL_450;
              }
              if (v175 != 5) {
                break;
              }
              if (*((unsigned int *)a2 + 2) > v172)
              {
LABEL_453:
                int v179 = a2;
                if (v178 >= 2) {
                  int v179 = *(swift::Demangle::Node **)a2;
                }
                int v174 = (swift::Demangle::Node *)*((void *)v179 + v172);
                goto LABEL_440;
              }
LABEL_439:
              int v174 = 0;
LABEL_440:
              if (v19 == ++v172)
              {
                long long v10 = 0;
                uint64_t v5 = v630;
                unsigned int v167 = v171;
                unsigned int v170 = v629;
                goto LABEL_728;
              }
            }
            if (v175 != 2) {
              goto LABEL_439;
            }
            unint64_t v175 = 2;
LABEL_450:
            if (v175 > v172) {
              goto LABEL_453;
            }
            goto LABEL_439;
          }
LABEL_424:
          unsigned int v167 = 0;
          goto LABEL_425;
        }
LABEL_414:
        uint64_t v164 = 0;
        goto LABEL_415;
      case 0x141:
        long long v10 = 0;
        HIDWORD(v410) = *(unsigned __int8 *)a2;
        LODWORD(v410) = (HIDWORD(v410) << 24) - 1677721600;
        switch((v410 >> 25))
        {
          case 0u:
            v274 = "differential";
            goto LABEL_1062;
          case 1u:
            v274 = "forward-mode derivative";
            goto LABEL_1760;
          case 6u:
            v274 = "pullback";
            goto LABEL_1758;
          case 7u:
            v274 = "reverse-mode derivative";
LABEL_1760:
            v275 = this;
            std::string::size_type v276 = 23;
            goto LABEL_822;
          default:
            goto LABEL_824;
        }
      case 0x142:
        std::string::append(this, "autodiff self-reordering reabstraction thunk ", 0x2DuLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          a2 = *(swift::Demangle::Node **)a2;
        }
        long long v10 = *(swift::Demangle::Node **)a2;
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "for ", 4uLL);
          goto LABEL_6;
        }
        unsigned int v185 = (swift::Demangle::Node *)*((void *)a2 + 1);
        int v184 = (unsigned __int16 *)*((void *)a2 + 2);
        int v186 = v184[8];
        if (v186 == 43) {
          uint64_t v187 = 24;
        }
        else {
          uint64_t v187 = 16;
        }
        std::string::append(this, "for ", 4uLL);
        if (v184 && v186 == 43)
        {
          std::string::push_back(this, 32);
        }
        std::string::append(this, " from ", 6uLL);
        std::string::append(this, " to ", 4uLL);
        long long v10 = v185;
        goto LABEL_7;
      case 0x143:
        std::string::append(this, "autodiff subset parameters thunk for ", 0x25uLL);
        unint64_t v90 = *((unsigned __int8 *)a2 + 18);
        switch(v90)
        {
          case 1:
            uint64_t v93 = 0;
            unint64_t v91 = -1;
            uint64_t v92 = *((unsigned __int8 *)a2 + 18);
            goto LABEL_619;
          case 5:
            uint64_t v92 = *((unsigned int *)a2 + 2);
            unint64_t v91 = v92 - 2;
            if (!v92)
            {
              int v219 = 0;
              uint64_t v92 = 0;
              unint64_t v221 = 0;
              unint64_t v220 = -3;
              goto LABEL_740;
            }
            uint64_t v93 = v92 - 1;
            uint64_t v218 = *(swift::Demangle::Node **)a2;
            goto LABEL_620;
          case 2:
            unint64_t v91 = 0;
            uint64_t v92 = 2;
            uint64_t v93 = 1;
LABEL_619:
            uint64_t v218 = a2;
LABEL_620:
            int v219 = (swift::Demangle::Node *)*((void *)v218 + v93);
            goto LABEL_622;
        }
        uint64_t v92 = 0;
        int v219 = 0;
        unint64_t v91 = -2;
LABEL_622:
        unint64_t v220 = v92 - 3;
        switch(v90)
        {
          case 1:
            unint64_t v221 = *((unsigned __int8 *)a2 + 18);
            break;
          case 2:
            unint64_t v221 = 2;
            break;
          case 5:
            unint64_t v221 = *((unsigned int *)a2 + 2);
            break;
          default:
            goto LABEL_744;
        }
LABEL_740:
        if (v221 <= v91)
        {
LABEL_744:
          v249 = 0;
          goto LABEL_745;
        }
        v248 = a2;
        if ((v90 - 1) >= 2) {
          v248 = *(swift::Demangle::Node **)a2;
        }
        v249 = (swift::Demangle::Node *)*((void *)v248 + v91);
LABEL_745:
        switch(v90)
        {
          case 1:
            unint64_t v250 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v250 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v250 = 2;
            break;
          default:
            goto LABEL_755;
        }
        if (v250 <= v220)
        {
LABEL_755:
          v252 = 0;
          goto LABEL_756;
        }
        v251 = a2;
        if ((v90 - 1) >= 2) {
          v251 = *(swift::Demangle::Node **)a2;
        }
        v252 = (swift::Demangle::Node *)*((void *)v251 + v220);
LABEL_756:
        unsigned int v253 = v90 - 1;
        switch(v90)
        {
          case 1:
            break;
          case 5:
            unint64_t v90 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v90 = 2;
            break;
          default:
            goto LABEL_765;
        }
        if (v90 <= v92 - 4)
        {
LABEL_765:
          v255 = 0;
          goto LABEL_766;
        }
        v254 = a2;
        if (v253 >= 2) {
          v254 = *(swift::Demangle::Node **)a2;
        }
        v255 = (swift::Demangle::Node *)*((void *)v254 + v92 - 4);
LABEL_766:
        unint64_t v256 = v92 - 5;
        std::string::append(this, " from ", 6uLL);
        if (v256)
        {
          uint64_t v257 = v5;
          unint64_t v258 = 0;
          unsigned int v259 = 1;
          while (1)
          {
            unint64_t v261 = *((unsigned __int8 *)a2 + 18);
            unsigned int v262 = v261 - 1;
            if (v261 == 1) {
              goto LABEL_774;
            }
            if (v261 != 5) {
              break;
            }
            if (*((unsigned int *)a2 + 2) > v258)
            {
LABEL_777:
              v263 = a2;
              if (v262 >= 2) {
                v263 = *(swift::Demangle::Node **)a2;
              }
              v260 = (swift::Demangle::Node *)*((void *)v263 + v258);
              goto LABEL_769;
            }
LABEL_768:
            v260 = 0;
LABEL_769:
            unint64_t v258 = v259++;
            if (v256 <= v258) {
              goto LABEL_787;
            }
          }
          if (v261 != 2) {
            goto LABEL_768;
          }
          unint64_t v261 = 2;
LABEL_774:
          if (v261 > v258) {
            goto LABEL_777;
          }
          goto LABEL_768;
        }
        int v264 = *((unsigned __int8 *)a2 + 18);
        v265 = (swift::Demangle::Node **)a2;
        if ((v264 - 1) < 2) {
          goto LABEL_784;
        }
        if (v264 == 5 && *((_DWORD *)a2 + 2))
        {
          v265 = *(swift::Demangle::Node ***)a2;
LABEL_784:
          uint64_t v257 = v5;
          v266 = *v265;
        }
        else
        {
          uint64_t v257 = v5;
          v266 = 0;
        }
LABEL_787:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        std::string::append(this, " and results ", 0xDuLL);
        std::string::append(this, " to parameters ", 0xFuLL);
        if (!v256) {
          goto LABEL_823;
        }
        std::string::append(this, " of type ", 9uLL);
        unint64_t v267 = *((unsigned __int8 *)a2 + 18);
        unsigned int v268 = v267 - 1;
        if (v267 == 1)
        {
          uint64_t v5 = v257;
        }
        else
        {
          uint64_t v5 = v257;
          if (v267 == 5)
          {
            unint64_t v267 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v267 != 2) {
              goto LABEL_799;
            }
            unint64_t v267 = 2;
          }
        }
        if (v267 <= v256) {
          goto LABEL_799;
        }
        if (v268 >= 2) {
          a2 = *(swift::Demangle::Node **)a2;
        }
        long long v10 = (swift::Demangle::Node *)*((void *)a2 + v256);
LABEL_7:
        char v6 = 0;
        char v8 = 1;
        a2 = v10;
        if (v7 > 0x300) {
          goto LABEL_820;
        }
        continue;
      case 0x145:
        uint64_t v76 = *((unsigned int *)a2 + 2);
        if (v76) {
          uint64_t v77 = *(void *)(*(void *)a2 + 8 * v76 - 8) + 16;
        }
        else {
          uint64_t v77 = 16;
        }
        BOOL v273 = *(unsigned __int16 *)v77 == 43;
        uint64_t v188 = -4;
        if (!v273) {
          uint64_t v188 = -3;
        }
        HIDWORD(v189) = **(unsigned __int8 **)(*(void *)a2 + 8 * (v188 + v76));
        LODWORD(v189) = (HIDWORD(v189) << 24) - 1677721600;
        switch((v189 >> 25))
        {
          case 0u:
            unsigned int v190 = "normal";
            goto LABEL_642;
          case 1u:
            unsigned int v190 = "forward-mode";
            goto LABEL_645;
          case 4u:
            unsigned int v190 = "linear";
LABEL_642:
            int v222 = this;
            std::string::size_type v223 = 6;
            goto LABEL_646;
          case 7u:
            unsigned int v190 = "reverse-mode";
LABEL_645:
            int v222 = this;
            std::string::size_type v223 = 12;
LABEL_646:
            std::string::append(v222, v190, v223);
            break;
          default:
            break;
        }
        std::string::append(this, " differentiability witness for ", 0x1FuLL);
        uint64_t v224 = *((unsigned __int8 *)a2 + 18);
        if (v224 == 1) {
          goto LABEL_652;
        }
        if (v224 == 5)
        {
          uint64_t v224 = *((unsigned int *)a2 + 2);
          if (v224) {
            goto LABEL_652;
          }
LABEL_669:
          LODWORD(v225) = 0;
          goto LABEL_671;
        }
        if (v224 != 2) {
          goto LABEL_669;
        }
        uint64_t v224 = 2;
LABEL_652:
        unint64_t v225 = 0;
        while (1)
        {
          unint64_t v227 = *((unsigned __int8 *)a2 + 18);
          if ((v227 - 1) >= 2)
          {
            char v228 = 0;
            int v229 = *(swift::Demangle::Node **)a2;
          }
          else
          {
            char v228 = 1;
            int v229 = a2;
          }
          if (*(_WORD *)(*((void *)v229 + v225) + 16) == 102) {
            break;
          }
          if (v227 == 1) {
            goto LABEL_663;
          }
          if (v227 != 5)
          {
            if (v227 != 2) {
              goto LABEL_653;
            }
            unint64_t v227 = 2;
LABEL_663:
            if (v227 > v225) {
              goto LABEL_666;
            }
            goto LABEL_653;
          }
          if (*((unsigned int *)a2 + 2) > v225)
          {
LABEL_666:
            unsigned int v230 = a2;
            if ((v228 & 1) == 0) {
              unsigned int v230 = *(swift::Demangle::Node **)a2;
            }
            int v226 = (swift::Demangle::Node *)*((void *)v230 + v225);
            goto LABEL_654;
          }
LABEL_653:
          int v226 = 0;
LABEL_654:
          if (v224 == ++v225)
          {
            LODWORD(v225) = v224;
            break;
          }
        }
LABEL_671:
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        unint64_t v231 = *((unsigned __int8 *)a2 + 18);
        unsigned int v232 = v231 - 1;
        if (v231 == 1) {
          goto LABEL_676;
        }
        if (v231 != 5)
        {
          if (v231 == 2)
          {
            unint64_t v231 = 2;
            goto LABEL_676;
          }
          goto LABEL_680;
        }
        unint64_t v231 = *((unsigned int *)a2 + 2);
LABEL_676:
        unint64_t v233 = (v225 + 1);
        if (v231 <= v233)
        {
LABEL_680:
          v235 = 0;
        }
        else
        {
          v234 = a2;
          if (v232 >= 2) {
            v234 = *(swift::Demangle::Node **)a2;
          }
          v235 = (swift::Demangle::Node *)*((void *)v234 + v233);
        }
        std::string::append(this, " and results ", 0xDuLL);
        unint64_t v236 = *((unsigned __int8 *)a2 + 18);
        unsigned int v237 = v236 - 1;
        if (v236 != 1)
        {
          if (v236 != 5)
          {
            if (v236 == 2)
            {
              unint64_t v236 = 2;
              goto LABEL_686;
            }
LABEL_690:
            v240 = 0;
            goto LABEL_691;
          }
          unint64_t v236 = *((unsigned int *)a2 + 2);
        }
LABEL_686:
        unint64_t v238 = (v225 + 2);
        if (v236 <= v238) {
          goto LABEL_690;
        }
        v239 = a2;
        if (v237 >= 2) {
          v239 = *(swift::Demangle::Node **)a2;
        }
        v240 = (swift::Demangle::Node *)*((void *)v239 + v238);
LABEL_691:
        unint64_t v241 = *((unsigned __int8 *)a2 + 18);
        switch(v241)
        {
          case 1:
            unint64_t v242 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v242 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v242 = 2;
            break;
          default:
            goto LABEL_823;
        }
        unint64_t v243 = (v225 + 3);
        if (v242 > v243)
        {
          unsigned int v244 = v241 - 1;
          if (v241 != 1)
          {
            if (v241 == 5) {
              unint64_t v241 = *((unsigned int *)a2 + 2);
            }
            else {
              unint64_t v241 = 2;
            }
          }
          if (v241 <= v243)
          {
            long long v10 = 0;
          }
          else
          {
            if (v244 >= 2) {
              a2 = *(swift::Demangle::Node **)a2;
            }
            long long v10 = (swift::Demangle::Node *)*((void *)a2 + v243);
          }
          goto LABEL_731;
        }
LABEL_823:
        long long v10 = 0;
LABEL_824:
        if (v8) {
          return 0;
        }
        else {
          return v10;
        }
      case 0x146:
        unint64_t v43 = "@noDerivative ";
LABEL_208:
        unint64_t v44 = this;
        std::string::size_type v45 = 14;
        goto LABEL_318;
      case 0x147:
        std::string::push_back(this, 123);
        uint64_t v438 = *((unsigned int *)a2 + 2);
        if (*((_DWORD *)a2 + 2))
        {
          uint64_t v439 = 0;
          char v440 = 0;
          uint64_t v441 = *(void *)a2;
          do
          {
            if (*(unsigned char *)(v441 + v439) == 83)
            {
              if (v440) {
                std::string::append(this, ", ", 2uLL);
              }
              swift::Demangle::DemanglerPrinter::operator<<(this, v439);
              char v440 = 1;
            }
            ++v439;
          }
          while (v438 != v439);
        }
        std::string::push_back(this, 125);
        goto LABEL_823;
      case 0x148:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v426 = *((unsigned __int8 *)a2 + 18);
        if ((v426 - 1) < 2) {
          goto LABEL_1162;
        }
        if (v426 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1162:
          v427 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v427 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v538 = " await resume partial function for ";
        v562 = this;
        std::string::size_type v563 = 35;
        goto LABEL_1810;
      case 0x149:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v381 = *((unsigned __int8 *)a2 + 18);
        if ((v381 - 1) < 2) {
          goto LABEL_1048;
        }
        if (v381 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1048:
          v382 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v382 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v538 = " suspend resume partial function for ";
        v562 = this;
        std::string::size_type v563 = 37;
        goto LABEL_1810;
      case 0x14A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "accessible function runtime record for ";
        v275 = this;
        std::string::size_type v276 = 39;
        goto LABEL_822;
      case 0x14B:
        unint64_t v43 = "_const ";
LABEL_204:
        unint64_t v44 = this;
        std::string::size_type v45 = 7;
LABEL_318:
        std::string::append(v44, v43, v45);
        int v125 = *((unsigned __int8 *)a2 + 18);
        if ((v125 - 1) < 2) {
          goto LABEL_322;
        }
        if (v125 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_544;
        }
        a2 = *(swift::Demangle::Node **)a2;
LABEL_322:
        long long v10 = *(swift::Demangle::Node **)a2;
        ++v7;
        goto LABEL_7;
      case 0x14C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        v274 = "back deployment thunk for ";
LABEL_1051:
        v275 = this;
        std::string::size_type v276 = 26;
        goto LABEL_822;
      case 0x14D:
        v274 = "back deployment fallback for ";
        v275 = this;
        std::string::size_type v276 = 29;
        goto LABEL_822;
      case 0x14E:
        std::string::value_type v420 = this[1].__r_.__value_.__s.__data_[7];
        this[1].__r_.__value_.__s.__data_[7] = 1;
        int v421 = *((unsigned __int8 *)a2 + 18);
        if (v421 == 2) {
          goto LABEL_1152;
        }
        if (v421 != 5) {
          goto LABEL_1794;
        }
        unsigned int v422 = *((_DWORD *)a2 + 2);
        if (v422 == 2)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1152:
          v423 = (swift::Demangle::Node *)*((void *)a2 + 1);
          std::string::append(this, "existential shape for ", 0x16uLL);
          if (v423)
          {
            unsigned int v424 = v7 + 1;
            std::string::append(this, " ", 1uLL);
            v423 = 0;
            goto LABEL_1797;
          }
        }
        else
        {
          if (v422 < 2) {
LABEL_1794:
          }
            v423 = 0;
          else {
            v423 = *(swift::Demangle::Node **)(*(void *)a2 + 8);
          }
          std::string::append(this, "existential shape for ", 0x16uLL);
        }
        unsigned int v424 = v7 + 1;
LABEL_1797:
        std::string::append(this, "any ", 4uLL);
        __n128 result = 0;
        this[1].__r_.__value_.__s.__data_[7] = v420;
        return result;
      case 0x14F:
        std::string::size_type v28 = "uniquable ";
        std::string::size_type v29 = this;
        std::string::size_type v30 = 10;
LABEL_295:
        std::string::append(v29, v28, v30);
        int v124 = *((unsigned __int8 *)a2 + 18);
        if ((v124 - 1) < 2) {
          goto LABEL_299;
        }
        if (v124 != 5) {
          goto LABEL_496;
        }
LABEL_297:
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_496;
        }
LABEL_298:
        a2 = *(swift::Demangle::Node **)a2;
LABEL_299:
        long long v10 = *(swift::Demangle::Node **)a2;
        goto LABEL_6;
      case 0x150:
        v332 = "unique existential shape symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 46;
        goto LABEL_1248;
      case 0x151:
        v332 = "non-unique existential shape symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 50;
        goto LABEL_1248;
      case 0x152:
        int v411 = *((unsigned __int8 *)a2 + 18);
        v412 = a2;
        if ((v411 - 1) < 2) {
          goto LABEL_1132;
        }
        if (v411 == 5 && *((_DWORD *)a2 + 2))
        {
          v412 = *(swift::Demangle::Node **)a2;
LABEL_1132:
          uint64_t v413 = *(void *)v412;
        }
        else
        {
          uint64_t v413 = 0;
        }
        int v545 = *(unsigned __int16 *)(v413 + 16);
        std::string::append(this, "symbolic existential type (", 0x1BuLL);
        if (v545 == 336) {
          v546 = (const std::string::value_type *)&unk_215276E75;
        }
        else {
          v546 = "non-";
        }
        std::string::append(this, v546, 4 * (v545 != 336));
        std::string::append(this, "unique) 0x", 0xAuLL);
        v547 = swift::Demangle::DemanglerPrinter::writeHex(this, *(void *)v413);
        std::string::append(v547, " <", 2uLL);
        int v548 = *((unsigned __int8 *)a2 + 18);
        v549 = a2;
        if (v548 == 2) {
          goto LABEL_1581;
        }
        if (v548 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v549 = *(swift::Demangle::Node **)a2;
LABEL_1581:
          v550 = (swift::Demangle::Node *)*((void *)v549 + 1);
        }
        else
        {
          v550 = 0;
        }
        unsigned int v551 = v7 + 1;
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
        {
          std::string::append(this, ", ", 2uLL);
          if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
            v552 = *(swift::Demangle::Node **)(*(void *)a2 + 16);
          }
          else {
            v552 = 0;
          }
        }
        v274 = ">";
        goto LABEL_1496;
      case 0x153:
        v274 = "metatypes-removed";
        goto LABEL_1432;
      case 0x154:
        v274 = "#_hasSymbol query for ";
LABEL_1023:
        v275 = this;
        std::string::size_type v276 = 22;
        goto LABEL_822;
      case 0x157:
        long long v15 = "outlined enum tag store of ";
LABEL_309:
        uint64_t v31 = this;
        std::string::size_type v32 = 27;
        goto LABEL_310;
      case 0x158:
        long long v15 = "outlined enum project data for load of ";
        uint64_t v31 = this;
        std::string::size_type v32 = 39;
        goto LABEL_310;
      case 0x159:
        long long v15 = "outlined enum get tag of ";
        uint64_t v31 = this;
        std::string::size_type v32 = 25;
        goto LABEL_310;
      case 0x15A:
        long long v15 = "async demotion of ";
LABEL_272:
        uint64_t v31 = this;
        std::string::size_type v32 = 18;
LABEL_310:
        std::string::append(v31, v15, v32);
LABEL_311:
        int v118 = *((unsigned __int8 *)a2 + 18);
        if ((v118 - 1) >= 2) {
          goto LABEL_312;
        }
        goto LABEL_5;
      case 0x15B:
        v332 = "objective-c protocol symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 42;
LABEL_1248:
        std::string::append(v333, v332, v334);
        swift::Demangle::DemanglerPrinter::writeHex(this, *(void *)a2);
        goto LABEL_823;
      case 0x15C:
        std::string::append(this, "lifetime dependence: ", 0x15uLL);
        unint64_t v78 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          unint64_t v78 = *(swift::Demangle::Node **)a2;
        }
        int v79 = **(unsigned __int8 **)v78;
        if (v79 == 115)
        {
          uint64_t v80 = "scope ";
          unsigned int v81 = this;
          std::string::size_type v82 = 6;
        }
        else
        {
          if (v79 != 105) {
            goto LABEL_535;
          }
          uint64_t v80 = "inherit ";
          unsigned int v81 = this;
          std::string::size_type v82 = 8;
        }
        std::string::append(v81, v80, v82);
LABEL_535:
        int v204 = *((unsigned __int8 *)a2 + 18);
        if (v204 == 2) {
          goto LABEL_539;
        }
        if (v204 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
LABEL_538:
          a2 = *(swift::Demangle::Node **)a2;
LABEL_539:
          long long v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
          ++v7;
        }
        else
        {
LABEL_544:
          long long v10 = 0;
          ++v7;
        }
        goto LABEL_7;
      case 0x15D:
        std::string::append(this, "(self lifetime dependence: ", 0x1BuLL);
        int v384 = *(unsigned __int8 *)a2;
        if (v384 == 115)
        {
          v274 = "scope) ";
LABEL_1633:
          v275 = this;
          std::string::size_type v276 = 7;
          goto LABEL_822;
        }
        if (v384 != 105) {
          goto LABEL_823;
        }
        v274 = "inherit) ";
        goto LABEL_1790;
      case 0x162:
        int v394 = *((unsigned __int8 *)a2 + 18);
        v395 = (swift::Demangle::Node **)a2;
        if ((v394 - 1) < 2) {
          goto LABEL_1090;
        }
        if (v394 == 5 && *((_DWORD *)a2 + 2))
        {
          v395 = *(swift::Demangle::Node ***)a2;
LABEL_1090:
          v396 = *v395;
        }
        else
        {
          v396 = 0;
        }
        std::string::append(this, ": ~", 3uLL);
        v539 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v539 = *(swift::Demangle::Node **)a2;
        }
        uint64_t v540 = **((void **)v539 + 1);
        if (v540 == 1)
        {
          std::string::append(this, "Swift.", 6uLL);
          v274 = "Escapable";
          goto LABEL_1790;
        }
        if (!v540)
        {
          std::string::append(this, "Swift.", 6uLL);
          v274 = "Copyable";
          goto LABEL_1758;
        }
        std::string::append(this, "Swift.<bit ", 0xBuLL);
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::Node **)a2;
        }
        v275 = swift::Demangle::DemanglerPrinter::operator<<(this, **((void **)a2 + 1));
        v274 = ">";
        std::string::size_type v276 = 1;
        goto LABEL_822;
      default:
        printer_unreachable("bad node kind!");
    }
  }
}

swift::Demangle::Node *anonymous namespace'::NodePrinter::printEntity(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, std::string::value_type *__s, size_t __n, unsigned int a9, std::string::value_type *__sa, std::string::size_type __na)
{
  std::string::size_type v11 = __n;
  int v12 = __s;
  std::string::size_type v17 = a2;
  if (*((_WORD *)a2 + 8) != 19)
  {
    unint64_t v19 = 0;
    if (!__n) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  unint64_t v19 = 0;
  int v20 = *((unsigned __int8 *)a2 + 18);
  if (v20 == 1) {
    goto LABEL_12;
  }
  unint64_t v21 = a2;
  if (v20 != 2)
  {
    if (v20 != 5) {
      goto LABEL_8;
    }
    unsigned int v22 = *((_DWORD *)a2 + 2);
    if (v22 < 2)
    {
      unint64_t v19 = 0;
      if (v22) {
        goto LABEL_11;
      }
LABEL_24:
      std::string::size_type v17 = 0;
      if (!__n) {
        goto LABEL_25;
      }
      goto LABEL_15;
    }
    unint64_t v21 = (uint64_t *)*a2;
  }
  unint64_t v19 = v21[1];
LABEL_8:
  if (v20 == 2) {
    goto LABEL_12;
  }
  if (v20 != 5 || !*((_DWORD *)a2 + 2)) {
    goto LABEL_24;
  }
LABEL_11:
  std::string::size_type v17 = (uint64_t *)*a2;
LABEL_12:
  std::string::size_type v17 = (uint64_t *)*v17;
  if (!__n)
  {
LABEL_25:
    int v25 = 0;
    if (a6) {
      goto LABEL_26;
    }
LABEL_32:
    int v27 = 0;
    goto LABEL_33;
  }
LABEL_15:
  unsigned int v23 = memchr(__s, 32, __n);
  if (v23) {
    BOOL v24 = v23 - v12 == -1;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = !v24;
  if (!a6) {
    goto LABEL_32;
  }
LABEL_26:
  std::string::size_type v26 = v17;
  if (*((unsigned char *)v17 + 18) == 5) {
    std::string::size_type v26 = (uint64_t *)*v17;
  }
  if (*(_WORD *)(v26[1] + 16) != 137) {
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 33)) {
    int v25 = 1;
  }
  int v27 = 1;
LABEL_33:
  if (a5) {
    char v28 = 1;
  }
  else {
    char v28 = v25;
  }
  if (a4 && (v28 & 1) != 0) {
    return (swift::Demangle::Node *)v17;
  }
  int v29 = *((unsigned __int8 *)v17 + 18);
  std::string::size_type v30 = v17;
  int v85 = v27;
  unint64_t v88 = v19;
  if ((v29 - 1) < 2) {
    goto LABEL_42;
  }
  if (v29 == 5 && *((_DWORD *)v17 + 2))
  {
    std::string::size_type v30 = (uint64_t *)*v17;
LABEL_42:
    uint64_t v31 = *v30;
    goto LABEL_44;
  }
  uint64_t v31 = 0;
LABEL_44:
  uint64_t v32 = a9;
  int v86 = v25;
  char v87 = a4;
  if (!*(unsigned char *)(a1 + 25))
  {
    int v35 = 0;
    std::string::size_type v38 = __na;
    if (a6) {
      goto LABEL_96;
    }
    goto LABEL_93;
  }
  int v33 = a5;
  uint64_t v34 = (swift::Demangle::Node *)v31;
  if (*(_WORD *)(v31 + 16) == 153)
  {
    uint64_t v36 = *(unsigned char **)v31;
    int v35 = *(swift::Demangle::Node **)(v31 + 8);
    if (v35 == (swift::Demangle::Node *)3)
    {
      if (*(_WORD *)v36 == 24415 && v36[2] == 67)
      {
        int v42 = *(unsigned __int8 *)(a1 + 42);
        goto LABEL_77;
      }
      if (*(void *)(a1 + 56) != 3) {
        goto LABEL_70;
      }
    }
    else if (v35 == (swift::Demangle::Node *)5)
    {
      if (*(_DWORD *)v36 == 1718187859 && v36[4] == 116)
      {
        int v42 = *(unsigned __int8 *)(a1 + 41);
        goto LABEL_77;
      }
      if (*(void *)(a1 + 56) != 5) {
        goto LABEL_70;
      }
    }
    else
    {
      if (v35 != *(swift::Demangle::Node **)(a1 + 56))
      {
LABEL_65:
        if ((unint64_t)v35 < 0xC) {
          goto LABEL_70;
        }
        if (*(void *)v36 != 0x655F62646C6C5F5FLL || *((_DWORD *)v36 + 2) != 1601335416) {
          goto LABEL_70;
        }
        int v42 = *(unsigned __int8 *)(a1 + 40);
LABEL_77:
        if (v42) {
          char v43 = v25;
        }
        else {
          char v43 = 1;
        }
        if (v42) {
          int v35 = v34;
        }
        else {
          int v35 = 0;
        }
        if (v43) {
          goto LABEL_72;
        }
        goto LABEL_84;
      }
      if (!v35)
      {
LABEL_72:
        a5 = v33;
        goto LABEL_92;
      }
    }
    int v40 = memcmp(*(const void **)v31, *(const void **)(a1 + 48), *(void *)(v31 + 8));
    int v25 = v86;
    if (!v40)
    {
      int v35 = 0;
      goto LABEL_72;
    }
    goto LABEL_65;
  }
LABEL_70:
  if (v25)
  {
    int v35 = v34;
    goto LABEL_72;
  }
LABEL_84:
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v44 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v44 = *(void *)(a1 + 8);
  }
  uint64_t v46 = *(unsigned __int8 *)(a1 + 23);
  if ((v46 & 0x80u) != 0) {
    uint64_t v46 = *(void *)(a1 + 8);
  }
  if (v46 != v44) {
    std::string::push_back((std::string *)a1, 46);
  }
  int v35 = (swift::Demangle::Node *)v45;
  a5 = v33;
  int v25 = v86;
LABEL_92:
  uint64_t v32 = a9;
  std::string::size_type v38 = __na;
  if (a6) {
    goto LABEL_96;
  }
LABEL_93:
  if (!v38)
  {
    int v47 = a3;
    unint64_t v48 = v88;
    if (!v11) {
      goto LABEL_117;
    }
    goto LABEL_115;
  }
LABEL_96:
  if (v11) {
    int v49 = v25;
  }
  else {
    int v49 = 0;
  }
  int v50 = a5;
  int v51 = v35;
  if (v49 == 1)
  {
    std::string::append((std::string *)a1, v12, v11);
    if ((v32 & 0x80000000) == 0)
    {
      snprintf(__str, 0x20uLL, "%lld", v32);
      std::string::append((std::string *)a1, __str);
    }
    std::string::append((std::string *)a1, " of ", 4uLL);
    std::string::size_type v11 = 0;
    LODWORD(v32) = -1;
    int v12 = (const std::string::value_type *)&unk_215276E75;
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v52 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v52 = *(void *)(a1 + 8);
  }
  if (v38)
  {
    std::string::append((std::string *)a1, __sa, v38);
    int v47 = a3;
    unint64_t v48 = v88;
    goto LABEL_108;
  }
  int v57 = *((unsigned __int8 *)v17 + 18);
  int v58 = v17;
  if (v57 == 5) {
    int v58 = (uint64_t *)*v17;
  }
  unint64_t v59 = (swift::Demangle::Node *)v58[1];
  int v47 = a3;
  if (*((_WORD *)v59 + 8) != 176)
  {
    int v57 = *((unsigned __int8 *)v17 + 18);
  }
  int v60 = (swift::Demangle::Node **)v17;
  unint64_t v48 = v88;
  if ((v57 - 1) >= 2)
  {
    if (v57 == 5)
    {
      unint64_t v61 = (uint64_t *)*v17;
      int v60 = (swift::Demangle::Node **)*v17;
      goto LABEL_194;
    }
    int v60 = 0;
  }
  if (v57 == 1)
  {
    int v75 = (swift::Demangle::Node **)(v17 + 1);
    goto LABEL_224;
  }
  if (v57 == 2)
  {
    int v75 = (swift::Demangle::Node **)(v17 + 2);
    goto LABEL_224;
  }
  if (v57 != 5)
  {
    int v75 = 0;
    goto LABEL_224;
  }
  unint64_t v61 = (uint64_t *)*v17;
LABEL_194:
  int v75 = (swift::Demangle::Node **)&v61[*((unsigned int *)v17 + 2)];
LABEL_224:
  if (v60 != v75)
  {
    while (*((_WORD *)*v60 + 8) != 176)
    {
      if (++v60 == v75)
      {
        int v60 = v75;
        break;
      }
    }
  }
  switch(v57)
  {
    case 5:
      uint64_t v84 = *v17 + 8 * *((unsigned int *)v17 + 2);
      break;
    case 2:
      uint64_t v84 = (uint64_t)(v17 + 2);
      break;
    case 1:
      uint64_t v84 = (uint64_t)(v17 + 1);
      break;
    default:
      uint64_t v84 = 0;
      break;
  }
  if (v60 != (swift::Demangle::Node **)v84 && *v60) {
LABEL_108:
  }
  uint64_t v53 = *(unsigned __int8 *)(a1 + 23);
  if ((v53 & 0x80u) != 0) {
    uint64_t v53 = *(void *)(a1 + 8);
  }
  if (v53 == v52)
  {
    int v35 = v51;
    a5 = v50;
    if (!v11) {
      goto LABEL_117;
    }
  }
  else
  {
    int v35 = v51;
    a5 = v50;
    if (!v11) {
      goto LABEL_117;
    }
    std::string::push_back((std::string *)a1, 46);
  }
LABEL_115:
  std::string::append((std::string *)a1, v12, v11);
  if ((v32 & 0x80000000) == 0)
  {
    snprintf(__str, 0x20uLL, "%lld", v32);
    std::string::append((std::string *)a1, __str);
  }
LABEL_117:
  if (!a5) {
    goto LABEL_210;
  }
  int v54 = *((unsigned __int8 *)v17 + 18);
  int v55 = (swift::Demangle::Node **)v17;
  if ((v54 - 1) >= 2)
  {
    if (v54 == 5)
    {
      int v56 = (uint64_t *)*v17;
      int v55 = (swift::Demangle::Node **)*v17;
      goto LABEL_133;
    }
    int v55 = 0;
  }
  switch(v54)
  {
    case 1:
      unsigned int v62 = (swift::Demangle::Node **)(v17 + 1);
      if (v55 != (swift::Demangle::Node **)(v17 + 1)) {
        goto LABEL_140;
      }
      break;
    case 2:
      unsigned int v62 = (swift::Demangle::Node **)(v17 + 2);
      if (v55 != (swift::Demangle::Node **)(v17 + 2)) {
        goto LABEL_140;
      }
      break;
    case 5:
      int v56 = (uint64_t *)*v17;
LABEL_133:
      unsigned int v62 = (swift::Demangle::Node **)&v56[*((unsigned int *)v17 + 2)];
      if (v55 != v62) {
        goto LABEL_140;
      }
      break;
    default:
      unsigned int v62 = 0;
      if (v55)
      {
LABEL_140:
        while (*((_WORD *)*v55 + 8) != 232)
        {
          if (++v55 == v62)
          {
            int v55 = v62;
            goto LABEL_143;
          }
        }
      }
      break;
  }
LABEL_143:
  if (v54 == 5)
  {
    if (v55 == (swift::Demangle::Node **)(*v17 + 8 * *((unsigned int *)v17 + 2)))
    {
LABEL_159:
      std::string::size_type v17 = 0;
      *(unsigned char *)(a1 + 97) = 0;
      return (swift::Demangle::Node *)v17;
    }
  }
  else
  {
    int v63 = (swift::Demangle::Node **)(v17 + 1);
    if (v54 != 1) {
      int v63 = 0;
    }
    if (v54 == 2) {
      unint64_t v64 = (swift::Demangle::Node **)(v17 + 2);
    }
    else {
      unint64_t v64 = v63;
    }
    if (v55 == v64) {
      goto LABEL_159;
    }
  }
  int v65 = *v55;
  if (!v65) {
    goto LABEL_159;
  }
  int v66 = *((unsigned __int8 *)v65 + 18);
  if ((v66 - 1) < 2) {
    goto LABEL_157;
  }
  if (v66 == 5 && *((_DWORD *)v65 + 2))
  {
    int v65 = *(swift::Demangle::Node **)v65;
LABEL_157:
    int v67 = *(swift::Demangle::Node **)v65;
    if (a5 != 2) {
      goto LABEL_187;
    }
    goto LABEL_161;
  }
  int v67 = 0;
  if (a5 != 2) {
    goto LABEL_187;
  }
LABEL_161:
  int v68 = v67;
  while (1)
  {
    int v70 = *((unsigned __int16 *)v68 + 8);
    if (v70 != 44) {
      break;
    }
    int v71 = *((unsigned __int8 *)v68 + 18);
    if (v71 != 2)
    {
      if (v71 != 5 || *((_DWORD *)v68 + 2) < 2u)
      {
        __int16 v69 = 0;
        goto LABEL_172;
      }
      int v68 = *(swift::Demangle::Node **)v68;
    }
    __int16 v69 = (swift::Demangle::Node *)*((void *)v68 + 1);
LABEL_172:
    int v72 = *((unsigned __int8 *)v69 + 18);
    if ((v72 - 1) < 2)
    {
LABEL_164:
      int v68 = *(swift::Demangle::Node **)v69;
    }
    else
    {
      int v68 = 0;
      if (v72 == 5)
      {
        int v68 = 0;
        if (*((_DWORD *)v69 + 2))
        {
          __int16 v69 = *(swift::Demangle::Node **)v69;
          goto LABEL_164;
        }
      }
    }
  }
  BOOL v73 = (v70 - 22) > 0x3C || ((1 << (v70 - 22)) & 0x1000080000000001) == 0;
  if (!v73 || v70 == 222 || v70 == 245)
  {
    int v74 = *((unsigned __int16 *)v17 + 8);
    if ((v74 == 117 || v74 == 70) && !*(unsigned char *)(a1 + 45)) {
      goto LABEL_210;
    }
    if (v86) {
      goto LABEL_186;
    }
    uint64_t v76 = v67;
    while (1)
    {
LABEL_199:
      uint64_t v77 = v76;
      int v78 = *((unsigned __int16 *)v76 + 8);
      if (v78 != 232)
      {
        BOOL v80 = (v78 - 44) > 0x26 || ((1 << (v78 - 44)) & 0x4000200001) == 0;
        if (!v80 || v78 == 245)
        {
LABEL_209:
          goto LABEL_210;
        }
LABEL_186:
        std::string::push_back((std::string *)a1, 32);
        goto LABEL_209;
      }
      int v79 = *((unsigned __int8 *)v77 + 18);
      if ((v79 - 1) < 2) {
        goto LABEL_198;
      }
      uint64_t v76 = 0;
      if (v79 == 5)
      {
        uint64_t v76 = 0;
        if (*((_DWORD *)v77 + 2)) {
          break;
        }
      }
    }
    uint64_t v77 = *(swift::Demangle::Node **)v77;
LABEL_198:
    uint64_t v76 = *(swift::Demangle::Node **)v77;
    goto LABEL_199;
  }
LABEL_187:
  if (*(unsigned char *)(a1 + 32))
  {
    std::string::append((std::string *)a1, " : ", 3uLL);
    goto LABEL_209;
  }
LABEL_210:
  if ((v87 & 1) != 0 || !v35 || v85 && !*(unsigned char *)(a1 + 33)) {
    return v35;
  }
  int v81 = *((unsigned __int16 *)v17 + 8);
  std::string::size_type v82 = " of ";
  if (((v81 - 125) > 0x36 || ((1 << (v81 - 125)) & 0x60000000000001) == 0)
    && v81 != 33)
  {
    std::string::size_type v82 = " in ";
  }
  std::string::append((std::string *)a1, v82, 4uLL);
  return 0;
}

std::string *anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::Node *a2, int a3, const char *a4)
{
  if (!a2) {
    return this;
  }
  uint64_t v5 = (_anonymous_namespace_::NodePrinter *)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_10;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      long long v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        return this;
      }
      goto LABEL_17;
    case 2:
      long long v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        return this;
      }
      goto LABEL_17;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_10:
      long long v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        return this;
      }
      goto LABEL_17;
  }
  long long v9 = 0;
  if (!v7) {
    return this;
  }
LABEL_17:
  unsigned int v10 = a3 + 1;
  do
  {
    std::string::size_type v11 = *(swift::Demangle::Node **)v7;
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (a4)
    {
      if (v7 != v9)
      {
        size_t v12 = strlen(a4);
        this = std::string::append((std::string *)v5, a4, v12);
      }
    }
  }
  while (v7 != v9);
  return this;
}

std::string *anonymous namespace'::operator<<(std::string *a1, uint64_t a2)
{
  std::string::push_back(a1, 34);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    while (2)
    {
      int v9 = *v5;
      switch(*v5)
      {
        case 0:
          unsigned int v7 = a1;
          uint64_t v8 = "\\0";
          goto LABEL_10;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_16;
        case 9:
          unsigned int v7 = a1;
          uint64_t v8 = "\\t";
          goto LABEL_10;
        case 10:
          unsigned int v7 = a1;
          uint64_t v8 = "\\n";
          goto LABEL_10;
        case 13:
          unsigned int v7 = a1;
          uint64_t v8 = "\\r";
          goto LABEL_10;
        case 34:
          unsigned int v7 = a1;
          uint64_t v8 = "\\\"";
          goto LABEL_10;
        default:
          if (v9 == 92)
          {
            unsigned int v7 = a1;
            uint64_t v8 = "\\\\"";
LABEL_10:
            std::string::append(v7, v8, 2uLL);
          }
          else
          {
LABEL_16:
            unint64_t v10 = *v5;
            if ((v9 - 127) > 0xA0u)
            {
              std::string::value_type v11 = *v5;
            }
            else
            {
              std::string::append(a1, "\\x", 2uLL);
            }
            std::string::push_back(a1, v11);
          }
          ++v5;
          if (--v6) {
            continue;
          }
          goto LABEL_23;
      }
    }
  }
LABEL_23:
  std::string::push_back(a1, 34);
  return a1;
}

void anonymous namespace'::NodePrinter::printFunctionType(std::string *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, int a4)
{
  uint64_t v5 = a3;
  int v8 = *((unsigned __int8 *)a3 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a3 + 2) <= 1u))
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v56[0] = this;
  v56[1] = a3;
  int v57 = a4;
  unsigned int v9 = *((unsigned __int16 *)a3 + 8);
  if (v9 <= 0xA4)
  {
    if (v9 == 11)
    {
LABEL_9:
      std::string::append(this, "@autoclosure ", 0xDuLL);
      goto LABEL_18;
    }
    if (v9 != 22)
    {
      if (v9 != 64) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    unint64_t v10 = "c";
    goto LABEL_17;
  }
  switch(v9)
  {
    case 0xA5u:
LABEL_16:
      unint64_t v10 = "block";
LABEL_17:
      break;
    case 0xA6u:
      std::string::append(this, "@escaping ", 0xAuLL);
      goto LABEL_16;
    case 0xDEu:
      std::string::append(this, "@convention(thin) ", 0x12uLL);
      break;
  }
LABEL_18:
  unint64_t v11 = *((unsigned __int8 *)v5 + 18);
  if (v11 == 5)
  {
    int v13 = *((_DWORD *)v5 + 2);
    unsigned int v55 = v13 - 2;
    if (v13)
    {
      uint64_t v15 = **(void **)v5 + 16;
    }
    else
    {
      int v13 = 0;
      uint64_t v15 = 16;
    }
    unsigned int v12 = *(unsigned __int16 *)v15 == 23;
    uint64_t v14 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    unsigned int v12 = *(unsigned __int16 *)(*(void *)v5 + 16) == 23;
    if (v11 == 2)
    {
      unsigned int v55 = 0;
      int v13 = 2;
    }
    else
    {
      unsigned int v55 = -1;
      int v13 = 1;
    }
    uint64_t v14 = v5;
  }
  if (*(_WORD *)(*((void *)v14 + v12) + 16) == 129)
  {
    unsigned int v16 = v11 - 1;
    if (v11 != 1)
    {
      std::string::size_type v17 = v5;
      if (v11 == 2)
      {
LABEL_35:
        int v18 = (swift::Demangle::Node *)*((void *)v17 + v12);
LABEL_37:
        if (v12) {
          unsigned int v12 = 2;
        }
        else {
          unsigned int v12 = 1;
        }
        LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
        goto LABEL_41;
      }
      if (v11 != 5)
      {
LABEL_36:
        int v18 = 0;
        goto LABEL_37;
      }
      unint64_t v11 = *((unsigned int *)v5 + 2);
    }
    if (v11 > v12)
    {
      std::string::size_type v17 = v5;
      if (v16 >= 2) {
        std::string::size_type v17 = *(swift::Demangle::Node **)v5;
      }
      goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_41:
  unint64_t v19 = v12;
  if ((v11 - 1) >= 2)
  {
    char v20 = 0;
    unint64_t v21 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    char v20 = 1;
    unint64_t v21 = v5;
  }
  if (*(_WORD *)(*((void *)v21 + v12) + 16) == 67)
  {
    if (v11 == 1)
    {
      if (!v12) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v12 >= 2uLL) {
          goto LABEL_51;
        }
LABEL_53:
        unsigned int v23 = v5;
        if ((v20 & 1) == 0) {
          unsigned int v23 = *(swift::Demangle::Node **)v5;
        }
        unsigned int v22 = (swift::Demangle::Node *)*((void *)v23 + v12);
        goto LABEL_56;
      }
      if (*((unsigned int *)v5 + 2) > (unint64_t)v12) {
        goto LABEL_53;
      }
    }
LABEL_51:
    unsigned int v22 = 0;
LABEL_56:
    unint64_t v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    char v24 = 0;
    int v25 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    char v24 = 1;
    int v25 = v5;
  }
  if (*(_WORD *)(*((void *)v25 + v19) + 16) != 68)
  {
    unsigned __int8 v28 = -100;
    int v29 = v5;
    if (v24) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  std::string::size_type v26 = v5;
  if ((v24 & 1) == 0) {
    std::string::size_type v26 = *(swift::Demangle::Node **)v5;
  }
  char v27 = **((unsigned char **)v26 + v19);
  unint64_t v19 = v12 + 1;
  unsigned __int8 v28 = v27 - 100;
  ++v12;
  int v29 = v5;
  if ((v24 & 1) == 0) {
LABEL_66:
  }
    int v29 = *(swift::Demangle::Node **)v5;
LABEL_67:
  if (*(_WORD *)(*((void *)v29 + v19) + 16) == 349)
  {
    if (v11 == 1)
    {
      if (!v19) {
        goto LABEL_76;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v19 >= 2) {
          goto LABEL_74;
        }
LABEL_76:
        uint64_t v31 = v5;
        if ((v24 & 1) == 0) {
          uint64_t v31 = *(swift::Demangle::Node **)v5;
        }
        std::string::size_type v30 = (swift::Demangle::Node *)*((void *)v31 + v19);
        goto LABEL_79;
      }
      if (*((unsigned int *)v5 + 2) > v19) {
        goto LABEL_76;
      }
    }
LABEL_74:
    std::string::size_type v30 = 0;
LABEL_79:
    unint64_t v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    char v32 = 0;
    int v33 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    char v32 = 1;
    int v33 = v5;
  }
  if (*(_WORD *)(*((void *)v33 + v19) + 16) == 272) {
    goto LABEL_87;
  }
  uint64_t v34 = v5;
  if ((v32 & 1) == 0) {
    uint64_t v34 = *(swift::Demangle::Node **)v5;
  }
  if (*(_WORD *)(*((void *)v34 + v19) + 16) == 273)
  {
LABEL_87:
    if (v11 == 1)
    {
      if (!v19) {
        goto LABEL_97;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v19 >= 2) {
          goto LABEL_95;
        }
LABEL_97:
        uint64_t v37 = v5;
        if ((v32 & 1) == 0) {
          uint64_t v37 = *(swift::Demangle::Node **)v5;
        }
        int v35 = (swift::Demangle::Node *)*((void *)v37 + v19);
LABEL_100:
        unint64_t v19 = ++v12;
        uint64_t v36 = v5;
        if (v32) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
      if (*((unsigned int *)v5 + 2) > v19) {
        goto LABEL_97;
      }
    }
LABEL_95:
    int v35 = 0;
    goto LABEL_100;
  }
  int v35 = 0;
  uint64_t v36 = v5;
  if ((v32 & 1) == 0) {
LABEL_101:
  }
    uint64_t v36 = *(swift::Demangle::Node **)v5;
LABEL_102:
  int v38 = *(unsigned __int16 *)(*((void *)v36 + v19) + 16);
  if (v38 == 66) {
    uint64_t v39 = v12 + 1;
  }
  else {
    uint64_t v39 = v12;
  }
  int v40 = v5;
  if ((v32 & 1) == 0) {
    int v40 = *(swift::Demangle::Node **)v5;
  }
  int v41 = *(unsigned __int16 *)(*((void *)v40 + v39) + 16);
  if (v41 == 271) {
    uint64_t v39 = (v39 + 1);
  }
  else {
    uint64_t v39 = v39;
  }
  int v42 = v5;
  if ((v32 & 1) == 0) {
    int v42 = *(swift::Demangle::Node **)v5;
  }
  int v43 = *(unsigned __int16 *)(*((void *)v42 + v39) + 16);
  switch((v28 >> 1) | (v28 << 7))
  {
    case 0:
      uint64_t v44 = "@differentiable ";
      uint64_t v45 = this;
      std::string::size_type v46 = 16;
      goto LABEL_118;
    case 1:
      uint64_t v44 = "@differentiable(_forward) ";
      uint64_t v45 = this;
      std::string::size_type v46 = 26;
      goto LABEL_118;
    case 4:
      uint64_t v44 = "@differentiable(_linear) ";
      goto LABEL_117;
    case 7:
      uint64_t v44 = "@differentiable(reverse) ";
LABEL_117:
      uint64_t v45 = this;
      std::string::size_type v46 = 25;
LABEL_118:
      std::string::append(v45, v44, v46);
      break;
    default:
      break;
  }
  if (v38 == 66) {
    std::string::append(this, "@Sendable ", 0xAuLL);
  }
  unint64_t v47 = *((unsigned __int8 *)v5 + 18);
  unsigned int v48 = v47 - 1;
  if (v47 != 1)
  {
    if (v47 == 5)
    {
      unint64_t v47 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if (v47 != 2)
      {
LABEL_130:
        int v50 = 0;
        goto LABEL_131;
      }
      unint64_t v47 = 2;
    }
  }
  if (v47 <= v55) {
    goto LABEL_130;
  }
  int v49 = v5;
  if (v48 >= 2) {
    int v49 = *(swift::Demangle::Node **)v5;
  }
  int v50 = (swift::Demangle::Node *)*((void *)v49 + v55);
LABEL_131:
  if (!this[1].__r_.__value_.__s.__data_[15]) {
    return;
  }
  if (v41 == 271) {
    std::string::append(this, " async", 6uLL);
  }
  if (v35) {
  std::string::append(this, " -> ", 4uLL);
  }
  if (v43 == 130) {
    std::string::append(this, "sending ", 8uLL);
  }
  unint64_t v51 = *((unsigned __int8 *)v5 + 18);
  unsigned int v52 = v51 - 1;
  if (v51 != 1)
  {
    if (v51 == 5)
    {
      unint64_t v51 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if (v51 != 2) {
        goto LABEL_147;
      }
      unint64_t v51 = 2;
    }
  }
  unint64_t v53 = (v13 - 1);
  if (v51 > v53)
  {
    if (v52 >= 2) {
      uint64_t v5 = *(swift::Demangle::Node **)v5;
    }
    int v54 = (swift::Demangle::Node *)*((void *)v5 + v53);
    goto LABEL_148;
  }
LABEL_147:
  int v54 = 0;
LABEL_148:
}

void anonymous namespace'::NodePrinter::printFunctionParameters(std::string *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, int a4, int a5)
{
  char v27 = a2;
  int v26 = a4;
  unsigned __int8 v25 = a5;
  if (*((_WORD *)a3 + 8) != 3)
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  int v7 = *((unsigned __int8 *)a3 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_6;
  }
  if (v7 == 5 && *((_DWORD *)a3 + 2))
  {
    a3 = *(swift::Demangle::Node **)a3;
LABEL_6:
    int v8 = *(uint64_t **)a3;
    goto LABEL_9;
  }
  int v8 = 0;
LABEL_9:
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
  {
LABEL_13:
    unint64_t v10 = (uint64_t *)*v8;
    goto LABEL_15;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = (uint64_t *)*v8;
    goto LABEL_13;
  }
  unint64_t v10 = 0;
LABEL_15:
  unint64_t v11 = (swift::Demangle::Node **)(v10 + 2);
  if (*((_WORD *)v10 + 8) == 223)
  {
    char v24 = &v27;
    int v23 = 0;
    if (!a2) {
      goto LABEL_28;
    }
    int v12 = *((unsigned __int8 *)a2 + 18);
    if ((v12 - 1) < 2)
    {
      BOOL v13 = 1;
      goto LABEL_29;
    }
    if (v12 == 5) {
      BOOL v13 = *((_DWORD *)a2 + 2) != 0;
    }
    else {
LABEL_28:
    }
      BOOL v13 = 0;
LABEL_29:
    BOOL v22 = v13;
    std::string::push_back(this, 40);
    int v14 = *((unsigned __int8 *)v10 + 18);
    uint64_t v15 = (swift::Demangle::Node **)v10;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        unsigned int v16 = (swift::Demangle::Node *)*v10;
        uint64_t v15 = (swift::Demangle::Node **)*v10;
LABEL_37:
        unint64_t v11 = (swift::Demangle::Node **)((char *)v16 + 8 * *((unsigned int *)v10 + 2));
        goto LABEL_40;
      }
      uint64_t v15 = 0;
    }
    switch(v14)
    {
      case 1:
        unint64_t v11 = (swift::Demangle::Node **)(v10 + 1);
        break;
      case 2:
        break;
      case 5:
        unsigned int v16 = (swift::Demangle::Node *)*v10;
        goto LABEL_37;
      default:
        unint64_t v11 = 0;
        break;
    }
LABEL_40:
    v21[0] = &v22;
    v21[1] = this;
    v21[2] = &v24;
    v21[3] = &v23;
    v21[4] = &v25;
    v21[5] = &v26;
    if (v15 != v11)
    {
      int v18 = *v15;
      std::string::size_type v17 = v15 + 1;
      while (v17 != v11)
      {
        if (v25) {
          unint64_t v19 = ", ";
        }
        else {
          unint64_t v19 = (const std::string::value_type *)&unk_215276E75;
        }
        std::string::append(this, v19, 2 * v25);
        char v20 = *v17++;
      }
    }
    std::string::push_back(this, 41);
    return;
  }
  if (a5)
  {
    std::string::push_back(this, 40);
    std::string::push_back(this, 41);
  }
  else
  {
    std::string::append(this, "(_:)", 4uLL);
  }
}

uint64_t anonymous namespace'::NodePrinter::getChildIf(uint64_t *a1, int a2)
{
  int v2 = *((unsigned __int8 *)a1 + 18);
  uint64_t v3 = a1;
  if ((v2 - 1) >= 2)
  {
    if (v2 == 5)
    {
      uint64_t v4 = *a1;
      uint64_t v3 = (uint64_t *)*a1;
      goto LABEL_9;
    }
    uint64_t v3 = 0;
  }
  switch(v2)
  {
    case 1:
      uint64_t v5 = a1 + 1;
      if (v3 != a1 + 1) {
        goto LABEL_16;
      }
      break;
    case 2:
      uint64_t v5 = a1 + 2;
      if (v3 != a1 + 2) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v4 = *a1;
LABEL_9:
      uint64_t v5 = (uint64_t *)(v4 + 8 * *((unsigned int *)a1 + 2));
      if (v3 != v5) {
        goto LABEL_16;
      }
      break;
    default:
      uint64_t v5 = 0;
      if (v3)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*v3 + 16) != a2)
        {
          if (++v3 == v5)
          {
            uint64_t v3 = v5;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v2 == 5)
  {
    if (v3 != (uint64_t *)(*a1 + 8 * *((unsigned int *)a1 + 2))) {
      return *v3;
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
    if (v2 != 1) {
      uint64_t v6 = 0;
    }
    if (v2 == 2) {
      int v7 = a1 + 2;
    }
    else {
      int v7 = v6;
    }
    if (v3 != v7) {
      return *v3;
    }
  }
  return 0;
}

void printer_unreachable(const char *a1)
{
}

std::string *anonymous namespace'::NodePrinter::printSpecializationPrefix(std::string *result, uint64_t *a2, const std::string::value_type *a3, std::string::size_type a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  int v7 = result;
  if (result[1].__r_.__value_.__s.__data_[5])
  {
    std::string::append(result, a3, a4);
    std::string::append(v7, " <", 2uLL);
    int v11 = *((unsigned __int8 *)a2 + 18);
    int v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = (uint64_t *)*a2;
        int v12 = (uint64_t *)*a2;
LABEL_12:
        int v14 = &v13[*((unsigned int *)a2 + 2)];
        if (v12 == v14) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        goto LABEL_19;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        int v14 = a2 + 1;
        if (v12 == a2 + 1) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 2:
        int v14 = a2 + 2;
        if (v12 == a2 + 2) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 5:
        BOOL v13 = (uint64_t *)*a2;
        goto LABEL_12;
      default:
        int v14 = 0;
        if (!v12) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
    }
LABEL_19:
    int v15 = 0;
    unsigned int v16 = a5 + 1;
    std::string::size_type v17 = (const char *)&unk_215276E75;
    while (1)
    {
      uint64_t v20 = *v12;
      int v21 = *(unsigned __int16 *)(*v12 + 16);
      if (v21 == 216 || v21 == 339) {
        goto LABEL_24;
      }
      if (v21 == 217)
      {
        if (v17) {
          size_t v22 = strlen(v17);
        }
        else {
          size_t v22 = 0;
        }
        std::string::append(v7, v17, v22);
        std::string::size_type v17 = ", ";
        goto LABEL_24;
      }
      int v23 = *(unsigned __int8 *)(v20 + 18);
      if ((v23 - 1) < 2 || v23 == 5 && *(_DWORD *)(v20 + 8)) {
        break;
      }
LABEL_23:
      ++v15;
LABEL_24:
      if (++v12 == v14) {
        return std::string::append(v7, "> of ", 5uLL);
      }
    }
    if (v17) {
      size_t v24 = strlen(v17);
    }
    else {
      size_t v24 = 0;
    }
    std::string::append(v7, v17, v24);
    std::string::append(v7, a6, a7);
    int v25 = *(unsigned __int16 *)(v20 + 16);
    int v26 = v7;
    if (v25 == 79)
    {
      int v18 = "Return = ";
      std::string::size_type v19 = 9;
    }
    else
    {
      if (v25 != 78)
      {
        goto LABEL_22;
      }
      std::string::append(v7, "Arg[", 4uLL);
      snprintf(__str, 0x20uLL, "%lld", v15);
      std::string::append(v7, __str);
      int v26 = v7;
      int v18 = "] = ";
      std::string::size_type v19 = 4;
    }
    std::string::append(v26, v18, v19);
LABEL_22:
    std::string::size_type v17 = ", ";
    goto LABEL_23;
  }
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    __n128 result = std::string::append(result, "specialized ", 0xCuLL);
    v7[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *swift::Demangle::DemanglerPrinter::operator<<(std::string *a1, unsigned int a2)
{
  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *anonymous namespace'::NodePrinter::printBoundGeneric(std::string *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 2)
  {
    if (v6 != 5) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)a2 + 2);
    if (v7 < 2) {
      return this;
    }
    if (v7 != 2) {
      goto LABEL_114;
    }
  }
  if (!this[1].__r_.__value_.__s.__data_[0]) {
    goto LABEL_114;
  }
  int v8 = *((unsigned __int16 *)a2 + 8);
  if (v8 == 13) {
    goto LABEL_114;
  }
  if (v8 == 16)
  {
    int v9 = a2;
    if (v6 != 2)
    {
      if (*((_DWORD *)a2 + 2) < 2u) {
        goto LABEL_122;
      }
      int v9 = *(swift::Demangle::Node **)a2;
    }
    uint64_t v10 = *((void *)v9 + 1);
    if (!v10)
    {
LABEL_122:
      std::string::append(v5, " as ", 4uLL);
      int v52 = *((unsigned __int8 *)v4 + 18);
      if ((v52 - 1) >= 2)
      {
        if (v52 != 5 || !*((_DWORD *)v4 + 2))
        {
          unint64_t v53 = 0;
          goto LABEL_128;
        }
        uint64_t v4 = *(swift::Demangle::Node **)v4;
      }
      unint64_t v53 = *(swift::Demangle::Node **)v4;
LABEL_128:
    }
    int v11 = *(unsigned __int8 *)(v10 + 18);
    int v12 = (swift::Demangle::Node **)v10;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = *(swift::Demangle::Node **)v10;
        int v12 = *(swift::Demangle::Node ***)v10;
LABEL_63:
        unsigned __int8 v28 = (swift::Demangle::Node **)((char *)v13 + 8 * *(unsigned int *)(v10 + 8));
        goto LABEL_120;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        unsigned __int8 v28 = (swift::Demangle::Node **)(v10 + 8);
        break;
      case 2:
        unsigned __int8 v28 = (swift::Demangle::Node **)(v10 + 16);
        break;
      case 5:
        BOOL v13 = *(swift::Demangle::Node **)v10;
        goto LABEL_63;
      default:
        unsigned __int8 v28 = 0;
        break;
    }
LABEL_120:
    while (v12 != v28)
    {
      unint64_t v51 = *v12++;
    }
    goto LABEL_122;
  }
  int v14 = *((unsigned __int8 *)a2 + 18);
  for (i = a2; ; int v14 = *((unsigned __int8 *)i + 18))
  {
    if (v14 != 1)
    {
      if (v14 != 5)
      {
        if (v14 != 2) {
          goto LABEL_114;
        }
        goto LABEL_30;
      }
      int v16 = *((_DWORD *)i + 2);
      if (v16 != 1) {
        break;
      }
    }
    if (*((_WORD *)i + 8) != 232)
    {
      if (v14 != 5) {
        goto LABEL_114;
      }
      int v16 = *((_DWORD *)i + 2);
      break;
    }
    if ((v14 - 1) >= 2) {
      int i = *(swift::Demangle::Node **)i;
    }
    int i = *(swift::Demangle::Node **)i;
  }
  if (v16 != 2) {
    goto LABEL_114;
  }
  int v14 = 5;
LABEL_30:
  int v17 = *((unsigned __int16 *)i + 8);
  if ((v17 & 0xFFFE) != 0xE) {
    goto LABEL_114;
  }
  int v18 = i;
  if (v14 == 2) {
    goto LABEL_34;
  }
  if (*((_DWORD *)i + 2))
  {
    int v18 = *(swift::Demangle::Node **)i;
LABEL_34:
    std::string::size_type v19 = *(uint64_t **)v18;
    goto LABEL_36;
  }
  std::string::size_type v19 = 0;
LABEL_36:
  int v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2)
  {
LABEL_40:
    int v21 = (uint64_t *)*v19;
    goto LABEL_42;
  }
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    std::string::size_type v19 = (uint64_t *)*v19;
    goto LABEL_40;
  }
  int v21 = 0;
LABEL_42:
  if (v14 == 2)
  {
LABEL_45:
    uint64_t v22 = *((void *)i + 1);
    goto LABEL_47;
  }
  if (*((_DWORD *)i + 2) >= 2u)
  {
    int i = *(swift::Demangle::Node **)i;
    goto LABEL_45;
  }
  uint64_t v22 = 0;
LABEL_47:
  int v23 = *((unsigned __int8 *)v21 + 18);
  if (v17 != 14)
  {
    int v26 = v21;
    if (v23 != 2)
    {
      if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
      {
        char v27 = 0;
LABEL_74:
        if (*((_WORD *)v27 + 8) != 101
          || v27[1] != 5
          || ((uint64_t v31 = (int *)*v27, v32 = *v31, v33 = *((unsigned __int8 *)v31 + 4), v32 == 1634890305)
            ? (BOOL v34 = v33 == 121)
            : (BOOL v34 = 0),
              !v34 || (int v57 = *(unsigned __int8 *)(v22 + 18), v57 != 1) && (v57 != 5 || *(_DWORD *)(v22 + 8) != 1)))
        {
LABEL_80:
          int v35 = v21;
          if (v23 != 2)
          {
            if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
            {
              uint64_t v36 = 0;
LABEL_108:
              if (*((_WORD *)v36 + 8) != 101 || v36[1] != (uint64_t *)10) {
                goto LABEL_114;
              }
              unint64_t v47 = *v36;
              uint64_t v48 = *v47;
              int v49 = *((unsigned __int16 *)v47 + 4);
              if (v48 != 0x616E6F6974636944 || v49 != 31090) {
                goto LABEL_114;
              }
              int v60 = *(unsigned __int8 *)(v22 + 18);
              if (v60 != 2 && (v60 != 5 || *(_DWORD *)(v22 + 8) != 2)) {
                goto LABEL_114;
              }
              if ((v23 - 1) >= 2)
              {
                if (v23 != 5 || !*((_DWORD *)v21 + 2))
                {
                  unint64_t v61 = 0;
LABEL_190:
                  if (*((_WORD *)v61 + 8) != 153 || v61[1] != 5) {
                    goto LABEL_114;
                  }
                  uint64_t v77 = (int *)*v61;
                  int v78 = *v77;
                  int v79 = *((unsigned __int8 *)v77 + 4);
                  if (v78 != 1718187859 || v79 != 116) {
                    goto LABEL_114;
                  }
                  int v81 = a2;
                  if (v6 != 2)
                  {
                    if (*((_DWORD *)a2 + 2) < 2u)
                    {
                      std::string::size_type v82 = 0;
LABEL_216:
                      int v89 = *((unsigned __int8 *)v82 + 18);
                      if ((v89 - 1) >= 2)
                      {
                        if (v89 != 5 || !*((_DWORD *)v82 + 2))
                        {
                          unint64_t v90 = 0;
LABEL_224:
                          if (v6 != 2)
                          {
                            if (*((_DWORD *)a2 + 2) < 2u)
                            {
                              int v94 = 0;
LABEL_229:
                              int v95 = *((unsigned __int8 *)v94 + 18);
                              if (v95 != 2)
                              {
                                if (v95 != 5 || *((_DWORD *)v94 + 2) < 2u)
                                {
                                  std::string::size_type v96 = 0;
                                  goto LABEL_235;
                                }
                                int v94 = (uint64_t *)*v94;
                              }
                              std::string::size_type v96 = (swift::Demangle::Node *)v94[1];
LABEL_235:
                              std::string::append(this, "[", 1uLL);
                              unsigned int v97 = a3 + 1;
                              std::string::append(v5, " : ", 3uLL);
                              uint64_t v92 = (_anonymous_namespace_::NodePrinter *)v5;
                              uint64_t v93 = v96;
                              unsigned int v91 = v97;
                              goto LABEL_236;
                            }
                            uint64_t v4 = *(swift::Demangle::Node **)a2;
                          }
                          int v94 = (uint64_t *)*((void *)v4 + 1);
                          goto LABEL_229;
                        }
                        std::string::size_type v82 = *(swift::Demangle::Node **)v82;
                      }
                      unint64_t v90 = *(swift::Demangle::Node **)v82;
                      goto LABEL_224;
                    }
                    int v81 = *(swift::Demangle::Node **)a2;
                  }
                  std::string::size_type v82 = (swift::Demangle::Node *)*((void *)v81 + 1);
                  goto LABEL_216;
                }
                int v21 = (uint64_t *)*v21;
              }
              unint64_t v61 = (uint64_t *)*v21;
              goto LABEL_190;
            }
            int v35 = (uint64_t *)*v21;
          }
          uint64_t v36 = (uint64_t **)v35[1];
          goto LABEL_108;
        }
        int v58 = (uint64_t **)v21;
        if ((v23 - 1) >= 2)
        {
          if (v23 != 5 || !*((_DWORD *)v21 + 2))
          {
            unint64_t v59 = 0;
LABEL_165:
            if (*((_WORD *)v59 + 8) != 153 || v59[1] != 5) {
              goto LABEL_80;
            }
            int v67 = (int *)*v59;
            int v68 = *v67;
            int v69 = *((unsigned __int8 *)v67 + 4);
            if (v68 != 1718187859 || v69 != 116) {
              goto LABEL_80;
            }
            if (v6 != 2)
            {
              if (*((_DWORD *)a2 + 2) < 2u)
              {
                int v71 = 0;
LABEL_210:
                int v87 = *((unsigned __int8 *)v71 + 18);
                if ((v87 - 1) >= 2)
                {
                  if (v87 != 5 || !*((_DWORD *)v71 + 2))
                  {
                    unint64_t v88 = 0;
                    goto LABEL_222;
                  }
                  int v71 = *(swift::Demangle::Node **)v71;
                }
                unint64_t v88 = *(swift::Demangle::Node **)v71;
LABEL_222:
                std::string::append(this, "[", 1uLL);
                unsigned int v91 = a3 + 1;
                uint64_t v92 = (_anonymous_namespace_::NodePrinter *)v5;
                uint64_t v93 = v88;
LABEL_236:
                int v86 = "]";
                int v85 = v5;
                goto LABEL_237;
              }
              uint64_t v4 = *(swift::Demangle::Node **)a2;
            }
            int v71 = (swift::Demangle::Node *)*((void *)v4 + 1);
            goto LABEL_210;
          }
          int v58 = (uint64_t **)*v21;
        }
        unint64_t v59 = *v58;
        goto LABEL_165;
      }
      int v26 = (uint64_t *)*v21;
    }
    char v27 = (uint64_t *)v26[1];
    goto LABEL_74;
  }
  size_t v24 = v21;
  if (v23 != 2)
  {
    if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
    {
      uint64_t v25 = 0;
      goto LABEL_65;
    }
    size_t v24 = (uint64_t *)*v21;
  }
  uint64_t v25 = v24[1];
LABEL_65:
  if (*(_WORD *)(v25 + 16) != 101) {
    goto LABEL_68;
  }
  if (*(void *)(v25 + 8) != 8) {
    goto LABEL_68;
  }
  if (**(void **)v25 != 0x6C616E6F6974704FLL) {
    goto LABEL_68;
  }
  int v54 = *(unsigned __int8 *)(v22 + 18);
  if (v54 != 1 && (v54 != 5 || *(_DWORD *)(v22 + 8) != 1)) {
    goto LABEL_68;
  }
  unsigned int v55 = (int ***)v21;
  if ((v23 - 1) < 2) {
    goto LABEL_138;
  }
  if (v23 == 5 && *((_DWORD *)v21 + 2))
  {
    unsigned int v55 = (int ***)*v21;
LABEL_138:
    int v56 = *v55;
    goto LABEL_156;
  }
  int v56 = 0;
LABEL_156:
  if (*((_WORD *)v56 + 8) == 153 && v56[1] == (int *)5)
  {
    unsigned int v62 = *v56;
    int v63 = *v62;
    int v64 = *((unsigned __int8 *)v62 + 4);
    if (v63 == 1718187859 && v64 == 116)
    {
      int v66 = "?";
      goto LABEL_185;
    }
  }
LABEL_68:
  int v29 = v21;
  if (v23 == 2)
  {
LABEL_72:
    uint64_t v30 = v29[1];
    goto LABEL_86;
  }
  if (v23 == 5 && *((_DWORD *)v21 + 2) >= 2u)
  {
    int v29 = (uint64_t *)*v21;
    goto LABEL_72;
  }
  uint64_t v30 = 0;
LABEL_86:
  if (*(_WORD *)(v30 + 16) != 101 || *(void *)(v30 + 8) != 27) {
    goto LABEL_114;
  }
  uint64_t v37 = *(uint64_t **)v30;
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  uint64_t v40 = v37[2];
  uint64_t v41 = *(uint64_t *)((char *)v37 + 19);
  BOOL v42 = v38 == 0x746963696C706D49 && v39 == 0x706172776E55796CLL;
  BOOL v43 = v42 && v40 == 0x6F6974704F646570;
  if (!v43 || v41 != 0x6C616E6F6974704FLL) {
    goto LABEL_114;
  }
  int v45 = *(unsigned __int8 *)(v22 + 18);
  if (v45 != 1 && (v45 != 5 || *(_DWORD *)(v22 + 8) != 1)) {
    goto LABEL_114;
  }
  if ((v23 - 1) >= 2)
  {
    if (v23 != 5 || !*((_DWORD *)v21 + 2))
    {
      std::string::size_type v46 = 0;
      goto LABEL_177;
    }
    int v21 = (uint64_t *)*v21;
  }
  std::string::size_type v46 = (uint64_t *)*v21;
LABEL_177:
  if (*((_WORD *)v46 + 8) != 153
    || v46[1] != 5
    || ((int v72 = (int *)*v46, v73 = *v72, v74 = *((unsigned __int8 *)v72 + 4), v73 == 1718187859)
      ? (BOOL v75 = v74 == 116)
      : (BOOL v75 = 0),
        !v75))
  {
LABEL_114:
  }
  int v66 = "!";
LABEL_185:
  if (v6 == 2)
  {
LABEL_188:
    uint64_t v76 = (swift::Demangle::Node *)*((void *)v4 + 1);
    goto LABEL_202;
  }
  if (*((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v4 = *(swift::Demangle::Node **)a2;
    goto LABEL_188;
  }
  uint64_t v76 = 0;
LABEL_202:
  int v83 = *((unsigned __int8 *)v76 + 18);
  if ((v83 - 1) >= 2)
  {
    if (v83 != 5 || !*((_DWORD *)v76 + 2))
    {
      uint64_t v84 = 0;
      goto LABEL_208;
    }
    uint64_t v76 = *(swift::Demangle::Node **)v76;
  }
  uint64_t v84 = *(swift::Demangle::Node **)v76;
LABEL_208:
  int v85 = v5;
  int v86 = v66;
LABEL_237:

  return std::string::append(v85, v86, 1uLL);
}

std::string *anonymous namespace'::NodePrinter::printWithParens(std::string *this, swift::Demangle::Node *a2, int a3)
{
  int v6 = a2;
  while (2)
  {
    unsigned int v7 = v6;
    switch(*((_WORD *)v6 + 8))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xD0:
      case 0xD1:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xE0:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        goto LABEL_33;
      case 4:
      case 5:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x18:
      case 0x26:
      case 0x2C:
      case 0x2D:
      case 0x39:
      case 0x3D:
      case 0x3F:
      case 0x45:
      case 0x54:
      case 0x55:
      case 0x91:
      case 0x92:
      case 0x99:
      case 0xA7:
      case 0xB4:
      case 0xB5:
      case 0xCF:
      case 0xD2:
      case 0xD3:
      case 0xDB:
      case 0xDF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0x122:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
        goto LABEL_36;
      case 0xBE:
        int v9 = *((unsigned __int8 *)v6 + 18);
        if ((v9 - 1) < 2) {
          goto LABEL_12;
        }
        if (v9 == 5 && *((_DWORD *)v7 + 2))
        {
          unsigned int v7 = *(swift::Demangle::Node **)v7;
LABEL_12:
          uint64_t v10 = *(swift::Demangle::Node **)v7;
        }
        else
        {
          uint64_t v10 = 0;
        }
        int v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 == 2 || v13 == 5 && *((_DWORD *)v10 + 2) >= 2u) {
          goto LABEL_33;
        }
        goto LABEL_36;
      case 0xC0:
        int v11 = *((unsigned __int8 *)v6 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_17;
        }
        if (v11 == 5 && *((_DWORD *)v7 + 2))
        {
          unsigned int v7 = *(swift::Demangle::Node **)v7;
LABEL_17:
          int v12 = *(swift::Demangle::Node **)v7;
        }
        else
        {
          int v12 = 0;
        }
        int v14 = *((unsigned __int8 *)v12 + 18);
        if ((v14 - 1) < 2) {
          goto LABEL_28;
        }
        if (v14 == 5 && *((_DWORD *)v12 + 2))
        {
          int v12 = *(swift::Demangle::Node **)v12;
LABEL_28:
          int v15 = *(swift::Demangle::Node **)v12;
        }
        else
        {
          int v15 = 0;
        }
        int v16 = *((unsigned __int8 *)v15 + 18);
        if ((v16 - 1) < 2 || v16 == 5 && *((_DWORD *)v15 + 2))
        {
LABEL_33:
          std::string::append(this, "(", 1uLL);
          return std::string::append(this, ")", 1uLL);
        }
        else
        {
LABEL_36:
          unsigned int v18 = a3 + 1;
        }
      case 0xE8:
        int v8 = *((unsigned __int8 *)v6 + 18);
        if ((v8 - 1) < 2) {
          goto LABEL_7;
        }
        int v6 = 0;
        if (v8 == 5)
        {
          int v6 = 0;
          if (*((_DWORD *)v7 + 2))
          {
            unsigned int v7 = *(swift::Demangle::Node **)v7;
LABEL_7:
            int v6 = *(swift::Demangle::Node **)v7;
          }
        }
        continue;
      default:
        printer_unreachable("bad node kind");
    }
  }
}

swift::Demangle::Node *anonymous namespace'::NodePrinter::printAbstractStorage(uint64_t a1, uint64_t a2, int a3, int a4, std::string::value_type *a5, size_t a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 220) {
  if (v6 != 254)
  }
    printer_unreachable("Not an abstract storage node");
}

void anonymous namespace'::NodePrinter::printImplFunctionType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::Node *a2, int a3)
{
  int v32 = a3;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v29 = 0;
  v28[0] = &v29;
  v28[1] = (int *)&v31;
  v28[2] = (int *)this;
  v28[3] = &v32;
  v28[4] = (int *)&v30;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v5 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v5 = 0;
  }
  if (v4 == 1)
  {
    unsigned int v7 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v5 == (swift::Demangle::Node *)((char *)a2 + 8)) {
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  if (v4 == 2)
  {
    unsigned int v7 = (swift::Demangle::Node *)((char *)a2 + 16);
    if (v5 != (swift::Demangle::Node *)((char *)a2 + 16)) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
  if (v4 != 5)
  {
    unsigned int v7 = 0;
    if (v5) {
      goto LABEL_14;
    }
LABEL_29:
    int v9 = 0;
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)a2;
LABEL_9:
  unsigned int v7 = (swift::Demangle::Node *)(v6 + 8 * *((unsigned int *)a2 + 2));
  if (v5 == v7) {
    goto LABEL_29;
  }
LABEL_14:
  int v8 = 0;
  do
  {
    int v9 = *(swift::Demangle::Node ***)v5;
    switch(*(_WORD *)(*(void *)v5 + 16))
    {
      case 'm':
        uint64_t v30 = *(swift::Demangle::Node ***)v5;
        break;
      case 't':
        goto LABEL_17;
      case 'v':
        if (v29 == 1) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 1;
        goto LABEL_26;
      case 'w':
        uint64_t v31 = *(swift::Demangle::Node ***)v5;
        break;
      case 'x':
      case 'y':
      case 'z':
        if (v29 == 2) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 2;
LABEL_26:
        break;
      default:
        std::string::push_back((std::string *)this, 32);
        break;
    }
    int v9 = v8;
LABEL_17:
    uint64_t v5 = (swift::Demangle::Node *)((char *)v5 + 8);
    int v8 = v9;
  }
  while (v5 != v7);
LABEL_30:
  std::string::push_back((std::string *)this, 41);
  if (!v31) {
    goto LABEL_52;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v11 = v31;
  int v12 = *((unsigned __int8 *)v31 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v31 + 2) < 2u) {
      goto LABEL_51;
    }
    int v11 = *v31;
  }
  uint64_t v13 = v11[1];
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 18);
    int v15 = (swift::Demangle::Node **)v13;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        int v16 = *(swift::Demangle::Node **)v13;
        int v15 = *(swift::Demangle::Node ***)v13;
LABEL_44:
        int v17 = (swift::Demangle::Node **)((char *)v16 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_48;
      }
      int v15 = 0;
    }
    switch(v14)
    {
      case 1:
        int v17 = (swift::Demangle::Node **)(v13 + 8);
        break;
      case 2:
        int v17 = (swift::Demangle::Node **)(v13 + 16);
        break;
      case 5:
        int v16 = *(swift::Demangle::Node **)v13;
        goto LABEL_44;
      default:
        int v17 = 0;
        break;
    }
LABEL_48:
    if (v15 != v17)
    {
      unsigned int v18 = v32 + 1;
      do
      {
        std::string::size_type v19 = *v15++;
      }
      while (v15 != v17);
    }
  }
LABEL_51:
  std::string::push_back((std::string *)this, 62);
LABEL_52:
  if (!v9) {
    return;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v20 = *((unsigned __int8 *)v9 + 18);
  if ((v20 - 1) >= 2)
  {
    if (v20 != 5 || !*((_DWORD *)v9 + 2)) {
      goto LABEL_73;
    }
    int v9 = (swift::Demangle::Node **)*v9;
  }
  int v21 = *v9;
  if (*v9)
  {
    int v22 = *((unsigned __int8 *)v21 + 18);
    int v23 = (swift::Demangle::Node **)*v9;
    if ((v22 - 1) >= 2)
    {
      if (v22 == 5)
      {
        size_t v24 = *(swift::Demangle::Node ***)v21;
        int v23 = *(swift::Demangle::Node ***)v21;
LABEL_66:
        uint64_t v25 = &v24[*((unsigned int *)v21 + 2)];
        goto LABEL_70;
      }
      int v23 = 0;
    }
    switch(v22)
    {
      case 1:
        uint64_t v25 = (swift::Demangle::Node **)((char *)v21 + 8);
        break;
      case 2:
        uint64_t v25 = (swift::Demangle::Node **)((char *)v21 + 16);
        break;
      case 5:
        size_t v24 = *(swift::Demangle::Node ***)v21;
        goto LABEL_66;
      default:
        uint64_t v25 = 0;
        break;
    }
LABEL_70:
    if (v23 != v25)
    {
      unsigned int v26 = v32 + 1;
      do
      {
        char v27 = *v23++;
      }
      while (v23 != v25);
    }
  }
LABEL_73:
  std::string::push_back((std::string *)this, 62);
}

void anonymous namespace'::NodePrinter::printGenericSignature(std::string *this, swift::Demangle::Node *a2, int a3)
{
  std::string::push_back(this, 60);
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = v6 - 1;
  int v48 = a3;
  if (v6 == 1)
  {
    unsigned int v8 = 1;
    goto LABEL_7;
  }
  if (v6 != 5)
  {
    if (v6 != 2) {
      goto LABEL_106;
    }
    unsigned int v8 = 2;
LABEL_7:
    uint64_t v9 = 0;
    LODWORD(v10) = v8;
    while (1)
    {
      int v11 = a2;
      if (v7 >= 2) {
        int v11 = *(swift::Demangle::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v11 + v9) + 16) != 37) {
        goto LABEL_14;
      }
      if (v8 == ++v9)
      {
        unsigned int v49 = v8;
        LODWORD(v9) = v8;
        goto LABEL_35;
      }
    }
  }
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8) {
    goto LABEL_7;
  }
  LODWORD(v9) = 0;
LABEL_14:
  unsigned int v49 = v8;
  if (v9 >= v8)
  {
    LODWORD(v10) = v9;
    if (!v9) {
      goto LABEL_92;
    }
    goto LABEL_35;
  }
  unint64_t v10 = v9;
  do
  {
    unint64_t v12 = *((unsigned __int8 *)a2 + 18);
    if (v6 == 1) {
      goto LABEL_19;
    }
    if (v6 != 5)
    {
      unint64_t v12 = 2;
LABEL_19:
      if (v12 <= v10) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    if (*((unsigned int *)a2 + 2) <= v10)
    {
LABEL_24:
      int v14 = 0;
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v13 = a2;
    if (v7 >= 2) {
      uint64_t v13 = *(swift::Demangle::Node **)a2;
    }
    int v14 = (uint64_t *)*((void *)v13 + v10);
LABEL_25:
    int v15 = *((unsigned __int16 *)v14 + 8);
    if (v15 == 232)
    {
      if (*((unsigned __int8 *)v14 + 18) - 1 >= 2) {
        int v14 = (uint64_t *)*v14;
      }
      int v15 = *(unsigned __int16 *)(*v14 + 16);
    }
    if (v15 != 42) {
      goto LABEL_32;
    }
    ++v10;
  }
  while (v8 != v10);
  LODWORD(v10) = v8;
LABEL_32:
  if (!v9)
  {
LABEL_92:
    if (v10 == v49) {
      goto LABEL_106;
    }
    if (!this[1].__r_.__value_.__s.__data_[7]) {
      goto LABEL_106;
    }
    std::string::append(this, " where ", 7uLL);
    if (v10 >= v49) {
      goto LABEL_106;
    }
    unint64_t v37 = *((unsigned __int8 *)a2 + 18);
    unsigned int v38 = v37 - 1;
    switch(v37)
    {
      case 1:
        goto LABEL_99;
      case 2:
        if (v10 < 2uLL) {
          goto LABEL_100;
        }
        break;
      case 5:
        unint64_t v37 = *((unsigned int *)a2 + 2);
LABEL_99:
        if (v37 > v10)
        {
LABEL_100:
          uint64_t v39 = a2;
          if (v38 >= 2) {
            uint64_t v39 = *(swift::Demangle::Node **)a2;
          }
          uint64_t v40 = (swift::Demangle::Node *)*((void *)v39 + v10);
LABEL_105:
          unint64_t v41 = v10 + 1;
          if (v49 == v10 + 1)
          {
LABEL_106:
            std::string::push_back(this, 62);
            return;
          }
          unsigned int v42 = ~v10 + v49;
          while (2)
          {
            if (v41 > v10) {
              std::string::append(this, ", ", 2uLL);
            }
            unint64_t v44 = *((unsigned __int8 *)a2 + 18);
            if (v44 == 2)
            {
              if (v44 <= v41) {
                goto LABEL_108;
              }
            }
            else if (v44 != 5 || *((unsigned int *)a2 + 2) <= v41)
            {
LABEL_108:
              BOOL v43 = 0;
              goto LABEL_109;
            }
            unsigned int v45 = v44 - 1;
            std::string::size_type v46 = a2;
            if (v45 >= 2) {
              std::string::size_type v46 = *(swift::Demangle::Node **)a2;
            }
            BOOL v43 = (swift::Demangle::Node *)*((void *)v46 + v41);
LABEL_109:
            ++v41;
            if (!--v42) {
              goto LABEL_106;
            }
            continue;
          }
        }
        break;
    }
    uint64_t v40 = 0;
    goto LABEL_105;
  }
LABEL_35:
  uint64_t v16 = 0;
  while (2)
  {
    if (v16) {
      std::string::append(this, "><", 2uLL);
    }
    int v17 = a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      int v17 = *(swift::Demangle::Node **)a2;
    }
    unsigned int v18 = (_DWORD *)*((void *)v17 + v16);
    uint64_t v19 = *v18;
    if (!*v18)
    {
LABEL_37:
      if (++v16 == v9) {
        goto LABEL_92;
      }
      continue;
    }
    break;
  }
  unint64_t v20 = 0;
  while (2)
  {
    if (v20)
    {
      std::string::append(this, ", ", 2uLL);
      if (v20 >= 0x80)
      {
        std::string::append(this, "...", 3uLL);
        goto LABEL_37;
      }
    }
    if (v10 <= v9) {
      goto LABEL_83;
    }
    int v21 = *((unsigned __int8 *)a2 + 18);
    BOOL v22 = 1;
    int v23 = v10 - v9;
    unint64_t v24 = v9;
    while (2)
    {
      unint64_t v25 = *((unsigned __int8 *)a2 + 18);
      switch(v21)
      {
        case 1:
LABEL_55:
          if (v25 <= v24) {
            break;
          }
LABEL_56:
          unsigned int v26 = a2;
          if ((v21 - 1) >= 2) {
            unsigned int v26 = *(swift::Demangle::Node **)a2;
          }
          char v27 = (uint64_t *)*((void *)v26 + v24);
          goto LABEL_61;
        case 5:
          if (*((unsigned int *)a2 + 2) <= v24) {
            break;
          }
          goto LABEL_56;
        case 2:
          unint64_t v25 = 2;
          goto LABEL_55;
      }
      char v27 = 0;
LABEL_61:
      if (*((_WORD *)v27 + 8) != 42) {
        goto LABEL_50;
      }
      int v28 = *((unsigned __int8 *)v27 + 18);
      if ((v28 - 1) < 2) {
        goto LABEL_66;
      }
      if (v28 == 5 && *((_DWORD *)v27 + 2))
      {
        char v27 = (uint64_t *)*v27;
LABEL_66:
        int v29 = (void *)*v27;
      }
      else
      {
        int v29 = 0;
      }
      if (*((_WORD *)v29 + 8) != 232) {
        goto LABEL_50;
      }
      int v30 = *((unsigned __int8 *)v29 + 18);
      if ((v30 - 1) < 2) {
        goto LABEL_73;
      }
      if (v30 == 5 && *((_DWORD *)v29 + 2))
      {
        int v29 = (void *)*v29;
LABEL_73:
        uint64_t v31 = (void *)*v29;
      }
      else
      {
        uint64_t v31 = 0;
      }
      if (*((_WORD *)v31 + 8) != 38) {
        goto LABEL_50;
      }
      int v32 = *((unsigned __int8 *)v31 + 18);
      int v33 = (void **)v31;
      if ((v32 - 1) >= 2) {
        int v33 = (void **)*v31;
      }
      if (**v33 != v20) {
        goto LABEL_50;
      }
      if (v32 == 5) {
        uint64_t v31 = (void *)*v31;
      }
      if (*(void *)v31[1] != v16)
      {
LABEL_50:
        BOOL v22 = ++v24 < v10;
        if (!--v23) {
          break;
        }
        continue;
      }
      break;
    }
    if (v22) {
      std::string::append(this, "each ", 5uLL);
    }
LABEL_83:
    unint64_t v52 = v20;
    uint64_t v53 = v16;
    std::string::size_type v34 = this[3].__r_.__value_.__r.__words[2];
    if (v34)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v34 + 48))(__p);
      if ((v51 & 0x80u) == 0) {
        int v35 = __p;
      }
      else {
        int v35 = (void **)__p[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v36 = v51;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)__p[1];
      }
      std::string::append(this, (const std::string::value_type *)v35, v36);
      if ((char)v51 < 0) {
        operator delete(__p[0]);
      }
      if (++v20 == v19) {
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  uint64_t v47 = std::__throw_bad_function_call[abi:nn180100]();
  std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(v47);
}

uint64_t std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v11, &v10);
  }
  uint64_t v5 = (_anonymous_namespace_::NodePrinter *)std::__throw_bad_function_call[abi:nn180100]();
}

std::string *anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::Node *const *a2, swift::Demangle::Node *const *a3, int a4, const char *a5)
{
  if (a2 != a3)
  {
    unsigned int v7 = a2;
    unsigned int v8 = (_anonymous_namespace_::NodePrinter *)this;
    unsigned int v9 = a4 + 1;
    do
    {
      uint64_t v10 = *v7++;
      if (a5)
      {
        if (v7 != a3)
        {
          size_t v11 = strlen(a5);
          this = std::string::append((std::string *)v8, a5, v11);
        }
      }
    }
    while (v7 != a3);
  }
  return this;
}

void anonymous namespace'::NodePrinter::printEntityType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, unint64_t a4, int a5)
{
  unsigned int v7 = a3;
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unint64_t v12 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 != (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      unint64_t v12 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v10 != (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unint64_t v12 = (swift::Demangle::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 != v12) {
        goto LABEL_16;
      }
      break;
    default:
      unint64_t v12 = 0;
      if (v10)
      {
LABEL_16:
        while (*(_WORD *)(*(void *)v10 + 16) != 290)
        {
          uint64_t v10 = (swift::Demangle::Node *)((char *)v10 + 8);
          if (v10 == v12)
          {
            uint64_t v10 = v12;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v9 == 5)
  {
    if (v10 != (swift::Demangle::Node *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2))) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v13 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v9 != 1) {
      uint64_t v13 = 0;
    }
    if (v9 == 2) {
      int v14 = (swift::Demangle::Node *)((char *)a2 + 16);
    }
    else {
      int v14 = v13;
    }
    if (v10 != v14)
    {
LABEL_26:
      int v15 = *(swift::Demangle::Node **)v10;
      if (a4 | *(void *)v10) {
        goto LABEL_27;
      }
LABEL_33:
      return;
    }
  }
  int v15 = 0;
  if (!a4) {
    goto LABEL_33;
  }
LABEL_27:
  if (!a4)
  {
    if (*((_WORD *)a3 + 8) != 44) {
      goto LABEL_87;
    }
    int v19 = *((unsigned __int8 *)a3 + 18);
    unint64_t v20 = (swift::Demangle::Node **)a3;
    if ((v19 - 1) >= 2)
    {
      if (v19 != 5 || !*((_DWORD *)a3 + 2))
      {
        int v21 = 0;
        goto LABEL_59;
      }
      unint64_t v20 = *(swift::Demangle::Node ***)a3;
    }
    int v21 = *v20;
LABEL_59:
    goto LABEL_60;
  }
  std::string::append((std::string *)this, "<", 1uLL);
  int v16 = *(unsigned __int8 *)(a4 + 18);
  int v17 = (swift::Demangle::Node *)a4;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      unsigned int v18 = *(swift::Demangle::Node **)a4;
      int v17 = *(swift::Demangle::Node **)a4;
      goto LABEL_47;
    }
    int v17 = 0;
  }
  switch(v16)
  {
    case 1:
      BOOL v22 = (char *)(a4 + 8);
      if (v17 == (swift::Demangle::Node *)(a4 + 8)) {
        goto LABEL_56;
      }
      goto LABEL_54;
    case 2:
      BOOL v22 = (char *)(a4 + 16);
      if (v17 == (swift::Demangle::Node *)(a4 + 16)) {
        goto LABEL_56;
      }
      goto LABEL_54;
    case 5:
      unsigned int v18 = *(swift::Demangle::Node **)a4;
LABEL_47:
      BOOL v22 = (char *)v18 + 8 * *(unsigned int *)(a4 + 8);
      if (v17 == (swift::Demangle::Node *)v22) {
        goto LABEL_56;
      }
      goto LABEL_54;
  }
  BOOL v22 = 0;
  if (!v17) {
    goto LABEL_56;
  }
LABEL_54:
  unint64_t v24 = *(swift::Demangle::Node **)v17;
  int v23 = (swift::Demangle::Node **)((char *)v17 + 8);
  while (v23 != (swift::Demangle::Node **)v22)
  {
    std::string::append((std::string *)this, ", ", 2uLL);
    unint64_t v25 = *v23++;
  }
LABEL_56:
  std::string::append((std::string *)this, ">", 1uLL);
  if (*((_WORD *)v7 + 8) != 44) {
    goto LABEL_87;
  }
LABEL_60:
  int v26 = *((unsigned __int8 *)v7 + 18);
  if (v26 != 2)
  {
    if (v26 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      char v27 = 0;
      goto LABEL_66;
    }
    unsigned int v7 = *(swift::Demangle::Node **)v7;
  }
  char v27 = (swift::Demangle::Node *)*((void *)v7 + 1);
LABEL_66:
  int v28 = v27;
  while (1)
  {
    int v29 = v28;
    int v30 = *((unsigned __int16 *)v28 + 8);
    if (v30 != 232) {
      break;
    }
    int v31 = *((unsigned __int8 *)v29 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_69:
      int v28 = *(swift::Demangle::Node **)v29;
    }
    else
    {
      int v28 = 0;
      if (v31 == 5)
      {
        int v28 = 0;
        if (*((_DWORD *)v29 + 2))
        {
          int v29 = *(swift::Demangle::Node **)v29;
          goto LABEL_69;
        }
      }
    }
  }
  BOOL v32 = (v30 - 44) > 0x26 || ((1 << (v30 - 44)) & 0x4000200001) == 0;
  if (v32 && v30 != 245) {
    std::string::push_back((std::string *)this, 32);
  }
  int v33 = *((unsigned __int8 *)v27 + 18);
  if ((v33 - 1) < 2)
  {
LABEL_85:
    unsigned int v7 = *(swift::Demangle::Node **)v27;
  }
  else
  {
    if (v33 == 5 && *((_DWORD *)v27 + 2))
    {
      char v27 = *(swift::Demangle::Node **)v27;
      goto LABEL_85;
    }
    unsigned int v7 = 0;
  }
LABEL_87:
}

std::string *anonymous namespace'::NodePrinter::printFunctionType(swift::Demangle::Node *,swift::Demangle::Node *,unsigned int)::{lambda(char const*)#1}::operator()(uint64_t a1, const char *a2)
{
  int v4 = *(std::string **)a1;
  std::string::append(*(std::string **)a1, "@convention(", 0xCuLL);
  if (a2) {
    size_t v5 = strlen(a2);
  }
  else {
    size_t v5 = 0;
  }
  std::string::append(v4, a2, v5);
  int v6 = *(unsigned __int8 **)(a1 + 8);
  if (v6[18] - 1 >= 2) {
    int v6 = *(unsigned __int8 **)v6;
  }
  if (*(_WORD *)(*(void *)v6 + 16) == 23)
  {
    std::string::append(v4, ", mangledCType: \"", 0x11uLL);
    unsigned int v7 = *(swift::Demangle::Node **)(a1 + 8);
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        int v9 = 0;
        goto LABEL_13;
      }
      unsigned int v7 = *(swift::Demangle::Node **)v7;
    }
    int v9 = *(swift::Demangle::Node **)v7;
LABEL_13:
    std::string::push_back(v4, 34);
  }

  return std::string::append(v4, ") ", 2uLL);
}

void anonymous namespace'::NodePrinter::printFunctionParameters(swift::Demangle::Node *,swift::Demangle::Node *,unsigned int,BOOL)::{lambda(swift::Demangle::Node *)#1}::operator()(uint64_t a1, swift::Demangle::Node *a2)
{
  int v4 = *(std::string **)(a1 + 8);
  if (!**(unsigned char **)a1)
  {
    if (**(unsigned char **)(a1 + 32)) {
      goto LABEL_63;
    }
    int v10 = *((unsigned __int8 *)a2 + 18);
    uint64_t v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        uint64_t v12 = *(void *)a2;
        uint64_t v11 = *(swift::Demangle::Node **)a2;
LABEL_42:
        BOOL v22 = (swift::Demangle::Node *)(v12 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_46;
      }
      uint64_t v11 = 0;
    }
    switch(v10)
    {
      case 1:
        BOOL v22 = (swift::Demangle::Node *)((char *)a2 + 8);
        break;
      case 2:
        BOOL v22 = (swift::Demangle::Node *)((char *)a2 + 16);
        break;
      case 5:
        uint64_t v12 = *(void *)a2;
        goto LABEL_42;
      default:
        BOOL v22 = 0;
        break;
    }
LABEL_46:
    if (v11 != v22)
    {
      while (*(_WORD *)(*(void *)v11 + 16) != 225)
      {
        uint64_t v11 = (swift::Demangle::Node *)((char *)v11 + 8);
        if (v11 == v22)
        {
          uint64_t v11 = v22;
          break;
        }
      }
    }
    if (v10 == 5)
    {
      if (v11 == (swift::Demangle::Node *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2))) {
        goto LABEL_61;
      }
    }
    else
    {
      int v23 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 != 1) {
        int v23 = 0;
      }
      if (v10 == 2) {
        unint64_t v24 = (swift::Demangle::Node *)((char *)a2 + 16);
      }
      else {
        unint64_t v24 = v23;
      }
      if (v11 == v24) {
        goto LABEL_61;
      }
    }
    uint64_t v25 = *(void *)v11;
    if (v25)
    {
      std::string::append(*(std::string **)(a1 + 8), *(const std::string::value_type **)v25, *(void *)(v25 + 8));
      int v26 = ":";
      char v27 = v4;
      std::string::size_type v28 = 1;
LABEL_62:
      std::string::append(v27, v26, v28);
      goto LABEL_63;
    }
LABEL_61:
    int v26 = "_:";
    char v27 = *(std::string **)(a1 + 8);
    std::string::size_type v28 = 2;
    goto LABEL_62;
  }
  unint64_t v5 = **(unsigned int **)(a1 + 24);
  int v6 = ***(uint64_t *****)(a1 + 16);
  unint64_t v7 = *((unsigned __int8 *)v6 + 18);
  unsigned int v8 = v7 - 1;
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 == 5)
  {
    if (*((unsigned int *)v6 + 2) > v5) {
      goto LABEL_7;
    }
LABEL_15:
    int v9 = 0;
    goto LABEL_16;
  }
  if (v7 != 2) {
    goto LABEL_15;
  }
  unint64_t v7 = 2;
LABEL_6:
  if (v7 <= v5) {
    goto LABEL_15;
  }
LABEL_7:
  if (v8 >= 2) {
    int v6 = (uint64_t **)*v6;
  }
  int v9 = v6[v5];
LABEL_16:
  if (*((_WORD *)v9 + 8) != 101)
  {
    unsigned int v16 = 1;
    HIBYTE(v31) = 1;
    uint64_t v17 = 95;
    LOWORD(__dst) = 95;
    goto LABEL_29;
  }
  uint64_t v13 = (const void *)*v9;
  if (!*v9)
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    std::string __dst = 0;
    size_t v30 = 0;
    unint64_t v31 = 0;
    goto LABEL_29;
  }
  size_t v14 = v9[1];
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v14 >= 0x17)
  {
    uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v18 = v14 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (void **)operator new(v18 + 1);
    size_t v30 = v14;
    unint64_t v31 = v19 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = v9[1];
    p_dst = (void **)&__dst;
    if (!v14) {
      goto LABEL_28;
    }
  }
  memmove(p_dst, v13, v14);
LABEL_28:
  *((unsigned char *)p_dst + v14) = 0;
  unsigned int v16 = HIBYTE(v31);
  uint64_t v17 = v30;
LABEL_29:
  if ((v16 & 0x80u) == 0) {
    unint64_t v20 = (const std::string::value_type *)&__dst;
  }
  else {
    unint64_t v20 = (const std::string::value_type *)__dst;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v21 = v16;
  }
  else {
    std::string::size_type v21 = v17;
  }
  std::string::append(v4, v20, v21);
  std::string::push_back(v4, 58);
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst);
  }
LABEL_63:
  if (**(unsigned char **)a1 && **(unsigned char **)(a1 + 32)) {
    std::string::push_back(v4, 32);
  }
  ++**(_DWORD **)(a1 + 24);
  if (**(unsigned char **)(a1 + 32)) {
}
  }

void anonymous namespace'::NodePrinter::printFunctionSigSpecializationParams(std::string *this, swift::Demangle::Node *a2, int a3)
{
  unsigned int v5 = *((unsigned __int8 *)a2 + 18);
  switch(v5)
  {
    case 1u:
      goto LABEL_6;
    case 5u:
      unsigned int v5 = *((_DWORD *)a2 + 2);
      if (!v5) {
        return;
      }
LABEL_6:
      LODWORD(v6) = 0;
      unsigned int v7 = a3 + 1;
      unsigned int v8 = "[";
      int v9 = " : ";
      unsigned int v89 = v5;
      while (2)
      {
        unint64_t v11 = *((unsigned __int8 *)a2 + 18);
        if ((v11 - 1) >= 2)
        {
          char v12 = 0;
          uint64_t v13 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          char v12 = 1;
          uint64_t v13 = a2;
        }
        switch(**((_DWORD **)v13 + v6))
        {
          case 0:
          case 1:
            std::string::append(this, v8, 1uLL);
            unint64_t v16 = *((unsigned __int8 *)a2 + 18);
            unsigned int v17 = v16 - 1;
            switch(v16)
            {
              case 1:
                goto LABEL_27;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_69;
                }
                break;
              case 2:
                unint64_t v16 = 2;
LABEL_27:
                if (v16 <= v6)
                {
LABEL_69:
                  uint64_t v19 = 0;
                  goto LABEL_70;
                }
                break;
              default:
                goto LABEL_69;
            }
            uint64_t v18 = a2;
            if (v17 >= 2) {
              uint64_t v18 = *(swift::Demangle::Node **)a2;
            }
            uint64_t v19 = (swift::Demangle::Node *)*((void *)v18 + v6);
LABEL_70:
            std::string::append(this, v9, 3uLL);
            unint64_t v37 = a2;
            if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
              unint64_t v37 = *(swift::Demangle::Node **)a2;
            }
            unsigned int v38 = v9;
            uint64_t v39 = v8;
            uint64_t v40 = *((void *)v37 + (v6 + 1));
            unint64_t v41 = *(swift::Demangle **)v40;
            unsigned int v42 = *(const char **)(v40 + 8);
            char v90 = 0;
            uint64_t v91 = 0x101010101010101;
            char v92 = 1;
            int v93 = 0;
            int v94 = 16843009;
            char v95 = 1;
            __int16 v96 = 256;
            char v97 = 1;
            uint64_t v98 = 0;
            uint64_t v99 = 0;
            v100[0] = &unk_26C5DD7E8;
            v100[1] = swift::Demangle::genericParameterName;
            unint64_t v101 = v100;
            swift::Demangle::demangleSymbolAsString((uint64_t *)__p, v41, v42, (unint64_t)&v90, v36);
            if (v101 == v100)
            {
              (*(void (**)(void *))(v100[0] + 32))(v100);
            }
            else if (v101)
            {
              (*(void (**)(void))(*v101 + 40))();
            }
            if ((v103 & 0x80u) == 0) {
              std::string::size_type v43 = v103;
            }
            else {
              std::string::size_type v43 = (std::string::size_type)__p[1];
            }
            if (v43)
            {
              if ((v103 & 0x80u) == 0) {
                unint64_t v44 = __p;
              }
              else {
                unint64_t v44 = (void **)__p[0];
              }
              unsigned int v45 = this;
            }
            else
            {
              unsigned int v45 = this;
              unint64_t v44 = (void **)v41;
              std::string::size_type v43 = (std::string::size_type)v42;
            }
            std::string::append(v45, (const std::string::value_type *)v44, v43);
            unsigned int v8 = v39;
            int v9 = v38;
            unsigned int v5 = v89;
            std::string::append(this, "]", 1uLL);
            if ((char)v103 < 0) {
              operator delete(__p[0]);
            }
            LODWORD(v6) = v6 + 2;
            goto LABEL_10;
          case 2:
          case 3:
            std::string::append(this, v8, 1uLL);
            unint64_t v20 = *((unsigned __int8 *)a2 + 18);
            unsigned int v21 = v20 - 1;
            switch(v20)
            {
              case 1:
                goto LABEL_35;
              case 5:
                if (*((unsigned int *)a2 + 2) > (unint64_t)v6)
                {
LABEL_36:
                  BOOL v22 = a2;
                  if (v21 >= 2) {
                    BOOL v22 = *(swift::Demangle::Node **)a2;
                  }
                  int v23 = (swift::Demangle::Node *)*((void *)v22 + v6);
LABEL_90:
                  std::string::append(this, v9, 3uLL);
                  int v46 = *((unsigned __int8 *)a2 + 18);
                  if (v46 == 2)
                  {
                    unint64_t v47 = *((unsigned __int8 *)a2 + 18);
                  }
                  else
                  {
                    if (v46 != 5) {
                      goto LABEL_7;
                    }
                    unint64_t v47 = *((unsigned int *)a2 + 2);
                  }
                  unint64_t v48 = (v6 + 1);
                  if (v47 > v48)
                  {
                    unsigned int v49 = v46 - 1;
                    int v50 = a2;
                    if (v49 >= 2) {
                      int v50 = *(swift::Demangle::Node **)a2;
                    }
                    int v10 = (swift::Demangle::Node *)*((void *)v50 + v48);
                    goto LABEL_8;
                  }
LABEL_7:
                  int v10 = 0;
LABEL_8:
                  LODWORD(v6) = v6 + 2;
                  goto LABEL_9;
                }
                break;
              case 2:
                unint64_t v20 = 2;
LABEL_35:
                if (v20 > v6) {
                  goto LABEL_36;
                }
                break;
            }
            int v23 = 0;
            goto LABEL_90;
          case 4:
            std::string::append(this, v8, 1uLL);
            unint64_t v24 = *((unsigned __int8 *)a2 + 18);
            unsigned int v25 = v24 - 1;
            switch(v24)
            {
              case 1:
                goto LABEL_48;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_99;
                }
                break;
              case 2:
                unint64_t v24 = 2;
LABEL_48:
                if (v24 <= v6)
                {
LABEL_99:
                  char v27 = 0;
                  goto LABEL_100;
                }
                break;
              default:
                goto LABEL_99;
            }
            int v26 = a2;
            if (v25 >= 2) {
              int v26 = *(swift::Demangle::Node **)a2;
            }
            char v27 = (swift::Demangle::Node *)*((void *)v26 + v6);
LABEL_100:
            std::string::append(this, v9, 3uLL);
            int v51 = *((unsigned __int8 *)a2 + 18);
            if (v51 == 2)
            {
              unint64_t v52 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v51 != 5) {
                goto LABEL_108;
              }
              unint64_t v52 = *((unsigned int *)a2 + 2);
            }
            unint64_t v53 = (v6 + 1);
            if (v52 > v53)
            {
              unsigned int v54 = v51 - 1;
              unsigned int v55 = a2;
              if (v54 >= 2) {
                unsigned int v55 = *(swift::Demangle::Node **)a2;
              }
              int v56 = (swift::Demangle::Node *)*((void *)v55 + v53);
LABEL_109:
              std::string::append(this, "'", 1uLL);
              unint64_t v57 = *((unsigned __int8 *)a2 + 18);
              unsigned int v58 = v57 - 1;
              if (v57 != 1)
              {
                if (v57 == 5)
                {
                  unint64_t v57 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if (v57 != 2) {
                    goto LABEL_149;
                  }
                  unint64_t v57 = 2;
                }
              }
              unint64_t v74 = (v6 + 2);
              if (v57 > v74)
              {
                BOOL v75 = a2;
                if (v58 >= 2) {
                  BOOL v75 = *(swift::Demangle::Node **)a2;
                }
                uint64_t v76 = (swift::Demangle::Node *)*((void *)v75 + v74);
                goto LABEL_150;
              }
LABEL_149:
              uint64_t v76 = 0;
LABEL_150:
              LODWORD(v6) = v6 + 3;
              std::string::append(this, "'", 1uLL);
              goto LABEL_9;
            }
LABEL_108:
            int v56 = 0;
            goto LABEL_109;
          case 5:
            std::string::append(this, v8, 1uLL);
            unint64_t v28 = *((unsigned __int8 *)a2 + 18);
            unsigned int v29 = v28 - 1;
            switch(v28)
            {
              case 1:
                goto LABEL_56;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_114;
                }
                break;
              case 2:
                unint64_t v28 = 2;
LABEL_56:
                if (v28 <= v6)
                {
LABEL_114:
                  unint64_t v31 = 0;
                  goto LABEL_115;
                }
                break;
              default:
                goto LABEL_114;
            }
            size_t v30 = a2;
            if (v29 >= 2) {
              size_t v30 = *(swift::Demangle::Node **)a2;
            }
            unint64_t v31 = (swift::Demangle::Node *)*((void *)v30 + v6);
LABEL_115:
            std::string::append(this, v9, 3uLL);
            int v59 = *((unsigned __int8 *)a2 + 18);
            if (v59 == 2)
            {
              unint64_t v60 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v59 != 5) {
                goto LABEL_123;
              }
              unint64_t v60 = *((unsigned int *)a2 + 2);
            }
            unint64_t v61 = (v6 + 1);
            if (v60 > v61)
            {
              unsigned int v62 = v59 - 1;
              int v63 = a2;
              if (v62 >= 2) {
                int v63 = *(swift::Demangle::Node **)a2;
              }
              int v64 = (swift::Demangle::Node *)*((void *)v63 + v61);
              goto LABEL_124;
            }
LABEL_123:
            int v64 = 0;
LABEL_124:
            uint64_t v6 = (v6 + 2);
            std::string::append(this, ", Argument Types : [", 0x14uLL);
            unsigned int v65 = *((unsigned __int8 *)a2 + 18);
            switch(v65)
            {
              case 1u:
                goto LABEL_127;
              case 5u:
                unsigned int v65 = *((_DWORD *)a2 + 2);
                if (v6 < v65)
                {
                  while (1)
                  {
LABEL_154:
                    uint64_t v77 = a2;
                    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                      uint64_t v77 = *(swift::Demangle::Node **)a2;
                    }
                    int v78 = (swift::Demangle::Node *)*((void *)v77 + v6);
                    if (*((_WORD *)v78 + 8) != 232) {
                      break;
                    }
                    uint64_t v79 = (v6 + 1);
                    if (v79 < v65)
                    {
                      BOOL v80 = a2;
                      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                        BOOL v80 = *(swift::Demangle::Node **)a2;
                      }
                      if (*(unsigned char *)(*((void *)v80 + v79) + 18) == 3) {
                        std::string::append(this, ", ", 2uLL);
                      }
                    }
                    if (v65 == ++v6)
                    {
                      LODWORD(v6) = v65;
                      goto LABEL_9;
                    }
                  }
                }
                break;
              case 2u:
LABEL_127:
                if (v6 < v65) {
                  goto LABEL_154;
                }
                break;
            }
LABEL_9:
            std::string::append(this, "]", 1uLL);
LABEL_10:
            if (v6 >= v5) {
              return;
            }
            continue;
          case 6:
          case 7:
          case 8:
            if (v11 == 1) {
              goto LABEL_19;
            }
            if (v11 != 5) {
              goto LABEL_17;
            }
            goto LABEL_41;
          case 9:
            std::string::append(this, v8, 1uLL);
            unint64_t v32 = *((unsigned __int8 *)a2 + 18);
            unsigned int v33 = v32 - 1;
            switch(v32)
            {
              case 1:
                goto LABEL_64;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_130;
                }
                break;
              case 2:
                unint64_t v32 = 2;
LABEL_64:
                if (v32 <= v6)
                {
LABEL_130:
                  int v35 = 0;
                  goto LABEL_131;
                }
                break;
              default:
                goto LABEL_130;
            }
            std::string::size_type v34 = a2;
            if (v33 >= 2) {
              std::string::size_type v34 = *(swift::Demangle::Node **)a2;
            }
            int v35 = (swift::Demangle::Node *)*((void *)v34 + v6);
LABEL_131:
            std::string::append(this, v9, 3uLL);
            int v66 = *((unsigned __int8 *)a2 + 18);
            if (v66 == 2)
            {
              unint64_t v67 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v66 != 5) {
                goto LABEL_139;
              }
              unint64_t v67 = *((unsigned int *)a2 + 2);
            }
            unint64_t v68 = (v6 + 1);
            if (v67 > v68)
            {
              unsigned int v69 = v66 - 1;
              int v70 = a2;
              if (v69 >= 2) {
                int v70 = *(swift::Demangle::Node **)a2;
              }
              int v71 = (swift::Demangle::Node *)*((void *)v70 + v68);
LABEL_140:
              std::string::append(this, "<", 1uLL);
              unint64_t v72 = *((unsigned __int8 *)a2 + 18);
              unsigned int v73 = v72 - 1;
              if (v72 != 1)
              {
                if (v72 == 5)
                {
                  unint64_t v72 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if (v72 != 2) {
                    goto LABEL_167;
                  }
                  unint64_t v72 = 2;
                }
              }
              unint64_t v81 = (v6 + 2);
              if (v72 > v81)
              {
                std::string::size_type v82 = a2;
                if (v73 >= 2) {
                  std::string::size_type v82 = *(swift::Demangle::Node **)a2;
                }
                int v83 = (swift::Demangle::Node *)*((void *)v82 + v81);
LABEL_168:
                std::string::append(this, ",", 1uLL);
                unint64_t v84 = *((unsigned __int8 *)a2 + 18);
                unsigned int v85 = v84 - 1;
                if (v84 != 1)
                {
                  if (v84 == 5)
                  {
                    unint64_t v84 = *((unsigned int *)a2 + 2);
                  }
                  else
                  {
                    if (v84 != 2) {
                      goto LABEL_177;
                    }
                    unint64_t v84 = 2;
                  }
                }
                unint64_t v86 = (v6 + 3);
                if (v84 > v86)
                {
                  int v87 = a2;
                  if (v85 >= 2) {
                    int v87 = *(swift::Demangle::Node **)a2;
                  }
                  unint64_t v88 = (swift::Demangle::Node *)*((void *)v87 + v86);
                  goto LABEL_178;
                }
LABEL_177:
                unint64_t v88 = 0;
LABEL_178:
                LODWORD(v6) = v6 + 4;
                std::string::append(this, ">]", 2uLL);
                goto LABEL_10;
              }
LABEL_167:
              int v83 = 0;
              goto LABEL_168;
            }
LABEL_139:
            int v71 = 0;
            goto LABEL_140;
          default:
            if (v11 == 1) {
              goto LABEL_19;
            }
            if (v11 == 5)
            {
LABEL_41:
              if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                goto LABEL_42;
              }
            }
            else
            {
LABEL_17:
              if (v11 != 2) {
                goto LABEL_42;
              }
              unint64_t v11 = 2;
LABEL_19:
              if (v11 <= v6)
              {
LABEL_42:
                int v15 = 0;
                goto LABEL_43;
              }
            }
            size_t v14 = a2;
            if ((v12 & 1) == 0) {
              size_t v14 = *(swift::Demangle::Node **)a2;
            }
            int v15 = (swift::Demangle::Node *)*((void *)v14 + v6);
LABEL_43:
            LODWORD(v6) = v6 + 1;
            goto LABEL_10;
        }
      }
    case 2u:
      goto LABEL_6;
  }
}

std::string *anonymous namespace'::NodePrinter::printBoundGenericNoSugar(std::string *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v3 = this;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 != 2)
  {
    if (v4 != 5 || *((_DWORD *)a2 + 2) < 2u) {
      return this;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = a3 + 1;
  std::string::append(v3, "<", 1uLL);
  if (v5)
  {
    int v7 = *(unsigned __int8 *)(v5 + 18);
    unsigned int v8 = (swift::Demangle::Node **)v5;
    if ((v7 - 1) >= 2)
    {
      if (v7 == 5)
      {
        int v9 = *(swift::Demangle::Node **)v5;
        unsigned int v8 = *(swift::Demangle::Node ***)v5;
        goto LABEL_15;
      }
      unsigned int v8 = 0;
    }
    switch(v7)
    {
      case 1:
        int v10 = (swift::Demangle::Node **)(v5 + 8);
        if (v8 == (swift::Demangle::Node **)(v5 + 8)) {
          goto LABEL_24;
        }
        goto LABEL_22;
      case 2:
        int v10 = (swift::Demangle::Node **)(v5 + 16);
        if (v8 == (swift::Demangle::Node **)(v5 + 16)) {
          goto LABEL_24;
        }
        goto LABEL_22;
      case 5:
        int v9 = *(swift::Demangle::Node **)v5;
LABEL_15:
        int v10 = (swift::Demangle::Node **)((char *)v9 + 8 * *(unsigned int *)(v5 + 8));
        if (v8 == v10) {
          goto LABEL_24;
        }
LABEL_22:
        char v12 = *v8;
        unint64_t v11 = v8 + 1;
        while (v11 != v10)
        {
          std::string::append(v3, ", ", 2uLL);
          uint64_t v13 = *v11++;
        }
        goto LABEL_24;
    }
    int v10 = 0;
    if (v8) {
      goto LABEL_22;
    }
  }
LABEL_24:

  return std::string::append(v3, ">", 1uLL);
}

void anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::Node *,unsigned int)::{lambda(anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::Node *,unsigned int)::State)#1}::operator()(int **a1, int a2)
{
  int v2 = **a1;
  if (v2 != a2)
  {
    uint64_t v5 = (std::string *)a1[2];
    while (1)
    {
      if (v2)
      {
        if (v2 != 1)
        {
          if (v2 == 2) {
            printer_unreachable("no state after Results");
          }
          printer_unreachable("bad state");
        }
        std::string::append(v5, ") -> ", 5uLL);
        unsigned int v6 = *(swift::Demangle::Node **)a1[4];
        if (v6)
        {
          std::string::append(v5, " ", 1uLL);
        }
        std::string::append(v5, "(", 1uLL);
        goto LABEL_5;
      }
      if (*(void *)a1[1]) {
        break;
      }
LABEL_18:
      std::string::push_back(v5, 40);
LABEL_5:
      int v2 = ++**a1;
      if (v2 == a2) {
        return;
      }
    }
    std::string::append(v5, "@substituted ", 0xDuLL);
    int v7 = *(swift::Demangle::Node **)a1[1];
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        int v9 = 0;
        goto LABEL_17;
      }
      int v7 = *(swift::Demangle::Node **)v7;
    }
    int v9 = *(swift::Demangle::Node **)v7;
LABEL_17:
    std::string::push_back(v5, 32);
    goto LABEL_18;
  }
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  return std::vector<std::string>::__push_back_slow_path<std::string>();
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = &v7[24 * v2];
  int v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v10 = v8 + 24;
  unint64_t v11 = (void **)*a1;
  char v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    char v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

swift::Demangle::Node *swift::Demangle::demangleOldSymbolAsNode(_WORD *a1, size_t a2, swift::Demangle::NodeFactory *a3)
{
  unint64_t v3 = 0;
  std::string __p = 0;
  int v144 = 0;
  uint64_t v145 = 0;
  char __src = a1;
  size_t __len = a2;
  int v148 = a3;
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (*a1 != 21599) {
    goto LABEL_3;
  }
  unint64_t v6 = a1 + 1;
  unint64_t v7 = a2 - 2;
  char __src = a1 + 1;
  size_t __len = a2 - 2;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a3, 99);
  if (v7 < 2) {
    goto LABEL_228;
  }
  if (*v6 != 21332)
  {
    switch(*v6)
    {
      case 0x6F54:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        int v9 = a3;
        __int16 v10 = 164;
        break;
      case 0x4F54:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        int v9 = a3;
        __int16 v10 = 160;
        break;
      case 0x4454:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        int v9 = a3;
        __int16 v10 = 55;
        break;
      case 0x6454:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        int v9 = a3;
        __int16 v10 = 56;
        break;
      case 0x5654:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        int v9 = a3;
        __int16 v10 = 256;
        break;
      default:
        goto LABEL_228;
    }
    std::string::size_type v132 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v9, v10);
    swift::Demangle::Node::addChild(Node, v132, a3);
LABEL_228:
    if (!v133) {
      goto LABEL_3;
    }
    swift::Demangle::Node::addChild(Node, v133, v148);
    size_t v134 = __len;
    if (__len)
    {
      unint64_t v135 = v148;
      int v136 = __src;
      char __src = (char *)__src + __len;
      size_t __len = 0;
      uint64_t v137 = (char *)*((void *)v148 + 1);
      if (!v137 || (unint64_t v138 = &v137[v134], (unint64_t)&v137[v134] > *((void *)v148 + 2)))
      {
        unint64_t v139 = 2 * *((void *)v148 + 4);
        if (v139 <= v134 + 1) {
          unint64_t v139 = v134 + 1;
        }
        *((void *)v148 + 4) = v139;
        unint64_t v140 = v139 + 8;
        int v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
        *int v141 = *((void *)v135 + 3);
        uint64_t v137 = (char *)(v141 + 1);
        *((void *)v135 + 2) = (char *)v141 + v140;
        *((void *)v135 + 3) = v141;
        unint64_t v138 = (char *)v141 + v134 + 8;
      }
      *((void *)v135 + 1) = v138;
      memmove(v137, v136, v134);
      NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v135, 221, (uint64_t)v137, v134);
      swift::Demangle::Node::addChild(Node, NodeWithAllocatedText, v148);
    }
    unint64_t v3 = Node;
    goto LABEL_4;
  }
  unint64_t v11 = (unsigned __int8 *)(v6 + 1);
  size_t v12 = v7 - 2;
  char __src = v6 + 1;
  size_t __len = v7 - 2;
  if (v7 == 2) {
    goto LABEL_3;
  }
  long long v13 = "u16";
  while (1)
  {
    int v14 = *v11;
    switch(v14)
    {
      case 'f':
        char __src = v11 + 1;
        size_t __len = v12 - 1;
        unint64_t v16 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 77);
        size_t v17 = __len;
        if (__len)
        {
          uint64_t v18 = (char *)__src;
          int v19 = *(unsigned __int8 *)__src;
          if (v19 == 113)
          {
            char __src = (char *)__src + 1;
            --__len;
            unint64_t v20 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 217);
            swift::Demangle::Node::addChild(v16, v20, v148);
            size_t v17 = __len;
            unsigned int v21 = v148;
            if (!__len)
            {
              uint64_t v32 = 4294967294;
              goto LABEL_46;
            }
            uint64_t v18 = (char *)__src;
            LOBYTE(v19) = *(unsigned char *)__src;
          }
          else
          {
            unsigned int v21 = v148;
          }
          char __src = v18 + 1;
          size_t __len = v17 - 1;
          uint64_t v32 = ((char)v19 - 48);
        }
        else
        {
          unsigned int v21 = v148;
          uint64_t v32 = 4294967294;
        }
LABEL_46:
        unsigned int v33 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v21, 216, v32);
        while (1)
        {
          while (1)
          {
            swift::Demangle::Node::addChild(v16, v33, v148);
            size_t v29 = __len;
            if (__len)
            {
              size_t v30 = (char *)__src;
              if (*(unsigned char *)__src == 95) {
                goto LABEL_217;
              }
            }
            unsigned int v33 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 78);
            size_t v34 = __len;
            if (__len < 2)
            {
              if (!__len) {
                goto LABEL_3;
              }
              int v35 = (unsigned __int8 *)__src;
              goto LABEL_52;
            }
            int v35 = (unsigned __int8 *)__src;
            if (*(_WORD *)__src == 24430)
            {
              uint64_t v39 = (char *)__src + 2;
              size_t v40 = __len - 2;
              goto LABEL_146;
            }
            if (*(_WORD *)__src == 28771) {
              break;
            }
            switch(*(_WORD *)__src)
            {
              case 0x6C63:
                char __src = (char *)__src + 2;
                __len -= 2;
                if (!v43) {
                  goto LABEL_3;
                }
                unint64_t v44 = v43;
                unsigned int v45 = v13;
                int v46 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 5);
                swift::Demangle::Node::addChild(v33, v46, v148);
                unint64_t v47 = v148;
                size_t v48 = *(void *)(v44 + 8);
                if (v48)
                {
                  unsigned int v49 = *(const void **)v44;
                  int v50 = (char *)*((void *)v148 + 1);
                  if (!v50 || (int v51 = &v50[v48], (unint64_t)&v50[v48] > *((void *)v148 + 2)))
                  {
                    unint64_t v52 = 2 * *((void *)v148 + 4);
                    if (v52 <= v48 + 1) {
                      unint64_t v52 = v48 + 1;
                    }
                    *((void *)v148 + 4) = v52;
                    unint64_t v53 = v52 + 8;
                    unsigned int v54 = malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
                    void *v54 = *((void *)v47 + 3);
                    int v50 = (char *)(v54 + 1);
                    *((void *)v47 + 2) = (char *)v54 + v53;
                    *((void *)v47 + 3) = v54;
                    int v51 = (char *)v54 + v48 + 8;
                  }
                  *((void *)v47 + 1) = v51;
                  memmove(v50, v49, v48);
                }
                else
                {
                  int v50 = 0;
                }
                uint64_t v79 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v47, 81, (uint64_t)v50, v48);
                swift::Demangle::Node::addChild(v33, v79, v148);
                long long v13 = v45;
                if (__len)
                {
LABEL_138:
                  if (*(unsigned char *)__src != 95) {
                    goto LABEL_139;
                  }
                }
                else
                {
LABEL_139:
                  while (1)
                  {
                    if (!v80) {
                      break;
                    }
                    unint64_t v81 = v80;
                    std::string::size_type v82 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 232);
                    swift::Demangle::Node::addChild(v82, v81, v148);
                    if (!v82) {
                      break;
                    }
                    swift::Demangle::Node::addChild(v33, v82, v148);
                    if (__len) {
                      goto LABEL_138;
                    }
                  }
                }
                if (!__len || *(unsigned char *)__src != 95) {
                  goto LABEL_3;
                }
                uint64_t v39 = (char *)__src + 1;
                size_t v40 = __len - 1;
LABEL_146:
                char __src = v39;
                size_t __len = v40;
                break;
              case 0x5F69:
                char __src = (char *)__src + 2;
                __len -= 2;
                unsigned int v38 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 6);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              case 0x5F6B:
                char __src = (char *)__src + 2;
                __len -= 2;
                unsigned int v38 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 7);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              case 0x5F72:
                char __src = (char *)__src + 2;
                __len -= 2;
                unsigned int v38 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 8);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              default:
LABEL_52:
                int v36 = *v35;
                if (v36 == 100)
                {
                  ++v35;
                  size_t v34 = __len - 1;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  int v36 = *v35;
                  uint64_t v37 = 64;
                }
                else
                {
                  uint64_t v37 = 0;
                }
                if (v36 == 103)
                {
                  ++v35;
                  --v34;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x80uLL;
                  int v36 = *v35;
                }
                if (v36 == 111)
                {
                  ++v35;
                  --v34;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x200uLL;
                  int v36 = *v35;
                }
                if (v36 == 115)
                {
                  ++v35;
                  --v34;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x100uLL;
                  int v36 = *v35;
                }
                if (v36 != 95) {
                  goto LABEL_3;
                }
                char __src = v35 + 1;
                size_t __len = v34 - 1;
                if (!v37) {
                  goto LABEL_3;
                }
                unsigned int v38 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, v37);
                if (!v38) {
                  goto LABEL_3;
                }
LABEL_76:
                swift::Demangle::Node::addChild(v33, v38, v148);
                break;
            }
          }
          unint64_t v41 = (char *)__src + 2;
          size_t v42 = __len - 2;
          char __src = (char *)__src + 2;
          __len -= 2;
          if (v34 - 2 >= 2)
          {
            if (*v41 != 29286) {
              goto LABEL_90;
            }
            if (v42 >= 2) {
              uint64_t v83 = 2;
            }
            else {
              uint64_t v83 = v42;
            }
            char __src = (char *)v41 + v83;
            size_t __len = v42 - v83;
            if (!v84 || !__len || *(unsigned char *)__src != 95) {
              goto LABEL_3;
            }
            unint64_t v57 = v84;
            unsigned int v58 = v13;
            char __src = (char *)__src + 1;
            --__len;
            int v59 = v148;
            uint64_t v60 = 0;
LABEL_154:
            unsigned int v85 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v59, 80, v60);
            swift::Demangle::Node::addChild(v33, v85, v148);
            unint64_t v86 = v148;
            size_t v87 = *(void *)(v57 + 8);
            if (v87)
            {
              unint64_t v88 = *(const void **)v57;
              unsigned int v89 = (char *)*((void *)v148 + 1);
              if (!v89 || (char v90 = &v89[v87], (unint64_t)&v89[v87] > *((void *)v148 + 2)))
              {
                unint64_t v91 = 2 * *((void *)v148 + 4);
                if (v91 <= v87 + 1) {
                  unint64_t v91 = v87 + 1;
                }
                *((void *)v148 + 4) = v91;
                unint64_t v92 = v91 + 8;
                int v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                *int v93 = *((void *)v86 + 3);
                unsigned int v89 = (char *)(v93 + 1);
                *((void *)v86 + 2) = (char *)v93 + v92;
                *((void *)v86 + 3) = v93;
                char v90 = (char *)v93 + v87 + 8;
              }
              *((void *)v86 + 1) = v90;
              memmove(v89, v88, v87);
            }
            else
            {
              unsigned int v89 = 0;
            }
            int v94 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v86, 81, (uint64_t)v89, v87);
            swift::Demangle::Node::addChild(v33, v94, v148);
            long long v13 = v58;
          }
          else
          {
            if (v34 < 3) {
              goto LABEL_3;
            }
LABEL_90:
            int v55 = *(unsigned __int8 *)v41;
            if (v55 == 105)
            {
              unint64_t v61 = (unsigned __int8 *)v41 + 1;
              memset(&v149, 0, sizeof(v149));
              size_t v62 = v42 - 1;
              char __src = (char *)v41 + 1;
              size_t __len = v62;
              if (v62)
              {
                while (1)
                {
                  int v63 = *v61;
                  if (v63 == 95) {
                    break;
                  }
                  std::string::push_back(&v149, v63);
                  unint64_t v61 = (unsigned __int8 *)__src;
                  if (__len) {
                    unint64_t v61 = (unsigned __int8 *)__src + 1;
                  }
                  size_t v62 = __len - (__len != 0);
                  char __src = v61;
                  size_t __len = v62;
                  if (!v62) {
                    goto LABEL_181;
                  }
                }
                char __src = v61 + 1;
                size_t __len = v62 - 1;
                char v95 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 2);
                swift::Demangle::Node::addChild(v33, v95, v148);
                __int16 v96 = v148;
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v97 = &v149;
                }
                else {
                  char v97 = (std::string *)v149.__r_.__value_.__r.__words[0];
                }
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v149.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  uint64_t v99 = (char *)*((void *)v148 + 1);
                  if (!v99 || (int v100 = &v99[size], (unint64_t)&v99[size] > *((void *)v148 + 2)))
                  {
                    unint64_t v101 = 2 * *((void *)v148 + 4);
                    if (v101 <= size + 1) {
                      unint64_t v101 = size + 1;
                    }
                    *((void *)v148 + 4) = v101;
                    unint64_t v102 = v101 + 8;
                    unsigned __int8 v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
                    *unsigned __int8 v103 = *((void *)v96 + 3);
                    uint64_t v99 = (char *)(v103 + 1);
                    *((void *)v96 + 2) = (char *)v103 + v102;
                    *((void *)v96 + 3) = v103;
                    int v100 = (char *)v103 + size + 8;
                  }
                  *((void *)v96 + 1) = v100;
                  memmove(v99, v97, size);
                }
                else
                {
                  uint64_t v99 = 0;
                }
                unsigned int v108 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v96, 81, (uint64_t)v99, size);
                swift::Demangle::Node::addChild(v33, v108, v148);
                char v107 = 1;
                long long v13 = "u16";
                goto LABEL_182;
              }
            }
            else
            {
              if (v55 == 103)
              {
                char __src = (char *)v41 + 1;
                size_t __len = v42 - 1;
                if (!v56 || !__len || *(unsigned char *)__src != 95) {
                  goto LABEL_3;
                }
                unint64_t v57 = v56;
                unsigned int v58 = v13;
                char __src = (char *)__src + 1;
                --__len;
                int v59 = v148;
                uint64_t v60 = 1;
                goto LABEL_154;
              }
              if (v42 >= 2 && *v41 == 27750)
              {
                uint64_t v104 = (unsigned __int8 *)(v41 + 1);
                size_t v105 = v42 - 2;
                char __src = v104;
                size_t __len = v42 - 2;
                memset(&v149, 0, sizeof(v149));
                if (v42 >= 3)
                {
                  while (1)
                  {
                    int v106 = *v104;
                    if (v106 == 95) {
                      break;
                    }
                    std::string::push_back(&v149, v106);
                    uint64_t v104 = (unsigned __int8 *)__src;
                    if (__len) {
                      uint64_t v104 = (unsigned __int8 *)__src + 1;
                    }
                    size_t v105 = __len - (__len != 0);
                    char __src = v104;
                    size_t __len = v105;
                    if (!v105) {
                      goto LABEL_181;
                    }
                  }
                  if (v105)
                  {
                    char __src = v104 + 1;
                    size_t __len = v105 - 1;
                    int v109 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 3);
                    swift::Demangle::Node::addChild(v33, v109, v148);
                    unint64_t v110 = v148;
                    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int v111 = &v149;
                    }
                    else {
                      int v111 = (std::string *)v149.__r_.__value_.__r.__words[0];
                    }
                    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      size_t v112 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      size_t v112 = v149.__r_.__value_.__l.__size_;
                    }
                    if (v112)
                    {
                      __int16 v113 = (char *)*((void *)v148 + 1);
                      if (!v113 || (unint64_t v114 = &v113[v112], (unint64_t)&v113[v112] > *((void *)v148 + 2)))
                      {
                        unint64_t v115 = 2 * *((void *)v148 + 4);
                        if (v115 <= v112 + 1) {
                          unint64_t v115 = v112 + 1;
                        }
                        *((void *)v148 + 4) = v115;
                        unint64_t v116 = v115 + 8;
                        std::string::size_type v117 = malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
                        *std::string::size_type v117 = *((void *)v110 + 3);
                        __int16 v113 = (char *)(v117 + 1);
                        *((void *)v110 + 2) = (char *)v117 + v116;
                        *((void *)v110 + 3) = v117;
                        unint64_t v114 = (char *)v117 + v112 + 8;
                      }
                      *((void *)v110 + 1) = v114;
                      memmove(v113, v111, v112);
                    }
                    else
                    {
                      __int16 v113 = 0;
                    }
                    int v118 = v110;
                    uint64_t v119 = (uint64_t)v113;
                    uint64_t v120 = v112;
                    goto LABEL_215;
                  }
                  goto LABEL_202;
                }
              }
              else
              {
                if (v55 != 115) {
                  goto LABEL_3;
                }
                char __src = (char *)v41 + 1;
                size_t __len = v42 - 1;
                if (v42 == 1) {
                  goto LABEL_3;
                }
                if (*((unsigned char *)v41 + 1) != 101) {
                  goto LABEL_3;
                }
                char __src = v41 + 1;
                size_t __len = v42 - 2;
                if (v42 == 2) {
                  goto LABEL_3;
                }
                int v64 = *((unsigned __int8 *)v41 + 2);
                if ((v64 - 50) < 0xFFFFFFFE) {
                  goto LABEL_3;
                }
                memset(&v149, 0, sizeof(v149));
                if (v64 == 48) {
                  unsigned int v65 = "u8";
                }
                else {
                  unsigned int v65 = v13;
                }
                std::string::append(&v149, v65);
                int v66 = __src;
                if (__len) {
                  int v66 = (char *)__src + 1;
                }
                size_t v67 = __len - (__len != 0);
                char __src = v66;
                size_t __len = v67;
                if (v67)
                {
                  if (*v66 == 118)
                  {
                    char __src = v66 + 1;
                    size_t __len = v67 - 1;
                    if (v68)
                    {
                      if (__len)
                      {
                        if (*(unsigned char *)__src == 95)
                        {
                          unint64_t v69 = v68;
                          char __src = (char *)__src + 1;
                          --__len;
                          int v70 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 80, 4);
                          swift::Demangle::Node::addChild(v33, v70, v148);
                          int v71 = v148;
                          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            unint64_t v72 = &v149;
                          }
                          else {
                            unint64_t v72 = (std::string *)v149.__r_.__value_.__r.__words[0];
                          }
                          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string::size_type v73 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            std::string::size_type v73 = v149.__r_.__value_.__l.__size_;
                          }
                          if (v73)
                          {
                            unint64_t v74 = (char *)*((void *)v148 + 1);
                            if (!v74 || (BOOL v75 = &v74[v73], (unint64_t)&v74[v73] > *((void *)v148 + 2)))
                            {
                              unint64_t v76 = 2 * *((void *)v148 + 4);
                              if (v76 <= v73 + 1) {
                                unint64_t v76 = v73 + 1;
                              }
                              *((void *)v148 + 4) = v76;
                              unint64_t v77 = v76 + 8;
                              int v78 = malloc_type_malloc(v76 + 8, 0xD0263BC5uLL);
                              *int v78 = *((void *)v71 + 3);
                              unint64_t v74 = (char *)(v78 + 1);
                              *((void *)v71 + 2) = (char *)v78 + v77;
                              *((void *)v71 + 3) = v78;
                              BOOL v75 = (char *)v78 + v73 + 8;
                            }
                            *((void *)v71 + 1) = v75;
                            memmove(v74, v72, v73);
                          }
                          else
                          {
                            unint64_t v74 = 0;
                          }
                          int v121 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v71, 81, (uint64_t)v74, v73);
                          swift::Demangle::Node::addChild(v33, v121, v148);
                          __int16 v122 = v148;
                          size_t v123 = *(void *)(v69 + 8);
                          if (v123)
                          {
                            int v124 = *(const void **)v69;
                            int v125 = (char *)*((void *)v148 + 1);
                            if (!v125 || (int v126 = &v125[v123], (unint64_t)&v125[v123] > *((void *)v148 + 2)))
                            {
                              unint64_t v127 = 2 * *((void *)v148 + 4);
                              if (v127 <= v123 + 1) {
                                unint64_t v127 = v123 + 1;
                              }
                              *((void *)v148 + 4) = v127;
                              unint64_t v128 = v127 + 8;
                              unint64_t v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
                              *unint64_t v129 = *((void *)v122 + 3);
                              int v125 = (char *)(v129 + 1);
                              *((void *)v122 + 2) = (char *)v129 + v128;
                              *((void *)v122 + 3) = v129;
                              int v126 = (char *)v129 + v123 + 8;
                            }
                            *((void *)v122 + 1) = v126;
                            memmove(v125, v124, v123);
                          }
                          else
                          {
                            int v125 = 0;
                          }
                          int v118 = v122;
                          uint64_t v119 = (uint64_t)v125;
                          uint64_t v120 = v123;
LABEL_215:
                          int v130 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v118, 81, v119, v120);
                          swift::Demangle::Node::addChild(v33, v130, v148);
                          char v107 = 1;
                          long long v13 = "u16";
                          goto LABEL_182;
                        }
LABEL_202:
                        char v107 = 0;
                        goto LABEL_182;
                      }
                    }
                  }
                }
              }
            }
LABEL_181:
            char v107 = 0;
LABEL_182:
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v149.__r_.__value_.__l.__data_);
            }
            unint64_t v3 = 0;
            if ((v107 & 1) == 0) {
              goto LABEL_4;
            }
          }
        }
      case 'g':
        __int16 v15 = 91;
        break;
      case 'r':
        __int16 v15 = 92;
        break;
      default:
        goto LABEL_3;
    }
    char __src = v11 + 1;
    size_t __len = v12 - 1;
    unint64_t v16 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, v15);
    size_t v22 = __len;
    if (!__len)
    {
      int v26 = v148;
      uint64_t v27 = 4294967294;
      goto LABEL_33;
    }
    int v23 = (char *)__src;
    int v24 = *(unsigned __int8 *)__src;
    if (v24 != 113)
    {
      int v26 = v148;
      goto LABEL_32;
    }
    char __src = (char *)__src + 1;
    --__len;
    unsigned int v25 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 217);
    swift::Demangle::Node::addChild(v16, v25, v148);
    size_t v22 = __len;
    int v26 = v148;
    if (__len)
    {
      int v23 = (char *)__src;
      LOBYTE(v24) = *(unsigned char *)__src;
LABEL_32:
      char __src = v23 + 1;
      size_t __len = v22 - 1;
      uint64_t v27 = ((char)v24 - 48);
      goto LABEL_33;
    }
    uint64_t v27 = 4294967294;
LABEL_33:
    unint64_t v28 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v26, 216, v27);
    while (1)
    {
      swift::Demangle::Node::addChild(v16, v28, v148);
      size_t v29 = __len;
      if (__len)
      {
        size_t v30 = (char *)__src;
        if (*(unsigned char *)__src == 95) {
          break;
        }
      }
      unint64_t v28 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 94);
      if (!v3) {
        goto LABEL_4;
      }
      unint64_t v31 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v148, 232);
      swift::Demangle::Node::addChild(v31, v3, v148);
      if (!v31) {
        goto LABEL_3;
      }
      while (1)
      {
        swift::Demangle::Node::addChild(v28, v31, v148);
        if (__len)
        {
          if (*(unsigned char *)__src == 95) {
            break;
          }
        }
        unint64_t v3 = 0;
        if (!v31) {
          goto LABEL_4;
        }
      }
      char __src = (char *)__src + 1;
      --__len;
    }
LABEL_217:
    char __src = v30 + 1;
    size_t __len = v29 - 1;
    if (!v16) {
      goto LABEL_3;
    }
    swift::Demangle::Node::addChild(Node, v16, v148);
    int v144 = __p;
    if (__len < 4) {
      break;
    }
    int v131 = __src;
    if (*(_DWORD *)__src != 1398035551) {
      goto LABEL_239;
    }
    unint64_t v3 = 0;
    unint64_t v11 = (unsigned __int8 *)__src + 4;
    size_t v12 = __len - 4;
    char __src = (char *)__src + 4;
    size_t __len = v12;
    if (!v12) {
      goto LABEL_4;
    }
  }
  if (__len >= 2)
  {
    int v131 = __src;
LABEL_239:
    if (*v131 == 21599)
    {
      char __src = v131 + 1;
      __len -= 2;
      goto LABEL_228;
    }
  }
LABEL_3:
  unint64_t v3 = 0;
LABEL_4:
  if (__p)
  {
    int v144 = __p;
    operator delete(__p);
  }
  return v3;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleGlobal(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  unint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = (unsigned char *)*((void *)this + 3);
  if (*v5 != 77)
  {
    unint64_t v8 = v3 - 2;
    if (v3 < 2 || *(_WORD *)v5 != 16720)
    {
      switch(*v5)
      {
        case 'T':
          unint64_t v9 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v9;
          if (!v9) {
            return 0;
          }
          int v10 = v5[1];
          switch(v10)
          {
            case 'r':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = 200;
              break;
            case 'W':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 196);
              unsigned int v36 = a2 + 1;
              if (v37)
              {
                swift::Demangle::Node::addChild(Node, v37, *((swift::Demangle::NodeFactory **)this + 5));
                if (v14) {
                  goto LABEL_17;
                }
              }
              return 0;
            case 'R':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = 201;
              break;
            default:
              return 0;
          }
          unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v11, v12);
            return 0;
          return Node;
        case 'W':
          unint64_t v22 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v22;
          unint64_t Node = 0;
          if (v22)
          {
            switch(v5[1])
            {
              case 'G':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                int v23 = (void *)*((void *)this + 5);
                __int16 v24 = 88;
                goto LABEL_67;
              case 'I':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                int v23 = (void *)*((void *)this + 5);
                __int16 v24 = 89;
                goto LABEL_67;
              case 'L':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unsigned int v38 = (void *)*((void *)this + 5);
                __int16 v39 = 136;
                goto LABEL_70;
              case 'P':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                int v23 = (void *)*((void *)this + 5);
                __int16 v24 = 197;
                goto LABEL_67;
              case 'T':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 9);
                unsigned int v40 = a2 + 1;
                if (!v41) {
                  return 0;
                }
                swift::Demangle::Node::addChild(Node, v41, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v42) {
                  return 0;
                }
                swift::Demangle::Node::addChild(Node, v42, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'V':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v6 = (void *)*((void *)this + 5);
                __int16 v7 = 253;
                goto LABEL_16;
              case 'a':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                int v23 = (void *)*((void *)this + 5);
                __int16 v24 = 198;
LABEL_67:
                unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v23, v24);
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'l':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unsigned int v38 = (void *)*((void *)this + 5);
                __int16 v39 = 135;
LABEL_70:
                unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v38, v39);
                unsigned int v43 = a2 + 1;
                if (!v44) {
                  return 0;
                }
                swift::Demangle::Node::addChild(Node, v44, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 't':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 6);
                if (!v45) {
                  return 0;
                }
                swift::Demangle::Node::addChild(Node, v45, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'v':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v46 = swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 73);
                uint64_t v47 = *((void *)this + 4);
                if (!v47) {
                  return 0;
                }
                size_t v48 = (swift::Demangle::Node *)v46;
                unsigned int v49 = (unsigned __int8 *)*((void *)this + 3);
                int v50 = *v49;
                if (v50 == 100)
                {
                  uint64_t v51 = 0;
                }
                else
                {
                  unint64_t Node = 0;
                  if (v50 != 105) {
                    return Node;
                  }
                  uint64_t v51 = 1;
                }
                *((void *)this + 3) = v49 + 1;
                *((void *)this + 4) = v47 - 1;
                unint64_t v52 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 52, v51);
                swift::Demangle::Node::addChild(v48, v52, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v53) {
                  return 0;
                }
                swift::Demangle::Node::addChild(v48, v53, *((swift::Demangle::NodeFactory **)this + 5));
                unint64_t Node = v48;
                break;
              default:
                return Node;
            }
          }
          return Node;
        case 't':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          unsigned int v25 = (void *)*((void *)this + 5);
          __int16 v26 = 236;
LABEL_43:
          unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v25, v26);
          if (!v33) {
            return 0;
          }
          size_t v34 = v33;
          int v35 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::Node::addChild(v35, v34, *((swift::Demangle::NodeFactory **)this + 5));
          if (!v35) {
            return 0;
          }
          unint64_t v16 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
          size_t v17 = Node;
          __int16 v15 = v35;
          goto LABEL_18;
        case 'w':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          if ((v27 & 0xFF00000000) == 0) {
            return 0;
          }
          unsigned int v28 = v27;
          unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 252);
          size_t v29 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 102, v28);
          swift::Demangle::Node::addChild(Node, v29, *((swift::Demangle::NodeFactory **)this + 5));
          if (!v14) {
            return 0;
          }
          goto LABEL_17;
        default:
          unsigned int v20 = a2 + 1;
      }
    }
    uint64_t v18 = v5 + 2;
    *((void *)this + 3) = v18;
    *((void *)this + 4) = v3 - 2;
    if (v3 >= 3 && *v18 == 111)
    {
      *((void *)this + 3) = v18 + 1;
      *((void *)this + 4) = v3 - 3;
      __int16 v19 = 171;
    }
    else
    {
      __int16 v19 = 170;
    }
    unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), v19);
    unint64_t v30 = *((void *)this + 4);
    if (v30 < 3) {
      return Node;
    }
    uint64_t v31 = *((void *)this + 3);
    if (*(_WORD *)v31 != 24415 || *(unsigned char *)(v31 + 2) != 84) {
      return Node;
    }
    *((void *)this + 3) = v31 + 3;
    *((void *)this + 4) = v30 - 3;
    if (v14) {
      goto LABEL_17;
    }
    return 0;
  }
  *((void *)this + 3) = v5 + 1;
  *((void *)this + 4) = v3 - 1;
  if (v3 != 1)
  {
    switch(v5[1])
    {
      case 'L':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 244;
        goto LABEL_16;
      case 'P':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unsigned int v25 = (void *)*((void *)this + 5);
        __int16 v26 = 97;
        goto LABEL_43;
      case 'a':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unsigned int v25 = (void *)*((void *)this + 5);
        __int16 v26 = 238;
        goto LABEL_43;
      case 'f':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 75;
        goto LABEL_16;
      case 'm':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 147;
        goto LABEL_16;
      case 'n':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 158;
        goto LABEL_16;
      case 'p':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 186);
        if (!v14) {
          return 0;
        }
        goto LABEL_17;
      default:
        break;
    }
  }
  unint64_t v6 = (void *)*((void *)this + 5);
  __int16 v7 = 237;
LABEL_16:
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v6, v7);
  if (!v14) {
    return 0;
  }
LABEL_17:
  __int16 v15 = (swift::Demangle::Node *)v14;
  unint64_t v16 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
  size_t v17 = Node;
LABEL_18:
  swift::Demangle::Node::addChild(v17, v15, v16);
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleType(swift::Demangle::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(Node, v4, this[5]);
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleProtocolConformance(swift::Demangle::NodeFactory **this, int a2)
{
  unsigned int v3 = a2 + 1;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(Node, v5, this[5]);
  if (!Node) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7;
  unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(v9, v8, this[5]);
  if (!v9) {
    return 0;
  }
  if (!v10) {
    return 0;
  }
  unint64_t v11 = v10;
  __int16 v12 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 182);
  swift::Demangle::Node::addChild(v12, Node, this[5]);
  swift::Demangle::Node::addChild(v12, v9, this[5]);
  swift::Demangle::Node::addChild(v12, v11, this[5]);
  return v12;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleTypeImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 <= 0x400)
  {
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v5 = (char *)*((void *)this + 3);
      int v8 = *v5;
      unint64_t v6 = v5 + 1;
      char v7 = *v5;
      *((void *)this + 3) = v5 + 1;
      *((void *)this + 4) = v3 - 1;
      switch(v8)
      {
        case 'B':
          unint64_t v9 = 0;
          if (v3 == 1) {
            return v9;
          }
          int v10 = v5[1];
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          switch(v10)
          {
            case 'B':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.UnsafeValueBuffer";
              goto LABEL_149;
            case 'O':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.UnknownObject";
              goto LABEL_149;
            case 'b':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.BridgeObject";
              goto LABEL_149;
            case 'f':
              unint64_t v98 = 0;
                return 0;
              int v64 = (void *)*((void *)this + 5);
              memset(&v97, 0, sizeof(v97));
              unsigned int v65 = "Builtin.FPIEEE";
              std::string::size_type v66 = 14;
              goto LABEL_126;
            case 'i':
              unint64_t v98 = 0;
                return 0;
              int v64 = (void *)*((void *)this + 5);
              memset(&v97, 0, sizeof(v97));
              unsigned int v65 = "Builtin.Int";
              std::string::size_type v66 = 11;
LABEL_126:
              std::string::append(&v97, v65, v66);
              unint64_t v67 = v98;
              unint64_t v68 = &v97;
              goto LABEL_127;
            case 'o':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.NativeObject";
              goto LABEL_149;
            case 'p':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.RawPointer";
              goto LABEL_149;
            case 't':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.SILToken";
              goto LABEL_149;
            case 'v':
              unint64_t v98 = 0;
                return 0;
              uint64_t v73 = *((void *)this + 4);
              if (!v73) {
                return 0;
              }
              unint64_t v74 = (unsigned char *)*((void *)this + 3);
              if (*v74 != 66) {
                return 0;
              }
              *((void *)this + 3) = v74 + 1;
              *((void *)this + 4) = v73 - 1;
              if (v73 == 1) {
                return 0;
              }
              int v75 = v74[1];
              if (v75 == 102)
              {
                *((void *)this + 3) = v74 + 2;
                *((void *)this + 4) = v73 - 2;
                unint64_t v96 = 0;
                unint64_t v9 = 0;
                  return v9;
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                unint64_t v76 = swift::Demangle::DemanglerPrinter::operator<<(&v97, v98);
                unint64_t v77 = v76;
                int v78 = "xFPIEEE";
                std::string::size_type v79 = 7;
                goto LABEL_175;
              }
              if (v75 == 112)
              {
                *((void *)this + 3) = v74 + 2;
                *((void *)this + 4) = v73 - 2;
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                char v95 = swift::Demangle::DemanglerPrinter::operator<<(&v97, v98);
                std::string::append(v95, "xRawPointer", 0xBuLL);
                size_t v70 = HIBYTE(v95->__r_.__value_.__r.__words[2]);
                BOOL v71 = (v70 & 0x80u) != 0;
                size_t size = v95->__r_.__value_.__l.__size_;
                if ((v70 & 0x80u) == 0) {
                  __int16 v19 = v95;
                }
                else {
                  __int16 v19 = (std::string *)v95->__r_.__value_.__r.__words[0];
                }
LABEL_130:
                if (v71) {
                  size_t v21 = size;
                }
                else {
                  size_t v21 = v70;
                }
                uint64_t v18 = v64;
                __int16 v20 = 20;
                goto LABEL_134;
              }
              if (v75 != 105) {
                return 0;
              }
              *((void *)this + 3) = v74 + 2;
              *((void *)this + 4) = v73 - 2;
              unint64_t v96 = 0;
              unint64_t v9 = 0;
              {
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                unint64_t v76 = swift::Demangle::DemanglerPrinter::operator<<(&v97, v98);
                unint64_t v77 = v76;
                int v78 = "xInt";
                std::string::size_type v79 = 4;
LABEL_175:
                std::string::append(v76, v78, v79);
                unint64_t v67 = v96;
                unint64_t v68 = v77;
LABEL_127:
                unint64_t v69 = swift::Demangle::DemanglerPrinter::operator<<(v68, v67);
                size_t v70 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
                BOOL v71 = (v70 & 0x80u) != 0;
                size_t size = v69->__r_.__value_.__l.__size_;
                if ((v70 & 0x80u) == 0) {
                  __int16 v19 = v69;
                }
                else {
                  __int16 v19 = (std::string *)v69->__r_.__value_.__r.__words[0];
                }
                goto LABEL_130;
              }
              break;
            case 'w':
              unint64_t v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.Word";
LABEL_149:
              return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            default:
              return v9;
          }
          return v9;
        case 'D':
          if (!v9) {
            return v9;
          }
          unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::Node::addChild(Node, v9, *((swift::Demangle::NodeFactory **)this + 5));
          if (!Node) {
            return 0;
          }
          unint64_t v16 = (void *)*((void *)this + 5);
          __int16 v17 = 57;
          goto LABEL_35;
        case 'E':
          if (v3 == 1) {
            return 0;
          }
          if (*v6 != 82) {
            return 0;
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 82) {
            return 0;
          }
          *((void *)this + 3) = v5 + 3;
          *((void *)this + 4) = v3 - 3;
          uint64_t v18 = (void *)*((void *)this + 5);
          memset(&v97, 0, sizeof(v97));
          __int16 v19 = &v97;
          __int16 v20 = 63;
          size_t v21 = 0;
LABEL_134:
          unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v18, v20, v19, v21);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          return v9;
        case 'F':
          int v22 = a2 + 1;
          __int16 v23 = 82;
          goto LABEL_60;
        case 'G':
          if (!v24) {
            return 0;
          }
        case 'K':
          int v22 = a2 + 1;
          __int16 v23 = 11;
          goto LABEL_60;
        case 'M':
          if (!v26) {
            return 0;
          }
          unint64_t Node = (swift::Demangle::Node *)v26;
          unint64_t v16 = (void *)*((void *)this + 5);
          __int16 v17 = 145;
          goto LABEL_35;
        case 'P':
          if (v3 == 1 || *v6 != 77)
          {
LABEL_108:
            int v59 = a2 + 1;
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v27) {
            return 0;
          }
          unint64_t Node = (swift::Demangle::Node *)v27;
          unint64_t v16 = (void *)*((void *)this + 5);
          __int16 v17 = 69;
LABEL_35:
          unsigned int v28 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v16, v17);
          unint64_t v9 = v28;
          size_t v29 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
          unint64_t v30 = Node;
          goto LABEL_76;
        case 'Q':
          if (v3 == 1) {
            goto LABEL_83;
          }
          int v31 = *v6;
          if (v31 != 85)
          {
            if (v31 == 117)
            {
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              uint64_t v32 = (void *)*((void *)this + 5);
              return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v32, 308);
            }
            else
            {
LABEL_83:
              int v48 = a2 + 1;
            }
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          v97.__r_.__value_.__r.__words[0] = 0;
          unint64_t v9 = 0;
            return v9;
          unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 308);
          unint64_t v40 = swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 341, (uint64_t)v97.__r_.__value_.__l.__data_);
LABEL_65:
          unint64_t v30 = (swift::Demangle::Node *)v40;
          size_t v29 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
          unsigned int v28 = v9;
          goto LABEL_76;
        case 'R':
          unsigned int v33 = (void *)*((void *)this + 5);
          __int16 v34 = 123;
          goto LABEL_64;
        case 'S':
        case 'T':
          int v35 = a2 + 1;
          int v36 = 0;
          goto LABEL_70;
        case 'W':
          int v37 = a2 + 1;
        case 'X':
          unint64_t v9 = 0;
          if (v3 == 1) {
            return v9;
          }
          switch(*v6)
          {
            case 'B':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 71)
              {
                unsigned int v38 = 0;
              }
              else
              {
                *((void *)this + 3) = v5 + 3;
                *((void *)this + 4) = v3 - 3;
                if (!v38) {
                  return 0;
                }
              }
              unint64_t v80 = swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 212);
              uint64_t v81 = *((void *)this + 4);
              if (!v81) {
                return 0;
              }
              std::string::size_type v82 = (swift::Demangle::Node *)v80;
              unsigned int v83 = a2 + 1;
              break;
            case 'F':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              int v49 = a2 + 1;
            case 'M':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v50) {
                return 0;
              }
              unsigned int v38 = (unsigned __int16 *)v50;
              if (!v51) {
                return 0;
              }
              unint64_t v52 = (swift::Demangle::Node *)v51;
              unint64_t v53 = (void *)*((void *)this + 5);
              __int16 v54 = 145;
              goto LABEL_106;
            case 'P':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 77) {
                goto LABEL_108;
              }
              *((void *)this + 3) = v5 + 3;
              *((void *)this + 4) = v3 - 3;
              if (!v55) {
                return 0;
              }
              unsigned int v38 = (unsigned __int16 *)v55;
              if (!v56) {
                return 0;
              }
              unint64_t v52 = (swift::Demangle::Node *)v56;
              unint64_t v53 = (void *)*((void *)this + 5);
              __int16 v54 = 69;
LABEL_106:
              unint64_t v57 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v53, v54);
              unint64_t v9 = v57;
              unsigned int v58 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
              goto LABEL_107;
            case 'b':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v60) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::Node *)v60;
              unint64_t v16 = (void *)*((void *)this + 5);
              __int16 v17 = 210;
              goto LABEL_35;
            case 'f':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              int v22 = a2 + 1;
              __int16 v23 = 222;
              goto LABEL_60;
            case 'o':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v61) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::Node *)v61;
              unint64_t v16 = (void *)*((void *)this + 5);
              __int16 v17 = 248;
              goto LABEL_35;
            case 'u':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v62) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::Node *)v62;
              unint64_t v16 = (void *)*((void *)this + 5);
              __int16 v17 = 249;
              goto LABEL_35;
            case 'w':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v63) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::Node *)v63;
              unint64_t v16 = (void *)*((void *)this + 5);
              __int16 v17 = 247;
              goto LABEL_35;
            default:
              return v9;
          }
          while (2)
          {
            unint64_t v84 = (unsigned __int8 *)*((void *)this + 3);
            int v85 = *v84;
            if (v85 == 105)
            {
              __int16 v86 = 214;
              goto LABEL_159;
            }
            if (v85 == 109)
            {
              __int16 v86 = 213;
LABEL_159:
              *((void *)this + 3) = v84 + 1;
              *((void *)this + 4) = v81 - 1;
              if (v87)
              {
                unint64_t v88 = (swift::Demangle::Node *)v87;
                unsigned int v89 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::Node::addChild(v89, v88, *((swift::Demangle::NodeFactory **)this + 5));
                if (v89)
                {
                  char v90 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), v86);
                  swift::Demangle::Node::addChild(v90, v89, *((swift::Demangle::NodeFactory **)this + 5));
                  swift::Demangle::Node::addChild(v82, v90, *((swift::Demangle::NodeFactory **)this + 5));
                  unint64_t v9 = 0;
                  uint64_t v81 = *((void *)this + 4);
                  if (!v81) {
                    return v9;
                  }
                  continue;
                }
              }
              return 0;
            }
            break;
          }
          if (v85 != 95) {
            return 0;
          }
          *((void *)this + 3) = v84 + 1;
          *((void *)this + 4) = v81 - 1;
          if (v38)
          {
            unint64_t v91 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 235);
            uint64_t v92 = *((void *)this + 4);
            if (!v92) {
              goto LABEL_167;
            }
LABEL_166:
            int v93 = (unsigned char *)*((void *)this + 3);
            if (*v93 != 95)
            {
LABEL_167:
              while (1)
              {
                if (!v94) {
                  return 0;
                }
                swift::Demangle::Node::addChild(v91, v94, *((swift::Demangle::NodeFactory **)this + 5));
                uint64_t v92 = *((void *)this + 4);
                if (v92) {
                  goto LABEL_166;
                }
              }
            }
            unint64_t v52 = v91;
            *((void *)this + 3) = v93 + 1;
            *((void *)this + 4) = v92 - 1;
          }
          else
          {
            unint64_t v52 = 0;
          }
          unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 211);
          swift::Demangle::Node::addChild(v9, v82, *((swift::Demangle::NodeFactory **)this + 5));
          if (v38)
          {
            unsigned int v58 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
            unint64_t v57 = v9;
LABEL_107:
            swift::Demangle::Node::addChild(v57, (swift::Demangle::Node *)v38, v58);
            size_t v29 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
            unsigned int v28 = v9;
            unint64_t v30 = v52;
LABEL_76:
            swift::Demangle::Node::addChild(v28, v30, v29);
          }
          return v9;
        case 'a':
          int v39 = a2 + 1;
          __int16 v14 = 234;
          goto LABEL_92;
        case 'b':
          int v22 = a2 + 1;
          __int16 v23 = 165;
          goto LABEL_60;
        case 'c':
          int v22 = a2 + 1;
          __int16 v23 = 22;
          goto LABEL_60;
        case 'f':
          int v22 = a2 + 1;
          __int16 v23 = 245;
LABEL_60:
        case 'k':
          unsigned int v33 = (void *)*((void *)this + 5);
          __int16 v34 = 326;
LABEL_64:
          unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v33, v34);
          if (v40) {
            goto LABEL_65;
          }
          return 0;
        case 'q':
          int v41 = a2 + 1;
        case 't':
          int v35 = a2 + 1;
          int v36 = 1;
LABEL_70:
        case 'u':
          unsigned int v42 = a2 + 1;
          if (!v43) {
            return 0;
          }
          unint64_t v44 = (swift::Demangle::Node *)v43;
          if (!v45) {
            return 0;
          }
          unint64_t v46 = (swift::Demangle::Node *)v45;
          unint64_t v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 44);
          swift::Demangle::Node::addChild(v9, v44, *((swift::Demangle::NodeFactory **)this + 5));
          size_t v29 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
          unsigned int v28 = v9;
          unint64_t v30 = v46;
          goto LABEL_76;
        case 'w':
          int v47 = a2 + 1;
        case 'x':
        default:
          if ((v7 - 67) > 0x13 || ((1 << (v7 - 67)) & 0x81001) == 0) {
            return 0;
          }
          switch(v7)
          {
            case 'C':
              __int16 v14 = 24;
              break;
            case 'O':
              __int16 v14 = 61;
              break;
            case 'V':
              __int16 v14 = 219;
              break;
            default:
              __int16 v14 = 101;
              break;
          }
          int v39 = a2 + 1;
LABEL_92:
      }
    }
  }
  return 0;
}

uint64_t anonymous namespace'::OldDemangler::demangleBuiltinSize(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9) {
    return 0;
  }
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 == 1) {
    return 0;
  }
  char v7 = v3 + 2;
  uint64_t v8 = v2 - 2;
  while (1)
  {
    int v9 = *v4;
    if ((v9 - 58) < 0xFFFFFFF6) {
      break;
    }
    uint64_t v6 = (v9 - 48) + 10 * v6;
    *a2 = v6;
    ++v4;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v8;
    ++v7;
    if (--v8 == -1) {
      return 0;
    }
  }
  if (v9 != 95) {
    return 0;
  }
  *((void *)this + 3) = v7;
  *((void *)this + 4) = v8;
  return 1;
}

uint64_t anonymous namespace'::OldDemangler::demangleNatural(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9) {
    return 0;
  }
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 != 1)
  {
    char v7 = v3 + 2;
    uint64_t v8 = v2 - 2;
    do
    {
      int v9 = *v4;
      if ((v9 - 58) < 0xFFFFFFF6) {
        break;
      }
      uint64_t v6 = (v9 - 48) + 10 * v6;
      *a2 = v6;
      ++v4;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v8;
      ++v7;
      --v8;
    }
    while (v8 != -1);
  }
  return 1;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleDeclarationName(uint64_t a1, __int16 a2, int a3)
{
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (swift::Demangle::Node *)v7;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  swift::Demangle::Node::addChild(Node, v6, *(swift::Demangle::NodeFactory **)(a1 + 40));
  swift::Demangle::Node::addChild(Node, v8, *(swift::Demangle::NodeFactory **)(a1 + 40));
  unint64_t v11 = *(swift::Demangle::Node ***)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  if ((unint64_t)v11 >= v10)
  {
    long long v13 = *(char **)a1;
    uint64_t v14 = (uint64_t)v11 - *(void *)a1;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = v10 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v19 = operator new(8 * v18);
    }
    else
    {
      __int16 v19 = 0;
    }
    __int16 v20 = (swift::Demangle::Node **)&v19[8 * v15];
    size_t v21 = &v19[8 * v18];
    *__int16 v20 = Node;
    __int16 v12 = v20 + 1;
    if (v11 != (swift::Demangle::Node **)v13)
    {
      unint64_t v22 = (char *)v11 - v13 - 8;
      if (v22 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)((char *)v11 - v19 - v14) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v25 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      __int16 v20 = (swift::Demangle::Node **)((char *)v20 - v24);
      uint64_t v26 = &v19[8 * v15 - 16];
      uint64_t v27 = v11 - 2;
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *uint64_t v26 = v29;
        v26 -= 2;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      unint64_t v11 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          unint64_t v30 = *--v11;
          *--__int16 v20 = v30;
        }
        while (v11 != (swift::Demangle::Node **)v13);
      }
      unint64_t v11 = *(swift::Demangle::Node ***)a1;
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v21;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *unint64_t v11 = Node;
    __int16 v12 = v11 + 1;
  }
  *(void *)(a1 + 8) = v12;
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleFunctionType(_anonymous_namespace_::OldDemangler *this, __int16 a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (!v6)
  {
    BOOL v10 = 0;
    BOOL v12 = 0;
    int v13 = 0;
    unint64_t Node = 0;
    BOOL v9 = 0;
    goto LABEL_28;
  }
  unint64_t v7 = (unsigned __int8 *)*((void *)this + 3);
  int v8 = *v7;
  BOOL v9 = v8 == 122;
  if (v8 == 122)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      BOOL v10 = 0;
      BOOL v12 = 0;
      int v13 = 0;
      unint64_t Node = 0;
      BOOL v9 = 1;
      goto LABEL_28;
    }
    int v8 = *v7;
  }
  BOOL v10 = v8 == 121;
  if (v8 == 121)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      BOOL v12 = 0;
      int v13 = 0;
      unint64_t Node = 0;
      BOOL v10 = 1;
      goto LABEL_28;
    }
  }
  int v11 = *v7;
  BOOL v12 = v11 == 90;
  if (v11 == 90)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      int v13 = 0;
      unint64_t Node = 0;
      BOOL v12 = 1;
      goto LABEL_28;
    }
    int v11 = *v7;
  }
  if (v11 == 68)
  {
    *((void *)this + 3) = v7 + 1;
    *((void *)this + 4) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v6 = 0;
      int v13 = 46;
      ++v7;
    }
    else
    {
      int v13 = v7[1];
      v7 += 2;
      v6 -= 2;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v6;
    }
    HIDWORD(v15) = v13;
    LODWORD(v15) = (v13 << 24) - 1677721600;
    unsigned int v16 = (v15 >> 25);
    if (v16 <= 7 && ((1 << v16) & 0x93) != 0)
    {
      if (!v6)
      {
LABEL_27:
        unint64_t Node = 0;
        goto LABEL_28;
      }
    }
    else
    {
      int v13 = 0;
      if (!v6) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v13 = 0;
  }
  if (*v7 != 89) {
    goto LABEL_27;
  }
  *((void *)this + 3) = v7 + 1;
  *((void *)this + 4) = v6 - 1;
  if (!v17) {
    return 0;
  }
  unint64_t v18 = (swift::Demangle::Node *)v17;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::Node::addChild(Node, v18, *((swift::Demangle::NodeFactory **)this + 5));
  if (!Node) {
    return 0;
  }
LABEL_28:
  unsigned int v19 = a3 + 1;
  if (!v20) {
    return 0;
  }
  size_t v21 = (swift::Demangle::Node *)v20;
  unint64_t v22 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::Node::addChild(v22, v21, *((swift::Demangle::NodeFactory **)this + 5));
  if (!v22) {
    return 0;
  }
  if (!v23) {
    return 0;
  }
  uint64_t v24 = (swift::Demangle::Node *)v23;
  unsigned int v25 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::Node::addChild(v25, v24, *((swift::Demangle::NodeFactory **)this + 5));
  if (!v25) {
    return 0;
  }
  uint64_t v26 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), a2);
  if (v9)
  {
    uint64_t v27 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 272);
    swift::Demangle::Node::addChild(v26, v27, *((swift::Demangle::NodeFactory **)this + 5));
    if (!v12) {
      goto LABEL_34;
    }
  }
  else if (!v12)
  {
LABEL_34:
    if (v10) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
  unint64_t v30 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 271);
  swift::Demangle::Node::addChild(v26, v30, *((swift::Demangle::NodeFactory **)this + 5));
  if (v10)
  {
LABEL_35:
    uint64_t v28 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 66);
    swift::Demangle::Node::addChild(v26, v28, *((swift::Demangle::NodeFactory **)this + 5));
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_41:
  if (v13)
  {
LABEL_42:
    int v31 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 68, (char)v13);
    swift::Demangle::Node::addChild(v26, v31, *((swift::Demangle::NodeFactory **)this + 5));
  }
LABEL_43:
  if (Node)
  {
    uint64_t v32 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 67);
    swift::Demangle::Node::addChild(v32, Node, *((swift::Demangle::NodeFactory **)this + 5));
    swift::Demangle::Node::addChild(v26, v32, *((swift::Demangle::NodeFactory **)this + 5));
  }
  unsigned int v33 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 3);
  swift::Demangle::Node::addChild(v26, v33, *((swift::Demangle::NodeFactory **)this + 5));
  swift::Demangle::Node::addChild(v33, v22, *((swift::Demangle::NodeFactory **)this + 5));
  __int16 v34 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 207);
  swift::Demangle::Node::addChild(v34, v25, *((swift::Demangle::NodeFactory **)this + 5));
  swift::Demangle::Node::addChild(v26, v34, *((swift::Demangle::NodeFactory **)this + 5));
  return v26;
}

unsigned __int16 *anonymous namespace'::OldDemangler::demangleGenericSignature(_anonymous_namespace_::OldDemangler *this, int a2, int a3)
{
  int v5 = (void *)*((void *)this + 5);
  if (a3) {
    __int16 v6 = 46;
  }
  else {
    __int16 v6 = 43;
  }
  unint64_t Node = swift::Demangle::NodeFactory::createNode(v5, v6);
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    BOOL v9 = (swift::Demangle::Node *)Node;
    uint64_t v10 = -1;
    while (1)
    {
      BOOL v12 = (unsigned __int8 *)*((void *)this + 3);
      int v13 = *v12;
      if (v13 == 122)
      {
        uint64_t v10 = 0;
        *((void *)this + 3) = v12 + 1;
        *((void *)this + 4) = v8 - 1;
        goto LABEL_7;
      }
      if (v13 == 82 || v13 == 114) {
        break;
      }
      uint64_t v14 = v12 + 1;
      *((void *)this + 3) = v12 + 1;
      *((void *)this + 4) = v8 - 1;
      if (v13 == 95)
      {
        uint64_t v15 = 0;
      }
      else
      {
        if ((v13 - 58) < 0xFFFFFFF6 || v8 == 1) {
          return 0;
        }
        uint64_t v17 = (v13 - 48);
        unint64_t v18 = v12 + 2;
        uint64_t v19 = v8 - 2;
        while (1)
        {
          int v20 = *v14;
          if ((v20 - 58) < 0xFFFFFFF6) {
            break;
          }
          uint64_t v17 = (v20 - 48) + 10 * v17;
          ++v14;
          *((void *)this + 3) = v18;
          *((void *)this + 4) = v19;
          ++v18;
          if (--v19 == -1) {
            return 0;
          }
        }
        if (v20 != 95) {
          return 0;
        }
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v19;
        uint64_t v15 = v17 + 1;
      }
      uint64_t v10 = v15 + 1;
LABEL_7:
      int v11 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 37, v10);
      swift::Demangle::Node::addChild(v9, v11, *((swift::Demangle::NodeFactory **)this + 5));
      uint64_t v8 = *((void *)this + 4);
      if (!v8) {
        return 0;
      }
    }
    if (v10 != -1
      || (size_t v21 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 37, 1),
          swift::Demangle::Node::addChild(v9, v21, *((swift::Demangle::NodeFactory **)this + 5)),
          (uint64_t v8 = *((void *)this + 4)) != 0))
    {
      unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
      int v23 = *v22;
      if (v23 == 114)
      {
LABEL_103:
        *((void *)this + 3) = v22 + 1;
        *((void *)this + 4) = v8 - 1;
        return (unsigned __int16 *)v9;
      }
      if (v23 == 82)
      {
        --v8;
        unsigned int v24 = a2 + 2;
        int v25 = a2 + 4;
        *((void *)this + 3) = v22 + 1;
        *((void *)this + 4) = v8;
        if (v8) {
          goto LABEL_29;
        }
LABEL_42:
        if (v28)
        {
          while (1)
          {
            __int16 v34 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::Node::addChild(v34, v28, *((swift::Demangle::NodeFactory **)this + 5));
            if (!v34) {
              return 0;
            }
            uint64_t v35 = *((void *)this + 4);
            if (!v35) {
              return 0;
            }
            int v36 = (unsigned __int8 *)*((void *)this + 3);
            unsigned int v37 = *v36;
            if (v37 > 0x6B)
            {
              if (v37 == 108)
              {
                uint64_t v63 = -1;
                unint64_t v64 = -1;
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                unint64_t v44 = 0;
                if (v35 != 1)
                {
                  uint64_t v45 = "U";
                  switch(v36[1])
                  {
                    case 'B':
                      uint64_t v45 = "B";
                      goto LABEL_87;
                    case 'E':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                        goto LABEL_100;
                      uint64_t v50 = *((void *)this + 4);
                      if (!v50) {
                        goto LABEL_100;
                      }
                      uint64_t v51 = (unsigned char *)*((void *)this + 3);
                      if (*v51 != 95) {
                        goto LABEL_100;
                      }
                      *((void *)this + 3) = v51 + 1;
                      *((void *)this + 4) = v50 - 1;
                      uint64_t v45 = "E";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'M':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                        goto LABEL_100;
                      uint64_t v52 = *((void *)this + 4);
                      if (!v52) {
                        goto LABEL_100;
                      }
                      unint64_t v53 = (unsigned char *)*((void *)this + 3);
                      if (*v53 != 95) {
                        goto LABEL_100;
                      }
                      *((void *)this + 3) = v53 + 1;
                      *((void *)this + 4) = v52 - 1;
                      uint64_t v45 = "M";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'N':
                      uint64_t v45 = "N";
                      goto LABEL_87;
                    case 'R':
                      uint64_t v45 = "R";
                      goto LABEL_87;
                    case 'S':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "S";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'T':
                      uint64_t v45 = "T";
                      goto LABEL_87;
                    case 'U':
LABEL_87:
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      goto LABEL_88;
                    case 'e':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "e";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'm':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "m";
                        goto LABEL_100;
LABEL_88:
                      __int16 v54 = (void *)*((void *)this + 5);
                      unint64_t v55 = (char *)v54[1];
                      if (!v55 || (uint64_t v56 = v55 + 1, (unint64_t)(v55 + 1) > v54[2]))
                      {
                        unint64_t v57 = 2 * v54[4];
                        if (v57 <= 2) {
                          unint64_t v57 = 2;
                        }
                        v54[4] = v57;
                        unint64_t v58 = v57 + 8;
                        int v59 = malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
                        *int v59 = v54[3];
                        uint64_t v56 = (char *)v59 + 9;
                        unint64_t v55 = (char *)(v59 + 1);
                        v54[2] = (char *)v59 + v58;
                        v54[3] = v59;
                      }
                      v54[1] = v56;
                      *unint64_t v55 = *v45;
                      unint64_t NodeWithAllocatedText = swift::Demangle::NodeFactory::createNodeWithAllocatedText(v54, 101, (uint64_t)v55, 1);
                      if (NodeWithAllocatedText)
                      {
                        uint64_t v61 = (swift::Demangle::Node *)NodeWithAllocatedText;
                        unint64_t v44 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 41);
                        swift::Demangle::Node::addChild(v44, v34, *((swift::Demangle::NodeFactory **)this + 5));
                        swift::Demangle::Node::addChild(v44, v61, *((swift::Demangle::NodeFactory **)this + 5));
                        if (v64 != -1)
                        {
                          uint64_t v62 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 161, v64);
                          swift::Demangle::Node::addChild(v44, v62, *((swift::Demangle::NodeFactory **)this + 5));
                          if (v63 != -1)
                          {
                            int v49 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 161, v63);
                            int v47 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
                            int v48 = v44;
                            goto LABEL_68;
                          }
                        }
                      }
                      else
                      {
LABEL_100:
                        unint64_t v44 = 0;
                      }
                      break;
                    default:
                      goto LABEL_69;
                  }
                }
                goto LABEL_69;
              }
              if (v37 == 122)
              {
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                if (!result) {
                  return result;
                }
                int v41 = (swift::Demangle::Node *)result;
                unint64_t v40 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::Node::addChild(v40, v41, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v40) {
                  return 0;
                }
                unsigned int v42 = (void *)*((void *)this + 5);
                __int16 v43 = 39;
                goto LABEL_67;
              }
            }
            else
            {
              if (v37 == 67)
              {
                if (!result) {
                  return result;
                }
                goto LABEL_65;
              }
              if (v37 == 83)
              {
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                if (!result) {
                  return result;
                }
                unsigned int v38 = (swift::Demangle::Node *)result;
                int v39 = result[8];
                if (v39 != 24 && v39 != 180)
                {
                  if (v39 != 153) {
                    return 0;
                  }
                  unsigned int v38 = (swift::Demangle::Node *)result;
                  if (!result) {
                    return result;
                  }
                }
                unint64_t v40 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::Node::addChild(v40, v38, *((swift::Demangle::NodeFactory **)this + 5));
                goto LABEL_66;
              }
            }
            if (!result) {
              return result;
            }
LABEL_65:
            unint64_t v46 = (swift::Demangle::Node *)result;
            unint64_t v40 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::Node::addChild(v40, v46, *((swift::Demangle::NodeFactory **)this + 5));
            if (!v40) {
              return 0;
            }
LABEL_66:
            unsigned int v42 = (void *)*((void *)this + 5);
            __int16 v43 = 36;
LABEL_67:
            unint64_t v44 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v42, v43);
            swift::Demangle::Node::addChild(v44, v34, *((swift::Demangle::NodeFactory **)this + 5));
            int v47 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
            int v48 = v44;
            int v49 = v40;
LABEL_68:
            swift::Demangle::Node::addChild(v48, v49, v47);
LABEL_69:
            if (!v44) {
              return 0;
            }
            swift::Demangle::Node::addChild(v9, v44, *((swift::Demangle::NodeFactory **)this + 5));
            uint64_t v8 = *((void *)this + 4);
            if (!v8) {
              goto LABEL_42;
            }
LABEL_29:
            unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
            int v26 = *v22;
            switch(v26)
            {
              case 'W':
                *((void *)this + 3) = v22 + 1;
                *((void *)this + 4) = v8 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v28 = (swift::Demangle::Node *)result;
                while (1)
                {
                  uint64_t v30 = *((void *)this + 4);
                  if (v30)
                  {
                    int v31 = (unsigned char *)*((void *)this + 3);
                    if (*v31 == 95) {
                      break;
                    }
                  }
                  long long v29 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
                  swift::Demangle::Node::addChild(v29, v28, *((swift::Demangle::NodeFactory **)this + 5));
                  __n128 result = 0;
                  if (!v28) {
                    return result;
                  }
                }
                *((void *)this + 3) = v31 + 1;
                *((void *)this + 4) = v30 - 1;
                break;
              case 'w':
                *((void *)this + 3) = v22 + 1;
                *((void *)this + 4) = v8 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v32 = (swift::Demangle::Node *)result;
                unsigned int v33 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::Node::addChild(v33, v32, *((swift::Demangle::NodeFactory **)this + 5));
                if (!v28) {
                  return 0;
                }
                break;
              case 'r':
                goto LABEL_103;
              default:
                goto LABEL_42;
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t anonymous namespace'::OldDemangler::demangleMetatypeRepresentation(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 116)
  {
    int v4 = "@thin";
    goto LABEL_9;
  }
  if (v3 == 111)
  {
    int v4 = "@objc_metatype";
    goto LABEL_9;
  }
  if (v3 != 84) {
    return 0;
  }
  int v4 = "@thick";
LABEL_9:
  *((void *)this + 3) = v2 + 1;
  *((void *)this + 4) = v1 - 1;
  return swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 146, v4);
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleProtocolList(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 190);
  int v5 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 235);
  swift::Demangle::Node::addChild(Node, v5, *((swift::Demangle::NodeFactory **)this + 5));
  unsigned int v6 = a2 + 1;
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
LABEL_2:
    uint64_t v8 = (unsigned char *)*((void *)this + 3);
    if (*v8 != 95) {
      goto LABEL_3;
    }
    *((void *)this + 3) = v8 + 1;
    *((void *)this + 4) = v7 - 1;
  }
  else
  {
LABEL_3:
    while (1)
    {
      if (!v9) {
        return 0;
      }
      uint64_t v10 = v9;
      int v11 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
      swift::Demangle::Node::addChild(v11, v10, *((swift::Demangle::NodeFactory **)this + 5));
      if (!v11) {
        return 0;
      }
      swift::Demangle::Node::addChild(v5, v11, *((swift::Demangle::NodeFactory **)this + 5));
      uint64_t v7 = *((void *)this + 4);
      if (v7) {
        goto LABEL_2;
      }
    }
  }
  return Node;
}

uint64_t anonymous namespace'::OldDemangler::demangleIndex(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    int v3 = (unsigned __int8 *)*((void *)this + 3);
    int v4 = v3 + 1;
    int v5 = *v3;
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (v5 == 95)
    {
      unint64_t v6 = 0;
LABEL_4:
      *a2 = v6;
      return 1;
    }
    if ((v5 - 48) <= 9)
    {
      uint64_t v8 = (v5 - 48);
      *a2 = v8;
      if (v2 != 1)
      {
        BOOL v9 = v3 + 2;
        uint64_t v10 = v2 - 2;
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 58) < 0xFFFFFFF6) {
            break;
          }
          uint64_t v8 = (v11 - 48) + 10 * v8;
          *a2 = v8;
          ++v4;
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          ++v9;
          if (--v10 == -1) {
            return 0;
          }
        }
        if (v11 == 95)
        {
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          unint64_t v6 = v8 + 1;
          goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleArchetypeType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  int v14 = a2;
  v13[0] = this;
  v13[1] = &v14;
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  int v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 115)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    unint64_t v6 = (void *)*((void *)this + 5);
    uint64_t v7 = v6[1];
    uint64_t v8 = (char *)(v7 + 5);
    if (v7) {
      BOOL v9 = (unint64_t)v8 > v6[2];
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = 2 * v6[4];
      if (v10 <= 6) {
        unint64_t v10 = 6;
      }
      v6[4] = v10;
      unint64_t v11 = v10 + 8;
      BOOL v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      *BOOL v12 = v6[3];
      uint64_t v8 = (char *)v12 + 13;
      uint64_t v7 = (uint64_t)(v12 + 1);
      v6[2] = (char *)v12 + v11;
      void v6[3] = v12;
    }
    v6[1] = v8;
    *(unsigned char *)(v7 + 4) = 116;
    *(_DWORD *)uint64_t v7 = 1718187859;
    __n128 result = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 5);
  }
  if (v4 != 83)
  {
    if (v4 == 81)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (!result) {
        return result;
      }
    }
    return 0;
  }
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if (result) {
  return result;
  }
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleDependentType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  if (!*((void *)this + 4)) {
    return 0;
  }
  int v3 = **((unsigned __int8 **)this + 3);
  if (v3 == 95 || v3 == 100 || (v3 - 48) < 0xA)
  {
  }
  int v5 = a2 + 1;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (swift::Demangle::Node *)v6;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::Node::addChild(Node, v7, *((swift::Demangle::NodeFactory **)this + 5));
  if (!Node) {
    return 0;
  }
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::getDependentGenericParamType(_anonymous_namespace_::OldDemangler *this, swift::Demangle *a2, unsigned int a3)
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  swift::Demangle::genericParameterName((swift::Demangle *)a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v13, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 38);
  BOOL v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 102, v4);
  swift::Demangle::Node::addChild(Node, v9, *((swift::Demangle::NodeFactory **)this + 5));
  unint64_t v10 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 102, v5);
  swift::Demangle::Node::addChild(Node, v10, *((swift::Demangle::NodeFactory **)this + 5));
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeSimple(swift::Demangle::NodeFactory **this, int a2)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
    swift::Demangle::Node::addChild(Node, v5, this[5]);
  }
  return result;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeCompound(swift::Demangle::NodeFactory **this, int a2)
{
  if (v4)
  {
    int v5 = a2 + 1;
    while (1)
    {
      uint64_t v7 = this[4];
      if (v7)
      {
        uint64_t v8 = this[3];
        if (*(unsigned char *)v8 == 95) {
          break;
        }
      }
      unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
      swift::Demangle::Node::addChild(Node, v4, this[5]);
      if (!v4) {
        return v4;
      }
    }
    this[3] = (swift::Demangle::NodeFactory *)((char *)v8 + 1);
    this[4] = (swift::Demangle::NodeFactory *)((char *)v7 - 1);
  }
  return v4;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleSubstitutionIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  int v3 = (unsigned char *)*((void *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      uint64_t v4 = (void *)*((void *)this + 5);
      int v5 = (unsigned char *)v4[1];
      uint64_t v6 = v5 + 15;
      if (v5) {
        BOOL v7 = (unint64_t)v6 > v4[2];
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        unint64_t v8 = 2 * v4[4];
        if (v8 <= 0x10) {
          unint64_t v8 = 16;
        }
        v4[4] = v8;
        unint64_t v9 = v8 + 8;
        unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        int v5 = v10 + 1;
        void *v10 = v4[3];
        uint64_t v6 = (char *)v10 + 23;
        v4[2] = (char *)v10 + v9;
        v4[3] = v10;
      }
      v4[1] = v6;
      qmemcpy(v5, "__C_Synthesized", 15);
      unint64_t v11 = v4;
      uint64_t v12 = 15;
      goto LABEL_27;
    case 'P':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafePointer";
      goto LABEL_41;
    case 'Q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "ImplicitlyUnwrappedOptional";
      __int16 v14 = 61;
      size_t v15 = 27;
      goto LABEL_49;
    case 'R':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeBufferPointer";
      __int16 v14 = 219;
      size_t v15 = 19;
      goto LABEL_49;
    case 'S':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "String";
      goto LABEL_43;
    case 'V':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeRawPointer";
      __int16 v14 = 219;
      size_t v15 = 16;
      goto LABEL_49;
    case 'a':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Array";
      goto LABEL_38;
    case 'b':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Bool";
      goto LABEL_47;
    case 'c':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnicodeScalar";
LABEL_41:
      __int16 v14 = 219;
      size_t v15 = 13;
      goto LABEL_49;
    case 'd':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Double";
LABEL_43:
      __int16 v14 = 219;
      size_t v15 = 6;
      goto LABEL_49;
    case 'f':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Float";
LABEL_38:
      __int16 v14 = 219;
      size_t v15 = 5;
      goto LABEL_49;
    case 'i':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Int";
      __int16 v14 = 219;
      size_t v15 = 3;
      goto LABEL_49;
    case 'o':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      unsigned int v16 = (void *)*((void *)this + 5);
      int v5 = (unsigned char *)v16[1];
      uint64_t v17 = v5 + 3;
      if (v5) {
        BOOL v18 = (unint64_t)v17 > v16[2];
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        unint64_t v19 = 2 * v16[4];
        if (v19 <= 4) {
          unint64_t v19 = 4;
        }
        v16[4] = v19;
        unint64_t v20 = v19 + 8;
        size_t v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        int v5 = v21 + 1;
        *size_t v21 = v16[3];
        uint64_t v17 = (char *)v21 + 11;
        v16[2] = (char *)v21 + v20;
        void v16[3] = v21;
      }
      v16[1] = v17;
      v5[2] = 67;
      *(_WORD *)int v5 = 24415;
      unint64_t v11 = v16;
      uint64_t v12 = 3;
LABEL_27:
      return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'p':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutablePointer";
      __int16 v14 = 219;
      size_t v15 = 20;
      goto LABEL_49;
    case 'q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Optional";
      __int16 v14 = 61;
      size_t v15 = 8;
      goto LABEL_49;
    case 'r':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutableBufferPointer";
      __int16 v14 = 219;
      size_t v15 = 26;
      goto LABEL_49;
    case 'u':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UInt";
LABEL_47:
      __int16 v14 = 219;
      size_t v15 = 4;
      goto LABEL_49;
    case 'v':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutableRawPointer";
      __int16 v14 = 219;
      size_t v15 = 23;
LABEL_49:
    default:
      unint64_t v24 = 0;
      __n128 result = 0;
      if (!v23) {
        return result;
      }
      if (v24 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) {
        return 0;
      }
      __n128 result = *(swift::Demangle::Node **)(*(void *)this + 8 * v24);
      break;
  }
  return result;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleTuple(uint64_t a1, int a2, int a3)
{
  unint64_t Node = swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 223);
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = (swift::Demangle::Node *)Node;
  unint64_t v10 = *(unsigned char **)(a1 + 24);
  if (*v10 != 95)
  {
    unsigned int v13 = a3 + 1;
    while (1)
    {
      unint64_t v11 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 224);
      if (!*(void *)(a1 + 32)) {
        break;
      }
      int v14 = **(unsigned __int8 **)(a1 + 24);
      if (v14 != 111) {
        goto LABEL_12;
      }
LABEL_13:
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | 0x100E1;
      if (!v15) {
        return 0;
      }
      swift::Demangle::Node::addChild(v11, v15, *(swift::Demangle::NodeFactory **)(a1 + 40));
LABEL_15:
      if (!v16) {
        return 0;
      }
      uint64_t v17 = (swift::Demangle::Node *)v16;
      BOOL v18 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 232);
      swift::Demangle::Node::addChild(v18, v17, *(swift::Demangle::NodeFactory **)(a1 + 40));
      if (!v18) {
        return 0;
      }
      swift::Demangle::Node::addChild(v11, v18, *(swift::Demangle::NodeFactory **)(a1 + 40));
      swift::Demangle::Node::addChild(v9, v11, *(swift::Demangle::NodeFactory **)(a1 + 40));
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        return 0;
      }
      unint64_t v10 = *(unsigned char **)(a1 + 24);
      if (*v10 == 95) {
        goto LABEL_4;
      }
    }
    int v14 = 46;
LABEL_12:
    if ((v14 - 48) > 9) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  unint64_t v11 = 0;
LABEL_4:
  *(void *)(a1 + 24) = v10 + 1;
  *(void *)(a1 + 32) = v8 - 1;
  if (a2 == 1 && v11)
  {
    swift::Demangle::Node::reverseChildren((int8x16_t *)v11, 0);
    uint64_t v12 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 276);
    swift::Demangle::Node::addChild(v11, v12, *(swift::Demangle::NodeFactory **)(a1 + 40));
    swift::Demangle::Node::reverseChildren((int8x16_t *)v11, 0);
  }
  return v9;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleImplFunctionType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 115);
  uint64_t v5 = *((void *)this + 4);
  if (v5 && (uint64_t v6 = (unsigned char *)*((void *)this + 3), *v6 == 116))
  {
    *((void *)this + 3) = v6 + 1;
    *((void *)this + 4) = v5 - 1;
    BOOL v7 = "@convention(thin)";
    size_t v8 = 17;
  }
  else
  {
    if (!v10) {
      return 0;
    }
    BOOL v7 = v9;
    size_t v8 = v10;
  }
  unint64_t v11 = (void *)*((void *)this + 5);
  uint64_t v12 = (char *)v11[1];
  unsigned int v13 = &v12[v8];
  if (v12) {
    BOOL v14 = (unint64_t)v13 > v11[2];
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    unint64_t v15 = 2 * v11[4];
    if (v15 <= v8 + 1) {
      unint64_t v15 = v8 + 1;
    }
    v11[4] = v15;
    unint64_t v16 = v15 + 8;
    uint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    BOOL v18 = (char *)v17 + v16;
    void *v17 = v11[3];
    uint64_t v12 = (char *)(v17 + 1);
    v11[2] = v18;
    void v11[3] = v17;
    unsigned int v13 = (char *)v17 + v8 + 8;
  }
  v11[1] = v13;
  memmove(v12, v7, v8);
  unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v11, 106, (uint64_t)v12, v8);
  swift::Demangle::Node::addChild(Node, NodeWithAllocatedText, *((swift::Demangle::NodeFactory **)this + 5));
  uint64_t v20 = *((void *)this + 4);
  if (!v20) {
    return 0;
  }
  size_t v21 = (unsigned char *)*((void *)this + 3);
  if (*v21 == 67)
  {
    *((void *)this + 3) = v21 + 1;
    *((void *)this + 4) = v20 - 1;
    __n128 result = 0;
    if (v20 != 1)
    {
      int v23 = "block";
      size_t v24 = 5;
      switch(v21[1])
      {
        case 'O':
          int v23 = "objc_method";
          size_t v24 = 11;
          goto LABEL_22;
        case 'b':
          goto LABEL_22;
        case 'c':
          int v23 = "c";
          size_t v24 = 1;
          goto LABEL_22;
        case 'm':
          int v23 = "method";
          size_t v24 = 6;
          goto LABEL_22;
        case 'w':
          int v23 = "witness_method";
          size_t v24 = 14;
LABEL_22:
          *((void *)this + 3) = v21 + 2;
          *((void *)this + 4) = v20 - 2;
          int v25 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 113);
          int v26 = (void *)*((void *)this + 5);
          uint64_t v27 = (char *)v26[1];
          if (!v27 || (uint64_t v28 = &v27[v24], (unint64_t)&v27[v24] > v26[2]))
          {
            unint64_t v29 = 2 * v26[4];
            if (v29 <= v24 + 1) {
              unint64_t v29 = v24 + 1;
            }
            v26[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            uint64_t v32 = (char *)v31 + v30;
            *int v31 = v26[3];
            uint64_t v27 = (char *)(v31 + 1);
            v26[2] = v32;
            v26[3] = v31;
            uint64_t v28 = (char *)v31 + v24 + 8;
          }
          v26[1] = v28;
          memmove(v27, v23, v24);
          unsigned int v33 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v26, 114, (uint64_t)v27, v24);
          swift::Demangle::Node::addChild(v25, v33, *((swift::Demangle::NodeFactory **)this + 5));
          swift::Demangle::Node::addChild(Node, v25, *((swift::Demangle::NodeFactory **)this + 5));
          uint64_t v20 = *((void *)this + 4);
          if (v20) {
            goto LABEL_28;
          }
          return 0;
        default:
          return result;
      }
    }
    return result;
  }
LABEL_28:
  __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
  int v35 = *v34;
  if (v35 == 104)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    int v36 = (void *)*((void *)this + 5);
    uint64_t v37 = v36[1];
    if (!v37 || (unsigned int v38 = (char *)(v37 + 9), (unint64_t)(v37 + 9) > v36[2]))
    {
      unint64_t v39 = 2 * v36[4];
      if (v39 <= 0xA) {
        unint64_t v39 = 10;
      }
      v36[4] = v39;
      unint64_t v40 = v39 + 8;
      int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      uint64_t v37 = (uint64_t)(v41 + 1);
      *int v41 = v36[3];
      unsigned int v38 = (char *)v41 + 17;
      v36[2] = (char *)v41 + v40;
      v36[3] = v41;
    }
    v36[1] = v38;
    *(void *)uint64_t v37 = *(void *)"@Sendable";
    *(unsigned char *)(v37 + 8) = 101;
    unsigned int v42 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v36, 112, v37, 9);
    swift::Demangle::Node::addChild(Node, v42, *((swift::Demangle::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if (v35 == 72)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    __int16 v43 = (void *)*((void *)this + 5);
    uint64_t v44 = v43[1];
    if (!v44 || (uint64_t v45 = (char *)(v44 + 6), (unint64_t)(v44 + 6) > v43[2]))
    {
      unint64_t v46 = 2 * v43[4];
      if (v46 <= 7) {
        unint64_t v46 = 7;
      }
      v43[4] = v46;
      unint64_t v47 = v46 + 8;
      int v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
      uint64_t v44 = (uint64_t)(v48 + 1);
      *int v48 = v43[3];
      uint64_t v45 = (char *)v48 + 14;
      v43[2] = (char *)v48 + v47;
      v43[3] = v48;
    }
    v43[1] = v45;
    *(_WORD *)(v44 + 4) = 25454;
    *(_DWORD *)uint64_t v44 = 2037604672;
    int v49 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v43, 112, v44, 6);
    swift::Demangle::Node::addChild(Node, v49, *((swift::Demangle::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if ((v35 | 0x20) == 0x67)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    if (!result) {
      return result;
    }
    swift::Demangle::Node::addChild(Node, result, *((swift::Demangle::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if (v35 != 95) {
    return 0;
  }
  uint64_t v50 = v20 - 1;
  *((void *)this + 3) = v34 + 1;
  *((void *)this + 4) = v50;
  int v51 = a2 + 2;
  if (!v50) {
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v52 = (unsigned char *)*((void *)this + 3);
  if (*v52 == 95)
  {
    uint64_t v53 = v50 - 1;
    *((void *)this + 3) = v52 + 1;
    *((void *)this + 4) = v53;
    if (!v53) {
      goto LABEL_58;
    }
LABEL_57:
    __int16 v54 = (unsigned char *)*((void *)this + 3);
    if (*v54 == 95)
    {
      *((void *)this + 3) = v54 + 1;
      *((void *)this + 4) = v53 - 1;
      return Node;
    }
    else
    {
LABEL_58:
      while (1)
      {
        if (!result) {
          break;
        }
        swift::Demangle::Node::addChild(Node, result, *((swift::Demangle::NodeFactory **)this + 5));
        uint64_t v53 = *((void *)this + 4);
        if (v53) {
          goto LABEL_57;
        }
      }
    }
  }
  else
  {
LABEL_51:
    while (1)
    {
      if (!result) {
        break;
      }
      swift::Demangle::Node::addChild(Node, result, *((swift::Demangle::NodeFactory **)this + 5));
      uint64_t v50 = *((void *)this + 4);
      if (v50) {
        goto LABEL_50;
      }
    }
  }
  return result;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleContext(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = (unsigned char *)*((void *)this + 3);
    switch(*v5)
    {
      case 'E':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v7 = a2 + 1;
        if (!v8) {
          return 0;
        }
        unint64_t v9 = (swift::Demangle::Node *)v8;
        if (!v10) {
          return 0;
        }
        unint64_t v11 = (swift::Demangle::Node *)v10;
        swift::Demangle::Node::addChild(Node, v9, *((swift::Demangle::NodeFactory **)this + 5));
        uint64_t v12 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
        unsigned int v13 = Node;
        BOOL v14 = v11;
        goto LABEL_24;
      case 'G':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        if (!v20) {
          return 0;
        }
      case 'S':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
      case 'e':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v21 = a2 + 1;
        if (!v22) {
          return 0;
        }
        int v23 = (swift::Demangle::Node *)v22;
        if (!v24) {
          return 0;
        }
        int v25 = v24;
        if (!v26) {
          return 0;
        }
        uint64_t v27 = (swift::Demangle::Node *)v26;
        swift::Demangle::Node::addChild(Node, v23, *((swift::Demangle::NodeFactory **)this + 5));
        swift::Demangle::Node::addChild(Node, v27, *((swift::Demangle::NodeFactory **)this + 5));
        uint64_t v12 = (swift::Demangle::NodeFactory *)*((void *)this + 5);
        unsigned int v13 = Node;
        BOOL v14 = (swift::Demangle::Node *)v25;
LABEL_24:
        swift::Demangle::Node::addChild(v13, v14, v12);
        return Node;
      case 's':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        uint64_t v28 = (void *)*((void *)this + 5);
        uint64_t v29 = v28[1];
        unint64_t v30 = (char *)(v29 + 5);
        if (v29) {
          BOOL v31 = (unint64_t)v30 > v28[2];
        }
        else {
          BOOL v31 = 1;
        }
        if (v31)
        {
          unint64_t v32 = 2 * v28[4];
          if (v32 <= 6) {
            unint64_t v32 = 6;
          }
          v28[4] = v32;
          unint64_t v33 = v32 + 8;
          __int16 v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          uint64_t v29 = (uint64_t)(v34 + 1);
          *__int16 v34 = v28[3];
          unint64_t v30 = (char *)v34 + 13;
          v28[2] = (char *)v34 + v33;
          v28[3] = v34;
        }
        v28[1] = v30;
        *(unsigned char *)(v29 + 4) = 116;
        *(_DWORD *)uint64_t v29 = 1718187859;
        return (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v28, 153, v29, 5);
      default:
        unsigned int v15 = (char)*v5 - 67;
        BOOL v31 = v15 > 0x33;
        uint64_t v16 = (1 << v15) & 0x9000000883049;
        unsigned int v17 = a2 + 1;
        if (v31 || v16 == 0)
        {
        }
        else
        {
        }
    }
  }
  return 0;
}

unint64_t anonymous namespace'::OldDemangler::demangleDeclName(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
    int v4 = *v3;
    if (v4 == 80)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (v15)
      {
        unint64_t v9 = (swift::Demangle::Node *)v15;
        if (v16)
        {
          unint64_t v11 = (swift::Demangle::Node *)v16;
          uint64_t v12 = (void *)*((void *)this + 5);
          __int16 v13 = 176;
          goto LABEL_16;
        }
      }
      return 0;
    }
    if (v4 == 76)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (v2 != 1)
      {
        int v5 = v3[1];
        uint64_t v6 = v3 + 2;
        *((void *)this + 3) = v3 + 2;
        *((void *)this + 4) = v2 - 2;
        if (v5 == 95)
        {
          uint64_t v7 = 0;
        }
        else
        {
          unsigned int v17 = 0;
          if (v2 == 2 || (v5 - 58) < 0xFFFFFFF6) {
            return (unint64_t)v17;
          }
          uint64_t v18 = (v5 - 48);
          unint64_t v19 = v3 + 3;
          uint64_t v20 = v2 - 3;
          while (1)
          {
            int v21 = *v6;
            if ((v21 - 58) < 0xFFFFFFF6) {
              break;
            }
            uint64_t v18 = (v21 - 48) + 10 * v18;
            ++v6;
            *((void *)this + 3) = v19;
            *((void *)this + 4) = v20;
            ++v19;
            if (--v20 == -1) {
              return 0;
            }
          }
          if (v21 != 95) {
            return 0;
          }
          *((void *)this + 3) = v19;
          *((void *)this + 4) = v20;
          uint64_t v7 = v18 + 1;
        }
        unint64_t Node = swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 161, v7);
        if (Node)
        {
          unint64_t v9 = (swift::Demangle::Node *)Node;
          if (v10)
          {
            unint64_t v11 = (swift::Demangle::Node *)v10;
            uint64_t v12 = (void *)*((void *)this + 5);
            __int16 v13 = 137;
LABEL_16:
            unsigned int v17 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v12, v13);
            swift::Demangle::Node::addChild(v17, v9, *((swift::Demangle::NodeFactory **)this + 5));
            swift::Demangle::Node::addChild(v17, v11, *((swift::Demangle::NodeFactory **)this + 5));
            return (unint64_t)v17;
          }
        }
      }
      return 0;
    }
  }
}

unint64_t anonymous namespace'::OldDemangler::demangleModule(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    goto LABEL_15;
  }
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 83)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (!v18) {
      return 0;
    }
    if (*((_WORD *)v18 + 8) == 153) {
      return (unint64_t)v18;
    }
    return 0;
  }
  if (v4 != 115)
  {
LABEL_15:
    unint64_t v14 = v13;
    if (v13)
    {
      unint64_t v16 = (unint64_t *)*((void *)this + 1);
      unint64_t v15 = *((void *)this + 2);
      if ((unint64_t)v16 >= v15)
      {
        unint64_t v19 = *(unint64_t **)this;
        uint64_t v20 = (uint64_t)v16 - *(void *)this;
        uint64_t v21 = v20 >> 3;
        unint64_t v22 = (v20 >> 3) + 1;
        if (v22 >> 61) {
          abort();
        }
        uint64_t v23 = v15 - (void)v19;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v25 = operator new(8 * v24);
        }
        else
        {
          int v25 = 0;
        }
        uint64_t v26 = (unint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *uint64_t v26 = v14;
        unsigned int v17 = v26 + 1;
        if (v16 != v19)
        {
          unint64_t v28 = (char *)v16 - (char *)v19 - 8;
          if (v28 < 0x58) {
            goto LABEL_49;
          }
          if ((unint64_t)((char *)v16 - v25 - v20) < 0x20) {
            goto LABEL_49;
          }
          uint64_t v29 = (v28 >> 3) + 1;
          uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v31 = &v16[v30 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v26 = (unint64_t *)((char *)v26 - v30);
          unint64_t v32 = &v25[8 * v21 - 16];
          unint64_t v33 = v16 - 2;
          uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *unint64_t v32 = v35;
            v32 -= 2;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          unint64_t v16 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            do
            {
              unint64_t v36 = *--v16;
              *--uint64_t v26 = v36;
            }
            while (v16 != v19);
          }
          unint64_t v16 = *(unint64_t **)this;
        }
        *(void *)this = v26;
        *((void *)this + 1) = v17;
        *((void *)this + 2) = v27;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *unint64_t v16 = v13;
        unsigned int v17 = v16 + 1;
      }
      *((void *)this + 1) = v17;
    }
    return v14;
  }
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  int v5 = (void *)*((void *)this + 5);
  uint64_t v6 = v5[1];
  uint64_t v7 = (char *)(v6 + 5);
  if (v6) {
    BOOL v8 = (unint64_t)v7 > v5[2];
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = 2 * v5[4];
    if (v9 <= 6) {
      unint64_t v9 = 6;
    }
    v5[4] = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    uint64_t v6 = (uint64_t)(v11 + 1);
    *unint64_t v11 = v5[3];
    uint64_t v7 = (char *)v11 + 13;
    v5[2] = (char *)v11 + v10;
    v5[3] = v11;
  }
  v5[1] = v7;
  *(unsigned char *)(v6 + 4) = 116;
  *(_DWORD *)uint64_t v6 = 1718187859;

  return swift::Demangle::NodeFactory::createNodeWithAllocatedText(v5, 153, v6, 5);
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleEntity(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned char *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 90)
  {
    if (v7 != 70) {
      goto LABEL_8;
    }
LABEL_16:
    int v9 = 0;
    __int16 v10 = 76;
    goto LABEL_19;
  }
  ++v6;
  --v5;
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v5;
  if (!v5) {
    goto LABEL_12;
  }
  if (*v6 == 70) {
    goto LABEL_16;
  }
LABEL_8:
  int v8 = *v6;
  switch(v8)
  {
    case 'I':
      __int16 v10 = 125;
      int v9 = 1;
      goto LABEL_19;
    case 'i':
      int v9 = 0;
      __int16 v10 = 220;
LABEL_19:
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unsigned int v11 = a2 + 1;
      if (v12)
      {
        unint64_t v13 = (swift::Demangle::Node *)v12;
        uint64_t v14 = *((void *)this + 4);
        if (v14)
        {
          unint64_t v15 = (unsigned __int8 *)*((void *)this + 3);
          int v16 = *v15;
          int v17 = 0;
          __int16 v18 = 31;
          switch(*v15)
          {
            case 'C':
              __int16 v18 = 0;
              int v17 = 1;
              goto LABEL_46;
            case 'D':
              goto LABEL_46;
            case 'E':
              int v17 = 0;
              __int16 v18 = 104;
              goto LABEL_46;
            case 'G':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v22) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v22;
              __int16 v24 = 100;
              goto LABEL_74;
            case 'M':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v25) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v25;
              __int16 v24 = 152;
              goto LABEL_74;
            case 'U':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v26) {
                return 0;
              }
              uint64_t v20 = (swift::Demangle::Node *)v26;
              __int16 v10 = 70;
              int v17 = 1;
              goto LABEL_47;
            case 'W':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v27) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v27;
              __int16 v24 = 51;
              goto LABEL_74;
            case 'a':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0;
              if (v14 != 1)
              {
                __int16 v24 = 169;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_73;
                  case 'o':
                    __int16 v24 = 155;
                    goto LABEL_73;
                  case 'p':
                    __int16 v24 = 157;
                    goto LABEL_73;
                  case 'u':
                    __int16 v24 = 251;
                    goto LABEL_73;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'c':
              __int16 v18 = 29;
              int v17 = 1;
              goto LABEL_46;
            case 'd':
              int v17 = 0;
              __int16 v18 = 50;
              goto LABEL_46;
            case 'e':
              int v17 = 0;
              __int16 v18 = 103;
              goto LABEL_46;
            case 'g':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v35) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v35;
              __int16 v24 = 98;
              goto LABEL_74;
            case 'l':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0;
              if (v14 != 1)
              {
                __int16 v24 = 168;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_73;
                  case 'o':
                    __int16 v24 = 154;
                    goto LABEL_73;
                  case 'p':
                    __int16 v24 = 156;
                    goto LABEL_73;
                  case 'u':
                    __int16 v24 = 250;
LABEL_73:
                    *((void *)this + 3) = v15 + 2;
                    *((void *)this + 4) = v14 - 2;
                    if (v23) {
                      goto LABEL_74;
                    }
                    return 0;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'm':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v36) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v36;
              __int16 v24 = 141;
              goto LABEL_74;
            case 'r':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v37) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v37;
              __int16 v24 = 204;
              goto LABEL_74;
            case 's':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v38) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v38;
              __int16 v24 = 215;
              goto LABEL_74;
            case 'u':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v39) {
                return 0;
              }
              uint64_t v20 = (swift::Demangle::Node *)v39;
              __int16 v10 = 117;
              int v17 = 1;
              goto LABEL_47;
            case 'w':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v40) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v40;
              __int16 v24 = 257;
LABEL_74:
              unint64_t v28 = (swift::Demangle::NodeFactory **)((char *)this + 40);
              unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), v24);
              int v41 = *((unsigned __int16 *)v23 + 8);
              if (v41 != 176)
              {
                if (v41 != 101 || *((void *)v23 + 1) != 9) {
                  goto LABEL_92;
                }
                if (**(void **)v23 != 0x7069726373627573 || *(unsigned char *)(*(void *)v23 + 8) != 116) {
                  goto LABEL_92;
                }
                uint64_t v23 = 0;
                goto LABEL_109;
              }
              int v43 = *((unsigned __int8 *)v23 + 18);
              uint64_t v44 = v23;
              if (v43 != 2)
              {
                if (v43 != 5 || v23[2] < 2u)
                {
LABEL_92:
                  uint64_t v50 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*v28, 254);
                  swift::Demangle::Node::addChild(v50, v13, *v28);
                  swift::Demangle::Node::addChild(v50, (swift::Demangle::Node *)v23, *v28);
                  char v51 = 0;
                  goto LABEL_93;
                }
                uint64_t v44 = *(_DWORD **)v23;
              }
              uint64_t v45 = (uint64_t **)*((void *)v44 + 1);
              if (v45[1] != (uint64_t *)9) {
                goto LABEL_92;
              }
              unint64_t v46 = *v45;
              uint64_t v47 = *v46;
              int v48 = *((unsigned __int8 *)v46 + 8);
              if (v47 != 0x7069726373627573 || v48 != 116) {
                goto LABEL_92;
              }
              if (v43 == 2) {
                goto LABEL_106;
              }
              if (v23[2])
              {
                uint64_t v23 = *(_DWORD **)v23;
LABEL_106:
                unint64_t v57 = *(swift::Demangle::Node **)v23;
              }
              else
              {
                unint64_t v57 = 0;
              }
              uint64_t v23 = (_DWORD *)swift::Demangle::NodeFactory::createNode(*v28, 176);
              swift::Demangle::Node::addChild((swift::Demangle::Node *)v23, v57, *v28);
LABEL_109:
              uint64_t v50 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*v28, 220);
              swift::Demangle::Node::addChild(v50, v13, *v28);
              char v51 = 1;
LABEL_93:
              if (!v52) {
                return 0;
              }
              uint64_t v53 = (swift::Demangle::Node *)v52;
              __int16 v54 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*v28, 232);
              swift::Demangle::Node::addChild(v54, v53, *v28);
              if (!v54) {
                return 0;
              }
              swift::Demangle::Node::addChild(v50, v54, *v28);
              char v55 = v51 ^ 1;
              if (!v23) {
                char v55 = 1;
              }
              if ((v55 & 1) == 0) {
                swift::Demangle::Node::addChild(v50, (swift::Demangle::Node *)v23, *v28);
              }
              unint64_t v32 = *v28;
              unint64_t v33 = Node;
              uint64_t v34 = v50;
              goto LABEL_100;
            default:
              if (!v9) {
                goto LABEL_24;
              }
              if (v16 == 105)
              {
                int v17 = 0;
                __int16 v18 = 125;
LABEL_46:
                uint64_t v20 = 0;
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                __int16 v10 = v18;
                goto LABEL_47;
              }
              if (v16 == 65)
              {
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                if (v21)
                {
                  uint64_t v20 = (swift::Demangle::Node *)v21;
                  int v17 = 0;
                  __int16 v10 = 33;
                  goto LABEL_47;
                }
              }
              return 0;
          }
        }
        if ((v9 & 1) == 0)
        {
LABEL_24:
          if (v19)
          {
            uint64_t v20 = (swift::Demangle::Node *)v19;
            int v17 = 1;
LABEL_47:
            unint64_t v28 = (swift::Demangle::NodeFactory **)((char *)this + 40);
            unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), v10);
            swift::Demangle::Node::addChild(Node, v13, *((swift::Demangle::NodeFactory **)this + 5));
            if (v20) {
              swift::Demangle::Node::addChild(Node, v20, *v28);
            }
            if (!v17) {
              goto LABEL_101;
            }
            if (v29)
            {
              uint64_t v30 = (swift::Demangle::Node *)v29;
              BOOL v31 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*v28, 232);
              swift::Demangle::Node::addChild(v31, v30, *v28);
              if (v31)
              {
                unint64_t v32 = *v28;
                unint64_t v33 = Node;
                uint64_t v34 = v31;
LABEL_100:
                swift::Demangle::Node::addChild(v33, v34, v32);
LABEL_101:
                if (v7 == 90)
                {
                  uint64_t v56 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*v28, 218);
                  swift::Demangle::Node::addChild(v56, Node, *v28);
                  return v56;
                }
                return Node;
              }
            }
          }
        }
      }
      return 0;
    case 'v':
      int v9 = 0;
      __int16 v10 = 254;
      goto LABEL_19;
  }
LABEL_12:
}

unint64_t anonymous namespace'::OldDemangler::demangleIdentifier(void *a1, int a2)
{
  uint64_t v2 = a1[4];
  if (!v2) {
    return 0;
  }
  int v4 = (unsigned __int8 *)a1[3];
  int v5 = *v4;
  if (v5 == 88)
  {
    ++v4;
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    --v2;
    a1[3] = v4;
    a1[4] = v2;
    if (!v2)
    {
LABEL_14:
      char v9 = 0;
      if (BYTE2(a2)) {
        __int16 v8 = a2;
      }
      else {
        __int16 v8 = 101;
      }
      if (!v2) {
        goto LABEL_39;
      }
      goto LABEL_22;
    }
  }
  else
  {
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  if (*v4 != 111) {
    goto LABEL_14;
  }
  unint64_t NodeWithAllocatedText = 0;
  a1[3] = v4 + 1;
  a1[4] = v2 - 1;
  if (!BYTE2(a2) && v2 != 1)
  {
    int v7 = (char)v4[1];
    v4 += 2;
    v2 -= 2;
    a1[3] = v4;
    a1[4] = v2;
    switch(v7)
    {
      case 'p':
        __int16 v8 = 175;
        break;
      case 'i':
        __int16 v8 = 124;
        break;
      case 'P':
        __int16 v8 = 173;
        break;
      default:
        goto LABEL_39;
    }
    char v9 = 1;
    if (!v2) {
      goto LABEL_39;
    }
LABEL_22:
    p_p = (std::string *)(v4 + 1);
    int v10 = *v4;
    unint64_t v12 = v2 - 1;
    a1[3] = v4 + 1;
    a1[4] = v12;
    if ((v10 - 48) > 9) {
      goto LABEL_39;
    }
    unint64_t size = (v10 - 48);
    if (v12)
    {
      uint64_t v14 = v4 + 2;
      do
      {
        int v15 = p_p->__r_.__value_.__s.__data_[0];
        if ((v15 - 58) < 0xFFFFFFF6) {
          break;
        }
        unint64_t size = (v15 - 48) + 10 * size;
        p_p = (std::string *)((char *)p_p + 1);
        --v12;
        a1[3] = v14;
        a1[4] = v12;
        ++v14;
      }
      while (v12);
    }
    if (v12 < size) {
      goto LABEL_39;
    }
    a1[3] = (char *)p_p + size;
    a1[4] = v12 - size;
    if (v5 != 88)
    {
LABEL_36:
      if (size)
      {
        memset(&v25, 0, sizeof(v25));
        if (v9)
        {
          std::string::reserve(&v25, size);
          do
          {
            uint64_t v17 = p_p->__r_.__value_.__s.__data_[0];
            if ((v17 & 0x8000000000000000) == 0)
            {
              if ((v17 - 123) < 0xE6u
                || (uint64_t v17 = (v17 - 97), ((0x17007A2uLL >> v17) & 1) != 0))
              {
                unint64_t NodeWithAllocatedText = 0;
                if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_40;
                }
                goto LABEL_68;
              }
            }
            std::string::push_back(&v25, v17);
            p_p = (std::string *)((char *)p_p + 1);
            --size;
          }
          while (size);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &v25;
          }
          else {
            p_p = (std::string *)v25.__r_.__value_.__r.__words[0];
          }
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          }
          else {
            unint64_t size = v25.__r_.__value_.__l.__size_;
          }
          __int16 v18 = (void *)a1[5];
          if (!size)
          {
            unint64_t v19 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          __int16 v18 = (void *)a1[5];
        }
        unint64_t v19 = (char *)v18[1];
        uint64_t v20 = &v19[size];
        if (v19) {
          BOOL v21 = (unint64_t)v20 > v18[2];
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          unint64_t v22 = 2 * v18[4];
          if (v22 <= size + 1) {
            unint64_t v22 = size + 1;
          }
          v18[4] = v22;
          unint64_t v23 = v22 + 8;
          __int16 v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          *__int16 v24 = v18[3];
          unint64_t v19 = (char *)(v24 + 1);
          v18[2] = (char *)v24 + v23;
          void v18[3] = v24;
          uint64_t v20 = (char *)v24 + size + 8;
        }
        v18[1] = v20;
        memmove(v19, p_p, size);
LABEL_67:
        unint64_t NodeWithAllocatedText = swift::Demangle::NodeFactory::createNodeWithAllocatedText(v18, v8, (uint64_t)v19, size);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
LABEL_68:
        }
          operator delete(v25.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (swift::Punycode::decodePunycodeUTF8((unsigned __int8 *)p_p, size, (uint64_t)&__p))
    {
      if (v28 >= 0) {
        p_p = (std::string *)&__p;
      }
      else {
        p_p = (std::string *)__p;
      }
      if (v28 >= 0) {
        unint64_t size = HIBYTE(v28);
      }
      else {
        unint64_t size = v27;
      }
      goto LABEL_36;
    }
LABEL_39:
    unint64_t NodeWithAllocatedText = 0;
  }
LABEL_40:
  if (SHIBYTE(v28) < 0) {
    operator delete(__p);
  }
  return NodeWithAllocatedText;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleNominalType(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned char *)*((void *)this + 3);
  switch(*v2)
  {
    case 'C':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'O':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'P':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'S':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
    case 'V':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
LABEL_4:
      break;
    default:
      return 0;
  }
  return result;
}

unint64_t anonymous namespace'::OldDemangler::demangleIndexAsNode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 24);
    unint64_t v3 = v2 + 1;
    int v4 = *v2;
    *(void *)(a1 + 24) = v2 + 1;
    *(void *)(a1 + 32) = v1 - 1;
    if (v4 == 95)
    {
      uint64_t v5 = 0;
      return swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
    }
    if ((v4 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      uint64_t v8 = (v4 - 48);
      char v9 = v2 + 2;
      uint64_t v10 = v1 - 2;
      while (1)
      {
        int v11 = *v3;
        if ((v11 - 58) < 0xFFFFFFF6) {
          break;
        }
        uint64_t v8 = (v11 - 48) + 10 * v8;
        ++v3;
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        ++v9;
        if (--v10 == -1) {
          return 0;
        }
      }
      if (v11 == 95)
      {
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        uint64_t v5 = v8 + 1;
        return swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
      }
    }
  }
  return 0;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleBoundGenericArgs(swift::Demangle::NodeFactory **this, swift::Demangle::Node *a2, int a3)
{
  int v4 = a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      return 0;
    }
    int v7 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v8 = *(swift::Demangle::Node **)v7;
  int v9 = *(unsigned __int16 *)(*(void *)v7 + 16);
  if (v9 == 71 || v9 == 76 || v9 == 153) {
    goto LABEL_30;
  }
  if (!v10) {
    return 0;
  }
  int v11 = (swift::Demangle::Node *)v10;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], *((_WORD *)v4 + 8));
  swift::Demangle::Node::addChild(Node, v11, this[5]);
  for (unint64_t i = 1; ; ++i)
  {
    unint64_t v15 = *((unsigned __int8 *)v4 + 18);
    if (v15 == 1)
    {
      if (v15 <= i) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }
    if (v15 != 5) {
      break;
    }
    if (*((unsigned int *)v4 + 2) <= i) {
      goto LABEL_29;
    }
LABEL_20:
    unsigned int v16 = v15 - 1;
    if (v15 == 1) {
      goto LABEL_23;
    }
    if (v15 != 5)
    {
      unint64_t v15 = 2;
LABEL_23:
      if (v15 <= i) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
    if (*((unsigned int *)v4 + 2) <= i)
    {
LABEL_10:
      uint64_t v14 = 0;
      goto LABEL_11;
    }
LABEL_26:
    uint64_t v17 = v4;
    if (v16 >= 2) {
      uint64_t v17 = *(swift::Demangle::Node **)v4;
    }
    uint64_t v14 = (swift::Demangle::Node *)*((void *)v17 + i);
LABEL_11:
    swift::Demangle::Node::addChild(Node, v14, this[5]);
  }
  if (v15 == 2 && i < 2) {
    goto LABEL_20;
  }
LABEL_29:
  int v4 = Node;
LABEL_30:
  unint64_t v18 = swift::Demangle::NodeFactory::createNode(this[5], 235);
  unsigned int v19 = a3 + 1;
  uint64_t v20 = this[4];
  while (1)
  {
    if (v20)
    {
      BOOL v21 = this[3];
      if (*(unsigned char *)v21 == 95) {
        break;
      }
    }
    if (v22)
    {
      unint64_t v23 = (swift::Demangle::Node *)v22;
      __int16 v24 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
      swift::Demangle::Node::addChild(v24, v23, this[5]);
      if (v24)
      {
        swift::Demangle::Node::addChild((swift::Demangle::Node *)v18, v24, this[5]);
        uint64_t v20 = this[4];
        if (v20) {
          continue;
        }
      }
    }
    return 0;
  }
  this[3] = (swift::Demangle::NodeFactory *)((char *)v21 + 1);
  this[4] = (swift::Demangle::NodeFactory *)((char *)v20 - 1);
  int v26 = *(unsigned __int8 *)(v18 + 18);
  if ((v26 - 1) < 2 || v26 == 5 && *(_DWORD *)(v18 + 8))
  {
    unint64_t v27 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
    swift::Demangle::Node::addChild(v27, v4, this[5]);
    int v28 = *((unsigned __int16 *)v4 + 8);
    switch(v28)
    {
      case 24:
        __int16 v29 = 13;
        break;
      case 61:
        __int16 v29 = 14;
        break;
      case 219:
        __int16 v29 = 15;
        break;
      default:
        return 0;
    }
    int v4 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], v29);
    swift::Demangle::Node::addChild(v4, v27, this[5]);
    swift::Demangle::Node::addChild(v4, (swift::Demangle::Node *)v18, this[5]);
  }
  return v4;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleProtocolNameGivenContext(swift::Demangle::NodeFactory **this, swift::Demangle::Node *a2)
{
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (swift::Demangle::Node *)v4;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 180);
  swift::Demangle::Node::addChild(Node, a2, this[5]);
  swift::Demangle::Node::addChild(Node, v5, this[5]);
  uint64_t v8 = (char *)this[1];
  int v7 = this[2];
  if (v8 >= (char *)v7)
  {
    uint64_t v10 = *this;
    uint64_t v11 = v8 - (char *)*this;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v7 - v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v16 = operator new(8 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = (swift::Demangle::Node **)&v16[8 * v12];
    unint64_t v18 = (swift::Demangle::NodeFactory *)&v16[8 * v15];
    swift::Demangle::Node *v17 = Node;
    int v9 = (swift::Demangle::NodeFactory *)(v17 + 1);
    if (v8 != (char *)v10)
    {
      unint64_t v19 = v8 - (char *)v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v8 - v16 - v11) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &v8[-v21];
      uint64_t v17 = (swift::Demangle::Node **)((char *)v17 - v21);
      unint64_t v23 = &v16[8 * v12 - 16];
      __int16 v24 = v8 - 16;
      uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *unint64_t v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      uint64_t v8 = v22;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          unint64_t v27 = (swift::Demangle::Node *)*((void *)v8 - 1);
          v8 -= 8;
          *--uint64_t v17 = v27;
        }
        while (v8 != (char *)v10);
      }
      uint64_t v8 = (char *)*this;
    }
    *this = (swift::Demangle::NodeFactory *)v17;
    this[1] = v9;
    this[2] = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = Node;
    int v9 = (swift::Demangle::NodeFactory *)(v8 + 8);
  }
  this[1] = v9;
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleProtocolName(swift::Demangle::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(Node, v4, this[5]);
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleGenericParamIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 120)
  {
    uint64_t v8 = 0;
    unsigned int v11 = 0;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
  }
  unint64_t v4 = v2 + 1;
  if (v3 == 100)
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v1 != 1)
    {
      int v5 = v2[1];
      unint64_t i = v2 + 2;
      uint64_t v7 = v1 - 2;
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      if (v5 == 95)
      {
        uint64_t v8 = 1;
        if (v1 == 2) {
          return 0;
        }
      }
      else
      {
        if ((v5 - 58) < 0xFFFFFFF6 || v1 == 2) {
          return 0;
        }
        int v19 = v5 - 48;
        uint64_t v20 = v2 + 3;
        uint64_t v7 = v1 - 3;
        for (unint64_t i = v20; ; ++i)
        {
          int v21 = *(i - 1);
          if ((v21 - 58) < 0xFFFFFFF6) {
            break;
          }
          int v19 = v21 + 10 * v19 - 48;
          *((void *)this + 3) = v20;
          *((void *)this + 4) = v7;
          ++v20;
          if (--v7 == -1) {
            return 0;
          }
        }
        if (v21 != 95) {
          return 0;
        }
        *((void *)this + 3) = v20;
        *((void *)this + 4) = v7;
        uint64_t v8 = (v19 + 2);
        if (!v7) {
          return 0;
        }
      }
      int v9 = i + 1;
      int v10 = *i;
      *((void *)this + 3) = i + 1;
      *((void *)this + 4) = v7 - 1;
      if (v10 == 95)
      {
        unsigned int v11 = 0;
      }
      if ((v10 - 58) >= 0xFFFFFFF6 && v7 != 1)
      {
        int v23 = v10 - 48;
        __int16 v24 = i + 2;
        uint64_t v25 = v7 - 2;
        while (1)
        {
          int v26 = *v9;
          if ((v26 - 58) < 0xFFFFFFF6) {
            break;
          }
          int v23 = v26 + 10 * v23 - 48;
          ++v9;
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          ++v24;
          if (--v25 == -1) {
            return 0;
          }
        }
        if (v26 == 95)
        {
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          unsigned int v11 = v23 + 1;
        }
      }
    }
  }
  else
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v3 == 95)
    {
      uint64_t v8 = 0;
      unsigned int v11 = 1;
    }
    if ((v3 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      int v14 = v3 - 48;
      unint64_t v15 = v2 + 2;
      uint64_t v16 = v1 - 2;
      while (1)
      {
        int v17 = *v4;
        if ((v17 - 58) < 0xFFFFFFF6) {
          break;
        }
        int v14 = v17 + 10 * v14 - 48;
        ++v4;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        ++v15;
        if (--v16 == -1) {
          return 0;
        }
      }
      if (v17 == 95)
      {
        uint64_t v8 = 0;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        unsigned int v11 = v14 + 2;
      }
    }
  }
  return 0;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleProtocolNameImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    int v6 = (unsigned __int8 *)*((void *)this + 3);
    int v7 = *v6;
    if (v7 == 115)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      int v10 = (void *)*((void *)this + 5);
      uint64_t v11 = v10[1];
      uint64_t v12 = (char *)(v11 + 5);
      if (v11) {
        BOOL v13 = (unint64_t)v12 > v10[2];
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 2 * v10[4];
        if (v14 <= 6) {
          unint64_t v14 = 6;
        }
        v10[4] = v14;
        unint64_t v15 = v14 + 8;
        uint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        uint64_t v11 = (uint64_t)(v16 + 1);
        *uint64_t v16 = v10[3];
        uint64_t v12 = (char *)v16 + 13;
        v10[2] = (char *)v16 + v15;
        void v10[3] = v16;
      }
      v10[1] = v12;
      *(unsigned char *)(v11 + 4) = 116;
      *(_DWORD *)uint64_t v11 = 1718187859;
      unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v10, 153, v11, 5);
LABEL_23:
    }
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unint64_t NodeWithAllocatedText = v8;
      if (!v8) {
        return NodeWithAllocatedText;
      }
      int v9 = *((unsigned __int16 *)v8 + 8);
      if (v9 == 180) {
        return NodeWithAllocatedText;
      }
      if (v9 != 153) {
        return 0;
      }
      goto LABEL_23;
    }
  }
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleArchetypeType(unsigned int)::{lambda(swift::Demangle::Node *)#1}::operator()(void **a1, swift::Demangle::Node *a2)
{
  uint64_t v3 = (uint64_t)*a1;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (swift::Demangle::Node *)v4;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(v3 + 40), 5);
  swift::Demangle::Node::addChild(Node, a2, *(swift::Demangle::NodeFactory **)(v3 + 40));
  swift::Demangle::Node::addChild(Node, v5, *(swift::Demangle::NodeFactory **)(v3 + 40));
  uint64_t v8 = *(char **)(v3 + 8);
  unint64_t v7 = *(void *)(v3 + 16);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = *(char **)v3;
    uint64_t v11 = (uint64_t)&v8[-*(void *)v3];
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v7 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v17 = (swift::Demangle::Node **)&v16[8 * v12];
    unint64_t v18 = &v16[8 * v15];
    swift::Demangle::Node *v17 = Node;
    int v9 = v17 + 1;
    if (v8 != v10)
    {
      unint64_t v19 = v8 - v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v8 - &v16[v11]) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &v8[-v21];
      int v17 = (swift::Demangle::Node **)((char *)v17 - v21);
      int v23 = &v16[8 * v12 - 16];
      __int16 v24 = v8 - 16;
      uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *int v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      uint64_t v8 = v22;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          unint64_t v27 = (swift::Demangle::Node *)*((void *)v8 - 1);
          v8 -= 8;
          *--int v17 = v27;
        }
        while (v8 != v10);
      }
      uint64_t v8 = *(char **)v3;
    }
    *(void *)uint64_t v3 = v17;
    *(void *)(v3 + 8) = v9;
    *(void *)(v3 + 16) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = Node;
    int v9 = v8 + 8;
  }
  *(void *)(v3 + 8) = v9;
  return Node;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleDependentMemberTypeName(_anonymous_namespace_::OldDemangler *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v5 = *((void *)this + 4);
  if (!v5)
  {
LABEL_7:
    int v10 = 0;
LABEL_8:
    if (!v11) {
      return 0;
    }
    uint64_t v12 = (swift::Demangle::Node *)v11;
    unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 35);
    if (!Node) {
      return 0;
    }
    int v9 = Node;
    swift::Demangle::Node::addChild(Node, v12, *((swift::Demangle::NodeFactory **)this + 5));
    if (v10) {
      swift::Demangle::Node::addChild(v9, v10, *((swift::Demangle::NodeFactory **)this + 5));
    }
    unint64_t v15 = (swift::Demangle::Node **)*((void *)this + 1);
    unint64_t v14 = *((void *)this + 2);
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v19 = *(char **)this;
      uint64_t v20 = (uint64_t)v15 - *(void *)this;
      uint64_t v21 = v20 >> 3;
      unint64_t v22 = (v20 >> 3) + 1;
      if (v22 >> 61) {
        abort();
      }
      uint64_t v23 = v14 - (void)v19;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = operator new(8 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      long long v26 = (swift::Demangle::Node **)&v25[8 * v21];
      unint64_t v27 = &v25[8 * v24];
      *long long v26 = v9;
      uint64_t v16 = v26 + 1;
      if (v15 != (swift::Demangle::Node **)v19)
      {
        unint64_t v28 = (char *)v15 - v19 - 8;
        if (v28 < 0x58) {
          goto LABEL_45;
        }
        if ((unint64_t)((char *)v15 - v25 - v20) < 0x20) {
          goto LABEL_45;
        }
        uint64_t v29 = (v28 >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v31 = &v15[v30 / 0xFFFFFFFFFFFFFFF8];
        long long v26 = (swift::Demangle::Node **)((char *)v26 - v30);
        unint64_t v32 = &v25[8 * v21 - 16];
        unint64_t v33 = v15 - 2;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *unint64_t v32 = v35;
          v32 -= 2;
          v33 -= 4;
          v34 -= 4;
        }
        while (v34);
        unint64_t v15 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            unint64_t v36 = *--v15;
            *--long long v26 = v36;
          }
          while (v15 != (swift::Demangle::Node **)v19);
        }
        unint64_t v15 = *(swift::Demangle::Node ***)this;
      }
      *(void *)this = v26;
      *((void *)this + 1) = v16;
      *((void *)this + 2) = v27;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *unint64_t v15 = v9;
      uint64_t v16 = v15 + 1;
    }
    *((void *)this + 1) = v16;
    goto LABEL_39;
  }
  int v6 = (unsigned __int8 *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 80)
  {
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      if (!v8) {
        return 0;
      }
      int v9 = v8;
      if (*((_WORD *)v8 + 8) != 35) {
        return 0;
      }
LABEL_39:
      int v10 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 45);
      swift::Demangle::Node::addChild(v10, a2, *((swift::Demangle::NodeFactory **)this + 5));
      swift::Demangle::Node::addChild(v10, v9, *((swift::Demangle::NodeFactory **)this + 5));
      return v10;
    }
    goto LABEL_7;
  }
  *((void *)this + 3) = v6 + 1;
  *((void *)this + 4) = v5 - 1;
  if (v17)
  {
    unint64_t v18 = v17;
    int v10 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::Node::addChild(v10, v18, *((swift::Demangle::NodeFactory **)this + 5));
    if (!v10) {
      return v10;
    }
    goto LABEL_8;
  }
  return 0;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::createSwiftType(uint64_t a1, __int16 a2, const void *a3, size_t a4)
{
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = v8[1];
  int v10 = (char *)(v9 + 5);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8[2];
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    unint64_t v12 = 2 * v8[4];
    if (v12 <= 6) {
      unint64_t v12 = 6;
    }
    v8[4] = v12;
    unint64_t v13 = v12 + 8;
    unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    uint64_t v9 = (uint64_t)(v14 + 1);
    *unint64_t v14 = v8[3];
    int v10 = (char *)v14 + 13;
    v8[2] = (char *)v14 + v13;
    void v8[3] = v14;
  }
  v8[1] = v10;
  *(unsigned char *)(v9 + 4) = 116;
  *(_DWORD *)uint64_t v9 = 1718187859;
  unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v8, 153, v9, 5);
  swift::Demangle::Node::addChild(Node, NodeWithAllocatedText, *(swift::Demangle::NodeFactory **)(a1 + 40));
  uint64_t v16 = *(void **)(a1 + 40);
  if (a4)
  {
    int v17 = (char *)v16[1];
    unint64_t v18 = &v17[a4];
    if (v17) {
      BOOL v19 = (unint64_t)v18 > v16[2];
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      unint64_t v20 = 2 * v16[4];
      if (v20 <= a4 + 1) {
        unint64_t v20 = a4 + 1;
      }
      v16[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      uint64_t v23 = (char *)v22 + v21;
      *unint64_t v22 = v16[3];
      int v17 = (char *)(v22 + 1);
      v16[2] = v23;
      void v16[3] = v22;
      unint64_t v18 = (char *)v22 + a4 + 8;
    }
    v16[1] = v18;
    memmove(v17, a3, a4);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v24 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v16, 101, (uint64_t)v17, a4);
  swift::Demangle::Node::addChild(Node, v24, *(swift::Demangle::NodeFactory **)(a1 + 40));
  return Node;
}

const char *anonymous namespace'::OldDemangler::demangleImplConvention(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0;
  }
  __n128 result = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  switch(*v5)
  {
    case 'D':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 2) {
        return "@unowned_inner_pointer";
      }
      else {
        return 0;
      }
    case 'a':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      int v6 = "@autoreleased";
      BOOL v7 = a2 == 2;
      goto LABEL_19;
    case 'd':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0;
      }
      return (&off_264238B78)[a2];
    case 'e':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      int v6 = "@deallocating";
      BOOL v7 = a2 == 1;
LABEL_19:
      if (v7) {
        return v6;
      }
      else {
        return 0;
      }
    case 'g':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@guaranteed";
      uint64_t v9 = "@callee_guaranteed";
      if (a2) {
        uint64_t v9 = 0;
      }
      BOOL v10 = a2 == 1;
      goto LABEL_25;
    case 'i':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@out";
      uint64_t v9 = "@in";
      if (a2 != 1) {
        uint64_t v9 = 0;
      }
      BOOL v10 = a2 == 2;
LABEL_25:
      if (v10) {
        __n128 result = v8;
      }
      else {
        __n128 result = v9;
      }
      break;
    case 'l':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 1) {
        __n128 result = "@inout";
      }
      else {
        __n128 result = 0;
      }
      break;
    case 'o':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0;
      }
      __n128 result = (&off_264238B90)[a2];
      break;
    default:
      return result;
  }
  return result;
}

swift::Demangle::Node *anonymous namespace'::OldDemangler::demangleImplParameterOrResult(uint64_t a1, int a2, int a3)
{
  __int16 v4 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (BOOL v7 = *(unsigned char **)(a1 + 24), *v7 != 122))
  {
    if (a2 == 118)
    {
      unsigned int v8 = 1;
      goto LABEL_9;
    }
    if ((a2 & 0xFFFFFFFD) == 0x78)
    {
      unsigned int v8 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  *(void *)(a1 + 24) = v7 + 1;
  *(void *)(a1 + 32) = v6 - 1;
  if (a2 != 120) {
    return 0;
  }
  unsigned int v8 = 2;
  __int16 v4 = 122;
LABEL_9:
  if (!v10) {
    return 0;
  }
  BOOL v11 = v9;
  size_t v12 = v10;
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (swift::Demangle::Node *)v13;
  unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), 232);
  swift::Demangle::Node::addChild(Node, v14, *(swift::Demangle::NodeFactory **)(a1 + 40));
  if (!Node) {
    return 0;
  }
  uint64_t v16 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(void **)(a1 + 40), v4);
  int v17 = *(void **)(a1 + 40);
  unint64_t v18 = (char *)v17[1];
  if (!v18 || (BOOL v19 = &v18[v12], (unint64_t)&v18[v12] > v17[2]))
  {
    unint64_t v20 = 2 * v17[4];
    if (v20 <= v12 + 1) {
      unint64_t v20 = v12 + 1;
    }
    v17[4] = v20;
    unint64_t v21 = v20 + 8;
    unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    uint64_t v23 = (char *)v22 + v21;
    *unint64_t v22 = v17[3];
    unint64_t v18 = (char *)(v22 + 1);
    v17[2] = v23;
    v17[3] = v22;
    BOOL v19 = (char *)v22 + v12 + 8;
  }
  v17[1] = v19;
  memmove(v18, v11, v12);
  unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v17, 106, (uint64_t)v18, v12);
  swift::Demangle::Node::addChild(v16, NodeWithAllocatedText, *(swift::Demangle::NodeFactory **)(a1 + 40));
  swift::Demangle::Node::addChild(v16, Node, *(swift::Demangle::NodeFactory **)(a1 + 40));
  return v16;
}

unint64_t anonymous namespace'::OldDemangler::demangleValueWitnessKind(_anonymous_namespace_::OldDemangler *this)
{
  unint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)*((void *)this + 3);
    LOBYTE(v6) = *v2;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
    if (v1 == 1)
    {
      unint64_t v1 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      char v3 = v2[1];
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      HIBYTE(v6) = v3;
      switch(v6)
      {
        case 27745:
          uint64_t v4 = 0;
          unint64_t v1 = 0x100000000;
          break;
        case 24931:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 1;
          break;
        case 24948:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 2;
          break;
        case 25956:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 3;
          break;
        case 30840:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 4;
          break;
        case 22616:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 5;
          break;
        case 30808:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 6;
          break;
        case 20547:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 7;
          break;
        case 28739:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 8;
          break;
        case 28771:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 9;
          break;
        case 27476:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 10;
          break;
        case 27508:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 11;
          break;
        case 29296:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 12;
          break;
        case 19284:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 13;
          break;
        case 25411:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 14;
          break;
        case 29780:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 15;
          break;
        case 21620:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 16;
          break;
        case 29560:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 17;
          break;
        case 26488:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 18;
          break;
        case 26485:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 19;
          break;
        case 28789:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 20;
          break;
        case 26997:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 21;
          break;
        case 29797:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 22;
          break;
        default:
          unint64_t v1 = (unint64_t)(v6 == 29811) << 32;
          uint64_t v4 = 23;
          if (v6 != 29811) {
            uint64_t v4 = 0;
          }
          break;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4 | v1;
}

uint64_t anonymous namespace'::OldDemangler::demangleReabstractSignature(_anonymous_namespace_::OldDemangler *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    BOOL v7 = (unsigned char *)*((void *)this + 3);
    if (*v7 == 71)
    {
      *((void *)this + 3) = v7 + 1;
      *((void *)this + 4) = v6 - 1;
      if (!result) {
        return result;
      }
      swift::Demangle::Node::addChild(a2, (swift::Demangle::Node *)result, *((swift::Demangle::NodeFactory **)this + 5));
    }
  }
  unsigned int v9 = a3 + 1;
  if (result)
  {
    size_t v10 = (swift::Demangle::Node *)result;
    unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::Node::addChild(Node, v10, *((swift::Demangle::NodeFactory **)this + 5));
    if (!Node) {
      return 0;
    }
    swift::Demangle::Node::addChild(a2, Node, *((swift::Demangle::NodeFactory **)this + 5));
    if (!result) {
      return result;
    }
    size_t v12 = (swift::Demangle::Node *)result;
    uint64_t v13 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::Node::addChild(v13, v12, *((swift::Demangle::NodeFactory **)this + 5));
    if (v13)
    {
      swift::Demangle::Node::addChild(a2, v13, *((swift::Demangle::NodeFactory **)this + 5));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t swift::Punycode::decodePunycode(unsigned __int8 *a1, unint64_t a2, std::vector<unsigned int> *this)
{
  char v3 = this;
  unint64_t v4 = a2;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  this->__end_ = this->__begin_;
  if (a2 > this->__end_cap_.__value_ - begin)
  {
    if (a2 >> 62) {
LABEL_71:
    }
      abort();
    uint64_t v7 = a2;
    unsigned int v8 = (unsigned int *)operator new(4 * a2);
    v3->__begin_ = v8;
    v3->__end_ = v8;
    v3->__end_cap_.__value_ = &v8[v7];
    if (begin) {
      operator delete(begin);
    }
  }
  std::vector<unsigned int>::value_type __x = 128;
  unint64_t v9 = v4;
  do
  {
    if (!v9) {
      goto LABEL_41;
    }
    unint64_t v10 = v9 - 1;
    int v11 = a1[--v9];
  }
  while (v11 != 95);
  if (v10 >= v4) {
    unint64_t v12 = v4;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = (char *)&a1[v12];
    unint64_t v14 = a1;
    unint64_t v64 = v3;
    unsigned int v65 = (char *)&a1[v12];
    while (1)
    {
      if ((char)*v14 < 0) {
        return 0;
      }
      unsigned int v16 = *v14;
      end = (char *)v3->__end_;
      value = v3->__end_cap_.__value_;
      if (end >= (char *)value) {
        break;
      }
      *(_DWORD *)end = v16;
      unint64_t v15 = (unsigned int *)(end + 4);
LABEL_14:
      v3->__end_ = v15;
      if (++v14 == (unsigned __int8 *)v13) {
        goto LABEL_38;
      }
    }
    BOOL v19 = a1;
    unint64_t v20 = v4;
    std::vector<unsigned int>::pointer v21 = v3->__begin_;
    uint64_t v22 = end - (char *)v3->__begin_;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      goto LABEL_71;
    }
    uint64_t v25 = (char *)value - (char *)v21;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v66 = v24;
    if (v24)
    {
      if (v24 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      long long v26 = operator new(4 * v24);
    }
    else
    {
      long long v26 = 0;
    }
    unint64_t v27 = (unsigned int *)&v26[4 * v23];
    *unint64_t v27 = v16;
    unint64_t v15 = v27 + 1;
    if (end == (char *)v21)
    {
      unint64_t v4 = v20;
      a1 = v19;
    }
    else
    {
      unint64_t v28 = end - (char *)v21 - 4;
      if (v28 >= 0x2C)
      {
        unint64_t v29 = end - &v26[v22];
        unint64_t v4 = v20;
        a1 = v19;
        if (v29 >= 0x20)
        {
          uint64_t v30 = (v28 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v32 = &end[-v31];
          unint64_t v27 = (unsigned int *)((char *)v27 - v31);
          unint64_t v33 = &v26[4 * v23 - 16];
          uint64_t v34 = end - 16;
          uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *unint64_t v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 8;
          }
          while (v35);
          end = v32;
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_35;
          }
        }
      }
      else
      {
        unint64_t v4 = v20;
        a1 = v19;
      }
      do
      {
        unsigned int v37 = *((_DWORD *)end - 1);
        end -= 4;
        *--unint64_t v27 = v37;
      }
      while (end != (char *)v21);
    }
LABEL_35:
    char v3 = v64;
    v64->__begin_ = v27;
    v64->__end_ = v15;
    v64->__end_cap_.__value_ = (unsigned int *)&v26[4 * v66];
    if (v21) {
      operator delete(v21);
    }
    uint64_t v13 = v65;
    goto LABEL_14;
  }
LABEL_38:
  unint64_t v38 = v10 + 1;
  if (v4 < v10 + 1) {
    unint64_t v38 = v4;
  }
  a1 += v38;
  v4 -= v38;
LABEL_41:
  if (!v4) {
    return 1;
  }
  int v39 = 0;
  int v40 = 72;
LABEL_43:
  uint64_t v41 = 0;
  int v42 = 1;
  int v43 = 36;
  int v44 = v39;
  while (1)
  {
    int v45 = (char)a1[v41];
    int v46 = v45 - 97;
    if ((v45 - 97) > 0x19)
    {
      if ((v45 - 65) > 9) {
        return 0;
      }
      int v46 = v45 - 39;
    }
    if (v46 < 0 || v46 > (v44 ^ 0x7FFFFFFF) / v42) {
      return 0;
    }
    v44 += v46 * v42;
    int v47 = v43 - v40;
    if (v43 >= v40 + 26) {
      int v47 = 26;
    }
    if (v43 <= v40) {
      int v47 = 1;
    }
    if (v46 < v47)
    {
      int v48 = v44 - v39;
      std::vector<unsigned int>::pointer v49 = v3->__begin_;
      uint64_t v50 = v3->__end_ - v3->__begin_;
      if (v39) {
        int v51 = 2;
      }
      else {
        int v51 = 700;
      }
      signed int v52 = v48 / v51 / ((int)v50 + 1) + v48 / v51;
      if (v52 < 456)
      {
        int v53 = 0;
      }
      else
      {
        int v53 = 0;
        unsigned int v54 = v52;
        do
        {
          signed int v52 = v54 / 0x23;
          v53 += 36;
          unsigned int v55 = v54 >> 3;
          v54 /= 0x23u;
        }
        while (v55 > 0x7CA);
      }
      unint64_t v56 = v50 + 1;
      unint64_t v57 = v44 / v56;
      std::vector<unsigned int>::value_type v58 = __x;
      if (v57 > (__x ^ 0x7FFFFFFF)) {
        return 0;
      }
      __x += v57;
      if (v58 + v57 < 0x80) {
        return 0;
      }
      unint64_t v67 = v4 - 1;
      uint64_t v59 = (uint64_t)&a1[v41 + 1];
      int v40 = 36 * v52 / (v52 + 38) + v53;
      unint64_t v60 = ~v41 + v4;
      unint64_t v61 = v44 % v56;
      v62.__i_ = &v49[(int)v61];
      std::vector<unsigned int>::insert(v3, v62, &__x);
      int v39 = v61 + 1;
      unint64_t v4 = v60;
      a1 = (unsigned __int8 *)v59;
      uint64_t result = 1;
      if (v67 != v41) {
        goto LABEL_43;
      }
      return result;
    }
    if (v42 <= 0x7FFFFFFF / (36 - v47))
    {
      v42 *= 36 - v47;
      v43 += 36;
      if (v4 != ++v41) {
        continue;
      }
    }
    return 0;
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  char v3 = (unsigned int *)__x;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  int64_t v7 = (char *)__position.__i_ - (char *)this->__begin_;
  uint64_t v8 = v7 >> 2;
  std::vector<unsigned int>::pointer v9 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      const char *v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<unsigned int>::iterator)v9;
    }
    int64_t v11 = (char *)end - (char *)(v9 + 1);
    uint64_t v12 = v11 >> 2;
    std::vector<unsigned int>::pointer v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      std::vector<unsigned int>::pointer v17 = this->__end_;
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      std::vector<unsigned int>::pointer v15 = (unsigned int *)((char *)begin + v14 + 4);
      if (end > v15) {
        std::vector<unsigned int>::pointer v15 = this->__end_;
      }
      unint64_t v16 = (unint64_t)v15 + ~(unint64_t)begin - v14;
      if (v16 >= 0x2C)
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
        if ((unint64_t)((char *)(v9 + 1) - ((char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL))) >= 0x20)
        {
          uint64_t v47 = (v16 >> 2) + 1;
          uint64_t v48 = v47 & 0x7FFFFFFFFFFFFFF8;
          std::vector<unsigned int>::pointer v13 = (std::vector<unsigned int>::pointer)((char *)v13 + v48 * 4);
          std::vector<unsigned int>::pointer v17 = &end[v48];
          std::vector<unsigned int>::pointer v49 = end + 4;
          uint64_t v50 = &begin[v12 + 4 + v8];
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *std::vector<unsigned int>::pointer v49 = v52;
            v49 += 2;
            v50 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
      }
      do
      {
        unsigned int v53 = *v13++;
        *v17++ = v53;
      }
      while (v13 < end);
    }
LABEL_49:
    this->__end_ = v17;
    if (end != v9 + 1) {
      memmove(&end[-v12], v9, v11);
    }
    if (v9 <= v3) {
      v3 += this->__end_ > v3;
    }
    const char *v9 = *v3;
    return (std::vector<unsigned int>::iterator)v9;
  }
  unint64_t v18 = end - begin + 1;
  if (v18 >> 62) {
    abort();
  }
  uint64_t v20 = (char *)value - (char *)begin;
  if (v20 >> 1 > v18) {
    unint64_t v18 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 62) {
      goto LABEL_56;
    }
    uint64_t v22 = (char *)operator new(4 * v21);
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (unsigned int *)&v22[4 * v8];
  unint64_t v24 = (unsigned int *)&v22[4 * v21];
  if (v8 != v21)
  {
LABEL_24:
    std::vector<unsigned int>::pointer v26 = begin;
    goto LABEL_25;
  }
  if (v7 >= 1)
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= v25 >> 1;
    goto LABEL_24;
  }
  if (begin == __position.__i_) {
    unint64_t v43 = 1;
  }
  else {
    unint64_t v43 = v7 >> 1;
  }
  if (v43 >> 62) {
LABEL_56:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v44 = 4 * v43;
  int v45 = (char *)operator new(4 * v43);
  uint64_t v23 = (unsigned int *)&v45[v43 & 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v24 = (unsigned int *)&v45[v44];
  if (!v22) {
    goto LABEL_24;
  }
  int v46 = (unsigned int *)&v45[v44];
  operator delete(v22);
  unint64_t v24 = v46;
  std::vector<unsigned int>::pointer v26 = this->__begin_;
LABEL_25:
  *uint64_t v23 = *v3;
  unint64_t v27 = v23;
  if (v26 != v9)
  {
    unint64_t v28 = (char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v29 = v28 - (char *)v26 - 4;
    uint64_t v30 = v9;
    unint64_t v27 = v23;
    if (v29 < 0x2C) {
      goto LABEL_60;
    }
    uint64_t v30 = v9;
    unint64_t v27 = v23;
    if ((unint64_t)(v28 - (char *)v23) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v31 = (v29 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v30 = &v9[v32 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v27 = &v23[v32 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v33 = v23 - 4;
    uint64_t v34 = &begin[v8 - 4];
    uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)unint64_t v33 = v36;
      v33 -= 8;
      v34 -= 8;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        unsigned int v37 = *--v30;
        *--unint64_t v27 = v37;
      }
      while (v30 != v26);
    }
  }
  std::vector<unsigned int>::pointer v38 = this->__end_;
  int64_t v39 = (char *)v38 - (char *)v9;
  if (v38 != v9)
  {
    std::vector<unsigned int>::pointer v40 = v9;
    size_t v41 = (char *)v38 - (char *)v9;
    int v42 = v24;
    memmove(v23 + 1, v40, v41);
    unint64_t v24 = v42;
    std::vector<unsigned int>::pointer v26 = this->__begin_;
  }
  this->__begin_ = v27;
  this->__end_ = (unsigned int *)((char *)v23 + v39 + 4);
  this->__end_cap_.__value_ = v24;
  if (v26) {
    operator delete(v26);
  }
  return (std::vector<unsigned int>::iterator)v23;
}

BOOL swift::Punycode::encodePunycode(unsigned int **a1, std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      unsigned int v7 = *v4;
      if (*v4 <= 0x7F)
      {
        ++v6;
        std::string::push_back(this, v7);
      }
      else if (v7 >> 7 >= 0x1B1 && v7 - 57344 >= 0x102000)
      {
        BOOL result = 0;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          *this->__r_.__value_.__l.__data_ = 0;
          this->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          this->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
        }
        return result;
      }
      ++v4;
    }
    while (v4 != v5);
    if (v6) {
      std::string::push_back(this, 95);
    }
  }
  unint64_t v10 = *a1;
  std::vector<unsigned int>::pointer v9 = a1[1];
  if (v6 >= v9 - *a1) {
    return 1;
  }
  uint64_t v35 = a1;
  int v11 = 0;
  int v12 = 72;
  unsigned int v13 = 128;
  unint64_t v14 = v6;
  unint64_t v36 = v6;
  do
  {
    unsigned int v15 = 1114111;
    for (unint64_t i = v10; i != v9; ++i)
    {
      unsigned int v18 = *i;
      unsigned int v17 = v18;
      if (v18 < v15 && v17 >= v13) {
        unsigned int v15 = v17;
      }
    }
    unint64_t v20 = v15 - v13;
    unint64_t v21 = (v11 ^ 0x7FFFFFFFu) / (v14 + 1);
    BOOL result = v21 >= v20;
    if (v21 < v20) {
      break;
    }
    int v22 = v11 + v20 * (v14 + 1);
    if (v10 != v9)
    {
      unsigned int v37 = v9;
      while (1)
      {
        if (*v10 < v15)
        {
          if (v22 == 0x7FFFFFFF) {
            return 0;
          }
          ++v22;
        }
        if (*v10 == v15)
        {
          unint64_t v38 = v14;
          int v24 = 36 - v12;
          if (v12 <= 10) {
            int v24 = 26;
          }
          if (v12 >= 36) {
            int v24 = 1;
          }
          int v25 = v22;
          if (v22 >= v24)
          {
            int v26 = 72;
            int v25 = v22;
            do
            {
              int v27 = v25 - v24;
              int v25 = (v25 - v24) / (36 - v24);
              int v28 = v27 - v25 * (36 - v24) + v24;
              if (v28 >= 26) {
                char v29 = 39;
              }
              else {
                char v29 = 97;
              }
              std::string::push_back(this, v29 + v28);
              if (v26 - 26 >= v12) {
                int v24 = 26;
              }
              else {
                int v24 = v26 - v12;
              }
              if (v26 <= v12) {
                int v24 = 1;
              }
              v26 += 36;
            }
            while (v25 >= v24);
          }
          if (v25 >= 26) {
            char v30 = 39;
          }
          else {
            char v30 = 97;
          }
          std::string::push_back(this, v30 + v25);
          if (v38 == v36) {
            int v31 = 700;
          }
          else {
            int v31 = 2;
          }
          signed int v32 = v22 / v31 / ((int)v38 + 1) + v22 / v31;
          if (v32 < 456)
          {
            int v23 = 0;
          }
          else
          {
            int v23 = 0;
            unsigned int v33 = v32;
            do
            {
              signed int v32 = v33 / 0x23;
              v23 += 36;
              unsigned int v34 = v33 >> 3;
              v33 /= 0x23u;
            }
            while (v34 > 0x7CA);
          }
          int v22 = 0;
          int v12 = 36 * v32 / (v32 + 38) + v23;
          unint64_t v14 = v38 + 1;
          std::vector<unsigned int>::pointer v9 = v37;
        }
        if (++v10 == v9)
        {
          unint64_t v10 = *v35;
          std::vector<unsigned int>::pointer v9 = v35[1];
          goto LABEL_19;
        }
      }
    }
    std::vector<unsigned int>::pointer v9 = v10;
LABEL_19:
    int v11 = v22 + 1;
    unsigned int v13 = v15 + 1;
    BOOL result = 1;
  }
  while (v14 < v9 - v10);
  return result;
}

uint64_t swift::Punycode::decodePunycodeUTF8(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  memset(&v17, 0, sizeof(v17));
  if (swift::Punycode::decodePunycode(a1, a2, &v17))
  {
    std::vector<unsigned int>::pointer begin = v17.__begin_;
    std::vector<unsigned int>::pointer end = v17.__end_;
    if (v17.__begin_ == v17.__end_)
    {
      uint64_t v15 = 1;
      if (!v17.__begin_) {
        return v15;
      }
      goto LABEL_26;
    }
    while (1)
    {
      unsigned int v7 = *begin;
      unsigned int v8 = *begin >> 7;
      if (v8 >= 0x1B1 && v7 - 57344 >= 0x102000) {
        break;
      }
      if (v8 == 432) {
        v7 -= 55296;
      }
      if (v7 < 0x80)
      {
        std::string::value_type v6 = v7;
      }
      else
      {
        std::string::value_type v6 = v7 & 0x3F | 0x80;
        if (v7 >= 0x800)
        {
          unsigned int v11 = (v7 >> 6) & 0x3F | 0xFFFFFF80;
          if (v7 >= 0x10000)
          {
            unsigned int v14 = (v7 >> 12) & 0x3F | 0xFFFFFF80;
            std::string::push_back((std::string *)a3, (v7 >> 18) | 0xF0);
            unsigned int v13 = (std::string *)a3;
            LOBYTE(v12) = v14;
          }
          else
          {
            unsigned int v12 = (v7 >> 12) | 0xFFFFFFE0;
            unsigned int v13 = (std::string *)a3;
          }
          std::string::push_back(v13, v12);
          unint64_t v10 = (std::string *)a3;
          LOBYTE(v9) = v11;
        }
        else
        {
          unsigned int v9 = (v7 >> 6) | 0xFFFFFFC0;
          unint64_t v10 = (std::string *)a3;
        }
        std::string::push_back(v10, v9);
      }
      std::string::push_back((std::string *)a3, v6);
      if (++begin == end)
      {
        uint64_t v15 = 1;
        goto LABEL_25;
      }
    }
    uint64_t v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_25:
  std::vector<unsigned int>::pointer begin = v17.__begin_;
  if (v17.__begin_)
  {
LABEL_26:
    v17.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

BOOL swift::Punycode::encodePunycodeUTF8(char *a1, unint64_t a2, std::string *a3, char a4)
{
  std::string __p = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  if (!a2)
  {
LABEL_68:
    BOOL v19 = swift::Punycode::encodePunycode((unsigned int **)&__p, a3);
LABEL_69:
    size_t v41 = __p;
    if (__p) {
      goto LABEL_70;
    }
    return v19;
  }
  if (a2 >> 62) {
LABEL_74:
  }
    abort();
  unsigned int v7 = (unsigned int *)operator new(4 * a2);
  unsigned int v8 = (char *)&v7[a2];
  std::string __p = v7;
  int v46 = v7;
  unsigned int v9 = (unsigned __int8 *)&a1[a2];
  char v44 = a4 ^ 1;
  uint64_t v47 = v8;
  unint64_t v10 = v7;
  while (1)
  {
    unsigned int v12 = (unsigned __int8 *)(a1 + 1);
    unsigned int v13 = *a1;
    if ((*a1 & 0x80000000) == 0)
    {
      if ((v13 & 0xFFFFFFDF) - 65 < 0x1A) {
        goto LABEL_18;
      }
      BOOL v15 = v13 == 95 || v13 - 48 < 0xA || v13 == 36;
      char v16 = v44;
      if (v15) {
        char v16 = 1;
      }
      if (v16)
      {
LABEL_18:
        ++a1;
        goto LABEL_40;
      }
      v13 |= 0xD800u;
      ++a1;
      goto LABEL_38;
    }
    if (v13 < 0xC0) {
      goto LABEL_72;
    }
    if (v13 <= 0xDF) {
      break;
    }
    uint64_t v18 = v9 - v12;
    if (v13 > 0xEF)
    {
      BOOL v19 = 0;
      if (v13 > 0xF7 || v18 < 3) {
        goto LABEL_69;
      }
      unsigned __int8 v23 = a1[1];
      if ((v23 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v24 = a1[2];
      if ((v24 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v25 = a1[3];
      if ((v25 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 4;
      unsigned int v13 = ((v13 & 7) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6) | v25 & 0x3F;
    }
    else
    {
      if (v18 < 2) {
        goto LABEL_72;
      }
      BOOL v19 = 0;
      unsigned __int8 v20 = a1[1];
      if ((v20 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v21 = a1[2];
      if ((v21 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 3;
      unsigned int v13 = ((v13 & 0xF) << 12) | ((v20 & 0x3F) << 6) | v21 & 0x3F;
    }
LABEL_38:
    if (v13 >> 7 >= 0x1B1 && (v13 - 57344) >> 13 > 0x80) {
      goto LABEL_72;
    }
LABEL_40:
    if (v7 >= (unsigned int *)v8)
    {
      uint64_t v26 = v7 - v10;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        goto LABEL_74;
      }
      if ((v8 - (char *)v10) >> 1 > v27) {
        unint64_t v27 = (v8 - (char *)v10) >> 1;
      }
      if ((unint64_t)(v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28)
      {
        if (v28 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        char v29 = operator new(4 * v28);
      }
      else
      {
        char v29 = 0;
      }
      char v30 = (unsigned int *)&v29[4 * v26];
      *char v30 = v13;
      unsigned int v11 = v30 + 1;
      if (v7 == v10) {
        goto LABEL_55;
      }
      unint64_t v31 = (char *)v7 - (char *)v10 - 4;
      if (v31 >= 0xBC)
      {
        unint64_t v34 = ((char *)(v7 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v7 - (char *)v10 - 4 - v34] > &v29[(char *)v7 - (char *)v10 - 4])
        {
          signed int v32 = v7;
        }
        else if ((unsigned int *)((char *)v7 - v34 - 4) > v7 - 1)
        {
          signed int v32 = v7;
        }
        else if ((unint64_t)((char *)v10 - v29) >= 0x20)
        {
          uint64_t v35 = (v31 >> 2) + 1;
          uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          signed int v32 = &v7[v36 / 0xFFFFFFFFFFFFFFFCLL];
          char v30 = (unsigned int *)((char *)v30 - v36);
          unsigned int v37 = &v29[4 * v26 - 16];
          unint64_t v38 = v7 - 4;
          uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *unsigned int v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_55;
          }
        }
        else
        {
          signed int v32 = v7;
        }
      }
      else
      {
        signed int v32 = v7;
      }
      do
      {
        unsigned int v33 = *--v32;
        *--char v30 = v33;
      }
      while (v32 != v10);
LABEL_55:
      unsigned int v8 = &v29[4 * v28];
      std::string __p = v30;
      uint64_t v47 = v8;
      if (v10) {
        operator delete(v10);
      }
      unint64_t v10 = v30;
      goto LABEL_5;
    }
    unsigned int *v7 = v13;
    unsigned int v11 = v7 + 1;
LABEL_5:
    int v46 = v11;
    unsigned int v7 = v11;
    if (a1 >= (char *)v9) {
      goto LABEL_68;
    }
  }
  if (v12 != v9)
  {
    unsigned __int8 v17 = *v12;
    if ((v17 & 0xC0) == 0x80)
    {
      a1 += 2;
      unsigned int v13 = v17 & 0x3F | ((v13 & 0x1F) << 6);
      goto LABEL_40;
    }
  }
LABEL_72:
  BOOL v19 = 0;
  size_t v41 = __p;
  if (!__p) {
    return v19;
  }
LABEL_70:
  operator delete(v41);
  return v19;
}

BOOL swift::Demangle::SubstitutionEntry::identifierEquals(swift::Demangle::SubstitutionEntry *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3)
{
  size_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = v3;
  if (v4 != v3) {
    return 0;
  }
  if (*((unsigned __int16 *)this + 8) == *((unsigned __int16 *)a2 + 8))
  {
    if (v3 == v4)
    {
      if (v3) {
        return memcmp(*(const void **)this, *(const void **)a2, v3) == 0;
      }
      return 1;
    }
    return 0;
  }
  if (!*((void *)this + 1)) {
    return 1;
  }
  uint64_t v10 = 0;
  BOOL v8 = 0;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)this + 8) - 124;
    BOOL v12 = v11 > 0x33;
    uint64_t v13 = (1 << v11) & 0xA000000000001;
    if (v12 || v13 == 0) {
      char v15 = *(unsigned char *)(*(void *)this + v10);
    }
    else {
      char v15 = swift::Mangle::translateOperatorChar((swift::Mangle *)*(char *)(*(void *)this + v10));
    }
    unsigned int v16 = *((unsigned __int16 *)a2 + 8) - 124;
    if (v16 <= 0x33 && ((1 << v16) & 0xA000000000001) != 0) {
      char v17 = swift::Mangle::translateOperatorChar((swift::Mangle *)*(char *)(*(void *)a2 + v10));
    }
    else {
      char v17 = *(unsigned char *)(*(void *)a2 + v10);
    }
    if (v15 != v17) {
      break;
    }
    BOOL v8 = ++v10 >= v5;
  }
  while (v5 != v10);
  return v8;
}

uint64_t swift::Demangle::SubstitutionEntry::deepEquals(swift::Demangle::SubstitutionEntry *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3)
{
  size_t v3 = (char *)a2 + 16;
  if (*((unsigned __int16 *)a2 + 8) != *((unsigned __int16 *)a3 + 8)) {
    return 0;
  }
  uint64_t v4 = a3;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != *((unsigned __int8 *)a3 + 18)) {
    return 0;
  }
  unsigned int v8 = v6 - 1;
  unsigned int v9 = a2;
  switch(*((unsigned char *)a2 + 18))
  {
    case 1:
    case 2:
      if (v8 >= 2) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 3:
      size_t v10 = *((void *)a2 + 1);
      if (v10 != *((void *)v4 + 1) || v10 && memcmp(*(const void **)a2, *(const void **)v4, v10)) {
        return 0;
      }
      goto LABEL_12;
    case 4:
      if (*(void *)a2 != *(void *)a3) {
        return 0;
      }
      goto LABEL_12;
    case 5:
      if (*((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2)) {
        return 0;
      }
      unsigned int v9 = *(swift::Demangle::Node **)a2;
      goto LABEL_23;
    default:
LABEL_12:
      unsigned int v9 = 0;
      if (v8 < 2)
      {
LABEL_5:
        if (v6 != 5)
        {
LABEL_15:
          if (v6 != 2)
          {
            size_t v3 = v6 == 1 ? (char *)a2 + 8 : 0;
            if (v9 == (swift::Demangle::Node *)v3) {
              return 1;
            }
          }
          goto LABEL_25;
        }
      }
      else
      {
LABEL_13:
        if (v6 != 5)
        {
          uint64_t v4 = 0;
          goto LABEL_15;
        }
LABEL_23:
        uint64_t v4 = *(swift::Demangle::Node **)v4;
      }
      size_t v3 = (char *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == (swift::Demangle::Node *)v3) {
        return 1;
      }
LABEL_25:
      BOOL v12 = (char *)v9 + 8;
      do
      {
        uint64_t v13 = *(swift::Demangle::Node **)v4;
        uint64_t v4 = (swift::Demangle::Node *)((char *)v4 + 8);
        uint64_t result = swift::Demangle::SubstitutionEntry::deepEquals(this, *((swift::Demangle::Node **)v12 - 1), v13);
        if (result) {
          BOOL v14 = v12 == v3;
        }
        else {
          BOOL v14 = 1;
        }
        v12 += 8;
      }
      while (!v14);
      break;
  }
  return result;
}

uint64_t swift::Demangle::RemanglerBase::hashForNode(swift::Demangle::RemanglerBase *this, swift::Demangle::Node *a2, BOOL a3)
{
  BOOL v3 = a3;
  uint64_t v5 = *((unsigned __int16 *)a2 + 8);
  if (a3)
  {
    if ((v5 - 124) <= 0x33 && ((1 << (v5 - 124)) & 0xA000000000001) != 0)
    {
      uint64_t v7 = *((void *)a2 + 1);
      if (!v7) {
        return 101;
      }
      unsigned int v8 = *(char **)a2;
      uint64_t v5 = 101;
      do
      {
        unsigned int v9 = *v8++;
        uint64_t v5 = 33 * v5 + swift::Mangle::translateOperatorChar((swift::Mangle *)v9);
        --v7;
      }
      while (v7);
      return v5;
    }
    uint64_t v5 = 101;
  }
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    uint64_t v11 = *((void *)a2 + 1);
    if (!v11) {
      goto LABEL_23;
    }
    BOOL v12 = *(unsigned __int8 **)a2;
    do
    {
      unsigned int v13 = *v12++;
      uint64_t v5 = 33 * v5 + v13;
      --v11;
    }
    while (v11);
  }
  else if (v10 == 4)
  {
    uint64_t v5 = *(void *)a2 + 33 * v5;
    goto LABEL_23;
  }
  if ((v10 - 1) < 2)
  {
    BOOL v14 = (swift::Demangle::Node **)a2;
    if (v10 != 1) {
      goto LABEL_24;
    }
LABEL_20:
    char v15 = (swift::Demangle::Node **)((char *)a2 + 8);
    goto LABEL_31;
  }
  if (v10 == 5)
  {
    uint64_t v16 = *(void *)a2;
    BOOL v14 = *(swift::Demangle::Node ***)a2;
LABEL_27:
    char v15 = (swift::Demangle::Node **)(v16 + 8 * *((unsigned int *)a2 + 2));
    goto LABEL_31;
  }
LABEL_23:
  BOOL v14 = 0;
  if (v10 == 1) {
    goto LABEL_20;
  }
LABEL_24:
  if (v10 == 2)
  {
    char v15 = (swift::Demangle::Node **)((char *)a2 + 16);
  }
  else
  {
    if (v10 == 5)
    {
      uint64_t v16 = *(void *)a2;
      goto LABEL_27;
    }
    char v15 = 0;
  }
LABEL_31:
  while (v14 != v15)
  {
    char v17 = *v14++;
    swift::Demangle::RemanglerBase::entryForNode(v19, this, v17, v3);
    uint64_t v5 = v19[1] + 33 * v5;
  }
  return v5;
}

__n128 swift::Demangle::RemanglerBase::entryForNode@<Q0>(uint64_t *__return_ptr a1@<X8>, swift::Demangle::RemanglerBase *this@<X0>, swift::Demangle::Node *a3@<X1>, int a4@<W2>)
{
  char v4 = a4;
  uint64_t v7 = 4;
  if (!a4) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v7 + ((unint64_t)(2043 * (void)a3) >> 12);
  unsigned int v9 = (char *)this + 24 * (v8 & 0x1FF);
  __n128 result = *(__n128 *)(v9 + 8);
  *(__n128 *)a1 = result;
  a1[2] = *((void *)v9 + 3);
  if (!*a1) {
    goto LABEL_30;
  }
  if ((swift::Demangle::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
  {
    unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 1) & 0x1FF);
    __n128 result = *(__n128 *)(v9 + 8);
    *(__n128 *)a1 = result;
    a1[2] = *((void *)v9 + 3);
    if (*a1)
    {
      if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
        return result;
      }
      unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 2) & 0x1FF);
      __n128 result = *(__n128 *)(v9 + 8);
      *(__n128 *)a1 = result;
      a1[2] = *((void *)v9 + 3);
      if (*a1)
      {
        if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
          return result;
        }
        unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 3) & 0x1FF);
        __n128 result = *(__n128 *)(v9 + 8);
        *(__n128 *)a1 = result;
        a1[2] = *((void *)v9 + 3);
        if (*a1)
        {
          if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
            return result;
          }
          unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 4) & 0x1FF);
          __n128 result = *(__n128 *)(v9 + 8);
          *(__n128 *)a1 = result;
          a1[2] = *((void *)v9 + 3);
          if (*a1)
          {
            if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
              return result;
            }
            unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 5) & 0x1FF);
            __n128 result = *(__n128 *)(v9 + 8);
            *(__n128 *)a1 = result;
            a1[2] = *((void *)v9 + 3);
            if (*a1)
            {
              if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
                return result;
              }
              unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 6) & 0x1FF);
              __n128 result = *(__n128 *)(v9 + 8);
              *(__n128 *)a1 = result;
              a1[2] = *((void *)v9 + 3);
              if (*a1)
              {
                if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
                  return result;
                }
                BOOL v12 = (char *)this + 24 * (((unsigned __int16)v8 + 7) & 0x1FF);
                __n128 result = *(__n128 *)(v12 + 8);
                *(__n128 *)a1 = result;
                a1[2] = *((void *)v12 + 3);
                if (*a1)
                {
                  if ((swift::Demangle::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
                  {
                    uint64_t v13 = swift::Demangle::RemanglerBase::hashForNode(this, a3, a4);
                    *((unsigned char *)a1 + 16) = v4;
                    *a1 = (uint64_t)a3;
                    a1[1] = v13;
                  }
                  return result;
                }
                BOOL v14 = v12 + 8;
LABEL_31:
                uint64_t v15 = swift::Demangle::RemanglerBase::hashForNode(this, a3, a4);
                *((unsigned char *)a1 + 16) = v4;
                *a1 = (uint64_t)a3;
                a1[1] = v15;
                v14[16] = v4;
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)BOOL v14 = *(_OWORD *)a1;
                return result;
              }
            }
          }
        }
      }
    }
LABEL_30:
    BOOL v14 = v9 + 8;
    goto LABEL_31;
  }
  return result;
}

unint64_t swift::Demangle::RemanglerBase::findSubstitution(swift::Demangle::RemanglerBase *this, swift::Demangle::Node **a2)
{
  char v4 = (swift::Demangle::RemanglerBase *)((char *)this + 12296);
  uint64_t v5 = *((void *)this + 1585);
  if (v5)
  {
    int v6 = (char *)v4 + 24 * v5;
    uint64_t v7 = 24 * v5;
    unint64_t v8 = (swift::Demangle::RemanglerBase *)((char *)this + 12296);
    do
    {
      if (*((swift::Demangle::Node **)v8 + 1) == a2[1]
        && *((unsigned __int8 *)v8 + 16) == *((unsigned __int8 *)a2 + 16))
      {
        unsigned int v9 = *a2;
        if (*((unsigned char *)v8 + 16))
        {
          if (swift::Demangle::SubstitutionEntry::identifierEquals(*(swift::Demangle::SubstitutionEntry **)v8, *a2, v9)) {
            goto LABEL_11;
          }
        }
        else if (swift::Demangle::SubstitutionEntry::deepEquals(v8, *(swift::Demangle::Node **)v8, v9))
        {
          goto LABEL_11;
        }
      }
      unint64_t v8 = (swift::Demangle::SubstitutionEntry *)((char *)v8 + 24);
      v7 -= 24;
    }
    while (v7);
    unint64_t v8 = (swift::Demangle::SubstitutionEntry *)v6;
LABEL_11:
    uint64_t v5 = *((void *)this + 1585);
  }
  else
  {
    unint64_t v8 = (swift::Demangle::RemanglerBase *)((char *)this + 12296);
  }
  unint64_t result = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
  if (result == v5)
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::SubstitutionEntry>((void *)this + 1586, (uint64_t)a2);
    if (v11) {
      return *((unsigned int *)v11 + 10);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

char *swift::Demangle::RemanglerBase::addSubstitution(char *this, const swift::Demangle::SubstitutionEntry *a2)
{
  unint64_t v2 = *((void *)this + 1585);
  if (v2 > 0xF)
  {
    int v5 = *((_DWORD *)this + 3178) + 16;
    long long v6 = *(_OWORD *)a2;
    uint64_t v7 = *((void *)a2 + 2);
    int v8 = v5;
    return std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 12688), (uint64_t)&v6, &v6);
  }
  else
  {
    *((void *)this + 1585) = v2 + 1;
    uint64_t v3 = (uint64_t)&this[24 * v2 + 12296];
    long long v4 = *(_OWORD *)a2;
    *(unsigned char *)(v3 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return this;
}

size_t *swift::Demangle::mangleNode(swift::Demangle *this, swift::Demangle::Node *a2)
{
  return swift::Demangle::mangleNode();
}

size_t *swift::Demangle::mangleNode()
{
  unint64_t result = (size_t *)MEMORY[0x270FA5388]();
  uint64_t v4 = v3;
  if (!result)
  {
    *(_DWORD *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 24) = 0;
    return result;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t v7 = result;
  std::string::size_type v79 = &unk_26C5DD830;
  unint64_t v80 = 0;
  uint64_t v81 = 0;
  std::string::size_type v82 = 0;
  uint64_t v84 = 0;
  char v85 = 0;
  char v23 = 0;
  v22[1540] = 0;
  unsigned __int8 v21 = &v79;
  v22[1539] = 0;
  char v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  char v29 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  char v32 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  char v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  char v38 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  char v41 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  char v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v47 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v53 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v56 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  char v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  char v62 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  char v65 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v68 = 0;
  bzero(v22, 0x3011uLL);
  int v69 = 1065353216;
  unint64_t v72 = &v79;
  uint64_t v83 = 4800;
  int v8 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  unsigned int v9 = v82;
  std::string::size_type v82 = v8;
  void *v8 = v9;
  unint64_t v80 = v8 + 5;
  uint64_t v81 = v8 + 601;
  char __src = v8 + 1;
  size_t __len = 0x2000000000;
  char v73 = 1;
  long long v74 = 0u;
  long long v75 = 0u;
  memset(v76, 0, sizeof(v76));
  uint64_t v77 = v6;
  uint64_t v78 = v5;
  if (v19)
  {
    *(_OWORD *)uint64_t v4 = v19;
    *(void *)(v4 + 16) = v20;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    int v10 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1)) {
      goto LABEL_4;
    }
    goto LABEL_5;
  }
  uint64_t v13 = __src;
  if (!__src)
  {
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    goto LABEL_22;
  }
  size_t v14 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      uint64_t v16 = (__len & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v16 = __len | 7;
    }
    uint64_t v15 = (long long *)operator new(v16 + 1);
    *((void *)&v17 + 1) = v14;
    uint64_t v18 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long v17 = v15;
  }
  else
  {
    HIBYTE(v18) = __len;
    uint64_t v15 = &v17;
    if (!__len) {
      goto LABEL_21;
    }
  }
  memmove(v15, v13, v14);
LABEL_21:
  *((unsigned char *)v15 + v14) = 0;
LABEL_22:
  *(_DWORD *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = v17;
  *(void *)(v4 + 40) = v18;
  int v10 = (void *)*((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    do
    {
LABEL_4:
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
LABEL_5:
  BOOL v12 = (void *)*((void *)&v66 + 1);
  *((void *)&v66 + 1) = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string::size_type v79 = &unk_26C5DD830;
  unint64_t result = swift::Demangle::NodeFactory::freeSlabs(v82);
  if (v84) {
    *(unsigned char *)(v84 + 48) = 0;
  }
  return result;
}

void anonymous namespace'::Remangler::mangle(uint64_t *__return_ptr a1@<X8>, _anonymous_namespace_::Remangler *this@<X0>, size_t *a3@<X1>, unsigned int a4@<W2>)
{
  if (a4 <= 0x400)
  {
    int v6 = a4;
    while (2)
    {
      uint64_t v8 = 0;
      switch(*((_WORD *)a3 + 8))
      {
        case 0:
          int v13 = v6 + 1;
          size_t v14 = a1;
          uint64_t v15 = (char **)this;
          char v16 = 67;
          goto LABEL_86;
        case 1:
          return;
        case 2:
          return;
        case 3:
          long long v17 = a1;
          uint64_t v18 = (unsigned int *)this;
          int v19 = v6;
          goto LABEL_31;
        case 4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 733;
          goto LABEL_3;
        case 5:
          return;
        case 6:
          return;
        case 7:
          return;
        case 8:
          return;
        case 9:
          return;
        case 0xA:
          return;
        case 0xB:
          return;
        case 0xC:
          return;
        case 0xD:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x3D:
        case 0xA7:
        case 0xDB:
        case 0xEA:
          return;
        case 0xE:
          return;
        case 0x13:
          return;
        case 0x14:
          return;
        case 0x15:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "BT";
          goto LABEL_856;
        case 0x16:
          return;
        case 0x17:
          return;
        case 0x19:
          return;
        case 0x1A:
          return;
        case 0x1B:
          return;
        case 0x1C:
          return;
        case 0x1D:
          size_t v14 = a1;
          uint64_t v15 = (char **)this;
          char v16 = 99;
          int v13 = v6;
LABEL_86:
          return;
        case 0x1E:
          return;
        case 0x1F:
          return;
        case 0x20:
          unsigned int v20 = v6 + 1;
          unsigned __int8 v21 = a1;
          int v22 = this;
          goto LABEL_97;
        case 0x21:
          return;
        case 0x22:
          return;
        case 0x23:
          return;
        case 0x24:
          return;
        case 0x25:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1138;
          goto LABEL_3;
        case 0x26:
          return;
        case 0x27:
          return;
        case 0x28:
          return;
        case 0x29:
          return;
        case 0x2A:
          return;
        case 0x2B:
          char v23 = a1;
          uint64_t v24 = (uint64_t *)this;
          int v25 = v6;
          goto LABEL_134;
        case 0x2C:
          return;
        case 0x2D:
          return;
        case 0x2E:
          int v25 = v6 + 1;
          char v23 = a1;
          uint64_t v24 = (uint64_t *)this;
LABEL_134:
          return;
        case 0x2F:
          return;
        case 0x30:
          return;
        case 0x31:
          return;
        case 0x32:
          return;
        case 0x33:
          return;
        case 0x34:
          return;
        case 0x35:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TE";
          goto LABEL_856;
        case 0x36:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TF";
          goto LABEL_856;
        case 0x37:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TD";
          goto LABEL_856;
        case 0x38:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Td";
          goto LABEL_856;
        case 0x39:
          return;
        case 0x3A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TI";
          goto LABEL_856;
        case 0x3B:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tx";
          goto LABEL_856;
        case 0x3C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TX";
          goto LABEL_856;
        case 0x3E:
          return;
        case 0x3F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Xe";
          goto LABEL_856;
        case 0x40:
          return;
        case 0x41:
          return;
        case 0x42:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Yb";
          goto LABEL_856;
        case 0x43:
          return;
        case 0x44:
          return;
        case 0x45:
          return;
        case 0x46:
          return;
        case 0x47:
          return;
        case 0x48:
          return;
        case 0x49:
          return;
        case 0x4A:
          return;
        case 0x4B:
          return;
        case 0x4C:
          return;
        case 0x4D:
          return;
        case 0x4E:
        case 0x4F:
          return;
        case 0x50:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1634;
          goto LABEL_3;
        case 0x51:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1641;
          goto LABEL_3;
        case 0x52:
          char v26 = a1;
          uint64_t v27 = (uint64_t *)this;
          int v28 = v6;
          goto LABEL_213;
        case 0x53:
          return;
        case 0x54:
          return;
        case 0x55:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "s";
          size_t v10 = 1;
          goto LABEL_857;
        case 0x56:
          char v29 = a1;
          uint64_t v30 = (char **)this;
          int v31 = v6;
          goto LABEL_223;
        case 0x57:
          int v31 = v6 + 1;
          char v29 = a1;
          uint64_t v30 = (char **)this;
LABEL_223:
          return;
        case 0x58:
          return;
        case 0x59:
          return;
        case 0x5A:
          return;
        case 0x5B:
          char v32 = "Tg";
          goto LABEL_241;
        case 0x5C:
          char v32 = "TG";
          goto LABEL_241;
        case 0x5D:
          char v32 = "TB";
          goto LABEL_241;
        case 0x5E:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1749;
          goto LABEL_3;
        case 0x5F:
          char v32 = "Ts";
          goto LABEL_241;
        case 0x60:
          char v32 = "Ti";
LABEL_241:
          return;
        case 0x61:
          return;
        case 0x62:
          return;
        case 0x63:
          return;
        case 0x64:
          return;
        case 0x65:
          uint64_t v33 = a1;
          uint64_t v34 = this;
          goto LABEL_258;
        case 0x66:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1834;
          goto LABEL_3;
        case 0x67:
          return;
        case 0x68:
          return;
        case 0x69:
          return;
        case 0x6A:
          return;
        case 0x6B:
          char v35 = a1;
          uint64_t v36 = (unsigned int *)this;
          goto LABEL_274;
        case 0x6C:
          return;
        case 0x6D:
          return;
        case 0x6E:
          return;
        case 0x6F:
          return;
        case 0x70:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1919;
          goto LABEL_3;
        case 0x71:
          return;
        case 0x72:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1949;
          goto LABEL_3;
        case 0x73:
          return;
        case 0x74:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1960;
          goto LABEL_3;
        case 0x75:
          return;
        case 0x76:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2165;
          goto LABEL_3;
        case 0x77:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1966;
          goto LABEL_3;
        case 0x78:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2170;
          goto LABEL_3;
        case 0x79:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2175;
          goto LABEL_3;
        case 0x7A:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2180;
          goto LABEL_3;
        case 0x7B:
          return;
        case 0x7C:
          return;
        case 0x7D:
          return;
        case 0x7E:
          return;
        case 0x7F:
          return;
        case 0x80:
          return;
        case 0x81:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YA";
          goto LABEL_856;
        case 0x82:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YT";
          goto LABEL_856;
        case 0x83:
          int v37 = v6 + 1;
          char v38 = "TK";
          goto LABEL_328;
        case 0x84:
          int v37 = v6 + 1;
          char v38 = "Tk";
          goto LABEL_328;
        case 0x85:
          int v37 = v6 + 1;
          char v38 = "TH";
          goto LABEL_328;
        case 0x86:
          int v37 = v6 + 1;
          char v38 = "Th";
LABEL_328:
          return;
        case 0x87:
          return;
        case 0x88:
          return;
        case 0x89:
          return;
        case 0x8A:
          return;
        case 0x8B:
          return;
        case 0x8C:
          return;
        case 0x8D:
          return;
        case 0x8E:
          return;
        case 0x8F:
          return;
        case 0x90:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tm";
          goto LABEL_856;
        case 0x91:
          return;
        case 0x92:
          return;
        case 0x93:
          return;
        case 0x94:
          return;
        case 0x95:
          return;
        case 0x96:
          return;
        case 0x97:
          return;
        case 0x98:
          return;
        case 0x99:
          return;
        case 0x9A:
          return;
        case 0x9B:
          return;
        case 0x9C:
          return;
        case 0x9D:
          return;
        case 0x9E:
          return;
        case 0x9F:
          return;
        case 0xA0:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TO";
          goto LABEL_856;
        case 0xA1:
        case 0xE7:
          goto LABEL_858;
        case 0xA2:
          return;
        case 0xA3:
          return;
        case 0xA4:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "To";
          goto LABEL_856;
        case 0xA5:
          return;
        case 0xA6:
          return;
        case 0xA8:
          return;
        case 0xA9:
          return;
        case 0xAA:
          return;
        case 0xAB:
          return;
        case 0xAC:
          return;
        case 0xAD:
          return;
        case 0xAE:
          return;
        case 0xAF:
          return;
        case 0xB0:
          return;
        case 0xB1:
          return;
        case 0xB2:
          return;
        case 0xB3:
          return;
        case 0xB4:
          return;
        case 0xB5:
        case 0xE9:
        case 0x12D:
          goto LABEL_7;
        case 0xB6:
          return;
        case 0xB7:
          return;
        case 0xB8:
          return;
        case 0xB9:
          return;
        case 0xBA:
          return;
        case 0xBB:
          return;
        case 0xBC:
          return;
        case 0xBD:
          return;
        case 0xBE:
          return;
        case 0xBF:
          return;
        case 0xC0:
          return;
        case 0xC1:
          return;
        case 0xC2:
          return;
        case 0xC3:
          return;
        case 0xC4:
          return;
        case 0xC5:
          return;
        case 0xC6:
          return;
        case 0xC7:
          return;
        case 0xC8:
          return;
        case 0xC9:
          return;
        case 0xCA:
          return;
        case 0xCB:
          return;
        case 0xCC:
          return;
        case 0xCD:
          return;
        case 0xCE:
          return;
        case 0xCF:
          int v19 = v6 + 1;
          long long v17 = a1;
          uint64_t v18 = (unsigned int *)this;
LABEL_31:
          return;
        case 0xD0:
          return;
        case 0xD1:
          return;
        case 0xD2:
          return;
        case 0xD3:
          return;
        case 0xD4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3634;
          goto LABEL_3;
        case 0xD5:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3639;
          goto LABEL_3;
        case 0xD6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3645;
          goto LABEL_3;
        case 0xD7:
          return;
        case 0xD8:
          swift::Demangle::CharVector::append((unsigned int *)this + 3182, *a3, *((swift::Demangle::NodeFactory **)this + 1593));
          goto LABEL_858;
        case 0xD9:
          return;
        case 0xDA:
          return;
        case 0xDC:
        case 0xFE:
          return;
        case 0xDD:
        case 0x147:
          unsigned int v9 = (char **)((char *)this + 12728);
          size_t v10 = a3[1];
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = (char *)*a3;
          goto LABEL_857;
        case 0xDE:
          return;
        case 0xDF:
          return;
        case 0xE0:
          return;
        case 0xE1:
          uint64_t v33 = a1;
          uint64_t v34 = this;
LABEL_258:
          return;
        case 0xE2:
          return;
        case 0xE3:
          return;
        case 0xE4:
          return;
        case 0xE5:
          return;
        case 0xE6:
          return;
        case 0xE8:
          unsigned int v20 = v6 + 1;
          unsigned __int8 v21 = a1;
          int v22 = this;
LABEL_97:
          return;
        case 0xEB:
          return;
        case 0xEC:
          return;
        case 0xED:
          return;
        case 0xEE:
          return;
        case 0xEF:
          return;
        case 0xF0:
          return;
        case 0xF1:
          return;
        case 0xF2:
          return;
        case 0xF3:
          return;
        case 0xF4:
          return;
        case 0xF5:
          char v26 = a1;
          uint64_t v27 = (uint64_t *)this;
          int v28 = v6;
LABEL_213:
          return;
        case 0xF6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1839;
          goto LABEL_3;
        case 0xF7:
          return;
        case 0xF8:
          return;
        case 0xF9:
          return;
        case 0xFA:
          return;
        case 0xFB:
          return;
        case 0xFC:
          return;
        case 0xFD:
          return;
        case 0xFF:
          return;
        case 0x100:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3281;
          goto LABEL_3;
        case 0x101:
          return;
        case 0x102:
          return;
        case 0x103:
          return;
        case 0x104:
          return;
        case 0x105:
          return;
        case 0x106:
          return;
        case 0x107:
          return;
        case 0x108:
          return;
        case 0x109:
          return;
        case 0x10A:
          return;
        case 0x10B:
          return;
        case 0x10C:
          return;
        case 0x10D:
          return;
        case 0x10E:
          return;
        case 0x10F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Ya";
          goto LABEL_856;
        case 0x110:
          return;
        case 0x111:
          return;
        case 0x112:
          return;
        case 0x113:
          return;
        case 0x114:
          return;
        case 0x115:
          return;
        case 0x116:
          return;
        case 0x117:
          return;
        case 0x118:
          return;
        case 0x119:
          return;
        case 0x11A:
          return;
        case 0x11B:
          return;
        case 0x11C:
          return;
        case 0x11D:
          return;
        case 0x11E:
          return;
        case 0x11F:
          return;
        case 0x120:
          return;
        case 0x121:
          return;
        case 0x122:
          return;
        case 0x123:
          return;
        case 0x124:
          return;
        case 0x125:
          return;
        case 0x126:
          return;
        case 0x127:
          return;
        case 0x128:
          return;
        case 0x129:
          return;
        case 0x12A:
          return;
        case 0x12B:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3792;
          goto LABEL_3;
        case 0x12C:
          return;
        case 0x12E:
          return;
        case 0x12F:
          return;
        case 0x130:
          return;
        case 0x131:
          return;
        case 0x132:
          return;
        case 0x133:
          return;
        case 0x134:
          return;
        case 0x135:
          return;
        case 0x136:
          return;
        case 0x137:
          return;
        case 0x138:
          return;
        case 0x139:
          return;
        case 0x13A:
          return;
        case 0x13B:
          return;
        case 0x13C:
          return;
        case 0x13D:
          return;
        case 0x13E:
          return;
        case 0x13F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tu";
          goto LABEL_856;
        case 0x140:
          int v39 = v6 + 1;
          uint64_t v40 = "TJ";
          char v41 = a1;
          uint64_t v42 = this;
          size_t v43 = 2;
          goto LABEL_840;
        case 0x141:
          char v35 = a1;
          uint64_t v36 = (unsigned int *)this;
LABEL_274:
          return;
        case 0x142:
          return;
        case 0x143:
          return;
        case 0x144:
          int v39 = v6 + 1;
          uint64_t v40 = "TJV";
          char v41 = a1;
          uint64_t v42 = this;
          size_t v43 = 3;
LABEL_840:
          return;
        case 0x145:
          return;
        case 0x146:
          return;
        case 0x148:
          return;
        case 0x149:
          return;
        case 0x14A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "HF";
LABEL_856:
          size_t v10 = 2;
          goto LABEL_857;
        case 0x14B:
          return;
        case 0x14C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Twb";
          size_t v10 = 3;
          goto LABEL_857;
        case 0x14D:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwB";
          size_t v10 = 3;
          goto LABEL_857;
        case 0x14E:
          return;
        case 0x14F:
          return;
        case 0x150:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3931;
          goto LABEL_3;
        case 0x151:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3937;
          goto LABEL_3;
        case 0x152:
          return;
        case 0x153:
          return;
        case 0x154:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwS";
          size_t v10 = 3;
LABEL_857:
          swift::Demangle::CharVector::append(v9, v12, v10, v11);
LABEL_858:
          *(_DWORD *)a1 = 0;
          goto LABEL_859;
        case 0x155:
        case 0x156:
          *(_DWORD *)a1 = 11;
LABEL_859:
          a1[1] = 0;
          *((_DWORD *)a1 + 4) = 0;
          return;
        case 0x157:
          return;
        case 0x158:
          return;
        case 0x159:
          return;
        case 0x15A:
          return;
        case 0x15B:
          uint64_t v8 = 4;
LABEL_7:
          a3 = (size_t *)(*((uint64_t (**)(void, uint64_t, size_t))this + 1603))(*((void *)this + 1604), v8, *a3);
          if (++v6 == 1025) {
            break;
          }
          continue;
        case 0x15C:
          return;
        case 0x15D:
          return;
        case 0x15E:
          return;
        case 0x15F:
          return;
        case 0x160:
          return;
        case 0x161:
          return;
        case 0x162:
          return;
        default:
          *(_DWORD *)a1 = 4;
          a1[1] = (uint64_t)a3;
          int v5 = 401;
          goto LABEL_3;
      }
      break;
    }
  }
  *(_DWORD *)a1 = 3;
  a1[1] = (uint64_t)a3;
  int v5 = 392;
LABEL_3:
  *((_DWORD *)a1 + 4) = v5;
}

void swift::Demangle::mangleNode()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v5 = v4;
  if (!v0)
  {
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(_DWORD *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  int v6 = v3;
  uint64_t v7 = v2;
  uint64_t v8 = v1;
  unsigned int v9 = (size_t *)v0;
  char v24 = 0;
  v23[1540] = 0;
  int v22 = v3;
  v23[1539] = 0;
  char v27 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  char v30 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  char v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  char v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  char v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  char v42 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  char v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  char v48 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v51 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v54 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v57 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  char v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  char v63 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v66 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  bzero(v23, 0x3011uLL);
  int v70 = 1065353216;
  char v73 = v6;
  size_t v10 = (void *)v6[1];
  if (!v10 || (unint64_t)(v10 + 4) > v6[2])
  {
    unint64_t v11 = 2 * v6[4];
    if (v11 <= 0x21) {
      unint64_t v11 = 33;
    }
    v6[4] = v11;
    unint64_t v12 = v11 + 8;
    int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *int v13 = v6[3];
    size_t v10 = v13 + 1;
    v6[2] = (char *)v13 + v12;
    void v6[3] = v13;
  }
  v6[1] = v10 + 4;
  BOOL v71 = v10;
  uint64_t v72 = 0x2000000000;
  char v74 = 1;
  long long v75 = 0u;
  long long v76 = 0u;
  memset(v77, 0, sizeof(v77));
  uint64_t v78 = v8;
  uint64_t v79 = v7;
  if (v20)
  {
    *(_OWORD *)uint64_t v5 = v20;
    uint64_t v14 = v21;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = v14;
    uint64_t v15 = (void *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1)) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = v71;
    uint64_t v19 = v72;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = v18;
    *(void *)(v5 + 32) = v19;
    uint64_t v15 = (void *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1))
    {
      do
      {
LABEL_9:
        char v16 = (void *)*v15;
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
  }
  long long v17 = (void *)*((void *)&v67 + 1);
  *((void *)&v67 + 1) = 0;
  if (v17) {
    operator delete(v17);
  }
}

uint64_t swift::Demangle::isSpecialized(swift::Demangle *this, swift::Demangle::Node *a2)
{
  if (this)
  {
    while (2)
    {
      uint64_t v2 = 1;
      switch(*((_WORD *)this + 8))
      {
        case 0:
        case 0x18:
        case 0x1D:
        case 0x21:
        case 0x32:
        case 0x33:
        case 0x3D:
        case 0x46:
        case 0x4C:
        case 0x62:
        case 0x75:
        case 0x7D:
        case 0x98:
        case 0xA7:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xCC:
        case 0xD7:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xEA:
        case 0xFA:
        case 0xFB:
        case 0xFE:
        case 0x101:
          int v4 = *((unsigned __int8 *)this + 18);
          if ((v4 - 1) < 2) {
            goto LABEL_5;
          }
          if (v4 != 5) {
            return 0;
          }
          uint64_t v2 = *((unsigned int *)this + 2);
          if (!v2) {
            return v2;
          }
          this = *(swift::Demangle **)this;
LABEL_5:
          this = *(swift::Demangle **)this;
          if (this) {
            continue;
          }
          return 0;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x53:
          return v2;
        case 0x47:
          int v5 = *((unsigned __int8 *)this + 18);
          if (v5 == 2) {
            goto LABEL_4;
          }
          if (v5 != 5 || *((_DWORD *)this + 2) < 2u) {
            return 0;
          }
          this = *(swift::Demangle **)this;
LABEL_4:
          this = (swift::Demangle *)((char *)this + 8);
          goto LABEL_5;
        default:
          return 0;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::getUnspecialized@<X0>(unint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = this;
  while (2)
  {
    uint64_t v7 = (swift::Demangle::Node *)*(unsigned __int16 *)(v5 + 16);
    if ((v7 - 13) < 6)
    {
      int v8 = *(unsigned __int8 *)(v5 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4090;
          goto LABEL_72;
        }
        uint64_t v5 = *(void *)v5;
      }
      uint64_t v9 = *(void *)v5;
      if (*(_WORD *)(*(void *)v5 + 16) != 232)
      {
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v9;
        int v13 = 4092;
        goto LABEL_72;
      }
      int v10 = *(unsigned __int8 *)(v9 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v9 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v9;
          int v13 = 4093;
          goto LABEL_72;
        }
        uint64_t v9 = *(void *)v9;
      }
      uint64_t v5 = *(void *)v9;
      goto LABEL_13;
    }
    switch(*(_WORD *)(v5 + 16))
    {
      case 0:
      case 0x1D:
      case 0x21:
      case 0x32:
      case 0x33:
      case 0x46:
      case 0x4C:
      case 0x62:
      case 0x75:
      case 0x7D:
      case 0x98:
      case 0xB2:
      case 0xB3:
      case 0xCC:
      case 0xD7:
      case 0xDA:
      case 0xDC:
      case 0xFA:
      case 0xFB:
      case 0xFE:
      case 0x101:
        unsigned int v14 = *(unsigned __int8 *)(v5 + 18);
        if (v14 != 1)
        {
          if (v14 == 5)
          {
            unsigned int v14 = *(_DWORD *)(v5 + 8);
          }
          else if (v14 == 2)
          {
            unsigned int v14 = 2;
          }
          else
          {
            unsigned int v14 = 0;
          }
        }
        goto LABEL_31;
      case 0x13:
        int v11 = *(unsigned __int8 *)(v5 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_20;
        }
        if (v11 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_20:
          uint64_t v5 = *(void *)v5;
          int v12 = *(unsigned __int16 *)(v5 + 16);
          if (v12 != 29 && v12 != 76)
          {
            *(_DWORD *)a3 = 1;
            *(void *)(a3 + 8) = v5;
            int v13 = 4113;
            goto LABEL_72;
          }
LABEL_13:
          this = swift::Demangle::isSpecialized((swift::Demangle *)v5, v7);
          if ((this & 1) == 0)
          {
LABEL_60:
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(void *)(a3 + 24) = v5;
            return this;
          }
          continue;
        }
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v5;
        int v13 = 4108;
LABEL_72:
        *(_DWORD *)(a3 + 16) = v13;
        return this;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        unsigned int v14 = 2;
LABEL_31:
        this = swift::Demangle::NodeFactory::createNode(a2, (__int16)v7);
        char v16 = (swift::Demangle::Node *)this;
        int v17 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v18 = (swift::Demangle **)v5;
        if ((v17 - 1) < 2) {
          goto LABEL_35;
        }
        if (v17 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4069;
          goto LABEL_72;
        }
        uint64_t v18 = *(swift::Demangle ***)v5;
LABEL_35:
        uint64_t v19 = *v18;
        if (swift::Demangle::isSpecialized(*v18, v15))
        {
          this = ((uint64_t (*)(swift::Demangle *__hidden, swift::Demangle::Node *, swift::Demangle::NodeFactory *))swift::Demangle::getUnspecialized)(v19, a2, v20);
          if (*(_DWORD *)a3) {
            return this;
          }
          uint64_t v19 = *(swift::Demangle **)(a3 + 24);
        }
        this = swift::Demangle::Node::addChild(v16, v19, a2);
        if (v14 < 2)
        {
LABEL_82:
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 0;
          *(void *)(a3 + 24) = v16;
          return this;
        }
        uint64_t v21 = v14;
        unint64_t v22 = 1;
        while (1)
        {
          unint64_t v24 = *(unsigned __int8 *)(v5 + 18);
          if (v24 == 2)
          {
            if (v24 > v22) {
              goto LABEL_47;
            }
          }
          else if (v24 == 5 && *(unsigned int *)(v5 + 8) > v22)
          {
LABEL_47:
            unsigned int v25 = v24 - 1;
            uint64_t v26 = v5;
            if (v25 >= 2) {
              uint64_t v26 = *(void *)v5;
            }
            char v23 = *(swift::Demangle::Node **)(v26 + 8 * v22);
            goto LABEL_41;
          }
          char v23 = 0;
LABEL_41:
          this = swift::Demangle::Node::addChild(v16, v23, a2);
          if (v21 == ++v22) {
            goto LABEL_82;
          }
        }
      case 0x47:
        int v27 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v28 = v5;
        if (v27 == 2) {
          goto LABEL_57;
        }
        if (v27 != 5 || *(_DWORD *)(v5 + 8) <= 1u)
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4120;
          goto LABEL_72;
        }
        uint64_t v28 = *(void *)v5;
LABEL_57:
        uint64_t v29 = *(swift::Demangle **)(v28 + 8);
        this = swift::Demangle::isSpecialized(v29, v7);
        if ((this & 1) == 0) {
          goto LABEL_60;
        }
        this = (unint64_t)swift::Demangle::getUnspecialized((uint64_t *)&v37, v29, a2, v30);
        if (v37)
        {
          *(_OWORD *)a3 = v37;
          *(void *)(a3 + 16) = v38;
          return this;
        }
        unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a2, 71);
        char v16 = Node;
        int v34 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v35 = (swift::Demangle::Node **)v5;
        if ((v34 - 1) < 2) {
          goto LABEL_77;
        }
        if (v34 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v35 = *(swift::Demangle::Node ***)v5;
LABEL_77:
          char v36 = *v35;
        }
        else
        {
          char v36 = 0;
        }
        swift::Demangle::Node::addChild(Node, v36, a2);
        this = swift::Demangle::Node::addChild(v16, v39, a2);
        if (*(unsigned char *)(v5 + 18) == 5 && *(_DWORD *)(v5 + 8) == 3) {
          this = swift::Demangle::Node::addChild(v16, *(swift::Demangle::Node **)(*(void *)v5 + 16), a2);
        }
        goto LABEL_82;
      case 0x53:
        int v31 = *(unsigned __int8 *)(v5 + 18);
        if ((v31 - 1) < 2) {
          goto LABEL_65;
        }
        if (v31 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_65:
          uint64_t v32 = *(void *)v5;
          if (*(_WORD *)(*(void *)v5 + 16) == 232)
          {
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(void *)(a3 + 24) = v32;
            return this;
          }
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v32;
          int v13 = 4103;
        }
        else
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4101;
        }
        goto LABEL_72;
      default:
        *(_DWORD *)a3 = 5;
        *(void *)(a3 + 8) = v5;
        int v13 = 4137;
        goto LABEL_72;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAnonymousContext@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v11 = *(swift::Demangle::Node ***)a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_36;
  }
LABEL_19:
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  unsigned int v14 = (char *)this[1591];
  if (v12 >= v13)
  {
    uint64_t v15 = this[1593];
    char v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v18 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v18 <= v17)
      {
        v15[1] = v18;
        LODWORD(v19) = 1;
LABEL_34:
        *((_DWORD *)this + 3185) = v13 + v19;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      char v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)v23 + v22;
      *char v23 = v15[3];
      char v16 = (char *)(v23 + 1);
      v15[2] = v24;
      void v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if (v13) {
      memcpy(v16, this[1591], v13);
    }
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    unsigned int v14 = v16;
    unsigned int v12 = *((_DWORD *)this + 3184);
    goto LABEL_34;
  }
LABEL_35:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 121;
LABEL_36:
  unint64_t result = swift::Demangle::CharVector::append((char **)this + 1591, "XZ", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleAnyProtocolConformanceList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v13 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    unsigned int v7 = 0;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    if (v6 != 5)
    {
      uint64_t v9 = 0;
      if (!v7) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)a2;
    goto LABEL_9;
  }
  uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
  if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
  {
LABEL_19:
    BOOL v12 = 1;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_14:
  int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
    {
      BOOL v12 = v13;
      goto LABEL_20;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleArgumentTuple@<X0>(unsigned int *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    unsigned int v7 = *a2;
    goto LABEL_7;
  }
  unsigned int v7 = 0;
LABEL_7:
  if (*((_WORD *)v7 + 8) == 232)
  {
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        unsigned int v7 = 0;
        goto LABEL_14;
      }
      unsigned int v7 = *(swift::Demangle::Node **)v7;
    }
    unsigned int v7 = *(swift::Demangle::Node **)v7;
  }
LABEL_14:
  if (*((_WORD *)v7 + 8) == 223)
  {
    int v9 = *((unsigned __int8 *)v7 + 18);
    if ((v9 - 1) >= 2 && (v9 != 5 || !*((_DWORD *)v7 + 2)))
    {
      unsigned int v11 = this[3184];
      size_t v12 = this[3185];
      BOOL v13 = (char *)*((void *)this + 1591);
      if (v11 < v12)
      {
LABEL_38:
        v4[3184] = v11 + 1;
        v13[v11] = 121;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        return this;
      }
      unsigned int v14 = (void *)*((void *)this + 1593);
      uint64_t v15 = (char *)v14[1];
      if (&v13[v12] == v15)
      {
        unint64_t v17 = (unint64_t)&v13[v12 + 1];
        unint64_t v16 = v14[2];
        if (v17 <= v16)
        {
          v14[1] = v17;
          LODWORD(v18) = 1;
LABEL_37:
          v4[3185] = v12 + v18;
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v16 = v14[2];
      }
      if ((2 * v12) <= 4) {
        uint64_t v18 = 4;
      }
      else {
        uint64_t v18 = (2 * v12);
      }
      size_t v19 = v18 + v12;
      if (!v15 || (unint64_t)&v15[v19] > v16)
      {
        unint64_t v20 = 2 * v14[4];
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        v14[4] = v20;
        unint64_t v21 = v20 + 8;
        this = (unsigned int *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        unint64_t v22 = (char *)this + v21;
        *(void *)this = v14[3];
        uint64_t v15 = (char *)(this + 2);
        v14[2] = v22;
        void v14[3] = this;
      }
      v14[1] = &v15[v19];
      if (v12) {
        this = (unsigned int *)memcpy(v15, *((const void **)v4 + 1591), v12);
      }
      *((void *)v4 + 1591) = v15;
      LODWORD(v12) = v4[3185];
      BOOL v13 = v15;
      unsigned int v11 = v4[3184];
      goto LABEL_37;
    }
  }
  unsigned int v10 = a3 + 1;
}

uint64_t anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v17 = 0uLL;
  LOBYTE(v18) = 0;
  if (result) {
    goto LABEL_23;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  unsigned int v10 = (swift::Demangle::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unsigned int v10 = *(swift::Demangle::Node ***)a2;
      goto LABEL_10;
    }
    unsigned int v10 = 0;
  }
  if (v9 == 1)
  {
    size_t v12 = (swift::Demangle::Node **)((char *)a2 + 8);
    if (v10 != v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (v9 == 2)
  {
    size_t v12 = (swift::Demangle::Node **)((char *)a2 + 16);
    if (v10 != v12) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::CharVector::append(this + 1591, "Qa", 2uLL, this[1593]);
    unint64_t v14 = (unint64_t)this[1585];
    if (v14 > 0xF)
    {
      int v16 = *((_DWORD *)this + 3178) + 16;
      long long v19 = v17;
      uint64_t v20 = v18;
      int v21 = v16;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v19, &v19);
    }
    else
    {
      this[1585] = (char *)(v14 + 1);
      uint64_t v15 = &this[3 * v14 + 1537];
      *(_OWORD *)uint64_t v15 = v17;
      *((unsigned char *)v15 + 16) = v18;
    }
LABEL_23:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (v9 != 5)
  {
    size_t v12 = 0;
    if (!v10) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)a2;
LABEL_10:
  size_t v12 = (swift::Demangle::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
  if (v10 == v12) {
    goto LABEL_20;
  }
LABEL_17:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_20;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDefaultAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "TM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  uint64_t v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    uint64_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "fMa", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleBaseWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "XK", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "fMb", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleBoundGenericEnum@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v9 = *(swift::Demangle::Node **)a2;
LABEL_5:
    unint64_t v10 = *(uint64_t **)v9;
    goto LABEL_7;
  }
  unint64_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_11:
    size_t v12 = (uint64_t *)*v10;
    goto LABEL_13;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    unint64_t v10 = (uint64_t *)*v10;
    goto LABEL_11;
  }
  size_t v12 = 0;
LABEL_13:
  if (*((_WORD *)v12 + 8) != 61)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 843;
    return this;
  }
  int v13 = *((unsigned __int8 *)v12 + 18);
  unint64_t v14 = (int ***)v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 != 5)
    {
      uint64_t v15 = 0;
      if (v13 == 2)
      {
LABEL_26:
        uint64_t v16 = v12[1];
        goto LABEL_29;
      }
      goto LABEL_23;
    }
    if (!*((_DWORD *)v12 + 2))
    {
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    unint64_t v14 = (int ***)*v12;
  }
  uint64_t v15 = *v14;
  if (v13 == 2) {
    goto LABEL_26;
  }
LABEL_23:
  if (v13 == 5 && *((_DWORD *)v12 + 2) >= 2u)
  {
    size_t v12 = (uint64_t *)*v12;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v16 = 0;
LABEL_29:
  if (*((_WORD *)v15 + 8) == 153 && v15[1] == (int *)5)
  {
    long long v17 = *v15;
    int v18 = *v17;
    int v19 = *((unsigned __int8 *)v17 + 4);
    BOOL v20 = v18 == 1718187859 && v19 == 116;
    if (v20 && *(_WORD *)(v16 + 16) == 101 && *(void *)(v16 + 8) == 8 && **(void **)v16 == 0x6C616E6F6974704FLL)
    {
      v24[0] = 0;
      v24[1] = 0;
      char v25 = 0;
      if (this) {
        goto LABEL_51;
      }
      int v22 = *((unsigned __int8 *)v5 + 18);
      if (v22 != 2)
      {
        if (v22 != 5 || *((_DWORD *)v5 + 2) < 2u)
        {
          char v23 = 0;
          goto LABEL_49;
        }
        uint64_t v5 = *(swift::Demangle::Node **)v5;
      }
      char v23 = (swift::Demangle::Node *)*((void *)v5 + 1);
LABEL_49:
      if (*(_DWORD *)a4) {
        return this;
      }
      swift::Demangle::CharVector::append((char **)(v6 + 12728), "Sg", 2uLL, *(void **)(v6 + 12744));
      this = (uint64_t)swift::Demangle::RemanglerBase::addSubstitution((char *)v6, (const swift::Demangle::SubstitutionEntry *)v24);
LABEL_51:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
  }
  unsigned int v21 = a3 + 1;
}

void *anonymous namespace'::Remangler::mangleBoundGenericFunction@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v28 = 0uLL;
  LOBYTE(v29) = 0;
  if (result) {
    goto LABEL_2;
  }
  uint64_t result = (void *)swift::Demangle::getUnspecialized((unint64_t)a2, (swift::Demangle::Node *)*this, (uint64_t)&v25);
  if (v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return result;
  }
  int v9 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      unsigned int v10 = *((_DWORD *)this + 3184);
      size_t v11 = *((unsigned int *)this + 3185);
      size_t v12 = (char *)this[1591];
      if (v10 < v11) {
        goto LABEL_24;
      }
      int v13 = this[1593];
      unint64_t v14 = (char *)v13[1];
      if (&v12[v11] == v14)
      {
        unint64_t v16 = (unint64_t)&v12[v11 + 1];
        unint64_t v15 = v13[2];
        if (v16 <= v15)
        {
          v13[1] = v16;
          LODWORD(v17) = 1;
LABEL_23:
          *((_DWORD *)this + 3185) = v11 + v17;
LABEL_24:
          *((_DWORD *)this + 3184) = v10 + 1;
          v12[v10] = 71;
          unint64_t v21 = (unint64_t)this[1585];
          if (v21 > 0xF)
          {
            int v23 = *((_DWORD *)this + 3178) + 16;
            long long v30 = v28;
            uint64_t v31 = v29;
            int v32 = v23;
            uint64_t result = std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v30, &v30);
          }
          else
          {
            this[1585] = (const void *)(v21 + 1);
            int v22 = &this[3 * v21 + 1537];
            *(_OWORD *)int v22 = v28;
            *((unsigned char *)v22 + 16) = v29;
          }
LABEL_2:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
      }
      else
      {
        unint64_t v15 = v13[2];
      }
      if ((2 * v11) <= 4) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = (2 * v11);
      }
      size_t v18 = v17 + v11;
      if (!v14 || (unint64_t)&v14[v18] > v15)
      {
        unint64_t v19 = 2 * v13[4];
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        v13[4] = v19;
        unint64_t v20 = v19 + 8;
        uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        void *result = v13[3];
        unint64_t v14 = (char *)(result + 1);
        v13[2] = (char *)result + v20;
        void v13[3] = result;
      }
      v13[1] = &v14[v18];
      if (v11) {
        uint64_t result = memcpy(v14, this[1591], v11);
      }
      this[1591] = v14;
      LODWORD(v11) = *((_DWORD *)this + 3185);
      size_t v12 = v14;
      unsigned int v10 = *((_DWORD *)this + 3184);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleBuiltinTypeName@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  uint64_t v6 = (const void **)(this + 12728);
  unsigned int v7 = *(_DWORD *)(this + 12736);
  size_t v8 = *(unsigned int *)(this + 12740);
  int v9 = *(char **)(this + 12728);
  if (v7 < v8) {
    goto LABEL_20;
  }
  unsigned int v10 = *(void **)(this + 12744);
  size_t v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    unint64_t v12 = v10[2];
LABEL_5:
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      v10[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (uint64_t)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      *(void *)this = v10[3];
      int v9 = (char *)(this + 8);
      v10[2] = this + v18;
      void v10[3] = this;
    }
    v10[1] = &v9[v15];
    if (v8) {
      this = (uint64_t)memcpy(v9, *v6, v8);
    }
    *(void *)(v4 + 12728) = v9;
    LODWORD(v8) = *(_DWORD *)(v4 + 12740);
    unsigned int v7 = *(_DWORD *)(v4 + 12736);
    goto LABEL_19;
  }
  unint64_t v13 = (unint64_t)&v9[v8 + 1];
  unint64_t v12 = v10[2];
  if (v13 > v12) {
    goto LABEL_5;
  }
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  uint64_t v20 = *(void *)a2;
  unint64_t v19 = *((void *)a2 + 1);
  switch(v19)
  {
    case 0xBuLL:
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x626F4A2E6E69746CLL) {
        goto LABEL_29;
      }
      int v22 = (char **)v6;
      char v23 = 106;
      goto LABEL_213;
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((void *)a2 + 1));
      if (!this)
      {
        int v22 = (char **)v6;
        char v23 = 119;
        goto LABEL_213;
      }
LABEL_29:
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x746E492E6E69746CLL) {
        goto LABEL_162;
      }
      goto LABEL_168;
    case 0x10uLL:
      if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 8) == 0x726F747563657845)
      {
        int v22 = (char **)v6;
        char v23 = 101;
        goto LABEL_213;
      }
      if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 8) == 0x6E656B6F544C4953)
      {
        int v22 = (char **)v6;
        char v23 = 116;
        goto LABEL_213;
      }
      goto LABEL_153;
    case 0x11uLL:
      this = memcmp(*(const void **)a2, "Builtin.PackIndex", *((void *)a2 + 1));
      if (!this)
      {
        int v22 = (char **)v6;
        char v23 = 80;
        goto LABEL_213;
      }
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x746E492E6E69746CLL) {
        goto LABEL_158;
      }
      goto LABEL_168;
    case 0x12uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x746E696F50776152
        || *(_WORD *)(v20 + 16) != 29285)
      {
        if (*(void *)v20 == 0x2E6E69746C697542
          && *(void *)(v20 + 8) == 0x726574694C746E49
          && *(_WORD *)(v20 + 16) == 27745)
        {
          int v22 = (char **)v6;
          char v23 = 73;
          goto LABEL_213;
        }
LABEL_153:
        if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 3) == 0x746E492E6E69746CLL)
        {
LABEL_168:
          uint64_t v74 = 11;
          if (v19 < 0xB) {
            uint64_t v74 = v19;
          }
          long long v75 = (void *)(v20 + v74);
          size_t v76 = v19 - v74;
          uint64_t v77 = (char **)v6;
          char v78 = 105;
        }
        else
        {
          if (v19 < 0xE)
          {
LABEL_162:
            if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x6365562E6E69746CLL)
            {
LABEL_166:
              *(_DWORD *)a3 = 9;
              *(void *)(a3 + 8) = a2;
              int v73 = 949;
LABEL_167:
              *(_DWORD *)(a3 + 16) = v73;
              return this;
            }
            uint64_t v79 = 11;
            if (v19 < 0xB) {
              uint64_t v79 = v19;
            }
            unint64_t v80 = (char *)(v20 + v79);
            unint64_t v81 = v19 - v79;
            if (v19 >= 0xC)
            {
              unint64_t v88 = memchr(v80, 120, v19 - v79);
              unint64_t v82 = v88 - v80;
              if (!v88) {
                unint64_t v82 = -1;
              }
            }
            else
            {
              unint64_t v82 = -1;
            }
            BOOL v89 = v81 > v82;
            if (v81 >= v82) {
              size_t v90 = v82;
            }
            else {
              size_t v90 = v81;
            }
            unint64_t v91 = (unsigned __int16 *)&v80[v90];
            uint64_t v92 = v89;
            if (v89) {
              unint64_t v91 = (unsigned __int16 *)((char *)v91 + 1);
            }
            unint64_t v138 = v91;
            size_t v139 = v81 - v90 - v92;
            if (v139 == 10
              && ((uint64_t v93 = *(void *)v91, v94 = v91[4], v93 == 0x746E696F50776152) ? (v95 = v94 == 29285) : (v95 = 0),
                  v95))
            {
              uint64_t v99 = (char **)v6;
              char v100 = 112;
            }
            else
            {
              if (llvm::StringRef::consume_front((const void **)&v138, "FPIEEE", 6uLL))
              {
                unint64_t v96 = (char **)v6;
                char v97 = 102;
              }
              else
              {
                this = llvm::StringRef::consume_front((const void **)&v138, "Int", 3uLL);
                if (!this)
                {
                  *(_DWORD *)a3 = 8;
                  *(void *)(a3 + 8) = a2;
                  int v73 = 945;
                  goto LABEL_167;
                }
                unint64_t v96 = (char **)v6;
                char v97 = 105;
              }
              unint64_t v98 = swift::Demangle::RemanglerBuffer::operator<<(v96, v97);
              swift::Demangle::CharVector::append(v98, v138, v139, v98[2]);
              uint64_t v99 = v98;
              char v100 = 95;
            }
            swift::Demangle::RemanglerBuffer::operator<<(v99, v100);
            swift::Demangle::CharVector::append((char **)v6, "Bv", 2uLL, *(void **)(v4 + 12744));
            char v85 = *(char **)(v4 + 12744);
            uint64_t v84 = (char **)v6;
            __int16 v86 = v80;
            size_t v87 = v90;
            goto LABEL_212;
          }
LABEL_158:
          if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 6) != 0x4545454950462E6ELL) {
            goto LABEL_162;
          }
          uint64_t v83 = 14;
          if (v19 < 0xE) {
            uint64_t v83 = v19;
          }
          long long v75 = (void *)(v20 + v83);
          size_t v76 = v19 - v83;
          uint64_t v77 = (char **)v6;
          char v78 = 102;
        }
        uint64_t v84 = swift::Demangle::RemanglerBuffer::operator<<(v77, v78);
        uint64_t v6 = (const void **)v84;
        char v85 = v84[2];
        __int16 v86 = v75;
        size_t v87 = v76;
LABEL_212:
        swift::Demangle::CharVector::append(v84, v86, v87, v85);
        int v22 = (char **)v6;
        char v23 = 95;
LABEL_213:
        this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<(v22, v23);
        goto LABEL_214;
      }
      unsigned int v101 = *(_DWORD *)(v4 + 12736);
      size_t v102 = *(unsigned int *)(v4 + 12740);
      unsigned __int8 v103 = *(char **)(v4 + 12728);
      if (v101 < v102) {
        goto LABEL_257;
      }
      uint64_t v104 = *(void **)(v4 + 12744);
      size_t v105 = (char *)v104[1];
      if (&v103[v102] == v105)
      {
        unint64_t v123 = (unint64_t)&v103[v102 + 1];
        unint64_t v106 = v104[2];
        if (v123 <= v106)
        {
          v104[1] = v123;
          LODWORD(v124) = 1;
LABEL_256:
          *(_DWORD *)(v4 + 12740) = v102 + v124;
LABEL_257:
          *(_DWORD *)(v4 + 12736) = v101 + 1;
          v103[v101] = 112;
          goto LABEL_214;
        }
      }
      else
      {
        unint64_t v106 = v104[2];
      }
      if ((2 * v102) <= 4) {
        uint64_t v124 = 4;
      }
      else {
        uint64_t v124 = (2 * v102);
      }
      size_t v125 = v124 + v102;
      if (!v105 || (unint64_t)&v105[v125] > v106)
      {
        unint64_t v126 = 2 * v104[4];
        if (v126 <= v125 + 1) {
          unint64_t v126 = v125 + 1;
        }
        v104[4] = v126;
        unint64_t v127 = v126 + 8;
        this = (uint64_t)malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        *(void *)this = v104[3];
        size_t v105 = (char *)(this + 8);
        v104[2] = this + v127;
        v104[3] = this;
      }
      v104[1] = &v105[v125];
      if (v102) {
        this = (uint64_t)memcpy(v105, *v6, v102);
      }
      *(void *)(v4 + 12728) = v105;
      LODWORD(v102) = *(_DWORD *)(v4 + 12740);
      unsigned __int8 v103 = v105;
      unsigned int v101 = *(_DWORD *)(v4 + 12736);
      goto LABEL_256;
    case 0x14uLL:
      if (*(void *)v20 == 0x2E6E69746C697542
        && *(void *)(v20 + 8) == 0x624F656764697242
        && *(_DWORD *)(v20 + 16) == 1952671082)
      {
        unsigned int v107 = *(_DWORD *)(v4 + 12736);
        size_t v108 = *(unsigned int *)(v4 + 12740);
        int v109 = *(char **)(v4 + 12728);
        if (v107 < v108)
        {
LABEL_271:
          *(_DWORD *)(v4 + 12736) = v107 + 1;
          v109[v107] = 98;
          goto LABEL_214;
        }
        unint64_t v110 = *(void **)(v4 + 12744);
        int v111 = (char *)v110[1];
        if (&v109[v108] == v111)
        {
          unint64_t v128 = (unint64_t)&v109[v108 + 1];
          unint64_t v112 = v110[2];
          if (v128 <= v112)
          {
            v110[1] = v128;
            LODWORD(v129) = 1;
LABEL_270:
            *(_DWORD *)(v4 + 12740) = v108 + v129;
            goto LABEL_271;
          }
        }
        else
        {
          unint64_t v112 = v110[2];
        }
        if ((2 * v108) <= 4) {
          uint64_t v129 = 4;
        }
        else {
          uint64_t v129 = (2 * v108);
        }
        size_t v130 = v129 + v108;
        if (!v111 || (unint64_t)&v111[v130] > v112)
        {
          unint64_t v131 = 2 * v110[4];
          if (v131 <= v130 + 1) {
            unint64_t v131 = v130 + 1;
          }
          v110[4] = v131;
          unint64_t v132 = v131 + 8;
          this = (uint64_t)malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
          *(void *)this = v110[3];
          int v111 = (char *)(this + 8);
          v110[2] = this + v132;
          v110[3] = this;
        }
        v110[1] = &v111[v130];
        if (v108) {
          this = (uint64_t)memcpy(v111, *v6, v108);
        }
        *(void *)(v4 + 12728) = v111;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        int v109 = v111;
        unsigned int v107 = *(_DWORD *)(v4 + 12736);
        goto LABEL_270;
      }
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x624F65766974614ELL
        || *(_DWORD *)(v20 + 16) != 1952671082)
      {
        goto LABEL_153;
      }
      unsigned int v36 = *(_DWORD *)(v4 + 12736);
      size_t v37 = *(unsigned int *)(v4 + 12740);
      uint64_t v38 = *(char **)(v4 + 12728);
      if (v36 >= v37)
      {
        char v39 = *(void **)(v4 + 12744);
        uint64_t v40 = (char *)v39[1];
        if (&v38[v37] == v40)
        {
          unint64_t v133 = (unint64_t)&v38[v37 + 1];
          unint64_t v41 = v39[2];
          if (v133 <= v41)
          {
            v39[1] = v133;
            LODWORD(v134) = 1;
LABEL_289:
            *(_DWORD *)(v4 + 12740) = v37 + v134;
            goto LABEL_290;
          }
        }
        else
        {
          unint64_t v41 = v39[2];
        }
        if ((2 * v37) <= 4) {
          uint64_t v134 = 4;
        }
        else {
          uint64_t v134 = (2 * v37);
        }
        size_t v135 = v134 + v37;
        if (!v40 || (unint64_t)&v40[v135] > v41)
        {
          unint64_t v136 = 2 * v39[4];
          if (v136 <= v135 + 1) {
            unint64_t v136 = v135 + 1;
          }
          v39[4] = v136;
          unint64_t v137 = v136 + 8;
          this = (uint64_t)malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
          *(void *)this = v39[3];
          uint64_t v40 = (char *)(this + 8);
          v39[2] = this + v137;
          v39[3] = this;
        }
        v39[1] = &v40[v135];
        if (v37) {
          this = (uint64_t)memcpy(v40, *v6, v37);
        }
        *(void *)(v4 + 12728) = v40;
        LODWORD(v37) = *(_DWORD *)(v4 + 12740);
        uint64_t v38 = v40;
        unsigned int v36 = *(_DWORD *)(v4 + 12736);
        goto LABEL_289;
      }
LABEL_290:
      *(_DWORD *)(v4 + 12736) = v36 + 1;
      v38[v36] = 111;
LABEL_214:
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return this;
    case 0x15uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x4F6E776F6E6B6E55
        || *(void *)(v20 + 13) != 0x7463656A624F6E77)
      {
        goto LABEL_153;
      }
      unsigned int v44 = *(_DWORD *)(v4 + 12736);
      size_t v45 = *(unsigned int *)(v4 + 12740);
      uint64_t v46 = *(char **)(v4 + 12728);
      if (v44 < v45) {
        goto LABEL_229;
      }
      uint64_t v47 = *(void **)(v4 + 12744);
      char v48 = (char *)v47[1];
      if (&v46[v45] == v48)
      {
        unint64_t v113 = (unint64_t)&v46[v45 + 1];
        unint64_t v49 = v47[2];
        if (v113 <= v49)
        {
          v47[1] = v113;
          LODWORD(v114) = 1;
          goto LABEL_228;
        }
      }
      else
      {
        unint64_t v49 = v47[2];
      }
      if ((2 * v45) <= 4) {
        uint64_t v114 = 4;
      }
      else {
        uint64_t v114 = (2 * v45);
      }
      size_t v115 = v114 + v45;
      if (!v48 || (unint64_t)&v48[v115] > v49)
      {
        unint64_t v116 = 2 * v47[4];
        if (v116 <= v115 + 1) {
          unint64_t v116 = v115 + 1;
        }
        v47[4] = v116;
        unint64_t v117 = v116 + 8;
        this = (uint64_t)malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
        *(void *)this = v47[3];
        char v48 = (char *)(this + 8);
        v47[2] = this + v117;
        v47[3] = this;
      }
      v47[1] = &v48[v115];
      if (v45) {
        this = (uint64_t)memcpy(v48, *v6, v45);
      }
      *(void *)(v4 + 12728) = v48;
      LODWORD(v45) = *(_DWORD *)(v4 + 12740);
      uint64_t v46 = v48;
      unsigned int v44 = *(_DWORD *)(v4 + 12736);
LABEL_228:
      *(_DWORD *)(v4 + 12740) = v45 + v114;
LABEL_229:
      *(_DWORD *)(v4 + 12736) = v44 + 1;
      v46[v44] = 79;
      goto LABEL_214;
    case 0x19uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x6156656661736E55
        || *(void *)(v20 + 16) != 0x656666754265756CLL
        || *(unsigned char *)(v20 + 24) != 114)
      {
        goto LABEL_153;
      }
      unsigned int v53 = *(_DWORD *)(v4 + 12736);
      size_t v54 = *(unsigned int *)(v4 + 12740);
      uint64_t v55 = *(char **)(v4 + 12728);
      if (v53 < v54) {
        goto LABEL_243;
      }
      uint64_t v56 = *(void **)(v4 + 12744);
      char v57 = (char *)v56[1];
      if (&v55[v54] == v57)
      {
        unint64_t v118 = (unint64_t)&v55[v54 + 1];
        unint64_t v58 = v56[2];
        if (v118 <= v58)
        {
          v56[1] = v118;
          LODWORD(v119) = 1;
          goto LABEL_242;
        }
      }
      else
      {
        unint64_t v58 = v56[2];
      }
      if ((2 * v54) <= 4) {
        uint64_t v119 = 4;
      }
      else {
        uint64_t v119 = (2 * v54);
      }
      size_t v120 = v119 + v54;
      if (!v57 || (unint64_t)&v57[v120] > v58)
      {
        unint64_t v121 = 2 * v56[4];
        if (v121 <= v120 + 1) {
          unint64_t v121 = v120 + 1;
        }
        v56[4] = v121;
        unint64_t v122 = v121 + 8;
        this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
        *(void *)this = v56[3];
        char v57 = (char *)(this + 8);
        void v56[2] = this + v122;
        v56[3] = this;
      }
      v56[1] = &v57[v120];
      if (v54) {
        this = (uint64_t)memcpy(v57, *v6, v54);
      }
      *(void *)(v4 + 12728) = v57;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      uint64_t v55 = v57;
      unsigned int v53 = *(_DWORD *)(v4 + 12736);
LABEL_242:
      *(_DWORD *)(v4 + 12740) = v54 + v119;
LABEL_243:
      *(_DWORD *)(v4 + 12736) = v53 + 1;
      v55[v53] = 66;
      goto LABEL_214;
    case 0x1BuLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x41746C7561666544
        || *(void *)(v20 + 16) != 0x726F7453726F7463
        || *(void *)(v20 + 19) != 0x656761726F745372)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 68;
      goto LABEL_213;
    case 0x1DuLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x6661736E55776152
        || *(void *)(v20 + 16) != 0x756E69746E6F4365
        || *(void *)(v20 + 21) != 0x6E6F697461756E69)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 99;
      goto LABEL_213;
    case 0x29uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x75616665446E6F4ELL
        || *(void *)(v20 + 16) != 0x697274736944746CLL
        || *(void *)(v20 + 24) != 0x7463416465747562
        || *(void *)(v20 + 32) != 0x6761726F7453726FLL
        || *(unsigned char *)(v20 + 40) != 101)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 100;
      goto LABEL_213;
    default:
      if (v19 < 0xB) {
        goto LABEL_166;
      }
      goto LABEL_153;
  }
}

void *anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>(swift::Demangle::NodeFactory **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  size_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5)
    {
LABEL_11:
      switch(v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if (v12 != 1)
            {
              if (v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if (v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2;
              }
            }
            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1) {
              goto LABEL_29;
            }
          }
        case 5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7) {
            goto LABEL_16;
          }
          break;
        case 2:
          uint64_t v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      BOOL v16 = (char **)(this + 1591);
      unint64_t v17 = this[1593];
      unint64_t v18 = "XC";
      size_t v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2)) {
      goto LABEL_29;
    }
    size_t v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v8 + 16) != 23) {
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      BOOL v9 = v7 == 2;
      uint64_t v7 = 2;
      if (!v9) {
        uint64_t v7 = 0;
      }
    }
  }
  unsigned int v20 = a3 + 1;
  uint64_t v21 = v7 - 1;
  while (v21)
  {
    unint64_t v22 = *((unsigned __int8 *)v4 + 18);
    unsigned int v23 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 == 5)
      {
        unint64_t v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if (v22 != 2) {
          goto LABEL_32;
        }
        unint64_t v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      char v24 = v4;
      if (v23 >= 2) {
        char v24 = *(swift::Demangle::Node **)v4;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
  swift::Demangle::CharVector::append((char **)this + 1591, "XzC", 3uLL, this[1593]);
  int v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2) {
    goto LABEL_48;
  }
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    uint64_t v4 = *(swift::Demangle::Node **)v4;
LABEL_48:
    uint64_t v26 = *(swift::Demangle::Node **)v4;
  }
  else
  {
    uint64_t v26 = 0;
  }
  swift::Demangle::CharVector::append((unsigned int *)this + 3182, *((void *)v26 + 1), this[1593]);
  unint64_t v18 = *(char **)v26;
  size_t v19 = *((void *)v26 + 1);
  unint64_t v17 = this[1593];
  BOOL v16 = (char **)(this + 1591);
LABEL_51:
  uint64_t result = swift::Demangle::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleClangType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char **)((char *)this + 12728);
  swift::Demangle::CharVector::append((unsigned int *)this + 3182, *((void *)a2 + 1), *((swift::Demangle::NodeFactory **)this + 1593));
  uint64_t result = swift::Demangle::CharVector::append(v6, *(void **)a2, *((void *)a2 + 1), *((void **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mo", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleConcreteProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = (swift::Demangle::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v16 = 321;
      int v17 = 10;
LABEL_18:
      *(_DWORD *)a4 = v17;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v16;
      return this;
    }
    unsigned int v10 = *(swift::Demangle::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  unsigned int v12 = a3 + 1;
  int v13 = *((unsigned __int8 *)a2 + 18);
  uint64_t v14 = (swift::Demangle::Node *)a2;
  if (v13 == 2) {
    goto LABEL_16;
  }
  if (v13 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v14 = *a2;
LABEL_16:
    size_t v15 = (swift::Demangle::Node *)*((void *)v14 + 1);
    goto LABEL_21;
  }
  size_t v15 = 0;
LABEL_21:
  if (!*(_DWORD *)a4)
  {
    if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
    {
      swift::Demangle::CharVector::append((char **)v6 + 1591, "y", 1uLL, *((void **)v6 + 1593));
LABEL_27:
      this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v6 + 1591, "HC", 2uLL, *((void **)v6 + 1593));
      int v17 = 0;
      unsigned int v10 = 0;
      int v16 = 0;
      goto LABEL_18;
    }
    if (!*(_DWORD *)a4) {
      goto LABEL_27;
    }
  }
  return this;
}

void *anonymous namespace'::Remangler::manglePackProtocolConformance@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "HX", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "fMc", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unsigned int v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  BOOL v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDeallocator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  BOOL v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "fD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDefaultArgumentInitializer@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "fA", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v4 = *(swift::Demangle::Node **)v4;
  }
  unsigned int v12 = (swift::Demangle::Node *)*((void *)v4 + 1);
}

uint64_t anonymous namespace'::Remangler::mangleDependentAssociatedConformance@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = (_anonymous_namespace_::Remangler *)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v14 = 321;
      int v15 = 10;
LABEL_44:
      *(_DWORD *)a4 = v15;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v14;
      return this;
    }
    unsigned int v10 = *(swift::Demangle::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v5 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::Node **)v5;
LABEL_16:
    int v13 = (uint64_t *)*((void *)v5 + 1);
    goto LABEL_19;
  }
  int v13 = 0;
LABEL_19:
  if (*((_WORD *)v13 + 8) != 232) {
    goto LABEL_26;
  }
  int v16 = *((unsigned __int8 *)v13 + 18);
  if ((v16 - 1) < 2) {
    goto LABEL_24;
  }
  if (v16 == 5 && *((_DWORD *)v13 + 2))
  {
    int v13 = (uint64_t *)*v13;
LABEL_24:
    int v13 = (uint64_t *)*v13;
    goto LABEL_26;
  }
  int v13 = 0;
LABEL_26:
  if (this)
  {
LABEL_43:
    int v15 = 0;
    unsigned int v10 = 0;
    int v14 = 0;
    goto LABEL_44;
  }
  int v17 = *((unsigned __int8 *)v13 + 18);
  unint64_t v18 = (swift::Demangle::Node **)v13;
  if ((v17 - 1) >= 2)
  {
    if (v17 == 5)
    {
      size_t v19 = (uint64_t *)*v13;
      unint64_t v18 = (swift::Demangle::Node **)*v13;
LABEL_35:
      unsigned int v20 = (swift::Demangle::Node **)&v19[*((unsigned int *)v13 + 2)];
      goto LABEL_39;
    }
    unint64_t v18 = 0;
  }
  switch(v17)
  {
    case 1:
      unsigned int v20 = (swift::Demangle::Node **)(v13 + 1);
      break;
    case 2:
      unsigned int v20 = (swift::Demangle::Node **)(v13 + 2);
      break;
    case 5:
      size_t v19 = (uint64_t *)*v13;
      goto LABEL_35;
    default:
      unsigned int v20 = 0;
      break;
  }
LABEL_39:
  if (v18 == v20) {
    goto LABEL_43;
  }
  unsigned int v21 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v18 == v20) {
      goto LABEL_43;
    }
  }
}

void anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::Node **)a2;
LABEL_5:
    uint64_t v10 = *(void *)v9;
    goto LABEL_7;
  }
  uint64_t v10 = 0;
LABEL_7:
  long long v15 = 0uLL;
  LOBYTE(v16) = 0;
  {
    unint64_t v11 = *((void *)this + 1585);
    if (v11 > 0xF)
    {
      int v13 = *((_DWORD *)this + 3178) + 16;
      long long v17 = v15;
      uint64_t v18 = v16;
      int v19 = v13;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v17, &v17);
    }
    else
    {
      *((void *)this + 1585) = v11 + 1;
      int v12 = (char *)this + 24 * v11 + 12296;
      *(_OWORD *)int v12 = v15;
      v12[16] = v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v14 = *((unsigned __int8 *)v5 + 18);
  if (v14 == 2) {
    goto LABEL_15;
  }
  if (v14 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::Node **)v5;
LABEL_15:
    return;
  }
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1048;
      return this;
    }
    int v8 = *(swift::Demangle::Node **)a2;
  }
  BOOL v9 = (uint64_t *)*((void *)v8 + 1);
  int v10 = *((unsigned __int8 *)v9 + 18);
  unint64_t v11 = v9;
  if ((v10 - 1) >= 2)
  {
    if (v10 != 5 || !*((_DWORD *)v9 + 2))
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = 1050;
      return this;
    }
    unint64_t v11 = (uint64_t *)*v9;
  }
  unsigned int v12 = a3 + 1;
  if (*(_WORD *)(*v11 + 16) != 180)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v13 = *((unsigned __int8 *)a2 + 18);
    int v14 = (swift::Demangle::Node **)a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        long long v15 = 0;
LABEL_30:
        if (v29)
        {
LABEL_52:
          *(_OWORD *)a4 = v29;
          *(void *)(a4 + 16) = v30;
          return this;
        }
        int v19 = v32;
        if ((v31 & 0x80000000) == 0 && !v32)
        {
          *(_DWORD *)a4 = 1;
          *(void *)(a4 + 8) = a2;
          *(_DWORD *)(a4 + 16) = 1082;
          return this;
        }
        if (v31 == 1)
        {
          int v27 = "Rc";
        }
        else if (v31)
        {
          if (v31 == -1)
          {
            char v24 = (char **)(v5 + 1591);
            int v25 = (void *)v5[1593];
            uint64_t v26 = "RB";
            goto LABEL_65;
          }
          int v27 = "RC";
        }
        else
        {
          int v27 = "Rb";
        }
        goto LABEL_72;
      }
      int v14 = *(swift::Demangle::Node ***)a2;
    }
    long long v15 = *v14;
    goto LABEL_30;
  }
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_25;
  }
  if ((v10 - 1) < 2) {
    goto LABEL_15;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    BOOL v9 = (uint64_t *)*v9;
LABEL_15:
    BOOL v9 = (uint64_t *)*v9;
    goto LABEL_25;
  }
  BOOL v9 = 0;
LABEL_25:
  {
    int v16 = *((unsigned __int8 *)v9 + 18);
    long long v17 = (swift::Demangle::Node **)v9;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        uint64_t v18 = (uint64_t *)*v9;
        long long v17 = (swift::Demangle::Node **)*v9;
LABEL_39:
        unsigned int v20 = (swift::Demangle::Node **)&v18[*((unsigned int *)v9 + 2)];
        goto LABEL_45;
      }
      long long v17 = 0;
    }
    switch(v16)
    {
      case 1:
        unsigned int v20 = (swift::Demangle::Node **)(v9 + 1);
        goto LABEL_45;
      case 2:
        unsigned int v20 = (swift::Demangle::Node **)(v9 + 2);
        goto LABEL_45;
      case 5:
        uint64_t v18 = (uint64_t *)*v9;
        goto LABEL_39;
    }
    unsigned int v20 = 0;
LABEL_45:
    while (v17 != v20)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = (swift::Demangle::Node **)a2;
  if ((v21 - 1) < 2) {
    goto LABEL_50;
  }
  unsigned int v23 = 0;
  if (v21 != 5) {
    goto LABEL_51;
  }
  if (*((_DWORD *)a2 + 2))
  {
    unint64_t v22 = *(swift::Demangle::Node ***)a2;
LABEL_50:
    unsigned int v23 = *v22;
    goto LABEL_51;
  }
  unsigned int v23 = 0;
LABEL_51:
  if (v29) {
    goto LABEL_52;
  }
  int v19 = v32;
  if ((v31 & 0x80000000) == 0 && !v32)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1058;
    return this;
  }
  if (v31 == 1)
  {
    int v27 = "Rp";
LABEL_72:
    size_t v28 = 2;
    goto LABEL_73;
  }
  if (!v31)
  {
    int v27 = "R";
    size_t v28 = 1;
LABEL_73:
    swift::Demangle::CharVector::append((char **)v5 + 1591, v27, v28, (void *)v5[1593]);
    goto LABEL_74;
  }
  if (v31 != -1)
  {
    int v27 = "RP";
    goto LABEL_72;
  }
  char v24 = (char **)(v5 + 1591);
  int v25 = (void *)v5[1593];
  uint64_t v26 = "RQ";
LABEL_65:
  this = (uint64_t *)swift::Demangle::CharVector::append(v24, v26, 2uLL, v25);
LABEL_74:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = (uint64_t *)a2;
  if ((v6 - 1) >= 2) {
    int v7 = *a2;
  }
  if (!*(void *)*v7)
  {
    int v8 = a2;
    if (v6 == 5) {
      int v8 = (uint64_t **)*a2;
    }
    if (!*v8[1])
    {
      unsigned int v23 = this[3184];
      size_t v24 = this[3185];
      int v25 = (char *)*((void *)this + 1591);
      if (v23 < v24)
      {
LABEL_46:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        goto LABEL_27;
      }
      uint64_t v26 = (void *)*((void *)this + 1593);
      int v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v29 = (unint64_t)&v25[v24 + 1];
        unint64_t v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_45:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v28 = v26[2];
      }
      if ((2 * v24) <= 4) {
        uint64_t v30 = 4;
      }
      else {
        uint64_t v30 = (2 * v24);
      }
      size_t v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        unint64_t v32 = 2 * v26[4];
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        v26[4] = v32;
        unint64_t v33 = v32 + 8;
        this = (unsigned int *)malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        int v34 = (char *)this + v33;
        *(void *)this = v26[3];
        int v27 = (char *)(this + 2);
        v26[2] = v34;
        v26[3] = this;
      }
      v26[1] = &v27[v31];
      if (v24) {
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      }
      *(void *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      int v25 = v27;
      unsigned int v23 = *(_DWORD *)(v4 + 12736);
      goto LABEL_45;
    }
  }
  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  unint64_t v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    unsigned int v12 = (void *)*((void *)this + 1593);
    int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unint64_t v11 = (char *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2 * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v12[4] = v19;
      unint64_t v20 = v19 + 8;
      int v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)v21 + v20;
      *int v21 = v12[3];
      unint64_t v11 = (char *)(v21 + 1);
      v12[2] = v22;
      void v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if (v10) {
      memcpy(v11, *(const void **)(v4 + 12728), v10);
    }
    *(void *)(v4 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v4 + 12740);
    unsigned int v9 = *(_DWORD *)(v4 + 12736);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v4 + 12736) = v9 + 1;
  v11[v9] = 113;
LABEL_27:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::Node ***)a2;
    goto LABEL_12;
  }
  unsigned int v12 = 0;
LABEL_14:
  if (v15)
  {
    *(_OWORD *)a4 = v15;
    *(void *)(a4 + 16) = v16;
    return result;
  }
  int v13 = v18;
  if ((v17 & 0x80000000) == 0 && !v18)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1162;
    return result;
  }
  if (v17 == 1)
  {
    unint64_t v14 = "Rt";
LABEL_26:
    swift::Demangle::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
    goto LABEL_27;
  }
  if (!v17)
  {
    unint64_t v14 = "Rs";
    goto LABEL_26;
  }
  if (v17 != -1)
  {
    unint64_t v14 = "RT";
    goto LABEL_26;
  }
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "RS", 2uLL, this[1593]);
LABEL_27:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameShapeRequirement@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::Node ***)a2;
    goto LABEL_12;
  }
  unsigned int v12 = 0;
LABEL_14:
  if (v14)
  {
    *(_OWORD *)a4 = v14;
    *(void *)(a4 + 16) = v15;
  }
  else
  {
    int v13 = v17;
    if (v16 < 0 || v17)
    {
      if (v16)
      {
        *(_DWORD *)a4 = 1;
      }
      else
      {
        swift::Demangle::CharVector::append(this + 1591, "Rh", 2uLL, this[1593]);
        *(_DWORD *)a4 = 0;
      }
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1190;
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (v33)
  {
    *(_OWORD *)a4 = v33;
    a4[2] = v34;
    return result;
  }
  unsigned int v12 = v36;
  if ((v35 & 0x80000000) == 0 && !v36)
  {
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1210;
    return result;
  }
  if (v35 == -1)
  {
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "RL", 2uLL, this[1593]);
  }
  else
  {
    int v13 = "RM";
    if (v35 == 1) {
      int v13 = "Rm";
    }
    if (v35) {
      long long v14 = (char *)v13;
    }
    else {
      long long v14 = "Rl";
    }
    swift::Demangle::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  }
  if (*((unsigned char *)a2 + 18) != 5)
  {
    int v17 = a2[1];
    if (*((_WORD *)v17 + 8) == 101)
    {
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v15 = (swift::Demangle::Node *)a2;
      if (v18 != 1) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
LABEL_29:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1221;
    return result;
  }
  uint64_t v15 = *a2;
  uint64_t v16 = *((void *)*a2 + 1);
  if (*(_WORD *)(v16 + 16) != 101) {
    goto LABEL_29;
  }
  if (*(void *)(v16 + 8) != 1)
  {
LABEL_23:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1222;
    return result;
  }
LABEL_26:
  char v19 = ***((unsigned char ***)v15 + 1);
  unsigned int v20 = *((_DWORD *)this + 3184);
  size_t v21 = *((unsigned int *)this + 3185);
  unint64_t v22 = this[1591];
  if (v20 < v21) {
    goto LABEL_44;
  }
  unsigned int v23 = this[1593];
  size_t v24 = (char *)*((void *)v23 + 1);
  if (&v22[v21] != v24)
  {
    unint64_t v25 = *((void *)v23 + 2);
LABEL_31:
    if ((2 * v21) <= 4) {
      uint64_t v27 = 4;
    }
    else {
      uint64_t v27 = (2 * v21);
    }
    size_t v28 = v27 + v21;
    if (!v24 || (unint64_t)&v24[v28] > v25)
    {
      unint64_t v29 = 2 * *((void *)v23 + 4);
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      *((void *)v23 + 4) = v29;
      char v32 = v19;
      unint64_t v30 = v29 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      uint64_t *result = *((void *)v23 + 3);
      size_t v24 = (char *)(result + 1);
      size_t v31 = (char *)result + v30;
      char v19 = v32;
      *((void *)v23 + 2) = v31;
      *((void *)v23 + 3) = result;
    }
    *((void *)v23 + 1) = &v24[v28];
    if (v21) {
      uint64_t result = (uint64_t *)memcpy(v24, this[1591], v21);
    }
    this[1591] = v24;
    LODWORD(v21) = *((_DWORD *)this + 3185);
    unint64_t v22 = v24;
    unsigned int v20 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unint64_t v26 = (unint64_t)&v22[v21 + 1];
  unint64_t v25 = *((void *)v23 + 2);
  if (v26 > v25) {
    goto LABEL_31;
  }
  *((void *)v23 + 1) = v26;
  LODWORD(v27) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v21 + v27;
LABEL_44:
  *((_DWORD *)this + 3184) = v20 + 1;
  v22[v20] = v19;
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_50;
  }
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_50;
    }
  }
  if (*((_DWORD *)a2 + 2) < 4u
  {
LABEL_50:
    *(_DWORD *)a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamPackMarker@<X0>(char *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v10 = 1265;
      int v11 = 1;
      goto LABEL_21;
    }
    int v7 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) == 232)
  {
    swift::Demangle::CharVector::append((char **)this + 1591, "Rv", 2uLL, *((void **)this + 1593));
    int v8 = *((unsigned __int8 *)v3 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v3 + 2))
      {
        unsigned int v9 = 0;
LABEL_14:
        int v12 = *((unsigned __int8 *)v9 + 18);
        if ((v12 - 1) >= 2)
        {
          if (v12 != 5 || !*((_DWORD *)v9 + 2))
          {
            int v13 = 0;
            goto LABEL_20;
          }
          unsigned int v9 = (uint64_t **)*v9;
        }
        int v13 = (uint64_t **)*v9;
LABEL_20:
        int v11 = 0;
        uint64_t v3 = 0;
        int v10 = 0;
        goto LABEL_21;
      }
      uint64_t v3 = *(swift::Demangle::Node **)v3;
    }
    unsigned int v9 = *(uint64_t ***)v3;
    goto LABEL_14;
  }
  int v10 = 1266;
  int v11 = 1;
LABEL_21:
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>(uint64_t *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 == 5)
  {
    uint64_t v7 = *((unsigned int *)a2 + 2);
    if (v7) {
      goto LABEL_6;
    }
LABEL_29:
    uint64_t v8 = 0;
    goto LABEL_31;
  }
  if (v7 != 2) {
    goto LABEL_29;
  }
  uint64_t v7 = 2;
LABEL_6:
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unsigned int v10 = a3 + 1;
  do
  {
    unint64_t v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      char v12 = 0;
      int v13 = *a2;
    }
    else
    {
      char v12 = 1;
      int v13 = (swift::Demangle::Node *)a2;
    }
    if (*(_WORD *)(*((void *)v13 + v9) + 16) == 37)
    {
      uint64_t v8 = v9 + 1;
      goto LABEL_8;
    }
    if (v11 == 1) {
      goto LABEL_17;
    }
    if (v11 != 5)
    {
      if (v11 != 2) {
        goto LABEL_23;
      }
      unint64_t v11 = 2;
LABEL_17:
      if (v11 <= v9) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
    if (*((unsigned int *)a2 + 2) <= v9)
    {
LABEL_23:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
LABEL_18:
    long long v14 = (swift::Demangle::Node *)a2;
    if ((v12 & 1) == 0) {
      long long v14 = *a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
LABEL_8:
    ++v9;
  }
  while (v7 != v9);
  if (v8 == 1)
  {
    uint64_t v15 = (swift::Demangle::Node *)a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      uint64_t v15 = *a2;
    }
    if (**(void **)v15 == 1)
    {
      uint64_t v16 = (_DWORD *)(v5 + 12736);
      goto LABEL_76;
    }
    uint64_t v8 = 1;
  }
LABEL_31:
  uint64_t v16 = (_DWORD *)(v5 + 12736);
  unsigned int v17 = *(_DWORD *)(v5 + 12736);
  size_t v18 = *(unsigned int *)(v5 + 12740);
  char v19 = *(char **)(v5 + 12728);
  if (v17 >= v18)
  {
    unsigned int v20 = *(void **)(v5 + 12744);
    size_t v21 = (char *)v20[1];
    if (&v19[v18] != v21)
    {
      unint64_t v22 = v20[2];
      goto LABEL_35;
    }
    unint64_t v23 = (unint64_t)&v19[v18 + 1];
    unint64_t v22 = v20[2];
    if (v23 <= v22)
    {
      v20[1] = v23;
      LODWORD(v24) = 1;
    }
    else
    {
LABEL_35:
      if ((2 * v18) <= 4) {
        uint64_t v24 = 4;
      }
      else {
        uint64_t v24 = (2 * v18);
      }
      size_t v25 = v24 + v18;
      if (!v21 || (unint64_t)&v21[v25] > v22)
      {
        unint64_t v26 = 2 * v20[4];
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        v20[4] = v26;
        unint64_t v27 = v26 + 8;
        this = (uint64_t *)malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        size_t v28 = (char *)this + v27;
        *this = v20[3];
        size_t v21 = (char *)(this + 1);
        v20[2] = v28;
        void v20[3] = this;
      }
      v20[1] = &v21[v25];
      if (v18) {
        this = (uint64_t *)memcpy(v21, *(const void **)(v5 + 12728), v18);
      }
      *(void *)(v5 + 12728) = v21;
      LODWORD(v18) = *(_DWORD *)(v5 + 12740);
      char v19 = v21;
      unsigned int v17 = *(_DWORD *)(v5 + 12736);
    }
    uint64_t v16 = (_DWORD *)(v5 + 12736);
    *(_DWORD *)(v5 + 12740) = v18 + v24;
  }
  *uint64_t v16 = v17 + 1;
  v19[v17] = 114;
  if (v8)
  {
    uint64_t v29 = 0;
    while (1)
    {
      char v32 = (swift::Demangle::Node *)a2;
      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
        char v32 = *a2;
      }
      uint64_t v33 = **((void **)v32 + v29);
      if (v33)
      {
        goto LABEL_53;
      }
      unsigned int v31 = *(_DWORD *)(v5 + 12736);
      size_t v30 = *(unsigned int *)(v5 + 12740);
      uint64_t v34 = *(unsigned char **)(v5 + 12728);
      if (v31 >= v30) {
        break;
      }
LABEL_52:
      *uint64_t v16 = v31 + 1;
      v34[v31] = 122;
LABEL_53:
      if (v8 == ++v29) {
        goto LABEL_76;
      }
    }
    int v35 = *(void **)(v5 + 12744);
    unsigned int v36 = (unsigned char *)v35[1];
    if (&v34[v30] != v36)
    {
      unint64_t v37 = v35[2];
      goto LABEL_62;
    }
    unint64_t v38 = (unint64_t)&v34[v30 + 1];
    unint64_t v37 = v35[2];
    if (v38 <= v37)
    {
      v35[1] = v38;
      LODWORD(v39) = 1;
    }
    else
    {
LABEL_62:
      if ((2 * v30) <= 4) {
        uint64_t v39 = 4;
      }
      else {
        uint64_t v39 = (2 * v30);
      }
      size_t v40 = v39 + v30;
      if (v36) {
        BOOL v41 = (unint64_t)&v36[v39 + v30] > v37;
      }
      else {
        BOOL v41 = 1;
      }
      uint64_t v34 = (unsigned char *)v35[1];
      if (v41)
      {
        unint64_t v42 = 2 * v35[4];
        if (v42 <= v40 + 1) {
          unint64_t v42 = v40 + 1;
        }
        v35[4] = v42;
        unint64_t v43 = v42 + 8;
        this = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        unsigned int v44 = (char *)this + v43;
        *this = v35[3];
        uint64_t v34 = this + 1;
        v35[2] = v44;
        v35[3] = this;
      }
      v35[1] = &v34[v40];
      if (v30) {
        this = (uint64_t *)memcpy(v34, *(const void **)(v5 + 12728), v30);
      }
      *(void *)(v5 + 12728) = v34;
      LODWORD(v30) = *(_DWORD *)(v5 + 12740);
      unsigned int v31 = *(_DWORD *)(v5 + 12736);
      uint64_t v16 = (_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v30 + v39;
    goto LABEL_52;
  }
LABEL_76:
  unsigned int v45 = *(_DWORD *)(v5 + 12736);
  size_t v46 = *(unsigned int *)(v5 + 12740);
  uint64_t v47 = *(char **)(v5 + 12728);
  if (v45 >= v46)
  {
    char v48 = *(void **)(v5 + 12744);
    unint64_t v49 = (char *)v48[1];
    if (&v47[v46] != v49)
    {
      unint64_t v50 = v48[2];
      goto LABEL_80;
    }
    unint64_t v51 = (unint64_t)&v47[v46 + 1];
    unint64_t v50 = v48[2];
    if (v51 <= v50)
    {
      v48[1] = v51;
      LODWORD(v52) = 1;
    }
    else
    {
LABEL_80:
      if ((2 * v46) <= 4) {
        uint64_t v52 = 4;
      }
      else {
        uint64_t v52 = (2 * v46);
      }
      size_t v53 = v52 + v46;
      if (!v49 || (unint64_t)&v49[v53] > v50)
      {
        unint64_t v54 = 2 * v48[4];
        if (v54 <= v53 + 1) {
          unint64_t v54 = v53 + 1;
        }
        v48[4] = v54;
        unint64_t v55 = v54 + 8;
        this = (uint64_t *)malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        uint64_t v56 = (char *)this + v55;
        *this = v48[3];
        unint64_t v49 = (char *)(this + 1);
        v48[2] = v56;
        v48[3] = this;
      }
      v48[1] = &v49[v53];
      if (v46) {
        this = (uint64_t *)memcpy(v49, *(const void **)(v5 + 12728), v46);
      }
      *(void *)(v5 + 12728) = v49;
      LODWORD(v46) = *(_DWORD *)(v5 + 12740);
      uint64_t v47 = v49;
      unsigned int v45 = *(_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v46 + v52;
  }
  *uint64_t v16 = v45 + 1;
  v47[v45] = 108;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericType@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        char v12 = a2;
        if (v11 >= 2) {
          char v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  uint64_t v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    uint64_t v16 = *(void **)(v5 + 12744);
    unsigned int v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v14) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      uint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unsigned int v17 = (char *)(this + 1);
      v16[2] = v24;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v14) {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    }
    *(void *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    uint64_t v15 = v17;
    unsigned int v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 117;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

void *anonymous namespace'::Remangler::mangleDependentMemberType@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (v52)
  {
    *(_OWORD *)a4 = v52;
    *(void *)(a4 + 16) = v53;
    return result;
  }
  if (v54 == -1) {
    goto LABEL_82;
  }
  unsigned int v8 = (uint64_t **)v55;
  if (v54 != 1)
  {
    if (!v54)
    {
      *(_DWORD *)a4 = 12;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1289;
      return result;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unsigned int v17 = (char *)this[1591];
    if (v15 < v16)
    {
LABEL_44:
      *((_DWORD *)this + 3184) = v15 + 1;
      v17[v15] = 81;
      if (v8)
      {
        goto LABEL_82;
      }
      unsigned int v26 = *((_DWORD *)this + 3184);
      size_t v37 = *((unsigned int *)this + 3185);
      size_t v28 = (char *)this[1591];
      if (v26 < v37) {
        goto LABEL_80;
      }
      unint64_t v38 = this[1593];
      uint64_t v39 = (char *)v38[1];
      if (&v28[v37] == v39)
      {
        unint64_t v46 = (unint64_t)&v28[v37 + 1];
        unint64_t v40 = v38[2];
        if (v46 <= v40)
        {
          v38[1] = v46;
          LODWORD(v47) = 1;
LABEL_79:
          *((_DWORD *)this + 3185) = v37 + v47;
LABEL_80:
          *((_DWORD *)this + 3184) = v26 + 1;
          char v51 = 88;
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v40 = v38[2];
      }
      if ((2 * v37) <= 4) {
        uint64_t v47 = 4;
      }
      else {
        uint64_t v47 = (2 * v37);
      }
      size_t v48 = v47 + v37;
      if (!v39 || (unint64_t)&v39[v48] > v40)
      {
        unint64_t v49 = 2 * v38[4];
        if (v49 <= v48 + 1) {
          unint64_t v49 = v48 + 1;
        }
        v38[4] = v49;
        unint64_t v50 = v49 + 8;
        uint64_t result = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        void *result = v38[3];
        uint64_t v39 = (char *)(result + 1);
        v38[2] = (char *)result + v50;
        v38[3] = result;
      }
      v38[1] = &v39[v48];
      if (v37) {
        uint64_t result = memcpy(v39, this[1591], v37);
      }
      this[1591] = v39;
      LODWORD(v37) = *((_DWORD *)this + 3185);
      size_t v28 = v39;
      unsigned int v26 = *((_DWORD *)this + 3184);
      goto LABEL_79;
    }
    unint64_t v18 = this[1593];
    unint64_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v32 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v32 <= v20)
      {
        v18[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v16 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v20 = v18[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v33 = 4;
    }
    else {
      uint64_t v33 = (2 * v16);
    }
    size_t v34 = v33 + v16;
    if (!v19 || (unint64_t)&v19[v34] > v20)
    {
      unint64_t v35 = 2 * v18[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      v18[4] = v35;
      unint64_t v36 = v35 + 8;
      uint64_t result = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      void *result = v18[3];
      unint64_t v19 = (char *)(result + 1);
      v18[2] = (char *)result + v36;
      void v18[3] = result;
    }
    v18[1] = &v19[v34];
    if (v16) {
      uint64_t result = memcpy(v19, this[1591], v16);
    }
    this[1591] = v19;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    unsigned int v17 = v19;
    unsigned int v15 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = (char *)this[1591];
  if (v9 >= v10)
  {
    char v12 = this[1593];
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v21 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v21 <= v14)
      {
        v12[1] = v21;
        LODWORD(v22) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v10 + v22;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v22 = 4;
    }
    else {
      uint64_t v22 = (2 * v10);
    }
    size_t v23 = v22 + v10;
    if (!v13 || (unint64_t)&v13[v23] > v14)
    {
      unint64_t v24 = 2 * v12[4];
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      v12[4] = v24;
      unint64_t v25 = v24 + 8;
      uint64_t result = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      void *result = v12[3];
      unsigned int v13 = (char *)(result + 1);
      v12[2] = (char *)result + v25;
      void v12[3] = result;
    }
    v12[1] = &v13[v23];
    if (v10) {
      uint64_t result = memcpy(v13, this[1591], v10);
    }
    this[1591] = v13;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v11 = v13;
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_25;
  }
LABEL_26:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = 81;
  if (!v8)
  {
    unsigned int v26 = *((_DWORD *)this + 3184);
    size_t v27 = *((unsigned int *)this + 3185);
    size_t v28 = (char *)this[1591];
    if (v26 < v27)
    {
LABEL_77:
      *((_DWORD *)this + 3184) = v26 + 1;
      char v51 = 120;
LABEL_81:
      v28[v26] = v51;
      goto LABEL_82;
    }
    uint64_t v29 = this[1593];
    size_t v30 = (char *)v29[1];
    if (&v28[v27] == v30)
    {
      unint64_t v41 = (unint64_t)&v28[v27 + 1];
      unint64_t v31 = v29[2];
      if (v41 <= v31)
      {
        v29[1] = v41;
        LODWORD(v42) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v27 + v42;
        goto LABEL_77;
      }
    }
    else
    {
      unint64_t v31 = v29[2];
    }
    if ((2 * v27) <= 4) {
      uint64_t v42 = 4;
    }
    else {
      uint64_t v42 = (2 * v27);
    }
    size_t v43 = v42 + v27;
    if (!v30 || (unint64_t)&v30[v43] > v31)
    {
      unint64_t v44 = 2 * v29[4];
      if (v44 <= v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      v29[4] = v44;
      unint64_t v45 = v44 + 8;
      uint64_t result = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      void *result = v29[3];
      size_t v30 = (char *)(result + 1);
      v29[2] = (char *)result + v45;
      v29[3] = result;
    }
    v29[1] = &v30[v43];
    if (v27) {
      uint64_t result = memcpy(v30, this[1591], v27);
    }
    this[1591] = v30;
    LODWORD(v27) = *((_DWORD *)this + 3185);
    size_t v28 = v30;
    unsigned int v26 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
LABEL_82:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentProtocolConformanceRoot@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::Node **)*a2;
LABEL_5:
    size_t v10 = *v9;
    goto LABEL_7;
  }
  size_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v15 = 321;
      int v16 = 10;
LABEL_18:
      *(_DWORD *)a4 = v16;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    }
    size_t v10 = *(swift::Demangle::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_16:
    unint64_t v14 = (uint64_t *)*((void *)v13 + 1);
    goto LABEL_21;
  }
  unint64_t v14 = 0;
LABEL_21:
  if (*((_WORD *)v14 + 8) != 232) {
    goto LABEL_28;
  }
  int v17 = *((unsigned __int8 *)v14 + 18);
  if ((v17 - 1) < 2) {
    goto LABEL_26;
  }
  if (v17 == 5 && *((_DWORD *)v14 + 2))
  {
    unint64_t v14 = (uint64_t *)*v14;
LABEL_26:
    unint64_t v14 = (uint64_t *)*v14;
    goto LABEL_28;
  }
  unint64_t v14 = 0;
LABEL_28:
  {
LABEL_45:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)(v6 + 12728), "HD", 2uLL, *(void **)(v6 + 12744));
    size_t v10 = 0;
    if (*((unsigned char *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        size_t v10 = 0;
      }
      else {
        size_t v10 = (swift::Demangle::Node *)*((void *)*a2 + 2);
      }
    }
    int v23 = *((unsigned __int16 *)v10 + 8);
    if (v23 == 246 || v23 == 102)
    {
      int v24 = *((unsigned __int8 *)v10 + 18);
      if ((v23 != 102) == (v24 == 4))
      {
        int v15 = 2713;
        int v16 = 1;
      }
      else
      {
        if (v24 == 4) {
          uint64_t v25 = *(void *)v10 + 2;
        }
        else {
          uint64_t v25 = 1;
        }
        int v16 = 0;
        size_t v10 = 0;
        int v15 = 0;
      }
    }
    else
    {
      int v15 = 2711;
      int v16 = 1;
    }
    goto LABEL_18;
  }
  int v18 = *((unsigned __int8 *)v14 + 18);
  unint64_t v19 = (swift::Demangle::Node **)v14;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 5)
    {
      unint64_t v20 = (uint64_t *)*v14;
      unint64_t v19 = (swift::Demangle::Node **)*v14;
LABEL_37:
      unint64_t v21 = (swift::Demangle::Node **)&v20[*((unsigned int *)v14 + 2)];
      goto LABEL_41;
    }
    unint64_t v19 = 0;
  }
  switch(v18)
  {
    case 1:
      unint64_t v21 = (swift::Demangle::Node **)(v14 + 1);
      break;
    case 2:
      unint64_t v21 = (swift::Demangle::Node **)(v14 + 2);
      break;
    case 5:
      unint64_t v20 = (uint64_t *)*v14;
      goto LABEL_37;
    default:
      unint64_t v21 = 0;
      break;
  }
LABEL_41:
  if (v19 == v21) {
    goto LABEL_45;
  }
  unsigned int v22 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v19 == v21) {
      goto LABEL_45;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceInherited@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unint64_t v14 = 0;
LABEL_14:
  if (*((_WORD *)v14 + 8) == 232)
  {
    int v15 = *((unsigned __int8 *)v14 + 18);
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v14 + 2))
      {
        unint64_t v14 = 0;
        goto LABEL_21;
      }
      unint64_t v14 = *(swift::Demangle::Node **)v14;
    }
    unint64_t v14 = *(swift::Demangle::Node **)v14;
  }
LABEL_21:
  {
    int v16 = *((unsigned __int8 *)v14 + 18);
    int v17 = (swift::Demangle::Node **)v14;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        int v18 = *(swift::Demangle::Node **)v14;
        int v17 = *(swift::Demangle::Node ***)v14;
LABEL_30:
        unint64_t v19 = (swift::Demangle::Node **)((char *)v18 + 8 * *((unsigned int *)v14 + 2));
        goto LABEL_36;
      }
      int v17 = 0;
    }
    switch(v16)
    {
      case 1:
        unint64_t v19 = (swift::Demangle::Node **)((char *)v14 + 8);
        goto LABEL_36;
      case 2:
        unint64_t v19 = (swift::Demangle::Node **)((char *)v14 + 16);
        goto LABEL_36;
      case 5:
        int v18 = *(swift::Demangle::Node **)v14;
        goto LABEL_30;
    }
    unint64_t v19 = 0;
LABEL_36:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "HI", 2uLL, this[1593]);
  uint64_t v20 = 0;
  if (*((unsigned char *)a2 + 18) == 5)
  {
    if (*((_DWORD *)a2 + 2) < 3u) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *((void *)*a2 + 2);
    }
  }
  int v21 = *(unsigned __int16 *)(v20 + 16);
  if (v21 == 246 || v21 == 102)
  {
    int v22 = *(unsigned __int8 *)(v20 + 18);
    if ((v21 != 102) == (v22 == 4))
    {
      int v24 = 2713;
      int v25 = 1;
    }
    else
    {
      if (v22 == 4) {
        uint64_t v23 = *(void *)v20 + 2;
      }
      else {
        uint64_t v23 = 1;
      }
      int v25 = 0;
      uint64_t v20 = 0;
      int v24 = 0;
    }
  }
  else
  {
    int v24 = 2711;
    int v25 = 1;
  }
  *(_DWORD *)a4 = v25;
  *(void *)(a4 + 8) = v20;
  *(_DWORD *)(a4 + 16) = v24;
  return result;
}

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceAssociated@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unint64_t v14 = 0;
LABEL_14:
  int v15 = *((unsigned __int8 *)v14 + 18);
  int v16 = (swift::Demangle::Node **)v14;
  if ((v15 - 1) < 2)
  {
LABEL_18:
    int v17 = *v16;
    goto LABEL_20;
  }
  if (v15 == 5 && *((_DWORD *)v14 + 2))
  {
    int v16 = *(swift::Demangle::Node ***)v14;
    goto LABEL_18;
  }
  int v17 = 0;
LABEL_20:
  int v18 = *((unsigned __int8 *)v17 + 18);
  if (v18 != 1)
  {
    if (v18 != 5 || *((_DWORD *)v17 + 2) != 1)
    {
      int v21 = 321;
      int v22 = 10;
LABEL_31:
      *(_DWORD *)a4 = v22;
      *(void *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = v21;
      return result;
    }
    int v17 = *(swift::Demangle::Node **)v17;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v19 = *((unsigned __int8 *)v14 + 18);
  if (v19 == 2) {
    goto LABEL_29;
  }
  if (v19 == 5 && *((_DWORD *)v14 + 2) >= 2u)
  {
    unint64_t v14 = *(swift::Demangle::Node **)v14;
LABEL_29:
    uint64_t v20 = (uint64_t *)*((void *)v14 + 1);
    goto LABEL_34;
  }
  uint64_t v20 = 0;
LABEL_34:
  if (*((_WORD *)v20 + 8) != 232) {
    goto LABEL_41;
  }
  int v23 = *((unsigned __int8 *)v20 + 18);
  if ((v23 - 1) < 2) {
    goto LABEL_39;
  }
  if (v23 == 5 && *((_DWORD *)v20 + 2))
  {
    uint64_t v20 = (uint64_t *)*v20;
LABEL_39:
    uint64_t v20 = (uint64_t *)*v20;
    goto LABEL_41;
  }
  uint64_t v20 = 0;
LABEL_41:
  {
LABEL_58:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "HA", 2uLL, this[1593]);
    int v17 = 0;
    if (*((unsigned char *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        int v17 = 0;
      }
      else {
        int v17 = (swift::Demangle::Node *)*((void *)*a2 + 2);
      }
    }
    int v29 = *((unsigned __int16 *)v17 + 8);
    if (v29 == 246 || v29 == 102)
    {
      int v30 = *((unsigned __int8 *)v17 + 18);
      if ((v29 != 102) == (v30 == 4))
      {
        int v21 = 2713;
        int v22 = 1;
      }
      else
      {
        if (v30 == 4) {
          uint64_t v31 = *(void *)v17 + 2;
        }
        else {
          uint64_t v31 = 1;
        }
        int v22 = 0;
        int v17 = 0;
        int v21 = 0;
      }
    }
    else
    {
      int v21 = 2711;
      int v22 = 1;
    }
    goto LABEL_31;
  }
  int v24 = *((unsigned __int8 *)v20 + 18);
  int v25 = (swift::Demangle::Node **)v20;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      unsigned int v26 = (uint64_t *)*v20;
      int v25 = (swift::Demangle::Node **)*v20;
LABEL_50:
      size_t v27 = (swift::Demangle::Node **)&v26[*((unsigned int *)v20 + 2)];
      goto LABEL_54;
    }
    int v25 = 0;
  }
  switch(v24)
  {
    case 1:
      size_t v27 = (swift::Demangle::Node **)(v20 + 1);
      break;
    case 2:
      size_t v27 = (swift::Demangle::Node **)(v20 + 2);
      break;
    case 5:
      unsigned int v26 = (uint64_t *)*v20;
      goto LABEL_50;
    default:
      size_t v27 = 0;
      break;
  }
LABEL_54:
  if (v25 == v27) {
    goto LABEL_58;
  }
  unsigned int v28 = a3 + 2;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v25 == v27) {
      goto LABEL_58;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleDestructor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fd", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleDidSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_DWORD *anonymous namespace'::Remangler::mangleDirectness@<X0>(_DWORD *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  if (*(void *)a2 == 1)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v10 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      char v9 = 105;
      goto LABEL_43;
    }
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      unint64_t v24 = (unint64_t)&v8[v10 + 1];
      unint64_t v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v10);
    }
    size_t v26 = v25 + v10;
    if (v12) {
      BOOL v27 = (unint64_t)&v12[v25 + v10] > v13;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v8 = (char *)v11[1];
    if (v27)
    {
      unint64_t v28 = 2 * v11[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v11[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      int v30 = (char *)this + v29;
      *(void *)this = v11[3];
      uint64_t v8 = (char *)(this + 2);
      v11[2] = v30;
      void v11[3] = this;
    }
    v11[1] = &v8[v26];
    if (v10) {
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v10) = *((_DWORD *)v3 + 3185);
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_41;
  }
  if (!*(void *)a2)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v7 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v7)
    {
      char v9 = 100;
LABEL_43:
      int v15 = 0;
      a2 = 0;
      int v14 = 0;
      *uint64_t v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }
    int v16 = (void *)*((void *)this + 1593);
    int v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      unint64_t v19 = (unint64_t)&v8[v7 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        char v9 = 100;
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v7);
    }
    size_t v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *(void *)this = v16[3];
      int v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v7) {
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v17;
    LODWORD(v7) = *((_DWORD *)v3 + 3185);
    uint64_t v8 = v17;
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_39;
  }
  int v14 = 1335;
  int v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDynamicSelf@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XD", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleEnumCase@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WC", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XE", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      char v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      char v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      char v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  char v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Yc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "Yj", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    int v12 = this[1593];
    unint64_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      size_t v21 = (char *)result + v20;
      void *result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2) {
    uint64_t v8 = *(swift::Demangle::Node **)a2;
  }
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        *(_DWORD *)a4 = 10;
        *(void *)(a4 + 8) = a2;
        *(_DWORD *)(a4 + 16) = 321;
        return this;
      }
      int v4 = *(swift::Demangle::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "Xp", 2uLL, (void *)v5[1593]);
    goto LABEL_25;
  }
  size_t v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_17;
    }
    size_t v10 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_17:
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "Xm", 2uLL, (void *)v5[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5 && *((_DWORD *)v4 + 2))
    {
      int v4 = *(swift::Demangle::Node **)v4;
      goto LABEL_21;
    }
LABEL_25:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_21:
  int v12 = *(swift::Demangle::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleExplicitClosure@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = *(swift::Demangle::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u) {
    goto LABEL_12;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_13:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fU", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::Node **)v4;
  }
  int v12 = (swift::Demangle::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleExtension@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v10 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    size_t v10 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  if (*((unsigned char *)a2 + 18) != 5)
  {
LABEL_18:
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    unint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_35:
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 69;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    unint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_34:
        *((_DWORD *)v5 + 3185) = v12 + v18;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      v14[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)this + v21;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v22;
      void v14[3] = this;
    }
    v14[1] = &v15[v19];
    if (v12) {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    }
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    unint64_t v13 = v15;
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_34;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) != 3) {
    goto LABEL_18;
  }
  if (!*(_DWORD *)a4) {
    goto LABEL_18;
  }
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMe", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleFieldOffset@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)v4 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::Node **)v4;
  }
  size_t v12 = *(swift::Demangle::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (int v11 = (swift::Demangle::Node *)*((void *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      size_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  size_t v12 = (swift::Demangle::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    unint64_t v13 = (swift::Demangle::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mf", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleFunction@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_14:
    size_t v12 = 0;
    BOOL v13 = MEMORY[0x10] == 290;
    goto LABEL_21;
  }
LABEL_16:
  BOOL v13 = *(unsigned __int16 *)(*((void *)*a2 + 2) + 16) == 290;
  unint64_t v14 = 2;
  if (*(_WORD *)(*((void *)*a2 + 2) + 16) == 290) {
    unint64_t v14 = 3;
  }
  if (v14 >= *((unsigned int *)a2 + 2)) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = (swift::Demangle::Node *)*((void *)*a2 + v14);
  }
LABEL_21:
  int v15 = *((unsigned __int8 *)v12 + 18);
  if ((v15 - 1) < 2) {
    goto LABEL_25;
  }
  if (v15 == 5 && *((_DWORD *)v12 + 2))
  {
    size_t v12 = *(swift::Demangle::Node **)v12;
LABEL_25:
    unint64_t v16 = *(swift::Demangle::Node **)v12;
    if (!v13) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  unint64_t v16 = 0;
  if (!v13) {
    goto LABEL_33;
  }
LABEL_28:
  if (v8 == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
LABEL_33:
  if (*((_WORD *)v16 + 8) != 44)
  {
    uint64_t v20 = *((unsigned __int8 *)v16 + 18);
    if (v20 != 1)
    {
      if (v20 == 5)
      {
        uint64_t v20 = *((unsigned int *)v16 + 2);
        if (v20) {
          goto LABEL_55;
        }
      }
      else if (v20 == 2)
      {
        uint64_t v20 = 2;
        goto LABEL_55;
      }
LABEL_68:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      unint64_t v28 = (_DWORD *)(a4 + 16);
      goto LABEL_91;
    }
LABEL_55:
    uint64_t v24 = v20 - 1;
    while (1)
    {
      unint64_t v25 = *((unsigned __int8 *)v16 + 18);
      unsigned int v26 = v25 - 1;
      if (v25 != 1)
      {
        if (v25 == 5)
        {
          unint64_t v25 = *((unsigned int *)v16 + 2);
        }
        else
        {
          if (v25 != 2) {
            goto LABEL_56;
          }
          unint64_t v25 = 2;
        }
      }
      if (v25 > v24)
      {
        BOOL v27 = v16;
        if (v26 >= 2) {
          BOOL v27 = *(swift::Demangle::Node **)v16;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
        goto LABEL_57;
      }
LABEL_56:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
LABEL_57:
      if (--v24 == -1) {
        goto LABEL_68;
      }
    }
  }
  int v17 = *((unsigned __int8 *)v16 + 18);
  uint64_t v18 = v16;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_44;
  }
  if (v17 == 5 && *((_DWORD *)v16 + 2) >= 2u)
  {
    uint64_t v18 = *(swift::Demangle::Node **)v16;
    goto LABEL_38;
  }
  size_t v19 = 0;
LABEL_44:
  int v21 = *((unsigned __int8 *)v19 + 18);
  if ((v21 - 1) >= 2)
  {
    if (v21 != 5 || !*((_DWORD *)v19 + 2))
    {
      unint64_t v22 = 0;
      goto LABEL_50;
    }
    size_t v19 = (uint64_t *)*v19;
  }
  unint64_t v22 = (uint64_t *)*v19;
LABEL_50:
  uint64_t v23 = *((unsigned __int8 *)v22 + 18);
  if (v23 != 1)
  {
    if (v23 == 5)
    {
      uint64_t v23 = *((unsigned int *)v22 + 2);
      if (!v23) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v23 != 2) {
        goto LABEL_84;
      }
      uint64_t v23 = 2;
    }
  }
  uint64_t v29 = v23 - 1;
  do
  {
    unint64_t v30 = *((unsigned __int8 *)v22 + 18);
    unsigned int v31 = v30 - 1;
    if (v30 != 1)
    {
      if (v30 == 5)
      {
        unint64_t v30 = *((unsigned int *)v22 + 2);
      }
      else
      {
        if (v30 != 2) {
          goto LABEL_71;
        }
        unint64_t v30 = 2;
      }
    }
    if (v30 <= v29)
    {
LABEL_71:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_72;
    }
    unint64_t v32 = v22;
    if (v31 >= 2) {
      unint64_t v32 = (uint64_t *)*v22;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_72:
    --v29;
  }
  while (v29 != -1);
  int v17 = *((unsigned __int8 *)v16 + 18);
LABEL_84:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unint64_t v28 = (_DWORD *)(a4 + 16);
  if ((v17 - 1) < 2)
  {
LABEL_88:
    if (!*(_DWORD *)a4) {
      goto LABEL_92;
    }
  }
  else
  {
    if (v17 == 5 && *((_DWORD *)v16 + 2))
    {
      unint64_t v16 = *(swift::Demangle::Node **)v16;
      goto LABEL_88;
    }
    *(void *)(a4 + 8) = 0;
LABEL_91:
    *unint64_t v28 = 0;
LABEL_92:
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "F", 1uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void anonymous namespace'::Remangler::mangleFunctionSignatureSpecialization(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v9 = 0;
  }
  switch(v8)
  {
    case 1:
      int v11 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v9 != (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      int v11 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v9 != (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v10 = *(void *)a2;
LABEL_9:
      int v11 = (swift::Demangle::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == v11) {
        break;
      }
      goto LABEL_16;
    default:
      int v11 = 0;
      if (!v9) {
        break;
      }
LABEL_16:
      int v70 = (char *)this + 12688;
      unsigned int v12 = a3 + 2;
      while (1)
      {
        unint64_t v14 = *(_DWORD ***)v9;
        if (*(_WORD *)(*(void *)v9 + 16) == 78)
        {
          int v15 = *((unsigned __int8 *)v14 + 18);
          unint64_t v16 = *(_DWORD ***)v9;
          if ((v15 - 1) < 2) {
            goto LABEL_25;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2)) {
            break;
          }
        }
LABEL_19:
        unsigned int v9 = (swift::Demangle::Node *)((char *)v9 + 8);
        if (v9 == v11) {
          goto LABEL_90;
        }
      }
      unint64_t v16 = (_DWORD **)*v14;
LABEL_25:
      switch(**v16)
      {
        case 0:
        case 1:
          if (v15 == 2) {
            goto LABEL_30;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            unint64_t v14 = (_DWORD **)*v14;
LABEL_30:
            unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)v14[1];
          }
          else
          {
            unint64_t NodeWithAllocatedText = 0;
          }
LABEL_87:
          memset(&v74, 0, 17);
          {
            unint64_t v44 = *((void *)this + 1585);
            if (v44 > 0xF)
            {
              int v13 = *((_DWORD *)this + 3178) + 16;
              std::string v75 = v74;
              int v76 = v13;
              std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((void *)this + 1585) = v44 + 1;
              unint64_t v45 = (char *)this + 24 * v44 + 12296;
              *(_OWORD *)unint64_t v45 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v45[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_19;
        case 4:
          unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)*((void *)*v14 + 2);
          std::string::size_type v20 = *((void *)NodeWithAllocatedText + 1);
          if (v20)
          {
            int v21 = *(const std::string::value_type **)NodeWithAllocatedText;
            int v22 = **(unsigned __int8 **)NodeWithAllocatedText;
            if (v22 == 95 || (v22 - 48) <= 9)
            {
              int v69 = v4;
              *((unsigned char *)&v75.__r_.__value_.__s + 23) = 1;
              LOWORD(v75.__r_.__value_.__l.__data_) = 95;
              std::string::append(&v75, v21, v20);
              uint64_t v24 = *(void **)this;
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v25 = &v75;
              }
              else {
                unint64_t v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
              }
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v75.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                BOOL v27 = (char *)v24[1];
                if (!v27 || (unint64_t v28 = &v27[size], (unint64_t)&v27[size] > v24[2]))
                {
                  unint64_t v29 = 2 * v24[4];
                  if (v29 <= size + 1) {
                    unint64_t v29 = size + 1;
                  }
                  v24[4] = v29;
                  unint64_t v30 = v29 + 8;
                  unsigned int v31 = v25;
                  unint64_t v32 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
                  unint64_t v25 = v31;
                  *unint64_t v32 = v24[3];
                  BOOL v27 = (char *)(v32 + 1);
                  void v24[2] = (char *)v32 + v30;
                  void v24[3] = v32;
                  unint64_t v28 = (char *)v32 + size + 8;
                }
                v24[1] = v28;
                memmove(v27, v25, size);
              }
              else
              {
                BOOL v27 = 0;
              }
              unint64_t NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v24, 101, (uint64_t)v27, size);
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v75.__r_.__value_.__l.__data_);
              }
              int v4 = v69;
            }
          }
          goto LABEL_87;
        case 5:
        case 9:
          uint64_t v18 = *(void *)v9;
          if (v15 == 2) {
            goto LABEL_35;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            uint64_t v18 = (uint64_t)*v14;
LABEL_35:
            uint64_t v19 = *(void *)(v18 + 8);
          }
          else
          {
            uint64_t v19 = 0;
          }
          memset(&v74, 0, 17);
          {
            unint64_t v33 = *((void *)this + 1585);
            if (v33 > 0xF)
            {
              int v35 = *((_DWORD *)this + 3178) + 16;
              std::string v75 = v74;
              int v76 = v35;
              std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((void *)this + 1585) = v33 + 1;
              size_t v34 = (char *)this + 24 * v33 + 12296;
              *(_OWORD *)size_t v34 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v34[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          int v36 = *((unsigned __int8 *)v14 + 18);
          switch(v36)
          {
            case 1:
              goto LABEL_64;
            case 2:
              goto LABEL_19;
            case 5:
              int v36 = *((_DWORD *)v14 + 2);
              if (v36 == 2) {
                goto LABEL_19;
              }
LABEL_64:
              unsigned int v37 = 2;
              break;
            default:
              int v36 = 0;
              unsigned int v37 = 2;
              break;
          }
          break;
        default:
          goto LABEL_19;
      }
      while (1)
      {
        unint64_t v38 = v37;
        unint64_t v39 = *((unsigned __int8 *)v14 + 18);
        unsigned int v40 = v39 - 1;
        if (v39 == 1) {
          goto LABEL_70;
        }
        if (v39 != 5) {
          break;
        }
        if (*((unsigned int *)v14 + 2) > v38)
        {
LABEL_71:
          unint64_t v41 = v14;
          if (v40 >= 2) {
            unint64_t v41 = (_DWORD **)*v14;
          }
          uint64_t v42 = (swift::Demangle::Node *)v41[v38];
          goto LABEL_76;
        }
LABEL_75:
        uint64_t v42 = 0;
LABEL_76:
        int v43 = *((unsigned __int8 *)v42 + 18);
        if (v43 != 1)
        {
          if (v43 != 5 || *((_DWORD *)v42 + 2) != 1)
          {
            *(_DWORD *)a4 = 10;
            *(void *)(a4 + 8) = v42;
            *(_DWORD *)(a4 + 16) = 321;
            return;
          }
          uint64_t v42 = *(swift::Demangle::Node **)v42;
        }
        if (*(_DWORD *)a4) {
          return;
        }
        unsigned int v37 = v38 + 1;
        if (v36 == v38 + 1) {
          goto LABEL_19;
        }
      }
      if (v39 != 2) {
        goto LABEL_75;
      }
      unint64_t v39 = 2;
LABEL_70:
      if (v39 > v38) {
        goto LABEL_71;
      }
      goto LABEL_75;
  }
LABEL_90:
  unint64_t v46 = (char **)((char *)this + 12728);
  swift::Demangle::CharVector::append((char **)this + 1591, "Tf", 2uLL, *((void **)this + 1593));
  int v47 = *((unsigned __int8 *)v5 + 18);
  size_t v48 = v5;
  if ((v47 - 1) >= 2)
  {
    if (v47 == 5)
    {
      unint64_t v49 = *(void *)v5;
      size_t v48 = *(swift::Demangle::Node **)v5;
      goto LABEL_99;
    }
    size_t v48 = 0;
  }
  switch(v47)
  {
    case 1:
      unint64_t v50 = (swift::Demangle::Node *)((char *)v5 + 8);
      if (v48 == (swift::Demangle::Node *)((char *)v5 + 8)) {
        goto LABEL_135;
      }
      break;
    case 2:
      unint64_t v50 = (swift::Demangle::Node *)((char *)v5 + 16);
      if (v48 == (swift::Demangle::Node *)((char *)v5 + 16)) {
        goto LABEL_135;
      }
      break;
    case 5:
      unint64_t v49 = *(void *)v5;
LABEL_99:
      unint64_t v50 = (swift::Demangle::Node *)(v49 + 8 * *((unsigned int *)v5 + 2));
      if (v48 == v50)
      {
LABEL_135:
        swift::Demangle::CharVector::append(v46, "_n", 2uLL, *((void **)this + 1593));
        goto LABEL_136;
      }
      break;
    default:
      unint64_t v50 = 0;
      if (!v48) {
        goto LABEL_135;
      }
      break;
  }
  char v51 = 0;
  uint64_t v52 = (v4 + 1);
  BOOL v71 = v50;
  uint64_t v72 = v5;
  uint64_t v73 = a4;
  do
  {
    uint64_t v53 = *(swift::Demangle::Node **)v48;
    if (*(_WORD *)(*(void *)v48 + 16) != 79) {
      goto LABEL_129;
    }
    uint64_t v54 = v52;
    unsigned int v55 = *((_DWORD *)this + 3184);
    size_t v56 = *((unsigned int *)this + 3185);
    char v57 = (char *)*((void *)this + 1591);
    if (v55 >= v56)
    {
      unint64_t v58 = (void *)*((void *)this + 1593);
      uint64_t v59 = (char *)v58[1];
      if (&v57[v56] == v59)
      {
        unint64_t v61 = (unint64_t)&v57[v56 + 1];
        unint64_t v60 = v58[2];
        if (v61 <= v60)
        {
          v58[1] = v61;
          LODWORD(v62) = 1;
          uint64_t v5 = v72;
LABEL_127:
          *((_DWORD *)this + 3185) = v56 + v62;
          goto LABEL_128;
        }
      }
      else
      {
        unint64_t v60 = v58[2];
      }
      if ((2 * v56) <= 4) {
        uint64_t v62 = 4;
      }
      else {
        uint64_t v62 = (2 * v56);
      }
      size_t v63 = v62 + v56;
      if (v59) {
        BOOL v64 = (unint64_t)&v59[v62 + v56] > v60;
      }
      else {
        BOOL v64 = 1;
      }
      char v57 = (char *)v58[1];
      if (v64)
      {
        unint64_t v65 = 2 * v58[4];
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        v58[4] = v65;
        unint64_t v66 = v65 + 8;
        long long v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        *long long v67 = v58[3];
        char v57 = (char *)(v67 + 1);
        long long v68 = (char *)v67 + v66;
        unint64_t v46 = (char **)((char *)this + 12728);
        v58[2] = v68;
        v58[3] = v67;
      }
      v58[1] = &v57[v63];
      if (v56) {
        memcpy(v57, *v46, v56);
      }
      *((void *)this + 1591) = v57;
      LODWORD(v56) = *((_DWORD *)this + 3185);
      unsigned int v55 = *((_DWORD *)this + 3184);
      unint64_t v50 = v71;
      uint64_t v5 = v72;
      goto LABEL_127;
    }
LABEL_128:
    *((_DWORD *)this + 3184) = v55 + 1;
    v57[v55] = 95;
    char v51 = 1;
    uint64_t v52 = v54;
    a4 = v73;
LABEL_129:
    if (*(_DWORD *)a4) {
      return;
    }
    if (*((_WORD *)v53 + 8) == 216 && *((unsigned char *)v5 + 18) == 4) {
      swift::Demangle::CharVector::append((unsigned int *)v46, *(void *)v5, *((swift::Demangle::NodeFactory **)this + 1593));
    }
    size_t v48 = (swift::Demangle::Node *)((char *)v48 + 8);
  }
  while (v48 != v50);
  if ((v51 & 1) == 0) {
    goto LABEL_135;
  }
LABEL_136:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t anonymous namespace'::Remangler::mangleFunctionSignatureSpecializationParam@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 != 5 || !*((_DWORD *)a2 + 2))
  {
    unsigned int v12 = *(_DWORD *)(this + 12736);
    size_t v13 = *(unsigned int *)(this + 12740);
    unint64_t v14 = *(unsigned char **)(this + 12728);
    if (v12 < v13)
    {
LABEL_30:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v12 + 1;
      v14[v12] = 110;
      goto LABEL_206;
    }
    int v15 = *(void **)(this + 12744);
    unint64_t v16 = (unsigned char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v24 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v24 <= v17)
      {
        v15[1] = v24;
        LODWORD(v25) = 1;
LABEL_29:
        *(_DWORD *)(v4 + 12740) = v13 + v25;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v13);
    }
    size_t v26 = v25 + v13;
    if (v16) {
      BOOL v27 = (unint64_t)&v16[v25 + v13] > v17;
    }
    else {
      BOOL v27 = 1;
    }
    unint64_t v14 = (unsigned char *)v15[1];
    if (v27)
    {
      unint64_t v28 = 2 * v15[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v15[4] = v28;
      unint64_t v29 = v28 + 8;
      this = (uint64_t)malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      uint64_t v30 = this + v29;
      *(void *)this = v15[3];
      unint64_t v14 = (unsigned char *)(this + 8);
      v15[2] = v30;
      void v15[3] = this;
    }
    v15[1] = &v14[v26];
    if (v13) {
      this = (uint64_t)memcpy(v14, *(const void **)(v4 + 12728), v13);
    }
    *(void *)(v4 + 12728) = v14;
    LODWORD(v13) = *(_DWORD *)(v4 + 12740);
    unsigned int v12 = *(_DWORD *)(v4 + 12736);
    goto LABEL_29;
  }
  unsigned int v7 = *(swift::Demangle::Node **)a2;
LABEL_5:
  int v8 = **(_DWORD **)v7;
  switch(v8)
  {
    case 0:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pf";
      goto LABEL_59;
    case 1:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pg";
      goto LABEL_59;
    case 2:
      unint64_t v33 = (char **)(this + 12728);
      size_t v34 = *(void **)(this + 12744);
      int v35 = "pi";
      goto LABEL_34;
    case 3:
      unint64_t v33 = (char **)(this + 12728);
      size_t v34 = *(void **)(this + 12744);
      int v35 = "pd";
LABEL_34:
      swift::Demangle::CharVector::append(v33, v35, 2uLL, v34);
      if (*((unsigned char *)v3 + 18) == 5) {
        uint64_t v3 = *(swift::Demangle::Node **)v3;
      }
      uint64_t v36 = *((void *)v3 + 1);
      int v11 = *(char **)v36;
      size_t v37 = *(void *)(v36 + 8);
      uint64_t v10 = *(void **)(v4 + 12744);
      unsigned int v9 = v33;
      goto LABEL_60;
    case 4:
      unint64_t v38 = (const void **)(this + 12728);
      swift::Demangle::CharVector::append((char **)(this + 12728), "ps", 2uLL, *(void **)(this + 12744));
      unint64_t v39 = v3;
      if (*((unsigned char *)v3 + 18) == 5) {
        unint64_t v39 = *(swift::Demangle::Node **)v3;
      }
      unsigned int v40 = (uint64_t *)*((void *)v39 + 1);
      this = *v40;
      uint64_t v41 = v40[1];
      if (v41 == 4)
      {
        this = memcmp((const void *)this, "objc", 4uLL);
        if (!this)
        {
          this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 99);
          goto LABEL_61;
        }
        goto LABEL_74;
      }
      if (v41 != 3)
      {
        if (v41 == 2 && *(_WORD *)this == 14453)
        {
          unsigned int v18 = *(_DWORD *)(v4 + 12736);
          size_t v42 = *(unsigned int *)(v4 + 12740);
          std::string::size_type v20 = *(char **)(v4 + 12728);
          if (v18 < v42)
          {
LABEL_222:
            int v31 = 0;
            uint64_t v3 = 0;
            int v32 = 0;
            *(_DWORD *)(v4 + 12736) = v18 + 1;
            char v85 = 98;
            goto LABEL_205;
          }
          int v43 = *(void **)(v4 + 12744);
          unint64_t v44 = (char *)v43[1];
          if (&v20[v42] == v44)
          {
            unint64_t v130 = (unint64_t)&v20[v42 + 1];
            unint64_t v45 = v43[2];
            if (v130 <= v45)
            {
              v43[1] = v130;
              LODWORD(v131) = 1;
LABEL_221:
              *(_DWORD *)(v4 + 12740) = v42 + v131;
              goto LABEL_222;
            }
          }
          else
          {
            unint64_t v45 = v43[2];
          }
          if ((2 * v42) <= 4) {
            uint64_t v131 = 4;
          }
          else {
            uint64_t v131 = (2 * v42);
          }
          size_t v132 = v131 + v42;
          if (!v44 || (unint64_t)&v44[v132] > v45)
          {
            unint64_t v133 = 2 * v43[4];
            if (v133 <= v132 + 1) {
              unint64_t v133 = v132 + 1;
            }
            v43[4] = v133;
            unint64_t v134 = v133 + 8;
            this = (uint64_t)malloc_type_malloc(v133 + 8, 0xD0263BC5uLL);
            uint64_t v135 = this + v134;
            *(void *)this = v43[3];
            unint64_t v44 = (char *)(this + 8);
            v43[2] = v135;
            v43[3] = this;
          }
          v43[1] = &v44[v132];
          if (v42) {
            this = (uint64_t)memcpy(v44, *v38, v42);
          }
          *(void *)(v4 + 12728) = v44;
          LODWORD(v42) = *(_DWORD *)(v4 + 12740);
          std::string::size_type v20 = v44;
          unsigned int v18 = *(_DWORD *)(v4 + 12736);
          goto LABEL_221;
        }
LABEL_74:
        int v32 = 1570;
        int v31 = 14;
        goto LABEL_206;
      }
      this = memcmp((const void *)this, "u16", 3uLL);
      if (this) {
        goto LABEL_74;
      }
      this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 119);
      goto LABEL_61;
    case 5:
      unsigned int v46 = *(_DWORD *)(this + 12736);
      size_t v47 = *(unsigned int *)(this + 12740);
      size_t v48 = *(char **)(this + 12728);
      if (v46 < v47) {
        goto LABEL_107;
      }
      unint64_t v49 = *(void **)(this + 12744);
      unint64_t v50 = (char *)v49[1];
      if (&v48[v47] == v50)
      {
        unint64_t v86 = (unint64_t)&v48[v47 + 1];
        unint64_t v51 = v49[2];
        if (v86 <= v51)
        {
          v49[1] = v86;
          LODWORD(v87) = 1;
          goto LABEL_106;
        }
      }
      else
      {
        unint64_t v51 = v49[2];
      }
      if ((2 * v47) <= 4) {
        uint64_t v87 = 4;
      }
      else {
        uint64_t v87 = (2 * v47);
      }
      size_t v88 = v87 + v47;
      if (v50) {
        BOOL v89 = (unint64_t)&v50[v87 + v47] > v51;
      }
      else {
        BOOL v89 = 1;
      }
      size_t v48 = (char *)v49[1];
      if (v89)
      {
        unint64_t v90 = 2 * v49[4];
        if (v90 <= v88 + 1) {
          unint64_t v90 = v88 + 1;
        }
        v49[4] = v90;
        unint64_t v91 = v90 + 8;
        this = (uint64_t)malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
        uint64_t v92 = this + v91;
        *(void *)this = v49[3];
        size_t v48 = (char *)(this + 8);
        v49[2] = v92;
        v49[3] = this;
      }
      v49[1] = &v48[v88];
      if (v47) {
        this = (uint64_t)memcpy(v48, *(const void **)(v4 + 12728), v47);
      }
      *(void *)(v4 + 12728) = v48;
      LODWORD(v47) = *(_DWORD *)(v4 + 12740);
      unsigned int v46 = *(_DWORD *)(v4 + 12736);
LABEL_106:
      *(_DWORD *)(v4 + 12740) = v47 + v87;
LABEL_107:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v46 + 1;
      v48[v46] = 99;
      goto LABEL_206;
    case 6:
      unsigned int v52 = *(_DWORD *)(this + 12736);
      size_t v53 = *(unsigned int *)(this + 12740);
      uint64_t v54 = *(char **)(this + 12728);
      if (v52 < v53) {
        goto LABEL_124;
      }
      unsigned int v55 = *(void **)(this + 12744);
      size_t v56 = (char *)v55[1];
      if (&v54[v53] == v56)
      {
        unint64_t v93 = (unint64_t)&v54[v53 + 1];
        unint64_t v57 = v55[2];
        if (v93 <= v57)
        {
          v55[1] = v93;
          LODWORD(v94) = 1;
          goto LABEL_123;
        }
      }
      else
      {
        unint64_t v57 = v55[2];
      }
      if ((2 * v53) <= 4) {
        uint64_t v94 = 4;
      }
      else {
        uint64_t v94 = (2 * v53);
      }
      size_t v95 = v94 + v53;
      if (v56) {
        BOOL v96 = (unint64_t)&v56[v94 + v53] > v57;
      }
      else {
        BOOL v96 = 1;
      }
      uint64_t v54 = (char *)v55[1];
      if (v96)
      {
        unint64_t v97 = 2 * v55[4];
        if (v97 <= v95 + 1) {
          unint64_t v97 = v95 + 1;
        }
        v55[4] = v97;
        unint64_t v98 = v97 + 8;
        this = (uint64_t)malloc_type_malloc(v97 + 8, 0xD0263BC5uLL);
        uint64_t v99 = this + v98;
        *(void *)this = v55[3];
        uint64_t v54 = (char *)(this + 8);
        v55[2] = v99;
        v55[3] = this;
      }
      v55[1] = &v54[v95];
      if (v53) {
        this = (uint64_t)memcpy(v54, *(const void **)(v4 + 12728), v53);
      }
      *(void *)(v4 + 12728) = v54;
      LODWORD(v53) = *(_DWORD *)(v4 + 12740);
      unsigned int v52 = *(_DWORD *)(v4 + 12736);
LABEL_123:
      *(_DWORD *)(v4 + 12740) = v53 + v94;
LABEL_124:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v52 + 1;
      v54[v52] = 105;
      goto LABEL_206;
    case 7:
      unsigned int v58 = *(_DWORD *)(this + 12736);
      size_t v59 = *(unsigned int *)(this + 12740);
      unint64_t v60 = *(char **)(this + 12728);
      if (v58 < v59) {
        goto LABEL_141;
      }
      unint64_t v61 = *(void **)(this + 12744);
      uint64_t v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        unint64_t v100 = (unint64_t)&v60[v59 + 1];
        unint64_t v63 = v61[2];
        if (v100 <= v63)
        {
          v61[1] = v100;
          LODWORD(v101) = 1;
          goto LABEL_140;
        }
      }
      else
      {
        unint64_t v63 = v61[2];
      }
      if ((2 * v59) <= 4) {
        uint64_t v101 = 4;
      }
      else {
        uint64_t v101 = (2 * v59);
      }
      size_t v102 = v101 + v59;
      if (v62) {
        BOOL v103 = (unint64_t)&v62[v101 + v59] > v63;
      }
      else {
        BOOL v103 = 1;
      }
      unint64_t v60 = (char *)v61[1];
      if (v103)
      {
        unint64_t v104 = 2 * v61[4];
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        v61[4] = v104;
        unint64_t v105 = v104 + 8;
        this = (uint64_t)malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
        uint64_t v106 = this + v105;
        *(void *)this = v61[3];
        unint64_t v60 = (char *)(this + 8);
        v61[2] = v106;
        v61[3] = this;
      }
      v61[1] = &v60[v102];
      if (v59) {
        this = (uint64_t)memcpy(v60, *(const void **)(v4 + 12728), v59);
      }
      *(void *)(v4 + 12728) = v60;
      LODWORD(v59) = *(_DWORD *)(v4 + 12740);
      unsigned int v58 = *(_DWORD *)(v4 + 12736);
LABEL_140:
      *(_DWORD *)(v4 + 12740) = v59 + v101;
LABEL_141:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v58 + 1;
      v60[v58] = 115;
      goto LABEL_206;
    case 8:
      unsigned int v64 = *(_DWORD *)(this + 12736);
      size_t v65 = *(unsigned int *)(this + 12740);
      unint64_t v66 = *(char **)(this + 12728);
      if (v64 < v65) {
        goto LABEL_158;
      }
      long long v67 = *(void **)(this + 12744);
      long long v68 = (char *)v67[1];
      if (&v66[v65] == v68)
      {
        unint64_t v107 = (unint64_t)&v66[v65 + 1];
        unint64_t v69 = v67[2];
        if (v107 <= v69)
        {
          v67[1] = v107;
          LODWORD(v108) = 1;
          goto LABEL_157;
        }
      }
      else
      {
        unint64_t v69 = v67[2];
      }
      if ((2 * v65) <= 4) {
        uint64_t v108 = 4;
      }
      else {
        uint64_t v108 = (2 * v65);
      }
      size_t v109 = v108 + v65;
      if (v68) {
        BOOL v110 = (unint64_t)&v68[v108 + v65] > v69;
      }
      else {
        BOOL v110 = 1;
      }
      unint64_t v66 = (char *)v67[1];
      if (v110)
      {
        unint64_t v111 = 2 * v67[4];
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        v67[4] = v111;
        unint64_t v112 = v111 + 8;
        this = (uint64_t)malloc_type_malloc(v111 + 8, 0xD0263BC5uLL);
        uint64_t v113 = this + v112;
        *(void *)this = v67[3];
        unint64_t v66 = (char *)(this + 8);
        v67[2] = v113;
        v67[3] = this;
      }
      v67[1] = &v66[v109];
      if (v65) {
        this = (uint64_t)memcpy(v66, *(const void **)(v4 + 12728), v65);
      }
      *(void *)(v4 + 12728) = v66;
      LODWORD(v65) = *(_DWORD *)(v4 + 12740);
      unsigned int v64 = *(_DWORD *)(v4 + 12736);
LABEL_157:
      *(_DWORD *)(v4 + 12740) = v65 + v108;
LABEL_158:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v64 + 1;
      v66[v64] = 114;
      goto LABEL_206;
    case 9:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pk";
LABEL_59:
      size_t v37 = 2;
LABEL_60:
      this = (uint64_t)swift::Demangle::CharVector::append(v9, v11, v37, v10);
      goto LABEL_61;
    default:
      if (v8 == 256)
      {
        unsigned int v18 = *(_DWORD *)(this + 12736);
        size_t v19 = *(unsigned int *)(this + 12740);
        std::string::size_type v20 = *(char **)(this + 12728);
        if (v18 < v19)
        {
LABEL_90:
          int v31 = 0;
          uint64_t v3 = 0;
          int v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          char v85 = 120;
          goto LABEL_205;
        }
        int v21 = *(void **)(this + 12744);
        int v22 = (char *)v21[1];
        if (&v20[v19] == v22)
        {
          unint64_t v79 = (unint64_t)&v20[v19 + 1];
          unint64_t v23 = v21[2];
          if (v79 <= v23)
          {
            v21[1] = v79;
            LODWORD(v80) = 1;
LABEL_89:
            *(_DWORD *)(v4 + 12740) = v19 + v80;
            goto LABEL_90;
          }
        }
        else
        {
          unint64_t v23 = v21[2];
        }
        if ((2 * v19) <= 4) {
          uint64_t v80 = 4;
        }
        else {
          uint64_t v80 = (2 * v19);
        }
        size_t v81 = v80 + v19;
        if (!v22 || (unint64_t)&v22[v81] > v23)
        {
          unint64_t v82 = 2 * v21[4];
          if (v82 <= v81 + 1) {
            unint64_t v82 = v81 + 1;
          }
          v21[4] = v82;
          unint64_t v83 = v82 + 8;
          this = (uint64_t)malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
          uint64_t v84 = this + v83;
          *(void *)this = v21[3];
          int v22 = (char *)(this + 8);
          v21[2] = v84;
          v21[3] = this;
        }
        v21[1] = &v22[v81];
        if (v19) {
          this = (uint64_t)memcpy(v22, *(const void **)(v4 + 12728), v19);
        }
        *(void *)(v4 + 12728) = v22;
        LODWORD(v19) = *(_DWORD *)(v4 + 12740);
        std::string::size_type v20 = v22;
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_89;
      }
      if ((v8 & 0x400) != 0)
      {
        uint64_t v72 = (const void **)(this + 12728);
        unsigned int v73 = *(_DWORD *)(this + 12736);
        size_t v74 = *(unsigned int *)(this + 12740);
        std::string v75 = *(char **)(this + 12728);
        if (v73 < v74) {
          goto LABEL_173;
        }
        int v76 = *(void **)(this + 12744);
        uint64_t v77 = (char *)v76[1];
        if (&v75[v74] == v77)
        {
          unint64_t v114 = (unint64_t)&v75[v74 + 1];
          unint64_t v78 = v76[2];
          if (v114 <= v78)
          {
            v76[1] = v114;
            LODWORD(v115) = 1;
LABEL_172:
            *(_DWORD *)(v4 + 12740) = v74 + v115;
LABEL_173:
            *(_DWORD *)(v4 + 12736) = v73 + 1;
            v75[v73] = 101;
            if ((v8 & 0x40) != 0)
            {
              this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 68);
              if ((v8 & 0x80) == 0) {
                goto LABEL_175;
              }
            }
            else if ((v8 & 0x80) == 0)
            {
              goto LABEL_175;
            }
            this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
            if ((v8 & 0x200) == 0) {
              goto LABEL_181;
            }
            goto LABEL_179;
          }
        }
        else
        {
          unint64_t v78 = v76[2];
        }
        if ((2 * v74) <= 4) {
          uint64_t v115 = 4;
        }
        else {
          uint64_t v115 = (2 * v74);
        }
        size_t v116 = v115 + v74;
        if (!v77 || (unint64_t)&v77[v116] > v78)
        {
          unint64_t v117 = 2 * v76[4];
          if (v117 <= v116 + 1) {
            unint64_t v117 = v116 + 1;
          }
          v76[4] = v117;
          unint64_t v118 = v117 + 8;
          this = (uint64_t)malloc_type_malloc(v117 + 8, 0xD0263BC5uLL);
          uint64_t v119 = this + v118;
          *(void *)this = v76[3];
          uint64_t v77 = (char *)(this + 8);
          v76[2] = v119;
          v76[3] = this;
        }
        v76[1] = &v77[v116];
        if (v74) {
          this = (uint64_t)memcpy(v77, *v72, v74);
        }
        *(void *)(v4 + 12728) = v77;
        LODWORD(v74) = *(_DWORD *)(v4 + 12740);
        std::string v75 = v77;
        unsigned int v73 = *(_DWORD *)(v4 + 12736);
        goto LABEL_172;
      }
      if ((v8 & 0x40) != 0)
      {
        uint64_t v72 = (const void **)(this + 12728);
        this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(this + 12728), 100);
        if ((v8 & 0x80) != 0) {
          this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
        }
LABEL_175:
        if ((v8 & 0x200) == 0) {
          goto LABEL_181;
        }
LABEL_179:
        int v70 = (char **)v72;
        char v71 = 79;
        goto LABEL_180;
      }
      if ((v8 & 0x80) != 0)
      {
        int v70 = (char **)(this + 12728);
        char v71 = 103;
      }
      else
      {
        if ((v8 & 0x200) == 0) {
          goto LABEL_181;
        }
        int v70 = (char **)(this + 12728);
        char v71 = 111;
      }
LABEL_180:
      this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<(v70, v71);
LABEL_181:
      if ((v8 & 0x100) != 0)
      {
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        size_t v120 = *(unsigned int *)(v4 + 12740);
        std::string::size_type v20 = *(char **)(v4 + 12728);
        if (v18 < v120)
        {
LABEL_204:
          int v31 = 0;
          uint64_t v3 = 0;
          int v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          char v85 = 88;
LABEL_205:
          v20[v18] = v85;
          goto LABEL_206;
        }
        unint64_t v121 = *(void **)(v4 + 12744);
        unint64_t v122 = (char *)v121[1];
        if (&v20[v120] == v122)
        {
          unint64_t v124 = (unint64_t)&v20[v120 + 1];
          unint64_t v123 = v121[2];
          if (v124 <= v123)
          {
            v121[1] = v124;
            LODWORD(v125) = 1;
LABEL_203:
            *(_DWORD *)(v4 + 12740) = v120 + v125;
            goto LABEL_204;
          }
        }
        else
        {
          unint64_t v123 = v121[2];
        }
        if ((2 * v120) <= 4) {
          uint64_t v125 = 4;
        }
        else {
          uint64_t v125 = (2 * v120);
        }
        size_t v126 = v125 + v120;
        if (!v122 || (unint64_t)&v122[v126] > v123)
        {
          unint64_t v127 = 2 * v121[4];
          if (v127 <= v126 + 1) {
            unint64_t v127 = v126 + 1;
          }
          v121[4] = v127;
          unint64_t v128 = v127 + 8;
          this = (uint64_t)malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
          uint64_t v129 = this + v128;
          *(void *)this = v121[3];
          unint64_t v122 = (char *)(this + 8);
          v121[2] = v129;
          v121[3] = this;
        }
        v121[1] = &v122[v126];
        if (v120) {
          this = (uint64_t)memcpy(v122, *(const void **)(v4 + 12728), v120);
        }
        *(void *)(v4 + 12728) = v122;
        LODWORD(v120) = *(_DWORD *)(v4 + 12740);
        std::string::size_type v20 = v122;
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_203;
      }
LABEL_61:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
LABEL_206:
      *(_DWORD *)a3 = v31;
      *(void *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v32;
      return this;
  }
}

uint64_t *anonymous namespace'::Remangler::mangleFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  int v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    unint64_t v16 = *(void **)(v5 + 12744);
    unint64_t v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v14) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unint64_t v17 = (char *)(this + 1);
      v16[2] = v24;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v14) {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    }
    *(void *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    int v15 = v17;
    unsigned int v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 99;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleConstrainedExistential@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 == 2) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    unsigned int v9 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)v4 + 18);
  if (v8 == 2)
  {
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_9:
  if (v8 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    uint64_t v4 = *(swift::Demangle::Node **)v4;
    goto LABEL_12;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XP", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleConstrainedExistentialRequirementList@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_::Remangler *)this;
  BOOL v13 = 1;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unint64_t v8 = 0;
      unsigned int v9 = a3 + 1;
      while (1)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 == 1) {
          goto LABEL_13;
        }
        if (v10 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) <= v8)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_8;
        }
LABEL_16:
        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_8:
        if (v7 == ++v8) {
          goto LABEL_20;
        }
      }
      if (v10 != 2) {
        goto LABEL_7;
      }
      unint64_t v10 = 2;
LABEL_13:
      if (v10 <= v8) {
        goto LABEL_7;
      }
      goto LABEL_16;
  }
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericPartialSpecialization@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::Node **)a2;
LABEL_9:
      unsigned int v11 = (swift::Demangle::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    unsigned int v9 = 0;
  }
  switch(v8)
  {
    case 1:
      unsigned int v11 = (swift::Demangle::Node *)((char *)a2 + 8);
      goto LABEL_15;
    case 2:
      unsigned int v11 = (swift::Demangle::Node *)((char *)a2 + 16);
      goto LABEL_15;
    case 5:
      uint64_t v10 = *(void *)a2;
      goto LABEL_9;
  }
  unsigned int v11 = 0;
LABEL_15:
  while (v9 != v11)
  {
    unsigned int v12 = *(swift::Demangle::Node **)v9;
    if (*(_WORD *)(*(void *)v9 + 16) == 94)
    {
      int v19 = *((unsigned __int8 *)v12 + 18);
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5 || !*((_DWORD *)v12 + 2))
        {
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          break;
        }
        unsigned int v12 = *(swift::Demangle::Node **)v12;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
      break;
    }
    unsigned int v9 = (swift::Demangle::Node *)((char *)v9 + 8);
  }
  BOOL v13 = (swift::Demangle::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) == 87) {
    size_t v14 = "TP";
  }
  else {
    size_t v14 = "Tp";
  }
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  int v16 = *((unsigned __int8 *)a2 + 18);
  unint64_t v17 = (swift::Demangle::Node **)a2;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      uint64_t v18 = *(void *)a2;
      unint64_t v17 = *(swift::Demangle::Node ***)a2;
      goto LABEL_33;
    }
    unint64_t v17 = 0;
  }
  if (v16 == 1)
  {
    BOOL v13 = (swift::Demangle::Node **)((char *)a2 + 8);
LABEL_36:
    if (v17 != v13) {
      goto LABEL_37;
    }
    goto LABEL_43;
  }
  if (v16 == 2) {
    goto LABEL_36;
  }
  if (v16 != 5)
  {
    BOOL v13 = 0;
    if (v17) {
      goto LABEL_37;
    }
LABEL_43:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  uint64_t v18 = *(void *)a2;
LABEL_33:
  BOOL v13 = (swift::Demangle::Node **)(v18 + 8 * *((unsigned int *)a2 + 2));
  if (v17 == v13) {
    goto LABEL_43;
  }
LABEL_37:
  unsigned int v20 = a3 + 1;
  while (1)
  {
    if (*((_WORD *)*v17 + 8) != 94)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    if (++v17 == v13) {
      goto LABEL_43;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WG", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WI", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleResilientProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Wr", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MP", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobal@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "$s", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unsigned int v12 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_31;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_31;
      }
      goto LABEL_16;
  }
  unsigned int v12 = 0;
  if (v10)
  {
LABEL_16:
    char v13 = 0;
    unsigned int v14 = a3 + 1;
    do
    {
      char v15 = 1;
      switch(*(_WORD *)(*(void *)v10 + 16))
      {
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x4D:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5F:
        case 0x60:
        case 0x90:
        case 0xA0:
        case 0xA4:
        case 0x100:
        case 0x115:
        case 0x11F:
        case 0x120:
        case 0x13F:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14C:
        case 0x14D:
        case 0x154:
          goto LABEL_18;
        default:
          if (*(_DWORD *)a4) {
            return result;
          }
          if ((v13 & 1) == 0) {
            goto LABEL_30;
          }
          int v16 = v10;
          break;
      }
      while (1)
      {
        int v17 = *((unsigned __int8 *)a2 + 18);
        uint64_t v18 = a2;
        if ((v17 - 1) < 2) {
          goto LABEL_26;
        }
        if (v17 != 5) {
          break;
        }
        uint64_t v18 = *(swift::Demangle::Node **)a2;
LABEL_26:
        if (v16 == v18) {
          goto LABEL_30;
        }
LABEL_27:
        int v19 = (swift::Demangle::Node *)*((void *)v16 - 1);
        int v16 = (swift::Demangle::Node *)((char *)v16 - 8);
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      if (v16) {
        goto LABEL_27;
      }
LABEL_30:
      char v15 = 0;
LABEL_18:
      uint64_t v10 = (swift::Demangle::Node *)((char *)v10 + 8);
      char v13 = v15;
    }
    while (v10 != v12);
  }
LABEL_31:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleIdentifier(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  long long v9 = 0uLL;
  LOBYTE(v10) = 0;
  {
    unint64_t v6 = *((void *)this + 1585);
    if (v6 > 0xF)
    {
      int v8 = *((_DWORD *)this + 3178) + 16;
      long long v11 = v9;
      uint64_t v12 = v10;
      int v13 = v8;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v11, &v11);
    }
    else
    {
      *((void *)this + 1585) = v6 + 1;
      int v7 = (char *)this + 24 * v6 + 12296;
      *(_OWORD *)int v7 = v9;
      v7[16] = v10;
    }
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarInitializer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "fe", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarDestroyer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "fE", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplEscaping@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 101;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplConvention@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = *a2;
  size_t v6 = a2[1];
  if (v6 == (uint64_t *)13)
  {
    uint64_t v11 = *v5;
    uint64_t v12 = *(uint64_t *)((char *)v5 + 5);
    if (v11 != 0x5F65656C6C616340 || v12 != 0x64656E776F5F6565) {
      goto LABEL_23;
    }
    char v10 = 120;
    goto LABEL_25;
  }
  if (v6 == (uint64_t *)18)
  {
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    int v16 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 0x5F65656C6C616340 || v15 != 0x65746E6172617567 || v16 != 25701) {
      goto LABEL_23;
    }
    char v10 = 103;
LABEL_25:
    unsigned int v21 = this[3184];
    size_t v22 = this[3185];
    unint64_t v23 = (char *)*((void *)this + 1591);
    if (v21 < v22)
    {
LABEL_42:
      int v20 = 0;
      a2 = 0;
      int v19 = 0;
      v3[3184] = v21 + 1;
      v23[v21] = v10;
      goto LABEL_43;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    uint64_t v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      unint64_t v27 = (unint64_t)&v23[v22 + 1];
      unint64_t v26 = v24[2];
      if (v27 <= v26)
      {
        v24[1] = v27;
        LODWORD(v28) = 1;
LABEL_41:
        v3[3185] = v22 + v28;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v22);
    }
    size_t v29 = v28 + v22;
    if (!v25 || (unint64_t)&v25[v29] > v26)
    {
      unint64_t v30 = 2 * v24[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      v24[4] = v30;
      unint64_t v31 = v30 + 8;
      this = (unsigned int *)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      int v32 = (char *)this + v31;
      *(void *)this = v24[3];
      uint64_t v25 = (char *)(this + 2);
      void v24[2] = v32;
      void v24[3] = this;
    }
    v24[1] = &v25[v29];
    if (v22) {
      this = (unsigned int *)memcpy(v25, *((const void **)v3 + 1591), v22);
    }
    *((void *)v3 + 1591) = v25;
    LODWORD(v22) = v3[3185];
    unint64_t v23 = v25;
    unsigned int v21 = v3[3184];
    goto LABEL_41;
  }
  if (v6 == (uint64_t *)15)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = *(uint64_t *)((char *)v5 + 7);
    if (v7 == 0x5F65656C6C616340 && v8 == 0x64656E776F6E755FLL)
    {
      char v10 = 121;
      goto LABEL_25;
    }
  }
LABEL_23:
  int v19 = 1882;
  int v20 = 15;
LABEL_43:
  *(_DWORD *)a3 = v20;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v19;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplDifferentiabilityKind@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = this[3184];
  size_t v7 = this[3185];
  uint64_t v8 = (char *)*((void *)this + 1591);
  if (v6 >= v7)
  {
    long long v9 = (void *)*((void *)this + 1593);
    char v10 = (char *)v9[1];
    if (&v8[v7] == v10)
    {
      unint64_t v12 = (unint64_t)&v8[v7 + 1];
      unint64_t v11 = v9[2];
      if (v12 <= v11)
      {
        v9[1] = v12;
        LODWORD(v13) = 1;
LABEL_20:
        v3[3185] = v7 + v13;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v11 = v9[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v7);
    }
    size_t v14 = v13 + v7;
    if (v10) {
      BOOL v15 = (unint64_t)&v10[v13 + v7] > v11;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v8 = (char *)v9[1];
    if (v15)
    {
      unint64_t v16 = 2 * v9[4];
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      v9[4] = v16;
      unint64_t v17 = v16 + 8;
      this = (unsigned int *)malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      uint64_t v18 = (char *)this + v17;
      *(void *)this = v9[3];
      uint64_t v8 = (char *)(this + 2);
      v9[2] = v18;
      v9[3] = this;
    }
    v9[1] = &v8[v14];
    if (v7) {
      this = (unsigned int *)memcpy(v8, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v7) = v3[3185];
    unsigned int v6 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v6 + 1;
  v8[v6] = v5;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplErasedIsolation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 65;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplSendingResult@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 84;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterResultDifferentiability@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 3)
  {
    int v6 = 1890;
    int v7 = 1;
    goto LABEL_29;
  }
  uint64_t v4 = *((void *)a2 + 1);
  if (!v4)
  {
    int v7 = 0;
    a2 = 0;
    int v6 = 0;
    goto LABEL_29;
  }
  if (v4 == 13 && **(void **)a2 == 0x76697265446F6E40 && *(void *)(*(void *)a2 + 5) == 0x6576697461766972)
  {
    uint64_t v8 = this;
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    unint64_t v11 = (char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      int v7 = 0;
      a2 = 0;
      int v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }
    uint64_t v12 = (void *)*((void *)this + 1593);
    size_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      unint64_t v18 = 2 * v12[4];
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      v12[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      int v20 = (char *)this + v19;
      *(void *)this = v12[3];
      size_t v13 = (char *)(this + 2);
      v12[2] = v20;
      void v12[3] = this;
    }
    v12[1] = &v13[v17];
    if (v10) {
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
    }
    *((void *)v8 + 1591) = v13;
    LODWORD(v10) = v8[3185];
    unint64_t v11 = v13;
    unsigned int v9 = v8[3184];
    goto LABEL_27;
  }
  int v6 = 1898;
  int v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterSending@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 3)
  {
    int v5 = 1906;
    int v6 = 1;
    goto LABEL_9;
  }
  if (*((void *)a2 + 1) == 7 && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(void *)a2 + 3) == 1735289188)
  {
    int v7 = this;
    unsigned int v8 = this[3184];
    size_t v9 = this[3185];
    size_t v10 = (char *)*((void *)this + 1591);
    if (v8 < v9)
    {
LABEL_27:
      int v6 = 0;
      a2 = 0;
      int v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_9;
    }
    unint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_26:
        v7[3185] = v9 + v15;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      unint64_t v17 = 2 * v11[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      v11[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (unsigned int *)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)this + v18;
      *(void *)this = v11[3];
      uint64_t v12 = (char *)(this + 2);
      v11[2] = v19;
      void v11[3] = this;
    }
    v11[1] = &v12[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
    }
    *((void *)v7 + 1591) = v12;
    LODWORD(v9) = v7[3185];
    size_t v10 = v12;
    unsigned int v8 = v7[3184];
    goto LABEL_26;
  }
  int v5 = 1910;
  int v6 = 19;
LABEL_9:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

char *anonymous namespace'::Remangler::mangleImplFunctionConvention@<X0>(char *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = (unsigned int *)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_47;
    }
    int v7 = *(swift::Demangle::Node **)a2;
  }
  if (*(unsigned char *)(*(void *)v7 + 18) != 3)
  {
LABEL_47:
    int v11 = 1936;
    int v12 = 1;
    goto LABEL_48;
  }
  unsigned int v8 = a2;
  if ((v6 - 1) >= 2) {
    unsigned int v8 = *(swift::Demangle::Node **)a2;
  }
  size_t v9 = *(uint64_t **)v8;
  uint64_t v10 = *(void *)(*(void *)v8 + 8);
  int v11 = 1936;
  int v12 = 1;
  uint64_t v13 = *v9;
  switch(v10)
  {
    case 1:
      if (*(unsigned char *)v13 == 99)
      {
        char v14 = 67;
        goto LABEL_17;
      }
      int v11 = 1936;
      break;
    case 5:
      if (*(_DWORD *)v13 != 1668246626 || *(unsigned char *)(v13 + 4) != 107) {
        goto LABEL_47;
      }
      char v14 = 66;
LABEL_17:
      size_t v16 = a2;
      if (v6 != 2)
      {
        if (v6 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_51;
        }
        size_t v16 = *(swift::Demangle::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v16 + 1) + 16) != 23) {
        goto LABEL_51;
      }
      unint64_t v17 = (const void **)(this + 12728);
      unsigned int v18 = *((_DWORD *)this + 3184);
      size_t v19 = *((unsigned int *)this + 3185);
      int v20 = (char *)*((void *)this + 1591);
      if (v18 < v19) {
        goto LABEL_83;
      }
      unsigned int v21 = (void *)*((void *)this + 1593);
      size_t v22 = (char *)v21[1];
      if (&v20[v19] == v22)
      {
        unint64_t v40 = (unint64_t)&v20[v19 + 1];
        unint64_t v23 = v21[2];
        if (v40 <= v23)
        {
          v21[1] = v40;
          LODWORD(v41) = 1;
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v23 = v21[2];
      }
      if ((2 * v19) <= 4) {
        uint64_t v41 = 4;
      }
      else {
        uint64_t v41 = (2 * v19);
      }
      size_t v42 = v41 + v19;
      if (!v22 || (unint64_t)&v22[v42] > v23)
      {
        unint64_t v43 = 2 * v21[4];
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        v21[4] = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        unsigned int v46 = (char *)v45 + v44;
        *unint64_t v45 = v21[3];
        size_t v22 = (char *)(v45 + 1);
        v21[2] = v46;
        v21[3] = v45;
      }
      v21[1] = &v22[v42];
      if (v19) {
        memcpy(v22, *v17, v19);
      }
      *((void *)v4 + 1591) = v22;
      LODWORD(v19) = v4[3185];
      int v20 = v22;
      unsigned int v18 = v4[3184];
LABEL_82:
      v4[3185] = v19 + v41;
LABEL_83:
      v4[3184] = v18 + 1;
      v20[v18] = 122;
      unsigned int v47 = v4[3184];
      size_t v48 = v4[3185];
      unint64_t v49 = (char *)*((void *)v4 + 1591);
      if (v47 < v48) {
        goto LABEL_100;
      }
      unint64_t v50 = (void *)*((void *)v4 + 1593);
      unint64_t v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        unint64_t v53 = (unint64_t)&v49[v48 + 1];
        unint64_t v52 = v50[2];
        if (v53 <= v52)
        {
          v50[1] = v53;
          LODWORD(v54) = 1;
          goto LABEL_99;
        }
      }
      else
      {
        unint64_t v52 = v50[2];
      }
      if ((2 * v48) <= 4) {
        uint64_t v54 = 4;
      }
      else {
        uint64_t v54 = (2 * v48);
      }
      size_t v55 = v54 + v48;
      if (!v51 || (unint64_t)&v51[v55] > v52)
      {
        unint64_t v56 = 2 * v50[4];
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        v50[4] = v56;
        unint64_t v57 = v56 + 8;
        unsigned int v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        size_t v59 = (char *)v58 + v57;
        *unsigned int v58 = v50[3];
        unint64_t v51 = (char *)(v58 + 1);
        v50[2] = v59;
        void v50[3] = v58;
      }
      v50[1] = &v51[v55];
      if (v48) {
        memcpy(v51, *v17, v48);
      }
      *((void *)v4 + 1591) = v51;
      LODWORD(v48) = v4[3185];
      unint64_t v49 = v51;
      unsigned int v47 = v4[3184];
LABEL_99:
      v4[3185] = v48 + v54;
LABEL_100:
      v4[3184] = v47 + 1;
      v49[v47] = v14;
      int v60 = *((unsigned __int8 *)v3 + 18);
      if (v60 == 2) {
        goto LABEL_104;
      }
      if (v60 == 5 && *((_DWORD *)v3 + 2) >= 2u)
      {
        uint64_t v3 = *(swift::Demangle::Node **)v3;
LABEL_104:
        uint64_t v61 = *((void *)v3 + 1);
      }
      else
      {
        uint64_t v61 = 0;
      }
      swift::Demangle::CharVector::append(v4 + 3182, *(void *)(v61 + 8), *((swift::Demangle::NodeFactory **)v4 + 1593));
      this = (char *)swift::Demangle::CharVector::append((char **)v4 + 1591, *(void **)v61, *(void *)(v61 + 8), *((void **)v4 + 1593));
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      break;
    case 6:
      if (*(_DWORD *)v13 != 1752458605 || *(_WORD *)(v13 + 4) != 25711) {
        goto LABEL_47;
      }
      char v14 = 77;
      goto LABEL_51;
    case 7:
      if (*(_DWORD *)v13 != 1936682083 || *(_DWORD *)(v13 + 3) != 1701999987) {
        goto LABEL_47;
      }
      char v14 = 75;
      goto LABEL_51;
    case 11:
      if (*(void *)v13 != 0x74656D5F636A626FLL || *(void *)(v13 + 3) != 0x646F6874656D5F63) {
        goto LABEL_47;
      }
      char v14 = 79;
      goto LABEL_51;
    case 14:
      if (*(void *)v13 != 0x5F7373656E746977 || *(void *)(v13 + 6) != 0x646F6874656D5F73) {
        goto LABEL_47;
      }
      char v14 = 87;
LABEL_51:
      unsigned int v28 = *((_DWORD *)this + 3184);
      size_t v29 = *((unsigned int *)this + 3185);
      unint64_t v30 = (char *)*((void *)this + 1591);
      if (v28 < v29) {
        goto LABEL_67;
      }
      unint64_t v31 = (void *)*((void *)this + 1593);
      int v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v34 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v34 <= v33)
        {
          v31[1] = v34;
          LODWORD(v35) = 1;
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v33 = v31[2];
      }
      if ((2 * v29) <= 4) {
        uint64_t v35 = 4;
      }
      else {
        uint64_t v35 = (2 * v29);
      }
      size_t v36 = v35 + v29;
      if (!v32 || (unint64_t)&v32[v36] > v33)
      {
        unint64_t v37 = 2 * v31[4];
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        v31[4] = v37;
        unint64_t v38 = v37 + 8;
        this = (char *)malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        unint64_t v39 = &this[v38];
        *(void *)this = v31[3];
        int v32 = this + 8;
        v31[2] = v39;
        v31[3] = this;
      }
      v31[1] = &v32[v36];
      if (v29) {
        this = (char *)memcpy(v32, *((const void **)v4 + 1591), v29);
      }
      *((void *)v4 + 1591) = v32;
      LODWORD(v29) = v4[3185];
      unint64_t v30 = v32;
      unsigned int v28 = v4[3184];
LABEL_66:
      v4[3185] = v29 + v35;
LABEL_67:
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      v4[3184] = v28 + 1;
      v30[v28] = v14;
      break;
    default:
      break;
  }
LABEL_48:
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v11;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleImplFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      uint64_t v9 = *(void *)a2;
      unsigned int v8 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v8 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_30;
      }
      break;
    case 2:
      uint64_t v10 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v8 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_30;
      }
      break;
    case 5:
      uint64_t v9 = *(void *)a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::Node *)(v9 + 8 * *((unsigned int *)a2 + 2));
      if (v8 != v10) {
        break;
      }
LABEL_30:
      unint64_t v26 = (char *)&unk_215276E75;
      char v27 = 1;
      char v28 = 1;
      goto LABEL_31;
    default:
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_30;
      }
      break;
  }
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = a3 + 1;
  v289 = (const char *)&unk_215276E75;
  while (2)
  {
    unint64_t v17 = v11;
    size_t v16 = *(swift::Demangle::Node **)v8;
    int v11 = *(swift::Demangle::Node **)v8;
    switch(*(_WORD *)(*(void *)v8 + 16))
    {
      case '+':
        goto LABEL_13;
      case '.':
        v289 = "P";
        int v11 = *(swift::Demangle::Node **)v8;
        goto LABEL_13;
      case 't':
        int v11 = v17;
        uint64_t v13 = *(swift::Demangle::Node **)v8;
        goto LABEL_13;
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        int v18 = *((unsigned __int8 *)v16 + 18);
        uint64_t v15 = 1;
        if (v18 == 2) {
          goto LABEL_12;
        }
        if (v18 != 5)
        {
          int v50 = 1984;
          goto LABEL_475;
        }
        uint64_t v19 = *((unsigned int *)v16 + 2);
        if ((v19 - 2) > 2)
        {
          int v50 = 1984;
          LODWORD(v15) = 1;
          goto LABEL_475;
        }
        uint64_t v15 = v19 - 1;
        size_t v16 = *(swift::Demangle::Node **)v16;
LABEL_12:
        int v11 = v17;
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_13:
        unsigned int v8 = (swift::Demangle::Node *)((char *)v8 + 8);
        if (v8 != v10) {
          continue;
        }
        if (v11)
        {
          if (*(_DWORD *)a4) {
            return this;
          }
        }
        BOOL v292 = v13 == 0;
        if (!v13) {
          goto LABEL_528;
        }
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        size_t v21 = *(unsigned int *)(v5 + 12740);
        size_t v22 = *(char **)(v5 + 12728);
        if (v20 < v21) {
          goto LABEL_501;
        }
        unint64_t v23 = *(void **)(v5 + 12744);
        unint64_t v24 = (char *)v23[1];
        if (&v22[v21] == v24)
        {
          unint64_t v249 = (unint64_t)&v22[v21 + 1];
          unint64_t v25 = v23[2];
          if (v249 <= v25)
          {
            v23[1] = v249;
            int v256 = 1;
            goto LABEL_500;
          }
        }
        else
        {
          unint64_t v25 = v23[2];
        }
        LODWORD(v250) = 2 * v21;
        if ((2 * v21) <= 4) {
          uint64_t v250 = 4;
        }
        else {
          uint64_t v250 = v250;
        }
        int v288 = v250;
        size_t v251 = v250 + v21;
        if (!v24 || (unint64_t)&v24[v251] > v25)
        {
          unint64_t v252 = 2 * v23[4];
          if (v252 <= v251 + 1) {
            unint64_t v252 = v251 + 1;
          }
          v23[4] = v252;
          unint64_t v253 = v252 + 8;
          v254 = malloc_type_malloc(v252 + 8, 0xD0263BC5uLL);
          v255 = (char *)v254 + v253;
          void *v254 = v23[3];
          unint64_t v24 = (char *)(v254 + 1);
          v23[2] = v255;
          v23[3] = v254;
        }
        v23[1] = &v24[v251];
        if (v21) {
          memcpy(v24, *(const void **)(v5 + 12728), v21);
        }
        *(void *)(v5 + 12728) = v24;
        LODWORD(v21) = *(_DWORD *)(v5 + 12740);
        size_t v22 = v24;
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        int v256 = v288;
LABEL_500:
        *(_DWORD *)(v5 + 12740) = v21 + v256;
LABEL_501:
        *(_DWORD *)(v5 + 12736) = v20 + 1;
        v22[v20] = 121;
        int v257 = *((unsigned __int8 *)v13 + 18);
        unint64_t v258 = v13;
        if ((v257 - 1) < 2) {
          goto LABEL_505;
        }
        if (v257 == 5 && *((_DWORD *)v13 + 2))
        {
          unint64_t v258 = *(swift::Demangle::Node **)v13;
LABEL_505:
          uint64_t v259 = *(void *)v258;
        }
        else
        {
          uint64_t v259 = 0;
        }
        int v260 = *(unsigned __int8 *)(v259 + 18);
        unint64_t v261 = (swift::Demangle::Node **)v259;
        if ((v260 - 1) < 2) {
          goto LABEL_511;
        }
        if (v260 == 5)
        {
          unsigned int v262 = *(swift::Demangle::Node **)v259;
          unint64_t v261 = *(swift::Demangle::Node ***)v259;
LABEL_515:
          v263 = (swift::Demangle::Node **)((char *)v262 + 8 * *(unsigned int *)(v259 + 8));
          goto LABEL_519;
        }
        unint64_t v261 = 0;
LABEL_511:
        switch(v260)
        {
          case 1:
            v263 = (swift::Demangle::Node **)(v259 + 8);
            break;
          case 2:
            v263 = (swift::Demangle::Node **)(v259 + 16);
            break;
          case 5:
            unsigned int v262 = *(swift::Demangle::Node **)v259;
            goto LABEL_515;
          default:
            v263 = 0;
            break;
        }
LABEL_519:
        if (v261 != v263)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v261;
          }
          while (v261 != v263);
          int v257 = *((unsigned __int8 *)v13 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v257 == 2) {
          goto LABEL_527;
        }
        if (v257 == 5 && *((_DWORD *)v13 + 2) >= 2u)
        {
          uint64_t v13 = *(swift::Demangle::Node **)v13;
LABEL_527:
          if (*(_DWORD *)a4) {
            return this;
          }
        }
LABEL_528:
        if (!v12)
        {
          char v27 = 1;
LABEL_535:
          unint64_t v26 = (char *)v289;
          goto LABEL_590;
        }
        int v264 = *((unsigned __int8 *)v12 + 18);
        v265 = (swift::Demangle::Node **)v12;
        if ((v264 - 1) < 2) {
          goto LABEL_533;
        }
        if (v264 == 5 && *((_DWORD *)v12 + 2))
        {
          v265 = *(swift::Demangle::Node ***)v12;
LABEL_533:
          v266 = *v265;
        }
        else
        {
          v266 = 0;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        unsigned int v267 = *(_DWORD *)(v5 + 12736);
        size_t v268 = *(unsigned int *)(v5 + 12740);
        v269 = *(char **)(v5 + 12728);
        if (v267 < v268) {
          goto LABEL_563;
        }
        v270 = *(void **)(v5 + 12744);
        int v271 = (char *)v270[1];
        if (&v269[v268] == v271)
        {
          unint64_t v273 = (unint64_t)&v269[v268 + 1];
          unint64_t v272 = v270[2];
          if (v273 <= v272)
          {
            v270[1] = v273;
            LODWORD(v274) = 1;
            goto LABEL_562;
          }
        }
        else
        {
          unint64_t v272 = v270[2];
        }
        if ((2 * v268) <= 4) {
          uint64_t v274 = 4;
        }
        else {
          uint64_t v274 = (2 * v268);
        }
        size_t v275 = v274 + v268;
        if (!v271 || (unint64_t)&v271[v275] > v272)
        {
          unint64_t v276 = 2 * v270[4];
          if (v276 <= v275 + 1) {
            unint64_t v276 = v275 + 1;
          }
          v270[4] = v276;
          unint64_t v277 = v276 + 8;
          v278 = malloc_type_malloc(v276 + 8, 0xD0263BC5uLL);
          v279 = (char *)v278 + v277;
          void *v278 = v270[3];
          int v271 = (char *)(v278 + 1);
          v270[2] = v279;
          v270[3] = v278;
        }
        v270[1] = &v271[v275];
        if (v268) {
          memcpy(v271, *(const void **)(v5 + 12728), v268);
        }
        *(void *)(v5 + 12728) = v271;
        LODWORD(v268) = *(_DWORD *)(v5 + 12740);
        v269 = v271;
        unsigned int v267 = *(_DWORD *)(v5 + 12736);
LABEL_562:
        *(_DWORD *)(v5 + 12740) = v268 + v274;
LABEL_563:
        *(_DWORD *)(v5 + 12736) = v267 + 1;
        v269[v267] = 121;
        int v280 = *((unsigned __int8 *)v12 + 18);
        v281 = v12;
        if (v280 == 2) {
          goto LABEL_567;
        }
        if (v280 == 5 && *((_DWORD *)v12 + 2) >= 2u)
        {
          v281 = *(swift::Demangle::Node **)v12;
LABEL_567:
          uint64_t v282 = *((void *)v281 + 1);
        }
        else
        {
          uint64_t v282 = 0;
        }
        int v283 = *(unsigned __int8 *)(v282 + 18);
        v284 = (swift::Demangle::Node **)v282;
        if ((v283 - 1) < 2) {
          goto LABEL_573;
        }
        if (v283 == 5)
        {
          int v285 = *(swift::Demangle::Node **)v282;
          v284 = *(swift::Demangle::Node ***)v282;
LABEL_577:
          int v286 = (swift::Demangle::Node **)((char *)v285 + 8 * *(unsigned int *)(v282 + 8));
          goto LABEL_581;
        }
        v284 = 0;
LABEL_573:
        switch(v283)
        {
          case 1:
            int v286 = (swift::Demangle::Node **)(v282 + 8);
            break;
          case 2:
            int v286 = (swift::Demangle::Node **)(v282 + 16);
            break;
          case 5:
            int v285 = *(swift::Demangle::Node **)v282;
            goto LABEL_577;
          default:
            int v286 = 0;
            break;
        }
LABEL_581:
        if (v284 != v286)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v284;
          }
          while (v284 != v286);
          int v280 = *((unsigned __int8 *)v12 + 18);
        }
        unint64_t v26 = (char *)v289;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v280 == 5 && *((_DWORD *)v12 + 2) >= 3u)
        {
          uint64_t v287 = *(void *)(*(void *)v12 + 16);
          if (*(_WORD *)(v287 + 16) == 235) {
          else
          }
          if (*(_DWORD *)a4) {
            return this;
          }
          char v27 = 0;
          goto LABEL_535;
        }
        char v27 = 0;
LABEL_590:
        char v28 = v292;
        break;
      case 'w':
        int v11 = v17;
        int v12 = *(swift::Demangle::Node **)v8;
        goto LABEL_13;
      default:
        int v11 = v17;
        goto LABEL_13;
    }
    break;
  }
LABEL_31:
  v293 = (const void **)(v5 + 12728);
  unsigned int v29 = *(_DWORD *)(v5 + 12736);
  size_t v30 = *(unsigned int *)(v5 + 12740);
  unint64_t v31 = *(char **)(v5 + 12728);
  if (v29 < v30) {
    goto LABEL_51;
  }
  int v32 = *(void **)(v5 + 12744);
  unint64_t v33 = (char *)v32[1];
  if (&v31[v30] != v33)
  {
    unint64_t v34 = v32[2];
LABEL_39:
    std::string::size_type v290 = v26;
    char v36 = v28;
    if ((2 * v30) <= 4) {
      uint64_t v37 = 4;
    }
    else {
      uint64_t v37 = (2 * v30);
    }
    size_t v38 = v37 + v30;
    if (!v33 || (unint64_t)&v33[v38] > v34)
    {
      unint64_t v39 = 2 * v32[4];
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      v32[4] = v39;
      unint64_t v40 = v39 + 8;
      uint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      size_t v42 = (char *)v41 + v40;
      *uint64_t v41 = v32[3];
      unint64_t v33 = (char *)(v41 + 1);
      v32[2] = v42;
      v32[3] = v41;
    }
    v32[1] = &v33[v38];
    if (v30) {
      memcpy(v33, *v293, v30);
    }
    *(void *)(v5 + 12728) = v33;
    LODWORD(v30) = *(_DWORD *)(v5 + 12740);
    unint64_t v31 = v33;
    unsigned int v29 = *(_DWORD *)(v5 + 12736);
    char v28 = v36;
    unint64_t v26 = v290;
    goto LABEL_50;
  }
  unint64_t v35 = (unint64_t)&v31[v30 + 1];
  unint64_t v34 = v32[2];
  if (v35 > v34) {
    goto LABEL_39;
  }
  v32[1] = v35;
  LODWORD(v37) = 1;
LABEL_50:
  *(_DWORD *)(v5 + 12740) = v30 + v37;
LABEL_51:
  *(_DWORD *)(v5 + 12736) = v29 + 1;
  v31[v29] = 73;
  if (v27)
  {
    if (v28) {
      goto LABEL_53;
    }
LABEL_74:
    unsigned int v60 = *(_DWORD *)(v5 + 12736);
    size_t v61 = *(unsigned int *)(v5 + 12740);
    uint64_t v62 = *(char **)(v5 + 12728);
    if (v60 < v61) {
      goto LABEL_90;
    }
    unint64_t v63 = *(void **)(v5 + 12744);
    unsigned int v64 = (char *)v63[1];
    if (&v62[v61] == v64)
    {
      unint64_t v66 = (unint64_t)&v62[v61 + 1];
      unint64_t v65 = v63[2];
      if (v66 <= v65)
      {
        v63[1] = v66;
        LODWORD(v67) = 1;
LABEL_89:
        *(_DWORD *)(v5 + 12740) = v61 + v67;
LABEL_90:
        *(_DWORD *)(v5 + 12736) = v60 + 1;
        v62[v60] = 73;
        if (v26) {
          goto LABEL_54;
        }
        goto LABEL_91;
      }
    }
    else
    {
      unint64_t v65 = v63[2];
    }
    if ((2 * v61) <= 4) {
      uint64_t v67 = 4;
    }
    else {
      uint64_t v67 = (2 * v61);
    }
    size_t v68 = v67 + v61;
    if (!v64 || (unint64_t)&v64[v68] > v65)
    {
      unint64_t v69 = 2 * v63[4];
      if (v69 <= v68 + 1) {
        unint64_t v69 = v68 + 1;
      }
      v63[4] = v69;
      unint64_t v70 = v69 + 8;
      char v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
      uint64_t v72 = (char *)v71 + v70;
      *char v71 = v63[3];
      unsigned int v64 = (char *)(v71 + 1);
      v63[2] = v72;
      v63[3] = v71;
    }
    v63[1] = &v64[v68];
    if (v61) {
      memcpy(v64, *v293, v61);
    }
    *(void *)(v5 + 12728) = v64;
    LODWORD(v61) = *(_DWORD *)(v5 + 12740);
    uint64_t v62 = v64;
    unsigned int v60 = *(_DWORD *)(v5 + 12736);
    goto LABEL_89;
  }
  unsigned int v44 = *(_DWORD *)(v5 + 12736);
  size_t v45 = *(unsigned int *)(v5 + 12740);
  unsigned int v46 = *(char **)(v5 + 12728);
  if (v44 >= v45)
  {
    unsigned int v47 = *(void **)(v5 + 12744);
    size_t v48 = (char *)v47[1];
    if (&v46[v45] == v48)
    {
      unint64_t v51 = (unint64_t)&v46[v45 + 1];
      unint64_t v49 = v47[2];
      if (v51 <= v49)
      {
        v47[1] = v51;
        LODWORD(v54) = 1;
LABEL_72:
        *(_DWORD *)(v5 + 12740) = v45 + v54;
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v49 = v47[2];
    }
    unint64_t v52 = v26;
    char v53 = v28;
    if ((2 * v45) <= 4) {
      uint64_t v54 = 4;
    }
    else {
      uint64_t v54 = (2 * v45);
    }
    size_t v55 = v54 + v45;
    if (!v48 || (unint64_t)&v48[v55] > v49)
    {
      unint64_t v56 = 2 * v47[4];
      if (v56 <= v55 + 1) {
        unint64_t v56 = v55 + 1;
      }
      v47[4] = v56;
      unint64_t v57 = v56 + 8;
      unsigned int v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
      size_t v59 = (char *)v58 + v57;
      *unsigned int v58 = v47[3];
      size_t v48 = (char *)(v58 + 1);
      v47[2] = v59;
      v47[3] = v58;
    }
    v47[1] = &v48[v55];
    if (v45) {
      memcpy(v48, *v293, v45);
    }
    *(void *)(v5 + 12728) = v48;
    LODWORD(v45) = *(_DWORD *)(v5 + 12740);
    unsigned int v46 = v48;
    unsigned int v44 = *(_DWORD *)(v5 + 12736);
    char v28 = v53;
    unint64_t v26 = v52;
    goto LABEL_72;
  }
LABEL_73:
  *(_DWORD *)(v5 + 12736) = v44 + 1;
  v46[v44] = 115;
  if ((v28 & 1) == 0) {
    goto LABEL_74;
  }
LABEL_53:
  if (v26)
  {
LABEL_54:
    size_t v43 = strlen(v26);
    goto LABEL_92;
  }
LABEL_91:
  size_t v43 = 0;
LABEL_92:
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v293, v26, v43, *(void **)(v5 + 12744));
  int v73 = *((unsigned __int8 *)v4 + 18);
  size_t v74 = (swift::Demangle::Node **)v4;
  if ((v73 - 1) >= 2)
  {
    if (v73 == 5)
    {
      std::string v75 = *(swift::Demangle::Node ***)v4;
      size_t v74 = *(swift::Demangle::Node ***)v4;
      goto LABEL_100;
    }
    size_t v74 = 0;
  }
  if (v73 == 1)
  {
    int v76 = (swift::Demangle::Node **)((char *)v4 + 8);
    if (v74 != (swift::Demangle::Node **)((char *)v4 + 8)) {
      goto LABEL_107;
    }
    goto LABEL_455;
  }
  if (v73 == 2)
  {
    int v76 = (swift::Demangle::Node **)((char *)v4 + 16);
    if (v74 != (swift::Demangle::Node **)((char *)v4 + 16)) {
      goto LABEL_107;
    }
LABEL_455:
    unsigned int v236 = *(_DWORD *)(v5 + 12736);
    size_t v237 = *(unsigned int *)(v5 + 12740);
    unint64_t v238 = *(unsigned char **)(v5 + 12728);
    if (v236 < v237)
    {
LABEL_474:
      LODWORD(v15) = 0;
      uint64_t v4 = 0;
      int v50 = 0;
      *(_DWORD *)(v5 + 12736) = v236 + 1;
      v238[v236] = 95;
      goto LABEL_475;
    }
    v239 = *(void **)(v5 + 12744);
    v240 = (unsigned char *)v239[1];
    if (&v238[v237] == v240)
    {
      unint64_t v242 = (unint64_t)&v238[v237 + 1];
      unint64_t v241 = v239[2];
      if (v242 <= v241)
      {
        v239[1] = v242;
        LODWORD(v243) = 1;
LABEL_473:
        *(_DWORD *)(v5 + 12740) = v237 + v243;
        goto LABEL_474;
      }
    }
    else
    {
      unint64_t v241 = v239[2];
    }
    if ((2 * v237) <= 4) {
      uint64_t v243 = 4;
    }
    else {
      uint64_t v243 = (2 * v237);
    }
    size_t v244 = v243 + v237;
    if (v240) {
      BOOL v245 = (unint64_t)&v240[v243 + v237] > v241;
    }
    else {
      BOOL v245 = 1;
    }
    unint64_t v238 = (unsigned char *)v239[1];
    if (v245)
    {
      unint64_t v246 = 2 * v239[4];
      if (v246 <= v244 + 1) {
        unint64_t v246 = v244 + 1;
      }
      v239[4] = v246;
      unint64_t v247 = v246 + 8;
      this = (uint64_t *)malloc_type_malloc(v246 + 8, 0xD0263BC5uLL);
      v248 = (char *)this + v247;
      *this = v239[3];
      unint64_t v238 = this + 1;
      v239[2] = v248;
      v239[3] = this;
    }
    v239[1] = &v238[v244];
    if (v237) {
      this = (uint64_t *)memcpy(v238, *v293, v237);
    }
    *(void *)(v5 + 12728) = v238;
    LODWORD(v237) = *(_DWORD *)(v5 + 12740);
    unsigned int v236 = *(_DWORD *)(v5 + 12736);
    goto LABEL_473;
  }
  if (v73 != 5)
  {
    int v76 = 0;
    if (!v74) {
      goto LABEL_455;
    }
    goto LABEL_107;
  }
  std::string v75 = *(swift::Demangle::Node ***)v4;
LABEL_100:
  int v76 = &v75[*((unsigned int *)v4 + 2)];
  if (v74 == v76) {
    goto LABEL_455;
  }
LABEL_107:
  std::string::size_type v291 = v76;
  while (2)
  {
    uint64_t v4 = *v74;
    switch(*((_WORD *)*v74 + 8))
    {
      case 'i':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v81 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v81)
        {
          char v82 = 101;
          goto LABEL_111;
        }
        uint64_t v108 = *(void **)(v5 + 12744);
        size_t v109 = (char *)v108[1];
        if (&v78[v81] == v109)
        {
          unint64_t v189 = (unint64_t)&v78[v81 + 1];
          unint64_t v110 = v108[2];
          if (v189 <= v110)
          {
            v108[1] = v189;
            LODWORD(v190) = 1;
            goto LABEL_338;
          }
        }
        else
        {
          unint64_t v110 = v108[2];
        }
        if ((2 * v81) <= 4) {
          uint64_t v190 = 4;
        }
        else {
          uint64_t v190 = (2 * v81);
        }
        size_t v191 = v190 + v81;
        if (v109) {
          BOOL v192 = (unint64_t)&v109[v190 + v81] > v110;
        }
        else {
          BOOL v192 = 1;
        }
        unint64_t v78 = (char *)v108[1];
        if (v192)
        {
          unint64_t v193 = 2 * v108[4];
          if (v193 <= v191 + 1) {
            unint64_t v193 = v191 + 1;
          }
          v108[4] = v193;
          unint64_t v194 = v193 + 8;
          this = (uint64_t *)malloc_type_malloc(v193 + 8, 0xD0263BC5uLL);
          unsigned int v195 = (char *)this + v194;
          *this = v108[3];
          unint64_t v78 = (char *)(this + 1);
          v108[2] = v195;
          v108[3] = this;
        }
        v108[1] = &v78[v191];
        if (v81) {
          this = (uint64_t *)memcpy(v78, *v293, v81);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v81) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_338:
        int v80 = v81 + v190;
        char v82 = 101;
        goto LABEL_110;
      case 'j':
        int v50 = 2059;
        LODWORD(v15) = 15;
        unint64_t v83 = *(swift::Demangle::Node ***)v4;
        switch(*((void *)v4 + 1))
        {
          case 0xDLL:
            if (*v83 != (swift::Demangle::Node *)0x5F65656C6C616340
              || *(swift::Demangle::Node **)((char *)v83 + 5) != (swift::Demangle::Node *)0x64656E776F5F6565)
            {
              goto LABEL_544;
            }
            char v82 = 120;
            goto LABEL_372;
          case 0xFLL:
            if (*v83 != (swift::Demangle::Node *)0x5F65656C6C616340
              || *(swift::Demangle::Node **)((char *)v83 + 7) != (swift::Demangle::Node *)0x64656E776F6E755FLL)
            {
              goto LABEL_544;
            }
            char v82 = 121;
            goto LABEL_372;
          case 0x11:
            unint64_t v124 = *v83;
            uint64_t v125 = v83[1];
            int v126 = *((unsigned __int8 *)v83 + 16);
            if (v124 != (swift::Demangle::Node *)0x746E65766E6F6340
              || v125 != (swift::Demangle::Node *)0x6E696874286E6F69
              || v126 != 41)
            {
              goto LABEL_544;
            }
            char v82 = 116;
            goto LABEL_372;
          case 0x12:
            uint64_t v129 = *v83;
            unint64_t v130 = v83[1];
            int v131 = *((unsigned __int16 *)v83 + 8);
            if (v129 != (swift::Demangle::Node *)0x5F65656C6C616340
              || v130 != (swift::Demangle::Node *)0x65746E6172617567
              || v131 != 25701)
            {
LABEL_544:
              int v50 = 2059;
              LODWORD(v15) = 15;
              goto LABEL_475;
            }
            char v82 = 103;
LABEL_372:
            unsigned int v79 = *(_DWORD *)(v5 + 12736);
            size_t v77 = *(unsigned int *)(v5 + 12740);
            unint64_t v78 = *(char **)(v5 + 12728);
            if (v79 < v77) {
              goto LABEL_111;
            }
            unsigned int v210 = *(void **)(v5 + 12744);
            int v211 = (char *)v210[1];
            if (&v78[v77] != v211)
            {
              unint64_t v212 = v210[2];
LABEL_376:
              if ((2 * v77) <= 4) {
                uint64_t v135 = 4;
              }
              else {
                uint64_t v135 = (2 * v77);
              }
              size_t v214 = v135 + v77;
              if (!v211 || (unint64_t)&v211[v214] > v212)
              {
                unint64_t v215 = 2 * v210[4];
                if (v215 <= v214 + 1) {
                  unint64_t v215 = v214 + 1;
                }
                v210[4] = v215;
                unint64_t v216 = v215 + 8;
                this = (uint64_t *)malloc_type_malloc(v215 + 8, 0xD0263BC5uLL);
                *this = v210[3];
                int v211 = (char *)(this + 1);
                v210[2] = (char *)this + v216;
                v210[3] = this;
              }
              v210[1] = &v211[v214];
              if (v77) {
                this = (uint64_t *)memcpy(v211, *v293, v77);
              }
              *(void *)(v5 + 12728) = v211;
              LODWORD(v77) = *(_DWORD *)(v5 + 12740);
              unint64_t v78 = v211;
              unsigned int v79 = *(_DWORD *)(v5 + 12736);
              int v76 = v291;
              goto LABEL_109;
            }
            unint64_t v213 = (unint64_t)&v78[v77 + 1];
            unint64_t v212 = v210[2];
            if (v213 > v212) {
              goto LABEL_376;
            }
            v210[1] = v213;
LABEL_388:
            LODWORD(v135) = 1;
LABEL_109:
            int v80 = v77 + v135;
LABEL_110:
            *(_DWORD *)(v5 + 12740) = v80;
LABEL_111:
            *(_DWORD *)(v5 + 12736) = v79 + 1;
            v78[v79] = v82;
            break;
          default:
            goto LABEL_475;
        }
        goto LABEL_112;
      case 'k':
        char v82 = *(unsigned char *)v4;
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v77 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v77) {
          goto LABEL_111;
        }
        char v85 = *(void **)(v5 + 12744);
        unint64_t v86 = (char *)v85[1];
        if (&v78[v77] == v86)
        {
          unint64_t v134 = (unint64_t)&v78[v77 + 1];
          unint64_t v87 = v85[2];
          if (v134 <= v87)
          {
            v85[1] = v134;
            goto LABEL_388;
          }
        }
        else
        {
          unint64_t v87 = v85[2];
        }
        if ((2 * v77) <= 4) {
          uint64_t v135 = 4;
        }
        else {
          uint64_t v135 = (2 * v77);
        }
        size_t v136 = v135 + v77;
        if (v86) {
          BOOL v137 = (unint64_t)&v86[v135 + v77] > v87;
        }
        else {
          BOOL v137 = 1;
        }
        unint64_t v78 = (char *)v85[1];
        if (v137)
        {
          unint64_t v138 = 2 * v85[4];
          if (v138 <= v136 + 1) {
            unint64_t v138 = v136 + 1;
          }
          v85[4] = v138;
          unint64_t v139 = v138 + 8;
          this = (uint64_t *)malloc_type_malloc(v138 + 8, 0xD0263BC5uLL);
          unint64_t v140 = (char *)this + v139;
          *this = v85[3];
          unint64_t v78 = (char *)(this + 1);
          v85[2] = v140;
          v85[3] = this;
        }
        v85[1] = &v78[v136];
        if (v77) {
          this = (uint64_t *)memcpy(v78, *v293, v77);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v77) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        goto LABEL_109;
      case 'l':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v88 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v88)
        {
          char v82 = 65;
          goto LABEL_111;
        }
        unint64_t v111 = *(void **)(v5 + 12744);
        unint64_t v112 = (char *)v111[1];
        if (&v78[v88] == v112)
        {
          unint64_t v196 = (unint64_t)&v78[v88 + 1];
          unint64_t v113 = v111[2];
          if (v196 <= v113)
          {
            v111[1] = v196;
            LODWORD(v197) = 1;
            goto LABEL_354;
          }
        }
        else
        {
          unint64_t v113 = v111[2];
        }
        if ((2 * v88) <= 4) {
          uint64_t v197 = 4;
        }
        else {
          uint64_t v197 = (2 * v88);
        }
        size_t v198 = v197 + v88;
        if (v112) {
          BOOL v199 = (unint64_t)&v112[v197 + v88] > v113;
        }
        else {
          BOOL v199 = 1;
        }
        unint64_t v78 = (char *)v111[1];
        if (v199)
        {
          unint64_t v200 = 2 * v111[4];
          if (v200 <= v198 + 1) {
            unint64_t v200 = v198 + 1;
          }
          v111[4] = v200;
          unint64_t v201 = v200 + 8;
          this = (uint64_t *)malloc_type_malloc(v200 + 8, 0xD0263BC5uLL);
          int v202 = (char *)this + v201;
          *this = v111[3];
          unint64_t v78 = (char *)(this + 1);
          v111[2] = v202;
          v111[3] = this;
        }
        v111[1] = &v78[v198];
        if (v88) {
          this = (uint64_t *)memcpy(v78, *v293, v88);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v88) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_354:
        int v80 = v88 + v197;
        char v82 = 65;
        goto LABEL_110;
      case 'm':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v89 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v89)
        {
          char v82 = 84;
          goto LABEL_111;
        }
        unint64_t v114 = *(void **)(v5 + 12744);
        uint64_t v115 = (char *)v114[1];
        if (&v78[v89] == v115)
        {
          unint64_t v203 = (unint64_t)&v78[v89 + 1];
          unint64_t v116 = v114[2];
          if (v203 <= v116)
          {
            v114[1] = v203;
            LODWORD(v204) = 1;
            goto LABEL_370;
          }
        }
        else
        {
          unint64_t v116 = v114[2];
        }
        if ((2 * v89) <= 4) {
          uint64_t v204 = 4;
        }
        else {
          uint64_t v204 = (2 * v89);
        }
        size_t v205 = v204 + v89;
        if (v115) {
          BOOL v206 = (unint64_t)&v115[v204 + v89] > v116;
        }
        else {
          BOOL v206 = 1;
        }
        unint64_t v78 = (char *)v114[1];
        if (v206)
        {
          unint64_t v207 = 2 * v114[4];
          if (v207 <= v205 + 1) {
            unint64_t v207 = v205 + 1;
          }
          v114[4] = v207;
          unint64_t v208 = v207 + 8;
          this = (uint64_t *)malloc_type_malloc(v207 + 8, 0xD0263BC5uLL);
          int v209 = (char *)this + v208;
          *this = v114[3];
          unint64_t v78 = (char *)(this + 1);
          v114[2] = v209;
          v114[3] = this;
        }
        v114[1] = &v78[v205];
        if (v89) {
          this = (uint64_t *)memcpy(v78, *v293, v89);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v89) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_370:
        int v80 = v89 + v204;
        char v82 = 84;
        goto LABEL_110;
      case 'p':
        unint64_t v90 = *(swift::Demangle::Node ***)v4;
        uint64_t v91 = *((void *)v4 + 1);
        switch(v91)
        {
          case 6:
            int v117 = *(_DWORD *)v90;
            int v118 = *((unsigned __int16 *)v90 + 2);
            if (v117 != 2037604672 || v118 != 25454)
            {
LABEL_543:
              int v50 = 2076;
              LODWORD(v15) = 17;
              goto LABEL_475;
            }
            char v82 = 72;
            break;
          case 9:
            size_t v120 = *v90;
            int v121 = *((unsigned __int8 *)v90 + 8);
            if (v120 != (swift::Demangle::Node *)0x6C6261646E655340 || v121 != 101) {
              goto LABEL_543;
            }
            char v82 = 104;
            break;
          case 11:
            if (*v90 == (swift::Demangle::Node *)0x6F5F646C65697940
              && *(swift::Demangle::Node **)((char *)v90 + 3) == (swift::Demangle::Node *)0x65636E6F5F646C65)
            {
              char v82 = 65;
            }
            else
            {
              unint64_t v93 = *v90;
              uint64_t v94 = *(uint64_t *)((char *)v90 + 3);
              if (v93 != (swift::Demangle::Node *)0x6D5F646C65697940 || v94 != 0x796E616D5F646C65) {
                goto LABEL_543;
              }
              char v82 = 71;
            }
            break;
          default:
            goto LABEL_543;
        }
        goto LABEL_372;
      case 'q':
        goto LABEL_452;
      case 'v':
        goto LABEL_224;
      case 'x':
        goto LABEL_289;
      case 'y':
        unsigned int v96 = *(_DWORD *)(v5 + 12736);
        size_t v97 = *(unsigned int *)(v5 + 12740);
        unint64_t v98 = *(char **)(v5 + 12728);
        if (v96 < v97) {
          goto LABEL_223;
        }
        uint64_t v99 = *(void **)(v5 + 12744);
        unint64_t v100 = (char *)v99[1];
        if (&v98[v97] == v100)
        {
          unint64_t v141 = (unint64_t)&v98[v97 + 1];
          unint64_t v101 = v99[2];
          if (v141 <= v101)
          {
            v99[1] = v141;
            LODWORD(v142) = 1;
            goto LABEL_222;
          }
        }
        else
        {
          unint64_t v101 = v99[2];
        }
        if ((2 * v97) <= 4) {
          uint64_t v142 = 4;
        }
        else {
          uint64_t v142 = (2 * v97);
        }
        size_t v143 = v142 + v97;
        if (v100) {
          BOOL v144 = (unint64_t)&v100[v142 + v97] > v101;
        }
        else {
          BOOL v144 = 1;
        }
        unint64_t v98 = (char *)v99[1];
        if (v144)
        {
          unint64_t v145 = 2 * v99[4];
          if (v145 <= v143 + 1) {
            unint64_t v145 = v143 + 1;
          }
          v99[4] = v145;
          unint64_t v146 = v145 + 8;
          int v147 = malloc_type_malloc(v145 + 8, 0xD0263BC5uLL);
          int v148 = (char *)v147 + v146;
          void *v147 = v99[3];
          unint64_t v98 = (char *)(v147 + 1);
          v99[2] = v148;
          v99[3] = v147;
        }
        v99[1] = &v98[v143];
        if (v97) {
          memcpy(v98, *v293, v97);
        }
        *(void *)(v5 + 12728) = v98;
        LODWORD(v97) = *(_DWORD *)(v5 + 12740);
        unsigned int v96 = *(_DWORD *)(v5 + 12736);
LABEL_222:
        *(_DWORD *)(v5 + 12740) = v97 + v142;
LABEL_223:
        *(_DWORD *)(v5 + 12736) = v96 + 1;
        v98[v96] = 89;
LABEL_224:
        int v149 = *((unsigned __int8 *)v4 + 18);
        unint64_t v150 = (swift::Demangle::Node **)v4;
        if ((v149 - 1) >= 2) {
          unint64_t v150 = *(swift::Demangle::Node ***)v4;
        }
        break;
      case 'z':
        unsigned int v102 = *(_DWORD *)(v5 + 12736);
        size_t v103 = *(unsigned int *)(v5 + 12740);
        unint64_t v104 = *(char **)(v5 + 12728);
        if (v102 < v103) {
          goto LABEL_288;
        }
        unint64_t v105 = *(void **)(v5 + 12744);
        uint64_t v106 = (char *)v105[1];
        if (&v104[v103] == v106)
        {
          unint64_t v163 = (unint64_t)&v104[v103 + 1];
          unint64_t v107 = v105[2];
          if (v163 <= v107)
          {
            v105[1] = v163;
            LODWORD(v164) = 1;
            goto LABEL_287;
          }
        }
        else
        {
          unint64_t v107 = v105[2];
        }
        if ((2 * v103) <= 4) {
          uint64_t v164 = 4;
        }
        else {
          uint64_t v164 = (2 * v103);
        }
        size_t v165 = v164 + v103;
        if (v106) {
          BOOL v166 = (unint64_t)&v106[v164 + v103] > v107;
        }
        else {
          BOOL v166 = 1;
        }
        unint64_t v104 = (char *)v105[1];
        if (v166)
        {
          unint64_t v167 = 2 * v105[4];
          if (v167 <= v165 + 1) {
            unint64_t v167 = v165 + 1;
          }
          v105[4] = v167;
          unint64_t v168 = v167 + 8;
          this = (uint64_t *)malloc_type_malloc(v167 + 8, 0xD0263BC5uLL);
          int v169 = (char *)this + v168;
          *this = v105[3];
          unint64_t v104 = (char *)(this + 1);
          v105[2] = v169;
          v105[3] = this;
        }
        v105[1] = &v104[v165];
        if (v103) {
          this = (uint64_t *)memcpy(v104, *v293, v103);
        }
        *(void *)(v5 + 12728) = v104;
        LODWORD(v103) = *(_DWORD *)(v5 + 12740);
        unsigned int v102 = *(_DWORD *)(v5 + 12736);
LABEL_287:
        *(_DWORD *)(v5 + 12740) = v103 + v164;
LABEL_288:
        *(_DWORD *)(v5 + 12736) = v102 + 1;
        v104[v102] = 122;
LABEL_289:
        int v170 = *((unsigned __int8 *)v4 + 18);
        int v171 = (swift::Demangle::Node **)v4;
        if ((v170 - 1) >= 2) {
          int v171 = *(swift::Demangle::Node ***)v4;
        }
        unint64_t v172 = *v171;
        uint64_t v173 = *((void *)v172 + 1);
        int v174 = *(int **)v172;
        switch(v173)
        {
          case 4:
            if (*v174 != 1953853248) {
              goto LABEL_477;
            }
            char v151 = 114;
            goto LABEL_426;
          case 6:
            int v175 = *v174;
            int v176 = *((unsigned __int16 *)v174 + 2);
            if (v175 != 1853321024 || v176 != 25701) {
              goto LABEL_477;
            }
            char v151 = 111;
            goto LABEL_426;
          case 8:
            if (*(void *)v174 != 0x64656E776F6E7540) {
              goto LABEL_477;
            }
            char v151 = 100;
            goto LABEL_426;
          case 9:
            uint64_t v178 = *(void *)v174;
            int v179 = *((unsigned __int8 *)v174 + 8);
            if (v178 != 0x756F5F6B63617040 || v179 != 116) {
              goto LABEL_477;
            }
            char v151 = 107;
            goto LABEL_426;
          case 13:
            uint64_t v181 = *(void *)v174;
            uint64_t v182 = *(void *)((char *)v174 + 5);
            if (v181 != 0x6C65726F74756140 || v182 != 0x64657361656C6572) {
              goto LABEL_477;
            }
            char v151 = 97;
            goto LABEL_426;
          case 22:
            uint64_t v184 = *(void *)v174;
            uint64_t v185 = *((void *)v174 + 1);
            uint64_t v186 = *(void *)((char *)v174 + 14);
            if (v184 != 0x64656E776F6E7540 || v185 != 0x705F72656E6E695FLL || v186 != 0x7265746E696F705FLL) {
              goto LABEL_477;
            }
            char v151 = 117;
            goto LABEL_426;
          default:
LABEL_477:
            if ((v170 - 1) < 2) {
              goto LABEL_481;
            }
            if (v170 == 5 && *((_DWORD *)v4 + 2))
            {
              uint64_t v4 = *(swift::Demangle::Node **)v4;
LABEL_481:
              uint64_t v4 = *(swift::Demangle::Node **)v4;
            }
            else
            {
              uint64_t v4 = 0;
            }
            int v50 = 2132;
            LODWORD(v15) = 18;
            break;
        }
        goto LABEL_475;
      default:
        goto LABEL_112;
    }
    char v151 = 0;
    uint64_t v152 = *v150;
    this = *(uint64_t **)v152;
    size_t v153 = *((void *)v152 + 1);
    int v154 = 1;
    switch(v153)
    {
      case 3uLL:
        if (*(_WORD *)this != 26944 || *((unsigned char *)this + 2) != 110) {
          goto LABEL_483;
        }
        int v154 = 0;
        char v151 = 105;
        goto LABEL_391;
      case 6uLL:
        if (*(_DWORD *)this == 1869506880 && *((_WORD *)this + 2) == 29813)
        {
          int v154 = 0;
          char v151 = 108;
        }
        else
        {
          if (*(_DWORD *)this == 1853321024 && *((_WORD *)this + 2) == 25701)
          {
            char v151 = 120;
            goto LABEL_426;
          }
LABEL_247:
          char v151 = 0;
          int v154 = 1;
        }
LABEL_391:
        if (v153 == 8 && v154 != 0)
        {
          if (*this == 0x64656E776F6E7540)
          {
            char v151 = 121;
          }
          else if (((v154 ^ 1) & 1) == 0)
          {
            goto LABEL_483;
          }
          goto LABEL_426;
        }
        char v218 = v154 ^ 1;
        if (v153 == 16) {
          char v219 = v154 ^ 1;
        }
        else {
          char v219 = 1;
        }
        if ((v219 & 1) == 0)
        {
LABEL_400:
          this = (uint64_t *)memcmp(this, "@pack_guaranteed", v153);
          if (this) {
            goto LABEL_483;
          }
          char v151 = 112;
          goto LABEL_426;
        }
        if (v153 != 11) {
          char v218 = 1;
        }
        if ((v218 & 1) == 0)
        {
          if (*this == 0x776F5F6B63617040 && *(uint64_t *)((char *)this + 3) == 0x64656E776F5F6B63)
          {
            char v151 = 118;
            goto LABEL_426;
          }
          goto LABEL_418;
        }
        char v221 = v154 ^ 1;
        if (v153 != 11) {
          char v221 = 1;
        }
        if ((v221 & 1) == 0)
        {
LABEL_418:
          this = (uint64_t *)memcmp(this, "@pack_inout", v153);
          if (this) {
            goto LABEL_483;
          }
          char v151 = 109;
LABEL_426:
          unsigned int v222 = *(_DWORD *)(v5 + 12736);
          size_t v223 = *(unsigned int *)(v5 + 12740);
          uint64_t v224 = *(char **)(v5 + 12728);
          if (v222 < v223) {
            goto LABEL_442;
          }
          unint64_t v225 = *(void **)(v5 + 12744);
          int v226 = (char *)v225[1];
          if (&v224[v223] != v226)
          {
            unint64_t v227 = v225[2];
LABEL_430:
            if ((2 * v223) <= 4) {
              uint64_t v229 = 4;
            }
            else {
              uint64_t v229 = (2 * v223);
            }
            size_t v230 = v229 + v223;
            if (!v226 || (unint64_t)&v226[v230] > v227)
            {
              unint64_t v231 = 2 * v225[4];
              if (v231 <= v230 + 1) {
                unint64_t v231 = v230 + 1;
              }
              v225[4] = v231;
              unint64_t v232 = v231 + 8;
              this = (uint64_t *)malloc_type_malloc(v231 + 8, 0xD0263BC5uLL);
              unint64_t v233 = (char *)this + v232;
              *this = v225[3];
              int v226 = (char *)(this + 1);
              v225[2] = v233;
              v225[3] = this;
            }
            v225[1] = &v226[v230];
            if (v223) {
              this = (uint64_t *)memcpy(v226, *v293, v223);
            }
            *(void *)(v5 + 12728) = v226;
            LODWORD(v223) = *(_DWORD *)(v5 + 12740);
            uint64_t v224 = v226;
            unsigned int v222 = *(_DWORD *)(v5 + 12736);
            int v76 = v291;
            goto LABEL_441;
          }
          unint64_t v228 = (unint64_t)&v224[v223 + 1];
          unint64_t v227 = v225[2];
          if (v228 > v227) {
            goto LABEL_430;
          }
          v225[1] = v228;
          LODWORD(v229) = 1;
LABEL_441:
          *(_DWORD *)(v5 + 12740) = v223 + v229;
LABEL_442:
          *(_DWORD *)(v5 + 12736) = v222 + 1;
          v224[v222] = v151;
          if (*((unsigned char *)v4 + 18) == 5)
          {
            int v234 = *((_DWORD *)v4 + 2);
            if (v234 == 4)
            {
              if (*(_DWORD *)a4) {
                return this;
              }
              if (*((unsigned char *)v4 + 18) == 5 && *((_DWORD *)v4 + 2) >= 3u) {
                v235 = *(swift::Demangle::Node **)(*(void *)v4 + 16);
              }
              else {
                v235 = 0;
              }
            }
            else
            {
              if (v234 != 3) {
                goto LABEL_112;
              }
            }
LABEL_452:
            if (*(_DWORD *)a4) {
              return this;
            }
          }
LABEL_112:
          if (++v74 == v76) {
            goto LABEL_455;
          }
          continue;
        }
        if (!v154) {
          goto LABEL_426;
        }
LABEL_483:
        if ((v149 - 1) < 2) {
          goto LABEL_487;
        }
        if (v149 == 5 && *((_DWORD *)v4 + 2))
        {
          uint64_t v4 = *(swift::Demangle::Node **)v4;
LABEL_487:
          uint64_t v4 = *(swift::Demangle::Node **)v4;
        }
        else
        {
          uint64_t v4 = 0;
        }
        int v50 = 2103;
        LODWORD(v15) = 18;
LABEL_475:
        *(_DWORD *)a4 = v15;
        *(void *)(a4 + 8) = v4;
        *(_DWORD *)(a4 + 16) = v50;
        return this;
      case 0xBuLL:
        if (*this != 0x746E617261756740 || *(uint64_t *)((char *)this + 3) != 0x646565746E617261) {
          goto LABEL_247;
        }
        char v151 = 103;
        goto LABEL_426;
      case 0xCuLL:
        if (*this != 0x736E6F635F6E6940 || *((_DWORD *)this + 2) != 1953390964) {
          goto LABEL_483;
        }
        char v151 = 99;
        goto LABEL_426;
      case 0xDuLL:
        if (*this != 0x636F6C6C61656440 || *(uint64_t *)((char *)this + 5) != 0x676E697461636F6CLL) {
          goto LABEL_483;
        }
        char v151 = 101;
        goto LABEL_426;
      case 0xEuLL:
        if (*this != 0x726175675F6E6940 || *(uint64_t *)((char *)this + 6) != 0x646565746E617261) {
          goto LABEL_483;
        }
        char v151 = 110;
        goto LABEL_426;
      case 0x10uLL:
        if (*this != 0x615F74756F6E6940 || this[1] != 0x656C62617361696CLL) {
          goto LABEL_400;
        }
        char v151 = 98;
        goto LABEL_426;
      default:
        goto LABEL_391;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleImplicitClosure@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = *(swift::Demangle::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u) {
    goto LABEL_12;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_13:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fu", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v4 = *(swift::Demangle::Node **)v4;
  }
  int v12 = (swift::Demangle::Node *)*((void *)v4 + 1);
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleInOut@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    uint64_t v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    uint64_t v10 = (void *)*((void *)v4 + 1593);
    int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 122;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    uint64_t v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      size_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      uint64_t v9 = (char *)this + 8;
      v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *anonymous namespace'::Remangler::mangleInfixOperator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "oi", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleInitializer@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fi", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleInitAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIsolated@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yi", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSending@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLocalDeclName@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_8:
  unsigned int v10 = *((_DWORD *)v5 + 3184);
  size_t v11 = *((unsigned int *)v5 + 3185);
  unint64_t v12 = (char *)v5[1591];
  if (v10 < v11) {
    goto LABEL_28;
  }
  int v13 = (void *)v5[1593];
  int v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    unint64_t v15 = v13[2];
LABEL_12:
    if ((2 * v11) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    unint64_t v12 = (char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2 * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v13[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      size_t v22 = (char *)this + v21;
      *this = v13[3];
      unint64_t v12 = (char *)(this + 1);
      v13[2] = v22;
      void v13[3] = this;
    }
    v13[1] = &v12[v18];
    if (v11) {
      this = (uint64_t *)memcpy(v12, (const void *)v5[1591], v11);
    }
    v5[1591] = (uint64_t)v12;
    LODWORD(v11) = *((_DWORD *)v5 + 3185);
    unsigned int v10 = *((_DWORD *)v5 + 3184);
    goto LABEL_27;
  }
  unint64_t v16 = (unint64_t)&v12[v11 + 1];
  unint64_t v15 = v13[2];
  if (v16 > v15) {
    goto LABEL_12;
  }
  v13[1] = v16;
  LODWORD(v17) = 1;
LABEL_27:
  *((_DWORD *)v5 + 3185) = v11 + v17;
LABEL_28:
  *((_DWORD *)v5 + 3184) = v10 + 1;
  v12[v10] = 76;
  int v23 = *((unsigned __int8 *)v4 + 18);
  if ((v23 - 1) >= 2)
  {
    if (v23 != 5 || !*((_DWORD *)v4 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    int v4 = *(swift::Demangle::Node **)v4;
  }
  unint64_t v24 = *(swift::Demangle::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleMacro@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionLoc@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  unint64_t v12 = (uint64_t *)*((void *)*a2 + 3);
  uint64_t v13 = **((void **)*a2 + 2);
  uint64_t v14 = *v12;
  swift::Demangle::CharVector::append(this + 1591, "fMX", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = (swift::Demangle::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (size_t v11 = (swift::Demangle::Node *)*((void *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      unint64_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  unint64_t v12 = (swift::Demangle::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    uint64_t v13 = (swift::Demangle::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    size_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMm", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    size_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMr", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2) {
    int v8 = *(swift::Demangle::Node **)a2;
  }
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v19 = 321;
        int v18 = 10;
        goto LABEL_41;
      }
      int v4 = *(swift::Demangle::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    uint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_40:
      int v18 = 0;
      int v4 = 0;
      int v19 = 0;
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 109;
      goto LABEL_41;
    }
    uint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v20 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v20 <= v16)
      {
        v14[1] = v20;
        LODWORD(v21) = 1;
LABEL_39:
        *((_DWORD *)v5 + 3185) = v12 + v21;
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v12);
    }
    size_t v22 = v21 + v12;
    if (!v15 || (unint64_t)&v15[v22] > v16)
    {
      unint64_t v23 = 2 * v14[4];
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      v14[4] = v23;
      unint64_t v24 = v23 + 8;
      this = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v25 = (char *)this + v24;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v25;
      void v14[3] = this;
    }
    v14[1] = &v15[v22];
    if (v12) {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    }
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    uint64_t v13 = v15;
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_39;
  }
  unsigned int v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_19;
    }
    unsigned int v10 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_19:
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "XM", 2uLL, (void *)v5[1593]);
  int v17 = *((unsigned __int8 *)v4 + 18);
  if ((v17 - 1) < 2) {
    goto LABEL_23;
  }
  if (v17 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_23:
    if (*(_DWORD *)a4) {
      return this;
    }
  }
  int v18 = 0;
  int v4 = 0;
  int v19 = 0;
LABEL_41:
  *(_DWORD *)a4 = v18;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v19;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleMetatypeRepresentation@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7 == 14)
  {
    uint64_t result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if (result) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v16) {
      goto LABEL_60;
    }
    int v17 = (void *)*((void *)this + 1593);
    int v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      unint64_t v27 = (unint64_t)&v12[v16 + 1];
      unint64_t v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        char v23 = 111;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v19 = v17[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v16);
    }
    size_t v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      unint64_t v30 = 2 * v17[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      v17[4] = v30;
      unint64_t v31 = v30 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      uint64_t v32 = result + v31;
      *(void *)uint64_t result = v17[3];
      int v18 = (char *)(result + 8);
      v17[2] = v32;
      v17[3] = result;
    }
    v17[1] = &v18[v29];
    if (v16) {
      uint64_t result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
    }
    *((void *)this + 1591) = v18;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    size_t v12 = v18;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_59;
  }
  if (v7 != 6)
  {
    if (v7 != 5) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result != 1768453184 || *(unsigned char *)(result + 4) != 110) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v11) {
      goto LABEL_65;
    }
    uint64_t v13 = (void *)*((void *)this + 1593);
    uint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v39 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        char v23 = 116;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v40 = 4;
    }
    else {
      uint64_t v40 = (2 * v11);
    }
    size_t v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      unint64_t v42 = 2 * v13[4];
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      v13[4] = v42;
      unint64_t v43 = v42 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      uint64_t v44 = result + v43;
      *(void *)uint64_t result = v13[3];
      uint64_t v14 = (char *)(result + 8);
      v13[2] = v44;
      void v13[3] = result;
    }
    v13[1] = &v14[v41];
    if (v11) {
      uint64_t result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    size_t v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_64;
  }
  uint64_t result = memcmp((const void *)result, "@thick", 6uLL);
  if (!result)
  {
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v22 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v22)
    {
      char v23 = 84;
LABEL_66:
      int v21 = 0;
      uint64_t v3 = 0;
      int v20 = 0;
      _DWORD *v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    unint64_t v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      unint64_t v33 = (unint64_t)&v12[v22 + 1];
      unint64_t v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        char v23 = 84;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v34 = 4;
    }
    else {
      uint64_t v34 = (2 * v22);
    }
    size_t v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      unint64_t v36 = 2 * v24[4];
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      v24[4] = v36;
      unint64_t v37 = v36 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      uint64_t v38 = result + v37;
      *(void *)uint64_t result = v24[3];
      unint64_t v25 = (char *)(result + 8);
      void v24[2] = v38;
      void v24[3] = result;
    }
    v24[1] = &v25[v35];
    if (v22) {
      uint64_t result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
    }
    *((void *)this + 1591) = v25;
    LODWORD(v22) = *((_DWORD *)this + 3185);
    size_t v12 = v25;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_62;
  }
LABEL_17:
  int v20 = 2316;
  int v21 = 20;
LABEL_67:
  *(_DWORD *)a3 = v21;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMetaclass@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodLookupFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCMetadataUpdateFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MU", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ms", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mt", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModifyAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleModule(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(unsigned __int16 **)a2;
  uint64_t v7 = *((void *)a2 + 1);
  switch(v7)
  {
    case 3:
      int v17 = *v6;
      int v18 = *((unsigned __int8 *)v6 + 2);
      if (v17 != 24415 || v18 != 67) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "So";
      goto LABEL_27;
    case 15:
      uint64_t v23 = *(void *)v6;
      uint64_t v24 = *(void *)((char *)v6 + 7);
      if (v23 != 0x746E79535F435F5FLL || v24 != 0x64657A6973656874) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "SC";
LABEL_27:
      swift::Demangle::CharVector::append(v20, v22, 2uLL, v21);
      goto LABEL_43;
    case 5:
      int v8 = *(_DWORD *)v6;
      int v9 = *((unsigned __int8 *)v6 + 4);
      if (v8 == 1718187859 && v9 == 116)
      {
        unsigned int v11 = *((_DWORD *)this + 3184);
        size_t v12 = *((unsigned int *)this + 3185);
        uint64_t v13 = (char *)*((void *)this + 1591);
        if (v11 < v12)
        {
LABEL_42:
          *((_DWORD *)this + 3184) = v11 + 1;
          v13[v11] = 115;
          goto LABEL_43;
        }
        uint64_t v14 = (void *)*((void *)this + 1593);
        unint64_t v15 = (char *)v14[1];
        if (&v13[v12] == v15)
        {
          unint64_t v29 = (unint64_t)&v13[v12 + 1];
          unint64_t v16 = v14[2];
          if (v29 <= v16)
          {
            v14[1] = v29;
            LODWORD(v30) = 1;
LABEL_41:
            *((_DWORD *)this + 3185) = v12 + v30;
            goto LABEL_42;
          }
        }
        else
        {
          unint64_t v16 = v14[2];
        }
        if ((2 * v12) <= 4) {
          uint64_t v30 = 4;
        }
        else {
          uint64_t v30 = (2 * v12);
        }
        size_t v31 = v30 + v12;
        if (!v15 || (unint64_t)&v15[v31] > v16)
        {
          unint64_t v32 = 2 * v14[4];
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          v14[4] = v32;
          unint64_t v33 = v32 + 8;
          uint64_t v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          *uint64_t v34 = v14[3];
          unint64_t v15 = (char *)(v34 + 1);
          v14[2] = (char *)v34 + v33;
          void v14[3] = v34;
        }
        v14[1] = &v15[v31];
        if (v12) {
          memcpy(v15, *((const void **)this + 1591), v12);
        }
        *((void *)this + 1591) = v15;
        LODWORD(v12) = *((_DWORD *)this + 3185);
        uint64_t v13 = v15;
        unsigned int v11 = *((_DWORD *)this + 3184);
        goto LABEL_41;
      }
      break;
  }
  long long v35 = 0uLL;
  LOBYTE(v36) = 0;
  {
    unint64_t v26 = *((void *)this + 1585);
    if (v26 > 0xF)
    {
      int v28 = *((_DWORD *)this + 3178) + 16;
      long long v37 = v35;
      uint64_t v38 = v36;
      int v39 = v28;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v37, &v37);
    }
    else
    {
      *((void *)this + 1585) = v26 + 1;
      unint64_t v27 = (char *)this + 24 * v26 + 12296;
      *(_OWORD *)unint64_t v27 = v35;
      v27[16] = v36;
    }
  }
LABEL_43:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mn", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Hn", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_18;
    }
LABEL_16:
    if (*((_DWORD *)a2 + 2) == 4)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    goto LABEL_18;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 == 5) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tz", 2uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    size_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePredefinedObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleObjCBlock@<X0>(swift::Demangle::NodeFactory **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5)
    {
LABEL_11:
      switch(v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if (v12 != 1)
            {
              if (v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if (v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2;
              }
            }
            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1) {
              goto LABEL_29;
            }
          }
        case 5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7) {
            goto LABEL_16;
          }
          break;
        case 2:
          uint64_t v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      unint64_t v16 = (char **)(this + 1591);
      int v17 = this[1593];
      int v18 = "XB";
      size_t v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2)) {
      goto LABEL_29;
    }
    uint64_t v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v8 + 16) != 23) {
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      BOOL v9 = v7 == 2;
      uint64_t v7 = 2;
      if (!v9) {
        uint64_t v7 = 0;
      }
    }
  }
  unsigned int v20 = a3 + 1;
  uint64_t v21 = v7 - 1;
  while (v21)
  {
    unint64_t v22 = *((unsigned __int8 *)v4 + 18);
    unsigned int v23 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 == 5)
      {
        unint64_t v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if (v22 != 2) {
          goto LABEL_32;
        }
        unint64_t v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      uint64_t v24 = v4;
      if (v23 >= 2) {
        uint64_t v24 = *(swift::Demangle::Node **)v4;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
  swift::Demangle::CharVector::append((char **)this + 1591, "XzB", 3uLL, this[1593]);
  int v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2) {
    goto LABEL_48;
  }
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_48:
    unint64_t v26 = *(swift::Demangle::Node **)v4;
  }
  else
  {
    unint64_t v26 = 0;
  }
  swift::Demangle::CharVector::append((unsigned int *)this + 3182, *((void *)v26 + 1), this[1593]);
  int v18 = *(char **)v26;
  size_t v19 = *((void *)v26 + 1);
  int v17 = this[1593];
  unint64_t v16 = (char **)(this + 1591);
LABEL_51:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingObjCBlock@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XL", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Ta", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMp", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePostfixOperator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "oP", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMq", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePrefixOperator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "op", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePrivateDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (!v7)
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        uint64_t v14 = (char **)((char *)this + 12728);
        goto LABEL_24;
      }
    }
    else
    {
      if (v7 != 2) {
        goto LABEL_20;
      }
      uint64_t v7 = 2;
    }
  }
  unsigned int v8 = a3 + 1;
  uint64_t v9 = v7 - 1;
  do
  {
    unint64_t v10 = *((unsigned __int8 *)a2 + 18);
    unsigned int v11 = v10 - 1;
    if (v10 != 1)
    {
      if (v10 == 5)
      {
        unint64_t v10 = *((unsigned int *)a2 + 2);
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_7;
        }
        unint64_t v10 = 2;
      }
    }
    if (v10 <= v9)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unint64_t v12 = a2;
    if (v11 >= 2) {
      unint64_t v12 = *(swift::Demangle::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_8:
    --v9;
  }
  while (v9 != -1);
  LODWORD(v7) = *((unsigned __int8 *)a2 + 18);
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t v14 = (char **)((char *)this + 12728);
  if (v7 != 1)
  {
    if (v7 != 5)
    {
LABEL_26:
      unint64_t v15 = "LL";
      goto LABEL_27;
    }
LABEL_24:
    if (*((_DWORD *)a2 + 2) != 1) {
      goto LABEL_26;
    }
  }
  unint64_t v15 = "Ll";
LABEL_27:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(v14, v15, 2uLL, *((void **)this + 1593));
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::manglePropertyDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MV", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)a2;
LABEL_5:
    uint64_t v9 = *(swift::Demangle::Node **)v8;
    goto LABEL_7;
  }
  uint64_t v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
  {
LABEL_11:
    unsigned int v11 = *(swift::Demangle::Node **)v9;
    goto LABEL_13;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    uint64_t v9 = *(swift::Demangle::Node **)v9;
    goto LABEL_11;
  }
  unsigned int v11 = 0;
LABEL_13:
  if (*((_WORD *)v11 + 8) != 44)
  {
LABEL_27:
    uint64_t v14 = 0;
    goto LABEL_28;
  }
  int v12 = *((unsigned __int8 *)v11 + 18);
  unsigned int v13 = (swift::Demangle::Node **)v11;
  if ((v12 - 1) < 2) {
    goto LABEL_18;
  }
  if (v12 != 5)
  {
    uint64_t v14 = 0;
    if (v12 == 2)
    {
LABEL_24:
      unsigned int v11 = (swift::Demangle::Node *)*((void *)v11 + 1);
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!*((_DWORD *)v11 + 2))
  {
    unsigned int v11 = 0;
    goto LABEL_27;
  }
  unsigned int v13 = *(swift::Demangle::Node ***)v11;
LABEL_18:
  uint64_t v14 = *v13;
  if (v12 == 2) {
    goto LABEL_24;
  }
LABEL_21:
  if (v12 == 5 && *((_DWORD *)v11 + 2) >= 2u)
  {
    unsigned int v11 = *(swift::Demangle::Node **)v11;
    goto LABEL_24;
  }
  unsigned int v11 = 0;
LABEL_28:
  unsigned int v15 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 == 5)
  {
    if (*((_DWORD *)a2 + 2) != 4)
    {
LABEL_36:
      if (*((_DWORD *)a2 + 2) >= 2u)
      {
        int v18 = *(swift::Demangle::Node **)a2;
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
    int v17 = *((unsigned __int8 *)a2 + 18);
  }
  int v18 = a2;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_40;
  }
  if (v17 == 5) {
    goto LABEL_36;
  }
LABEL_39:
  size_t v19 = 0;
LABEL_40:
  if (*((_WORD *)v19 + 8) != 232) {
    goto LABEL_47;
  }
  int v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2) {
    goto LABEL_45;
  }
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    size_t v19 = (uint64_t *)*v19;
LABEL_45:
    size_t v19 = (uint64_t *)*v19;
    goto LABEL_47;
  }
  size_t v19 = 0;
LABEL_47:
  if ((result & 1) == 0)
  {
    int v21 = *((unsigned __int8 *)v19 + 18);
    unint64_t v22 = (swift::Demangle::Node **)v19;
    if ((v21 - 1) >= 2)
    {
      if (v21 == 5)
      {
        unsigned int v23 = (uint64_t *)*v19;
        unint64_t v22 = (swift::Demangle::Node **)*v19;
LABEL_56:
        uint64_t v24 = (swift::Demangle::Node **)&v23[*((unsigned int *)v19 + 2)];
        goto LABEL_62;
      }
      unint64_t v22 = 0;
    }
    switch(v21)
    {
      case 1:
        uint64_t v24 = (swift::Demangle::Node **)(v19 + 1);
        goto LABEL_62;
      case 2:
        uint64_t v24 = (swift::Demangle::Node **)(v19 + 2);
        goto LABEL_62;
      case 5:
        unsigned int v23 = (uint64_t *)*v19;
        goto LABEL_56;
    }
    uint64_t v24 = 0;
LABEL_62:
    while (v22 != v24)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v22;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInTypeModule@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::Node **)v8;
      unsigned int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    unsigned int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "HP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInProtocolModule@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::Node **)v8;
      unsigned int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    unsigned int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Hp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInOtherModule@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)a2;
LABEL_5:
    int v9 = *(uint64_t **)v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_14;
  }
  int v11 = *((unsigned __int8 *)v9 + 18);
  if ((v11 - 1) < 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v9 + 2))
  {
    int v9 = (uint64_t *)*v9;
LABEL_12:
    int v9 = (uint64_t *)*v9;
    goto LABEL_14;
  }
  int v9 = 0;
LABEL_14:
  if ((result & 1) == 0)
  {
    int v13 = *((unsigned __int8 *)v9 + 18);
    unsigned int v14 = (swift::Demangle::Node **)v9;
    if ((v13 - 1) >= 2)
    {
      if (v13 == 5)
      {
        unsigned int v15 = (uint64_t *)*v9;
        unsigned int v14 = (swift::Demangle::Node **)*v9;
LABEL_23:
        unint64_t v16 = (swift::Demangle::Node **)&v15[*((unsigned int *)v9 + 2)];
        goto LABEL_29;
      }
      unsigned int v14 = 0;
    }
    switch(v13)
    {
      case 1:
        unint64_t v16 = (swift::Demangle::Node **)(v9 + 1);
        goto LABEL_29;
      case 2:
        unint64_t v16 = (swift::Demangle::Node **)(v9 + 2);
        goto LABEL_29;
      case 5:
        unsigned int v15 = (uint64_t *)*v9;
        goto LABEL_23;
    }
    unint64_t v16 = 0;
LABEL_29:
    while (v14 != v16)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v14;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 != 2)
  {
    if (v17 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::Node **)v4;
  }
  int v18 = (swift::Demangle::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::Node **)v8;
      int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::Node **)v8;
      int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithClass@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v5 = *((unsigned __int8 *)a2 + 18);
  int v6 = (swift::Demangle::Node **)a2;
  if ((v5 - 1) < 2)
  {
LABEL_5:
    int v7 = *v6;
    if (v5 == 2) {
      goto LABEL_11;
    }
LABEL_8:
    if (v5 == 5 && *((_DWORD *)v4 + 2) >= 2u)
    {
      int v4 = *(swift::Demangle::Node **)v4;
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v8 = 0;
  }
  if (v5 == 5)
  {
    if (!*((_DWORD *)a2 + 2))
    {
      int v7 = 0;
      goto LABEL_13;
    }
    int v6 = *(swift::Demangle::Node ***)a2;
    goto LABEL_5;
  }
  int v7 = 0;
  if (v5 != 2) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v8 = (swift::Demangle::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithAnyObject@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  int v5 = *(swift::Demangle::Node **)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::Node **)v8;
      int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "TS", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  int v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::Node **)v8;
      int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WP", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Wa", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTablePattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Wp", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tr", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelper@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TR", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithSelf@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Ty", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithGlobalActor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TU", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleReadAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5 || !*((_DWORD *)v4 + 2))
    {
      int v9 = 0;
      goto LABEL_14;
    }
    int v4 = *(swift::Demangle::Node **)v4;
  }
  int v9 = *(swift::Demangle::Node **)v4;
LABEL_14:
  if (*((void *)v9 + 1) == 1)
  {
    swift::Demangle::CharVector::append((char **)v5 + 1591, "L", 1uLL, *((void **)v5 + 1593));
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v5 + 1591, *(void **)v9, *((void *)v9 + 1), *((void **)v5 + 1593));
    int v10 = 0;
    int v9 = 0;
    int v11 = 0;
  }
  else
  {
    int v11 = 3024;
    int v10 = 21;
  }
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

void *anonymous namespace'::Remangler::mangleRetroactiveConformance@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (uint64_t *)a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v8 = *(swift::Demangle::Node **)a2;
LABEL_5:
    int v9 = (swift::Demangle::Node *)*((void *)v8 + 1);
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  int v13 = (char *)this[1591];
  if (v11 >= v12)
  {
    unsigned int v14 = this[1593];
    unsigned int v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v12 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      v14[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unsigned int v23 = (char *)v22 + v21;
      *unint64_t v22 = v14[3];
      unsigned int v15 = (char *)(v22 + 1);
      v14[2] = v23;
      void v14[3] = v22;
    }
    v14[1] = &v15[v19];
    if (v12) {
      memcpy(v15, this[1591], v12);
    }
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    int v13 = v15;
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 103;
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2) {
    int v4 = (uint64_t *)*v4;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleShared@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 104;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOwned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 110;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSILBoxType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

char **anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if (v8 != 1)
  {
    if (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3)
    {
      int v12 = 3591;
      goto LABEL_13;
    }
    int v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v9 + 16) != 212)
  {
    int v12 = 3593;
    goto LABEL_13;
  }
  int v10 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      unsigned int v11 = 0;
      goto LABEL_17;
    }
    int v10 = *(swift::Demangle::Node **)a2;
  }
  unsigned int v11 = *(uint64_t **)v10;
LABEL_17:
  this = (char **)swift::Demangle::NodeFactory::createNode(*this, 235);
  int v14 = (swift::Demangle::Node *)this;
  unsigned int v15 = *((unsigned __int8 *)v11 + 18);
  if (v15 != 1)
  {
    if (v15 == 5)
    {
      unsigned int v15 = *((_DWORD *)v11 + 2);
      if (!v15) {
        goto LABEL_60;
      }
    }
    else if (v15 != 2)
    {
LABEL_60:
      int v32 = a3 + 1;
      if (*(_DWORD *)a4) {
        return this;
      }
      if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) == 3)
      {
        uint64_t v33 = *(void *)(*(void *)v5 + 8);
        if (*(_WORD *)(v33 + 16) != 43)
        {
          int v12 = 3621;
          goto LABEL_13;
        }
        uint64_t v34 = *(swift::Demangle::Node **)(*(void *)v5 + 16);
        if (*((_WORD *)v34 + 8) != 235)
        {
          int v12 = 3622;
          goto LABEL_13;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        long long v35 = "XX";
      }
      else
      {
        long long v35 = "Xx";
      }
      this = (char **)swift::Demangle::CharVector::append(v6 + 1591, v35, 2uLL, v6[1593]);
      int v13 = 0;
      uint64_t v5 = 0;
      int v12 = 0;
      goto LABEL_14;
    }
  }
  unint64_t v16 = 0;
  uint64_t v17 = v15;
  while (1)
  {
    unint64_t v20 = *((unsigned __int8 *)v11 + 18);
    if ((v20 - 1) >= 2)
    {
      char v21 = 0;
      unint64_t v22 = (uint64_t *)*v11;
    }
    else
    {
      char v21 = 1;
      unint64_t v22 = v11;
    }
    if (*(_WORD *)(v22[v16] + 16) != 214)
    {
      unsigned int v23 = v11;
      if ((v21 & 1) == 0) {
        unsigned int v23 = (uint64_t *)*v11;
      }
      if (*(_WORD *)(v23[v16] + 16) != 213) {
        break;
      }
    }
    if (v20 == 1) {
      goto LABEL_39;
    }
    if (v20 != 5)
    {
      if (v20 != 2) {
        goto LABEL_44;
      }
      unint64_t v20 = 2;
LABEL_39:
      if (v20 <= v16) {
        goto LABEL_44;
      }
      goto LABEL_40;
    }
    if (*((unsigned int *)v11 + 2) <= v16)
    {
LABEL_44:
      int v25 = 0;
      goto LABEL_45;
    }
LABEL_40:
    uint64_t v24 = v11;
    if ((v21 & 1) == 0) {
      uint64_t v24 = (uint64_t *)*v11;
    }
    int v25 = (swift::Demangle::Node *)v24[v16];
LABEL_45:
    int v26 = *((unsigned __int8 *)v25 + 18);
    unint64_t v27 = (unint64_t *)v25;
    if (v26 != 1)
    {
      if (v26 != 5 || *((_DWORD *)v25 + 2) != 1)
      {
LABEL_68:
        int v12 = 3604;
        int v13 = 1;
        uint64_t v5 = v25;
        goto LABEL_14;
      }
      unint64_t v27 = *(unint64_t **)v25;
    }
    if (*(_WORD *)(*v27 + 16) != 232) {
      goto LABEL_68;
    }
    int v28 = (unint64_t *)v25;
    if ((v26 - 1) < 2) {
      goto LABEL_54;
    }
    if (v26 == 5 && *((_DWORD *)v25 + 2))
    {
      int v28 = *(unint64_t **)v25;
LABEL_54:
      unint64_t v18 = *v28;
      goto LABEL_56;
    }
    unint64_t v18 = 0;
LABEL_56:
    if (*((_WORD *)v25 + 8) != 213) {
      goto LABEL_27;
    }
    unint64_t Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*v6, 123);
    uint64_t v30 = Node;
    int v31 = *(unsigned __int8 *)(v18 + 18);
    if ((v31 - 1) >= 2)
    {
      if (v31 != 5 || !*(_DWORD *)(v18 + 8))
      {
        unint64_t v19 = 0;
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)v18;
    }
    unint64_t v19 = *(swift::Demangle::Node **)v18;
LABEL_26:
    swift::Demangle::Node::addChild(Node, v19, (swift::Demangle::NodeFactory *)*v6);
    unint64_t v18 = swift::Demangle::NodeFactory::createNode(*v6, 232);
    swift::Demangle::Node::addChild((swift::Demangle::Node *)v18, v30, (swift::Demangle::NodeFactory *)*v6);
LABEL_27:
    this = (char **)swift::Demangle::Node::addChild(v14, (swift::Demangle::Node *)v18, (swift::Demangle::NodeFactory *)*v6);
    if (v17 == ++v16) {
      goto LABEL_60;
    }
  }
  if (v20 == 1) {
    goto LABEL_77;
  }
  if (v20 != 5)
  {
    if (v20 == 2)
    {
      unint64_t v20 = 2;
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  unint64_t v20 = *((unsigned int *)v11 + 2);
LABEL_77:
  if (v20 <= v16)
  {
LABEL_81:
    uint64_t v5 = 0;
  }
  else
  {
    if ((v21 & 1) == 0) {
      unsigned int v11 = (uint64_t *)*v11;
    }
    uint64_t v5 = (swift::Demangle::Node *)v11[v16];
  }
  int v12 = 3600;
LABEL_13:
  int v13 = 1;
LABEL_14:
  *(_DWORD *)a4 = v13;
  *(void *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v12;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleIsSerialized@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      uint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 113;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleStatic@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    unint64_t v10 = (void *)*((void *)v4 + 1593);
    unint64_t v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 90;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      char v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleThinFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleTuple@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    unsigned int v7 = *((_DWORD *)this + 3184);
    size_t v8 = *((unsigned int *)this + 3185);
    int v9 = this[1591];
    if (v7 < v8)
    {
LABEL_22:
      *((_DWORD *)this + 3184) = v7 + 1;
      v9[v7] = 116;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    unint64_t v10 = this[1593];
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_21:
        *((_DWORD *)this + 3185) = v8 + v14;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      v10[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t result = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)result + v18;
      void *result = v10[3];
      int v9 = result + 1;
      v10[2] = v19;
      void v10[3] = result;
    }
    v10[1] = &v9[v15];
    if (v8) {
      uint64_t result = memcpy(v9, this[1591], v8);
    }
    this[1591] = v9;
    LODWORD(v8) = *((_DWORD *)this + 3185);
    unsigned int v7 = *((_DWORD *)this + 3184);
    goto LABEL_21;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePack@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "QP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackDirect@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "QSd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackIndirect@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "QSi", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePackExpansion@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Qp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::manglePackElement@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Qe", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleTypeList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v7 = 1;
  BOOL v15 = 1;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2;
LABEL_6:
      unint64_t v9 = 0;
      unsigned int v10 = a3 + 1;
      while (1)
      {
        unint64_t v11 = *((unsigned __int8 *)a2 + 18);
        unsigned int v12 = v11 - 1;
        if (v11 == 1) {
          goto LABEL_13;
        }
        if (v11 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) > v9)
        {
LABEL_16:
          unint64_t v13 = a2;
          if (v12 >= 2) {
            unint64_t v13 = *(swift::Demangle::Node **)a2;
          }
          if (*(_DWORD *)a4) {
            return result;
          }
          goto LABEL_8;
        }
LABEL_7:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_8:
        if (v8 == ++v9)
        {
          BOOL v7 = v15;
          goto LABEL_21;
        }
      }
      if (v11 != 2) {
        goto LABEL_7;
      }
      unint64_t v11 = 2;
LABEL_13:
      if (v11 > v9) {
        goto LABEL_16;
      }
      goto LABEL_7;
  }
LABEL_21:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMangling@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  BOOL v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      BOOL v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    BOOL v7 = 0;
  }
  if (v6 == 1)
  {
    unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v7 != (swift::Demangle::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v6 == 2)
  {
    unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
    if (v7 != (swift::Demangle::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    size_t v12 = *(unsigned int *)(v4 + 12740);
    unint64_t v13 = *(unsigned char **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 68;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    uint64_t v14 = *(void **)(v4 + 12744);
    BOOL v15 = (unsigned char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unint64_t v13 = (unsigned char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (uint64_t *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unsigned int v23 = (char *)this + v22;
      *this = v14[3];
      unint64_t v13 = this + 1;
      v14[2] = v23;
      void v14[3] = this;
    }
    v14[1] = &v13[v19];
    if (v12) {
      this = (uint64_t *)memcpy(v13, *(const void **)(v4 + 12728), v12);
    }
    *(void *)(v4 + 12728) = v13;
    LODWORD(v12) = *(_DWORD *)(v4 + 12740);
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    goto LABEL_38;
  }
  if (v6 != 5)
  {
    unint64_t v9 = 0;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)a2;
LABEL_9:
  unint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    BOOL v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "N", 1uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ma", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mr", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MI", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mi", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ml", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataDemanglingCache@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleWeak@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xw", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnowned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xo", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnmanaged@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleValueWitness@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2) {
    int v4 = *(swift::Demangle::Node **)v4;
  }
  switch(**(_DWORD **)v4)
  {
    case 0:
      char v10 = 0;
      unsigned int v11 = "al";
      break;
    case 1:
      char v10 = 0;
      unsigned int v11 = "ca";
      break;
    case 2:
      char v10 = 0;
      unsigned int v11 = "ta";
      break;
    case 3:
      char v10 = 0;
      unsigned int v11 = "de";
      break;
    case 4:
      char v10 = 0;
      unsigned int v11 = "xx";
      break;
    case 5:
      char v10 = 0;
      unsigned int v11 = "XX";
      break;
    case 6:
      char v10 = 0;
      unsigned int v11 = "Xx";
      break;
    case 7:
      char v10 = 0;
      unsigned int v11 = "CP";
      break;
    case 8:
      char v10 = 0;
      unsigned int v11 = "Cp";
      break;
    case 9:
      char v10 = 0;
      unsigned int v11 = "cp";
      break;
    case 0xA:
      char v10 = 0;
      unsigned int v11 = "Tk";
      break;
    case 0xB:
      char v10 = 0;
      unsigned int v11 = "tk";
      break;
    case 0xC:
      char v10 = 0;
      unsigned int v11 = "pr";
      break;
    case 0xD:
      char v10 = 0;
      unsigned int v11 = "TK";
      break;
    case 0xE:
      char v10 = 0;
      unsigned int v11 = "Cc";
      break;
    case 0xF:
      char v10 = 0;
      unsigned int v11 = "Tt";
      break;
    case 0x10:
      char v10 = 0;
      unsigned int v11 = "tT";
      break;
    case 0x11:
      char v10 = 0;
      unsigned int v11 = "xs";
      break;
    case 0x12:
      char v10 = 0;
      unsigned int v11 = "xg";
      break;
    case 0x13:
      char v10 = 0;
      unsigned int v11 = "ug";
      break;
    case 0x14:
      char v10 = 0;
      unsigned int v11 = "up";
      break;
    case 0x15:
      char v10 = 0;
      unsigned int v11 = "ui";
      break;
    case 0x16:
      char v10 = 0;
      unsigned int v11 = "et";
      break;
    case 0x17:
      char v10 = 0;
      unsigned int v11 = "st";
      break;
    default:
      unsigned int v11 = 0;
      char v10 = 1;
      break;
  }
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  uint64_t v14 = (char *)this[1591];
  if (v12 < v13) {
    goto LABEL_52;
  }
  BOOL v15 = this[1593];
  unint64_t v16 = (char *)v15[1];
  if (&v14[v13] != v16)
  {
    unint64_t v17 = v15[2];
LABEL_40:
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      unsigned int v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      uint64_t v24 = (char *)v23 + v22;
      *unsigned int v23 = v15[3];
      unint64_t v16 = (char *)(v23 + 1);
      v15[2] = v24;
      void v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if (v13) {
      memcpy(v16, this[1591], v13);
    }
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    uint64_t v14 = v16;
    unsigned int v12 = *((_DWORD *)this + 3184);
    goto LABEL_51;
  }
  unint64_t v18 = (unint64_t)&v14[v13 + 1];
  unint64_t v17 = v15[2];
  if (v18 > v17) {
    goto LABEL_40;
  }
  v15[1] = v18;
  LODWORD(v19) = 1;
LABEL_51:
  *((_DWORD *)this + 3185) = v13 + v19;
LABEL_52:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 119;
  if (v10) {
    size_t v25 = 0;
  }
  else {
    size_t v25 = strlen(v11);
  }
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append((char **)this + 1591, v11, v25, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WV", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleVTableThunk@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleWillSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataBuiltinDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MB", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataFieldDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MF", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataAssocTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MA", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataSuperclassDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MC", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericTypeParamDecl@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCurryThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Tc", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDispatchThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Tj", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Tq", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolRequirementsBaseDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  int v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      unsigned int v12 = *(swift::Demangle::Node **)v8;
      unsigned int v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    size_t v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    size_t v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    size_t v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  unsigned int v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  size_t v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unsigned int v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    BOOL v15 = (swift::Demangle::Node *)*((void *)*a2 + 2);
  }
  else {
    BOOL v15 = 0;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        BOOL v15 = 0;
        goto LABEL_26;
      }
      BOOL v15 = *(swift::Demangle::Node **)v15;
    }
    BOOL v15 = *(swift::Demangle::Node **)v15;
  }
LABEL_26:
  {
    int v17 = *((unsigned __int8 *)v15 + 18);
    unint64_t v18 = (swift::Demangle::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        uint64_t v19 = *(swift::Demangle::Node **)v15;
        unint64_t v18 = *(swift::Demangle::Node ***)v15;
LABEL_35:
        size_t v20 = (swift::Demangle::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        size_t v20 = (swift::Demangle::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        uint64_t v19 = *(swift::Demangle::Node **)v15;
        goto LABEL_35;
    }
    size_t v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tn", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDefaultAssociatedConformanceAccessor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unsigned int v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    BOOL v15 = (swift::Demangle::Node *)*((void *)*a2 + 2);
  }
  else {
    BOOL v15 = 0;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        BOOL v15 = 0;
        goto LABEL_26;
      }
      BOOL v15 = *(swift::Demangle::Node **)v15;
    }
    BOOL v15 = *(swift::Demangle::Node **)v15;
  }
LABEL_26:
  {
    int v17 = *((unsigned __int8 *)v15 + 18);
    unint64_t v18 = (swift::Demangle::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        uint64_t v19 = *(swift::Demangle::Node **)v15;
        unint64_t v18 = *(swift::Demangle::Node ***)v15;
LABEL_35:
        size_t v20 = (swift::Demangle::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        size_t v20 = (swift::Demangle::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        uint64_t v19 = *(swift::Demangle::Node **)v15;
        goto LABEL_35;
    }
    size_t v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TN", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleBaseConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_12:
    size_t v13 = (swift::Demangle::Node *)*((void *)v4 + 1);
    goto LABEL_14;
  }
  size_t v13 = 0;
LABEL_14:
  if (*((_WORD *)v13 + 8) == 232)
  {
    int v14 = *((unsigned __int8 *)v13 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)v13 + 2))
      {
        size_t v13 = 0;
        goto LABEL_21;
      }
      size_t v13 = *(swift::Demangle::Node **)v13;
    }
    size_t v13 = *(swift::Demangle::Node **)v13;
  }
LABEL_21:
  {
    int v15 = *((unsigned __int8 *)v13 + 18);
    int v16 = (swift::Demangle::Node **)v13;
    if ((v15 - 1) >= 2)
    {
      if (v15 == 5)
      {
        int v17 = *(swift::Demangle::Node **)v13;
        int v16 = *(swift::Demangle::Node ***)v13;
LABEL_30:
        unint64_t v18 = (swift::Demangle::Node **)((char *)v17 + 8 * *((unsigned int *)v13 + 2));
        goto LABEL_36;
      }
      int v16 = 0;
    }
    switch(v15)
    {
      case 1:
        unint64_t v18 = (swift::Demangle::Node **)((char *)v13 + 8);
        goto LABEL_36;
      case 2:
        unint64_t v18 = (swift::Demangle::Node **)((char *)v13 + 16);
        goto LABEL_36;
      case 5:
        int v17 = *(swift::Demangle::Node **)v13;
        goto LABEL_30;
    }
    unint64_t v18 = 0;
LABEL_36:
    while (v16 != v18)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tb", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleThrowsAnnotation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 75;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypedThrowsAnnotation@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "YK", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleEmptyList@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 121;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleFirstElementMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 95;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleVariadicMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 100;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

void *anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = this + 1591;
  swift::Demangle::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  swift::Demangle::CharVector::append(v6, *(void **)a2, *((void *)a2 + 1), this[1593]);
  uint64_t result = swift::Demangle::CharVector::append(v6, "_", 1uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOy", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOe", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOr", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOs", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOb", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOc", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOf", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOh", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (const void **)(this + 1591);
  swift::Demangle::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = this[1591];
  if (v8 >= v9)
  {
    unint64_t v11 = this[1593];
    uint64_t v12 = (char *)*((void *)v11 + 1);
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = *((void *)v11 + 2);
      if (v14 <= v13)
      {
        *((void *)v11 + 1) = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = *((void *)v11 + 2);
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)*((void *)v11 + 1);
    if (v17)
    {
      unint64_t v18 = 2 * *((void *)v11 + 4);
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      *((void *)v11 + 4) = v18;
      unint64_t v19 = v18 + 8;
      uint64_t result = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      size_t v20 = (char *)result + v19;
      void *result = *((void *)v11 + 3);
      unsigned int v10 = (char *)(result + 1);
      *((void *)v11 + 2) = v20;
      *((void *)v11 + 3) = result;
    }
    *((void *)v11 + 1) = &v10[v16];
    if (v9) {
      uint64_t result = memcpy(v10, *v6, v9);
    }
    this[1591] = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    unsigned int v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 114;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleAssocTypePath@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (_anonymous_namespace_::Remangler *)this;
  BOOL v11 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      size_t v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      size_t v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      size_t v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  size_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLabelList@<X0>(uint64_t *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
LABEL_10:
      unint64_t v14 = &v4[v7];
      unsigned int v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v4 == v14) {
          goto LABEL_29;
        }
      }
    case 2:
      uint64_t v7 = 2;
      goto LABEL_10;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7)
      {
        int v4 = (swift::Demangle::Node **)*a2;
        goto LABEL_10;
      }
      break;
  }
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = (char *)this[1591];
  if (v8 >= v9)
  {
    BOOL v11 = (void *)this[1593];
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v16 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v9);
    }
    size_t v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      unint64_t v19 = 2 * v11[4];
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      v11[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (uint64_t *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *this = v11[3];
      uint64_t v12 = (char *)(this + 1);
      v11[2] = v21;
      void v11[3] = this;
    }
    v11[1] = &v12[v18];
    if (v9) {
      this = (uint64_t *)memcpy(v12, *(const void **)(v5 + 12728), v9);
    }
    *(void *)(v5 + 12728) = v12;
    LODWORD(v9) = *(_DWORD *)(v5 + 12740);
    unsigned int v10 = v12;
    unsigned int v8 = *(_DWORD *)(v5 + 12736);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 12736) = v8 + 1;
  v10[v8] = 121;
LABEL_29:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModuleDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MXM", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MXE", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAnonymousDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }
  size_t v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 1) {
    goto LABEL_13;
  }
  if (v11 == 2) {
    goto LABEL_16;
  }
  if (v11 != 5 || (int v12 = *((_DWORD *)v4 + 2)) == 0)
  {
    uint64_t v16 = 0;
LABEL_17:
    long long v20 = 0uLL;
    LOBYTE(v21) = 0;
    {
      unint64_t v17 = *((void *)this + 1585);
      if (v17 > 0xF)
      {
        int v19 = *((_DWORD *)this + 3178) + 16;
        long long v22 = v20;
        uint64_t v23 = v21;
        int v24 = v19;
        std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v22, &v22);
      }
      else
      {
        *((void *)this + 1585) = v17 + 1;
        size_t v18 = (char *)this + 24 * v17 + 12296;
        *(_OWORD *)size_t v18 = v20;
        v18[16] = v21;
      }
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unint64_t v13 = (char **)((char *)this + 12728);
    unint64_t v14 = (void *)*((void *)this + 1593);
    unsigned int v15 = "MXY";
    goto LABEL_22;
  }
  if (v12 != 1)
  {
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_16:
    uint64_t v16 = *((void *)v4 + 1);
    goto LABEL_17;
  }
LABEL_13:
  unint64_t v13 = (char **)((char *)this + 12728);
  unint64_t v14 = (void *)*((void *)this + 1593);
  unsigned int v15 = "MXX";
LABEL_22:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(v13, v15, 3uLL, v14);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeGenericParamRef@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }
  size_t v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 1) {
    goto LABEL_11;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2) == 1)
  {
    size_t v9 = *(swift::Demangle::Node **)v9;
LABEL_11:
    unsigned int v11 = a3 + 2;
    if (*(_DWORD *)a4) {
      return this;
    }
    int v12 = *((unsigned __int8 *)v4 + 18);
    if (v12 != 2)
    {
      if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
      {
        uint64_t v13 = 0;
        goto LABEL_19;
      }
      int v4 = *(swift::Demangle::Node **)v4;
    }
    uint64_t v13 = *((void *)v4 + 1);
LABEL_19:
    BOOL v20 = 1;
    int v16 = *(unsigned __int8 *)(v13 + 18);
    unint64_t v17 = (swift::Demangle::Node **)v13;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        size_t v18 = *(swift::Demangle::Node **)v13;
        unint64_t v17 = *(swift::Demangle::Node ***)v13;
LABEL_27:
        int v19 = (swift::Demangle::Node **)((char *)v18 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_33;
      }
      unint64_t v17 = 0;
    }
    switch(v16)
    {
      case 1:
        int v19 = (swift::Demangle::Node **)(v13 + 8);
        goto LABEL_33;
      case 2:
        int v19 = (swift::Demangle::Node **)(v13 + 16);
        goto LABEL_33;
      case 5:
        size_t v18 = *(swift::Demangle::Node **)v13;
        goto LABEL_27;
    }
    int v19 = 0;
LABEL_33:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "MXA", 3uLL, (void *)v5[1593]);
    int v15 = 0;
    size_t v9 = 0;
    int v14 = 0;
    goto LABEL_35;
  }
  int v14 = 321;
  int v15 = 10;
LABEL_35:
  *(_DWORD *)a4 = v15;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredOptional@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XSq", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredArray@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XSa", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSugaredDictionary@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v9 + 2) != 1) {
      goto LABEL_24;
    }
    int v9 = *(swift::Demangle::Node **)v9;
  }
  unsigned int v11 = a3 + 2;
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_16:
    int v9 = (swift::Demangle::Node *)*((void *)v4 + 1);
    goto LABEL_18;
  }
  int v9 = 0;
LABEL_18:
  int v13 = *((unsigned __int8 *)v9 + 18);
  if (v13 != 1)
  {
    if (v13 == 5 && *((_DWORD *)v9 + 2) == 1)
    {
      int v9 = *(swift::Demangle::Node **)v9;
      goto LABEL_22;
    }
LABEL_24:
    int v15 = 321;
    int v14 = 10;
    goto LABEL_25;
  }
LABEL_22:
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "XSD", 3uLL, (void *)v5[1593]);
  int v14 = 0;
  int v9 = 0;
  int v15 = 0;
LABEL_25:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredParen@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XSp", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  long long v51 = 0uLL;
  LOBYTE(v52) = 0;
  if (result) {
    goto LABEL_2;
  }
  if (*((unsigned char *)v5 + 18) != 5 || *((_DWORD *)v5 + 2) <= 2u)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = 3771;
    return result;
  }
  unsigned int v9 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 3u) {
    int v10 = (uint64_t *)*((void *)*v5 + 2);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = 0;
  int v12 = (const void **)((char *)this + 12728);
  unint64_t v49 = v10;
  while (1)
  {
    unint64_t v13 = *((unsigned __int8 *)v10 + 18);
    if (v13 != 1)
    {
      if (v13 == 5)
      {
        unint64_t v13 = *((unsigned int *)v10 + 2);
      }
      else
      {
        if (v13 != 2) {
          break;
        }
        unint64_t v13 = 2;
      }
    }
    if (v13 <= v11) {
      break;
    }
    if (v11) {
      char v14 = 95;
    }
    else {
      char v14 = 121;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unint64_t v17 = (char *)*((void *)this + 1591);
    if (v15 >= v16)
    {
      unint64_t v50 = v11;
      size_t v18 = (void *)*((void *)this + 1593);
      int v19 = (char *)v18[1];
      if (&v17[v16] != v19)
      {
        unint64_t v20 = v18[2];
        goto LABEL_26;
      }
      unint64_t v21 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
      }
      else
      {
LABEL_26:
        if ((2 * v16) <= 4) {
          uint64_t v22 = 4;
        }
        else {
          uint64_t v22 = (2 * v16);
        }
        size_t v23 = v22 + v16;
        if (!v19 || (unint64_t)&v19[v23] > v20)
        {
          unint64_t v24 = 2 * v18[4];
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          v18[4] = v24;
          size_t v48 = v12;
          unint64_t v25 = v24 + 8;
          char v26 = v14;
          unint64_t v27 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          char v14 = v26;
          *unint64_t v27 = v18[3];
          int v19 = (char *)(v27 + 1);
          int v28 = (char *)v27 + v25;
          int v12 = v48;
          v18[2] = v28;
          void v18[3] = v27;
        }
        v18[1] = &v19[v23];
        if (v16)
        {
          char v29 = v14;
          memcpy(v19, *v12, v16);
          char v14 = v29;
        }
        *((void *)this + 1591) = v19;
        LODWORD(v16) = *((_DWORD *)this + 3185);
        unint64_t v17 = v19;
        unsigned int v15 = *((_DWORD *)this + 3184);
        int v10 = v49;
      }
      unint64_t v11 = v50;
      *((_DWORD *)this + 3185) = v16 + v22;
    }
    *((_DWORD *)this + 3184) = v15 + 1;
    v17[v15] = v14;
    unint64_t v30 = *((unsigned __int8 *)v10 + 18);
    unsigned int v31 = v30 - 1;
    if (v30 == 1) {
      goto LABEL_42;
    }
    if (v30 != 5)
    {
      if (v30 != 2) {
        goto LABEL_47;
      }
      unint64_t v30 = 2;
LABEL_42:
      if (v30 <= v11) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }
    if (*((unsigned int *)v10 + 2) <= v11)
    {
LABEL_47:
      uint64_t v33 = 0;
      goto LABEL_48;
    }
LABEL_43:
    int v32 = v10;
    if (v31 >= 2) {
      int v32 = (uint64_t *)*v10;
    }
    uint64_t v33 = v32[v11];
LABEL_48:
    int v34 = *(unsigned __int8 *)(v33 + 18);
    long long v35 = (swift::Demangle::Node **)v33;
    if ((v34 - 1) >= 2)
    {
      if (v34 == 5)
      {
        uint64_t v36 = *(swift::Demangle::Node **)v33;
        long long v35 = *(swift::Demangle::Node ***)v33;
LABEL_56:
        long long v37 = (swift::Demangle::Node **)((char *)v36 + 8 * *(unsigned int *)(v33 + 8));
        goto LABEL_62;
      }
      long long v35 = 0;
    }
    switch(v34)
    {
      case 1:
        long long v37 = (swift::Demangle::Node **)(v33 + 8);
        goto LABEL_62;
      case 2:
        long long v37 = (swift::Demangle::Node **)(v33 + 16);
        goto LABEL_62;
      case 5:
        uint64_t v36 = *(swift::Demangle::Node **)v33;
        goto LABEL_56;
    }
    long long v37 = 0;
LABEL_62:
    while (v35 != v37)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v35;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    ++v11;
    *(_DWORD *)(a4 + 16) = 0;
  }
  if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 4u)
  {
    unint64_t v38 = 0;
    int v39 = (uint64_t *)*((void *)*v5 + 3);
    while (1)
    {
      unint64_t v41 = *((unsigned __int8 *)v39 + 18);
      switch(v41)
      {
        case 1:
          unint64_t v42 = *((unsigned __int8 *)v39 + 18);
          break;
        case 5:
          unint64_t v42 = *((unsigned int *)v39 + 2);
          break;
        case 2:
          unint64_t v42 = 2;
          break;
        default:
          goto LABEL_85;
      }
      if (v42 <= v38) {
        break;
      }
      unsigned int v43 = v41 - 1;
      if (v41 != 1)
      {
        if (v41 == 5) {
          unint64_t v41 = *((unsigned int *)v39 + 2);
        }
        else {
          unint64_t v41 = 2;
        }
      }
      if (v41 <= v38)
      {
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v44 = v39;
        if (v43 >= 2) {
          uint64_t v44 = (uint64_t *)*v39;
        }
        uint64_t v40 = (swift::Demangle::Node *)v44[v38];
      }
      ++v38;
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
LABEL_85:
  swift::Demangle::CharVector::append((char **)v12, "Qo", 2uLL, *((void **)this + 1593));
  if (*((unsigned char *)v5 + 18) == 5) {
    uint64_t v5 = (swift::Demangle::Node **)*v5;
  }
  unint64_t v45 = *((void *)this + 1585);
  if (v45 > 0xF)
  {
    int v47 = *((_DWORD *)this + 3178) + 16;
    long long v53 = v51;
    uint64_t v54 = v52;
    int v55 = v47;
    uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v53, &v53);
  }
  else
  {
    *((void *)this + 1585) = v45 + 1;
    unsigned int v46 = (char *)this + 24 * v45 + 12296;
    *(_OWORD *)unsigned int v46 = v51;
    v46[16] = v52;
  }
LABEL_2:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MQ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ho", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mg", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorImpl@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mh", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorKey@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mj", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorVar@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mk", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleOpaqueReturnType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t *)a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_9;
    }
    int v7 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) != 341)
  {
LABEL_9:
    uint64_t result = swift::Demangle::CharVector::append(this + 1591, "Qr", 2uLL, this[1593]);
    goto LABEL_10;
  }
  swift::Demangle::CharVector::append(this + 1591, "QR", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v3 + 18) - 1 >= 2) {
    uint64_t v3 = (uint64_t *)*v3;
  }
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueReturnTypeOf@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "QO", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MK", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MN", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadataCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MJ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceFunction@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceToken@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Wz", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceDeclList@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  unsigned int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 != 5)
  {
    if (v7 != 2) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  unsigned int v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
LABEL_6:
    unint64_t v8 = 0;
    unsigned int v9 = a3 + 1;
    uint64_t v10 = v7;
    unsigned int v27 = a3 + 1;
    while (1)
    {
      unint64_t v14 = *((unsigned __int8 *)a2 + 18);
      unsigned int v15 = v14 - 1;
      if (v14 == 1) {
        goto LABEL_14;
      }
      if (v14 != 5) {
        break;
      }
      if (*((unsigned int *)a2 + 2) <= v8)
      {
LABEL_19:
        unint64_t v17 = 0;
        goto LABEL_20;
      }
LABEL_15:
      size_t v16 = a2;
      if (v15 >= 2) {
        size_t v16 = *(swift::Demangle::Node **)a2;
      }
      unint64_t v17 = (swift::Demangle::Node *)*((void *)v16 + v8);
LABEL_20:
      if (*(_DWORD *)a4) {
        return this;
      }
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
      size_t v11 = *(unsigned int *)(v5 + 12740);
      int v12 = *(char **)(v5 + 12728);
      if (v13 >= v11)
      {
        size_t v18 = *(void **)(v5 + 12744);
        int v19 = (char *)v18[1];
        if (&v12[v11] != v19)
        {
          unint64_t v20 = v18[2];
          goto LABEL_25;
        }
        unint64_t v21 = (unint64_t)&v12[v11 + 1];
        unint64_t v20 = v18[2];
        if (v21 <= v20)
        {
          v18[1] = v21;
          LODWORD(v22) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v11) <= 4) {
            uint64_t v22 = 4;
          }
          else {
            uint64_t v22 = (2 * v11);
          }
          size_t v23 = v22 + v11;
          if (!v19 || (unint64_t)&v19[v23] > v20)
          {
            unint64_t v24 = 2 * v18[4];
            if (v24 <= v23 + 1) {
              unint64_t v24 = v23 + 1;
            }
            v18[4] = v24;
            unint64_t v25 = v24 + 8;
            this = (uint64_t *)malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
            char v26 = (char *)this + v25;
            *this = v18[3];
            int v19 = (char *)(this + 1);
            v18[2] = v26;
            void v18[3] = this;
          }
          v18[1] = &v19[v23];
          if (v11) {
            this = (uint64_t *)memcpy(v19, *(const void **)(v5 + 12728), v11);
          }
          *(void *)(v5 + 12728) = v19;
          LODWORD(v11) = *(_DWORD *)(v5 + 12740);
          int v12 = v19;
          unsigned int v13 = *(_DWORD *)(v5 + 12736);
        }
        *(_DWORD *)(v5 + 12740) = v11 + v22;
        unsigned int v9 = v27;
      }
      *(_DWORD *)(v5 + 12736) = v13 + 1;
      v12[v13] = 95;
      if (v10 == ++v8) {
        goto LABEL_36;
      }
    }
    if (v14 != 2) {
      goto LABEL_19;
    }
    unint64_t v14 = 2;
LABEL_14:
    if (v14 <= v8) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
LABEL_36:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalPrespecializedGenericTypeCachingOnceToken@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mz", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSelfReorderingReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      int v4 = *(swift::Demangle::Node **)a2;
    }
    else {
      int v4 = 0;
    }
  }
  unsigned int v8 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      size_t v11 = (swift::Demangle::Node **)((char *)v4 + 16);
      uint64_t v10 = *((void *)v4 + 2);
      if (*(_WORD *)(v10 + 16) == 43)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        size_t v11 = (swift::Demangle::Node **)((char *)v4 + 24);
      }
      swift::Demangle::CharVector::append(this + 1591, "TJO", 3uLL, this[1593]);
      int v12 = *v11;
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSubsetParametersThunk@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = (swift::Demangle::Node **)*a2;
    }
    else {
      unsigned int v8 = 0;
    }
  }
  unsigned int v9 = a3 + 1;
  while (1)
  {
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 != 5) {
      break;
    }
    if (v8 == (swift::Demangle::Node **)((char *)*a2 + 8 * *((unsigned int *)a2 + 2))) {
      goto LABEL_19;
    }
LABEL_16:
    unsigned int v13 = *v8;
    if (*((_WORD *)*v8 + 8) == 321) {
      goto LABEL_19;
    }
    ++v8;
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (v10 == 1) {
    size_t v11 = a2 + 1;
  }
  else {
    size_t v11 = 0;
  }
  if (v10 == 2) {
    int v12 = a2 + 2;
  }
  else {
    int v12 = v11;
  }
  if (v8 != v12) {
    goto LABEL_16;
  }
LABEL_19:
  unsigned int v15 = (const void **)(this + 1591);
  swift::Demangle::CharVector::append(this + 1591, "TJS", 3uLL, this[1593]);
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      unsigned int v16 = *((_DWORD *)this + 3184);
      size_t v17 = *((unsigned int *)this + 3185);
      size_t v18 = this[1591];
      if (v16 >= v17)
      {
        int v19 = this[1593];
        unint64_t v20 = (char *)*((void *)v19 + 1);
        if (&v18[v17] != v20)
        {
          unint64_t v21 = *((void *)v19 + 2);
          goto LABEL_25;
        }
        unint64_t v22 = (unint64_t)&v18[v17 + 1];
        unint64_t v21 = *((void *)v19 + 2);
        if (v22 <= v21)
        {
          *((void *)v19 + 1) = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v17) <= 4) {
            uint64_t v23 = 4;
          }
          else {
            uint64_t v23 = (2 * v17);
          }
          size_t v24 = v23 + v17;
          if (!v20 || (unint64_t)&v20[v24] > v21)
          {
            unint64_t v25 = 2 * *((void *)v19 + 4);
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            *((void *)v19 + 4) = v25;
            unint64_t v26 = v25 + 8;
            unsigned int v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            int v28 = (char *)v27 + v26;
            *unsigned int v27 = *((void *)v19 + 3);
            unint64_t v20 = (char *)(v27 + 1);
            *((void *)v19 + 2) = v28;
            *((void *)v19 + 3) = v27;
          }
          *((void *)v19 + 1) = &v20[v24];
          if (v17) {
            memcpy(v20, *v15, v17);
          }
          this[1591] = v20;
          LODWORD(v17) = *((_DWORD *)this + 3185);
          size_t v18 = v20;
          unsigned int v16 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v17 + v23;
      }
      *((_DWORD *)this + 3184) = v16 + 1;
      v18[v16] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v29 = *((_DWORD *)this + 3184);
        size_t v30 = *((unsigned int *)this + 3185);
        unsigned int v31 = this[1591];
        if (v29 >= v30)
        {
          int v32 = this[1593];
          uint64_t v33 = (char *)*((void *)v32 + 1);
          if (&v31[v30] != v33)
          {
            unint64_t v34 = *((void *)v32 + 2);
            goto LABEL_43;
          }
          unint64_t v35 = (unint64_t)&v31[v30 + 1];
          unint64_t v34 = *((void *)v32 + 2);
          if (v35 <= v34)
          {
            *((void *)v32 + 1) = v35;
            LODWORD(v36) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v30) <= 4) {
              uint64_t v36 = 4;
            }
            else {
              uint64_t v36 = (2 * v30);
            }
            size_t v37 = v36 + v30;
            if (!v33 || (unint64_t)&v33[v37] > v34)
            {
              unint64_t v38 = 2 * *((void *)v32 + 4);
              if (v38 <= v37 + 1) {
                unint64_t v38 = v37 + 1;
              }
              *((void *)v32 + 4) = v38;
              unint64_t v39 = v38 + 8;
              uint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
              unint64_t v41 = (char *)v40 + v39;
              *uint64_t v40 = *((void *)v32 + 3);
              uint64_t v33 = (char *)(v40 + 1);
              *((void *)v32 + 2) = v41;
              *((void *)v32 + 3) = v40;
            }
            *((void *)v32 + 1) = &v33[v37];
            if (v30) {
              memcpy(v33, *v15, v30);
            }
            this[1591] = v33;
            LODWORD(v30) = *((_DWORD *)this + 3185);
            unsigned int v31 = v33;
            unsigned int v29 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v30 + v36;
        }
        *((_DWORD *)this + 3184) = v29 + 1;
        v31[v29] = 114;
        if (!*(_DWORD *)a4)
        {
          unsigned int v42 = *((_DWORD *)this + 3184);
          size_t v43 = *((unsigned int *)this + 3185);
          uint64_t v44 = this[1591];
          if (v42 >= v43)
          {
            unint64_t v45 = this[1593];
            unsigned int v46 = (char *)*((void *)v45 + 1);
            if (&v44[v43] != v46)
            {
              unint64_t v47 = *((void *)v45 + 2);
              goto LABEL_61;
            }
            unint64_t v48 = (unint64_t)&v44[v43 + 1];
            unint64_t v47 = *((void *)v45 + 2);
            if (v48 <= v47)
            {
              *((void *)v45 + 1) = v48;
              LODWORD(v49) = 1;
            }
            else
            {
LABEL_61:
              if ((2 * v43) <= 4) {
                uint64_t v49 = 4;
              }
              else {
                uint64_t v49 = (2 * v43);
              }
              size_t v50 = v49 + v43;
              if (!v46 || (unint64_t)&v46[v50] > v47)
              {
                unint64_t v51 = 2 * *((void *)v45 + 4);
                if (v51 <= v50 + 1) {
                  unint64_t v51 = v50 + 1;
                }
                *((void *)v45 + 4) = v51;
                unint64_t v52 = v51 + 8;
                uint64_t result = (uint64_t *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
                long long v53 = (char *)result + v52;
                uint64_t *result = *((void *)v45 + 3);
                unsigned int v46 = (char *)(result + 1);
                *((void *)v45 + 2) = v53;
                *((void *)v45 + 3) = result;
              }
              *((void *)v45 + 1) = &v46[v50];
              if (v43) {
                uint64_t result = (uint64_t *)memcpy(v46, *v15, v43);
              }
              this[1591] = v46;
              LODWORD(v43) = *((_DWORD *)this + 3185);
              uint64_t v44 = v46;
              unsigned int v42 = *((_DWORD *)this + 3184);
            }
            *((_DWORD *)this + 3185) = v43 + v49;
          }
          *((_DWORD *)this + 3184) = v42 + 1;
          v44[v42] = 80;
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDifferentiabilityWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = *(swift::Demangle::Node **)a2;
    }
    else {
      unsigned int v8 = 0;
    }
  }
  unsigned int v9 = (unsigned int *)((char *)a2 + 8);
  unsigned int v10 = a3 + 1;
  while (1)
  {
    int v11 = *((unsigned __int8 *)v4 + 18);
    if (v11 != 5) {
      break;
    }
    if (v8 == (swift::Demangle::Node *)(*(void *)v4 + 8 * *((unsigned int *)v4 + 2))) {
      goto LABEL_18;
    }
LABEL_15:
    unsigned int v13 = *(swift::Demangle::Node **)v8;
    if (*(_WORD *)(*(void *)v8 + 16) == 102) {
      goto LABEL_18;
    }
    unsigned int v8 = (swift::Demangle::Node *)((char *)v8 + 8);
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (v11 == 1) {
    int v12 = (swift::Demangle::Node *)((char *)v4 + 8);
  }
  else {
    int v12 = 0;
  }
  if (v11 == 2) {
    int v12 = (swift::Demangle::Node *)((char *)v4 + 16);
  }
  if (v8 != v12) {
    goto LABEL_15;
  }
LABEL_18:
  if (v11 == 1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    if (v11 == 5)
    {
      uint64_t v15 = *((unsigned int *)v4 + 2) - 1;
      unsigned int v16 = *(swift::Demangle::Node **)v4;
      goto LABEL_24;
    }
    uint64_t v15 = 1;
  }
  unsigned int v16 = v4;
LABEL_24:
  if (*(_WORD *)(*((void *)v16 + v15) + 16) != 43) {
    goto LABEL_34;
  }
  if (v11 == 1)
  {
    uint64_t v18 = 0;
    goto LABEL_32;
  }
  if (v11 == 5)
  {
    uint64_t v19 = *v9;
    if (!v19)
    {
      size_t v17 = 0;
      goto LABEL_33;
    }
    uint64_t v18 = v19 - 1;
    int v4 = *(swift::Demangle::Node **)v4;
LABEL_32:
    size_t v17 = (swift::Demangle::Node *)*((void *)v4 + v18);
    goto LABEL_33;
  }
  size_t v17 = 0;
  if (v11 == 2)
  {
    uint64_t v18 = 1;
    goto LABEL_32;
  }
LABEL_33:
  if (!*(_DWORD *)a4)
  {
LABEL_34:
    unint64_t v20 = (const void **)(this + 1591);
    swift::Demangle::CharVector::append(this + 1591, "WJ", 2uLL, this[1593]);
    char v21 = **(unsigned char **)v8;
    unsigned int v22 = *((_DWORD *)this + 3184);
    size_t v23 = *((unsigned int *)this + 3185);
    size_t v24 = this[1591];
    if (v22 >= v23)
    {
      unint64_t v25 = this[1593];
      unint64_t v26 = (char *)*((void *)v25 + 1);
      if (&v24[v23] != v26)
      {
        unint64_t v27 = *((void *)v25 + 2);
        goto LABEL_38;
      }
      unint64_t v28 = (unint64_t)&v24[v23 + 1];
      unint64_t v27 = *((void *)v25 + 2);
      if (v28 <= v27)
      {
        *((void *)v25 + 1) = v28;
        LODWORD(v29) = 1;
        unint64_t v20 = (const void **)(this + 1591);
      }
      else
      {
LABEL_38:
        if ((2 * v23) <= 4) {
          uint64_t v29 = 4;
        }
        else {
          uint64_t v29 = (2 * v23);
        }
        size_t v30 = v29 + v23;
        if (!v26 || (unint64_t)&v26[v30] > v27)
        {
          unint64_t v31 = 2 * *((void *)v25 + 4);
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          *((void *)v25 + 4) = v31;
          unint64_t v32 = v31 + 8;
          uint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          unint64_t v34 = (char *)v33 + v32;
          *uint64_t v33 = *((void *)v25 + 3);
          unint64_t v26 = (char *)(v33 + 1);
          *((void *)v25 + 2) = v34;
          *((void *)v25 + 3) = v33;
        }
        *((void *)v25 + 1) = &v26[v30];
        unint64_t v20 = (const void **)(this + 1591);
        if (v23) {
          memcpy(v26, this[1591], v23);
        }
        this[1591] = v26;
        LODWORD(v23) = *((_DWORD *)this + 3185);
        size_t v24 = v26;
        unsigned int v22 = *((_DWORD *)this + 3184);
      }
      *((_DWORD *)this + 3185) = v23 + v29;
    }
    *((_DWORD *)this + 3184) = v22 + 1;
    v24[v22] = v21;
    if (!*(_DWORD *)a4)
    {
      unsigned int v35 = *((_DWORD *)this + 3184);
      size_t v36 = *((unsigned int *)this + 3185);
      size_t v37 = this[1591];
      if (v35 >= v36)
      {
        unint64_t v38 = this[1593];
        unint64_t v39 = (char *)*((void *)v38 + 1);
        if (&v37[v36] != v39)
        {
          unint64_t v40 = *((void *)v38 + 2);
          goto LABEL_56;
        }
        unint64_t v41 = (unint64_t)&v37[v36 + 1];
        unint64_t v40 = *((void *)v38 + 2);
        if (v41 <= v40)
        {
          *((void *)v38 + 1) = v41;
          LODWORD(v42) = 1;
        }
        else
        {
LABEL_56:
          if ((2 * v36) <= 4) {
            uint64_t v42 = 4;
          }
          else {
            uint64_t v42 = (2 * v36);
          }
          size_t v43 = v42 + v36;
          if (!v39 || (unint64_t)&v39[v43] > v40)
          {
            unint64_t v44 = 2 * *((void *)v38 + 4);
            if (v44 <= v43 + 1) {
              unint64_t v44 = v43 + 1;
            }
            *((void *)v38 + 4) = v44;
            unint64_t v45 = v44 + 8;
            unsigned int v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            unint64_t v47 = (char *)v46 + v45;
            *unsigned int v46 = *((void *)v38 + 3);
            unint64_t v39 = (char *)(v46 + 1);
            *((void *)v38 + 2) = v47;
            *((void *)v38 + 3) = v46;
          }
          *((void *)v38 + 1) = &v39[v43];
          if (v36) {
            memcpy(v39, *v20, v36);
          }
          this[1591] = v39;
          LODWORD(v36) = *((_DWORD *)this + 3185);
          size_t v37 = v39;
          unsigned int v35 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v36 + v42;
      }
      *((_DWORD *)this + 3184) = v35 + 1;
      v37[v35] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v48 = *((_DWORD *)this + 3184);
        size_t v49 = *((unsigned int *)this + 3185);
        size_t v50 = this[1591];
        if (v48 >= v49)
        {
          unint64_t v51 = this[1593];
          unint64_t v52 = (char *)*((void *)v51 + 1);
          if (&v50[v49] != v52)
          {
            unint64_t v53 = *((void *)v51 + 2);
            goto LABEL_75;
          }
          unint64_t v54 = (unint64_t)&v50[v49 + 1];
          unint64_t v53 = *((void *)v51 + 2);
          if (v54 <= v53)
          {
            *((void *)v51 + 1) = v54;
            LODWORD(v55) = 1;
          }
          else
          {
LABEL_75:
            if ((2 * v49) <= 4) {
              uint64_t v55 = 4;
            }
            else {
              uint64_t v55 = (2 * v49);
            }
            size_t v56 = v55 + v49;
            if (!v52 || (unint64_t)&v52[v56] > v53)
            {
              unint64_t v57 = 2 * *((void *)v51 + 4);
              if (v57 <= v56 + 1) {
                unint64_t v57 = v56 + 1;
              }
              *((void *)v51 + 4) = v57;
              unint64_t v58 = v57 + 8;
              uint64_t result = (uint64_t *)malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              size_t v59 = (char *)result + v58;
              uint64_t *result = *((void *)v51 + 3);
              unint64_t v52 = (char *)(result + 1);
              *((void *)v51 + 2) = v59;
              *((void *)v51 + 3) = result;
            }
            *((void *)v51 + 1) = &v52[v56];
            if (v49) {
              uint64_t result = (uint64_t *)memcpy(v52, *v20, v49);
            }
            this[1591] = v52;
            LODWORD(v49) = *((_DWORD *)this + 3185);
            size_t v50 = v52;
            unsigned int v48 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v49 + v55;
        }
        *((_DWORD *)this + 3184) = v48 + 1;
        v50[v48] = 114;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
      }
    }
  }
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoDerivative@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yk", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncAwaitResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TQ", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::Node **)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncSuspendResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TY", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::Node **)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yt", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtendedExistentialTypeShape@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_7;
  }
  int v8 = (swift::Demangle::Node **)a2;
  if (v7 == 2) {
    goto LABEL_11;
  }
  if (v7 == 5)
  {
    int v9 = *((_DWORD *)a2 + 2);
    if (!v9)
    {
      unsigned int v10 = 0;
      goto LABEL_16;
    }
    if (v9 == 1)
    {
      a2 = *(swift::Demangle::Node **)a2;
LABEL_7:
      unsigned int v10 = *(swift::Demangle::Node **)a2;
LABEL_16:
      int v12 = "Xg";
      goto LABEL_17;
    }
    int v8 = *(swift::Demangle::Node ***)a2;
LABEL_11:
    int v11 = *v8;
    if (v7 == 2) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  int v11 = 0;
LABEL_12:
  if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
  {
    unsigned int v10 = 0;
    if (!v11) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  a2 = *(swift::Demangle::Node **)a2;
LABEL_15:
  unsigned int v10 = (swift::Demangle::Node *)*((void *)a2 + 1);
  if (!v11) {
    goto LABEL_16;
  }
LABEL_20:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = "XG";
LABEL_17:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, v12, 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleUniquable@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Mq", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleSymbolicExtendedExistentialType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    uint64_t v14 = *((void *)v13 + 1);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
LABEL_14:
  int v15 = *(unsigned __int8 *)(v14 + 18);
  unsigned int v16 = (swift::Demangle::Node **)v14;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      size_t v17 = *(swift::Demangle::Node **)v14;
      unsigned int v16 = *(swift::Demangle::Node ***)v14;
      goto LABEL_22;
    }
    unsigned int v16 = 0;
  }
  switch(v15)
  {
    case 1:
      uint64_t v18 = (swift::Demangle::Node **)(v14 + 8);
      if (v16 != (swift::Demangle::Node **)(v14 + 8)) {
        goto LABEL_30;
      }
      goto LABEL_27;
    case 2:
      uint64_t v18 = (swift::Demangle::Node **)(v14 + 16);
      if (v16 != (swift::Demangle::Node **)(v14 + 16)) {
        goto LABEL_30;
      }
LABEL_27:
      if (v12 == 5) {
        goto LABEL_33;
      }
      goto LABEL_49;
    case 5:
      size_t v17 = *(swift::Demangle::Node **)v14;
LABEL_22:
      uint64_t v18 = (swift::Demangle::Node **)((char *)v17 + 8 * *(unsigned int *)(v14 + 8));
      if (v16 != v18) {
        goto LABEL_30;
      }
      goto LABEL_27;
  }
  uint64_t v18 = 0;
  if (!v16) {
    goto LABEL_27;
  }
  do
  {
LABEL_30:
    if (*(_DWORD *)a4) {
      return result;
    }
    ++v16;
  }
  while (v16 != v18);
  if (*((unsigned char *)a2 + 18) == 5)
  {
LABEL_33:
    if (*((_DWORD *)a2 + 2) >= 3u)
    {
      uint64_t v19 = *((void *)*a2 + 2);
      int v20 = *(unsigned __int8 *)(v19 + 18);
      char v21 = (swift::Demangle::Node **)v19;
      if ((v20 - 1) >= 2)
      {
        if (v20 == 5)
        {
          unsigned int v22 = *(swift::Demangle::Node **)v19;
          char v21 = *(swift::Demangle::Node ***)v19;
LABEL_42:
          size_t v23 = (swift::Demangle::Node **)((char *)v22 + 8 * *(unsigned int *)(v19 + 8));
          goto LABEL_48;
        }
        char v21 = 0;
      }
      switch(v20)
      {
        case 1:
          size_t v23 = (swift::Demangle::Node **)(v19 + 8);
          goto LABEL_48;
        case 2:
          size_t v23 = (swift::Demangle::Node **)(v19 + 16);
          goto LABEL_48;
        case 5:
          unsigned int v22 = *(swift::Demangle::Node **)v19;
          goto LABEL_42;
      }
      size_t v23 = 0;
LABEL_48:
      while (v21 != v23)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        ++v21;
      }
    }
  }
LABEL_49:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleMetatypeParamsRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 109;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
      if (*((unsigned char *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::Node ***)a2;
      goto LABEL_7;
    }
    int v8 = *(swift::Demangle::Node ***)a2;
  }
  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0;
      goto LABEL_21;
    }
    unint64_t v16 = *(swift::Demangle::Node **)v4;
  }
  size_t v17 = (swift::Demangle::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
      if (*((unsigned char *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::Node ***)a2;
      goto LABEL_7;
    }
    int v8 = *(swift::Demangle::Node ***)a2;
  }
  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0;
      goto LABEL_21;
    }
    unint64_t v16 = *(swift::Demangle::Node **)v4;
  }
  size_t v17 = (swift::Demangle::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOg", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleAsyncRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 97;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleParamLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Yl", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2) {
    int v4 = *(swift::Demangle::Node **)v4;
  }
  char v10 = **(unsigned char **)v4;
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  size_t v13 = this[1591];
  if (v11 < v12) {
    goto LABEL_27;
  }
  BOOL v14 = this[1593];
  unint64_t v15 = (char *)*((void *)v14 + 1);
  if (&v13[v12] != v15)
  {
    unint64_t v16 = *((void *)v14 + 2);
LABEL_14:
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * *((void *)v14 + 4);
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      *((void *)v14 + 4) = v20;
      unint64_t v21 = v20 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unsigned int v22 = (char *)result + v21;
      uint64_t *result = *((void *)v14 + 3);
      unint64_t v15 = (char *)(result + 1);
      *((void *)v14 + 2) = v22;
      *((void *)v14 + 3) = result;
    }
    *((void *)v14 + 1) = &v15[v19];
    if (v12) {
      uint64_t result = (uint64_t *)memcpy(v15, this[1591], v12);
    }
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    size_t v13 = v15;
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_26;
  }
  unint64_t v17 = (unint64_t)&v13[v12 + 1];
  unint64_t v16 = *((void *)v14 + 2);
  if (v17 > v16) {
    goto LABEL_14;
  }
  *((void *)v14 + 1) = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = v10;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleSelfLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::CharVector::append(this + 1591, "YL", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    size_t v12 = this[1593];
    size_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)result + v20;
      void *result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOC", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTakeNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOD", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOF", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOH", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentGenericInverseConformanceRequirement@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
    uint64_t v8 = (swift::Demangle::Node **)a2;
  }
  else
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1103;
      return this;
    }
    uint64_t v8 = *(swift::Demangle::Node ***)a2;
  }
  if (v11)
  {
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
    return this;
  }
  unsigned int v9 = v14;
  if ((v13 & 0x80000000) == 0 && !v14)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v4;
    *(_DWORD *)(a4 + 16) = 1112;
    return this;
  }
  if (v13 == 1)
  {
    unsigned int v10 = "Rj";
LABEL_21:
    swift::Demangle::CharVector::append((char **)(v5 + 12728), v10, 2uLL, *(void **)(v5 + 12744));
    if (*((unsigned char *)v4 + 18) == 5) {
      int v4 = *(swift::Demangle::Node **)v4;
    }
    goto LABEL_24;
  }
  if (!v13)
  {
    unsigned int v10 = "Ri";
    goto LABEL_21;
  }
  if (v13 != -1)
  {
    unsigned int v10 = "RJ";
    goto LABEL_21;
  }
  swift::Demangle::CharVector::append((char **)(v5 + 12728), "RI", 2uLL, *(void **)(v5 + 12744));
  if (*((unsigned char *)v4 + 18) == 5) {
    int v4 = *(swift::Demangle::Node **)v4;
  }
LABEL_24:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAnyConstructor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v9 = 0;
  }
  if (v8 == 1)
  {
    long long v11 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v9 != (swift::Demangle::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v8 == 2)
  {
    long long v11 = (swift::Demangle::Node *)((char *)a2 + 16);
    if (v9 != (swift::Demangle::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "f", 1uLL, this[1593]);
    unsigned int v14 = *((_DWORD *)this + 3184);
    size_t v15 = *((unsigned int *)this + 3185);
    uint64_t v16 = this[1591];
    if (v14 < v15)
    {
LABEL_36:
      *((_DWORD *)this + 3184) = v14 + 1;
      v16[v14] = a3;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }
    size_t v17 = this[1593];
    BOOL v18 = (char *)*((void *)v17 + 1);
    if (&v16[v15] == v18)
    {
      unint64_t v20 = (unint64_t)&v16[v15 + 1];
      unint64_t v19 = *((void *)v17 + 2);
      if (v20 <= v19)
      {
        *((void *)v17 + 1) = v20;
        LODWORD(v21) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v15 + v21;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v19 = *((void *)v17 + 2);
    }
    if ((2 * v15) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      unint64_t v23 = 2 * *((void *)v17 + 4);
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      *((void *)v17 + 4) = v23;
      unint64_t v24 = v23 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v25 = (char *)result + v24;
      uint64_t *result = *((void *)v17 + 3);
      BOOL v18 = (char *)(result + 1);
      *((void *)v17 + 2) = v25;
      *((void *)v17 + 3) = result;
    }
    *((void *)v17 + 1) = &v18[v22];
    if (v15) {
      uint64_t result = (uint64_t *)memcpy(v18, this[1591], v15);
    }
    this[1591] = v18;
    LODWORD(v15) = *((_DWORD *)this + 3185);
    uint64_t v16 = v18;
    unsigned int v14 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  if (v8 != 5)
  {
    long long v11 = 0;
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)a2;
LABEL_9:
  long long v11 = (swift::Demangle::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
  if (v9 == v11) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v12 = a4 + 1;
  while (1)
  {
    if (*(_DWORD *)a5) {
      return result;
    }
    unsigned int v9 = (swift::Demangle::Node *)((char *)v9 + 8);
    if (v9 == v11) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleChildNodes@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unsigned int v9 = *a2;
      int v8 = (swift::Demangle::Node **)*a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      uint64_t v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      unsigned int v9 = *a2;
      goto LABEL_9;
  }
  uint64_t v10 = 0;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    ++v8;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

char **swift::Demangle::RemanglerBuffer::operator<<(char **a1, char a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  size_t v5 = *((unsigned int *)a1 + 3);
  int v6 = *a1;
  if (v4 >= v5)
  {
    int v7 = a1[2];
    int v8 = (char *)*((void *)v7 + 1);
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = *((void *)v7 + 2);
      if (v10 <= v9)
      {
        *((void *)v7 + 1) = v10;
        LODWORD(v11) = 1;
LABEL_20:
        *((_DWORD *)a1 + 3) = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v9 = *((void *)v7 + 2);
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)*((void *)v7 + 1);
    if (v13)
    {
      unint64_t v14 = 2 * *((void *)v7 + 4);
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      *((void *)v7 + 4) = v14;
      unint64_t v15 = v14 + 8;
      uint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)v16 + v15;
      *uint64_t v16 = *((void *)v7 + 3);
      int v6 = (char *)(v16 + 1);
      *((void *)v7 + 2) = v17;
      *((void *)v7 + 3) = v16;
    }
    *((void *)v7 + 1) = &v6[v12];
    if (v5) {
      memcpy(v6, *a1, v5);
    }
    *a1 = v6;
    unsigned int v4 = *((_DWORD *)a1 + 2);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)a1 + 2) = v4 + 1;
  v6[v4] = a2;
  return a1;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleAnyProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = this;
  switch(*((_WORD *)a2 + 8))
  {
    case 0x1A:
      int v6 = a3 + 1;
    case 0x1B:
      int v7 = *((unsigned __int8 *)a2 + 18);
      if ((v7 - 1) < 2) {
        goto LABEL_9;
      }
      if (v7 == 5 && *((_DWORD *)a2 + 2))
      {
        a2 = *(swift::Demangle::Node **)a2;
LABEL_9:
        int v8 = *(swift::Demangle::Node **)a2;
      }
      else
      {
        int v8 = 0;
      }
      if (!*(_DWORD *)a4)
      {
        this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v5 + 1591, "HX", 2uLL, *((void **)v5 + 1593));
        goto LABEL_22;
      }
      return this;
    case 0x2F:
      int v9 = a3 + 1;
    case 0x30:
      int v10 = a3 + 1;
    case 0x31:
      int v11 = a3 + 1;
    default:
LABEL_22:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
  }
}

unsigned int *anonymous namespace'::Remangler::mangleListSeparator(unsigned int *this, BOOL *a2)
{
  if (*a2)
  {
    uint64_t v3 = this;
    unsigned int v4 = this[3184];
    size_t v5 = this[3185];
    int v6 = (unsigned char *)*((void *)this + 1591);
    if (v4 < v5)
    {
LABEL_21:
      v3[3184] = v4 + 1;
      v6[v4] = 95;
      *a2 = 0;
      return this;
    }
    int v7 = (void *)*((void *)this + 1593);
    int v8 = (unsigned char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_20:
        v3[3185] = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v9 = v7[2];
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (unsigned char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2 * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      uint64_t v16 = (char *)this + v15;
      *(void *)this = v7[3];
      int v6 = this + 2;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if (v5) {
      this = (unsigned int *)memcpy(v6, *((const void **)v3 + 1591), v5);
    }
    *((void *)v3 + 1591) = v6;
    LODWORD(v5) = v3[3185];
    unsigned int v4 = v3[3184];
    goto LABEL_20;
  }
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleEndOfList(unsigned int *this, int a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    unsigned int v3 = this[3184];
    size_t v4 = this[3185];
    size_t v5 = (unsigned char *)*((void *)this + 1591);
    if (v3 < v4)
    {
LABEL_21:
      v2[3184] = v3 + 1;
      v5[v3] = 121;
      return this;
    }
    int v6 = (void *)*((void *)this + 1593);
    int v7 = (unsigned char *)v6[1];
    if (&v5[v4] == v7)
    {
      unint64_t v9 = (unint64_t)&v5[v4 + 1];
      unint64_t v8 = v6[2];
      if (v9 <= v8)
      {
        v6[1] = v9;
        LODWORD(v10) = 1;
LABEL_20:
        v2[3185] = v4 + v10;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v8 = v6[2];
    }
    if ((2 * v4) <= 4) {
      uint64_t v10 = 4;
    }
    else {
      uint64_t v10 = (2 * v4);
    }
    size_t v11 = v10 + v4;
    if (v7) {
      BOOL v12 = (unint64_t)&v7[v10 + v4] > v8;
    }
    else {
      BOOL v12 = 1;
    }
    size_t v5 = (unsigned char *)v6[1];
    if (v12)
    {
      unint64_t v13 = 2 * v6[4];
      if (v13 <= v11 + 1) {
        unint64_t v13 = v11 + 1;
      }
      v6[4] = v13;
      unint64_t v14 = v13 + 8;
      this = (unsigned int *)malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      unint64_t v15 = (char *)this + v14;
      *(void *)this = v6[3];
      size_t v5 = this + 2;
      v6[2] = v15;
      void v6[3] = this;
    }
    v6[1] = &v5[v11];
    if (v4) {
      this = (unsigned int *)memcpy(v5, *((const void **)v2 + 1591), v4);
    }
    *((void *)v2 + 1591) = v5;
    LODWORD(v4) = v2[3185];
    unsigned int v3 = v2[3184];
    goto LABEL_20;
  }
  return this;
}

uint64_t anonymous namespace'::Remangler::trySubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::Node *a2, swift::Demangle::SubstitutionEntry *a3, int a4)
{
    return 1;
  swift::Demangle::RemanglerBase::entryForNode((uint64_t *)&__src, this, a2, a4);
  *(_OWORD *)a3 = __src;
  *((unsigned char *)a3 + 16) = v36;
  unsigned int Substitution = swift::Demangle::RemanglerBase::findSubstitution(this, (swift::Demangle::Node **)a3);
  if ((Substitution & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v9 = Substitution - 26;
  if (Substitution >= 0x1A)
  {
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    BOOL v12 = (char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_25:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 65;
      return 1;
    }
    unint64_t v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v23 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v23 <= v15)
      {
        v13[1] = v23;
        LODWORD(v24) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v11 + v24;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v24 = 4;
    }
    else {
      uint64_t v24 = (2 * v11);
    }
    size_t v25 = v24 + v11;
    if (!v14 || (unint64_t)&v14[v25] > v15)
    {
      unint64_t v26 = 2 * v13[4];
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      v13[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *unint64_t v28 = v13[3];
      unint64_t v14 = (char *)(v28 + 1);
      v13[2] = (char *)v28 + v27;
      void v13[3] = v28;
    }
    v13[1] = &v14[v25];
    if (v11) {
      memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    BOOL v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
  LOBYTE(__src) = Substitution + 65;
  {
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v18 = *((unsigned int *)this + 3185);
    unint64_t v19 = (char *)*((void *)this + 1591);
    if (v17 < v18)
    {
LABEL_41:
      *((_DWORD *)this + 3184) = v17 + 1;
      v19[v17] = 65;
      swift::Demangle::CharVector::append((char **)this + 1591, &__src, 1uLL, *((void **)this + 1593));
      return 1;
    }
    unint64_t v20 = (void *)*((void *)this + 1593);
    uint64_t v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v29 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v29 <= v22)
      {
        v20[1] = v29;
        LODWORD(v30) = 1;
LABEL_40:
        *((_DWORD *)this + 3185) = v18 + v30;
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v22 = v20[2];
    }
    if ((2 * v18) <= 4) {
      uint64_t v30 = 4;
    }
    else {
      uint64_t v30 = (2 * v18);
    }
    size_t v31 = v30 + v18;
    if (!v21 || (unint64_t)&v21[v31] > v22)
    {
      unint64_t v32 = 2 * v20[4];
      if (v32 <= v31 + 1) {
        unint64_t v32 = v31 + 1;
      }
      v20[4] = v32;
      unint64_t v33 = v32 + 8;
      unint64_t v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *unint64_t v34 = v20[3];
      uint64_t v21 = (char *)(v34 + 1);
      v20[2] = (char *)v34 + v33;
      void v20[3] = v34;
    }
    v20[1] = &v21[v31];
    if (v18) {
      memcpy(v21, *((const void **)this + 1591), v18);
    }
    *((void *)this + 1591) = v21;
    LODWORD(v18) = *((_DWORD *)this + 3185);
    unint64_t v19 = v21;
    unsigned int v17 = *((_DWORD *)this + 3184);
    goto LABEL_40;
  }
  return 1;
}

BOOL anonymous namespace'::Remangler::mangleStandardSubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::Node *a2)
{
  BOOL v3 = 0;
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (v4 <= 0xB3)
  {
    if (v4 != 24 && v4 != 61) {
      return v3;
    }
LABEL_7:
    int v5 = *((unsigned __int8 *)a2 + 18);
    int v6 = a2;
    if ((v5 - 1) >= 2)
    {
      if (v5 != 5 || !*((_DWORD *)a2 + 2))
      {
        int v7 = 0;
LABEL_13:
        if (*((_WORD *)v7 + 8) != 153 || v7[1] != 5) {
          return 0;
        }
        unint64_t v8 = (int *)*v7;
        int v9 = *v8;
        int v10 = *((unsigned __int8 *)v8 + 4);
        if (v9 != 1718187859 || v10 != 116) {
          return 0;
        }
        if (v5 == 5)
        {
          if (*(_WORD *)(*(void *)(*(void *)a2 + 8) + 16) == 101)
          {
            a2 = *(swift::Demangle::Node **)a2;
LABEL_25:
            swift::Mangle::getStandardTypeSubst(**((void ***)a2 + 1), *(void *)(*((void *)a2 + 1) + 8), 1, (uint64_t)&v25);
            BOOL v3 = v27 != 0;
            if (!v27
            {
              return v3;
            }
            unsigned int v13 = *((_DWORD *)this + 3184);
            size_t v14 = *((unsigned int *)this + 3185);
            unint64_t v15 = (char *)*((void *)this + 1591);
            if (v13 < v14)
            {
LABEL_44:
              *((_DWORD *)this + 3184) = v13 + 1;
              v15[v13] = 83;
              swift::Demangle::CharVector::append((char **)this + 1591, v25, v26, *((void **)this + 1593));
              return v3;
            }
            uint64_t v16 = (void *)*((void *)this + 1593);
            unsigned int v17 = (char *)v16[1];
            if (&v15[v14] == v17)
            {
              unint64_t v19 = (unint64_t)&v15[v14 + 1];
              unint64_t v18 = v16[2];
              if (v19 <= v18)
              {
                v16[1] = v19;
                LODWORD(v20) = 1;
LABEL_43:
                *((_DWORD *)this + 3185) = v14 + v20;
                goto LABEL_44;
              }
            }
            else
            {
              unint64_t v18 = v16[2];
            }
            if ((2 * v14) <= 4) {
              uint64_t v20 = 4;
            }
            else {
              uint64_t v20 = (2 * v14);
            }
            size_t v21 = v20 + v14;
            if (!v17 || (unint64_t)&v17[v21] > v18)
            {
              unint64_t v22 = 2 * v16[4];
              if (v22 <= v21 + 1) {
                unint64_t v22 = v21 + 1;
              }
              v16[4] = v22;
              unint64_t v23 = v22 + 8;
              uint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
              *uint64_t v24 = v16[3];
              unsigned int v17 = (char *)(v24 + 1);
              v16[2] = (char *)v24 + v23;
              void v16[3] = v24;
            }
            v16[1] = &v17[v21];
            if (v14) {
              memcpy(v17, *((const void **)this + 1591), v14);
            }
            *((void *)this + 1591) = v17;
            LODWORD(v14) = *((_DWORD *)this + 3185);
            unint64_t v15 = v17;
            unsigned int v13 = *((_DWORD *)this + 3184);
            goto LABEL_43;
          }
        }
        else if (*(_WORD *)(*((void *)a2 + 1) + 16) == 101)
        {
          goto LABEL_25;
        }
        return 0;
      }
      int v6 = *(swift::Demangle::Node **)a2;
    }
    int v7 = *(uint64_t **)v6;
    goto LABEL_13;
  }
  if (v4 == 219 || v4 == 180) {
    goto LABEL_7;
  }
  return v3;
}

char *anonymous namespace'::Remangler::mangleIndex(char *this, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)this;
  BOOL v3 = (const void **)(this + 12728);
  if (a2) {
    this = (char *)swift::Demangle::CharVector::append((unsigned int *)this + 3182, a2 - 1, *((swift::Demangle::NodeFactory **)this + 1593));
  }
  unsigned int v4 = v2[3184];
  size_t v5 = v2[3185];
  int v6 = (char *)*((void *)v2 + 1591);
  if (v4 >= v5)
  {
    int v7 = (void *)*((void *)v2 + 1593);
    unint64_t v8 = (char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_21:
        v2[3185] = v5 + v11;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v9 = v7[2];
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2 * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (char *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      uint64_t v16 = &this[v15];
      *(void *)this = v7[3];
      int v6 = this + 8;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if (v5) {
      this = (char *)memcpy(v6, *v3, v5);
    }
    *((void *)v2 + 1591) = v6;
    LODWORD(v5) = v2[3185];
    unsigned int v4 = v2[3184];
    goto LABEL_21;
  }
LABEL_22:
  v2[3184] = v4 + 1;
  v6[v4] = 95;
  return this;
}

uint64_t swift::Mangle::SubstitutionMerging::tryMergeSubst<anonymous namespace'::Remangler>(unint64_t *a1, uint64_t a2, void *__s2, size_t __n, int a5)
{
  char v5 = a5;
  unint64_t v8 = *(unsigned int *)(a2 + 12736);
  unint64_t v9 = a1[2];
  if (v9 - 1 > 0x7FE) {
    goto LABEL_24;
  }
  unint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 + *a1 != v8 || *((unsigned __int8 *)a1 + 24) != a5) {
    goto LABEL_24;
  }
  unint64_t v14 = (unsigned int *)(a2 + 12728);
  unint64_t v15 = *(char **)(a2 + 12728);
  unint64_t v16 = v8 - v10;
  if (v8 < v8 - v10) {
    unint64_t v16 = *(unsigned int *)(a2 + 12736);
  }
  if (v8 <= v10) {
    unint64_t v16 = 0;
  }
  unint64_t v17 = v8 - v16;
  if (v8 == v16)
  {
    if (!__n) {
      goto LABEL_29;
    }
    size_t v22 = 0;
    size_t v21 = &v15[v8];
  }
  else
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v15[v16];
    while (v19[v18] - 48 <= 9)
    {
      if (v17 == ++v18)
      {
        unint64_t v18 = -1;
        break;
      }
    }
    if (v17 >= v18) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v17;
    }
    size_t v21 = &v19[v20];
    size_t v22 = v17 - v20;
    if (v17 - v20 == __n)
    {
      if (v17 <= v18) {
        goto LABEL_29;
      }
      *(void *)size_t v43 = a2 + 12728;
      int v23 = memcmp(v21, __s2, __n);
      if (v23 && (v5 & 1) == 0)
      {
        size_t v22 = __n;
        unint64_t v14 = *(unsigned int **)v43;
        goto LABEL_25;
      }
      unint64_t v14 = *(unsigned int **)v43;
      if (!v23)
      {
LABEL_29:
        a1[2] = v9 + 1;
        *(_DWORD *)(a2 + 12736) = v11;
        size_t v31 = (char **)v14;
        swift::Demangle::CharVector::append(v14, v9 + 1, *(swift::Demangle::NodeFactory **)(a2 + 12744));
        swift::Demangle::CharVector::append(v31, __s2, __n, *(void **)(a2 + 12744));
        a1[1] = *(unsigned int *)(a2 + 12736) - *a1;
        return 1;
      }
LABEL_24:
      uint64_t result = 0;
      *a1 = v8 + 1;
      a1[1] = __n;
      a1[2] = 1;
      *((unsigned char *)a1 + 24) = v5;
      return result;
    }
  }
  if (a5) {
    goto LABEL_24;
  }
LABEL_25:
  *a1 = v8;
  a1[2] = 1;
  unsigned int v25 = v8 - 1;
  *(_DWORD *)(a2 + 12736) = v8 - 1;
  char v26 = v21[v22 - 1] + 32;
  size_t v27 = *(unsigned int *)(a2 + 12740);
  if (v25 >= v27)
  {
    unint64_t v28 = *(void **)(a2 + 12744);
    unint64_t v29 = (char *)v28[1];
    if (&v15[v27] == v29)
    {
      unint64_t v32 = (unint64_t)&v15[v27 + 1];
      unint64_t v30 = v28[2];
      if (v32 <= v30)
      {
        v28[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *(_DWORD *)(a2 + 12740) = v27 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v30 = v28[2];
    }
    if ((2 * v27) <= 4) {
      uint64_t v33 = 4;
    }
    else {
      uint64_t v33 = (2 * v27);
    }
    size_t v34 = v33 + v27;
    if (!v29 || (unint64_t)&v29[v34] > v30)
    {
      unint64_t v35 = 2 * v28[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      v28[4] = v35;
      unint64_t v36 = v35 + 8;
      int v44 = v33;
      char v37 = v26;
      unint64_t v38 = v14;
      unint64_t v39 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      unint64_t v14 = v38;
      char v26 = v37;
      LODWORD(v33) = v44;
      unint64_t v40 = (char *)v39 + v36;
      *unint64_t v39 = v28[3];
      unint64_t v29 = (char *)(v39 + 1);
      v28[2] = v40;
      v28[3] = v39;
    }
    v28[1] = &v29[v34];
    if (v27)
    {
      size_t v41 = v27;
      uint64_t v42 = v14;
      memcpy(v29, *(const void **)v14, v41);
      unint64_t v14 = v42;
    }
    *(void *)(a2 + 12728) = v29;
    LODWORD(v27) = *(_DWORD *)(a2 + 12740);
    unint64_t v15 = v29;
    unsigned int v25 = *(_DWORD *)(a2 + 12736);
    goto LABEL_43;
  }
LABEL_44:
  *(_DWORD *)(a2 + 12736) = v25 + 1;
  v15[v25] = v26;
  swift::Demangle::CharVector::append((char **)v14, __s2, __n, *(void **)(a2 + 12744));
  uint64_t result = 1;
  a1[1] = 1;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleChildNodesReversed@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = (_anonymous_namespace_::Remangler *)this;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2;
LABEL_6:
      for (uint64_t i = v8 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleAnyNominalType@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x401)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = a2;
    int v6 = 542;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v6;
    return this;
  }
  uint64_t v8 = this;
  this = swift::Demangle::isSpecialized(a2, a2);
  if (!this)
  {
    unsigned int v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 > 0xDA)
    {
      switch(v9)
      {
        case 0xEAu:
          unint64_t v10 = "a";
          break;
        case 0xE9u:
          unint64_t v19 = (swift::Demangle::Node *)(*(uint64_t (**)(void, void, void))(v8 + 12824))(*(void *)(v8 + 12832), 0, *(void *)a2);
        case 0xDBu:
          unint64_t v10 = "V";
          break;
        default:
          goto LABEL_37;
      }
    }
    else
    {
      switch(v9)
      {
        case 0x18u:
          unint64_t v10 = "C";
          break;
        case 0x3Du:
          unint64_t v10 = "O";
          break;
        case 0xA7u:
          unint64_t v10 = "XY";
          uint64_t v11 = a4;
          uint64_t v12 = v8;
          BOOL v13 = (swift::Demangle::Node **)a2;
          size_t v14 = 2;
LABEL_31:
        default:
LABEL_37:
          *(_DWORD *)a4 = 5;
          *(void *)(a4 + 8) = a2;
          int v6 = 584;
          goto LABEL_3;
      }
    }
    uint64_t v11 = a4;
    uint64_t v12 = v8;
    BOOL v13 = (swift::Demangle::Node **)a2;
    size_t v14 = 1;
    goto LABEL_31;
  }
  v28[0] = 0;
  v28[1] = 0;
  char v29 = 0;
  if (this)
  {
LABEL_7:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  this = swift::Demangle::getUnspecialized((unint64_t)a2, *(swift::Demangle::Node **)v8, (uint64_t)&v25);
  if (v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return this;
  }
  unsigned int v15 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3) {
        goto LABEL_52;
      }
      unint64_t v16 = *(uint64_t **)(*(void *)a2 + 16);
      uint64_t v17 = *((unsigned __int8 *)v16 + 18);
      if (v17 != 1)
      {
        if (v17 != 5)
        {
          if (v17 == 2)
          {
            uint64_t v17 = 2;
            unint64_t v18 = 0;
            goto LABEL_40;
          }
          goto LABEL_52;
        }
        uint64_t v17 = *((unsigned int *)v16 + 2);
        if (!v17)
        {
LABEL_52:
          swift::Demangle::RemanglerBuffer::operator<<((char **)(v8 + 12728), 71);
          this = (uint64_t)swift::Demangle::RemanglerBase::addSubstitution((char *)v8, (const swift::Demangle::SubstitutionEntry *)v28);
          goto LABEL_7;
        }
      }
      unint64_t v18 = 0;
      while (1)
      {
LABEL_40:
        unint64_t v20 = *((unsigned __int8 *)v16 + 18);
        unsigned int v21 = v20 - 1;
        if (v20 != 1)
        {
          if (v20 == 5)
          {
            unint64_t v20 = *((unsigned int *)v16 + 2);
          }
          else
          {
            if (v20 != 2) {
              goto LABEL_49;
            }
            unint64_t v20 = 2;
          }
        }
        if (v20 > v18)
        {
          size_t v22 = v16;
          if (v21 >= 2) {
            size_t v22 = (uint64_t *)*v16;
          }
          int v23 = (swift::Demangle::Node *)v22[v18];
          goto LABEL_50;
        }
LABEL_49:
        int v23 = 0;
LABEL_50:
        if (*(_DWORD *)a4) {
          return this;
        }
        if (v17 == ++v18) {
          goto LABEL_52;
        }
      }
    }
  }
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleGenericArgs@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, BOOL a5@<W4>, uint64_t a6@<X8>)
{
  int v7 = 0;
  int v8 = 0;
  int v9 = *((unsigned __int16 *)a2 + 8);
  uint64_t v12 = a2;
  uint64_t v13 = (uint64_t)this;
  int v14 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0:
    case 0x1D:
    case 0x21:
    case 0x32:
    case 0x33:
    case 0x46:
    case 0x4C:
    case 0x62:
    case 0x75:
    case 0x7D:
    case 0x98:
    case 0xB2:
    case 0xB3:
    case 0xCC:
    case 0xD7:
    case 0xDA:
    case 0xDC:
    case 0xFA:
    case 0xFB:
    case 0xFE:
    case 0x101:
      if (!a5) {
        goto LABEL_26;
      }
      int v15 = *((unsigned __int8 *)a2 + 18);
      unint64_t v16 = (swift::Demangle::Node **)a2;
      if ((v15 - 1) < 2) {
        goto LABEL_7;
      }
      if (v15 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v16 = *(swift::Demangle::Node ***)a2;
LABEL_7:
        uint64_t v17 = *v16;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (!*(_DWORD *)a6)
      {
        this = (unsigned int *)swift::Demangle::nodeConsumesGenericArgs(v12, v24);
        if (this) {
          goto LABEL_38;
        }
        goto LABEL_26;
      }
      return this;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      goto LABEL_75;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      BOOL v18 = v9 == 18 || a5;
      int v19 = *((unsigned __int8 *)a2 + 18);
      unint64_t v20 = a2;
      if ((v19 - 1) < 2) {
        goto LABEL_15;
      }
      if (v19 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v20 = *(swift::Demangle::Node **)a2;
LABEL_15:
        uint64_t v21 = *(void *)v20;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (*(_WORD *)(v21 + 16) != 232)
      {
        int v14 = 653;
        goto LABEL_35;
      }
      int v25 = *(unsigned __int8 *)(v21 + 18);
      if ((v25 - 1) < 2) {
        goto LABEL_33;
      }
      if (v25 == 5 && *(_DWORD *)(v21 + 8))
      {
        uint64_t v21 = *(void *)v21;
LABEL_33:
        uint64_t v26 = *(void *)v21;
      }
      else
      {
        uint64_t v26 = 0;
      }
      if (*(_WORD *)(v26 + 16) != 233) {
        goto LABEL_78;
      }
      uint64_t v34 = (*((uint64_t (**)(void, void, void))this + 1603))(*((void *)this + 1604), 0, *(void *)v26);
      int v35 = *(unsigned __int8 *)(v34 + 18);
      if ((v35 - 1) < 2) {
        goto LABEL_47;
      }
      if (v35 == 5 && *(_DWORD *)(v34 + 8))
      {
        uint64_t v34 = *(void *)v34;
LABEL_47:
        uint64_t v26 = *(void *)v34;
      }
      else
      {
        uint64_t v26 = 0;
      }
LABEL_78:
      int v54 = *(unsigned __int8 *)(v26 + 18);
      if ((v54 - 1) < 2) {
        goto LABEL_82;
      }
      if (v54 == 5 && *(_DWORD *)(v26 + 8))
      {
        uint64_t v26 = *(void *)v26;
LABEL_82:
        uint64_t v55 = *(swift::Demangle::Node **)v26;
      }
      else
      {
        uint64_t v55 = 0;
      }
      unsigned int v56 = a4 + 1;
      if (*(_DWORD *)a6) {
        return this;
      }
      char v57 = *a3;
      unsigned int v58 = *(_DWORD *)(v13 + 12736);
      size_t v59 = *(unsigned int *)(v13 + 12740);
      unsigned int v60 = *(char **)(v13 + 12728);
      if (v58 < v59) {
        goto LABEL_125;
      }
      size_t v61 = *(void **)(v13 + 12744);
      uint64_t v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        unint64_t v71 = (unint64_t)&v60[v59 + 1];
        unint64_t v63 = v61[2];
        if (v71 <= v63)
        {
          v61[1] = v71;
          LODWORD(v72) = 1;
          goto LABEL_124;
        }
      }
      else
      {
        unint64_t v63 = v61[2];
      }
      char v96 = *a3;
      if ((2 * v59) <= 4) {
        uint64_t v72 = 4;
      }
      else {
        uint64_t v72 = (2 * v59);
      }
      size_t v73 = v72 + v59;
      if (!v62 || (unint64_t)&v62[v73] > v63)
      {
        unint64_t v74 = 2 * v61[4];
        if (v74 <= v73 + 1) {
          unint64_t v74 = v73 + 1;
        }
        v61[4] = v74;
        unint64_t v75 = v74 + 8;
        this = (unsigned int *)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
        int v76 = (char *)this + v75;
        *(void *)this = v61[3];
        uint64_t v62 = (char *)(this + 2);
        v61[2] = v76;
        v61[3] = this;
      }
      v61[1] = &v62[v73];
      if (v59) {
        this = (unsigned int *)memcpy(v62, *(const void **)(v13 + 12728), v59);
      }
      *(void *)(v13 + 12728) = v62;
      LODWORD(v59) = *(_DWORD *)(v13 + 12740);
      unsigned int v60 = v62;
      unsigned int v58 = *(_DWORD *)(v13 + 12736);
      char v57 = v96;
LABEL_124:
      *(_DWORD *)(v13 + 12740) = v59 + v72;
LABEL_125:
      *(_DWORD *)(v13 + 12736) = v58 + 1;
      v60[v58] = v57;
      *a3 = 95;
      int v77 = *((unsigned __int8 *)v12 + 18);
      if (v77 == 2) {
        goto LABEL_129;
      }
      if (v77 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::Node **)v12;
LABEL_129:
        uint64_t v78 = *((void *)v12 + 1);
      }
      else
      {
        uint64_t v78 = 0;
      }
      int v79 = *(unsigned __int8 *)(v78 + 18);
      int v80 = (swift::Demangle::Node **)v78;
      if ((v79 - 1) < 2) {
        goto LABEL_135;
      }
      if (v79 == 5)
      {
        size_t v81 = *(swift::Demangle::Node **)v78;
        int v80 = *(swift::Demangle::Node ***)v78;
LABEL_139:
        char v82 = (swift::Demangle::Node **)((char *)v81 + 8 * *(unsigned int *)(v78 + 8));
        goto LABEL_143;
      }
      int v80 = 0;
LABEL_135:
      switch(v79)
      {
        case 1:
          char v82 = (swift::Demangle::Node **)(v78 + 8);
          break;
        case 2:
          char v82 = (swift::Demangle::Node **)(v78 + 16);
          break;
        case 5:
          size_t v81 = *(swift::Demangle::Node **)v78;
          goto LABEL_139;
        default:
          char v82 = 0;
          break;
      }
LABEL_143:
      if (v80 == v82) {
        goto LABEL_26;
      }
      while (1)
      {
        if (*(_DWORD *)a6) {
          return this;
        }
        int v8 = 0;
        int v7 = 0;
        int v14 = 0;
        if (++v80 == v82) {
          goto LABEL_75;
        }
      }
    case 0x13:
      int v36 = *((unsigned __int8 *)a2 + 18);
      char v37 = a2;
      if ((v36 - 1) < 2) {
        goto LABEL_52;
      }
      if (v36 == 5 && *((_DWORD *)a2 + 2))
      {
        char v37 = *(swift::Demangle::Node **)a2;
LABEL_52:
        unint64_t v38 = *(swift::Demangle::Node **)v37;
      }
      else
      {
        unint64_t v38 = 0;
      }
      int v64 = *((unsigned __int16 *)v38 + 8);
      if (v64 != 76 && v64 != 29)
      {
        int v14 = 682;
LABEL_35:
        int v8 = 1;
        int v7 = a2;
        goto LABEL_75;
      }
      int v66 = *((unsigned __int8 *)v38 + 18);
      if ((v66 - 1) < 2) {
        goto LABEL_104;
      }
      if (v66 == 5 && *((_DWORD *)v38 + 2))
      {
        unint64_t v38 = *(swift::Demangle::Node **)v38;
LABEL_104:
        uint64_t v67 = *(swift::Demangle::Node **)v38;
      }
      else
      {
        uint64_t v67 = 0;
      }
      unsigned int v68 = a4 + 1;
      if (*(_DWORD *)a6) {
        return this;
      }
      swift::Demangle::RemanglerBuffer::operator<<((char **)(v13 + 12728), *a3);
      *a3 = 95;
      int v69 = *((unsigned __int8 *)v12 + 18);
      if (v69 == 2) {
        goto LABEL_111;
      }
      if (v69 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::Node **)v12;
LABEL_111:
        unint64_t v70 = (swift::Demangle::Node **)*((void *)v12 + 1);
      }
      else
      {
        unint64_t v70 = 0;
      }
LABEL_91:
      if (*(_DWORD *)a6) {
        return this;
      }
      goto LABEL_26;
    case 0x18:
    case 0x3D:
    case 0xB4:
    case 0xDB:
    case 0xEA:
      if (v9 == 234) {
        LOBYTE(a5) = 1;
      }
      int v22 = *((unsigned __int8 *)a2 + 18);
      if ((v22 - 1) < 2) {
        goto LABEL_22;
      }
      if (v22 == 5 && *((_DWORD *)a2 + 2))
      {
        uint64_t v12 = *(swift::Demangle::Node **)a2;
LABEL_22:
        int v23 = *(swift::Demangle::Node **)v12;
      }
      else
      {
        int v23 = 0;
      }
      if (*(_DWORD *)a6) {
        return this;
      }
LABEL_38:
      char v27 = *a3;
      unsigned int v28 = *(_DWORD *)(v13 + 12736);
      size_t v29 = *(unsigned int *)(v13 + 12740);
      unint64_t v30 = *(char **)(v13 + 12728);
      if (v28 < v29) {
        goto LABEL_74;
      }
      size_t v31 = *(void **)(v13 + 12744);
      unint64_t v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v48 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v48 <= v33)
        {
          v31[1] = v48;
          LODWORD(v49) = 1;
          goto LABEL_73;
        }
      }
      else
      {
        unint64_t v33 = v31[2];
      }
      if ((2 * v29) <= 4) {
        uint64_t v49 = 4;
      }
      else {
        uint64_t v49 = (2 * v29);
      }
      size_t v50 = v49 + v29;
      if (!v32 || (unint64_t)&v32[v50] > v33)
      {
        unint64_t v51 = 2 * v31[4];
        if (v51 <= v50 + 1) {
          unint64_t v51 = v50 + 1;
        }
        v31[4] = v51;
        unint64_t v52 = v51 + 8;
        this = (unsigned int *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unint64_t v53 = (char *)this + v52;
        *(void *)this = v31[3];
        unint64_t v32 = (char *)(this + 2);
        v31[2] = v53;
        v31[3] = this;
      }
      v31[1] = &v32[v50];
      if (v29) {
        this = (unsigned int *)memcpy(v32, *(const void **)(v13 + 12728), v29);
      }
      *(void *)(v13 + 12728) = v32;
      LODWORD(v29) = *(_DWORD *)(v13 + 12740);
      unint64_t v30 = v32;
      unsigned int v28 = *(_DWORD *)(v13 + 12736);
LABEL_73:
      *(_DWORD *)(v13 + 12740) = v29 + v49;
LABEL_74:
      int v8 = 0;
      int v7 = 0;
      int v14 = 0;
      *(_DWORD *)(v13 + 12736) = v28 + 1;
      v30[v28] = v27;
      *a3 = 95;
      goto LABEL_75;
    case 0x47:
      int v39 = *((unsigned __int8 *)a2 + 18);
      if (v39 == 2) {
        goto LABEL_57;
      }
      if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::Node **)a2;
LABEL_57:
        unint64_t v40 = (swift::Demangle::Node *)*((void *)v12 + 1);
      }
      else
      {
        unint64_t v40 = 0;
      }
      goto LABEL_91;
    case 0x53:
      char v41 = *a3;
      unsigned int v42 = this[3184];
      size_t v43 = this[3185];
      int v44 = (char *)*((void *)this + 1591);
      if (v42 < v43) {
        goto LABEL_163;
      }
      unint64_t v45 = (void *)*((void *)this + 1593);
      unsigned int v46 = (char *)v45[1];
      if (&v44[v43] == v46)
      {
        unint64_t v83 = (unint64_t)&v44[v43 + 1];
        unint64_t v47 = v45[2];
        if (v83 <= v47)
        {
          v45[1] = v83;
          LODWORD(v84) = 1;
          goto LABEL_162;
        }
      }
      else
      {
        unint64_t v47 = v45[2];
      }
      char v97 = *a3;
      if ((2 * v43) <= 4) {
        uint64_t v84 = 4;
      }
      else {
        uint64_t v84 = (2 * v43);
      }
      size_t v85 = v84 + v43;
      if (v46) {
        BOOL v86 = (unint64_t)&v46[v84 + v43] > v47;
      }
      else {
        BOOL v86 = 1;
      }
      int v44 = (char *)v45[1];
      if (v86)
      {
        unint64_t v87 = 2 * v45[4];
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        v45[4] = v87;
        unint64_t v88 = v87 + 8;
        this = (unsigned int *)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        size_t v89 = (char *)this + v88;
        *(void *)this = v45[3];
        int v44 = (char *)(this + 2);
        v45[2] = v89;
        v45[3] = this;
      }
      v45[1] = &v44[v85];
      if (v43) {
        this = (unsigned int *)memcpy(v44, *(const void **)(v13 + 12728), v43);
      }
      *(void *)(v13 + 12728) = v44;
      LODWORD(v43) = *(_DWORD *)(v13 + 12740);
      unsigned int v42 = *(_DWORD *)(v13 + 12736);
      char v41 = v97;
LABEL_162:
      *(_DWORD *)(v13 + 12740) = v43 + v84;
LABEL_163:
      *(_DWORD *)(v13 + 12736) = v42 + 1;
      v44[v42] = v41;
      *a3 = 95;
      int v90 = *((unsigned __int8 *)v12 + 18);
      if (v90 == 2) {
        goto LABEL_167;
      }
      if (v90 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::Node **)v12;
LABEL_167:
        uint64_t v91 = *((void *)v12 + 1);
      }
      else
      {
        uint64_t v91 = 0;
      }
      int v92 = *(unsigned __int8 *)(v91 + 18);
      unint64_t v93 = (swift::Demangle::Node **)v91;
      if ((v92 - 1) < 2) {
        goto LABEL_173;
      }
      if (v92 == 5)
      {
        uint64_t v94 = *(swift::Demangle::Node **)v91;
        unint64_t v93 = *(swift::Demangle::Node ***)v91;
LABEL_177:
        size_t v95 = (swift::Demangle::Node **)((char *)v94 + 8 * *(unsigned int *)(v91 + 8));
        goto LABEL_181;
      }
      unint64_t v93 = 0;
LABEL_173:
      switch(v92)
      {
        case 1:
          size_t v95 = (swift::Demangle::Node **)(v91 + 8);
          break;
        case 2:
          size_t v95 = (swift::Demangle::Node **)(v91 + 16);
          break;
        case 5:
          uint64_t v94 = *(swift::Demangle::Node **)v91;
          goto LABEL_177;
        default:
          size_t v95 = 0;
          break;
      }
LABEL_181:
      if (v93 == v95)
      {
LABEL_26:
        int v8 = 0;
        int v7 = 0;
        int v14 = 0;
LABEL_75:
        *(_DWORD *)a6 = v8;
        *(void *)(a6 + 8) = v7;
        *(_DWORD *)(a6 + 16) = v14;
      }
      else
      {
        while (1)
        {
          if (*(_DWORD *)a6) {
            break;
          }
          int v8 = 0;
          int v7 = 0;
          int v14 = 0;
          if (++v93 == v95) {
            goto LABEL_75;
          }
        }
      }
      return this;
    default:
      int v14 = 0;
      goto LABEL_75;
  }
}

uint64_t anonymous namespace'::Remangler::mangleAnyGenericType@<X0>(uint64_t a1@<X0>, swift::Demangle::Node **a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  long long v21 = 0uLL;
  LOBYTE(v22) = 0;
  if (result) {
    goto LABEL_23;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  int v14 = a2;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      int v15 = *a2;
      int v14 = (swift::Demangle::Node **)*a2;
      goto LABEL_10;
    }
    int v14 = 0;
  }
  if (v13 == 1)
  {
    unint64_t v16 = a2 + 1;
    if (v14 != v16) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (v13 == 2)
  {
    unint64_t v16 = a2 + 2;
    if (v14 != v16) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
    unint64_t v18 = *(void *)(a1 + 12680);
    if (v18 > 0xF)
    {
      int v20 = *(_DWORD *)(a1 + 12712) + 16;
      long long v23 = v21;
      uint64_t v24 = v22;
      int v25 = v20;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>(a1 + 12688, (uint64_t)&v23, &v23);
    }
    else
    {
      *(void *)(a1 + 12680) = v18 + 1;
      uint64_t v19 = a1 + 24 * v18 + 12296;
      *(_OWORD *)uint64_t v19 = v21;
      *(unsigned char *)(v19 + 16) = v22;
    }
LABEL_23:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  if (v13 != 5)
  {
    unint64_t v16 = 0;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  int v15 = *a2;
LABEL_10:
  unint64_t v16 = (swift::Demangle::Node **)((char *)v15 + 8 * *((unsigned int *)a2 + 2));
  if (v14 == v16) {
    goto LABEL_20;
  }
LABEL_17:
  unsigned int v17 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v14 == v16) {
      goto LABEL_20;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSingleChildNode@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1) {
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::Node **)a2;
  }
  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 321;
  return this;
}

uint64_t llvm::StringRef::consume_front(const void **a1, const void *a2, size_t a3)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < a3) {
    return 0;
  }
  int v6 = (char *)*a1;
  if (a3)
  {
    if (memcmp(*a1, a2, a3)) {
      return 0;
    }
  }
  if (v3 >= a3) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

uint64_t anonymous namespace'::Remangler::mangleConstrainedType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v5 = a2;
  int v6 = this;
  if (*((_WORD *)a2 + 8) != 232) {
    goto LABEL_8;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      char v5 = 0;
      goto LABEL_8;
    }
    char v5 = *(swift::Demangle::Node **)a2;
  }
  char v5 = *(swift::Demangle::Node **)v5;
LABEL_8:
  long long v42 = 0uLL;
  LOBYTE(v43) = 0;
  if (result)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = -1;
    *(void *)(a4 + 32) = 0;
    return result;
  }
  int v38 = a3;
  uint64_t v39 = a4;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  while (1)
  {
    int v14 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 45) {
      break;
    }
    int v15 = *((unsigned __int8 *)v5 + 18);
    unint64_t v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5 || *((_DWORD *)v5 + 2) < 2u)
      {
        uint64_t v17 = 0;
        if (v11 < v10) {
          goto LABEL_40;
        }
LABEL_22:
        unint64_t v18 = *(void **)v6;
        uint64_t v19 = &v12[8 * v10];
        int v20 = *(char **)(*(void *)v6 + 8);
        if (v19 != v20)
        {
          unint64_t v21 = v18[2];
          goto LABEL_25;
        }
        uint64_t v22 = v19 + 8;
        unint64_t v21 = v18[2];
        if ((unint64_t)v22 <= v21)
        {
          v18[1] = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          long long __src = v12;
          if (2 * v10 <= 4) {
            uint64_t v23 = 4;
          }
          else {
            uint64_t v23 = 2 * v10;
          }
          uint64_t v24 = 8 * (v23 + v10);
          int v25 = (char *)((unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8);
          v18[1] = v25;
          if (v25) {
            BOOL v26 = (unint64_t)&v25[v24] > v21;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            unint64_t v27 = 2 * v18[4];
            if (v27 <= v24 + 8) {
              unint64_t v27 = v24 + 8;
            }
            v18[4] = v27;
            unsigned int v40 = v11;
            unsigned int v28 = v6;
            unint64_t v29 = v27 + 8;
            uint64_t result = (uint64_t)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
            *(void *)uint64_t result = v18[3];
            int v25 = (char *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v30 = result + v29;
            int v6 = v28;
            unsigned int v11 = v40;
            v18[2] = v30;
            void v18[3] = result;
          }
          v18[1] = &v25[v24];
          if (v10) {
            uint64_t result = (uint64_t)memcpy(v25, __src, 8 * v10);
          }
          uint64_t v12 = v25;
        }
        v10 += v23;
        int v15 = *((unsigned __int8 *)v5 + 18);
        goto LABEL_40;
      }
      unint64_t v16 = *(swift::Demangle::Node **)v5;
    }
    uint64_t v17 = *((void *)v16 + 1);
    if (v11 >= v10) {
      goto LABEL_22;
    }
LABEL_40:
    *(void *)&v12[8 * v11] = v17;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v5 + 2))
      {
        int v13 = 0;
        goto LABEL_46;
      }
      char v5 = *(swift::Demangle::Node **)v5;
    }
    int v13 = *(swift::Demangle::Node **)v5;
LABEL_46:
    int v31 = *((unsigned __int8 *)v13 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_13:
      char v5 = *(swift::Demangle::Node **)v13;
      ++v11;
    }
    else
    {
      if (v31 == 5 && *((_DWORD *)v13 + 2))
      {
        int v13 = *(swift::Demangle::Node **)v13;
        goto LABEL_13;
      }
      char v5 = 0;
      ++v11;
    }
  }
  if (v14 != 38 && v14 != 85)
  {
    if (!v44)
    {
      if (!v11)
      {
        *(_DWORD *)uint64_t v39 = 0;
        *(void *)(v39 + 8) = 0;
        *(_DWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = -1;
        *(void *)(v39 + 32) = 0;
        return result;
      }
      char v5 = 0;
LABEL_53:
      if (!v44)
      {
        if (v11 == 1) {
          unint64_t v32 = (char *)&unk_215276E75;
        }
        else {
          unint64_t v32 = "_";
        }
        uint64_t result = (uint64_t)swift::Demangle::CharVector::append((char **)v6 + 1591, v32, v11 != 1, *((void **)v6 + 1593));
        if (v11 < 2)
        {
LABEL_61:
          unint64_t v35 = *((void *)v6 + 1585);
          if (v35 > 0xF)
          {
            int v37 = *((_DWORD *)v6 + 3178) + 16;
            long long v44 = v42;
            uint64_t v45 = v43;
            int v46 = v37;
            uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)v6 + 12688, (uint64_t)&v44, &v44);
          }
          else
          {
            *((void *)v6 + 1585) = v35 + 1;
            uint64_t v36 = (uint64_t)v6 + 24 * v35 + 12296;
            *(_OWORD *)uint64_t v36 = v42;
            *(unsigned char *)(v36 + 16) = v43;
          }
          goto LABEL_68;
        }
        unsigned int v33 = v11 - 2;
        unsigned int v34 = 2;
        while (1)
        {
          if (v44) {
            break;
          }
          uint64_t result = (uint64_t)swift::Demangle::CharVector::append((char **)v6 + 1591, &unk_215276E75, 0, *((void **)v6 + 1593));
          ++v34;
          --v33;
          if (v34 > v11) {
            goto LABEL_61;
          }
        }
      }
    }
    *(_OWORD *)uint64_t v39 = v44;
    *(void *)(v39 + 16) = v45;
    *(_DWORD *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0;
    return result;
  }
  if (v11) {
    goto LABEL_53;
  }
LABEL_68:
  *(_DWORD *)uint64_t v39 = 0;
  *(void *)(v39 + 8) = 0;
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = v11;
  *(void *)(v39 + 32) = v5;
  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamIndex(char *this, uint64_t **a2, char *__s, char a4)
{
  uint64_t v4 = (uint64_t)this;
  if (*((_WORD *)a2 + 8) == 85)
  {
    unsigned int v5 = *((_DWORD *)this + 3184);
    size_t v6 = *((unsigned int *)this + 3185);
    int v7 = (unsigned char *)*((void *)this + 1591);
    if (v5 < v6)
    {
LABEL_37:
      *(_DWORD *)(v4 + 12736) = v5 + 1;
      v7[v5] = 115;
      return this;
    }
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (unsigned char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v27 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v27 <= v10)
      {
        v8[1] = v27;
        LODWORD(v28) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v6 + v28;
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v6);
    }
    size_t v29 = v28 + v6;
    if (v9) {
      BOOL v30 = (unint64_t)&v9[v28 + v6] > v10;
    }
    else {
      BOOL v30 = 1;
    }
    int v7 = (unsigned char *)v8[1];
    if (v30)
    {
      unint64_t v31 = 2 * v8[4];
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      v8[4] = v31;
      unint64_t v32 = v31 + 8;
      this = (char *)malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      unsigned int v33 = &this[v32];
      *(void *)this = v8[3];
      int v7 = this + 8;
      v8[2] = v33;
      void v8[3] = this;
    }
    v8[1] = &v7[v29];
    if (v6) {
      this = (char *)memcpy(v7, *(const void **)(v4 + 12728), v6);
    }
    *(void *)(v4 + 12728) = v7;
    LODWORD(v6) = *(_DWORD *)(v4 + 12740);
    unsigned int v5 = *(_DWORD *)(v4 + 12736);
    goto LABEL_36;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5) {
      int v14 = (swift::Demangle::Node *)*a2;
    }
    else {
      int v14 = (swift::Demangle::Node *)a2;
    }
    a2 = (uint64_t **)*a2;
  }
  else
  {
    int v14 = (swift::Demangle::Node *)a2;
  }
  uint64_t v15 = **a2;
  uint64_t v16 = **((void **)v14 + 1);
  if (!v15)
  {
    uint64_t v19 = (char **)(this + 12728);
    if (v16)
    {
      if (__s) {
        size_t v20 = strlen(__s);
      }
      else {
        size_t v20 = 0;
      }
      swift::Demangle::CharVector::append(v19, __s, v20, *(void **)(v4 + 12744));
      uint64_t v48 = v16 - 1;
      unint64_t v47 = (char *)v4;
      goto LABEL_58;
    }
    unsigned int v34 = *((_DWORD *)this + 3184);
    size_t v35 = *((unsigned int *)this + 3185);
    uint64_t v36 = (char *)*((void *)this + 1591);
    if (v34 < v35)
    {
LABEL_76:
      *(_DWORD *)(v4 + 12736) = v34 + 1;
      v36[v34] = a4;
      return this;
    }
    int v37 = (void *)*((void *)this + 1593);
    int v38 = (char *)v37[1];
    if (&v36[v35] == v38)
    {
      unint64_t v49 = (unint64_t)&v36[v35 + 1];
      unint64_t v39 = v37[2];
      if (v49 <= v39)
      {
        v37[1] = v49;
        LODWORD(v50) = 1;
LABEL_75:
        *(_DWORD *)(v4 + 12740) = v35 + v50;
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v39 = v37[2];
    }
    if ((2 * v35) <= 4) {
      uint64_t v50 = 4;
    }
    else {
      uint64_t v50 = (2 * v35);
    }
    size_t v51 = v50 + v35;
    if (!v38 || (unint64_t)&v38[v51] > v39)
    {
      unint64_t v52 = 2 * v37[4];
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      v37[4] = v52;
      unint64_t v53 = v52 + 8;
      this = (char *)malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
      int v54 = &this[v53];
      *(void *)this = v37[3];
      int v38 = this + 8;
      v37[2] = v54;
      v37[3] = this;
    }
    v37[1] = &v38[v51];
    if (v35) {
      this = (char *)memcpy(v38, *v19, v35);
    }
    *(void *)(v4 + 12728) = v38;
    LODWORD(v35) = *(_DWORD *)(v4 + 12740);
    uint64_t v36 = v38;
    unsigned int v34 = *(_DWORD *)(v4 + 12736);
    goto LABEL_75;
  }
  uint64_t v17 = (char **)(this + 12728);
  if (__s) {
    size_t v18 = strlen(__s);
  }
  else {
    size_t v18 = 0;
  }
  swift::Demangle::CharVector::append(v17, __s, v18, *(void **)(v4 + 12744));
  unsigned int v21 = *(_DWORD *)(v4 + 12736);
  size_t v22 = *(unsigned int *)(v4 + 12740);
  uint64_t v23 = *(char **)(v4 + 12728);
  if (v21 < v22) {
    goto LABEL_54;
  }
  uint64_t v24 = *(void **)(v4 + 12744);
  int v25 = (char *)v24[1];
  if (&v23[v22] != v25)
  {
    unint64_t v26 = v24[2];
LABEL_42:
    if ((2 * v22) <= 4) {
      uint64_t v41 = 4;
    }
    else {
      uint64_t v41 = (2 * v22);
    }
    size_t v42 = v41 + v22;
    if (!v25 || (unint64_t)&v25[v42] > v26)
    {
      unint64_t v43 = 2 * v24[4];
      if (v43 <= v42 + 1) {
        unint64_t v43 = v42 + 1;
      }
      v24[4] = v43;
      unint64_t v44 = v43 + 8;
      uint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
      int v46 = (char *)v45 + v44;
      *uint64_t v45 = v24[3];
      int v25 = (char *)(v45 + 1);
      void v24[2] = v46;
      void v24[3] = v45;
    }
    v24[1] = &v25[v42];
    if (v22) {
      memcpy(v25, *v17, v22);
    }
    *(void *)(v4 + 12728) = v25;
    LODWORD(v22) = *(_DWORD *)(v4 + 12740);
    uint64_t v23 = v25;
    unsigned int v21 = *(_DWORD *)(v4 + 12736);
    goto LABEL_53;
  }
  unint64_t v40 = (unint64_t)&v23[v22 + 1];
  unint64_t v26 = v24[2];
  if (v40 > v26) {
    goto LABEL_42;
  }
  v24[1] = v40;
  LODWORD(v41) = 1;
LABEL_53:
  *(_DWORD *)(v4 + 12740) = v22 + v41;
LABEL_54:
  *(_DWORD *)(v4 + 12736) = v21 + 1;
  v23[v21] = 100;
  unint64_t v47 = (char *)v4;
  uint64_t v48 = v16;
LABEL_58:
}

uint64_t *anonymous namespace'::Remangler::mangleAbstractStorage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = a2;
  int v9 = result;
  int v11 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v12 = (swift::Demangle::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      int v13 = *(swift::Demangle::Node **)a2;
      uint64_t v12 = *(swift::Demangle::Node ***)a2;
      goto LABEL_9;
    }
    uint64_t v12 = 0;
  }
  if (v11 == 1)
  {
    int v14 = (swift::Demangle::Node **)(a2 + 8);
    if (v12 != (swift::Demangle::Node **)(a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    int v14 = (swift::Demangle::Node **)(a2 + 16);
    if (v12 != (swift::Demangle::Node **)(a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = *(unsigned __int16 *)(v8 + 16);
    if (v16 == 220)
    {
      uint64_t v17 = "i";
    }
    else
    {
      if (v16 != 254)
      {
        int v19 = 712;
        int v18 = 6;
        goto LABEL_25;
      }
      uint64_t v17 = "v";
    }
    swift::Demangle::CharVector::append((char **)v9 + 1591, v17, 1uLL, (void *)v9[1593]);
    uint64_t result = (uint64_t *)swift::Demangle::CharVector::append((char **)v9 + 1591, a3, a4, (void *)v9[1593]);
    int v18 = 0;
    uint64_t v8 = 0;
    int v19 = 0;
LABEL_25:
    *(_DWORD *)a6 = v18;
    *(void *)(a6 + 8) = v8;
    *(_DWORD *)(a6 + 16) = v19;
    return result;
  }
  if (v11 != 5)
  {
    int v14 = 0;
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  int v13 = *(swift::Demangle::Node **)a2;
LABEL_9:
  int v14 = (swift::Demangle::Node **)((char *)v13 + 8 * *(unsigned int *)(a2 + 8));
  if (v12 == v14) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v15 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v12 == v14) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGenericSpecializationNode@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6 = a2;
  uint64_t v7 = (uint64_t)this;
  BOOL v23 = 1;
  int v9 = *((unsigned __int8 *)a2 + 18);
  unint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unint64_t v10 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    unint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 8)) {
        goto LABEL_27;
      }
      break;
    case 2:
      uint64_t v12 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 16)) {
        goto LABEL_27;
      }
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
      {
LABEL_27:
        int v16 = 1706;
        int v17 = 1;
        goto LABEL_28;
      }
      break;
    default:
      uint64_t v12 = 0;
      if (!v10) {
        goto LABEL_27;
      }
      break;
  }
  unsigned int v13 = a4 + 1;
  do
  {
    int v14 = *(swift::Demangle::Node **)v10;
    if (*(_WORD *)(*(void *)v10 + 16) == 94)
    {
      int v15 = *((unsigned __int8 *)v14 + 18);
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)v14 + 2))
        {
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
LABEL_20:
          goto LABEL_21;
        }
        int v14 = *(swift::Demangle::Node **)v14;
      }
      if (*(_DWORD *)a5) {
        return this;
      }
      goto LABEL_20;
    }
LABEL_21:
    unint64_t v10 = (swift::Demangle::Node *)((char *)v10 + 8);
  }
  while (v10 != v12);
  if (v23) {
    goto LABEL_27;
  }
  if (a3) {
    size_t v18 = strlen(a3);
  }
  else {
    size_t v18 = 0;
  }
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)(v7 + 12728), a3, v18, *(void **)(v7 + 12744));
  int v19 = *((unsigned __int8 *)v6 + 18);
  size_t v20 = (swift::Demangle::Node **)v6;
  if ((v19 - 1) >= 2)
  {
    if (v19 == 5)
    {
      unsigned int v21 = *(swift::Demangle::Node ***)v6;
      size_t v20 = *(swift::Demangle::Node ***)v6;
LABEL_41:
      size_t v22 = &v21[*((unsigned int *)v6 + 2)];
      goto LABEL_46;
    }
    size_t v20 = 0;
  }
  switch(v19)
  {
    case 1:
      size_t v22 = (swift::Demangle::Node **)((char *)v6 + 8);
      goto LABEL_46;
    case 2:
      size_t v22 = (swift::Demangle::Node **)((char *)v6 + 16);
      goto LABEL_46;
    case 5:
      unsigned int v21 = *(swift::Demangle::Node ***)v6;
      goto LABEL_41;
  }
  size_t v22 = 0;
LABEL_46:
  while (v20 != v22)
  {
    if (*((_WORD *)*v20 + 8) != 94)
    {
      if (*(_DWORD *)a5) {
        return this;
      }
    }
    ++v20;
  }
  int v17 = 0;
  size_t v6 = 0;
  int v16 = 0;
LABEL_28:
  *(_DWORD *)a5 = v17;
  *(void *)(a5 + 8) = v6;
  *(_DWORD *)(a5 + 16) = v16;
  return this;
}

void anonymous namespace'::Remangler::mangleIdentifierImpl(_anonymous_namespace_::Remangler *this, swift::Demangle::Node *a2, int a3)
{
  memset(&v11, 0, 17);
  {
    if (a3)
    {
      swift::Mangle::translateOperator(*(char **)a2, *((void *)a2 + 1), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
    }
    unint64_t v8 = *((void *)this + 1585);
    if (v8 > 0xF)
    {
      int v10 = *((_DWORD *)this + 3178) + 16;
      std::string __p = v11;
      int v13 = v10;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&__p, &__p);
    }
    else
    {
      *((void *)this + 1585) = v8 + 1;
      int v9 = (char *)this + 24 * v8 + 12296;
      *(_OWORD *)int v9 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      v9[16] = v11.__r_.__value_.__s.__data_[16];
    }
  }
}

void swift::Mangle::mangleIdentifier<anonymous namespace'::Remangler>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  unint64_t v6 = *(unsigned int *)(a1 + 12768);
  unint64_t v147 = v6;
  if (!*(unsigned char *)(a1 + 12752) || (v7 = swift::Mangle::needsPunycodeEncoding(a2, a3), unint64_t v6 = v147, !v7))
  {
    unint64_t v17 = 0;
    unint64_t v150 = (void *)(v5 + 12760);
    unint64_t v145 = (const void **)(v5 + 12728);
    unint64_t v146 = v4;
    uint64_t v142 = (void *)(v5 + 12776);
    unint64_t v18 = -1;
    uint64_t v140 = (16 * v6) | 8;
    while (1)
    {
      if (v17 >= v3)
      {
        int v21 = 0;
        if (v18 == -1) {
          goto LABEL_19;
        }
      }
      else
      {
        int v21 = v4[v17];
        if (v18 == -1) {
          goto LABEL_19;
        }
      }
      if (!v21
        || v21 == 95
        || (v21 - 65) <= 0x19 && v4[v17 - 1] - 91 <= 0xFFFFFFE5)
      {
        break;
      }
LABEL_28:
      if (++v17 > v3)
      {
        if (*(_DWORD *)(v5 + 12784))
        {
          unsigned int v40 = *(_DWORD *)(v5 + 12736);
          size_t v41 = *(unsigned int *)(v5 + 12740);
          size_t v42 = *(char **)(v5 + 12728);
          if (v40 >= v41)
          {
            unint64_t v43 = *(void **)(v5 + 12744);
            unint64_t v44 = (char *)v43[1];
            if (&v42[v41] != v44)
            {
              unint64_t v45 = v43[2];
              goto LABEL_74;
            }
            unint64_t v46 = (unint64_t)&v42[v41 + 1];
            unint64_t v45 = v43[2];
            if (v46 <= v45)
            {
              v43[1] = v46;
              LODWORD(v47) = 1;
            }
            else
            {
LABEL_74:
              if ((2 * v41) <= 4) {
                uint64_t v47 = 4;
              }
              else {
                uint64_t v47 = (2 * v41);
              }
              size_t v48 = v47 + v41;
              if (!v44 || (unint64_t)&v44[v48] > v45)
              {
                unint64_t v49 = 2 * v43[4];
                if (v49 <= v48 + 1) {
                  unint64_t v49 = v48 + 1;
                }
                v43[4] = v49;
                unint64_t v50 = v49 + 8;
                size_t v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
                void *v51 = v43[3];
                unint64_t v44 = (char *)(v51 + 1);
                unint64_t v52 = (char *)v51 + v50;
                uint64_t v4 = v146;
                int v43[2] = v52;
                v43[3] = v51;
              }
              v43[1] = &v44[v48];
              if (v41) {
                memcpy(v44, *v145, v41);
              }
              *(void *)(v5 + 12728) = v44;
              LODWORD(v41) = *(_DWORD *)(v5 + 12740);
              size_t v42 = v44;
              unsigned int v40 = *(_DWORD *)(v5 + 12736);
            }
            *(_DWORD *)(v5 + 12740) = v41 + v47;
          }
          *(_DWORD *)(v5 + 12736) = v40 + 1;
          v42[v40] = 48;
        }
        __p.__r_.__value_.__r.__words[0] = v3;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = -1;
        swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(void **)v5);
        unint64_t v53 = v147;
        uint64_t v141 = *(unsigned int *)(v5 + 12784);
        if (!v141)
        {
LABEL_195:
          *(_DWORD *)(v5 + 12784) = 0;
          return;
        }
        unint64_t v54 = 0;
        unint64_t v55 = 0;
        while (2)
        {
          uint64_t v61 = *v142 + 16 * v54;
          unint64_t v62 = *(void *)v61 - v55;
          unint64_t v144 = v54;
          if (*(void *)v61 > v55)
          {
            uint64_t v148 = *v142 + 16 * v54;
            unint64_t v63 = v53;
            swift::Demangle::CharVector::append((unsigned int *)v145, v62, *(swift::Demangle::NodeFactory **)(v5 + 12744));
            unint64_t v53 = v63;
            uint64_t v61 = v148;
            char v64 = 1;
            while (1)
            {
              if (v53 < *(unsigned int *)(v5 + 12768))
              {
                unsigned int v68 = (void *)(*v150 + 16 * v53);
                if (v55 == *v68)
                {
                  *unsigned int v68 = *(unsigned int *)(v5 + 12736);
                  ++v53;
                }
              }
              LODWORD(v69) = v4[v55];
              if (v64)
              {
                unsigned int v66 = *(_DWORD *)(v5 + 12736);
                if ((v69 - 48) <= 9)
                {
                  size_t v70 = *(unsigned int *)(v5 + 12740);
                  unint64_t v71 = *(char **)(v5 + 12728);
                  if (v66 < v70)
                  {
                    LOBYTE(v69) = 88;
                    goto LABEL_99;
                  }
                  size_t v85 = *(void **)(v5 + 12744);
                  BOOL v86 = (char *)v85[1];
                  if (&v71[v70] != v86)
                  {
                    unint64_t v87 = v85[2];
                    goto LABEL_129;
                  }
                  unint64_t v88 = (unint64_t)&v71[v70 + 1];
                  unint64_t v87 = v85[2];
                  if (v88 <= v87)
                  {
                    v85[1] = v88;
                    LODWORD(v69) = 1;
                    BOOL v86 = v71;
                  }
                  else
                  {
LABEL_129:
                    unint64_t v89 = v53;
                    if ((2 * v70) <= 4) {
                      uint64_t v69 = 4;
                    }
                    else {
                      uint64_t v69 = (2 * v70);
                    }
                    size_t v90 = v69 + v70;
                    if (!v86 || (unint64_t)&v86[v90] > v87)
                    {
                      unint64_t v91 = 2 * v85[4];
                      if (v91 <= v90 + 1) {
                        unint64_t v91 = v90 + 1;
                      }
                      v85[4] = v91;
                      unint64_t v92 = v91 + 8;
                      unint64_t v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                      *unint64_t v93 = v85[3];
                      BOOL v86 = (char *)(v93 + 1);
                      v85[2] = (char *)v93 + v92;
                      v85[3] = v93;
                    }
                    v85[1] = &v86[v90];
                    if (v70) {
                      memcpy(v86, *v145, v70);
                    }
                    uint64_t v5 = a1;
                    *(void *)(a1 + 12728) = v86;
                    LODWORD(v70) = *(_DWORD *)(a1 + 12740);
                    unsigned int v66 = *(_DWORD *)(a1 + 12736);
                    unint64_t v53 = v89;
                  }
                  int v67 = v70 + v69;
                  LOBYTE(v69) = 88;
                  unint64_t v71 = v86;
                  uint64_t v4 = v146;
                  goto LABEL_98;
                }
              }
              else
              {
                unsigned int v66 = *(_DWORD *)(v5 + 12736);
              }
              size_t v65 = *(unsigned int *)(v5 + 12740);
              unint64_t v71 = *(char **)(v5 + 12728);
              if (v66 < v65) {
                goto LABEL_99;
              }
              uint64_t v72 = *(void **)(v5 + 12744);
              size_t v73 = (char *)v72[1];
              if (&v71[v65] != v73) {
                break;
              }
              unint64_t v75 = (unint64_t)&v71[v65 + 1];
              unint64_t v74 = v72[2];
              if (v75 > v74) {
                goto LABEL_112;
              }
              v72[1] = v75;
              LODWORD(v78) = 1;
              uint64_t v5 = a1;
LABEL_97:
              int v67 = v65 + v78;
LABEL_98:
              *(_DWORD *)(v5 + 12740) = v67;
LABEL_99:
              char v64 = 0;
              *(_DWORD *)(v5 + 12736) = v66 + 1;
              v71[v66] = v69;
              if (++v55 >= *(void *)v61) {
                goto LABEL_142;
              }
            }
            unint64_t v74 = v72[2];
LABEL_112:
            unint64_t v76 = v53;
            unint64_t v77 = v3;
            if ((2 * v65) <= 4) {
              uint64_t v78 = 4;
            }
            else {
              uint64_t v78 = (2 * v65);
            }
            size_t v79 = v78 + v65;
            if (v73) {
              BOOL v80 = (unint64_t)&v73[v78 + v65] > v74;
            }
            else {
              BOOL v80 = 1;
            }
            unint64_t v71 = (char *)v72[1];
            if (v80)
            {
              unint64_t v81 = 2 * v72[4];
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              v72[4] = v81;
              unint64_t v82 = v81 + 8;
              unint64_t v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              *unint64_t v83 = v72[3];
              unint64_t v71 = (char *)(v83 + 1);
              uint64_t v84 = (char *)v83 + v82;
              uint64_t v4 = v146;
              v72[2] = v84;
              v72[3] = v83;
            }
            v72[1] = &v71[v79];
            if (v65) {
              memcpy(v71, *v145, v65);
            }
            uint64_t v5 = a1;
            *(void *)(a1 + 12728) = v71;
            LODWORD(v65) = *(_DWORD *)(a1 + 12740);
            unsigned int v66 = *(_DWORD *)(a1 + 12736);
            unint64_t v3 = v77;
            unint64_t v53 = v76;
            uint64_t v61 = v148;
            goto LABEL_97;
          }
LABEL_142:
          uint64_t v94 = *(unsigned int *)(v61 + 8);
          if ((v94 & 0x80000000) != 0) {
            goto LABEL_93;
          }
          v55 += *(void *)(*(void *)(v5 + 12760) + 16 * v94 + 8);
          size_t v95 = *(void **)(v5 + 12744);
          unsigned int v57 = *(_DWORD *)(v5 + 12736);
          size_t v56 = *(unsigned int *)(v5 + 12740);
          unsigned int v60 = *(char **)(v5 + 12728);
          if (v144 < v141 - 2)
          {
            char v96 = v94 + 97;
            if (v57 >= v56)
            {
              char v97 = (char *)v95[1];
              if (&v60[v56] != v97)
              {
                unint64_t v98 = v95[2];
                goto LABEL_151;
              }
              unint64_t v101 = (unint64_t)&v60[v56 + 1];
              unint64_t v98 = v95[2];
              if (v101 <= v98)
              {
                v95[1] = v101;
                int v58 = 1;
                char v97 = v60;
              }
              else
              {
LABEL_151:
                LODWORD(v102) = 2 * v56;
                if ((2 * v56) <= 4) {
                  uint64_t v102 = 4;
                }
                else {
                  uint64_t v102 = v102;
                }
                int v149 = v102;
                size_t v103 = v102 + v56;
                if (!v97 || (unint64_t)&v97[v103] > v98)
                {
                  unint64_t v104 = 2 * v95[4];
                  if (v104 <= v103 + 1) {
                    unint64_t v104 = v103 + 1;
                  }
                  v95[4] = v104;
                  unint64_t v105 = v104 + 8;
                  unint64_t v106 = v53;
                  unint64_t v107 = malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
                  unint64_t v53 = v106;
                  *unint64_t v107 = v95[3];
                  char v97 = (char *)(v107 + 1);
                  uint64_t v108 = (char *)v107 + v105;
                  uint64_t v4 = v146;
                  v95[2] = v108;
                  v95[3] = v107;
                }
                v95[1] = &v97[v103];
                if (v56)
                {
                  unint64_t v109 = v53;
                  memcpy(v97, *v145, v56);
                  unint64_t v53 = v109;
                }
                *(void *)(v5 + 12728) = v97;
                LODWORD(v56) = *(_DWORD *)(v5 + 12740);
                unsigned int v57 = *(_DWORD *)(v5 + 12736);
                int v58 = v149;
              }
              int v59 = v56 + v58;
LABEL_91:
              *(_DWORD *)(v5 + 12740) = v59;
              unsigned int v60 = v97;
            }
LABEL_92:
            *(_DWORD *)(v5 + 12736) = v57 + 1;
            v60[v57] = v96;
LABEL_93:
            unint64_t v54 = v144 + 1;
            if (v144 + 1 == v141) {
              goto LABEL_195;
            }
            continue;
          }
          break;
        }
        if (v57 >= v56)
        {
          uint64_t v99 = (char *)v95[1];
          if (&v60[v56] != v99)
          {
            unint64_t v100 = v95[2];
            goto LABEL_162;
          }
          unint64_t v110 = (unint64_t)&v60[v56 + 1];
          unint64_t v100 = v95[2];
          if (v110 <= v100)
          {
            v95[1] = v110;
            LODWORD(v112) = 1;
          }
          else
          {
LABEL_162:
            unint64_t v111 = v53;
            if ((2 * v56) <= 4) {
              uint64_t v112 = 4;
            }
            else {
              uint64_t v112 = (2 * v56);
            }
            size_t v113 = v112 + v56;
            if (!v99 || (unint64_t)&v99[v113] > v100)
            {
              unint64_t v114 = 2 * v95[4];
              if (v114 <= v113 + 1) {
                unint64_t v114 = v113 + 1;
              }
              v95[4] = v114;
              unint64_t v115 = v114 + 8;
              unint64_t v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
              void *v116 = v95[3];
              uint64_t v99 = (char *)(v116 + 1);
              int v117 = (char *)v116 + v115;
              uint64_t v4 = v146;
              v95[2] = v117;
              v95[3] = v116;
            }
            v95[1] = &v99[v113];
            if (v56) {
              memcpy(v99, *v145, v56);
            }
            *(void *)(a1 + 12728) = v99;
            LODWORD(v56) = *(_DWORD *)(a1 + 12740);
            unsigned int v60 = v99;
            unsigned int v57 = *(_DWORD *)(a1 + 12736);
            unint64_t v53 = v111;
            uint64_t v5 = a1;
          }
          *(_DWORD *)(v5 + 12740) = v56 + v112;
        }
        *(_DWORD *)(v5 + 12736) = v57 + 1;
        v60[v57] = v94 + 65;
        if (v55 != v3) {
          goto LABEL_93;
        }
        unsigned int v57 = *(_DWORD *)(v5 + 12736);
        size_t v118 = *(unsigned int *)(v5 + 12740);
        unsigned int v60 = *(char **)(v5 + 12728);
        if (v57 < v118)
        {
          char v96 = 48;
          unint64_t v55 = v3;
          goto LABEL_92;
        }
        uint64_t v119 = *(void **)(v5 + 12744);
        char v97 = (char *)v119[1];
        if (&v60[v118] != v97)
        {
          unint64_t v120 = v119[2];
          goto LABEL_182;
        }
        unint64_t v121 = (unint64_t)&v60[v118 + 1];
        unint64_t v120 = v119[2];
        if (v121 <= v120)
        {
          v119[1] = v121;
          LODWORD(v122) = 1;
          char v97 = v60;
        }
        else
        {
LABEL_182:
          if ((2 * v118) <= 4) {
            uint64_t v122 = 4;
          }
          else {
            uint64_t v122 = (2 * v118);
          }
          size_t v123 = v122 + v118;
          if (!v97 || (unint64_t)&v97[v123] > v120)
          {
            unint64_t v124 = 2 * v119[4];
            if (v124 <= v123 + 1) {
              unint64_t v124 = v123 + 1;
            }
            v119[4] = v124;
            unint64_t v125 = v124 + 8;
            unint64_t v126 = v53;
            unint64_t v127 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
            unint64_t v53 = v126;
            void *v127 = v119[3];
            char v97 = (char *)(v127 + 1);
            unint64_t v128 = (char *)v127 + v125;
            uint64_t v4 = v146;
            v119[2] = v128;
            v119[3] = v127;
          }
          v119[1] = &v97[v123];
          if (v118)
          {
            unint64_t v129 = v53;
            memcpy(v97, *v145, v118);
            unint64_t v53 = v129;
          }
          *(void *)(v5 + 12728) = v97;
          LODWORD(v118) = *(_DWORD *)(v5 + 12740);
          unsigned int v57 = *(_DWORD *)(v5 + 12736);
        }
        int v59 = v118 + v122;
        char v96 = 48;
        unint64_t v55 = v3;
        goto LABEL_91;
      }
    }
    std::string::size_type v22 = v18;
    if (v3 >= v18) {
      unint64_t v23 = v18;
    }
    else {
      unint64_t v23 = v3;
    }
    uint64_t v24 = &v4[v23];
    size_t v25 = v3 - v23;
    std::string::size_type v143 = v17 - v18;
    if (v25 >= v17 - v18) {
      size_t v26 = v17 - v18;
    }
    else {
      size_t v26 = v25;
    }
    if (!v6) {
      goto LABEL_54;
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a1 + 12728);
    unint64_t v29 = *(unsigned int *)(a1 + 12736);
    BOOL v30 = (unint64_t *)(*v150 + 8);
    while (1)
    {
      unint64_t v31 = *(v30 - 1);
      unint64_t v32 = *v30;
      if (v29 < v31) {
        unint64_t v31 = v29;
      }
      if (v29 - v31 < v32) {
        unint64_t v32 = v29 - v31;
      }
      if (v26 == v32)
      {
        if (!v26) {
          break;
        }
        int v33 = memcmp(v24, (const void *)(v28 + v31), v26);
        unint64_t v6 = v147;
        if (!v33) {
          break;
        }
      }
      v30 += 2;
      if (v6 == ++v27) {
        goto LABEL_54;
      }
    }
    if ((v27 & 0x80000000) == 0)
    {
      uint64_t v4 = v146;
    }
    else
    {
LABEL_54:
      uint64_t v34 = *(unsigned int *)(a1 + 12768);
      uint64_t v4 = v146;
      if (v6 >= v34) {
        goto LABEL_66;
      }
      size_t v35 = (unint64_t *)(*v150 + v140);
      unint64_t v36 = v6;
      while (1)
      {
        unint64_t v37 = *(v35 - 1);
        unint64_t v38 = *v35;
        if (v3 < v37) {
          unint64_t v37 = v3;
        }
        if (v3 - v37 < v38) {
          unint64_t v38 = v3 - v37;
        }
        if (v26 == v38)
        {
          if (!v26) {
            break;
          }
          int v39 = memcmp(v24, &v146[v37], v26);
          unint64_t v6 = v147;
          if (!v39) {
            break;
          }
        }
        v35 += 2;
        if (v34 == ++v36) {
          goto LABEL_66;
        }
      }
      if ((v36 & 0x80000000) != 0)
      {
LABEL_66:
        uint64_t v5 = a1;
        if (v143 < 2 || v34 > 0x19)
        {
LABEL_19:
          if ((v21 - 58) >= 0xFFFFFFF6 || v21 == 95 || v21 == 0) {
            unint64_t v18 = -1;
          }
          else {
            unint64_t v18 = v17;
          }
          goto LABEL_28;
        }
        __p.__r_.__value_.__r.__words[0] = v22;
        __p.__r_.__value_.__l.__size_ = v143;
        swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back((uint64_t)v150, (__n128 *)&__p, *(void **)a1);
LABEL_18:
        unint64_t v6 = v147;
        goto LABEL_19;
      }
      LODWORD(v27) = v36;
    }
    uint64_t v5 = a1;
    __p.__r_.__value_.__r.__words[0] = v22;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v27;
    swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(void **)a1);
    goto LABEL_18;
  }
  memset(&__p, 0, sizeof(__p));
  swift::Punycode::encodePunycodeUTF8(v4, v3, &__p, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v10 = (const void **)(v5 + 12728);
  swift::Demangle::CharVector::append((char **)(v5 + 12728), "00", 2uLL, *(void **)(v5 + 12744));
  swift::Demangle::CharVector::append((unsigned int *)(v5 + 12728), size, *(swift::Demangle::NodeFactory **)(v5 + 12744));
  int v11 = p_p->__r_.__value_.__s.__data_[0];
  if (v11 != 95 && (v11 - 48) > 9) {
    goto LABEL_214;
  }
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  uint64_t v14 = v5;
  size_t v15 = *(unsigned int *)(v5 + 12740);
  int v16 = *(char **)(v14 + 12728);
  if (v13 >= v15)
  {
    unint64_t v130 = *(void **)(v14 + 12744);
    int v131 = (char *)v130[1];
    if (&v16[v15] == v131)
    {
      unint64_t v133 = (unint64_t)&v16[v15 + 1];
      unint64_t v132 = v130[2];
      if (v133 <= v132)
      {
        v130[1] = v133;
        LODWORD(v134) = 1;
        uint64_t v139 = a1;
LABEL_212:
        *(_DWORD *)(v139 + 12740) = v15 + v134;
        uint64_t v5 = v139;
        goto LABEL_213;
      }
    }
    else
    {
      unint64_t v132 = v130[2];
    }
    if ((2 * v15) <= 4) {
      uint64_t v134 = 4;
    }
    else {
      uint64_t v134 = (2 * v15);
    }
    size_t v135 = v134 + v15;
    if (!v131 || (unint64_t)&v131[v135] > v132)
    {
      unint64_t v136 = 2 * v130[4];
      if (v136 <= v135 + 1) {
        unint64_t v136 = v135 + 1;
      }
      v130[4] = v136;
      unint64_t v137 = v136 + 8;
      unint64_t v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
      void *v138 = v130[3];
      int v131 = (char *)(v138 + 1);
      v130[2] = (char *)v138 + v137;
      v130[3] = v138;
    }
    v130[1] = &v131[v135];
    if (v15) {
      memcpy(v131, *v10, v15);
    }
    uint64_t v139 = a1;
    *(void *)(a1 + 12728) = v131;
    LODWORD(v15) = *(_DWORD *)(a1 + 12740);
    int v16 = v131;
    unsigned int v13 = *(_DWORD *)(a1 + 12736);
    goto LABEL_212;
  }
  uint64_t v5 = v14;
LABEL_213:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v16[v13] = 95;
LABEL_214:
  swift::Demangle::CharVector::append((char **)v10, p_p, size, *(void **)(v5 + 12744));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

__n128 swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back(uint64_t a1, __n128 *a2, void *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  int v7 = *(__n128 **)a1;
  if (v5 >= v6)
  {
    int v9 = &v7[v6];
    int v10 = (char *)a3[1];
    if (v9 == (__n128 *)v10)
    {
      uint64_t v12 = (char *)&v9[1];
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *(_DWORD *)(a1 + 12) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v11 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = v13 + v6;
    int v7 = (__n128 *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)v7[v14].n128_u64 > v11)
    {
      unint64_t v15 = 2 * a3[4];
      if (v15 <= ((v14 * 16) | 8uLL)) {
        unint64_t v15 = (v14 * 16) | 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v18 = (char *)v17 + v16;
      void *v17 = a3[3];
      int v7 = (__n128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v18;
      a3[3] = v17;
    }
    a3[1] = &v7[v14];
    if (v6) {
      memcpy(v7, *(const void **)a1, 16 * v6);
    }
    *(void *)a1 = v7;
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  __n128 result = *a2;
  v7[v5] = *a2;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleKeyPathThunkHelper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v13 = (swift::Demangle::Node **)a2;
  if ((v12 - 1) >= 2)
  {
    if (v12 == 5)
    {
      uint64_t v14 = *(swift::Demangle::Node **)a2;
      uint64_t v13 = *(swift::Demangle::Node ***)a2;
      goto LABEL_9;
    }
    uint64_t v13 = 0;
  }
  if (v12 == 1)
  {
    unint64_t v15 = (swift::Demangle::Node **)(a2 + 8);
    if (v13 != (swift::Demangle::Node **)(a2 + 8)) {
      goto LABEL_18;
    }
LABEL_21:
    __n128 result = (uint64_t *)swift::Demangle::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
    int v17 = *(unsigned __int8 *)(a2 + 18);
    unint64_t v18 = (swift::Demangle::Node **)a2;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        int v19 = *(swift::Demangle::Node **)a2;
        unint64_t v18 = *(swift::Demangle::Node ***)a2;
LABEL_29:
        size_t v20 = (swift::Demangle::Node **)((char *)v19 + 8 * *(unsigned int *)(a2 + 8));
        if (v18 == v20) {
          goto LABEL_41;
        }
        goto LABEL_36;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::Node **)(a2 + 8);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 2:
        size_t v20 = (swift::Demangle::Node **)(a2 + 16);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 5:
        int v19 = *(swift::Demangle::Node **)a2;
        goto LABEL_29;
      default:
        size_t v20 = 0;
        if (!v18)
        {
LABEL_41:
          *(_DWORD *)a6 = 0;
          *(void *)(a6 + 8) = 0;
          *(_DWORD *)(a6 + 16) = 0;
          return result;
        }
        break;
    }
LABEL_36:
    unsigned int v21 = a5 + 1;
    while (1)
    {
      if (*((_WORD *)*v18 + 8) == 217)
      {
        if (*(_DWORD *)a6) {
          return result;
        }
      }
      if (++v18 == v20) {
        goto LABEL_41;
      }
    }
  }
  if (v12 == 2)
  {
    unint64_t v15 = (swift::Demangle::Node **)(a2 + 16);
    if (v13 != (swift::Demangle::Node **)(a2 + 16)) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  if (v12 != 5)
  {
    unint64_t v15 = 0;
    if (v13) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  uint64_t v14 = *(swift::Demangle::Node **)a2;
LABEL_9:
  unint64_t v15 = (swift::Demangle::Node **)((char *)v14 + 8 * *(unsigned int *)(a2 + 8));
  if (v13 == v15) {
    goto LABEL_21;
  }
LABEL_18:
  while (1)
  {
    if (*((_WORD *)*v13 + 8) != 217)
    {
      if (*(_DWORD *)a6) {
        return result;
      }
    }
    if (++v13 == v15) {
      goto LABEL_21;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolList@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, swift::Demangle::Node *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v12 = 0;
      goto LABEL_7;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  int v12 = *(swift::Demangle::Node ***)a2;
LABEL_7:
  BOOL v43 = 1;
  int v13 = *((unsigned __int8 *)v12 + 18);
  uint64_t v14 = v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      unint64_t v15 = *v12;
      uint64_t v14 = (swift::Demangle::Node **)*v12;
      goto LABEL_15;
    }
    uint64_t v14 = 0;
  }
  switch(v13)
  {
    case 1:
      unint64_t v16 = v12 + 1;
      if (v14 != v12 + 1) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 2:
      unint64_t v16 = v12 + 2;
      if (v14 != v12 + 2) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 5:
      unint64_t v15 = *v12;
LABEL_15:
      unint64_t v16 = (swift::Demangle::Node **)((char *)v15 + 8 * *((unsigned int *)v12 + 2));
      if (v14 != v16) {
        goto LABEL_18;
      }
      goto LABEL_43;
  }
  unint64_t v16 = 0;
  if (!v14)
  {
LABEL_43:
    BOOL v24 = 1;
    goto LABEL_44;
  }
  do
  {
LABEL_18:
    int v17 = *v14;
    if (*((_WORD *)*v14 + 8) != 232) {
      goto LABEL_25;
    }
    int v18 = *((unsigned __int8 *)v17 + 18);
    if ((v18 - 1) < 2) {
      goto LABEL_23;
    }
    if (v18 == 5 && *((_DWORD *)v17 + 2))
    {
      int v17 = *(swift::Demangle::Node **)v17;
LABEL_23:
      int v17 = *(swift::Demangle::Node **)v17;
      goto LABEL_25;
    }
    int v17 = 0;
LABEL_25:
    {
      int v19 = *((unsigned __int8 *)v17 + 18);
      size_t v20 = (swift::Demangle::Node **)v17;
      if ((v19 - 1) >= 2)
      {
        if (v19 == 5)
        {
          unsigned int v21 = *(swift::Demangle::Node **)v17;
          size_t v20 = *(swift::Demangle::Node ***)v17;
LABEL_34:
          std::string::size_type v22 = (swift::Demangle::Node **)((char *)v21 + 8 * *((unsigned int *)v17 + 2));
          goto LABEL_40;
        }
        size_t v20 = 0;
      }
      switch(v19)
      {
        case 1:
          std::string::size_type v22 = (swift::Demangle::Node **)((char *)v17 + 8);
          goto LABEL_40;
        case 2:
          std::string::size_type v22 = (swift::Demangle::Node **)((char *)v17 + 16);
          goto LABEL_40;
        case 5:
          unsigned int v21 = *(swift::Demangle::Node **)v17;
          goto LABEL_34;
      }
      std::string::size_type v22 = 0;
LABEL_40:
      while (v20 != v22)
      {
        if (*(_DWORD *)a6) {
          return result;
        }
        ++v20;
      }
    }
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    ++v14;
  }
  while (v14 != v16);
  BOOL v24 = v43;
LABEL_44:
  if (!a3)
  {
    unint64_t v29 = this[1593];
    if (a4)
    {
      uint64_t v28 = "Xl";
      size_t v26 = (char **)(this + 1591);
      uint64_t v27 = this[1593];
LABEL_57:
      __n128 result = (uint64_t *)swift::Demangle::CharVector::append(v26, v28, 2uLL, v27);
      int v30 = 0;
      a3 = 0;
      int v31 = 0;
      goto LABEL_78;
    }
    unsigned int v32 = *((_DWORD *)this + 3184);
    size_t v33 = *((unsigned int *)this + 3185);
    uint64_t v34 = (char *)this[1591];
    if (v32 < v33) {
      goto LABEL_77;
    }
    size_t v35 = (char *)v29[1];
    if (&v34[v33] == v35)
    {
      unint64_t v37 = (unint64_t)&v34[v33 + 1];
      unint64_t v36 = v29[2];
      if (v37 <= v36)
      {
        v29[1] = v37;
        LODWORD(v38) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v33 + v38;
LABEL_77:
        int v30 = 0;
        a3 = 0;
        int v31 = 0;
        *((_DWORD *)this + 3184) = v32 + 1;
        v34[v32] = 112;
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v36 = v29[2];
    }
    if ((2 * v33) <= 4) {
      uint64_t v38 = 4;
    }
    else {
      uint64_t v38 = (2 * v33);
    }
    size_t v39 = v38 + v33;
    if (!v35 || (unint64_t)&v35[v39] > v36)
    {
      unint64_t v40 = 2 * v29[4];
      if (v40 <= v39 + 1) {
        unint64_t v40 = v39 + 1;
      }
      v29[4] = v40;
      unint64_t v41 = v40 + 8;
      __n128 result = (uint64_t *)malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      size_t v42 = (char *)result + v41;
      uint64_t *result = v29[3];
      size_t v35 = (char *)(result + 1);
      v29[2] = v42;
      v29[3] = result;
    }
    v29[1] = &v35[v39];
    if (v33) {
      __n128 result = (uint64_t *)memcpy(v35, this[1591], v33);
    }
    this[1591] = v35;
    LODWORD(v33) = *((_DWORD *)this + 3185);
    uint64_t v34 = v35;
    unsigned int v32 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
  int v25 = *((unsigned __int8 *)a3 + 18);
  if (v25 == 1) {
    goto LABEL_49;
  }
  if (v25 != 5 || *((_DWORD *)a3 + 2) != 1)
  {
    int v31 = 321;
    int v30 = 10;
LABEL_78:
    *(_DWORD *)a6 = v30;
    *(void *)(a6 + 8) = a3;
    *(_DWORD *)(a6 + 16) = v31;
    return result;
  }
  a3 = *(swift::Demangle::Node **)a3;
LABEL_49:
  if (!*(_DWORD *)a6)
  {
    size_t v26 = (char **)(this + 1591);
    uint64_t v27 = this[1593];
    uint64_t v28 = "Xc";
    goto LABEL_57;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffFunctionOrSimpleThunk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *(unsigned __int8 *)(a2 + 18);
  int v12 = (swift::Demangle::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5) {
      int v12 = *(swift::Demangle::Node ***)a2;
    }
    else {
      int v12 = 0;
    }
  }
  unsigned int v13 = a5 + 1;
  while (1)
  {
    int v14 = *(unsigned __int8 *)(a2 + 18);
    if (v14 != 5) {
      break;
    }
    if (v12 == (swift::Demangle::Node **)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8))) {
      goto LABEL_19;
    }
LABEL_16:
    int v17 = *v12;
    if (*((_WORD *)*v12 + 8) == 321) {
      goto LABEL_19;
    }
    ++v12;
    if (*(_DWORD *)a6) {
      return result;
    }
  }
  if (v14 == 1) {
    unint64_t v15 = (swift::Demangle::Node **)(a2 + 8);
  }
  else {
    unint64_t v15 = 0;
  }
  if (v14 == 2) {
    unint64_t v16 = (swift::Demangle::Node **)(a2 + 16);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v12 != v16) {
    goto LABEL_16;
  }
LABEL_19:
  int v19 = (const void **)(a1 + 12728);
  swift::Demangle::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
  if (!*(_DWORD *)a6)
  {
    if (!*(_DWORD *)a6)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 12736);
      size_t v21 = *(unsigned int *)(a1 + 12740);
      std::string::size_type v22 = *(char **)(a1 + 12728);
      if (v20 >= v21)
      {
        unint64_t v23 = *(void **)(a1 + 12744);
        BOOL v24 = (char *)v23[1];
        if (&v22[v21] != v24)
        {
          unint64_t v25 = v23[2];
          goto LABEL_25;
        }
        unint64_t v26 = (unint64_t)&v22[v21 + 1];
        unint64_t v25 = v23[2];
        if (v26 <= v25)
        {
          v23[1] = v26;
          LODWORD(v27) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v21) <= 4) {
            uint64_t v27 = 4;
          }
          else {
            uint64_t v27 = (2 * v21);
          }
          size_t v28 = v27 + v21;
          if (!v24 || (unint64_t)&v24[v28] > v25)
          {
            unint64_t v29 = 2 * v23[4];
            if (v29 <= v28 + 1) {
              unint64_t v29 = v28 + 1;
            }
            v23[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            unsigned int v32 = (char *)v31 + v30;
            *int v31 = v23[3];
            BOOL v24 = (char *)(v31 + 1);
            v23[2] = v32;
            v23[3] = v31;
          }
          v23[1] = &v24[v28];
          if (v21) {
            memcpy(v24, *v19, v21);
          }
          *(void *)(a1 + 12728) = v24;
          LODWORD(v21) = *(_DWORD *)(a1 + 12740);
          std::string::size_type v22 = v24;
          unsigned int v20 = *(_DWORD *)(a1 + 12736);
        }
        *(_DWORD *)(a1 + 12740) = v21 + v27;
      }
      *(_DWORD *)(a1 + 12736) = v20 + 1;
      v22[v20] = 112;
      if (!*(_DWORD *)a6)
      {
        unsigned int v33 = *(_DWORD *)(a1 + 12736);
        size_t v34 = *(unsigned int *)(a1 + 12740);
        size_t v35 = *(char **)(a1 + 12728);
        if (v33 >= v34)
        {
          unint64_t v36 = *(void **)(a1 + 12744);
          unint64_t v37 = (char *)v36[1];
          if (&v35[v34] != v37)
          {
            unint64_t v38 = v36[2];
            goto LABEL_43;
          }
          unint64_t v39 = (unint64_t)&v35[v34 + 1];
          unint64_t v38 = v36[2];
          if (v39 <= v38)
          {
            v36[1] = v39;
            LODWORD(v40) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v34) <= 4) {
              uint64_t v40 = 4;
            }
            else {
              uint64_t v40 = (2 * v34);
            }
            size_t v41 = v40 + v34;
            if (!v37 || (unint64_t)&v37[v41] > v38)
            {
              unint64_t v42 = 2 * v36[4];
              if (v42 <= v41 + 1) {
                unint64_t v42 = v41 + 1;
              }
              v36[4] = v42;
              unint64_t v43 = v42 + 8;
              __n128 result = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
              unint64_t v44 = (char *)result + v43;
              uint64_t *result = v36[3];
              unint64_t v37 = (char *)(result + 1);
              v36[2] = v44;
              v36[3] = result;
            }
            v36[1] = &v37[v41];
            if (v34) {
              __n128 result = (uint64_t *)memcpy(v37, *v19, v34);
            }
            *(void *)(a1 + 12728) = v37;
            LODWORD(v34) = *(_DWORD *)(a1 + 12740);
            size_t v35 = v37;
            unsigned int v33 = *(_DWORD *)(a1 + 12736);
          }
          *(_DWORD *)(a1 + 12740) = v34 + v40;
        }
        *(_DWORD *)(a1 + 12736) = v33 + 1;
        v35[v33] = 114;
        *(_DWORD *)a6 = 0;
        *(void *)(a6 + 8) = 0;
        *(_DWORD *)(a6 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::SubstitutionEntry>(void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v4;
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v10 = i[1];
    if (v10 == v4)
    {
      if (i[3] == *(void *)(a2 + 8) && *((unsigned __int8 *)i + 32) == *(unsigned __int8 *)(a2 + 16))
      {
        int v11 = *(swift::Demangle::Node **)a2;
        if (*((unsigned char *)i + 32))
        {
          if (swift::Demangle::SubstitutionEntry::identifierEquals((swift::Demangle::SubstitutionEntry *)i[2], *(swift::Demangle::Node **)a2, v11))
          {
            return i;
          }
        }
        else if (swift::Demangle::SubstitutionEntry::deepEquals((swift::Demangle::SubstitutionEntry *)(i + 2), (swift::Demangle::Node *)i[2], v11))
        {
          return i;
        }
      }
    }
    else
    {
      if (v6 <= 1)
      {
        v10 &= *(void *)&v2 - 1;
      }
      else if (v10 >= *(void *)&v2)
      {
        v10 %= *(void *)&v2;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = *(void *)(a2 + 8);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v6)
          {
            if (*((void *)v12 + 3) == *(void *)(a2 + 8) && v12[32] == *(unsigned char *)(a2 + 16))
            {
              int v14 = *(swift::Demangle::Node **)a2;
              if (v12[32])
              {
                if (swift::Demangle::SubstitutionEntry::identifierEquals(*((swift::Demangle::SubstitutionEntry **)v12 + 2), *(swift::Demangle::Node **)a2, v14))
                {
                  return v12;
                }
              }
              else if (swift::Demangle::SubstitutionEntry::deepEquals((swift::Demangle::SubstitutionEntry *)(v12 + 16), *((swift::Demangle::Node **)v12 + 2), v14))
              {
                return v12;
              }
            }
          }
          else
          {
            if (v10 <= 1)
            {
              v13 &= v7 - 1;
            }
            else if (v13 >= v7)
            {
              v13 %= v7;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  int v12 = (char *)operator new(0x30uLL);
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = v6;
  long long v15 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)int v12 = *v27;
LABEL_60:
    *uint64_t v27 = v12;
    goto LABEL_61;
  }
  *(void *)int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v28 = *(void *)(*(void *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7) {
        v28 %= v7;
      }
    }
    else
    {
      v28 &= v7 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
  return v12;
}

void std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    uint8x8_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    unint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            void *v7 = *v11;
            uint64_t v12 = 8 * v13;
            *int v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            int v11 = v7;
          }
          unint64_t v13 = v8;
LABEL_19:
          unint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t llvm::function_ref<swift::Demangle::Node * ()(swift::Demangle::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::mangleNode(swift::Demangle::Node *)::$_0>()
{
  return 0;
}

void swift::Demangle::fatal(swift::Demangle *this, char *a2, const char *a3, char *a4, ...)
{
  va_start(va, a4);
  swift::Demangle::fatalv(this, a2, va, a4);
}

void swift::Demangle::fatalv(swift::Demangle *this, char *__format, va_list a3, char *a4)
{
}

void swift::Demangle::warn(swift::Demangle *this, char *a2, const char *a3, char *a4, ...)
{
  va_start(va, a4);
  swift::Demangle::warnv(this, a2, va, a4);
}

void swift::Demangle::warnv(swift::Demangle *this, char *__format, va_list a3, char *a4)
{
  int v5 = vsnprintf(0, 0, __format, a3);
  if ((v5 & 0x80000000) == 0)
  {
    size_t v6 = (v5 + 1);
    unint64_t v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      unint64_t v8 = v7;
      if ((vsnprintf(v7, v6, __format, a3) & 0x80000000) == 0)
      {
        uint8x8_t v9 = (FILE **)MEMORY[0x263EF8348];
        fputs(v8, (FILE *)*MEMORY[0x263EF8348]);
        fflush(*v9);
        free(v8);
        return;
      }
      free(v8);
    }
  }
  unint64_t v10 = (FILE **)MEMORY[0x263EF8348];
  fputs("unable to format warning message", (FILE *)*MEMORY[0x263EF8348]);
  fflush(*v10);
}

void demangleFatal(char *__format, va_list a2, char *a3)
{
  int v4 = vsnprintf(0, 0, __format, a2);
  if ((v4 & 0x80000000) == 0)
  {
    size_t v6 = (v4 + 1);
    unint64_t v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      unint64_t v8 = v7;
      if ((vsnprintf(v7, v6, __format, a2) & 0x80000000) == 0)
      {
        reportError(v8, v9);
        abort();
      }
      free(v8);
    }
  }
  reportError("unable to format fatal error message", v5);
  abort();
}

void reportError(const char *a1, const char *a2)
{
  unint64_t v3 = (FILE **)MEMORY[0x263EF8348];
  fputs(a1, (FILE *)*MEMORY[0x263EF8348]);
  fflush(*v3);
  int v5 = 0;
  uint8x8_t v9 = 0;
  for (uint64_t i = (void *)qword_267866A38[0]; ; uint64_t i = v8)
  {
    if (v5)
    {
      free(v5);
      uint8x8_t v9 = 0;
    }
    if (i) {
      break;
    }
    unint64_t v7 = strdup(a1);
    unint64_t v8 = 0;
    uint8x8_t v9 = v7;
    atomic_compare_exchange_strong_explicit(qword_267866A38, (unint64_t *)&v8, (unint64_t)v7, memory_order_release, memory_order_relaxed);
    if (!v8) {
      return;
    }
LABEL_3:
    int v5 = v9;
  }
  demangle_asprintf(&v9, v4, i, a1);
  unint64_t v8 = i;
  atomic_compare_exchange_strong_explicit(qword_267866A38, (unint64_t *)&v8, (unint64_t)v9, memory_order_release, memory_order_relaxed);
  if (v8 != i) {
    goto LABEL_3;
  }
  if (malloc_size(i))
  {
    free(i);
  }
}

void demangle_asprintf(char **a1, const char *a2, ...)
{
  va_start(va, a2);
  int v3 = vsnprintf(0, 0, "%s%s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    int v5 = (char *)malloc_type_malloc(v4, 0xAB2EFD28uLL);
    if (v5)
    {
      size_t v6 = v5;
      if (vsnprintf(v5, v4, "%s%s", va) < 0) {
        free(v6);
      }
      else {
        *a1 = v6;
      }
    }
  }
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}