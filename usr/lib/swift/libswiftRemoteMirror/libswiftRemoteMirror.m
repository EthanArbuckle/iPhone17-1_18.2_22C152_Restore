void __swift::__runtime::llvm::report_fatal_error(__swift::__runtime::llvm *this, const char *a2)
{
  abort();
}

uint64_t anonymous namespace'::error(_anonymous_namespace_ *this, const char *a2, const char *a3, const char *a4)
{
  if (a3) {
    snprintf(__str, 0x400uLL, "%s%s at %s:%u\n");
  }
  else {
    snprintf(__str, 0x400uLL, "%s%s\n");
  }
  return asl_log(0, 0, 3, "%s", __str);
}

void __swift::__runtime::llvm::report_fatal_error(char *a1)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  __swift::__runtime::llvm::report_fatal_error((__swift::__runtime::llvm *)a1, 0);
}

void __swift::__runtime::llvm::report_fatal_error(const void *a1, const void *a2)
{
  v3[0] = a1;
  v3[1] = a2;
  __swift::__runtime::llvm::StringRef::str(v3, (uint64_t)v2);
  __swift::__runtime::llvm::report_fatal_error(v2);
}

const void **__swift::__runtime::llvm::StringRef::str@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  v2 = (void *)a2;
  v3 = *this;
  if (!*this)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return this;
  }
  size_t v4 = (size_t)this[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v5 = v4 | 7;
    }
    uint64_t v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    void *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v4;
    if (!v4) {
      goto LABEL_11;
    }
  }
  this = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((unsigned char *)v2 + v4) = 0;
  return this;
}

void __swift::__runtime::llvm::report_bad_alloc_error(__swift::__runtime::llvm *this, const char *a2)
{
}

void __swift::__runtime::llvm::llvm_unreachable_internal(__swift::__runtime::llvm *this, const char *a2, const char *a3)
{
  if (this) {
    uint64_t v5 = (const char *)this;
  }
  else {
    uint64_t v5 = "UNREACHABLE executed!";
  }
  abort();
}

uint64_t __swift::__runtime::llvm::set_fixed_execution_hash_seed(uint64_t this)
{
  __swift::__runtime::llvm::hashing::detail::fixed_seed_override = this;
  return this;
}

void __swift::__runtime::llvm::deallocate_buffer(__swift::__runtime::llvm *this, void *a2, std::align_val_t a3)
{
}

void *__swift::__runtime::llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  free(this[1]);
  unsigned int v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  int v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10) {
    unsigned int v4 = 32;
  }
  else {
    unsigned int v4 = v3;
  }
  *((_DWORD *)this + 4) = v4;
  uint64_t v5 = malloc_type_malloc(8 * v4, 0x3880A471uLL);
  if (!v5) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  }
  this[1] = v5;
  size_t v6 = 8 * *((unsigned int *)this + 4);

  return memset(v5, 255, v6);
}

const void **__swift::__runtime::llvm::SmallPtrSetImplBase::insert_imp_big(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4 = *((_DWORD *)this + 5);
  unsigned int v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40) {
      v5 *= 2;
    }
    else {
      unsigned int v5 = 128;
    }
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::SmallPtrSetImplBase::Grow(this, v5);
LABEL_3:
  int v6 = *((_DWORD *)this + 4) - 1;
  uint64_t v7 = *((void *)this + 1);
  unsigned int v8 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const void **)(v7 + 8 * v8);
  v10 = *result;
  if (*result == (const void *)-1)
  {
    v11 = 0;
LABEL_5:
    if (v11) {
      result = v11;
    }
    if (*result != a2)
    {
      if (*result == (const void *)-2) {
        --*((_DWORD *)this + 6);
      }
      else {
        ++*((_DWORD *)this + 5);
      }
      *result = a2;
    }
  }
  else
  {
    v11 = 0;
    int v12 = 1;
    while (v10 != a2)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (const void *)-2;
      }
      if (v13) {
        v11 = result;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v6;
      result = (const void **)(v7 + 8 * v8);
      v10 = *result;
      if (*result == (const void *)-1) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

void __swift::__runtime::llvm::SmallPtrSetImplBase::Grow(__swift::__runtime::llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  unsigned int v5 = *(uint64_t **)this;
  int v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = 16;
  if (v4 == *(uint64_t **)this) {
    uint64_t v6 = 20;
  }
  uint64_t v7 = *(unsigned int *)((char *)this + v6);
  unsigned int v8 = malloc_type_malloc(8 * a2, 0x3880A471uLL);
  if (!v8 && (a2 || (unsigned int v8 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  }
  *((void *)this + 1) = v8;
  *((_DWORD *)this + 4) = a2;
  memset(v8, 255, 8 * a2);
  if (v7)
  {
    v9 = v4;
    do
    {
      uint64_t v12 = *v9;
      if ((unint64_t)*v9 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v13 = *((_DWORD *)this + 4) - 1;
        uint64_t v14 = *((void *)this + 1);
        unsigned int v15 = v13 & ((v12 >> 4) ^ (v12 >> 9));
        v11 = (void *)(v14 + 8 * v15);
        uint64_t v16 = *v11;
        if (*v11 == -1)
        {
          v10 = 0;
LABEL_9:
          if (v10) {
            v11 = v10;
          }
        }
        else
        {
          v10 = 0;
          int v17 = 1;
          while (v16 != v12)
          {
            if (v10) {
              BOOL v18 = 0;
            }
            else {
              BOOL v18 = v16 == -2;
            }
            if (v18) {
              v10 = v11;
            }
            unsigned int v19 = v15 + v17++;
            unsigned int v15 = v19 & v13;
            v11 = (void *)(v14 + 8 * (v19 & v13));
            uint64_t v16 = *v11;
            if (*v11 == -1) {
              goto LABEL_9;
            }
          }
        }
        void *v11 = v12;
      }
      ++v9;
    }
    while (v9 != &v4[v7]);
  }
  if (v4 != v5) {
    free(v4);
  }
  *(void *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **__swift::__runtime::llvm::SmallPtrSetImplBase::FindBucketFor(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2 = *((_DWORD *)this + 4) - 1;
  uint64_t v3 = *((void *)this + 1);
  unsigned int v4 = ((a2 >> 4) ^ (a2 >> 9)) & v2;
  result = (const void **)(v3 + 8 * v4);
  uint64_t v6 = *result;
  if (*result == (const void *)-1)
  {
    uint64_t v7 = 0;
LABEL_3:
    if (v7) {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 1;
    while (v6 != a2)
    {
      if (v7) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v6 == (const void *)-2;
      }
      if (v9) {
        uint64_t v7 = result;
      }
      unsigned int v10 = v4 + v8++;
      unsigned int v4 = v10 & v2;
      result = (const void **)(v3 + 8 * v4);
      uint64_t v6 = *result;
      if (*result == (const void *)-1) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

__swift::__runtime::llvm::SmallPtrSetImplBase *__swift::__runtime::llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const void **a2, const __swift::__runtime::llvm::SmallPtrSetImplBase *a3)
{
  *(void *)this = a2;
  unsigned int v5 = (const void *)*((void *)a3 + 1);
  if (v5 == *(const void **)a3)
  {
    uint64_t v7 = a2;
    *((void *)this + 1) = a2;
  }
  else
  {
    uint64_t v6 = *((unsigned int *)a3 + 4);
    uint64_t v7 = (const void **)malloc_type_malloc(8 * v6, 0x3880A471uLL);
    if (!v7 && (v6 || (uint64_t v7 = (const void **)malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
    }
    *((void *)this + 1) = v7;
    unsigned int v5 = *(const void **)a3;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4);
  int v8 = (const void *)*((void *)a3 + 1);
  int v9 = *((_DWORD *)a3 + 5);
  if (v8 == v5) {
    unsigned int v10 = *((_DWORD *)a3 + 5);
  }
  else {
    unsigned int v10 = *((_DWORD *)a3 + 4);
  }
  if (v10)
  {
    memmove(v7, v8, 8 * v10);
    int v9 = *((_DWORD *)a3 + 5);
  }
  int v11 = *((_DWORD *)a3 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return this;
}

void **__swift::__runtime::llvm::SmallPtrSetImplBase::CopyHelper(void **this, const __swift::__runtime::llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v3 = this;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  unsigned int v4 = (const void *)*((void *)a2 + 1);
  int v5 = *((_DWORD *)a2 + 5);
  if (v4 == *(const void **)a2) {
    unsigned int v6 = *((_DWORD *)a2 + 5);
  }
  else {
    unsigned int v6 = *((_DWORD *)a2 + 4);
  }
  if (v6)
  {
    this = (void **)memmove(this[1], v4, 8 * v6);
    int v5 = *((_DWORD *)a2 + 5);
  }
  int v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)v3 + 5) = v5;
  *((_DWORD *)v3 + 6) = v7;
  return this;
}

uint64_t __swift::__runtime::llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(uint64_t a1, void *__dst, int a3, uint64_t *a4)
{
  *(void *)a1 = __dst;
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    *(void *)(a1 + 8) = __dst;
    uint64_t v9 = *((unsigned int *)a4 + 5);
    if (v9) {
      memmove(__dst, (const void *)a4[1], 8 * v9);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(void *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(void *)a1 = __dst;
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    *(void *)(a1 + 8) = __dst;
    uint64_t v9 = *((unsigned int *)a4 + 5);
    if (v9) {
      memmove(__dst, (const void *)a4[1], 8 * v9);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(void *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

double __swift::__runtime::llvm::SmallPtrSetImplBase::MoveHelper(uint64_t a1, int a2, double *a3)
{
  double v7 = *a3;
  uint64_t v6 = *((void *)a3 + 1);
  if (v6 == *(void *)a3)
  {
    uint64_t v8 = *(void **)a1;
    *(void *)(a1 + 8) = *(void *)a1;
    uint64_t v9 = *((unsigned int *)a3 + 5);
    if (v9) {
      memmove(v8, *((const void **)a3 + 1), 8 * v9);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v6;
    a3[1] = v7;
  }
  double result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

void *__swift::__runtime::llvm::SmallPtrSetImplBase::CopyFrom(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const __swift::__runtime::llvm::SmallPtrSetImplBase *a2)
{
  double result = (void *)*((void *)this + 1);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (result == *(void **)this)
  {
    if (v5 != v6)
    {
      uint64_t v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == v7) {
        goto LABEL_14;
      }
      double result = malloc_type_malloc(8 * v7, 0x3880A471uLL);
      if (!result)
      {
LABEL_9:
        if (v7 || (double result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0) {
          __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
        }
      }
    }
  }
  else
  {
    if (v5 != v6)
    {
      uint64_t v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == v7) {
        goto LABEL_14;
      }
      double result = malloc_type_realloc(result, 8 * v7, 0x88FD67E7uLL);
      if (result) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
    free(result);
    double result = *(void **)this;
  }
LABEL_13:
  *((void *)this + 1) = result;
LABEL_14:
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  uint64_t v8 = (const void *)*((void *)a2 + 1);
  int v9 = *((_DWORD *)a2 + 5);
  if (v8 == *(const void **)a2) {
    unsigned int v10 = *((_DWORD *)a2 + 5);
  }
  else {
    unsigned int v10 = *((_DWORD *)a2 + 4);
  }
  if (v10)
  {
    double result = memmove(result, v8, 8 * v10);
    int v9 = *((_DWORD *)a2 + 5);
  }
  int v11 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return result;
}

double __swift::__runtime::llvm::SmallPtrSetImplBase::MoveFrom(uint64_t a1, int a2, double *a3)
{
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6 != *(void **)a1) {
    free(v6);
  }
  double v8 = *a3;
  uint64_t v7 = *((void *)a3 + 1);
  if (v7 == *(void *)a3)
  {
    int v9 = *(void **)a1;
    *(void *)(a1 + 8) = *(void *)a1;
    uint64_t v10 = *((unsigned int *)a3 + 5);
    if (v10) {
      memmove(v9, *((const void **)a3 + 1), 8 * v10);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v7;
    a3[1] = v8;
  }
  double result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

__swift::__runtime::llvm::SmallPtrSetImplBase *__swift::__runtime::llvm::SmallPtrSetImplBase::swap(__swift::__runtime::llvm::SmallPtrSetImplBase *this, __swift::__runtime::llvm::SmallPtrSetImplBase *a2)
{
  if (this == a2) {
    return this;
  }
  uint64_t v3 = this;
  uint64_t v5 = this;
  this = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)this;
  unsigned int v4 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)*((void *)v5 + 1);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  uint64_t v7 = *(void **)a2;
  if (v4 == this)
  {
    if (v6 != v7)
    {
      uint64_t v9 = *((unsigned int *)v3 + 5);
      if (v9)
      {
        this = (__swift::__runtime::llvm::SmallPtrSetImplBase *)memmove(*(void **)a2, v4, 8 * v9);
        uint64_t v7 = *(void **)a2;
        uint64_t v6 = (void *)*((void *)a2 + 1);
      }
      int v10 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = *((_DWORD *)v3 + 4);
      *((_DWORD *)v3 + 4) = v10;
      int v11 = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = *((_DWORD *)v3 + 5);
      *((_DWORD *)v3 + 5) = v11;
      int v12 = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)v3 + 6);
      *((_DWORD *)v3 + 6) = v12;
      *((void *)v3 + 1) = v6;
      *((void *)a2 + 1) = v7;
      return this;
    }
    uint64_t v17 = *((unsigned int *)a2 + 5);
    uint64_t v18 = *((unsigned int *)v3 + 5);
    if (v17 >= v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = v17;
    }
    uint64_t v20 = 8 * v19;
    if (v19)
    {
      unint64_t v21 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v21 < 9)
      {
        v22 = this;
LABEL_26:
        v33 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)((char *)this + 8 * v19);
        do
        {
          uint64_t v34 = *(void *)v22;
          *(void *)v22 = *v6;
          v22 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)((char *)v22 + 8);
          *v6++ = v34;
        }
        while (v22 != v33);
        goto LABEL_28;
      }
      BOOL v23 = this >= (__swift::__runtime::llvm::SmallPtrSetImplBase *)&v6[(unint64_t)v20 / 8]
         || v6 >= (void *)((char *)this + v20);
      v22 = this;
      if (!v23) {
        goto LABEL_26;
      }
      unint64_t v24 = v21 + 1;
      uint64_t v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      v26 = &v6[v25];
      v22 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)((char *)this + v25 * 8);
      v27 = (long long *)((char *)this + 16);
      v28 = (long long *)(v6 + 2);
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v30 = *(v27 - 1);
        long long v31 = *v27;
        long long v32 = *v28;
        *(v27 - 1) = *(v28 - 1);
        long long *v27 = v32;
        *(v28 - 1) = v30;
        long long *v28 = v31;
        v27 += 2;
        v28 += 2;
        v29 -= 4;
      }
      while (v29);
      uint64_t v6 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_26;
      }
    }
LABEL_28:
    if (v18 <= v17)
    {
      if (v17 <= v18) {
        goto LABEL_33;
      }
      v35 = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)a2;
      uint64_t v36 = *(void *)a2 + 8 * v17;
      v37 = v3;
    }
    else
    {
      v35 = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)v3;
      uint64_t v36 = *(void *)v3 + 8 * v18;
      v37 = a2;
    }
    this = (__swift::__runtime::llvm::SmallPtrSetImplBase *)memmove((void *)(*(void *)v37 + v20), (char *)v35 + v20, v36 - ((void)v35 + v20));
    goto LABEL_33;
  }
  if (v6 != v7)
  {
    *((void *)v3 + 1) = v6;
    *((void *)a2 + 1) = v4;
    int v8 = *((_DWORD *)v3 + 4);
    *((_DWORD *)v3 + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v8;
LABEL_33:
    int v38 = *((_DWORD *)v3 + 5);
    *((_DWORD *)v3 + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v38;
    int v39 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v39;
    return this;
  }
  uint64_t v13 = *((unsigned int *)a2 + 5);
  if (v13)
  {
    memmove(this, v6, 8 * v13);
    this = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)v3;
    unsigned int v4 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)*((void *)v3 + 1);
  }
  int v14 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = *((_DWORD *)v3 + 4);
  *((_DWORD *)v3 + 4) = v14;
  int v15 = *((_DWORD *)v3 + 5);
  *((_DWORD *)v3 + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v15;
  int v16 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v16;
  *((void *)a2 + 1) = v4;
  *((void *)v3 + 1) = this;
  return this;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::SizeTypeMax()
{
  return 0xFFFFFFFFLL;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::SmallVectorBase(uint64_t result, uint64_t a2, int a3)
{
  *(void *)double result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

{
  *(void *)double result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (HIDWORD(a2)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation", (const char *)&dword_0 + 1);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  }
  unint64_t v5 = (2 * v4) | 1;
  if (v5 <= a2) {
    unint64_t v5 = a2;
  }
  if (v5 >= 0xFFFFFFFF) {
    unint64_t v5 = 0xFFFFFFFFLL;
  }
  *a4 = v5;
  unint64_t v6 = v5 * a3;
  double result = malloc_type_malloc(v5 * a3, 0x3880A471uLL);
  if (!result && (v6 || (double result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  }
  return result;
}

{
  return __swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, a3, a4);
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::capacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (HIDWORD(a3)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation", (const char *)&dword_0 + 1);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  }
  unint64_t v7 = (2 * v5) | 1;
  if (v7 <= a3) {
    unint64_t v7 = a3;
  }
  if (v7 >= 0xFFFFFFFF) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = v8 * a4;
  if (*(void *)a1 == a2)
  {
    int v12 = malloc_type_malloc(v8 * a4, 0x3880A471uLL);
    if (!v12 && (v10 || (int v12 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
LABEL_20:
    }
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
    double result = memcpy(v12, *(const void **)a1, *(unsigned int *)(a1 + 8) * a4);
  }
  else
  {
    double result = malloc_type_realloc(v9, v8 * a4, 0x88FD67E7uLL);
    int v12 = result;
    if (!result)
    {
      if (v10) {
        goto LABEL_20;
      }
      double result = malloc_type_malloc(1uLL, 0x3880A471uLL);
      int v12 = result;
      if (!result) {
        goto LABEL_20;
      }
    }
  }
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 12) = v8;
  return result;
}

{
  return __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a2, a3, a4);
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

BOOL __swift::__runtime::llvm::SmallVectorBase<unsigned int>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::set_size(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::SizeTypeMax()
{
  return -1;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::SmallVectorBase(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

{
  *double result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  }
  unint64_t v5 = (2 * v4) | 1;
  if (v5 <= a2) {
    unint64_t v5 = a2;
  }
  *a4 = v5;
  unint64_t v6 = v5 * a3;
  double result = malloc_type_malloc(v5 * a3, 0x3880A471uLL);
  if (!result && (v6 || (double result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  }
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::capacity(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  }
  unint64_t v7 = (2 * v4) | 1;
  if (v7 <= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = v7;
  }
  uint64_t v9 = *(void **)a1;
  unint64_t v10 = v8 * a4;
  if (v9 == a2)
  {
    int v12 = malloc_type_malloc(v8 * a4, 0x3880A471uLL);
    if (!v12 && (v10 || (int v12 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
LABEL_16:
    }
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
    double result = memcpy(v12, *(const void **)a1, *(void *)(a1 + 8) * a4);
  }
  else
  {
    double result = malloc_type_realloc(v9, v8 * a4, 0x88FD67E7uLL);
    int v12 = result;
    if (!result)
    {
      if (v10) {
        goto LABEL_16;
      }
      double result = malloc_type_malloc(1uLL, 0x3880A471uLL);
      int v12 = result;
      if (!result) {
        goto LABEL_16;
      }
    }
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::size(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::empty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::set_size(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::compare_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  if (a3 >= v3) {
    unint64_t v4 = (unint64_t)a1[1];
  }
  else {
    unint64_t v4 = a3;
  }
  if (v4)
  {
    unint64_t v5 = *a1;
    while (1)
    {
      int v7 = *v5++;
      unsigned __int8 v6 = v7;
      unsigned __int8 v8 = v7 + 32;
      if ((v7 - 65) < 0x1A) {
        unsigned __int8 v6 = v8;
      }
      int v10 = *a2++;
      unsigned __int8 v9 = v10;
      unsigned __int8 v11 = v10 + 32;
      if ((v10 - 65) < 0x1A) {
        unsigned __int8 v9 = v11;
      }
      if (v6 != v9) {
        break;
      }
      if (!--v4) {
        goto LABEL_12;
      }
    }
    if (v6 < v9) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  else
  {
LABEL_12:
    BOOL v12 = v3 == a3;
    if (v3 < a3) {
      unsigned int v13 = -1;
    }
    else {
      unsigned int v13 = 1;
    }
    if (v12) {
      return 0;
    }
    else {
      return v13;
    }
  }
}

BOOL __swift::__runtime::llvm::StringRef::starts_with_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  if ((unint64_t)a1[1] < a3) {
    return 0;
  }
  if (!a3) {
    return 1;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = a3 - 1;
  do
  {
    int v7 = *v4++;
    unsigned __int8 v6 = v7;
    unsigned __int8 v8 = v7 + 32;
    if ((v7 - 65) < 0x1A) {
      unsigned __int8 v6 = v8;
    }
    int v9 = v6;
    int v11 = *a2++;
    unsigned __int8 v10 = v11;
    unsigned __int8 v12 = v11 + 32;
    if ((v11 - 65) >= 0x1A) {
      unsigned __int8 v13 = v10;
    }
    else {
      unsigned __int8 v13 = v12;
    }
    BOOL v15 = v5-- != 0;
    BOOL result = v9 == v13;
  }
  while (v9 == v13 && v15);
  return result;
}

BOOL __swift::__runtime::llvm::StringRef::endswith_insensitive(void *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  if (v3 < a3) {
    return 0;
  }
  if (!a3) {
    return 1;
  }
  unint64_t v5 = *a1 + v3;
  uint64_t v6 = -(uint64_t)a3;
  do
  {
    int v7 = *(unsigned __int8 *)(v5 + v6);
    if ((v7 - 65) < 0x1A) {
      LOBYTE(v7) = v7 + 32;
    }
    int v9 = *a2++;
    unsigned __int8 v8 = v9;
    unsigned __int8 v10 = v9 + 32;
    if ((v9 - 65) < 0x1A) {
      unsigned __int8 v8 = v10;
    }
    BOOL result = v7 == v8;
  }
  while (v7 == v8 && v6++ != -1);
  return result;
}

unint64_t __swift::__runtime::llvm::StringRef::find_insensitive(__swift::__runtime::llvm::StringRef *this, int a2, unint64_t a3)
{
  if ((a2 - 65) >= 0x1A) {
    unsigned __int8 v4 = a2;
  }
  else {
    unsigned __int8 v4 = a2 + 32;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 >= a3) {
    unint64_t result = a3;
  }
  else {
    unint64_t result = *((void *)this + 1);
  }
  if (v5 == result) {
    return -1;
  }
  uint64_t v7 = *(void *)this;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(v7 + result);
    if ((v8 - 65) < 0x1A) {
      LOBYTE(v8) = v8 + 32;
    }
    if (v8 == v4) {
      break;
    }
    if (v5 == ++result) {
      return -1;
    }
  }
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::compare_numeric(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[1];
  if (a3 >= v5) {
    unint64_t v6 = a1[1];
  }
  else {
    unint64_t v6 = a3;
  }
  if (!v6)
  {
LABEL_36:
    if (v5 < a3) {
      unsigned int v32 = -1;
    }
    else {
      unsigned int v32 = 1;
    }
    if (v5 == a3) {
      return 0;
    }
    else {
      return v32;
    }
  }
  uint64_t v7 = a2;
  unint64_t v8 = 0;
  unint64_t v9 = v6 + 1;
  uint64_t v10 = *a1;
  uint64_t v11 = -(uint64_t)v6;
  uint64_t v12 = *a1 + 1;
  uint64_t v13 = a2 + 1;
  while (1)
  {
    unsigned int v15 = *(unsigned __int8 *)(v10 + v8);
    unsigned int v16 = *(unsigned __int8 *)(v7 + v8);
    if (v15 - 48 <= 9 && v16 - 48 <= 9) {
      break;
    }
    unint64_t v14 = v8;
    if (v15 != v16)
    {
      if (v15 < v16) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    }
LABEL_7:
    unint64_t v8 = v14 + 1;
    if (v14 + 1 == v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = v13;
  uint64_t v20 = v12;
  do
  {
    if (!(v11 + v8 + v18))
    {
      unint64_t v14 = v6;
      size_t v28 = v9 - v8;
      if (v9 == v8) {
        goto LABEL_7;
      }
      goto LABEL_34;
    }
    unint64_t v26 = v8 + v18 + 1;
    if (v26 >= v5)
    {
      int v22 = 0;
      if (v26 >= a3)
      {
LABEL_29:
        int v24 = 5;
        unsigned int v23 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(v20 + v8) - 48 < 0xA;
      if (v26 >= a3) {
        goto LABEL_29;
      }
    }
    unsigned int v21 = (*(unsigned char *)(v19 + v8) - 48);
    v22 ^= v21 < 0xA;
    if (v21 < 0xA) {
      unsigned int v23 = -1;
    }
    else {
      unsigned int v23 = 1;
    }
    int v24 = 0;
LABEL_17:
    if (v22) {
      uint64_t v3 = v23;
    }
    else {
      uint64_t v3 = v3;
    }
    if (v22) {
      int v25 = 1;
    }
    else {
      int v25 = v24;
    }
    ++v18;
    ++v20;
    ++v19;
  }
  while (!v25);
  if (v25 != 5) {
    return v3;
  }
  uint64_t v27 = v8 + v18;
  unint64_t v14 = v27 - 1;
  size_t v28 = v27 - v8;
  if (v27 == v8) {
    goto LABEL_7;
  }
LABEL_34:
  uint64_t v29 = v10;
  uint64_t v30 = v7;
  unint64_t v34 = v6;
  int v31 = memcmp((const void *)(v10 + v8), (const void *)(v7 + v8), v28);
  unint64_t v6 = v34;
  uint64_t v7 = v30;
  uint64_t v10 = v29;
  if (!v31) {
    goto LABEL_7;
  }
  return (v31 >> 31) | 1u;
}

void *__swift::__runtime::llvm::StringRef::lower@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = (void *)a2;
  unint64_t v3 = this[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned __int8 v4 = (int8x16_t *)*this;
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    this = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    void *v2 = this;
    int v2 = this;
    if (v3 >= 0x20 && (unint64_t)((char *)this - (char *)v4) >= 0x20)
    {
      uint64_t v7 = (void *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v8 = &v4->u8[v3 & 0xFFFFFFFFFFFFFFE0];
      unint64_t v9 = v4 + 1;
      uint64_t v10 = (int8x16_t *)(this + 2);
      v11.i64[0] = 0xBFBFBFBFBFBFBFBFLL;
      v11.i64[1] = 0xBFBFBFBFBFBFBFBFLL;
      v12.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v12.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v13.i64[0] = 0x2020202020202020;
      v13.i64[1] = 0x2020202020202020;
      unint64_t v14 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(*v9, v11)), vaddq_s8(*v9, v13), *v9);
        v10[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(v9[-1], v11)), vaddq_s8(v9[-1], v13), v9[-1]);
        int8x16_t *v10 = v15;
        v9 += 2;
        v10 += 2;
        v14 -= 32;
      }
      while (v14);
      int v2 = (void *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v3;
    if (!v3) {
      goto LABEL_18;
    }
  }
  uint64_t v7 = v2;
  unint64_t v8 = (unsigned __int8 *)v4;
LABEL_14:
  int v2 = v7;
  do
  {
    int v17 = *v8++;
    char v16 = v17;
    char v18 = v17 + 32;
    if ((v17 - 65) < 0x1A) {
      char v16 = v18;
    }
    *(unsigned char *)int v2 = v16;
    int v2 = (void *)((char *)v2 + 1);
  }
  while (v8 != (unsigned __int8 *)&v4->i8[v3]);
LABEL_18:
  *(unsigned char *)int v2 = 0;
  return this;
}

void *__swift::__runtime::llvm::StringRef::upper@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = (void *)a2;
  unint64_t v3 = this[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned __int8 v4 = (int8x16_t *)*this;
  if (v3 >= 0x17)
  {
    uint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = v5 + 1;
    this = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    void *v2 = this;
    int v2 = this;
    if (v3 >= 0x20 && (unint64_t)((char *)this - (char *)v4) >= 0x20)
    {
      uint64_t v7 = (void *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v8 = &v4->u8[v3 & 0xFFFFFFFFFFFFFFE0];
      unint64_t v9 = v4 + 1;
      uint64_t v10 = (int8x16_t *)(this + 2);
      v11.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
      v11.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
      v12.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v12.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v13.i64[0] = 0xE0E0E0E0E0E0E0E0;
      v13.i64[1] = 0xE0E0E0E0E0E0E0E0;
      unint64_t v14 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(*v9, v11)), vaddq_s8(*v9, v13), *v9);
        v10[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(v9[-1], v11)), vaddq_s8(v9[-1], v13), v9[-1]);
        int8x16_t *v10 = v15;
        v9 += 2;
        v10 += 2;
        v14 -= 32;
      }
      while (v14);
      int v2 = (void *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 23) = v3;
    if (!v3) {
      goto LABEL_18;
    }
  }
  uint64_t v7 = v2;
  unint64_t v8 = (unsigned __int8 *)v4;
LABEL_14:
  int v2 = v7;
  do
  {
    int v17 = *v8++;
    char v16 = v17;
    char v18 = v17 - 32;
    if ((v17 - 97) < 0x1A) {
      char v16 = v18;
    }
    *(unsigned char *)int v2 = v16;
    int v2 = (void *)((char *)v2 + 1);
  }
  while (v8 != (unsigned __int8 *)&v4->i8[v3]);
LABEL_18:
  *(unsigned char *)int v2 = 0;
  return this;
}

uint64_t __swift::__runtime::llvm::StringRef::find(uint64_t *a1, unsigned __int8 *a2, size_t a3, unint64_t a4)
{
  unint64_t v5 = a1[1];
  size_t v6 = v5 - a4;
  if (v5 < a4) {
    return -1;
  }
  unint64_t v7 = a4;
  if (!a3) {
    return v7;
  }
  if (v6 < a3) {
    return -1;
  }
  uint64_t v10 = *a1;
  int8x16_t v11 = (unsigned __int8 *)(*a1 + a4);
  size_t v12 = a3 - 1;
  if (a3 == 1)
  {
    int8x16_t v13 = memchr((void *)(*a1 + a4), (char)*a2, v6);
    if (v13) {
      return (uint64_t)v13 - v10;
    }
    else {
      return -1;
    }
  }
  unint64_t v14 = (unint64_t)&v11[v6 - a3 + 1];
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      uint64_t result = -1;
      if (v10 + v7 >= v14) {
        return result;
      }
    }
    return v7;
  }
  int8x16_t v25 = vdupq_n_s8(a3);
  int8x16_t v26 = v25;
  v24[12] = v25;
  v24[13] = v25;
  v24[10] = v25;
  v24[11] = v25;
  v24[8] = v25;
  v24[9] = v25;
  v24[6] = v25;
  v24[7] = v25;
  v24[4] = v25;
  v24[5] = v25;
  v24[2] = v25;
  v24[3] = v25;
  v24[0] = v25;
  v24[1] = v25;
  if (a3 < 3)
  {
    unint64_t v15 = 0;
    int v16 = 0;
LABEL_13:
    unsigned int v17 = v16 + 1;
    do
    {
      *((unsigned char *)v24 + a2[v15]) = v12 - v15;
      unint64_t v15 = v17++;
    }
    while (v12 != v15);
    goto LABEL_15;
  }
  int v16 = 0;
  unint64_t v15 = 0;
  size_t v20 = a3 - 2;
  if (HIDWORD(v20)) {
    goto LABEL_13;
  }
  unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
  int v16 = v12 & 0xFFFFFFFE;
  unsigned int v21 = a2 + 1;
  unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *((unsigned char *)v24 + *(v21 - 1)) = v20 + 1;
    unsigned int v23 = *v21;
    v21 += 2;
    *((unsigned char *)v24 + v23) = v20;
    v20 -= 2;
    v22 -= 2;
  }
  while (v22);
  if (v12 != v15) {
    goto LABEL_13;
  }
LABEL_15:
  int v18 = a2[v12];
  while (1)
  {
    uint64_t v19 = v11[v12];
    if (v19 == v18 && !memcmp(v11, a2, v12)) {
      break;
    }
    v11 += *((unsigned __int8 *)v24 + v19);
    if ((unint64_t)v11 >= v14) {
      return -1;
    }
  }
  return (uint64_t)&v11[-v10];
}

uint64_t __swift::__runtime::llvm::StringRef::find_insensitive(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  unint64_t v6 = v4 - v5;
  if (v6 < a3) {
    return -1;
  }
  unint64_t v8 = *a1 + v5;
  unint64_t v9 = a4;
  uint64_t result = -1;
  while (a3)
  {
    uint64_t v10 = 0;
    while (1)
    {
      int v11 = *(unsigned __int8 *)(v8 + v10);
      if ((v11 - 65) < 0x1A) {
        LOBYTE(v11) = v11 + 32;
      }
      int v12 = *(unsigned __int8 *)(a2 + v10);
      if ((v12 - 65) < 0x1A) {
        LOBYTE(v12) = v12 + 32;
      }
      if (v11 != v12) {
        break;
      }
      if (a3 == ++v10) {
        return v9;
      }
    }
    ++v8;
    --v6;
    ++v9;
    if (v6 < a3) {
      return result;
    }
  }
  return a4;
}

unint64_t __swift::__runtime::llvm::StringRef::rfind_insensitive(__swift::__runtime::llvm::StringRef *this, int a2, unint64_t a3)
{
  if (*((void *)this + 1) >= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = *((void *)this + 1);
  }
  unsigned __int8 v4 = a2 + 32;
  if ((a2 - 65) >= 0x1A) {
    unsigned __int8 v4 = a2;
  }
  while (v3)
  {
    unint64_t v5 = v3 - 1;
    int v6 = *(unsigned __int8 *)(*(void *)this + v3 - 1);
    if ((v6 - 65) < 0x1A) {
      LOBYTE(v6) = v6 + 32;
    }
    BOOL v7 = v6 == v4;
    unint64_t v3 = v5;
    if (v7) {
      return v5;
    }
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::StringRef::rfind(uint64_t *a1, const void *a2, size_t a3)
{
  size_t v3 = a1[1];
  size_t v4 = v3 - a3;
  if (v3 < a3) {
    return -1;
  }
  size_t v5 = v4 + 1;
  if (v4 == -1) {
    return -1;
  }
  uint64_t v9 = *a1;
  while (1)
  {
    --v5;
    size_t v10 = v3 >= v4 ? v4 : v3;
    if (a3 <= v3 - v10)
    {
      if (!a3) {
        return v5;
      }
      if (!memcmp((const void *)(v9 + v10), a2, a3)) {
        break;
      }
    }
    if (--v4 == -1) {
      return -1;
    }
  }
  return v4;
}

uint64_t __swift::__runtime::llvm::StringRef::rfind_insensitive(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = v3 - a3;
  if (v3 >= a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 != -1)
    {
      uint64_t v7 = *a1;
      while (1)
      {
        if (v3 >= v4) {
          unint64_t v8 = v4;
        }
        else {
          unint64_t v8 = v3;
        }
        --v5;
        unint64_t v9 = v3 - v5;
        if (v3 < v5) {
          unint64_t v9 = 0;
        }
        if (a3 <= v9)
        {
          if (!a3) {
            return v5;
          }
          size_t v10 = (unsigned __int8 *)(v7 + v8);
          int v11 = a2;
          unint64_t v12 = a3;
          while (1)
          {
            int v14 = *v10++;
            char v13 = v14;
            char v15 = v14 + 32;
            if ((v14 - 65) < 0x1A) {
              char v13 = v15;
            }
            int v17 = *v11++;
            char v16 = v17;
            char v18 = v17 + 32;
            if ((v17 - 65) < 0x1A) {
              char v16 = v18;
            }
            if (v13 != v16) {
              break;
            }
            if (!--v12) {
              return v5;
            }
          }
        }
        --v4;
        uint64_t result = -1;
        if (!v5) {
          return result;
        }
      }
    }
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::StringRef::find_first_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

unint64_t __swift::__runtime::llvm::StringRef::find_first_not_of(__swift::__runtime::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3 <= a3) {
    return -1;
  }
  while (*(unsigned __int8 *)(*(void *)this + a3) == a2)
  {
    if (v3 == ++a3) {
      return -1;
    }
  }
  return a3;
}

uint64_t __swift::__runtime::llvm::StringRef::find_first_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t __swift::__runtime::llvm::StringRef::find_last_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if (v8) {
      return v6;
    }
  }
  return -1;
}

unint64_t __swift::__runtime::llvm::StringRef::find_last_not_of(__swift::__runtime::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  if (*((void *)this + 1) >= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = *((void *)this + 1);
  }
  while (v3)
  {
    unint64_t v4 = v3 - 1;
    int v5 = *(unsigned __int8 *)(*(void *)this + v3-- - 1);
    if (v5 != a2) {
      return v4;
    }
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::StringRef::find_last_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }
  return -1;
}

_OWORD *__swift::__runtime::llvm::StringRef::split(_OWORD *result, uint64_t a2, unsigned __int8 *a3, size_t a4, int a5, int a6)
{
  long long v21 = *result;
  if (a5)
  {
    int v8 = a5;
    unint64_t v11 = *((void *)&v21 + 1);
    do
    {
      uint64_t result = (_OWORD *)__swift::__runtime::llvm::StringRef::find((uint64_t *)&v21, a3, a4, 0);
      if (result == (_OWORD *)-1) {
        break;
      }
      char v16 = result;
      uint64_t v17 = v21;
      if (result || a6)
      {
        if (v11 >= (unint64_t)result) {
          unint64_t v12 = result;
        }
        else {
          unint64_t v12 = (_OWORD *)v11;
        }
        unint64_t v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12))
        {
          uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
          unint64_t v13 = *(unsigned int *)(a2 + 8);
        }
        int v14 = (void *)(*(void *)a2 + 16 * v13);
        *int v14 = v17;
        v14[1] = v12;
        ++*(_DWORD *)(a2 + 8);
      }
      unint64_t v15 = (unint64_t)v16 + a4;
      if (v11 < (unint64_t)v16 + a4) {
        unint64_t v15 = v11;
      }
      v11 -= v15;
      *(void *)&long long v21 = v17 + v15;
      *((void *)&v21 + 1) = v11;
      --v8;
    }
    while (v8);
  }
  else
  {
    unint64_t v11 = *((void *)&v21 + 1);
  }
  if ((a6 & 1) != 0 || v11)
  {
    uint64_t v18 = v21;
    uint64_t v19 = *(unsigned int *)(a2 + 8);
    if (v19 >= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
      LODWORD(v19) = *(_DWORD *)(a2 + 8);
    }
    size_t v20 = (void *)(*(void *)a2 + 16 * v19);
    *size_t v20 = v18;
    v20[1] = v11;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

char *__swift::__runtime::llvm::StringRef::split(char *result, uint64_t a2, int __c, int a4, int a5)
{
  unint64_t v7 = *(char **)result;
  size_t v8 = *((void *)result + 1);
  if (!a4)
  {
LABEL_19:
    if ((a5 & 1) == 0 && !v8) {
      return result;
    }
    goto LABEL_24;
  }
  int v9 = a4;
  while (v8)
  {
    uint64_t result = (char *)memchr(v7, __c, v8);
    if (!result) {
      goto LABEL_24;
    }
    size_t v15 = result - v7;
    if (result - v7 == -1) {
      goto LABEL_24;
    }
    if (result != v7 || a5)
    {
      if (v8 >= v15) {
        size_t v11 = result - v7;
      }
      else {
        size_t v11 = v8;
      }
      unint64_t v12 = *(unsigned int *)(a2 + 8);
      if (v12 >= *(unsigned int *)(a2 + 12))
      {
        uint64_t result = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
        unint64_t v12 = *(unsigned int *)(a2 + 8);
      }
      unint64_t v13 = (void *)(*(void *)a2 + 16 * v12);
      *unint64_t v13 = v7;
      v13[1] = v11;
      ++*(_DWORD *)(a2 + 8);
    }
    if (v8 >= v15 + 1) {
      size_t v14 = v15 + 1;
    }
    else {
      size_t v14 = v8;
    }
    v7 += v14;
    v8 -= v14;
    if (!--v9) {
      goto LABEL_19;
    }
  }
  if (a5)
  {
    size_t v8 = 0;
LABEL_24:
    uint64_t v16 = *(unsigned int *)(a2 + 8);
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      uint64_t result = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
      LODWORD(v16) = *(_DWORD *)(a2 + 8);
    }
    uint64_t v17 = (void *)(*(void *)a2 + 16 * v16);
    *uint64_t v17 = v7;
    v17[1] = v8;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::count(void *a1, const void *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = a1[1];
  size_t v6 = v5 - a3;
  if (v5 < a3) {
    return 0;
  }
  size_t v7 = v6 + 1;
  if (v6 == -1) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v11 = 0;
  do
  {
    if (v5 >= v11) {
      unint64_t v14 = v11;
    }
    else {
      unint64_t v14 = v5;
    }
    if (a3 <= v5 - v14)
    {
      int v12 = memcmp((const void *)(*a1 + v14), a2, a3);
      if (v12) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = a3;
      }
      if (!v12) {
        ++v8;
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
    v11 += v13;
  }
  while (v11 < v7);
  return v8;
}

uint64_t __swift::__runtime::llvm::consumeUnsignedInteger(__swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *((void *)this + 1);
  if (a2)
  {
    if (!v4) {
      return 1;
    }
    goto LABEL_3;
  }
  if (v4 < 2)
  {
    LODWORD(a2) = 10;
    if (!v4) {
      return 1;
    }
    goto LABEL_3;
  }
  uint64_t v13 = *(void *)this;
  if (**(_WORD **)this == 30768 || *(_WORD *)v13 == 22576)
  {
    v4 -= 2;
    LODWORD(a2) = 16;
    *(void *)this = v13 + 2;
    *((void *)this + 1) = v4;
    if (!v4) {
      return 1;
    }
  }
  else if (*(_WORD *)v13 == 25136 || *(_WORD *)v13 == 16944)
  {
    LODWORD(a2) = 2;
    v4 -= 2;
    *(void *)this = v13 + 2;
    *((void *)this + 1) = v4;
    if (!v4) {
      return 1;
    }
  }
  else
  {
    if (*(_WORD *)v13 == 28464)
    {
      uint64_t v14 = v13 + 2;
      v4 -= 2;
LABEL_34:
      LODWORD(a2) = 8;
      *(void *)this = v14;
      *((void *)this + 1) = v4;
      if (!v4) {
        return 1;
      }
      goto LABEL_3;
    }
    if (*(unsigned char *)v13 == 48)
    {
      int v15 = *(unsigned __int8 *)(v13 + 1);
      uint64_t v14 = v13 + 1;
      if ((v15 - 48) <= 9)
      {
        --v4;
        goto LABEL_34;
      }
    }
    LODWORD(a2) = 10;
  }
LABEL_3:
  unint64_t v5 = 0;
  size_t v6 = *(unsigned __int8 **)this;
  *a3 = 0;
  unint64_t v7 = v4;
  do
  {
    if ((char)*v6 < 48) {
      break;
    }
    unsigned int v8 = *v6;
    if (v8 >= 0x3A)
    {
      if (v8 < 0x61)
      {
        if (v8 - 65 > 0x19) {
          break;
        }
        int v9 = -55;
      }
      else
      {
        if (v8 >= 0x7B) {
          break;
        }
        int v9 = -87;
      }
    }
    else
    {
      int v9 = -48;
    }
    unsigned int v10 = v9 + v8;
    if (v10 >= a2) {
      break;
    }
    unint64_t v11 = v5 * a2 + v10;
    *a3 = v11;
    if (v11 / a2 < v5) {
      return 1;
    }
    ++v6;
    unint64_t v5 = v11;
    --v7;
  }
  while (v7);
  if (v4 != v7)
  {
    *(void *)this = v6;
    *((void *)this + 1) = v7;
    return 0;
  }
  return 1;
}

uint64_t __swift::__runtime::llvm::consumeSignedInteger(__swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v12 = 0;
  uint64_t v6 = *((void *)this + 1);
  if (v6 && **(unsigned char **)this == 45)
  {
    *(void *)&long long v11 = *(void *)this + 1;
    *((void *)&v11 + 1) = v6 - 1;
    LODWORD(result) = __swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v11, a2, &v12, a4);
    unint64_t v8 = v12;
    if (v12 > 0x8000000000000000) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v11;
      unint64_t v9 = -(uint64_t)v8;
LABEL_11:
      *a3 = v9;
    }
  }
  else
  {
    char v10 = __swift::__runtime::llvm::consumeUnsignedInteger(this, a2, &v12, a4);
    uint64_t result = 1;
    if ((v10 & 1) == 0)
    {
      unint64_t v9 = v12;
      if ((v12 & 0x8000000000000000) == 0)
      {
        uint64_t result = 0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t __swift::__runtime::llvm::getAsUnsignedInteger(uint64_t a1, uint64_t a2, __swift::__runtime::llvm::StringRef *a3, unint64_t *a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  LODWORD(result) = __swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v5, a3, a4, a4);
  if (v6) {
    return 1;
  }
  else {
    return result;
  }
}

BOOL __swift::__runtime::llvm::getAsSignedInteger(unsigned char *a1, uint64_t a2, __swift::__runtime::llvm::StringRef *a3, unint64_t *a4)
{
  *(void *)&long long v7 = a1;
  *((void *)&v7 + 1) = a2;
  uint64_t v9 = 0;
  if (a2 && *a1 == 45)
  {
    *(void *)&long long v8 = a1 + 1;
    *((void *)&v8 + 1) = a2 - 1;
    if ((__swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v8, a3, (unint64_t *)&v9, a4) & 1) == 0&& (unint64_t)v9 < 0x8000000000000001)
    {
      long long v7 = v8;
      uint64_t v5 = -v9;
LABEL_8:
      *a4 = v5;
      return *((void *)&v7 + 1) != 0;
    }
  }
  else if ((__swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v7, a3, (unint64_t *)&v9, a4) & 1) == 0)
  {
    uint64_t v5 = v9;
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  return 1;
}

unint64_t __swift::__runtime::llvm::hash_value(void *a1, uint64_t a2)
{
  return __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<char const>(a1, (uint64_t)a1 + a2);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<char const>(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = (unint64_t *)&__swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  {
    v69 = a1;
    unint64_t v3 = (unint64_t *)&__swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
    int v66 = v65;
    uint64_t v2 = a2;
    a1 = v69;
    if (v66)
    {
      unint64_t v67 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v67 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v67;
      unint64_t v3 = (unint64_t *)&__swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
      uint64_t v2 = a2;
      a1 = v69;
    }
  }
  unint64_t v4 = *v3;
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v15 = a1[5];
    unint64_t v16 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v17 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v18 = *a1 - 0x6D8ED9027DD26057 * v4;
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = v18 + v11 + v19;
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v23 = __ROR8__(v17, 33);
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v22;
    uint64_t v25 = __ROR8__(v21, 44) + v18 + __ROR8__(v24 + v9 + v18 + v20, 21);
    unint64_t v26 = 0xB492B66FBE98F273 * v23;
    uint64_t v27 = v21 + v20;
    uint64_t v28 = v22 + a1[4] - 0x4B6D499041670D8DLL * v23;
    uint64_t v29 = __ROR8__(v16 + v19 + v13 + v28, 21) + v28 + __ROR8__(v15 + v12 + v28, 44);
    uint64_t v30 = v15 + v12 + v28 + v13;
    unint64_t v31 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v32 = v24;
    }
    else
    {
      v33 = a1 + 15;
      do
      {
        uint64_t v34 = *(v33 - 6);
        uint64_t v35 = __ROR8__(v16 + v27 + v26 + v34, 37);
        uint64_t v37 = *(v33 - 2);
        uint64_t v36 = *(v33 - 1);
        unint64_t v16 = v37 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v36, 42);
        uint64_t v38 = v24 + v30;
        uint64_t v39 = *(v33 - 7) - 0x4B6D499041670D8DLL * v25;
        uint64_t v40 = *(v33 - 4);
        uint64_t v41 = *(v33 - 5);
        uint64_t v42 = v39 + v34 + v41;
        unint64_t v32 = (0xB492B66FBE98F273 * v35) ^ v29;
        unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v38, 33);
        uint64_t v25 = __ROR8__(v42, 44) + v39 + __ROR8__(v32 + v30 + v39 + v40, 21);
        uint64_t v27 = v42 + v40;
        unint64_t v43 = v26 + v29 + *(v33 - 3);
        uint64_t v44 = *v33;
        v33 += 8;
        uint64_t v45 = __ROR8__(v16 + v41 + v43 + v44, 21);
        unint64_t v46 = v37 + v36 + v43;
        uint64_t v29 = v45 + v43 + __ROR8__(v46, 44);
        uint64_t v30 = v46 + v44;
        unint64_t v24 = v32;
        v31 -= 64;
      }
      while (v31);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v47 = *(void *)(v2 - 56);
      uint64_t v48 = *(void *)(v2 - 16);
      uint64_t v49 = *(void *)(v2 - 8);
      uint64_t v50 = v32 + v30;
      unint64_t v51 = (0xB492B66FBE98F273 * __ROR8__(v16 + v27 + v26 + v47, 37)) ^ v29;
      uint64_t v53 = *(void *)(v2 - 32);
      uint64_t v52 = *(void *)(v2 - 24);
      unint64_t v16 = v52 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v48, 42);
      uint64_t v54 = v51 + v30;
      uint64_t v55 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v25;
      uint64_t v58 = v2 - 48;
      uint64_t v56 = *(void *)(v2 - 48);
      uint64_t v57 = *(void *)(v58 + 8);
      uint64_t v59 = v55 + v47 + v56;
      unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
      uint64_t v25 = __ROR8__(v59, 44) + v55 + __ROR8__(v54 + v55 + v57, 21);
      uint64_t v27 = v59 + v57;
      unint64_t v60 = v26 + v29 + v53;
      unint64_t v61 = v52 + v48 + v60;
      uint64_t v29 = __ROR8__(v16 + v56 + v60 + v49, 21) + v60 + __ROR8__(v61, 44);
      uint64_t v30 = v61 + v49;
      unint64_t v32 = v51;
    }
    unint64_t v62 = 0x9DDFEA08EB382D69
        * (v29 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v29)));
    uint64_t v63 = v26 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v62 ^ (v62 >> 47));
    unint64_t v64 = 0x9DDFEA08EB382D69
        * ((v32
          - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) >> 47))) ^ v63);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) >> 47));
  }
  else
  {
    return __swift::__runtime::llvm::hashing::detail::hash_short((__swift::__runtime::llvm::hashing::detail *)a1, v5, v4);
  }
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_short(__swift::__runtime::llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 <= 4)
  {
    unint64_t v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    unint64_t v5 = v3 ^ (v4 >> 47) ^ v4;
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 - 9 <= 7)
  {
    uint64_t v7 = *(void *)((char *)this + a2 - 8);
    uint64_t v8 = __ROR8__(v7 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v8 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                  * (*(void *)this ^ a3 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)))) >> 47))) ^ v7;
  }
  if (a2 - 17 <= 0xF)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = 0x9AE16A3B2F90404FLL * *(void *)((char *)this + a2 - 8);
    uint64_t v11 = __ROR8__(0xB492B66FBE98F273 * *(void *)this - v9, 43)
        - 0x3C5A37A36834CED9 * *(void *)((char *)this + a2 - 16)
        + __ROR8__(v10 ^ a3, 30);
    unint64_t v12 = a3 + a2 + __ROR8__(v9 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(void *)this - v10;
    unint64_t v5 = v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12));
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 >= 0x21)
  {
    uint64_t v13 = (char *)this + a2;
    uint64_t v14 = *(void *)((char *)this + a2 - 16);
    uint64_t v15 = *(void *)((char *)this + a2 - 8);
    uint64_t v16 = *(void *)this - 0x3C5A37A36834CED9 * (v14 + a2);
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = *((void *)this + 3);
    uint64_t v19 = __ROR8__(v16 + v17, 52);
    uint64_t v20 = v16 + *((void *)this + 1);
    uint64_t v21 = __ROR8__(v20, 7);
    uint64_t v22 = v20 + v18;
    uint64_t v23 = v21 + __ROR8__(*(void *)this - 0x3C5A37A36834CED9 * (v14 + a2), 37) + v19;
    uint64_t v24 = *(void *)((char *)this + a2 - 32) + v18;
    uint64_t v25 = __ROR8__(v24 + v15, 52);
    uint64_t v26 = v23 + __ROR8__(v22, 31);
    uint64_t v27 = __ROR8__(v24, 37);
    uint64_t v28 = *((void *)v13 - 3) + v24;
    uint64_t v29 = __ROR8__(v28, 7);
    uint64_t v30 = v28 + v14;
    uint64_t v31 = __ROR8__(v30, 31);
    unint64_t v32 = ((0xC3A5C85C97CB3127
          * ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) ^ ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) >> 47))) ^ a3)
        + v26;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  if (a2)
  {
    unint64_t v32 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

uint64_t swift_reflection_getSupportedMetadataVersion()
{
  return 3;
}

void swift_reflection_createReflectionContext()
{
}

uint64_t minimalDataLayoutQueryFunction<(unsigned char)4>(uint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  if (a2 > 1)
  {
    if (a2 == 4)
    {
      *a4 = 4096;
      return 1;
    }
    else if (a2 == 3)
    {
      *(unsigned char *)a4 = 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(unsigned char *)a4 = 4;
    return 1;
  }
}

uint64_t minimalDataLayoutQueryFunction<(unsigned char)8>(uint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  if (a2 > 1)
  {
    if (a2 == 4)
    {
      *a4 = 0x100000000;
      return 1;
    }
    else if (a2 == 3)
    {
      *(unsigned char *)a4 = 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(unsigned char *)a4 = 8;
    return 1;
  }
}

void swift_reflection_createReflectionContextWithDataLayout(uint64_t a1, void (*a2)(void))
{
  char v2 = 1;
  a2();
  operator new();
}

SwiftReflectionContext *swift_reflection_destroyReflectionContext(SwiftReflectionContext *result)
{
  if (result)
  {
    SwiftReflectionContext::~SwiftReflectionContext(result);
    operator delete();
  }
  return result;
}

uint64_t swift_reflection_addReflectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v6 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_addReflectionMappingInfo(v4);
  }
  else
  {
    uint64_t v7 = &v6;
    return ((uint64_t (*)(uint64_t ***, uint64_t))off_C8B68[v2])(&v7, a1);
  }
}

uint64_t swift_reflection_addReflectionMappingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v6 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_addImage(v4);
  }
  else
  {
    uint64_t v7 = &v6;
    return ((uint64_t (*)(uint64_t ***, uint64_t))off_C8B78[v2])(&v7, a1);
  }
}

uint64_t swift_reflection_addImage(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_readIsaMask(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8B88[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_readIsaMask(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_typeRefForMetadata(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8D78[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_typeRefForMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_ownsObject(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8D88[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_ownsObject(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_ownsAddress(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8E48[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_ownsAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_ownsAddressStrict(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8E58[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_ownsAddressStrict(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataForObject(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8E68[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_metadataForObject(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataNominalTypeDescriptor(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8E78[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_metadataNominalTypeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataIsActor(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8E88[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_metadataIsActor(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_typeRefForInstance(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8E98[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_typeRefForInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_typeRefForMangledTypeName(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8EA8[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_typeRefForMangledTypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  uint64_t v9 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_copyDemangledNameForTypeRef(v5);
  }
  else
  {
    unint64_t v10 = &v9;
    return ((uint64_t (*)(void **, uint64_t))off_C8EB8[v3])(&v10, a1);
  }
}

char *swift_reflection_copyDemangledNameForTypeRef(uint64_t a1, swift::reflection::TypeRef *a2)
{
  v20[1] = 0;
  v20[2] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 2400;
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v59 = 0;
  v20[0] = off_C9440;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  int v57 = 0;
  Demangling = (uint64_t *)swift::reflection::TypeRef::getDemangling(a2, (swift::Demangle::__runtime::Demangler *)v20);
  char v7 = 0;
  uint64_t v8 = 0x101010101010101;
  char v9 = 1;
  uint64_t v10 = 0x101010100000000;
  char v11 = 1;
  __int16 v12 = 256;
  char v13 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v16[0] = off_C8B30;
  v16[1] = swift::Demangle::__runtime::genericParameterName;
  uint64_t v17 = v16;
  swift::Demangle::__runtime::nodeToString((uint64_t *)__s1, Demangling, (swift::Demangle::__runtime::Node *)&v7, v3);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v4 = strdup(__s1);
      goto LABEL_8;
    }
  }
  else
  {
    if (v17) {
      (*(void (**)(void))(*v17 + 40))();
    }
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = *(char **)__s1;
  uint64_t v4 = strdup(*(const char **)__s1);
  operator delete(v5);
LABEL_8:
  v20[0] = off_C9440;
  if (v59 == v58)
  {
    (*(void (**)(void *))(v58[0] + 32))(v58);
  }
  else if (v59)
  {
    (*(void (**)(void))(*v59 + 40))();
  }
  v20[0] = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v21);
  if (v23) {
    *(unsigned char *)(v23 + 48) = 0;
  }
  return v4;
}

void swift::Demangle::__runtime::Demangler::~Demangler(swift::Demangle::__runtime::Demangler *this)
{
  *(void *)this = off_C9440;
  uint64_t v2 = (char *)this + 544;
  uint64_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*((void **)this + 3));
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }
}

{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = off_C9440;
  uint64_t v2 = (char *)this + 544;
  uint64_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = off_C9418;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      free(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    *(unsigned char *)(v6 + 48) = 0;
  }

  operator delete();
}

char *swift_reflection_copyNameForTypeRef(uint64_t a1, swift::reflection::TypeRef *a2, int a3)
{
  v24[1] = 0;
  v24[2] = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 2400;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v63 = 0;
  v24[0] = off_C9440;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v32 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  int v61 = 0;
  if (!a3)
  {
    Demangling = (uint64_t *)swift::reflection::TypeRef::getDemangling(a2, (swift::Demangle::__runtime::Demangler *)v24);
    v13[0] = 0;
    *(void *)&v13[1] = 0x101010101010101;
    char v14 = 1;
    uint64_t v15 = 0x101010100000000;
    char v16 = 1;
    __int16 v17 = 256;
    char v18 = 1;
    v19[0] = 0;
    v19[1] = 0;
    v20[0] = off_C8B30;
    v20[1] = swift::Demangle::__runtime::genericParameterName;
    uint64_t v21 = v20;
    swift::Demangle::__runtime::nodeToString((uint64_t *)__s1, Demangling, (swift::Demangle::__runtime::Node *)v13, v7);
    if (v21 == v20)
    {
      (*(void (**)(void *))(v20[0] + 32))(v20);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_9:
        uint64_t v5 = strdup(__s1);
        goto LABEL_18;
      }
    }
    else
    {
      if (v21) {
        (*(void (**)(void))(*v21 + 40))();
      }
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    char v11 = *(const char **)__s1;
    uint64_t v5 = strdup(*(const char **)__s1);
    uint64_t v10 = (char *)v11;
    goto LABEL_17;
  }
  uint64_t v3 = swift::reflection::TypeRef::getDemangling(a2, (swift::Demangle::__runtime::Demangler *)v24);
  swift::Demangle::__runtime::mangleNode(v3, v4);
  if (*(_DWORD *)v13)
  {
    uint64_t v5 = 0;
    if ((v20[0] & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  char v8 = HIBYTE(v20[0]);
  if (v20[0] >= 0) {
    char v9 = (const char *)v19;
  }
  else {
    char v9 = (const char *)v19[0];
  }
  uint64_t v5 = strdup(v9);
  if (v8 < 0)
  {
LABEL_14:
    uint64_t v10 = (char *)v19[0];
LABEL_17:
    operator delete(v10);
  }
LABEL_18:
  v24[0] = off_C9440;
  if (v63 == v62)
  {
    (*(void (**)(void *))(v62[0] + 32))(v62);
  }
  else if (v63)
  {
    (*(void (**)(void))(*v63 + 40))();
  }
  v24[0] = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v25);
  if (v27) {
    *(unsigned char *)(v27 + 48) = 0;
  }
  return v5;
}

uint64_t swift_reflection_copyDemangledNameForProtocolDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = &v7;
  uint64_t v7 = a2;
  char v8 = &v6;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_genericArgumentOfTypeRef(v4, v5);
  }
  else
  {
    char v9 = &v8;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8EC8[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_genericArgumentOfTypeRef(uint64_t a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 2) {
      return *(void *)(*(void *)(a1 + 48) + 8 * a2);
    }
  }
  return result;
}

uint64_t swift_reflection_genericArgumentCountOfTypeRef(uint64_t a1)
{
  uint64_t result = 0;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 2) {
      return (*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3;
    }
  }
  return result;
}

uint64_t getTypeInfoKind(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      uint64_t v4 = (unsigned __int16 *)(a1 + 32);
      int v5 = *(char *)(a1 + 55);
      if (v5 < 0)
      {
        if (*(void *)(a1 + 40) != 2) {
          return 1;
        }
        uint64_t v4 = *(unsigned __int16 **)v4;
      }
      else if (v5 != 2)
      {
        return 1;
      }
      if (bswap32(*v4) >> 16 == 17008) {
        return 2;
      }
      else {
        return 1;
      }
    case 1:
      unsigned int v6 = *(_DWORD *)(a1 + 32);
      if (v6 >= 0xA) {
        goto LABEL_9;
      }
      return dword_C6914[v6];
    case 2:
      unsigned int v6 = *(_DWORD *)(a1 + 32);
      goto LABEL_11;
    case 3:
      return result;
    case 4:
      unsigned int v6 = *(_DWORD *)(a1 + 32);
LABEL_9:
      if (v6 < 3) {
        return v6 + 5;
      }
LABEL_11:
      if (v6 >= 4) {
LABEL_20:
      }
        abort();
      return dword_C68B0[v6];
    default:
      goto LABEL_20;
  }
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t swift_reflection_infoForTypeRef(uint64_t a1, uint64_t a2)
{
  int v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_childOfTypeRef(v4);
  }
  else
  {
    char v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8ED8[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_childOfTypeRef(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = a2;
  int v7 = a3;
  v6[0] = &v8;
  v6[1] = &v7;
  char v9 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_infoForMetadata(v5);
  }
  else
  {
    uint64_t v10 = &v9;
    return ((uint64_t (*)(void **, uint64_t))off_C8EE8[v3])(&v10, a1);
  }
}

uint64_t swift_reflection_infoForMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  int v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_childOfMetadata(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8EF8[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_childOfMetadata(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = a2;
  int v7 = a3;
  v6[0] = &v8;
  v6[1] = &v7;
  char v9 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_infoForInstance(v5);
  }
  else
  {
    uint64_t v10 = &v9;
    return ((uint64_t (*)(void **, uint64_t))off_C8F08[v3])(&v10, a1);
  }
}

uint64_t swift_reflection_infoForInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  int v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_childOfInstance(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8F18[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_childOfInstance(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = a2;
  int v7 = a3;
  v6[0] = &v8;
  v6[1] = &v7;
  char v9 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_projectExistential(v5);
  }
  else
  {
    uint64_t v10 = &v9;
    return ((uint64_t (*)(void **, uint64_t))off_C8F28[v3])(&v10, a1);
  }
}

uint64_t swift_reflection_projectExistential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  v8[0] = &v11;
  v8[1] = &v12;
  v8[2] = &v10;
  v8[3] = &v9;
  char v13 = v8;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1)
  {
    uint64_t v7 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_projectExistentialAndUnwrapClass(v7);
  }
  else
  {
    char v14 = &v13;
    return ((uint64_t (*)(void **, uint64_t))off_C8F38[v5])(&v14, a1);
  }
}

uint64_t swift_reflection_projectExistentialAndUnwrapClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  v8[0] = &v11;
  v8[1] = &v12;
  v8[2] = &v10;
  v8[3] = &v9;
  char v13 = v8;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1)
  {
    uint64_t v7 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_projectEnumValue(v7);
  }
  else
  {
    char v14 = &v13;
    return ((uint64_t (*)(void **, uint64_t))off_C8F48[v5])(&v14, a1);
  }
}

uint64_t swift_reflection_projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  v7[0] = &v9;
  v7[1] = &v10;
  v7[2] = &v8;
  uint64_t v10 = a2;
  uint64_t v11 = v7;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == -1)
  {
    uint64_t v6 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_dumpTypeRef(v6);
  }
  else
  {
    uint64_t v12 = &v11;
    return ((uint64_t (*)(void **, uint64_t))off_C8F58[v4])(&v12, a1);
  }
}

void *swift_reflection_dumpTypeRef(uint64_t a1)
{
  if (a1) {
    return swift::reflection::TypeRef::dump(a1, &std::cout, 0);
  }
  else {
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type reference>\n", 22);
  }
}

void *std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t swift_reflection_dumpInfoForTypeRef(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  uint64_t v8 = v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_dumpInfoForMetadata(v4);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C8F68[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_dumpInfoForMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v7 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_dumpInfoForInstance(v4);
  }
  else
  {
    uint64_t v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8F78[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_dumpInfoForInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = &v7;
  uint64_t v7 = a2;
  uint64_t v8 = &v6;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = (void *)std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_demangle(v4, v5);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_C8F88[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_demangle(void *__src, size_t __n)
{
  if (__src && __n)
  {
    if (__n < 0x7FFFFFFFFFFFFFF8)
    {
      if (__n >= 0x17)
      {
        size_t v5 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__n | 7) != 0x17) {
          size_t v5 = __n | 7;
        }
        size_t v6 = v5 + 1;
        p_dst = (swift::Demangle::__runtime *)operator new(v5 + 1);
        size_t v22 = __n;
        int64_t v23 = v6 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v23) = __n;
        p_dst = (swift::Demangle::__runtime *)&__dst;
      }
      memcpy(p_dst, __src, __n);
      *((unsigned char *)p_dst + __n) = 0;
      char v11 = 0;
      uint64_t v12 = 0x101010101010101;
      char v13 = 1;
      uint64_t v14 = 0x101010100000000;
      char v15 = 1;
      __int16 v16 = 256;
      char v17 = 1;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      v20[0] = off_C8B30;
      v20[1] = swift::Demangle::__runtime::genericParameterName;
      void v20[3] = v20;
      if (v23 >= 0) {
        uint64_t v8 = (swift::Demangle::__runtime *)&__dst;
      }
      else {
        uint64_t v8 = __dst;
      }
      if (v23 >= 0) {
        uint64_t v9 = (const char *)HIBYTE(v23);
      }
      else {
        uint64_t v9 = (const char *)v22;
      }
      swift::Demangle::__runtime::demangleTypeAsString(v8, v9, (unint64_t)&v11, v7);
    }
    abort();
  }
  return 0;
}

uint64_t swift_reflection_iterateConformanceCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  void v6[2] = &v9;
  uint64_t v9 = a1;
  uint64_t v10 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_iterateMetadataAllocations(v5);
  }
  else
  {
    char v11 = &v10;
    return ((uint64_t (*)(void **, uint64_t))off_C8F98[v3])(&v11, a1);
  }
}

uint64_t swift_reflection_iterateMetadataAllocations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  void v6[2] = &v9;
  uint64_t v9 = a1;
  uint64_t v10 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_allocationMetadataPointer(v5);
  }
  else
  {
    char v11 = &v10;
    return ((uint64_t (*)(void **, uint64_t))off_C9080[v3])(&v11, a1);
  }
}

uint64_t swift_reflection_allocationMetadataPointer(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  size_t v6 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataAllocationTagName(v4);
  }
  else
  {
    uint64_t v7 = &v6;
    return ((uint64_t (*)(uint64_t ***, uint64_t))off_C9120[v2])(&v7, a1);
  }
}

uint64_t swift_reflection_metadataAllocationTagName(uint64_t a1, int a2)
{
  uint64_t v7 = a1;
  int v6 = a2;
  v5[0] = &v6;
  v5[1] = &v7;
  uint64_t v8 = v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataAllocationCacheNode(v4);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C9130[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_metadataAllocationCacheNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = &v7;
  uint64_t v7 = a3;
  uint64_t v8 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_iterateMetadataAllocationBacktraces(v5);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C9140[v3])(&v9, a1);
  }
}

uint64_t swift_reflection_iterateMetadataAllocationBacktraces(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  void v6[2] = &v9;
  uint64_t v9 = a1;
  uint64_t v10 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1)
  {
    uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_asyncTaskSlabPointer(v5);
  }
  else
  {
    char v11 = &v10;
    return ((uint64_t (*)(void **, uint64_t))off_C9150[v3])(&v11, a1);
  }
}

uint64_t swift_reflection_asyncTaskSlabPointer(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  uint64_t v8 = v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_asyncTaskSlabAllocations(v4);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C91F0[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_asyncTaskSlabAllocations(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  uint64_t v8 = v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_asyncTaskInfo(v4);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C9200[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_asyncTaskInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  uint64_t v8 = v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_actorInfo(v4);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C9258[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_actorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  uint64_t v8 = v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_nextJob(v4);
  }
  else
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(void **, uint64_t))off_C92F8[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_nextJob(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = &v8;
  uint64_t v8 = a2;
  uint64_t v9 = &v7;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    SwiftReflectionContext::SwiftReflectionContext(v4, v5, v6);
  }
  uint64_t v10 = &v9;
  return ((uint64_t (*)(uint64_t ****, uint64_t))off_C9308[v2])(&v10, a1);
}

void SwiftReflectionContext::SwiftReflectionContext(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = off_C82A8;
  *(void *)(a1 + 88) = a1 + 64;
  uint64_t v4 = operator new(0x50uLL);
  v4[1] = 0;
  *uint64_t v4 = off_C82F0;
  long long v5 = a3[1];
  *((_OWORD *)v4 + 2) = *a3;
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = a3[2];
  v4[2] = 0;
  v4[3] = off_C8328;
  operator new();
}

void _ZNSt3__110__function6__funcIN22SwiftReflectionContext23freeTemporaryAllocationMUlvE_ENS_9allocatorIS3_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN22SwiftReflectionContext23freeTemporaryAllocationMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_C82A8;
  return result;
}

void _ZNKSt3__110__function6__funcIN22SwiftReflectionContext23freeTemporaryAllocationMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, void *a2)
{
  *a2 = off_C82A8;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void std::__shared_ptr_emplace<swift::remote::CMemoryReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_C82F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<swift::remote::CMemoryReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_C82F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

BOOL swift::remote::CMemoryReader::queryDataLayout(uint64_t a1)
{
  return (*(unsigned int (**)(void))(a1 + 16))(*(void *)(a1 + 8)) != 0;
}

uint64_t swift::remote::CMemoryReader::getSymbolAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v5 = v4;
  }
  return v2(v3, a2, v5);
}

uint64_t swift::remote::CMemoryReader::readString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a1 + 40))(*(void *)(a1 + 8));
  if (!v6)
  {
    *(void *)&long long v27 = 0;
    char v13 = (unsigned char *)(*(uint64_t (**)(void, uint64_t, uint64_t, long long *))(a1 + 32))(*(void *)(a1 + 8), a2, 1, &v27);
    uint64_t v14 = *(void *)(a1 + 24);
    if (v14)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = v27;
      char v17 = operator new(0x20uLL);
      uint64_t v18 = off_C83D8;
      *char v17 = off_C83D8;
      v17[1] = v14;
      v17[2] = v15;
      v17[3] = v16;
      uint64_t v31 = v17;
      if (v13)
      {
LABEL_6:
        BOOL v19 = *v13 == 0;
        uint64_t v29 = 0;
        *(void *)&long long v27 = v13;
        ((void (*)(void *))v18[6])(v17);
        char v17 = v31;
        goto LABEL_27;
      }
    }
    else
    {
      char v17 = v30;
      uint64_t v18 = off_C8390;
      v30[0] = off_C8390;
      uint64_t v31 = v30;
      if (v13) {
        goto LABEL_6;
      }
    }
    BOOL v19 = 0;
    uint64_t v29 = 0;
LABEL_27:
    if (v17 == v30)
    {
      (*(void (**)(void *))(v30[0] + 32))(v30);
    }
    else if (v17)
    {
      (*(void (**)(void *))(*v17 + 40))(v17);
    }
    return v19;
  }
  size_t v7 = v6;
  *(void *)&long long v27 = 0;
  uint64_t v8 = (const void *)(*(uint64_t (**)(void, uint64_t, uint64_t, long long *))(a1 + 32))(*(void *)(a1 + 8), a2, v6, &v27);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = v27;
    uint64_t v12 = operator new(0x20uLL);
    *uint64_t v12 = off_C83D8;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
  }
  else
  {
    uint64_t v12 = v30;
    v30[0] = off_C8390;
  }
  uint64_t v29 = v8;
  uint64_t v31 = v12;
  BOOL v19 = v8 != 0;
  if (!v8)
  {
    uint64_t v29 = 0;
    goto LABEL_21;
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v21 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v21 = v7 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = (long long *)operator new(v21 + 1);
    *((void *)&v27 + 1) = v7;
    unint64_t v28 = v22 | 0x8000000000000000;
    *(void *)&long long v27 = v20;
  }
  else
  {
    HIBYTE(v28) = v7;
    uint64_t v20 = &v27;
  }
  memmove(v20, v8, v7);
  *((unsigned char *)v20 + v7) = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)a3 = v27;
    *(void *)(a3 + 16) = v28;
    uint64_t v29 = 0;
    *(void *)&long long v27 = v8;
    goto LABEL_20;
  }
  operator delete(*(void **)a3);
  unint64_t v24 = v28;
  int64_t v23 = v29;
  uint64_t v12 = v31;
  *(_OWORD *)a3 = v27;
  *(void *)(a3 + 16) = v24;
  uint64_t v29 = 0;
  if (!v23) {
    goto LABEL_21;
  }
  *(void *)&long long v27 = v23;
  if (v12)
  {
LABEL_20:
    (*(void (**)(void *, long long *))(*v12 + 48))(v12, &v27);
    uint64_t v12 = v31;
LABEL_21:
    if (v12 == v30)
    {
      (*(void (**)(void))(v30[0] + 32))();
    }
    else if (v12)
    {
      (*(void (**)(void *))(*v12 + 40))(v12);
    }
    return v19;
  }
  uint64_t v26 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::remote::CMemoryReader::readBytes(v26);
}

void *swift::remote::CMemoryReader::readBytes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(a1 + 32))(*(void *)(a1 + 8), a2, a3, &v11);
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = v11;
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = off_C83D8;
    result[1] = v7;
    result[2] = v8;
    result[3] = v9;
  }
  else
  {
    uint64_t result = a4 + 1;
    a4[1] = (uint64_t)off_C8390;
  }
  *a4 = v6;
  a4[4] = (uint64_t)result;
  return result;
}

void swift::remote::MemoryReader::readBytes(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(&__src);
  uint64_t v6 = __src;
  if (__src)
  {
    memcpy(a3, __src, a4);
    __src = 0;
    uint64_t v12 = v6;
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      swift::remote::MemoryReader::resolvePointer(v7, v8);
      return;
    }
    (*(void (**)(void *, void **))(*v11 + 48))(v11, &v12);
  }
  else
  {
    __src = 0;
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
}

void swift::remote::MemoryReader::resolvePointer(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 24) = a1;
}

void swift::remote::MemoryReader::resolvePointerAsSymbol(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void swift::remote::MemoryReader::getSymbol(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 48))(__p);
  if (v11)
  {
    if (SHIBYTE(v9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      int v6 = v11;
      int v7 = SHIBYTE(v9);
      *(void *)(a3 + 24) = v10;
      if (v6)
      {
        if (v7 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      uint64_t v5 = v10;
      *(void *)(a3 + 16) = v9;
      *(void *)(a3 + 24) = v5;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 24) = a2;
  }
}

double swift::remote::MemoryReader::getDynamicSymbol@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void swift::remote::CMemoryReader::~CMemoryReader(swift::remote::CMemoryReader *this)
{
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  return std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::~__func();
}

void std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
}

void *std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = off_C8390;
  return result;
}

void std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_C8390;
}

void std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::~__func()
{
}

__n128 std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_C83D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C83D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*(void *)(a1 + 16), *a2, *(void *)(a1 + 24));
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

double swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 2400;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)a1 = off_C9440;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 624) = a1;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 840) = 1065353216;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 880) = 1065353216;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 920) = 1065353216;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 960) = 1065353216;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1000) = 1065353216;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_DWORD *)(a1 + 1080) = 1065353216;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1120) = 1065353216;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1160) = 1065353216;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_DWORD *)(a1 + 1200) = 1065353216;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_DWORD *)(a1 + 1240) = 1065353216;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1280) = 1065353216;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_DWORD *)(a1 + 1320) = 1065353216;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1400) = 1065353216;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1440) = 1065353216;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_DWORD *)(a1 + 1480) = 1065353216;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_DWORD *)(a1 + 1520) = 1065353216;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_DWORD *)(a1 + 1560) = 1065353216;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_DWORD *)(a1 + 1600) = 1065353216;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_DWORD *)(a1 + 1640) = 1065353216;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(void *)(a1 + 1672) = a4;
  *(void *)(a1 + 1680) = off_CA3D0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1716) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_DWORD *)(a1 + 1768) = 1065353216;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_DWORD *)(a1 + 1808) = 1065353216;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_DWORD *)(a1 + 1848) = 1065353216;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_DWORD *)(a1 + 1888) = 1065353216;
  *(_DWORD *)(a1 + 1896) = 0;
  *(void *)(a1 + 1912) = 0;
  *(void *)(a1 + 1904) = 0;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1928) = a1;
  *(void *)(a1 + 1936) = a3;
  *(_DWORD *)(a1 + 1944) = 8;
  *(void *)(a1 + 1952) = off_C8420;
  *(void *)(a1 + 1960) = a1;
  *(void *)(a1 + 1968) = a2;
  *(void *)(a1 + 1976) = a1 + 1952;
  *(void *)(a1 + 1984) = off_C84B0;
  *(void *)(a1 + 1992) = a2;
  *(void *)(a1 + 2008) = a1 + 1984;
  *(void *)(a1 + 2016) = off_C8778;
  *(void *)(a1 + 2024) = a2;
  *(void *)(a1 + 2040) = a1 + 2016;
  *(void *)(a1 + 2048) = off_C87C0;
  *(void *)(a1 + 2056) = a2;
  *(void *)(a1 + 2072) = a1 + 2048;
  *(void *)(a1 + 2080) = off_C8808;
  *(void *)(a1 + 2088) = a2;
  *(void *)(a1 + 2104) = a1 + 2080;
  *(void *)(a1 + 2112) = off_C8850;
  *(void *)(a1 + 2120) = a2;
  *(void *)(a1 + 2136) = a1 + 2112;
  *(void *)(a1 + 2144) = off_C8898;
  *(void *)(a1 + 2152) = a2;
  *(void *)(a1 + 2168) = a1 + 2144;
  *(unsigned char *)(a1 + 2176) = 0;
  *(unsigned char *)(a1 + 2184) = 0;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::~__func()
{
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C8420;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C8420;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::operator()(uint64_t a1, uint64_t a2, char *a3)
{
  return std::__invoke_void_return_wrapper<swift::Demangle::__runtime::Node *,false>::__call[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1} &,swift::remote::RemoteRef<char>,BOOL>((uint64_t *)(a1 + 8), a2, a3);
}

unint64_t std::__invoke_void_return_wrapper<swift::Demangle::__runtime::Node *,false>::__call[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1} &,swift::remote::RemoteRef<char>,BOOL>(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(unsigned char **)(a2 + 8);
  char v4 = *a3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  v13[0] = *(void *)a2;
  v13[1] = v3;
  char v16 = v4;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v3, (const char *)a2);
  uint64_t v9 = v8;
  uint64_t v10 = operator new(0x28uLL);
  void *v10 = off_C8468;
  v10[1] = v13;
  v10[2] = v6;
  void v10[3] = &v16;
  v10[4] = v5;
  uint64_t v15 = v10;
  unint64_t v11 = swift::Demangle::__runtime::Demangler::demangleType(v5, (uint64_t)SymbolicMangledNameStringRef, v9, v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  return v11;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  char v21 = a5;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(*(unsigned char **)(a2 + 8), (const char *)a2);
  unint64_t v11 = v10;
  if (a3 == 1)
  {
    uint64_t v15 = operator new(0x28uLL);
    *uint64_t v15 = off_C8468;
    v15[1] = a2;
    v15[2] = a1;
    v15[3] = &v21;
    v15[4] = a4;
    uint64_t v18 = v15;
    unint64_t v13 = swift::Demangle::__runtime::Demangler::demangleSymbol(a4, SymbolicMangledNameStringRef, v11, v17);
    uint64_t v14 = v18;
    if (v18 == v17)
    {
      (*(void (**)(void *))(v17[0] + 32))(v17);
      return v13;
    }
  }
  else
  {
    if (a3) {
      return 0;
    }
    uint64_t v12 = operator new(0x28uLL);
    *uint64_t v12 = off_C8468;
    v12[1] = a2;
    v12[2] = a1;
    v12[3] = &v21;
    v12[4] = a4;
    uint64_t v20 = v12;
    unint64_t v13 = swift::Demangle::__runtime::Demangler::demangleType(a4, (uint64_t)SymbolicMangledNameStringRef, v11, v19);
    uint64_t v14 = v20;
    if (v20 == v19)
    {
      (*(void (**)(void *))(v19[0] + 32))(v19);
      return v13;
    }
  }
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  return v13;
}

void std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::~__func()
{
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_C8468;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C8468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

swift::Demangle::__runtime::Node *std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::operator()(uint64_t a1, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5)
{
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(a1 + 8, *a2, *a3, *a4, *a5);
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = a5 + a4 - *(void *)(*(void *)a1 + 8) + **(void **)a1;
  *(_OWORD *)__p = 0u;
  long long v38 = 0u;
  if (a3 == 1)
  {
    swift::remote::MemoryReader::readPointer(*(void *)(v7 + 2488), v8, 8u, (uint64_t)__s);
    if (!v36)
    {
LABEL_78:
      Node = 0;
      goto LABEL_79;
    }
    if ((__s[23] & 0x80000000) != 0)
    {
      if (*(void *)&__s[8])
      {
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        goto LABEL_9;
      }
    }
    else if (__s[23])
    {
      std::string v34 = *(std::string *)__s;
LABEL_9:
      uint64_t v9 = *(void *)&__s[24];
LABEL_11:
      *(_OWORD *)__p = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(void *)&long long v38 = *((void *)&v34.__r_.__value_.__l + 2);
      *((void *)&v38 + 1) = v9;
      if (v36 && (__s[23] & 0x80000000) != 0) {
        operator delete(*(void **)__s);
      }
      goto LABEL_14;
    }
    uint64_t v9 = *(void *)(v7 + 2504) & *(void *)&__s[24];
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 0;
    v34.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_11;
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(v7 + 2488) + 56))(__s);
  *(_OWORD *)__p = *(_OWORD *)__s;
  uint64_t v9 = *(void *)&__s[24];
  long long v38 = *(_OWORD *)&__s[16];
LABEL_14:
  Node = 0;
  switch(a2)
  {
    case 0:
      if ((SBYTE7(v38) & 0x80u) == 0) {
        size_t v11 = BYTE7(v38);
      }
      else {
        size_t v11 = (size_t)__p[1];
      }
      if (v11)
      {
        if (v9) {
          goto LABEL_78;
        }
        if ((SBYTE7(v38) & 0x80u) == 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        __s[0] = 0;
        if (v11 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v11 >= 0x17)
        {
          uint64_t v31 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17) {
            uint64_t v31 = v11 | 7;
          }
          uint64_t v32 = v31 + 1;
          unint64_t v13 = operator new(v31 + 1);
          *(void *)&__s[16] = v11;
          *(void *)&__s[24] = v32 | 0x8000000000000000;
          *(void *)&__s[8] = v13;
        }
        else
        {
          unint64_t v13 = &__s[8];
          __s[31] = v11;
        }
        memmove(v13, v12, v11);
        v13[v11] = 0;
        if (!__s[0]) {
          goto LABEL_82;
        }
      }
      else
      {
        ((void (*)(std::string *__return_ptr, uint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v34, v7, v9);
        __s[0] = 1;
        *(_OWORD *)&__s[8] = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      }
      if (!*(void *)&__s[16]) {
        goto LABEL_78;
      }
      if (**(unsigned char **)(a1 + 16) && (**(_DWORD **)&__s[16] & 0x1F) == 4)
      {
        uint64_t v14 = *(void **)(a1 + 24);
        uint64_t v16 = *(void *)&__s[8];
        __int16 v15 = 301;
        goto LABEL_29;
      }
LABEL_82:
      Node = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v7, (uint64_t)__s, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24));
      if (!__s[0] && (__s[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__s[8]);
      }
      break;
    case 2:
      uint64_t v14 = *(void **)(a1 + 24);
      __int16 v15 = 336;
      goto LABEL_28;
    case 3:
      uint64_t v14 = *(void **)(a1 + 24);
      __int16 v15 = 337;
LABEL_28:
      uint64_t v16 = v9;
LABEL_29:
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v14, v15, v16);
      break;
    case 4:
      char v17 = (void *)BYTE7(v38);
      int v18 = SBYTE7(v38);
      if (SBYTE7(v38) < 0) {
        char v17 = __p[1];
      }
      if (v17)
      {
        if (SBYTE7(v38) < 0) {
          operator delete(__p[0]);
        }
        int v18 = 0;
        LOBYTE(__p[0]) = 0;
      }
      else
      {
        uint64_t v8 = v9;
      }
      uint64_t v19 = v8 + 4;
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      (*(void (**)(void, uint64_t, std::string *, uint64_t))(**(void **)(v7 + 2488) + 32))(*(void *)(v7 + 2488), v19, &v34, 4);
      uint64_t v20 = (char *)(v19 + SLODWORD(v34.__r_.__value_.__l.__data_));
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v7 + 2488) + 56))(__s);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      *(void *)&long long v38 = *(void *)&__s[16];
      *(_OWORD *)__p = *(_OWORD *)__s;
      uint64_t v21 = HIBYTE(*(void *)&__s[16]);
      if (__s[23] < 0) {
        uint64_t v21 = *(void *)&__s[8];
      }
      if (v21)
      {
        if ((__s[23] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
        LOBYTE(__p[0]) = 0;
        BYTE7(v38) = 0;
      }
      else
      {
        uint64_t v20 = *(char **)&__s[24];
      }
      unint64_t MangledName = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(v7, v20, 0, *(void **)(a1 + 24));
      if (!MangledName) {
        goto LABEL_78;
      }
      int v23 = *(unsigned __int8 *)(MangledName + 18);
      if ((v23 - 1) < 2) {
        goto LABEL_52;
      }
      if (v23 != 5 || !*(_DWORD *)(MangledName + 8)) {
        goto LABEL_78;
      }
      unint64_t MangledName = *(void *)MangledName;
LABEL_52:
      unint64_t v24 = *(void *)MangledName;
      if (!*(void *)MangledName) {
        goto LABEL_78;
      }
      int v25 = *(unsigned __int8 *)(v24 + 18);
      if ((v25 - 1) < 2) {
        goto LABEL_57;
      }
      if (v25 != 5 || !*(_DWORD *)(v24 + 8)) {
        goto LABEL_78;
      }
      unint64_t v24 = *(void *)v24;
LABEL_57:
      uint64_t v26 = *(swift::Demangle::__runtime::Node **)v24;
      if (!v26) {
        goto LABEL_78;
      }
      int v27 = *((unsigned __int8 *)v26 + 18);
      if ((v27 - 1) < 2) {
        goto LABEL_62;
      }
      if (v27 != 5 || !*((_DWORD *)v26 + 2)) {
        goto LABEL_78;
      }
      uint64_t v26 = *(swift::Demangle::__runtime::Node **)v26;
LABEL_62:
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)v26;
      if (!v28) {
        goto LABEL_78;
      }
      int v29 = *((unsigned __int8 *)v28 + 18);
      if ((v29 - 1) < 2) {
        goto LABEL_67;
      }
      if (v29 != 5 || !*((_DWORD *)v28 + 2)) {
        goto LABEL_78;
      }
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)v28;
LABEL_67:
      uint64_t v30 = *(swift::Demangle::__runtime::Node **)v28;
      if (!*(void *)v28 || *((_WORD *)v30 + 8) != 180) {
        goto LABEL_78;
      }
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 24), 232);
      swift::Demangle::__runtime::Node::addChild(Node, v30, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24));
      break;
    default:
      break;
  }
LABEL_79:
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  return Node;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  if (*(unsigned char *)a2)
  {
    char v4 = *(_DWORD **)(a2 + 16);
    v12[0] = *(void *)(a2 + 8);
    v12[1] = v4;
    uint64_t v5 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v12, a3, 50);
    if (v5 && ((*v4 & 0x10) != 0 || (*v4 & 0x1F) == 3))
    {
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
      swift::Demangle::__runtime::Node::addChild(Node, v5, a3);
      return (uint64_t)Node;
    }
    return (uint64_t)v5;
  }
  else
  {
    int v8 = *(char *)(a2 + 31);
    unint64_t v9 = *(void *)(a2 + 16);
    if (v8 >= 0) {
      unint64_t v10 = (_WORD *)(a2 + 8);
    }
    else {
      unint64_t v10 = *(_WORD **)(a2 + 8);
    }
    if (v8 >= 0) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v9;
    }
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v10, v11, (uint64_t)a3);
  }
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(uint64_t a1, char *a2, int a3, void *a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = 0;
  memset(&v33, 0, sizeof(v33));
  do
  {
    __p = 0;
    std::string::size_type v31 = 0;
    uint64_t v32 = 0;
    if (!(*(unsigned int (**)(void, char *, void **))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v5, &__p))
    {
      int v16 = 1;
      if ((SHIBYTE(v32) & 0x80000000) == 0) {
        continue;
      }
LABEL_26:
      operator delete(__p);
      continue;
    }
    if (v32 >= 0) {
      std::string::size_type v8 = HIBYTE(v32);
    }
    else {
      std::string::size_type v8 = v31;
    }
    v5 += v8 + 1;
    if (v32 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    std::string::append(&v33, p_p, v8);
    unsigned int v10 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v10 = v33.__r_.__value_.__r.__words[1];
    }
    unint64_t v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v11 = &v33;
    }
    while (1)
    {
      uint64_t v12 = v7;
      if (v7 >= v10) {
        break;
      }
      int v13 = v11->__r_.__value_.__s.__data_[v7];
      unsigned int v14 = v13 - 1;
      if ((v13 & 0xF8) == 0x18) {
        int v15 = 9;
      }
      else {
        int v15 = 1;
      }
      if (v14 < 0x17) {
        int v15 = 5;
      }
      uint64_t v7 = (v15 + v7);
      if (v7 > v10)
      {
        std::string::push_back(&v33, 0);
        int v16 = 2;
        goto LABEL_25;
      }
    }
    int v16 = 3;
LABEL_25:
    uint64_t v7 = v12;
    if (SHIBYTE(v32) < 0) {
      goto LABEL_26;
    }
  }
  while (v16 == 2);
  if (v16 == 3)
  {
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    char v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    size_t v19 = size + 1;
    uint64_t v20 = (char *)a4[1];
    if (!v20 || (unint64_t)&v20[v19] > a4[2])
    {
      unint64_t v21 = 2 * a4[4];
      unint64_t v22 = size + 2;
      if (v21 <= v22) {
        unint64_t v21 = v22;
      }
      a4[4] = v21;
      unint64_t v23 = v21 + 8;
      unint64_t v24 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *unint64_t v24 = a4[3];
      uint64_t v20 = (char *)(v24 + 1);
      a4[2] = (char *)v24 + v23;
      a4[3] = v24;
      char v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    a4[1] = &v20[v19];
    if (v18 >= 0) {
      int v25 = &v33;
    }
    else {
      int v25 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    memcpy(v20, v25, v19);
    __p = a2;
    std::string::size_type v31 = (std::string::size_type)v20;
    unint64_t v26 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(a1, (uint64_t)&__p, a3, (uint64_t)a4, 0);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
LABEL_41:
    }
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    unint64_t v26 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_41;
    }
  }
  return v26;
}

void **swift::remote::MemoryReader::readPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 result = (void **)(*(void *(**)(void **__return_ptr))(*(void *)a1 + 64))(__p);
  uint64_t v9 = v19;
  if (v19) {
    goto LABEL_5;
  }
  unsigned int v10 = (void *)HIBYTE(v18);
  if (v18 < 0) {
    unsigned int v10 = __p[1];
  }
  if (v10)
  {
LABEL_5:
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(void *)(a4 + 16) = v18;
    *(void *)(a4 + 24) = v9;
    *(unsigned char *)(a4 + 32) = 1;
    return result;
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 24))(__p, a1, a2, a3);
  unint64_t v11 = __p[0];
  if (!__p[0])
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 32) = 0;
    __p[0] = 0;
    goto LABEL_20;
  }
  if (a3 == 8)
  {
    uint64_t v12 = *(void *)__p[0];
  }
  else
  {
    if (a3 != 4)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 32) = 0;
      __p[0] = 0;
      goto LABEL_18;
    }
    uint64_t v12 = *(unsigned int *)__p[0];
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(&v14, a1, a2, v12);
  *(_OWORD *)a4 = v14;
  uint64_t v13 = v16;
  *(void *)(a4 + 16) = v15;
  *(void *)(a4 + 24) = v13;
  *(unsigned char *)(a4 + 32) = 1;
  unint64_t v11 = __p[0];
  __p[0] = 0;
  if (v11)
  {
LABEL_18:
    *(void *)&long long v14 = v11;
    if (!v20)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x9734);
    }
    (*((void (**)(void **, long long *))*v20 + 6))(v20, &v14);
  }
LABEL_20:
  __n128 result = v20;
  if (v20 == &__p[1]) {
    return (void **)(*((uint64_t (**)(void **))__p[1] + 4))(&__p[1]);
  }
  if (v20) {
    return (void **)(*((uint64_t (**)(void))*v20 + 5))();
  }
  return result;
}

void *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::insert@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    uint64_t v12 = 0;
LABEL_5:
    __n128 result = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(a1, v12, a2, a2 + 1);
    uint64_t v7 = *(void *)a1;
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    char v11 = 1;
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)a1;
  unsigned int v8 = (37 * *a2) & (v6 - 1);
  __n128 result = (void *)(*(void *)a1 + 48 * v8);
  uint64_t v10 = *result;
  if (*a2 != *result)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v10 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v10 == -2;
      }
      if (v15) {
        uint64_t v13 = result;
      }
      unsigned int v16 = v8 + v14++;
      unsigned int v8 = v16 & (v6 - 1);
      __n128 result = (void *)(v7 + 48 * v8);
      uint64_t v10 = *result;
      if (*a2 == *result) {
        goto LABEL_3;
      }
    }
    if (v13) {
      uint64_t v12 = v13;
    }
    else {
      uint64_t v12 = result;
    }
    goto LABEL_5;
  }
LABEL_3:
  char v11 = 0;
LABEL_6:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v7 + 48 * v6;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

void *std::pair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>::~pair(void *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2)
  {
    uint64_t v10 = v2;
    uint64_t v3 = a1[5];
    if (!v3)
    {
      uint64_t v6 = std::__throw_bad_function_call[abi:nn180100]();
      return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(v6, v7, v8, v9);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v10);
  }
  char v4 = (void *)a1[5];
  if (v4 == a1 + 2)
  {
    (*(void (**)(void *))(a1[2] + 32))(a1 + 2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    uint64_t v10 = *a2;
    goto LABEL_4;
  }
  __swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::grow(a1, v9);
  uint64_t v10 = *a3;
  int v15 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v16 = (37 * *a3) & v15;
  a2 = (void *)(*(void *)a1 + 48 * v16);
  uint64_t v17 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -1)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -2;
      }
      if (v20) {
        uint64_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = (void *)(*(void *)a1 + 48 * v16);
      uint64_t v17 = *a2;
      if (v10 == *a2) {
        goto LABEL_4;
      }
    }
    if (v18) {
      a2 = v18;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v11 = *a3;
  uint64_t v12 = *a4;
  *a4 = 0;
  *a2 = v11;
  a2[1] = v12;
  uint64_t v13 = (uint64_t *)a4[4];
  if (v13)
  {
    if (v13 == a4 + 1)
    {
      a2[5] = a2 + 2;
      (*(void (**)(uint64_t))(*(void *)a4[4] + 24))(a4[4]);
    }
    else
    {
      a2[5] = v13;
      a4[4] = 0;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return a2;
}

void __swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(48 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (!v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 16);
    if (!v11) {
      return;
    }
    unint64_t v12 = 48 * v11 - 48;
    if (v12 >= 0x30)
    {
      unint64_t v14 = v12 / 0x30 + 1;
      uint64_t v13 = &buffer[6 * (v14 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFFELL;
      unsigned int v16 = buffer;
      do
      {
        *unsigned int v16 = -1;
        v16[6] = -1;
        v16 += 12;
        v15 -= 2;
      }
      while (v15);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFELL)) {
        return;
      }
    }
    else
    {
      uint64_t v13 = buffer;
    }
    uint64_t v17 = &buffer[6 * v11];
    do
    {
      *uint64_t v13 = -1;
      v13 += 6;
    }
    while (v13 != v17);
    return;
  }
  uint64_t v10 = 6 * v3;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::moveFromOldBuckets(a1, v4, &v4[v10]);

  __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v4, (void *)(v10 * 8), (std::align_val_t)8uLL);
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  char v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    unint64_t v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      unsigned int v9 = *(void **)result;
LABEL_7:
      uint64_t v13 = &v7[6 * v6];
      do
      {
        void *v9 = -1;
        v9 += 6;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x30 + 1;
    unsigned int v9 = &v7[6 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)result;
    do
    {
      *unint64_t v12 = -1;
      v12[6] = -1;
      v12 += 12;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v14 = *v4;
      if ((unint64_t)*v4 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_12;
      }
      int v15 = *(_DWORD *)(v5 + 16);
      if (v15)
      {
        int v16 = v15 - 1;
        unsigned int v17 = (v15 - 1) & (37 * v14);
        uint64_t v18 = (void *)(*(void *)v5 + 48 * v17);
        uint64_t v19 = *v18;
        if (v14 != *v18)
        {
          BOOL v20 = 0;
          int v21 = 1;
          while (v19 != -1)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v19 == -2;
            }
            if (v22) {
              BOOL v20 = v18;
            }
            unsigned int v23 = v17 + v21++;
            unsigned int v17 = v23 & v16;
            uint64_t v18 = (void *)(*(void *)v5 + 48 * (v23 & v16));
            uint64_t v19 = *v18;
            if (v14 == *v18) {
              goto LABEL_26;
            }
          }
          if (v20) {
            uint64_t v18 = v20;
          }
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
LABEL_26:
      uint64_t v24 = v4[1];
      v4[1] = 0;
      *uint64_t v18 = v14;
      v18[1] = v24;
      int v25 = (uint64_t *)v4[5];
      if (!v25) {
        break;
      }
      if (v25 == v4 + 2)
      {
        v18[5] = v18 + 2;
        (*(void (**)(uint64_t))(*(void *)v4[5] + 24))(v4[5]);
        goto LABEL_31;
      }
      __n128 result = 0;
      v18[5] = v25;
      v4[5] = 0;
LABEL_32:
      ++*(_DWORD *)(v5 + 8);
      uint64_t v26 = v4[1];
      v4[1] = 0;
      if (v26)
      {
        uint64_t v28 = v26;
        if (!result)
        {
          uint64_t v27 = std::__throw_bad_function_call[abi:nn180100]();
          return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v27);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)result + 48))(result, &v28);
        __n128 result = v4[5];
      }
      if ((uint64_t *)result == v4 + 2)
      {
        __n128 result = (*(uint64_t (**)(uint64_t *))(v4[2] + 32))(v4 + 2);
      }
      else if (result)
      {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      }
LABEL_12:
      v4 += 6;
      if (v4 == a3) {
        return result;
      }
    }
    v18[5] = 0;
LABEL_31:
    __n128 result = v4[5];
    goto LABEL_32;
  }
  return result;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, void *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  unsigned int v6 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v9, a3, 50);
  if (v6 && ((*(_DWORD *)a2[1] & 0x10) != 0 || (*(_DWORD *)a2[1] & 0x1F) == 3))
  {
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, v6, a3);
    return Node;
  }
  return v6;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(uint64_t a1, _WORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0;
  unint64_t v4 = swift::Demangle::__runtime::Demangler::demangleSymbol(a4, a2, a3, v10);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (*(_WORD *)(v4 + 16) != 99) {
    goto LABEL_12;
  }
  int v5 = *(unsigned __int8 *)(v4 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*(_DWORD *)(v4 + 8))
    {
      unint64_t v4 = 0;
      goto LABEL_12;
    }
    unint64_t v4 = *(void *)v4;
  }
  unint64_t v4 = *(void *)v4;
LABEL_12:
  int v6 = *(unsigned __int16 *)(v4 + 16);
  switch(v6)
  {
    case 158:
      goto LABEL_15;
    case 302:
      int v8 = *(unsigned __int8 *)(v4 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v4 + 8)) {
          return 0;
        }
LABEL_22:
        unint64_t v4 = *(void *)v4;
      }
      return *(void *)v4;
    case 186:
LABEL_15:
      int v7 = *(unsigned __int8 *)(v4 + 18);
      if ((v7 - 1) >= 2)
      {
        if (v7 != 5 || !*(_DWORD *)(v4 + 8)) {
          return 0;
        }
        goto LABEL_22;
      }
      return *(void *)v4;
  }
  return 0;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, void *a2, swift::Demangle::__runtime::NodeFactory *a3, int a4)
{
  int v4 = a4 - 1;
  if (a4 < 1) {
    return 0;
  }
  uint64_t v8 = a2[1];
  v104[0] = *a2;
  v104[1] = v8;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v104, (uint64_t)v105);
  v102 = 0;
  uint64_t v103 = 0;
  uint64_t v9 = a2[1];
  v101[0] = *a2;
  v101[1] = v9;
  v102 = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(a1, v101, (uint64_t)v105, a3, (unint64_t *)&v103);
  if (!v107) {
    return 0;
  }
  LOBYTE(v93) = v105[0];
  if (v105[0])
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
    if (!v106.__r_.__value_.__l.__size_)
    {
      uint64_t v10 = 0;
      goto LABEL_11;
    }
  }
  else if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else
  {
    std::string __p = v106;
  }
  uint64_t v10 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, (uint64_t)&v93, (uint64_t)a3, v4);
  if (v10 | v103)
  {
LABEL_11:
    int v13 = 1;
    if ((_BYTE)v93) {
      goto LABEL_16;
    }
LABEL_14:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_16;
  }
  uint64_t v10 = 0;
  int v13 = 0;
  if (!(_BYTE)v93) {
    goto LABEL_14;
  }
LABEL_16:
  if (!v13)
  {
    Node = 0;
    if (!v107) {
      return Node;
    }
    goto LABEL_170;
  }
  if (v103 && (!v10 || *(_WORD *)(v10 + 16) == 1)) {
    uint64_t v10 = v103;
  }
  Node = 0;
  LOBYTE(v93) = 0;
  char v100 = 0;
  v92[0] = &v102;
  v92[1] = a1;
  v92[2] = a2;
  v92[3] = &v93;
  v92[4] = a3;
  uint64_t v14 = (char *)a2[1];
  int v15 = v14;
  switch(*(_DWORD *)v14 & 0x1F)
  {
    case 0:
      if (v10) {
        goto LABEL_136;
      }
      if (v14)
      {
        int v16 = (int *)(a2[1] + 8);
      }
      else
      {
        int v15 = 0;
        int v16 = &dword_8;
      }
      uint64_t v67 = *v16;
      v68 = (char *)((char *)v16 + *a2 - v15 + v67);
      if (v67) {
        v69 = v68;
      }
      else {
        v69 = 0;
      }
      *(void *)__str = 0;
      size_t v88 = 0;
      uint64_t v89 = 0;
      Node = 0;
      if ((*(unsigned int (**)(void, char *, char *))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v69, __str))
      {
        if (v89 >= 0) {
          v70 = __str;
        }
        else {
          v70 = *(char **)__str;
        }
        if (v89 >= 0) {
          size_t v71 = HIBYTE(v89);
        }
        else {
          size_t v71 = v88;
        }
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 153, v70, v71);
      }
      if ((SHIBYTE(v89) & 0x80000000) == 0) {
        goto LABEL_137;
      }
      operator delete(*(void **)__str);
      if (v100) {
        goto LABEL_138;
      }
      goto LABEL_169;
    case 1:
      if (!v10) {
        goto LABEL_136;
      }
      if (v14)
      {
        unsigned int v17 = (unsigned char *)a2[1];
        uint64_t v18 = (int *)(v17 + 8);
      }
      else
      {
        unsigned int v17 = 0;
        int v15 = 0;
        uint64_t v18 = &dword_8;
      }
      uint64_t v35 = *v18;
      char v36 = (char *)((char *)v18 + *a2 - v15 + v35);
      long long v37 = v35 ? v36 : 0;
      unint64_t MangledName = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v37, 0, a3);
      if (!MangledName) {
        goto LABEL_136;
      }
      long long v39 = (swift::Demangle::__runtime::Node *)MangledName;
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 71);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3);
      swift::Demangle::__runtime::Node::addChild(Node, v39, a3);
      unint64_t GenericRequirements = swift::TrailingGenericContextObjects<swift::TargetExtensionContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader>::getGenericRequirements(v17);
      if (!v41) {
        goto LABEL_137;
      }
      unint64_t v42 = GenericRequirements;
      uint64_t v43 = v41;
      v85 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 43);
      char v44 = 0;
      long long v45 = (int *)(v42 + 8);
      uint64_t v46 = 12 * v43;
      long long v47 = v45;
      while (2)
      {
        if (v44) {
          goto LABEL_137;
        }
        uint64_t v48 = *(v45 - 1);
        long long v49 = v48 ? (char *)v47 + *a2 + v48 - a2[1] - 4 : 0;
        unint64_t v50 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v49, 0, a3);
        if (!v50) {
          goto LABEL_137;
        }
        long long v51 = (swift::Demangle::__runtime::Node *)v50;
        int v52 = *(v45 - 2) & 0x1F;
        if ((v52 - 1) >= 2)
        {
          if (v52 == 31)
          {
            unint64_t v62 = (char *)v47 + *a2 - a2[1];
            *(_DWORD *)__str = 0;
            int v63 = (*(uint64_t (**)(void, char *, char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v62, __str, 4);
            if (*(_DWORD *)__str) {
              int v64 = 0;
            }
            else {
              int v64 = v63;
            }
            if (v64 == 1)
            {
              int v65 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 41);
              swift::Demangle::__runtime::Node::addChild(v65, v51, a3);
              int v66 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, "C");
              swift::Demangle::__runtime::Node::addChild(v65, v66, a3);
              swift::Demangle::__runtime::Node::addChild(v85, v65, a3);
            }
            char v44 = v64 ^ 1;
          }
          else
          {
            if (!v52)
            {
              uint64_t v53 = a2[1];
              v91[0] = *a2;
              v91[1] = v53;
              *(void *)__str = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectProtocol<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>(a1, v91, (uint64_t)v45);
              long long v54 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(a1, (uint64_t *)__str, a3, a3);
              if (v54)
              {
                long long v55 = v54;
                long long v56 = a3;
                __int16 v57 = 36;
LABEL_98:
                int v61 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v56, v57);
                swift::Demangle::__runtime::Node::addChild(v61, v51, a3);
                swift::Demangle::__runtime::Node::addChild(v61, v55, a3);
                swift::Demangle::__runtime::Node::addChild(v85, v61, a3);
                char v44 = 0;
                goto LABEL_79;
              }
              goto LABEL_78;
            }
            char v44 = 0;
          }
LABEL_79:
          v47 += 3;
          v45 += 3;
          v46 -= 12;
          if (!v46)
          {
            if (v44) {
              goto LABEL_137;
            }
            int v21 = Node;
            BOOL v22 = v85;
            goto LABEL_168;
          }
          continue;
        }
        break;
      }
      uint64_t v58 = *v45;
      if (v58) {
        long long v59 = (char *)v47 + *a2 + v58 - a2[1];
      }
      else {
        long long v59 = 0;
      }
      unint64_t v60 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v59, 0, a3);
      if (v60)
      {
        long long v55 = (swift::Demangle::__runtime::Node *)v60;
        if ((*(v45 - 2) & 0x1F) == 1) {
          __int16 v57 = 39;
        }
        else {
          __int16 v57 = 36;
        }
        long long v56 = a3;
        goto LABEL_98;
      }
LABEL_78:
      char v44 = 1;
      goto LABEL_79;
    case 2:
      snprintf(__str, 0x12uLL, "$%llx", *a2);
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 1);
      v90[0] = 0;
      v90[1] = 0;
      size_t v19 = strlen(__str);
      swift::Demangle::__runtime::CharVector::append(v90, __str, v19, a3);
      BOOL v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, (uint64_t *)v90);
      swift::Demangle::__runtime::Node::addChild(Node, v20, a3);
      if (!v10) {
        goto LABEL_137;
      }
      int v21 = Node;
      BOOL v22 = (swift::Demangle::__runtime::Node *)v10;
      goto LABEL_168;
    case 3:
      if (!swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92)) {
        goto LABEL_136;
      }
      char v23 = 0;
      __int16 v24 = 180;
      goto LABEL_53;
    case 4:
      Node = 0;
      if (!v107 || !v105[0] || !v106.__r_.__value_.__l.__size_) {
        goto LABEL_137;
      }
      int v25 = *(unsigned __int16 *)(v10 + 16);
      if (v25 == 153)
      {
        int v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
        Node = v21;
        BOOL v22 = (swift::Demangle::__runtime::Node *)v10;
        goto LABEL_168;
      }
      if (v25 != 1) {
        goto LABEL_136;
      }
      long long v86 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
      unint64_t v26 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(a1, &v86, a3);
      if (!v26) {
        goto LABEL_136;
      }
      uint64_t v27 = (swift::Demangle::__runtime::Node *)v26;
      if (*(_WORD *)(v26 + 16) != 99) {
        goto LABEL_174;
      }
      int v28 = *(unsigned __int8 *)(v26 + 18);
      if ((v28 - 1) < 2) {
        goto LABEL_46;
      }
      if (v28 == 5 && *(_DWORD *)(v26 + 8))
      {
        uint64_t v27 = *(swift::Demangle::__runtime::Node **)v26;
LABEL_46:
        uint64_t v27 = *(swift::Demangle::__runtime::Node **)v27;
      }
      else
      {
        uint64_t v27 = 0;
      }
LABEL_174:
      int v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
      Node = v21;
      BOOL v22 = v27;
      goto LABEL_168;
    case 0x10:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92) & 1) == 0) {
        goto LABEL_136;
      }
      char v23 = 0;
      __int16 v24 = 24;
      goto LABEL_53;
    case 0x11:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92) & 1) == 0) {
        goto LABEL_136;
      }
      char v23 = 0;
      __int16 v24 = 219;
      goto LABEL_53;
    case 0x12:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92) & 1) == 0) {
        goto LABEL_136;
      }
      char v23 = 1;
      __int16 v24 = 61;
LABEL_53:
      if (!v10) {
        goto LABEL_136;
      }
      if (!v100) {
        goto LABEL_131;
      }
      int v29 = (unsigned __int16 **)v10;
      while (2)
      {
        if (*((_WORD *)v29 + 8) != 153)
        {
          int v30 = *((unsigned __int8 *)v29 + 18);
          if ((v30 - 1) >= 2)
          {
            if (v30 != 5 || !*((_DWORD *)v29 + 2)) {
              goto LABEL_131;
            }
            int v29 = (unsigned __int16 **)*v29;
          }
          int v29 = (unsigned __int16 **)*v29;
          if (!v29) {
            goto LABEL_131;
          }
          continue;
        }
        break;
      }
      if (v29[1] == (unsigned __int16 *)((char *)&dword_0 + 3))
      {
        std::string::size_type v31 = *v29;
        int v32 = *v31;
        int v33 = *((unsigned __int8 *)v31 + 2);
        if (v32 == 24415 && v33 == 67)
        {
          if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p.__r_.__value_.__r.__words[2], "t"))
          {
            __int16 v24 = 234;
          }
          else
          {
            uint64_t v72 = v96;
            if ((v96 & 0x80u) != 0) {
              uint64_t v72 = v95;
            }
            if (!v72)
            {
              uint64_t v73 = v99;
              if ((v99 & 0x80u) != 0) {
                uint64_t v73 = v98;
              }
              if ((v23 & (v73 == 0)) != 0) {
                __int16 v24 = 219;
              }
            }
          }
        }
      }
LABEL_131:
      if (*(_WORD *)(v10 + 16) != 1 || *((_WORD *)v102 + 8) != 101) {
        goto LABEL_158;
      }
      int v74 = *(unsigned __int8 *)(v10 + 18);
      if (v74 == 2 || v74 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
      {
        v75 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 176);
        v76 = v75;
        int v77 = *(unsigned __int8 *)(v10 + 18);
        v78 = (swift::Demangle::__runtime::Node **)v10;
        if ((v77 - 1) >= 2)
        {
          if (v77 != 5 || !*(_DWORD *)(v10 + 8))
          {
            v79 = 0;
            goto LABEL_152;
          }
          v78 = *(swift::Demangle::__runtime::Node ***)v10;
        }
        v79 = *v78;
LABEL_152:
        swift::Demangle::__runtime::Node::addChild(v75, v79, a3);
        swift::Demangle::__runtime::Node::addChild(v76, v102, a3);
        v102 = v76;
        int v80 = *(unsigned __int8 *)(v10 + 18);
        if (v80 == 2)
        {
LABEL_156:
          uint64_t v10 = *(void *)(v10 + 8);
          goto LABEL_158;
        }
        if (v80 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
        {
          uint64_t v10 = *(void *)v10;
          goto LABEL_156;
        }
        uint64_t v10 = 0;
LABEL_158:
        if (v100)
        {
          size_t v81 = (v99 & 0x80u) == 0 ? v99 : v98;
          if (v81)
          {
            if ((v99 & 0x80u) == 0) {
              v82 = &v97;
            }
            else {
              v82 = v97;
            }
            v83 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, v82, v81);
            v84 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 205);
            swift::Demangle::__runtime::Node::addChild(v84, v83, a3);
            swift::Demangle::__runtime::Node::addChild(v84, v102, a3);
            v102 = v84;
          }
        }
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, v24);
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3);
        BOOL v22 = v102;
        int v21 = Node;
LABEL_168:
        swift::Demangle::__runtime::Node::addChild(v21, v22, a3);
        if (!v100) {
          goto LABEL_169;
        }
        goto LABEL_138;
      }
LABEL_136:
      Node = 0;
LABEL_137:
      if (!v100) {
        goto LABEL_169;
      }
LABEL_138:
      if (((char)v99 & 0x80000000) == 0)
      {
        if (((char)v96 & 0x80000000) == 0) {
          goto LABEL_140;
        }
        goto LABEL_143;
      }
      operator delete(v97);
      if ((char)v96 < 0)
      {
LABEL_143:
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__s.__data_[15] < 0) {
          goto LABEL_144;
        }
LABEL_169:
        if (!v107) {
          return Node;
        }
        goto LABEL_170;
      }
LABEL_140:
      if ((__p.__r_.__value_.__s.__data_[15] & 0x80000000) == 0) {
        goto LABEL_169;
      }
LABEL_144:
      operator delete(v93);
      if (!v107) {
        return Node;
      }
LABEL_170:
      if (!v105[0] && SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      return Node;
    default:
      goto LABEL_137;
  }
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectableField<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,swift::RelativeIndirectablePointer<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,true,int,swift::RuntimeTarget<8u>::StoredSignedPointer>>(a1, v18, (int *)(v5 + 4), (uint64_t)__p);
  if (!v22) {
    goto LABEL_7;
  }
  if ((v20 & 0x80u) == 0) {
    size_t v6 = v20;
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  if (v6)
  {
    if (v21)
    {
LABEL_7:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 32) = 0;
      goto LABEL_8;
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    LOBYTE(v15) = 0;
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v6 >= 0x17)
    {
      uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v11 = v6 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v10 = (long long *)operator new(v11 + 1);
      *((void *)&v16 + 1) = v6;
      unint64_t v17 = v12 | 0x8000000000000000;
      *(void *)&long long v16 = v10;
    }
    else
    {
      HIBYTE(v17) = v6;
      uint64_t v10 = &v16;
    }
    memmove(v10, v9, v6);
    *((unsigned char *)v10 + v6) = 0;
    int v13 = v15;
    *(unsigned char *)a3 = v15;
    if (v13)
    {
      uint64_t v14 = *((void *)&v16 + 1);
      *(void *)(a3 + 8) = v16;
      *(void *)(a3 + 16) = v14;
    }
    else
    {
      *(_OWORD *)(a3 + 8) = v16;
      *(void *)(a3 + 24) = v17;
    }
    *(unsigned char *)(a3 + 32) = 1;
  }
  else if (v21)
  {
    ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v15, a1, v21);
    uint64_t v7 = v16;
    if (!(void)v16) {
      goto LABEL_7;
    }
    uint64_t v8 = v15;
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v7;
    *(unsigned char *)(a3 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 32) = 1;
  }
LABEL_8:
  if (v22)
  {
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(uint64_t a1, void *a2, uint64_t a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = 0;
  *a5 = 0;
  size_t v6 = *(char **)(a3 + 16);
  if (*(unsigned char *)(a3 + 32)) {
    BOOL v7 = *(unsigned char *)a3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 0) {
    return v5;
  }
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v15 = (_DWORD *)a2[1];
  if (v15) {
    BOOL v16 = (*v15 & 0x10) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (!v15) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v17 = a2[1];
    uint64_t v18 = 0;
    if (!v15) {
      goto LABEL_18;
    }
  }
  if ((*v15 & 0x1F) == 3) {
    uint64_t v18 = a2[1];
  }
LABEL_18:
  if (!(v17 | v18) || (*(_DWORD *)v6 & 0x1F) != 2) {
    return 0;
  }
  uint64_t v5 = 0;
  if (v6 && (*(_DWORD *)v6 & 0x10000) != 0)
  {
    TrailingObjectsImpl = (int *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(*(unsigned char **)(a3 + 16));
    uint64_t v20 = *TrailingObjectsImpl;
    if (v20) {
      uint64_t v21 = (char *)((char *)TrailingObjectsImpl + v14 - v6 + v20);
    }
    else {
      uint64_t v21 = 0;
    }
    unint64_t MangledName = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v21, 1, a4);
    if (!MangledName) {
      return 0;
    }
    unint64_t v23 = MangledName;
    if (*(_WORD *)(MangledName + 16) == 99)
    {
      int v24 = *(unsigned __int8 *)(MangledName + 18);
      if ((v24 - 1) < 2)
      {
LABEL_31:
        unint64_t v23 = *(void *)v23;
        goto LABEL_33;
      }
      if (v24 == 5 && *(_DWORD *)(MangledName + 8))
      {
        unint64_t v23 = *(void *)MangledName;
        goto LABEL_31;
      }
      unint64_t v23 = 0;
    }
LABEL_33:
    int v25 = *(unsigned __int8 *)(v23 + 18);
    unint64_t v26 = v23;
    if (v25 != 2)
    {
      if (v25 != 5 || *(_DWORD *)(v23 + 8) < 2u) {
        return 0;
      }
      unint64_t v26 = *(void *)v23;
    }
    uint64_t v5 = *(uint64_t **)(v26 + 8);
    int v27 = *((unsigned __int16 *)v5 + 8);
    if (v27 == 176 || v27 == 137)
    {
      int v28 = *((unsigned __int8 *)v5 + 18);
      int v29 = v5;
      if (v28 == 2)
      {
LABEL_43:
        uint64_t v30 = v29[1];
        if (*(_WORD *)(v30 + 16) == 101 && *(unsigned char *)(v30 + 18) == 3)
        {
          v48[0] = 0;
          v48[72] = 0;
          uint64_t v31 = a2[1];
          v44[0] = *a2;
          v44[1] = v31;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(a1, v44, (uint64_t)v48, (uint64_t)v45);
          if (!v47)
          {
            uint64_t v5 = 0;
LABEL_73:
            std::optional<swift::TypeImportInfo<std::string>>::~optional((uint64_t)v48);
            return v5;
          }
          unsigned __int8 v32 = v46;
          if ((v46 & 0x80u) == 0) {
            int v33 = v45;
          }
          else {
            int v33 = (void **)v45[0];
          }
          if ((v46 & 0x80u) == 0) {
            size_t v34 = v46;
          }
          else {
            size_t v34 = (size_t)v45[1];
          }
          if (v34 != *(void *)(v30 + 8) || v34 && memcmp(v33, *(const void **)v30, v34))
          {
            uint64_t v5 = 0;
            BOOL v35 = 1;
LABEL_70:
            if (v35 && (v32 & 0x80) != 0) {
              operator delete(v45[0]);
            }
            goto LABEL_73;
          }
          v39[0] = v14;
          v39[1] = v6;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v39, (uint64_t)v40);
          std::__optional_storage_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>>(a3, v40);
          if (v43 && !v40[0] && v42 < 0) {
            operator delete(__p);
          }
          int v37 = *(unsigned __int8 *)(v23 + 18);
          if ((v37 - 1) >= 2)
          {
            if (v37 != 5 || !*(_DWORD *)(v23 + 8))
            {
              unint64_t v38 = 0;
              goto LABEL_69;
            }
            unint64_t v23 = *(void *)v23;
          }
          unint64_t v38 = *(void *)v23;
LABEL_69:
          *a5 = v38;
          unsigned __int8 v32 = v46;
          BOOL v35 = v47 != 0;
          goto LABEL_70;
        }
        return 0;
      }
      if (v28 == 5 && *((_DWORD *)v5 + 2) >= 2u)
      {
        int v29 = (uint64_t *)*v5;
        goto LABEL_43;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 0;
  }
  v14[2] = v4;
  void v14[3] = v5;
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    v14[0] = *(void *)(a2 + 8);
    v14[1] = v7;
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v14, a3);
  }
  else
  {
    uint64_t v11 = *(_WORD **)(a2 + 8);
    uint64_t v9 = a2 + 8;
    uint64_t v10 = v11;
    if (*(char *)(v9 + 23) < 0)
    {
      unint64_t v12 = *(void *)(v9 + 8);
    }
    else
    {
      uint64_t v10 = (_WORD *)v9;
      unint64_t v12 = *(unsigned __int8 *)(v9 + 23);
    }
    uint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v10, v12, a3);
    if (result && *(_WORD *)(result + 16) == 232)
    {
      int v13 = *(unsigned __int8 *)(result + 18);
      if ((v13 - 1) >= 2)
      {
        if (v13 != 5 || !*(_DWORD *)(result + 8)) {
          return 0;
        }
        uint64_t result = *(void *)result;
      }
      return *(void *)result;
    }
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()(uint64_t a1)
{
  if (**(void **)a1) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  size_t v6 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  v18[0] = v8;
  v18[1] = v7;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(v4, v18, v5, (uint64_t)__p);
  BOOL v1 = v21 != 0;
  if (v21)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    if ((v20 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      size_t v11 = v20;
    }
    else {
      size_t v11 = (size_t)__p[1];
    }
    if (v11)
    {
      unint64_t v12 = (char *)v9[1];
      int v13 = &v12[v11];
      if (v12) {
        BOOL v14 = (unint64_t)v13 > v9[2];
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        unint64_t v15 = 2 * v9[4];
        if (v15 <= v11 + 1) {
          unint64_t v15 = v11 + 1;
        }
        v9[4] = v15;
        unint64_t v16 = v15 + 8;
        uint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        *uint64_t v17 = v9[3];
        unint64_t v12 = (char *)(v17 + 1);
        void v9[2] = (char *)v17 + v16;
        v9[3] = v17;
        int v13 = (char *)v17 + v11 + 8;
      }
      v9[1] = v13;
      memmove(v12, v10, v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    **(void **)a1 = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v9, 101, (uint64_t)v12, v11);
    if (v21 && (char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return v1;
}

unint64_t swift::TrailingGenericContextObjects<swift::TargetExtensionContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader>::getGenericRequirements(unsigned char *a1)
{
  if (a1) {
    BOOL v1 = a1;
  }
  else {
    BOOL v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v3 = (unsigned int *)a1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3;
  if (v3 == (unsigned int *)-12)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3 + 3;
    if (!v3) {
      uint64_t v3 = 0;
    }
  }
  unint64_t v6 = *v3;
  if ((v6 & 0x80) != 0)
  {
    if (v4) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v7 = *((unsigned __int16 *)v8 + 6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return ((unint64_t)&v5[2 * ((v6 >> 7) & 1)] + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectProtocol<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a2 + a3 - a2[1];
  unsigned int v10 = 0;
  if ((*(unsigned int (**)(void, uint64_t, unsigned int *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v4, &v10, 4))
  {
    unsigned int v5 = v10;
    unint64_t v6 = (int)v10 & 0xFFFFFFFFFFFFFFFCLL;
    v10 &= 0xFFFFFFFC;
    unint64_t v7 = v4 + v6;
    unint64_t v9 = v4 + v6;
    if ((v5 & 1) == 0) {
      return v7 | ((unint64_t)v5 >> 1) & 1;
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488)))
    {
      unint64_t v7 = v9;
      return v7 | ((unint64_t)v5 >> 1) & 1;
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(uint64_t a1, uint64_t *a2, swift::Demangle::__runtime::NodeFactory *a3, swift::Demangle::__runtime::NodeFactory *a4)
{
  char v21 = a4;
  uint64_t v6 = *a2;
  if (*a2)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCProtocolName(a1, v6 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&__p);
    if ((v20 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v20 & 0x80u) == 0) {
      unint64_t v11 = v20;
    }
    else {
      unint64_t v11 = v19;
    }
    if (v11 >= 4 && *(_DWORD *)p_p == 1349801055)
    {
      uint64_t v17 = 0;
      uint64_t v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a3, p_p, v11, v16);
      if (v17 == v16)
      {
        (*(void (**)(void *))(v16[0] + 32))(v16);
      }
      else if (v17)
      {
        (*(void (**)(void))(*v17 + 40))();
      }
      if (v8)
      {
        while (1)
        {
          int v13 = *(unsigned __int16 *)(v8 + 16);
          BOOL v14 = (v13 - 190) > 0x2E || ((1 << (v13 + 66)) & 0x640000000001) == 0;
          if (v14 && v13 != 99) {
            break;
          }
          int v15 = *(unsigned __int8 *)(v8 + 18);
          if (v15 != 1)
          {
            if (v15 != 5 || *(_DWORD *)(v8 + 8) != 1)
            {
              uint64_t v8 = 0;
              break;
            }
            uint64_t v8 = *(void *)v8;
          }
          uint64_t v8 = *(void *)v8;
        }
      }
    }
    else
    {
      uint64_t v8 = (uint64_t)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver::objcProtocol(&v21, p_p, v11);
    }
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    ((void (*)(void **__return_ptr, uint64_t, unint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v22, a1, v6 & *(void *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v7 = v23;
    if (v23)
    {
      std::string __p = v22;
      unint64_t v19 = (unint64_t)v23;
      uint64_t v8 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, &__p, a3);
      if (v8 && ((*v7 & 0x10) != 0 || (*v7 & 0x1F) == 3))
      {
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v8, a3);
        return Node;
      }
    }
    else
    {
      return 0;
    }
  }
  return (swift::Demangle::__runtime::Node *)v8;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, void *__src, size_t __len)
{
  if (__len)
  {
    uint64_t v8 = (void *)a1[1];
    size_t v9 = (size_t)v8 + __len;
    if (v8) {
      BOOL v10 = v9 > a1[2];
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      unint64_t v11 = 2 * a1[4];
      if (v11 <= __len + 1) {
        unint64_t v11 = __len + 1;
      }
      a1[4] = v11;
      unint64_t v12 = v11 + 8;
      int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      BOOL v14 = (char *)v13 + v12;
      *int v13 = a1[3];
      uint64_t v8 = v13 + 1;
      a1[2] = v14;
      a1[3] = v13;
      size_t v9 = (size_t)v13 + __len + 8;
    }
    a1[1] = v9;
    memmove(v8, __src, __len);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(a1, a2, (uint64_t)v8, __len);
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(uint64_t a1, void *a2, void *a3)
{
  if (a2[1]) {
    uint64_t v6 = (unsigned char *)a2[1];
  }
  else {
    uint64_t v6 = 0;
  }
  if ((v6[2] & 1) == 0) {
    return 0;
  }
  if (!v6) {
    uint64_t v6 = 0;
  }
  TrailingObjectsImpl = (int *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(v6);
  uint64_t v9 = *TrailingObjectsImpl;
  if (v9) {
    BOOL v10 = (char *)TrailingObjectsImpl + *a2 - a2[1] + v9;
  }
  else {
    BOOL v10 = 0;
  }

  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v10, 1, a3);
}

uint64_t std::optional<swift::TypeImportInfo<std::string>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
    {
      operator delete(*(void **)(a1 + 48));
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
          return a1;
        }
LABEL_8:
        operator delete(*(void **)a1);
        return a1;
      }
    }
    else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_8;
  }
  return a1;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectableField<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,swift::RelativeIndirectablePointer<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,true,int,swift::RuntimeTarget<8u>::StoredSignedPointer>>(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  if (!v6)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    goto LABEL_5;
  }
  uint64_t v7 = (uint64_t)a3 + *a2 - a2[1] + (v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) == 0)
  {
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
    *(void *)(a4 + 24) = v7;
LABEL_5:
    *(unsigned char *)(a4 + 32) = 1;
    return;
  }
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v7, 8u, (uint64_t)&__s);
  if (!v12)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 32) = 0;
    return;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v9, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      goto LABEL_14;
    }
  }
  else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
  {
    std::string v9 = __s;
LABEL_14:
    uint64_t v8 = v11;
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(a1 + 2504) & v11;
  *((unsigned char *)&v9.__r_.__value_.__s + 23) = 0;
  v9.__r_.__value_.__s.__data_[0] = 0;
LABEL_16:
  *(std::string *)a4 = v9;
  *(void *)(a4 + 24) = v8;
  *(unsigned char *)(a4 + 32) = 1;
  if (v12)
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
  }
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v31 = 0;
  uint64_t v7 = (_DWORD *)a2[1];
  uint64_t v8 = v7;
  int v9 = *v7 & 0x1F;
  if (v7) {
    BOOL v10 = v9 == 3;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (v7)
    {
      uint64_t v15 = (int)v7[2];
      uint64_t v13 = *a2 + 8 + v15;
      BOOL v14 = v15 == 0;
LABEL_14:
      if (v14) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v13;
      }
      if ((*(unsigned int (**)(void, uint64_t, void **))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v16, __p))
      {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }
  else
  {
    if (v7) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11 && v7)
    {
      uint64_t v12 = (int)v7[2];
      uint64_t v13 = *a2 + v12 + 8;
      BOOL v14 = v12 == 0;
      goto LABEL_14;
    }
  }
  if (v7) {
    BOOL v18 = (*v7 & 0x10) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18
    || !v7
    || ((uint64_t v19 = (int)v7[2], v19) ? (v20 = *a2 + v19 + 8) : (v20 = 0),
        ((*(uint64_t (**)(void, uint64_t, void **))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v20, __p) & 1) == 0))
  {
LABEL_36:
    char v17 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_37;
  }
  if ((*((unsigned char *)v8 + 2) & 4) == 0) {
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a3 + 72)) {
    goto LABEL_33;
  }
  if ((*(char *)(a3 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a3 + 47) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    operator delete(*(void **)(a3 + 24));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_65:
    operator delete(*(void **)a3);
    goto LABEL_33;
  }
  operator delete(*(void **)(a3 + 48));
  if (*(char *)(a3 + 47) < 0) {
    goto LABEL_64;
  }
LABEL_32:
  if (*(char *)(a3 + 23) < 0) {
    goto LABEL_65;
  }
LABEL_33:
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(unsigned char *)(a3 + 72) = 1;
  char v21 = (void *)HIBYTE(v31);
  if (v31 < 0) {
    char v21 = __p[1];
  }
  uint64_t v22 = (uint64_t)v21 + v20 + 1;
  do
  {
    int v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    if ((*(uint64_t (**)(void, uint64_t, void **))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v22, &v27))
    {
      if (SHIBYTE(v29) < 0)
      {
        unint64_t v24 = v28;
        if (!v28)
        {
          int v23 = 3;
LABEL_42:
          operator delete(v27);
          continue;
        }
      }
      else
      {
        if (!HIBYTE(v29)) {
          goto LABEL_57;
        }
        unint64_t v24 = HIBYTE(v29);
      }
      v22 += v24 + 1;
      if (v29 >= 0) {
        int v25 = (char *)&v27;
      }
      else {
        int v25 = (char *)v27;
      }
      swift::TypeImportInfo<std::string>::collect<false>(a3, v25, v24);
      int v23 = 0;
      if (SHIBYTE(v29) < 0) {
        goto LABEL_42;
      }
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 24) = 0;
      int v23 = 1;
      if (SHIBYTE(v29) < 0) {
        goto LABEL_42;
      }
    }
  }
  while (!v23);
  if (v23 != 3) {
    goto LABEL_38;
  }
LABEL_57:
  uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
  if ((v26 & 0x80u) != 0) {
    uint64_t v26 = *(void *)(a3 + 8);
  }
  if (v26)
  {
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v31 = *(void *)(a3 + 16);
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
LABEL_18:
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(void *)(a4 + 16) = v31;
  __p[1] = 0;
  uint64_t v31 = 0;
  __p[0] = 0;
  char v17 = 1;
LABEL_37:
  *(unsigned char *)(a4 + 24) = v17;
LABEL_38:
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t swift::TypeImportInfo<std::string>::collect<false>(uint64_t a1, char *__src, unint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a1;
  unsigned int v5 = __src + 1;
  int v4 = *__src;
  size_t v6 = a3 - 1;
  if (v4 == 83)
  {
    if (a3 == 1) {
      return 0;
    }
    char v7 = *(unsigned char *)(a1 + 47);
    if (v7 < 0)
    {
      if (*(void *)(a1 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 47))
    {
      return 0;
    }
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x18)
      {
        uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v14 = v6 | 7;
        }
        uint64_t v15 = v14 + 1;
        p_dst = (long long *)operator new(v14 + 1);
        *((void *)&__dst + 1) = v6;
        unint64_t v17 = v15 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v17) = a3 - 1;
        p_dst = &__dst;
      }
      v3 += 24;
      goto LABEL_41;
    }
LABEL_44:
    abort();
  }
  if (v4 == 82)
  {
    if (a3 == 1) {
      return 0;
    }
    char v7 = *(unsigned char *)(a1 + 71);
    if (v7 < 0)
    {
      if (*(void *)(a1 + 56)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 71))
    {
      return 0;
    }
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x18)
      {
        uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v10 = v6 | 7;
        }
        uint64_t v11 = v10 + 1;
        p_dst = (long long *)operator new(v10 + 1);
        *((void *)&__dst + 1) = v6;
        unint64_t v17 = v11 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v17) = a3 - 1;
        p_dst = &__dst;
      }
      v3 += 48;
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  if (v4 != 78 || a3 == 1) {
    return 0;
  }
  char v7 = *(unsigned char *)(a1 + 23);
  if (v7 < 0)
  {
    if (!*(void *)(a1 + 8)) {
      goto LABEL_18;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 23)) {
    return 0;
  }
LABEL_18:
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_44;
  }
  if (a3 >= 0x18)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (long long *)operator new(v12 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v17 = v13 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v17) = a3 - 1;
    p_dst = &__dst;
  }
LABEL_41:
  memmove(p_dst, v5, v6);
  *((unsigned char *)p_dst + v6) = 0;
  if (v7 < 0) {
    operator delete(*(void **)v3);
  }
  *(_OWORD *)uint64_t v3 = __dst;
  *(void *)(v3 + 16) = v17;
  return 1;
}

void std::__optional_storage_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>>(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == a2[32])
  {
    if (!*(unsigned char *)(a1 + 32)) {
      return;
    }
    int v4 = (void **)(a1 + 8);
    unsigned int v5 = (long long *)(a2 + 8);
    int v6 = *a2;
    if ((*(unsigned char *)a1 != 0) != (*a2 != 0))
    {
      if (!*(unsigned char *)a1 && *(char *)(a1 + 31) < 0) {
        operator delete(*v4);
      }
      if (!v6)
      {
        long long v7 = *v5;
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(_OWORD *)int v4 = v7;
        *((void *)a2 + 2) = 0;
        *((void *)a2 + 3) = 0;
        *(void *)unsigned int v5 = 0;
LABEL_23:
        *(unsigned char *)a1 = *a2;
        return;
      }
    }
    else if (!*(unsigned char *)a1)
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v4);
      }
      long long v13 = *v5;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(_OWORD *)int v4 = v13;
      a2[31] = 0;
      a2[8] = 0;
      goto LABEL_23;
    }
    uint64_t v11 = *((void *)a2 + 2);
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = v11;
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)a1 && *(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    uint64_t v8 = (long long *)(a2 + 8);
    int v9 = *a2;
    *(unsigned char *)a1 = v9;
    if (v9)
    {
      uint64_t v10 = *((void *)a2 + 2);
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = v10;
    }
    else
    {
      long long v12 = *v8;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(_OWORD *)(a1 + 8) = v12;
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
      *(void *)uint64_t v8 = 0;
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCProtocolName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = malloc_type_malloc(0x10uLL, 0xAD4E4A50uLL);
  if (v6)
  {
    long long v7 = v6;
    if ((*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, v6, 16))
    {
      __p[1] = 0;
      uint64_t v9 = 0;
      __p[0] = 0;
      if ((*(unsigned int (**)(void, void, void **))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v7[1], __p))
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(void *)(a3 + 16) = v9;
      }
      else
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        if (SHIBYTE(v9) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    free(v7);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver::objcProtocol(swift::Demangle::__runtime::NodeFactory **a1, const void *a2, size_t a3)
{
  int v6 = *a1;
  uint64_t v7 = *((void *)*a1 + 1);
  uint64_t v8 = (char *)(v7 + 3);
  if (v7) {
    BOOL v9 = (unint64_t)v8 > *((void *)*a1 + 2);
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    unint64_t v10 = 2 * *((void *)v6 + 4);
    if (v10 <= 4) {
      unint64_t v10 = 4;
    }
    *((void *)v6 + 4) = v10;
    unint64_t v11 = v10 + 8;
    long long v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    uint64_t v7 = (uint64_t)(v12 + 1);
    *long long v12 = *((void *)v6 + 3);
    uint64_t v8 = (char *)v12 + 11;
    *((void *)v6 + 2) = (char *)v12 + v11;
    *((void *)v6 + 3) = v12;
  }
  *((void *)v6 + 1) = v8;
  *(unsigned char *)(v7 + 2) = 67;
  *(_WORD *)uint64_t v7 = 24415;
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 3);
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 180);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *a1);
  uint64_t v15 = *a1;
  if (a3)
  {
    uint64_t v16 = (char *)*((void *)v15 + 1);
    unint64_t v17 = &v16[a3];
    if (v16) {
      BOOL v18 = (unint64_t)v17 > *((void *)v15 + 2);
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v15 + 4);
      if (v19 <= a3 + 1) {
        unint64_t v19 = a3 + 1;
      }
      *((void *)v15 + 4) = v19;
      unint64_t v20 = v19 + 8;
      char v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      uint64_t v22 = (char *)v21 + v20;
      *char v21 = *((void *)v15 + 3);
      uint64_t v16 = (char *)(v21 + 1);
      *((void *)v15 + 2) = v22;
      *((void *)v15 + 3) = v21;
      unint64_t v17 = (char *)v21 + a3 + 8;
    }
    *((void *)v15 + 1) = v17;
    memmove(v16, a2, a3);
  }
  else
  {
    uint64_t v16 = 0;
  }
  int v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v15, 101, (uint64_t)v16, a3);
  swift::Demangle::__runtime::Node::addChild(Node, v23, *a1);
  return Node;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  ((void (*)(uint64_t *__return_ptr))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v9);
  unsigned int v5 = v10;
  if (!v10) {
    return 0;
  }
  v11[0] = v9;
  v11[1] = v10;
  int v6 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v11, a3, 50);
  if (v6 && ((*v5 & 0x10) != 0 || (*v5 & 0x1F) == 3))
  {
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, v6, a3);
    return Node;
  }
  return v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(a1);
  uint64_t v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    unsigned int v5 = v3;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    unsigned int v5 = 0;
  }
  if ((*((_WORD *)v5 + 7) & 2) != 0
    && (!v3 ? (int v6 = 0) : (int v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (uint64_t v3 = 0) : (uint64_t v3 = a1), (*((_WORD *)v3 + 7)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      unsigned int v5 = a1;
      goto LABEL_10;
    }
  }
  unsigned int v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      unsigned int v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 7) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-8)
  {
    BOOL v1 = 0;
    goto LABEL_3;
  }
  BOOL v1 = a1 + 8;
  if (a1)
  {
LABEL_3:
    uint64_t v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  uint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 4);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      unsigned int v5 = a1;
      goto LABEL_14;
    }
  }
  unsigned int v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 5);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 7) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[8 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    BOOL v1 = a1;
  }
  else {
    BOOL v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 7) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned int v5 = v4;
  if (v4 == (unsigned int *)-8)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 2;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 4);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      long long v12 = v5;
    }
    else {
      long long v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 5);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[2 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    BOOL v1 = a1;
  }
  else {
    BOOL v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    BOOL v1 = 0;
  }
  if ((*((_WORD *)v1 + 7) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (unsigned int v5 = 0) : (unsigned int v5 = v3), (*((_WORD *)v5 + 7))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C84B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C84B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor(*(void *)(a1 + 8), *a3, (uint64_t)v4);
  if (v5 == 1)
  {
    ((void (*)(void, uint64_t, void))v4[1])(v4[0], 3, 0);
  }
  else if (!v5)
  {
    return v4[0];
  }
  return 0;
}

void *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  v14[1] = 0;
  v14[2] = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 2400;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v53 = 0;
  v14[0] = off_C9440;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  int v51 = 0;
  ((void (*)(uint64_t *__return_ptr))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v54);
  if (v55
    && (*(_DWORD *)v55 & 0x1F) == 4
    && HIWORD(*(_DWORD *)v55) > a2
    && ((unint64_t v6 = v55,
         uint64_t v7 = v54,
         uint64_t v8 = (int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v55)
                    + 4 * a2),
         uint64_t v9 = *v8,
         uint64_t v10 = (char *)v8 + v7 - (void)v6 + v9,
         v9)
      ? (unsigned int v11 = v10)
      : (unsigned int v11 = 0),
        (unint64_t MangledName = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v11, 0, v14)) != 0))
  {
    uint64_t v54 = a1 + 296;
    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v54, MangledName, 0, (void *)a3);
  }
  else
  {
    *(_WORD *)(a3 + 16) = 1;
    *(void *)a3 = "Failed to read type mangling for descriptor.";
    *(void *)(a3 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
  }
  v14[0] = off_C9440;
  if (v53 == v52)
  {
    (*(void (**)(void *))(v52[0] + 32))(v52);
  }
  else if (v53)
  {
    (*(void (**)(void *))(*v53 + 40))(v53);
  }
  v14[0] = off_C9418;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v15);
  if (v17) {
    *(unsigned char *)(v17 + 48) = 0;
  }
  return result;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  uint64_t v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    __int16 v5 = v3;
  }
  else {
    __int16 v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    __int16 v5 = 0;
  }
  if ((*((_WORD *)v5 + 7) & 2) != 0
    && (!v3 ? (unint64_t v6 = 0) : (unint64_t v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (uint64_t v3 = 0) : (uint64_t v3 = a1), (*((_WORD *)v3 + 7)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      __int16 v5 = a1;
      goto LABEL_10;
    }
  }
  __int16 v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      __int16 v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 7) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-8)
  {
    BOOL v1 = 0;
    goto LABEL_3;
  }
  BOOL v1 = a1 + 8;
  if (a1)
  {
LABEL_3:
    uint64_t v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  uint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 4);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      __int16 v5 = a1;
      goto LABEL_14;
    }
  }
  __int16 v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 5);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v11 = a1;
    }
    else {
      unsigned int v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 7) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[8 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    BOOL v1 = a1;
  }
  else {
    BOOL v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 7) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  __int16 v5 = v4;
  if (v4 == (unsigned int *)-8)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 2;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 4);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      long long v12 = v5;
    }
    else {
      long long v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 5);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[2 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    BOOL v1 = a1;
  }
  else {
    BOOL v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    BOOL v1 = 0;
  }
  if ((*((_WORD *)v1 + 7) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (__int16 v5 = 0) : (__int16 v5 = v3), (*((_WORD *)v5 + 7))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

void swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(uint64_t *a1@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  if (a3 > 0x400)
  {
LABEL_2:
    *((_WORD *)a4 + 8) = 1;
    __int16 v5 = "Mangled type is too complex";
LABEL_3:
    *a4 = v5;
    a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    return;
  }
  unsigned int v6 = a3;
  uint8x8_t v7 = (uint64_t **)a2;
  while (2)
  {
    if (!v7)
    {
      *((_WORD *)a4 + 8) = 1;
      __int16 v5 = "Node is NULL";
      goto LABEL_3;
    }
    int v9 = *((unsigned __int16 *)v7 + 8);
    switch(*((_WORD *)v7 + 8))
    {
      case 3:
        int v10 = *((unsigned __int8 *)v7 + 18);
        if ((v10 - 1) < 2) {
          goto LABEL_49;
        }
        if (v10 != 5 || !*((_DWORD *)v7 + 2)) {
          operator new();
        }
        goto LABEL_48;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
        int v18 = *((unsigned __int8 *)v7 + 18);
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            goto LABEL_88;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_87;
            }
LABEL_88:
            if ((v9 - 165) < 2)
            {
              uint64_t v37 = 0x10000;
            }
            else if (v9 == 22)
            {
              uint64_t v37 = 196608;
            }
            else if (v9 == 222)
            {
              uint64_t v37 = 0x20000;
            }
            else
            {
              uint64_t v37 = 0;
            }
            if (v18 == 5)
            {
              v108 = (uint64_t **)*v7;
              if (*((_DWORD *)v7 + 2)) {
                v109 = (unsigned __int16 *)(*v108 + 2);
              }
              else {
                v109 = (unsigned __int16 *)&dword_10;
              }
              uint64_t v110 = *v109 == 23;
              if (*((_WORD *)v108[v110] + 8) == 67)
              {
LABEL_302:
                v111 = v7;
                if (v18 == 2 || v18 == 5 && (v111 = v108, *((_DWORD *)v7 + 2) > v110)) {
                  v112 = v111[v110];
                }
                else {
                  v112 = 0;
                }
                int v117 = *((unsigned __int8 *)v112 + 18);
                if ((v117 - 1) >= 2)
                {
                  if (v117 != 5 || !*((_DWORD *)v112 + 2)) {
                    operator new();
                  }
                  v112 = (uint64_t *)*v112;
                }
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(a4, a1, *v112, v6 + 1, 1);
                int v118 = *((unsigned __int16 *)a4 + 8);
                if (a4 && v118 == 1) {
                  return;
                }
                if (*((_WORD *)a4 + 8))
                {
                  if (v110) {
                    LODWORD(v110) = 2;
                  }
                  else {
                    LODWORD(v110) = 1;
                  }
                  if (v118 == 1) {
                    ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                  }
                  unsigned int v114 = 0;
                  uint64_t v113 = 0;
                }
                else
                {
                  unsigned int v114 = 0;
                  uint64_t v113 = *a4;
                  if (v110) {
                    LODWORD(v110) = 2;
                  }
                  else {
                    LODWORD(v110) = 1;
                  }
                }
LABEL_308:
                unint64_t v115 = *((unsigned __int8 *)v7 + 18);
                if (v115 == 1)
                {
                  unint64_t v116 = *((unsigned __int16 *)v7[v110] + 8) == 130;
                }
                else
                {
                  if (v115 != 2)
                  {
                    char v119 = 0;
                    v120 = *v7;
                    if (*(_WORD *)((*v7)[v110] + 16) == 130)
                    {
                      v114 |= 0x10u;
                      unint64_t v116 = (v110 + 1);
                    }
                    else
                    {
                      unint64_t v116 = v110;
                    }
LABEL_332:
                    if (*(_WORD *)(v120[v116] + 16) == 68)
                    {
                      v121 = (unsigned __int8 **)v7;
                      if ((v119 & 1) == 0) {
                        v121 = (unsigned __int8 **)*v7;
                      }
                      HIDWORD(v123) = *v121[v116];
                      LODWORD(v123) = (HIDWORD(v123) << 24) - 1677721600;
                      unsigned __int8 v122 = v123 >> 25;
                      if (v122 > 7u) {
                        unint64_t v124 = 0;
                      }
                      else {
                        unint64_t v124 = qword_C6940[(char)v122];
                      }
                      unint64_t v116 = (v116 + 1);
                    }
                    else
                    {
                      unint64_t v124 = 0;
                    }
                    v134 = v7;
                    if ((v119 & 1) == 0) {
                      v134 = *v7;
                    }
                    if (*(_WORD *)(v134[v116] + 16) == 272)
                    {
                      uint64_t v135 = 0;
                      LODWORD(v116) = v116 + 1;
                      uint64_t v136 = 0x1000000;
                      goto LABEL_747;
                    }
                    v137 = v7;
                    if ((v119 & 1) == 0) {
                      v137 = *v7;
                    }
                    if (*(_WORD *)(v137[v116] + 16) != 273)
                    {
                      uint64_t v136 = 0;
                      uint64_t v135 = 0;
                      goto LABEL_747;
                    }
                    if (v115 != 1)
                    {
                      if (v115 == 5)
                      {
                        unint64_t v115 = *((unsigned int *)v7 + 2);
                      }
                      else
                      {
                        if (v115 != 2) {
                          goto LABEL_603;
                        }
                        unint64_t v115 = 2;
                      }
                    }
                    if (v115 > v116)
                    {
                      v218 = v7;
                      if ((v119 & 1) == 0) {
                        v218 = *v7;
                      }
                      v219 = (uint64_t *)v218[v116];
                      goto LABEL_604;
                    }
LABEL_603:
                    v219 = 0;
LABEL_604:
                    int v220 = *((unsigned __int8 *)v219 + 18);
                    if ((v220 - 1) >= 2)
                    {
                      if (v220 != 5 || !*((_DWORD *)v219 + 2)) {
                        operator new();
                      }
                      unint64_t v221 = v124;
                      uint64_t v222 = v113;
                      v219 = (uint64_t *)*v219;
                    }
                    else
                    {
                      unint64_t v221 = v124;
                      uint64_t v222 = v113;
                    }
                    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(a4, a1, *v219, v6 + 1, 1);
                    int v223 = *((unsigned __int16 *)a4 + 8);
                    if (a4 && v223 == 1) {
                      return;
                    }
                    if (*((_WORD *)a4 + 8))
                    {
                      LODWORD(v116) = v116 + 1;
                      v114 |= 1u;
                      if (v223 == 1) {
                        ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                      }
                      uint64_t v135 = 0;
                    }
                    else
                    {
                      uint64_t v135 = *a4;
                      LODWORD(v116) = v116 + 1;
                      v114 |= 1u;
                    }
                    uint64_t v136 = 0x1000000;
                    uint64_t v113 = v222;
                    unint64_t v124 = v221;
LABEL_747:
                    int v281 = v116;
                    unint64_t v282 = *((unsigned __int8 *)v7 + 18);
                    if (v282 == 1) {
                      goto LABEL_780;
                    }
                    uint64_t v374 = v37;
                    if (v282 == 2)
                    {
                      int v283 = *((unsigned __int16 *)v7[v116] + 8);
                      BOOL v284 = v283 == 66;
                      int v285 = v283 == 66 ? v116 + 1 : v116;
                      BOOL v286 = v284;
                      unsigned int v287 = *((_WORD *)v7[v285] + 8) == 271 ? v285 + 1 : v285;
                      unint64_t v288 = (unint64_t)v286 << 30;
                      unint64_t v289 = (unint64_t)(*((_WORD *)v7[v285] + 8) == 271) << 29;
                      unint64_t v290 = (unint64_t)(v124 != 0) << 27;
                      char v291 = 1;
                      unint64_t v292 = 2;
                    }
                    else
                    {
                      char v291 = 0;
                      unint64_t v292 = *((unsigned int *)v7 + 2);
                      if (*(_WORD *)((*v7)[v116] + 16) == 66) {
                        int v281 = v116 + 1;
                      }
                      unsigned int v287 = *(_WORD *)((*v7)[v281] + 16) == 271 ? v281 + 1 : v281;
                      unint64_t v288 = (unint64_t)(*(_WORD *)((*v7)[v116] + 16) == 66) << 30;
                      unint64_t v289 = (unint64_t)(*(_WORD *)((*v7)[v281] + 16) == 271) << 29;
                      unint64_t v290 = (unint64_t)(v124 != 0) << 27;
                    }
                    if (v292 < v287 + 2) {
LABEL_780:
                    }
                      operator new();
                    LOBYTE(v377[0]) = 0;
                    v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
                    v401.__r_.__value_.__l.__size_ = 0x800000000;
                    unint64_t v369 = v124;
                    uint64_t v371 = v113;
                    uint64_t v367 = v135;
                    if (v282 != 2)
                    {
                      if (v282 != 5) {
                        goto LABEL_774;
                      }
                      unint64_t v282 = *((unsigned int *)v7 + 2);
                    }
                    if (v282 > v287)
                    {
                      v293 = v7;
                      if ((v291 & 1) == 0) {
                        v293 = *v7;
                      }
                      unint64_t v294 = v288;
                      uint64_t v295 = v136;
                      uint64_t v296 = v293[v287];
LABEL_775:
                      uint64_t v297 = v6 + 1;
                      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(a1, v296, v297, (uint64_t)&v401, (uint64_t)v377, (uint64_t)&v398);
                      if (v398.__r_.__value_.__s.__data_[16])
                      {
                        *((_WORD *)a4 + 8) = 1;
                        std::string::size_type size = (uint64_t (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_;
                        std::string::size_type v299 = v398.__r_.__value_.__r.__words[0];
                        a4[1] = v398.__r_.__value_.__l.__size_;
                        *a4 = size(v299, 2, 0);
                        goto LABEL_804;
                      }
                      int v300 = *((unsigned __int16 *)v7 + 8);
                      if (v300 == 82 || v300 == 64)
                      {
                        unint64_t v301 = (v295 | v374 | v294) & 0xFFFFFFFFFBFFFFFFLL | v401.__r_.__value_.__r.__words[1] & 0xF9FFFFFF | (v290 | v289) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)LOBYTE(v377[0]) << 25) & 0xFFFFFFFFFBFFFFFFLL;
                      }
                      else
                      {
                        unint64_t v301 = (v295 | v374 | v294) & 0xFFFFFFFFFBFFFFFFLL | v401.__r_.__value_.__r.__words[1] & 0xF9FFFFFF | (v290 | v289) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)LOBYTE(v377[0]) << 25) & 0xFFFFFFFFFBFFFFFFLL;
                        if (v300 != 166)
                        {
                          uint64_t v302 = 0;
LABEL_783:
                          int v303 = *((unsigned __int8 *)v7 + 18);
                          if (v303 == 2)
                          {
                            unint64_t v304 = *((unsigned __int8 *)v7 + 18);
                          }
                          else
                          {
                            if (v303 != 5) {
                              goto LABEL_791;
                            }
                            unint64_t v304 = *((unsigned int *)v7 + 2);
                          }
                          unint64_t v305 = v287 + 1;
                          if (v304 > v305)
                          {
                            if ((v303 - 1) >= 2) {
                              uint8x8_t v7 = (uint64_t **)*v7;
                            }
                            v306 = v7[v305];
                            goto LABEL_792;
                          }
LABEL_791:
                          v306 = 0;
LABEL_792:
                          swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v395, a1, v306, v297, 0);
                          if (v396[0] == 1)
                          {
                            *((_WORD *)a4 + 8) = 1;
                            *(_OWORD *)a4 = *(_OWORD *)v395;
                            v395[0] = 0;
                            v395[1] = swift::TypeLookupError::nop;
                          }
                          else
                          {
                            if (v114) {
                              unint64_t v307 = v302 | v301 | 0x80000000;
                            }
                            else {
                              unint64_t v307 = v302 | v301;
                            }
                            if (v396[0]) {
                              v308 = 0;
                            }
                            else {
                              v308 = v395[0];
                            }
                            uint64_t FunctionType = swift::reflection::TypeRefBuilder::createFunctionType(*a1, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t)v308, v307, v114, v369, v371, v367);
                            *((_WORD *)a4 + 8) = 0;
                            *a4 = FunctionType;
                            if (!FunctionType)
                            {
                              *a4 = "unknown error";
                              a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                              *((_WORD *)a4 + 8) = 1;
                            }
                          }
                          if (v396[0] == 1) {
                            ((void (*)(void *, uint64_t, void))v395[1])(v395[0], 3, 0);
                          }
LABEL_804:
                          if (v398.__r_.__value_.__s.__data_[16]) {
                            ((void (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
                          }
                          v224 = (void *)v401.__r_.__value_.__r.__words[0];
                          if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2]) {
                            goto LABEL_905;
                          }
                          return;
                        }
                      }
                      uint64_t v302 = 0x4000000;
                      goto LABEL_783;
                    }
LABEL_774:
                    unint64_t v294 = v288;
                    uint64_t v295 = v136;
                    uint64_t v296 = 0;
                    goto LABEL_775;
                  }
                  if (*((_WORD *)v7[v110] + 8) == 130)
                  {
                    v114 |= 0x10u;
                    unint64_t v116 = (v110 + 1);
                  }
                  else
                  {
                    unint64_t v116 = v110;
                  }
                }
                char v119 = 1;
                v120 = v7;
                goto LABEL_332;
              }
            }
            else
            {
              v108 = (uint64_t **)*v7;
              uint64_t v110 = *((unsigned __int16 *)*v7 + 8) == 23;
              if (*((_WORD *)v7[v110] + 8) == 67) {
                goto LABEL_302;
              }
              v108 = v7;
            }
            uint64_t v113 = 0;
            unsigned int v114 = 2 * (*((_WORD *)v108[v110] + 8) == 129);
            if (*((_WORD *)v108[v110] + 8) == 129) {
              LODWORD(v110) = v110 + 1;
            }
            goto LABEL_308;
          default:
LABEL_87:
            operator new();
        }
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
      case 0x12:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            uint64_t v95 = v7;
            goto LABEL_225;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_233;
            }
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            if (*((_DWORD *)v7 + 2) < 2u)
            {
              unsigned __int8 v96 = 0;
            }
            else
            {
              uint64_t v95 = *v7;
LABEL_225:
              unsigned __int8 v96 = (uint64_t *)*((void *)v95 + 1);
            }
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeGenericArgs(a1, v96, v6 + 1, (uint64_t)&v401, (uint64_t)&v398);
            if (v398.__r_.__value_.__s.__data_[16]) {
              goto LABEL_558;
            }
            int v97 = *((unsigned __int8 *)v7 + 18);
            if ((v97 - 1) < 2) {
              goto LABEL_231;
            }
            if (v97 == 5 && *((_DWORD *)v7 + 2))
            {
              uint8x8_t v7 = (uint64_t **)*v7;
LABEL_231:
              uint64_t v98 = (unsigned __int16 **)*v7;
            }
            else
            {
              uint64_t v98 = 0;
            }
            if (*((_WORD *)v98 + 8) != 232) {
              goto LABEL_502;
            }
            int v184 = *((unsigned __int8 *)v98 + 18);
            if ((v184 - 1) < 2) {
              goto LABEL_501;
            }
            if (v184 == 5 && *((_DWORD *)v98 + 2))
            {
              uint64_t v98 = (unsigned __int16 **)*v98;
LABEL_501:
              uint64_t v98 = (unsigned __int16 **)*v98;
            }
LABEL_502:
            swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)v98, (uint64_t)&v398);
            if (v398.__r_.__value_.__s.__data_[16])
            {
              uint64_t v185 = *a1;
              __swift::__runtime::llvm::StringRef::str((const void **)&v398.__r_.__value_.__l.__data_, (uint64_t)v395);
              uint64_t v186 = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(v185, (uint64_t)v395);
              *((_WORD *)a4 + 8) = 0;
              *a4 = v186;
              if (!v186)
              {
                *a4 = "unknown error";
                a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)a4 + 8) = 1;
              }
              if (v397 < 0) {
                operator delete(v395[0]);
              }
            }
            else
            {
              v398.__r_.__value_.__s.__data_[0] = 0;
              char v400 = 0;
              v377[0] = 0;
              LOBYTE(v385) = 0;
              swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledTypeDecl((swift::Demangle::__runtime::Node **)a1, v98, v6, (uint64_t)&v398, v377, (uint64_t)v395);
              if (LOBYTE(v396[0]))
              {
                *((_WORD *)a4 + 8) = 1;
                v187 = v395[0];
                v188 = (uint64_t (*)(void *, uint64_t, void))v395[1];
                a4[1] = v395[1];
                *a4 = v188(v187, 2, 0);
                if (LOBYTE(v396[0])) {
                  ((void (*)(void *, uint64_t, void))v395[1])(v395[0], 3, 0);
                }
              }
              else
              {
                uint64_t BoundGenericType = swift::reflection::TypeRefBuilder::createBoundGenericType(*a1, (uint64_t)&v398, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t)v377[0]);
                *((_WORD *)a4 + 8) = 0;
                *a4 = BoundGenericType;
                if (!BoundGenericType)
                {
                  *a4 = "unknown error";
                  a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                  *((_WORD *)a4 + 8) = 1;
                }
              }
              std::optional<swift::reflection::TypeRefDecl>::~optional((uint64_t)&v398);
            }
            break;
          default:
LABEL_233:
            operator new();
        }
        goto LABEL_904;
      case 0x10:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            goto LABEL_37;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_299;
            }
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_37:
            uint8x8_t v7 = (uint64_t **)v7[1];
            int v16 = *((unsigned __int8 *)v7 + 18);
            if (v16 == 1) {
              goto LABEL_49;
            }
            if (v16 != 5 || *((_DWORD *)v7 + 2) != 1) {
              operator new();
            }
            return;
          default:
LABEL_299:
            operator new();
        }
        goto LABEL_40;
      case 0x14:
        swift::Demangle::__runtime::mangleNode((swift::Demangle::__runtime *)v7, a2);
        if (LODWORD(v401.__r_.__value_.__l.__data_)) {
          operator new();
        }
        uint64_t v139 = *a1;
        *(_OWORD *)v395 = *(_OWORD *)v7;
        __swift::__runtime::llvm::StringRef::str((const void **)v395, (uint64_t)&v398);
        uint64_t BuiltinType = swift::reflection::TypeRefBuilder::createBuiltinType(v139, (uint64_t)&v398, (uint64_t)&__p);
        *((_WORD *)a4 + 8) = 0;
        *a4 = BuiltinType;
        if (BuiltinType)
        {
          if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_375;
          }
        }
        else
        {
          *a4 = "unknown error";
          a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)a4 + 8) = 1;
          if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_375:
            if ((v404 & 0x80000000) == 0) {
              return;
            }
            goto LABEL_376;
          }
        }
        operator delete(v398.__r_.__value_.__l.__data_);
        if ((v404 & 0x80000000) == 0) {
          return;
        }
LABEL_376:
        long long v49 = __p;
        goto LABEL_265;
      case 0x18:
        swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)v7, (uint64_t)&v401);
        if (!v401.__r_.__value_.__s.__data_[16]) {
          goto LABEL_118;
        }
        uint64_t v47 = *a1;
        __swift::__runtime::llvm::StringRef::str((const void **)&v401.__r_.__value_.__l.__data_, (uint64_t)&v398);
        uint64_t v48 = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(v47, (uint64_t)&v398);
        *((_WORD *)a4 + 8) = 0;
        *a4 = v48;
        if (!v48)
        {
          *a4 = "unknown error";
          a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)a4 + 8) = 1;
        }
        if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        long long v49 = (void *)v398.__r_.__value_.__r.__words[0];
        goto LABEL_265;
      case 0x23:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            goto LABEL_44;
          case 5:
            if (*((_DWORD *)v7 + 2) > 1u) {
              goto LABEL_43;
            }
            goto LABEL_298;
          default:
LABEL_298:
            operator new();
        }
      case 0x26:
        int v38 = *((unsigned __int8 *)v7 + 18);
        if ((v38 - 1) >= 2)
        {
          if (v38 == 5) {
            long long v39 = (_DWORD **)*v7;
          }
          else {
            long long v39 = (_DWORD **)v7;
          }
          uint8x8_t v7 = (uint64_t **)*v7;
        }
        else
        {
          long long v39 = (_DWORD **)v7;
        }
        int v100 = *(_DWORD *)*v7;
        int v101 = *v39[1];
        uint64_t v99 = *a1;
        goto LABEL_284;
      case 0x2C:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            goto LABEL_44;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_297;
            }
LABEL_43:
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_44:
            ++v7;
            break;
          default:
LABEL_297:
            operator new();
        }
        goto LABEL_49;
      case 0x2D:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            v159 = a1;
            v160 = a4;
            v161 = v7;
            goto LABEL_572;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_436;
            }
            v159 = a1;
            v160 = a4;
            v161 = *v7;
LABEL_572:
            uint64_t v208 = v6 + 1;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v398, v159, *v161, v208, 1);
            if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1)
            {
              *((_WORD *)v160 + 8) = 1;
              *(_OWORD *)v160 = *(_OWORD *)&v398.__r_.__value_.__l.__data_;
              v398.__r_.__value_.__l.__size_ = (std::string::size_type)swift::TypeLookupError::nop;
              v398.__r_.__value_.__r.__words[0] = 0;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            int v209 = *((unsigned __int8 *)v7 + 18);
            if (v209 == 2)
            {
              v210 = v160;
            }
            else
            {
              v210 = v160;
              if (v209 != 5 || *((_DWORD *)v7 + 2) < 2u)
              {
                v226 = 0;
                goto LABEL_661;
              }
              uint8x8_t v7 = (uint64_t **)*v7;
            }
            v226 = v7[1];
LABEL_661:
            int v237 = *((unsigned __int8 *)v226 + 18);
            v238 = (_OWORD **)v226;
            if ((v237 - 1) >= 2) {
              v238 = (_OWORD **)*v226;
            }
            *(_OWORD *)v377 = **v238;
            if (v237 == 2) {
              goto LABEL_894;
            }
            if (v237 == 5 && *((_DWORD *)v226 + 2) > 1u)
            {
              v226 = (uint64_t *)*v226;
LABEL_894:
              swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType((uint64_t *)v226[1], v208, &v401);
              if (!(_BYTE)v403)
              {
                void *v210 = "unknown error";
                v210[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)v210 + 8) = 1;
                goto LABEL_918;
              }
              v326 = v210;
              uint64_t v327 = *v159;
              __swift::__runtime::llvm::StringRef::str((const void **)v377, (uint64_t)v395);
              int v328 = LOWORD(v398.__r_.__value_.__r.__words[2]);
              std::string::size_type v329 = v398.__r_.__value_.__r.__words[0];
              std::optional<std::pair<std::string,BOOL>>::optional[abi:nn180100](&v388, (long long *)&v401);
              if (v389
                || (v328 ? (uint64_t v330 = 0) : (uint64_t v330 = v329),
                    v331 = swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>(v327, (uint64_t)v395, v330, (uint64_t)&v388), *((_WORD *)v326 + 8) = 0, (uint64_t *v326 = v331) == 0))
              {
                uint64_t *v326 = (uint64_t)"unknown error";
                v326[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)v326 + 8) = 1;
              }
              if (v390 && SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v388.__r_.__value_.__l.__data_);
              }
              if (v397 < 0) {
                operator delete(v395[0]);
              }
              if (!(_BYTE)v403)
              {
LABEL_918:
                if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1) {
                  ((void (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
                }
                return;
              }
            }
            else
            {
              __swift::__runtime::llvm::StringRef::str((const void **)v377, (uint64_t)&v401);
              void *v210 = "unknown error";
              v210[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v210 + 8) = 1;
            }
            if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v401.__r_.__value_.__l.__data_);
            }
            goto LABEL_918;
          default:
LABEL_436:
            operator new();
        }
      case 0x39:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
            goto LABEL_236;
          case 5:
            if (*((_DWORD *)v7 + 2) != 1) {
              goto LABEL_410;
            }
            goto LABEL_465;
          default:
LABEL_410:
            operator new();
        }
      case 0x3D:
      case 0xDB:
      case 0xE9:
      case 0xEA:
LABEL_118:
        v401.__r_.__value_.__s.__data_[0] = 0;
        char v406 = 0;
        v395[0] = 0;
        LOBYTE(v377[0]) = 0;
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledTypeDecl((swift::Demangle::__runtime::Node **)a1, v7, v6, (uint64_t)&v401, v395, (uint64_t)&v398);
        if (v398.__r_.__value_.__s.__data_[16])
        {
          *((_WORD *)a4 + 8) = 1;
          long long v50 = (uint64_t (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_;
          std::string::size_type v51 = v398.__r_.__value_.__r.__words[0];
          a4[1] = v398.__r_.__value_.__l.__size_;
          *a4 = v50(v51, 2, 0);
          if (v398.__r_.__value_.__s.__data_[16]) {
            ((void (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
          }
        }
        else
        {
          uint64_t v104 = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(*a1, (uint64_t)&v401, (uint64_t)v395[0]);
          *((_WORD *)a4 + 8) = 0;
          *a4 = v104;
          if (!v104)
          {
            *a4 = "unknown error";
            a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            *((_WORD *)a4 + 8) = 1;
          }
        }
        if (!v406) {
          return;
        }
        if (v405 && __p)
        {
          v403 = __p;
          operator delete(__p);
        }
LABEL_263:
        if ((SHIBYTE(v401.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        long long v49 = (void *)v401.__r_.__value_.__r.__words[0];
        goto LABEL_265;
      case 0x45:
      case 0x91:
        int v29 = *((unsigned __int8 *)v7 + 18);
        long long v30 = (uint64_t ***)v7;
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
            long long v31 = a1;
            long long v32 = a4;
            uint64_t v33 = 0;
            int v34 = 0;
            BOOL v35 = 0;
            goto LABEL_85;
          case 2:
            goto LABEL_342;
          case 5:
            unsigned int v125 = *((_DWORD *)v7 + 2);
            if (v125 < 2)
            {
              if (!v125) {
LABEL_339:
              }
                operator new();
              long long v31 = a1;
              BOOL v35 = 0;
              int v34 = 0;
              uint64_t v33 = 0;
            }
            else
            {
              long long v30 = (uint64_t ***)*v7;
LABEL_342:
              v126 = *v30;
              int v127 = *((unsigned __int16 *)*v30 + 8);
              int v128 = *((unsigned __int8 *)*v30 + 18);
              if (v127 != 146 || v128 != 3) {
                operator new();
              }
              v129 = *v126;
              v130 = v126[1];
              if (v130 == (uint64_t *)((char *)&dword_C + 2))
              {
                uint64_t v310 = *v129;
                uint64_t v311 = *(uint64_t *)((char *)v129 + 6);
                BOOL v35 = v310 == 0x656D5F636A626F40 && v311 == 0x657079746174656DLL;
                int v34 = 2 * v35;
              }
              else if (v130 == (uint64_t *)((char *)&dword_4 + 2))
              {
                int v313 = *(_DWORD *)v129;
                int v314 = *((unsigned __int16 *)v129 + 2);
                BOOL v35 = v313 == 1768453184 && v314 == 27491;
                int v34 = v35;
              }
              else if (v130 == (uint64_t *)((char *)&dword_4 + 1))
              {
                int v34 = 0;
                int v131 = *(_DWORD *)v129;
                int v132 = *((unsigned __int8 *)v129 + 4);
                BOOL v35 = v131 == 1768453184 && v132 == 110;
              }
              else
              {
                BOOL v35 = 0;
                int v34 = 0;
              }
              if (v29 == 2)
              {
                long long v31 = a1;
                long long v32 = a4;
                uint64_t v33 = 1;
LABEL_85:
                long long v36 = v7;
                goto LABEL_475;
              }
              if (v29 != 5 || *((_DWORD *)v7 + 2) < 2u)
              {
                long long v31 = a1;
                long long v32 = a4;
                uint64_t v176 = 0;
LABEL_476:
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v31, v176, v6 + 1, 1);
                if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
                {
LABEL_477:
                  *((_WORD *)v32 + 8) = 1;
                  *(_OWORD *)long long v32 = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
                  v401.__r_.__value_.__l.__size_ = (std::string::size_type)swift::TypeLookupError::nop;
                  v401.__r_.__value_.__r.__words[0] = 0;
                }
                else
                {
                  int v177 = *((unsigned __int16 *)v7 + 8);
                  if (v177 == 69)
                  {
                    if (LOWORD(v401.__r_.__value_.__r.__words[2])) {
                      uint64_t v207 = 0;
                    }
                    else {
                      uint64_t v207 = v401.__r_.__value_.__r.__words[0];
                    }
                    uint64_t v149 = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(*v31, v207);
LABEL_565:
                    *((_WORD *)v32 + 8) = 0;
                    *long long v32 = v149;
                    if (!v149)
                    {
                      *long long v32 = (uint64_t)"unknown error";
                      v32[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                      *((_WORD *)v32 + 8) = 1;
                    }
                  }
                  else
                  {
                    if (v177 != 145) {
                      operator new();
                    }
                    if (LOWORD(v401.__r_.__value_.__r.__words[2])) {
                      uint64_t v178 = 0;
                    }
                    else {
                      uint64_t v178 = v401.__r_.__value_.__r.__words[0];
                    }
                    if (v34) {
                      BOOL v179 = !v35;
                    }
                    else {
                      BOOL v179 = 1;
                    }
                    int v180 = !v179;
                    uint64_t v181 = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(*v31, v178, v180);
                    *((_WORD *)v32 + 8) = 0;
                    *long long v32 = v181;
                    if (!v181)
                    {
                      *long long v32 = (uint64_t)"unknown error";
                      v32[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                      *((_WORD *)v32 + 8) = 1;
                    }
                  }
                }
LABEL_650:
                if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
                  ((void (*)(std::string::size_type, uint64_t, void))v401.__r_.__value_.__l.__size_)(v401.__r_.__value_.__r.__words[0], 3, 0);
                }
                return;
              }
              long long v31 = a1;
              uint64_t v33 = 1;
            }
            long long v32 = a4;
            long long v36 = *v7;
LABEL_475:
            uint64_t v176 = v36[v33];
            goto LABEL_476;
          default:
            goto LABEL_339;
        }
      case 0x53:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            v162 = (swift::reflection::TypeRefBuilder **)a1;
            v163 = a4;
            v164 = v7;
            goto LABEL_579;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_439;
            }
            v162 = (swift::reflection::TypeRefBuilder **)a1;
            v163 = a4;
            v164 = *v7;
LABEL_579:
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v395, v162, *v164, v6 + 1, 1);
            if (v396[0] == 1)
            {
              *((_WORD *)v163 + 8) = 1;
              *(_OWORD *)v163 = *(_OWORD *)v395;
              v395[0] = 0;
              v395[1] = swift::TypeLookupError::nop;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
            v398.__r_.__value_.__l.__size_ = 0x800000000;
            int v211 = *((unsigned __int8 *)v7 + 18);
            if (v211 == 2)
            {
              v212 = v163;
            }
            else
            {
              v212 = v163;
              if (v211 != 5 || *((_DWORD *)v7 + 2) < 2u)
              {
                uint64_t v227 = 0;
                goto LABEL_669;
              }
              uint8x8_t v7 = (uint64_t **)*v7;
            }
            uint64_t v227 = (uint64_t)v7[1];
LABEL_669:
            if (*(_WORD *)(v227 + 16) != 84) {
              operator new();
            }
            swift::Demangle::__runtime::decodeRequirement<swift::reflection::TypeRef const*,swift::reflection::TypeRefRequirement,swift::reflection::TypeRefInverseRequirement,swift::reflection::TypeRefLayoutConstraint,swift::reflection::TypeRefBuilder>(v227, (uint64_t)&v401, (uint64_t)&v398, *v162);
            if (v396[0]) {
              v239 = 0;
            }
            else {
              v239 = v395[0];
            }
            uint64_t ConstrainedExistentialType = swift::reflection::TypeRefBuilder::createConstrainedExistentialType((uint64_t)*v162, (uint64_t)v239, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]));
            *((_WORD *)v212 + 8) = 0;
            uint64_t *v212 = ConstrainedExistentialType;
            if (!ConstrainedExistentialType)
            {
              uint64_t *v212 = (uint64_t)"unknown error";
              v212[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v212 + 8) = 1;
            }
            if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ != &v398.__r_.__value_.__r.__words[2]) {
              free(v398.__r_.__value_.__l.__data_);
            }
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2]) {
              free(v401.__r_.__value_.__l.__data_);
            }
            if (v396[0] == 1) {
              ((void (*)(void *, uint64_t, void))v395[1])(v395[0], 3, 0);
            }
            break;
          default:
LABEL_439:
            operator new();
        }
        return;
      case 0x55:
        uint64_t v99 = *a1;
        int v100 = 0;
        int v101 = 0;
LABEL_284:
        uint64_t v107 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(v99, v100, v101);
        *((_WORD *)a4 + 8) = 0;
        *a4 = v107;
        if (!v107)
        {
          *a4 = "unknown error";
          a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)a4 + 8) = 1;
        }
        return;
      case 0x63:
        int v12 = *((unsigned __int8 *)v7 + 18);
        if ((v12 - 1) < 2) {
          goto LABEL_49;
        }
        if (v12 != 5 || !*((_DWORD *)v7 + 2)) {
          operator new();
        }
        goto LABEL_48;
      case 0x73:
        unint64_t v52 = 0;
        unsigned __int16 v53 = 0;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x800000000;
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
        unsigned int v54 = v6 + 1;
        v398.__r_.__value_.__l.__size_ = 0x800000000;
        uint64_t v55 = 6;
        v395[0] = v396;
        v395[1] = (void *)0x800000000;
        while (2)
        {
          unint64_t v56 = *((unsigned __int8 *)v7 + 18);
          switch(v56)
          {
            case 1:
              unint64_t v57 = *((unsigned __int8 *)v7 + 18);
              break;
            case 5:
              unint64_t v57 = *((unsigned int *)v7 + 2);
              break;
            case 2:
              unint64_t v57 = 2;
              break;
            default:
LABEL_269:
              if (LODWORD(v395[1]))
              {
                if (LODWORD(v395[1]) != 1) {
                  operator new();
                }
                char v105 = *(unsigned char *)v395[0];
                v377[0] = *(void **)((char *)v395[0] + 1);
                *(void **)((char *)v377 + 7) = *((void **)v395[0] + 1);
                char v106 = 1;
              }
              else
              {
                char v105 = 0;
                char v106 = 0;
              }
              uint64_t v182 = *a1;
              char v392 = v105;
              *(void **)v393 = v377[0];
              *(void **)&v393[7] = *(void **)((char *)v377 + 7);
              char v394 = v106;
              uint64_t ImplFunctionType = swift::reflection::TypeRefBuilder::createImplFunctionType(v182, v55, (uint64_t)v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t)v398.__r_.__value_.__l.__data_, LODWORD(v398.__r_.__value_.__r.__words[1]), (uint64_t)&v392, v53);
              *((_WORD *)a4 + 8) = 0;
              *a4 = ImplFunctionType;
              if (!ImplFunctionType)
              {
                *a4 = "unknown error";
                a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)a4 + 8) = 1;
              }
              if (v395[0] != v396) {
                free(v395[0]);
              }
              if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ != &v398.__r_.__value_.__r.__words[2]) {
                free(v398.__r_.__value_.__l.__data_);
              }
LABEL_904:
              v224 = (void *)v401.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ == &v401.__r_.__value_.__r.__words[2]) {
                return;
              }
              goto LABEL_905;
          }
          if (v57 > v52)
          {
            unsigned int v58 = v56 - 1;
            if (v56 != 1)
            {
              if (v56 == 5)
              {
                if (*((unsigned int *)v7 + 2) > v52) {
                  goto LABEL_138;
                }
                goto LABEL_142;
              }
              unint64_t v56 = 2;
            }
            if (v56 > v52)
            {
LABEL_138:
              long long v59 = v7;
              if (v58 >= 2) {
                long long v59 = *v7;
              }
              unint64_t v60 = (unsigned __int8 *)v59[v52];
              goto LABEL_143;
            }
LABEL_142:
            unint64_t v60 = 0;
LABEL_143:
            switch(*((_WORD *)v60 + 8))
            {
              case 'i':
                unsigned __int16 v53 = v53 & 0xFEF | 0x10;
                goto LABEL_126;
              case 'j':
                if (v60[18] != 3) {
                  operator new();
                }
                unint64_t v62 = *(unint64_t **)v60;
                uint64_t v61 = *((void *)v60 + 1);
                if (v61 != 18)
                {
                  if (v61 == 17)
                  {
                    unint64_t v63 = *v62;
                    unint64_t v64 = v62[1];
                    int v65 = *((unsigned __int8 *)v62 + 16);
                    BOOL v66 = v63 == 0x746E65766E6F6340 && v64 == 0x6E696874286E6F69;
                    if (v66 && v65 == 41)
                    {
                      unsigned __int16 v53 = v53 & 0xFF8 | 2;
                      ++v52;
                      continue;
                    }
                  }
                  goto LABEL_126;
                }
                unint64_t v81 = 0x4063616C6C65655FLL;
                unint64_t v82 = bswap64(*v62);
                if (v82 != 0x4063616C6C65655FLL) {
                  goto LABEL_206;
                }
                unint64_t v81 = 0x67756172616E7465;
                unint64_t v82 = bswap64(v62[1]);
                if (v82 != 0x67756172616E7465) {
                  goto LABEL_206;
                }
                unint64_t v82 = bswap32(*((unsigned __int16 *)v62 + 8)) >> 16;
                if (v82 == 25956)
                {
                  int v83 = 0;
                }
                else
                {
                  unint64_t v81 = 25956;
LABEL_206:
                  if (v82 < v81) {
                    int v83 = -1;
                  }
                  else {
                    int v83 = 1;
                  }
                }
                if (v83) {
                  uint64_t v55 = v55;
                }
                else {
                  uint64_t v55 = 7;
                }
                ++v52;
                continue;
              case 'k':
                HIDWORD(v69) = *v60;
                LODWORD(v69) = (HIDWORD(v69) << 24) - 1677721600;
                unsigned __int8 v68 = v69 >> 25;
                if (v68 > 7u) {
                  __int16 v70 = 0;
                }
                else {
                  __int16 v70 = word_C68C0[(char)v68];
                }
                unsigned __int16 v53 = v70 | v53 & 0x8FF;
                ++v52;
                continue;
              case 'l':
                unsigned __int16 v53 = v53 & 0xF7F | 0x80;
                ++v52;
                continue;
              case 'p':
                if (v60[18] != 3) {
                  operator new();
                }
                size_t v71 = *(int **)v60;
                uint64_t v72 = *((void *)v60 + 1);
                if (v72 == 6)
                {
                  int v84 = *v71;
                  int v85 = *((unsigned __int16 *)v71 + 2);
                  if (v84 == 2037604672 && v85 == 25454)
                  {
                    unsigned __int16 v53 = v53 & 0xFBF | 0x40;
                    ++v52;
                    continue;
                  }
                }
                else if (v72 == 9)
                {
                  uint64_t v73 = *(void *)v71;
                  int v74 = *((unsigned __int8 *)v71 + 8);
                  if (v73 == 0x6C6261646E655340 && v74 == 101)
                  {
                    unsigned __int16 v53 = v53 & 0xFDF | 0x20;
                    ++v52;
                    continue;
                  }
                }
                goto LABEL_126;
              case 'q':
                int v76 = v60[18];
                int v77 = v60;
                if ((v76 - 1) >= 2)
                {
                  if (v76 != 5 || !*((_DWORD *)v60 + 2)) {
                    operator new();
                  }
                  int v77 = *(unsigned __int8 **)v60;
                }
                if (*(_WORD *)(*(void *)v77 + 16) != 114) {
                  goto LABEL_899;
                }
                if ((v76 - 1) > 1)
                {
                  v78 = **(void ***)v60;
                  if (*((unsigned char *)v78 + 18) != 3) {
LABEL_899:
                  }
                    operator new();
                }
                else
                {
                  v78 = *(void **)v60;
                  if (*(unsigned char *)(*(void *)v60 + 18) != 3) {
                    goto LABEL_899;
                  }
                }
                v79 = (int *)*v78;
                uint64_t v80 = v78[1];
                if (v80 == 5)
                {
                  int v87 = *v79;
                  int v88 = *((unsigned __int8 *)v79 + 4);
                  if (v87 == 1668246626 && v88 == 107)
                  {
                    unsigned __int16 v53 = v53 & 0xFF8 | 1;
                    ++v52;
                    continue;
                  }
                }
                else if (v80 == 1 && *(unsigned char *)v79 == 99)
                {
                  unsigned __int16 v53 = v53 & 0xFF8 | 3;
                  ++v52;
                  continue;
                }
LABEL_126:
                ++v52;
                continue;
              case 'v':
                if (swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>((uint64_t)a1, (uint64_t)v60, v54, (uint64_t)&v401))operator new(); {
                goto LABEL_126;
                }
              case 'x':
                if (swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>((uint64_t)a1, (uint64_t)v60, v54, (uint64_t)&v398))operator new(); {
                goto LABEL_126;
                }
              case 'z':
                if (swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionPart<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>((uint64_t)a1, (_DWORD ***)v60, v54, (uint64_t)v395))operator new(); {
                goto LABEL_126;
                }
              default:
                operator new();
            }
          }
          goto LABEL_269;
        }
      case 0xB4:
      case 0xB5:
      case 0x15B:
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType((uint64_t *)v7, v6 + 1, &v401);
        if (!(_BYTE)v403) {
          operator new();
        }
        uint64_t ProtocolCompositionType = swift::reflection::TypeRefBuilder::createProtocolCompositionType(*a1, (long long *)&v401, 1, 0, 0);
        *((_WORD *)a4 + 8) = 0;
        *a4 = ProtocolCompositionType;
        if (!ProtocolCompositionType)
        {
          *a4 = "unknown error";
          a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)a4 + 8) = 1;
        }
        if (!(_BYTE)v403) {
          return;
        }
        goto LABEL_263;
      case 0xBE:
      case 0xBF:
      case 0xC0:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            uint64_t v19 = v7;
            goto LABEL_65;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_407;
            }
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            if (*((_DWORD *)v7 + 2))
            {
              uint64_t v19 = (uint64_t **)*v7;
LABEL_65:
              uint64_t v20 = *v19;
            }
            else
            {
              uint64_t v20 = 0;
            }
            if (*((_WORD *)v20 + 8) != 190) {
              goto LABEL_72;
            }
            int v21 = *((unsigned __int8 *)v20 + 18);
            if ((v21 - 1) < 2) {
              goto LABEL_71;
            }
            if (v21 == 5 && *((_DWORD *)v20 + 2))
            {
              uint64_t v20 = (uint64_t *)*v20;
LABEL_71:
              uint64_t v20 = (uint64_t *)*v20;
            }
LABEL_72:
            int v22 = *((unsigned __int8 *)v20 + 18);
            long long v23 = (uint64_t **)v20;
            if ((v22 - 1) < 2) {
              goto LABEL_368;
            }
            if (v22 == 5)
            {
              long long v24 = (uint64_t *)*v20;
              long long v23 = (uint64_t **)*v20;
LABEL_372:
              v138 = (uint64_t **)&v24[*((unsigned int *)v20 + 2)];
              goto LABEL_382;
            }
            long long v23 = 0;
LABEL_368:
            switch(v22)
            {
              case 1:
                v138 = (uint64_t **)(v20 + 1);
                break;
              case 2:
                v138 = (uint64_t **)(v20 + 2);
                break;
              case 5:
                long long v24 = (uint64_t *)*v20;
                goto LABEL_372;
              default:
                v138 = 0;
                break;
            }
LABEL_382:
            if (v23 == v138)
            {
LABEL_392:
              if (v9 == 191)
              {
                switch(*((unsigned char *)v7 + 18))
                {
                  case 2:
                    goto LABEL_653;
                  case 5:
                    if (*((_DWORD *)v7 + 2) <= 1u) {
                      goto LABEL_569;
                    }
                    uint8x8_t v7 = (uint64_t **)*v7;
LABEL_653:
                    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(a4, a1, v7[1], v6 + 1, 1);
                    int v236 = *((unsigned __int16 *)a4 + 8);
                    if (a4 && v236 == 1) {
                      goto LABEL_570;
                    }
                    if (*((_WORD *)a4 + 8))
                    {
                      if (v236 == 1) {
                        ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                      }
                      uint64_t v142 = 0;
                      BOOL v143 = 1;
                    }
                    else
                    {
                      uint64_t v142 = *a4;
                      BOOL v143 = 1;
                    }
                    break;
                  default:
LABEL_569:
                    operator new();
                }
              }
              else
              {
                uint64_t v142 = 0;
                BOOL v143 = v9 == 192;
              }
              uint64_t v144 = swift::reflection::TypeRefBuilder::createProtocolCompositionType(*a1, (long long *)v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), v142, v143);
              *((_WORD *)a4 + 8) = 0;
              *a4 = v144;
              if (!v144)
              {
                *a4 = "unknown error";
                a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)a4 + 8) = 1;
              }
            }
            else
            {
              while (1)
              {
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType(*v23, v6 + 1, &v398);
                int v141 = v399;
                if (!v399) {
                  operator new();
                }
                __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::push_back((uint64_t)&v401, (long long *)&v398);
                if (v399 && SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v398.__r_.__value_.__l.__data_);
                }
                if (!v141) {
                  break;
                }
                if (++v23 == v138)
                {
                  int v9 = *((unsigned __int16 *)v7 + 8);
                  goto LABEL_392;
                }
              }
            }
LABEL_570:
            llvm::SmallVector<std::optional<std::pair<std::string,BOOL>>,8u>::~SmallVector(&v401.__r_.__value_.__l.__data_);
            return;
          default:
LABEL_407:
            operator new();
        }
      case 0xCF:
        int v11 = *((unsigned __int8 *)v7 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_49;
        }
        if (v11 != 5 || !*((_DWORD *)v7 + 2)) {
          operator new();
        }
        goto LABEL_58;
      case 0xD2:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            long long v40 = a1;
            long long v32 = a4;
            goto LABEL_413;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_623;
            }
            long long v40 = a1;
            long long v32 = a4;
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_413:
            v146 = *v7;
            v147 = v40;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v40, v146, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
              goto LABEL_477;
            }
            if (LOWORD(v401.__r_.__value_.__r.__words[2])) {
              uint64_t v148 = 0;
            }
            else {
              uint64_t v148 = v401.__r_.__value_.__r.__words[0];
            }
            uint64_t v149 = swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(*v147, v148);
            break;
          default:
LABEL_623:
            operator new();
        }
        goto LABEL_565;
      case 0xD3:
        v385 = v387;
        uint64_t v386 = 0x400000000;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x400000000;
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
        v398.__r_.__value_.__l.__size_ = 0x400000000;
        v395[0] = v396;
        v395[1] = (void *)0x800000000;
        v382 = v384;
        int v41 = *((unsigned __int8 *)v7 + 18);
        uint64_t v383 = 0x400000000;
        uint64_t v42 = 0;
        switch(v41)
        {
          case 1:
            goto LABEL_421;
          case 2:
            goto LABEL_99;
          case 5:
            unsigned int v150 = *((_DWORD *)v7 + 2);
            if (!v150) {
              goto LABEL_426;
            }
            if (v150 == 1) {
              goto LABEL_420;
            }
            if (v150 < 3) {
              uint64_t v42 = 0;
            }
            else {
              uint64_t v42 = (*v7)[2];
            }
LABEL_99:
            if (*(_WORD *)(v42 + 16) != 235) {
              operator new();
            }
            long long v43 = v7;
            if (v41 == 2) {
              goto LABEL_104;
            }
            if (v41 == 5 && *((_DWORD *)v7 + 2) >= 2u)
            {
              long long v43 = *v7;
LABEL_104:
              uint64_t v44 = v43[1];
            }
            else
            {
              uint64_t v44 = 0;
            }
            uint64_t v230 = v44 + 16;
            if (*(_WORD *)(v44 + 16) != 43) {
              operator new();
            }
            int v231 = *(unsigned __int8 *)(v44 + 18);
            if ((v231 - 1) < 2)
            {
              v379 = v381;
              uint64_t v380 = 0x400000000;
              uint64_t v316 = v44 + 8;
              if (v231 != 1) {
                uint64_t v316 = 0;
              }
              if (v231 == 2) {
                uint64_t v235 = v44 + 16;
              }
              else {
                uint64_t v235 = v316;
              }
              uint64_t v234 = v44;
            }
            else
            {
              if (v231 != 5 || (v232 = a4, !*(_DWORD *)(v44 + 8))) {
                operator new();
              }
              v379 = v381;
              uint64_t v380 = 0x400000000;
              uint64_t v233 = *(unsigned int *)(v44 + 8);
              if (!v233)
              {
                v377[0] = v378;
                v377[1] = (void *)0x600000000;
                goto LABEL_947;
              }
              uint64_t v234 = *(void *)v44;
              uint64_t v235 = *(void *)v44 + 8 * v233;
            }
            do
            {
              uint64_t v317 = *(void *)v234;
              if (*(_WORD *)(*(void *)v234 + 16) == 37 && *(unsigned char *)(v317 + 18) == 4) {
                __swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(&v379, *(_DWORD *)v317);
              }
              v234 += 8;
            }
            while (v234 != v235);
            int v318 = *(unsigned __int8 *)(v44 + 18);
            v377[0] = v378;
            v377[1] = (void *)0x600000000;
            uint64_t v319 = v44;
            if ((v318 - 1) >= 2)
            {
              if (v318 == 5)
              {
                v232 = a4;
LABEL_947:
                uint64_t v340 = *(void *)v44;
                uint64_t v319 = *(void *)v44;
                goto LABEL_948;
              }
              uint64_t v319 = 0;
            }
            v232 = a4;
            if (v318 == 1)
            {
              uint64_t v230 = v44 + 8;
              break;
            }
            if (v318 == 2) {
              break;
            }
            if (v318 != 5)
            {
              uint64_t v230 = 0;
              break;
            }
            uint64_t v340 = *(void *)v44;
LABEL_948:
            uint64_t v230 = v340 + 8 * *(unsigned int *)(v44 + 8);
            break;
          default:
LABEL_426:
            operator new();
        }
        while (2)
        {
          if (v319 != v230)
          {
            v341 = *(uint64_t ***)v319;
            if (*(_WORD *)(*(void *)v319 + 16) != 42)
            {
LABEL_951:
              v319 += 8;
              continue;
            }
            int v342 = *((unsigned __int8 *)v341 + 18);
            if ((v342 - 1) >= 2)
            {
              if (v342 != 5 || !*((_DWORD *)v341 + 2))
              {
                v343 = 0;
LABEL_960:
                int v344 = *((unsigned __int8 *)v343 + 18);
                if ((v344 - 1) >= 2)
                {
                  if (v344 != 5 || !*((_DWORD *)v343 + 2))
                  {
                    v345 = 0;
                    goto LABEL_966;
                  }
                  v343 = (uint64_t **)*v343;
                }
                v345 = (uint64_t **)*v343;
LABEL_966:
                int v346 = *((unsigned __int8 *)v345 + 18);
                if ((v346 - 1) <= 1)
                {
                  uint64_t v376 = **v345;
                }
                else
                {
                  uint64_t v376 = *(void *)**v345;
                  if (v346 == 5) {
                    v345 = (uint64_t **)*v345;
                  }
                }
                uint64_t v375 = *v345[1];
                __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>((uint64_t)v377, (unsigned int *)&v376, &v375);
                goto LABEL_951;
              }
              v341 = (uint64_t **)*v341;
            }
            v343 = (uint64_t **)*v341;
            goto LABEL_960;
          }
          break;
        }
        unint64_t v347 = v380;
        if (v380)
        {
          unint64_t v348 = 0;
          v349 = v379;
          do
          {
            if (v349[v348])
            {
              unsigned int v350 = 0;
              do
              {
                uint64_t v351 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(*a1, v348, v350);
                uint64_t v352 = v383;
                if (v383 >= (unint64_t)HIDWORD(v383))
                {
                  uint64_t v353 = v351;
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v382, (uint64_t)v384, v383 + 1, 8);
                  uint64_t v351 = v353;
                  uint64_t v352 = v383;
                }
                *((void *)v382 + v352) = v351;
                LODWORD(v383) = v383 + 1;
                ++v350;
                v349 = v379;
              }
              while (v350 < *((_DWORD *)v379 + v348));
              unint64_t v347 = v380;
            }
            ++v348;
          }
          while (v348 < v347);
        }
        swift::Demangle::__runtime::decodeRequirement<swift::reflection::TypeRef const*,swift::reflection::TypeRefRequirement,swift::reflection::TypeRefInverseRequirement,swift::reflection::TypeRefLayoutConstraint,swift::reflection::TypeRefBuilder>(v44, (uint64_t)&v398, (uint64_t)v395, (swift::reflection::TypeRefBuilder *)*a1);
        unsigned int v354 = *(unsigned __int8 *)(v42 + 18);
        switch(v354)
        {
          case 1u:
LABEL_981:
            a4 = v232;
LABEL_983:
            uint64_t v355 = 0;
            unint64_t v356 = 0;
            BOOL v357 = 1;
            unint64_t v358 = v354;
            while (1)
            {
              unint64_t v359 = *(unsigned __int8 *)(v42 + 18);
              unsigned int v360 = v359 - 1;
              if (v359 != 1)
              {
                if (v359 == 5)
                {
                  unint64_t v359 = *(unsigned int *)(v42 + 8);
                }
                else
                {
                  if (v359 != 2) {
                    goto LABEL_994;
                  }
                  unint64_t v359 = 2;
                }
              }
              if (v359 > v356)
              {
                uint64_t v361 = v42;
                if (v360 >= 2) {
                  uint64_t v361 = *(void *)v42;
                }
                uint64_t v362 = *(void *)(v361 + 8 * v356);
                goto LABEL_995;
              }
LABEL_994:
              uint64_t v362 = 0;
LABEL_995:
              swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(a4, a1, v362, v6 + 1, 0);
              if (!a4 || *((_WORD *)a4 + 8) != 1)
              {
                if (*((_WORD *)a4 + 8)) {
                  uint64_t v363 = 0;
                }
                else {
                  uint64_t v363 = *a4;
                }
                uint64_t v376 = v363;
                llvm::SmallVectorImpl<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>((uint64_t)&v401, (uint64_t *)((char *)v382 + v355), &v376);
                if (*((_WORD *)a4 + 8) == 1) {
                  ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                }
                BOOL v357 = ++v356 < v358;
                v355 += 8;
                if (v358 != v356) {
                  continue;
                }
              }
              goto LABEL_1004;
            }
          case 5u:
            unsigned int v354 = *(_DWORD *)(v42 + 8);
            a4 = v232;
            if (!v354)
            {
              BOOL v357 = 0;
              goto LABEL_1004;
            }
            goto LABEL_983;
          case 2u:
            goto LABEL_981;
        }
        BOOL v357 = 0;
        a4 = v232;
LABEL_1004:
        if (v377[0] != v378) {
          free(v377[0]);
        }
        if (v379 != v381) {
          free(v379);
        }
        if (v357) {
          goto LABEL_845;
        }
        int v364 = *((unsigned __int8 *)v7 + 18);
        if ((v364 - 1) < 2)
        {
LABEL_421:
          v151 = *v7;
          goto LABEL_422;
        }
        if (v364 == 5 && *((_DWORD *)v7 + 2))
        {
LABEL_420:
          uint8x8_t v7 = (uint64_t **)*v7;
          goto LABEL_421;
        }
        v151 = 0;
LABEL_422:
        v152 = (uint64_t **)(v151 + 2);
        if (*((_WORD *)v151 + 8) != 212) {
          operator new();
        }
        int v153 = *((unsigned __int8 *)v151 + 18);
        v154 = (uint64_t **)v151;
        if ((v153 - 1) >= 2)
        {
          if (v153 == 5)
          {
            uint64_t v155 = *v151;
            v154 = (uint64_t **)*v151;
            goto LABEL_843;
          }
          v154 = 0;
        }
        if (v153 == 1)
        {
          v152 = (uint64_t **)(v151 + 1);
        }
        else if (v153 != 2)
        {
          if (v153 == 5)
          {
            uint64_t v155 = *v151;
LABEL_843:
            v152 = (uint64_t **)(v155 + 8 * *((unsigned int *)v151 + 2));
          }
          else
          {
            v152 = 0;
          }
        }
        if (v154 == v152)
        {
LABEL_891:
          uint64_t v325 = swift::reflection::SILBoxTypeWithLayoutTypeRef::create<swift::reflection::TypeRefBuilder>(*a1, v385, v386, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), v398.__r_.__value_.__l.__data_, LODWORD(v398.__r_.__value_.__r.__words[1]));
          *((_WORD *)a4 + 8) = 0;
          *a4 = v325;
          if (!v325)
          {
            *a4 = "unknown error";
            a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            *((_WORD *)a4 + 8) = 1;
          }
        }
        else
        {
          while (1)
          {
            v320 = *v154;
            LOBYTE(v379) = 0;
            int v321 = *((unsigned __int16 *)v320 + 8);
            if (v321 == 213)
            {
              char v322 = 1;
            }
            else
            {
              if (v321 != 214) {
                goto LABEL_941;
              }
              char v322 = 0;
            }
            LOBYTE(v379) = v322;
            int v323 = *((unsigned __int8 *)v320 + 18);
            if ((v323 - 1) >= 2)
            {
              if (v323 != 5 || !*((_DWORD *)v320 + 2)) {
LABEL_941:
              }
                operator new();
              v320 = (uint64_t *)*v320;
            }
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(a4, a1, *v320, v6 + 1, 1);
            if (a4)
            {
              if (*((_WORD *)a4 + 8) == 1) {
                break;
              }
            }
            if (*((_WORD *)a4 + 8)) {
              v324 = 0;
            }
            else {
              v324 = (void *)*a4;
            }
            v377[0] = v324;
            llvm::SmallVectorImpl<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field>::emplace_back<swift::reflection::TypeRef const*,BOOL &>((uint64_t)&v385, (uint64_t *)v377, (unsigned __int8 *)&v379);
            if (*((_WORD *)a4 + 8) == 1) {
              ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
            }
            if (++v154 == v152) {
              goto LABEL_891;
            }
          }
        }
LABEL_845:
        if (v382 != v384) {
          free(v382);
        }
        if (v395[0] != v396) {
          free(v395[0]);
        }
        if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ != &v398.__r_.__value_.__r.__words[2]) {
          free(v398.__r_.__value_.__l.__data_);
        }
        if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2]) {
          free(v401.__r_.__value_.__l.__data_);
        }
        v224 = v385;
        if (v385 != v387) {
          goto LABEL_905;
        }
        return;
      case 0xDF:
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
        v398.__r_.__value_.__l.__size_ = 0x800000000;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x800000000;
        int v90 = *((unsigned __int8 *)v7 + 18);
        v91 = (unsigned __int8 **)v7;
        if ((v90 - 1) < 2) {
          goto LABEL_400;
        }
        if (v90 == 5)
        {
          v92 = *v7;
          v91 = (unsigned __int8 **)*v7;
LABEL_404:
          v145 = (uint64_t **)&v92[*((unsigned int *)v7 + 2)];
          goto LABEL_513;
        }
        v91 = 0;
LABEL_400:
        switch(v90)
        {
          case 1:
            v145 = v7 + 1;
            break;
          case 2:
            v145 = v7 + 2;
            break;
          case 5:
            v92 = *v7;
            goto LABEL_404;
          default:
            v145 = 0;
            break;
        }
LABEL_513:
        if (v91 == (unsigned __int8 **)v145)
        {
          uint64_t v200 = 0;
          uint64_t v198 = 0;
          v199 = &v401.__r_.__value_.__s.__data_[16];
          v197 = &v398.__r_.__value_.__s.__data_[16];
          goto LABEL_538;
        }
        uint64_t v189 = v6 + 1;
        while (1)
        {
          v190 = *v91;
          if (*((_WORD *)*v91 + 8) != 224) {
            operator new();
          }
          if (v190[18] - 1 > 1) {
            v190 = *(unsigned __int8 **)v190;
          }
          if (*(_WORD *)(*(void *)v190 + 16) == 276) {
            operator new();
          }
          v377[0] = 0;
          v377[1] = 0;
          v191 = *v91;
          unsigned int v192 = (*v91)[18];
          if (v192 - 1 > 1) {
            v193 = **(void ***)v191;
          }
          else {
            v193 = *(void **)v191;
          }
          if (*((_WORD *)v193 + 8) == 225)
          {
            *(_OWORD *)v377 = *(_OWORD *)v193;
            v191 = *v91;
            unsigned int v192 = (*v91)[18];
            unint64_t v194 = 1;
          }
          else
          {
            unint64_t v194 = 0;
          }
          unint64_t v195 = v192;
          if (v192 != 1)
          {
            if (v192 == 2) {
              goto LABEL_532;
            }
            if (v192 != 5) {
              goto LABEL_533;
            }
            unint64_t v195 = *((unsigned int *)v191 + 2);
          }
          if (v195 <= v194)
          {
LABEL_533:
            v196 = 0;
            goto LABEL_534;
          }
          if (v192 - 1 >= 2) {
            v191 = *(unsigned __int8 **)v191;
          }
LABEL_532:
          v196 = *(uint64_t **)&v191[8 * v194];
LABEL_534:
          v391[0] = (uint64_t)&v398;
          v391[1] = (uint64_t)&v401;
          v391[2] = (uint64_t)v377;
          swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#1}>((uint64_t)a1, v196, v189, v391, (uint64_t)v395);
          if (LOBYTE(v396[0]))
          {
            *((_WORD *)a4 + 8) = 1;
            v202 = v395[0];
            v203 = (uint64_t (*)(void *, uint64_t, void))v395[1];
            a4[1] = v395[1];
            *a4 = v203(v202, 2, 0);
            if (LOBYTE(v396[0])) {
              ((void (*)(void *, uint64_t, void))v395[1])(v395[0], 3, 0);
            }
            goto LABEL_616;
          }
          if (++v91 == (unsigned __int8 **)v145)
          {
            v197 = (std::string::value_type *)v398.__r_.__value_.__r.__words[0];
            uint64_t v198 = LODWORD(v398.__r_.__value_.__r.__words[1]);
            v199 = (std::string::value_type *)v401.__r_.__value_.__r.__words[0];
            uint64_t v200 = LODWORD(v401.__r_.__value_.__r.__words[1]);
LABEL_538:
            uint64_t TupleType = swift::reflection::TypeRefBuilder::createTupleType(*a1, v197, v198, (uint64_t)v199, v200);
            *((_WORD *)a4 + 8) = 0;
            *a4 = TupleType;
            if (!TupleType)
            {
              *a4 = "unknown error";
              a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)a4 + 8) = 1;
            }
LABEL_616:
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2]) {
              free(v401.__r_.__value_.__l.__data_);
            }
            v224 = (void *)v398.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ == &v398.__r_.__value_.__r.__words[2]) {
              return;
            }
LABEL_905:
            free(v224);
            return;
          }
        }
      case 0xE0:
        int v13 = *((unsigned __int8 *)v7 + 18);
        uint64_t v14 = v7;
        if ((v13 - 1) >= 2)
        {
          if (v13 != 5 || !*((_DWORD *)v7 + 2)) {
            operator new();
          }
          uint64_t v14 = *v7;
        }
        if (*(_WORD *)(*(void *)v14 + 16) == 225)
        {
          switch(*((unsigned char *)v7 + 18))
          {
            case 2:
              goto LABEL_29;
            case 5:
              if (*((_DWORD *)v7 + 2) <= 1u) {
                goto LABEL_408;
              }
              uint8x8_t v7 = (uint64_t **)*v7;
LABEL_29:
              ++v7;
              break;
            default:
LABEL_408:
              operator new();
          }
          goto LABEL_49;
        }
        if ((v13 - 1) < 2) {
          goto LABEL_49;
        }
        if (v13 == 5)
        {
          if (*((_DWORD *)v7 + 2))
          {
LABEL_58:
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_49:
            uint8x8_t v7 = (uint64_t **)*v7;
            goto LABEL_50;
          }
          uint8x8_t v7 = 0;
        }
        else
        {
          uint8x8_t v7 = 0;
        }
LABEL_50:
        if (++v6 == 1025) {
          goto LABEL_2;
        }
        continue;
      case 0xE2:
      case 0xE3:
      case 0xE4:
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x800000000;
        int v26 = *((unsigned __int8 *)v7 + 18);
        long long v27 = v7;
        if ((v26 - 1) < 2) {
          goto LABEL_240;
        }
        if (v26 == 5)
        {
          long long v28 = *v7;
          long long v27 = (uint64_t **)*v7;
LABEL_244:
          uint64_t v103 = (uint64_t **)&v28[*((unsigned int *)v7 + 2)];
          goto LABEL_275;
        }
        long long v27 = 0;
LABEL_240:
        switch(v26)
        {
          case 1:
            uint64_t v103 = v7 + 1;
            break;
          case 2:
            uint64_t v103 = v7 + 2;
            break;
          case 5:
            long long v28 = *v7;
            goto LABEL_244;
          default:
            uint64_t v103 = 0;
            break;
        }
LABEL_275:
        if (v27 == v103) {
          goto LABEL_278;
        }
        while (1)
        {
          swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#2}>((uint64_t)a1, *v27, v6 + 1, (uint64_t)&v401, (uint64_t)&v398);
          if (v398.__r_.__value_.__s.__data_[16]) {
            goto LABEL_558;
          }
          if (++v27 == v103) {
            goto LABEL_278;
          }
        }
      case 0xE5:
        operator new();
      case 0xE8:
        int v15 = *((unsigned __int8 *)v7 + 18);
        if ((v15 - 1) >= 2)
        {
          if (v15 != 5 || !*((_DWORD *)v7 + 2)) {
            operator new();
          }
LABEL_40:
          uint8x8_t v7 = (uint64_t **)*v7;
        }
        goto LABEL_49;
      case 0xEC:
        int v17 = *((unsigned __int8 *)v7 + 18);
        if ((v17 - 1) < 2) {
          goto LABEL_49;
        }
        if (v17 != 5 || !*((_DWORD *)v7 + 2)) {
          operator new();
        }
LABEL_48:
        uint8x8_t v7 = (uint64_t **)*v7;
        goto LABEL_49;
      case 0xF7:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            v93 = a1;
            long long v32 = a4;
            goto LABEL_442;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_625;
            }
            v93 = a1;
            long long v32 = a4;
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_442:
            v165 = *v7;
            v166 = v93;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v93, v165, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
              goto LABEL_477;
            }
            if (LOWORD(v401.__r_.__value_.__r.__words[2])) {
              uint64_t v167 = 0;
            }
            else {
              uint64_t v167 = v401.__r_.__value_.__r.__words[0];
            }
            uint64_t v149 = swift::reflection::WeakStorageTypeRef::create<swift::reflection::TypeRefBuilder>(*v166, v167);
            break;
          default:
LABEL_625:
            operator new();
        }
        goto LABEL_565;
      case 0xF8:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            long long v45 = a1;
            long long v32 = a4;
            goto LABEL_429;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_624;
            }
            long long v45 = a1;
            long long v32 = a4;
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_429:
            v156 = *v7;
            v157 = v45;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v45, v156, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
              goto LABEL_477;
            }
            if (LOWORD(v401.__r_.__value_.__r.__words[2])) {
              uint64_t v158 = 0;
            }
            else {
              uint64_t v158 = v401.__r_.__value_.__r.__words[0];
            }
            uint64_t v149 = swift::reflection::UnownedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(*v157, v158);
            break;
          default:
LABEL_624:
            operator new();
        }
        goto LABEL_565;
      case 0xF9:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            v94 = a1;
            long long v32 = a4;
            goto LABEL_449;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_626;
            }
            v94 = a1;
            long long v32 = a4;
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_449:
            v168 = *v7;
            v169 = v94;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v94, v168, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
              goto LABEL_477;
            }
            if (LOWORD(v401.__r_.__value_.__r.__words[2])) {
              uint64_t v170 = 0;
            }
            else {
              uint64_t v170 = v401.__r_.__value_.__r.__words[0];
            }
            uint64_t v149 = swift::reflection::UnmanagedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(*v169, v170);
            break;
          default:
LABEL_626:
            operator new();
        }
        goto LABEL_565;
      case 0x127:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            goto LABEL_236;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_455;
            }
            goto LABEL_465;
          default:
LABEL_455:
            operator new();
        }
      case 0x128:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
            goto LABEL_236;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_457;
            }
            goto LABEL_465;
          default:
LABEL_457:
            operator new();
        }
      case 0x129:
        switch(*((unsigned char *)v7 + 18))
        {
          case 2:
            v171 = a1;
            v172 = (const char **)a4;
            v173 = v7;
            goto LABEL_586;
          case 5:
            if (*((_DWORD *)v7 + 2) <= 1u) {
              goto LABEL_460;
            }
            v171 = a1;
            v172 = (const char **)a4;
            v173 = *v7;
LABEL_586:
            uint64_t v213 = v6 + 1;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v171, *v173, v213, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
            {
              *((_WORD *)v172 + 8) = 1;
              *(_OWORD *)v172 = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
              v401.__r_.__value_.__l.__size_ = (std::string::size_type)swift::TypeLookupError::nop;
              v401.__r_.__value_.__r.__words[0] = 0;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            int v214 = *((unsigned __int8 *)v7 + 18);
            if (v214 == 2) {
              goto LABEL_592;
            }
            if (v214 == 5 && *((_DWORD *)v7 + 2) >= 2u)
            {
              uint8x8_t v7 = (uint64_t **)*v7;
LABEL_592:
              v215 = v7[1];
            }
            else
            {
              v215 = 0;
            }
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v398, v171, v215, v213, 1);
            if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1) {
              v228 = (uint64_t (*)())v398.__r_.__value_.__l.__size_;
            }
            else {
              v228 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            v229 = "unknown error";
            if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1) {
              v229 = (const char *)v398.__r_.__value_.__r.__words[0];
            }
            *((_WORD *)v172 + 8) = 1;
            *v172 = v229;
            v172[1] = (const char *)v228;
            break;
          default:
LABEL_460:
            operator new();
        }
        goto LABEL_650;
      case 0x12A:
        switch(*((unsigned char *)v7 + 18))
        {
          case 1:
          case 2:
LABEL_236:
            v102 = (const char **)a4;
            goto LABEL_466;
          case 5:
            if (!*((_DWORD *)v7 + 2)) {
              goto LABEL_627;
            }
LABEL_465:
            v102 = (const char **)a4;
            uint8x8_t v7 = (uint64_t **)*v7;
LABEL_466:
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, a1, *v7, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
              v174 = (uint64_t (*)())v401.__r_.__value_.__l.__size_;
            }
            else {
              v174 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            v175 = "unknown error";
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1) {
              v175 = (const char *)v401.__r_.__value_.__r.__words[0];
            }
            *((_WORD *)v102 + 8) = 1;
            swift::Demangle::__runtime::Node *v102 = v175;
            v102[1] = (const char *)v174;
            break;
          default:
LABEL_627:
            operator new();
        }
        return;
      case 0x12C:
        switch(*((unsigned char *)v7 + 18))
        {
          case 5:
            if (*((_DWORD *)v7 + 2) < 3u) {
              goto LABEL_461;
            }
            uint64_t v216 = (*v7)[1];
            if (*(_WORD *)(v216 + 16) != 102 || *(unsigned char *)(v216 + 18) != 4) {
              operator new();
            }
            uint64_t v241 = 0;
            uint64_t v365 = **v7;
            uint64_t v366 = *(void *)v216;
            memset(&v401, 0, sizeof(v401));
            if (*((_DWORD *)v7 + 2) >= 3u) {
              uint64_t v241 = (*v7)[2];
            }
            unint64_t v242 = 0;
            v243 = 0;
            v244 = 0;
            v245 = 0;
            uint64_t v246 = v6 + 1;
            uint64_t v368 = v241;
            break;
          default:
LABEL_461:
            operator new();
        }
        while (2)
        {
          unint64_t v247 = *(unsigned __int8 *)(v241 + 18);
          switch(v247)
          {
            case 1:
              break;
            case 5:
              unint64_t v247 = *(unsigned int *)(v241 + 8);
              break;
            case 2:
              unint64_t v247 = 2;
              break;
            default:
              goto LABEL_924;
          }
          if (v247 <= v242) {
            goto LABEL_924;
          }
          LODWORD(v398.__r_.__value_.__l.__data_) = (unint64_t)(v244 - v243) >> 3;
          std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v401, &v398);
          unint64_t v248 = *(unsigned __int8 *)(v241 + 18);
          unsigned int v249 = v248 - 1;
          switch(v248)
          {
            case 1:
              break;
            case 5:
              unint64_t v248 = *(unsigned int *)(v241 + 8);
              break;
            case 2:
              unint64_t v248 = 2;
              break;
            default:
              goto LABEL_695;
          }
          if (v248 > v242)
          {
            uint64_t v250 = v241;
            if (v249 >= 2) {
              uint64_t v250 = *(void *)v241;
            }
            v251 = *(uint64_t **)(v250 + 8 * v242);
LABEL_696:
            v252 = v251 + 2;
            if (*((_WORD *)v251 + 8) == 235)
            {
              int v253 = *((unsigned __int8 *)v251 + 18);
              v254 = v251;
              *(void *)v370 = v242;
              if ((v253 - 1) >= 2)
              {
                if (v253 == 5)
                {
                  uint64_t v255 = *v251;
                  v254 = (void *)*v251;
                  goto LABEL_705;
                }
                v254 = 0;
              }
              if (v253 == 1)
              {
                v252 = v251 + 1;
                goto LABEL_708;
              }
              if (v253 == 2)
              {
LABEL_708:
                if (v254 == v252)
                {
LABEL_679:
                  uint64_t v241 = v368;
                  unint64_t v242 = *(void *)v370 + 1;
                  continue;
                }
                v372 = v252;
                while (1)
                {
                  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(a4, a1, *v254, v246, 0);
                  int v256 = *((unsigned __int16 *)a4 + 8);
                  if (a4 && v256 == 1) {
                    goto LABEL_932;
                  }
                  uint64_t v257 = *((_WORD *)a4 + 8) ? 0 : *a4;
                  if (v244 >= v245) {
                    break;
                  }
                  *(void *)v244 = v257;
                  v244 += 8;
LABEL_739:
                  if (v256 == 1) {
                    ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                  }
                  if (++v254 == v252) {
                    goto LABEL_679;
                  }
                }
                v258 = v245;
                uint64_t v259 = v246;
                v260 = (char *)(v244 - v243);
                uint64_t v261 = (v244 - v243) >> 3;
                unint64_t v262 = v261 + 1;
                if ((unint64_t)(v261 + 1) >> 61) {
                  abort();
                }
                unint64_t v263 = v258 - v243;
                unint64_t v264 = (v258 - v243) >> 2;
                if (v264 > v262) {
                  unint64_t v262 = v264;
                }
                BOOL v265 = v263 >= 0x7FFFFFFFFFFFFFF8;
                unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v265) {
                  unint64_t v266 = v262;
                }
                unint64_t v373 = v266;
                if (v266)
                {
                  if (v266 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  v267 = (char *)operator new(8 * v266);
                }
                else
                {
                  v267 = 0;
                }
                v268 = &v267[8 * v261];
                *(void *)v268 = v257;
                v269 = v268 + 8;
                if (v244 == v243)
                {
                  v243 = v268;
                  uint64_t v246 = v259;
                  unint64_t v273 = v373;
                  goto LABEL_736;
                }
                unint64_t v270 = v244 - v243 - 8;
                if (v270 >= 0x168
                  && (unint64_t v271 = (v244 - 8 - v243) & 0xFFFFFFFFFFFFFFF8,
                      &v260[(void)v267 - 8 - v271] <= &v260[(void)v267 - 8])
                  && &v244[-v271 - 8] <= v244 - 8
                  && (unint64_t)(v243 - v267) >= 0x20)
                {
                  uint64_t v275 = (v270 >> 3) + 1;
                  uint64_t v276 = 8 * (v275 & 0x3FFFFFFFFFFFFFFCLL);
                  v272 = &v244[-v276];
                  v268 -= v276;
                  v277 = &v260[(void)v267 - 16];
                  v278 = v244 - 16;
                  uint64_t v279 = v275 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v280 = *(_OWORD *)v278;
                    *((_OWORD *)v277 - 1) = *((_OWORD *)v278 - 1);
                    *(_OWORD *)v277 = v280;
                    v277 -= 32;
                    v278 -= 32;
                    v279 -= 4;
                  }
                  while (v279);
                  uint64_t v246 = v259;
                  unint64_t v273 = v373;
                  if (v275 == (v275 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_734;
                  }
                }
                else
                {
                  v272 = v244;
                  uint64_t v246 = v259;
                  unint64_t v273 = v373;
                }
                do
                {
                  uint64_t v274 = *((void *)v272 - 1);
                  v272 -= 8;
                  *((void *)v268 - 1) = v274;
                  v268 -= 8;
                }
                while (v272 != v243);
LABEL_734:
                v244 = v243;
                v243 = v268;
LABEL_736:
                v245 = &v267[8 * v273];
                if (v244)
                {
                  operator delete(v244);
                  int v256 = *((unsigned __int16 *)a4 + 8);
                }
                v244 = v269;
                v252 = v372;
                goto LABEL_739;
              }
              if (v253 != 5)
              {
                v252 = 0;
                goto LABEL_708;
              }
              uint64_t v255 = *v251;
LABEL_705:
              v252 = (void *)(v255 + 8 * *((unsigned int *)v251 + 2));
              goto LABEL_708;
            }
LABEL_924:
            LODWORD(v398.__r_.__value_.__l.__data_) = (unint64_t)(v244 - v243) >> 3;
            std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v401, &v398);
            std::string::size_type v332 = 0;
            uint64_t v333 = 0;
            memset(&v398, 0, sizeof(v398));
            std::string::size_type v334 = v401.__r_.__value_.__r.__words[0];
            if (v401.__r_.__value_.__l.__size_ - v401.__r_.__value_.__r.__words[0] != 4)
            {
              unint64_t v335 = 0;
              unsigned int v336 = 1;
              do
              {
                uint64_t v337 = *(unsigned int *)(v334 + 4 * v335);
                unint64_t v335 = v336;
                int v338 = *(_DWORD *)(v334 + 4 * v336);
                v395[0] = &v243[8 * v337];
                LODWORD(v377[0]) = v338 - v337;
                std::vector<llvm::ArrayRef<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const**,unsigned int>((uint64_t)&v398, v395, (unsigned int *)v377);
                std::string::size_type v334 = v401.__r_.__value_.__r.__words[0];
                ++v336;
              }
              while (((uint64_t)(v401.__r_.__value_.__l.__size_ - v401.__r_.__value_.__r.__words[0]) >> 2) - 1 > v335);
              std::string::size_type v332 = v398.__r_.__value_.__l.__size_;
              uint64_t v333 = v398.__r_.__value_.__r.__words[0];
            }
            v339 = swift::reflection::TypeRefBuilder::resolveOpaqueType(*a1, v365, v333, (uint64_t)(v332 - v333) >> 4, v366);
            *((_WORD *)a4 + 8) = 0;
            *a4 = v339;
            if (!v339)
            {
              *a4 = "unknown error";
              a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)a4 + 8) = 1;
            }
            if (v398.__r_.__value_.__r.__words[0])
            {
              v398.__r_.__value_.__l.__size_ = v398.__r_.__value_.__r.__words[0];
              operator delete(v398.__r_.__value_.__l.__data_);
            }
LABEL_932:
            if (v401.__r_.__value_.__r.__words[0])
            {
              v401.__r_.__value_.__l.__size_ = v401.__r_.__value_.__r.__words[0];
              operator delete(v401.__r_.__value_.__l.__data_);
            }
            if (v243)
            {
              long long v49 = v243;
LABEL_265:
              operator delete(v49);
            }
            return;
          }
          break;
        }
LABEL_695:
        v251 = 0;
        goto LABEL_696;
      case 0x152:
        int v46 = *((unsigned __int8 *)v7 + 18);
        if (v46 == 2)
        {
          v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
          v401.__r_.__value_.__l.__size_ = 0x800000000;
        }
        else
        {
          if (v46 != 5 || *((_DWORD *)v7 + 2) < 2u) {
            operator new();
          }
          v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
          v401.__r_.__value_.__l.__size_ = 0x800000000;
          if (*((_DWORD *)v7 + 2) <= 1u)
          {
            v204 = 0;
LABEL_557:
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeGenericArgs(a1, v204, v6 + 1, (uint64_t)&v401, (uint64_t)&v398);
            if (!v398.__r_.__value_.__s.__data_[16])
            {
LABEL_278:
              *a4 = "unknown error";
              a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)a4 + 8) = 1;
              goto LABEL_904;
            }
LABEL_558:
            *((_WORD *)a4 + 8) = 1;
            v205 = (uint64_t (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_;
            std::string::size_type v206 = v398.__r_.__value_.__r.__words[0];
            a4[1] = v398.__r_.__value_.__l.__size_;
            *a4 = v205(v206, 2, 0);
            if (v398.__r_.__value_.__s.__data_[16]) {
              ((void (*)(std::string::size_type, uint64_t, void))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
            }
            goto LABEL_904;
          }
          uint8x8_t v7 = (uint64_t **)*v7;
        }
        v204 = v7[1];
        goto LABEL_557;
      default:
        operator new();
    }
  }
}

unsigned __int16 ***swift::Demangle::__runtime::getObjCClassOrProtocolName@<X0>(unsigned __int16 ***result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((unsigned __int16 *)result + 8);
  if (v2 != 24 && v2 != 180) {
    goto LABEL_21;
  }
  int v3 = *((unsigned __int8 *)result + 18);
  uint64_t v4 = result;
  if (v3 != 2)
  {
    if (v3 != 5 || *((_DWORD *)result + 2) != 2) {
      goto LABEL_21;
    }
    uint64_t v4 = (unsigned __int16 ***)*result;
  }
  __int16 v5 = *v4;
  if (*((_WORD *)v5 + 8) != 153 || v5[1] != (unsigned __int16 *)((char *)&dword_0 + 3)) {
    goto LABEL_21;
  }
  unsigned int v6 = *v5;
  int v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 != 24415 || v8 != 67) {
    goto LABEL_21;
  }
  if (v3 == 2) {
    goto LABEL_17;
  }
  if (*((_DWORD *)result + 2) >= 2u)
  {
    uint64_t result = (unsigned __int16 ***)*result;
LABEL_17:
    int v10 = result[1];
    goto LABEL_19;
  }
  int v10 = 0;
LABEL_19:
  if (*((_WORD *)v10 + 8) == 101)
  {
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(unsigned char *)(a2 + 16) = 1;
    return result;
  }
LABEL_21:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

void swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledTypeDecl(swift::Demangle::__runtime::Node **a1@<X0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 > 0x400)
  {
LABEL_2:
    int v7 = "Mangled type is too complex";
LABEL_3:
    *(void *)a6 = v7;
    *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(unsigned char *)(a6 + 16) = 1;
    return;
  }
  uint64_t v12 = a3 + 1;
  while (1)
  {
    int v13 = *((unsigned __int16 *)a2 + 8);
    if (v13 != 232) {
      break;
    }
    int v14 = *((unsigned __int8 *)a2 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !a2[2])
      {
        a2 = 0;
        goto LABEL_8;
      }
      a2 = *(_DWORD **)a2;
    }
    a2 = *(_DWORD **)a2;
LABEL_8:
    uint64_t v12 = (v12 + 1);
    if (v12 == 1026) {
      goto LABEL_2;
    }
  }
  if (v13 != 233)
  {
    int v15 = a2;
    switch(*((unsigned char *)a2 + 18))
    {
      case 2:
        goto LABEL_27;
      case 5:
        if (a2[2] <= 1u) {
          goto LABEL_25;
        }
        int v15 = *(_DWORD **)a2;
LABEL_27:
        int v16 = *(uint64_t **)v15;
        int v17 = *(unsigned __int16 *)(*(void *)v15 + 16);
        if (v17 == 153) {
          break;
        }
        if (v17 == 71)
        {
          int v18 = *((unsigned __int8 *)v16 + 18);
          if (v18 != 2)
          {
            if (v18 != 5 || *((_DWORD *)v16 + 2) < 2u) {
              operator new();
            }
            int v16 = (uint64_t *)*v16;
          }
          int v16 = (uint64_t *)v16[1];
        }
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v20, a1, v16, v12, 1);
        int v19 = LOWORD(v20.__r_.__value_.__r.__words[2]);
        if (LOWORD(v20.__r_.__value_.__r.__words[2]))
        {
          *a5 = 0;
          if (v19 == 1) {
            ((void (*)(std::string::size_type, uint64_t, void))v20.__r_.__value_.__l.__size_)(v20.__r_.__value_.__r.__words[0], 3, 0);
          }
        }
        else
        {
          *a5 = v20.__r_.__value_.__r.__words[0];
        }
        swift::Demangle::__runtime::getUnspecialized((unint64_t)a2, *a1, (uint64_t)&v20);
        if (LODWORD(v20.__r_.__value_.__l.__data_))
        {
          int v7 = "Failed to unspecialize type";
          goto LABEL_3;
        }
        a2 = __p;
        break;
      default:
LABEL_25:
        operator new();
    }
  }
  swift::reflection::TypeRefBuilder::createTypeDecl((swift::Demangle::__runtime::Node *)a2, &v20);
  std::__optional_storage_base<swift::reflection::TypeRefDecl,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::reflection::TypeRefDecl,false>>(a4, (__n128 *)&v20);
  if (v24)
  {
    if (v23 && __p)
    {
      int v22 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  if (!*(unsigned char *)(a4 + 56))
  {
    int v7 = "Failed to create type decl";
    goto LABEL_3;
  }
  *(unsigned char *)a6 = 0;
  *(unsigned char *)(a6 + 16) = 0;
}

uint64_t std::optional<swift::reflection::TypeRefDecl>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      int v2 = *(void **)(a1 + 24);
      if (v2)
      {
        *(void *)(a1 + 32) = v2;
        operator delete(v2);
      }
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeGenericArgs@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v6 = a2 + 2;
  if (*((_WORD *)a2 + 8) != 235) {
    operator new();
  }
  int v9 = result;
  int v10 = *((unsigned __int8 *)a2 + 18);
  int v11 = a2;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      uint64_t v12 = *a2;
      int v11 = (uint64_t *)*a2;
      goto LABEL_11;
    }
    int v11 = 0;
  }
  switch(v10)
  {
    case 1:
      unsigned int v6 = a2 + 1;
      if (v11 != a2 + 1) {
        goto LABEL_16;
      }
      goto LABEL_28;
    case 2:
      goto LABEL_16;
    case 5:
      uint64_t v12 = *a2;
LABEL_11:
      unsigned int v6 = (uint64_t *)(v12 + 8 * *((unsigned int *)a2 + 2));
      if (v11 != v6) {
        goto LABEL_16;
      }
      goto LABEL_28;
  }
  unsigned int v6 = 0;
  if (!v11)
  {
LABEL_28:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 16) = 0;
    return result;
  }
  while (1)
  {
LABEL_16:
    uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v19, v9, *v11, a3, 0);
    int v13 = v21;
    if (v21 == 1)
    {
      uint64_t v14 = v19;
      int v15 = v20;
      *(void *)(a5 + 8) = v20;
      uint64_t result = (void *)v15(v14, 2, 0);
      *(void *)a5 = result;
      *(unsigned char *)(a5 + 16) = 1;
    }
    else
    {
      uint64_t v16 = v19;
      unint64_t v17 = *(unsigned int *)(a4 + 8);
      if (v17 >= *(unsigned int *)(a4 + 12))
      {
        uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v17 + 1, 8);
        unint64_t v17 = *(unsigned int *)(a4 + 8);
      }
      uint64_t v18 = v13 ? 0 : v16;
      *(void *)(*(void *)a4 + 8 * v17) = v18;
      ++*(_DWORD *)(a4 + 8);
    }
    if (v21 == 1) {
      uint64_t result = (void *)v20(v19, 3, 0);
    }
    if (v13 == 1) {
      return result;
    }
    if (++v11 == v6) {
      goto LABEL_28;
    }
  }
}

uint64_t swift::reflection::TypeRefBuilder::createBoundGenericType(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  v16[0] = a3;
  v16[1] = a4;
  if (!*(unsigned char *)(a2 + 56)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 48)) {
    return swift::reflection::TypeRefBuilder::createBoundGenericType(a1, a2, (size_t)v16);
  }
  std::string __p = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  if (a4)
  {
    if (a4 < 0) {
      abort();
    }
    size_t v11 = 8 * a4;
    std::string __p = operator new(8 * a4);
    int v15 = (char *)__p + 8 * a4;
    memcpy(__p, a3, v11);
    uint64_t v14 = v15;
  }
  uint64_t v7 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2, (uint64_t **)&__p, a5);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  return v7;
}

uint64_t swift::reflection::TypeRefBuilder::createBuiltinType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v4 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType(uint64_t *a1@<X1>, unsigned int a2@<W2>, std::string *a3@<X8>)
{
  if (a2 > 0x400) {
    goto LABEL_2;
  }
  unsigned int v4 = a2 - 1025;
  while (1)
  {
    int v6 = *((unsigned __int16 *)a1 + 8);
    int v7 = *((unsigned __int8 *)a1 + 18);
    if (v6 != 232) {
      break;
    }
    if ((v7 - 1) < 2) {
      goto LABEL_7;
    }
    if (v7 == 5 && *((_DWORD *)a1 + 2))
    {
      a1 = (uint64_t *)*a1;
LABEL_7:
      a1 = (uint64_t *)*a1;
      BOOL v5 = __CFADD__(v4++, 1);
      if (v5) {
        goto LABEL_2;
      }
    }
    else
    {
      a1 = 0;
      BOOL v5 = __CFADD__(v4++, 1);
      if (v5) {
        goto LABEL_2;
      }
    }
  }
  if (v7 == 2)
  {
    int v10 = (unsigned __int16 ***)a1;
    if (v6 != 180) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  if (v7 == 5)
  {
    unsigned int v8 = *((_DWORD *)a1 + 2);
    if (v6 == 180 && v8 > 1)
    {
      if (v8 != 2) {
        goto LABEL_45;
      }
      int v10 = (unsigned __int16 ***)*a1;
LABEL_27:
      size_t v11 = *v10;
      if (*((_WORD *)v11 + 8) != 153
        || v11[1] != (unsigned __int16 *)((char *)&dword_0 + 3)
        || ((uint64_t v12 = *v11, v13 = *v12, v14 = *((unsigned __int8 *)v12 + 2), v13 == 24415) ? (v15 = v14 == 67) : (v15 = 0),
            !v15))
      {
LABEL_45:
        swift::Demangle::__runtime::mangleNode((swift::Demangle::__runtime *)a1, (swift::Demangle::__runtime::Node *)a1);
        if (LODWORD(v25.__r_.__value_.__l.__data_))
        {
          a3->__r_.__value_.__s.__data_[0] = 0;
          a3[1].__r_.__value_.__s.__data_[8] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v24 = __p;
          }
          *a3 = v24;
          a3[1].__r_.__value_.__s.__data_[0] = 0;
          a3[1].__r_.__value_.__s.__data_[8] = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
      uint64_t v16 = a1;
      if (v7 != 2)
      {
        if (*((_DWORD *)a1 + 2) < 2u)
        {
          uint64_t v17 = 0;
LABEL_39:
          if (*(_WORD *)(v17 + 16) != 101) {
            goto LABEL_45;
          }
          uint64_t v18 = *(const void **)v17;
          if (!*(void *)v17)
          {
            memset(&v24, 0, sizeof(v24));
            goto LABEL_59;
          }
          std::string::size_type v19 = *(void *)(v17 + 8);
          if (v19 >= 0x7FFFFFFFFFFFFFF8) {
            abort();
          }
          if (v19 >= 0x17)
          {
            uint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v21 = v19 | 7;
            }
            uint64_t v22 = v21 + 1;
            std::string v20 = (std::string *)operator new(v21 + 1);
            v24.__r_.__value_.__l.__size_ = v19;
            v24.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
          }
          else
          {
            *((unsigned char *)&v24.__r_.__value_.__s + 23) = *(void *)(v17 + 8);
            std::string v20 = &v24;
            if (!v19)
            {
LABEL_58:
              v20->__r_.__value_.__s.__data_[v19] = 0;
              if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
              {
                char v23 = (void *)v24.__r_.__value_.__r.__words[0];
                std::string::__init_copy_ctor_external(&v25, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
                *a3 = v25;
                operator delete(v23);
                goto LABEL_61;
              }
LABEL_59:
              *a3 = v24;
LABEL_61:
              a3[1].__r_.__value_.__s.__data_[0] = 1;
              a3[1].__r_.__value_.__s.__data_[8] = 1;
              return;
            }
          }
          memmove(v20, v18, v19);
          goto LABEL_58;
        }
        uint64_t v16 = (uint64_t *)*a1;
      }
      uint64_t v17 = v16[1];
      goto LABEL_39;
    }
  }
LABEL_24:
  if (v6 == 181 || v6 == 347) {
    goto LABEL_45;
  }
LABEL_2:
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[8] = 0;
}

void __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::push_back(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + 40 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      uint64_t v11 = (uint64_t)a2 - v5;
      __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::grow(a1, v8);
      unint64_t v5 = *(void *)a1;
      a2 = (long long *)(*(void *)a1 + v11);
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::grow(a1, v8);
      unint64_t v5 = *(void *)a1;
    }
  }
  int v6 = (std::string *)(v5 + 40 * *(unsigned int *)(a1 + 8));
  v6->__r_.__value_.__s.__data_[0] = 0;
  v6[1].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 32))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v7 = *a2;
      v6->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    v6[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 24);
    v6[1].__r_.__value_.__s.__data_[8] = 1;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t swift::reflection::TypeRefBuilder::createProtocolCompositionType(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a3)
  {
    unint64_t v9 = 0;
    std::string __p = 0;
    BOOL v35 = 0;
    long long v36 = 0;
    goto LABEL_46;
  }
  int v6 = a2;
  uint64_t v32 = a4;
  int v33 = a5;
  long long v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  int v10 = (long long *)((char *)a2 + 40 * a3);
  do
  {
    if (*((unsigned char *)v6 + 32))
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v11 = *v6;
        v37.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v11;
      }
      char v38 = *((unsigned char *)v6 + 24);
      char v39 = 1;
      uint64_t ProtocolTypeFromDecl = swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(a1, (uint64_t)&v37);
      if (v39 && SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (ProtocolTypeFromDecl)
      {
        if (v8 < v7)
        {
          *v8++ = ProtocolTypeFromDecl;
          goto LABEL_4;
        }
        uint64_t v13 = v8 - v9;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          goto LABEL_51;
        }
        if (((char *)v7 - (char *)v9) >> 2 > v14) {
          unint64_t v14 = ((char *)v7 - (char *)v9) >> 2;
        }
        if ((unint64_t)((char *)v7 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v16 = operator new(8 * v15);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (uint64_t *)&v16[8 * v13];
        *uint64_t v17 = ProtocolTypeFromDecl;
        uint64_t v18 = v17 + 1;
        if (v8 == v9) {
          goto LABEL_38;
        }
        unint64_t v19 = (char *)v8 - (char *)v9 - 8;
        if (v19 >= 0x168)
        {
          unint64_t v21 = ((char *)(v8 - 1) - (char *)v9) & 0xFFFFFFFFFFFFFFF8;
          if (&v16[(char *)v8 - (char *)v9 - 8 - v21] > &v16[(char *)v8 - (char *)v9 - 8])
          {
            std::string v20 = v8;
          }
          else if ((uint64_t *)((char *)v8 - v21 - 8) > v8 - 1)
          {
            std::string v20 = v8;
          }
          else if ((unint64_t)((char *)v9 - v16) >= 0x20)
          {
            uint64_t v22 = (v19 >> 3) + 1;
            uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
            std::string v20 = &v8[v23 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v17 = (uint64_t *)((char *)v17 - v23);
            std::string v24 = &v16[8 * v13 - 16];
            std::string v25 = v8 - 2;
            uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v27 = *(_OWORD *)v25;
              *(v24 - 1) = *((_OWORD *)v25 - 1);
              *std::string v24 = v27;
              v24 -= 2;
              v25 -= 4;
              v26 -= 4;
            }
            while (v26);
            if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_37;
            }
          }
          else
          {
            std::string v20 = v8;
          }
        }
        else
        {
          std::string v20 = v8;
        }
        do
        {
          uint64_t v28 = *--v20;
          *--uint64_t v17 = v28;
        }
        while (v20 != v9);
LABEL_37:
        unint64_t v8 = v9;
LABEL_38:
        unint64_t v9 = v17;
        long long v7 = (uint64_t *)&v16[8 * v15];
        if (v8) {
          operator delete(v8);
        }
        unint64_t v8 = v18;
      }
    }
LABEL_4:
    int v6 = (long long *)((char *)v6 + 40);
  }
  while (v6 != v10);
  std::string __p = 0;
  BOOL v35 = 0;
  long long v36 = 0;
  uint64_t v29 = (char *)v8 - (char *)v9;
  if (v8 != v9)
  {
    if (v29 < 0) {
LABEL_51:
    }
      abort();
    std::string __p = operator new((char *)v8 - (char *)v9);
    long long v36 = (char *)__p + 8 * (v29 >> 3);
    memcpy(__p, v9, (char *)v8 - (char *)v9);
    BOOL v35 = v36;
  }
  a5 = v33;
  a4 = v32;
LABEL_46:
  uint64_t v30 = swift::reflection::ProtocolCompositionTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&__p, a4, a5);
  if (__p)
  {
    BOOL v35 = __p;
    operator delete(__p);
  }
  if (v9) {
    operator delete(v9);
  }
  return v30;
}

char **llvm::SmallVector<std::optional<std::pair<std::string,BOOL>>,8u>::~SmallVector(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      unint64_t v5 = (void **)&v2[v4];
      if (v2[v4 - 8] && *((char *)v5 - 17) < 0) {
        operator delete(*(v5 - 5));
      }
      v4 -= 40;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t swift::Demangle::__runtime::decodeRequirement<swift::reflection::TypeRef const*,swift::reflection::TypeRefRequirement,swift::reflection::TypeRefInverseRequirement,swift::reflection::TypeRefLayoutConstraint,swift::reflection::TypeRefBuilder>(uint64_t result, uint64_t a2, uint64_t a3, swift::reflection::TypeRefBuilder *a4)
{
  int v7 = *(unsigned __int8 *)(result + 18);
  unint64_t v8 = (swift::Demangle::__runtime::Node **)result;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unint64_t v9 = *(swift::Demangle::__runtime::Node ***)result;
      unint64_t v8 = *(swift::Demangle::__runtime::Node ***)result;
      goto LABEL_9;
    }
    unint64_t v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = result + 8;
      if (v8 != (swift::Demangle::__runtime::Node **)(result + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      uint64_t v10 = result + 16;
      if (v8 != (swift::Demangle::__runtime::Node **)(result + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      unint64_t v9 = *(swift::Demangle::__runtime::Node ***)result;
LABEL_9:
      uint64_t v10 = (uint64_t)&v9[*(unsigned int *)(result + 8)];
      if (v8 == (swift::Demangle::__runtime::Node **)v10) {
        return result;
      }
      goto LABEL_16;
    default:
      uint64_t v10 = 0;
      if (!v8) {
        return result;
      }
LABEL_16:
      uint64_t v39 = a3 + 16;
      while (1)
      {
        unint64_t v14 = *v8;
        int v15 = *((unsigned __int16 *)*v8 + 8);
        if (v15 == 37 || v15 == 42) {
          goto LABEL_21;
        }
        int v16 = *((unsigned __int8 *)v14 + 18);
        if (v16 != 2)
        {
          if (v16 != 5 || *((_DWORD *)v14 + 2) != 2) {
            return result;
          }
          unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
        }
        uint64_t result = swift::reflection::TypeRefBuilder::decodeMangledType(a4, *(swift::Demangle::__runtime::Node **)v14, 1);
        if (!result) {
          return result;
        }
        uint64_t v17 = result;
        uint64_t v18 = *v8;
        int v19 = *((unsigned __int16 *)*v8 + 8);
        if (v19 == 354)
        {
          int v22 = *((unsigned __int8 *)v18 + 18);
          uint64_t v23 = *v8;
          if ((v22 - 1) < 2) {
            goto LABEL_41;
          }
          if (v22 == 5 && *((_DWORD *)v18 + 2))
          {
            uint64_t v23 = *(swift::Demangle::__runtime::Node **)v18;
LABEL_41:
            uint64_t v24 = *(void *)v23;
          }
          else
          {
            uint64_t v24 = 0;
          }
          if (*(_WORD *)(v24 + 16) != 232) {
            return result;
          }
          int v36 = *(unsigned __int8 *)(v24 + 18);
          if (v36 != 1 && (v36 != 5 || *(_DWORD *)(v24 + 8) != 1)) {
            return result;
          }
          if (v22 == 5) {
            uint64_t v18 = *(swift::Demangle::__runtime::Node **)v18;
          }
          uint64_t v37 = **((unsigned __int8 **)v18 + 1);
          unint64_t v38 = *(unsigned int *)(a3 + 8);
          if (v38 >= *(unsigned int *)(a3 + 12))
          {
            uint64_t result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v39, v38 + 1, 8);
            unint64_t v38 = *(unsigned int *)(a3 + 8);
          }
          *(void *)(*(void *)a3 + 8 * v38) = v37 | v17 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v13 = (_DWORD *)(a3 + 8);
          goto LABEL_20;
        }
        if (v19 != 39)
        {
          if (v19 != 36)
          {
            uint64_t v26 = 0;
            goto LABEL_53;
          }
          int v20 = *((unsigned __int8 *)v18 + 18);
          if (v20 == 2)
          {
LABEL_36:
            unint64_t v21 = (swift::Demangle::__runtime::Node *)*((void *)v18 + 1);
          }
          else
          {
            if (v20 == 5 && *((_DWORD *)v18 + 2) >= 2u)
            {
              uint64_t v18 = *(swift::Demangle::__runtime::Node **)v18;
              goto LABEL_36;
            }
            unint64_t v21 = 0;
          }
          long long v27 = a4;
          uint64_t v28 = 1;
          goto LABEL_52;
        }
        int v25 = *((unsigned __int8 *)v18 + 18);
        if (v25 != 2)
        {
          if (v25 != 5 || *((_DWORD *)v18 + 2) < 2u)
          {
            unint64_t v21 = 0;
            goto LABEL_51;
          }
          uint64_t v18 = *(swift::Demangle::__runtime::Node **)v18;
        }
        unint64_t v21 = (swift::Demangle::__runtime::Node *)*((void *)v18 + 1);
LABEL_51:
        long long v27 = a4;
        uint64_t v28 = 0;
LABEL_52:
        uint64_t result = swift::reflection::TypeRefBuilder::decodeMangledType(v27, v21, v28);
        uint64_t v26 = result;
        if (!result) {
          return result;
        }
LABEL_53:
        uint64_t v29 = *v8;
        int v30 = *((unsigned __int16 *)*v8 + 8);
        if (v30 != 41)
        {
          if (v30 == 39)
          {
            unint64_t v31 = *(unsigned int *)(a2 + 8);
            if (v31 >= *(unsigned int *)(a2 + 12))
            {
              uint64_t result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
              unint64_t v31 = *(unsigned int *)(a2 + 8);
            }
            unint64_t v11 = v17 & 0xFFFFFFFFFFFFFFF8 | 2;
          }
          else
          {
            if (v30 != 36) {
              goto LABEL_21;
            }
            unint64_t v31 = *(unsigned int *)(a2 + 8);
            if (v31 >= *(unsigned int *)(a2 + 12))
            {
              uint64_t result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
              unint64_t v31 = *(unsigned int *)(a2 + 8);
            }
            unint64_t v11 = v17 & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v12 = (unint64_t *)(*(void *)a2 + 16 * v31);
          *uint64_t v12 = v11;
          v12[1] = v26;
          goto LABEL_19;
        }
        int v32 = *((unsigned __int8 *)v29 + 18);
        if (v32 == 2) {
          goto LABEL_62;
        }
        if (v32 == 5 && *((_DWORD *)v29 + 2) >= 2u)
        {
          uint64_t v29 = *(swift::Demangle::__runtime::Node **)v29;
LABEL_62:
          int v33 = (unsigned __int8 **)*((void *)v29 + 1);
          goto LABEL_67;
        }
        int v33 = 0;
LABEL_67:
        if (*((_WORD *)v33 + 8) != 101) {
          return result;
        }
        if (v33[1] != (unsigned char *)&dword_0 + 1) {
          return result;
        }
        unsigned int v34 = **v33 - 66;
        if (v34 > 0x2B || ((1 << v34) & 0x808000F180FLL) == 0) {
          return result;
        }
        unint64_t v35 = *(unsigned int *)(a2 + 8);
        if (v35 >= *(unsigned int *)(a2 + 12))
        {
          uint64_t result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v35 + 1, 16);
          unint64_t v35 = *(unsigned int *)(a2 + 8);
        }
        *(void *)(*(void *)a2 + 16 * v35) = v17 & 0xFFFFFFFFFFFFFFF8 | 3;
LABEL_19:
        uint64_t v13 = (_DWORD *)(a2 + 8);
LABEL_20:
        ++*v13;
LABEL_21:
        if (++v8 == (swift::Demangle::__runtime::Node **)v10) {
          return result;
        }
      }
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::createConstrainedExistentialType(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a2 && *(_DWORD *)(a2 + 8) == 5)
  {
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (a4)
    {
      if (a4 < 0) {
        abort();
      }
      size_t v9 = 16 * a4;
      std::string __p = operator new(16 * a4);
      uint64_t v13 = (char *)__p + 16 * a4;
      memcpy(__p, a3, v9);
      uint64_t v12 = v13;
    }
    uint64_t v4 = swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
  }
  return v4;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType@<X0>(void *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 > 0x400) {
    goto LABEL_2;
  }
  while (1)
  {
    int v7 = *(unsigned __int16 *)(a2 + 16);
    if (v7 != 232 && v7 != 3) {
      break;
    }
    int v9 = *(unsigned __int8 *)(a2 + 18);
    if ((v9 - 1) >= 2)
    {
      if (v9 != 5 || !*(_DWORD *)(a2 + 8))
      {
        a2 = 0;
        goto LABEL_7;
      }
      a2 = *(void *)a2;
    }
    a2 = *(void *)a2;
LABEL_7:
    if (++a3 == 1025) {
      goto LABEL_2;
    }
  }
  unsigned int v28 = a3;
  v27[0] = a5;
  v27[1] = &v28;
  v27[2] = a4;
  v27[3] = result;
  v26[0] = a5;
  v26[1] = v27;
  if (v7 == 223)
  {
    int v10 = *(unsigned __int8 *)(a2 + 18);
    unint64_t v11 = (uint64_t **)a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *(uint64_t ***)a2;
LABEL_28:
        int v16 = (uint64_t **)(v12 + 8 * *(unsigned int *)(a2 + 8));
        goto LABEL_34;
      }
      unint64_t v11 = 0;
    }
    switch(v10)
    {
      case 1:
        int v16 = (uint64_t **)(a2 + 8);
        goto LABEL_34;
      case 2:
        int v16 = (uint64_t **)(a2 + 16);
        goto LABEL_34;
      case 5:
        uint64_t v12 = *(void *)a2;
        goto LABEL_28;
    }
    int v16 = 0;
LABEL_34:
    while (v11 != v16)
    {
      uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(v26, *v11, &v22);
      if (v24)
      {
        uint64_t v17 = v22;
        uint64_t v18 = v23;
        *(void *)(a6 + 8) = v23;
        uint64_t result = (void *)v18(v17, 2, 0);
        *(void *)a6 = result;
        *(unsigned char *)(a6 + 16) = 1;
        if (v24) {
          return (void *)v23(v22, 3, 0);
        }
        return result;
      }
      ++v11;
    }
LABEL_2:
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 16) = 0;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v25 = 0;
    uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator()((uint64_t)v27, a2, (unint64_t)&v22, (uint64_t)&v19);
    if (!v21) {
      goto LABEL_2;
    }
    uint64_t v13 = v19;
    unint64_t v14 = v20;
    *(void *)(a6 + 8) = v20;
    uint64_t result = (void *)v14(v13, 2, 0);
    *(void *)a6 = result;
    int v15 = v21;
    *(unsigned char *)(a6 + 16) = 1;
    if (v15) {
      return (void *)v20(v19, 3, 0);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::createFunctionType(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  std::string __p = 0;
  unsigned __int8 v21 = 0;
  uint64_t v22 = 0;
  if (a3)
  {
    if (a3 < 0) {
      abort();
    }
    uint64_t v17 = 32 * a3;
    std::string __p = operator new(32 * a3);
    uint64_t v22 = (char *)__p + 32 * a3;
    memcpy(__p, a2, v17 - 4);
    unsigned __int8 v21 = v22;
  }
  uint64_t v18 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t *)&__p, a4, a5, a6, a7, a8, a9);
  if (__p)
  {
    unsigned __int8 v21 = __p;
    operator delete(__p);
  }
  return v18;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = 1;
  if (v8 == 2)
  {
    unint64_t v11 = (char ***)a2;
  }
  else
  {
    if (v8 != 5) {
      return v9;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    if ((v10 - 2) > 2) {
      return 1;
    }
    unint64_t v11 = *(char ****)a2;
    uint64_t v9 = v10 - 1;
  }
  if (*((_WORD *)*v11 + 8) != 106) {
    return 1;
  }
  uint64_t v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232) {
    return 1;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0) {
    return 1;
  }
  uint64_t v9 = 1;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v19, a1, v12, a3 + 1, 1);
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(void, uint64_t, void))v19[1])(v19[0], 3, 0);
    return v9;
  }
  unsigned __int8 v18 = 0;
  if (*(unsigned char *)(a2 + 18) != 5) {
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 8);
    if (*(_WORD *)(v13 + 16) != 110) {
      goto LABEL_27;
    }
    unsigned __int16 DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getDifferentiabilityFromString(*(void **)v13, *(void *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u) {
      goto LABEL_27;
    }
    unsigned __int8 v18 = DifferentiabilityFromString;
    if (*(unsigned char *)(a2 + 18) != 5) {
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(void *)(*(void *)a2 + 16) + 16) == 111)
    {
      unsigned __int8 v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v9 = 1;
    goto LABEL_28;
  }
LABEL_23:
  if (v20) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v19[0];
  }
  uint64_t v17 = v16;
  __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a4, &v17, (unsigned int *)&ConventionFromString, &v18);
  uint64_t v9 = 0;
LABEL_28:
  if (v20 == 1) {
    goto LABEL_29;
  }
  return v9;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = 1;
  if (v8 == 2)
  {
    unint64_t v11 = (_DWORD ***)a2;
  }
  else
  {
    if (v8 != 5) {
      return v9;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    if ((v10 - 2) > 2) {
      return 1;
    }
    unint64_t v11 = *(_DWORD ****)a2;
    uint64_t v9 = v10 - 1;
  }
  if (*((_WORD *)*v11 + 8) != 106) {
    return 1;
  }
  uint64_t v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232) {
    return 1;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0) {
    return 1;
  }
  uint64_t v9 = 1;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v19, a1, v12, a3 + 1, 1);
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(void, uint64_t, void))v19[1])(v19[0], 3, 0);
    return v9;
  }
  unsigned __int8 v18 = 0;
  if (*(unsigned char *)(a2 + 18) != 5) {
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 8);
    if (*(_WORD *)(v13 + 16) != 110) {
      goto LABEL_27;
    }
    unsigned __int16 DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getDifferentiabilityFromString(*(void **)v13, *(void *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u) {
      goto LABEL_27;
    }
    unsigned __int8 v18 = DifferentiabilityFromString;
    if (*(unsigned char *)(a2 + 18) != 5) {
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(void *)(*(void *)a2 + 16) + 16) == 111)
    {
      unsigned __int8 v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v9 = 1;
    goto LABEL_28;
  }
LABEL_23:
  if (v20) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v19[0];
  }
  uint64_t v17 = v16;
  __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a4, &v17, (unsigned int *)&ConventionFromString, &v18);
  uint64_t v9 = 0;
LABEL_28:
  if (v20 == 1) {
    goto LABEL_29;
  }
  return v9;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionPart<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>(uint64_t a1, _DWORD ***a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1;
  }
  int v6 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2)
  {
    if (v8 == 5 && *((_DWORD *)a2 + 2) == 2)
    {
      uint64_t v9 = (_WORD **)*a2;
      if (*((_WORD *)**a2 + 8) == 106) {
        goto LABEL_8;
      }
    }
    return 1;
  }
  uint64_t v9 = (_WORD **)a2;
  if (*((_WORD *)*a2 + 8) != 106) {
    return 1;
  }
LABEL_8:
  if (v9[1][8] != 232) {
    return 1;
  }
  unsigned int v10 = v8 - 1;
  unint64_t v11 = a2;
  if (v10 >= 2) {
    unint64_t v11 = (_DWORD ***)*a2;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0) {
    return 1;
  }
  int v12 = *((unsigned __int8 *)v6 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v6 + 2) < 2u)
    {
      uint64_t v13 = 0;
      goto LABEL_20;
    }
    int v6 = (_DWORD ***)*v6;
  }
  uint64_t v13 = v6[1];
LABEL_20:
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v18, a1, v13, a3 + 1, 1);
  BOOL v14 = v19 == 1;
  if (v19 == 1
    || (v19 ? (uint64_t v16 = 0) : (uint64_t v16 = v18[0]),
        uint64_t v17 = v16,
        __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(a4, &v17, (unsigned int *)&ConventionFromString), v19 == 1))
  {
    ((void (*)(void, uint64_t, void))v18[1])(v18[0], 3, 0);
  }
  return v14;
}

uint64_t swift::reflection::TypeRefBuilder::createImplFunctionType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v9 = (a8 & 7) - 1;
  if (v9 > 5) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = qword_C6980[v9];
  }
  unint64_t v11 = (a8 << 25) & 0x40000000 | (((a8 >> 6) & 1) << 29) | ((unint64_t)((a8 & 0x700) != 0) << 27) | v10;
  uint64_t v12 = (a8 >> 7) & 0x10;
  uint64_t v13 = (BYTE1(a8) & 7u) - 1;
  if (v13 < 4) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t TupleType = swift::reflection::TypeRefBuilder::createTupleType(a1, 0, 0, 0, 0);
  __int16 v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  uint64_t v16 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t *)&__p, TupleType, v11, v12, v14, 0, 0);
  if (__p)
  {
    __int16 v19 = __p;
    operator delete(__p);
  }
  return v16;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#1}>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (*((_WORD *)a2 + 8) == 232)
  {
    int v7 = *((unsigned __int8 *)a2 + 18);
    if ((v7 - 1) < 2)
    {
LABEL_6:
      a2 = (uint64_t *)*a2;
      goto LABEL_8;
    }
    if (v7 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      goto LABEL_6;
    }
    a2 = 0;
  }
LABEL_8:
  if (*((_WORD *)a2 + 8) == 229)
  {
    switch(*((unsigned char *)a2 + 18))
    {
      case 2:
        goto LABEL_27;
      case 5:
        if (*((_DWORD *)a2 + 2) <= 1u) {
          goto LABEL_25;
        }
        a2 = (uint64_t *)*a2;
LABEL_27:
        uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v24, a1, a2[1], a3, 1);
        if (v26 != 1) {
          goto LABEL_30;
        }
        uint64_t v19 = v24;
        uint64_t v20 = v25;
        *(void *)(a5 + 8) = v25;
        uint64_t result = (void *)v20(v19, 2, 0);
        *(void *)a5 = result;
        *(unsigned char *)(a5 + 16) = 1;
        if (v26 == 1) {
          uint64_t result = (void *)v25(v24, 3, 0);
        }
        break;
      default:
LABEL_25:
        operator new();
    }
  }
  else
  {
    uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v24, a1, a2, a3, 0);
    int v9 = v26;
    if (v26 == 1)
    {
      uint64_t v10 = v24;
      unint64_t v11 = v25;
      *(void *)(a5 + 8) = v25;
      uint64_t result = (void *)v11(v10, 2, 0);
      *(void *)a5 = result;
      *(unsigned char *)(a5 + 16) = 1;
    }
    else
    {
      uint64_t v12 = v24;
      uint64_t v13 = *a4;
      uint64_t v14 = *(unsigned int *)(*a4 + 8);
      if (v14 >= *(_DWORD *)(*a4 + 12))
      {
        uint64_t v22 = *a4;
        uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v14 + 1, 8);
        uint64_t v13 = v22;
        LODWORD(v14) = *(_DWORD *)(v22 + 8);
      }
      if (v9) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v12;
      }
      *(void *)(*(void *)v13 + 8 * v14) = v15;
      ++*(_DWORD *)(v13 + 8);
      uint64_t v16 = a4[1];
      long long v17 = *(_OWORD *)a4[2];
      uint64_t v18 = *(unsigned int *)(v16 + 8);
      if (v18 >= *(_DWORD *)(v16 + 12))
      {
        uint64_t v21 = a4[1];
        long long v23 = v17;
        uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v16, v16 + 16, v18 + 1, 16);
        long long v17 = v23;
        uint64_t v16 = v21;
        LODWORD(v18) = *(_DWORD *)(v21 + 8);
      }
      *(_OWORD *)(*(void *)v16 + 16 * v18) = v17;
      ++*(_DWORD *)(v16 + 8);
    }
    if (v26 == 1) {
      uint64_t result = (void *)v25(v24, 3, 0);
    }
    if (v9 != 1)
    {
LABEL_30:
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 16) = 0;
    }
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::createTupleType(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v31 = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<__swift::__runtime::llvm::StringRef const*,__swift::__runtime::llvm::StringRef const*>(&v31, a4, a4 + 16 * a5, (16 * a5) >> 4);
  unsigned int v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  if (a3)
  {
    if (a3 < 0) {
      goto LABEL_31;
    }
    unsigned int v28 = operator new(8 * a3);
    int v30 = (char *)v28 + 8 * a3;
    memcpy(v28, a2, 8 * a3);
    uint64_t v29 = v30;
  }
  std::string __p = 0;
  unsigned __int16 v26 = 0;
  long long v27 = 0;
  int v8 = (char *)v31;
  int v9 = v32;
  int64_t v10 = v32 - (unsigned char *)v31;
  if (v32 == v31) {
    goto LABEL_12;
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
LABEL_31:
  }
    abort();
  uint64_t v12 = (char *)operator new(v10);
  uint64_t v13 = 0;
  std::string __p = v12;
  long long v27 = &v12[24 * v11];
  do
  {
    uint64_t v14 = &v8[v13];
    uint64_t v15 = (std::string *)&v12[v13];
    if (v8[v13 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v16 = *(_OWORD *)v14;
      v15->__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    v13 += 24;
  }
  while (&v8[v13] != v9);
  unsigned __int16 v26 = &v12[v13];
LABEL_12:
  uint64_t v17 = swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&v28, (long long **)&__p);
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = (void **)v26;
    uint64_t v20 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    unsigned __int16 v26 = (char *)v18;
    operator delete(v20);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  uint64_t v21 = (void **)v31;
  if (v31)
  {
    uint64_t v22 = (void **)v32;
    long long v23 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      long long v23 = v31;
    }
    int v32 = (char *)v21;
    operator delete(v23);
  }
  return v17;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#2}>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*((_WORD *)a2 + 8) == 232)
  {
    int v7 = *((unsigned __int8 *)a2 + 18);
    if ((v7 - 1) < 2)
    {
LABEL_6:
      a2 = (uint64_t *)*a2;
      goto LABEL_8;
    }
    if (v7 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      goto LABEL_6;
    }
    a2 = 0;
  }
LABEL_8:
  if (*((_WORD *)a2 + 8) == 229)
  {
    switch(*((unsigned char *)a2 + 18))
    {
      case 2:
        goto LABEL_25;
      case 5:
        if (*((_DWORD *)a2 + 2) <= 1u) {
          goto LABEL_23;
        }
        a2 = (uint64_t *)*a2;
LABEL_25:
        uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v17, a1, a2[1], a3, 1);
        if (v19 != 1) {
          goto LABEL_28;
        }
        uint64_t v15 = v17;
        long long v16 = v18;
        *(void *)(a5 + 8) = v18;
        uint64_t result = (void *)v16(v15, 2, 0);
        *(void *)a5 = result;
        *(unsigned char *)(a5 + 16) = 1;
        if (v19 == 1) {
          uint64_t result = (void *)v18(v17, 3, 0);
        }
        break;
      default:
LABEL_23:
        operator new();
    }
  }
  else
  {
    uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v17, a1, a2, a3, 0);
    int v9 = v19;
    if (v19 == 1)
    {
      uint64_t v10 = v17;
      unint64_t v11 = v18;
      *(void *)(a5 + 8) = v18;
      uint64_t result = (void *)v11(v10, 2, 0);
      *(void *)a5 = result;
      *(unsigned char *)(a5 + 16) = 1;
    }
    else
    {
      uint64_t v12 = v17;
      uint64_t v13 = *(unsigned int *)(a4 + 8);
      if (v13 >= *(_DWORD *)(a4 + 12))
      {
        uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v13 + 1, 8);
        LODWORD(v13) = *(_DWORD *)(a4 + 8);
      }
      if (v9) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v12;
      }
      *(void *)(*(void *)a4 + 8 * v13) = v14;
      ++*(_DWORD *)(a4 + 8);
    }
    if (v19 == 1) {
      uint64_t result = (void *)v18(v17, 3, 0);
    }
    if (v9 != 1)
    {
LABEL_28:
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 16) = 0;
    }
  }
  return result;
}

std::string *std::optional<std::pair<std::string,BOOL>>::optional[abi:nn180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 32))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 24);
    this[1].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

_DWORD *__swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(_DWORD *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 >= result[3])
  {
    uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 4);
    LODWORD(v4) = v3[2];
  }
  *(_DWORD *)(*(void *)v3 + 4 * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (_DWORD *)(*(void *)a1 + 8 * v3);
  uint64_t v6 = *a3;
  *unint64_t v5 = *(void *)a2;
  v5[1] = v6;
  unsigned int v7 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return v4 + 8 * v7 - 8;
}

uint64_t llvm::SmallVectorImpl<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (uint64_t *)(*(void *)a1 + 16 * v3);
  *unint64_t v5 = *a2;
  v5[1] = *a3;
  unsigned int v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t llvm::SmallVectorImpl<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field>::emplace_back<swift::reflection::TypeRef const*,BOOL &>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,BOOL &>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  *(void *)(*(void *)a1 + 8 * v3) = *a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * *a3);
  unsigned int v5 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return v4 + 8 * v5 - 8;
}

void std::vector<unsigned int>::push_back[abi:nn180100](uint64_t a1, _DWORD *a2)
{
  unsigned int v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unsigned int v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    int v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v10];
    *uint64_t v15 = *a2;
    unsigned int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v6 = &v5[-v18];
      uint64_t v15 = (_DWORD *)((char *)v15 - v18);
      unsigned __int16 v19 = &v14[4 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *unsigned __int16 v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v5 = *a2;
    unsigned int v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
}

void *std::vector<llvm::ArrayRef<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const**,unsigned int>(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *(void **)a1;
    uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = *a3;
    unsigned __int16 v19 = &v17[16 * v11];
    *(void *)unsigned __int16 v19 = *a2;
    *((void *)v19 + 1) = v18;
    uint64_t v9 = v19 + 16;
    if (v7 == v10)
    {
      uint64_t v20 = &v17[16 * v11];
    }
    else
    {
      do
      {
        uint64_t v20 = v19 - 16;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 2;
        v19 -= 16;
      }
      while (v7 != v10);
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    uint64_t v8 = *a3;
    void *v7 = *a2;
    v7[1] = v8;
    uint64_t v9 = v7 + 2;
  }
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

char *swift::reflection::TypeRefBuilder::resolveOpaqueType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_WORD *)(a2 + 16) != 301)
  {
    swift::Demangle::__runtime::mangleNode();
    uint64_t v35 = 0;
    if (!v54)
    {
      int v36 = v56;
      size_t v37 = v57;
      v46[0] = 0;
      *(void *)&v46[1] = 0x101010101010101;
      v46[9] = 1;
      *(void *)&v46[10] = 0x101010100000000;
      v46[18] = 1;
      *(_WORD *)&v46[19] = 256;
      char v47 = 1;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      v50[0] = off_C8B30;
      v50[1] = swift::Demangle::__runtime::genericParameterName;
      std::string::size_type v51 = v50;
      swift::Demangle::__runtime::nodeToString((uint64_t *)__p, (uint64_t *)a2, (swift::Demangle::__runtime::Node *)v46, v34);
      if ((v53 & 0x80u) == 0) {
        unint64_t v38 = __p;
      }
      else {
        unint64_t v38 = (void **)__p[0];
      }
      if ((v53 & 0x80u) == 0) {
        uint64_t v39 = v53;
      }
      else {
        uint64_t v39 = (uint64_t)__p[1];
      }
      uint64_t v35 = swift::reflection::OpaqueArchetypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1, v36, v37, (uint64_t)v38, v39, a5, a3, a4);
      if ((char)v53 < 0) {
        operator delete(__p[0]);
      }
      if (v51 == v50)
      {
        (*(void (**)(void *))(v50[0] + 32))(v50);
      }
      else if (v51)
      {
        (*(void (**)(void))(*v51 + 40))();
      }
    }
    return (char *)v35;
  }
  *(void *)int v46 = *(void *)a2;
  LODWORD(v54) = a5;
  uint64_t v10 = *(void *)(a1 + 2008);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v10 + 48))(v10, v46, &v54);
    if (!v11) {
      return 0;
    }
    uint64_t v44 = v11;
    uint64_t v45 = a1;
    memset(v46, 0, 20);
    if (a4)
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = a3 + 16 * v12;
        uint64_t v14 = *(unsigned int *)(v13 + 8);
        if (*(_DWORD *)(v13 + 8)) {
          break;
        }
LABEL_6:
        if (++v12 == a4) {
          goto LABEL_48;
        }
      }
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)v13;
      while (1)
      {
        uint64_t v54 = v12 | (v15 << 32);
        uint64_t v55 = *(void *)(v16 + 8 * v15);
        if (*(_DWORD *)&v46[16])
        {
          unint64_t v17 = (v12 | (unint64_t)(v15 << 32)) >> 32;
          unint64_t v18 = ((0x2500000000 * v12) | (37 * v17))
              + ~((unint64_t)(37 * v17) << 32);
          unint64_t v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          unint64_t v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          unsigned int v21 = (*(_DWORD *)&v46[16] - 1) & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~(v20 << 27)));
          long long v22 = (_DWORD *)(*(void *)v46 + 16 * v21);
          int v23 = *v22;
          int v24 = v22[1];
          if (*v22 == v12 && v24 == v17) {
            goto LABEL_14;
          }
          unsigned int v28 = 0;
          int v29 = 1;
          while (v23 != -1 || v24 != -1)
          {
            if (v28) {
              BOOL v30 = 0;
            }
            else {
              BOOL v30 = v24 == -2;
            }
            if (v30 && v23 == -2) {
              unsigned int v28 = v22;
            }
            unsigned int v32 = v21 + v29++;
            unsigned int v21 = v32 & (*(_DWORD *)&v46[16] - 1);
            long long v22 = (_DWORD *)(*(void *)v46 + 16 * v21);
            int v23 = *v22;
            int v24 = v22[1];
            if (*v22 == v12 && v24 == v17) {
              goto LABEL_14;
            }
          }
          if (v28) {
            unsigned __int16 v26 = v28;
          }
          else {
            unsigned __int16 v26 = v22;
          }
        }
        else
        {
          unsigned __int16 v26 = 0;
        }
        long long v27 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)v46, (uint64_t)&v54, (int *)&v54, v26);
        void *v27 = v54;
        v27[1] = v55;
LABEL_14:
        if (++v15 == v14) {
          goto LABEL_6;
        }
      }
    }
LABEL_48:
    uint64_t v35 = swift::reflection::TypeRef::subst(v44, v45, (uint64_t *)v46);
    __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)v46, (void *)(16 * *(unsigned int *)&v46[16]), (std::align_val_t)8uLL);
    return (char *)v35;
  }
  uint64_t v41 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(v41, v42, v43);
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        operator delete();
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      unint64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
      uint64_t result = v4;
      break;
  }
  return result;
}

void swift_asprintf(char **a1, const char *__format, ...)
{
  va_start(va, __format);
  int v4 = vsnprintf(0, 0, __format, va);
  *a1 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    size_t v5 = (v4 + 1);
    unint64_t v6 = (char *)malloc_type_malloc(v5, 0x887381A9uLL);
    if (v6)
    {
      unsigned int v7 = v6;
      if (vsnprintf(v6, v5, __format, va) < 0) {
        free(v7);
      }
      else {
        *a1 = v7;
      }
    }
  }
}

uint64_t swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  unint64_t v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1288), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
    }
    else {
      std::string v9 = *(std::string *)v2;
    }
    operator new();
  }
  uint64_t v7 = v6[5];
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::TypeRefID::addString(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    int v29 = *(char **)(a1 + 8);
    unint64_t v28 = *(void *)(a1 + 16);
    if ((unint64_t)v29 >= v28)
    {
      uint64_t v54 = *(char **)a1;
      uint64_t v55 = (uint64_t)&v29[-*(void *)a1];
      uint64_t v56 = v55 >> 2;
      unint64_t v57 = (v55 >> 2) + 1;
      if (v57 >> 62) {
LABEL_88:
      }
        abort();
      uint64_t v58 = v28 - (void)v54;
      if (v58 >> 1 > v57) {
        unint64_t v57 = v58 >> 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        if (v59 >> 62) {
LABEL_89:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        unint64_t v60 = operator new(4 * v59);
      }
      else
      {
        unint64_t v60 = 0;
      }
      uint64_t v61 = &v60[4 * v56];
      unint64_t v62 = &v60[4 * v59];
      *uint64_t v61 = 0;
      unint64_t v63 = v61 + 1;
      if (v29 != v54)
      {
        unint64_t v64 = v29 - v54 - 4;
        if (v64 < 0x2C) {
          goto LABEL_92;
        }
        if ((unint64_t)(v29 - v60 - v55) < 0x20) {
          goto LABEL_92;
        }
        uint64_t v65 = (v64 >> 2) + 1;
        uint64_t v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v67 = &v29[-v66];
        uint64_t v61 = (_DWORD *)((char *)v61 - v66);
        unsigned __int8 v68 = &v60[4 * v56 - 16];
        unint64_t v69 = v29 - 16;
        uint64_t v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          _OWORD *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        int v29 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_92:
          do
          {
            int v72 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--uint64_t v61 = v72;
          }
          while (v29 != v54);
        }
      }
      *(void *)a1 = v61;
      *(void *)(a1 + 8) = v63;
      *(void *)(a1 + 16) = v62;
      if (v54) {
        operator delete(v54);
      }
      *(void *)(a1 + 8) = v63;
    }
    else
    {
      *(_DWORD *)int v29 = 0;
      *(void *)(a1 + 8) = v29 + 4;
    }
    return;
  }
  uint64_t v75 = a2;
  if (a3 >= 4)
  {
    uint64_t v30 = 0;
    unint64_t v4 = 0;
    unint64_t v31 = a3 >> 2;
    unsigned int v32 = *(char **)(a1 + 8);
    unint64_t v73 = a3 >> 2;
    while (1)
    {
      int v34 = *(char *)(a2 + v4)
          + (*(char *)(a2 + (v4 | 1)) << 8)
          + (*(char *)(a2 + (v4 | 2)) << 16)
          + (*(unsigned __int8 *)(a2 + (v4 | 3)) << 24);
      unint64_t v35 = *(void *)(a1 + 16);
      if ((unint64_t)v32 >= v35) {
        break;
      }
      *(_DWORD *)unsigned int v32 = v34;
      uint64_t v33 = v32 + 4;
LABEL_39:
      *(void *)(a1 + 8) = v33;
      ++v30;
      v4 += 4;
      unsigned int v32 = v33;
      if (v30 == v31) {
        goto LABEL_4;
      }
    }
    int v36 = *(char **)a1;
    uint64_t v37 = (uint64_t)&v32[-*(void *)a1];
    uint64_t v38 = v37 >> 2;
    unint64_t v39 = (v37 >> 2) + 1;
    if (v39 >> 62) {
      goto LABEL_88;
    }
    uint64_t v40 = v35 - (void)v36;
    if (v40 >> 1 > v39) {
      unint64_t v39 = v40 >> 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      if (v41 >> 62) {
        goto LABEL_89;
      }
      int v42 = operator new(4 * v41);
    }
    else
    {
      int v42 = 0;
    }
    long long v43 = (int *)&v42[4 * v38];
    *long long v43 = v34;
    uint64_t v33 = (char *)(v43 + 1);
    if (v32 != v36)
    {
      unint64_t v44 = v32 - v36 - 4;
      if (v44 >= 0xBC)
      {
        unint64_t v46 = (v32 - 4 - v36) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v42[v37 - 4 - v46] > &v42[v37 - 4])
        {
          uint64_t v45 = v32;
        }
        else if (&v32[-v46 - 4] > v32 - 4)
        {
          uint64_t v45 = v32;
        }
        else if ((unint64_t)(v32 - v42 - v37) >= 0x20)
        {
          uint64_t v47 = (v44 >> 2) + 1;
          uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v45 = &v32[-v48];
          long long v43 = (int *)((char *)v43 - v48);
          uint64_t v49 = &v42[4 * v38 - 16];
          long long v50 = v32 - 16;
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *uint64_t v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v45 = v32;
        }
      }
      else
      {
        uint64_t v45 = v32;
      }
      do
      {
        int v53 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--long long v43 = v53;
      }
      while (v45 != v36);
    }
LABEL_64:
    *(void *)a1 = v43;
    *(void *)(a1 + 8) = v33;
    *(void *)(a1 + 16) = &v42[4 * v41];
    if (v36) {
      operator delete(v36);
    }
    a2 = v75;
    unint64_t v31 = v73;
    goto LABEL_39;
  }
  unint64_t v4 = 0;
LABEL_4:
  unint64_t v5 = a3;
  if (v4 < a3)
  {
    unint64_t v6 = *(char **)(a1 + 8);
    while (1)
    {
      int v8 = *(char *)(a2 + v4);
      unint64_t v9 = *(void *)(a1 + 16);
      if ((unint64_t)v6 >= v9) {
        break;
      }
      *(_DWORD *)unint64_t v6 = v8;
      uint64_t v7 = v6 + 4;
LABEL_7:
      *(void *)(a1 + 8) = v7;
      ++v4;
      unint64_t v6 = v7;
      if (v4 == v5) {
        return;
      }
    }
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v6[-*(void *)a1];
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (v11 >> 2) + 1;
    if (v13 >> 62) {
      goto LABEL_88;
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        goto LABEL_89;
      }
      uint64_t v16 = operator new(4 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[4 * v12];
    *unint64_t v17 = v8;
    uint64_t v7 = (char *)(v17 + 1);
    if (v6 == v10)
    {
      unint64_t v5 = a3;
      goto LABEL_25;
    }
    unint64_t v18 = v6 - v10 - 4;
    if (v18 < 0xBC
      || (unint64_t v21 = (v6 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL, &v16[v11 - 4 - v21] > &v16[v11 - 4])
      || &v6[-v21 - 4] > v6 - 4
      || (unint64_t)(v6 - v16 - v11) < 0x20)
    {
      unint64_t v19 = v6;
      unint64_t v5 = a3;
    }
    else
    {
      uint64_t v22 = (v18 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v19 = &v6[-v23];
      unint64_t v17 = (_DWORD *)((char *)v17 - v23);
      int v24 = &v16[4 * v12 - 16];
      int v25 = v6 - 16;
      uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      unint64_t v5 = a3;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *int v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_25:
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = &v16[4 * v15];
        if (v10) {
          operator delete(v10);
        }
        a2 = v75;
        goto LABEL_7;
      }
    }
    do
    {
      int v20 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *--unint64_t v17 = v20;
    }
    while (v19 != v10);
    goto LABEL_25;
  }
}

void *std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>(void *a1, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    unint64_t v4 = 0;
    int8x8_t v7 = (int8x8_t)a1[1];
    if (!*(void *)&v7) {
      return 0;
    }
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = *a2;
    do
    {
      unsigned int v6 = *(_DWORD *)v5;
      v5 += 4;
      v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + v6;
    }
    while (v5 != v2);
    int8x8_t v7 = (int8x8_t)a1[1];
    if (!*(void *)&v7) {
      return 0;
    }
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v4;
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)*v11;
  if (*v11)
  {
    size_t v13 = v2 - v3;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v4)
      {
        unint64_t v15 = (const void *)v12[2];
        if (v12[3] - (void)v15 == v13 && !memcmp(v15, v3, v13)) {
          return v12;
        }
      }
      else
      {
        if (v9 <= 1)
        {
          v14 &= *(void *)&v7 - 1;
        }
        else if (v14 >= *(void *)&v7)
        {
          v14 %= *(void *)&v7;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

void swift::reflection::ObjCClassTypeRef::~ObjCClassTypeRef(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  operator delete();
}

void swift::reflection::TypeRef::~TypeRef(swift::reflection::TypeRef *this)
{
}

void *std::vector<std::unique_ptr<swift::reflection::TypeRef const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::TypeRef const>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unint64_t v10 = v12;
  size_t v13 = v10 + 8;
  unint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v19 = &v15[-v18];
    v10 -= v18;
    int v20 = &v9[8 * v3 - 16];
    unint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)unint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)int v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    unint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)unint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    unint64_t v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void *std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__emplace_unique_key_args<swift::reflection::TypeRefID,std::pair<swift::reflection::TypeRefID const,swift::reflection::ObjCClassTypeRef const*>>(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  unsigned int v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = *a2;
    do
    {
      unsigned int v10 = *(_DWORD *)v9;
      v9 += 4;
      v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + v10;
    }
    while (v9 != v6);
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_24;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v3 = v8;
    if (v8 >= v11) {
      unint64_t v3 = v8 % v11;
    }
  }
  else
  {
    unint64_t v3 = (v11 - 1) & v8;
  }
  unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
  if (v14)
  {
    unint64_t v15 = *v14;
    if (*v14)
    {
      size_t v16 = v6 - v7;
      do
      {
        unint64_t v17 = v15[1];
        if (v17 == v8)
        {
          uint64_t v18 = (const void *)v15[2];
          if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
            return v15;
          }
        }
        else
        {
          if (v13 <= 1)
          {
            v17 &= v11 - 1;
          }
          else if (v17 >= v11)
          {
            v17 %= v11;
          }
          if (v17 != v3) {
            break;
          }
        }
        unint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
  }
LABEL_24:
  unint64_t v15 = operator new(0x30uLL);
  *unint64_t v15 = 0;
  v15[1] = v8;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = 0;
  int v20 = *(const void **)a3;
  uint64_t v19 = *(void *)(a3 + 8);
  int64_t v21 = v19 - *(void *)a3;
  if (v19 != *(void *)a3)
  {
    if (v21 < 0) {
      abort();
    }
    uint64_t v22 = (char *)operator new(v19 - *(void *)a3);
    v15[2] = v22;
    v15[3] = v22;
    long long v23 = &v22[4 * (v21 >> 2)];
    v15[4] = v23;
    memcpy(v22, v20, v21);
    v15[3] = v23;
  }
  v15[5] = *(void *)(a3 + 24);
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    BOOL v26 = 1;
    if (v11 >= 3) {
      BOOL v26 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v11);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_39;
    }
    if (prime < v11)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v11) {
LABEL_39:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
  }
  uint64_t v33 = *(void *)a1;
  int v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *unint64_t v15 = *v34;
LABEL_63:
    *int v34 = v15;
    goto LABEL_64;
  }
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v33 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v35 = *(void *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    int v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v15;
}

void std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            void *v7 = *v11;
            uint64_t v12 = 8 * v13;
            void *v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v13 = v8;
LABEL_19:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    unsigned int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t swift::TypeLookupError::nop()
{
  return 0;
}

void swift::reflection::TypeRefBuilder::createTypeDecl(swift::Demangle::__runtime::Node *a1@<X1>, std::string *a2@<X8>)
{
  swift::Demangle::__runtime::mangleNode(a1, a1);
  if (v9)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[2].__r_.__value_.__s.__data_[8] = 0;
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_11;
  }
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string __p = v10;
LABEL_6:
    std::string v6 = __p;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_9:
  char v7 = 0;
  char v8 = 0;
  *a2 = v6;
  memset(&v6, 0, sizeof(v6));
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  a2[2].__r_.__value_.__s.__data_[0] = 0;
  a2[2].__r_.__value_.__s.__data_[8] = 1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
LABEL_11:
  }
    operator delete(v10.__r_.__value_.__l.__data_);
}

__n128 std::__optional_storage_base<swift::reflection::TypeRefDecl,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::reflection::TypeRefDecl,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == a2[3].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 56))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
      unint64_t v5 = (void **)(a1 + 24);
      std::string v6 = &a2[1].n128_u64[1];
      if (*(unsigned __int8 *)(a1 + 48) == a2[3].n128_u8[0])
      {
        if (*(unsigned char *)(a1 + 48))
        {
          char v7 = *v5;
          if (*v5)
          {
            *(void *)(a1 + 32) = v7;
            operator delete(v7);
            *unint64_t v5 = 0;
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
          }
          __n128 result = *(__n128 *)((char *)a2 + 24);
          *(__n128 *)(a1 + 24) = result;
          *(void *)(a1 + 40) = a2[2].n128_u64[1];
          *std::string v6 = 0;
          a2[2].n128_u64[0] = 0;
          a2[2].n128_u64[1] = 0;
        }
      }
      else if (*(unsigned char *)(a1 + 48))
      {
        int v9 = *v5;
        if (*v5)
        {
          *(void *)(a1 + 32) = v9;
          operator delete(v9);
        }
        *(unsigned char *)(a1 + 48) = 0;
      }
      else
      {
        *unint64_t v5 = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        __n128 result = *(__n128 *)((char *)a2 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(void *)(a1 + 40) = a2[2].n128_u64[1];
        *std::string v6 = 0;
        a2[2].n128_u64[0] = 0;
        a2[2].n128_u64[1] = 0;
        *(unsigned char *)(a1 + 48) = 1;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      char v8 = *(void **)(a1 + 24);
      if (v8)
      {
        *(void *)(a1 + 32) = v8;
        operator delete(v8);
      }
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    if (a2[3].n128_u8[0])
    {
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      __n128 result = *(__n128 *)((char *)a2 + 24);
      *(__n128 *)(a1 + 24) = result;
      *(void *)(a1 + 40) = a2[2].n128_u64[1];
      a2[1].n128_u64[1] = 0;
      a2[2].n128_u64[0] = 0;
      a2[2].n128_u64[1] = 0;
      *(unsigned char *)(a1 + 48) = 1;
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v12, a3);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    std::string v6 = (const std::string::value_type *)a2;
  }
  else {
    std::string v6 = *(const std::string::value_type **)a2;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v12, (uint64_t)v6, v7);
  char v8 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 848), (char **)&v12);
  if (!v8)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v11 = *(std::string *)a2;
    }
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::NominalTypeRef,std::string,swift::reflection::TypeRef const*>();
  }
  uint64_t v9 = v8[5];
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  return v9;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::NominalTypeRef,std::string,swift::reflection::TypeRef const*>()
{
}

void swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(char **a1, uint64_t a2)
{
  int v5 = a1[1];
  unint64_t v4 = a1[2];
  std::string v6 = v5;
  if (v5 >= v4)
  {
    char v8 = *a1;
    uint64_t v9 = v5 - *a1;
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      goto LABEL_46;
    }
    uint64_t v12 = v4 - v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        goto LABEL_47;
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v10];
    unint64_t v4 = &v14[4 * v13];
    *(_DWORD *)unint64_t v15 = a2;
    unint64_t v7 = v15 + 4;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_50;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_50;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      std::string v6 = &v5[-v18];
      v15 -= v18;
      uint64_t v19 = &v14[4 * v10 - 16];
      int v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v23;
          v15 -= 4;
        }
        while (v6 != v8);
      }
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = v4;
    if (v8)
    {
      operator delete(v8);
      unint64_t v4 = a1[2];
    }
  }
  else
  {
    *(_DWORD *)int v5 = a2;
    unint64_t v7 = v5 + 4;
  }
  a1[1] = v7;
  if (v7 < v4)
  {
    *(_DWORD *)unint64_t v7 = HIDWORD(a2);
    float v24 = v7 + 4;
    goto LABEL_45;
  }
  float v25 = *a1;
  uint64_t v26 = v7 - *a1;
  uint64_t v27 = v26 >> 2;
  unint64_t v28 = (v26 >> 2) + 1;
  if (v28 >> 62) {
LABEL_46:
  }
    abort();
  uint64_t v29 = v4 - v25;
  if (v29 >> 1 > v28) {
    unint64_t v28 = v29 >> 1;
  }
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v30 = v28;
  }
  if (v30)
  {
    if (!(v30 >> 62))
    {
      uint8x8_t v31 = operator new(4 * v30);
      goto LABEL_34;
    }
LABEL_47:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint8x8_t v31 = 0;
LABEL_34:
  uint64_t v32 = &v31[4 * v27];
  *(_DWORD *)uint64_t v32 = HIDWORD(a2);
  float v24 = v32 + 4;
  if (v7 == v25) {
    goto LABEL_43;
  }
  unint64_t v33 = v7 - v25 - 4;
  if (v33 < 0x2C)
  {
    int v34 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - v31 - v26) < 0x20)
  {
    int v34 = v7;
    do
    {
LABEL_42:
      int v41 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v32 - 1) = v41;
      v32 -= 4;
    }
    while (v34 != v25);
    goto LABEL_43;
  }
  uint64_t v35 = (v33 >> 2) + 1;
  uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
  int v34 = &v7[-v36];
  v32 -= v36;
  uint64_t v37 = &v31[4 * v27 - 16];
  uint64_t v38 = v7 - 16;
  uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v40 = *(_OWORD *)v38;
    *(v37 - 1) = *((_OWORD *)v38 - 1);
    _OWORD *v37 = v40;
    v37 -= 2;
    v38 -= 32;
    v39 -= 8;
  }
  while (v39);
  if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_42;
  }
LABEL_43:
  *a1 = v32;
  a1[1] = v24;
  a1[2] = &v31[4 * v30];
  if (v25) {
    operator delete(v25);
  }
LABEL_45:
  a1[1] = v24;
}

void swift::reflection::NominalTypeRef::~NominalTypeRef(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  operator delete();
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        operator delete();
      }
LABEL_7:
      __n128 result = 0;
      break;
    default:
      unint64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
      __n128 result = v4;
      break;
  }
  return result;
}

uint64_t swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(&v20, a4);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    char v8 = (const std::string::value_type *)a2;
  }
  else {
    char v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v20, (uint64_t)v8, v9);
  uint64_t v10 = *a3;
  unint64_t v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      uint64_t v12 = *v10++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(&v20, v12);
    }
    while (v10 != v11);
  }
  unint64_t v13 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 888), &v20);
  if (!v13)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v19 = *(std::string *)a2;
    }
    unint64_t v15 = *a3;
    size_t v16 = (char *)a3[1] - (char *)*a3;
    if (v16)
    {
      if ((v16 & 0x8000000000000000) != 0) {
        abort();
      }
      uint64_t v17 = operator new(v16);
      memcpy(v17, v15, v16);
    }
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::BoundGenericTypeRef,std::string,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*>();
  }
  uint64_t v14 = v13[5];
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  return v14;
}

uint64_t swift::reflection::TypeRefBuilder::createBoundGenericType(uint64_t a1, uint64_t a2, size_t __sz)
{
  if (!*(unsigned char *)(a2 + 56)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    long long v43 = 0;
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    int v7 = *(unsigned char **)(a2 + 24);
    std::string v6 = *(unsigned char **)(a2 + 32);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_6;
    }
    if ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v9 = (uint64_t *)operator new(v6 - v7);
      uint64_t v10 = (char *)&v9[v8 >> 3];
      long long v43 = v9;
      uint64_t v45 = v10;
      memcpy(v9, v7, v8);
      unint64_t v44 = (uint64_t *)v10;
LABEL_6:
      char v46 = 1;
      char v11 = *(unsigned char *)(a2 + 23);
      if (v11 >= 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = *(void *)a2;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      uint64_t v39 = 0;
      unint64_t v15 = swift::Demangle::__runtime::Demangler::demangleType(a1, v12, v13, v38);
      if (v39 == v38)
      {
        (*(void (**)(void *))(v38[0] + 32))(v38);
        if (!v15) {
          goto LABEL_33;
        }
      }
      else
      {
        if (v39) {
          (*(void (**)(void))(*v39 + 40))();
        }
        if (!v15) {
          goto LABEL_33;
        }
      }
      int v20 = *(unsigned __int8 *)(v15 + 18);
      if (((v20 - 1) < 2 || v20 == 5 && *(_DWORD *)(v15 + 8)) && *(_WORD *)(v15 + 16) == 232)
      {
        if ((v20 - 1) >= 2)
        {
          if (v20 != 5 || !*(_DWORD *)(v15 + 8))
          {
            uint64_t v21 = 0;
            goto LABEL_39;
          }
          unint64_t v15 = *(void *)v15;
        }
        uint64_t v21 = *(swift::Demangle::__runtime **)v15;
LABEL_39:
        swift::Demangle::__runtime::mangleNode(v21, v14);
        if (v35)
        {
          uint64_t v16 = 0;
          goto LABEL_59;
        }
        std::vector<swift::reflection::TypeRef const*>::vector(&v33, (uint64_t)&v43);
        int v23 = v33;
        if ((unint64_t)(v34 - v33) > 0x1F40) {
          goto LABEL_56;
        }
        unint64_t v24 = *(void *)(__sz + 8);
        if (v24 > 0x3E8) {
          goto LABEL_56;
        }
        if (v34 != v33)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          unint64_t v27 = (v34 - v33) >> 3;
          if (v27 <= 1) {
            unint64_t v27 = 1;
          }
          while (1)
          {
            unint64_t v28 = *(void *)&v33[8 * v25];
            if (v28 > v24) {
              break;
            }
            v26 += v28;
            if (v27 == ++v25) {
              goto LABEL_50;
            }
          }
          uint64_t v16 = 0;
LABEL_58:
          int v34 = v23;
          operator delete(v23);
LABEL_59:
          if (v37 < 0)
          {
            operator delete(v36);
            if (!v46) {
              return v16;
            }
          }
          else if (!v46)
          {
            return v16;
          }
LABEL_34:
          std::string v19 = v43;
          if (v43)
          {
            unint64_t v44 = v43;
            goto LABEL_36;
          }
          return v16;
        }
        uint64_t v26 = 0;
LABEL_50:
        if (v26 == v24)
        {
          uint64_t v29 = swift::reflection::TypeRefBuilder::reconstructParentsOfBoundGenericType(a1, v21, &v33, (const void **)__sz);
          unint64_t v30 = (unsigned char *)(*(void *)__sz + 8 * *(void *)(__sz + 8));
          std::vector<swift::reflection::TypeRef const*>::vector<swift::reflection::TypeRef const* const*,0>(v32, &v30[-8 * *((void *)v34 - 1)], v30);
          std::vector<swift::reflection::TypeRef const*>::vector(__p, (uint64_t)v32);
          uint64_t v16 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&v36, (uint64_t **)__p, v29);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v32[0])
          {
            v32[1] = v32[0];
            operator delete(v32[0]);
          }
          int v23 = v33;
        }
        else
        {
LABEL_56:
          uint64_t v16 = 0;
        }
        if (!v23) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
LABEL_33:
      uint64_t v16 = 0;
      goto LABEL_34;
    }
LABEL_65:
    abort();
  }
  uint64_t v17 = *(const void **)__sz;
  uint64_t v18 = *(void *)(__sz + 8);
  int v41 = 0;
  int v42 = 0;
  long long v40 = 0;
  if (v18)
  {
    if (v18 < 0) {
      goto LABEL_65;
    }
    long long v40 = (uint64_t *)operator new(8 * v18);
    int v42 = &v40[v18];
    memcpy(v40, v17, 8 * v18);
    int v41 = v42;
  }
  uint64_t v16 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2, &v40, 0);
  std::string v19 = v40;
  if (v40)
  {
    int v41 = v40;
LABEL_36:
    operator delete(v19);
  }
  return v16;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::BoundGenericTypeRef,std::string,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*>()
{
}

void *std::vector<swift::reflection::TypeRef const*>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      abort();
    }
    std::string v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    int v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void swift::reflection::BoundGenericTypeRef::~BoundGenericTypeRef(swift::reflection::BoundGenericTypeRef *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }

  operator delete();
}

void *std::vector<swift::reflection::TypeRef const*>::vector<swift::reflection::TypeRef const* const*,0>(void *a1, unsigned char *a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0) {
      abort();
    }
    std::string v6 = (char *)operator new(a3 - a2);
    *a1 = v6;
    a1[1] = v6;
    int v7 = &v6[8 * (v4 >> 3)];
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::reconstructParentsOfBoundGenericType(uint64_t a1, swift::Demangle::__runtime::Node *a2, void *a3, const void **a4)
{
  if (a3[1] - *a3 == 8) {
    return 0;
  }
  std::string v6 = a2;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  do
  {
    if (!v6) {
      goto LABEL_67;
    }
    int v12 = *((unsigned __int8 *)v6 + 18);
    if ((v12 - 1) >= 2)
    {
      if (v12 != 5 || !*((_DWORD *)v6 + 2)) {
        goto LABEL_67;
      }
      std::string v6 = *(swift::Demangle::__runtime::Node **)v6;
    }
    std::string v6 = *(swift::Demangle::__runtime::Node **)v6;
    int v13 = *((unsigned __int16 *)v6 + 8);
    if (v13 == 24 || v13 == 219 || v13 == 61)
    {
      if (v11 < v10)
      {
        *(void *)char v11 = v6;
        v11 += 8;
        goto LABEL_5;
      }
      unint64_t v14 = v8 + 1;
      if ((v8 + 1) >> 61) {
LABEL_70:
      }
        abort();
      if ((v10 - v9) >> 2 > v14) {
        unint64_t v14 = (v10 - v9) >> 2;
      }
      if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v16 = operator new(8 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (swift::Demangle::__runtime::Node **)&v16[8 * v8];
      *uint64_t v17 = v6;
      uint64_t v18 = (char *)(v17 + 1);
      if (v11 == v9) {
        goto LABEL_39;
      }
      unint64_t v19 = v11 - v9 - 8;
      if (v19 >= 0x168)
      {
        unint64_t v21 = (v11 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
        if (&v16[8 * v8 - 8 - v21] > &v16[8 * v8 - 8])
        {
          int v20 = v11;
        }
        else if (&v11[-v21 - 8] > v11 - 8)
        {
          int v20 = v11;
        }
        else if ((unint64_t)(v11 - &v16[8 * v8]) >= 0x20)
        {
          uint64_t v22 = (v19 >> 3) + 1;
          uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          int v20 = &v11[-v23];
          uint64_t v17 = (swift::Demangle::__runtime::Node **)((char *)v17 - v23);
          unint64_t v24 = &v16[8 * v8 - 16];
          uint64_t v25 = v11 - 16;
          uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *unint64_t v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_38;
          }
        }
        else
        {
          int v20 = v11;
        }
      }
      else
      {
        int v20 = v11;
      }
      do
      {
        unint64_t v28 = (swift::Demangle::__runtime::Node *)*((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v17 = v28;
      }
      while (v20 != v9);
LABEL_38:
      char v11 = v9;
LABEL_39:
      unint64_t v9 = (char *)v17;
      uint64_t v10 = &v16[8 * v15];
      if (v11) {
        operator delete(v11);
      }
      char v11 = v18;
    }
LABEL_5:
    unint64_t v8 = (v11 - v9) >> 3;
  }
  while (v8 < ((uint64_t)(a3[1] - *a3) >> 3) - 1);
  uint64_t v29 = v11 - 8;
  if (v9 != v11 && v29 > v9)
  {
    uint8x8_t v31 = v9 + 8;
    do
    {
      uint64_t v32 = *((void *)v31 - 1);
      *((void *)v31 - 1) = *(void *)v29;
      *(void *)uint64_t v29 = v32;
      v29 -= 8;
      BOOL v33 = v31 >= v29;
      v31 += 8;
    }
    while (!v33);
  }
  if (v11 != v9)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = (char *)*a4;
    uint64_t v43 = a1;
    while (1)
    {
      swift::Demangle::__runtime::mangleNode(*(swift::Demangle::__runtime **)&v9[8 * v34], a2);
      if (v47)
      {
        int v37 = 1;
        if (v49 < 0) {
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v38 = *(void *)(*a3 + 8 * v34);
        if (!v38)
        {
          int v37 = 7;
          if ((v49 & 0x80000000) == 0) {
            goto LABEL_62;
          }
LABEL_61:
          operator delete(v48);
          goto LABEL_62;
        }
        if (v38 < 0) {
          goto LABEL_70;
        }
        uint64_t v39 = operator new(8 * v38);
        memcpy(v39, v36, 8 * v38);
        long long v40 = (char *)operator new(8 * v38);
        int v41 = &v40[8 * v38];
        std::string __p = v40;
        char v46 = v41;
        memcpy(v40, v39, 8 * v38);
        uint64_t v45 = v41;
        uint64_t v35 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(v43, (uint64_t)&v48, (uint64_t **)&__p, v35);
        if (__p)
        {
          uint64_t v45 = __p;
          operator delete(__p);
        }
        v36 += 8 * v38;
        operator delete(v39);
        int v37 = 0;
        if (v49 < 0) {
          goto LABEL_61;
        }
      }
LABEL_62:
      if (v37 != 7 && v37)
      {
        uint64_t v35 = 0;
        goto LABEL_68;
      }
      if (v8 == ++v34) {
        goto LABEL_68;
      }
    }
  }
LABEL_67:
  uint64_t v35 = 0;
  uint64_t result = 0;
  if (v9)
  {
LABEL_68:
    operator delete(v9);
    return v35;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        operator delete();
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      int64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
      uint64_t result = v4;
      break;
  }
  return result;
}

uint64_t swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  std::string v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 808), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
    }
    else {
      std::string v9 = *(std::string *)v2;
    }
    operator new();
  }
  uint64_t v7 = v6[5];
  if (v10)
  {
    char v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::BuiltinTypeRef::~BuiltinTypeRef(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  operator delete();
}

uint64_t swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v8 = 0;
  std::string v9 = 0;
  uint64_t v10 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v8, a2);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v8, a3);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1088), (char **)&v8);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = v5[5];
  if (v8)
  {
    std::string v9 = v8;
    operator delete(v8);
  }
  return v6;
}

void swift::reflection::TypeRefID::addInteger(swift::reflection::TypeRefID *this, int a2)
{
  unint64_t v5 = (char *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(char **)this;
    uint64_t v9 = (uint64_t)&v5[-*(void *)this];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v14 = operator new(4 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    *unint64_t v15 = a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v17 = v5 - v8 - 4;
      if (v17 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v19];
      unint64_t v15 = (_DWORD *)((char *)v15 - v19);
      int v20 = &v14[4 * v10 - 16];
      unint64_t v21 = v5 - 16;
      uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *int v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--unint64_t v15 = v24;
        }
        while (v6 != v8);
      }
    }
    *(void *)this = v15;
    *((void *)this + 1) = v7;
    *((void *)this + 2) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v5 = a2;
    uint64_t v7 = v5 + 4;
  }
  *((void *)this + 1) = v7;
}

void swift::reflection::MetatypeTypeRef::~MetatypeTypeRef(swift::reflection::MetatypeTypeRef *this)
{
}

uint64_t swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1128), (char **)&v6);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = v3[5];
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::ExistentialMetatypeTypeRef::~ExistentialMetatypeTypeRef(swift::reflection::ExistentialMetatypeTypeRef *this)
{
}

void __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  uint64_t v3 = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v14);
  uint64_t v4 = v3;
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = v3 + 32;
    uint64_t v8 = 40 * v6;
    do
    {
      *(v7 - 32) = 0;
      unsigned char *v7 = 0;
      if (*((unsigned char *)v5 + 32))
      {
        long long v9 = *(_OWORD *)v5;
        *((void *)v7 - 2) = v5[2];
        *((_OWORD *)v7 - 2) = v9;
        v5[1] = 0;
        void v5[2] = 0;
        *unint64_t v5 = 0;
        *(v7 - 8) = *((unsigned char *)v5 + 24);
        unsigned char *v7 = 1;
      }
      v5 += 5;
      v7 += 40;
      v8 -= 40;
    }
    while (v8);
    unint64_t v5 = *(void **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = 5 * v10;
      do
      {
        uint64_t v12 = (void **)&v5[v11];
        if (LOBYTE(v5[v11 - 1]) && *((char *)v12 - 17) < 0) {
          operator delete(*(v12 - 5));
        }
        v11 -= 5;
      }
      while (v11 * 8);
      unint64_t v5 = *(void **)a1;
    }
  }
  int v13 = v14;
  if (v5 != (void *)(a1 + 16)) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      std::string v5 = *(std::string *)a2;
      if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_7:
        std::string v6 = v5;
        goto LABEL_10;
      }
    }
    std::string::__init_copy_ctor_external(&v6, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
LABEL_10:
    LOBYTE(__p) = 0;
    char v9 = 0;
    std::string v10 = v6;
    memset(&v6, 0, sizeof(v6));
    LOBYTE(v11) = 0;
    char v13 = 0;
    char v14 = 1;
    uint64_t v4 = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&v10, 0);
    if (v14)
    {
      if (v13 && v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
    if (v9 && __p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v6.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v4;
      }
    }
    else if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v4;
    }
    operator delete(v5.__r_.__value_.__l.__data_);
    return v4;
  }

  return swift::reflection::ObjCProtocolTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2);
}

uint64_t swift::reflection::ProtocolCompositionTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v9 = *(const void **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  int64_t v10 = v8 - *(void *)a2;
  if (v8 == *(void *)a2)
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if (v10 < 0) {
      goto LABEL_19;
    }
    uint64_t v11 = (uint64_t *)operator new(v8 - *(void *)a2);
    uint64_t v12 = &v11[v10 >> 3];
    memcpy(v11, v9, v10);
  }
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v21, a4);
  if (v11 != v12)
  {
    char v13 = v11;
    do
    {
      uint64_t v14 = *v13++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, v14);
    }
    while (v13 != v12);
  }
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, a3);
  if (v11) {
    operator delete(v11);
  }
  unint64_t v15 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1008), (char **)&v21);
  if (!v15)
  {
    unint64_t v17 = *(const void **)a2;
    size_t v18 = *(void *)(a2 + 8) - *(void *)a2;
    if (!v18) {
      goto LABEL_15;
    }
    if ((v18 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = operator new(v18);
      memcpy(v19, v17, v18);
LABEL_15:
      swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ProtocolCompositionTypeRef,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*,BOOL>();
    }
LABEL_19:
    abort();
  }
  uint64_t v16 = v15[5];
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  return v16;
}

uint64_t swift::reflection::ObjCProtocolTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  std::string v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1328), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
    }
    else {
      std::string v9 = *(std::string *)v2;
    }
    operator new();
  }
  uint64_t v7 = v6[5];
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::ObjCProtocolTypeRef::~ObjCProtocolTypeRef(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  operator delete();
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ProtocolCompositionTypeRef,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*,BOOL>()
{
}

void swift::reflection::ProtocolCompositionTypeRef::~ProtocolCompositionTypeRef(swift::reflection::ProtocolCompositionTypeRef *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  int64_t v8 = v6 - *(void *)a3;
  if (v6 == *(void *)a3)
  {
    int64_t v10 = 0;
    std::string v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      goto LABEL_22;
    }
    std::string v9 = (char *)operator new(v6 - *(void *)a3);
    int64_t v10 = &v9[16 * (v8 >> 4)];
    memcpy(v9, v7, v8);
  }
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, a2);
  if (v9 != v10)
  {
    uint64_t v11 = v9;
    do
    {
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *((void *)v11 + 1);
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, *(void *)v11 & 0xFFFFFFFFFFFFFFF8);
      int v14 = v12 & 7;
      if (v14 == 3) {
        swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v21, 0);
      }
      else {
        swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, v13);
      }
      swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v21, v14);
      v11 += 16;
    }
    while (v11 != v10);
  }
  if (v9) {
    operator delete(v9);
  }
  unint64_t v15 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1048), (char **)&v21);
  if (!v15)
  {
    unint64_t v17 = *(const void **)a3;
    size_t v18 = *(void *)(a3 + 8) - *(void *)a3;
    if (!v18) {
      goto LABEL_18;
    }
    if ((v18 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = operator new(v18);
      memcpy(v19, v17, v18);
LABEL_18:
      swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ConstrainedExistentialTypeRef,swift::reflection::ProtocolCompositionTypeRef const*,std::vector<swift::reflection::TypeRefRequirement>>();
    }
LABEL_22:
    abort();
  }
  uint64_t v16 = v15[5];
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  return v16;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ConstrainedExistentialTypeRef,swift::reflection::ProtocolCompositionTypeRef const*,std::vector<swift::reflection::TypeRefRequirement>>()
{
}

void swift::reflection::ConstrainedExistentialTypeRef::~ConstrainedExistentialTypeRef(swift::reflection::ConstrainedExistentialTypeRef *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, int a2, int a3)
{
  int64_t v8 = 0;
  std::string v9 = 0;
  uint64_t v10 = 0;
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v8, a2);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v8, a3);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1168), (char **)&v8);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = v5[5];
  if (v8)
  {
    std::string v9 = v8;
    operator delete(v8);
  }
  return v6;
}

void swift::reflection::GenericTypeParameterTypeRef::~GenericTypeParameterTypeRef(swift::reflection::GenericTypeParameterTypeRef *this)
{
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        operator delete();
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      unint64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
      uint64_t result = v4;
      break;
  }
  return result;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()@<X0>(void *result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = (long long **)(a2 + 2);
  if (*((_WORD *)a2 + 8) == 224)
  {
    unint64_t v5 = result;
    long long v13 = 0uLL;
    int v14 = 0;
    int v6 = *((unsigned __int8 *)a2 + 18);
    uint64_t v7 = a2;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        int64_t v8 = (long long **)*a2;
        uint64_t v7 = (uint64_t *)*a2;
        goto LABEL_10;
      }
      uint64_t v7 = 0;
    }
    switch(v6)
    {
      case 1:
        unint64_t v4 = (long long **)(a2 + 1);
        if (v7 != a2 + 1) {
          goto LABEL_18;
        }
        goto LABEL_30;
      case 2:
        goto LABEL_18;
      case 5:
        int64_t v8 = (long long **)*a2;
LABEL_10:
        unint64_t v4 = &v8[*((unsigned int *)a2 + 2)];
        if (v7 != (uint64_t *)v4) {
          goto LABEL_18;
        }
        goto LABEL_30;
    }
    unint64_t v4 = 0;
    if (v7)
    {
      while (1)
      {
LABEL_18:
        std::string v9 = (long long *)*v7;
        int v10 = *(unsigned __int16 *)(*v7 + 16);
        if (v10 == 276)
        {
          v14 |= 0x80u;
          *(unsigned char *)*unint64_t v5 = 1;
          goto LABEL_17;
        }
        if (v10 != 232)
        {
          if (v10 != 225) {
            operator new();
          }
          long long v13 = *v9;
          goto LABEL_17;
        }
        int v11 = *((unsigned __int8 *)v9 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_26;
        }
        if (v11 == 5 && *((_DWORD *)v9 + 2)) {
          break;
        }
        uint64_t v12 = 0;
LABEL_28:
        uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator()(v5[1], v12, (unint64_t)&v13, (uint64_t)a3);
        if (a3[16]) {
          return result;
        }
LABEL_17:
        if (++v7 == (uint64_t *)v4) {
          goto LABEL_30;
        }
      }
      std::string v9 = *(long long **)v9;
LABEL_26:
      uint64_t v12 = *(void *)v9;
      goto LABEL_28;
    }
  }
LABEL_30:
  *a3 = 0;
  a3[16] = 0;
  return result;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  while (1)
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 16);
    if (v6 <= 0xCF) {
      break;
    }
    switch(v6)
    {
      case 0xD0u:
        unsigned int v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 2;
        break;
      case 0xD1u:
        unsigned int v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 3;
        break;
      case 0x146u:
        unsigned int v7 = *(_DWORD *)(a3 + 24) | 0x200;
        break;
      default:
        return swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>(v5, (uint64_t *)a2, (**(_DWORD **)(a1 + 8) + 1), a3, *(void *)(a1 + 16), a4);
    }
LABEL_20:
    *(_DWORD *)(a3 + 24) = v7;
    int v8 = *(unsigned __int8 *)(a2 + 18);
    if ((v8 - 1) < 2) {
      goto LABEL_4;
    }
    if (v8 == 5 && *(_DWORD *)(a2 + 8))
    {
      a2 = *(void *)a2;
LABEL_4:
      a2 = *(void *)a2;
      goto LABEL_5;
    }
    a2 = 0;
LABEL_5:
    **(unsigned char **)a1 = 1;
  }
  if (*(unsigned __int16 *)(a2 + 16) > 0x7Eu)
  {
    if (v6 == 127)
    {
      unsigned int v7 = *(_DWORD *)(a3 + 24) | 0x400;
    }
    else
    {
      if (v6 != 128) {
        return swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>(v5, (uint64_t *)a2, (**(_DWORD **)(a1 + 8) + 1), a3, *(void *)(a1 + 16), a4);
      }
      unsigned int v7 = *(_DWORD *)(a3 + 24) | 0x800;
    }
    goto LABEL_20;
  }
  if (v6 == 123)
  {
    unsigned int v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 1;
    goto LABEL_20;
  }
  if (v6 == 11 || v6 == 64)
  {
    *(_DWORD *)(a3 + 24) |= 0x100u;
    **(unsigned char **)a1 = 1;
  }
  return swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>(v5, (uint64_t *)a2, (**(_DWORD **)(a1 + 8) + 1), a3, *(void *)(a1 + 16), a4);
}

char *_ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_(const char **a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        operator delete();
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      unint64_t v4 = 0;
      swift_asprintf(&v4, *a1, a3);
      uint64_t result = v4;
      break;
  }
  return result;
}

void *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*((_WORD *)a2 + 8) == 232)
  {
    int v9 = *((unsigned __int8 *)a2 + 18);
    if ((v9 - 1) < 2)
    {
LABEL_6:
      a2 = (uint64_t *)*a2;
      goto LABEL_8;
    }
    if (v9 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      goto LABEL_6;
    }
    a2 = 0;
  }
LABEL_8:
  if (*((_WORD *)a2 + 8) == 229)
  {
    switch(*((unsigned char *)a2 + 18))
    {
      case 2:
        goto LABEL_23;
      case 5:
        if (*((_DWORD *)a2 + 2) <= 1u) {
          goto LABEL_21;
        }
        a2 = (uint64_t *)*a2;
LABEL_23:
        uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v23, a1, a2[1], a3, 1);
        if (v25 != 1) {
          goto LABEL_26;
        }
        uint64_t v19 = v23;
        int v20 = v24;
        *(void *)(a6 + 8) = v24;
        uint64_t result = (void *)v20(v19, 2, 0);
        *(void *)a6 = result;
        *(unsigned char *)(a6 + 16) = 1;
        if (v25 == 1) {
          uint64_t result = (void *)v24(v23, 3, 0);
        }
        break;
      default:
LABEL_21:
        operator new();
    }
  }
  else
  {
    uint64_t result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v23, a1, a2, a3, 0);
    int v11 = v25;
    if (v25 == 1)
    {
      uint64_t v12 = v23;
      long long v13 = v24;
      *(void *)(a6 + 8) = v24;
      uint64_t result = (void *)v13(v12, 2, 0);
      *(void *)a6 = result;
      *(unsigned char *)(a6 + 16) = 1;
    }
    else
    {
      uint64_t v14 = v23;
      if (v25) {
        uint64_t v14 = 0;
      }
      *(void *)(a4 + 16) = v14;
      uint64_t v15 = *(unsigned int *)(a5 + 8);
      unint64_t v16 = *(void *)a5;
      if (v15 >= *(_DWORD *)(a5 + 12))
      {
        unint64_t v21 = v15 + 1;
        if (v16 <= a4 && v16 + 32 * v15 > a4)
        {
          unint64_t v22 = a4 - v16;
          uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21, 32);
          unint64_t v16 = *(void *)a5;
          a4 = *(void *)a5 + v22;
        }
        else
        {
          uint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21, 32);
          unint64_t v16 = *(void *)a5;
        }
      }
      unint64_t v17 = (_OWORD *)(v16 + 32 * *(unsigned int *)(a5 + 8));
      long long v18 = *(_OWORD *)(a4 + 16);
      *unint64_t v17 = *(_OWORD *)a4;
      v17[1] = v18;
      ++*(_DWORD *)(a5 + 8);
    }
    if (v25 == 1) {
      uint64_t result = (void *)v24(v23, 3, 0);
    }
    if (v11 != 1)
    {
LABEL_26:
      *(unsigned char *)a6 = 0;
      *(unsigned char *)(a6 + 16) = 0;
    }
  }
  return result;
}

uint64_t swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, unsigned int a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  swift::reflection::FunctionTypeRef::Profile(a2, a3, a4, a5, a6, a7, a8, (uint64_t)v16);
  int v10 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 968), (char **)v16);
  if (!v10)
  {
    uint64_t v12 = (const void *)*a2;
    size_t v13 = a2[1] - *a2;
    if (v13)
    {
      if ((v13 & 0x8000000000000000) != 0) {
        abort();
      }
      uint64_t v14 = operator new(v13);
      memcpy(v14, v12, v13 - 4);
    }
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::FunctionTypeRef,std::vector<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,swift::TargetFunctionTypeFlags<unsigned long>,swift::TargetExtendedFunctionTypeFlags<unsigned int>,swift::TargetFunctionMetadataDifferentiabilityKind<unsigned long>,swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>();
  }
  uint64_t v11 = v10[5];
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  return v11;
}

void swift::reflection::FunctionTypeRef::Profile(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    while (1)
    {
      uint64_t v12 = *(const void **)v10;
      if (*(void *)v10) {
        break;
      }
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      unint64_t v17 = 0;
      long long __dst = 0;
      size_t v28 = 0;
      unint64_t v29 = 0;
LABEL_15:
      if ((v17 & 0x80u) == 0) {
        p_dst = (void **)&__dst;
      }
      else {
        p_dst = v16;
      }
      if ((v17 & 0x80u) == 0) {
        unint64_t v21 = v17;
      }
      else {
        unint64_t v21 = v15;
      }
      swift::reflection::TypeRefID::addString(a8, (uint64_t)p_dst, v21);
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst);
      }
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, *(void *)(v10 + 16));
      swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, *(_DWORD *)(v10 + 24));
      v10 += 32;
      if (v10 == v11) {
        goto LABEL_23;
      }
    }
    size_t v13 = *(void *)(v10 + 8);
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v13 >= 0x17)
    {
      uint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v18 = v13 | 7;
      }
      uint64_t v19 = v18 + 1;
      uint64_t v14 = (void **)operator new(v18 + 1);
      size_t v28 = v13;
      unint64_t v29 = v19 | 0x8000000000000000;
      long long __dst = v14;
    }
    else
    {
      HIBYTE(v29) = *(void *)(v10 + 8);
      uint64_t v14 = (void **)&__dst;
      if (!v13) {
        goto LABEL_14;
      }
    }
    memmove(v14, v12, v13);
LABEL_14:
    *((unsigned char *)v14 + v13) = 0;
    unint64_t v17 = HIBYTE(v29);
    unint64_t v16 = __dst;
    unint64_t v15 = v28;
    goto LABEL_15;
  }
LABEL_23:
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, a2);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, a3);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, a4);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, a5);
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, a6);
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, a7);
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::FunctionTypeRef,std::vector<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,swift::TargetFunctionTypeFlags<unsigned long>,swift::TargetExtendedFunctionTypeFlags<unsigned int>,swift::TargetFunctionMetadataDifferentiabilityKind<unsigned long>,swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>()
{
}

void swift::reflection::TypeRefID::addInteger(swift::reflection::TypeRefID *this, unint64_t a2)
{
  uint64_t v5 = (char *)*((void *)this + 1);
  unint64_t v4 = (char *)*((void *)this + 2);
  unsigned int v6 = v5;
  if (v5 >= v4)
  {
    int v8 = *(char **)this;
    uint64_t v9 = (uint64_t)&v5[-*(void *)this];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      goto LABEL_46;
    }
    uint64_t v12 = v4 - v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        goto LABEL_47;
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v10];
    unint64_t v4 = &v14[4 * v13];
    *unint64_t v15 = a2;
    unsigned int v7 = (char *)(v15 + 1);
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_50;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_50;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v6 = &v5[-v18];
      unint64_t v15 = (_DWORD *)((char *)v15 - v18);
      uint64_t v19 = &v14[4 * v10 - 16];
      int v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)this = v15;
    *((void *)this + 1) = v7;
    *((void *)this + 2) = v4;
    if (v8)
    {
      operator delete(v8);
      unint64_t v4 = (char *)*((void *)this + 2);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = a2;
    unsigned int v7 = v5 + 4;
  }
  *((void *)this + 1) = v7;
  unint64_t v24 = HIDWORD(a2);
  if (v7 < v4)
  {
    *(_DWORD *)unsigned int v7 = HIDWORD(a2);
    unsigned __int16 v25 = v7 + 4;
    goto LABEL_45;
  }
  uint64_t v26 = *(char **)this;
  uint64_t v27 = (uint64_t)&v7[-*(void *)this];
  uint64_t v28 = v27 >> 2;
  unint64_t v29 = (v27 >> 2) + 1;
  if (v29 >> 62) {
LABEL_46:
  }
    abort();
  uint64_t v30 = v4 - v26;
  if (v30 >> 1 > v29) {
    unint64_t v29 = v30 >> 1;
  }
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v29;
  }
  if (v31)
  {
    if (!(v31 >> 62))
    {
      uint64_t v32 = operator new(4 * v31);
      goto LABEL_34;
    }
LABEL_47:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v32 = 0;
LABEL_34:
  BOOL v33 = &v32[4 * v28];
  uint64_t v34 = &v32[4 * v31];
  _DWORD *v33 = v24;
  unsigned __int16 v25 = v33 + 1;
  if (v7 == v26) {
    goto LABEL_43;
  }
  unint64_t v35 = v7 - v26 - 4;
  if (v35 < 0x2C)
  {
    uint64_t v36 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - v32 - v27) < 0x20)
  {
    uint64_t v36 = v7;
    do
    {
LABEL_42:
      int v43 = *((_DWORD *)v36 - 1);
      v36 -= 4;
      *--BOOL v33 = v43;
    }
    while (v36 != v26);
    goto LABEL_43;
  }
  uint64_t v37 = (v35 >> 2) + 1;
  uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v36 = &v7[-v38];
  BOOL v33 = (_DWORD *)((char *)v33 - v38);
  uint64_t v39 = &v32[4 * v28 - 16];
  long long v40 = v7 - 16;
  uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v42 = *(_OWORD *)v40;
    *(v39 - 1) = *((_OWORD *)v40 - 1);
    *uint64_t v39 = v42;
    v39 -= 2;
    v40 -= 32;
    v41 -= 8;
  }
  while (v41);
  if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_42;
  }
LABEL_43:
  *(void *)this = v33;
  *((void *)this + 1) = v25;
  *((void *)this + 2) = v34;
  if (v26) {
    operator delete(v26);
  }
LABEL_45:
  *((void *)this + 1) = v25;
}

void swift::reflection::FunctionTypeRef::~FunctionTypeRef(swift::reflection::FunctionTypeRef *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getConventionFromString(char *__s1, size_t __n)
{
  switch(__n)
  {
    case 3uLL:
      if (*(_WORD *)__s1 != 26944 || __s1[2] != 110) {
        goto LABEL_26;
      }
      uint64_t v5 = 0;
      uint64_t v6 = 0x100000000;
      break;
    case 6uLL:
      if (!memcmp(__s1, "@inout", __n))
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 3;
      }
      else
      {
        if (memcmp(__s1, "@owned", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 5;
      }
      break;
    case 8uLL:
      if (memcmp(__s1, "@unowned", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000;
      uint64_t v5 = 6;
      break;
    case 0xBuLL:
      if (!memcmp(__s1, "@guaranteed", __n))
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 7;
      }
      else if (*(void *)__s1 == 0x776F5F6B63617040 && *(void *)(__s1 + 3) == 0x64656E776F5F6B63)
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 8;
      }
      else
      {
        if (memcmp(__s1, "@pack_inout", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 10;
      }
      break;
    case 0xCuLL:
      if (memcmp(__s1, "@in_constant", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000;
      uint64_t v5 = 1;
      break;
    case 0xEuLL:
      if (memcmp(__s1, "@in_guaranteed", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000;
      uint64_t v5 = 2;
      break;
    case 0x10uLL:
      if (!memcmp(__s1, "@inout_aliasable", __n))
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 4;
      }
      else
      {
        if (memcmp(__s1, "@pack_guaranteed", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 9;
      }
      break;
    default:
LABEL_26:
      uint64_t v6 = 0;
      uint64_t v5 = 0;
      break;
  }
  return v5 | v6;
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getDifferentiabilityFromString(void *a1, uint64_t a2)
{
  if (!a2) {
    return 256;
  }
  if (a2 == 13 && *a1 == 0x76697265446F6E40 && *(void *)((char *)a1 + 5) == 0x6576697461766972) {
    return 257;
  }
  return 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a1, a2, a3, a4);
  }
  uint64_t v5 = *(void *)a1 + 16 * v4;
  unsigned int v6 = *a3;
  unsigned __int8 v7 = *a4;
  *(void *)uint64_t v5 = *a2;
  *(_DWORD *)(v5 + 8) = v6;
  *(unsigned char *)(v5 + 12) = v7;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  uint64_t v9 = (void *)(*(void *)a1 + 16 * v8);
  void *v9 = v5;
  v9[1] = v6 | (v7 << 32);
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  return *(void *)a1 + 16 * v9 - 16;
}

uint64_t swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>::getConventionFromString(_DWORD *a1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (*a1 != 1953853248) {
        goto LABEL_13;
      }
      uint64_t v2 = 0;
      uint64_t v3 = 0x100000000;
      break;
    case 6uLL:
      if (memcmp(a1, "@owned", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 1;
      break;
    case 8uLL:
      if (memcmp(a1, "@unowned", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 2;
      break;
    case 9uLL:
      if (memcmp(a1, "@pack_out", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 5;
      break;
    case 0xDuLL:
      if (memcmp(a1, "@autoreleased", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 4;
      break;
    case 0x16uLL:
      if (memcmp(a1, "@unowned_inner_pointer", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 3;
      break;
    default:
LABEL_13:
      uint64_t v3 = 0;
      uint64_t v2 = 0;
      break;
  }
  return v2 | v3;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1 + 16 * v3;
  unsigned int v5 = *a3;
  *(void *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 12) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 16 * v4 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  uint64_t v7 = (void *)(*(void *)a1 + 16 * v6);
  void *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

uint64_t swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, long long **a3)
{
  swift::reflection::TupleTypeRef::Profile((uint64_t **)a2, a3, (uint64_t)v21);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 928), (char **)v21);
  if (!v6)
  {
    uint64_t v9 = *(uint64_t **)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    size_t v10 = v8 - *(void *)a2;
    if (v8 != *(void *)a2)
    {
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_17;
      }
      unint64_t v11 = operator new(v8 - *(void *)a2);
      memcpy(v11, v9, v10);
    }
    unint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    int64_t v14 = (char *)v12 - (char *)v13;
    if (v12 == v13) {
      goto LABEL_13;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) < 0xAAAAAAAAAAAAAABLL)
    {
      unint64_t v15 = (char *)operator new(v14);
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = (char *)v13 + v16;
        uint64_t v18 = (std::string *)&v15[v16];
        if (*((char *)v13 + v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((void *)v17 + 1));
        }
        else
        {
          long long v19 = *(_OWORD *)v17;
          v18->__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        v16 += 24;
      }
      while ((long long *)((char *)v13 + v16) != v12);
LABEL_13:
      operator new();
    }
LABEL_17:
    abort();
  }
  uint64_t v7 = v6[5];
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  return v7;
}

void *std::vector<std::string>::__init_with_size[abi:nn180100]<__swift::__runtime::llvm::StringRef const*,__swift::__runtime::llvm::StringRef const*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
LABEL_16:
    }
      abort();
    uint64_t v6 = result;
    uint64_t v7 = 3 * a4;
    uint64_t result = operator new(24 * a4);
    uint64_t v8 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    for (void v6[2] = &result[v7]; a2 != a3; a2 += 16)
    {
      size_t v12 = *(void *)(a2 + 8);
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_16;
      }
      unint64_t v13 = *(const void **)a2;
      if (v12 >= 0x17)
      {
        uint64_t v9 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v9 = v12 | 7;
        }
        uint64_t v10 = v9 + 1;
        unint64_t v11 = operator new(v9 + 1);
        v8[1] = v12;
        v8[2] = v10 | 0x8000000000000000;
        *uint64_t v8 = v11;
      }
      else
      {
        *((unsigned char *)v8 + 23) = v12;
        unint64_t v11 = v8;
        if (!v12) {
          goto LABEL_9;
        }
      }
      uint64_t result = memmove(v11, v13, v12);
LABEL_9:
      *((unsigned char *)v11 + v12) = 0;
      v8 += 3;
    }
    v6[1] = v8;
  }
  return result;
}

void swift::reflection::TupleTypeRef::Profile(uint64_t **a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      uint64_t v7 = *v5++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a3, v7);
    }
    while (v5 != v6);
  }
  uint64_t v9 = *a2;
  for (i = a2[1]; v9 != i; uint64_t v9 = (long long *)((char *)v9 + 24))
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    swift::reflection::TypeRefID::addString(a3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void swift::reflection::TupleTypeRef::~TupleTypeRef(swift::reflection::TupleTypeRef *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }

  operator delete();
}

uint64_t swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v20 = 0;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v18, a2, v9);
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(&v18, a3);
  int v10 = *(char *)(a4 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = *(void *)a4;
  }
  if (v10 >= 0) {
    unint64_t v12 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    unint64_t v12 = *(void *)(a4 + 8);
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v18, v11, v12);
  unint64_t v13 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1208), &v18);
  if (!v13)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      std::string v17 = *(std::string *)v6;
      if ((*(char *)(a4 + 23) & 0x80000000) == 0)
      {
LABEL_14:
        std::string v16 = *(std::string *)a4;
        goto LABEL_17;
      }
    }
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
LABEL_17:
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::DependentMemberTypeRef,std::string,swift::reflection::TypeRef const*,std::string>();
  }
  uint64_t v14 = v13[5];
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  return v14;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::DependentMemberTypeRef,std::string,swift::reflection::TypeRef const*,std::string>()
{
}

void swift::reflection::DependentMemberTypeRef::~DependentMemberTypeRef(void **this)
{
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[2]);
    return;
  }
  operator delete(this[6]);
  if (*((char *)this + 39) < 0) {
    goto LABEL_5;
  }
}

{
  uint64_t vars8;

  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[2]);
LABEL_3:

  operator delete();
}

uint64_t swift::reflection::UnownedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1488), (char **)&v6);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = v3[5];
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::UnownedStorageTypeRef::~UnownedStorageTypeRef(swift::reflection::UnownedStorageTypeRef *this)
{
}

uint64_t swift::reflection::UnmanagedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1528), (char **)&v6);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = v3[5];
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::UnmanagedStorageTypeRef::~UnmanagedStorageTypeRef(swift::reflection::UnmanagedStorageTypeRef *this)
{
}

uint64_t swift::reflection::WeakStorageTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1448), (char **)&v6);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = v3[5];
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::WeakStorageTypeRef::~WeakStorageTypeRef(swift::reflection::WeakStorageTypeRef *this)
{
}

uint64_t swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1568), (char **)&v6);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = v3[5];
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::SILBoxTypeRef::~SILBoxTypeRef(swift::reflection::SILBoxTypeRef *this)
{
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v6) = v4 | (v5 << 32);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 8 * v7 - 8;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  unsigned int v7 = (void *)(*(void *)a1 + 16 * v6);
  void *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,BOOL &>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v6) = v4 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 != 0));
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 8 * v7 - 8;
}

uint64_t swift::reflection::SILBoxTypeWithLayoutTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  int v23 = 0;
  unint64_t v24 = 0;
  unsigned __int16 v25 = 0;
  if (a3)
  {
    if (a3 < 0) {
      goto LABEL_22;
    }
    uint64_t v14 = (char *)operator new(8 * a3);
    unint64_t v15 = &v14[8 * a3];
    int v23 = v14;
    unsigned __int16 v25 = v15;
    memcpy(v14, a2, 8 * a3);
    unint64_t v24 = v15;
  }
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  if (a5)
  {
    if (a5 < 0) {
      goto LABEL_22;
    }
    std::string v16 = (char *)operator new(16 * a5);
    std::string v17 = &v16[16 * a5];
    unint64_t v29 = v16;
    unint64_t v31 = v17;
    memcpy(v16, a4, 16 * a5);
    uint64_t v30 = v17;
  }
  std::string __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (!a7) {
    goto LABEL_10;
  }
  if (a7 < 0) {
LABEL_22:
  }
    abort();
  uint64_t v18 = (char *)operator new(16 * a7);
  long long v19 = &v18[16 * a7];
  std::string __p = v18;
  uint64_t v28 = v19;
  memcpy(v18, a6, 16 * a7);
  uint64_t v27 = v19;
LABEL_10:
  swift::reflection::SILBoxTypeWithLayoutTypeRef::Profile((uint64_t **)&v23, (uint64_t **)&v29, (uint64_t *)&__p, (uint64_t)v32);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  if (v23)
  {
    unint64_t v24 = v23;
    operator delete(v23);
  }
  uint64_t v20 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1608), (char **)v32);
  if (!v20) {
    operator new();
  }
  uint64_t v21 = v20[5];
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v21;
}

void swift::reflection::SILBoxTypeWithLayoutTypeRef::Profile(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unsigned int v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      uint64_t v9 = *v7++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, v9);
    }
    while (v7 != v8);
  }
  uint64_t v11 = *a2;
  for (i = a2[1]; v11 != i; v11 += 2)
  {
    swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, *v11);
    swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, v11[1]);
  }
  uint64_t v13 = *a3;
  for (uint64_t j = a3[1]; v13 != j; v13 += 16)
  {
    while (1)
    {
      swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a4, *(_DWORD *)v13 & 7);
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, *(void *)v13 & 0xFFFFFFFFFFFFFFF8);
      if ((*(void *)v13 & 7) == 3) {
        break;
      }
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, *(void *)(v13 + 8));
      v13 += 16;
      if (v13 == j) {
        return;
      }
    }
    swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a4, 0);
  }
}

uint64_t swift::reflection::SILBoxTypeWithLayoutTypeRef::SILBoxTypeWithLayoutTypeRef(uint64_t a1, const void *a2, uint64_t a3, size_t __sz, uint64_t a5, const void *a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 8) = 20;
  *(void *)a1 = off_C8738;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  if (a3)
  {
    size_t v12 = 8 * a3;
    if (8 * a3 < 0) {
      goto LABEL_11;
    }
    uint64_t v14 = (8 * a3) >> 3;
    unint64_t v15 = (char *)operator new(8 * a3);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15;
    std::string v16 = &v15[8 * v14];
    *(void *)(a1 + 32) = v16;
    memcpy(v15, a2, v12);
    *(void *)(a1 + 24) = v16;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if (a5)
  {
    uint64_t v17 = 16 * a5;
    if (16 * a5 < 0) {
      goto LABEL_11;
    }
    uint64_t v18 = (16 * a5) >> 4;
    long long v19 = (char *)operator new(16 * a5);
    *(void *)(a1 + 40) = v19;
    *(void *)(a1 + 48) = v19;
    *(void *)(a1 + 56) = &v19[16 * v18];
    size_t v20 = v17 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v19, (const void *)__sz, v20);
    *(void *)(a1 + 48) = &v19[v20];
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (a7)
  {
    size_t v21 = 16 * a7;
    if (((16 * a7) & 0x8000000000000000) == 0)
    {
      long long v22 = (char *)operator new(16 * a7);
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v22;
      int v23 = &v22[16 * ((16 * a7) >> 4)];
      *(void *)(a1 + 80) = v23;
      memcpy(v22, a6, v21);
      *(void *)(a1 + 72) = v23;
      return a1;
    }
LABEL_11:
    abort();
  }
  return a1;
}

void swift::reflection::SILBoxTypeWithLayoutTypeRef::~SILBoxTypeWithLayoutTypeRef(swift::reflection::SILBoxTypeWithLayoutTypeRef *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::OpaqueArchetypeTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, void *__src, size_t __len, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  swift::reflection::OpaqueArchetypeTypeRef::Profile(__src, __len, a6, a7, a8, (swift::reflection::TypeRefID *)v12);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1408), (char **)v12);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = v9[5];
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  return v10;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(uint64_t *a1, int *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = *a2;
    int v6 = a2[1];
    unint64_t v7 = ((37 * v6) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v6) << 32);
    unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    int v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~(v9 << 27));
    int v11 = v3 - 1;
    unsigned int v12 = (v3 - 1) & v10;
    uint64_t v13 = (_DWORD *)(*a1 + 16 * v12);
    int v14 = *v13;
    int v15 = v13[1];
    if (*a2 == *v13 && v6 == v15)
    {
      uint64_t result = 1;
      *a3 = v13;
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      uint64_t result = 1;
      while (v14 != -1 || v15 != -1)
      {
        if (v17) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v15 == -2;
        }
        if (v20 && v14 == -2) {
          uint64_t v17 = v13;
        }
        unsigned int v22 = v12 + v18++;
        unsigned int v12 = v22 & v11;
        uint64_t v13 = (_DWORD *)(v4 + 16 * (v22 & v11));
        int v14 = *v13;
        int v15 = v13[1];
        if (v5 == *v13 && v6 == v15)
        {
          *a3 = v13;
          return result;
        }
      }
      uint64_t result = 0;
      if (v17) {
        uint64_t v13 = v17;
      }
      *a3 = v13;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

_DWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::grow(a1, v7);
  int v10 = 0;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void __swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = buffer;
  *(void *)a1 = buffer;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &buffer[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = buffer + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *uint64_t v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &buffer[2 * v11];
        do
        {
          void *v10 = -1;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    std::string v16 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v17 = 16 * v3;
      int v18 = v4;
      do
      {
        int v19 = *((_DWORD *)v18 + 1);
        if ((*(_DWORD *)v18 != -1 || v19 != -1) && (*(_DWORD *)v18 != -2 || v19 != -2))
        {
          uint64_t v28 = 0;
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, (int *)v18, &v28);
          unsigned int v22 = v28;
          _DWORD *v28 = *(_DWORD *)v18;
          v22[1] = *((_DWORD *)v18 + 1);
          *((void *)v22 + 1) = *((void *)v18 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        int v18 = (__swift::__runtime::llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, v16, (std::align_val_t)8uLL);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v23 = *(unsigned int *)(a1 + 16);
    if (v23)
    {
      if (((v23 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_30;
      }
      uint64_t v24 = ((v23 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &buffer[2 * (v24 & 0x1FFFFFFFFFFFFFFELL)];
      unsigned __int16 v25 = buffer + 2;
      uint64_t v26 = v24 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v25 - 2) = -1;
        *unsigned __int16 v25 = -1;
        v25 += 4;
        v26 -= 2;
      }
      while (v26);
      if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_30:
        uint64_t v27 = &buffer[2 * v23];
        do
        {
          void *v10 = -1;
          v10 += 2;
        }
        while (v10 != v27);
      }
    }
  }
}

void swift::reflection::OpaqueArchetypeTypeRef::Profile(void *__src@<X0>, size_t __len@<X1>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, swift::reflection::TypeRefID *a6@<X8>)
{
  *(void *)a6 = 0;
  *((void *)a6 + 1) = 0;
  *((void *)a6 + 2) = 0;
  if (!__src)
  {
    size_t v13 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    long long __dst = 0;
    size_t v26 = 0;
    unint64_t v27 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v16 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v16 = __len | 7;
    }
    size_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    size_t v26 = __len;
    unint64_t v27 = v17 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v27) = __len;
    p_dst = (void **)&__dst;
    if (!__len) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((unsigned char *)p_dst + __len) = 0;
  unsigned int v15 = HIBYTE(v27);
  uint64_t v14 = __dst;
  size_t v13 = v26;
LABEL_12:
  if ((v15 & 0x80u) == 0) {
    int v18 = (void **)&__dst;
  }
  else {
    int v18 = v14;
  }
  if ((v15 & 0x80u) == 0) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = v13;
  }
  swift::reflection::TypeRefID::addString((uint64_t)a6, (uint64_t)v18, v19);
  if (SHIBYTE(v27) < 0) {
    operator delete(__dst);
  }
  swift::reflection::TypeRefID::addInteger(a6, a3);
  if (a5)
  {
    uint64_t v20 = a4 + 16 * a5;
    do
    {
      size_t v21 = *(uint64_t **)a4;
      uint64_t v22 = *(void *)(a4 + 8);
      swift::reflection::TypeRefID::addInteger(a6, 0);
      if (v22)
      {
        uint64_t v23 = 8 * v22;
        do
        {
          uint64_t v24 = *v21++;
          swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a6, v24);
          v23 -= 8;
        }
        while (v23);
      }
      a4 += 16;
    }
    while (a4 != v20);
  }
}

void *swift::reflection::OpaqueArchetypeTypeRef::OpaqueArchetypeTypeRef(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(a1 + 8) = 15;
  *(void *)a1 = off_C8758;
  if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_72:
  }
    abort();
  unsigned int v15 = (void *)a1;
  if (__len >= 0x17)
  {
    size_t v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v17 = __len | 7;
    }
    size_t v18 = v17 + 1;
    size_t v16 = operator new(v17 + 1);
    unint64_t v19 = v18 | 0x8000000000000000;
    unsigned int v15 = (void *)a1;
    *(void *)(a1 + 24) = __len;
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 16) = v16;
    goto LABEL_8;
  }
  size_t v16 = (void *)(a1 + 16);
  *(unsigned char *)(a1 + 39) = __len;
  if (__len) {
LABEL_8:
  }
    memmove(v16, __src, __len);
  *((unsigned char *)v16 + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_72;
  }
  if (a5 >= 0x17)
  {
    uint64_t v21 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v21 = a5 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = operator new(v21 + 1);
    v15[6] = a5;
    v15[7] = v22 | 0x8000000000000000;
    v15[5] = v20;
  }
  else
  {
    uint64_t v20 = v15 + 5;
    *((unsigned char *)v15 + 63) = a5;
    if (!a5) {
      goto LABEL_17;
    }
  }
  memmove(v20, a4, a5);
LABEL_17:
  *((unsigned char *)v20 + a5) = 0;
  *(_OWORD *)(v15 + 9) = 0u;
  uint64_t v23 = v15 + 9;
  *((_DWORD *)v15 + 16) = a6;
  *(_OWORD *)(v15 + 11) = 0u;
  *(_OWORD *)(v15 + 13) = 0u;
  if (!a8) {
    return v15;
  }
  uint64_t v24 = 0;
  unsigned __int16 v25 = 0;
  size_t v26 = 0;
  uint64_t v27 = a7 + 16 * a8;
  uint64_t v62 = v27;
  unint64_t v63 = v15 + 9;
  do
  {
    unint64_t v29 = *(char **)a7;
    uint64_t v28 = *(void *)(a7 + 8);
    if (v25 < v26)
    {
      *(_DWORD *)unsigned __int16 v25 = v28;
      v25 += 4;
      goto LABEL_20;
    }
    uint64_t v30 = (v25 - v24) >> 2;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 62) {
      goto LABEL_72;
    }
    if ((v26 - v24) >> 1 > v31) {
      unint64_t v31 = (v26 - v24) >> 1;
    }
    if ((unint64_t)(v26 - v24) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32)
    {
      if (v32 >> 62) {
LABEL_73:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      BOOL v33 = operator new(4 * v32);
    }
    else
    {
      BOOL v33 = 0;
    }
    uint64_t v34 = &v33[4 * v30];
    *(_DWORD *)uint64_t v34 = v28;
    unint64_t v35 = v34 + 4;
    if (v25 != v24)
    {
      unint64_t v36 = v25 - v24 - 4;
      if (v36 >= 0xBC)
      {
        unint64_t v38 = (v25 - 4 - v24) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v33[v25 - v24 - 4 - v38] > &v33[v25 - v24 - 4])
        {
          uint64_t v37 = v25;
        }
        else if (&v25[-v38 - 4] > v25 - 4)
        {
          uint64_t v37 = v25;
        }
        else if ((unint64_t)(v24 - v33) >= 0x20)
        {
          uint64_t v39 = (v36 >> 2) + 1;
          uint64_t v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v37 = &v25[-v40];
          v34 -= v40;
          uint64_t v41 = &v33[4 * v30 - 16];
          long long v42 = v25 - 16;
          uint64_t v43 = v39 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *uint64_t v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 8;
          }
          while (v43);
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v37 = v25;
        }
      }
      else
      {
        uint64_t v37 = v25;
      }
      do
      {
        int v45 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v34 - 1) = v45;
        v34 -= 4;
      }
      while (v37 != v24);
    }
LABEL_45:
    size_t v26 = &v33[4 * v32];
    if (v24) {
      operator delete(v24);
    }
    uint64_t v24 = v34;
    unsigned __int16 v25 = v35;
    uint64_t v23 = v63;
    unsigned int v15 = (void *)a1;
    uint64_t v27 = v62;
LABEL_20:
    std::vector<swift::reflection::TypeRef const*>::__insert_with_size[abi:nn180100]<swift::reflection::TypeRef const* const*,swift::reflection::TypeRef const* const*>(v23, v15[10], v29, &v29[8 * v28], v28);
    a7 += 16;
  }
  while (a7 != v27);
  if (v24 != v25)
  {
    uint64_t v46 = v15[9];
    int v47 = (char *)v15[13];
    for (i = v24; i != v25; i += 4)
    {
      uint64_t v50 = *(unsigned int *)i;
      unint64_t v51 = v15[14];
      if ((unint64_t)v47 < v51)
      {
        *(void *)int v47 = v46;
        *((void *)v47 + 1) = v50;
        char v49 = v47 + 16;
      }
      else
      {
        long long v52 = (char *)v15[12];
        uint64_t v53 = (v47 - v52) >> 4;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 60) {
          goto LABEL_72;
        }
        uint64_t v55 = v51 - (void)v52;
        if (v55 >> 3 > v54) {
          unint64_t v54 = v55 >> 3;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          if (v56 >> 60) {
            goto LABEL_73;
          }
          unint64_t v57 = (char *)operator new(16 * v56);
        }
        else
        {
          unint64_t v57 = 0;
        }
        uint64_t v58 = &v57[16 * v53];
        *(void *)uint64_t v58 = v46;
        *((void *)v58 + 1) = v50;
        unint64_t v59 = v58;
        if (v47 == v52)
        {
          unint64_t v60 = (void *)a1;
        }
        else
        {
          do
          {
            *((_OWORD *)v59 - 1) = *((_OWORD *)v47 - 1);
            v59 -= 16;
            v47 -= 16;
          }
          while (v47 != v52);
          unint64_t v60 = (void *)a1;
          int v47 = *(char **)(a1 + 96);
        }
        char v49 = v58 + 16;
        v60[12] = v59;
        v60[13] = v58 + 16;
        v60[14] = &v57[16 * v56];
        unsigned int v15 = v60;
        if (v47) {
          operator delete(v47);
        }
      }
      v15[13] = v49;
      v46 += 8 * v50;
      int v47 = v49;
    }
  }
  if (v24) {
    operator delete(v24);
  }
  return v15;
}

void swift::reflection::OpaqueArchetypeTypeRef::~OpaqueArchetypeTypeRef(swift::reflection::OpaqueArchetypeTypeRef *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*((void **)this + 2));
    return;
  }
  operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0) {
    goto LABEL_9;
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*((void **)this + 2));
LABEL_7:

  operator delete();
}

char *std::vector<swift::reflection::TypeRef const*>::__insert_with_size[abi:nn180100]<swift::reflection::TypeRef const* const*,swift::reflection::TypeRef const* const*>(unint64_t *a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = a2 - *a1;
  int v7 = (char *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = (char *)a1[1];
  unint64_t v11 = a1[2];
  uint64_t v55 = v6 >> 3;
  if (a5 > (uint64_t)(v11 - (void)v12) >> 3)
  {
    unint64_t v13 = a5 + ((uint64_t)&v12[-v5] >> 3);
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v11 - v5;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v16 = (char *)operator new(8 * v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v29 = 8 * a5;
    uint64_t v30 = &v16[8 * (v6 >> 3)];
    unint64_t v31 = v16;
    memcpy(v30, __src, v29);
    unint64_t v32 = v31;
    BOOL v33 = v30;
    unint64_t v34 = v6 - 8;
    if ((unint64_t)v6 >= 8)
    {
      unint64_t v35 = v7;
      BOOL v33 = v30;
      if (v34 < 0x68) {
        goto LABEL_51;
      }
      unint64_t v35 = v7;
      BOOL v33 = v30;
      if ((v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)&v32[v6 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_51;
      }
      uint64_t v36 = (v34 >> 3) + 1;
      uint64_t v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v35 = &v7[-v37];
      BOOL v33 = &v30[-v37];
      uint64_t v38 = 8 * v55 - 16;
      uint64_t v39 = &v32[v38];
      uint64_t v40 = (long long *)(v5 + v38);
      uint64_t v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *((_OWORD *)v39 - 1) = *(v40 - 1);
        *(_OWORD *)uint64_t v39 = v42;
        v39 -= 32;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_51:
        do
        {
          uint64_t v43 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v33 - 1) = v43;
          v33 -= 8;
        }
        while (v35 != (char *)v5);
      }
      uint64_t v12 = (char *)a1[1];
    }
    long long v44 = &v30[v29];
    int v45 = &v32[8 * v15];
    if (v12 != v7) {
      memmove(v44, v7, v12 - v7);
    }
    uint64_t v46 = (void *)*a1;
    *a1 = (unint64_t)v33;
    a1[1] = (unint64_t)&v44[v12 - v7];
    a1[2] = (unint64_t)v45;
    if (v46) {
      operator delete(v46);
    }
    return v30;
  }
  uint64_t v17 = (v12 - v7) >> 3;
  if (v17 >= a5)
  {
    size_t v18 = &__src[8 * a5];
    uint64_t v20 = (char *)a1[1];
    goto LABEL_18;
  }
  size_t v18 = &__src[8 * v17];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(v12, &__src[8 * v17], a4 - v18);
  }
  uint64_t v20 = &v12[v19];
  a1[1] = (unint64_t)&v12[v19];
  if (v12 - v7 >= 1)
  {
LABEL_18:
    uint64_t v21 = &v7[8 * a5];
    size_t v22 = v20 - v21;
    uint64_t v23 = (v20 - v21) >> 3;
    uint64_t v24 = &v20[-8 * a5];
    unsigned __int16 v25 = v20;
    if (v24 < v12)
    {
      unint64_t v26 = (v6 & 0xFFFFFFFFFFFFFFF8) + v22;
      unint64_t v27 = v26 + v5 + 8;
      if ((unint64_t)v12 > v27) {
        unint64_t v27 = (unint64_t)v12;
      }
      unint64_t v28 = v27 + ~v5 - v26;
      if (v28 >= 0x58)
      {
        unsigned __int16 v25 = v20;
        if ((unint64_t)&v21[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] >= 0x20)
        {
          uint64_t v47 = (v28 >> 3) + 1;
          uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v24 += v48;
          unsigned __int16 v25 = &v20[v48];
          char v49 = v20 + 16;
          uint64_t v50 = (long long *)(8 * v23 + 8 * v55 + v5 + 16);
          uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v52 = *v50;
            *(v49 - 1) = *(v50 - 1);
            *char v49 = v52;
            v49 += 2;
            v50 += 2;
            v51 -= 4;
          }
          while (v51);
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        unsigned __int16 v25 = v20;
      }
      do
      {
        uint64_t v53 = *(void *)v24;
        v24 += 8;
        *(void *)unsigned __int16 v25 = v53;
        v25 += 8;
      }
      while (v24 < v12);
    }
LABEL_42:
    a1[1] = (unint64_t)v25;
    if (v20 != v21) {
      memmove(&v20[-8 * v23], v7, v22);
    }
    if (v18 != __src) {
      memmove(v7, __src, v18 - __src);
    }
  }
  return v7;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8778;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8778;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::operator()(uint64_t a1, void *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 8) + 2488) + 24))(*(void *)(*(void *)(a1 + 8) + 2488), *a2, *a3);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C87C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C87C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 2488) + 16))(*(void *)(*(void *)(a1 + 8) + 2488), *a2);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8808;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8808;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  return swift::remote::MemoryReader::readPointer(*(void *)(*(void *)(a1 + 8) + 2488), *a2, *a3, a4);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8850;
  a2[1] = v2;
  return result;
}

double std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 2488) + 64))(&v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  uint64_t v4 = v7;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_C8898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8898;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v3 = swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}::operator()(a1 + 8, (uint64_t)__p, *a3);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

unint64_t swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 2488);
  long long v5 = *(std::__shared_weak_count **)(*(void *)a1 + 2496);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4)
  {
    unsigned __int8 v10 = 0;
    unint64_t v11 = 0;
    if (!v5) {
      return v11 | v10;
    }
    goto LABEL_20;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (!v6) {
    goto LABEL_10;
  }
  if (a3 != 4)
  {
    if (a3 == 8)
    {
      uint64_t v14 = 0;
      int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 32))(v4, v6, &v14, 8);
      unsigned __int8 v8 = v14;
      unint64_t v9 = v14 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_13;
    }
LABEL_10:
    unsigned __int8 v10 = 0;
    unint64_t v11 = 0;
    if (!v5) {
      return v11 | v10;
    }
    goto LABEL_20;
  }
  int v13 = 0;
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)v4 + 32))(v4, v6, &v13, 4);
  unsigned __int8 v8 = v13;
  unint64_t v9 = v13 & 0xFFFFFF00;
LABEL_13:
  if (v7) {
    unsigned __int8 v10 = v8;
  }
  else {
    unsigned __int8 v10 = 0;
  }
  if (v7) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v5)
  {
LABEL_20:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v11 | v10;
}

void std::default_delete<swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = *(void **)(a2 + 2584);
    if (v3)
    {
      *(void *)(a2 + 2592) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a2 + 2560);
    if (v4)
    {
      *(void *)(a2 + 2568) = v4;
      operator delete(v4);
    }
    long long v5 = (void **)(a2 + 2536);
    std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)(a2 + 2512), (void *)(24 * *(unsigned int *)(a2 + 2528)), (std::align_val_t)8uLL);
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::~MetadataReader(a2);
    operator delete();
  }
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::~MetadataReader(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 2496);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  swift::reflection::TypeRefBuilder::~TypeRefBuilder((swift::reflection::TypeRefBuilder *)(a1 + 296));
  *(void *)(a1 + 240) = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 264));
  uint64_t v3 = *(void *)(a1 + 280);
  if (v3) {
    *(unsigned char *)(v3 + 48) = 0;
  }
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::destroyAll((unsigned int *)(a1 + 72));
  __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)(a1 + 72), (void *)(48 * *(unsigned int *)(a1 + 88)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::destroyAll((unsigned int *)(a1 + 48));
  __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)(a1 + 48), (void *)(48 * *(unsigned int *)(a1 + 64)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::destroyAll((unsigned int *)(a1 + 24));
  __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)(a1 + 24), (void *)(48 * *(unsigned int *)(a1 + 40)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)), (std::align_val_t)8uLL);
  return a1;
}

void std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  BOOL v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 4;
      int v7 = v1[1];
      while (1)
      {
        uint64_t v9 = *(v7 - 5);
        v7 -= 5;
        uint64_t v8 = v9;
        void *v7 = 0;
        if (v9)
        {
          uint64_t v13 = v8;
          uint64_t v10 = *(v4 - 1);
          if (!v10)
          {
            uint64_t v12 = (swift::reflection::TypeRefBuilder *)std::__throw_bad_function_call[abi:nn180100]();
            swift::reflection::TypeRefBuilder::~TypeRefBuilder(v12);
            return;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 48))(v10, &v13);
        }
        unint64_t v11 = (void *)*(v4 - 1);
        if (v4 - 4 == v11)
        {
          (*(void (**)(void *))(*(v4 - 4) + 32))(v4 - 4);
        }
        else if (v11)
        {
          (*(void (**)(void *))(*v11 + 40))(v11);
        }
        v6 -= 5;
        uint64_t v4 = v7;
        if (v7 == v2)
        {
          long long v5 = **a1;
          break;
        }
      }
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void swift::reflection::TypeRefBuilder::~TypeRefBuilder(swift::reflection::TypeRefBuilder *this)
{
  uint64_t v2 = (char *)this + 2144;
  uint64_t v3 = (char *)*((void *)this + 271);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (swift::reflection::TypeRefBuilder *)*((void *)this + 267);
  if (v4 == (swift::reflection::TypeRefBuilder *)((char *)this + 2112))
  {
    (*(void (**)(char *))(*((void *)this + 264) + 32))((char *)this + 2112);
  }
  else if (v4)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v4 + 40))(v4);
  }
  long long v5 = (swift::reflection::TypeRefBuilder *)*((void *)this + 263);
  if (v5 == (swift::reflection::TypeRefBuilder *)((char *)this + 2080))
  {
    (*(void (**)(char *))(*((void *)this + 260) + 32))((char *)this + 2080);
  }
  else if (v5)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (swift::reflection::TypeRefBuilder *)*((void *)this + 259);
  if (v6 == (swift::reflection::TypeRefBuilder *)((char *)this + 2048))
  {
    (*(void (**)(char *))(*((void *)this + 256) + 32))((char *)this + 2048);
  }
  else if (v6)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v6 + 40))(v6);
  }
  int v7 = (swift::reflection::TypeRefBuilder *)*((void *)this + 255);
  if (v7 == (swift::reflection::TypeRefBuilder *)((char *)this + 2016))
  {
    (*(void (**)(char *))(*((void *)this + 252) + 32))((char *)this + 2016);
  }
  else if (v7)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = (swift::reflection::TypeRefBuilder *)*((void *)this + 251);
  if (v8 == (swift::reflection::TypeRefBuilder *)((char *)this + 1984))
  {
    (*(void (**)(char *))(*((void *)this + 248) + 32))((char *)this + 1984);
  }
  else if (v8)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = (swift::reflection::TypeRefBuilder *)*((void *)this + 247);
  if (v9 == (swift::reflection::TypeRefBuilder *)((char *)this + 1952))
  {
    (*(void (**)(char *))(*((void *)this + 244) + 32))((char *)this + 1952);
  }
  else if (v9)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v9 + 40))(v9);
  }
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder((swift::reflection::TypeRefBuilder *)((char *)this + 1680));
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 206), (void *)(8 * *((unsigned int *)this + 416)), (std::align_val_t)8uLL);
  uint64_t v10 = (void *)*((void *)this + 203);
  if (v10)
  {
    do
    {
      uint64_t v55 = (void *)*v10;
      unint64_t v56 = (void *)v10[2];
      if (v56)
      {
        void v10[3] = v56;
        operator delete(v56);
      }
      operator delete(v10);
      uint64_t v10 = v55;
    }
    while (v55);
  }
  unint64_t v11 = (void *)*((void *)this + 201);
  *((void *)this + 201) = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 198);
  if (v12)
  {
    do
    {
      unint64_t v57 = (void *)*v12;
      uint64_t v58 = (void *)v12[2];
      if (v58)
      {
        v12[3] = v58;
        operator delete(v58);
      }
      operator delete(v12);
      uint64_t v12 = v57;
    }
    while (v57);
  }
  uint64_t v13 = (void *)*((void *)this + 196);
  *((void *)this + 196) = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 193);
  if (v14)
  {
    do
    {
      unint64_t v59 = (void *)*v14;
      unint64_t v60 = (void *)v14[2];
      if (v60)
      {
        void v14[3] = v60;
        operator delete(v60);
      }
      operator delete(v14);
      uint64_t v14 = v59;
    }
    while (v59);
  }
  unint64_t v15 = (void *)*((void *)this + 191);
  *((void *)this + 191) = 0;
  if (v15) {
    operator delete(v15);
  }
  size_t v16 = (void *)*((void *)this + 188);
  if (v16)
  {
    do
    {
      uint64_t v61 = (void *)*v16;
      uint64_t v62 = (void *)v16[2];
      if (v62)
      {
        void v16[3] = v62;
        operator delete(v62);
      }
      operator delete(v16);
      size_t v16 = v61;
    }
    while (v61);
  }
  uint64_t v17 = (void *)*((void *)this + 186);
  *((void *)this + 186) = 0;
  if (v17) {
    operator delete(v17);
  }
  size_t v18 = (void *)*((void *)this + 183);
  if (v18)
  {
    do
    {
      unint64_t v63 = (void *)*v18;
      unint64_t v64 = (void *)v18[2];
      if (v64)
      {
        v18[3] = v64;
        operator delete(v64);
      }
      operator delete(v18);
      size_t v18 = v63;
    }
    while (v63);
  }
  int64_t v19 = (void *)*((void *)this + 181);
  *((void *)this + 181) = 0;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 178);
  if (v20)
  {
    do
    {
      uint64_t v65 = (void *)*v20;
      uint64_t v66 = (void *)v20[2];
      if (v66)
      {
        void v20[3] = v66;
        operator delete(v66);
      }
      operator delete(v20);
      uint64_t v20 = v65;
    }
    while (v65);
  }
  uint64_t v21 = (void *)*((void *)this + 176);
  *((void *)this + 176) = 0;
  if (v21) {
    operator delete(v21);
  }
  size_t v22 = (void *)*((void *)this + 173);
  if (v22)
  {
    do
    {
      uint64_t v67 = (void *)*v22;
      unsigned __int8 v68 = (void *)v22[2];
      if (v68)
      {
        v22[3] = v68;
        operator delete(v68);
      }
      operator delete(v22);
      size_t v22 = v67;
    }
    while (v67);
  }
  uint64_t v23 = (void *)*((void *)this + 171);
  *((void *)this + 171) = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 168);
  if (v24)
  {
    do
    {
      unint64_t v69 = (void *)*v24;
      uint64_t v70 = (void *)v24[2];
      if (v70)
      {
        void v24[3] = v70;
        operator delete(v70);
      }
      operator delete(v24);
      uint64_t v24 = v69;
    }
    while (v69);
  }
  unsigned __int16 v25 = (void *)*((void *)this + 166);
  *((void *)this + 166) = 0;
  if (v25) {
    operator delete(v25);
  }
  unint64_t v26 = (void *)*((void *)this + 163);
  if (v26)
  {
    do
    {
      long long v71 = (void *)*v26;
      int v72 = (void *)v26[2];
      if (v72)
      {
        v26[3] = v72;
        operator delete(v72);
      }
      operator delete(v26);
      unint64_t v26 = v71;
    }
    while (v71);
  }
  unint64_t v27 = (void *)*((void *)this + 161);
  *((void *)this + 161) = 0;
  if (v27) {
    operator delete(v27);
  }
  unint64_t v28 = (void *)*((void *)this + 158);
  if (v28)
  {
    do
    {
      unint64_t v73 = (void *)*v28;
      int v74 = (void *)v28[2];
      if (v74)
      {
        v28[3] = v74;
        operator delete(v74);
      }
      operator delete(v28);
      unint64_t v28 = v73;
    }
    while (v73);
  }
  size_t v29 = (void *)*((void *)this + 156);
  *((void *)this + 156) = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = (void *)*((void *)this + 153);
  if (v30)
  {
    do
    {
      uint64_t v75 = (void *)*v30;
      int v76 = (void *)v30[2];
      if (v76)
      {
        void v30[3] = v76;
        operator delete(v76);
      }
      operator delete(v30);
      uint64_t v30 = v75;
    }
    while (v75);
  }
  unint64_t v31 = (void *)*((void *)this + 151);
  *((void *)this + 151) = 0;
  if (v31) {
    operator delete(v31);
  }
  unint64_t v32 = (void *)*((void *)this + 148);
  if (v32)
  {
    do
    {
      int v77 = (void *)*v32;
      v78 = (void *)v32[2];
      if (v78)
      {
        v32[3] = v78;
        operator delete(v78);
      }
      operator delete(v32);
      unint64_t v32 = v77;
    }
    while (v77);
  }
  BOOL v33 = (void *)*((void *)this + 146);
  *((void *)this + 146) = 0;
  if (v33) {
    operator delete(v33);
  }
  unint64_t v34 = (void *)*((void *)this + 143);
  if (v34)
  {
    do
    {
      v79 = (void *)*v34;
      uint64_t v80 = (void *)v34[2];
      if (v80)
      {
        v34[3] = v80;
        operator delete(v80);
      }
      operator delete(v34);
      unint64_t v34 = v79;
    }
    while (v79);
  }
  unint64_t v35 = (void *)*((void *)this + 141);
  *((void *)this + 141) = 0;
  if (v35) {
    operator delete(v35);
  }
  uint64_t v36 = (void *)*((void *)this + 138);
  if (v36)
  {
    do
    {
      unint64_t v81 = (void *)*v36;
      unint64_t v82 = (void *)v36[2];
      if (v82)
      {
        v36[3] = v82;
        operator delete(v82);
      }
      operator delete(v36);
      uint64_t v36 = v81;
    }
    while (v81);
  }
  uint64_t v37 = (void *)*((void *)this + 136);
  *((void *)this + 136) = 0;
  if (v37) {
    operator delete(v37);
  }
  uint64_t v38 = (void *)*((void *)this + 133);
  if (v38)
  {
    do
    {
      int v83 = (void *)*v38;
      int v84 = (void *)v38[2];
      if (v84)
      {
        void v38[3] = v84;
        operator delete(v84);
      }
      operator delete(v38);
      uint64_t v38 = v83;
    }
    while (v83);
  }
  uint64_t v39 = (void *)*((void *)this + 131);
  *((void *)this + 131) = 0;
  if (v39) {
    operator delete(v39);
  }
  uint64_t v40 = (void *)*((void *)this + 128);
  if (v40)
  {
    do
    {
      int v85 = (void *)*v40;
      long long v86 = (void *)v40[2];
      if (v86)
      {
        v40[3] = v86;
        operator delete(v86);
      }
      operator delete(v40);
      uint64_t v40 = v85;
    }
    while (v85);
  }
  uint64_t v41 = (void *)*((void *)this + 126);
  *((void *)this + 126) = 0;
  if (v41) {
    operator delete(v41);
  }
  long long v42 = (void *)*((void *)this + 123);
  if (v42)
  {
    do
    {
      int v87 = (void *)*v42;
      int v88 = (void *)v42[2];
      if (v88)
      {
        v42[3] = v88;
        operator delete(v88);
      }
      operator delete(v42);
      long long v42 = v87;
    }
    while (v87);
  }
  uint64_t v43 = (void *)*((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v43) {
    operator delete(v43);
  }
  long long v44 = (void *)*((void *)this + 118);
  if (v44)
  {
    do
    {
      uint64_t v89 = (void *)*v44;
      int v90 = (void *)v44[2];
      if (v90)
      {
        v44[3] = v90;
        operator delete(v90);
      }
      operator delete(v44);
      long long v44 = v89;
    }
    while (v89);
  }
  int v45 = (void *)*((void *)this + 116);
  *((void *)this + 116) = 0;
  if (v45) {
    operator delete(v45);
  }
  uint64_t v46 = (void *)*((void *)this + 113);
  if (v46)
  {
    do
    {
      v91 = (void *)*v46;
      v92 = (void *)v46[2];
      if (v92)
      {
        v46[3] = v92;
        operator delete(v92);
      }
      operator delete(v46);
      uint64_t v46 = v91;
    }
    while (v91);
  }
  uint64_t v47 = (void *)*((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v47) {
    operator delete(v47);
  }
  uint64_t v48 = (void *)*((void *)this + 108);
  if (v48)
  {
    do
    {
      v93 = (void *)*v48;
      v94 = (void *)v48[2];
      if (v94)
      {
        v48[3] = v94;
        operator delete(v94);
      }
      operator delete(v48);
      uint64_t v48 = v93;
    }
    while (v93);
  }
  char v49 = (void *)*((void *)this + 106);
  *((void *)this + 106) = 0;
  if (v49) {
    operator delete(v49);
  }
  uint64_t v50 = (void *)*((void *)this + 103);
  if (v50)
  {
    do
    {
      uint64_t v95 = (void *)*v50;
      unsigned __int8 v96 = (void *)v50[2];
      if (v96)
      {
        void v50[3] = v96;
        operator delete(v96);
      }
      operator delete(v50);
      uint64_t v50 = v95;
    }
    while (v95);
  }
  uint64_t v51 = (void *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v51) {
    operator delete(v51);
  }
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 88), (void *)(16 * *((unsigned int *)this + 180)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 85), (void *)(8 * *((unsigned int *)this + 174)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 82), (void *)(24 * *((unsigned int *)this + 168)), (std::align_val_t)8uLL);
  long long v52 = (void *)*((void *)this + 79);
  if (v52)
  {
    uint64_t v53 = (void *)*((void *)this + 80);
    unint64_t v54 = (void *)*((void *)this + 79);
    if (v53 != v52)
    {
      do
      {
        uint64_t v98 = *--v53;
        uint64_t v97 = v98;
        *uint64_t v53 = 0;
        if (v98) {
          (*(void (**)(uint64_t))(*(void *)v97 + 24))(v97);
        }
      }
      while (v53 != v52);
      unint64_t v54 = (void *)*((void *)this + 79);
    }
    *((void *)this + 80) = v52;
    operator delete(v54);
  }
  uint64_t v99 = (void *)*((void *)this + 75);
  if (v99)
  {
    int v100 = (void *)*((void *)this + 76);
    int v101 = (void *)*((void *)this + 75);
    if (v100 != v99)
    {
      do
      {
        uint64_t v103 = *--v100;
        uint64_t v102 = v103;
        *int v100 = 0;
        if (v103)
        {
          uint64_t v104 = *(void **)(v102 + 24);
          if (v104)
          {
            *(void *)(v102 + 32) = v104;
            operator delete(v104);
          }
          char v105 = *(void **)v102;
          if (*(void *)v102)
          {
            *(void *)(v102 + 8) = v105;
            operator delete(v105);
          }
          operator delete();
        }
      }
      while (v100 != v99);
      int v101 = (void *)*((void *)this + 75);
    }
    *((void *)this + 76) = v99;
    operator delete(v101);
  }
  char v106 = (void *)*((void *)this + 72);
  if (v106)
  {
    uint64_t v107 = (void *)*((void *)this + 73);
    v108 = (void *)*((void *)this + 72);
    if (v107 != v106)
    {
      do
      {
        uint64_t v110 = *--v107;
        uint64_t v109 = v110;
        *uint64_t v107 = 0;
        if (v110) {
          (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
        }
      }
      while (v107 != v106);
      v108 = (void *)*((void *)this + 72);
    }
    *((void *)this + 73) = v106;
    operator delete(v108);
  }
  *(void *)this = off_C9440;
  v111 = (swift::reflection::TypeRefBuilder *)*((void *)this + 71);
  if (v111 == (swift::reflection::TypeRefBuilder *)((char *)this + 544))
  {
    (*(void (**)(char *))(*((void *)this + 68) + 32))((char *)this + 544);
  }
  else if (v111)
  {
    (*(void (**)(swift::reflection::TypeRefBuilder *))(*(void *)v111 + 40))(v111);
  }
  *(void *)this = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*((void **)this + 3));
  uint64_t v112 = *((void *)this + 5);
  if (v112) {
    *(unsigned char *)(v112 + 48) = 0;
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this)
{
  *(void *)this = off_CA3D0;
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 29);
    uint64_t v4 = (void *)*((void *)this + 28);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v2;
    operator delete(v4);
  }
  int v7 = (void *)*((void *)this + 24);
  if (v7)
  {
    do
    {
      int64_t v19 = (void *)*v7;
      uint64_t v20 = (void *)v7[2];
      if (v20)
      {
        void v7[3] = v20;
        operator delete(v20);
      }
      operator delete(v7);
      int v7 = v19;
    }
    while (v19);
  }
  uint64_t v8 = (void *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)*((void *)this + 19);
  if (v9)
  {
    do
    {
      uint64_t v21 = (void **)*v9;
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      uint64_t v9 = v21;
    }
    while (v21);
  }
  uint64_t v10 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v10) {
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 14);
  while (v11)
  {
    size_t v22 = v11;
    unint64_t v11 = (void *)*v11;
    if (*((unsigned char *)v22 + 48) && *((char *)v22 + 47) < 0) {
      operator delete((void *)v22[3]);
    }
    operator delete(v22);
  }
  uint64_t v12 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)*((void *)this + 9);
  if (v13)
  {
    do
    {
      uint64_t v23 = (void **)*v13;
      if (*((char *)v13 + 39) < 0) {
        operator delete(v13[2]);
      }
      operator delete(v13);
      uint64_t v13 = v23;
    }
    while (v23);
  }
  uint64_t v14 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v14) {
    operator delete(v14);
  }
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 4), (void *)(8 * *((unsigned int *)this + 12)), (std::align_val_t)8uLL);
  unint64_t v15 = (char *)*((void *)this + 1);
  if (v15)
  {
    size_t v16 = (char *)*((void *)this + 2);
    uint64_t v17 = (void *)*((void *)this + 1);
    if (v16 != v15)
    {
      size_t v18 = v16 - 16;
      do
      {
        unsigned __int16 v25 = (char *)*((void *)v18 - 2);
        if (v18 != v25) {
          free(v25);
        }
        uint64_t v24 = v18 - 208;
        v18 -= 224;
      }
      while (v24 != v15);
      uint64_t v17 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v15;
    operator delete(v17);
  }
}

{
  uint64_t vars8;

  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder(this);

  operator delete();
}

unsigned int *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::destroyAll(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (unsigned int **)(*(void *)result + 40);
    uint64_t v4 = *(void *)result + 16;
    do
    {
      if ((unint64_t)*(v3 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v5 = (uint64_t)*(v3 - 4);
        *(v3 - 4) = 0;
        if (v5)
        {
          uint64_t v7 = v5;
          if (!*v3)
          {
            uint64_t v6 = std::__throw_bad_function_call[abi:nn180100]();
            return (unsigned int *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN5swift10reflection17ReflectionContextINS9_8ExternalINS9_15WithObjCInteropINS9_13RuntimeTargetILj8EEEEEEEEENS_14default_deleteISI_EEEENS8_INSB_INSC_INS9_13NoObjCInteropISF_EEEEEENSJ_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSL_SR_EEEEEEDcSV_DpT0_(v6);
          }
          (*(void (**)(unsigned int *, uint64_t *))(*(void *)*v3 + 48))(*v3, &v7);
        }
        double result = *v3;
        if (v3 - 3 == (unsigned int **)*v3)
        {
          double result = (unsigned int *)(*((uint64_t (**)(unsigned int **))*(v3 - 3) + 4))(v3 - 3);
        }
        else if (result)
        {
          double result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
      }
      v3 += 6;
      v4 += 48;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN5swift10reflection17ReflectionContextINS9_8ExternalINS9_15WithObjCInteropINS9_13RuntimeTargetILj8EEEEEEEEENS_14default_deleteISI_EEEENS8_INSB_INSC_INS9_13NoObjCInteropISF_EEEEEENSJ_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSL_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  if (v3) {
    std::default_delete<swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::operator()[abi:nn180100]((uint64_t)a2, v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN5swift10reflection17ReflectionContextINS9_8ExternalINS9_15WithObjCInteropINS9_13RuntimeTargetILj8EEEEEEEEENS_14default_deleteISI_EEEENS8_INSB_INSC_INS9_13NoObjCInteropISF_EEEEEENSJ_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSL_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  if (v3) {
    std::default_delete<swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::operator()[abi:nn180100]((uint64_t)a2, v3);
  }
}

double swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 2400;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)a1 = off_C9440;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 624) = a1;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 840) = 1065353216;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 880) = 1065353216;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 920) = 1065353216;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 960) = 1065353216;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1000) = 1065353216;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_DWORD *)(a1 + 1080) = 1065353216;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1120) = 1065353216;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1160) = 1065353216;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_DWORD *)(a1 + 1200) = 1065353216;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_DWORD *)(a1 + 1240) = 1065353216;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1280) = 1065353216;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_DWORD *)(a1 + 1320) = 1065353216;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1400) = 1065353216;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1440) = 1065353216;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_DWORD *)(a1 + 1480) = 1065353216;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_DWORD *)(a1 + 1520) = 1065353216;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_DWORD *)(a1 + 1560) = 1065353216;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_DWORD *)(a1 + 1600) = 1065353216;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_DWORD *)(a1 + 1640) = 1065353216;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(void *)(a1 + 1672) = a4;
  *(void *)(a1 + 1680) = off_CA3D0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1716) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_DWORD *)(a1 + 1768) = 1065353216;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_DWORD *)(a1 + 1808) = 1065353216;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_DWORD *)(a1 + 1848) = 1065353216;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_DWORD *)(a1 + 1888) = 1065353216;
  *(_DWORD *)(a1 + 1896) = 0;
  *(void *)(a1 + 1912) = 0;
  *(void *)(a1 + 1904) = 0;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1928) = a1;
  *(void *)(a1 + 1936) = a3;
  *(_DWORD *)(a1 + 1944) = 8;
  *(void *)(a1 + 1952) = off_C88F0;
  *(void *)(a1 + 1960) = a1;
  *(void *)(a1 + 1968) = a2;
  *(void *)(a1 + 1976) = a1 + 1952;
  *(void *)(a1 + 1984) = off_C8980;
  *(void *)(a1 + 1992) = a2;
  *(void *)(a1 + 2008) = a1 + 1984;
  *(void *)(a1 + 2016) = off_C89C8;
  *(void *)(a1 + 2024) = a2;
  *(void *)(a1 + 2040) = a1 + 2016;
  *(void *)(a1 + 2048) = off_C8A10;
  *(void *)(a1 + 2056) = a2;
  *(void *)(a1 + 2072) = a1 + 2048;
  *(void *)(a1 + 2080) = off_C8A58;
  *(void *)(a1 + 2088) = a2;
  *(void *)(a1 + 2104) = a1 + 2080;
  *(void *)(a1 + 2112) = off_C8AA0;
  *(void *)(a1 + 2120) = a2;
  *(void *)(a1 + 2136) = a1 + 2112;
  *(void *)(a1 + 2144) = off_C8AE8;
  *(void *)(a1 + 2152) = a2;
  *(void *)(a1 + 2168) = a1 + 2144;
  *(unsigned char *)(a1 + 2176) = 0;
  *(unsigned char *)(a1 + 2184) = 0;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::~__func()
{
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C88F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C88F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::operator()(uint64_t a1, uint64_t a2, char *a3)
{
  return std::__invoke_void_return_wrapper<swift::Demangle::__runtime::Node *,false>::__call[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1} &,swift::remote::RemoteRef<char>,BOOL>((uint64_t *)(a1 + 8), a2, a3);
}

unint64_t std::__invoke_void_return_wrapper<swift::Demangle::__runtime::Node *,false>::__call[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1} &,swift::remote::RemoteRef<char>,BOOL>(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(unsigned char **)(a2 + 8);
  char v4 = *a3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  v13[0] = *(void *)a2;
  v13[1] = v3;
  char v16 = v4;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v3, (const char *)a2);
  uint64_t v9 = v8;
  uint64_t v10 = operator new(0x28uLL);
  void *v10 = off_C8938;
  v10[1] = v13;
  v10[2] = v6;
  void v10[3] = &v16;
  v10[4] = v5;
  unint64_t v15 = v10;
  unint64_t v11 = swift::Demangle::__runtime::Demangler::demangleType(v5, (uint64_t)SymbolicMangledNameStringRef, v9, v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  return v11;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  char v21 = a5;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(*(unsigned char **)(a2 + 8), (const char *)a2);
  unint64_t v11 = v10;
  if (a3 == 1)
  {
    unint64_t v15 = operator new(0x28uLL);
    *unint64_t v15 = off_C8938;
    v15[1] = a2;
    v15[2] = a1;
    v15[3] = &v21;
    v15[4] = a4;
    size_t v18 = v15;
    unint64_t v13 = swift::Demangle::__runtime::Demangler::demangleSymbol(a4, SymbolicMangledNameStringRef, v11, v17);
    uint64_t v14 = v18;
    if (v18 == v17)
    {
      (*(void (**)(void *))(v17[0] + 32))(v17);
      return v13;
    }
  }
  else
  {
    if (a3) {
      return 0;
    }
    uint64_t v12 = operator new(0x28uLL);
    *uint64_t v12 = off_C8938;
    v12[1] = a2;
    void v12[2] = a1;
    v12[3] = &v21;
    v12[4] = a4;
    uint64_t v20 = v12;
    unint64_t v13 = swift::Demangle::__runtime::Demangler::demangleType(a4, (uint64_t)SymbolicMangledNameStringRef, v11, v19);
    uint64_t v14 = v20;
    if (v20 == v19)
    {
      (*(void (**)(void *))(v19[0] + 32))(v19);
      return v13;
    }
  }
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  return v13;
}

void std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::~__func()
{
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_C8938;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C8938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

swift::Demangle::__runtime::Node *std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::operator()(uint64_t a1, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5)
{
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(a1 + 8, *a2, *a3, *a4, *a5);
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = a5 + a4 - *(void *)(*(void *)a1 + 8) + **(void **)a1;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  if (a3 == 1)
  {
    swift::remote::MemoryReader::readPointer(*(void *)(v7 + 2488), v8, 8u, (uint64_t)__s);
    if (!v36)
    {
LABEL_78:
      Node = 0;
      goto LABEL_79;
    }
    if ((__s[23] & 0x80000000) != 0)
    {
      if (*(void *)&__s[8])
      {
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        goto LABEL_9;
      }
    }
    else if (__s[23])
    {
      std::string v34 = *(std::string *)__s;
LABEL_9:
      uint64_t v9 = *(void *)&__s[24];
LABEL_11:
      *(_OWORD *)std::string __p = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(void *)&long long v38 = *((void *)&v34.__r_.__value_.__l + 2);
      *((void *)&v38 + 1) = v9;
      if (v36 && (__s[23] & 0x80000000) != 0) {
        operator delete(*(void **)__s);
      }
      goto LABEL_14;
    }
    uint64_t v9 = *(void *)(v7 + 2504) & *(void *)&__s[24];
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 0;
    v34.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_11;
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(v7 + 2488) + 56))(__s);
  *(_OWORD *)std::string __p = *(_OWORD *)__s;
  uint64_t v9 = *(void *)&__s[24];
  long long v38 = *(_OWORD *)&__s[16];
LABEL_14:
  Node = 0;
  switch(a2)
  {
    case 0:
      if ((SBYTE7(v38) & 0x80u) == 0) {
        size_t v11 = BYTE7(v38);
      }
      else {
        size_t v11 = (size_t)__p[1];
      }
      if (v11)
      {
        if (v9) {
          goto LABEL_78;
        }
        if ((SBYTE7(v38) & 0x80u) == 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        __s[0] = 0;
        if (v11 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v11 >= 0x17)
        {
          uint64_t v31 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17) {
            uint64_t v31 = v11 | 7;
          }
          uint64_t v32 = v31 + 1;
          unint64_t v13 = operator new(v31 + 1);
          *(void *)&__s[16] = v11;
          *(void *)&__s[24] = v32 | 0x8000000000000000;
          *(void *)&__s[8] = v13;
        }
        else
        {
          unint64_t v13 = &__s[8];
          __s[31] = v11;
        }
        memmove(v13, v12, v11);
        v13[v11] = 0;
        if (!__s[0]) {
          goto LABEL_82;
        }
      }
      else
      {
        ((void (*)(std::string *__return_ptr, uint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v34, v7, v9);
        __s[0] = 1;
        *(_OWORD *)&__s[8] = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      }
      if (!*(void *)&__s[16]) {
        goto LABEL_78;
      }
      if (**(unsigned char **)(a1 + 16) && (**(_DWORD **)&__s[16] & 0x1F) == 4)
      {
        uint64_t v14 = *(void **)(a1 + 24);
        uint64_t v16 = *(void *)&__s[8];
        __int16 v15 = 301;
        goto LABEL_29;
      }
LABEL_82:
      Node = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v7, (uint64_t)__s, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24));
      if (!__s[0] && (__s[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__s[8]);
      }
      break;
    case 2:
      uint64_t v14 = *(void **)(a1 + 24);
      __int16 v15 = 336;
      goto LABEL_28;
    case 3:
      uint64_t v14 = *(void **)(a1 + 24);
      __int16 v15 = 337;
LABEL_28:
      uint64_t v16 = v9;
LABEL_29:
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v14, v15, v16);
      break;
    case 4:
      uint64_t v17 = (void *)BYTE7(v38);
      int v18 = SBYTE7(v38);
      if (SBYTE7(v38) < 0) {
        uint64_t v17 = __p[1];
      }
      if (v17)
      {
        if (SBYTE7(v38) < 0) {
          operator delete(__p[0]);
        }
        int v18 = 0;
        LOBYTE(__p[0]) = 0;
      }
      else
      {
        uint64_t v8 = v9;
      }
      uint64_t v19 = v8 + 4;
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      (*(void (**)(void, uint64_t, std::string *, uint64_t))(**(void **)(v7 + 2488) + 32))(*(void *)(v7 + 2488), v19, &v34, 4);
      uint64_t v20 = (char *)(v19 + SLODWORD(v34.__r_.__value_.__l.__data_));
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v7 + 2488) + 56))(__s);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      *(void *)&long long v38 = *(void *)&__s[16];
      *(_OWORD *)std::string __p = *(_OWORD *)__s;
      uint64_t v21 = HIBYTE(*(void *)&__s[16]);
      if (__s[23] < 0) {
        uint64_t v21 = *(void *)&__s[8];
      }
      if (v21)
      {
        if ((__s[23] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
        LOBYTE(__p[0]) = 0;
        BYTE7(v38) = 0;
      }
      else
      {
        uint64_t v20 = *(char **)&__s[24];
      }
      unint64_t MangledName = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(v7, v20, 0, *(void **)(a1 + 24));
      if (!MangledName) {
        goto LABEL_78;
      }
      int v23 = *(unsigned __int8 *)(MangledName + 18);
      if ((v23 - 1) < 2) {
        goto LABEL_52;
      }
      if (v23 != 5 || !*(_DWORD *)(MangledName + 8)) {
        goto LABEL_78;
      }
      unint64_t MangledName = *(void *)MangledName;
LABEL_52:
      unint64_t v24 = *(void *)MangledName;
      if (!*(void *)MangledName) {
        goto LABEL_78;
      }
      int v25 = *(unsigned __int8 *)(v24 + 18);
      if ((v25 - 1) < 2) {
        goto LABEL_57;
      }
      if (v25 != 5 || !*(_DWORD *)(v24 + 8)) {
        goto LABEL_78;
      }
      unint64_t v24 = *(void *)v24;
LABEL_57:
      unint64_t v26 = *(swift::Demangle::__runtime::Node **)v24;
      if (!v26) {
        goto LABEL_78;
      }
      int v27 = *((unsigned __int8 *)v26 + 18);
      if ((v27 - 1) < 2) {
        goto LABEL_62;
      }
      if (v27 != 5 || !*((_DWORD *)v26 + 2)) {
        goto LABEL_78;
      }
      unint64_t v26 = *(swift::Demangle::__runtime::Node **)v26;
LABEL_62:
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)v26;
      if (!v28) {
        goto LABEL_78;
      }
      int v29 = *((unsigned __int8 *)v28 + 18);
      if ((v29 - 1) < 2) {
        goto LABEL_67;
      }
      if (v29 != 5 || !*((_DWORD *)v28 + 2)) {
        goto LABEL_78;
      }
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)v28;
LABEL_67:
      uint64_t v30 = *(swift::Demangle::__runtime::Node **)v28;
      if (!*(void *)v28 || *((_WORD *)v30 + 8) != 180) {
        goto LABEL_78;
      }
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 24), 232);
      swift::Demangle::__runtime::Node::addChild(Node, v30, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24));
      break;
    default:
      break;
  }
LABEL_79:
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  return Node;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  if (*(unsigned char *)a2)
  {
    char v4 = *(_DWORD **)(a2 + 16);
    v12[0] = *(void *)(a2 + 8);
    v12[1] = v4;
    uint64_t v5 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v12, a3, 50);
    if (v5 && ((*v4 & 0x10) != 0 || (*v4 & 0x1F) == 3))
    {
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
      swift::Demangle::__runtime::Node::addChild(Node, v5, a3);
      return (uint64_t)Node;
    }
    return (uint64_t)v5;
  }
  else
  {
    int v8 = *(char *)(a2 + 31);
    unint64_t v9 = *(void *)(a2 + 16);
    if (v8 >= 0) {
      unint64_t v10 = (_WORD *)(a2 + 8);
    }
    else {
      unint64_t v10 = *(_WORD **)(a2 + 8);
    }
    if (v8 >= 0) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v9;
    }
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v10, v11, (uint64_t)a3);
  }
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(uint64_t a1, char *a2, int a3, void *a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = 0;
  memset(&v33, 0, sizeof(v33));
  do
  {
    std::string __p = 0;
    std::string::size_type v31 = 0;
    uint64_t v32 = 0;
    if (!(*(unsigned int (**)(void, char *, void **))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v5, &__p))
    {
      int v16 = 1;
      if ((SHIBYTE(v32) & 0x80000000) == 0) {
        continue;
      }
LABEL_26:
      operator delete(__p);
      continue;
    }
    if (v32 >= 0) {
      std::string::size_type v8 = HIBYTE(v32);
    }
    else {
      std::string::size_type v8 = v31;
    }
    v5 += v8 + 1;
    if (v32 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    std::string::append(&v33, p_p, v8);
    unsigned int v10 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v10 = v33.__r_.__value_.__r.__words[1];
    }
    unint64_t v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v11 = &v33;
    }
    while (1)
    {
      uint64_t v12 = v7;
      if (v7 >= v10) {
        break;
      }
      int v13 = v11->__r_.__value_.__s.__data_[v7];
      unsigned int v14 = v13 - 1;
      if ((v13 & 0xF8) == 0x18) {
        int v15 = 9;
      }
      else {
        int v15 = 1;
      }
      if (v14 < 0x17) {
        int v15 = 5;
      }
      uint64_t v7 = (v15 + v7);
      if (v7 > v10)
      {
        std::string::push_back(&v33, 0);
        int v16 = 2;
        goto LABEL_25;
      }
    }
    int v16 = 3;
LABEL_25:
    uint64_t v7 = v12;
    if (SHIBYTE(v32) < 0) {
      goto LABEL_26;
    }
  }
  while (v16 == 2);
  if (v16 == 3)
  {
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    char v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    size_t v19 = size + 1;
    uint64_t v20 = (char *)a4[1];
    if (!v20 || (unint64_t)&v20[v19] > a4[2])
    {
      unint64_t v21 = 2 * a4[4];
      unint64_t v22 = size + 2;
      if (v21 <= v22) {
        unint64_t v21 = v22;
      }
      a4[4] = v21;
      unint64_t v23 = v21 + 8;
      unint64_t v24 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *unint64_t v24 = a4[3];
      uint64_t v20 = (char *)(v24 + 1);
      a4[2] = (char *)v24 + v23;
      a4[3] = v24;
      char v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    a4[1] = &v20[v19];
    if (v18 >= 0) {
      int v25 = &v33;
    }
    else {
      int v25 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    memcpy(v20, v25, v19);
    std::string __p = a2;
    std::string::size_type v31 = (std::string::size_type)v20;
    unint64_t v26 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(a1, (uint64_t)&__p, a3, (uint64_t)a4, 0);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
LABEL_41:
    }
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    unint64_t v26 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_41;
    }
  }
  return v26;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, void *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  uint64_t v6 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v9, a3, 50);
  if (v6 && ((*(_DWORD *)a2[1] & 0x10) != 0 || (*(_DWORD *)a2[1] & 0x1F) == 3))
  {
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, v6, a3);
    return Node;
  }
  return v6;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, void *a2, swift::Demangle::__runtime::NodeFactory *a3, int a4)
{
  int v4 = a4 - 1;
  if (a4 < 1) {
    return 0;
  }
  uint64_t v8 = a2[1];
  v104[0] = *a2;
  v104[1] = v8;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v104, (uint64_t)v105);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v9 = a2[1];
  v101[0] = *a2;
  v101[1] = v9;
  uint64_t v102 = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(a1, v101, (uint64_t)v105, a3, (unint64_t *)&v103);
  if (!v107) {
    return 0;
  }
  LOBYTE(v93) = v105[0];
  if (v105[0])
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
    if (!v106.__r_.__value_.__l.__size_)
    {
      uint64_t v10 = 0;
      goto LABEL_11;
    }
  }
  else if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else
  {
    std::string __p = v106;
  }
  uint64_t v10 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, (uint64_t)&v93, (uint64_t)a3, v4);
  if (v10 | v103)
  {
LABEL_11:
    int v13 = 1;
    if ((_BYTE)v93) {
      goto LABEL_16;
    }
LABEL_14:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_16;
  }
  uint64_t v10 = 0;
  int v13 = 0;
  if (!(_BYTE)v93) {
    goto LABEL_14;
  }
LABEL_16:
  if (!v13)
  {
    Node = 0;
    if (!v107) {
      return Node;
    }
    goto LABEL_170;
  }
  if (v103 && (!v10 || *(_WORD *)(v10 + 16) == 1)) {
    uint64_t v10 = v103;
  }
  Node = 0;
  LOBYTE(v93) = 0;
  char v100 = 0;
  v92[0] = &v102;
  v92[1] = a1;
  v92[2] = a2;
  v92[3] = &v93;
  v92[4] = a3;
  unsigned int v14 = (char *)a2[1];
  int v15 = v14;
  switch(*(_DWORD *)v14 & 0x1F)
  {
    case 0:
      if (v10) {
        goto LABEL_136;
      }
      if (v14)
      {
        int v16 = (int *)(a2[1] + 8);
      }
      else
      {
        int v15 = 0;
        int v16 = &dword_8;
      }
      uint64_t v67 = *v16;
      unsigned __int8 v68 = (char *)((char *)v16 + *a2 - v15 + v67);
      if (v67) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = 0;
      }
      *(void *)__str = 0;
      size_t v88 = 0;
      uint64_t v89 = 0;
      Node = 0;
      if ((*(unsigned int (**)(void, char *, char *))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v69, __str))
      {
        if (v89 >= 0) {
          uint64_t v70 = __str;
        }
        else {
          uint64_t v70 = *(char **)__str;
        }
        if (v89 >= 0) {
          size_t v71 = HIBYTE(v89);
        }
        else {
          size_t v71 = v88;
        }
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 153, v70, v71);
      }
      if ((SHIBYTE(v89) & 0x80000000) == 0) {
        goto LABEL_137;
      }
      operator delete(*(void **)__str);
      if (v100) {
        goto LABEL_138;
      }
      goto LABEL_169;
    case 1:
      if (!v10) {
        goto LABEL_136;
      }
      if (v14)
      {
        uint64_t v17 = (unsigned char *)a2[1];
        char v18 = (int *)(v17 + 8);
      }
      else
      {
        uint64_t v17 = 0;
        int v15 = 0;
        char v18 = &dword_8;
      }
      uint64_t v35 = *v18;
      char v36 = (char *)((char *)v18 + *a2 - v15 + v35);
      uint64_t v37 = v35 ? v36 : 0;
      unint64_t MangledName = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v37, 0, a3);
      if (!MangledName) {
        goto LABEL_136;
      }
      uint64_t v39 = (swift::Demangle::__runtime::Node *)MangledName;
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 71);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3);
      swift::Demangle::__runtime::Node::addChild(Node, v39, a3);
      unint64_t GenericRequirements = swift::TrailingGenericContextObjects<swift::TargetExtensionContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader>::getGenericRequirements(v17);
      if (!v41) {
        goto LABEL_137;
      }
      unint64_t v42 = GenericRequirements;
      uint64_t v43 = v41;
      int v85 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 43);
      char v44 = 0;
      int v45 = (int *)(v42 + 8);
      uint64_t v46 = 12 * v43;
      uint64_t v47 = v45;
      while (2)
      {
        if (v44) {
          goto LABEL_137;
        }
        uint64_t v48 = *(v45 - 1);
        char v49 = v48 ? (char *)v47 + *a2 + v48 - a2[1] - 4 : 0;
        unint64_t v50 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v49, 0, a3);
        if (!v50) {
          goto LABEL_137;
        }
        uint64_t v51 = (swift::Demangle::__runtime::Node *)v50;
        int v52 = *(v45 - 2) & 0x1F;
        if ((v52 - 1) >= 2)
        {
          if (v52 == 31)
          {
            uint64_t v62 = (char *)v47 + *a2 - a2[1];
            *(_DWORD *)__str = 0;
            int v63 = (*(uint64_t (**)(void, char *, char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v62, __str, 4);
            if (*(_DWORD *)__str) {
              int v64 = 0;
            }
            else {
              int v64 = v63;
            }
            if (v64 == 1)
            {
              uint64_t v65 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 41);
              swift::Demangle::__runtime::Node::addChild(v65, v51, a3);
              uint64_t v66 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, "C");
              swift::Demangle::__runtime::Node::addChild(v65, v66, a3);
              swift::Demangle::__runtime::Node::addChild(v85, v65, a3);
            }
            char v44 = v64 ^ 1;
          }
          else
          {
            if (!v52)
            {
              uint64_t v53 = a2[1];
              v91[0] = *a2;
              v91[1] = v53;
              *(void *)__str = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectProtocol<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>(a1, v91, (uint64_t)v45);
              unint64_t v54 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(a1, (uint64_t)__str, a3);
              if (v54)
              {
                uint64_t v55 = v54;
                unint64_t v56 = a3;
                __int16 v57 = 36;
LABEL_98:
                uint64_t v61 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v56, v57);
                swift::Demangle::__runtime::Node::addChild(v61, v51, a3);
                swift::Demangle::__runtime::Node::addChild(v61, v55, a3);
                swift::Demangle::__runtime::Node::addChild(v85, v61, a3);
                char v44 = 0;
                goto LABEL_79;
              }
              goto LABEL_78;
            }
            char v44 = 0;
          }
LABEL_79:
          v47 += 3;
          v45 += 3;
          v46 -= 12;
          if (!v46)
          {
            if (v44) {
              goto LABEL_137;
            }
            unint64_t v21 = Node;
            unint64_t v22 = v85;
            goto LABEL_168;
          }
          continue;
        }
        break;
      }
      uint64_t v58 = *v45;
      if (v58) {
        unint64_t v59 = (char *)v47 + *a2 + v58 - a2[1];
      }
      else {
        unint64_t v59 = 0;
      }
      unint64_t v60 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v59, 0, a3);
      if (v60)
      {
        uint64_t v55 = (swift::Demangle::__runtime::Node *)v60;
        if ((*(v45 - 2) & 0x1F) == 1) {
          __int16 v57 = 39;
        }
        else {
          __int16 v57 = 36;
        }
        unint64_t v56 = a3;
        goto LABEL_98;
      }
LABEL_78:
      char v44 = 1;
      goto LABEL_79;
    case 2:
      snprintf(__str, 0x12uLL, "$%llx", *a2);
      Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 1);
      v90[0] = 0;
      v90[1] = 0;
      size_t v19 = strlen(__str);
      swift::Demangle::__runtime::CharVector::append(v90, __str, v19, a3);
      uint64_t v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, (uint64_t *)v90);
      swift::Demangle::__runtime::Node::addChild(Node, v20, a3);
      if (!v10) {
        goto LABEL_137;
      }
      unint64_t v21 = Node;
      unint64_t v22 = (swift::Demangle::__runtime::Node *)v10;
      goto LABEL_168;
    case 3:
      if (!swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92)) {
        goto LABEL_136;
      }
      char v23 = 0;
      __int16 v24 = 180;
      goto LABEL_53;
    case 4:
      Node = 0;
      if (!v107 || !v105[0] || !v106.__r_.__value_.__l.__size_) {
        goto LABEL_137;
      }
      int v25 = *(unsigned __int16 *)(v10 + 16);
      if (v25 == 153)
      {
        unint64_t v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
        Node = v21;
        unint64_t v22 = (swift::Demangle::__runtime::Node *)v10;
        goto LABEL_168;
      }
      if (v25 != 1) {
        goto LABEL_136;
      }
      long long v86 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
      unint64_t v26 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(a1, &v86, a3);
      if (!v26) {
        goto LABEL_136;
      }
      int v27 = (swift::Demangle::__runtime::Node *)v26;
      if (*(_WORD *)(v26 + 16) != 99) {
        goto LABEL_174;
      }
      int v28 = *(unsigned __int8 *)(v26 + 18);
      if ((v28 - 1) < 2) {
        goto LABEL_46;
      }
      if (v28 == 5 && *(_DWORD *)(v26 + 8))
      {
        int v27 = *(swift::Demangle::__runtime::Node **)v26;
LABEL_46:
        int v27 = *(swift::Demangle::__runtime::Node **)v27;
      }
      else
      {
        int v27 = 0;
      }
LABEL_174:
      unint64_t v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
      Node = v21;
      unint64_t v22 = v27;
      goto LABEL_168;
    case 0x10:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92) & 1) == 0) {
        goto LABEL_136;
      }
      char v23 = 0;
      __int16 v24 = 24;
      goto LABEL_53;
    case 0x11:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92) & 1) == 0) {
        goto LABEL_136;
      }
      char v23 = 0;
      __int16 v24 = 219;
      goto LABEL_53;
    case 0x12:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v92) & 1) == 0) {
        goto LABEL_136;
      }
      char v23 = 1;
      __int16 v24 = 61;
LABEL_53:
      if (!v10) {
        goto LABEL_136;
      }
      if (!v100) {
        goto LABEL_131;
      }
      int v29 = (unsigned __int16 **)v10;
      while (2)
      {
        if (*((_WORD *)v29 + 8) != 153)
        {
          int v30 = *((unsigned __int8 *)v29 + 18);
          if ((v30 - 1) >= 2)
          {
            if (v30 != 5 || !*((_DWORD *)v29 + 2)) {
              goto LABEL_131;
            }
            int v29 = (unsigned __int16 **)*v29;
          }
          int v29 = (unsigned __int16 **)*v29;
          if (!v29) {
            goto LABEL_131;
          }
          continue;
        }
        break;
      }
      if (v29[1] == (unsigned __int16 *)((char *)&dword_0 + 3))
      {
        std::string::size_type v31 = *v29;
        int v32 = *v31;
        int v33 = *((unsigned __int8 *)v31 + 2);
        if (v32 == 24415 && v33 == 67)
        {
          if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p.__r_.__value_.__r.__words[2], "t"))
          {
            __int16 v24 = 234;
          }
          else
          {
            uint64_t v72 = v96;
            if ((v96 & 0x80u) != 0) {
              uint64_t v72 = v95;
            }
            if (!v72)
            {
              uint64_t v73 = v99;
              if ((v99 & 0x80u) != 0) {
                uint64_t v73 = v98;
              }
              if ((v23 & (v73 == 0)) != 0) {
                __int16 v24 = 219;
              }
            }
          }
        }
      }
LABEL_131:
      if (*(_WORD *)(v10 + 16) != 1 || *((_WORD *)v102 + 8) != 101) {
        goto LABEL_158;
      }
      int v74 = *(unsigned __int8 *)(v10 + 18);
      if (v74 == 2 || v74 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
      {
        uint64_t v75 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 176);
        int v76 = v75;
        int v77 = *(unsigned __int8 *)(v10 + 18);
        v78 = (swift::Demangle::__runtime::Node **)v10;
        if ((v77 - 1) >= 2)
        {
          if (v77 != 5 || !*(_DWORD *)(v10 + 8))
          {
            v79 = 0;
            goto LABEL_152;
          }
          v78 = *(swift::Demangle::__runtime::Node ***)v10;
        }
        v79 = *v78;
LABEL_152:
        swift::Demangle::__runtime::Node::addChild(v75, v79, a3);
        swift::Demangle::__runtime::Node::addChild(v76, v102, a3);
        uint64_t v102 = v76;
        int v80 = *(unsigned __int8 *)(v10 + 18);
        if (v80 == 2)
        {
LABEL_156:
          uint64_t v10 = *(void *)(v10 + 8);
          goto LABEL_158;
        }
        if (v80 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
        {
          uint64_t v10 = *(void *)v10;
          goto LABEL_156;
        }
        uint64_t v10 = 0;
LABEL_158:
        if (v100)
        {
          size_t v81 = (v99 & 0x80u) == 0 ? v99 : v98;
          if (v81)
          {
            if ((v99 & 0x80u) == 0) {
              unint64_t v82 = &v97;
            }
            else {
              unint64_t v82 = v97;
            }
            int v83 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, v82, v81);
            int v84 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 205);
            swift::Demangle::__runtime::Node::addChild(v84, v83, a3);
            swift::Demangle::__runtime::Node::addChild(v84, v102, a3);
            uint64_t v102 = v84;
          }
        }
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, v24);
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3);
        unint64_t v22 = v102;
        unint64_t v21 = Node;
LABEL_168:
        swift::Demangle::__runtime::Node::addChild(v21, v22, a3);
        if (!v100) {
          goto LABEL_169;
        }
        goto LABEL_138;
      }
LABEL_136:
      Node = 0;
LABEL_137:
      if (!v100) {
        goto LABEL_169;
      }
LABEL_138:
      if (((char)v99 & 0x80000000) == 0)
      {
        if (((char)v96 & 0x80000000) == 0) {
          goto LABEL_140;
        }
        goto LABEL_143;
      }
      operator delete(v97);
      if ((char)v96 < 0)
      {
LABEL_143:
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__s.__data_[15] < 0) {
          goto LABEL_144;
        }
LABEL_169:
        if (!v107) {
          return Node;
        }
        goto LABEL_170;
      }
LABEL_140:
      if ((__p.__r_.__value_.__s.__data_[15] & 0x80000000) == 0) {
        goto LABEL_169;
      }
LABEL_144:
      operator delete(v93);
      if (!v107) {
        return Node;
      }
LABEL_170:
      if (!v105[0] && SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      return Node;
    default:
      goto LABEL_137;
  }
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectableField<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,swift::RelativeIndirectablePointer<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,true,int,swift::RuntimeTarget<8u>::StoredSignedPointer>>(a1, v18, (int *)(v5 + 4), (uint64_t)__p);
  if (!v22) {
    goto LABEL_7;
  }
  if ((v20 & 0x80u) == 0) {
    size_t v6 = v20;
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  if (v6)
  {
    if (v21)
    {
LABEL_7:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 32) = 0;
      goto LABEL_8;
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    LOBYTE(v15) = 0;
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v6 >= 0x17)
    {
      uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v11 = v6 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v10 = (long long *)operator new(v11 + 1);
      *((void *)&v16 + 1) = v6;
      unint64_t v17 = v12 | 0x8000000000000000;
      *(void *)&long long v16 = v10;
    }
    else
    {
      HIBYTE(v17) = v6;
      uint64_t v10 = &v16;
    }
    memmove(v10, v9, v6);
    *((unsigned char *)v10 + v6) = 0;
    int v13 = v15;
    *(unsigned char *)a3 = v15;
    if (v13)
    {
      uint64_t v14 = *((void *)&v16 + 1);
      *(void *)(a3 + 8) = v16;
      *(void *)(a3 + 16) = v14;
    }
    else
    {
      *(_OWORD *)(a3 + 8) = v16;
      *(void *)(a3 + 24) = v17;
    }
    *(unsigned char *)(a3 + 32) = 1;
  }
  else if (v21)
  {
    ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v15, a1, v21);
    uint64_t v7 = v16;
    if (!(void)v16) {
      goto LABEL_7;
    }
    uint64_t v8 = v15;
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v7;
    *(unsigned char *)(a3 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 32) = 1;
  }
LABEL_8:
  if (v22)
  {
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(uint64_t a1, void *a2, uint64_t a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = 0;
  *a5 = 0;
  size_t v6 = *(char **)(a3 + 16);
  if (*(unsigned char *)(a3 + 32)) {
    BOOL v7 = *(unsigned char *)a3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 0) {
    return v5;
  }
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v15 = (_DWORD *)a2[1];
  if (v15) {
    BOOL v16 = (*v15 & 0x10) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (!v15) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v17 = a2[1];
    uint64_t v18 = 0;
    if (!v15) {
      goto LABEL_18;
    }
  }
  if ((*v15 & 0x1F) == 3) {
    uint64_t v18 = a2[1];
  }
LABEL_18:
  if (!(v17 | v18) || (*(_DWORD *)v6 & 0x1F) != 2) {
    return 0;
  }
  uint64_t v5 = 0;
  if (v6 && (*(_DWORD *)v6 & 0x10000) != 0)
  {
    unint64_t TrailingObjectsImpl = (int *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(*(unsigned char **)(a3 + 16));
    uint64_t v20 = *TrailingObjectsImpl;
    if (v20) {
      uint64_t v21 = (char *)((char *)TrailingObjectsImpl + v14 - v6 + v20);
    }
    else {
      uint64_t v21 = 0;
    }
    unint64_t MangledName = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v21, 1, a4);
    if (!MangledName) {
      return 0;
    }
    unint64_t v23 = MangledName;
    if (*(_WORD *)(MangledName + 16) == 99)
    {
      int v24 = *(unsigned __int8 *)(MangledName + 18);
      if ((v24 - 1) < 2)
      {
LABEL_31:
        unint64_t v23 = *(void *)v23;
        goto LABEL_33;
      }
      if (v24 == 5 && *(_DWORD *)(MangledName + 8))
      {
        unint64_t v23 = *(void *)MangledName;
        goto LABEL_31;
      }
      unint64_t v23 = 0;
    }
LABEL_33:
    int v25 = *(unsigned __int8 *)(v23 + 18);
    unint64_t v26 = v23;
    if (v25 != 2)
    {
      if (v25 != 5 || *(_DWORD *)(v23 + 8) < 2u) {
        return 0;
      }
      unint64_t v26 = *(void *)v23;
    }
    uint64_t v5 = *(uint64_t **)(v26 + 8);
    int v27 = *((unsigned __int16 *)v5 + 8);
    if (v27 == 176 || v27 == 137)
    {
      int v28 = *((unsigned __int8 *)v5 + 18);
      int v29 = v5;
      if (v28 == 2)
      {
LABEL_43:
        uint64_t v30 = v29[1];
        if (*(_WORD *)(v30 + 16) == 101 && *(unsigned char *)(v30 + 18) == 3)
        {
          v48[0] = 0;
          v48[72] = 0;
          uint64_t v31 = a2[1];
          v44[0] = *a2;
          v44[1] = v31;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(a1, v44, (uint64_t)v48, (uint64_t)v45);
          if (!v47)
          {
            uint64_t v5 = 0;
LABEL_73:
            std::optional<swift::TypeImportInfo<std::string>>::~optional((uint64_t)v48);
            return v5;
          }
          unsigned __int8 v32 = v46;
          if ((v46 & 0x80u) == 0) {
            int v33 = v45;
          }
          else {
            int v33 = (void **)v45[0];
          }
          if ((v46 & 0x80u) == 0) {
            size_t v34 = v46;
          }
          else {
            size_t v34 = (size_t)v45[1];
          }
          if (v34 != *(void *)(v30 + 8) || v34 && memcmp(v33, *(const void **)v30, v34))
          {
            uint64_t v5 = 0;
            BOOL v35 = 1;
LABEL_70:
            if (v35 && (v32 & 0x80) != 0) {
              operator delete(v45[0]);
            }
            goto LABEL_73;
          }
          v39[0] = v14;
          v39[1] = v6;
          swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v39, (uint64_t)v40);
          std::__optional_storage_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>>(a3, v40);
          if (v43 && !v40[0] && v42 < 0) {
            operator delete(__p);
          }
          int v37 = *(unsigned __int8 *)(v23 + 18);
          if ((v37 - 1) >= 2)
          {
            if (v37 != 5 || !*(_DWORD *)(v23 + 8))
            {
              unint64_t v38 = 0;
              goto LABEL_69;
            }
            unint64_t v23 = *(void *)v23;
          }
          unint64_t v38 = *(void *)v23;
LABEL_69:
          *a5 = v38;
          unsigned __int8 v32 = v46;
          BOOL v35 = v47 != 0;
          goto LABEL_70;
        }
        return 0;
      }
      if (v28 == 5 && *((_DWORD *)v5 + 2) >= 2u)
      {
        int v29 = (uint64_t *)*v5;
        goto LABEL_43;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 0;
  }
  v14[2] = v4;
  void v14[3] = v5;
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    v14[0] = *(void *)(a2 + 8);
    v14[1] = v7;
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v14, a3);
  }
  else
  {
    uint64_t v11 = *(_WORD **)(a2 + 8);
    uint64_t v9 = a2 + 8;
    uint64_t v10 = v11;
    if (*(char *)(v9 + 23) < 0)
    {
      unint64_t v12 = *(void *)(v9 + 8);
    }
    else
    {
      uint64_t v10 = (_WORD *)v9;
      unint64_t v12 = *(unsigned __int8 *)(v9 + 23);
    }
    uint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v10, v12, a3);
    if (result && *(_WORD *)(result + 16) == 232)
    {
      int v13 = *(unsigned __int8 *)(result + 18);
      if ((v13 - 1) >= 2)
      {
        if (v13 != 5 || !*(_DWORD *)(result + 8)) {
          return 0;
        }
        uint64_t result = *(void *)result;
      }
      return *(void *)result;
    }
  }
  return result;
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  ((void (*)(uint64_t *__return_ptr))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v9);
  uint64_t v5 = v10;
  if (!v10) {
    return 0;
  }
  v11[0] = v9;
  v11[1] = v10;
  size_t v6 = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v11, a3);
  if (v6 && ((*v5 & 0x10) != 0 || (*v5 & 0x1F) == 3))
  {
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, v6, a3);
    return Node;
  }
  return v6;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(uint64_t a1, void *a2, void *a3)
{
  if (a2[1]) {
    size_t v6 = (unsigned char *)a2[1];
  }
  else {
    size_t v6 = 0;
  }
  if ((v6[2] & 1) == 0) {
    return 0;
  }
  if (!v6) {
    size_t v6 = 0;
  }
  unint64_t TrailingObjectsImpl = (int *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetAnonymousContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMangledContextName<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>::getTrailingObjectsImpl(v6);
  uint64_t v9 = *TrailingObjectsImpl;
  if (v9) {
    uint64_t v10 = (char *)TrailingObjectsImpl + *a2 - a2[1] + v9;
  }
  else {
    uint64_t v10 = 0;
  }

  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v10, 1, a3);
}

swift::Demangle::__runtime::Node *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  ((void (*)(uint64_t *__return_ptr))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v9);
  uint64_t v5 = v10;
  if (!v10) {
    return 0;
  }
  v11[0] = v9;
  v11[1] = v10;
  size_t v6 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v11, a3, 50);
  if (v6 && ((*v5 & 0x10) != 0 || (*v5 & 0x1F) == 3))
  {
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, v6, a3);
    return Node;
  }
  return v6;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8980;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8980;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor(*(void *)(a1 + 8), *a3, (uint64_t)v4);
  if (v5 == 1)
  {
    ((void (*)(void, uint64_t, void))v4[1])(v4[0], 3, 0);
  }
  else if (!v5)
  {
    return v4[0];
  }
  return 0;
}

void *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  v14[1] = 0;
  v14[2] = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 2400;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v53 = 0;
  v14[0] = off_C9440;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  int v51 = 0;
  ((void (*)(uint64_t *__return_ptr))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v54);
  if (v55
    && (*(_DWORD *)v55 & 0x1F) == 4
    && HIWORD(*(_DWORD *)v55) > a2
    && ((size_t v6 = v55,
         uint64_t v7 = v54,
         uint64_t v8 = (int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v55)
                    + 4 * a2),
         uint64_t v9 = *v8,
         uint64_t v10 = (char *)v8 + v7 - (void)v6 + v9,
         v9)
      ? (uint64_t v11 = v10)
      : (uint64_t v11 = 0),
        (unint64_t MangledName = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v11, 0, v14)) != 0))
  {
    uint64_t v54 = a1 + 296;
    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v54, MangledName, 0, (void *)a3);
  }
  else
  {
    *(_WORD *)(a3 + 16) = 1;
    *(void *)a3 = "Failed to read type mangling for descriptor.";
    *(void *)(a3 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
  }
  v14[0] = off_C9440;
  if (v53 == v52)
  {
    (*(void (**)(void *))(v52[0] + 32))(v52);
  }
  else if (v53)
  {
    (*(void (**)(void *))(*v53 + 40))(v53);
  }
  v14[0] = off_C9418;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v15);
  if (v17) {
    *(unsigned char *)(v17 + 48) = 0;
  }
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C89C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C89C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::operator()(uint64_t a1, void *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 8) + 2488) + 24))(*(void *)(*(void *)(a1 + 8) + 2488), *a2, *a3);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8A10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 2488) + 16))(*(void *)(*(void *)(a1 + 8) + 2488), *a2);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8A58;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  return swift::remote::MemoryReader::readPointer(*(void *)(*(void *)(a1 + 8) + 2488), *a2, *a3, a4);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C8AA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8AA0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 2488) + 64))(&v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  uint64_t v4 = v7;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_C8AE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8AE8;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v3 = swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}::operator()(a1 + 8, (uint64_t)__p, *a3);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void SwiftReflectionContext::~SwiftReflectionContext(SwiftReflectionContext *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (!v2)
  {
LABEL_35:
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::~__func(v17);
    return;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v5 = *(void *)(v3 + 24);
      if (!v5) {
        break;
      }
      if (v3 == v5)
      {
        uint64_t v19 = v18;
        (*(void (**)(void, void *))(**(void **)(v3 + 24) + 24))(*(void *)(v3 + 24), v18);
        uint64_t v6 = (uint64_t)v19;
        if (!v19) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
        uint64_t v19 = (void *)v6;
        if (!v6) {
          goto LABEL_35;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      if (v19 == v18)
      {
        (*(void (**)(void *))(v18[0] + 32))(v18);
      }
      else if (v19)
      {
        (*(void (**)(void))(*v19 + 40))();
      }
      v3 += 32;
      if (v3 == v4) {
        goto LABEL_14;
      }
    }
    uint64_t v19 = 0;
    goto LABEL_35;
  }
LABEL_14:
  uint64_t v7 = (SwiftReflectionContext *)*((void *)this + 11);
  if (v7 == (SwiftReflectionContext *)((char *)this + 64))
  {
    (*(void (**)(char *))(*((void *)this + 8) + 32))((char *)this + 64);
    uint64_t v8 = (void *)*((void *)this + 5);
    if (!v8) {
      goto LABEL_19;
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(SwiftReflectionContext *))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = (void *)*((void *)this + 5);
    if (!v8) {
      goto LABEL_19;
    }
  }
  *((void *)this + 6) = v8;
  operator delete(v8);
LABEL_19:
  uint64_t v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    uint64_t v10 = (void *)*((void *)this + 3);
    uint64_t v11 = (void *)*((void *)this + 2);
    if (v10 != v9)
    {
      unint64_t v12 = v10 - 4;
      int v13 = v10 - 4;
      do
      {
        uint64_t v15 = (void *)v13[3];
        if (v13 == v15)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(void *))(*v15 + 40))(v15);
        }
        v12 -= 4;
        BOOL v14 = v13 == v9;
        v13 -= 4;
      }
      while (!v14);
      uint64_t v11 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v9;
    operator delete(v11);
  }
  uint64_t v16 = *((unsigned int *)this + 2);
  if (v16 != -1) {
    ((void (*)(void *, SwiftReflectionContext *))off_C88D0[v16])(v18, this);
  }
  *((_DWORD *)this + 2) = -1;
}

void std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::~__func()
{
}

void *std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_C8B30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C8B30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v11 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        char v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        char v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>();
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = ***a1;
  if (v2[2] || v2[5] || v2[8] || v2[11] || v2[14] || v2[17]) {
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>();
  }
  uint64_t v3 = *a2;
  uint64_t v4 = v2[18];
  uint64_t v5 = v2[19];
  uint64_t v11 = *v2;
  uint64_t v6 = v2[3];
  uint64_t v12 = v2[1] - *v2;
  uint64_t v13 = v2[4] - v6;
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[9];
  uint64_t v14 = v2[7] - v7;
  uint64_t v15 = v2[10] - v8;
  uint64_t v9 = v2[12];
  uint64_t v10 = v2[15];
  uint64_t v16 = v2[13] - v9;
  uint64_t v17 = v2[16] - v10;
  v18[0] = *v2 - v4 + v5;
  v18[1] = v11;
  void v18[2] = v12;
  void v18[3] = v6 - v4 + v5;
  v18[4] = v6;
  v18[5] = v13;
  v18[6] = v7 - v4 + v5;
  v18[7] = v7;
  v18[8] = v14;
  v18[9] = v8 - v4 + v5;
  v18[10] = v8;
  v18[11] = v15;
  v18[12] = v9 - v4 + v5;
  v18[13] = v9;
  v18[14] = v16;
  v18[15] = v10 - v4 + v5;
  v18[16] = v10;
  v18[17] = v17;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int64_t v22 = v24;
  uint64_t v23 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v3 + 296), (uint64_t)v18);
  if (v22 != v24) {
    free(v22);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = ***a1;
  if (v2[2] || v2[5] || v2[8] || v2[11] || v2[14] || v2[17]) {
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>();
  }
  uint64_t v3 = *a2;
  uint64_t v4 = v2[18];
  uint64_t v5 = v2[19];
  uint64_t v11 = *v2;
  uint64_t v6 = v2[3];
  uint64_t v12 = v2[1] - *v2;
  uint64_t v13 = v2[4] - v6;
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[9];
  uint64_t v14 = v2[7] - v7;
  uint64_t v15 = v2[10] - v8;
  uint64_t v9 = v2[12];
  uint64_t v10 = v2[15];
  uint64_t v16 = v2[13] - v9;
  uint64_t v17 = v2[16] - v10;
  v18[0] = *v2 - v4 + v5;
  v18[1] = v11;
  void v18[2] = v12;
  void v18[3] = v6 - v4 + v5;
  v18[4] = v6;
  v18[5] = v13;
  v18[6] = v7 - v4 + v5;
  v18[7] = v7;
  v18[8] = v14;
  v18[9] = v8 - v4 + v5;
  v18[10] = v8;
  v18[11] = v15;
  v18[12] = v9 - v4 + v5;
  v18[13] = v9;
  v18[14] = v16;
  v18[15] = v10 - v4 + v5;
  v18[16] = v10;
  v18[17] = v17;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int64_t v22 = v24;
  uint64_t v23 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v3 + 296), (uint64_t)v18);
  if (v22 != v24) {
    free(v22);
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 296);
  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v5, a2);
  uint64_t v3 = swift::reflection::TypeRefBuilder::addReflectionInfo(v2, (uint64_t)v5);
  if (v6 != &v7) {
    free(v6);
  }
  return v3;
}

uint64_t swift::reflection::TypeRefBuilder::addReflectionInfo(uint64_t *a1, uint64_t a2)
{
  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v12, a2);
  unint64_t v3 = a1[212];
  if (v3 >= a1[213])
  {
    uint64_t v9 = std::vector<swift::reflection::ReflectionInfo>::__push_back_slow_path<swift::reflection::ReflectionInfo const&>(a1 + 211, (uint64_t)v12);
    goto LABEL_12;
  }
  uint64_t v4 = v12[1];
  *(void *)unint64_t v3 = v12[0];
  *(void *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v13;
  *(void *)(v3 + 32) = v14;
  *(_OWORD *)(v3 + 40) = v15;
  *(void *)(v3 + 56) = v16;
  *(_OWORD *)(v3 + 64) = v17;
  *(void *)(v3 + 80) = v18;
  *(_OWORD *)(v3 + 88) = v19;
  *(void *)(v3 + 104) = v20;
  *(_OWORD *)(v3 + 112) = v21;
  *(void *)(v3 + 128) = v22;
  *(_OWORD *)(v3 + 136) = v23;
  *(void *)(v3 + 152) = v24;
  *(_OWORD *)(v3 + 160) = v25;
  uint64_t v5 = v27;
  *(void *)(v3 + 176) = v26;
  *(void *)(v3 + 184) = v5;
  uint64_t v6 = (void *)(v3 + 208);
  *(void *)(v3 + 192) = v3 + 208;
  *(void *)(v3 + 200) = 0x100000000;
  if ((void *)v3 != v12)
  {
    unsigned int v7 = v29;
    if (v29)
    {
      if (v29 < 2)
      {
        size_t v8 = 16;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 192, v3 + 208, v29, 16);
        if (!v29)
        {
LABEL_10:
          *(_DWORD *)(v3 + 200) = v7;
          goto LABEL_11;
        }
        uint64_t v6 = *(void **)(v3 + 192);
        size_t v8 = 16 * v29;
      }
      memcpy(v6, __src, v8);
      goto LABEL_10;
    }
  }
LABEL_11:
  uint64_t v9 = v3 + 224;
LABEL_12:
  a1[212] = v9;
  uint64_t v10 = a1[211];
  if (__src != &v30) {
    free(__src);
  }
  return -1227133513 * ((unint64_t)(v9 - v10) >> 5) - 1;
}

uint64_t std::vector<swift::reflection::ReflectionInfo>::__push_back_slow_path<swift::reflection::ReflectionInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x124924924924924) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v7 = 0x124924924924924;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 > 0x124924924924924) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v8 = (char *)operator new(224 * v7);
  }
  else
  {
    size_t v8 = 0;
  }
  uint64_t v9 = (uint64_t)&v8[224 * v2];
  uint64_t v10 = &v8[224 * v7];
  swift::reflection::ReflectionInfo::ReflectionInfo(v9, a2);
  uint64_t v11 = v9 + 224;
  long long v13 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
  }
  else
  {
    do
    {
      v9 -= 224;
      v12 -= 224;
      std::allocator<swift::reflection::ReflectionInfo>::construct[abi:nn180100]<swift::reflection::ReflectionInfo,swift::reflection::ReflectionInfo>(v6, v9, (uint64_t)v12);
    }
    while (v12 != v13);
    uint64_t v12 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (v14 != v12)
    {
      long long v15 = v14 - 16;
      do
      {
        long long v17 = (char *)*((void *)v15 - 2);
        if (v15 != v17) {
          free(v17);
        }
        uint64_t v16 = v15 - 208;
        v15 -= 224;
      }
      while (v16 != v12);
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

uint64_t std::allocator<swift::reflection::ReflectionInfo>::construct[abi:nn180100]<swift::reflection::ReflectionInfo,swift::reflection::ReflectionInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  *(void *)(a2 + 104) = *(void *)(a3 + 104);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  uint64_t v4 = *(void *)(a3 + 184);
  *(void *)(a2 + 176) = *(void *)(a3 + 176);
  *(void *)(a2 + 192) = a2 + 208;
  uint64_t v5 = a2 + 192;
  *(void *)(v5 - 8) = v4;
  *(void *)(v5 + 8) = 0x100000000;
  if (*(_DWORD *)(a3 + 200)) {
    return __swift::__runtime::llvm::SmallVectorImpl<__swift::__runtime::llvm::StringRef>::operator=(v5, a3 + 192);
  }
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<__swift::__runtime::llvm::StringRef>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      unint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    unint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 16 * v8);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
    }
    uint64_t v9 = 0;
LABEL_14:
    uint64_t v10 = *v7;
    if (v9 != v10) {
      memcpy((void *)(*(void *)a1 + 16 * v9), (const void *)(*(void *)a2 + 16 * v9), *(void *)a2 + 16 * v10 - (*(void *)a2 + 16 * v9));
    }
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    _DWORD *v7 = 0;
  }
  return a1;
}

uint64_t swift::reflection::ReflectionInfo::ReflectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  uint64_t v4 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v4;
  uint64_t v5 = (void *)(a1 + 208);
  *(void *)(a1 + 192) = a1 + 208;
  uint64_t v6 = (void **)(a1 + 192);
  *(void *)(a1 + 200) = 0x100000000;
  if (a1 != a2)
  {
    unint64_t v8 = *(unsigned int *)(a2 + 200);
    if (v8)
    {
      if (v8 < 2)
      {
        size_t v10 = 16;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 192, (uint64_t)v5, v8, 16);
        uint64_t v9 = *(unsigned int *)(a2 + 200);
        if (!v9)
        {
LABEL_8:
          *(_DWORD *)(a1 + 200) = v8;
          return a1;
        }
        uint64_t v5 = *v6;
        size_t v10 = 16 * v9;
      }
      memcpy(v5, *(const void **)(a2 + 192), v10);
      goto LABEL_8;
    }
  }
  return a1;
}

void *llvm::SmallVector<llvm::StringRef,1u>::SmallVector(void *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 2;
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  if (a1 != (void *)a2)
  {
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    if (v5)
    {
      if (v5 < 2)
      {
        size_t v7 = 16;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 2), v5, 16);
        uint64_t v6 = *(unsigned int *)(a2 + 8);
        if (!v6)
        {
LABEL_8:
          *((_DWORD *)a1 + 2) = v5;
          return a1;
        }
        uint64_t v3 = (void *)*a1;
        size_t v7 = 16 * v6;
      }
      memcpy(v3, *(const void **)a2, v7);
      goto LABEL_8;
    }
  }
  return a1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionMappingInfo::$_0>(swift_reflection_addReflectionMappingInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = ***a1;
  uint64_t v4 = *v3;
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[6];
  uint64_t v7 = v3[4];
  uint64_t v8 = v3[7];
  uint64_t v9 = v3[10];
  uint64_t v10 = v3[8];
  uint64_t v11 = v3[11];
  uint64_t v12 = v3[14];
  uint64_t v13 = v3[12];
  uint64_t v14 = v3[15];
  uint64_t v15 = v3[18];
  uint64_t v16 = v3[16];
  uint64_t v17 = v3[19];
  uint64_t v18 = v3[22];
  uint64_t v19 = v3[20];
  uint64_t v20 = v3[23];
  v21[0] = v3[2];
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v6;
  v21[4] = v7;
  v21[5] = v8;
  v21[6] = v9;
  v21[7] = v10;
  v21[8] = v11;
  v21[9] = v12;
  v21[10] = v13;
  v21[11] = v14;
  v21[12] = v15;
  v21[13] = v16;
  v21[14] = v17;
  v21[15] = v18;
  v21[16] = v19;
  v21[17] = v20;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = v27;
  uint64_t v26 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v2 + 296), (uint64_t)v21);
  if (v25 != v27) {
    free(v25);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionMappingInfo::$_0>(swift_reflection_addReflectionMappingInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = ***a1;
  uint64_t v4 = *v3;
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[6];
  uint64_t v7 = v3[4];
  uint64_t v8 = v3[7];
  uint64_t v9 = v3[10];
  uint64_t v10 = v3[8];
  uint64_t v11 = v3[11];
  uint64_t v12 = v3[14];
  uint64_t v13 = v3[12];
  uint64_t v14 = v3[15];
  uint64_t v15 = v3[18];
  uint64_t v16 = v3[16];
  uint64_t v17 = v3[19];
  uint64_t v18 = v3[22];
  uint64_t v19 = v3[20];
  uint64_t v20 = v3[23];
  v21[0] = v3[2];
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v6;
  v21[4] = v7;
  v21[5] = v8;
  v21[6] = v9;
  v21[7] = v10;
  v21[8] = v11;
  v21[9] = v12;
  v21[10] = v13;
  v21[11] = v14;
  v21[12] = v15;
  v21[13] = v16;
  v21[14] = v17;
  v21[15] = v18;
  v21[16] = v19;
  v21[17] = v20;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = v27;
  uint64_t v26 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v2 + 296), (uint64_t)v21);
  if (v25 != v27) {
    free(v25);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_addImage::$_0>(swift_reflection_addImage::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  unint64_t v4 = **v2;
  v7[0] = v8;
  v7[1] = (void *)0x100000000;
  unint64_t v5 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(v3, v4, (uint64_t)v7);
  if (v7[0] != v8) {
    free(v7[0]);
  }
  return (v5 & 0xFF00000000) != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_addImage::$_0>(swift_reflection_addImage::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  unint64_t v4 = **v2;
  v7[0] = v8;
  v7[1] = (void *)0x100000000;
  unint64_t v5 = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(v3, v4, (uint64_t)v7);
  if (v7[0] != v8) {
    free(v7[0]);
  }
  return (v5 & 0xFF00000000) != 0;
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  (*(void (**)(int **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v202);
  if (!v202)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v202 = 0;
    goto LABEL_376;
  }
  int v7 = *v202;
  if (*v202 == -17958193)
  {
    v196 = v198;
    uint64_t v197 = 0x100000000;
    if (&v196 == (void **)a3) {
      goto LABEL_75;
    }
    unsigned int v12 = *(_DWORD *)(a3 + 8);
    if (!v12) {
      goto LABEL_75;
    }
    if (v12 < 2)
    {
      size_t v15 = 16;
      uint64_t v14 = v198;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, (uint64_t)v198, *(unsigned int *)(a3 + 8), 16);
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      if (!v13)
      {
LABEL_74:
        LODWORD(v197) = v12;
LABEL_75:
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v297);
        if (!v297)
        {
          LOBYTE(a2) = 0;
          LOBYTE(v6) = 0;
          uint64_t v297 = 0;
          goto LABEL_367;
        }
        int v38 = *(_DWORD *)(v297 + 20);
        if (!v38)
        {
          LOBYTE(v6) = 0;
          LOBYTE(a2) = 0;
          goto LABEL_364;
        }
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        a3 = v6 + 2536;
        int v188 = *(_DWORD *)(v297 + 20);
        while (1)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
          uint64_t v41 = v300;
          if (!v300) {
            break;
          }
          if (strncmp((const char *)(v300 + 8), "__TEXT", 0x10uLL))
          {
            int v42 = 0;
            v39 += *(unsigned int *)(v41 + 4);
            uint64_t v300 = 0;
            uint64_t v43 = v41;
LABEL_91:
            uint64_t v232 = v43;
            if (!v304) {
              goto LABEL_381;
            }
            (*(void (**)(unsigned int *, uint64_t *))(*(void *)v304 + 48))(v304, &v232);
LABEL_93:
            uint64_t v41 = v40;
            goto LABEL_94;
          }
          long long v44 = *(uint64_t **)(v6 + 2544);
          if ((unint64_t)v44 >= *(void *)(v6 + 2552))
          {
            long long v45 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v6 + 2536), &v300);
          }
          else
          {
            uint64_t v300 = 0;
            *long long v44 = v41;
            if (v304)
            {
              if (v304 == (unsigned int *)&v301)
              {
                v44[4] = (uint64_t)(v44 + 1);
                (*(void (**)(unsigned int *))(*(void *)v304 + 24))(v304);
              }
              else
              {
                v44[4] = (uint64_t)v304;
                unint64_t v304 = 0;
              }
            }
            else
            {
              v44[4] = 0;
            }
            long long v45 = v44 + 5;
          }
          *(void *)(v6 + 2544) = v45;
          uint64_t v43 = v300;
          int v42 = 2;
          uint64_t v40 = v41;
          uint64_t v300 = 0;
          if (v43) {
            goto LABEL_91;
          }
LABEL_94:
          if (v304 == (unsigned int *)&v301)
          {
            (*(void (**)(uint64_t *))(v301 + 32))(&v301);
            if (v42) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v304) {
              (*(void (**)(void))(*(void *)v304 + 40))();
            }
            if (v42)
            {
LABEL_103:
              if (v42 == 2)
              {
LABEL_104:
                if (v41)
                {
                  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v294);
                  if (!v294)
                  {
                    LOBYTE(a2) = 0;
                    LOBYTE(v6) = 0;
                    uint64_t v294 = 0;
                    goto LABEL_360;
                  }
                  int v293 = *(_DWORD *)(v294 + 64);
                  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v290);
                  if (!v290)
                  {
                    LOBYTE(a2) = 0;
                    LOBYTE(v6) = 0;
                    uint64_t v290 = 0;
                    goto LABEL_353;
                  }
                  unint64_t v289 = a2 - *(void *)(v41 + 24);
                  uint64_t v288 = v290;
                  BOOL v284 = &v293;
                  int v285 = &v288;
                  BOOL v286 = &v289;
                  uint64_t v287 = v6;
                  int v283 = off_C8BA8;
                  uint64_t v46 = v277;
                  uint64_t v47 = v274;
                  uint64_t v48 = v271;
                  uint64_t v49 = v268;
                  uint64_t v50 = v265;
                  uint64_t v51 = v262;
                  uint64_t v52 = v259;
                  if (!v280 && !v277 && !v274 && !v271 && !v268 && !v265 && !v262 && !v259)
                  {
                    LOBYTE(v6) = 0;
                    LOBYTE(a2) = 0;
                    goto LABEL_350;
                  }
                  uint64_t v74 = v282;
                  uint64_t v232 = v280;
                  uint64_t v233 = v281;
                  uint64_t v75 = v278;
                  uint64_t v76 = v279;
                  uint64_t v234 = v282;
                  uint64_t v235 = v277;
                  int v236 = v278;
                  uint64_t v237 = v279;
                  uint64_t v77 = v275;
                  uint64_t v78 = v276;
                  uint64_t v238 = v274;
                  uint64_t v239 = v275;
                  uint64_t v79 = v272;
                  uint64_t v80 = v273;
                  uint64_t v240 = v276;
                  uint64_t v241 = v271;
                  uint64_t v242 = v272;
                  uint64_t v243 = v273;
                  uint64_t v81 = v269;
                  uint64_t v82 = v270;
                  uint64_t v244 = v268;
                  uint64_t v245 = v269;
                  uint64_t v83 = v267;
                  uint64_t v246 = v270;
                  uint64_t v247 = v265;
                  uint64_t v248 = v266;
                  uint64_t v249 = v267;
                  uint64_t v84 = v263;
                  uint64_t v85 = v264;
                  uint64_t v250 = v262;
                  uint64_t v251 = v263;
                  uint64_t v86 = v260;
                  uint64_t v87 = v261;
                  uint64_t v252 = v264;
                  uint64_t v253 = v259;
                  uint64_t v254 = v260;
                  uint64_t v255 = v261;
                  long long __dst = v258;
                  uint64_t v257 = 0x100000000;
                  unint64_t v88 = v197;
                  if (v197)
                  {
                    if (v197 == 1)
                    {
                      size_t v89 = 16;
                      int v90 = v258;
                      goto LABEL_148;
                    }
                    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v258, v197, 16);
                    if (v197)
                    {
                      int v90 = __dst;
                      size_t v89 = 16 * v197;
LABEL_148:
                      memcpy(v90, v196, v89);
                    }
                    LODWORD(v257) = v88;
                    uint64_t v97 = v232;
                    uint64_t v98 = v233;
                    uint64_t v74 = v234;
                    uint64_t v46 = v235;
                    uint64_t v75 = v236;
                    uint64_t v76 = v237;
                    uint64_t v47 = v238;
                    uint64_t v77 = v239;
                    uint64_t v78 = v240;
                    uint64_t v48 = v241;
                    uint64_t v79 = v242;
                    uint64_t v80 = v243;
                    uint64_t v49 = v244;
                    uint64_t v81 = v245;
                    uint64_t v82 = v246;
                    uint64_t v50 = v247;
                    uint64_t v96 = v248;
                    uint64_t v83 = v249;
                    uint64_t v51 = v250;
                    uint64_t v84 = v251;
                    uint64_t v85 = v252;
                    uint64_t v52 = v253;
                    uint64_t v86 = v254;
                    uint64_t v87 = v255;
                  }
                  else
                  {
                    uint64_t v96 = v266;
                    uint64_t v97 = v280;
                    uint64_t v98 = v281;
                  }
                  uint64_t v186 = v98;
                  uint64_t v182 = v74;
                  uint64_t v205 = v97;
                  uint64_t v206 = v98;
                  uint64_t v207 = v74;
                  uint64_t v208 = v46;
                  int v209 = v75;
                  uint64_t v210 = v76;
                  uint64_t v211 = v47;
                  uint64_t v212 = v77;
                  uint64_t v213 = v78;
                  uint64_t v214 = v48;
                  uint64_t v215 = v79;
                  uint64_t v216 = v80;
                  uint64_t v217 = v49;
                  uint64_t v218 = v81;
                  uint64_t v219 = v82;
                  uint64_t v220 = v50;
                  uint64_t v221 = v96;
                  uint64_t v222 = v83;
                  uint64_t v223 = v51;
                  uint64_t v224 = v84;
                  uint64_t v225 = v85;
                  uint64_t v226 = v52;
                  uint64_t v227 = v86;
                  uint64_t v228 = v87;
                  v229 = v231;
                  uint64_t v230 = 0x100000000;
                  if (v88)
                  {
                    if (v88 == 1)
                    {
                      size_t v99 = 16;
                      char v100 = v231;
                      goto LABEL_162;
                    }
                    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v231, v88, 16);
                    if (v257)
                    {
                      char v100 = v229;
                      size_t v99 = 16 * v257;
LABEL_162:
                      memcpy(v100, __dst, v99);
                    }
                    LODWORD(v230) = v88;
                    uint64_t v97 = v205;
                    uint64_t v186 = v206;
                    uint64_t v46 = v208;
                    uint64_t v182 = v207;
                    uint64_t v75 = v209;
                    uint64_t v76 = v210;
                    uint64_t v47 = v211;
                    uint64_t v77 = v212;
                    uint64_t v78 = v213;
                    uint64_t v48 = v214;
                    uint64_t v79 = v215;
                    uint64_t v80 = v216;
                    uint64_t v49 = v217;
                    uint64_t v81 = v218;
                    uint64_t v82 = v219;
                    uint64_t v50 = v220;
                    uint64_t v96 = v221;
                    uint64_t v83 = v222;
                    uint64_t v51 = v223;
                    uint64_t v84 = v224;
                    uint64_t v85 = v225;
                    uint64_t v52 = v226;
                    uint64_t v86 = v227;
                    uint64_t v87 = v228;
                  }
                  uint64_t v300 = v97;
                  uint64_t v301 = v186;
                  uint64_t v302 = v182;
                  uint64_t v303 = v46;
                  unint64_t v304 = (unsigned int *)v75;
                  uint64_t v305 = v76;
                  uint64_t v306 = v47;
                  uint64_t v307 = v77;
                  uint64_t v308 = v78;
                  uint64_t v309 = v48;
                  uint64_t v310 = v79;
                  uint64_t v311 = v80;
                  uint64_t v312 = v49;
                  uint64_t v313 = v81;
                  uint64_t v314 = v82;
                  uint64_t v315 = v50;
                  uint64_t v316 = v96;
                  uint64_t v317 = v83;
                  uint64_t v318 = v51;
                  uint64_t v319 = v84;
                  uint64_t v320 = v85;
                  uint64_t v321 = v52;
                  uint64_t v322 = v86;
                  uint64_t v323 = v87;
                  v324 = v326;
                  uint64_t v325 = 0x100000000;
                  if (v88)
                  {
                    if (v88 == 1)
                    {
                      size_t v103 = 16;
                      uint64_t v104 = v326;
                      goto LABEL_188;
                    }
                    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v324, (uint64_t)v326, v88, 16);
                    if (v230)
                    {
                      uint64_t v104 = v324;
                      size_t v103 = 16 * v230;
LABEL_188:
                      memcpy(v104, v229, v103);
                    }
                    LODWORD(v325) = v88;
                  }
                  LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v300);
                  if (v324 != v326) {
                    free(v324);
                  }
                  if (v229 != v231) {
                    free(v229);
                  }
                  unint64_t v117 = *(void *)(v41 + 24) + v289;
                  unint64_t v118 = v117 + *(void *)(v41 + 32);
                  char v119 = *(char **)(v6 + 2568);
                  unint64_t v120 = *(void *)(v6 + 2576);
                  if ((unint64_t)v119 >= v120)
                  {
                    unint64_t v123 = *(char **)(v6 + 2560);
                    uint64_t v124 = (v119 - v123) >> 4;
                    unint64_t v125 = v124 + 1;
                    int v122 = v188;
                    if ((unint64_t)(v124 + 1) >> 60) {
                      goto LABEL_382;
                    }
                    uint64_t v126 = v120 - (void)v123;
                    if (v126 >> 3 > v125) {
                      unint64_t v125 = v126 >> 3;
                    }
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v127 = v125;
                    }
                    if (v127)
                    {
                      if (v127 >> 60) {
                        goto LABEL_383;
                      }
                      int v128 = (char *)operator new(16 * v127);
                    }
                    else
                    {
                      int v128 = 0;
                    }
                    v130 = &v128[16 * v124];
                    *(void *)v130 = v117;
                    *((void *)v130 + 1) = v118;
                    v121 = v130 + 16;
                    if (v119 == v123)
                    {
                      a3 = v6 + 2536;
                    }
                    else
                    {
                      a3 = v6 + 2536;
                      do
                      {
                        *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
                        v130 -= 16;
                        v119 -= 16;
                      }
                      while (v119 != v123);
                      char v119 = *(char **)(v6 + 2560);
                    }
                    *(void *)(v6 + 2560) = v130;
                    *(void *)(v6 + 2568) = v121;
                    *(void *)(v6 + 2576) = &v128[16 * v127];
                    if (v119) {
                      operator delete(v119);
                    }
                  }
                  else
                  {
                    *(void *)char v119 = v117;
                    *((void *)v119 + 1) = v118;
                    v121 = v119 + 16;
                    int v122 = v188;
                  }
                  int v150 = 0;
                  *(void *)(v6 + 2568) = v121;
                  while (2)
                  {
                    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
                    uint64_t v151 = v300;
                    if (v300)
                    {
                      if (strncmp((const char *)(v300 + 8), "__DATA", 6uLL)
                        && strncmp((const char *)(v151 + 8), "__AUTH", 6uLL))
                      {
                        v39 += *(unsigned int *)(v151 + 4);
                        uint64_t v300 = 0;
                        uint64_t v152 = v151;
                        goto LABEL_285;
                      }
                      unint64_t v153 = *(void *)(v151 + 24) + v289;
                      unint64_t v154 = v153 + *(void *)(v151 + 32);
                      uint64_t v155 = *(char **)(v6 + 2592);
                      unint64_t v156 = *(void *)(v6 + 2600);
                      if ((unint64_t)v155 >= v156)
                      {
                        uint64_t v158 = *(char **)(v6 + 2584);
                        uint64_t v159 = (v155 - v158) >> 4;
                        unint64_t v160 = v159 + 1;
                        if ((unint64_t)(v159 + 1) >> 60) {
                          goto LABEL_382;
                        }
                        uint64_t v161 = v156 - (void)v158;
                        if (v161 >> 3 > v160) {
                          unint64_t v160 = v161 >> 3;
                        }
                        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v160 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        unint64_t v184 = v160;
                        if (v160)
                        {
                          if (v160 >> 60) {
                            goto LABEL_383;
                          }
                          v162 = (char *)operator new(16 * v160);
                        }
                        else
                        {
                          v162 = 0;
                        }
                        v163 = &v162[16 * v159];
                        *(void *)v163 = v153;
                        *((void *)v163 + 1) = v154;
                        v164 = v163;
                        if (v155 == v158)
                        {
                          a3 = v6 + 2536;
                          int v122 = v188;
                          unint64_t v165 = v184;
                        }
                        else
                        {
                          a3 = v6 + 2536;
                          int v122 = v188;
                          unint64_t v165 = v184;
                          do
                          {
                            *((_OWORD *)v164 - 1) = *((_OWORD *)v155 - 1);
                            v164 -= 16;
                            v155 -= 16;
                          }
                          while (v155 != v158);
                          uint64_t v155 = *(char **)(v6 + 2584);
                        }
                        *(void *)(v6 + 2584) = v164;
                        v157 = v163 + 16;
                        *(void *)(v6 + 2592) = v163 + 16;
                        *(void *)(v6 + 2600) = &v162[16 * v165];
                        if (v155) {
                          operator delete(v155);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v155 = v153;
                        *((void *)v155 + 1) = v154;
                        v157 = v155 + 16;
                        a3 = v6 + 2536;
                      }
                      *(void *)(v6 + 2592) = v157;
                      uint64_t v152 = v300;
                      v39 += *(unsigned int *)(v151 + 4);
                      uint64_t v300 = 0;
                      if (v152)
                      {
LABEL_285:
                        v327[0] = v152;
                        if (!v304) {
                          goto LABEL_381;
                        }
                        (*(void (**)(unsigned int *, void *))(*(void *)v304 + 48))(v304, v327);
                      }
                    }
                    else
                    {
                      uint64_t v300 = 0;
                    }
                    if (v304 == (unsigned int *)&v301)
                    {
                      (*(void (**)(uint64_t *))(v301 + 32))(&v301);
                    }
                    else if (v304)
                    {
                      (*(void (**)(void))(*(void *)v304 + 40))();
                    }
                    if (!v151)
                    {
                      LOBYTE(v6) = 0;
                      LOBYTE(a2) = 0;
LABEL_348:
                      if (__dst != v258) {
                        free(__dst);
                      }
LABEL_350:
                      uint64_t v176 = v290;
                      uint64_t v290 = 0;
                      if (v176)
                      {
                        uint64_t v300 = v176;
                        if (!v292) {
                          goto LABEL_381;
                        }
                        (*(void (**)(void *, uint64_t *))(*v292 + 48))(v292, &v300);
                      }
LABEL_353:
                      if (v292 == v291)
                      {
                        (*(void (**)(void *))(v291[0] + 32))(v291);
                      }
                      else if (v292)
                      {
                        (*(void (**)(void))(*v292 + 40))();
                      }
                      uint64_t v177 = v294;
                      uint64_t v294 = 0;
                      if (v177)
                      {
                        uint64_t v300 = v177;
                        if (!v296) {
                          goto LABEL_381;
                        }
                        (*(void (**)(void *, uint64_t *))(*v296 + 48))(v296, &v300);
                      }
LABEL_360:
                      if (v296 == v295)
                      {
                        (*(void (**)(void *))(v295[0] + 32))(v295);
                      }
                      else if (v296)
                      {
                        (*(void (**)(void))(*v296 + 40))();
                      }
LABEL_364:
                      uint64_t v178 = v297;
                      uint64_t v297 = 0;
                      if (v178)
                      {
                        uint64_t v300 = v178;
                        if (!v299) {
                          goto LABEL_381;
                        }
                        (*(void (**)(void *, uint64_t *))(*v299 + 48))(v299, &v300);
                      }
LABEL_367:
                      if (v299 == v298)
                      {
                        (*(void (**)(void *))(v298[0] + 32))(v298);
                      }
                      else if (v299)
                      {
                        (*(void (**)(void))(*v299 + 40))();
                      }
                      unint64_t v55 = 0;
                      unint64_t v3 = 0;
                      uint64_t v54 = v196;
                      if (v196 == v198) {
                        goto LABEL_373;
                      }
LABEL_372:
                      free(v54);
                      unint64_t v3 = v55;
                      goto LABEL_373;
                    }
                    if (++v150 == v122)
                    {
                      v166 = *(uint64_t **)(v6 + 2544);
                      if ((unint64_t)v166 >= *(void *)(v6 + 2552))
                      {
                        v168 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v297);
                      }
                      else
                      {
                        uint64_t v167 = v297;
                        uint64_t v297 = 0;
                        uint64_t *v166 = v167;
                        if (v299)
                        {
                          if (v299 == v298)
                          {
                            v166[4] = (uint64_t)(v166 + 1);
                            (*(void (**)(void *))(*v299 + 24))(v299);
                          }
                          else
                          {
                            v166[4] = (uint64_t)v299;
                            std::string::size_type v299 = 0;
                          }
                        }
                        else
                        {
                          v166[4] = 0;
                        }
                        v168 = v166 + 5;
                      }
                      *(void *)(v6 + 2544) = v168;
                      if ((unint64_t)v168 >= *(void *)(v6 + 2552))
                      {
                        v172 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v290);
                      }
                      else
                      {
                        uint64_t v171 = v290;
                        uint64_t v290 = 0;
                        void *v168 = v171;
                        if (v292)
                        {
                          if (v292 == v291)
                          {
                            v168[4] = v168 + 1;
                            (*(void (**)(void *))(*v292 + 24))(v292);
                          }
                          else
                          {
                            v168[4] = v292;
                            unint64_t v292 = 0;
                          }
                        }
                        else
                        {
                          v168[4] = 0;
                        }
                        v172 = v168 + 5;
                      }
                      *(void *)(v6 + 2544) = v172;
                      LODWORD(a3) = a2 >> 8;
                      LOBYTE(v6) = 1;
                      goto LABEL_348;
                    }
                    continue;
                  }
                }
              }
              LOBYTE(v6) = 0;
              LOBYTE(a2) = 0;
              goto LABEL_364;
            }
          }
          uint64_t v40 = v41;
          if (!--v38) {
            goto LABEL_104;
          }
        }
        uint64_t v300 = 0;
        int v42 = 1;
        goto LABEL_93;
      }
      uint64_t v14 = v196;
      size_t v15 = 16 * v13;
    }
    memcpy(v14, *(const void **)a3, v15);
    goto LABEL_74;
  }
  if (v7 != -17958194)
  {
    int v16 = BYTE1(v7);
    if (*v202 == 127)
    {
      unsigned int v21 = v7 & 0xFFFF0000;
      if (v16 == 69 && v21 == 1179385856)
      {
        LOBYTE(v191) = 0;
        char v192 = 0;
        llvm::SmallVector<llvm::StringRef,1u>::SmallVector(v189, a3);
        unint64_t v53 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(v6, a2, &v191, (uint64_t)v189);
        LOBYTE(a2) = v53;
        a3 = v53 >> 8;
        uint64_t v6 = HIDWORD(v53);
        unint64_t v3 = v53 >> 40;
        uint64_t v54 = (void *)v189[0];
        unint64_t v55 = v3;
        if ((uint64_t *)v189[0] == &v190) {
          goto LABEL_373;
        }
        goto LABEL_372;
      }
    }
    else if (*v202 == 77 && BYTE1(v7) == 90)
    {
      v193 = v195;
      uint64_t v194 = 0x100000000;
      if (&v193 == (unsigned char **)a3 || (unsigned int v17 = *(_DWORD *)(a3 + 8)) == 0)
      {
LABEL_127:
        unint64_t PECOFF = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFF(v6, a2, (uint64_t)&v193);
        LOBYTE(a2) = PECOFF;
        a3 = PECOFF >> 8;
        uint64_t v6 = HIDWORD(PECOFF);
        unint64_t v55 = PECOFF >> 40;
        uint64_t v54 = v193;
        unint64_t v3 = v55;
        if (v193 == v195) {
          goto LABEL_373;
        }
        goto LABEL_372;
      }
      if (v17 < 2)
      {
        size_t v20 = 16;
        uint64_t v19 = v195;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, (uint64_t)v195, *(unsigned int *)(a3 + 8), 16);
        uint64_t v18 = *(unsigned int *)(a3 + 8);
        if (!v18)
        {
LABEL_126:
          LODWORD(v194) = v17;
          goto LABEL_127;
        }
        uint64_t v19 = v193;
        size_t v20 = 16 * v18;
      }
      memcpy(v19, *(const void **)a3, v20);
      goto LABEL_126;
    }
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_373;
  }
  __src = v201;
  uint64_t v200 = 0x100000000;
  if (&__src == (void **)a3) {
    goto LABEL_31;
  }
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (!v8) {
    goto LABEL_31;
  }
  if (v8 < 2)
  {
    size_t v11 = 16;
    uint64_t v10 = v201;
    goto LABEL_29;
  }
  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v201, *(unsigned int *)(a3 + 8), 16);
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  if (v9)
  {
    uint64_t v10 = __src;
    size_t v11 = 16 * v9;
LABEL_29:
    memcpy(v10, *(const void **)a3, v11);
  }
  LODWORD(v200) = v8;
LABEL_31:
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v297);
  if (!v297)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    uint64_t v297 = 0;
    goto LABEL_339;
  }
  int v23 = *(_DWORD *)(v297 + 20);
  if (!v23)
  {
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_336;
  }
  uint64_t v24 = 0;
  long long v25 = 0;
  a3 = v6 + 2536;
  int v187 = *(_DWORD *)(v297 + 20);
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
    uint64_t v26 = (unsigned int *)v300;
    if (!v300)
    {
      uint64_t v300 = 0;
      int v27 = 1;
      goto LABEL_49;
    }
    if (strncmp((const char *)(v300 + 8), "__TEXT", 0x10uLL))
    {
      int v27 = 0;
      v24 += v26[1];
      uint64_t v300 = 0;
      uint64_t v28 = (uint64_t)v26;
LABEL_47:
      uint64_t v232 = v28;
      if (!v304) {
        goto LABEL_381;
      }
      (*(void (**)(unsigned int *, uint64_t *))(*(void *)v304 + 48))(v304, &v232);
LABEL_49:
      uint64_t v26 = v25;
      goto LABEL_50;
    }
    unsigned int v29 = *(unsigned int ***)(v6 + 2544);
    if ((unint64_t)v29 >= *(void *)(v6 + 2552))
    {
      uint64_t v30 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v6 + 2536), &v300);
    }
    else
    {
      uint64_t v300 = 0;
      *unsigned int v29 = v26;
      if (v304)
      {
        if (v304 == (unsigned int *)&v301)
        {
          v29[4] = (unsigned int *)(v29 + 1);
          (*(void (**)(unsigned int *))(*(void *)v304 + 24))(v304);
        }
        else
        {
          v29[4] = v304;
          unint64_t v304 = 0;
        }
      }
      else
      {
        v29[4] = 0;
      }
      uint64_t v30 = v29 + 5;
    }
    *(void *)(v6 + 2544) = v30;
    uint64_t v28 = v300;
    int v27 = 2;
    long long v25 = v26;
    uint64_t v300 = 0;
    if (v28) {
      goto LABEL_47;
    }
LABEL_50:
    if (v304 == (unsigned int *)&v301)
    {
      (*(void (**)(uint64_t *))(v301 + 32))(&v301);
      if (v27) {
        break;
      }
      goto LABEL_56;
    }
    if (v304) {
      (*(void (**)(void))(*(void *)v304 + 40))();
    }
    if (v27) {
      break;
    }
LABEL_56:
    long long v25 = v26;
    if (!--v23) {
      goto LABEL_60;
    }
  }
  if (v27 != 2)
  {
LABEL_118:
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_336;
  }
LABEL_60:
  if (!v26) {
    goto LABEL_118;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v294);
  if (!v294)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    uint64_t v294 = 0;
    goto LABEL_332;
  }
  int v293 = *(_DWORD *)(v294 + 48);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v290);
  if (!v290)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    uint64_t v290 = 0;
    goto LABEL_325;
  }
  unint64_t v289 = a2 - v26[6];
  uint64_t v288 = v290;
  BOOL v284 = &v293;
  int v285 = &v288;
  BOOL v286 = &v289;
  uint64_t v287 = v6;
  int v283 = off_C8BA8;
  uint64_t v31 = v277;
  uint64_t v32 = v274;
  uint64_t v33 = v271;
  uint64_t v34 = v268;
  uint64_t v35 = v265;
  uint64_t v36 = v262;
  uint64_t v37 = v259;
  if (!v280 && !v277 && !v274 && !v271 && !v268 && !v265 && !v262 && !v259)
  {
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_322;
  }
  uint64_t v57 = v282;
  uint64_t v232 = v280;
  uint64_t v233 = v281;
  uint64_t v58 = v278;
  uint64_t v59 = v279;
  uint64_t v234 = v282;
  uint64_t v235 = v277;
  int v236 = v278;
  uint64_t v237 = v279;
  uint64_t v60 = v275;
  uint64_t v61 = v276;
  uint64_t v238 = v274;
  uint64_t v239 = v275;
  uint64_t v62 = v272;
  uint64_t v63 = v273;
  uint64_t v240 = v276;
  uint64_t v241 = v271;
  uint64_t v242 = v272;
  uint64_t v243 = v273;
  uint64_t v64 = v269;
  uint64_t v65 = v270;
  uint64_t v244 = v268;
  uint64_t v245 = v269;
  uint64_t v66 = v267;
  uint64_t v246 = v270;
  uint64_t v247 = v265;
  uint64_t v248 = v266;
  uint64_t v249 = v267;
  uint64_t v67 = v263;
  uint64_t v68 = v264;
  uint64_t v250 = v262;
  uint64_t v251 = v263;
  uint64_t v69 = v260;
  uint64_t v70 = v261;
  uint64_t v252 = v264;
  uint64_t v253 = v259;
  uint64_t v254 = v260;
  uint64_t v255 = v261;
  long long __dst = v258;
  uint64_t v257 = 0x100000000;
  unint64_t v71 = v200;
  if (v200)
  {
    if (v200 == 1)
    {
      size_t v72 = 16;
      uint64_t v73 = v258;
      goto LABEL_140;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v258, v200, 16);
    if (v200)
    {
      uint64_t v73 = __dst;
      size_t v72 = 16 * v200;
LABEL_140:
      memcpy(v73, __src, v72);
    }
    LODWORD(v257) = v71;
    uint64_t v92 = v232;
    uint64_t v93 = v233;
    uint64_t v57 = v234;
    uint64_t v31 = v235;
    uint64_t v58 = v236;
    uint64_t v59 = v237;
    uint64_t v32 = v238;
    uint64_t v60 = v239;
    uint64_t v61 = v240;
    uint64_t v33 = v241;
    uint64_t v62 = v242;
    uint64_t v63 = v243;
    uint64_t v34 = v244;
    uint64_t v64 = v245;
    uint64_t v65 = v246;
    uint64_t v35 = v247;
    uint64_t v91 = v248;
    uint64_t v66 = v249;
    uint64_t v36 = v250;
    uint64_t v67 = v251;
    uint64_t v68 = v252;
    uint64_t v37 = v253;
    uint64_t v69 = v254;
    uint64_t v70 = v255;
  }
  else
  {
    uint64_t v91 = v266;
    uint64_t v92 = v280;
    uint64_t v93 = v281;
  }
  uint64_t v185 = v93;
  uint64_t v181 = v57;
  uint64_t v205 = v92;
  uint64_t v206 = v93;
  uint64_t v207 = v57;
  uint64_t v208 = v31;
  int v209 = v58;
  uint64_t v210 = v59;
  uint64_t v211 = v32;
  uint64_t v212 = v60;
  uint64_t v213 = v61;
  uint64_t v214 = v33;
  uint64_t v215 = v62;
  uint64_t v216 = v63;
  uint64_t v217 = v34;
  uint64_t v218 = v64;
  uint64_t v219 = v65;
  uint64_t v220 = v35;
  uint64_t v221 = v91;
  uint64_t v222 = v66;
  uint64_t v223 = v36;
  uint64_t v224 = v67;
  uint64_t v225 = v68;
  uint64_t v226 = v37;
  uint64_t v227 = v69;
  uint64_t v228 = v70;
  v229 = v231;
  uint64_t v230 = 0x100000000;
  if (v71)
  {
    if (v71 == 1)
    {
      size_t v94 = 16;
      uint64_t v95 = v231;
      goto LABEL_155;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v231, v71, 16);
    if (v257)
    {
      uint64_t v95 = v229;
      size_t v94 = 16 * v257;
LABEL_155:
      memcpy(v95, __dst, v94);
    }
    LODWORD(v230) = v71;
    uint64_t v92 = v205;
    uint64_t v185 = v206;
    uint64_t v31 = v208;
    uint64_t v181 = v207;
    uint64_t v58 = v209;
    uint64_t v59 = v210;
    uint64_t v32 = v211;
    uint64_t v60 = v212;
    uint64_t v61 = v213;
    uint64_t v33 = v214;
    uint64_t v62 = v215;
    uint64_t v63 = v216;
    uint64_t v34 = v217;
    uint64_t v64 = v218;
    uint64_t v65 = v219;
    uint64_t v35 = v220;
    uint64_t v91 = v221;
    uint64_t v66 = v222;
    uint64_t v36 = v223;
    uint64_t v67 = v224;
    uint64_t v68 = v225;
    uint64_t v37 = v226;
    uint64_t v69 = v227;
    uint64_t v70 = v228;
  }
  uint64_t v300 = v92;
  uint64_t v301 = v185;
  uint64_t v302 = v181;
  uint64_t v303 = v31;
  unint64_t v304 = (unsigned int *)v58;
  uint64_t v305 = v59;
  uint64_t v306 = v32;
  uint64_t v307 = v60;
  uint64_t v308 = v61;
  uint64_t v309 = v33;
  uint64_t v310 = v62;
  uint64_t v311 = v63;
  uint64_t v312 = v34;
  uint64_t v313 = v64;
  uint64_t v314 = v65;
  uint64_t v315 = v35;
  uint64_t v316 = v91;
  uint64_t v317 = v66;
  uint64_t v318 = v36;
  uint64_t v319 = v67;
  uint64_t v320 = v68;
  uint64_t v321 = v37;
  uint64_t v322 = v69;
  uint64_t v323 = v70;
  v324 = v326;
  uint64_t v325 = 0x100000000;
  if (v71)
  {
    if (v71 == 1)
    {
      size_t v101 = 16;
      uint64_t v102 = v326;
      goto LABEL_169;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v324, (uint64_t)v326, v71, 16);
    if (v230)
    {
      uint64_t v102 = v324;
      size_t v101 = 16 * v230;
LABEL_169:
      memcpy(v102, v229, v101);
    }
    LODWORD(v325) = v71;
  }
  LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v300);
  if (v324 != v326) {
    free(v324);
  }
  if (v229 != v231) {
    free(v229);
  }
  unint64_t v105 = v289 + v26[6];
  unint64_t v106 = v105 + v26[7];
  char v107 = *(char **)(v6 + 2568);
  unint64_t v108 = *(void *)(v6 + 2576);
  if ((unint64_t)v107 < v108)
  {
    *(void *)char v107 = v105;
    *((void *)v107 + 1) = v106;
    uint64_t v109 = v107 + 16;
    int v110 = v187;
    goto LABEL_218;
  }
  v111 = *(char **)(v6 + 2560);
  uint64_t v112 = (v107 - v111) >> 4;
  unint64_t v113 = v112 + 1;
  int v110 = v187;
  if ((unint64_t)(v112 + 1) >> 60) {
    goto LABEL_382;
  }
  uint64_t v114 = v108 - (void)v111;
  if (v114 >> 3 > v113) {
    unint64_t v113 = v114 >> 3;
  }
  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v115 = v113;
  }
  if (v115)
  {
    if (!(v115 >> 60))
    {
      unint64_t v116 = (char *)operator new(16 * v115);
      goto LABEL_206;
    }
LABEL_383:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v116 = 0;
LABEL_206:
  v129 = &v116[16 * v112];
  *(void *)v129 = v105;
  *((void *)v129 + 1) = v106;
  uint64_t v109 = v129 + 16;
  if (v107 == v111)
  {
    a3 = v6 + 2536;
  }
  else
  {
    a3 = v6 + 2536;
    do
    {
      *((_OWORD *)v129 - 1) = *((_OWORD *)v107 - 1);
      v129 -= 16;
      v107 -= 16;
    }
    while (v107 != v111);
    char v107 = *(char **)(v6 + 2560);
  }
  *(void *)(v6 + 2560) = v129;
  *(void *)(v6 + 2568) = v109;
  *(void *)(v6 + 2576) = &v116[16 * v115];
  if (v107) {
    operator delete(v107);
  }
LABEL_218:
  int v131 = 0;
  *(void *)(v6 + 2568) = v109;
  while (2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
    uint64_t v132 = v300;
    if (v300)
    {
      if (strncmp((const char *)(v300 + 8), "__DATA", 6uLL) && strncmp((const char *)(v132 + 8), "__AUTH", 6uLL))
      {
        v24 += *(unsigned int *)(v132 + 4);
        uint64_t v300 = 0;
        uint64_t v133 = v132;
        goto LABEL_243;
      }
      unint64_t v134 = v289 + *(unsigned int *)(v132 + 24);
      unint64_t v135 = v134 + *(unsigned int *)(v132 + 28);
      uint64_t v136 = *(char **)(v6 + 2592);
      unint64_t v137 = *(void *)(v6 + 2600);
      if ((unint64_t)v136 >= v137)
      {
        uint64_t v139 = *(char **)(v6 + 2584);
        uint64_t v140 = (v136 - v139) >> 4;
        unint64_t v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 60) {
          goto LABEL_382;
        }
        uint64_t v142 = v137 - (void)v139;
        if (v142 >> 3 > v141) {
          unint64_t v141 = v142 >> 3;
        }
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v141 = 0xFFFFFFFFFFFFFFFLL;
        }
        unint64_t v183 = v141;
        if (v141)
        {
          if (v141 >> 60) {
            goto LABEL_383;
          }
          BOOL v143 = (char *)operator new(16 * v141);
        }
        else
        {
          BOOL v143 = 0;
        }
        uint64_t v144 = &v143[16 * v140];
        *(void *)uint64_t v144 = v134;
        *((void *)v144 + 1) = v135;
        v145 = v144;
        if (v136 == v139)
        {
          a3 = v6 + 2536;
          int v110 = v187;
          unint64_t v146 = v183;
        }
        else
        {
          a3 = v6 + 2536;
          int v110 = v187;
          unint64_t v146 = v183;
          do
          {
            *((_OWORD *)v145 - 1) = *((_OWORD *)v136 - 1);
            v145 -= 16;
            v136 -= 16;
          }
          while (v136 != v139);
          uint64_t v136 = *(char **)(v6 + 2584);
        }
        *(void *)(v6 + 2584) = v145;
        v138 = v144 + 16;
        *(void *)(v6 + 2592) = v144 + 16;
        *(void *)(v6 + 2600) = &v143[16 * v146];
        if (v136) {
          operator delete(v136);
        }
      }
      else
      {
        *(void *)uint64_t v136 = v134;
        *((void *)v136 + 1) = v135;
        v138 = v136 + 16;
        a3 = v6 + 2536;
      }
      *(void *)(v6 + 2592) = v138;
      uint64_t v133 = v300;
      v24 += *(unsigned int *)(v132 + 4);
      uint64_t v300 = 0;
      if (v133)
      {
LABEL_243:
        v327[0] = v133;
        if (!v304) {
          goto LABEL_381;
        }
        (*(void (**)(unsigned int *, void *))(*(void *)v304 + 48))(v304, v327);
      }
    }
    else
    {
      uint64_t v300 = 0;
    }
    if (v304 == (unsigned int *)&v301)
    {
      (*(void (**)(uint64_t *))(v301 + 32))(&v301);
    }
    else if (v304)
    {
      (*(void (**)(void))(*(void *)v304 + 40))();
    }
    if (!v132)
    {
      LOBYTE(v6) = 0;
      LOBYTE(a2) = 0;
      goto LABEL_320;
    }
    if (++v131 != v110) {
      continue;
    }
    break;
  }
  v147 = *(uint64_t **)(v6 + 2544);
  if ((unint64_t)v147 >= *(void *)(v6 + 2552))
  {
    uint64_t v149 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v297);
  }
  else
  {
    uint64_t v148 = v297;
    uint64_t v297 = 0;
    uint64_t *v147 = v148;
    if (v299)
    {
      if (v299 == v298)
      {
        v147[4] = (uint64_t)(v147 + 1);
        (*(void (**)(void *))(*v299 + 24))(v299);
      }
      else
      {
        v147[4] = (uint64_t)v299;
        std::string::size_type v299 = 0;
      }
    }
    else
    {
      v147[4] = 0;
    }
    uint64_t v149 = v147 + 5;
  }
  *(void *)(v6 + 2544) = v149;
  if ((unint64_t)v149 >= *(void *)(v6 + 2552))
  {
    uint64_t v170 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v290);
  }
  else
  {
    uint64_t v169 = v290;
    uint64_t v290 = 0;
    *uint64_t v149 = v169;
    if (v292)
    {
      if (v292 == v291)
      {
        v149[4] = v149 + 1;
        (*(void (**)(void *))(*v292 + 24))(v292);
      }
      else
      {
        v149[4] = v292;
        unint64_t v292 = 0;
      }
    }
    else
    {
      v149[4] = 0;
    }
    uint64_t v170 = v149 + 5;
  }
  *(void *)(v6 + 2544) = v170;
  LODWORD(a3) = a2 >> 8;
  LOBYTE(v6) = 1;
LABEL_320:
  if (__dst != v258) {
    free(__dst);
  }
LABEL_322:
  uint64_t v173 = v290;
  uint64_t v290 = 0;
  if (v173)
  {
    uint64_t v300 = v173;
    if (v292)
    {
      (*(void (**)(void *, uint64_t *))(*v292 + 48))(v292, &v300);
      goto LABEL_325;
    }
LABEL_381:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_382:
    abort();
  }
LABEL_325:
  if (v292 == v291)
  {
    (*(void (**)(void *))(v291[0] + 32))(v291);
  }
  else if (v292)
  {
    (*(void (**)(void))(*v292 + 40))();
  }
  uint64_t v174 = v294;
  uint64_t v294 = 0;
  if (v174)
  {
    uint64_t v300 = v174;
    if (!v296) {
      goto LABEL_381;
    }
    (*(void (**)(void *, uint64_t *))(*v296 + 48))(v296, &v300);
  }
LABEL_332:
  if (v296 == v295)
  {
    (*(void (**)(void *))(v295[0] + 32))(v295);
  }
  else if (v296)
  {
    (*(void (**)(void))(*v296 + 40))();
  }
LABEL_336:
  uint64_t v175 = v297;
  uint64_t v297 = 0;
  if (v175)
  {
    uint64_t v300 = v175;
    if (!v299) {
      goto LABEL_381;
    }
    (*(void (**)(void *, uint64_t *))(*v299 + 48))(v299, &v300);
  }
LABEL_339:
  if (v299 == v298)
  {
    (*(void (**)(void *))(v298[0] + 32))(v298);
  }
  else if (v299)
  {
    (*(void (**)(void))(*v299 + 40))();
  }
  unint64_t v55 = 0;
  unint64_t v3 = 0;
  uint64_t v54 = __src;
  if (__src != v201) {
    goto LABEL_372;
  }
LABEL_373:
  uint64_t v179 = (uint64_t)v202;
  v202 = 0;
  if (v179)
  {
    uint64_t v300 = v179;
    if (!v204) {
      goto LABEL_381;
    }
    (*(void (**)(void *, uint64_t *))(*v204 + 48))(v204, &v300);
  }
LABEL_376:
  if (v204 == v203)
  {
    (*(void (**)(void *))(v203[0] + 32))(v203);
  }
  else if (v204)
  {
    (*(void (**)(void))(*v204 + 40))();
  }
  return ((unint64_t)v6 << 32) | (v3 << 40) | ((a3 & 0xFFFFFF) << 8) | a2;
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v25);
  if (v25)
  {
    (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v22);
    std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100]((uint64_t *)&v25, (uint64_t *)&v22);
    uint64_t v6 = (uint64_t)v22;
    long long v22 = 0;
    if (v6)
    {
      uint64_t v28 = v6;
      if (!v24) {
        goto LABEL_31;
      }
      (*(void (**)(void *, uint64_t *))(*v24 + 48))(v24, &v28);
    }
    if (v24 == v23)
    {
      (*(void (**)(void *))(v23[0] + 32))(v23);
      int v7 = v25;
      if (v25) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v24) {
        (*(void (**)(void))(*v24 + 40))();
      }
      int v7 = v25;
      if (v25)
      {
LABEL_9:
        if (*v7 != 17744)
        {
          LODWORD(v8) = 0;
          unint64_t v9 = 0;
          unsigned __int8 v10 = 0;
          LOBYTE(v11) = 0;
          long long v25 = 0;
          goto LABEL_24;
        }
        uint64_t v19 = v21;
        uint64_t v20 = 0x100000000;
        if (&v19 == (void **)a3 || (unsigned int v12 = *(_DWORD *)(a3 + 8)) == 0)
        {
LABEL_21:
          unint64_t PECOFFSections = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(a1, a2, (uint64_t)&v19);
          unsigned __int8 v10 = PECOFFSections;
          unint64_t v8 = PECOFFSections >> 8;
          unint64_t v11 = HIDWORD(PECOFFSections);
          unint64_t v9 = PECOFFSections >> 40;
          if (v19 != v21) {
            free(v19);
          }
          int v7 = v25;
          long long v25 = 0;
          if (!v7) {
            goto LABEL_26;
          }
LABEL_24:
          long long v22 = v7;
          if (v27)
          {
            (*(void (**)(void *, _DWORD **))(*v27 + 48))(v27, &v22);
            goto LABEL_26;
          }
LABEL_31:
          uint64_t v18 = std::__throw_bad_function_call[abi:nn180100]();
          return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(v18);
        }
        if (v12 < 2)
        {
          size_t v15 = 16;
          uint64_t v14 = v21;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, *(unsigned int *)(a3 + 8), 16);
          uint64_t v13 = *(unsigned int *)(a3 + 8);
          if (!v13)
          {
LABEL_20:
            LODWORD(v20) = v12;
            goto LABEL_21;
          }
          uint64_t v14 = v19;
          size_t v15 = 16 * v13;
        }
        memcpy(v14, *(const void **)a3, v15);
        goto LABEL_20;
      }
    }
  }
  LODWORD(v8) = 0;
  unint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  LOBYTE(v11) = 0;
  long long v25 = 0;
LABEL_26:
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  return (v9 << 40) | ((unint64_t)v11 << 32) | (v8 << 8) | v10;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(uint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v234);
  unint64_t v8 = (void **)v234;
  if (!v234)
  {
    unsigned __int8 v9 = 0;
    unint64_t v10 = 0;
    uint64_t v234 = 0;
    goto LABEL_89;
  }
  if (*(_DWORD *)v234 == 1179403647)
  {
    int v11 = *(unsigned __int8 *)(v234 + 4);
    if (v11 != 1)
    {
      if (v11 != 2)
      {
        unint64_t v10 = 0;
        unsigned __int8 v9 = 0;
        goto LABEL_86;
      }
      long long v12 = a3[1];
      v233[0] = *a3;
      v233[1] = v12;
      __src = v232;
      uint64_t v231 = 0x100000000;
      if (&__src == (void **)a4 || (unsigned int v13 = *(_DWORD *)(a4 + 8)) == 0)
      {
LABEL_21:
        unint64_t v336 = a2;
        uint64_t v334 = 0;
        uint64_t v333 = 0;
        uint64_t v335 = 0;
        std::string::size_type v329 = v233;
        uint64_t v330 = a1;
        uint64_t v331 = &v336;
        std::string::size_type v332 = &v333;
        if (!v22
          || (unint64_t v23 = *(unsigned __int16 *)(v22 + 58), v23 < 0x40)
          || (uint64_t v24 = *(unsigned __int16 *)(v22 + 60), !*(_WORD *)(v22 + 60)))
        {
          unsigned __int8 v9 = 0;
          unint64_t v48 = 0;
          unint64_t v49 = 0;
          goto LABEL_50;
        }
        uint64_t v224 = a1;
        uint64_t v25 = 0;
        uint64_t v220 = v22;
        uint64_t v26 = *(void *)(v22 + 40);
        uint64_t v327 = 0;
        std::string __p = 0;
        int v328 = 0;
        do
        {
          if (!v28) {
            goto LABEL_156;
          }
          uint64_t v29 = v28;
          uint64_t v30 = v327;
          if (v327 < v328)
          {
            *uint64_t v327 = v28;
            int v27 = (uint64_t *)(v30 + 8);
          }
          else
          {
            uint64_t v31 = __p;
            int64_t v32 = (char *)v327 - (unsigned char *)__p;
            uint64_t v33 = ((char *)v327 - (unsigned char *)__p) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_217;
            }
            uint64_t v35 = (char *)v328 - (unsigned char *)__p;
            if (((char *)v328 - (unsigned char *)__p) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              if (v36 >> 61) {
                goto LABEL_218;
              }
              uint64_t v37 = operator new(8 * v36);
            }
            else
            {
              uint64_t v37 = 0;
            }
            int v38 = (uint64_t *)&v37[8 * v33];
            *int v38 = v29;
            int v27 = v38 + 1;
            if (v30 != v31)
            {
              unint64_t v39 = v30 - v31 - 8;
              if (v39 < 0x58) {
                goto LABEL_221;
              }
              if ((unint64_t)(v30 - &v37[v32]) < 0x20) {
                goto LABEL_221;
              }
              uint64_t v40 = (v39 >> 3) + 1;
              uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
              int v42 = &v30[-v41];
              int v38 = (uint64_t *)((char *)v38 - v41);
              uint64_t v43 = &v37[v32 - 16];
              long long v44 = (long long *)(v30 - 16);
              uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v46 = *v44;
                *(v43 - 1) = *(v44 - 1);
                *uint64_t v43 = v46;
                v43 -= 2;
                v44 -= 2;
                v45 -= 4;
              }
              while (v45);
              uint64_t v30 = v42;
              if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_221:
                do
                {
                  uint64_t v47 = *((void *)v30 - 1);
                  v30 -= 8;
                  *--int v38 = v47;
                }
                while (v30 != v31);
              }
              uint64_t v30 = __p;
            }
            std::string __p = v38;
            uint64_t v327 = v27;
            int v328 = (uint64_t *)&v37[8 * v36];
            if (v30) {
              operator delete(v30);
            }
          }
          uint64_t v327 = v27;
          ++v25;
        }
        while (v25 != v24);
        unsigned int v82 = *(unsigned __int16 *)(v220 + 62);
        if (v82 == 0xFFFF) {
          unsigned int v82 = *(_DWORD *)(*(void *)__p + 40);
        }
        uint64_t v83 = *((void *)__p + v82);
        uint64_t v84 = *(void *)(v83 + 24);
        uint64_t v325 = *(void *)(v83 + 32);
        if (!v85) {
          goto LABEL_98;
        }
        uint64_t v316 = (void (**)(swift::SwiftObjectFileFormatELF *__hidden))v85;
        char v324 = 0;
        uint64_t v317 = &v324;
        p_p = &__p;
        uint64_t v319 = (uint64_t *)&v316;
        uint64_t v320 = &v325;
        uint64_t v321 = &v336;
        uint64_t v322 = v233;
        uint64_t v323 = v224;
        uint64_t v237 = off_C8C28;
        if (v324)
        {
LABEL_98:
          unsigned __int8 v9 = 0;
          unint64_t v48 = 0;
          unint64_t v49 = 0;
          uint64_t v86 = (uint64_t *)__p;
          if (!__p) {
            goto LABEL_50;
          }
          goto LABEL_157;
        }
        uint64_t v92 = v314;
        uint64_t v93 = v311;
        uint64_t v94 = v308;
        uint64_t v95 = v305;
        uint64_t v96 = v302;
        uint64_t v97 = v299;
        uint64_t v98 = v296;
        uint64_t v99 = v293;
        uint64_t v100 = v314 | v311 | v308 | v305 | v302 | v299 | v296 | v293;
        BOOL v194 = v100 != 0;
        if (!v100)
        {
          uint64_t v192 = 0;
          unsigned int v218 = v314;
          unsigned __int8 v222 = 0;
          goto LABEL_155;
        }
        size_t v101 = v313;
        uint64_t v102 = v315;
        uint64_t v265 = v313;
        uint64_t v266 = v314;
        size_t v103 = v310;
        uint64_t v104 = v312;
        uint64_t v267 = v315;
        uint64_t v268 = v310;
        uint64_t v269 = v311;
        uint64_t v270 = v312;
        unint64_t v105 = v307;
        uint64_t v106 = v309;
        uint64_t v271 = v307;
        uint64_t v272 = v308;
        char v107 = v304;
        uint64_t v108 = v306;
        uint64_t v273 = v309;
        uint64_t v274 = v304;
        uint64_t v275 = v305;
        uint64_t v276 = v306;
        uint64_t v109 = v301;
        uint64_t v110 = v303;
        uint64_t v277 = v301;
        uint64_t v278 = v302;
        v111 = v298;
        uint64_t v112 = v300;
        uint64_t v279 = v303;
        uint64_t v280 = v298;
        uint64_t v281 = v299;
        uint64_t v282 = v300;
        unint64_t v113 = v295;
        uint64_t v114 = v297;
        int v283 = v295;
        uint64_t v284 = v296;
        unint64_t v115 = v292;
        uint64_t v116 = v294;
        uint64_t v285 = v297;
        BOOL v286 = v292;
        uint64_t v287 = v293;
        uint64_t v288 = v294;
        long long __dst = v291;
        uint64_t v290 = 0x100000000;
        unint64_t v117 = v231;
        if (!v231)
        {
LABEL_120:
          uint64_t v238 = v101;
          uint64_t v239 = v92;
          uint64_t v240 = v102;
          uint64_t v241 = v103;
          uint64_t v242 = v93;
          uint64_t v243 = v104;
          uint64_t v244 = v105;
          uint64_t v245 = v94;
          uint64_t v246 = v106;
          uint64_t v247 = v107;
          uint64_t v248 = v95;
          uint64_t v249 = v108;
          uint64_t v250 = v109;
          uint64_t v251 = v96;
          uint64_t v252 = v110;
          uint64_t v253 = v111;
          uint64_t v254 = v97;
          uint64_t v255 = v112;
          int v256 = v113;
          uint64_t v257 = v98;
          uint64_t v258 = v114;
          uint64_t v259 = v115;
          uint64_t v260 = v99;
          uint64_t v261 = v116;
          uint64_t v262 = v264;
          uint64_t v263 = 0x100000000;
          if (!v117) {
            goto LABEL_134;
          }
          if (v117 == 1)
          {
            size_t v148 = 16;
            uint64_t v149 = v264;
          }
          else
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v262, (uint64_t)v264, v117, 16);
            if (!v290)
            {
LABEL_133:
              LODWORD(v263) = v117;
              size_t v101 = v238;
              uint64_t v92 = v239;
              uint64_t v102 = v240;
              size_t v103 = v241;
              uint64_t v93 = v242;
              uint64_t v104 = v243;
              unint64_t v105 = v244;
              uint64_t v94 = v245;
              uint64_t v106 = v246;
              char v107 = v247;
              uint64_t v95 = v248;
              uint64_t v108 = v249;
              uint64_t v109 = v250;
              uint64_t v96 = v251;
              uint64_t v110 = v252;
              v111 = v253;
              uint64_t v97 = v254;
              uint64_t v112 = v255;
              unint64_t v113 = v256;
              uint64_t v98 = v257;
              uint64_t v114 = v258;
              unint64_t v115 = v259;
              uint64_t v99 = v260;
              uint64_t v116 = v261;
LABEL_134:
              uint64_t v337 = v101;
              uint64_t v338 = v92;
              uint64_t v339 = v102;
              uint64_t v340 = v103;
              uint64_t v341 = v93;
              uint64_t v342 = v104;
              v343 = v105;
              uint64_t v344 = v94;
              uint64_t v345 = v106;
              int v346 = v107;
              uint64_t v347 = v95;
              uint64_t v348 = v108;
              v349 = v109;
              uint64_t v350 = v96;
              uint64_t v351 = v110;
              uint64_t v352 = v111;
              uint64_t v353 = v97;
              uint64_t v354 = v112;
              uint64_t v355 = v113;
              uint64_t v356 = v98;
              uint64_t v357 = v114;
              unint64_t v358 = v115;
              uint64_t v359 = v99;
              uint64_t v360 = v116;
              uint64_t v361 = v363;
              uint64_t v362 = 0x100000000;
              if (!v117)
              {
LABEL_148:
                unsigned int v156 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v224 + 296), (uint64_t)&v337);
                if (v361 != v363) {
                  free(v361);
                }
                if (v262 != v264) {
                  free(v262);
                }
                if (__dst != v291) {
                  free(__dst);
                }
                unsigned int v218 = v156 >> 8;
                unsigned __int8 v222 = v156;
                uint64_t v192 = 0x100000000;
LABEL_155:
                uint64_t v214 = v337;
                uint64_t v216 = v338;
                uint64_t v212 = v339;
                uint64_t v208 = v337;
                uint64_t v210 = v338;
                uint64_t v206 = v339;
                v202 = v337;
                uint64_t v204 = v338;
                uint64_t v200 = v339;
                v196 = v337;
                uint64_t v198 = v338;
                uint64_t v157 = v339;
                uint64_t v158 = v337;
                uint64_t v159 = v338;
                uint64_t v160 = v339;
                uint64_t v161 = v337;
                uint64_t v162 = v338;
                uint64_t v163 = v339;
                v164 = v337;
                uint64_t v165 = v338;
                uint64_t v166 = v339;
                if (v324)
                {
LABEL_156:
                  unsigned __int8 v9 = 0;
                  unint64_t v48 = 0;
                  unint64_t v49 = 0;
                  uint64_t v86 = (uint64_t *)__p;
                  if (!__p) {
                    goto LABEL_50;
                  }
                  goto LABEL_157;
                }
                uint64_t v167 = v337;
                uint64_t v168 = v338;
                uint64_t v169 = v339;
                if (v216 || v210 || v204 || v198 || v159 || v162 || v165 || v338)
                {
                  uint64_t v337 = v214;
                  uint64_t v338 = v216;
                  uint64_t v339 = v212;
                  uint64_t v340 = v208;
                  uint64_t v341 = v210;
                  uint64_t v342 = v206;
                  v343 = v202;
                  uint64_t v344 = v204;
                  uint64_t v345 = v200;
                  int v346 = v196;
                  uint64_t v347 = v198;
                  uint64_t v348 = v157;
                  v349 = v158;
                  uint64_t v350 = v159;
                  uint64_t v351 = v160;
                  uint64_t v352 = v161;
                  uint64_t v353 = v162;
                  uint64_t v354 = v163;
                  uint64_t v355 = v164;
                  uint64_t v356 = v165;
                  uint64_t v357 = v166;
                  unint64_t v358 = v167;
                  uint64_t v359 = v168;
                  uint64_t v360 = v169;
                  llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v361, (uint64_t)&__src);
                  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v265, (uint64_t)&v337);
                  unsigned int v173 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v224, (uint64_t)&v265);
                  if (__dst != v291) {
                    free(__dst);
                  }
                  if (v194) {
                    unsigned __int8 v170 = v222;
                  }
                  else {
                    unsigned __int8 v170 = v173;
                  }
                  if (v194) {
                    unsigned int v171 = v218;
                  }
                  else {
                    unsigned int v171 = v173 >> 8;
                  }
                  if (v361 != v363) {
                    free(v361);
                  }
                  uint64_t v172 = 0x100000000;
                }
                else
                {
                  unsigned __int8 v170 = v222;
                  unsigned int v171 = v218;
                  uint64_t v172 = v192;
                }
                unint64_t v48 = v172 & 0x100000000;
                unsigned __int8 v9 = v170;
                unint64_t v49 = v172 & 0x100000000 | ((*(void *)&v171 & 0xFFFFFFLL) << 8);
                uint64_t v86 = (uint64_t *)__p;
                if (__p)
                {
LABEL_157:
                  uint64_t v327 = v86;
                  operator delete(v86);
                }
LABEL_50:
                uint64_t v337 = (void **)&v333;
                std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__destroy_vector::operator()[abi:nn180100](&v337);
                unint64_t v50 = v49 >> 8;
                unint64_t v51 = HIDWORD(v48);
                uint64_t v52 = __src;
                a2 = v49 >> 8;
                unint64_t v10 = HIDWORD(v48);
                if (__src == v232)
                {
LABEL_86:
                  unint64_t v8 = (void **)v234;
                  uint64_t v234 = 0;
                  if (!v8) {
                    goto LABEL_89;
                  }
                  goto LABEL_87;
                }
LABEL_85:
                free(v52);
                LODWORD(a2) = v50;
                unint64_t v10 = v51;
                goto LABEL_86;
              }
              if (v117 == 1)
              {
                size_t v152 = 16;
                unint64_t v153 = v363;
              }
              else
              {
                __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v361, (uint64_t)v363, v117, 16);
                if (!v263)
                {
LABEL_147:
                  LODWORD(v362) = v117;
                  goto LABEL_148;
                }
                unint64_t v153 = v361;
                size_t v152 = 16 * v263;
              }
              memcpy(v153, v262, v152);
              goto LABEL_147;
            }
            uint64_t v149 = v262;
            size_t v148 = 16 * v290;
          }
          memcpy(v149, __dst, v148);
          goto LABEL_133;
        }
        if (v231 == 1)
        {
          size_t v118 = 16;
          char v119 = v291;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v291, v231, 16);
          if (!v231)
          {
LABEL_119:
            LODWORD(v290) = v117;
            size_t v101 = v265;
            uint64_t v92 = v266;
            uint64_t v102 = v267;
            size_t v103 = v268;
            uint64_t v93 = v269;
            uint64_t v104 = v270;
            unint64_t v105 = v271;
            uint64_t v94 = v272;
            uint64_t v106 = v273;
            char v107 = v274;
            uint64_t v95 = v275;
            uint64_t v108 = v276;
            uint64_t v109 = v277;
            uint64_t v96 = v278;
            uint64_t v110 = v279;
            v111 = v280;
            uint64_t v97 = v281;
            uint64_t v112 = v282;
            unint64_t v113 = v283;
            uint64_t v98 = v284;
            uint64_t v114 = v285;
            unint64_t v115 = v286;
            uint64_t v99 = v287;
            uint64_t v116 = v288;
            goto LABEL_120;
          }
          char v119 = __dst;
          size_t v118 = 16 * v231;
        }
        memcpy(v119, __src, v118);
        goto LABEL_119;
      }
      if (v13 < 2)
      {
        size_t v16 = 16;
        size_t v15 = v232;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v232, *(unsigned int *)(a4 + 8), 16);
        uint64_t v14 = *(unsigned int *)(a4 + 8);
        if (!v14)
        {
LABEL_20:
          LODWORD(v231) = v13;
          goto LABEL_21;
        }
        size_t v15 = __src;
        size_t v16 = 16 * v14;
      }
      memcpy(v15, *(const void **)a4, v16);
      goto LABEL_20;
    }
    long long v17 = a3[1];
    v229[0] = *a3;
    v229[1] = v17;
    uint64_t v226 = v228;
    uint64_t v227 = 0x100000000;
    if (&v226 == (void **)a4 || (unsigned int v18 = *(_DWORD *)(a4 + 8)) == 0)
    {
LABEL_55:
      unint64_t v336 = a2;
      uint64_t v334 = 0;
      uint64_t v333 = 0;
      uint64_t v335 = 0;
      std::string::size_type v329 = v229;
      uint64_t v330 = a1;
      uint64_t v331 = &v336;
      std::string::size_type v332 = &v333;
      if (!v53
        || (unint64_t v54 = *(unsigned __int16 *)(v53 + 46), v54 < 0x28)
        || (uint64_t v55 = *(unsigned __int16 *)(v53 + 48), !*(_WORD *)(v53 + 48)))
      {
        unsigned __int8 v9 = 0;
        unint64_t v79 = 0;
        unint64_t v80 = 0;
        goto LABEL_84;
      }
      uint64_t v225 = a1;
      uint64_t v56 = 0;
      uint64_t v221 = v53;
      uint64_t v57 = *(unsigned int *)(v53 + 32);
      uint64_t v327 = 0;
      std::string __p = 0;
      int v328 = 0;
      do
      {
        if (!v59) {
          goto LABEL_192;
        }
        uint64_t v60 = v59;
        uint64_t v61 = v327;
        if (v327 < v328)
        {
          *uint64_t v327 = v59;
          uint64_t v58 = (uint64_t *)(v61 + 8);
        }
        else
        {
          uint64_t v62 = __p;
          int64_t v63 = (char *)v327 - (unsigned char *)__p;
          uint64_t v64 = ((char *)v327 - (unsigned char *)__p) >> 3;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 61) {
            goto LABEL_217;
          }
          uint64_t v66 = (char *)v328 - (unsigned char *)__p;
          if (((char *)v328 - (unsigned char *)__p) >> 2 > v65) {
            unint64_t v65 = v66 >> 2;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            if (v67 >> 61) {
LABEL_218:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v68 = operator new(8 * v67);
          }
          else
          {
            uint64_t v68 = 0;
          }
          uint64_t v69 = (uint64_t *)&v68[8 * v64];
          uint64_t *v69 = v60;
          uint64_t v58 = v69 + 1;
          if (v61 != v62)
          {
            unint64_t v70 = v61 - v62 - 8;
            if (v70 < 0x58) {
              goto LABEL_222;
            }
            if ((unint64_t)(v61 - &v68[v63]) < 0x20) {
              goto LABEL_222;
            }
            uint64_t v71 = (v70 >> 3) + 1;
            uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v73 = &v61[-v72];
            uint64_t v69 = (uint64_t *)((char *)v69 - v72);
            uint64_t v74 = &v68[v63 - 16];
            uint64_t v75 = (long long *)(v61 - 16);
            uint64_t v76 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v77 = *v75;
              *(v74 - 1) = *(v75 - 1);
              *uint64_t v74 = v77;
              v74 -= 2;
              v75 -= 2;
              v76 -= 4;
            }
            while (v76);
            uint64_t v61 = v73;
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_222:
              do
              {
                uint64_t v78 = *((void *)v61 - 1);
                v61 -= 8;
                *--uint64_t v69 = v78;
              }
              while (v61 != v62);
            }
            uint64_t v61 = __p;
          }
          std::string __p = v69;
          uint64_t v327 = v58;
          int v328 = (uint64_t *)&v68[8 * v67];
          if (v61) {
            operator delete(v61);
          }
        }
        uint64_t v327 = v58;
        ++v56;
      }
      while (v56 != v55);
      unsigned int v87 = *(unsigned __int16 *)(v221 + 50);
      if (v87 == 0xFFFF) {
        unsigned int v87 = *(_DWORD *)(*(void *)__p + 24);
      }
      uint64_t v88 = *((void *)__p + v87);
      uint64_t v89 = *(unsigned int *)(v88 + 16);
      LODWORD(v237) = *(_DWORD *)(v88 + 20);
      if (!v90) {
        goto LABEL_104;
      }
      uint64_t v325 = v90;
      char v324 = 0;
      uint64_t v317 = &v324;
      p_p = &__p;
      uint64_t v319 = &v325;
      uint64_t v320 = (uint64_t *)&v237;
      uint64_t v321 = &v336;
      uint64_t v322 = v229;
      uint64_t v323 = v225;
      uint64_t v316 = off_C8C28;
      if (v324)
      {
LABEL_104:
        unsigned __int8 v9 = 0;
        unint64_t v79 = 0;
        unint64_t v80 = 0;
        uint64_t v91 = (uint64_t *)__p;
        if (!__p) {
          goto LABEL_84;
        }
        goto LABEL_193;
      }
      uint64_t v120 = v314;
      uint64_t v121 = v311;
      uint64_t v122 = v308;
      uint64_t v123 = v305;
      uint64_t v124 = v302;
      uint64_t v125 = v299;
      uint64_t v126 = v296;
      uint64_t v127 = v293;
      uint64_t v128 = v314 | v311 | v308 | v305 | v302 | v299 | v296 | v293;
      BOOL v195 = v128 != 0;
      if (!v128)
      {
        uint64_t v193 = 0;
        unsigned int v219 = v314;
        unsigned __int8 v223 = 0;
        goto LABEL_191;
      }
      v129 = v313;
      uint64_t v130 = v315;
      uint64_t v265 = v313;
      uint64_t v266 = v314;
      int v131 = v310;
      uint64_t v132 = v312;
      uint64_t v267 = v315;
      uint64_t v268 = v310;
      uint64_t v269 = v311;
      uint64_t v270 = v312;
      uint64_t v133 = v307;
      uint64_t v134 = v309;
      uint64_t v271 = v307;
      uint64_t v272 = v308;
      unint64_t v135 = v304;
      uint64_t v136 = v306;
      uint64_t v273 = v309;
      uint64_t v274 = v304;
      uint64_t v275 = v305;
      uint64_t v276 = v306;
      unint64_t v137 = v301;
      uint64_t v138 = v303;
      uint64_t v277 = v301;
      uint64_t v278 = v302;
      uint64_t v139 = v298;
      uint64_t v140 = v300;
      uint64_t v279 = v303;
      uint64_t v280 = v298;
      uint64_t v281 = v299;
      uint64_t v282 = v300;
      unint64_t v141 = v295;
      uint64_t v142 = v297;
      int v283 = v295;
      uint64_t v284 = v296;
      BOOL v143 = v292;
      uint64_t v144 = v294;
      uint64_t v285 = v297;
      BOOL v286 = v292;
      uint64_t v287 = v293;
      uint64_t v288 = v294;
      long long __dst = v291;
      uint64_t v290 = 0x100000000;
      unint64_t v145 = v227;
      if (!v227)
      {
LABEL_127:
        uint64_t v238 = v129;
        uint64_t v239 = v120;
        uint64_t v240 = v130;
        uint64_t v241 = v131;
        uint64_t v242 = v121;
        uint64_t v243 = v132;
        uint64_t v244 = v133;
        uint64_t v245 = v122;
        uint64_t v246 = v134;
        uint64_t v247 = v135;
        uint64_t v248 = v123;
        uint64_t v249 = v136;
        uint64_t v250 = v137;
        uint64_t v251 = v124;
        uint64_t v252 = v138;
        uint64_t v253 = v139;
        uint64_t v254 = v125;
        uint64_t v255 = v140;
        int v256 = v141;
        uint64_t v257 = v126;
        uint64_t v258 = v142;
        uint64_t v259 = v143;
        uint64_t v260 = v127;
        uint64_t v261 = v144;
        uint64_t v262 = v264;
        uint64_t v263 = 0x100000000;
        if (!v145) {
          goto LABEL_141;
        }
        if (v145 == 1)
        {
          size_t v150 = 16;
          uint64_t v151 = v264;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v262, (uint64_t)v264, v145, 16);
          if (!v290)
          {
LABEL_140:
            LODWORD(v263) = v145;
            v129 = v238;
            uint64_t v120 = v239;
            uint64_t v130 = v240;
            int v131 = v241;
            uint64_t v121 = v242;
            uint64_t v132 = v243;
            uint64_t v133 = v244;
            uint64_t v122 = v245;
            uint64_t v134 = v246;
            unint64_t v135 = v247;
            uint64_t v123 = v248;
            uint64_t v136 = v249;
            unint64_t v137 = v250;
            uint64_t v124 = v251;
            uint64_t v138 = v252;
            uint64_t v139 = v253;
            uint64_t v125 = v254;
            uint64_t v140 = v255;
            unint64_t v141 = v256;
            uint64_t v126 = v257;
            uint64_t v142 = v258;
            BOOL v143 = v259;
            uint64_t v127 = v260;
            uint64_t v144 = v261;
LABEL_141:
            uint64_t v337 = v129;
            uint64_t v338 = v120;
            uint64_t v339 = v130;
            uint64_t v340 = v131;
            uint64_t v341 = v121;
            uint64_t v342 = v132;
            v343 = v133;
            uint64_t v344 = v122;
            uint64_t v345 = v134;
            int v346 = v135;
            uint64_t v347 = v123;
            uint64_t v348 = v136;
            v349 = v137;
            uint64_t v350 = v124;
            uint64_t v351 = v138;
            uint64_t v352 = v139;
            uint64_t v353 = v125;
            uint64_t v354 = v140;
            uint64_t v355 = v141;
            uint64_t v356 = v126;
            uint64_t v357 = v142;
            unint64_t v358 = v143;
            uint64_t v359 = v127;
            uint64_t v360 = v144;
            uint64_t v361 = v363;
            uint64_t v362 = 0x100000000;
            if (!v145)
            {
LABEL_184:
              unsigned int v174 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v225 + 296), (uint64_t)&v337);
              if (v361 != v363) {
                free(v361);
              }
              if (v262 != v264) {
                free(v262);
              }
              if (__dst != v291) {
                free(__dst);
              }
              unsigned int v219 = v174 >> 8;
              unsigned __int8 v223 = v174;
              uint64_t v193 = 0x100000000;
LABEL_191:
              uint64_t v215 = v337;
              uint64_t v217 = v338;
              uint64_t v213 = v339;
              int v209 = v337;
              uint64_t v211 = v338;
              uint64_t v207 = v339;
              v203 = v337;
              uint64_t v205 = v338;
              uint64_t v201 = v339;
              uint64_t v197 = v337;
              uint64_t v199 = v338;
              uint64_t v175 = v339;
              uint64_t v176 = v337;
              uint64_t v177 = v338;
              uint64_t v178 = v339;
              uint64_t v179 = v337;
              uint64_t v180 = v338;
              uint64_t v181 = v339;
              uint64_t v182 = v337;
              uint64_t v183 = v338;
              uint64_t v184 = v339;
              if (v324)
              {
LABEL_192:
                unsigned __int8 v9 = 0;
                unint64_t v79 = 0;
                unint64_t v80 = 0;
                uint64_t v91 = (uint64_t *)__p;
                if (!__p) {
                  goto LABEL_84;
                }
                goto LABEL_193;
              }
              uint64_t v185 = v337;
              uint64_t v186 = v338;
              uint64_t v187 = v339;
              if (v217 || v211 || v205 || v199 || v177 || v180 || v183 || v338)
              {
                uint64_t v337 = v215;
                uint64_t v338 = v217;
                uint64_t v339 = v213;
                uint64_t v340 = v209;
                uint64_t v341 = v211;
                uint64_t v342 = v207;
                v343 = v203;
                uint64_t v344 = v205;
                uint64_t v345 = v201;
                int v346 = v197;
                uint64_t v347 = v199;
                uint64_t v348 = v175;
                v349 = v176;
                uint64_t v350 = v177;
                uint64_t v351 = v178;
                uint64_t v352 = v179;
                uint64_t v353 = v180;
                uint64_t v354 = v181;
                uint64_t v355 = v182;
                uint64_t v356 = v183;
                uint64_t v357 = v184;
                unint64_t v358 = v185;
                uint64_t v359 = v186;
                uint64_t v360 = v187;
                llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v361, (uint64_t)&v226);
                swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v265, (uint64_t)&v337);
                unsigned int v191 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v225, (uint64_t)&v265);
                if (__dst != v291) {
                  free(__dst);
                }
                if (v195) {
                  unsigned __int8 v188 = v223;
                }
                else {
                  unsigned __int8 v188 = v191;
                }
                if (v195) {
                  unsigned int v189 = v219;
                }
                else {
                  unsigned int v189 = v191 >> 8;
                }
                if (v361 != v363) {
                  free(v361);
                }
                uint64_t v190 = 0x100000000;
              }
              else
              {
                unsigned __int8 v188 = v223;
                unsigned int v189 = v219;
                uint64_t v190 = v193;
              }
              unint64_t v79 = v190 & 0x100000000;
              unsigned __int8 v9 = v188;
              unint64_t v80 = v190 & 0x100000000 | ((*(void *)&v189 & 0xFFFFFFLL) << 8);
              uint64_t v91 = (uint64_t *)__p;
              if (__p)
              {
LABEL_193:
                uint64_t v327 = v91;
                operator delete(v91);
              }
LABEL_84:
              uint64_t v337 = (void **)&v333;
              std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__destroy_vector::operator()[abi:nn180100](&v337);
              a2 = v80 >> 8;
              unint64_t v10 = HIDWORD(v79);
              uint64_t v52 = v226;
              LODWORD(v50) = a2;
              unint64_t v51 = v10;
              if (v226 == v228) {
                goto LABEL_86;
              }
              goto LABEL_85;
            }
            if (v145 == 1)
            {
              size_t v154 = 16;
              uint64_t v155 = v363;
            }
            else
            {
              __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v361, (uint64_t)v363, v145, 16);
              if (!v263)
              {
LABEL_183:
                LODWORD(v362) = v145;
                goto LABEL_184;
              }
              uint64_t v155 = v361;
              size_t v154 = 16 * v263;
            }
            memcpy(v155, v262, v154);
            goto LABEL_183;
          }
          uint64_t v151 = v262;
          size_t v150 = 16 * v290;
        }
        memcpy(v151, __dst, v150);
        goto LABEL_140;
      }
      if (v227 == 1)
      {
        size_t v146 = 16;
        v147 = v291;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v291, v227, 16);
        if (!v227)
        {
LABEL_126:
          LODWORD(v290) = v145;
          v129 = v265;
          uint64_t v120 = v266;
          uint64_t v130 = v267;
          int v131 = v268;
          uint64_t v121 = v269;
          uint64_t v132 = v270;
          uint64_t v133 = v271;
          uint64_t v122 = v272;
          uint64_t v134 = v273;
          unint64_t v135 = v274;
          uint64_t v123 = v275;
          uint64_t v136 = v276;
          unint64_t v137 = v277;
          uint64_t v124 = v278;
          uint64_t v138 = v279;
          uint64_t v139 = v280;
          uint64_t v125 = v281;
          uint64_t v140 = v282;
          unint64_t v141 = v283;
          uint64_t v126 = v284;
          uint64_t v142 = v285;
          BOOL v143 = v286;
          uint64_t v127 = v287;
          uint64_t v144 = v288;
          goto LABEL_127;
        }
        v147 = __dst;
        size_t v146 = 16 * v227;
      }
      memcpy(v147, v226, v146);
      goto LABEL_126;
    }
    if (v18 < 2)
    {
      size_t v21 = 16;
      uint64_t v20 = v228;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, *(unsigned int *)(a4 + 8), 16);
      uint64_t v19 = *(unsigned int *)(a4 + 8);
      if (!v19)
      {
LABEL_54:
        LODWORD(v227) = v18;
        goto LABEL_55;
      }
      uint64_t v20 = v226;
      size_t v21 = 16 * v19;
    }
    memcpy(v20, *(const void **)a4, v21);
    goto LABEL_54;
  }
  unsigned __int8 v9 = 0;
  unint64_t v10 = 0;
  uint64_t v234 = 0;
LABEL_87:
  uint64_t v337 = v8;
  if (!v236)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_217:
    abort();
  }
  (*(void (**)(void *, void ***))(*v236 + 48))(v236, &v337);
LABEL_89:
  if (v236 == v235)
  {
    (*(void (**)(void *))(v235[0] + 32))(v235);
  }
  else if (v236)
  {
    (*(void (**)(void))(*v236 + 40))();
  }
  return (v10 << 32) | ((a2 & 0xFFFFFF) << 8) | v9;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMachOSections<anonymous namespace'::MachOTraits<4u>>(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()@<X0>(char *__s2@<X1>, uint64_t result@<X0>, void *a3@<X8>)
{
  uint64_t v4 = **(unsigned int **)result;
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 24);
    uint64_t v8 = **(void **)(result + 8);
    while (1)
    {
      uint64_t result = strncmp((const char *)v8, __s2, 0x10uLL);
      if (!result) {
        break;
      }
      v8 += 68;
      if (!--v4) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = **(void **)(v6 + 16) + *(unsigned int *)(v8 + 32);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v7 + 2488) + 24))(&v16);
    uint64_t v10 = v16;
    if (v16)
    {
      int v11 = *(uint64_t **)(v7 + 2544);
      if ((unint64_t)v11 >= *(void *)(v7 + 2552))
      {
        long long v12 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v7 + 2536), &v16);
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t *v11 = v10;
        if (v18)
        {
          if (v18 == v17)
          {
            v11[4] = (uint64_t)(v11 + 1);
            (*(void (**)(void *))(*v18 + 24))(v18);
          }
          else
          {
            v11[4] = (uint64_t)v18;
            unsigned int v18 = 0;
          }
        }
        else
        {
          v11[4] = 0;
        }
        long long v12 = v11 + 5;
      }
      *(void *)(v7 + 2544) = v12;
      *a3 = v9;
      a3[1] = v10;
      a3[2] = *(unsigned int *)(v8 + 36);
      uint64_t v13 = v16;
      uint64_t v16 = 0;
      if (v13)
      {
        uint64_t v19 = v13;
        if (!v18)
        {
          uint64_t v14 = std::__throw_bad_function_call[abi:nn180100]();
          return (uint64_t)swift::SwiftObjectFileFormatMachO::getSectionName(v14, v15);
        }
        (*(void (**)(void *, uint64_t *))(*v18 + 48))(v18, &v19);
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v16 = 0;
    }
    uint64_t result = (uint64_t)v18;
    if (v18 == v17)
    {
      return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
    }
    else if (v18)
    {
      return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
    }
  }
  else
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

char *swift::SwiftObjectFileFormatMachO::getSectionName(uint64_t a1, char a2)
{
  return off_C9318[a2];
}

void *std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[40 * v2];
  uint64_t v9 = &v7[40 * v6];
  uint64_t v25 = v9;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)uint64_t v8 = v10;
  int v11 = (uint64_t *)a2[4];
  if (v11)
  {
    if (v11 == a2 + 1)
    {
      *((void *)v8 + 4) = v8 + 8;
      (*(void (**)(uint64_t *))(*v11 + 24))(v11);
    }
    else
    {
      *((void *)v8 + 4) = v11;
      a2[4] = 0;
    }
  }
  else
  {
    *((void *)v8 + 4) = 0;
  }
  long long v12 = v8 + 40;
  v24.i64[1] = (uint64_t)(v8 + 40);
  uint64_t v14 = a1->i64[0];
  unint64_t v13 = a1->u64[1];
  if (v13 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v13);
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = &v8[v15];
      uint64_t v17 = v13 + v15;
      uint64_t v18 = *(void *)(v13 + v15 - 40);
      *(void *)(v13 + v15 - 40) = 0;
      *(void *)&v8[v15 - 40] = v18;
      uint64_t v19 = *(void *)(v13 + v15 - 8);
      if (v19)
      {
        if (v17 - 32 == v19)
        {
          *((void *)v16 - 1) = v16 - 32;
          (*(void (**)(void))(**(void **)(v17 - 8) + 24))(*(void *)(v17 - 8));
        }
        else
        {
          *((void *)v16 - 1) = v19;
          *(void *)(v17 - 8) = 0;
        }
      }
      else
      {
        *((void *)v16 - 1) = 0;
      }
      v15 -= 40;
    }
    while (v13 + v15 != v14);
    int64x2_t v20 = *a1;
    v8 += v15;
    long long v12 = (void *)v24.i64[1];
    uint64_t v9 = v25;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v12;
  int64x2_t v24 = v20;
  size_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  uint64_t v25 = v21;
  uint64_t v23 = v20.i64[0];
  std::__split_buffer<std::unique_ptr<void const,std::function<void ()(void const*)>>>::~__split_buffer((uint64_t)&v23);
  return v12;
}

void std::__split_buffer<std::unique_ptr<void const,std::function<void ()(void const*)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    while (1)
    {
      *(void *)(a1 + 16) = v3 - 40;
      uint64_t v4 = *(void *)(v3 - 40);
      *(void *)(v3 - 40) = 0;
      if (v4)
      {
        uint64_t v8 = v4;
        uint64_t v5 = *(void *)(v3 - 8);
        if (!v5)
        {
          uint64_t v7 = (swift::SwiftObjectFileFormatMachO *)std::__throw_bad_function_call[abi:nn180100]();
          swift::SwiftObjectFileFormatMachO::~SwiftObjectFileFormatMachO(v7);
          return;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v8);
      }
      uint64_t v6 = *(void *)(v3 - 8);
      if (v6 == v3 - 32)
      {
        (*(void (**)(uint64_t))(*(void *)(v3 - 32) + 32))(v3 - 32);
        uint64_t v3 = *(void *)(a1 + 16);
        if (v3 == v2) {
          break;
        }
      }
      else
      {
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        uint64_t v3 = *(void *)(a1 + 16);
        if (v3 == v2) {
          break;
        }
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
}

void swift::SwiftObjectFileFormatMachO::~SwiftObjectFileFormatMachO(swift::SwiftObjectFileFormatMachO *this)
{
}

void swift::SwiftObjectFileFormatMachO::getSegmentName(uint64_t a1@<X8>)
{
  *(void *)a1 = "__TEXT";
  *(void *)(a1 + 8) = 6;
  *(unsigned char *)(a1 + 16) = 1;
}

void swift::SwiftObjectFileFormatMachO::getSymbolRichSegmentName(uint64_t a1@<X8>)
{
  *(void *)a1 = "__DWARF";
  *(void *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 16) = 1;
}

BOOL swift::SwiftObjectFileFormatMachO::sectionContainsReflectionData(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 9)
  {
    int v3 = *(unsigned __int8 *)(a2 + 8);
    BOOL v4 = *(void *)a2 == 0x3574666977735F5FLL;
    int v5 = 95;
  }
  else
  {
    if (a3 != 7) {
      return 0;
    }
    int v3 = *(_DWORD *)(a2 + 3);
    BOOL v4 = *(_DWORD *)a2 == 1868783455;
    int v5 = 1953721967;
  }
  return v4 && v3 == v5;
}

void swift::SwiftObjectFileFormat::getSegmentName(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void swift::SwiftObjectFileFormat::getSymbolRichSegmentName(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMachOSections<anonymous namespace'::MachOTraits<8u>>(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()@<X0>(char *__s2@<X1>, uint64_t result@<X0>, void *a3@<X8>)
{
  uint64_t v4 = **(unsigned int **)result;
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 24);
    uint64_t v8 = **(void **)(result + 8);
    while (1)
    {
      uint64_t result = strncmp((const char *)v8, __s2, 0x10uLL);
      if (!result) {
        break;
      }
      v8 += 80;
      if (!--v4) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = **(void **)(v6 + 16) + *(void *)(v8 + 32);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v7 + 2488) + 24))(&v16);
    uint64_t v10 = v16;
    if (v16)
    {
      int v11 = *(uint64_t **)(v7 + 2544);
      if ((unint64_t)v11 >= *(void *)(v7 + 2552))
      {
        long long v12 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v7 + 2536), &v16);
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t *v11 = v10;
        if (v18)
        {
          if (v18 == v17)
          {
            v11[4] = (uint64_t)(v11 + 1);
            (*(void (**)(void *))(*v18 + 24))(v18);
          }
          else
          {
            v11[4] = (uint64_t)v18;
            uint64_t v18 = 0;
          }
        }
        else
        {
          v11[4] = 0;
        }
        long long v12 = v11 + 5;
      }
      *(void *)(v7 + 2544) = v12;
      *a3 = v9;
      a3[1] = v10;
      a3[2] = *(void *)(v8 + 40);
      uint64_t v13 = v16;
      uint64_t v16 = 0;
      if (v13)
      {
        uint64_t v19 = v13;
        if (!v18)
        {
          uint64_t v14 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
          return std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](v14, v15);
        }
        (*(void (**)(void *, uint64_t *))(*v18 + 48))(v18, &v19);
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v16 = 0;
    }
    uint64_t result = (uint64_t)v18;
    if (v18 == v17)
    {
      return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
    }
    else if (v18)
    {
      return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
    }
  }
  else
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (!v5)
  {
LABEL_4:
    uint64_t v7 = a1 + 1;
    uint64_t v8 = (uint64_t *)a1[4];
    a1[4] = 0;
    if (v8 == a1 + 1)
    {
      (*(void (**)(uint64_t *))(*v7 + 32))(a1 + 1);
      uint64_t v9 = (uint64_t *)a2[4];
      if (v9)
      {
LABEL_8:
        if (v9 == a2 + 1)
        {
          a1[4] = (uint64_t)v7;
          (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[4] + 24))(a2[4], a1 + 1);
        }
        else
        {
          a1[4] = (uint64_t)v9;
          a2[4] = 0;
        }
        return (uint64_t)a1;
      }
    }
    else
    {
      if (v8) {
        (*(void (**)(uint64_t *))(*v8 + 40))(v8);
      }
      uint64_t v9 = (uint64_t *)a2[4];
      if (v9) {
        goto LABEL_8;
      }
    }
    a1[4] = 0;
    return (uint64_t)a1;
  }
  uint64_t v12 = v5;
  uint64_t v6 = a1[4];
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v12);
    goto LABEL_4;
  }
  uint64_t v11 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(v11);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v132 = a2;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v129);
  if (v129)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v126);
    if (!v126)
    {
      LOBYTE(v14) = 0;
      uint64_t v13 = 0;
      uint64_t v126 = 0;
LABEL_55:
      if (v128 == v127)
      {
        (*(void (**)(void *))(v127[0] + 32))(v127);
      }
      else if (v128)
      {
        (*(void (**)(void))(*v128 + 40))();
      }
      uint64_t v43 = v129;
      uint64_t v129 = 0;
      if (!v43) {
        goto LABEL_62;
      }
      v133[0] = v43;
      if (v131)
      {
        (*(void (**)(void *, void *))(*v131 + 48))(v131, v133);
        goto LABEL_62;
      }
LABEL_67:
      uint64_t v45 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(v46, v45, v47, v48);
    }
    uint64_t v125 = v126;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v122);
    if (!v122)
    {
      LOBYTE(v14) = 0;
      uint64_t v13 = 0;
      uint64_t v122 = 0;
LABEL_48:
      if (v124 == v123)
      {
        (*(void (**)(void *))(v123[0] + 32))(v123);
      }
      else if (v124)
      {
        (*(void (**)(void))(*v124 + 40))();
      }
      uint64_t v42 = v126;
      uint64_t v126 = 0;
      if (v42)
      {
        v133[0] = v42;
        if (!v128) {
          goto LABEL_67;
        }
        (*(void (**)(void *, void *))(*v128 + 48))(v128, v133);
      }
      goto LABEL_55;
    }
    v121[0] = &v125;
    v121[1] = &v122;
    v121[2] = &v132;
    v121[3] = a1;
    uint64_t v120 = off_C8BE8;
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5flmd", (uint64_t)v121, 8uLL, &v117);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5asty", (uint64_t)v121, 8uLL, &v114);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5bltn", (uint64_t)v121, 8uLL, &v111);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5cptr", (uint64_t)v121, 8uLL, &v108);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5tyrf", (uint64_t)v121, 8uLL, &v105);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5rfst", (uint64_t)v121, 8uLL, &v102);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5prtc$B", (uint64_t)v121, 0xAuLL, &v99);
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5mpen$B", (uint64_t)v121, 0xAuLL, &v96);
    uint64_t v5 = v117;
    uint64_t v6 = v114;
    uint64_t v7 = v111;
    uint64_t v8 = v108;
    uint64_t v9 = v105;
    uint64_t v10 = v102;
    uint64_t v11 = v99;
    uint64_t v12 = v96;
    if (!v117 && !v114 && !v111 && !v108 && !v105 && !v102 && !v99 && !v96)
    {
      uint64_t v13 = 0;
      LOBYTE(v14) = 0;
      goto LABEL_45;
    }
    unsigned int v15 = 0;
    uint64_t v16 = v118;
    uint64_t v17 = v119;
    uint64_t v69 = v117;
    uint64_t v70 = v118;
    uint64_t v18 = v115;
    uint64_t v19 = v116;
    uint64_t v71 = v119;
    uint64_t v72 = v114;
    uint64_t v73 = v115;
    uint64_t v74 = v116;
    uint64_t v20 = v112;
    uint64_t v21 = v113;
    uint64_t v75 = v111;
    uint64_t v76 = v112;
    uint64_t v22 = v109;
    uint64_t v23 = v110;
    uint64_t v77 = v113;
    uint64_t v78 = v108;
    uint64_t v79 = v109;
    uint64_t v80 = v110;
    uint64_t v24 = v106;
    uint64_t v25 = v107;
    uint64_t v81 = v105;
    uint64_t v82 = v106;
    uint64_t v26 = v103;
    uint64_t v27 = v104;
    uint64_t v83 = v107;
    uint64_t v84 = v102;
    uint64_t v85 = v103;
    uint64_t v86 = v104;
    uint64_t v28 = v100;
    uint64_t v29 = v101;
    uint64_t v87 = v99;
    uint64_t v88 = v100;
    uint64_t v31 = v97;
    uint64_t v30 = v98;
    uint64_t v89 = v101;
    uint64_t v90 = v96;
    uint64_t v91 = v97;
    uint64_t v92 = v98;
    __src = v95;
    uint64_t v94 = 0x100000000;
    if (&__src == (void **)a3 || (unsigned int v32 = *(_DWORD *)(a3 + 8)) == 0)
    {
LABEL_24:
      uint64_t v49 = v5;
      uint64_t v50 = v16;
      uint64_t v51 = v17;
      uint64_t v52 = v6;
      uint64_t v53 = v18;
      uint64_t v54 = v19;
      uint64_t v55 = v7;
      uint64_t v56 = v20;
      uint64_t v57 = v21;
      uint64_t v58 = v8;
      uint64_t v59 = v22;
      uint64_t v60 = v23;
      uint64_t v61 = v9;
      uint64_t v62 = v24;
      uint64_t v63 = v10;
      uint64_t v64 = v11;
      uint64_t v65 = v12;
      uint64_t v66 = v68;
      uint64_t v67 = 0x100000000;
      if (!v15) {
        goto LABEL_31;
      }
      if (v15 == 1)
      {
        size_t v36 = 16;
        uint64_t v37 = v68;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v15, 16);
        if (!v94)
        {
LABEL_30:
          LODWORD(v67) = v15;
          uint64_t v5 = v49;
          uint64_t v16 = v50;
          uint64_t v17 = v51;
          uint64_t v6 = v52;
          uint64_t v18 = v53;
          uint64_t v19 = v54;
          uint64_t v7 = v55;
          uint64_t v20 = v56;
          uint64_t v21 = v57;
          uint64_t v8 = v58;
          uint64_t v22 = v59;
          uint64_t v23 = v60;
          uint64_t v9 = v61;
          uint64_t v24 = v62;
          uint64_t v10 = v63;
          uint64_t v11 = v64;
          uint64_t v12 = v65;
LABEL_31:
          int v38 = (uint64_t *)(a1 + 296);
          v133[0] = v5;
          v133[1] = v16;
          v133[2] = v17;
          v133[3] = v6;
          v133[4] = v18;
          v133[5] = v19;
          v133[6] = v7;
          v133[7] = v20;
          v133[8] = v21;
          v133[9] = v8;
          v133[10] = v22;
          v133[11] = v23;
          v133[12] = v9;
          v133[13] = v24;
          v133[14] = v25;
          v133[15] = v10;
          v133[16] = v26;
          v133[17] = v27;
          v133[18] = v11;
          v133[19] = v28;
          v133[20] = v29;
          v133[21] = v12;
          v133[22] = v31;
          v133[23] = v30;
          uint64_t v134 = v136;
          uint64_t v135 = 0x100000000;
          if (!v15)
          {
LABEL_38:
            unsigned int v14 = swift::reflection::TypeRefBuilder::addReflectionInfo(v38, (uint64_t)v133);
            if (v134 != v136) {
              free(v134);
            }
            if (v66 != v68) {
              free(v66);
            }
            if (__src != v95) {
              free(__src);
            }
            LODWORD(a3) = v14 >> 8;
            uint64_t v13 = 1;
LABEL_45:
            uint64_t v41 = v122;
            uint64_t v122 = 0;
            if (v41)
            {
              v133[0] = v41;
              if (!v124) {
                goto LABEL_67;
              }
              (*(void (**)(void *, void *))(*v124 + 48))(v124, v133);
            }
            goto LABEL_48;
          }
          if (v15 == 1)
          {
            size_t v39 = 16;
            uint64_t v40 = v136;
          }
          else
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v15, 16);
            if (!v67)
            {
LABEL_37:
              LODWORD(v135) = v15;
              goto LABEL_38;
            }
            uint64_t v40 = v134;
            size_t v39 = 16 * v67;
          }
          memcpy(v40, v66, v39);
          goto LABEL_37;
        }
        uint64_t v37 = v66;
        size_t v36 = 16 * v94;
      }
      memcpy(v37, __src, v36);
      goto LABEL_30;
    }
    if (v32 < 2)
    {
      size_t v35 = 16;
      unint64_t v34 = v95;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v95, *(unsigned int *)(a3 + 8), 16);
      uint64_t v33 = *(unsigned int *)(a3 + 8);
      if (!v33)
      {
LABEL_23:
        LODWORD(v94) = v32;
        uint64_t v5 = v69;
        uint64_t v16 = v70;
        uint64_t v17 = v71;
        uint64_t v6 = v72;
        uint64_t v18 = v73;
        uint64_t v19 = v74;
        uint64_t v7 = v75;
        uint64_t v20 = v76;
        uint64_t v21 = v77;
        uint64_t v8 = v78;
        uint64_t v22 = v79;
        uint64_t v23 = v80;
        uint64_t v9 = v81;
        uint64_t v24 = v82;
        uint64_t v25 = v83;
        uint64_t v10 = v84;
        uint64_t v26 = v85;
        uint64_t v27 = v86;
        uint64_t v11 = v87;
        uint64_t v28 = v88;
        uint64_t v29 = v89;
        uint64_t v12 = v90;
        unsigned int v15 = v32;
        uint64_t v31 = v91;
        uint64_t v30 = v92;
        goto LABEL_24;
      }
      unint64_t v34 = __src;
      size_t v35 = 16 * v33;
    }
    memcpy(v34, *(const void **)a3, v35);
    goto LABEL_23;
  }
  LOBYTE(v14) = 0;
  uint64_t v13 = 0;
  uint64_t v129 = 0;
LABEL_62:
  if (v131 == v130)
  {
    (*(void (**)(void *))(v130[0] + 32))(v130);
  }
  else if (v131)
  {
    (*(void (**)(void))(*v131 + 40))();
  }
  return v14 | ((a3 & 0xFFFFFF) << 8) | (v13 << 32);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()@<X0>(void *__s2@<X1>, uint64_t result@<X0>, size_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = **(void **)result;
  uint64_t v6 = *(unsigned __int16 *)(v5 + 2);
  if (!*(_WORD *)(v5 + 2))
  {
LABEL_15:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(result + 24);
  uint64_t v11 = (unsigned int *)(**(void **)(result + 8) + 12);
  while (*((unsigned char *)v11 - 5))
  {
    if (a3 != 8) {
      goto LABEL_4;
    }
    size_t v12 = 8;
LABEL_3:
    uint64_t result = memcmp(v11 - 3, __s2, v12);
    if (!result) {
      goto LABEL_10;
    }
LABEL_4:
    v11 += 10;
    if (!--v6) {
      goto LABEL_15;
    }
  }
  uint64_t result = strlen((const char *)v11 - 12);
  if (result != a3) {
    goto LABEL_4;
  }
  size_t v12 = a3;
  if (a3) {
    goto LABEL_3;
  }
LABEL_10:
  uint64_t v13 = **(void **)(v9 + 16) + *v11;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v10 + 2488) + 24))(&v21);
  uint64_t v14 = v21;
  if (!v21)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v21 = 0;
LABEL_25:
    uint64_t result = (uint64_t)v23;
    if (v23 == v22) {
      return (*(uint64_t (**)(void *))(v22[0] + 32))(v22);
    }
    if (v23) {
      return (*(uint64_t (**)(void *))(*v23 + 40))(v23);
    }
    return result;
  }
  unsigned int v15 = *(uint64_t **)(v10 + 2544);
  if ((unint64_t)v15 >= *(void *)(v10 + 2552))
  {
    uint64_t v16 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v10 + 2536), &v21);
  }
  else
  {
    uint64_t v21 = 0;
    *unsigned int v15 = v14;
    if (v23)
    {
      if (v23 == v22)
      {
        v15[4] = (uint64_t)(v15 + 1);
        (*(void (**)(void *))(*v23 + 24))(v23);
      }
      else
      {
        v15[4] = (uint64_t)v23;
        uint64_t v23 = 0;
      }
    }
    else
    {
      v15[4] = 0;
    }
    uint64_t v16 = v15 + 5;
  }
  *(void *)(v10 + 2544) = v16;
  uint64_t v17 = *(v11 - 1) - 16;
  *a4 = v13 + 8;
  a4[1] = v14 + 8;
  a4[2] = v17;
  uint64_t v18 = v21;
  uint64_t v21 = 0;
  if (!v18) {
    goto LABEL_25;
  }
  uint64_t v24 = v18;
  if (v23)
  {
    (*(void (**)(void *, uint64_t *))(*v23 + 48))(v23, &v24);
    goto LABEL_25;
  }
  uint64_t v19 = std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)swift::SwiftObjectFileFormatCOFF::getSectionName(v19, v20);
}

char *swift::SwiftObjectFileFormatCOFF::getSectionName(uint64_t a1, char a2)
{
  return off_C9368[a2];
}

void swift::SwiftObjectFileFormatCOFF::~SwiftObjectFileFormatCOFF(swift::SwiftObjectFileFormatCOFF *this)
{
}

BOOL swift::SwiftObjectFileFormatCOFF::sectionContainsReflectionData(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  return a3 >= 4 && *a2 == 897020718;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(unsigned long long,unsigned long long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)a1;
  if (*(unsigned char *)(*(void *)a1 + 24))
  {
    if ((unint64_t)(a3 + a2) <= v3[1]) {
      return *v3 + a2;
    }
    else {
      return 0;
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 2488) + 24))(&v13);
  uint64_t v7 = v13;
  if (!v13)
  {
    uint64_t v4 = 0;
    uint64_t v13 = 0;
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(uint64_t **)(v8 + 8);
  if ((unint64_t)v9 >= *(void *)(v8 + 16))
  {
    uint64_t v10 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(*(int64x2_t **)(a1 + 24), &v13);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t *v9 = v7;
    if (v15)
    {
      if (v15 == v14)
      {
        v9[4] = (uint64_t)(v9 + 1);
        (*(void (**)(void *))(*v15 + 24))(v15);
      }
      else
      {
        v9[4] = (uint64_t)v15;
        unsigned int v15 = 0;
      }
    }
    else
    {
      v9[4] = 0;
    }
    uint64_t v10 = v9 + 5;
  }
  *(void *)(v8 + 8) = v10;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8) - 40);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (!v11) {
    goto LABEL_19;
  }
  uint64_t v16 = v11;
  if (v15)
  {
    (*(void (**)(void *, uint64_t *))(*v15 + 48))(v15, &v16);
LABEL_19:
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void *))(*v15 + 40))(v15);
    }
    return v4;
  }
  uint64_t v12 = std::__throw_bad_function_call[abi:nn180100]();
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  if (**(unsigned char **)a1 || (uint64_t v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v40 = *(void *)(a1 + 48);
  while (1)
  {
    uint64_t v11 = (uint64_t)*v9;
    uint64_t v12 = **v9;
    uint64_t v13 = (const char *)(**(void **)(a1 + 16) + v12);
    size_t v14 = **(void **)(a1 + 24) - v12;
    size_t v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(unsigned char **)a1 = 1;
      goto LABEL_2;
    }
    size_t v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v18 = v15 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      size_t v52 = v16;
      int64_t v53 = v19 | 0x8000000000000000;
      long long __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v53) = v15;
    p_dst = &__dst;
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    *((unsigned char *)p_dst + v16) = 0;
    int v20 = SHIBYTE(v53);
    uint64_t v22 = __dst;
    size_t v21 = v52;
    if (v53 >= 0) {
      uint64_t v23 = &__dst;
    }
    else {
      uint64_t v23 = __dst;
    }
    if (v53 >= 0) {
      size_t v21 = HIBYTE(v53);
    }
    if (v21 != a3 || a3 && memcmp(v23, a2, a3) || ((*(unsigned char *)(v11 + 10) & 0x20) == 0) == a4)
    {
      int v29 = 3;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_27:
      operator delete(v22);
      goto LABEL_68;
    }
    uint64_t v24 = *(void *)(a1 + 40);
    uint64_t v25 = *(void *)(v11 + 16) + **(void **)(a1 + 32);
    size_t v26 = *(void *)(v11 + 32);
    uint64_t v48 = 0;
    uint64_t v50 = 0;
    if (*(unsigned char *)(v24 + 24))
    {
      uint64_t v27 = *(void *)(v11 + 24);
      if (*(void *)(v24 + 8) < v27 + v26)
      {
        uint64_t v28 = 0;
        **(unsigned char **)a1 = 1;
        int v29 = 2;
LABEL_53:
        uint64_t v48 = 0;
        goto LABEL_64;
      }
      uint64_t v39 = v25;
      uint64_t v31 = malloc_type_malloc(v26, 0x4156ED03uLL);
      v43[0] = off_C8C68;
      long long v44 = v43;
      uint64_t v45 = (uint64_t)v31;
      size_t v47 = v46;
      v46[0] = off_C8C68;
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v48, &v45);
      uint64_t v32 = v45;
      uint64_t v45 = 0;
      if (v32)
      {
        uint64_t v54 = v32;
        if (!v47) {
          goto LABEL_75;
        }
        (*(void (**)(void *, uint64_t *))(*v47 + 48))(v47, &v54);
      }
      if (v47 == v46)
      {
        (*(void (**)(void *))(v46[0] + 32))(v46);
      }
      else if (v47)
      {
        (*(void (**)(void))(*v47 + 40))();
      }
      if (v44 == v43)
      {
        (*(void (**)(void *))(v43[0] + 32))(v43);
      }
      else if (v44)
      {
        (*(void (**)(void))(*v44 + 40))();
      }
      memcpy(v31, (const void *)(v27 + **(void **)(a1 + 40)), v26);
    }
    else
    {
      uint64_t v39 = v25;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v40 + 2488) + 24))(&v45);
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v48, &v45);
      uint64_t v30 = v45;
      uint64_t v45 = 0;
      if (v30)
      {
        v43[0] = v30;
        if (!v47) {
          goto LABEL_75;
        }
        (*(void (**)(void *, void *))(*v47 + 48))(v47, v43);
      }
      if (v47 == v46)
      {
        (*(void (**)(void *))(v46[0] + 32))(v46);
      }
      else if (v47)
      {
        (*(void (**)(void))(*v47 + 40))();
      }
    }
    uint64_t v33 = v48;
    if (!v48)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      int v29 = 1;
      uint64_t v28 = v50;
      goto LABEL_53;
    }
    unint64_t v34 = *(uint64_t **)(v40 + 2544);
    if ((unint64_t)v34 >= *(void *)(v40 + 2552))
    {
      size_t v35 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v40 + 2536), &v48);
    }
    else
    {
      uint64_t v48 = 0;
      *unint64_t v34 = v33;
      if (v50)
      {
        if (v50 == v49)
        {
          v34[4] = (uint64_t)(v34 + 1);
          (*(void (**)(void *))(*v50 + 24))(v50);
        }
        else
        {
          v34[4] = (uint64_t)v50;
          uint64_t v50 = 0;
        }
      }
      else
      {
        v34[4] = 0;
      }
      size_t v35 = v34 + 5;
    }
    *(void *)(v40 + 2544) = v35;
    *a5 = v39;
    a5[1] = v33;
    a5[2] = v26;
    uint64_t v36 = v48;
    uint64_t v28 = v50;
    uint64_t v48 = 0;
    if (!v36)
    {
      int v29 = 1;
LABEL_64:
      if (v28 == v49) {
        goto LABEL_61;
      }
      goto LABEL_65;
    }
    uint64_t v45 = v36;
    if (!v50)
    {
LABEL_75:
      uint64_t v37 = std::__throw_bad_function_call[abi:nn180100]();
      swift::SwiftObjectFileFormatELF::getSectionName(v37, v38);
      return;
    }
    (*(void (**)(void))(*v50 + 48))();
    int v29 = 1;
    uint64_t v28 = v50;
    if (v50 == v49)
    {
LABEL_61:
      (*(void (**)(void *))(v49[0] + 32))(v49);
      if (v20 < 0) {
        goto LABEL_27;
      }
      goto LABEL_68;
    }
LABEL_65:
    if (v28) {
      (*(void (**)(void *))(*v28 + 40))(v28);
    }
    if (v20 < 0) {
      goto LABEL_27;
    }
LABEL_68:
    if (v29 != 3) {
      break;
    }
    if (++v9 == v8) {
      goto LABEL_2;
    }
  }
  if (v29 == 2) {
    goto LABEL_2;
  }
}

char *swift::SwiftObjectFileFormatELF::getSectionName(uint64_t a1, char a2)
{
  return off_C93B8[a2];
}

void swift::SwiftObjectFileFormatELF::~SwiftObjectFileFormatELF(swift::SwiftObjectFileFormatELF *this)
{
}

BOOL swift::SwiftObjectFileFormatELF::sectionContainsReflectionData(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  if (a3 < 7) {
    return 0;
  }
  return *a2 == 1718187891 && *(_DWORD *)((char *)a2 + 3) == 1597338726;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
}

void *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_C8C68;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_C8C68;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  if (**(unsigned char **)a1 || (uint64_t v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v39 = *(void *)(a1 + 48);
  while (1)
  {
    uint64_t v11 = (uint64_t)*v9;
    uint64_t v12 = **v9;
    uint64_t v13 = (const char *)(**(void **)(a1 + 16) + v12);
    size_t v14 = (**(_DWORD **)(a1 + 24) - v12);
    size_t v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(unsigned char **)a1 = 1;
      goto LABEL_2;
    }
    size_t v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v18 = v15 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      size_t v51 = v16;
      int64_t v52 = v19 | 0x8000000000000000;
      long long __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v52) = v15;
    p_dst = &__dst;
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    *((unsigned char *)p_dst + v16) = 0;
    int v20 = SHIBYTE(v52);
    uint64_t v22 = __dst;
    size_t v21 = v51;
    if (v52 >= 0) {
      uint64_t v23 = &__dst;
    }
    else {
      uint64_t v23 = __dst;
    }
    if (v52 >= 0) {
      size_t v21 = HIBYTE(v52);
    }
    if (v21 != a3 || a3 && memcmp(v23, a2, a3) || ((*(unsigned char *)(v11 + 10) & 0x20) == 0) == a4)
    {
      int v29 = 3;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_27:
      operator delete(v22);
      goto LABEL_68;
    }
    uint64_t v24 = *(void *)(a1 + 40);
    uint64_t v25 = **(void **)(a1 + 32) + *(unsigned int *)(v11 + 12);
    size_t v26 = *(unsigned int *)(v11 + 20);
    uint64_t v47 = 0;
    uint64_t v49 = 0;
    if (*(unsigned char *)(v24 + 24))
    {
      uint64_t v27 = *(unsigned int *)(v11 + 16);
      if (*(void *)(v24 + 8) < (unint64_t)(v27 + v26))
      {
        uint64_t v28 = 0;
        **(unsigned char **)a1 = 1;
        int v29 = 2;
LABEL_53:
        uint64_t v47 = 0;
        goto LABEL_64;
      }
      uint64_t v38 = v25;
      uint64_t v31 = malloc_type_malloc(v26, 0x4156ED03uLL);
      v42[0] = off_C8CB0;
      uint64_t v43 = v42;
      uint64_t v44 = (uint64_t)v31;
      long long v46 = v45;
      v45[0] = off_C8CB0;
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v47, &v44);
      uint64_t v32 = v44;
      uint64_t v44 = 0;
      if (v32)
      {
        uint64_t v53 = v32;
        if (!v46) {
          goto LABEL_75;
        }
        (*(void (**)(void *, uint64_t *))(*v46 + 48))(v46, &v53);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void))(*v46 + 40))();
      }
      if (v43 == v42)
      {
        (*(void (**)(void *))(v42[0] + 32))(v42);
      }
      else if (v43)
      {
        (*(void (**)(void))(*v43 + 40))();
      }
      memcpy(v31, (const void *)(**(void **)(a1 + 40) + v27), v26);
    }
    else
    {
      uint64_t v38 = v25;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v39 + 2488) + 24))(&v44);
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v47, &v44);
      uint64_t v30 = v44;
      uint64_t v44 = 0;
      if (v30)
      {
        v42[0] = v30;
        if (!v46) {
          goto LABEL_75;
        }
        (*(void (**)(void *, void *))(*v46 + 48))(v46, v42);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void))(*v46 + 40))();
      }
    }
    uint64_t v33 = v47;
    if (!v47)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      int v29 = 1;
      uint64_t v28 = v49;
      goto LABEL_53;
    }
    unint64_t v34 = *(uint64_t **)(v39 + 2544);
    if ((unint64_t)v34 >= *(void *)(v39 + 2552))
    {
      size_t v35 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v39 + 2536), &v47);
    }
    else
    {
      uint64_t v47 = 0;
      *unint64_t v34 = v33;
      if (v49)
      {
        if (v49 == v48)
        {
          v34[4] = (uint64_t)(v34 + 1);
          (*(void (**)(void *))(*v49 + 24))(v49);
        }
        else
        {
          v34[4] = (uint64_t)v49;
          uint64_t v49 = 0;
        }
      }
      else
      {
        v34[4] = 0;
      }
      size_t v35 = v34 + 5;
    }
    *(void *)(v39 + 2544) = v35;
    *a5 = v38;
    a5[1] = v33;
    a5[2] = v26;
    uint64_t v36 = v47;
    uint64_t v28 = v49;
    uint64_t v47 = 0;
    if (!v36)
    {
      int v29 = 1;
LABEL_64:
      if (v28 == v48) {
        goto LABEL_61;
      }
      goto LABEL_65;
    }
    uint64_t v44 = v36;
    if (!v49)
    {
LABEL_75:
      uint64_t v37 = std::__throw_bad_function_call[abi:nn180100]();
      return;
    }
    (*(void (**)(void))(*v49 + 48))();
    int v29 = 1;
    uint64_t v28 = v49;
    if (v49 == v48)
    {
LABEL_61:
      (*(void (**)(void *))(v48[0] + 32))(v48);
      if (v20 < 0) {
        goto LABEL_27;
      }
      goto LABEL_68;
    }
LABEL_65:
    if (v28) {
      (*(void (**)(void *))(*v28 + 40))(v28);
    }
    if (v20 < 0) {
      goto LABEL_27;
    }
LABEL_68:
    if (v29 != 3) {
      break;
    }
    if (++v9 == v8) {
      goto LABEL_2;
    }
  }
  if (v29 == 2) {
    goto LABEL_2;
  }
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
}

void *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_C8CB0;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_C8CB0;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  (*(void (**)(int **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v202);
  if (!v202)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v202 = 0;
    goto LABEL_376;
  }
  int v7 = *v202;
  if (*v202 == -17958193)
  {
    v196 = v198;
    uint64_t v197 = 0x100000000;
    if (&v196 == (void **)a3) {
      goto LABEL_75;
    }
    unsigned int v12 = *(_DWORD *)(a3 + 8);
    if (!v12) {
      goto LABEL_75;
    }
    if (v12 < 2)
    {
      size_t v15 = 16;
      size_t v14 = v198;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, (uint64_t)v198, *(unsigned int *)(a3 + 8), 16);
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      if (!v13)
      {
LABEL_74:
        LODWORD(v197) = v12;
LABEL_75:
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v297);
        if (!v297)
        {
          LOBYTE(a2) = 0;
          LOBYTE(v6) = 0;
          uint64_t v297 = 0;
          goto LABEL_367;
        }
        int v38 = *(_DWORD *)(v297 + 20);
        if (!v38)
        {
          LOBYTE(v6) = 0;
          LOBYTE(a2) = 0;
          goto LABEL_364;
        }
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        a3 = v6 + 2536;
        int v188 = *(_DWORD *)(v297 + 20);
        while (1)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
          uint64_t v41 = v300;
          if (!v300) {
            break;
          }
          if (strncmp((const char *)(v300 + 8), "__TEXT", 0x10uLL))
          {
            int v42 = 0;
            v39 += *(unsigned int *)(v41 + 4);
            uint64_t v300 = 0;
            uint64_t v43 = v41;
LABEL_91:
            uint64_t v232 = v43;
            if (!v304) {
              goto LABEL_381;
            }
            (*(void (**)(unsigned int *, uint64_t *))(*(void *)v304 + 48))(v304, &v232);
LABEL_93:
            uint64_t v41 = v40;
            goto LABEL_94;
          }
          uint64_t v44 = *(uint64_t **)(v6 + 2544);
          if ((unint64_t)v44 >= *(void *)(v6 + 2552))
          {
            uint64_t v45 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v6 + 2536), &v300);
          }
          else
          {
            uint64_t v300 = 0;
            *uint64_t v44 = v41;
            if (v304)
            {
              if (v304 == (unsigned int *)&v301)
              {
                v44[4] = (uint64_t)(v44 + 1);
                (*(void (**)(unsigned int *))(*(void *)v304 + 24))(v304);
              }
              else
              {
                v44[4] = (uint64_t)v304;
                unint64_t v304 = 0;
              }
            }
            else
            {
              v44[4] = 0;
            }
            uint64_t v45 = v44 + 5;
          }
          *(void *)(v6 + 2544) = v45;
          uint64_t v43 = v300;
          int v42 = 2;
          uint64_t v40 = v41;
          uint64_t v300 = 0;
          if (v43) {
            goto LABEL_91;
          }
LABEL_94:
          if (v304 == (unsigned int *)&v301)
          {
            (*(void (**)(uint64_t *))(v301 + 32))(&v301);
            if (v42) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v304) {
              (*(void (**)(void))(*(void *)v304 + 40))();
            }
            if (v42)
            {
LABEL_103:
              if (v42 == 2)
              {
LABEL_104:
                if (v41)
                {
                  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v294);
                  if (!v294)
                  {
                    LOBYTE(a2) = 0;
                    LOBYTE(v6) = 0;
                    uint64_t v294 = 0;
                    goto LABEL_360;
                  }
                  int v293 = *(_DWORD *)(v294 + 64);
                  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v290);
                  if (!v290)
                  {
                    LOBYTE(a2) = 0;
                    LOBYTE(v6) = 0;
                    uint64_t v290 = 0;
                    goto LABEL_353;
                  }
                  unint64_t v289 = a2 - *(void *)(v41 + 24);
                  uint64_t v288 = v290;
                  uint64_t v284 = &v293;
                  uint64_t v285 = &v288;
                  BOOL v286 = &v289;
                  uint64_t v287 = v6;
                  int v283 = off_C8BA8;
                  uint64_t v46 = v277;
                  uint64_t v47 = v274;
                  uint64_t v48 = v271;
                  uint64_t v49 = v268;
                  uint64_t v50 = v265;
                  uint64_t v51 = v262;
                  uint64_t v52 = v259;
                  if (!v280 && !v277 && !v274 && !v271 && !v268 && !v265 && !v262 && !v259)
                  {
                    LOBYTE(v6) = 0;
                    LOBYTE(a2) = 0;
                    goto LABEL_350;
                  }
                  uint64_t v74 = v282;
                  uint64_t v232 = v280;
                  uint64_t v233 = v281;
                  uint64_t v75 = v278;
                  uint64_t v76 = v279;
                  uint64_t v234 = v282;
                  uint64_t v235 = v277;
                  int v236 = v278;
                  uint64_t v237 = v279;
                  uint64_t v77 = v275;
                  uint64_t v78 = v276;
                  uint64_t v238 = v274;
                  uint64_t v239 = v275;
                  uint64_t v79 = v272;
                  uint64_t v80 = v273;
                  uint64_t v240 = v276;
                  uint64_t v241 = v271;
                  uint64_t v242 = v272;
                  uint64_t v243 = v273;
                  uint64_t v81 = v269;
                  uint64_t v82 = v270;
                  uint64_t v244 = v268;
                  uint64_t v245 = v269;
                  uint64_t v83 = v267;
                  uint64_t v246 = v270;
                  uint64_t v247 = v265;
                  uint64_t v248 = v266;
                  uint64_t v249 = v267;
                  uint64_t v84 = v263;
                  uint64_t v85 = v264;
                  uint64_t v250 = v262;
                  uint64_t v251 = v263;
                  uint64_t v86 = v260;
                  uint64_t v87 = v261;
                  uint64_t v252 = v264;
                  uint64_t v253 = v259;
                  uint64_t v254 = v260;
                  uint64_t v255 = v261;
                  long long __dst = v258;
                  uint64_t v257 = 0x100000000;
                  unint64_t v88 = v197;
                  if (v197)
                  {
                    if (v197 == 1)
                    {
                      size_t v89 = 16;
                      uint64_t v90 = v258;
                      goto LABEL_148;
                    }
                    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v258, v197, 16);
                    if (v197)
                    {
                      uint64_t v90 = __dst;
                      size_t v89 = 16 * v197;
LABEL_148:
                      memcpy(v90, v196, v89);
                    }
                    LODWORD(v257) = v88;
                    uint64_t v97 = v232;
                    uint64_t v98 = v233;
                    uint64_t v74 = v234;
                    uint64_t v46 = v235;
                    uint64_t v75 = v236;
                    uint64_t v76 = v237;
                    uint64_t v47 = v238;
                    uint64_t v77 = v239;
                    uint64_t v78 = v240;
                    uint64_t v48 = v241;
                    uint64_t v79 = v242;
                    uint64_t v80 = v243;
                    uint64_t v49 = v244;
                    uint64_t v81 = v245;
                    uint64_t v82 = v246;
                    uint64_t v50 = v247;
                    uint64_t v96 = v248;
                    uint64_t v83 = v249;
                    uint64_t v51 = v250;
                    uint64_t v84 = v251;
                    uint64_t v85 = v252;
                    uint64_t v52 = v253;
                    uint64_t v86 = v254;
                    uint64_t v87 = v255;
                  }
                  else
                  {
                    uint64_t v96 = v266;
                    uint64_t v97 = v280;
                    uint64_t v98 = v281;
                  }
                  uint64_t v186 = v98;
                  uint64_t v182 = v74;
                  uint64_t v205 = v97;
                  uint64_t v206 = v98;
                  uint64_t v207 = v74;
                  uint64_t v208 = v46;
                  int v209 = v75;
                  uint64_t v210 = v76;
                  uint64_t v211 = v47;
                  uint64_t v212 = v77;
                  uint64_t v213 = v78;
                  uint64_t v214 = v48;
                  uint64_t v215 = v79;
                  uint64_t v216 = v80;
                  uint64_t v217 = v49;
                  uint64_t v218 = v81;
                  uint64_t v219 = v82;
                  uint64_t v220 = v50;
                  uint64_t v221 = v96;
                  uint64_t v222 = v83;
                  uint64_t v223 = v51;
                  uint64_t v224 = v84;
                  uint64_t v225 = v85;
                  uint64_t v226 = v52;
                  uint64_t v227 = v86;
                  uint64_t v228 = v87;
                  v229 = v231;
                  uint64_t v230 = 0x100000000;
                  if (v88)
                  {
                    if (v88 == 1)
                    {
                      size_t v99 = 16;
                      uint64_t v100 = v231;
                      goto LABEL_162;
                    }
                    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v231, v88, 16);
                    if (v257)
                    {
                      uint64_t v100 = v229;
                      size_t v99 = 16 * v257;
LABEL_162:
                      memcpy(v100, __dst, v99);
                    }
                    LODWORD(v230) = v88;
                    uint64_t v97 = v205;
                    uint64_t v186 = v206;
                    uint64_t v46 = v208;
                    uint64_t v182 = v207;
                    uint64_t v75 = v209;
                    uint64_t v76 = v210;
                    uint64_t v47 = v211;
                    uint64_t v77 = v212;
                    uint64_t v78 = v213;
                    uint64_t v48 = v214;
                    uint64_t v79 = v215;
                    uint64_t v80 = v216;
                    uint64_t v49 = v217;
                    uint64_t v81 = v218;
                    uint64_t v82 = v219;
                    uint64_t v50 = v220;
                    uint64_t v96 = v221;
                    uint64_t v83 = v222;
                    uint64_t v51 = v223;
                    uint64_t v84 = v224;
                    uint64_t v85 = v225;
                    uint64_t v52 = v226;
                    uint64_t v86 = v227;
                    uint64_t v87 = v228;
                  }
                  uint64_t v300 = v97;
                  uint64_t v301 = v186;
                  uint64_t v302 = v182;
                  uint64_t v303 = v46;
                  unint64_t v304 = (unsigned int *)v75;
                  uint64_t v305 = v76;
                  uint64_t v306 = v47;
                  uint64_t v307 = v77;
                  uint64_t v308 = v78;
                  uint64_t v309 = v48;
                  uint64_t v310 = v79;
                  uint64_t v311 = v80;
                  uint64_t v312 = v49;
                  uint64_t v313 = v81;
                  uint64_t v314 = v82;
                  uint64_t v315 = v50;
                  uint64_t v316 = v96;
                  uint64_t v317 = v83;
                  uint64_t v318 = v51;
                  uint64_t v319 = v84;
                  uint64_t v320 = v85;
                  uint64_t v321 = v52;
                  uint64_t v322 = v86;
                  uint64_t v323 = v87;
                  char v324 = v326;
                  uint64_t v325 = 0x100000000;
                  if (v88)
                  {
                    if (v88 == 1)
                    {
                      size_t v103 = 16;
                      uint64_t v104 = v326;
                      goto LABEL_188;
                    }
                    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v324, (uint64_t)v326, v88, 16);
                    if (v230)
                    {
                      uint64_t v104 = v324;
                      size_t v103 = 16 * v230;
LABEL_188:
                      memcpy(v104, v229, v103);
                    }
                    LODWORD(v325) = v88;
                  }
                  LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v300);
                  if (v324 != v326) {
                    free(v324);
                  }
                  if (v229 != v231) {
                    free(v229);
                  }
                  unint64_t v117 = *(void *)(v41 + 24) + v289;
                  unint64_t v118 = v117 + *(void *)(v41 + 32);
                  uint64_t v119 = *(char **)(v6 + 2568);
                  unint64_t v120 = *(void *)(v6 + 2576);
                  if ((unint64_t)v119 >= v120)
                  {
                    uint64_t v123 = *(char **)(v6 + 2560);
                    uint64_t v124 = (v119 - v123) >> 4;
                    unint64_t v125 = v124 + 1;
                    int v122 = v188;
                    if ((unint64_t)(v124 + 1) >> 60) {
                      goto LABEL_382;
                    }
                    uint64_t v126 = v120 - (void)v123;
                    if (v126 >> 3 > v125) {
                      unint64_t v125 = v126 >> 3;
                    }
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v127 = v125;
                    }
                    if (v127)
                    {
                      if (v127 >> 60) {
                        goto LABEL_383;
                      }
                      uint64_t v128 = (char *)operator new(16 * v127);
                    }
                    else
                    {
                      uint64_t v128 = 0;
                    }
                    uint64_t v130 = &v128[16 * v124];
                    *(void *)uint64_t v130 = v117;
                    *((void *)v130 + 1) = v118;
                    uint64_t v121 = v130 + 16;
                    if (v119 == v123)
                    {
                      a3 = v6 + 2536;
                    }
                    else
                    {
                      a3 = v6 + 2536;
                      do
                      {
                        *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
                        v130 -= 16;
                        v119 -= 16;
                      }
                      while (v119 != v123);
                      uint64_t v119 = *(char **)(v6 + 2560);
                    }
                    *(void *)(v6 + 2560) = v130;
                    *(void *)(v6 + 2568) = v121;
                    *(void *)(v6 + 2576) = &v128[16 * v127];
                    if (v119) {
                      operator delete(v119);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v119 = v117;
                    *((void *)v119 + 1) = v118;
                    uint64_t v121 = v119 + 16;
                    int v122 = v188;
                  }
                  int v150 = 0;
                  *(void *)(v6 + 2568) = v121;
                  while (2)
                  {
                    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
                    uint64_t v151 = v300;
                    if (v300)
                    {
                      if (strncmp((const char *)(v300 + 8), "__DATA", 6uLL)
                        && strncmp((const char *)(v151 + 8), "__AUTH", 6uLL))
                      {
                        v39 += *(unsigned int *)(v151 + 4);
                        uint64_t v300 = 0;
                        uint64_t v152 = v151;
                        goto LABEL_285;
                      }
                      unint64_t v153 = *(void *)(v151 + 24) + v289;
                      unint64_t v154 = v153 + *(void *)(v151 + 32);
                      uint64_t v155 = *(char **)(v6 + 2592);
                      unint64_t v156 = *(void *)(v6 + 2600);
                      if ((unint64_t)v155 >= v156)
                      {
                        uint64_t v158 = *(char **)(v6 + 2584);
                        uint64_t v159 = (v155 - v158) >> 4;
                        unint64_t v160 = v159 + 1;
                        if ((unint64_t)(v159 + 1) >> 60) {
                          goto LABEL_382;
                        }
                        uint64_t v161 = v156 - (void)v158;
                        if (v161 >> 3 > v160) {
                          unint64_t v160 = v161 >> 3;
                        }
                        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v160 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        unint64_t v184 = v160;
                        if (v160)
                        {
                          if (v160 >> 60) {
                            goto LABEL_383;
                          }
                          uint64_t v162 = (char *)operator new(16 * v160);
                        }
                        else
                        {
                          uint64_t v162 = 0;
                        }
                        uint64_t v163 = &v162[16 * v159];
                        *(void *)uint64_t v163 = v153;
                        *((void *)v163 + 1) = v154;
                        v164 = v163;
                        if (v155 == v158)
                        {
                          a3 = v6 + 2536;
                          int v122 = v188;
                          unint64_t v165 = v184;
                        }
                        else
                        {
                          a3 = v6 + 2536;
                          int v122 = v188;
                          unint64_t v165 = v184;
                          do
                          {
                            *((_OWORD *)v164 - 1) = *((_OWORD *)v155 - 1);
                            v164 -= 16;
                            v155 -= 16;
                          }
                          while (v155 != v158);
                          uint64_t v155 = *(char **)(v6 + 2584);
                        }
                        *(void *)(v6 + 2584) = v164;
                        uint64_t v157 = v163 + 16;
                        *(void *)(v6 + 2592) = v163 + 16;
                        *(void *)(v6 + 2600) = &v162[16 * v165];
                        if (v155) {
                          operator delete(v155);
                        }
                      }
                      else
                      {
                        *(void *)uint64_t v155 = v153;
                        *((void *)v155 + 1) = v154;
                        uint64_t v157 = v155 + 16;
                        a3 = v6 + 2536;
                      }
                      *(void *)(v6 + 2592) = v157;
                      uint64_t v152 = v300;
                      v39 += *(unsigned int *)(v151 + 4);
                      uint64_t v300 = 0;
                      if (v152)
                      {
LABEL_285:
                        v327[0] = v152;
                        if (!v304) {
                          goto LABEL_381;
                        }
                        (*(void (**)(unsigned int *, void *))(*(void *)v304 + 48))(v304, v327);
                      }
                    }
                    else
                    {
                      uint64_t v300 = 0;
                    }
                    if (v304 == (unsigned int *)&v301)
                    {
                      (*(void (**)(uint64_t *))(v301 + 32))(&v301);
                    }
                    else if (v304)
                    {
                      (*(void (**)(void))(*(void *)v304 + 40))();
                    }
                    if (!v151)
                    {
                      LOBYTE(v6) = 0;
                      LOBYTE(a2) = 0;
LABEL_348:
                      if (__dst != v258) {
                        free(__dst);
                      }
LABEL_350:
                      uint64_t v176 = v290;
                      uint64_t v290 = 0;
                      if (v176)
                      {
                        uint64_t v300 = v176;
                        if (!v292) {
                          goto LABEL_381;
                        }
                        (*(void (**)(void *, uint64_t *))(*v292 + 48))(v292, &v300);
                      }
LABEL_353:
                      if (v292 == v291)
                      {
                        (*(void (**)(void *))(v291[0] + 32))(v291);
                      }
                      else if (v292)
                      {
                        (*(void (**)(void))(*v292 + 40))();
                      }
                      uint64_t v177 = v294;
                      uint64_t v294 = 0;
                      if (v177)
                      {
                        uint64_t v300 = v177;
                        if (!v296) {
                          goto LABEL_381;
                        }
                        (*(void (**)(void *, uint64_t *))(*v296 + 48))(v296, &v300);
                      }
LABEL_360:
                      if (v296 == v295)
                      {
                        (*(void (**)(void *))(v295[0] + 32))(v295);
                      }
                      else if (v296)
                      {
                        (*(void (**)(void))(*v296 + 40))();
                      }
LABEL_364:
                      uint64_t v178 = v297;
                      uint64_t v297 = 0;
                      if (v178)
                      {
                        uint64_t v300 = v178;
                        if (!v299) {
                          goto LABEL_381;
                        }
                        (*(void (**)(void *, uint64_t *))(*v299 + 48))(v299, &v300);
                      }
LABEL_367:
                      if (v299 == v298)
                      {
                        (*(void (**)(void *))(v298[0] + 32))(v298);
                      }
                      else if (v299)
                      {
                        (*(void (**)(void))(*v299 + 40))();
                      }
                      unint64_t v55 = 0;
                      unint64_t v3 = 0;
                      uint64_t v54 = v196;
                      if (v196 == v198) {
                        goto LABEL_373;
                      }
LABEL_372:
                      free(v54);
                      unint64_t v3 = v55;
                      goto LABEL_373;
                    }
                    if (++v150 == v122)
                    {
                      uint64_t v166 = *(uint64_t **)(v6 + 2544);
                      if ((unint64_t)v166 >= *(void *)(v6 + 2552))
                      {
                        uint64_t v168 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v297);
                      }
                      else
                      {
                        uint64_t v167 = v297;
                        uint64_t v297 = 0;
                        uint64_t *v166 = v167;
                        if (v299)
                        {
                          if (v299 == v298)
                          {
                            v166[4] = (uint64_t)(v166 + 1);
                            (*(void (**)(void *))(*v299 + 24))(v299);
                          }
                          else
                          {
                            v166[4] = (uint64_t)v299;
                            uint64_t v299 = 0;
                          }
                        }
                        else
                        {
                          v166[4] = 0;
                        }
                        uint64_t v168 = v166 + 5;
                      }
                      *(void *)(v6 + 2544) = v168;
                      if ((unint64_t)v168 >= *(void *)(v6 + 2552))
                      {
                        uint64_t v172 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v290);
                      }
                      else
                      {
                        uint64_t v171 = v290;
                        uint64_t v290 = 0;
                        void *v168 = v171;
                        if (v292)
                        {
                          if (v292 == v291)
                          {
                            v168[4] = v168 + 1;
                            (*(void (**)(void *))(*v292 + 24))(v292);
                          }
                          else
                          {
                            v168[4] = v292;
                            unint64_t v292 = 0;
                          }
                        }
                        else
                        {
                          v168[4] = 0;
                        }
                        uint64_t v172 = v168 + 5;
                      }
                      *(void *)(v6 + 2544) = v172;
                      LODWORD(a3) = a2 >> 8;
                      LOBYTE(v6) = 1;
                      goto LABEL_348;
                    }
                    continue;
                  }
                }
              }
              LOBYTE(v6) = 0;
              LOBYTE(a2) = 0;
              goto LABEL_364;
            }
          }
          uint64_t v40 = v41;
          if (!--v38) {
            goto LABEL_104;
          }
        }
        uint64_t v300 = 0;
        int v42 = 1;
        goto LABEL_93;
      }
      size_t v14 = v196;
      size_t v15 = 16 * v13;
    }
    memcpy(v14, *(const void **)a3, v15);
    goto LABEL_74;
  }
  if (v7 != -17958194)
  {
    int v16 = BYTE1(v7);
    if (*v202 == 127)
    {
      unsigned int v21 = v7 & 0xFFFF0000;
      if (v16 == 69 && v21 == 1179385856)
      {
        LOBYTE(v191) = 0;
        char v192 = 0;
        llvm::SmallVector<llvm::StringRef,1u>::SmallVector(v189, a3);
        unint64_t v53 = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(v6, a2, &v191, (uint64_t)v189);
        LOBYTE(a2) = v53;
        a3 = v53 >> 8;
        uint64_t v6 = HIDWORD(v53);
        unint64_t v3 = v53 >> 40;
        uint64_t v54 = (void *)v189[0];
        unint64_t v55 = v3;
        if ((uint64_t *)v189[0] == &v190) {
          goto LABEL_373;
        }
        goto LABEL_372;
      }
    }
    else if (*v202 == 77 && BYTE1(v7) == 90)
    {
      uint64_t v193 = v195;
      uint64_t v194 = 0x100000000;
      if (&v193 == (unsigned char **)a3 || (unsigned int v17 = *(_DWORD *)(a3 + 8)) == 0)
      {
LABEL_127:
        unint64_t PECOFF = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFF(v6, a2, (uint64_t)&v193);
        LOBYTE(a2) = PECOFF;
        a3 = PECOFF >> 8;
        uint64_t v6 = HIDWORD(PECOFF);
        unint64_t v55 = PECOFF >> 40;
        uint64_t v54 = v193;
        unint64_t v3 = v55;
        if (v193 == v195) {
          goto LABEL_373;
        }
        goto LABEL_372;
      }
      if (v17 < 2)
      {
        size_t v20 = 16;
        uint64_t v19 = v195;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, (uint64_t)v195, *(unsigned int *)(a3 + 8), 16);
        uint64_t v18 = *(unsigned int *)(a3 + 8);
        if (!v18)
        {
LABEL_126:
          LODWORD(v194) = v17;
          goto LABEL_127;
        }
        uint64_t v19 = v193;
        size_t v20 = 16 * v18;
      }
      memcpy(v19, *(const void **)a3, v20);
      goto LABEL_126;
    }
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_373;
  }
  __src = v201;
  uint64_t v200 = 0x100000000;
  if (&__src == (void **)a3) {
    goto LABEL_31;
  }
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  if (!v8) {
    goto LABEL_31;
  }
  if (v8 < 2)
  {
    size_t v11 = 16;
    uint64_t v10 = v201;
    goto LABEL_29;
  }
  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v201, *(unsigned int *)(a3 + 8), 16);
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  if (v9)
  {
    uint64_t v10 = __src;
    size_t v11 = 16 * v9;
LABEL_29:
    memcpy(v10, *(const void **)a3, v11);
  }
  LODWORD(v200) = v8;
LABEL_31:
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v297);
  if (!v297)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    uint64_t v297 = 0;
    goto LABEL_339;
  }
  int v23 = *(_DWORD *)(v297 + 20);
  if (!v23)
  {
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_336;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  a3 = v6 + 2536;
  int v187 = *(_DWORD *)(v297 + 20);
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
    size_t v26 = (unsigned int *)v300;
    if (!v300)
    {
      uint64_t v300 = 0;
      int v27 = 1;
      goto LABEL_49;
    }
    if (strncmp((const char *)(v300 + 8), "__TEXT", 0x10uLL))
    {
      int v27 = 0;
      v24 += v26[1];
      uint64_t v300 = 0;
      uint64_t v28 = (uint64_t)v26;
LABEL_47:
      uint64_t v232 = v28;
      if (!v304) {
        goto LABEL_381;
      }
      (*(void (**)(unsigned int *, uint64_t *))(*(void *)v304 + 48))(v304, &v232);
LABEL_49:
      size_t v26 = v25;
      goto LABEL_50;
    }
    int v29 = *(unsigned int ***)(v6 + 2544);
    if ((unint64_t)v29 >= *(void *)(v6 + 2552))
    {
      uint64_t v30 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v6 + 2536), &v300);
    }
    else
    {
      uint64_t v300 = 0;
      *int v29 = v26;
      if (v304)
      {
        if (v304 == (unsigned int *)&v301)
        {
          v29[4] = (unsigned int *)(v29 + 1);
          (*(void (**)(unsigned int *))(*(void *)v304 + 24))(v304);
        }
        else
        {
          v29[4] = v304;
          unint64_t v304 = 0;
        }
      }
      else
      {
        v29[4] = 0;
      }
      uint64_t v30 = v29 + 5;
    }
    *(void *)(v6 + 2544) = v30;
    uint64_t v28 = v300;
    int v27 = 2;
    uint64_t v25 = v26;
    uint64_t v300 = 0;
    if (v28) {
      goto LABEL_47;
    }
LABEL_50:
    if (v304 == (unsigned int *)&v301)
    {
      (*(void (**)(uint64_t *))(v301 + 32))(&v301);
      if (v27) {
        break;
      }
      goto LABEL_56;
    }
    if (v304) {
      (*(void (**)(void))(*(void *)v304 + 40))();
    }
    if (v27) {
      break;
    }
LABEL_56:
    uint64_t v25 = v26;
    if (!--v23) {
      goto LABEL_60;
    }
  }
  if (v27 != 2)
  {
LABEL_118:
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_336;
  }
LABEL_60:
  if (!v26) {
    goto LABEL_118;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v294);
  if (!v294)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    uint64_t v294 = 0;
    goto LABEL_332;
  }
  int v293 = *(_DWORD *)(v294 + 48);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v290);
  if (!v290)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    uint64_t v290 = 0;
    goto LABEL_325;
  }
  unint64_t v289 = a2 - v26[6];
  uint64_t v288 = v290;
  uint64_t v284 = &v293;
  uint64_t v285 = &v288;
  BOOL v286 = &v289;
  uint64_t v287 = v6;
  int v283 = off_C8BA8;
  uint64_t v31 = v277;
  uint64_t v32 = v274;
  uint64_t v33 = v271;
  uint64_t v34 = v268;
  uint64_t v35 = v265;
  uint64_t v36 = v262;
  uint64_t v37 = v259;
  if (!v280 && !v277 && !v274 && !v271 && !v268 && !v265 && !v262 && !v259)
  {
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_322;
  }
  uint64_t v57 = v282;
  uint64_t v232 = v280;
  uint64_t v233 = v281;
  uint64_t v58 = v278;
  uint64_t v59 = v279;
  uint64_t v234 = v282;
  uint64_t v235 = v277;
  int v236 = v278;
  uint64_t v237 = v279;
  uint64_t v60 = v275;
  uint64_t v61 = v276;
  uint64_t v238 = v274;
  uint64_t v239 = v275;
  uint64_t v62 = v272;
  uint64_t v63 = v273;
  uint64_t v240 = v276;
  uint64_t v241 = v271;
  uint64_t v242 = v272;
  uint64_t v243 = v273;
  uint64_t v64 = v269;
  uint64_t v65 = v270;
  uint64_t v244 = v268;
  uint64_t v245 = v269;
  uint64_t v66 = v267;
  uint64_t v246 = v270;
  uint64_t v247 = v265;
  uint64_t v248 = v266;
  uint64_t v249 = v267;
  uint64_t v67 = v263;
  uint64_t v68 = v264;
  uint64_t v250 = v262;
  uint64_t v251 = v263;
  uint64_t v69 = v260;
  uint64_t v70 = v261;
  uint64_t v252 = v264;
  uint64_t v253 = v259;
  uint64_t v254 = v260;
  uint64_t v255 = v261;
  long long __dst = v258;
  uint64_t v257 = 0x100000000;
  unint64_t v71 = v200;
  if (v200)
  {
    if (v200 == 1)
    {
      size_t v72 = 16;
      uint64_t v73 = v258;
      goto LABEL_140;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v258, v200, 16);
    if (v200)
    {
      uint64_t v73 = __dst;
      size_t v72 = 16 * v200;
LABEL_140:
      memcpy(v73, __src, v72);
    }
    LODWORD(v257) = v71;
    uint64_t v92 = v232;
    uint64_t v93 = v233;
    uint64_t v57 = v234;
    uint64_t v31 = v235;
    uint64_t v58 = v236;
    uint64_t v59 = v237;
    uint64_t v32 = v238;
    uint64_t v60 = v239;
    uint64_t v61 = v240;
    uint64_t v33 = v241;
    uint64_t v62 = v242;
    uint64_t v63 = v243;
    uint64_t v34 = v244;
    uint64_t v64 = v245;
    uint64_t v65 = v246;
    uint64_t v35 = v247;
    uint64_t v91 = v248;
    uint64_t v66 = v249;
    uint64_t v36 = v250;
    uint64_t v67 = v251;
    uint64_t v68 = v252;
    uint64_t v37 = v253;
    uint64_t v69 = v254;
    uint64_t v70 = v255;
  }
  else
  {
    uint64_t v91 = v266;
    uint64_t v92 = v280;
    uint64_t v93 = v281;
  }
  uint64_t v185 = v93;
  uint64_t v181 = v57;
  uint64_t v205 = v92;
  uint64_t v206 = v93;
  uint64_t v207 = v57;
  uint64_t v208 = v31;
  int v209 = v58;
  uint64_t v210 = v59;
  uint64_t v211 = v32;
  uint64_t v212 = v60;
  uint64_t v213 = v61;
  uint64_t v214 = v33;
  uint64_t v215 = v62;
  uint64_t v216 = v63;
  uint64_t v217 = v34;
  uint64_t v218 = v64;
  uint64_t v219 = v65;
  uint64_t v220 = v35;
  uint64_t v221 = v91;
  uint64_t v222 = v66;
  uint64_t v223 = v36;
  uint64_t v224 = v67;
  uint64_t v225 = v68;
  uint64_t v226 = v37;
  uint64_t v227 = v69;
  uint64_t v228 = v70;
  v229 = v231;
  uint64_t v230 = 0x100000000;
  if (v71)
  {
    if (v71 == 1)
    {
      size_t v94 = 16;
      uint64_t v95 = v231;
      goto LABEL_155;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v231, v71, 16);
    if (v257)
    {
      uint64_t v95 = v229;
      size_t v94 = 16 * v257;
LABEL_155:
      memcpy(v95, __dst, v94);
    }
    LODWORD(v230) = v71;
    uint64_t v92 = v205;
    uint64_t v185 = v206;
    uint64_t v31 = v208;
    uint64_t v181 = v207;
    uint64_t v58 = v209;
    uint64_t v59 = v210;
    uint64_t v32 = v211;
    uint64_t v60 = v212;
    uint64_t v61 = v213;
    uint64_t v33 = v214;
    uint64_t v62 = v215;
    uint64_t v63 = v216;
    uint64_t v34 = v217;
    uint64_t v64 = v218;
    uint64_t v65 = v219;
    uint64_t v35 = v220;
    uint64_t v91 = v221;
    uint64_t v66 = v222;
    uint64_t v36 = v223;
    uint64_t v67 = v224;
    uint64_t v68 = v225;
    uint64_t v37 = v226;
    uint64_t v69 = v227;
    uint64_t v70 = v228;
  }
  uint64_t v300 = v92;
  uint64_t v301 = v185;
  uint64_t v302 = v181;
  uint64_t v303 = v31;
  unint64_t v304 = (unsigned int *)v58;
  uint64_t v305 = v59;
  uint64_t v306 = v32;
  uint64_t v307 = v60;
  uint64_t v308 = v61;
  uint64_t v309 = v33;
  uint64_t v310 = v62;
  uint64_t v311 = v63;
  uint64_t v312 = v34;
  uint64_t v313 = v64;
  uint64_t v314 = v65;
  uint64_t v315 = v35;
  uint64_t v316 = v91;
  uint64_t v317 = v66;
  uint64_t v318 = v36;
  uint64_t v319 = v67;
  uint64_t v320 = v68;
  uint64_t v321 = v37;
  uint64_t v322 = v69;
  uint64_t v323 = v70;
  char v324 = v326;
  uint64_t v325 = 0x100000000;
  if (v71)
  {
    if (v71 == 1)
    {
      size_t v101 = 16;
      uint64_t v102 = v326;
      goto LABEL_169;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v324, (uint64_t)v326, v71, 16);
    if (v230)
    {
      uint64_t v102 = v324;
      size_t v101 = 16 * v230;
LABEL_169:
      memcpy(v102, v229, v101);
    }
    LODWORD(v325) = v71;
  }
  LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v300);
  if (v324 != v326) {
    free(v324);
  }
  if (v229 != v231) {
    free(v229);
  }
  unint64_t v105 = v289 + v26[6];
  unint64_t v106 = v105 + v26[7];
  uint64_t v107 = *(char **)(v6 + 2568);
  unint64_t v108 = *(void *)(v6 + 2576);
  if ((unint64_t)v107 < v108)
  {
    *(void *)uint64_t v107 = v105;
    *((void *)v107 + 1) = v106;
    uint64_t v109 = v107 + 16;
    int v110 = v187;
    goto LABEL_218;
  }
  uint64_t v111 = *(char **)(v6 + 2560);
  uint64_t v112 = (v107 - v111) >> 4;
  unint64_t v113 = v112 + 1;
  int v110 = v187;
  if ((unint64_t)(v112 + 1) >> 60) {
    goto LABEL_382;
  }
  uint64_t v114 = v108 - (void)v111;
  if (v114 >> 3 > v113) {
    unint64_t v113 = v114 >> 3;
  }
  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v115 = v113;
  }
  if (v115)
  {
    if (!(v115 >> 60))
    {
      uint64_t v116 = (char *)operator new(16 * v115);
      goto LABEL_206;
    }
LABEL_383:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v116 = 0;
LABEL_206:
  uint64_t v129 = &v116[16 * v112];
  *(void *)uint64_t v129 = v105;
  *((void *)v129 + 1) = v106;
  uint64_t v109 = v129 + 16;
  if (v107 == v111)
  {
    a3 = v6 + 2536;
  }
  else
  {
    a3 = v6 + 2536;
    do
    {
      *((_OWORD *)v129 - 1) = *((_OWORD *)v107 - 1);
      v129 -= 16;
      v107 -= 16;
    }
    while (v107 != v111);
    uint64_t v107 = *(char **)(v6 + 2560);
  }
  *(void *)(v6 + 2560) = v129;
  *(void *)(v6 + 2568) = v109;
  *(void *)(v6 + 2576) = &v116[16 * v115];
  if (v107) {
    operator delete(v107);
  }
LABEL_218:
  int v131 = 0;
  *(void *)(v6 + 2568) = v109;
  while (2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 2488) + 24))(&v300);
    uint64_t v132 = v300;
    if (v300)
    {
      if (strncmp((const char *)(v300 + 8), "__DATA", 6uLL) && strncmp((const char *)(v132 + 8), "__AUTH", 6uLL))
      {
        v24 += *(unsigned int *)(v132 + 4);
        uint64_t v300 = 0;
        uint64_t v133 = v132;
        goto LABEL_243;
      }
      unint64_t v134 = v289 + *(unsigned int *)(v132 + 24);
      unint64_t v135 = v134 + *(unsigned int *)(v132 + 28);
      uint64_t v136 = *(char **)(v6 + 2592);
      unint64_t v137 = *(void *)(v6 + 2600);
      if ((unint64_t)v136 >= v137)
      {
        uint64_t v139 = *(char **)(v6 + 2584);
        uint64_t v140 = (v136 - v139) >> 4;
        unint64_t v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 60) {
          goto LABEL_382;
        }
        uint64_t v142 = v137 - (void)v139;
        if (v142 >> 3 > v141) {
          unint64_t v141 = v142 >> 3;
        }
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v141 = 0xFFFFFFFFFFFFFFFLL;
        }
        unint64_t v183 = v141;
        if (v141)
        {
          if (v141 >> 60) {
            goto LABEL_383;
          }
          BOOL v143 = (char *)operator new(16 * v141);
        }
        else
        {
          BOOL v143 = 0;
        }
        uint64_t v144 = &v143[16 * v140];
        *(void *)uint64_t v144 = v134;
        *((void *)v144 + 1) = v135;
        unint64_t v145 = v144;
        if (v136 == v139)
        {
          a3 = v6 + 2536;
          int v110 = v187;
          unint64_t v146 = v183;
        }
        else
        {
          a3 = v6 + 2536;
          int v110 = v187;
          unint64_t v146 = v183;
          do
          {
            *((_OWORD *)v145 - 1) = *((_OWORD *)v136 - 1);
            v145 -= 16;
            v136 -= 16;
          }
          while (v136 != v139);
          uint64_t v136 = *(char **)(v6 + 2584);
        }
        *(void *)(v6 + 2584) = v145;
        uint64_t v138 = v144 + 16;
        *(void *)(v6 + 2592) = v144 + 16;
        *(void *)(v6 + 2600) = &v143[16 * v146];
        if (v136) {
          operator delete(v136);
        }
      }
      else
      {
        *(void *)uint64_t v136 = v134;
        *((void *)v136 + 1) = v135;
        uint64_t v138 = v136 + 16;
        a3 = v6 + 2536;
      }
      *(void *)(v6 + 2592) = v138;
      uint64_t v133 = v300;
      v24 += *(unsigned int *)(v132 + 4);
      uint64_t v300 = 0;
      if (v133)
      {
LABEL_243:
        v327[0] = v133;
        if (!v304) {
          goto LABEL_381;
        }
        (*(void (**)(unsigned int *, void *))(*(void *)v304 + 48))(v304, v327);
      }
    }
    else
    {
      uint64_t v300 = 0;
    }
    if (v304 == (unsigned int *)&v301)
    {
      (*(void (**)(uint64_t *))(v301 + 32))(&v301);
    }
    else if (v304)
    {
      (*(void (**)(void))(*(void *)v304 + 40))();
    }
    if (!v132)
    {
      LOBYTE(v6) = 0;
      LOBYTE(a2) = 0;
      goto LABEL_320;
    }
    if (++v131 != v110) {
      continue;
    }
    break;
  }
  v147 = *(uint64_t **)(v6 + 2544);
  if ((unint64_t)v147 >= *(void *)(v6 + 2552))
  {
    uint64_t v149 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v297);
  }
  else
  {
    uint64_t v148 = v297;
    uint64_t v297 = 0;
    uint64_t *v147 = v148;
    if (v299)
    {
      if (v299 == v298)
      {
        v147[4] = (uint64_t)(v147 + 1);
        (*(void (**)(void *))(*v299 + 24))(v299);
      }
      else
      {
        v147[4] = (uint64_t)v299;
        uint64_t v299 = 0;
      }
    }
    else
    {
      v147[4] = 0;
    }
    uint64_t v149 = v147 + 5;
  }
  *(void *)(v6 + 2544) = v149;
  if ((unint64_t)v149 >= *(void *)(v6 + 2552))
  {
    unsigned __int8 v170 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)a3, &v290);
  }
  else
  {
    uint64_t v169 = v290;
    uint64_t v290 = 0;
    *uint64_t v149 = v169;
    if (v292)
    {
      if (v292 == v291)
      {
        v149[4] = v149 + 1;
        (*(void (**)(void *))(*v292 + 24))(v292);
      }
      else
      {
        v149[4] = v292;
        unint64_t v292 = 0;
      }
    }
    else
    {
      v149[4] = 0;
    }
    unsigned __int8 v170 = v149 + 5;
  }
  *(void *)(v6 + 2544) = v170;
  LODWORD(a3) = a2 >> 8;
  LOBYTE(v6) = 1;
LABEL_320:
  if (__dst != v258) {
    free(__dst);
  }
LABEL_322:
  uint64_t v173 = v290;
  uint64_t v290 = 0;
  if (v173)
  {
    uint64_t v300 = v173;
    if (v292)
    {
      (*(void (**)(void *, uint64_t *))(*v292 + 48))(v292, &v300);
      goto LABEL_325;
    }
LABEL_381:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_382:
    abort();
  }
LABEL_325:
  if (v292 == v291)
  {
    (*(void (**)(void *))(v291[0] + 32))(v291);
  }
  else if (v292)
  {
    (*(void (**)(void))(*v292 + 40))();
  }
  uint64_t v174 = v294;
  uint64_t v294 = 0;
  if (v174)
  {
    uint64_t v300 = v174;
    if (!v296) {
      goto LABEL_381;
    }
    (*(void (**)(void *, uint64_t *))(*v296 + 48))(v296, &v300);
  }
LABEL_332:
  if (v296 == v295)
  {
    (*(void (**)(void *))(v295[0] + 32))(v295);
  }
  else if (v296)
  {
    (*(void (**)(void))(*v296 + 40))();
  }
LABEL_336:
  uint64_t v175 = v297;
  uint64_t v297 = 0;
  if (v175)
  {
    uint64_t v300 = v175;
    if (!v299) {
      goto LABEL_381;
    }
    (*(void (**)(void *, uint64_t *))(*v299 + 48))(v299, &v300);
  }
LABEL_339:
  if (v299 == v298)
  {
    (*(void (**)(void *))(v298[0] + 32))(v298);
  }
  else if (v299)
  {
    (*(void (**)(void))(*v299 + 40))();
  }
  unint64_t v55 = 0;
  unint64_t v3 = 0;
  uint64_t v54 = __src;
  if (__src != v201) {
    goto LABEL_372;
  }
LABEL_373:
  uint64_t v179 = (uint64_t)v202;
  v202 = 0;
  if (v179)
  {
    uint64_t v300 = v179;
    if (!v204) {
      goto LABEL_381;
    }
    (*(void (**)(void *, uint64_t *))(*v204 + 48))(v204, &v300);
  }
LABEL_376:
  if (v204 == v203)
  {
    (*(void (**)(void *))(v203[0] + 32))(v203);
  }
  else if (v204)
  {
    (*(void (**)(void))(*v204 + 40))();
  }
  return ((unint64_t)v6 << 32) | (v3 << 40) | ((a3 & 0xFFFFFF) << 8) | a2;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(uint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v234);
  unsigned int v8 = (void **)v234;
  if (!v234)
  {
    unsigned __int8 v9 = 0;
    unint64_t v10 = 0;
    uint64_t v234 = 0;
    goto LABEL_89;
  }
  if (*(_DWORD *)v234 == 1179403647)
  {
    int v11 = *(unsigned __int8 *)(v234 + 4);
    if (v11 != 1)
    {
      if (v11 != 2)
      {
        unint64_t v10 = 0;
        unsigned __int8 v9 = 0;
        goto LABEL_86;
      }
      long long v12 = a3[1];
      v233[0] = *a3;
      v233[1] = v12;
      __src = v232;
      uint64_t v231 = 0x100000000;
      if (&__src == (void **)a4 || (unsigned int v13 = *(_DWORD *)(a4 + 8)) == 0)
      {
LABEL_21:
        unint64_t v336 = a2;
        uint64_t v334 = 0;
        uint64_t v333 = 0;
        uint64_t v335 = 0;
        std::string::size_type v329 = v233;
        uint64_t v330 = a1;
        uint64_t v331 = &v336;
        std::string::size_type v332 = &v333;
        if (!v22
          || (unint64_t v23 = *(unsigned __int16 *)(v22 + 58), v23 < 0x40)
          || (uint64_t v24 = *(unsigned __int16 *)(v22 + 60), !*(_WORD *)(v22 + 60)))
        {
          unsigned __int8 v9 = 0;
          unint64_t v48 = 0;
          unint64_t v49 = 0;
          goto LABEL_50;
        }
        uint64_t v224 = a1;
        uint64_t v25 = 0;
        uint64_t v220 = v22;
        uint64_t v26 = *(void *)(v22 + 40);
        uint64_t v327 = 0;
        std::string __p = 0;
        int v328 = 0;
        do
        {
          if (!v28) {
            goto LABEL_156;
          }
          uint64_t v29 = v28;
          uint64_t v30 = v327;
          if (v327 < v328)
          {
            *uint64_t v327 = v28;
            int v27 = (uint64_t *)(v30 + 8);
          }
          else
          {
            uint64_t v31 = __p;
            int64_t v32 = (char *)v327 - (unsigned char *)__p;
            uint64_t v33 = ((char *)v327 - (unsigned char *)__p) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_217;
            }
            uint64_t v35 = (char *)v328 - (unsigned char *)__p;
            if (((char *)v328 - (unsigned char *)__p) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              if (v36 >> 61) {
                goto LABEL_218;
              }
              uint64_t v37 = operator new(8 * v36);
            }
            else
            {
              uint64_t v37 = 0;
            }
            int v38 = (uint64_t *)&v37[8 * v33];
            *int v38 = v29;
            int v27 = v38 + 1;
            if (v30 != v31)
            {
              unint64_t v39 = v30 - v31 - 8;
              if (v39 < 0x58) {
                goto LABEL_221;
              }
              if ((unint64_t)(v30 - &v37[v32]) < 0x20) {
                goto LABEL_221;
              }
              uint64_t v40 = (v39 >> 3) + 1;
              uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
              int v42 = &v30[-v41];
              int v38 = (uint64_t *)((char *)v38 - v41);
              uint64_t v43 = &v37[v32 - 16];
              uint64_t v44 = (long long *)(v30 - 16);
              uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v46 = *v44;
                *(v43 - 1) = *(v44 - 1);
                *uint64_t v43 = v46;
                v43 -= 2;
                v44 -= 2;
                v45 -= 4;
              }
              while (v45);
              uint64_t v30 = v42;
              if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_221:
                do
                {
                  uint64_t v47 = *((void *)v30 - 1);
                  v30 -= 8;
                  *--int v38 = v47;
                }
                while (v30 != v31);
              }
              uint64_t v30 = __p;
            }
            std::string __p = v38;
            uint64_t v327 = v27;
            int v328 = (uint64_t *)&v37[8 * v36];
            if (v30) {
              operator delete(v30);
            }
          }
          uint64_t v327 = v27;
          ++v25;
        }
        while (v25 != v24);
        unsigned int v82 = *(unsigned __int16 *)(v220 + 62);
        if (v82 == 0xFFFF) {
          unsigned int v82 = *(_DWORD *)(*(void *)__p + 40);
        }
        uint64_t v83 = *((void *)__p + v82);
        uint64_t v84 = *(void *)(v83 + 24);
        uint64_t v325 = *(void *)(v83 + 32);
        if (!v85) {
          goto LABEL_98;
        }
        uint64_t v316 = (void (**)(swift::SwiftObjectFileFormatELF *__hidden))v85;
        char v324 = 0;
        uint64_t v317 = &v324;
        p_p = &__p;
        uint64_t v319 = (uint64_t *)&v316;
        uint64_t v320 = &v325;
        uint64_t v321 = &v336;
        uint64_t v322 = v233;
        uint64_t v323 = v224;
        uint64_t v237 = off_C8C28;
        if (v324)
        {
LABEL_98:
          unsigned __int8 v9 = 0;
          unint64_t v48 = 0;
          unint64_t v49 = 0;
          uint64_t v86 = (uint64_t *)__p;
          if (!__p) {
            goto LABEL_50;
          }
          goto LABEL_157;
        }
        uint64_t v92 = v314;
        uint64_t v93 = v311;
        uint64_t v94 = v308;
        uint64_t v95 = v305;
        uint64_t v96 = v302;
        uint64_t v97 = v299;
        uint64_t v98 = v296;
        uint64_t v99 = v293;
        uint64_t v100 = v314 | v311 | v308 | v305 | v302 | v299 | v296 | v293;
        BOOL v194 = v100 != 0;
        if (!v100)
        {
          uint64_t v192 = 0;
          unsigned int v218 = v314;
          unsigned __int8 v222 = 0;
          goto LABEL_155;
        }
        size_t v101 = v313;
        uint64_t v102 = v315;
        uint64_t v265 = v313;
        uint64_t v266 = v314;
        size_t v103 = v310;
        uint64_t v104 = v312;
        uint64_t v267 = v315;
        uint64_t v268 = v310;
        uint64_t v269 = v311;
        uint64_t v270 = v312;
        unint64_t v105 = v307;
        uint64_t v106 = v309;
        uint64_t v271 = v307;
        uint64_t v272 = v308;
        uint64_t v107 = v304;
        uint64_t v108 = v306;
        uint64_t v273 = v309;
        uint64_t v274 = v304;
        uint64_t v275 = v305;
        uint64_t v276 = v306;
        uint64_t v109 = v301;
        uint64_t v110 = v303;
        uint64_t v277 = v301;
        uint64_t v278 = v302;
        uint64_t v111 = v298;
        uint64_t v112 = v300;
        uint64_t v279 = v303;
        uint64_t v280 = v298;
        uint64_t v281 = v299;
        uint64_t v282 = v300;
        unint64_t v113 = v295;
        uint64_t v114 = v297;
        int v283 = v295;
        uint64_t v284 = v296;
        unint64_t v115 = v292;
        uint64_t v116 = v294;
        uint64_t v285 = v297;
        BOOL v286 = v292;
        uint64_t v287 = v293;
        uint64_t v288 = v294;
        long long __dst = v291;
        uint64_t v290 = 0x100000000;
        unint64_t v117 = v231;
        if (!v231)
        {
LABEL_120:
          uint64_t v238 = v101;
          uint64_t v239 = v92;
          uint64_t v240 = v102;
          uint64_t v241 = v103;
          uint64_t v242 = v93;
          uint64_t v243 = v104;
          uint64_t v244 = v105;
          uint64_t v245 = v94;
          uint64_t v246 = v106;
          uint64_t v247 = v107;
          uint64_t v248 = v95;
          uint64_t v249 = v108;
          uint64_t v250 = v109;
          uint64_t v251 = v96;
          uint64_t v252 = v110;
          uint64_t v253 = v111;
          uint64_t v254 = v97;
          uint64_t v255 = v112;
          int v256 = v113;
          uint64_t v257 = v98;
          uint64_t v258 = v114;
          uint64_t v259 = v115;
          uint64_t v260 = v99;
          uint64_t v261 = v116;
          uint64_t v262 = v264;
          uint64_t v263 = 0x100000000;
          if (!v117) {
            goto LABEL_134;
          }
          if (v117 == 1)
          {
            size_t v148 = 16;
            uint64_t v149 = v264;
          }
          else
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v262, (uint64_t)v264, v117, 16);
            if (!v290)
            {
LABEL_133:
              LODWORD(v263) = v117;
              size_t v101 = v238;
              uint64_t v92 = v239;
              uint64_t v102 = v240;
              size_t v103 = v241;
              uint64_t v93 = v242;
              uint64_t v104 = v243;
              unint64_t v105 = v244;
              uint64_t v94 = v245;
              uint64_t v106 = v246;
              uint64_t v107 = v247;
              uint64_t v95 = v248;
              uint64_t v108 = v249;
              uint64_t v109 = v250;
              uint64_t v96 = v251;
              uint64_t v110 = v252;
              uint64_t v111 = v253;
              uint64_t v97 = v254;
              uint64_t v112 = v255;
              unint64_t v113 = v256;
              uint64_t v98 = v257;
              uint64_t v114 = v258;
              unint64_t v115 = v259;
              uint64_t v99 = v260;
              uint64_t v116 = v261;
LABEL_134:
              uint64_t v337 = v101;
              uint64_t v338 = v92;
              uint64_t v339 = v102;
              uint64_t v340 = v103;
              uint64_t v341 = v93;
              uint64_t v342 = v104;
              v343 = v105;
              uint64_t v344 = v94;
              uint64_t v345 = v106;
              int v346 = v107;
              uint64_t v347 = v95;
              uint64_t v348 = v108;
              v349 = v109;
              uint64_t v350 = v96;
              uint64_t v351 = v110;
              uint64_t v352 = v111;
              uint64_t v353 = v97;
              uint64_t v354 = v112;
              uint64_t v355 = v113;
              uint64_t v356 = v98;
              uint64_t v357 = v114;
              unint64_t v358 = v115;
              uint64_t v359 = v99;
              uint64_t v360 = v116;
              uint64_t v361 = v363;
              uint64_t v362 = 0x100000000;
              if (!v117)
              {
LABEL_148:
                unsigned int v156 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v224 + 296), (uint64_t)&v337);
                if (v361 != v363) {
                  free(v361);
                }
                if (v262 != v264) {
                  free(v262);
                }
                if (__dst != v291) {
                  free(__dst);
                }
                unsigned int v218 = v156 >> 8;
                unsigned __int8 v222 = v156;
                uint64_t v192 = 0x100000000;
LABEL_155:
                uint64_t v214 = v337;
                uint64_t v216 = v338;
                uint64_t v212 = v339;
                uint64_t v208 = v337;
                uint64_t v210 = v338;
                uint64_t v206 = v339;
                v202 = v337;
                uint64_t v204 = v338;
                uint64_t v200 = v339;
                v196 = v337;
                uint64_t v198 = v338;
                uint64_t v157 = v339;
                uint64_t v158 = v337;
                uint64_t v159 = v338;
                uint64_t v160 = v339;
                uint64_t v161 = v337;
                uint64_t v162 = v338;
                uint64_t v163 = v339;
                v164 = v337;
                uint64_t v165 = v338;
                uint64_t v166 = v339;
                if (v324)
                {
LABEL_156:
                  unsigned __int8 v9 = 0;
                  unint64_t v48 = 0;
                  unint64_t v49 = 0;
                  uint64_t v86 = (uint64_t *)__p;
                  if (!__p) {
                    goto LABEL_50;
                  }
                  goto LABEL_157;
                }
                uint64_t v167 = v337;
                uint64_t v168 = v338;
                uint64_t v169 = v339;
                if (v216 || v210 || v204 || v198 || v159 || v162 || v165 || v338)
                {
                  uint64_t v337 = v214;
                  uint64_t v338 = v216;
                  uint64_t v339 = v212;
                  uint64_t v340 = v208;
                  uint64_t v341 = v210;
                  uint64_t v342 = v206;
                  v343 = v202;
                  uint64_t v344 = v204;
                  uint64_t v345 = v200;
                  int v346 = v196;
                  uint64_t v347 = v198;
                  uint64_t v348 = v157;
                  v349 = v158;
                  uint64_t v350 = v159;
                  uint64_t v351 = v160;
                  uint64_t v352 = v161;
                  uint64_t v353 = v162;
                  uint64_t v354 = v163;
                  uint64_t v355 = v164;
                  uint64_t v356 = v165;
                  uint64_t v357 = v166;
                  unint64_t v358 = v167;
                  uint64_t v359 = v168;
                  uint64_t v360 = v169;
                  llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v361, (uint64_t)&__src);
                  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v265, (uint64_t)&v337);
                  unsigned int v173 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v224, (uint64_t)&v265);
                  if (__dst != v291) {
                    free(__dst);
                  }
                  if (v194) {
                    unsigned __int8 v170 = v222;
                  }
                  else {
                    unsigned __int8 v170 = v173;
                  }
                  if (v194) {
                    unsigned int v171 = v218;
                  }
                  else {
                    unsigned int v171 = v173 >> 8;
                  }
                  if (v361 != v363) {
                    free(v361);
                  }
                  uint64_t v172 = 0x100000000;
                }
                else
                {
                  unsigned __int8 v170 = v222;
                  unsigned int v171 = v218;
                  uint64_t v172 = v192;
                }
                unint64_t v48 = v172 & 0x100000000;
                unsigned __int8 v9 = v170;
                unint64_t v49 = v172 & 0x100000000 | ((*(void *)&v171 & 0xFFFFFFLL) << 8);
                uint64_t v86 = (uint64_t *)__p;
                if (__p)
                {
LABEL_157:
                  uint64_t v327 = v86;
                  operator delete(v86);
                }
LABEL_50:
                uint64_t v337 = (void **)&v333;
                std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__destroy_vector::operator()[abi:nn180100](&v337);
                unint64_t v50 = v49 >> 8;
                unint64_t v51 = HIDWORD(v48);
                uint64_t v52 = __src;
                a2 = v49 >> 8;
                unint64_t v10 = HIDWORD(v48);
                if (__src == v232)
                {
LABEL_86:
                  unsigned int v8 = (void **)v234;
                  uint64_t v234 = 0;
                  if (!v8) {
                    goto LABEL_89;
                  }
                  goto LABEL_87;
                }
LABEL_85:
                free(v52);
                LODWORD(a2) = v50;
                unint64_t v10 = v51;
                goto LABEL_86;
              }
              if (v117 == 1)
              {
                size_t v152 = 16;
                unint64_t v153 = v363;
              }
              else
              {
                __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v361, (uint64_t)v363, v117, 16);
                if (!v263)
                {
LABEL_147:
                  LODWORD(v362) = v117;
                  goto LABEL_148;
                }
                unint64_t v153 = v361;
                size_t v152 = 16 * v263;
              }
              memcpy(v153, v262, v152);
              goto LABEL_147;
            }
            uint64_t v149 = v262;
            size_t v148 = 16 * v290;
          }
          memcpy(v149, __dst, v148);
          goto LABEL_133;
        }
        if (v231 == 1)
        {
          size_t v118 = 16;
          uint64_t v119 = v291;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v291, v231, 16);
          if (!v231)
          {
LABEL_119:
            LODWORD(v290) = v117;
            size_t v101 = v265;
            uint64_t v92 = v266;
            uint64_t v102 = v267;
            size_t v103 = v268;
            uint64_t v93 = v269;
            uint64_t v104 = v270;
            unint64_t v105 = v271;
            uint64_t v94 = v272;
            uint64_t v106 = v273;
            uint64_t v107 = v274;
            uint64_t v95 = v275;
            uint64_t v108 = v276;
            uint64_t v109 = v277;
            uint64_t v96 = v278;
            uint64_t v110 = v279;
            uint64_t v111 = v280;
            uint64_t v97 = v281;
            uint64_t v112 = v282;
            unint64_t v113 = v283;
            uint64_t v98 = v284;
            uint64_t v114 = v285;
            unint64_t v115 = v286;
            uint64_t v99 = v287;
            uint64_t v116 = v288;
            goto LABEL_120;
          }
          uint64_t v119 = __dst;
          size_t v118 = 16 * v231;
        }
        memcpy(v119, __src, v118);
        goto LABEL_119;
      }
      if (v13 < 2)
      {
        size_t v16 = 16;
        size_t v15 = v232;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v232, *(unsigned int *)(a4 + 8), 16);
        uint64_t v14 = *(unsigned int *)(a4 + 8);
        if (!v14)
        {
LABEL_20:
          LODWORD(v231) = v13;
          goto LABEL_21;
        }
        size_t v15 = __src;
        size_t v16 = 16 * v14;
      }
      memcpy(v15, *(const void **)a4, v16);
      goto LABEL_20;
    }
    long long v17 = a3[1];
    v229[0] = *a3;
    v229[1] = v17;
    uint64_t v226 = v228;
    uint64_t v227 = 0x100000000;
    if (&v226 == (void **)a4 || (unsigned int v18 = *(_DWORD *)(a4 + 8)) == 0)
    {
LABEL_55:
      unint64_t v336 = a2;
      uint64_t v334 = 0;
      uint64_t v333 = 0;
      uint64_t v335 = 0;
      std::string::size_type v329 = v229;
      uint64_t v330 = a1;
      uint64_t v331 = &v336;
      std::string::size_type v332 = &v333;
      if (!v53
        || (unint64_t v54 = *(unsigned __int16 *)(v53 + 46), v54 < 0x28)
        || (uint64_t v55 = *(unsigned __int16 *)(v53 + 48), !*(_WORD *)(v53 + 48)))
      {
        unsigned __int8 v9 = 0;
        unint64_t v79 = 0;
        unint64_t v80 = 0;
        goto LABEL_84;
      }
      uint64_t v225 = a1;
      uint64_t v56 = 0;
      uint64_t v221 = v53;
      uint64_t v57 = *(unsigned int *)(v53 + 32);
      uint64_t v327 = 0;
      std::string __p = 0;
      int v328 = 0;
      do
      {
        if (!v59) {
          goto LABEL_192;
        }
        uint64_t v60 = v59;
        uint64_t v61 = v327;
        if (v327 < v328)
        {
          *uint64_t v327 = v59;
          uint64_t v58 = (uint64_t *)(v61 + 8);
        }
        else
        {
          uint64_t v62 = __p;
          int64_t v63 = (char *)v327 - (unsigned char *)__p;
          uint64_t v64 = ((char *)v327 - (unsigned char *)__p) >> 3;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 61) {
            goto LABEL_217;
          }
          uint64_t v66 = (char *)v328 - (unsigned char *)__p;
          if (((char *)v328 - (unsigned char *)__p) >> 2 > v65) {
            unint64_t v65 = v66 >> 2;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            if (v67 >> 61) {
LABEL_218:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v68 = operator new(8 * v67);
          }
          else
          {
            uint64_t v68 = 0;
          }
          uint64_t v69 = (uint64_t *)&v68[8 * v64];
          uint64_t *v69 = v60;
          uint64_t v58 = v69 + 1;
          if (v61 != v62)
          {
            unint64_t v70 = v61 - v62 - 8;
            if (v70 < 0x58) {
              goto LABEL_222;
            }
            if ((unint64_t)(v61 - &v68[v63]) < 0x20) {
              goto LABEL_222;
            }
            uint64_t v71 = (v70 >> 3) + 1;
            uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v73 = &v61[-v72];
            uint64_t v69 = (uint64_t *)((char *)v69 - v72);
            uint64_t v74 = &v68[v63 - 16];
            uint64_t v75 = (long long *)(v61 - 16);
            uint64_t v76 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v77 = *v75;
              *(v74 - 1) = *(v75 - 1);
              *uint64_t v74 = v77;
              v74 -= 2;
              v75 -= 2;
              v76 -= 4;
            }
            while (v76);
            uint64_t v61 = v73;
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_222:
              do
              {
                uint64_t v78 = *((void *)v61 - 1);
                v61 -= 8;
                *--uint64_t v69 = v78;
              }
              while (v61 != v62);
            }
            uint64_t v61 = __p;
          }
          std::string __p = v69;
          uint64_t v327 = v58;
          int v328 = (uint64_t *)&v68[8 * v67];
          if (v61) {
            operator delete(v61);
          }
        }
        uint64_t v327 = v58;
        ++v56;
      }
      while (v56 != v55);
      unsigned int v87 = *(unsigned __int16 *)(v221 + 50);
      if (v87 == 0xFFFF) {
        unsigned int v87 = *(_DWORD *)(*(void *)__p + 24);
      }
      uint64_t v88 = *((void *)__p + v87);
      uint64_t v89 = *(unsigned int *)(v88 + 16);
      LODWORD(v237) = *(_DWORD *)(v88 + 20);
      if (!v90) {
        goto LABEL_104;
      }
      uint64_t v325 = v90;
      char v324 = 0;
      uint64_t v317 = &v324;
      p_p = &__p;
      uint64_t v319 = &v325;
      uint64_t v320 = (uint64_t *)&v237;
      uint64_t v321 = &v336;
      uint64_t v322 = v229;
      uint64_t v323 = v225;
      uint64_t v316 = off_C8C28;
      if (v324)
      {
LABEL_104:
        unsigned __int8 v9 = 0;
        unint64_t v79 = 0;
        unint64_t v80 = 0;
        uint64_t v91 = (uint64_t *)__p;
        if (!__p) {
          goto LABEL_84;
        }
        goto LABEL_193;
      }
      uint64_t v120 = v314;
      uint64_t v121 = v311;
      uint64_t v122 = v308;
      uint64_t v123 = v305;
      uint64_t v124 = v302;
      uint64_t v125 = v299;
      uint64_t v126 = v296;
      uint64_t v127 = v293;
      uint64_t v128 = v314 | v311 | v308 | v305 | v302 | v299 | v296 | v293;
      BOOL v195 = v128 != 0;
      if (!v128)
      {
        uint64_t v193 = 0;
        unsigned int v219 = v314;
        unsigned __int8 v223 = 0;
        goto LABEL_191;
      }
      uint64_t v129 = v313;
      uint64_t v130 = v315;
      uint64_t v265 = v313;
      uint64_t v266 = v314;
      int v131 = v310;
      uint64_t v132 = v312;
      uint64_t v267 = v315;
      uint64_t v268 = v310;
      uint64_t v269 = v311;
      uint64_t v270 = v312;
      uint64_t v133 = v307;
      uint64_t v134 = v309;
      uint64_t v271 = v307;
      uint64_t v272 = v308;
      unint64_t v135 = v304;
      uint64_t v136 = v306;
      uint64_t v273 = v309;
      uint64_t v274 = v304;
      uint64_t v275 = v305;
      uint64_t v276 = v306;
      unint64_t v137 = v301;
      uint64_t v138 = v303;
      uint64_t v277 = v301;
      uint64_t v278 = v302;
      uint64_t v139 = v298;
      uint64_t v140 = v300;
      uint64_t v279 = v303;
      uint64_t v280 = v298;
      uint64_t v281 = v299;
      uint64_t v282 = v300;
      unint64_t v141 = v295;
      uint64_t v142 = v297;
      int v283 = v295;
      uint64_t v284 = v296;
      BOOL v143 = v292;
      uint64_t v144 = v294;
      uint64_t v285 = v297;
      BOOL v286 = v292;
      uint64_t v287 = v293;
      uint64_t v288 = v294;
      long long __dst = v291;
      uint64_t v290 = 0x100000000;
      unint64_t v145 = v227;
      if (!v227)
      {
LABEL_127:
        uint64_t v238 = v129;
        uint64_t v239 = v120;
        uint64_t v240 = v130;
        uint64_t v241 = v131;
        uint64_t v242 = v121;
        uint64_t v243 = v132;
        uint64_t v244 = v133;
        uint64_t v245 = v122;
        uint64_t v246 = v134;
        uint64_t v247 = v135;
        uint64_t v248 = v123;
        uint64_t v249 = v136;
        uint64_t v250 = v137;
        uint64_t v251 = v124;
        uint64_t v252 = v138;
        uint64_t v253 = v139;
        uint64_t v254 = v125;
        uint64_t v255 = v140;
        int v256 = v141;
        uint64_t v257 = v126;
        uint64_t v258 = v142;
        uint64_t v259 = v143;
        uint64_t v260 = v127;
        uint64_t v261 = v144;
        uint64_t v262 = v264;
        uint64_t v263 = 0x100000000;
        if (!v145) {
          goto LABEL_141;
        }
        if (v145 == 1)
        {
          size_t v150 = 16;
          uint64_t v151 = v264;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v262, (uint64_t)v264, v145, 16);
          if (!v290)
          {
LABEL_140:
            LODWORD(v263) = v145;
            uint64_t v129 = v238;
            uint64_t v120 = v239;
            uint64_t v130 = v240;
            int v131 = v241;
            uint64_t v121 = v242;
            uint64_t v132 = v243;
            uint64_t v133 = v244;
            uint64_t v122 = v245;
            uint64_t v134 = v246;
            unint64_t v135 = v247;
            uint64_t v123 = v248;
            uint64_t v136 = v249;
            unint64_t v137 = v250;
            uint64_t v124 = v251;
            uint64_t v138 = v252;
            uint64_t v139 = v253;
            uint64_t v125 = v254;
            uint64_t v140 = v255;
            unint64_t v141 = v256;
            uint64_t v126 = v257;
            uint64_t v142 = v258;
            BOOL v143 = v259;
            uint64_t v127 = v260;
            uint64_t v144 = v261;
LABEL_141:
            uint64_t v337 = v129;
            uint64_t v338 = v120;
            uint64_t v339 = v130;
            uint64_t v340 = v131;
            uint64_t v341 = v121;
            uint64_t v342 = v132;
            v343 = v133;
            uint64_t v344 = v122;
            uint64_t v345 = v134;
            int v346 = v135;
            uint64_t v347 = v123;
            uint64_t v348 = v136;
            v349 = v137;
            uint64_t v350 = v124;
            uint64_t v351 = v138;
            uint64_t v352 = v139;
            uint64_t v353 = v125;
            uint64_t v354 = v140;
            uint64_t v355 = v141;
            uint64_t v356 = v126;
            uint64_t v357 = v142;
            unint64_t v358 = v143;
            uint64_t v359 = v127;
            uint64_t v360 = v144;
            uint64_t v361 = v363;
            uint64_t v362 = 0x100000000;
            if (!v145)
            {
LABEL_184:
              unsigned int v174 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v225 + 296), (uint64_t)&v337);
              if (v361 != v363) {
                free(v361);
              }
              if (v262 != v264) {
                free(v262);
              }
              if (__dst != v291) {
                free(__dst);
              }
              unsigned int v219 = v174 >> 8;
              unsigned __int8 v223 = v174;
              uint64_t v193 = 0x100000000;
LABEL_191:
              uint64_t v215 = v337;
              uint64_t v217 = v338;
              uint64_t v213 = v339;
              int v209 = v337;
              uint64_t v211 = v338;
              uint64_t v207 = v339;
              v203 = v337;
              uint64_t v205 = v338;
              uint64_t v201 = v339;
              uint64_t v197 = v337;
              uint64_t v199 = v338;
              uint64_t v175 = v339;
              uint64_t v176 = v337;
              uint64_t v177 = v338;
              uint64_t v178 = v339;
              uint64_t v179 = v337;
              uint64_t v180 = v338;
              uint64_t v181 = v339;
              uint64_t v182 = v337;
              uint64_t v183 = v338;
              uint64_t v184 = v339;
              if (v324)
              {
LABEL_192:
                unsigned __int8 v9 = 0;
                unint64_t v79 = 0;
                unint64_t v80 = 0;
                uint64_t v91 = (uint64_t *)__p;
                if (!__p) {
                  goto LABEL_84;
                }
                goto LABEL_193;
              }
              uint64_t v185 = v337;
              uint64_t v186 = v338;
              uint64_t v187 = v339;
              if (v217 || v211 || v205 || v199 || v177 || v180 || v183 || v338)
              {
                uint64_t v337 = v215;
                uint64_t v338 = v217;
                uint64_t v339 = v213;
                uint64_t v340 = v209;
                uint64_t v341 = v211;
                uint64_t v342 = v207;
                v343 = v203;
                uint64_t v344 = v205;
                uint64_t v345 = v201;
                int v346 = v197;
                uint64_t v347 = v199;
                uint64_t v348 = v175;
                v349 = v176;
                uint64_t v350 = v177;
                uint64_t v351 = v178;
                uint64_t v352 = v179;
                uint64_t v353 = v180;
                uint64_t v354 = v181;
                uint64_t v355 = v182;
                uint64_t v356 = v183;
                uint64_t v357 = v184;
                unint64_t v358 = v185;
                uint64_t v359 = v186;
                uint64_t v360 = v187;
                llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v361, (uint64_t)&v226);
                swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v265, (uint64_t)&v337);
                unsigned int v191 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v225, (uint64_t)&v265);
                if (__dst != v291) {
                  free(__dst);
                }
                if (v195) {
                  unsigned __int8 v188 = v223;
                }
                else {
                  unsigned __int8 v188 = v191;
                }
                if (v195) {
                  unsigned int v189 = v219;
                }
                else {
                  unsigned int v189 = v191 >> 8;
                }
                if (v361 != v363) {
                  free(v361);
                }
                uint64_t v190 = 0x100000000;
              }
              else
              {
                unsigned __int8 v188 = v223;
                unsigned int v189 = v219;
                uint64_t v190 = v193;
              }
              unint64_t v79 = v190 & 0x100000000;
              unsigned __int8 v9 = v188;
              unint64_t v80 = v190 & 0x100000000 | ((*(void *)&v189 & 0xFFFFFFLL) << 8);
              uint64_t v91 = (uint64_t *)__p;
              if (__p)
              {
LABEL_193:
                uint64_t v327 = v91;
                operator delete(v91);
              }
LABEL_84:
              uint64_t v337 = (void **)&v333;
              std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__destroy_vector::operator()[abi:nn180100](&v337);
              a2 = v80 >> 8;
              unint64_t v10 = HIDWORD(v79);
              uint64_t v52 = v226;
              LODWORD(v50) = a2;
              unint64_t v51 = v10;
              if (v226 == v228) {
                goto LABEL_86;
              }
              goto LABEL_85;
            }
            if (v145 == 1)
            {
              size_t v154 = 16;
              uint64_t v155 = v363;
            }
            else
            {
              __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v361, (uint64_t)v363, v145, 16);
              if (!v263)
              {
LABEL_183:
                LODWORD(v362) = v145;
                goto LABEL_184;
              }
              uint64_t v155 = v361;
              size_t v154 = 16 * v263;
            }
            memcpy(v155, v262, v154);
            goto LABEL_183;
          }
          uint64_t v151 = v262;
          size_t v150 = 16 * v290;
        }
        memcpy(v151, __dst, v150);
        goto LABEL_140;
      }
      if (v227 == 1)
      {
        size_t v146 = 16;
        v147 = v291;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v291, v227, 16);
        if (!v227)
        {
LABEL_126:
          LODWORD(v290) = v145;
          uint64_t v129 = v265;
          uint64_t v120 = v266;
          uint64_t v130 = v267;
          int v131 = v268;
          uint64_t v121 = v269;
          uint64_t v132 = v270;
          uint64_t v133 = v271;
          uint64_t v122 = v272;
          uint64_t v134 = v273;
          unint64_t v135 = v274;
          uint64_t v123 = v275;
          uint64_t v136 = v276;
          unint64_t v137 = v277;
          uint64_t v124 = v278;
          uint64_t v138 = v279;
          uint64_t v139 = v280;
          uint64_t v125 = v281;
          uint64_t v140 = v282;
          unint64_t v141 = v283;
          uint64_t v126 = v284;
          uint64_t v142 = v285;
          BOOL v143 = v286;
          uint64_t v127 = v287;
          uint64_t v144 = v288;
          goto LABEL_127;
        }
        v147 = __dst;
        size_t v146 = 16 * v227;
      }
      memcpy(v147, v226, v146);
      goto LABEL_126;
    }
    if (v18 < 2)
    {
      size_t v21 = 16;
      size_t v20 = v228;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, *(unsigned int *)(a4 + 8), 16);
      uint64_t v19 = *(unsigned int *)(a4 + 8);
      if (!v19)
      {
LABEL_54:
        LODWORD(v227) = v18;
        goto LABEL_55;
      }
      size_t v20 = v226;
      size_t v21 = 16 * v19;
    }
    memcpy(v20, *(const void **)a4, v21);
    goto LABEL_54;
  }
  unsigned __int8 v9 = 0;
  unint64_t v10 = 0;
  uint64_t v234 = 0;
LABEL_87:
  uint64_t v337 = v8;
  if (!v236)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_217:
    abort();
  }
  (*(void (**)(void *, void ***))(*v236 + 48))(v236, &v337);
LABEL_89:
  if (v236 == v235)
  {
    (*(void (**)(void *))(v235[0] + 32))(v235);
  }
  else if (v236)
  {
    (*(void (**)(void))(*v236 + 40))();
  }
  return (v10 << 32) | ((a2 & 0xFFFFFF) << 8) | v9;
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  if (**(unsigned char **)a1 || (int v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v39 = *(void *)(a1 + 48);
  while (1)
  {
    uint64_t v11 = (uint64_t)*v9;
    uint64_t v12 = **v9;
    unsigned int v13 = (const char *)(**(void **)(a1 + 16) + v12);
    size_t v14 = **(void **)(a1 + 24) - v12;
    size_t v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(unsigned char **)a1 = 1;
      goto LABEL_2;
    }
    size_t v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v18 = v15 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      size_t v51 = v16;
      int64_t v52 = v19 | 0x8000000000000000;
      long long __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v52) = v15;
    p_dst = &__dst;
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    *((unsigned char *)p_dst + v16) = 0;
    int v20 = SHIBYTE(v52);
    uint64_t v22 = __dst;
    size_t v21 = v51;
    if (v52 >= 0) {
      unint64_t v23 = &__dst;
    }
    else {
      unint64_t v23 = __dst;
    }
    if (v52 >= 0) {
      size_t v21 = HIBYTE(v52);
    }
    if (v21 != a3 || a3 && memcmp(v23, a2, a3) || ((*(unsigned char *)(v11 + 10) & 0x20) == 0) == a4)
    {
      int v29 = 3;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_27:
      operator delete(v22);
      goto LABEL_68;
    }
    uint64_t v24 = *(void *)(a1 + 40);
    uint64_t v25 = *(void *)(v11 + 16) + **(void **)(a1 + 32);
    size_t v26 = *(void *)(v11 + 32);
    uint64_t v47 = 0;
    unint64_t v49 = 0;
    if (*(unsigned char *)(v24 + 24))
    {
      uint64_t v27 = *(void *)(v11 + 24);
      if (*(void *)(v24 + 8) < v27 + v26)
      {
        uint64_t v28 = 0;
        **(unsigned char **)a1 = 1;
        int v29 = 2;
LABEL_53:
        uint64_t v47 = 0;
        goto LABEL_64;
      }
      uint64_t v38 = v25;
      uint64_t v31 = malloc_type_malloc(v26, 0x4156ED03uLL);
      v42[0] = off_C8CF8;
      uint64_t v43 = v42;
      uint64_t v44 = (uint64_t)v31;
      long long v46 = v45;
      v45[0] = off_C8CF8;
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v47, &v44);
      uint64_t v32 = v44;
      uint64_t v44 = 0;
      if (v32)
      {
        uint64_t v53 = v32;
        if (!v46) {
          goto LABEL_75;
        }
        (*(void (**)(void *, uint64_t *))(*v46 + 48))(v46, &v53);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void))(*v46 + 40))();
      }
      if (v43 == v42)
      {
        (*(void (**)(void *))(v42[0] + 32))(v42);
      }
      else if (v43)
      {
        (*(void (**)(void))(*v43 + 40))();
      }
      memcpy(v31, (const void *)(v27 + **(void **)(a1 + 40)), v26);
    }
    else
    {
      uint64_t v38 = v25;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v39 + 2488) + 24))(&v44);
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v47, &v44);
      uint64_t v30 = v44;
      uint64_t v44 = 0;
      if (v30)
      {
        v42[0] = v30;
        if (!v46) {
          goto LABEL_75;
        }
        (*(void (**)(void *, void *))(*v46 + 48))(v46, v42);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void))(*v46 + 40))();
      }
    }
    uint64_t v33 = v47;
    if (!v47)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      int v29 = 1;
      uint64_t v28 = v49;
      goto LABEL_53;
    }
    unint64_t v34 = *(uint64_t **)(v39 + 2544);
    if ((unint64_t)v34 >= *(void *)(v39 + 2552))
    {
      uint64_t v35 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v39 + 2536), &v47);
    }
    else
    {
      uint64_t v47 = 0;
      *unint64_t v34 = v33;
      if (v49)
      {
        if (v49 == v48)
        {
          v34[4] = (uint64_t)(v34 + 1);
          (*(void (**)(void *))(*v49 + 24))(v49);
        }
        else
        {
          v34[4] = (uint64_t)v49;
          unint64_t v49 = 0;
        }
      }
      else
      {
        v34[4] = 0;
      }
      uint64_t v35 = v34 + 5;
    }
    *(void *)(v39 + 2544) = v35;
    *a5 = v38;
    a5[1] = v33;
    a5[2] = v26;
    uint64_t v36 = v47;
    uint64_t v28 = v49;
    uint64_t v47 = 0;
    if (!v36)
    {
      int v29 = 1;
LABEL_64:
      if (v28 == v48) {
        goto LABEL_61;
      }
      goto LABEL_65;
    }
    uint64_t v44 = v36;
    if (!v49)
    {
LABEL_75:
      uint64_t v37 = std::__throw_bad_function_call[abi:nn180100]();
      return;
    }
    (*(void (**)(void))(*v49 + 48))();
    int v29 = 1;
    uint64_t v28 = v49;
    if (v49 == v48)
    {
LABEL_61:
      (*(void (**)(void *))(v48[0] + 32))(v48);
      if (v20 < 0) {
        goto LABEL_27;
      }
      goto LABEL_68;
    }
LABEL_65:
    if (v28) {
      (*(void (**)(void *))(*v28 + 40))(v28);
    }
    if (v20 < 0) {
      goto LABEL_27;
    }
LABEL_68:
    if (v29 != 3) {
      break;
    }
    if (++v9 == v8) {
      goto LABEL_2;
    }
  }
  if (v29 == 2) {
    goto LABEL_2;
  }
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
}

void *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_C8CF8;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_C8CF8;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  if (**(unsigned char **)a1 || (int v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v39 = *(void *)(a1 + 48);
  while (1)
  {
    uint64_t v11 = (uint64_t)*v9;
    uint64_t v12 = **v9;
    unsigned int v13 = (const char *)(**(void **)(a1 + 16) + v12);
    size_t v14 = (**(_DWORD **)(a1 + 24) - v12);
    size_t v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(unsigned char **)a1 = 1;
      goto LABEL_2;
    }
    size_t v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v18 = v15 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      size_t v51 = v16;
      int64_t v52 = v19 | 0x8000000000000000;
      long long __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v52) = v15;
    p_dst = &__dst;
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    *((unsigned char *)p_dst + v16) = 0;
    int v20 = SHIBYTE(v52);
    uint64_t v22 = __dst;
    size_t v21 = v51;
    if (v52 >= 0) {
      unint64_t v23 = &__dst;
    }
    else {
      unint64_t v23 = __dst;
    }
    if (v52 >= 0) {
      size_t v21 = HIBYTE(v52);
    }
    if (v21 != a3 || a3 && memcmp(v23, a2, a3) || ((*(unsigned char *)(v11 + 10) & 0x20) == 0) == a4)
    {
      int v29 = 3;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_27:
      operator delete(v22);
      goto LABEL_68;
    }
    uint64_t v24 = *(void *)(a1 + 40);
    uint64_t v25 = **(void **)(a1 + 32) + *(unsigned int *)(v11 + 12);
    size_t v26 = *(unsigned int *)(v11 + 20);
    uint64_t v47 = 0;
    unint64_t v49 = 0;
    if (*(unsigned char *)(v24 + 24))
    {
      uint64_t v27 = *(unsigned int *)(v11 + 16);
      if (*(void *)(v24 + 8) < (unint64_t)(v27 + v26))
      {
        uint64_t v28 = 0;
        **(unsigned char **)a1 = 1;
        int v29 = 2;
LABEL_53:
        uint64_t v47 = 0;
        goto LABEL_64;
      }
      uint64_t v38 = v25;
      uint64_t v31 = malloc_type_malloc(v26, 0x4156ED03uLL);
      v42[0] = off_C8D40;
      uint64_t v43 = v42;
      uint64_t v44 = (uint64_t)v31;
      long long v46 = v45;
      v45[0] = off_C8D40;
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v47, &v44);
      uint64_t v32 = v44;
      uint64_t v44 = 0;
      if (v32)
      {
        uint64_t v53 = v32;
        if (!v46) {
          goto LABEL_75;
        }
        (*(void (**)(void *, uint64_t *))(*v46 + 48))(v46, &v53);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void))(*v46 + 40))();
      }
      if (v43 == v42)
      {
        (*(void (**)(void *))(v42[0] + 32))(v42);
      }
      else if (v43)
      {
        (*(void (**)(void))(*v43 + 40))();
      }
      memcpy(v31, (const void *)(**(void **)(a1 + 40) + v27), v26);
    }
    else
    {
      uint64_t v38 = v25;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v39 + 2488) + 24))(&v44);
      std::unique_ptr<void const,std::function<void ()(void const*)>>::operator=[abi:nn180100](&v47, &v44);
      uint64_t v30 = v44;
      uint64_t v44 = 0;
      if (v30)
      {
        v42[0] = v30;
        if (!v46) {
          goto LABEL_75;
        }
        (*(void (**)(void *, void *))(*v46 + 48))(v46, v42);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void))(*v46 + 40))();
      }
    }
    uint64_t v33 = v47;
    if (!v47)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      int v29 = 1;
      uint64_t v28 = v49;
      goto LABEL_53;
    }
    unint64_t v34 = *(uint64_t **)(v39 + 2544);
    if ((unint64_t)v34 >= *(void *)(v39 + 2552))
    {
      uint64_t v35 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((int64x2_t *)(v39 + 2536), &v47);
    }
    else
    {
      uint64_t v47 = 0;
      *unint64_t v34 = v33;
      if (v49)
      {
        if (v49 == v48)
        {
          v34[4] = (uint64_t)(v34 + 1);
          (*(void (**)(void *))(*v49 + 24))(v49);
        }
        else
        {
          v34[4] = (uint64_t)v49;
          unint64_t v49 = 0;
        }
      }
      else
      {
        v34[4] = 0;
      }
      uint64_t v35 = v34 + 5;
    }
    *(void *)(v39 + 2544) = v35;
    *a5 = v38;
    a5[1] = v33;
    a5[2] = v26;
    uint64_t v36 = v47;
    uint64_t v28 = v49;
    uint64_t v47 = 0;
    if (!v36)
    {
      int v29 = 1;
LABEL_64:
      if (v28 == v48) {
        goto LABEL_61;
      }
      goto LABEL_65;
    }
    uint64_t v44 = v36;
    if (!v49)
    {
LABEL_75:
      uint64_t v37 = std::__throw_bad_function_call[abi:nn180100]();
      return;
    }
    (*(void (**)(void))(*v49 + 48))();
    int v29 = 1;
    uint64_t v28 = v49;
    if (v49 == v48)
    {
LABEL_61:
      (*(void (**)(void *))(v48[0] + 32))(v48);
      if (v20 < 0) {
        goto LABEL_27;
      }
      goto LABEL_68;
    }
LABEL_65:
    if (v28) {
      (*(void (**)(void *))(*v28 + 40))(v28);
    }
    if (v20 < 0) {
      goto LABEL_27;
    }
LABEL_68:
    if (v29 != 3) {
      break;
    }
    if (++v9 == v8) {
      goto LABEL_2;
    }
  }
  if (v29 == 2) {
    goto LABEL_2;
  }
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
}

void *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_C8D40;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_C8D40;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_readIsaMask::$_0>(swift_reflection_readIsaMask::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(void **a1, uint64_t *a2)
{
  uint64_t v2 = (void ***)**a1;
  uint64_t v3 = *a2;
  int IsaEncoding = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(*a2);
  if (IsaEncoding == 2)
  {
    uint64_t v5 = 0;
    uint64_t result = 1;
  }
  else if (IsaEncoding == 3)
  {
    uint64_t v5 = *(void *)(v3 + 104);
    uint64_t result = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
  }
  **uint64_t *v2 = v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_readIsaMask::$_0>(swift_reflection_readIsaMask::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(void **a1, uint64_t *a2)
{
  uint64_t v2 = (void ***)**a1;
  uint64_t v3 = *a2;
  int IsaEncoding = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(*a2);
  if (IsaEncoding == 2)
  {
    uint64_t v5 = 0;
    uint64_t result = 1;
  }
  else if (IsaEncoding == 3)
  {
    uint64_t v5 = *(void *)(v3 + 104);
    uint64_t result = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
  }
  **uint64_t *v2 = v5;
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 96);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 2488);
    *(void *)std::string __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_C6740;
    strcpy(*(char **)__p, "objc_debug_indexed_isa_magic_mask");
    uint64_t v4 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v3 + 8))(v3, __p);
    uint64_t v5 = v4;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v5) {
        goto LABEL_27;
      }
    }
    else if (!v4)
    {
      goto LABEL_27;
    }
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v5, a1 + 120, 8))goto LABEL_34; {
    if (*(void *)(a1 + 120))
    }
    {
      uint64_t v6 = *(void *)(a1 + 2488);
      *(void *)std::string __p = operator new(0x28uLL);
      *(_OWORD *)&__p[8] = xmmword_C6750;
      strcpy(*(char **)__p, "objc_debug_indexed_isa_magic_value");
      uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v6 + 8))(v6, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v7
        && (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v7, a1 + 128, 8))
      {
        uint64_t v8 = *(void *)(a1 + 2488);
        *(void *)std::string __p = operator new(0x28uLL);
        *(_OWORD *)&__p[8] = xmmword_C6740;
        strcpy(*(char **)__p, "objc_debug_indexed_isa_index_mask");
        uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v8 + 8))(v8, __p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (v9
          && (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v9, a1 + 104, 8))
        {
          uint64_t v10 = *(void *)(a1 + 2488);
          std::string::basic_string[abi:nn180100]<0>(__p, "objc_debug_indexed_isa_index_shift");
          uint64_t v11 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v10 + 8))(v10, __p);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (v11
            && (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v11, a1 + 112, 8))
          {
            uint64_t v12 = *(void *)(a1 + 2488);
            std::string::basic_string[abi:nn180100]<0>(__p, "objc_indexed_classes");
            uint64_t v13 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v12 + 8))(v12, __p);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (v13)
            {
              *(void *)(a1 + 136) = v13;
              uint64_t v14 = *(void *)(a1 + 2488);
              std::string::basic_string[abi:nn180100]<0>(__p, "objc_indexed_classes_count");
              uint64_t v15 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v14 + 8))(v14, __p);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if (v15)
              {
                *(void *)(a1 + 144) = v15;
                uint64_t result = 4;
LABEL_36:
                *(_DWORD *)(a1 + 96) = result;
                return result;
              }
            }
          }
        }
      }
      goto LABEL_34;
    }
LABEL_27:
    uint64_t v16 = *(void *)(a1 + 2488);
    __p[23] = 13;
    strcpy(__p, "swift_isaMask");
    uint64_t v17 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v16 + 8))(v16, __p);
    uint64_t v18 = v17;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v18) {
        goto LABEL_35;
      }
    }
    else if (!v17)
    {
      goto LABEL_35;
    }
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v18, a1 + 104, 8))
    {
      if (*(void *)(a1 + 104))
      {
        uint64_t result = 3;
        goto LABEL_36;
      }
LABEL_35:
      uint64_t result = 2;
      goto LABEL_36;
    }
LABEL_34:
    uint64_t result = 1;
    goto LABEL_36;
  }
  return result;
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMetadata::$_0>(swift_reflection_typeRefForMetadata::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(*a2, ****a1, 0, 50);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMetadata::$_0>(swift_reflection_typeRefForMetadata::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(*a2, ****a1, 0, 50);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&v263[0] = a2;
  BYTE8(v263[0]) = a3;
  int32x2_t v8 = *(int32x2_t *)a1;
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    unsigned int v18 = 0;
LABEL_15:
    uint64_t v11 = *(void *)&v8 + 24 * v18;
    goto LABEL_16;
  }
  unsigned int v10 = (v9 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(v263, (char *)v263 + 8);
  uint64_t v11 = *(void *)&v8 + 24 * v10;
  uint64_t v12 = *(void *)v11;
  int v13 = *(unsigned __int8 *)(v11 + 8);
  if (*(void *)&v263[0] != *(void *)v11 || BYTE8(v263[0]) != v13)
  {
    int v15 = 1;
    while (v12 != -1 || v13)
    {
      unsigned int v16 = v10 + v15++;
      unsigned int v10 = v16 & (v9 - 1);
      uint64_t v11 = *(void *)&v8 + 24 * v10;
      uint64_t v12 = *(void *)v11;
      int v13 = *(unsigned __int8 *)(v11 + 8);
      if (*(void *)&v263[0] == *(void *)v11 && BYTE8(v263[0]) == v13) {
        goto LABEL_16;
      }
    }
    int32x2_t v8 = *(int32x2_t *)a1;
    unsigned int v18 = *(_DWORD *)(a1 + 16);
    goto LABEL_15;
  }
LABEL_16:
  if (v11 != *(void *)a1 + 24 * *(unsigned int *)(a1 + 16)) {
    return *(void *)(v11 + 16);
  }
  BOOL v20 = __OFSUB__(a4, 1);
  uint64_t v21 = (a4 - 1);
  if ((int)v21 < 0 != v20) {
    return 0;
  }
  *(_OWORD *)std::string __p = v263[0];
  uint64_t v220 = 0;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::try_emplace<swift::reflection::TypeRef const*>(a1, (char *)__p, (uint64_t *)&v220, (uint64_t)&v178);
  uint64_t v22 = (swift::reflection::OpaqueTypeRef *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v261);
  unint64_t v23 = v262;
  if (!v262) {
    return 0;
  }
  uint64_t v24 = *v262;
  if (*v262 > 0x7FFuLL) {
    LODWORD(v24) = 0;
  }
  if ((int)v24 <= 768)
  {
    if ((v24 - 512) < 3)
    {
      v259[0] = v261;
      v259[1] = v262;
      return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata((int32x2_t *)a1, (uint64_t)v259, v21, 0);
    }
    if ((v24 - 515) >= 2)
    {
      if (v24)
      {
LABEL_139:
        uint64_t v76 = swift::reflection::OpaqueTypeRef::get(v22);
LABEL_140:
        uint64_t TupleType = v76;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = v76;
      }
      else
      {
        v260[0] = v261;
        v260[1] = (uint64_t)v262;
        return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata(a1, v260, v21, a3);
      }
      return TupleType;
    }
    uint64_t v28 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(a1, &v261, 0);
    if (v28)
    {
      ((void (*)(uint64_t *__return_ptr, unint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v216, a1, v28);
      if (v217)
      {
        uint64_t v220 = 0;
        __p[1] = 0;
        uint64_t v221 = 0;
        uint64_t v222 = 2400;
        uint64_t v223 = 0;
        char v224 = 0;
        uint64_t v258 = 0;
        __p[0] = off_C9440;
        uint64_t v225 = 0;
        uint64_t v227 = 0;
        uint64_t v226 = 0;
        char v228 = 0;
        long long v240 = 0u;
        long long v241 = 0u;
        long long v242 = 0u;
        long long v243 = 0u;
        long long v244 = 0u;
        long long v245 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v248 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        long long v251 = 0u;
        long long v252 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v229 = 0u;
        long long v230 = 0u;
        long long v231 = 0u;
        long long v232 = 0u;
        long long v233 = 0u;
        long long v234 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        long long v239 = 0u;
        int v257 = 0;
        v177[0] = v216;
        v177[1] = v217;
        int v29 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(a1, v177, (swift::Demangle::__runtime::NodeFactory *)__p);
        if (v29 && *((_WORD *)v29 + 8) == 232)
        {
          swift::Demangle::__runtime::mangleNode(v29, v30);
          if (LODWORD(v178.__r_.__value_.__l.__data_))
          {
            uint64_t TupleType = 0;
          }
          else
          {
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v218, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
            }
            else {
              std::string v218 = v179;
            }
            uint64_t TupleType = swift::reflection::ForeignClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)&v218);
            __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = TupleType;
            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v218.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v179.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t TupleType = 0;
        }
LABEL_208:
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
        return TupleType;
      }
    }
    return 0;
  }
  switch((int)v24)
  {
    case 769:
      uint64_t v220 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<swift::reflection::TypeRef const*>::reserve((uint64_t)__p, v262[1]);
      uint64_t v25 = *((unsigned int *)v23 + 2);
      if (!*((_DWORD *)v23 + 2)) {
        goto LABEL_141;
      }
      uint64_t v26 = 0;
      uint64_t v27 = v23 + 3;
      unsigned int v174 = v23;
      unsigned __int8 v170 = v23 + 3;
      do
      {
        uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v27[2 * v26], 0, v21);
        if (!TypeFromMetadata)
        {
          uint64_t TupleType = 0;
          goto LABEL_246;
        }
        uint64_t v33 = TypeFromMetadata;
        unint64_t v34 = (char *)__p[1];
        if (__p[1] < v220)
        {
          *(void *)__p[1] = TypeFromMetadata;
          uint64_t v31 = v34 + 8;
          goto LABEL_35;
        }
        uint64_t v35 = v25;
        uint64_t v36 = v21;
        uint64_t v37 = (char *)__p[0];
        int64_t v38 = (char *)__p[1] - (char *)__p[0];
        int64_t v39 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_318;
        }
        uint64_t v41 = v220 - (char *)__p[0];
        if ((v220 - (char *)__p[0]) >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v171 = v40;
        if (v40)
        {
          if (v40 >> 61) {
            goto LABEL_319;
          }
          int v42 = operator new(8 * v40);
        }
        else
        {
          int v42 = 0;
        }
        uint64_t v43 = (uint64_t *)&v42[8 * v39];
        *uint64_t v43 = v33;
        uint64_t v31 = v43 + 1;
        if (v34 == v37)
        {
          uint64_t v21 = v36;
          uint64_t v25 = v35;
          unint64_t v23 = v174;
          goto LABEL_57;
        }
        unint64_t v44 = v34 - v37 - 8;
        if (v44 >= 0x58)
        {
          unint64_t v45 = v34 - v42 - v38;
          uint64_t v21 = v36;
          uint64_t v25 = v35;
          unint64_t v23 = v174;
          if (v45 >= 0x20)
          {
            uint64_t v46 = (v44 >> 3) + 1;
            uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v48 = &v34[-v47];
            uint64_t v43 = (uint64_t *)((char *)v43 - v47);
            unint64_t v49 = &v42[8 * v39 - 16];
            unint64_t v50 = v34 - 16;
            uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *unint64_t v49 = v52;
              v49 -= 2;
              v50 -= 32;
              v51 -= 4;
            }
            while (v51);
            unint64_t v34 = v48;
            if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_56;
            }
          }
        }
        else
        {
          uint64_t v21 = v36;
          uint64_t v25 = v35;
          unint64_t v23 = v174;
        }
        do
        {
          uint64_t v53 = *((void *)v34 - 1);
          v34 -= 8;
          *--uint64_t v43 = v53;
        }
        while (v34 != v37);
LABEL_56:
        unint64_t v34 = (char *)__p[0];
LABEL_57:
        uint64_t v27 = v170;
        __p[0] = v43;
        __p[1] = v31;
        uint64_t v220 = &v42[8 * v171];
        if (v34) {
          operator delete(v34);
        }
LABEL_35:
        __p[1] = v31;
        ++v26;
      }
      while (v26 != v25);
LABEL_141:
      memset(&v178, 0, sizeof(v178));
      uint64_t v104 = v23[2];
      if (v104
        && !(*(unsigned int (**)(void, uint64_t, std::string *))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v104, &v178))
      {
        uint64_t TupleType = 0;
      }
      else
      {
        std::string::size_type v105 = std::string::find(&v178, 32, 0);
        if (v105 != -1)
        {
          std::string::size_type v106 = v105;
          std::string::size_type v107 = 0;
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          uint64_t v110 = 0;
          while (1)
          {
            if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v111 = &v178;
            }
            else {
              uint64_t v111 = (std::string *)v178.__r_.__value_.__r.__words[0];
            }
            uint64_t v112 = (char *)v111 + v107;
            std::string::size_type v113 = v106 - v107;
            if (v109 < v110)
            {
              *(void *)uint64_t v109 = v112;
              *((void *)v109 + 1) = v113;
              v109 += 16;
            }
            else
            {
              uint64_t v114 = (v109 - v108) >> 4;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 60) {
                goto LABEL_318;
              }
              if ((v110 - v108) >> 3 > v115) {
                unint64_t v115 = (v110 - v108) >> 3;
              }
              if ((unint64_t)(v110 - v108) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v116 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v115;
              }
              if (v116)
              {
                if (v116 >> 60) {
                  goto LABEL_319;
                }
                unint64_t v117 = (char *)operator new(16 * v116);
              }
              else
              {
                unint64_t v117 = 0;
              }
              size_t v118 = &v117[16 * v114];
              *(void *)size_t v118 = v112;
              *((void *)v118 + 1) = v113;
              if (v109 == v108)
              {
                uint64_t v120 = &v117[16 * v114];
              }
              else
              {
                uint64_t v119 = &v117[16 * v114];
                do
                {
                  uint64_t v120 = v119 - 16;
                  *((_OWORD *)v119 - 1) = *((_OWORD *)v109 - 1);
                  v109 -= 16;
                  v119 -= 16;
                }
                while (v109 != v108);
              }
              uint64_t v110 = &v117[16 * v116];
              uint64_t v109 = v118 + 16;
              if (v108) {
                operator delete(v108);
              }
              uint64_t v108 = v120;
            }
            std::string::size_type v107 = v106 + 1;
            std::string::size_type v106 = std::string::find(&v178, 32, v106 + 1);
            if (v106 == -1) {
              goto LABEL_218;
            }
          }
        }
        uint64_t v110 = 0;
        uint64_t v109 = 0;
        uint64_t v108 = 0;
LABEL_218:
        uint64_t v140 = v109 - v108;
        unint64_t v141 = (unint64_t)(v109 - v108) >> 4;
        uint64_t v142 = __p[0];
        unint64_t v143 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if (v143 > v141)
        {
          do
          {
            if (v109 < v110)
            {
              *(void *)uint64_t v109 = 0;
              *((void *)v109 + 1) = 0;
              v109 += 16;
            }
            else
            {
              uint64_t v144 = (v109 - v108) >> 4;
              unint64_t v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 60) {
                goto LABEL_318;
              }
              if ((v110 - v108) >> 3 > v145) {
                unint64_t v145 = (v110 - v108) >> 3;
              }
              if ((unint64_t)(v110 - v108) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v146 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v145;
              }
              if (v146)
              {
                if (v146 >> 60) {
                  goto LABEL_319;
                }
                v147 = (char *)operator new(16 * v146);
              }
              else
              {
                v147 = 0;
              }
              size_t v148 = &v147[16 * v144];
              *(void *)size_t v148 = 0;
              *((void *)v148 + 1) = 0;
              if (v109 == v108)
              {
                size_t v150 = &v147[16 * v144];
              }
              else
              {
                uint64_t v149 = &v147[16 * v144];
                do
                {
                  size_t v150 = v149 - 16;
                  *((_OWORD *)v149 - 1) = *((_OWORD *)v109 - 1);
                  v109 -= 16;
                  v149 -= 16;
                }
                while (v109 != v108);
              }
              uint64_t v110 = &v147[16 * v146];
              uint64_t v109 = v148 + 16;
              if (v108) {
                operator delete(v108);
              }
              uint64_t v108 = v150;
            }
            unint64_t v141 = (v141 + 1);
            uint64_t v142 = __p[0];
            unint64_t v143 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          while (v143 > v141);
          uint64_t v140 = v109 - v108;
        }
        uint64_t TupleType = swift::reflection::TypeRefBuilder::createTupleType(a1 + 296, v142, v143, (uint64_t)v108, v140 >> 4);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = TupleType;
        if (v108) {
          operator delete(v108);
        }
      }
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v178.__r_.__value_.__l.__data_);
      }
LABEL_246:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return TupleType;
    case 770:
      uint64_t v54 = *((unsigned __int16 *)v262 + 4);
      uint64_t v175 = (uint64_t)v262;
      if (*((_WORD *)v262 + 4))
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = v262 + 3;
        uint64_t v172 = v262 + 3;
        while (1)
        {
          uint64_t v60 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v59[v55], 0, v21);
          if (!v60) {
            goto LABEL_253;
          }
          uint64_t v61 = v60;
          uint64_t v62 = *(void *)(v175 + 8);
          if ((v62 & 0x2000000) != 0)
          {
            int v63 = *((_DWORD *)&v59[(unsigned __int16)v62] + v55);
            if (v57 < (uint64_t *)v58)
            {
LABEL_69:
              *uint64_t v57 = 0;
              v57[1] = 0;
              v57[2] = v60;
              *((_DWORD *)v57 + 6) = v63;
              v57 += 4;
              goto LABEL_70;
            }
          }
          else
          {
            int v63 = 0;
            if (v57 < (uint64_t *)v58) {
              goto LABEL_69;
            }
          }
          uint64_t v64 = v21;
          uint64_t v65 = ((char *)v57 - (char *)v56) >> 5;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 59) {
            goto LABEL_318;
          }
          if ((v58 - (char *)v56) >> 4 > v66) {
            unint64_t v66 = (v58 - (char *)v56) >> 4;
          }
          if ((unint64_t)(v58 - (char *)v56) >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v67 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67)
          {
            if (v67 >> 59) {
              goto LABEL_319;
            }
            uint64_t v68 = (char *)operator new(32 * v67);
          }
          else
          {
            uint64_t v68 = 0;
          }
          uint64_t v69 = &v68[32 * v65];
          *(void *)uint64_t v69 = 0;
          *((void *)v69 + 1) = 0;
          *((void *)v69 + 2) = v61;
          *((_DWORD *)v69 + 6) = v63;
          if (v57 == v56)
          {
            uint64_t v72 = &v68[32 * v65];
          }
          else
          {
            unint64_t v70 = &v68[32 * v65];
            do
            {
              long long v71 = *((_OWORD *)v57 - 2);
              uint64_t v72 = v70 - 32;
              *(_OWORD *)(v70 - 20) = *(_OWORD *)((char *)v57 - 20);
              *((_OWORD *)v70 - 2) = v71;
              v57 -= 4;
              v70 -= 32;
            }
            while (v57 != v56);
          }
          uint64_t v58 = &v68[32 * v67];
          uint64_t v57 = (uint64_t *)(v69 + 32);
          if (v56) {
            operator delete(v56);
          }
          uint64_t v56 = (uint64_t *)v72;
          uint64_t v21 = v64;
          uint64_t v59 = v172;
LABEL_70:
          if (++v55 == v54) {
            goto LABEL_199;
          }
        }
      }
      uint64_t v57 = 0;
      uint64_t v56 = 0;
LABEL_199:
      uint64_t v130 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(void *)(v175 + 16), 0, v21);
      if (!v130) {
        goto LABEL_253;
      }
      uint64_t v131 = v130;
      unint64_t v132 = *(void *)(v175 + 8);
      if ((v132 & 0x80000000) != 0) {
        unsigned int ExtendedFlags = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getExtendedFlags(v175);
      }
      else {
        unsigned int ExtendedFlags = 0;
      }
      uint64_t v134 = *(void *)(v175 + 8);
      if ((v134 & 0x10000000) != 0)
      {
        uint64_t v138 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(void *)(((v175+ 8 * (unsigned __int16)*(void *)(v175 + 8)+ 4* ((unsigned __int16)*(void *)(v175 + 8) & (unint64_t)((uint64_t)(*(void *)(v175 + 8) << 38) >> 63))+ 31) & 0xFFFFFFFFFFFFFFF8)+ 8 * ((*(void *)(v175 + 8) >> 27) & 1)), 0, v21);
        if (!v138)
        {
LABEL_253:
          uint64_t TupleType = 0;
          goto LABEL_256;
        }
        uint64_t v137 = v138;
        uint64_t v134 = *(void *)(v175 + 8);
      }
      else
      {
        uint64_t v137 = 0;
      }
      if ((v134 & 0x8000000) != 0)
      {
        unint64_t v151 = *(void *)((v175
                          + 8 * (unsigned __int16)v134
                          + 4 * ((unsigned __int16)v134 & (unint64_t)(v134 << 38 >> 63))
                          + 31) & 0xFFFFFFFFFFFFFFF8);
        if (v151 - 1 >= 4) {
          unint64_t v139 = 0;
        }
        else {
          unint64_t v139 = v151;
        }
      }
      else
      {
        unint64_t v139 = 0;
      }
      if (swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::hasThrownError(v175))
      {
        uint64_t ThrownError = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getThrownError(v175);
        uint64_t v153 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, ThrownError, 0, v21);
        if (!v153) {
          goto LABEL_253;
        }
      }
      else
      {
        uint64_t v153 = 0;
      }
      uint64_t TupleType = swift::reflection::TypeRefBuilder::createFunctionType(a1 + 296, v56, ((char *)v57 - (char *)v56) >> 5, v131, v132, ExtendedFlags, v139, v137, v153);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = TupleType;
LABEL_256:
      if (!v56) {
        return TupleType;
      }
      goto LABEL_257;
    case 771:
      unsigned int v73 = *((_DWORD *)v262 + 2);
      if ((v73 & 0x40000000) != 0)
      {
        uint64_t TupleType = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v262[2], 0, v21);
        if (!TupleType) {
          return TupleType;
        }
        unsigned int v73 = *((_DWORD *)v23 + 2);
        BOOL v74 = 1;
      }
      else
      {
        uint64_t TupleType = 0;
        BOOL v74 = (v73 & 0x80000000) == 0;
      }
      uint64_t v220 = 0;
      __p[1] = 0;
      uint64_t v221 = 0;
      uint64_t v222 = 2400;
      uint64_t v223 = 0;
      char v224 = 0;
      uint64_t v258 = 0;
      __p[0] = off_C9440;
      uint64_t v225 = 0;
      uint64_t v227 = 0;
      uint64_t v226 = 0;
      char v228 = 0;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v245 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      long long v250 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v229 = 0u;
      long long v230 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      int v257 = 0;
      memset(&v218, 0, sizeof(v218));
      uint64_t v121 = *((unsigned int *)v23 + 3);
      if (v121)
      {
        uint64_t v122 = &v23[((v73 >> 30) & 1) + 2];
        uint64_t v123 = 8 * v121;
        do
        {
          uint64_t v216 = *v122;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver>(a1, &v216, (swift::Demangle::__runtime::NodeFactory *)__p, a1 + 296, &v178);
          if (!v179.__r_.__value_.__s.__data_[8])
          {
            uint64_t TupleType = 0;
            goto LABEL_207;
          }
          std::string::size_type size = (std::string *)v218.__r_.__value_.__l.__size_;
          if (v218.__r_.__value_.__l.__size_ >= v218.__r_.__value_.__r.__words[2])
          {
            uint64_t v126 = std::vector<std::optional<std::pair<std::string,BOOL>>>::__push_back_slow_path<std::optional<std::pair<std::string,BOOL>> const&>((uint64_t)&v218, (uint64_t)&v178);
          }
          else
          {
            *(unsigned char *)v218.__r_.__value_.__l.__size_ = 0;
            size[1].__r_.__value_.__s.__data_[8] = 0;
            if (v179.__r_.__value_.__s.__data_[8])
            {
              if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(size, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v125 = *(_OWORD *)&v178.__r_.__value_.__l.__data_;
                size->__r_.__value_.__r.__words[2] = v178.__r_.__value_.__r.__words[2];
                *(_OWORD *)&size->__r_.__value_.__l.__data_ = v125;
              }
              size[1].__r_.__value_.__s.__data_[0] = v179.__r_.__value_.__s.__data_[0];
              size[1].__r_.__value_.__s.__data_[8] = 1;
            }
            uint64_t v126 = &size[1].__r_.__value_.__s.__data_[16];
          }
          v218.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
          if (v179.__r_.__value_.__s.__data_[8] && SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v178.__r_.__value_.__l.__data_);
          }
          ++v122;
          v123 -= 8;
        }
        while (v123);
        std::string::size_type v135 = v218.__r_.__value_.__l.__size_;
        uint64_t v136 = (long long *)v218.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type v135 = 0;
        uint64_t v136 = 0;
      }
      uint64_t TupleType = swift::reflection::TypeRefBuilder::createProtocolCompositionType(a1 + 296, v136, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v135 - (void)v136) >> 3), TupleType, v74);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = TupleType;
LABEL_207:
      std::vector<std::optional<std::pair<std::string,BOOL>>>::~vector[abi:nn180100]((void **)&v218.__r_.__value_.__l.__data_);
      goto LABEL_208;
    case 772:
      uint64_t v75 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v262[1], 0, v21);
      if (!v75) {
        return 0;
      }
      uint64_t v76 = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v75, 0);
      goto LABEL_140;
    case 773:
      uint64_t v77 = v262[1];
      __p[1] = 0;
      __p[0] = 0;
      uint64_t v220 = 0;
      uint64_t TupleType = 0;
      if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCClassName(a1, v77))
      {
        uint64_t TupleType = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = TupleType;
      }
      goto LABEL_62;
    case 774:
      uint64_t v78 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v262[1], 0, v21);
      if (!v78) {
        return 0;
      }
      uint64_t v76 = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v78);
      goto LABEL_140;
    case 775:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(a1, *(void *)(a1 + 2504) & v262[1], &v216);
      unint64_t v79 = v217;
      if (!v217) {
        return 0;
      }
      if ((*((unsigned char *)v217 + 1) & 1) == 0 || (uint64_t v80 = *((unsigned __int16 *)v217 + 10), !*((_WORD *)v217 + 10)))
      {
        unsigned int v82 = 0;
        uint64_t v56 = 0;
        goto LABEL_188;
      }
      uint64_t v81 = 0;
      uint64_t v56 = 0;
      unsigned int v82 = 0;
      uint64_t v83 = 0;
      uint64_t v84 = v23 + 2;
      unsigned int v173 = v23 + 2;
      uint64_t v176 = *((unsigned __int16 *)v217 + 10);
      break;
    default:
      if ((v24 - 1280) >= 2 && v24 != 1024) {
        goto LABEL_139;
      }
      strcpy((char *)__p, "Bo");
      HIBYTE(v220) = 2;
      uint64_t TupleType = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
LABEL_62:
      if (SHIBYTE(v220) < 0) {
        operator delete(__p[0]);
      }
      return TupleType;
  }
  while (1)
  {
    uint64_t v86 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v84[v81], 0, v21);
    if (!v86)
    {
      uint64_t TupleType = 0;
      if (!v56) {
        return TupleType;
      }
      goto LABEL_257;
    }
    uint64_t v87 = v86;
    if (v82 >= v83) {
      break;
    }
    *v82++ = v86;
LABEL_109:
    if (++v81 == v80)
    {
      unint64_t v79 = v217;
LABEL_188:
      uint64_t v220 = 0;
      __p[1] = 0;
      uint64_t v221 = 0;
      uint64_t v222 = 2400;
      uint64_t v223 = 0;
      char v224 = 0;
      uint64_t v258 = 0;
      __p[0] = off_C9440;
      uint64_t v225 = 0;
      uint64_t v227 = 0;
      uint64_t v226 = 0;
      char v228 = 0;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v245 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      long long v250 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v229 = 0u;
      long long v230 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      int v257 = 0;
      uint64_t v127 = (int)v79[1];
      if (v127) {
        uint64_t v128 = (char *)(v216 + v127 + 4);
      }
      else {
        uint64_t v128 = 0;
      }
      unint64_t MangledName = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v128, 0, __p);
      if (!MangledName) {
        goto LABEL_195;
      }
      v218.__r_.__value_.__r.__words[0] = a1 + 296;
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&v218, MangledName, 0, &v178);
      if (LOWORD(v178.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v178.__r_.__value_.__r.__words[2]) == 1) {
          ((void (*)(std::string::size_type, uint64_t, void))v178.__r_.__value_.__l.__size_)(v178.__r_.__value_.__r.__words[0], 3, 0);
        }
        goto LABEL_195;
      }
      uint64_t TupleType = v178.__r_.__value_.__r.__words[0];
      if (!v178.__r_.__value_.__r.__words[0]) {
        goto LABEL_196;
      }
      v215[0] = v216;
      v215[1] = v217;
      swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v217, (uint64_t)&v178);
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(a1, (uint64_t)v215, (unsigned __int16 *)&v178, (uint64_t)&v218);
      if (LOWORD(v218.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v218.__r_.__value_.__r.__words[2]) == 1) {
          ((void (*)(std::string::size_type, uint64_t, void))v218.__r_.__value_.__l.__size_)(v218.__r_.__value_.__r.__words[0], 3, 0);
        }
        goto LABEL_195;
      }
      if (!v218.__r_.__value_.__r.__words[0])
      {
LABEL_195:
        uint64_t TupleType = 0;
        goto LABEL_196;
      }
      swift::reflection::TypeRefBuilder::createSubstitutionMap((uint64_t *)v218.__r_.__value_.__l.__data_, (uint64_t)v56, v82 - v56, (uint64_t)&v218);
      if (!LODWORD(v218.__r_.__value_.__r.__words[1]))
      {
        uint64_t TupleType = 0;
        goto LABEL_316;
      }
      uint64_t TupleType = swift::reflection::TypeRef::subst(TupleType, a1 + 296, (uint64_t *)&v218);
      if (!TupleType) {
        goto LABEL_316;
      }
      if ((*((unsigned char *)v217 + 1) & 2) == 0) {
        goto LABEL_315;
      }
      *(_OWORD *)&v178.__r_.__value_.__r.__words[1] = 0uLL;
      v179.__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&v179.__r_.__value_.__r.__words[1] = 0x960uLL;
      char v180 = 0;
      uint64_t v214 = 0;
      v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_C9440;
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      char v184 = 0;
      long long v196 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      long long v206 = 0u;
      long long v207 = 0u;
      long long v208 = 0u;
      long long v209 = 0u;
      long long v210 = 0u;
      long long v211 = 0u;
      long long v212 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      int v213 = 0;
      unint64_t v154 = *v217;
      if ((v154 & 0x200) != 0) {
        uint64_t v155 = (int *)(((unint64_t)&v217[2 * ((v154 >> 8) & 1) + 4] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else {
        uint64_t v155 = 0;
      }
      unsigned int v156 = (char *)v155 + v216 - (void)v217;
      uint64_t v157 = *v155;
      uint64_t v158 = &v156[v157];
      if (v157) {
        uint64_t v159 = v158;
      }
      else {
        uint64_t v159 = 0;
      }
      unint64_t v160 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v159, 0, &v178);
      if (!v160)
      {
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v178);
        uint64_t TupleType = 0;
        goto LABEL_316;
      }
      unint64_t v161 = v160;
      while (1)
      {
        if (*(_WORD *)(v161 + 16) != 232)
        {
LABEL_314:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v178);
LABEL_315:
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)v263)[2] = TupleType;
LABEL_316:
          __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v218.__r_.__value_.__l.__data_, (void *)(16 * LODWORD(v218.__r_.__value_.__r.__words[2])), (std::align_val_t)8uLL);
LABEL_196:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
          if (!v56) {
            return TupleType;
          }
LABEL_257:
          operator delete(v56);
          return TupleType;
        }
        int v163 = *(unsigned __int8 *)(v161 + 18);
        v164 = (uint64_t *)v161;
        if ((v163 - 1) >= 2)
        {
          if (v163 != 5 || !*(_DWORD *)(v161 + 8)) {
            goto LABEL_314;
          }
          v164 = *(uint64_t **)v161;
        }
        if (*(_WORD *)(*v164 + 16) != 145) {
          goto LABEL_314;
        }
        uint64_t v165 = (uint64_t *)v161;
        if ((v163 - 1) >= 2)
        {
          if (v163 != 5 || !*(_DWORD *)(v161 + 8))
          {
            uint64_t v166 = 0;
            goto LABEL_301;
          }
          uint64_t v165 = *(uint64_t **)v161;
        }
        uint64_t v166 = *v165;
LABEL_301:
        int v167 = *(unsigned __int8 *)(v166 + 18);
        if ((v167 - 1) >= 2 && (v167 != 5 || !*(_DWORD *)(v166 + 8))) {
          goto LABEL_314;
        }
        uint64_t TupleType = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, TupleType);
        int v168 = *(unsigned __int8 *)(v161 + 18);
        if ((v168 - 1) >= 2)
        {
          if (v168 != 5 || !*(_DWORD *)(v161 + 8))
          {
            unint64_t v162 = 0;
            goto LABEL_310;
          }
          unint64_t v161 = *(void *)v161;
        }
        unint64_t v162 = *(void *)v161;
LABEL_310:
        int v169 = *(unsigned __int8 *)(v162 + 18);
        if ((v169 - 1) < 2) {
          goto LABEL_288;
        }
        if (v169 == 5)
        {
          if (*(_DWORD *)(v162 + 8))
          {
            unint64_t v162 = *(void *)v162;
LABEL_288:
            unint64_t v161 = *(void *)v162;
            continue;
          }
          unint64_t v161 = 0;
        }
        else
        {
          unint64_t v161 = 0;
        }
      }
    }
  }
  uint64_t v88 = v82 - v56;
  unint64_t v89 = v88 + 1;
  if ((unint64_t)(v88 + 1) >> 61) {
LABEL_318:
  }
    abort();
  if (((char *)v83 - (char *)v56) >> 2 > v89) {
    unint64_t v89 = ((char *)v83 - (char *)v56) >> 2;
  }
  if ((unint64_t)((char *)v83 - (char *)v56) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v90 = v89;
  }
  if (v90)
  {
    if (v90 >> 61) {
LABEL_319:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    uint64_t v91 = operator new(8 * v90);
  }
  else
  {
    uint64_t v91 = 0;
  }
  uint64_t v92 = (uint64_t *)&v91[8 * v88];
  uint64_t *v92 = v87;
  uint64_t v93 = v92 + 1;
  if (v82 == v56) {
    goto LABEL_135;
  }
  unint64_t v94 = (char *)v82 - (char *)v56 - 8;
  if (v94 < 0x168)
  {
    uint64_t v95 = v82;
    goto LABEL_134;
  }
  unint64_t v96 = ((char *)(v82 - 1) - (char *)v56) & 0xFFFFFFFFFFFFFFF8;
  if (&v91[(char *)v82 - (char *)v56 - 8 - v96] > &v91[(char *)v82 - (char *)v56 - 8])
  {
    uint64_t v95 = v82;
  }
  else
  {
    if ((uint64_t *)((char *)v82 - v96 - 8) <= v82 - 1)
    {
      if ((unint64_t)((char *)v56 - v91) < 0x20)
      {
        uint64_t v95 = v82;
        goto LABEL_134;
      }
      uint64_t v97 = (v94 >> 3) + 1;
      uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v95 = &v82[v98 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v92 = (uint64_t *)((char *)v92 - v98);
      uint64_t v99 = &v91[8 * v88 - 16];
      uint64_t v100 = v82 - 2;
      uint64_t v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v102 = *(_OWORD *)v100;
        *(v99 - 1) = *((_OWORD *)v100 - 1);
        *uint64_t v99 = v102;
        v99 -= 2;
        v100 -= 4;
        v101 -= 4;
      }
      while (v101);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_134;
      }
LABEL_135:
      uint64_t v83 = (uint64_t *)&v91[8 * v90];
      if (v56)
      {
        unsigned int v82 = v93;
        operator delete(v56);
        uint64_t v56 = v92;
      }
      else
      {
        uint64_t v56 = v92;
        unsigned int v82 = v93;
      }
      uint64_t v84 = v173;
      uint64_t v80 = v176;
      goto LABEL_109;
    }
    uint64_t v95 = v82;
  }
  do
  {
LABEL_134:
    uint64_t v103 = *--v95;
    *--uint64_t v92 = v103;
  }
  while (v95 != v56);
  goto LABEL_135;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *(void *)(result + 24);
  unsigned int v7 = *(_DWORD *)(result + 40);
  if (v7)
  {
    unsigned int v8 = (v7 - 1) & (37 * a2);
    int v9 = (uint64_t *)(v6 + 48 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -1)
    {
      unsigned int v12 = v8 + v11++;
      unsigned int v8 = v12 & (v7 - 1);
      int v9 = (uint64_t *)(v6 + 48 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_8;
      }
    }
  }
  int v9 = (uint64_t *)(v6 + 48 * v7);
LABEL_8:
  if (v9 == (uint64_t *)(v6 + 48 * v7))
  {
    unint64_t v30 = 0;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, unint64_t *, uint64_t))(**(void **)(result + 2488)
                                                                                     + 32))(*(void *)(result + 2488), a2, &v30, 8);
    if (result)
    {
      int v14 = v30;
      if (v30 > 0x7FF) {
        int v14 = 0;
      }
      if (v14 <= 1023)
      {
        switch(v14)
        {
          case 769:
            *(void *)uint64_t v26 = 0;
            uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, uint64_t))(**(void **)(v4 + 2488)
                                                                                             + 32))(*(void *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0 || *(void *)v26 >= 0x100uLL) {
              goto LABEL_45;
            }
            unint64_t v18 = 16 * *(void *)v26 + 24;
            break;
          case 770:
            *(void *)uint64_t v26 = 0;
            uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, uint64_t))(**(void **)(v4 + 2488)
                                                                                             + 32))(*(void *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0) {
              goto LABEL_45;
            }
            int v19 = 4 * v26[0];
            if ((*(_DWORD *)v26 & 0x2000000) == 0) {
              int v19 = 0;
            }
            int v20 = v19 + 8 * v26[0];
            int v21 = v20 + 24;
            int v22 = ((v20 + 31) & 0x1FFFF8) + 8;
            if ((*(_DWORD *)v26 & 0x8000000) != 0) {
              int v23 = v22;
            }
            else {
              int v23 = v21;
            }
            unint64_t v18 = (v23 + 7) & 0xFFFFF8;
            break;
          case 771:
            *(_DWORD *)uint64_t v26 = 0;
            uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, uint64_t))(**(void **)(v4 + 2488)
                                                                                             + 32))(*(void *)(v4 + 2488), a2 + 8, v26, 4);
            if ((result & 1) == 0) {
              goto LABEL_45;
            }
            int v24 = *(_DWORD *)v26;
            LODWORD(v27) = 0;
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v4 + 2488) + 32))(*(void *)(v4 + 2488), a2 + 12, &v27, 4);
            if ((result & 1) == 0 || v27 >= 0x100) {
              goto LABEL_45;
            }
            uint64_t v25 = 24;
            if ((v24 & 0x40000000) == 0) {
              uint64_t v25 = 16;
            }
            unint64_t v18 = v25 + 8 * v27;
            break;
          case 772:
          case 773:
            goto LABEL_23;
          case 774:
            goto LABEL_24;
          case 775:
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v4 + 2488) + 32))(*(void *)(v4 + 2488), a2 + 8, &v29, 8);
            if ((result & 1) == 0) {
              goto LABEL_45;
            }
            swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(v4, *(void *)(v4 + 2504) & v29, &v27);
            uint64_t result = (uint64_t)v28;
            if (!v28) {
              goto LABEL_45;
            }
            swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v28, (uint64_t)v26);
            unint64_t v18 = 8 * v26[2] + 16;
            break;
          default:
            switch(v14)
            {
              case 512:
              case 513:
              case 514:
                goto LABEL_23;
              case 515:
                int v15 = a3;
                uint64_t v16 = v4;
                uint64_t v17 = a2;
                unint64_t v18 = 32;
                break;
              case 516:
                goto LABEL_24;
              default:
                if (v14) {
                  goto LABEL_17;
                }
                int v15 = a3;
                uint64_t v16 = v4;
                uint64_t v17 = a2;
                unint64_t v18 = 80;
                break;
            }
            return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
        }
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
      }
      else if (v14 == 1024 || v14 == 1280)
      {
LABEL_24:
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
        unint64_t v18 = 24;
      }
      else if (v14 == 1281)
      {
LABEL_23:
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
        unint64_t v18 = 16;
      }
      else
      {
LABEL_17:
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
        unint64_t v18 = 8;
      }
      return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
    }
    else
    {
LABEL_45:
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    uint64_t v13 = v9[1];
    *a3 = a2;
    a3[1] = v13;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2[1];
  if ((swift_reflection_classIsSwiftMask & *(void *)(v7 + 32)) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v17 = 0;
    uint64_t v9 = *a2;
    uint64_t ObjCRODataPtr = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, *a2);
    if (ObjCRODataPtr)
    {
      uint64_t v14 = 0;
      BOOL v11 = !(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), ObjCRODataPtr + 24, &v14, 8)|| v14 == 0;
      if (!v11 && (*(unsigned int (**)(void))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488)))
      {
        uint64_t TypeFromMetadata = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
        if (TypeFromMetadata) {
          goto LABEL_12;
        }
        uint64_t v12 = *(void *)(a1 + 2504) & *(void *)(v7 + 8);
        if (v12)
        {
          uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v12, a4, a3);
LABEL_12:
          uint64_t v14 = v9;
          char v15 = a4;
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v14)[2] = TypeFromMetadata;
          if ((SHIBYTE(v17) & 0x80000000) == 0) {
            return TypeFromMetadata;
          }
LABEL_15:
          operator delete(__p[0]);
          return TypeFromMetadata;
        }
      }
    }
    uint64_t TypeFromMetadata = 0;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      return TypeFromMetadata;
    }
    goto LABEL_15;
  }
  v18[0] = *a2;
  v18[1] = v7;
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata((int32x2_t *)a1, (uint64_t)v18, a3, a4);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v62 = *(void **)a2;
  uint64_t v63 = v8;
  uint64_t v9 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, &v62, a4);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  if (!a4 || v62 == *(void **)a2)
  {
LABEL_28:
    ((void (*)(uint64_t *__return_ptr, int32x2_t *, uint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v60, a1, v10);
    if (v61)
    {
      v53[0] = v60;
      v53[1] = v61;
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>((uint64_t)a1, v53, &v54);
      if (v59)
      {
        if ((*v61 & 0x80) == 0)
        {
          uint64_t BoundGenericType = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)&a1[37], (uint64_t)&v54, 0);
          goto LABEL_38;
        }
        v50[0] = v62;
        v50[1] = v63;
        v49[0] = v60;
        v49[1] = (uint64_t)v61;
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst((uint64_t)a1, v50, v49, a3, (char **)&__p);
        uint64_t v33 = __p;
        unint64_t v34 = v52;
        if (__p == v52)
        {
          uint64_t BoundGenericType = 0;
          uint64_t v35 = __p;
          if (!__p)
          {
LABEL_37:
            if (v33 == v34)
            {
              uint64_t BoundGenericType = 0;
LABEL_48:
              if (v59)
              {
                if (v58 && v56)
                {
                  uint64_t v57 = v56;
                  operator delete(v56);
                }
                if (v55[15] < 0) {
                  operator delete(v54);
                }
              }
              return BoundGenericType;
            }
LABEL_38:
            if (BoundGenericType)
            {
              std::string __p = v62;
              LOBYTE(v52) = a4;
              __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct((unint64_t)a1, (uint64_t)&__p)[2] = BoundGenericType;
              if (a4)
              {
                if (v62 != *(void **)a2)
                {
                  std::string __p = *(void **)a2;
                  LOBYTE(v52) = a4;
                  __int32 v36 = a1[2].i32[0];
                  if (v36)
                  {
                    int32x2_t v37 = *a1;
                    unsigned int v38 = (v36 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&__p, (char *)&v52);
                    uint64_t v39 = *(void *)&v37 + 24 * v38;
                    unint64_t v40 = *(void **)v39;
                    int v41 = *(unsigned __int8 *)(v39 + 8);
                    if (__p == *(void **)v39 && v52 == v41)
                    {
LABEL_44:
                      *(void *)uint64_t v39 = -2;
                      *(unsigned char *)(v39 + 8) = 0;
                      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      int v45 = 1;
                      while (v40 != (void *)-1 || v41)
                      {
                        unsigned int v46 = v38 + v45++;
                        unsigned int v38 = v46 & (v36 - 1);
                        uint64_t v39 = *(void *)&v37 + 24 * v38;
                        unint64_t v40 = *(void **)v39;
                        int v41 = *(unsigned __int8 *)(v39 + 8);
                        if (__p == *(void **)v39 && v52 == v41) {
                          goto LABEL_44;
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_48;
          }
        }
        else
        {
          v48[0] = __p;
          v48[1] = (v52 - (unsigned char *)__p) >> 3;
          uint64_t BoundGenericType = swift::reflection::TypeRefBuilder::createBoundGenericType((uint64_t)&a1[37], (uint64_t)&v54, (size_t)v48);
          uint64_t v35 = __p;
          if (!__p) {
            goto LABEL_37;
          }
        }
        long long v52 = v35;
        operator delete(v35);
        goto LABEL_37;
      }
    }
    return 0;
  }
  uint64_t v54 = v62;
  v55[0] = a4;
  int32x2_t v11 = *a1;
  __int32 v12 = a1[2].i32[0];
  if (!v12)
  {
    unsigned __int32 v23 = 0;
LABEL_18:
    uint64_t v16 = *(void *)&v11 + 24 * v23;
    goto LABEL_19;
  }
  int v13 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
  __int32 v14 = v12 - 1;
  unsigned int v15 = (v12 - 1) & v13;
  uint64_t v16 = *(void *)&v11 + 24 * v15;
  uint64_t v17 = *(void **)v16;
  int v18 = *(unsigned __int8 *)(v16 + 8);
  if (v54 != *(void **)v16 || v55[0] != v18)
  {
    int v20 = 1;
    while (v17 != (void *)-1 || v18)
    {
      unsigned int v21 = v15 + v20++;
      unsigned int v15 = v21 & v14;
      uint64_t v16 = *(void *)&v11 + 24 * v15;
      uint64_t v17 = *(void **)v16;
      int v18 = *(unsigned __int8 *)(v16 + 8);
      if (v54 == *(void **)v16 && v55[0] == v18) {
        goto LABEL_19;
      }
    }
    int32x2_t v11 = *a1;
    unsigned __int32 v23 = a1[2].u32[0];
    goto LABEL_18;
  }
LABEL_19:
  int32x2_t v24 = *a1;
  unsigned __int32 v25 = a1[2].u32[0];
  if (v16 == *(void *)a1 + 24 * v25) {
    goto LABEL_28;
  }
  uint64_t v54 = *(void **)a2;
  v55[0] = a4;
  if (v25)
  {
    unsigned int v26 = (v25 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
    uint64_t v27 = *(void *)&v24 + 24 * v26;
    uint64_t v28 = *(void **)v27;
    int v29 = *(unsigned __int8 *)(v27 + 8);
    if (v54 == *(void **)v27 && v55[0] == v29)
    {
LABEL_26:
      *(void *)uint64_t v27 = -2;
      *(unsigned char *)(v27 + 8) = 0;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v42 = 1;
      while (v28 != (void *)-1 || v29)
      {
        unsigned int v43 = v26 + v42++;
        unsigned int v26 = v43 & (v25 - 1);
        uint64_t v27 = *(void *)&v24 + 24 * v26;
        uint64_t v28 = *(void **)v27;
        int v29 = *(unsigned __int8 *)(v27 + 8);
        if (v54 == *(void **)v27 && v55[0] == v29) {
          goto LABEL_26;
        }
      }
    }
  }
  return *(void *)(v16 + 16);
}

void std::vector<swift::reflection::TypeRef const*>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    abort();
  }
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  uint64_t v6 = (char *)operator new(8 * a2);
  uint64_t v7 = v4 - v2;
  uint64_t v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v9 = v8;
  if (v4 != v2)
  {
    if ((unint64_t)(v7 - 8) < 0x58)
    {
      uint64_t v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        uint64_t v18 = *((void *)v4 - 1);
        v4 -= 8;
        *((void *)v9 - 1) = v18;
        v9 -= 8;
      }
      while (v4 != v2);
      goto LABEL_11;
    }
    uint64_t v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v10 = v7 >> 3;
    unint64_t v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
    uint64_t v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    int v13 = &v4[-v12];
    uint64_t v9 = &v8[-v12];
    __int32 v14 = &v6[8 * v10 - 16];
    unsigned int v15 = (long long *)(v4 - 16);
    uint64_t v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)__int32 v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 4;
    }
    while (v16);
    uint64_t v4 = v13;
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = &v6[v5];
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getExtendedFlags(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x80000000) != 0) {
    return *(unsigned int *)(((a1
  }
                             + 8 * (unsigned __int16)*(void *)(a1 + 8)
                             + 4
                             * ((unsigned __int16)*(void *)(a1 + 8) & (unint64_t)((uint64_t)(*(void *)(a1 + 8) << 38) >> 63))
                             + 31) & 0xFFFFFFFFFFFFFFF8)
                           + 8 * ((v1 >> 27) & 1)
                           + 8 * ((v1 >> 28) & 1));
  else {
    return 0;
  }
}

uint64_t swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::hasThrownError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x80000000) != 0) {
    return *(unsigned char *)(((a1
  }
                      + 8 * (unsigned __int16)*(void *)(a1 + 8)
                      + 4
                      * ((unsigned __int16)*(void *)(a1 + 8) & (unint64_t)((uint64_t)(*(void *)(a1 + 8) << 38) >> 63))
                      + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 8 * ((v1 >> 27) & 1)
                    + 8 * ((v1 >> 28) & 1)) & 1;
  else {
    return 0;
  }
}

uint64_t swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getThrownError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v3 = (unsigned char *)(((a1
                 + 8 * (unsigned __int16)v1
                 + 4 * ((unsigned __int16)v1 & (unint64_t)((uint64_t)(v1 << 38) >> 63))
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 8 * ((v1 >> 27) & 1)
               + 8 * ((v1 >> 28) & 1));
  if (*v3) {
    return *(void *)((unint64_t)&v3[4 * ((v1 >> 31) & 1) + 7] & 0xFFFFFFFFFFFFFFF8);
  }
  else {
    return 0;
  }
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver>(uint64_t a1@<X0>, uint64_t *a2@<X1>, swift::Demangle::__runtime::NodeFactory *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v7 = *a2;
  if (*a2)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCProtocolName(a1, v7 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v21);
    if ((v22 & 0x80u) == 0) {
      uint64_t v10 = v21;
    }
    else {
      uint64_t v10 = (_WORD *)v21[0];
    }
    if ((v22 & 0x80u) == 0) {
      unint64_t v11 = v22;
    }
    else {
      unint64_t v11 = v21[1];
    }
    if (v11 >= 4 && *(_DWORD *)v10 == 1349801055)
    {
      uint64_t v18 = 0;
      unint64_t v13 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a3, v10, v11, v17);
      if (v18 == v17)
      {
        (*(void (**)(void *))(v17[0] + 32))(v17);
        if (v13) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v18) {
          (*(void (**)(void))(*v18 + 40))();
        }
        if (v13)
        {
LABEL_34:
          while (1)
          {
            int v14 = *(unsigned __int16 *)(v13 + 16);
            BOOL v15 = (v14 - 190) > 0x2E || ((1 << (v14 + 66)) & 0x640000000001) == 0;
            if (v15 && v14 != 99) {
              break;
            }
            int v16 = *(unsigned __int8 *)(v13 + 18);
            if (v16 != 1)
            {
              if (v16 != 5 || *(_DWORD *)(v13 + 8) != 1) {
                goto LABEL_44;
              }
              unint64_t v13 = *(void *)v13;
            }
            unint64_t v13 = *(void *)v13;
          }
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::swiftProtocol((swift::Demangle::__runtime *)v13, a5);
          goto LABEL_15;
        }
      }
LABEL_44:
      a5->__r_.__value_.__s.__data_[0] = 0;
      a5[1].__r_.__value_.__s.__data_[8] = 0;
    }
    else
    {
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::objcProtocol(v10, v11, a5);
    }
LABEL_15:
    if (((char)v22 & 0x80000000) == 0) {
      return;
    }
    uint64_t v12 = (void *)v21[0];
    goto LABEL_28;
  }
  DemanglingForContextDescriptor = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(a1, v7 & *(void *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, a3);
  if (!DemanglingForContextDescriptor)
  {
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[8] = 0;
    return;
  }
  swift::Demangle::__runtime::mangleNode(DemanglingForContextDescriptor, v9);
  if (LODWORD(v21[0]))
  {
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[8] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_27;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  *a5 = v20;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_27:
    uint64_t v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v12);
  }
}

void **std::vector<std::optional<std::pair<std::string,BOOL>>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((unsigned char *)v3 - 8) && *((char *)v3 - 17) < 0) {
          operator delete(*(v3 - 5));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2)
  {
LABEL_17:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  uint64_t v5 = result;
  uint64_t v7 = result + 72;
  uint64_t v6 = *(void *)(result + 72);
  unsigned int v8 = *(_DWORD *)(result + 88);
  if (v8)
  {
    unsigned int v9 = (v8 - 1) & (37 * a2);
    uint64_t v10 = (uint64_t *)(v6 + 48 * v9);
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_9;
    }
    int v12 = 1;
    while (v11 != -1)
    {
      unsigned int v13 = v9 + v12++;
      unsigned int v9 = v13 & (v8 - 1);
      uint64_t v10 = (uint64_t *)(v6 + 48 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v10 = (uint64_t *)(v6 + 48 * v8);
LABEL_9:
  if (v10 != (uint64_t *)(v6 + 48 * v8))
  {
    uint64_t v14 = v10[1];
    *a3 = a2;
    a3[1] = v14;
    return result;
  }
  int v37 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, int *, uint64_t))(**(void **)(result + 2488) + 32))(*(void *)(result + 2488), a2, &v37, 4);
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
  HIWORD(v30) = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v5 + 2488) + 32))(*(void *)(v5 + 2488), a2 + 4, &v30, 8);
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v5 + 2488) + 24))(&v34);
  uint64_t v15 = v34;
  if (!v34)
  {
    *a3 = 0;
    a3[1] = 0;
    uint64_t v34 = 0;
    goto LABEL_45;
  }
  uint64_t v34 = 0;
  uint64_t v30 = a2;
  uint64_t v31 = v15;
  if (v36)
  {
    if (v36 == v35)
    {
      uint64_t v33 = v32;
      (*(void (**)(void))(*v36 + 24))();
    }
    else
    {
      uint64_t v33 = v36;
      __int32 v36 = 0;
    }
  }
  else
  {
    uint64_t v33 = 0;
  }
  int v16 = *(_DWORD *)(v5 + 88);
  if (v16)
  {
    uint64_t v17 = *(void *)(v5 + 72);
    int v18 = v16 - 1;
    unsigned int v19 = (37 * v30) & v18;
    std::string v20 = (void *)(v17 + 48 * v19);
    uint64_t v21 = *v20;
    if (v30 == *v20) {
      goto LABEL_35;
    }
    unsigned __int8 v22 = 0;
    int v23 = 1;
    while (v21 != -1)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -2;
      }
      if (v24) {
        unsigned __int8 v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      std::string v20 = (void *)(v17 + 48 * v19);
      uint64_t v21 = *v20;
      if (v30 == *v20) {
        goto LABEL_35;
      }
    }
    if (v22) {
      unsigned int v26 = v22;
    }
    else {
      unsigned int v26 = v20;
    }
  }
  else
  {
    unsigned int v26 = 0;
  }
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(v7, v26, &v30, &v31);
LABEL_35:
  uint64_t v27 = v31;
  uint64_t v31 = 0;
  if (v27)
  {
    uint64_t v38 = v27;
    if (!v33) {
      goto LABEL_52;
    }
    (*(void (**)(void *, uint64_t *))(*v33 + 48))(v33, &v38);
  }
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  *a3 = a2;
  a3[1] = v15;
  uint64_t v28 = v34;
  uint64_t v34 = 0;
  if (!v28) {
    goto LABEL_45;
  }
  uint64_t v30 = v28;
  if (!v36)
  {
LABEL_52:
    uint64_t v29 = std::__throw_bad_function_call[abi:nn180100]();
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(v29);
  }
  (*(void (**)(void *, uint64_t *))(*v36 + 48))(v36, &v30);
LABEL_45:
  uint64_t result = (uint64_t)v36;
  if (v36 == v35) {
    return (*(uint64_t (**)(void *))(v35[0] + 32))(v35);
  }
  if (v36) {
    return (*(uint64_t (**)(void))(*v36 + 40))();
  }
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a4;
  uint64_t v5 = *a3;
  uint64_t v123 = a1;
  if (!*a3)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    int v29 = a3[1];
    if (!a3[1]) {
      goto LABEL_179;
    }
    goto LABEL_32;
  }
  uint64_t v126 = a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 296;
  do
  {
    uint64_t v11 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(v10, 0, v9);
    if (!v11)
    {
      *(_WORD *)(v4 + 16) = 1;
      *(void *)uint64_t v4 = "Failed to read generic parameter type in runtime generic signature.";
      *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      goto LABEL_184;
    }
    uint64_t v12 = v11;
    if (v7 < v8)
    {
      *(void *)uint64_t v7 = v11;
      goto LABEL_4;
    }
    uint64_t v13 = (v7 - v6) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
LABEL_189:
    }
      abort();
    if ((v8 - v6) >> 2 > v14) {
      unint64_t v14 = (v8 - v6) >> 2;
    }
    if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
LABEL_190:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      int v16 = operator new(8 * v15);
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v17 = (uint64_t *)&v16[8 * v13];
    *uint64_t v17 = v12;
    int v18 = (char *)v17;
    if (v7 != v6)
    {
      unint64_t v19 = v7 - v6 - 8;
      if (v19 < 0x168
        || (unint64_t v22 = (v7 - 8 - v6) & 0xFFFFFFFFFFFFFFF8, &v16[v7 - v6 - 8 - v22] > &v16[v7 - v6 - 8])
        || &v7[-v22 - 8] > v7 - 8
        || (unint64_t)(v6 - v16) < 0x20)
      {
        std::string v20 = v7;
        int v18 = &v16[8 * v13];
      }
      else
      {
        uint64_t v23 = (v19 >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        std::string v20 = &v7[-v24];
        int v18 = (char *)&v17[v24 / 0xFFFFFFFFFFFFFFF8];
        unsigned int v25 = &v16[8 * v13 - 16];
        unsigned int v26 = v7 - 16;
        uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unsigned int v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_21;
        }
      }
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v21;
        v18 -= 8;
      }
      while (v20 != v6);
    }
LABEL_21:
    unsigned int v8 = &v16[8 * v15];
    if (v6) {
      operator delete(v6);
    }
    uint64_t v6 = v18;
    uint64_t v7 = (char *)v17;
    uint64_t v4 = a4;
LABEL_4:
    v7 += 8;
    ++v9;
  }
  while (v9 != v5);
  a1 = v123;
  a3 = v126;
  int v29 = v126[1];
  if (!v126[1])
  {
LABEL_179:
    uint64_t v122 = 0;
LABEL_180:
    uint64_t v105 = (v7 - v6) >> 3;
    std::string::size_type v106 = v122;
    uint64_t GenericSignature = swift::reflection::TypeRefBuilder::createGenericSignature(v123 + 296, (uint64_t *)v6, v105);
    *(_WORD *)(v4 + 16) = 0;
    *(void *)uint64_t v4 = GenericSignature;
    if (!GenericSignature)
    {
      *(void *)uint64_t v4 = "unknown error";
      *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(v4 + 16) = 1;
    }
    if (!v122) {
      goto LABEL_184;
    }
LABEL_183:
    operator delete(v106);
    goto LABEL_184;
  }
LABEL_32:
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  uint64_t v30 = (_DWORD *)*((void *)a3 + 2);
  uint64_t v127 = &v30[3 * v29];
  uint64_t v124 = a1 + 296;
  unint64_t v116 = 0;
  while (2)
  {
    if ((*v30 & 0x1Fu) < 6 || (*v30 & 0x1F) == 31)
    {
      v174[1] = 0;
      v174[2] = 0;
      uint64_t v175 = 0;
      uint64_t v176 = 2400;
      uint64_t v177 = 0;
      char v178 = 0;
      v174[0] = off_C9440;
      int v213 = 0;
      uint64_t v180 = 0;
      uint64_t v181 = 0;
      uint64_t v179 = 0;
      char v182 = 0;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      long long v206 = 0u;
      long long v207 = 0u;
      long long v208 = 0u;
      long long v209 = 0u;
      long long v210 = 0u;
      int v211 = 0;
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[1] + 4, (const char *)a2);
      unsigned int v173 = 0;
      unint64_t v34 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v174, (uint64_t)SymbolicMangledNameStringRef, v33, v172);
      if (v173 == v172)
      {
        (*(void (**)(void *))(v172[0] + 32))(v172);
        if (!v34) {
          goto LABEL_55;
        }
      }
      else
      {
        if (v173) {
          (*(void (**)(void))(*v173 + 40))();
        }
        if (!v34) {
          goto LABEL_55;
        }
      }
      uint64_t v214 = v124;
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v214, (swift::Demangle::__runtime::Node *)v34, 0, &v130);
      if ((_WORD)v132)
      {
        if ((unsigned __int16)v132 == 1) {
          v131(v130, 3, 0);
        }
      }
      else if (v130)
      {
        switch(*v30 & 0x1F)
        {
          case 0:
            uint64_t v131 = 0;
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 2400;
            uint64_t v135 = 0;
            char v136 = 0;
            uint64_t v110 = v130;
            uint64_t v130 = off_C9440;
            unint64_t v171 = 0;
            uint64_t v138 = 0;
            uint64_t v139 = 0;
            uint64_t v137 = 0;
            char v140 = 0;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            int v169 = 0;
            uint64_t v36 = (uint64_t)v30 + *(void *)a2 - *(void *)(a2 + 8) + 8;
            LODWORD(v218[0]) = 0;
            int v37 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v123 + 2488) + 32))(*(void *)(v123 + 2488), v36, v218, 4);
            unint64_t v38 = 0;
            if (!v37) {
              goto LABEL_110;
            }
            uint64_t v39 = SLODWORD(v218[0]);
            LODWORD(v218[0]) &= 0xFFFFFFFC;
            uint64_t v40 = v36 + (v39 & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v214 = v40;
            if ((v39 & 1) == 0) {
              goto LABEL_53;
            }
            if ((*(unsigned int (**)(void))(**(void **)(v123 + 2488) + 32))(*(void *)(v123 + 2488)))
            {
              uint64_t v40 = v214;
LABEL_53:
              unint64_t v38 = v40 | ((unint64_t)v39 >> 1) & 1;
            }
            else
            {
              unint64_t v38 = 0;
            }
            uint64_t v4 = a4;
LABEL_110:
            uint64_t v214 = v38;
            uint64_t v80 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver>(v123, &v214, (swift::Demangle::__runtime::NodeFactory *)&v130, v124);
            unint64_t v34 = v80;
            if (v80)
            {
              unint64_t v81 = (unint64_t)v110 & 0xFFFFFFFFFFFFFFF8;
              if (v121 >= (unint64_t *)v116)
              {
                uint64_t v82 = ((char *)v121 - (char *)v122) >> 4;
                unint64_t v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 60) {
                  goto LABEL_189;
                }
                if ((v116 - (char *)v122) >> 3 > v83) {
                  unint64_t v83 = (v116 - (char *)v122) >> 3;
                }
                unint64_t v84 = 0xFFFFFFFFFFFFFFFLL;
                if ((unint64_t)(v116 - (char *)v122) < 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v84 = v83;
                }
                unint64_t v119 = v84;
                if (v84)
                {
                  unint64_t v115 = v80;
                  if (v84 >> 60) {
                    goto LABEL_190;
                  }
                  unint64_t v85 = v81;
                  uint64_t v86 = (char *)operator new(16 * v84);
                  unint64_t v81 = v85;
                  unint64_t v34 = v115;
                }
                else
                {
                  uint64_t v86 = 0;
                }
                uint64_t v87 = (unint64_t *)&v86[16 * v82];
                *uint64_t v87 = v81;
                v87[1] = v34;
                if (v121 == v122)
                {
                  uint64_t v92 = &v86[16 * v82];
                  unint64_t v89 = v122;
                  unint64_t v91 = v119;
                }
                else
                {
                  uint64_t v88 = &v86[16 * v82];
                  unint64_t v90 = v121;
                  unint64_t v89 = v122;
                  unint64_t v91 = v119;
                  do
                  {
                    uint64_t v92 = v88 - 16;
                    *((_OWORD *)v88 - 1) = *((_OWORD *)v90 - 1);
                    v90 -= 2;
                    v88 -= 16;
                  }
                  while (v90 != v122);
                }
                unint64_t v116 = &v86[16 * v91];
                uint64_t v121 = v87 + 2;
                if (v89) {
                  operator delete(v89);
                }
                uint64_t v122 = (unint64_t *)v92;
                uint64_t v4 = a4;
              }
              else
              {
                unint64_t *v121 = v81;
                v121[1] = v80;
                v121 += 2;
              }
            }
            else
            {
              *(_WORD *)(v4 + 16) = 1;
              *(void *)uint64_t v4 = "Failed to read protocol type in conformance requirement of runtime generic signature.";
              *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            uint64_t v130 = off_C9440;
            if (v171 == v170)
            {
              (*(void (**)(void *))(v170[0] + 32))(v170);
            }
            else if (v171)
            {
              (*(void (**)(void))(*v171 + 40))();
            }
            uint64_t v130 = off_C9418;
            swift::Demangle::__runtime::NodeFactory::freeSlabs(v133);
            if (v135) {
              *(unsigned char *)(v135 + 48) = 0;
            }
            if (v34) {
LABEL_176:
            }
              LOBYTE(v34) = 1;
            break;
          case 1:
            uint64_t v131 = 0;
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 2400;
            uint64_t v135 = 0;
            char v136 = 0;
            uint64_t v111 = v130;
            uint64_t v130 = off_C9440;
            unint64_t v171 = 0;
            uint64_t v138 = 0;
            uint64_t v139 = 0;
            uint64_t v137 = 0;
            char v140 = 0;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            int v169 = 0;
            int v42 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v35);
            unint64_t v44 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v43);
            v129[0] = v42;
            v129[1] = v44;
            LOBYTE(v218[0]) = 0;
            unsigned int v46 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v44, v45);
            uint64_t v48 = v47;
            unint64_t v49 = (uint64_t *)operator new(0x28uLL);
            *unint64_t v49 = (uint64_t)off_C8468;
            v49[1] = (uint64_t)v129;
            uint64_t v49[2] = v123;
            void v49[3] = (uint64_t)v218;
            v49[4] = (uint64_t)&v130;
            uint64_t v217 = v49;
            unint64_t v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v130, (uint64_t)v46, v48, &v214);
            if (v217 == &v214)
            {
              (*(void (**)(uint64_t *))(v214 + 32))(&v214);
            }
            else if (v217)
            {
              (*(void (**)(void))(*v217 + 40))();
            }
            v218[0] = v124;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v218, v50, 0, &v214);
            int v60 = v216;
            uint64_t v4 = a4;
            if (v216 == 1)
            {
              *(_WORD *)(a4 + 16) = 1;
              uint64_t v61 = v214;
              uint64_t v62 = v215;
              *(void *)(a4 + 8) = v215;
              *(void *)a4 = v62(v61, 2, 0);
            }
            else
            {
              if (v216) {
                uint64_t v63 = 0;
              }
              else {
                uint64_t v63 = v214;
              }
              unint64_t v64 = (unint64_t)v111 & 0xFFFFFFFFFFFFFFF8 | 2;
              if (v121 >= (unint64_t *)v116)
              {
                uint64_t v70 = ((char *)v121 - (char *)v122) >> 4;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 60) {
                  goto LABEL_189;
                }
                if ((v116 - (char *)v122) >> 3 > v71) {
                  unint64_t v71 = (v116 - (char *)v122) >> 3;
                }
                unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
                if ((unint64_t)(v116 - (char *)v122) < 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v72 = v71;
                }
                unint64_t v117 = v72;
                if (v72)
                {
                  unint64_t v108 = (unint64_t)v111 & 0xFFFFFFFFFFFFFFF8 | 2;
                  int v113 = v216;
                  if (v72 >> 60) {
                    goto LABEL_190;
                  }
                  uint64_t v73 = v63;
                  BOOL v74 = (char *)operator new(16 * v72);
                  uint64_t v63 = v73;
                  int v60 = v113;
                  unint64_t v64 = v108;
                }
                else
                {
                  BOOL v74 = 0;
                }
                uint64_t v93 = (unint64_t *)&v74[16 * v70];
                unint64_t *v93 = v64;
                v93[1] = v63;
                if (v121 == v122)
                {
                  uint64_t v98 = &v74[16 * v70];
                  uint64_t v95 = v122;
                  unint64_t v97 = v117;
                }
                else
                {
                  unint64_t v94 = &v74[16 * v70];
                  unint64_t v96 = v121;
                  uint64_t v95 = v122;
                  unint64_t v97 = v117;
                  do
                  {
                    uint64_t v98 = v94 - 16;
                    *((_OWORD *)v94 - 1) = *((_OWORD *)v96 - 1);
                    v96 -= 2;
                    v94 -= 16;
                  }
                  while (v96 != v122);
                }
                unint64_t v116 = &v74[16 * v97];
                uint64_t v121 = v93 + 2;
                if (v95) {
                  operator delete(v95);
                }
                uint64_t v122 = (unint64_t *)v98;
                uint64_t v4 = a4;
              }
              else
              {
                unint64_t *v121 = v64;
                v121[1] = v63;
                v121 += 2;
              }
            }
            if (v216 == 1) {
              v215(v214, 3, 0);
            }
            uint64_t v130 = off_C9440;
            if (v171 == v170)
            {
              (*(void (**)(void *))(v170[0] + 32))(v170);
            }
            else if (v171)
            {
              (*(void (**)(void))(*v171 + 40))();
            }
            uint64_t v130 = off_C9418;
            swift::Demangle::__runtime::NodeFactory::freeSlabs(v133);
            if (v135) {
              *(unsigned char *)(v135 + 48) = 0;
            }
            if (v60 == 1) {
              goto LABEL_162;
            }
            goto LABEL_176;
          case 2:
            uint64_t v131 = 0;
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 2400;
            uint64_t v135 = 0;
            char v136 = 0;
            uint64_t v112 = v130;
            uint64_t v130 = off_C9440;
            unint64_t v171 = 0;
            uint64_t v138 = 0;
            uint64_t v139 = 0;
            uint64_t v137 = 0;
            char v140 = 0;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            int v169 = 0;
            uint64_t v51 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v35);
            uint64_t v53 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v52);
            v128[0] = v51;
            v128[1] = v53;
            LOBYTE(v218[0]) = 0;
            uint64_t v55 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v53, v54);
            uint64_t v57 = v56;
            char v58 = (uint64_t *)operator new(0x28uLL);
            *char v58 = (uint64_t)off_C8468;
            v58[1] = (uint64_t)v128;
            v58[2] = v123;
            void v58[3] = (uint64_t)v218;
            v58[4] = (uint64_t)&v130;
            uint64_t v217 = v58;
            char v59 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v130, (uint64_t)v55, v57, &v214);
            if (v217 == &v214)
            {
              (*(void (**)(uint64_t *))(v214 + 32))(&v214);
            }
            else if (v217)
            {
              (*(void (**)(uint64_t *))(*v217 + 40))(v217);
            }
            v218[0] = v124;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v218, v59, 0, &v214);
            int v65 = v216;
            uint64_t v4 = a4;
            if (v216 == 1)
            {
              *(_WORD *)(a4 + 16) = 1;
              uint64_t v66 = v214;
              unint64_t v67 = v215;
              *(void *)(a4 + 8) = v215;
              *(void *)a4 = v67(v66, 2, 0);
            }
            else
            {
              if (v216) {
                uint64_t v68 = 0;
              }
              else {
                uint64_t v68 = v214;
              }
              unint64_t v69 = (unint64_t)v112 & 0xFFFFFFFFFFFFFFF8 | 1;
              if (v121 >= (unint64_t *)v116)
              {
                uint64_t v75 = ((char *)v121 - (char *)v122) >> 4;
                unint64_t v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 60) {
                  goto LABEL_189;
                }
                if ((v116 - (char *)v122) >> 3 > v76) {
                  unint64_t v76 = (v116 - (char *)v122) >> 3;
                }
                unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
                if ((unint64_t)(v116 - (char *)v122) < 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v77 = v76;
                }
                unint64_t v118 = v77;
                if (v77)
                {
                  unint64_t v109 = (unint64_t)v112 & 0xFFFFFFFFFFFFFFF8 | 1;
                  int v114 = v216;
                  if (v77 >> 60) {
                    goto LABEL_190;
                  }
                  uint64_t v78 = v68;
                  unint64_t v79 = (char *)operator new(16 * v77);
                  uint64_t v68 = v78;
                  int v65 = v114;
                  unint64_t v69 = v109;
                }
                else
                {
                  unint64_t v79 = 0;
                }
                uint64_t v99 = (unint64_t *)&v79[16 * v75];
                *uint64_t v99 = v69;
                v99[1] = v68;
                if (v121 == v122)
                {
                  uint64_t v104 = &v79[16 * v75];
                  uint64_t v101 = v122;
                  unint64_t v103 = v118;
                }
                else
                {
                  uint64_t v100 = &v79[16 * v75];
                  long long v102 = v121;
                  uint64_t v101 = v122;
                  unint64_t v103 = v118;
                  do
                  {
                    uint64_t v104 = v100 - 16;
                    *((_OWORD *)v100 - 1) = *((_OWORD *)v102 - 1);
                    v102 -= 2;
                    v100 -= 16;
                  }
                  while (v102 != v122);
                }
                unint64_t v116 = &v79[16 * v103];
                uint64_t v121 = v99 + 2;
                if (v101) {
                  operator delete(v101);
                }
                uint64_t v122 = (unint64_t *)v104;
                uint64_t v4 = a4;
              }
              else
              {
                unint64_t *v121 = v69;
                v121[1] = v68;
                v121 += 2;
              }
            }
            if (v216 == 1) {
              v215(v214, 3, 0);
            }
            uint64_t v130 = off_C9440;
            if (v171 == v170)
            {
              (*(void (**)(void *))(v170[0] + 32))(v170);
            }
            else if (v171)
            {
              (*(void (**)(void))(*v171 + 40))();
            }
            uint64_t v130 = off_C9418;
            swift::Demangle::__runtime::NodeFactory::freeSlabs(v133);
            if (v135) {
              *(unsigned char *)(v135 + 48) = 0;
            }
            if (v65 != 1) {
              goto LABEL_176;
            }
LABEL_162:
            LOBYTE(v34) = 0;
            goto LABEL_57;
          case 3:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v41 = "Unexpected same conformance requirement in runtime generic signature";
            goto LABEL_56;
          case 4:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v41 = "Unexpected same-shape requirement in runtime generic signature";
            goto LABEL_56;
          case 5:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v41 = "Unexpected invertible protocol in runtime generic signature";
            goto LABEL_56;
          case 0x1F:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v41 = "Unexpected layout requirement in runtime generic signature";
            goto LABEL_56;
          default:
            goto LABEL_176;
        }
        goto LABEL_57;
      }
      LOBYTE(v34) = 0;
LABEL_55:
      *(_WORD *)(v4 + 16) = 1;
      *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      int v41 = "Failed to read subject type in requirement of runtime generic signature.";
LABEL_56:
      *(void *)uint64_t v4 = v41;
LABEL_57:
      v174[0] = off_C9440;
      if (v213 == v212)
      {
        (*(void (**)(void *))(v212[0] + 32))(v212);
      }
      else if (v213)
      {
        (*(void (**)(void))(*v213 + 40))();
      }
      v174[0] = off_C9418;
      swift::Demangle::__runtime::NodeFactory::freeSlabs(v175);
      if (v177) {
        *(unsigned char *)(v177 + 48) = 0;
      }
      if ((v34 & 1) == 0) {
        goto LABEL_187;
      }
      v30 += 3;
      if (v30 == v127) {
        goto LABEL_180;
      }
      continue;
    }
    break;
  }
  *(_WORD *)(v4 + 16) = 1;
  *(void *)uint64_t v4 = "unknown kind";
  *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_187:
  std::string::size_type v106 = v122;
  if (v122) {
    goto LABEL_183;
  }
LABEL_184:
  if (v6) {
    operator delete(v6);
  }
}

unsigned int *swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *result;
  if ((v2 & 0x100) == 0)
  {
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
  uint64_t v3 = result + 4;
  if ((v2 & 0x1000) != 0)
  {
    uint64_t v4 = (char *)&swift::externalTargetImplicitGenericParamDescriptors(void)::buffer;
    if ((v2 & 0x800) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (char *)((((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
                + 4 * ((v2 >> 9) & 1)
                + 4 * ((v2 >> 10) & 1));
    if ((v2 & 0x800) == 0)
    {
      v4 += *((unsigned __int16 *)result + 4);
LABEL_7:
      uint64_t v5 = *((unsigned __int16 *)result + 4);
      int v6 = 1;
      goto LABEL_9;
    }
  }
  int v6 = 0;
  uint64_t v5 = 0;
LABEL_9:
  int v7 = *result & 0x1100;
  if (v7 == 256) {
    uint64_t v8 = *(unsigned __int16 *)v3;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
     + 4 * ((v2 >> 9) & 1)
     + 4 * ((v2 >> 10) & 1);
  unint64_t v10 = ((v9 + v8 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * *((unsigned __int16 *)result + 5);
  if ((v2 & 0x2000) != 0)
  {
    if (v6)
    {
      uint64_t v13 = *((unsigned __int16 *)result + 4);
      if (v7 != 256)
      {
LABEL_16:
        uint64_t v14 = 0;
LABEL_19:
        unint64_t v15 = (v9 + v14 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unsigned int v16 = *((unsigned __int16 *)result + 9) + *((unsigned __int16 *)result + 5);
        if (v6) {
          uint64_t v17 = *((unsigned __int16 *)result + 4);
        }
        else {
          uint64_t v17 = 0;
        }
        int v11 = *(_DWORD *)(v15 + 12 * v16);
        if (v7 == 256) {
          uint64_t v18 = *(unsigned __int16 *)v3;
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v12 = ((v9 + v18 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v16 + 4 * ((v2 >> 13) & 1);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if (v7 != 256) {
        goto LABEL_16;
      }
    }
    uint64_t v14 = *(unsigned __int16 *)v3;
    goto LABEL_19;
  }
  int v11 = 0;
  unint64_t v12 = 0;
LABEL_26:
  *(void *)a2 = *v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  return result;
}

void swift::reflection::TypeRefBuilder::createSubstitutionMap(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = v6 - *a1;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (a3 == v7 >> 3 && v6 != v5)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = 8 * v12;
      uint64_t v14 = *(void *)(a2 + v13);
      uint64_t v17 = *(void *)(*(void *)(*a1 + v13) + 12);
      uint64_t v18 = 0;
      char v15 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a4, (int *)&v17, &v18);
      unsigned int v16 = v18;
      if ((v15 & 1) == 0)
      {
        unsigned int v16 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>(a4, (uint64_t)&v17, (int *)&v17, v18);
        *(void *)unsigned int v16 = v17;
        *((void *)v16 + 1) = 0;
      }
      *((void *)v16 + 1) = v14;
      ++v12;
    }
    while (a3 != v12);
  }
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCClassName(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, a2);
  if (result)
  {
    uint64_t v5 = 0;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), result + 24, &v5, 8))
    {
      BOOL v4 = v5 == 0;
    }
    else
    {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488));
    }
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(uint64_t a1, void *a2, int a3)
{
  uint64_t result = 0;
  uint64_t v5 = (uint64_t *)a2[1];
  uint64_t v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF) {
    LODWORD(v6) = 0;
  }
  if ((int)v6 > 514)
  {
    if (v6 != 515 && v6 != 516) {
      return result;
    }
    return *(void *)(a1 + 2504) & v5[1];
  }
  if ((v6 - 512) < 3) {
    return *(void *)(a1 + 2504) & v5[1];
  }
  if (!v6)
  {
    if ((swift_reflection_classIsSwiftMask & v5[4]) != 0)
    {
      do
      {
        uint64_t v9 = *(void *)(a1 + 2504);
        uint64_t result = v9 & v5[8];
        if (result || a3 == 0) {
          break;
        }
        uint64_t v11 = v5[1] & v9;
        if (!v11) {
          return 0;
        }
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v11, &v13);
        uint64_t v5 = v14;
        if (!v14) {
          return 0;
        }
        if ((unint64_t)*v14 <= 0x7FF && *v14 != 0) {
          return 0;
        }
        uint64_t result = 0;
        *a2 = v13;
        a2[1] = v5;
      }
      while ((swift_reflection_classIsSwiftMask & v5[4]) != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(void *a1, char *a2)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v6;
      a2 = v7;
      a1 = v8;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v12 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v9[0] = v2;
  uint64_t v13 = 0;
  uint64_t v3 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>((uint64_t)v9, &v13, (unsigned char *)v9 + 8, (unint64_t)v10, *a2);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v9, v13, v3, (char *)v10);
}

unint64_t *__swift::__runtime::llvm::hashing::detail::hash_state::mix(unint64_t *this, const char *a2)
{
  unint64_t v2 = this[1];
  unint64_t v4 = this[2];
  unint64_t v3 = this[3];
  unint64_t v5 = 0xB492B66FBE98F273 * __ROR8__(v2 + *this + v3 + *((void *)a2 + 1), 37);
  *this = v5;
  unint64_t v6 = this[4];
  unint64_t v7 = this[5];
  uint64_t v8 = __ROR8__(v6 + v2 + *((void *)a2 + 6), 42);
  unint64_t v9 = this[6];
  unint64_t v10 = v9 ^ v5;
  *this = v10;
  this[1] = 0xB492B66FBE98F273 * v8;
  unint64_t v11 = 0xB492B66FBE98F273 * v8 + v3 + *((void *)a2 + 5);
  unint64_t v12 = 0xB492B66FBE98F273 * __ROR8__(v7 + v4, 33);
  this[1] = v11;
  this[2] = v12;
  this[3] = 0xB492B66FBE98F273 * v6;
  this[4] = v7 + v10;
  uint64_t v13 = *(void *)a2 - 0x4B6D499041670D8DLL * v6;
  this[3] = v13;
  uint64_t v14 = *((void *)a2 + 3);
  unint64_t v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  this[4] = v15;
  uint64_t v16 = __ROR8__(*((void *)a2 + 1) + *((void *)a2 + 2) + v13, 44);
  this[3] = *((void *)a2 + 1) + *((void *)a2 + 2) + v13 + v14;
  this[4] = v15 + v13 + v16;
  this[5] = v12 + v9;
  unint64_t v17 = *((void *)a2 + 2) + v11;
  this[6] = v17;
  unint64_t v18 = *((void *)a2 + 4) + v12 + v9;
  this[5] = v18;
  uint64_t v19 = *((void *)a2 + 7);
  unint64_t v20 = __ROR8__(v18 + v19 + v17, 21);
  this[6] = v20;
  unint64_t v21 = v20 + v18 + __ROR8__(*((void *)a2 + 5) + *((void *)a2 + 6) + v18, 44);
  this[5] = *((void *)a2 + 5) + *((void *)a2 + 6) + v18 + v19;
  this[6] = v21;
  this[2] = v10;
  *this = v12;
  return this;
}

unsigned char *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(uint64_t a1, uint64_t *a2, unsigned char *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    void *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v10 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v10 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v20 = 0x9DDFEA08EB382D69
          * (v10 ^ (((0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v12 ^ (0xB492B66FBE98F273 * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273 * __ROR8__(v12 - 0x622015F714C7D297 * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057 * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273 * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64;
    }
    *a2 = v9;
    if (a1 + 1 - v8 <= a4)
    {
      memcpy((void *)a1, &__src + v8, 1 - v8);
      a1 += 1 - v8;
    }
  }
  return (unsigned char *)a1;
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine(__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  if (a2)
  {
    if (this == (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)__src || __src == a4) {
      goto LABEL_47;
    }
    if ((char *)this + 1 == __src)
    {
      char v20 = *(unsigned char *)this;
      uint64_t v21 = a4 - __src;
      memmove(this, __src, a4 - __src);
      *((unsigned char *)this + v21) = v20;
LABEL_47:
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)this + 8, (const char *)this);
      unint64_t v49 = 0x9DDFEA08EB382D69
          * (*((void *)this + 13) ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 13) ^ *((void *)this + 11))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((void *)this + 13) ^ *((void *)this + 11))));
      uint64_t v50 = *((void *)this + 14);
      unint64_t v51 = *((void *)this + 8)
          - 0x4B6D499041670D8DLL * ((__src - (char *)this + a2) ^ ((unint64_t)(__src - (char *)this + a2) >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ *((void *)this + 12))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                      * (v50 ^ *((void *)this + 12))))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ *((void *)this + 12))) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ *((void *)this + 12))))) >> 47));
      unint64_t v52 = 0x9DDFEA08EB382D69
          * (v51 ^ (*((void *)this + 10)
                  - 0x4B6D499041670D8DLL * (*((void *)this + 9) ^ (*((void *)this + 9) >> 47))
                  - 0x622015F714C7D297 * (v49 ^ (v49 >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v51 ^ (v52 >> 47) ^ v52)) ^ ((0x9DDFEA08EB382D69 * (v51 ^ (v52 >> 47) ^ v52)) >> 47));
    }
    if (__src + 1 == a4)
    {
      char v22 = *(a4 - 1);
      if (a4 - 1 != (char *)this) {
        memmove((char *)this + 1, this, a4 - 1 - (char *)this);
      }
      *(unsigned char *)this = v22;
      goto LABEL_47;
    }
    uint64_t v7 = __src - (char *)this;
    uint64_t v8 = a4 - __src;
    if (__src - (char *)this != a4 - __src)
    {
      uint64_t v23 = __src - (char *)this;
      do
      {
        uint64_t v24 = v23;
        uint64_t v23 = v8;
        uint64_t v8 = v24 % v8;
      }
      while (v8);
      if (v23)
      {
        uint64_t v25 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v23);
        do
        {
          char v27 = *((unsigned char *)v25 - 1);
          uint64_t v25 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v25 - 1);
          char v26 = v27;
          unint64_t v28 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v25 + v7);
          int v29 = v25;
          do
          {
            uint64_t v30 = v29;
            int v29 = v28;
            *(unsigned char *)uint64_t v30 = *(unsigned char *)v28;
            uint64_t v31 = (char *)(a4 - (char *)v28);
            BOOL v32 = __OFSUB__(v7, v31);
            uint64_t v34 = v7 - (void)v31;
            char v33 = (v34 < 0) ^ v32;
            unint64_t v28 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v34);
            if (v33) {
              unint64_t v28 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v29 + v7);
            }
          }
          while (v28 != v25);
          *(unsigned char *)int v29 = v26;
        }
        while (v25 != this);
      }
      goto LABEL_47;
    }
    uint64_t v9 = &a4[~(unint64_t)__src];
    unint64_t v10 = &__src[~(unint64_t)this];
    if (v9 >= v10) {
      uint64_t v11 = &__src[~(unint64_t)this];
    }
    else {
      uint64_t v11 = &a4[~(unint64_t)__src];
    }
    unint64_t v12 = (unint64_t)(v11 + 1);
    uint64_t v13 = __src;
    uint64_t v14 = this;
    if (v12 >= 8)
    {
      if (v9 >= v10) {
        uint64_t v9 = &__src[~(unint64_t)this];
      }
      uint64_t v15 = v9 + 1;
      if (&v15[(void)__src] <= (char *)this || (uint64_t v13 = __src, v14 = this, &v15[(void)this] <= __src))
      {
        if (v12 >= 0x20)
        {
          unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v35 = (long long *)((char *)this + 16);
          uint64_t v36 = __src + 16;
          unint64_t v37 = v12 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v38 = *(v35 - 1);
            long long v39 = *v35;
            long long v40 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            long long *v35 = v40;
            *((_OWORD *)v36 - 1) = v38;
            *(_OWORD *)uint64_t v36 = v39;
            v35 += 2;
            v36 += 32;
            v37 -= 32;
          }
          while (v37);
          if (v12 == v16) {
            goto LABEL_47;
          }
          if ((v12 & 0x18) == 0)
          {
            uint64_t v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v16);
            uint64_t v13 = &__src[v16];
            goto LABEL_43;
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v13 = &__src[v12 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this
                                                                                         + (v12 & 0xFFFFFFFFFFFFFFF8));
        int v41 = (uint64_t *)((char *)this + v16);
        int v42 = &__src[v16];
        unint64_t v43 = v16 - (v12 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v44 = *v41;
          *v41++ = *(void *)v42;
          *(void *)int v42 = v44;
          v42 += 8;
          v43 += 8;
        }
        while (v43);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
LABEL_43:
    int v45 = v13 + 1;
    unsigned int v46 = (char *)v14 + 1;
    do
    {
      char v47 = *(v46 - 1);
      *(v46 - 1) = *(v45 - 1);
      *(v45 - 1) = v47;
      if (v46 == __src) {
        break;
      }
      ++v46;
    }
    while (v45++ != a4);
    goto LABEL_47;
  }
  unint64_t v17 = __src - (char *)this;
  unint64_t v18 = *((void *)this + 15);

  return __swift::__runtime::llvm::hashing::detail::hash_short(this, v17, v18);
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::try_emplace<swift::reflection::TypeRef const*>@<X0>(unint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    unint64_t v17 = 0;
LABEL_9:
    uint64_t result = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>(a1, v17, a2, a3);
    char v16 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = (v8 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a2, a2 + 8);
  int v11 = a2[8];
  uint64_t result = (uint64_t *)(v9 + 24 * v10);
  uint64_t v13 = *result;
  int v14 = *((unsigned __int8 *)result + 8);
  if (*(void *)a2 != *result || v11 != v14)
  {
    unint64_t v19 = 0;
    int v20 = 1;
    while (v13 != -1 || v14)
    {
      char v16 = 0;
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v14 == 0;
      }
      if (v21 && v13 == -2) {
        unint64_t v19 = result;
      }
      unsigned int v23 = v10 + v20++;
      unsigned int v10 = v23 & (v8 - 1);
      uint64_t result = (uint64_t *)(v9 + 24 * v10);
      uint64_t v13 = *result;
      int v14 = *((unsigned __int8 *)result + 8);
      if (*(void *)a2 == *result && v11 == v14) {
        goto LABEL_10;
      }
    }
    if (v19) {
      unint64_t v17 = v19;
    }
    else {
      unint64_t v17 = result;
    }
    goto LABEL_9;
  }
  char v16 = 0;
LABEL_10:
  uint64_t v18 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v18;
  *(unsigned char *)(a4 + 16) = v16;
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>(unint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::grow(a1, v9);
  int v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)a1;
    int v14 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a3, a3 + 8);
    int v15 = v12 - 1;
    unsigned int v16 = (v12 - 1) & v14;
    int v17 = a3[8];
    a2 = (uint64_t *)(v13 + 24 * v16);
    uint64_t v18 = *a2;
    int v19 = *((unsigned __int8 *)a2 + 8);
    if (*(void *)a3 != *a2 || v17 != v19)
    {
      BOOL v21 = 0;
      int v22 = 1;
      while (v18 != -1 || v19)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v19 == 0;
        }
        if (v23 && v18 == -2) {
          BOOL v21 = a2;
        }
        unsigned int v25 = v16 + v22++;
        unsigned int v16 = v25 & v15;
        a2 = (uint64_t *)(v13 + 24 * (v25 & v15));
        uint64_t v18 = *a2;
        int v19 = *((unsigned __int8 *)a2 + 8);
        if (*(void *)a3 == *a2 && v17 == v19) {
          goto LABEL_3;
        }
      }
      if (v21) {
        a2 = v21;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -1 || *((unsigned char *)a2 + 8) != 0) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *(void *)a3;
  *((unsigned char *)a2 + 8) = a3[8];
  a2[2] = *a4;
  return a2;
}

void __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::grow(unint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (!v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 16);
    if (!v11) {
      return;
    }
    unint64_t v12 = 24 * v11 - 24;
    if (v12 >= 0x18)
    {
      unint64_t v14 = v12 / 0x18 + 1;
      uint64_t v13 = (_OWORD *)((char *)buffer + 24 * (v14 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v15 = v14 & 0x1FFFFFFFFFFFFFFELL;
      unsigned int v16 = buffer;
      do
      {
        *unsigned int v16 = xmmword_C6760;
        *(_OWORD *)((char *)v16 + 24) = xmmword_C6760;
        v16 += 3;
        v15 -= 2;
      }
      while (v15);
      if (v14 == (v14 & 0x1FFFFFFFFFFFFFFELL)) {
        return;
      }
    }
    else
    {
      uint64_t v13 = buffer;
    }
    int v17 = (_OWORD *)((char *)buffer + 24 * v11);
    do
    {
      *uint64_t v13 = xmmword_C6760;
      uint64_t v13 = (_OWORD *)((char *)v13 + 24);
    }
    while (v13 != v17);
    return;
  }
  uint64_t v10 = 3 * v3;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::moveFromOldBuckets(a1, v4, &v4[v10]);

  __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v4, (void *)(v10 * 8), (std::align_val_t)8uLL);
}

unint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = (char *)a2;
  unint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    unint64_t v8 = 24 * v6 - 24;
    if (v8 < 0x18)
    {
      unsigned int v9 = *(_OWORD **)result;
LABEL_7:
      uint64_t v13 = (_OWORD *)((char *)v7 + 24 * v6);
      do
      {
        _OWORD *v9 = xmmword_C6760;
        unsigned int v9 = (_OWORD *)((char *)v9 + 24);
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x18 + 1;
    unsigned int v9 = (_OWORD *)((char *)v7 + 24 * (v10 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v11 = v10 & 0x1FFFFFFFFFFFFFFELL;
    unint64_t v12 = *(_OWORD **)result;
    do
    {
      *unint64_t v12 = xmmword_C6760;
      *(_OWORD *)((char *)v12 + 24) = xmmword_C6760;
      v12 += 3;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if (*(void *)v4 < 0xFFFFFFFFFFFFFFFELL || v4[8] != 0)
      {
        uint64_t v25 = *(void *)v5;
        int v26 = *(_DWORD *)(v5 + 16);
        uint64_t result = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(v4, v4 + 8);
        int v27 = v26 - 1;
        unsigned int v19 = (v26 - 1) & result;
        uint64_t v28 = *(void *)v4;
        int v29 = v4[8];
        int v20 = (uint64_t *)(v25 + 24 * v19);
        uint64_t v21 = *v20;
        int v22 = *((unsigned __int8 *)v20 + 8);
        if (*(void *)v4 != *v20 || v29 != v22)
        {
          unsigned int v16 = 0;
          int v18 = 1;
          while (v21 != -1 || v22)
          {
            if (v16) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v22 == 0;
            }
            if (v14 && v21 == -2) {
              unsigned int v16 = v20;
            }
            unsigned int v17 = v19 + v18++;
            unsigned int v19 = v17 & v27;
            int v20 = (uint64_t *)(v25 + 24 * (v17 & v27));
            uint64_t v21 = *v20;
            int v22 = *((unsigned __int8 *)v20 + 8);
            if (v28 == *v20 && v29 == v22) {
              goto LABEL_28;
            }
          }
          if (v16) {
            int v20 = v16;
          }
        }
LABEL_28:
        *int v20 = v28;
        *((unsigned char *)v20 + 8) = v29;
        v20[2] = *((void *)v4 + 2);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 24;
    }
    while (v4 != (char *)a3);
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a3 > 0x100000)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  uint64_t v6 = result;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 2488) + 24))(&v26);
  uint64_t v7 = v26;
  if (!v26)
  {
    *a4 = 0;
    a4[1] = 0;
    uint64_t v26 = 0;
    goto LABEL_33;
  }
  uint64_t v26 = 0;
  uint64_t v22 = a2;
  uint64_t v23 = v7;
  if (!v28)
  {
    uint64_t v25 = 0;
    int v8 = *(_DWORD *)(v6 + 40);
    if (v8) {
      goto LABEL_10;
    }
LABEL_21:
    int v18 = 0;
    goto LABEL_22;
  }
  if (v28 == v27)
  {
    uint64_t v25 = v24;
    (*(void (**)(void))(*v28 + 24))();
    int v8 = *(_DWORD *)(v6 + 40);
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  uint64_t v25 = v28;
  uint64_t v28 = 0;
  int v8 = *(_DWORD *)(v6 + 40);
  if (!v8) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v9 = *(void *)(v6 + 24);
  int v10 = v8 - 1;
  unsigned int v11 = (37 * v22) & v10;
  unint64_t v12 = (void *)(v9 + 48 * v11);
  uint64_t v13 = *v12;
  if (v22 == *v12) {
    goto LABEL_23;
  }
  BOOL v14 = 0;
  int v15 = 1;
  while (v13 != -1)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v13 == -2;
    }
    if (v16) {
      BOOL v14 = v12;
    }
    unsigned int v17 = v11 + v15++;
    unsigned int v11 = v17 & v10;
    unint64_t v12 = (void *)(v9 + 48 * v11);
    uint64_t v13 = *v12;
    if (v22 == *v12) {
      goto LABEL_23;
    }
  }
  if (v14) {
    int v18 = v14;
  }
  else {
    int v18 = v12;
  }
LABEL_22:
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(v6 + 24, v18, &v22, &v23);
LABEL_23:
  uint64_t v19 = v23;
  uint64_t v23 = 0;
  if (v19)
  {
    uint64_t v29 = v19;
    if (!v25) {
      goto LABEL_41;
    }
    (*(void (**)(void *, uint64_t *))(*v25 + 48))(v25, &v29);
  }
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  *a4 = a2;
  a4[1] = v7;
  uint64_t v20 = v26;
  uint64_t v26 = 0;
  if (!v20) {
    goto LABEL_33;
  }
  uint64_t v22 = v20;
  if (!v28)
  {
LABEL_41:
    uint64_t v21 = std::__throw_bad_function_call[abi:nn180100]();
    return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(v21);
  }
  (*(void (**)(void *, uint64_t *))(*v28 + 48))(v28, &v22);
LABEL_33:
  uint64_t result = (uint64_t)v28;
  if (v28 == v27) {
    return (*(uint64_t (**)(void *))(v27[0] + 32))(v27);
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*v28 + 40))();
  }
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(unint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)a1;
    unsigned int v6 = (v4 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>((void *)a2, (char *)(a2 + 8));
    int v7 = *(unsigned __int8 *)(a2 + 8);
    uint64_t result = (uint64_t *)(v5 + 24 * v6);
    uint64_t v9 = *result;
    int v10 = *((unsigned __int8 *)result + 8);
    if (*(void *)a2 == *result && v7 == v10) {
      return result;
    }
    uint64_t v13 = 0;
    int v14 = 1;
    while (v9 != -1 || v10)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v10 == 0;
      }
      if (v15 && v9 == -2) {
        uint64_t v13 = result;
      }
      unsigned int v17 = v6 + v14++;
      unsigned int v6 = v17 & (v4 - 1);
      uint64_t result = (uint64_t *)(v5 + 24 * v6);
      uint64_t v9 = *result;
      int v10 = *((unsigned __int8 *)result + 8);
      if (*(void *)a2 == *result && v7 == v10) {
        return result;
      }
    }
    if (v13) {
      unint64_t v12 = v13;
    }
    else {
      unint64_t v12 = result;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }

  return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>>(a1, v12, (char *)a2);
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>>(unint64_t a1, uint64_t *a2, char *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::grow(a1, v7);
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)a1;
    int v12 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a3, a3 + 8);
    int v13 = v10 - 1;
    unsigned int v14 = (v10 - 1) & v12;
    int v15 = a3[8];
    a2 = (uint64_t *)(v11 + 24 * v14);
    uint64_t v16 = *a2;
    int v17 = *((unsigned __int8 *)a2 + 8);
    if (*(void *)a3 != *a2 || v15 != v17)
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v16 != -1 || v17)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v17 == 0;
        }
        if (v21 && v16 == -2) {
          uint64_t v19 = a2;
        }
        unsigned int v23 = v14 + v20++;
        unsigned int v14 = v23 & v13;
        a2 = (uint64_t *)(v11 + 24 * (v23 & v13));
        uint64_t v16 = *a2;
        int v17 = *((unsigned __int8 *)a2 + 8);
        if (*(void *)a3 == *a2 && v15 == v17) {
          goto LABEL_3;
        }
      }
      if (v19) {
        a2 = v19;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -1 || *((unsigned char *)a2 + 8) != 0) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *(void *)a3;
  *((unsigned char *)a2 + 8) = a3[8];
  a2[2] = 0;
  return a2;
}

void *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  v27[1] = 0;
  v27[2] = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 2400;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v66 = 0;
  v27[0] = off_C9440;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  int v64 = 0;
  int v6 = (_DWORD *)a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  unsigned int v7 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v21, (swift::Demangle::__runtime::NodeFactory *)v27, 50);
  if (!v7
    || ((int v8 = v7, (*v6 & 0x10) != 0) || (*v6 & 0x1F) == 3)
    && (Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v27, 232),
        swift::Demangle::__runtime::Node::addChild(Node, v8, (swift::Demangle::__runtime::NodeFactory *)v27),
        (int v8 = Node) == 0)
    || *((_WORD *)v8 + 8) != 232)
  {
    *a3 = 0;
    a3[56] = 0;
    goto LABEL_17;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  int v10 = operator new(0x20uLL);
  void *v10 = off_C8DA8;
  v10[2] = v21;
  _OWORD v10[3] = &v24;
  uint64_t v22 = v10;
  v10[1] = a1;
  uint64_t v11 = a2[1];
  v67[0] = *a2;
  v67[1] = v11;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(v10 + 1, v67, &v23);
  uint64_t v19 = 0;
  int v20 = 0;
  std::string __p = 0;
  int v12 = v24;
  int64_t v13 = v25 - (unsigned char *)v24;
  if (v25 != v24)
  {
    if (v13 < 0) {
      abort();
    }
    unsigned int v14 = (char *)operator new(v25 - (unsigned char *)v24);
    int v15 = &v14[8 * (v13 >> 3)];
    std::string __p = v14;
    int v20 = v15;
    memcpy(v14, v12, v13);
    uint64_t v19 = v15;
  }
  swift::reflection::TypeRefBuilder::createTypeDecl(v8, (uint64_t)&__p, (uint64_t)a3);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
    uint64_t v16 = v24;
    if (!v24) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  if (v22) {
    (*(void (**)(void))(*v22 + 40))();
  }
  uint64_t v16 = v24;
  if (v24)
  {
LABEL_25:
    uint64_t v25 = v16;
    operator delete(v16);
  }
LABEL_17:
  v27[0] = off_C9440;
  if (v66 == v65)
  {
    (*(void (**)(void *))(v65[0] + 32))(v65);
  }
  else if (v66)
  {
    (*(void (**)(void))(*v66 + 40))();
  }
  v27[0] = off_C9418;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v28);
  if (v30) {
    *(unsigned char *)(v30 + 48) = 0;
  }
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t GenericContext = swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext((_DWORD *)a3[1]);
  if (!GenericContext) {
    goto LABEL_5;
  }
  uint64_t v11 = GenericContext;
  int v12 = *(unsigned __int16 *)(GenericContext + 8);
  uint64_t v13 = a2[1];
  v46[0] = *a2;
  v46[1] = v13;
  uint64_t v14 = a3[1];
  v45[0] = *a3;
  v45[1] = v14;
  uint64_t GenericArgsOffset = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgsOffset(a1, (uint64_t)v46, v45);
  if ((GenericArgsOffset & 0xFF00000000) == 0)
  {
LABEL_5:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  long long v43 = a5;
  if (*(_WORD *)(v11 + 4))
  {
    uint64_t v16 = 0;
    int v17 = 0;
    int v18 = 0;
    uint64_t v19 = (unsigned char *)(v11 + 12);
    uint64_t v20 = v11 + 12 + *(unsigned __int16 *)(v11 + 4);
    uint64_t v21 = *a2 + 8 * (int)GenericArgsOffset;
    unsigned int v42 = a4;
    uint64_t v40 = v20;
    uint64_t v41 = a1;
    while (1)
    {
      if ((*v19 & 0x3F) != 0
        || ((char)*v19 & 0x80000000) == 0
        || !v12
        || (uint64_t v44 = 0,
            !(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v21, &v44, 8))|| (uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v44, 0, a4)) == 0)
      {
        *long long v43 = 0;
        v43[1] = 0;
        v43[2] = 0;
        if (v16) {
          operator delete(v16);
        }
        return;
      }
      uint64_t v23 = TypeFromMetadata;
      if (v17 >= v18) {
        break;
      }
      *(void *)int v17 = TypeFromMetadata;
LABEL_7:
      --v12;
      v21 += 8;
      v17 += 8;
      if (++v19 == (unsigned char *)v20) {
        goto LABEL_39;
      }
    }
    uint64_t v24 = (v17 - v16) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      abort();
    }
    if ((v18 - v16) >> 2 > v25) {
      unint64_t v25 = (v18 - v16) >> 2;
    }
    if ((unint64_t)(v18 - v16) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26)
    {
      if (v26 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v27 = operator new(8 * v26);
    }
    else
    {
      int v27 = 0;
    }
    uint64_t v28 = (uint64_t *)&v27[8 * v24];
    uint64_t *v28 = v23;
    uint64_t v29 = v28;
    if (v17 != v16)
    {
      unint64_t v30 = v17 - v16 - 8;
      if (v30 < 0x168
        || (unint64_t v31 = (v17 - 8 - v16) & 0xFFFFFFFFFFFFFFF8, &v27[v17 - v16 - 8 - v31] > &v27[v17 - v16 - 8])
        || &v17[-v31 - 8] > v17 - 8
        || (unint64_t)(v16 - v27) < 0x20)
      {
        uint64_t v32 = v17;
        uint64_t v29 = (uint64_t *)&v27[8 * v24];
        do
        {
LABEL_30:
          uint64_t v33 = *((void *)v32 - 1);
          v32 -= 8;
          *--uint64_t v29 = v33;
        }
        while (v32 != v16);
        goto LABEL_31;
      }
      uint64_t v34 = (v30 >> 3) + 1;
      uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v32 = &v17[-v35];
      uint64_t v29 = &v28[v35 / 0xFFFFFFFFFFFFFFF8];
      long long v36 = &v27[8 * v24 - 16];
      long long v37 = v17 - 16;
      uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v39 = *(_OWORD *)v37;
        *(v36 - 1) = *((_OWORD *)v37 - 1);
        *long long v36 = v39;
        v36 -= 2;
        v37 -= 32;
        v38 -= 4;
      }
      while (v38);
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
LABEL_31:
    int v18 = &v27[8 * v26];
    if (v16) {
      operator delete(v16);
    }
    int v17 = (char *)v28;
    uint64_t v16 = (char *)v29;
    a4 = v42;
    uint64_t v20 = v40;
    a1 = v41;
    goto LABEL_7;
  }
  int v18 = 0;
  int v17 = 0;
  uint64_t v16 = 0;
LABEL_39:
  *long long v43 = v16;
  v43[1] = v17;
  v43[2] = v18;
}

void swift::reflection::TypeRefBuilder::createTypeDecl(swift::Demangle::__runtime *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::mangleNode(a1, a1);
  if (v20)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_21;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  int v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 == *(void *)a2)
  {
    int v8 = 0;
    uint64_t v9 = 0;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      std::string v15 = v14;
      goto LABEL_13;
    }
  }
  else
  {
    if (v7 < 0) {
      goto LABEL_25;
    }
    int v8 = (char *)operator new(v5 - *(void *)a2);
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v7);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  std::string::__init_copy_ctor_external(&v15, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
LABEL_13:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int64_t v10 = v9 - v8;
  if (v9 != v8)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      uint64_t v11 = (char *)operator new(v9 - v8);
      int v12 = &v11[8 * (v10 >> 3)];
      memcpy(v11, v8, v10);
      goto LABEL_17;
    }
LABEL_25:
    abort();
  }
  int v12 = 0;
  uint64_t v11 = 0;
LABEL_17:
  char v19 = 1;
  *(_OWORD *)a3 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  std::string::size_type v13 = v15.__r_.__value_.__r.__words[2];
  memset(&v15, 0, sizeof(v15));
  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = v12;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  *(unsigned char *)(a3 + 48) = 1;
  *(unsigned char *)(a3 + 56) = 1;
  if (v8) {
    operator delete(v8);
  }
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_21;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_21:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = off_C8DA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C8DA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()((uint64_t *)(a1 + 8), v4, a3);
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a2[1];
  v35[0] = *a2;
  v35[1] = v7;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(v6, v35, (uint64_t)v36);
  if (v40)
  {
    if (!v36[0]) {
      goto LABEL_7;
    }
    if (v38)
    {
      uint64_t v8 = a1[1];
      v34[0] = __p;
      v34[1] = v38;
      uint64_t v9 = *(void *)(v8 + 24);
      if (!v9)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_35;
      }
      (*(void (**)(uint64_t, void *, void *))(*(void *)v9 + 48))(v9, v34, a3);
      if (v40)
      {
        if (!v36[0])
        {
LABEL_7:
          if (v39 < 0) {
            operator delete(__p);
          }
        }
      }
    }
  }
  uint64_t GenericContext = swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext((_DWORD *)a2[1]);
  if (GenericContext && (*(_DWORD *)a2[1] & 0x1Fu) - 16 <= 2)
  {
    uint64_t v11 = a1[2];
    uint64_t v12 = *(unsigned __int16 *)(GenericContext + 4) - *a3;
    std::string v14 = *(char **)(v11 + 8);
    unint64_t v13 = *(void *)(v11 + 16);
    if ((unint64_t)v14 < v13)
    {
      *(void *)std::string v14 = v12;
      std::string v15 = v14 + 8;
LABEL_32:
      *(void *)(v11 + 8) = v15;
      *a3 += *(void *)(*(void *)(a1[2] + 8) - 8);
      return;
    }
    uint64_t v16 = *(char **)v11;
    uint64_t v17 = (uint64_t)&v14[-*(void *)v11];
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (!(v19 >> 61))
    {
      uint64_t v20 = v13 - (void)v16;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v22 = operator new(8 * v21);
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = &v22[8 * v18];
      uint64_t v24 = &v22[8 * v21];
      *uint64_t v23 = v12;
      std::string v15 = v23 + 1;
      if (v14 != v16)
      {
        unint64_t v25 = v14 - v16 - 8;
        if (v25 < 0x58) {
          goto LABEL_39;
        }
        if ((unint64_t)(v14 - &v22[v17]) < 0x20) {
          goto LABEL_39;
        }
        uint64_t v26 = (v25 >> 3) + 1;
        uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v28 = &v14[-v27];
        uint64_t v23 = (void *)((char *)v23 - v27);
        uint64_t v29 = &v22[8 * v18 - 16];
        unint64_t v30 = v14 - 16;
        uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *uint64_t v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        std::string v14 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_39:
          do
          {
            uint64_t v33 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v23 = v33;
          }
          while (v14 != v16);
        }
      }
      *(void *)uint64_t v11 = v23;
      *(void *)(v11 + 8) = v15;
      *(void *)(v11 + 16) = v24;
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_32;
    }
LABEL_35:
    abort();
  }
}

uint64_t swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext(_DWORD *a1)
{
  int v1 = *a1;
  if ((*a1 & 0x80) == 0) {
    return 0;
  }
  uint64_t result = 0;
  switch(v1 & 0x1F)
  {
    case 1:
      if (a1) {
        int v4 = a1;
      }
      else {
        int v4 = 0;
      }
      if ((*v4 & 0x80) == 0) {
        return 0;
      }
      if (!v4) {
        int v4 = 0;
      }
      if (v4 == (unsigned char *)-12) {
        goto LABEL_49;
      }
      int64_t v10 = v4 + 12;
      return (uint64_t)(v10 - 4);
    case 2:
      if (a1) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = 0;
      }
      if ((*v5 & 0x80) == 0) {
        return 0;
      }
      if (!v5) {
        uint64_t v5 = 0;
      }
      if (v5 == (unsigned char *)-8) {
        goto LABEL_49;
      }
      int64_t v10 = v5 + 8;
      return (uint64_t)(v10 - 4);
    case 4:
      if (a1) {
        uint64_t v6 = a1;
      }
      else {
        uint64_t v6 = 0;
      }
      if ((*v6 & 0x80) == 0) {
        return 0;
      }
      if (!v6) {
        uint64_t v6 = 0;
      }
      if (v6 == (unsigned char *)-8) {
LABEL_49:
      }
        int64_t v10 = 0;
      else {
        int64_t v10 = v6 + 8;
      }
      return (uint64_t)(v10 - 4);
    case 0x10:
      if (a1) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((*v7 & 0x80) == 0) {
        return 0;
      }
      if (!v7) {
        uint64_t v7 = 0;
      }
      if (v7 == (unsigned char *)-44) {
        goto LABEL_60;
      }
      uint64_t result = (uint64_t)(v7 + 48);
      break;
    case 0x11:
      if (a1) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = 0;
      }
      if ((*v8 & 0x80) == 0) {
        return 0;
      }
      if (!v8) {
        uint64_t v8 = 0;
      }
      if (v8 == (unsigned char *)-28) {
        goto LABEL_60;
      }
      uint64_t result = (uint64_t)(v8 + 32);
      break;
    case 0x12:
      if (a1) {
        uint64_t v9 = a1;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((*v9 & 0x80) == 0) {
        return 0;
      }
      if (!v9) {
        uint64_t v9 = 0;
      }
      if (v9 == (unsigned char *)-28) {
LABEL_60:
      }
        uint64_t result = 4;
      else {
        uint64_t result = (uint64_t)(v9 + 32);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgsOffset(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (_DWORD *)a3[1];
  int v4 = *v3 & 0x1F;
  if (v4 != 18 && v4 != 17)
  {
    if (v4 == 16)
    {
      if (v3) {
        uint64_t v5 = (_DWORD *)a3[1];
      }
      else {
        uint64_t v5 = 0;
      }
      int64_t v10 = v5;
      if ((*v5 & 0x20000000) == 0)
      {
        if ((*v5 & 0x10000000) != 0)
        {
          int v11 = 0;
          uint64_t v12 = 6;
        }
        else
        {
          int v11 = v5[7];
          uint64_t v12 = 8;
        }
        int v7 = v11 - v5[v12];
        unsigned int v6 = v7 & 0xFFFFFF00;
        goto LABEL_7;
      }
      v13[0] = *a3;
      v13[1] = (uint64_t)v3;
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(a1, v13, (uint64_t)&v14);
      LOBYTE(v7) = v16;
      if (v16)
      {
        if ((*((unsigned char *)v10 + 3) & 0x10) != 0)
        {
          int v7 = -v14 - v10[8];
          unsigned int v6 = v7 & 0xFFFFFF00;
        }
        else
        {
          LOBYTE(v7) = v15;
          unsigned int v6 = v15 & 0xFFFFFF00;
        }
        goto LABEL_7;
      }
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      LOBYTE(v7) = 0;
    }
    unsigned int v6 = 0;
    return v8 & 0x100000000 | v6 & 0xFFFFFF00 | v7;
  }
  unsigned int v6 = 0;
  LOBYTE(v7) = 2;
LABEL_7:
  uint64_t v8 = 0x100000000;
  return v8 & 0x100000000 | v6 & 0xFFFFFF00 | v7;
}

unsigned char *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[1];
  if (v5) {
    uint64_t result = (unsigned char *)a2[1];
  }
  else {
    uint64_t result = 0;
  }
  if ((result[3] & 0x20) == 0) {
    goto LABEL_5;
  }
  int v7 = result;
  uint64_t v8 = *a2;
  if (result)
  {
    uint64_t result = (unsigned char *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(result);
    if (v5) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t result = (unsigned char *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(0);
    if (v5)
    {
LABEL_8:
      uint64_t v9 = v5;
      uint64_t v10 = *(int *)result;
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_12;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(int *)result;
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = xmmword_C6770;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
LABEL_12:
  uint64_t v11 = (uint64_t)&result[v8 - v9 + v10];
  if (!v11) {
    goto LABEL_5;
  }
  int v12 = (*v7 >> 25) & 7;
  uint64_t v13 = a1;
  return (unsigned char *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>(a1, v12, v11, &v13, a3);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a3;
  uint64_t v8 = result;
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t v18 = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(result + 2488) + 32))(*(void *)(result + 2488), a3, &v18, 8);
      if (!result) {
        goto LABEL_20;
      }
      uint64_t v7 = v18;
LABEL_4:
      uint64_t result = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v16, v8, v7);
      if (!v17 || (*v17 & 0x1F) != 0x10) {
        goto LABEL_20;
      }
      uint64_t v9 = *a4;
      uint64_t v18 = v16;
      unint64_t v19 = v17;
      uint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(v9, &v18);
      break;
    case 3:
      uint64_t v16 = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(result + 2488) + 32))(*(void *)(result + 2488), a3, &v16, 8);
      if ((result & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(v8, v16, &v18);
      if (!v19) {
        goto LABEL_20;
      }
      if (*(void *)v19 <= 0x7FFuLL && *(void *)v19 != 0) {
        goto LABEL_20;
      }
      if ((swift_reflection_classIsSwiftMask & *((void *)v19 + 4)) != 0)
      {
        unint64_t v11 = v19[15];
        unint64_t v12 = v19[14] - v11;
        uint64_t v13 = v11 >> 3;
        unint64_t v14 = (v12 << 29) & 0xFFFFFFFF00000000;
        if (v13 < 3) {
          uint64_t v13 = 3;
        }
        if ((v12 >> 3) < 0xA) {
          unint64_t v14 = 0xA00000000;
        }
        uint64_t v15 = v14 | v13;
      }
      else
      {
        uint64_t v15 = 0xA00000003;
        unint64_t v12 = 80;
      }
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v12;
      *(unsigned char *)(a5 + 16) = 1;
      break;
    default:
LABEL_20:
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 16) = 0;
      break;
  }
  return result;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  uint64_t v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    uint64_t v5 = 0;
  }
  if ((*((_WORD *)v5 + 29) & 2) != 0
    && (!v3 ? (unsigned int v6 = 0) : (unsigned int v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (uint64_t v3 = 0) : (uint64_t v3 = a1), (*((_WORD *)v3 + 29)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      uint64_t v5 = a1;
      goto LABEL_10;
    }
  }
  uint64_t v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      uint64_t v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 29) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-44)
  {
    int v1 = 0;
    goto LABEL_3;
  }
  int v1 = a1 + 44;
  if (a1)
  {
LABEL_3:
    unint64_t v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  unint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 26);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      uint64_t v5 = a1;
      goto LABEL_14;
    }
  }
  uint64_t v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 27);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 29) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[16 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  unint64_t v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 29) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4 == (unsigned int *)-44)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 11;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 26);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      unint64_t v12 = v5;
    }
    else {
      unint64_t v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 27);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[4 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    int v1 = 0;
  }
  if ((*((_WORD *)v1 + 29) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (uint64_t v5 = 0) : (uint64_t v5 = v3), (*((_WORD *)v5 + 29))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

double swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::swiftProtocol@<D0>(swift::Demangle::__runtime *a1@<X1>, std::string *a2@<X8>)
{
  swift::Demangle::__runtime::mangleNode(a1, a1);
  if (v5)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[8] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = __p;
  }
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_3:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::objcProtocol(void *__src@<X1>, size_t __len@<X2>, std::string *a3@<X8>)
{
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v11 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v11 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_10:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  if (SHIBYTE(v11) < 0)
  {
    unsigned int v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *a3 = v12;
    operator delete(v9);
    goto LABEL_14;
  }
LABEL_12:
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = __dst;
  a3->__r_.__value_.__r.__words[2] = v11;
LABEL_14:
  a3[1].__r_.__value_.__s.__data_[0] = 1;
  a3[1].__r_.__value_.__s.__data_[8] = 1;
}

std::string::value_type *std::vector<std::optional<std::pair<std::string,BOOL>>>::__push_back_slow_path<std::optional<std::pair<std::string,BOOL>> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void ***)a1;
  unint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v9 = (char *)operator new(40 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[40 * v4];
  v10->__r_.__value_.__s.__data_[0] = 0;
  v10[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      unint64_t v2 = *(void ***)a1;
      unint64_t v3 = *(void ***)(a1 + 8);
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
    v10[1].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 24);
    v10[1].__r_.__value_.__s.__data_[8] = 1;
  }
  unint64_t v11 = &v9[40 * v8];
  std::string v12 = &v10[1].__r_.__value_.__s.__data_[16];
  if (v3 == v2)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    unint64_t v13 = v10;
    do
    {
      v13[-2].__r_.__value_.__s.__data_[8] = 0;
      unint64_t v13 = (std::string *)((char *)v13 - 40);
      unint64_t v14 = (char *)(v3 - 5);
      v13[1].__r_.__value_.__s.__data_[8] = 0;
      if (*((unsigned char *)v3 - 8))
      {
        long long v15 = *(_OWORD *)v14;
        v13->__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 3);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        *(v3 - 4) = 0;
        *(v3 - 3) = 0;
        *(void *)unint64_t v14 = 0;
        v10[-1].__r_.__value_.__s.__data_[8] = *((unsigned char *)v3 - 16);
        v10[-1].__r_.__value_.__s.__data_[16] = 1;
      }
      v3 -= 5;
      uint64_t v10 = v13;
    }
    while (v14 != (char *)v2);
    unint64_t v2 = *(void ***)a1;
    uint64_t v16 = *(void ***)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
    while (v16 != v2)
    {
      if (*((unsigned char *)v16 - 8))
      {
        if (*((char *)v16 - 17) < 0) {
          operator delete(*(v16 - 5));
        }
      }
      v16 -= 5;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver>(uint64_t a1, uint64_t *a2, swift::Demangle::__runtime::NodeFactory *a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v5 = *a2;
  if (*a2)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCProtocolName(a1, v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)__p);
    if ((v18 & 0x80u) == 0) {
      unint64_t v8 = __p;
    }
    else {
      unint64_t v8 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      unint64_t v9 = v18;
    }
    else {
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (v9 >= 4 && *(_DWORD *)v8 == 1349801055)
    {
      uint64_t v16 = 0;
      unint64_t v7 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a3, v8, v9, v15);
      if (v16 == v15)
      {
        (*(void (**)(void *))(v15[0] + 32))(v15);
      }
      else if (v16)
      {
        (*(void (**)(void))(*v16 + 40))();
      }
      if (v7)
      {
        while (1)
        {
          int v12 = *(unsigned __int16 *)(v7 + 16);
          BOOL v13 = (v12 - 190) > 0x2E || ((1 << (v12 + 66)) & 0x640000000001) == 0;
          if (v13 && v12 != 99)
          {
            uint64_t v10 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(&v19, (swift::Demangle::__runtime *)v7);
            goto LABEL_13;
          }
          int v14 = *(unsigned __int8 *)(v7 + 18);
          if (v14 != 1)
          {
            if (v14 != 5 || *(_DWORD *)(v7 + 8) != 1)
            {
              unint64_t v7 = 0;
              break;
            }
            unint64_t v7 = *(void *)v7;
          }
          unint64_t v7 = *(void *)v7;
        }
      }
    }
    else
    {
      uint64_t v10 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::objcProtocol(&v19, v8, v9);
LABEL_13:
      unint64_t v7 = v10;
    }
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    DemanglingForContextDescriptor = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(a1, v5 & *(void *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, a3);
    if (DemanglingForContextDescriptor) {
      return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(&v19, DemanglingForContextDescriptor);
    }
    else {
      return 0;
    }
  }
  return v7;
}

uint64_t swift::reflection::TypeRefBuilder::createGenericSignature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
LABEL_37:
  }
    swift::reflection::TypeRefBuilder::makeGenericSignatureRef<llvm::ArrayRef<swift::reflection::GenericTypeParameterTypeRef const*>,llvm::ArrayRef<swift::reflection::TypeRefRequirement>>();
  unint64_t v3 = a2;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = &a2[a3];
  while (1)
  {
    uint64_t v9 = *v3;
    if (!*v3 || *(_DWORD *)(*v3 + 8) != 9) {
      break;
    }
    if (v5 >= v6)
    {
      uint64_t v11 = (v5 - v4) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      if ((v6 - v4) >> 2 > v12) {
        unint64_t v12 = (v6 - v4) >> 2;
      }
      if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int v14 = operator new(8 * v13);
      }
      else
      {
        int v14 = 0;
      }
      long long v15 = &v14[8 * v11];
      *(void *)long long v15 = v9;
      unint64_t v8 = v15 + 8;
      if (v5 != v4)
      {
        unint64_t v16 = v5 - v4 - 8;
        if (v16 < 0x168)
        {
          uint64_t v17 = v5;
          goto LABEL_33;
        }
        unint64_t v18 = (v5 - 8 - v4) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v5 - v4 - 8 - v18] > &v14[v5 - v4 - 8])
        {
          uint64_t v17 = v5;
          goto LABEL_33;
        }
        if (&v5[-v18 - 8] > v5 - 8)
        {
          uint64_t v17 = v5;
          goto LABEL_33;
        }
        if ((unint64_t)(v4 - v14) < 0x20)
        {
          uint64_t v17 = v5;
          goto LABEL_33;
        }
        uint64_t v19 = (v16 >> 3) + 1;
        uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v17 = &v5[-v20];
        v15 -= v20;
        unint64_t v21 = &v14[8 * v11 - 16];
        uint64_t v22 = v5 - 16;
        uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *unint64_t v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_33:
            uint64_t v25 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v15 - 1) = v25;
            v15 -= 8;
          }
          while (v17 != v4);
        }
      }
      unint64_t v6 = &v14[8 * v13];
      if (v4) {
        operator delete(v4);
      }
      unint64_t v4 = v15;
      goto LABEL_4;
    }
    *(void *)uint64_t v5 = v9;
    unint64_t v8 = v5 + 8;
LABEL_4:
    ++v3;
    uint64_t v5 = v8;
    if (v3 == v7) {
      goto LABEL_37;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return 0;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(uint64_t *a1, swift::Demangle::__runtime *a2)
{
  swift::Demangle::__runtime::mangleNode(a2, a2);
  int v5 = v15;
  if (v15)
  {
    unint64_t v6 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  std::string::size_type size = v14.__r_.__value_.__l.__size_;
  unint64_t v6 = (std::string::value_type *)v14.__r_.__value_.__r.__words[0];
  v13[0] = v14.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)&v14.__r_.__value_.__r.__words[2] + 3);
  char v3 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v5) {
    return 0;
  }
LABEL_10:
  uint64_t v8 = *a1;
  v10.__r_.__value_.__s.__data_[0] = 0;
  char v12 = 0;
  if (v3 < 0)
  {
    std::string::__init_copy_ctor_external(&v10, v6, size);
  }
  else
  {
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = size;
    LODWORD(v10.__r_.__value_.__r.__words[2]) = v13[0];
    *(_DWORD *)((char *)&v10.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v13 + 3);
    *((unsigned char *)&v10.__r_.__value_.__s + 23) = v3;
  }
  char v11 = 0;
  char v12 = 1;
  uint64_t ProtocolTypeFromDecl = swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(v8, (uint64_t)&v10);
  if (v12 && SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (v3 < 0) {
    operator delete(v6);
  }
  return ProtocolTypeFromDecl;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::objcProtocol(uint64_t *a1, void *__src, size_t __len)
{
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
LABEL_12:
    std::string v21 = __dst;
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    uint64_t v9 = (std::string::value_type *)__dst.__r_.__value_.__r.__words[0];
    v20[0] = __dst.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v20 + 3) = __dst.__r_.__value_.__r.__words[2] >> 24;
    char v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    goto LABEL_14;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_10:
  }
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_12;
  }
  char v12 = (void *)__dst.__r_.__value_.__r.__words[0];
  std::string::__init_copy_ctor_external(&v21, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  std::string::size_type size = v21.__r_.__value_.__l.__size_;
  uint64_t v9 = (std::string::value_type *)v21.__r_.__value_.__r.__words[0];
  v20[0] = v21.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)&v21.__r_.__value_.__r.__words[2] + 3);
  char v11 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  operator delete(v12);
LABEL_14:
  uint64_t v13 = *a1;
  v16.__r_.__value_.__s.__data_[0] = 0;
  char v18 = 0;
  if (v11 < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v9, size);
  }
  else
  {
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v16.__r_.__value_.__l.__size_ = size;
    LODWORD(v16.__r_.__value_.__r.__words[2]) = v20[0];
    *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v20 + 3);
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = v11;
  }
  char v17 = 1;
  char v18 = 1;
  uint64_t ProtocolTypeFromDecl = swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(v13, (uint64_t)&v16);
  if (v18 && SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v9);
  }
  return ProtocolTypeFromDecl;
}

void swift::reflection::TypeRefBuilder::makeGenericSignatureRef<llvm::ArrayRef<swift::reflection::GenericTypeParameterTypeRef const*>,llvm::ArrayRef<swift::reflection::TypeRefRequirement>>()
{
}

void *std::vector<std::unique_ptr<swift::reflection::GenericSignatureRef const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::GenericSignatureRef const>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::string v10 = &v9[8 * v3];
  char v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)std::string v10 = v12;
  uint64_t v13 = v10 + 8;
  std::string v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_35;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v15[-v18];
    v10 -= v18;
    uint64_t v20 = &v9[8 * v3 - 16];
    std::string v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)std::string v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    int v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)int v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    int v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28)
      {
        uint64_t v29 = *(void **)(v27 + 24);
        if (v29)
        {
          *(void *)(v27 + 32) = v29;
          operator delete(v29);
        }
        unint64_t v30 = *(void **)v27;
        if (*(void *)v27)
        {
          *(void *)(v27 + 8) = v30;
          operator delete(v30);
        }
        operator delete();
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2 + 32, &v7, 8))return 0; {
  uint64_t v3 = v7 & *(void *)(a1 + 2504) & 0x7FFFFFFFFFF8;
  }
  if (v3)
  {
    int v6 = 0;
    if (!(*(unsigned int (**)(void, uint64_t, int *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v3, &v6, 4))return 0; {
    if (v6 < 0)
    }
    {
      if (!(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v3 + 8, &v7, 8))return 0; {
      uint64_t v4 = *(void *)(a1 + 2504);
      }
      uint64_t v3 = v4 & v7;
      if (v4 & v7)
      {
        if ((*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v3 ^ 1, &v7, 8))
        {
          return *(void *)(a1 + 2504) & v7;
        }
        return 0;
      }
    }
  }
  return v3;
}

uint64_t swift::reflection::ForeignClassTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  std::string v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  int v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((void *)(a1 + 1248), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
    }
    else {
      std::string v9 = *(std::string *)v2;
    }
    operator new();
  }
  uint64_t v7 = v6[5];
  if (v10)
  {
    char v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::ForeignClassTypeRef::~ForeignClassTypeRef(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  operator delete();
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)&long long v269 = a2;
  BYTE8(v269) = a3;
  int32x2_t v8 = *(int32x2_t *)a1;
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    unsigned int v18 = 0;
LABEL_15:
    uint64_t v11 = *(void *)&v8 + 24 * v18;
    goto LABEL_16;
  }
  unsigned int v10 = (v9 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v269, (char *)&v269 + 8);
  uint64_t v11 = *(void *)&v8 + 24 * v10;
  uint64_t v12 = *(void *)v11;
  int v13 = *(unsigned __int8 *)(v11 + 8);
  if ((void)v269 != *(void *)v11 || BYTE8(v269) != v13)
  {
    int v15 = 1;
    while (v12 != -1 || v13)
    {
      unsigned int v16 = v10 + v15++;
      unsigned int v10 = v16 & (v9 - 1);
      uint64_t v11 = *(void *)&v8 + 24 * v10;
      uint64_t v12 = *(void *)v11;
      int v13 = *(unsigned __int8 *)(v11 + 8);
      if ((void)v269 == *(void *)v11 && BYTE8(v269) == v13) {
        goto LABEL_16;
      }
    }
    int32x2_t v8 = *(int32x2_t *)a1;
    unsigned int v18 = *(_DWORD *)(a1 + 16);
    goto LABEL_15;
  }
LABEL_16:
  if (v11 != *(void *)a1 + 24 * *(unsigned int *)(a1 + 16)) {
    return *(void *)(v11 + 16);
  }
  BOOL v20 = __OFSUB__(a4, 1);
  uint64_t v21 = (a4 - 1);
  if ((int)v21 < 0 != v20) {
    return 0;
  }
  *(_OWORD *)std::string __p = v269;
  uint64_t v226 = 0;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::try_emplace<swift::reflection::TypeRef const*>(a1, (char *)__p, (uint64_t *)&v226, (uint64_t)&v181);
  uint64_t v22 = (swift::reflection::OpaqueTypeRef *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v267);
  long long v23 = v268;
  if (!v268) {
    return 0;
  }
  uint64_t v24 = *v268;
  if (*v268 > 0x7FFuLL) {
    LODWORD(v24) = 0;
  }
  if ((int)v24 <= 768)
  {
    if ((v24 - 512) < 3)
    {
      v265[0] = v267;
      v265[1] = v268;
      return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata((int32x2_t *)a1, (uint64_t)v265, v21, 0);
    }
    if ((v24 - 515) >= 2)
    {
      if (v24)
      {
LABEL_139:
        uint64_t v76 = swift::reflection::OpaqueTypeRef::get(v22);
LABEL_140:
        uint64_t TupleType = v76;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = v76;
      }
      else
      {
        v266[0] = v267;
        v266[1] = v268;
        return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata((int32x2_t *)a1, v266, v21, a3);
      }
      return TupleType;
    }
    uint64_t v28 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(a1, &v267, 0);
    if (v28)
    {
      ((void (*)(std::string *__return_ptr, unint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v270, a1, v28);
      if (v270.__r_.__value_.__l.__size_)
      {
        uint64_t v226 = 0;
        __p[1] = 0;
        uint64_t v227 = 0;
        uint64_t v228 = 2400;
        uint64_t v229 = 0;
        char v230 = 0;
        uint64_t v264 = 0;
        __p[0] = off_C9440;
        uint64_t v231 = 0;
        uint64_t v233 = 0;
        uint64_t v232 = 0;
        char v234 = 0;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v248 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        long long v251 = 0u;
        long long v252 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v259 = 0u;
        long long v260 = 0u;
        long long v261 = 0u;
        long long v262 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        long long v239 = 0u;
        long long v240 = 0u;
        long long v241 = 0u;
        long long v242 = 0u;
        long long v243 = 0u;
        long long v244 = 0u;
        long long v245 = 0u;
        int v263 = 0;
        long long v180 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
        uint64_t v29 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(a1, &v180, (swift::Demangle::__runtime::NodeFactory *)__p);
        if (v29 && *((_WORD *)v29 + 8) == 232)
        {
          swift::Demangle::__runtime::mangleNode(v29, v30);
          if (LODWORD(v181.__r_.__value_.__l.__data_))
          {
            uint64_t TupleType = 0;
          }
          else
          {
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__sz, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
            }
            else {
              std::string __sz = v182;
            }
            uint64_t TupleType = swift::reflection::ForeignClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)&__sz);
            __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = TupleType;
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__sz.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t TupleType = 0;
        }
LABEL_266:
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
        return TupleType;
      }
    }
    return 0;
  }
  switch((int)v24)
  {
    case 769:
      uint64_t v226 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<swift::reflection::TypeRef const*>::reserve((uint64_t)__p, v268[1]);
      uint64_t v25 = *((unsigned int *)v23 + 2);
      if (!*((_DWORD *)v23 + 2)) {
        goto LABEL_141;
      }
      uint64_t v26 = 0;
      uint64_t v27 = v23 + 3;
      uint64_t v177 = v23;
      unsigned int v173 = v23 + 3;
      do
      {
        uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v27[2 * v26], 0, v21);
        if (!TypeFromMetadata)
        {
          uint64_t TupleType = 0;
          goto LABEL_251;
        }
        uint64_t v33 = TypeFromMetadata;
        uint64_t v34 = (char *)__p[1];
        if (__p[1] < v226)
        {
          *(void *)__p[1] = TypeFromMetadata;
          uint64_t v31 = v34 + 8;
          goto LABEL_35;
        }
        uint64_t v35 = v25;
        uint64_t v36 = v21;
        long long v37 = (char *)__p[0];
        int64_t v38 = (char *)__p[1] - (char *)__p[0];
        int64_t v39 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_327;
        }
        uint64_t v41 = v226 - (char *)__p[0];
        if ((v226 - (char *)__p[0]) >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v174 = v40;
        if (v40)
        {
          if (v40 >> 61) {
            goto LABEL_328;
          }
          unsigned int v42 = operator new(8 * v40);
        }
        else
        {
          unsigned int v42 = 0;
        }
        long long v43 = (uint64_t *)&v42[8 * v39];
        *long long v43 = v33;
        uint64_t v31 = v43 + 1;
        if (v34 == v37)
        {
          uint64_t v21 = v36;
          uint64_t v25 = v35;
          long long v23 = v177;
          goto LABEL_57;
        }
        unint64_t v44 = v34 - v37 - 8;
        if (v44 >= 0x58)
        {
          unint64_t v45 = v34 - v42 - v38;
          uint64_t v21 = v36;
          uint64_t v25 = v35;
          long long v23 = v177;
          if (v45 >= 0x20)
          {
            uint64_t v46 = (v44 >> 3) + 1;
            uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            long long v48 = &v34[-v47];
            long long v43 = (uint64_t *)((char *)v43 - v47);
            long long v49 = &v42[8 * v39 - 16];
            long long v50 = v34 - 16;
            uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *long long v49 = v52;
              v49 -= 2;
              v50 -= 32;
              v51 -= 4;
            }
            while (v51);
            uint64_t v34 = v48;
            if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_56;
            }
          }
        }
        else
        {
          uint64_t v21 = v36;
          uint64_t v25 = v35;
          long long v23 = v177;
        }
        do
        {
          uint64_t v53 = *((void *)v34 - 1);
          v34 -= 8;
          *--long long v43 = v53;
        }
        while (v34 != v37);
LABEL_56:
        uint64_t v34 = (char *)__p[0];
LABEL_57:
        uint64_t v27 = v173;
        __p[0] = v43;
        __p[1] = v31;
        uint64_t v226 = &v42[8 * v174];
        if (v34) {
          operator delete(v34);
        }
LABEL_35:
        __p[1] = v31;
        ++v26;
      }
      while (v26 != v25);
LABEL_141:
      memset(&v181, 0, sizeof(v181));
      uint64_t v104 = v23[2];
      if (v104
        && !(*(unsigned int (**)(void, uint64_t, std::string *))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488), v104, &v181))
      {
        uint64_t TupleType = 0;
      }
      else
      {
        std::string::size_type v105 = std::string::find(&v181, 32, 0);
        if (v105 != -1)
        {
          std::string::size_type v106 = v105;
          std::string::size_type v107 = 0;
          unint64_t v108 = 0;
          unint64_t v109 = 0;
          uint64_t v110 = 0;
          while (1)
          {
            if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v111 = &v181;
            }
            else {
              uint64_t v111 = (std::string *)v181.__r_.__value_.__r.__words[0];
            }
            uint64_t v112 = (char *)v111 + v107;
            std::string::size_type v113 = v106 - v107;
            if (v109 < v110)
            {
              *(void *)unint64_t v109 = v112;
              *((void *)v109 + 1) = v113;
              v109 += 16;
            }
            else
            {
              uint64_t v114 = (v109 - v108) >> 4;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 60) {
                goto LABEL_327;
              }
              if ((v110 - v108) >> 3 > v115) {
                unint64_t v115 = (v110 - v108) >> 3;
              }
              if ((unint64_t)(v110 - v108) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v116 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v115;
              }
              if (v116)
              {
                if (v116 >> 60) {
                  goto LABEL_328;
                }
                unint64_t v117 = (char *)operator new(16 * v116);
              }
              else
              {
                unint64_t v117 = 0;
              }
              unint64_t v118 = &v117[16 * v114];
              *(void *)unint64_t v118 = v112;
              *((void *)v118 + 1) = v113;
              if (v109 == v108)
              {
                uint64_t v120 = &v117[16 * v114];
              }
              else
              {
                unint64_t v119 = &v117[16 * v114];
                do
                {
                  uint64_t v120 = v119 - 16;
                  *((_OWORD *)v119 - 1) = *((_OWORD *)v109 - 1);
                  v109 -= 16;
                  v119 -= 16;
                }
                while (v109 != v108);
              }
              uint64_t v110 = &v117[16 * v116];
              unint64_t v109 = v118 + 16;
              if (v108) {
                operator delete(v108);
              }
              unint64_t v108 = v120;
            }
            std::string::size_type v107 = v106 + 1;
            std::string::size_type v106 = std::string::find(&v181, 32, v106 + 1);
            if (v106 == -1) {
              goto LABEL_223;
            }
          }
        }
        uint64_t v110 = 0;
        unint64_t v109 = 0;
        unint64_t v108 = 0;
LABEL_223:
        uint64_t v143 = v109 - v108;
        unint64_t v144 = (unint64_t)(v109 - v108) >> 4;
        long long v145 = __p[0];
        unint64_t v146 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if (v146 > v144)
        {
          do
          {
            if (v109 < v110)
            {
              *(void *)unint64_t v109 = 0;
              *((void *)v109 + 1) = 0;
              v109 += 16;
            }
            else
            {
              uint64_t v147 = (v109 - v108) >> 4;
              unint64_t v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 60) {
                goto LABEL_327;
              }
              if ((v110 - v108) >> 3 > v148) {
                unint64_t v148 = (v110 - v108) >> 3;
              }
              if ((unint64_t)(v110 - v108) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v149 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v148;
              }
              if (v149)
              {
                if (v149 >> 60) {
                  goto LABEL_328;
                }
                long long v150 = (char *)operator new(16 * v149);
              }
              else
              {
                long long v150 = 0;
              }
              long long v151 = &v150[16 * v147];
              *(void *)long long v151 = 0;
              *((void *)v151 + 1) = 0;
              if (v109 == v108)
              {
                long long v153 = &v150[16 * v147];
              }
              else
              {
                long long v152 = &v150[16 * v147];
                do
                {
                  long long v153 = v152 - 16;
                  *((_OWORD *)v152 - 1) = *((_OWORD *)v109 - 1);
                  v109 -= 16;
                  v152 -= 16;
                }
                while (v109 != v108);
              }
              uint64_t v110 = &v150[16 * v149];
              unint64_t v109 = v151 + 16;
              if (v108) {
                operator delete(v108);
              }
              unint64_t v108 = v153;
            }
            unint64_t v144 = (v144 + 1);
            long long v145 = __p[0];
            unint64_t v146 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          while (v146 > v144);
          uint64_t v143 = v109 - v108;
        }
        uint64_t TupleType = swift::reflection::TypeRefBuilder::createTupleType(a1 + 296, v145, v146, (uint64_t)v108, v143 >> 4);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = TupleType;
        if (v108) {
          operator delete(v108);
        }
      }
      if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v181.__r_.__value_.__l.__data_);
      }
LABEL_251:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return TupleType;
    case 770:
      uint64_t v54 = *((unsigned __int16 *)v268 + 4);
      uint64_t v178 = (uint64_t)v268;
      if (*((_WORD *)v268 + 4))
      {
        uint64_t v55 = 0;
        long long v56 = 0;
        long long v57 = 0;
        long long v58 = 0;
        long long v59 = v268 + 3;
        uint64_t v175 = v268 + 3;
        while (1)
        {
          uint64_t v60 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v59[v55], 0, v21);
          if (!v60) {
            goto LABEL_258;
          }
          uint64_t v61 = v60;
          uint64_t v62 = *(void *)(v178 + 8);
          if ((v62 & 0x2000000) != 0)
          {
            int v63 = *((_DWORD *)&v59[(unsigned __int16)v62] + v55);
            if (v57 < (uint64_t *)v58)
            {
LABEL_69:
              *long long v57 = 0;
              v57[1] = 0;
              v57[2] = v60;
              *((_DWORD *)v57 + 6) = v63;
              v57 += 4;
              goto LABEL_70;
            }
          }
          else
          {
            int v63 = 0;
            if (v57 < (uint64_t *)v58) {
              goto LABEL_69;
            }
          }
          uint64_t v64 = v21;
          uint64_t v65 = ((char *)v57 - (char *)v56) >> 5;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 59) {
            goto LABEL_327;
          }
          if ((v58 - (char *)v56) >> 4 > v66) {
            unint64_t v66 = (v58 - (char *)v56) >> 4;
          }
          if ((unint64_t)(v58 - (char *)v56) >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v67 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67)
          {
            if (v67 >> 59) {
              goto LABEL_328;
            }
            uint64_t v68 = (char *)operator new(32 * v67);
          }
          else
          {
            uint64_t v68 = 0;
          }
          unint64_t v69 = &v68[32 * v65];
          *(void *)unint64_t v69 = 0;
          *((void *)v69 + 1) = 0;
          *((void *)v69 + 2) = v61;
          *((_DWORD *)v69 + 6) = v63;
          if (v57 == v56)
          {
            unint64_t v72 = &v68[32 * v65];
          }
          else
          {
            uint64_t v70 = &v68[32 * v65];
            do
            {
              long long v71 = *((_OWORD *)v57 - 2);
              unint64_t v72 = v70 - 32;
              *(_OWORD *)(v70 - 20) = *(_OWORD *)((char *)v57 - 20);
              *((_OWORD *)v70 - 2) = v71;
              v57 -= 4;
              v70 -= 32;
            }
            while (v57 != v56);
          }
          long long v58 = &v68[32 * v67];
          long long v57 = (uint64_t *)(v69 + 32);
          if (v56) {
            operator delete(v56);
          }
          long long v56 = (uint64_t *)v72;
          uint64_t v21 = v64;
          long long v59 = v175;
LABEL_70:
          if (++v55 == v54) {
            goto LABEL_208;
          }
        }
      }
      long long v57 = 0;
      long long v56 = 0;
LABEL_208:
      uint64_t v133 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(void *)(v178 + 16), 0, v21);
      if (!v133) {
        goto LABEL_258;
      }
      uint64_t v134 = v133;
      unint64_t v135 = *(void *)(v178 + 8);
      if ((v135 & 0x80000000) != 0) {
        unsigned int ExtendedFlags = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getExtendedFlags(v178);
      }
      else {
        unsigned int ExtendedFlags = 0;
      }
      uint64_t v137 = *(void *)(v178 + 8);
      if ((v137 & 0x10000000) != 0)
      {
        uint64_t v141 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(void *)(((v178+ 8 * (unsigned __int16)*(void *)(v178 + 8)+ 4* ((unsigned __int16)*(void *)(v178 + 8) & (unint64_t)((uint64_t)(*(void *)(v178 + 8) << 38) >> 63))+ 31) & 0xFFFFFFFFFFFFFFF8)+ 8 * ((*(void *)(v178 + 8) >> 27) & 1)), 0, v21);
        if (!v141)
        {
LABEL_258:
          uint64_t TupleType = 0;
          goto LABEL_261;
        }
        uint64_t v140 = v141;
        uint64_t v137 = *(void *)(v178 + 8);
      }
      else
      {
        uint64_t v140 = 0;
      }
      if ((v137 & 0x8000000) != 0)
      {
        unint64_t v154 = *(void *)((v178
                          + 8 * (unsigned __int16)v137
                          + 4 * ((unsigned __int16)v137 & (unint64_t)(v137 << 38 >> 63))
                          + 31) & 0xFFFFFFFFFFFFFFF8);
        if (v154 - 1 >= 4) {
          unint64_t v142 = 0;
        }
        else {
          unint64_t v142 = v154;
        }
      }
      else
      {
        unint64_t v142 = 0;
      }
      if (swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::hasThrownError(v178))
      {
        uint64_t ThrownError = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getThrownError(v178);
        uint64_t v156 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, ThrownError, 0, v21);
        if (!v156) {
          goto LABEL_258;
        }
      }
      else
      {
        uint64_t v156 = 0;
      }
      uint64_t TupleType = swift::reflection::TypeRefBuilder::createFunctionType(a1 + 296, v56, ((char *)v57 - (char *)v56) >> 5, v134, v135, ExtendedFlags, v142, v140, v156);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = TupleType;
LABEL_261:
      if (!v56) {
        return TupleType;
      }
      goto LABEL_262;
    case 771:
      unsigned int v73 = *((_DWORD *)v268 + 2);
      if ((v73 & 0x40000000) != 0)
      {
        uint64_t TupleType = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v268[2], 0, v21);
        if (!TupleType) {
          return TupleType;
        }
        unsigned int v73 = *((_DWORD *)v23 + 2);
        BOOL v74 = 1;
      }
      else
      {
        uint64_t TupleType = 0;
        BOOL v74 = (v73 & 0x80000000) == 0;
      }
      uint64_t v226 = 0;
      __p[1] = 0;
      uint64_t v227 = 0;
      uint64_t v228 = 2400;
      uint64_t v229 = 0;
      char v230 = 0;
      uint64_t v264 = 0;
      __p[0] = off_C9440;
      uint64_t v231 = 0;
      uint64_t v233 = 0;
      uint64_t v232 = 0;
      char v234 = 0;
      long long v246 = 0u;
      long long v247 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      long long v250 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v258 = 0u;
      long long v259 = 0u;
      long long v260 = 0u;
      long long v261 = 0u;
      long long v262 = 0u;
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v245 = 0u;
      int v263 = 0;
      unint64_t v224 = 0;
      uint64_t v223 = 0;
      uint64_t v222 = 0;
      uint64_t v121 = *((unsigned int *)v23 + 3);
      if (v121)
      {
        uint64_t v122 = &v23[((v73 >> 30) & 1) + 2];
        uint64_t v123 = 8 * v121;
        while (1)
        {
          DemanglingForContextDescriptor = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(a1, *v122 & *(void *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, (swift::Demangle::__runtime::NodeFactory *)__p);
          if (!DemanglingForContextDescriptor)
          {
LABEL_211:
            uint64_t TupleType = 0;
            goto LABEL_265;
          }
          swift::Demangle::__runtime::mangleNode(DemanglingForContextDescriptor, v125);
          if (!LODWORD(v181.__r_.__value_.__l.__data_)) {
            break;
          }
          int v126 = 0;
          __sz.__r_.__value_.__s.__data_[0] = 0;
          unsigned __int8 v221 = 0;
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_178;
          }
LABEL_179:
          if (!v126) {
            goto LABEL_211;
          }
          uint64_t v127 = v223;
          if ((unint64_t)v223 >= v224)
          {
            uint64_t v129 = (std::string *)std::vector<std::optional<std::pair<std::string,BOOL>>>::__push_back_slow_path<std::optional<std::pair<std::string,BOOL>> const&>((uint64_t)&v222, (uint64_t)&__sz);
          }
          else
          {
            v223->__r_.__value_.__s.__data_[0] = 0;
            v127[1].__r_.__value_.__s.__data_[8] = 0;
            if (v221)
            {
              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v127, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v128 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
                v127->__r_.__value_.__r.__words[2] = __sz.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v127->__r_.__value_.__l.__data_ = v128;
              }
              v127[1].__r_.__value_.__s.__data_[0] = v220;
              v127[1].__r_.__value_.__s.__data_[8] = 1;
            }
            uint64_t v129 = (std::string *)((char *)v127 + 40);
          }
          uint64_t v223 = v129;
          if (v221 && SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__sz.__r_.__value_.__l.__data_);
          }
          ++v122;
          v123 -= 8;
          if (!v123)
          {
            uint64_t v139 = v222;
            uint64_t v138 = v223;
            goto LABEL_264;
          }
        }
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v270, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
        }
        else {
          std::string v270 = v182;
        }
        std::string __sz = v270;
        std::string::value_type v220 = 0;
        int v126 = 1;
        unsigned __int8 v221 = 1;
        if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_179;
        }
LABEL_178:
        operator delete(v182.__r_.__value_.__l.__data_);
        int v126 = v221;
        goto LABEL_179;
      }
      uint64_t v138 = 0;
      uint64_t v139 = 0;
LABEL_264:
      uint64_t TupleType = swift::reflection::TypeRefBuilder::createProtocolCompositionType(a1 + 296, v139, 0xCCCCCCCCCCCCCCCDLL * (((char *)v138 - (char *)v139) >> 3), TupleType, v74);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = TupleType;
LABEL_265:
      std::vector<std::optional<std::pair<std::string,BOOL>>>::~vector[abi:nn180100]((void **)&v222);
      goto LABEL_266;
    case 772:
      uint64_t v75 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v268[1], 0, v21);
      if (!v75) {
        return 0;
      }
      uint64_t v76 = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v75, 0);
      goto LABEL_140;
    case 773:
      uint64_t v77 = v268[1];
      __p[1] = 0;
      __p[0] = 0;
      uint64_t v226 = 0;
      uint64_t TupleType = 0;
      if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCClassName(a1, v77))
      {
        uint64_t TupleType = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = TupleType;
      }
      goto LABEL_62;
    case 774:
      uint64_t v78 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v268[1], 0, v21);
      if (!v78) {
        return 0;
      }
      uint64_t v76 = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v78);
      goto LABEL_140;
    case 775:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(a1, *(void *)(a1 + 2504) & v268[1], (uint64_t *)&v270);
      std::string::size_type size = v270.__r_.__value_.__l.__size_;
      if (!v270.__r_.__value_.__l.__size_) {
        return 0;
      }
      if ((*(unsigned char *)(v270.__r_.__value_.__l.__size_ + 1) & 1) == 0
        || (uint64_t v80 = *(unsigned __int16 *)(v270.__r_.__value_.__l.__size_ + 20),
            !*(_WORD *)(v270.__r_.__value_.__l.__size_ + 20)))
      {
        uint64_t v82 = 0;
        long long v56 = 0;
        goto LABEL_197;
      }
      uint64_t v81 = 0;
      long long v56 = 0;
      uint64_t v82 = 0;
      unint64_t v83 = 0;
      unint64_t v84 = v23 + 2;
      uint64_t v176 = v23 + 2;
      uint64_t v179 = *(unsigned __int16 *)(v270.__r_.__value_.__l.__size_ + 20);
      break;
    default:
      if ((v24 - 1280) >= 2 && v24 != 1024) {
        goto LABEL_139;
      }
      strcpy((char *)__p, "Bo");
      HIBYTE(v226) = 2;
      uint64_t TupleType = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
LABEL_62:
      if (SHIBYTE(v226) < 0) {
        operator delete(__p[0]);
      }
      return TupleType;
  }
  while (1)
  {
    uint64_t v86 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v84[v81], 0, v21);
    if (!v86)
    {
      uint64_t TupleType = 0;
      if (!v56) {
        return TupleType;
      }
      goto LABEL_262;
    }
    uint64_t v87 = v86;
    if (v82 >= v83) {
      break;
    }
    *v82++ = v86;
LABEL_109:
    if (++v81 == v80)
    {
      std::string::size_type size = v270.__r_.__value_.__l.__size_;
LABEL_197:
      uint64_t v226 = 0;
      __p[1] = 0;
      uint64_t v227 = 0;
      uint64_t v228 = 2400;
      uint64_t v229 = 0;
      char v230 = 0;
      uint64_t v264 = 0;
      __p[0] = off_C9440;
      uint64_t v231 = 0;
      uint64_t v233 = 0;
      uint64_t v232 = 0;
      char v234 = 0;
      long long v246 = 0u;
      long long v247 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      long long v250 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v258 = 0u;
      long long v259 = 0u;
      long long v260 = 0u;
      long long v261 = 0u;
      long long v262 = 0u;
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      long long v245 = 0u;
      int v263 = 0;
      uint64_t v130 = *(int *)(size + 4);
      if (v130) {
        uint64_t v131 = (char *)(v270.__r_.__value_.__r.__words[0] + v130 + 4);
      }
      else {
        uint64_t v131 = 0;
      }
      unint64_t MangledName = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v131, 0, __p);
      if (!MangledName) {
        goto LABEL_204;
      }
      __sz.__r_.__value_.__r.__words[0] = a1 + 296;
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&__sz, MangledName, 0, &v181);
      if (LOWORD(v181.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v181.__r_.__value_.__r.__words[2]) == 1) {
          ((void (*)(std::string::size_type, uint64_t, void))v181.__r_.__value_.__l.__size_)(v181.__r_.__value_.__r.__words[0], 3, 0);
        }
        goto LABEL_204;
      }
      uint64_t TupleType = v181.__r_.__value_.__r.__words[0];
      if (!v181.__r_.__value_.__r.__words[0]) {
        goto LABEL_205;
      }
      long long v218 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
      swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature((unsigned int *)v270.__r_.__value_.__l.__size_, (uint64_t)&v181);
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(a1, (uint64_t)&v218, (unsigned __int16 *)&v181, (uint64_t)&__sz);
      if (LOWORD(__sz.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(__sz.__r_.__value_.__r.__words[2]) == 1) {
          ((void (*)(std::string::size_type, uint64_t, void))__sz.__r_.__value_.__l.__size_)(__sz.__r_.__value_.__r.__words[0], 3, 0);
        }
        goto LABEL_204;
      }
      if (!__sz.__r_.__value_.__r.__words[0])
      {
LABEL_204:
        uint64_t TupleType = 0;
        goto LABEL_205;
      }
      swift::reflection::TypeRefBuilder::createSubstitutionMap((uint64_t *)__sz.__r_.__value_.__l.__data_, (uint64_t)v56, v82 - v56, (uint64_t)&__sz);
      if (!LODWORD(__sz.__r_.__value_.__r.__words[1]))
      {
        uint64_t TupleType = 0;
        goto LABEL_325;
      }
      uint64_t TupleType = swift::reflection::TypeRef::subst(TupleType, a1 + 296, (uint64_t *)&__sz);
      if (!TupleType) {
        goto LABEL_325;
      }
      if ((*(unsigned char *)(v270.__r_.__value_.__l.__size_ + 1) & 2) == 0) {
        goto LABEL_324;
      }
      *(_OWORD *)&v181.__r_.__value_.__r.__words[1] = 0uLL;
      v182.__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&v182.__r_.__value_.__r.__words[1] = 0x960uLL;
      char v183 = 0;
      uint64_t v217 = 0;
      v181.__r_.__value_.__r.__words[0] = (std::string::size_type)off_C9440;
      uint64_t v184 = 0;
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      char v187 = 0;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      long long v206 = 0u;
      long long v207 = 0u;
      long long v208 = 0u;
      long long v209 = 0u;
      long long v210 = 0u;
      long long v211 = 0u;
      long long v212 = 0u;
      long long v213 = 0u;
      long long v214 = 0u;
      long long v215 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      int v216 = 0;
      unint64_t v157 = *(unsigned int *)v270.__r_.__value_.__l.__size_;
      if ((v157 & 0x200) != 0) {
        long long v158 = (int *)((v270.__r_.__value_.__l.__size_ + 8 * ((v157 >> 8) & 1) + 19) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else {
        long long v158 = 0;
      }
      std::string::size_type v159 = (std::string::size_type)v158 + v270.__r_.__value_.__r.__words[0] - v270.__r_.__value_.__l.__size_;
      uint64_t v160 = *v158;
      long long v161 = (char *)(v159 + v160);
      if (v160) {
        long long v162 = v161;
      }
      else {
        long long v162 = 0;
      }
      unint64_t v163 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v162, 0, &v181);
      if (!v163)
      {
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v181);
        uint64_t TupleType = 0;
        goto LABEL_325;
      }
      unint64_t v164 = v163;
      while (1)
      {
        if (*(_WORD *)(v164 + 16) != 232)
        {
LABEL_323:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v181);
LABEL_324:
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (uint64_t)&v269)[2] = TupleType;
LABEL_325:
          __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)__sz.__r_.__value_.__l.__data_, (void *)(16 * LODWORD(__sz.__r_.__value_.__r.__words[2])), (std::align_val_t)8uLL);
LABEL_205:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
          if (!v56) {
            return TupleType;
          }
LABEL_262:
          operator delete(v56);
          return TupleType;
        }
        int v166 = *(unsigned __int8 *)(v164 + 18);
        long long v167 = (uint64_t *)v164;
        if ((v166 - 1) >= 2)
        {
          if (v166 != 5 || !*(_DWORD *)(v164 + 8)) {
            goto LABEL_323;
          }
          long long v167 = *(uint64_t **)v164;
        }
        if (*(_WORD *)(*v167 + 16) != 145) {
          goto LABEL_323;
        }
        long long v168 = (uint64_t *)v164;
        if ((v166 - 1) >= 2)
        {
          if (v166 != 5 || !*(_DWORD *)(v164 + 8))
          {
            uint64_t v169 = 0;
            goto LABEL_310;
          }
          long long v168 = *(uint64_t **)v164;
        }
        uint64_t v169 = *v168;
LABEL_310:
        int v170 = *(unsigned __int8 *)(v169 + 18);
        if ((v170 - 1) >= 2 && (v170 != 5 || !*(_DWORD *)(v169 + 8))) {
          goto LABEL_323;
        }
        uint64_t TupleType = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, TupleType);
        int v171 = *(unsigned __int8 *)(v164 + 18);
        if ((v171 - 1) >= 2)
        {
          if (v171 != 5 || !*(_DWORD *)(v164 + 8))
          {
            unint64_t v165 = 0;
            goto LABEL_319;
          }
          unint64_t v164 = *(void *)v164;
        }
        unint64_t v165 = *(void *)v164;
LABEL_319:
        int v172 = *(unsigned __int8 *)(v165 + 18);
        if ((v172 - 1) < 2) {
          goto LABEL_297;
        }
        if (v172 == 5)
        {
          if (*(_DWORD *)(v165 + 8))
          {
            unint64_t v165 = *(void *)v165;
LABEL_297:
            unint64_t v164 = *(void *)v165;
            continue;
          }
          unint64_t v164 = 0;
        }
        else
        {
          unint64_t v164 = 0;
        }
      }
    }
  }
  uint64_t v88 = v82 - v56;
  unint64_t v89 = v88 + 1;
  if ((unint64_t)(v88 + 1) >> 61) {
LABEL_327:
  }
    abort();
  if (((char *)v83 - (char *)v56) >> 2 > v89) {
    unint64_t v89 = ((char *)v83 - (char *)v56) >> 2;
  }
  if ((unint64_t)((char *)v83 - (char *)v56) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v90 = v89;
  }
  if (v90)
  {
    if (v90 >> 61) {
LABEL_328:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    unint64_t v91 = operator new(8 * v90);
  }
  else
  {
    unint64_t v91 = 0;
  }
  uint64_t v92 = (uint64_t *)&v91[8 * v88];
  uint64_t *v92 = v87;
  uint64_t v93 = v92 + 1;
  if (v82 == v56) {
    goto LABEL_135;
  }
  unint64_t v94 = (char *)v82 - (char *)v56 - 8;
  if (v94 < 0x168)
  {
    uint64_t v95 = v82;
    goto LABEL_134;
  }
  unint64_t v96 = ((char *)(v82 - 1) - (char *)v56) & 0xFFFFFFFFFFFFFFF8;
  if (&v91[(char *)v82 - (char *)v56 - 8 - v96] > &v91[(char *)v82 - (char *)v56 - 8])
  {
    uint64_t v95 = v82;
  }
  else
  {
    if ((uint64_t *)((char *)v82 - v96 - 8) <= v82 - 1)
    {
      if ((unint64_t)((char *)v56 - v91) < 0x20)
      {
        uint64_t v95 = v82;
        goto LABEL_134;
      }
      uint64_t v97 = (v94 >> 3) + 1;
      uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v95 = &v82[v98 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v92 = (uint64_t *)((char *)v92 - v98);
      uint64_t v99 = &v91[8 * v88 - 16];
      uint64_t v100 = v82 - 2;
      uint64_t v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v102 = *(_OWORD *)v100;
        *(v99 - 1) = *((_OWORD *)v100 - 1);
        *uint64_t v99 = v102;
        v99 -= 2;
        v100 -= 4;
        v101 -= 4;
      }
      while (v101);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_134;
      }
LABEL_135:
      unint64_t v83 = (uint64_t *)&v91[8 * v90];
      if (v56)
      {
        uint64_t v82 = v93;
        operator delete(v56);
        long long v56 = v92;
      }
      else
      {
        long long v56 = v92;
        uint64_t v82 = v93;
      }
      unint64_t v84 = v176;
      uint64_t v80 = v179;
      goto LABEL_109;
    }
    uint64_t v95 = v82;
  }
  do
  {
LABEL_134:
    uint64_t v103 = *--v95;
    *--uint64_t v92 = v103;
  }
  while (v95 != v56);
  goto LABEL_135;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *(void *)(result + 24);
  unsigned int v7 = *(_DWORD *)(result + 40);
  if (v7)
  {
    unsigned int v8 = (v7 - 1) & (37 * a2);
    int v9 = (uint64_t *)(v6 + 48 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      goto LABEL_8;
    }
    int v11 = 1;
    while (v10 != -1)
    {
      unsigned int v12 = v8 + v11++;
      unsigned int v8 = v12 & (v7 - 1);
      int v9 = (uint64_t *)(v6 + 48 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        goto LABEL_8;
      }
    }
  }
  int v9 = (uint64_t *)(v6 + 48 * v7);
LABEL_8:
  if (v9 == (uint64_t *)(v6 + 48 * v7))
  {
    unint64_t v30 = 0;
    double result = (*(uint64_t (**)(void, uint64_t, unint64_t *, uint64_t))(**(void **)(result + 2488)
                                                                                     + 32))(*(void *)(result + 2488), a2, &v30, 8);
    if (result)
    {
      int v14 = v30;
      if (v30 > 0x7FF) {
        int v14 = 0;
      }
      if (v14 <= 1023)
      {
        switch(v14)
        {
          case 769:
            *(void *)uint64_t v26 = 0;
            double result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, uint64_t))(**(void **)(v4 + 2488)
                                                                                             + 32))(*(void *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0 || *(void *)v26 >= 0x100uLL) {
              goto LABEL_45;
            }
            unint64_t v18 = 16 * *(void *)v26 + 24;
            break;
          case 770:
            *(void *)uint64_t v26 = 0;
            double result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, uint64_t))(**(void **)(v4 + 2488)
                                                                                             + 32))(*(void *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0) {
              goto LABEL_45;
            }
            int v19 = 4 * v26[0];
            if ((*(_DWORD *)v26 & 0x2000000) == 0) {
              int v19 = 0;
            }
            int v20 = v19 + 8 * v26[0];
            int v21 = v20 + 24;
            int v22 = ((v20 + 31) & 0x1FFFF8) + 8;
            if ((*(_DWORD *)v26 & 0x8000000) != 0) {
              int v23 = v22;
            }
            else {
              int v23 = v21;
            }
            unint64_t v18 = (v23 + 7) & 0xFFFFF8;
            break;
          case 771:
            *(_DWORD *)uint64_t v26 = 0;
            double result = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, uint64_t))(**(void **)(v4 + 2488)
                                                                                             + 32))(*(void *)(v4 + 2488), a2 + 8, v26, 4);
            if ((result & 1) == 0) {
              goto LABEL_45;
            }
            int v24 = *(_DWORD *)v26;
            LODWORD(v27) = 0;
            double result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v4 + 2488) + 32))(*(void *)(v4 + 2488), a2 + 12, &v27, 4);
            if ((result & 1) == 0 || v27 >= 0x100) {
              goto LABEL_45;
            }
            uint64_t v25 = 24;
            if ((v24 & 0x40000000) == 0) {
              uint64_t v25 = 16;
            }
            unint64_t v18 = v25 + 8 * v27;
            break;
          case 772:
          case 773:
            goto LABEL_23;
          case 774:
            goto LABEL_24;
          case 775:
            double result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v4 + 2488) + 32))(*(void *)(v4 + 2488), a2 + 8, &v29, 8);
            if ((result & 1) == 0) {
              goto LABEL_45;
            }
            swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(v4, *(void *)(v4 + 2504) & v29, &v27);
            double result = (uint64_t)v28;
            if (!v28) {
              goto LABEL_45;
            }
            swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v28, (uint64_t)v26);
            unint64_t v18 = 8 * v26[2] + 16;
            break;
          default:
            switch(v14)
            {
              case 512:
              case 513:
              case 514:
                goto LABEL_23;
              case 515:
                int v15 = a3;
                uint64_t v16 = v4;
                uint64_t v17 = a2;
                unint64_t v18 = 32;
                break;
              case 516:
                goto LABEL_24;
              default:
                if (v14) {
                  goto LABEL_17;
                }
                int v15 = a3;
                uint64_t v16 = v4;
                uint64_t v17 = a2;
                unint64_t v18 = 56;
                break;
            }
            return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
        }
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
      }
      else if (v14 == 1024 || v14 == 1280)
      {
LABEL_24:
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
        unint64_t v18 = 24;
      }
      else if (v14 == 1281)
      {
LABEL_23:
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
        unint64_t v18 = 16;
      }
      else
      {
LABEL_17:
        int v15 = a3;
        uint64_t v16 = v4;
        uint64_t v17 = a2;
        unint64_t v18 = 8;
      }
      return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
    }
    else
    {
LABEL_45:
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    uint64_t v13 = v9[1];
    *a3 = a2;
    a3[1] = v13;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata(int32x2_t *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata(a1, (uint64_t)v6, a3, a4);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v62 = *(void **)a2;
  uint64_t v63 = v8;
  uint64_t v9 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, &v62, a4);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  if (!a4 || v62 == *(void **)a2)
  {
LABEL_28:
    ((void (*)(uint64_t *__return_ptr, int32x2_t *, uint64_t))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v60, a1, v10);
    if (v61)
    {
      v53[0] = v60;
      v53[1] = v61;
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>((uint64_t)a1, v53, &v54);
      if (v59)
      {
        if ((*v61 & 0x80) == 0)
        {
          uint64_t BoundGenericType = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)&a1[37], (uint64_t)&v54, 0);
          goto LABEL_38;
        }
        v50[0] = v62;
        v50[1] = v63;
        v49[0] = v60;
        v49[1] = (uint64_t)v61;
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst((uint64_t)a1, v50, v49, a3, (char **)&__p);
        uint64_t v33 = __p;
        uint64_t v34 = v52;
        if (__p == v52)
        {
          uint64_t BoundGenericType = 0;
          uint64_t v35 = __p;
          if (!__p)
          {
LABEL_37:
            if (v33 == v34)
            {
              uint64_t BoundGenericType = 0;
LABEL_48:
              if (v59)
              {
                if (v58 && v56)
                {
                  long long v57 = v56;
                  operator delete(v56);
                }
                if (v55[15] < 0) {
                  operator delete(v54);
                }
              }
              return BoundGenericType;
            }
LABEL_38:
            if (BoundGenericType)
            {
              std::string __p = v62;
              LOBYTE(v52) = a4;
              __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct((unint64_t)a1, (uint64_t)&__p)[2] = BoundGenericType;
              if (a4)
              {
                if (v62 != *(void **)a2)
                {
                  std::string __p = *(void **)a2;
                  LOBYTE(v52) = a4;
                  __int32 v36 = a1[2].i32[0];
                  if (v36)
                  {
                    int32x2_t v37 = *a1;
                    unsigned int v38 = (v36 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&__p, (char *)&v52);
                    uint64_t v39 = *(void *)&v37 + 24 * v38;
                    unint64_t v40 = *(void **)v39;
                    int v41 = *(unsigned __int8 *)(v39 + 8);
                    if (__p == *(void **)v39 && v52 == v41)
                    {
LABEL_44:
                      *(void *)uint64_t v39 = -2;
                      *(unsigned char *)(v39 + 8) = 0;
                      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      int v45 = 1;
                      while (v40 != (void *)-1 || v41)
                      {
                        unsigned int v46 = v38 + v45++;
                        unsigned int v38 = v46 & (v36 - 1);
                        uint64_t v39 = *(void *)&v37 + 24 * v38;
                        unint64_t v40 = *(void **)v39;
                        int v41 = *(unsigned __int8 *)(v39 + 8);
                        if (__p == *(void **)v39 && v52 == v41) {
                          goto LABEL_44;
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_48;
          }
        }
        else
        {
          v48[0] = __p;
          v48[1] = (v52 - (unsigned char *)__p) >> 3;
          uint64_t BoundGenericType = swift::reflection::TypeRefBuilder::createBoundGenericType((uint64_t)&a1[37], (uint64_t)&v54, (size_t)v48);
          uint64_t v35 = __p;
          if (!__p) {
            goto LABEL_37;
          }
        }
        long long v52 = v35;
        operator delete(v35);
        goto LABEL_37;
      }
    }
    return 0;
  }
  uint64_t v54 = v62;
  v55[0] = a4;
  int32x2_t v11 = *a1;
  __int32 v12 = a1[2].i32[0];
  if (!v12)
  {
    unsigned __int32 v23 = 0;
LABEL_18:
    uint64_t v16 = *(void *)&v11 + 24 * v23;
    goto LABEL_19;
  }
  int v13 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
  __int32 v14 = v12 - 1;
  unsigned int v15 = (v12 - 1) & v13;
  uint64_t v16 = *(void *)&v11 + 24 * v15;
  uint64_t v17 = *(void **)v16;
  int v18 = *(unsigned __int8 *)(v16 + 8);
  if (v54 != *(void **)v16 || v55[0] != v18)
  {
    int v20 = 1;
    while (v17 != (void *)-1 || v18)
    {
      unsigned int v21 = v15 + v20++;
      unsigned int v15 = v21 & v14;
      uint64_t v16 = *(void *)&v11 + 24 * v15;
      uint64_t v17 = *(void **)v16;
      int v18 = *(unsigned __int8 *)(v16 + 8);
      if (v54 == *(void **)v16 && v55[0] == v18) {
        goto LABEL_19;
      }
    }
    int32x2_t v11 = *a1;
    unsigned __int32 v23 = a1[2].u32[0];
    goto LABEL_18;
  }
LABEL_19:
  int32x2_t v24 = *a1;
  unsigned __int32 v25 = a1[2].u32[0];
  if (v16 == *(void *)a1 + 24 * v25) {
    goto LABEL_28;
  }
  uint64_t v54 = *(void **)a2;
  v55[0] = a4;
  if (v25)
  {
    unsigned int v26 = (v25 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
    uint64_t v27 = *(void *)&v24 + 24 * v26;
    uint64_t v28 = *(void **)v27;
    int v29 = *(unsigned __int8 *)(v27 + 8);
    if (v54 == *(void **)v27 && v55[0] == v29)
    {
LABEL_26:
      *(void *)uint64_t v27 = -2;
      *(unsigned char *)(v27 + 8) = 0;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v42 = 1;
      while (v28 != (void *)-1 || v29)
      {
        unsigned int v43 = v26 + v42++;
        unsigned int v26 = v43 & (v25 - 1);
        uint64_t v27 = *(void *)&v24 + 24 * v26;
        uint64_t v28 = *(void **)v27;
        int v29 = *(unsigned __int8 *)(v27 + 8);
        if (v54 == *(void **)v27 && v55[0] == v29) {
          goto LABEL_26;
        }
      }
    }
  }
  return *(void *)(v16 + 16);
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a4;
  uint64_t v5 = *a3;
  uint64_t v114 = a1;
  if (!*a3)
  {
    unsigned int v7 = 0;
    uint64_t v6 = 0;
    int v29 = a3[1];
    if (!a3[1]) {
      goto LABEL_164;
    }
    goto LABEL_32;
  }
  unint64_t v117 = a3;
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 296;
  do
  {
    uint64_t v11 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(v10, 0, v9);
    if (!v11)
    {
      *(_WORD *)(v4 + 16) = 1;
      *(void *)uint64_t v4 = "Failed to read generic parameter type in runtime generic signature.";
      *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      goto LABEL_169;
    }
    uint64_t v12 = v11;
    if (v7 < v8)
    {
      *(void *)unsigned int v7 = v11;
      goto LABEL_4;
    }
    uint64_t v13 = (v7 - v6) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
LABEL_174:
    }
      abort();
    if ((v8 - v6) >> 2 > v14) {
      unint64_t v14 = (v8 - v6) >> 2;
    }
    if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
LABEL_175:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (uint64_t *)&v16[8 * v13];
    *uint64_t v17 = v12;
    int v18 = (char *)v17;
    if (v7 != v6)
    {
      unint64_t v19 = v7 - v6 - 8;
      if (v19 >= 0x168
        && (unint64_t v20 = (v7 - 8 - v6) & 0xFFFFFFFFFFFFFFF8, &v16[v7 - v6 - 8 - v20] <= &v16[v7 - v6 - 8])
        && &v7[-v20 - 8] <= v7 - 8
        && (unint64_t)(v6 - v16) >= 0x20)
      {
        uint64_t v23 = (v19 >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v21 = &v7[-v24];
        int v18 = (char *)&v17[v24 / 0xFFFFFFFFFFFFFFF8];
        unsigned __int32 v25 = &v16[8 * v13 - 16];
        unsigned int v26 = v7 - 16;
        uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unsigned __int32 v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_24;
        }
      }
      else
      {
        unsigned int v21 = v7;
        int v18 = &v16[8 * v13];
      }
      do
      {
        uint64_t v22 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v21 != v6);
    }
LABEL_24:
    uint64_t v8 = &v16[8 * v15];
    if (v6) {
      operator delete(v6);
    }
    uint64_t v6 = v18;
    unsigned int v7 = (char *)v17;
    uint64_t v4 = a4;
LABEL_4:
    v7 += 8;
    ++v9;
  }
  while (v9 != v5);
  a1 = v114;
  a3 = v117;
  int v29 = v117[1];
  if (!v117[1])
  {
LABEL_164:
    std::string __p = 0;
LABEL_165:
    uint64_t v97 = (v7 - v6) >> 3;
    uint64_t v98 = __p;
    uint64_t GenericSignature = swift::reflection::TypeRefBuilder::createGenericSignature(v114 + 296, (uint64_t *)v6, v97);
    *(_WORD *)(v4 + 16) = 0;
    *(void *)uint64_t v4 = GenericSignature;
    if (!GenericSignature)
    {
      *(void *)uint64_t v4 = "unknown error";
      *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(v4 + 16) = 1;
    }
    if (!__p) {
      goto LABEL_169;
    }
LABEL_168:
    operator delete(v98);
    goto LABEL_169;
  }
LABEL_32:
  uint64_t v112 = 0;
  std::string __p = 0;
  unint64_t v30 = (_DWORD *)*((void *)a3 + 2);
  unint64_t v118 = &v30[3 * v29];
  uint64_t v115 = a1 + 296;
  unint64_t v108 = 0;
  while (2)
  {
    if ((*v30 & 0x1Fu) < 6 || (*v30 & 0x1F) == 31)
    {
      v165[1] = 0;
      v165[2] = 0;
      int v166 = 0;
      uint64_t v167 = 2400;
      uint64_t v168 = 0;
      char v169 = 0;
      v165[0] = off_C9440;
      long long v204 = 0;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      uint64_t v170 = 0;
      char v173 = 0;
      long long v174 = 0u;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v201 = 0u;
      int v202 = 0;
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[1] + 4, (const char *)a2);
      unint64_t v164 = 0;
      unint64_t v34 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v165, (uint64_t)SymbolicMangledNameStringRef, v33, v163);
      if (v164 == v163)
      {
        (*(void (**)(void *))(v163[0] + 32))(v163);
        if (!v34) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v164) {
          (*(void (**)(void))(*v164 + 40))();
        }
        if (!v34) {
          goto LABEL_59;
        }
      }
      uint64_t v205 = v115;
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v205, (swift::Demangle::__runtime::Node *)v34, 0, &v121);
      if ((_WORD)v123)
      {
        if ((unsigned __int16)v123 == 1) {
          v122(v121, 3, 0);
        }
      }
      else if (v121)
      {
        switch(*v30 & 0x1F)
        {
          case 0:
            uint64_t v122 = 0;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v125 = 2400;
            uint64_t v126 = 0;
            char v127 = 0;
            long long v102 = v121;
            uint64_t v121 = off_C9440;
            long long v162 = 0;
            uint64_t v129 = 0;
            uint64_t v130 = 0;
            uint64_t v128 = 0;
            char v131 = 0;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            int v160 = 0;
            uint64_t v36 = (uint64_t)v30 + *(void *)a2 - *(void *)(a2 + 8) + 8;
            LODWORD(v209[0]) = 0;
            int v37 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v114 + 2488) + 32))(*(void *)(v114 + 2488), v36, v209, 4);
            uint64_t v38 = 0;
            if (v37)
            {
              uint64_t v39 = SLODWORD(v209[0]);
              LODWORD(v209[0]) &= 0xFFFFFFFC;
              uint64_t v38 = v36 + (v39 & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v205 = v38;
              if (v39)
              {
                if ((*(unsigned int (**)(void))(**(void **)(v114 + 2488) + 32))(*(void *)(v114 + 2488))) {
                  uint64_t v38 = v205;
                }
                else {
                  uint64_t v38 = 0;
                }
              }
            }
            uint64_t v205 = v115;
            DemanglingForContextDescriptor = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(v114, v38 & *(void *)(v114 + 2504) & 0xFFFFFFFFFFFFFFFELL, (swift::Demangle::__runtime::NodeFactory *)&v121);
            if (DemanglingForContextDescriptor
              && (uint64_t v41 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(&v205, DemanglingForContextDescriptor)) != 0)
            {
              uint64_t v42 = v41;
              unint64_t v43 = (unint64_t)v102 & 0xFFFFFFFFFFFFFFF8;
              if (v112 >= (unint64_t *)v108)
              {
                uint64_t v80 = ((char *)v112 - (char *)__p) >> 4;
                unint64_t v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 60) {
                  goto LABEL_174;
                }
                if ((v108 - (char *)__p) >> 3 > v81) {
                  unint64_t v81 = (v108 - (char *)__p) >> 3;
                }
                unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
                if ((unint64_t)(v108 - (char *)__p) < 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v82 = v81;
                }
                unint64_t v110 = v82;
                if (v82)
                {
                  unint64_t v107 = (unint64_t)v102 & 0xFFFFFFFFFFFFFFF8;
                  if (v82 >> 60) {
                    goto LABEL_175;
                  }
                  unint64_t v83 = (char *)operator new(16 * v82);
                  unint64_t v43 = v107;
                }
                else
                {
                  unint64_t v83 = 0;
                }
                uint64_t v92 = (unint64_t *)&v83[16 * v80];
                unint64_t *v92 = v43;
                v92[1] = v42;
                uint64_t v93 = v112;
                if (v112 == __p)
                {
                  unint64_t v96 = &v83[16 * v80];
                  uint64_t v95 = __p;
                }
                else
                {
                  unint64_t v94 = &v83[16 * v80];
                  uint64_t v95 = __p;
                  do
                  {
                    unint64_t v96 = v94 - 16;
                    *((_OWORD *)v94 - 1) = *((_OWORD *)v93 - 1);
                    v93 -= 2;
                    v94 -= 16;
                  }
                  while (v93 != __p);
                }
                unint64_t v108 = &v83[16 * v110];
                uint64_t v112 = v92 + 2;
                if (v95) {
                  operator delete(v95);
                }
                char v44 = 0;
                std::string __p = (unint64_t *)v96;
              }
              else
              {
                char v44 = 0;
                unint64_t *v112 = v43;
                v112[1] = v41;
                v112 += 2;
              }
            }
            else
            {
              uint64_t v64 = v4;
              char v44 = 1;
              *(_WORD *)(v64 + 16) = 1;
              *(void *)uint64_t v64 = "Failed to read protocol type in conformance requirement of runtime generic signature.";
              *(void *)(v64 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            uint64_t v121 = off_C9440;
            if (v162 == v161)
            {
              (*(void (**)(void *))(v161[0] + 32))(v161);
            }
            else if (v162)
            {
              (*(void (**)(void))(*v162 + 40))();
            }
            uint64_t v121 = off_C9418;
            swift::Demangle::__runtime::NodeFactory::freeSlabs(v124);
            if (v126) {
              *(unsigned char *)(v126 + 48) = 0;
            }
            if (v44)
            {
              LOBYTE(v34) = 0;
              uint64_t v4 = a4;
            }
            else
            {
              uint64_t v4 = a4;
LABEL_161:
              LOBYTE(v34) = 1;
            }
            break;
          case 1:
            uint64_t v122 = 0;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v125 = 2400;
            uint64_t v126 = 0;
            char v127 = 0;
            uint64_t v103 = v121;
            uint64_t v121 = off_C9440;
            long long v162 = 0;
            uint64_t v129 = 0;
            uint64_t v130 = 0;
            uint64_t v128 = 0;
            char v131 = 0;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            int v160 = 0;
            unsigned int v46 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v35);
            long long v48 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v47);
            v120[0] = v46;
            v120[1] = v48;
            LOBYTE(v209[0]) = 0;
            long long v50 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v48, v49);
            uint64_t v52 = v51;
            uint64_t v53 = (uint64_t *)operator new(0x28uLL);
            *uint64_t v53 = (uint64_t)off_C8938;
            v53[1] = (uint64_t)v120;
            void v53[2] = v114;
            v53[3] = (uint64_t)v209;
            v53[4] = (uint64_t)&v121;
            long long v208 = v53;
            uint64_t v54 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v121, (uint64_t)v50, v52, &v205);
            if (v208 == &v205)
            {
              (*(void (**)(uint64_t *))(v205 + 32))(&v205);
            }
            else if (v208)
            {
              (*(void (**)(void))(*v208 + 40))();
            }
            v209[0] = v115;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v209, v54, 0, &v205);
            int v65 = v207;
            uint64_t v4 = a4;
            if (v207 == 1) {
              goto LABEL_97;
            }
            if (v207) {
              uint64_t v66 = 0;
            }
            else {
              uint64_t v66 = v205;
            }
            unint64_t v67 = (unint64_t)v103 & 0xFFFFFFFFFFFFFFF8 | 2;
            uint64_t v68 = v112;
            if (v112 < (unint64_t *)v108) {
              goto LABEL_102;
            }
            uint64_t v69 = ((char *)v112 - (char *)__p) >> 4;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 60) {
              goto LABEL_174;
            }
            if ((v108 - (char *)__p) >> 3 > v70) {
              unint64_t v70 = (v108 - (char *)__p) >> 3;
            }
            unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v108 - (char *)__p) < 0x7FFFFFFFFFFFFFF0) {
              unint64_t v71 = v70;
            }
            unint64_t v109 = v71;
            if (v71)
            {
              unint64_t v100 = (unint64_t)v103 & 0xFFFFFFFFFFFFFFF8 | 2;
              int v105 = v207;
              if (v71 >> 60) {
                goto LABEL_175;
              }
              uint64_t v72 = v66;
              unsigned int v73 = (char *)operator new(16 * v71);
              uint64_t v66 = v72;
              int v65 = v105;
              unint64_t v67 = v100;
            }
            else
            {
              unsigned int v73 = 0;
            }
            unint64_t v84 = (unint64_t *)&v73[16 * v69];
            unint64_t *v84 = v67;
            v84[1] = v66;
            unint64_t v85 = v112;
            if (v112 == __p) {
              goto LABEL_129;
            }
            uint64_t v86 = &v73[16 * v69];
            uint64_t v87 = __p;
            unint64_t v88 = v109;
            do
            {
              unint64_t v89 = v86 - 16;
              *((_OWORD *)v86 - 1) = *((_OWORD *)v85 - 1);
              v85 -= 2;
              v86 -= 16;
            }
            while (v85 != __p);
            goto LABEL_130;
          case 2:
            uint64_t v122 = 0;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v125 = 2400;
            uint64_t v126 = 0;
            char v127 = 0;
            uint64_t v104 = v121;
            uint64_t v121 = off_C9440;
            long long v162 = 0;
            uint64_t v129 = 0;
            uint64_t v130 = 0;
            uint64_t v128 = 0;
            char v131 = 0;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            int v160 = 0;
            uint64_t v55 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v35);
            long long v57 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v30 + v30[2] + 8, v56);
            v119[0] = v55;
            v119[1] = v57;
            LOBYTE(v209[0]) = 0;
            char v59 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v57, v58);
            uint64_t v61 = v60;
            uint64_t v62 = (uint64_t *)operator new(0x28uLL);
            *uint64_t v62 = (uint64_t)off_C8938;
            v62[1] = (uint64_t)v119;
            v62[2] = v114;
            void v62[3] = (uint64_t)v209;
            v62[4] = (uint64_t)&v121;
            long long v208 = v62;
            uint64_t v63 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v121, (uint64_t)v59, v61, &v205);
            if (v208 == &v205)
            {
              (*(void (**)(uint64_t *))(v205 + 32))(&v205);
            }
            else if (v208)
            {
              (*(void (**)(uint64_t *))(*v208 + 40))(v208);
            }
            v209[0] = v115;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v209, v63, 0, &v205);
            int v65 = v207;
            uint64_t v4 = a4;
            if (v207 == 1)
            {
LABEL_97:
              *(_WORD *)(v4 + 16) = 1;
              uint64_t v74 = v205;
              uint64_t v75 = v206;
              *(void *)(v4 + 8) = v206;
              *(void *)uint64_t v4 = v75(v74, 2, 0);
            }
            else
            {
              if (v207) {
                uint64_t v66 = 0;
              }
              else {
                uint64_t v66 = v205;
              }
              unint64_t v67 = (unint64_t)v104 & 0xFFFFFFFFFFFFFFF8 | 1;
              uint64_t v68 = v112;
              if (v112 >= (unint64_t *)v108)
              {
                uint64_t v76 = ((char *)v112 - (char *)__p) >> 4;
                unint64_t v77 = v76 + 1;
                if ((unint64_t)(v76 + 1) >> 60) {
                  goto LABEL_174;
                }
                if ((v108 - (char *)__p) >> 3 > v77) {
                  unint64_t v77 = (v108 - (char *)__p) >> 3;
                }
                unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
                if ((unint64_t)(v108 - (char *)__p) < 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v78 = v77;
                }
                unint64_t v109 = v78;
                if (v78)
                {
                  unint64_t v101 = (unint64_t)v104 & 0xFFFFFFFFFFFFFFF8 | 1;
                  int v106 = v207;
                  if (v78 >> 60) {
                    goto LABEL_175;
                  }
                  uint64_t v79 = v66;
                  unsigned int v73 = (char *)operator new(16 * v78);
                  uint64_t v66 = v79;
                  int v65 = v106;
                  unint64_t v67 = v101;
                }
                else
                {
                  unsigned int v73 = 0;
                }
                unint64_t v84 = (unint64_t *)&v73[16 * v76];
                unint64_t *v84 = v67;
                v84[1] = v66;
                unint64_t v90 = v112;
                if (v112 == __p)
                {
LABEL_129:
                  unint64_t v89 = (char *)v84;
                  uint64_t v87 = __p;
                  unint64_t v88 = v109;
                }
                else
                {
                  unint64_t v91 = &v73[16 * v76];
                  uint64_t v87 = __p;
                  unint64_t v88 = v109;
                  do
                  {
                    unint64_t v89 = v91 - 16;
                    *((_OWORD *)v91 - 1) = *((_OWORD *)v90 - 1);
                    v90 -= 2;
                    v91 -= 16;
                  }
                  while (v90 != __p);
                }
LABEL_130:
                unint64_t v108 = &v73[16 * v88];
                uint64_t v112 = v84 + 2;
                if (v87) {
                  operator delete(v87);
                }
                std::string __p = (unint64_t *)v89;
                uint64_t v4 = a4;
              }
              else
              {
LABEL_102:
                unint64_t *v68 = v67;
                v68[1] = v66;
                uint64_t v112 = v68 + 2;
              }
            }
            if (v207 == 1) {
              v206(v205, 3, 0);
            }
            uint64_t v121 = off_C9440;
            if (v162 == v161)
            {
              (*(void (**)(void *))(v161[0] + 32))(v161);
            }
            else if (v162)
            {
              (*(void (**)(void))(*v162 + 40))();
            }
            uint64_t v121 = off_C9418;
            swift::Demangle::__runtime::NodeFactory::freeSlabs(v124);
            if (v126) {
              *(unsigned char *)(v126 + 48) = 0;
            }
            if (v65 != 1) {
              goto LABEL_161;
            }
            LOBYTE(v34) = 0;
            goto LABEL_61;
          case 3:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v45 = "Unexpected same conformance requirement in runtime generic signature";
            goto LABEL_60;
          case 4:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v45 = "Unexpected same-shape requirement in runtime generic signature";
            goto LABEL_60;
          case 5:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v45 = "Unexpected invertible protocol in runtime generic signature";
            goto LABEL_60;
          case 0x1F:
            LOBYTE(v34) = 0;
            *(_WORD *)(v4 + 16) = 1;
            *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            int v45 = "Unexpected layout requirement in runtime generic signature";
            goto LABEL_60;
          default:
            goto LABEL_161;
        }
        goto LABEL_61;
      }
      LOBYTE(v34) = 0;
LABEL_59:
      *(_WORD *)(v4 + 16) = 1;
      *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      int v45 = "Failed to read subject type in requirement of runtime generic signature.";
LABEL_60:
      *(void *)uint64_t v4 = v45;
LABEL_61:
      v165[0] = off_C9440;
      if (v204 == v203)
      {
        (*(void (**)(void *))(v203[0] + 32))(v203);
      }
      else if (v204)
      {
        (*(void (**)(void))(*v204 + 40))();
      }
      v165[0] = off_C9418;
      swift::Demangle::__runtime::NodeFactory::freeSlabs(v166);
      if (v168) {
        *(unsigned char *)(v168 + 48) = 0;
      }
      if ((v34 & 1) == 0) {
        goto LABEL_172;
      }
      v30 += 3;
      if (v30 == v118) {
        goto LABEL_165;
      }
      continue;
    }
    break;
  }
  *(_WORD *)(v4 + 16) = 1;
  *(void *)uint64_t v4 = "unknown kind";
  *(void *)(v4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_172:
  uint64_t v98 = __p;
  if (__p) {
    goto LABEL_168;
  }
LABEL_169:
  if (v6) {
    operator delete(v6);
  }
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(uint64_t a1, void *a2, int a3)
{
  uint64_t result = 0;
  uint64_t v5 = (uint64_t *)a2[1];
  uint64_t v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF) {
    LODWORD(v6) = 0;
  }
  if ((int)v6 > 514)
  {
    if (v6 != 515 && v6 != 516) {
      return result;
    }
    return *(void *)(a1 + 2504) & v5[1];
  }
  if ((v6 - 512) < 3) {
    return *(void *)(a1 + 2504) & v5[1];
  }
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 2504);
    uint64_t result = v7 & v5[5];
    if (!result && a3 != 0)
    {
      while (1)
      {
        uint64_t v10 = v5[1] & v7;
        if (!v10) {
          break;
        }
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v10, &v12);
        uint64_t v5 = v13;
        if (!v13) {
          break;
        }
        if ((unint64_t)*v13 <= 0x7FF && *v13 != 0) {
          break;
        }
        *a2 = v12;
        a2[1] = v5;
        uint64_t v7 = *(void *)(a1 + 2504);
        uint64_t result = v7 & v5[5];
        if (result) {
          return result;
        }
      }
      return 0;
    }
  }
  return result;
}

void *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  v27[1] = 0;
  v27[2] = 0;
  long long v28 = 0;
  uint64_t v29 = 2400;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v66 = 0;
  v27[0] = off_C9440;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  int v64 = 0;
  uint64_t v6 = (_DWORD *)a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  uint64_t v7 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v21, (swift::Demangle::__runtime::NodeFactory *)v27, 50);
  if (!v7
    || ((uint64_t v8 = v7, (*v6 & 0x10) != 0) || (*v6 & 0x1F) == 3)
    && (Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v27, 232),
        swift::Demangle::__runtime::Node::addChild(Node, v8, (swift::Demangle::__runtime::NodeFactory *)v27),
        (uint64_t v8 = Node) == 0)
    || *((_WORD *)v8 + 8) != 232)
  {
    *a3 = 0;
    a3[56] = 0;
    goto LABEL_17;
  }
  uint64_t v24 = 0;
  unsigned __int32 v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = off_C8E10;
  v10[2] = v21;
  _OWORD v10[3] = &v24;
  uint64_t v22 = v10;
  v10[1] = a1;
  uint64_t v11 = a2[1];
  v67[0] = *a2;
  v67[1] = v11;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(v10 + 1, v67, &v23);
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  std::string __p = 0;
  uint64_t v12 = v24;
  int64_t v13 = v25 - (unsigned char *)v24;
  if (v25 != v24)
  {
    if (v13 < 0) {
      abort();
    }
    unint64_t v14 = (char *)operator new(v25 - (unsigned char *)v24);
    unint64_t v15 = &v14[8 * (v13 >> 3)];
    std::string __p = v14;
    unint64_t v20 = v15;
    memcpy(v14, v12, v13);
    unint64_t v19 = v15;
  }
  swift::reflection::TypeRefBuilder::createTypeDecl(v8, (uint64_t)&__p, (uint64_t)a3);
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
    uint64_t v16 = v24;
    if (!v24) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  if (v22) {
    (*(void (**)(void))(*v22 + 40))();
  }
  uint64_t v16 = v24;
  if (v24)
  {
LABEL_25:
    unsigned __int32 v25 = v16;
    operator delete(v16);
  }
LABEL_17:
  v27[0] = off_C9440;
  if (v66 == v65)
  {
    (*(void (**)(void *))(v65[0] + 32))(v65);
  }
  else if (v66)
  {
    (*(void (**)(void))(*v66 + 40))();
  }
  v27[0] = off_C9418;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v28);
  if (v30) {
    *(unsigned char *)(v30 + 48) = 0;
  }
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t GenericContext = swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext((_DWORD *)a3[1]);
  if (!GenericContext) {
    goto LABEL_5;
  }
  uint64_t v11 = GenericContext;
  int v12 = *(unsigned __int16 *)(GenericContext + 8);
  uint64_t v13 = a2[1];
  v46[0] = *a2;
  v46[1] = v13;
  uint64_t v14 = a3[1];
  v45[0] = *a3;
  v45[1] = v14;
  uint64_t GenericArgsOffset = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgsOffset(a1, (uint64_t)v46, v45);
  if ((GenericArgsOffset & 0xFF00000000) == 0)
  {
LABEL_5:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  long long v43 = a5;
  if (*(_WORD *)(v11 + 4))
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    unint64_t v19 = (unsigned char *)(v11 + 12);
    uint64_t v20 = v11 + 12 + *(unsigned __int16 *)(v11 + 4);
    uint64_t v21 = *a2 + 8 * (int)GenericArgsOffset;
    unsigned int v42 = a4;
    uint64_t v40 = v20;
    uint64_t v41 = a1;
    while (1)
    {
      if ((*v19 & 0x3F) != 0
        || ((char)*v19 & 0x80000000) == 0
        || !v12
        || (uint64_t v44 = 0,
            !(*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v21, &v44, 8))|| (uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v44, 0, a4)) == 0)
      {
        *long long v43 = 0;
        v43[1] = 0;
        v43[2] = 0;
        if (v16) {
          operator delete(v16);
        }
        return;
      }
      uint64_t v23 = TypeFromMetadata;
      if (v17 >= v18) {
        break;
      }
      *(void *)uint64_t v17 = TypeFromMetadata;
LABEL_7:
      --v12;
      v21 += 8;
      v17 += 8;
      if (++v19 == (unsigned char *)v20) {
        goto LABEL_39;
      }
    }
    uint64_t v24 = (v17 - v16) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      abort();
    }
    if ((v18 - v16) >> 2 > v25) {
      unint64_t v25 = (v18 - v16) >> 2;
    }
    if ((unint64_t)(v18 - v16) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26)
    {
      if (v26 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v27 = operator new(8 * v26);
    }
    else
    {
      uint64_t v27 = 0;
    }
    long long v28 = (uint64_t *)&v27[8 * v24];
    uint64_t *v28 = v23;
    uint64_t v29 = v28;
    if (v17 != v16)
    {
      unint64_t v30 = v17 - v16 - 8;
      if (v30 < 0x168
        || (unint64_t v31 = (v17 - 8 - v16) & 0xFFFFFFFFFFFFFFF8, &v27[v17 - v16 - 8 - v31] > &v27[v17 - v16 - 8])
        || &v17[-v31 - 8] > v17 - 8
        || (unint64_t)(v16 - v27) < 0x20)
      {
        uint64_t v32 = v17;
        uint64_t v29 = (uint64_t *)&v27[8 * v24];
        do
        {
LABEL_30:
          uint64_t v33 = *((void *)v32 - 1);
          v32 -= 8;
          *--uint64_t v29 = v33;
        }
        while (v32 != v16);
        goto LABEL_31;
      }
      uint64_t v34 = (v30 >> 3) + 1;
      uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v32 = &v17[-v35];
      uint64_t v29 = &v28[v35 / 0xFFFFFFFFFFFFFFF8];
      long long v36 = &v27[8 * v24 - 16];
      long long v37 = v17 - 16;
      uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v39 = *(_OWORD *)v37;
        *(v36 - 1) = *((_OWORD *)v37 - 1);
        *long long v36 = v39;
        v36 -= 2;
        v37 -= 32;
        v38 -= 4;
      }
      while (v38);
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
LABEL_31:
    int v18 = &v27[8 * v26];
    if (v16) {
      operator delete(v16);
    }
    uint64_t v17 = (char *)v28;
    uint64_t v16 = (char *)v29;
    a4 = v42;
    uint64_t v20 = v40;
    a1 = v41;
    goto LABEL_7;
  }
  int v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
LABEL_39:
  *long long v43 = v16;
  v43[1] = v17;
  v43[2] = v18;
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::~__func()
{
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_C8E10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C8E10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()((uint64_t *)(a1 + 8), v4, a3);
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a2[1];
  v35[0] = *a2;
  v35[1] = v7;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(v6, v35, (uint64_t)v36);
  if (v40)
  {
    if (!v36[0]) {
      goto LABEL_7;
    }
    if (v38)
    {
      uint64_t v8 = a1[1];
      v34[0] = __p;
      v34[1] = v38;
      uint64_t v9 = *(void *)(v8 + 24);
      if (!v9)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_35;
      }
      (*(void (**)(uint64_t, void *, void *))(*(void *)v9 + 48))(v9, v34, a3);
      if (v40)
      {
        if (!v36[0])
        {
LABEL_7:
          if (v39 < 0) {
            operator delete(__p);
          }
        }
      }
    }
  }
  uint64_t GenericContext = swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext((_DWORD *)a2[1]);
  if (GenericContext && (*(_DWORD *)a2[1] & 0x1Fu) - 16 <= 2)
  {
    uint64_t v11 = a1[2];
    uint64_t v12 = *(unsigned __int16 *)(GenericContext + 4) - *a3;
    uint64_t v14 = *(char **)(v11 + 8);
    unint64_t v13 = *(void *)(v11 + 16);
    if ((unint64_t)v14 < v13)
    {
      *(void *)uint64_t v14 = v12;
      unint64_t v15 = v14 + 8;
LABEL_32:
      *(void *)(v11 + 8) = v15;
      *a3 += *(void *)(*(void *)(a1[2] + 8) - 8);
      return;
    }
    uint64_t v16 = *(char **)v11;
    uint64_t v17 = (uint64_t)&v14[-*(void *)v11];
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (!(v19 >> 61))
    {
      uint64_t v20 = v13 - (void)v16;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v22 = operator new(8 * v21);
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = &v22[8 * v18];
      uint64_t v24 = &v22[8 * v21];
      *uint64_t v23 = v12;
      unint64_t v15 = v23 + 1;
      if (v14 != v16)
      {
        unint64_t v25 = v14 - v16 - 8;
        if (v25 < 0x58) {
          goto LABEL_39;
        }
        if ((unint64_t)(v14 - &v22[v17]) < 0x20) {
          goto LABEL_39;
        }
        uint64_t v26 = (v25 >> 3) + 1;
        uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        long long v28 = &v14[-v27];
        uint64_t v23 = (void *)((char *)v23 - v27);
        uint64_t v29 = &v22[8 * v18 - 16];
        unint64_t v30 = v14 - 16;
        uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *uint64_t v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        uint64_t v14 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_39:
          do
          {
            uint64_t v33 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v23 = v33;
          }
          while (v14 != v16);
        }
      }
      *(void *)uint64_t v11 = v23;
      *(void *)(v11 + 8) = v15;
      *(void *)(v11 + 16) = v24;
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_32;
    }
LABEL_35:
    abort();
  }
}

uint64_t swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext(_DWORD *a1)
{
  int v1 = *a1;
  if ((*a1 & 0x80) == 0) {
    return 0;
  }
  uint64_t result = 0;
  switch(v1 & 0x1F)
  {
    case 1:
      if (a1) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = 0;
      }
      if ((*v4 & 0x80) == 0) {
        return 0;
      }
      if (!v4) {
        uint64_t v4 = 0;
      }
      if (v4 == (unsigned char *)-12) {
        goto LABEL_49;
      }
      uint64_t v10 = v4 + 12;
      return (uint64_t)(v10 - 4);
    case 2:
      if (a1) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = 0;
      }
      if ((*v5 & 0x80) == 0) {
        return 0;
      }
      if (!v5) {
        uint64_t v5 = 0;
      }
      if (v5 == (unsigned char *)-8) {
        goto LABEL_49;
      }
      uint64_t v10 = v5 + 8;
      return (uint64_t)(v10 - 4);
    case 4:
      if (a1) {
        uint64_t v6 = a1;
      }
      else {
        uint64_t v6 = 0;
      }
      if ((*v6 & 0x80) == 0) {
        return 0;
      }
      if (!v6) {
        uint64_t v6 = 0;
      }
      if (v6 == (unsigned char *)-8) {
LABEL_49:
      }
        uint64_t v10 = 0;
      else {
        uint64_t v10 = v6 + 8;
      }
      return (uint64_t)(v10 - 4);
    case 0x10:
      if (a1) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((*v7 & 0x80) == 0) {
        return 0;
      }
      if (!v7) {
        uint64_t v7 = 0;
      }
      if (v7 == (unsigned char *)-44) {
        goto LABEL_60;
      }
      uint64_t result = (uint64_t)(v7 + 48);
      break;
    case 0x11:
      if (a1) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = 0;
      }
      if ((*v8 & 0x80) == 0) {
        return 0;
      }
      if (!v8) {
        uint64_t v8 = 0;
      }
      if (v8 == (unsigned char *)-28) {
        goto LABEL_60;
      }
      uint64_t result = (uint64_t)(v8 + 32);
      break;
    case 0x12:
      if (a1) {
        uint64_t v9 = a1;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((*v9 & 0x80) == 0) {
        return 0;
      }
      if (!v9) {
        uint64_t v9 = 0;
      }
      if (v9 == (unsigned char *)-28) {
LABEL_60:
      }
        uint64_t result = 4;
      else {
        uint64_t result = (uint64_t)(v9 + 32);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgsOffset(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (_DWORD *)a3[1];
  int v4 = *v3 & 0x1F;
  if (v4 != 18 && v4 != 17)
  {
    if (v4 == 16)
    {
      if (v3) {
        uint64_t v5 = (_DWORD *)a3[1];
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v10 = v5;
      if ((*v5 & 0x20000000) == 0)
      {
        if ((*v5 & 0x10000000) != 0)
        {
          int v11 = 0;
          uint64_t v12 = 6;
        }
        else
        {
          int v11 = v5[7];
          uint64_t v12 = 8;
        }
        int v7 = v11 - v5[v12];
        unsigned int v6 = v7 & 0xFFFFFF00;
        goto LABEL_7;
      }
      v13[0] = *a3;
      v13[1] = (uint64_t)v3;
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(a1, v13, (uint64_t)&v14);
      LOBYTE(v7) = v16;
      if (v16)
      {
        if ((*((unsigned char *)v10 + 3) & 0x10) != 0)
        {
          int v7 = -v14 - v10[8];
          unsigned int v6 = v7 & 0xFFFFFF00;
        }
        else
        {
          LOBYTE(v7) = v15;
          unsigned int v6 = v15 & 0xFFFFFF00;
        }
        goto LABEL_7;
      }
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      LOBYTE(v7) = 0;
    }
    unsigned int v6 = 0;
    return v8 & 0x100000000 | v6 & 0xFFFFFF00 | v7;
  }
  unsigned int v6 = 0;
  LOBYTE(v7) = 2;
LABEL_7:
  uint64_t v8 = 0x100000000;
  return v8 & 0x100000000 | v6 & 0xFFFFFF00 | v7;
}

unsigned char *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[1];
  if (v5) {
    uint64_t result = (unsigned char *)a2[1];
  }
  else {
    uint64_t result = 0;
  }
  if ((result[3] & 0x20) == 0) {
    goto LABEL_5;
  }
  int v7 = result;
  uint64_t v8 = *a2;
  if (result)
  {
    uint64_t result = (unsigned char *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(result);
    if (v5) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t result = (unsigned char *)swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetTypeGenericContextDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetResilientSuperclass<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetForeignMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetSingletonMetadataInitialization<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetVTableDescriptorHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetOverrideTableHeader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetMethodOverrideDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetObjCResilientClassStubInfo<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(0);
    if (v5)
    {
LABEL_8:
      uint64_t v9 = v5;
      uint64_t v10 = *(int *)result;
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_12;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(int *)result;
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = xmmword_C6780;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
LABEL_12:
  uint64_t v11 = (uint64_t)&result[v8 - v9 + v10];
  if (!v11) {
    goto LABEL_5;
  }
  int v12 = (*v7 >> 25) & 7;
  uint64_t v13 = a1;
  return (unsigned char *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>(a1, v12, v11, &v13, a3);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a3;
  uint64_t v8 = result;
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t v17 = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(result + 2488) + 32))(*(void *)(result + 2488), a3, &v17, 8);
      if (!result) {
        goto LABEL_19;
      }
      uint64_t v7 = v17;
LABEL_4:
      uint64_t result = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t, uint64_t))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v15, v8, v7);
      if (!v16 || (*v16 & 0x1F) != 0x10) {
        goto LABEL_19;
      }
      uint64_t v9 = *a4;
      uint64_t v17 = v15;
      uint64_t v18 = v16;
      uint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(v9, &v17);
      break;
    case 3:
      uint64_t v15 = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(result + 2488) + 32))(*(void *)(result + 2488), a3, &v15, 8);
      if ((result & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(v8, v15, &v17);
      if (!v18) {
        goto LABEL_19;
      }
      if (*(void *)v18 <= 0x7FFuLL && *(void *)v18 != 0) {
        goto LABEL_19;
      }
      unint64_t v11 = v18[9];
      unint64_t v12 = v18[8] - v11;
      uint64_t v13 = v11 >> 3;
      if (v13 < 3) {
        uint64_t v13 = 3;
      }
      unint64_t v14 = (v12 << 29) & 0xFFFFFFFF00000000;
      if ((v12 >> 3) < 7) {
        unint64_t v14 = 0x700000000;
      }
      *(void *)a5 = v14 | v13;
      *(void *)(a5 + 8) = v12;
      *(unsigned char *)(a5 + 16) = 1;
      break;
    default:
LABEL_19:
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 16) = 0;
      break;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsObject::$_0>(swift_reflection_ownsObject::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a2;
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (!v4) {
    return 1;
  }

  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(v2, MetadataFromInstance, 1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsObject::$_0>(swift_reflection_ownsObject::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a2;
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (!v4) {
    return 1;
  }

  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(v2, MetadataFromInstance, 1);
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(uint64_t a1, unint64_t a2)
{
  if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getTaggedPointerEncoding(a1) == 2
    && ((*(void *)(a1 + 232) ^ a2) & *(void *)(a1 + 168)) != 0)
  {
    uint64_t MetadataFromTaggedPointer = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromTaggedPointer(a1, a2);
    unint64_t v5 = MetadataFromTaggedPointer & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    if ((*(unsigned int (**)(void, unint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, &v7, 8))
    {
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(a1);
    }
    LOBYTE(MetadataFromTaggedPointer) = 0;
    unint64_t v5 = 0;
  }
  return v5 & 0xFFFFFFFFFFFFFF00 | MetadataFromTaggedPointer;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(void *a1, unint64_t a2, int a3)
{
  char v4 = (unint64_t *)a1[320];
  unint64_t v5 = (unint64_t *)a1[321];
  if (v4 == v5)
  {
LABEL_7:
    uint64_t v7 = (unint64_t *)a1[323];
    uint64_t v8 = (unint64_t *)a1[324];
    if (v7 == v8)
    {
LABEL_13:
      if (!a3) {
        return 0;
      }
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata((uint64_t)a1, a2, v15);
      if (!v15[1]) {
        return 0;
      }
      unint64_t AddressOfNominalTypeDescriptor = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, v15, 1);
      if (!AddressOfNominalTypeDescriptor) {
        return 0;
      }
      unint64_t v11 = (unint64_t *)a1[320];
      unint64_t v12 = (unint64_t *)a1[321];
      if (v11 == v12) {
        return 0;
      }
      while (*v11 > AddressOfNominalTypeDescriptor || v11[1] <= AddressOfNominalTypeDescriptor)
      {
        v11 += 2;
        if (v11 == v12) {
          return 0;
        }
      }
    }
    else
    {
      while (*v7 > a2 || v7[1] <= a2)
      {
        v7 += 2;
        if (v7 == v8) {
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    while (*v4 > a2 || v4[1] <= a2)
    {
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_7;
      }
    }
  }
  return 1;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromTaggedPointer(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 200);
  if (!v3 || (v3 & ~(*(void *)(a1 + 232) ^ a2)) != 0)
  {
    unint64_t v4 = (a2 >> *(void *)(a1 + 176)) & *(void *)(a1 + 184);
    uint64_t v5 = *(void *)(a1 + 192);
  }
  else
  {
    unint64_t v4 = (a2 >> *(void *)(a1 + 208)) & *(void *)(a1 + 216);
    uint64_t v5 = *(void *)(a1 + 224);
  }
  if ((*(unsigned int (**)(void, unint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v5 + 8 * v4, &v7, 8))
  {
    return *(void *)(a1 + 2504) & v7;
  }
  else
  {
    return 0;
  }
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getTaggedPointerEncoding(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 160);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 2488);
    std::string __p = operator new(0x20uLL);
    long long v23 = xmmword_C6790;
    strcpy((char *)__p, "objc_debug_taggedpointer_mask");
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 8))(v3, &__p);
    uint64_t v5 = v4;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(__p);
      if (!v5) {
        goto LABEL_39;
      }
    }
    else if (!v4)
    {
      goto LABEL_39;
    }
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v5, a1 + 168, 8))
    {
      uint64_t v6 = *(void *)(a1 + 2488);
      std::string __p = operator new(0x28uLL);
      long long v23 = xmmword_C67A0;
      strcpy((char *)__p, "objc_debug_taggedpointer_slot_shift");
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v6 + 8))(v6, &__p);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p);
      }
      if (v7
        && (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v7, a1 + 176, 8))
      {
        uint64_t v8 = *(void *)(a1 + 2488);
        std::string __p = operator new(0x28uLL);
        long long v23 = xmmword_C6750;
        strcpy((char *)__p, "objc_debug_taggedpointer_slot_mask");
        uint64_t v9 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v8 + 8))(v8, &__p);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p);
        }
        if (v9
          && (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v9, a1 + 184, 8))
        {
          uint64_t v10 = *(void *)(a1 + 2488);
          std::string __p = operator new(0x28uLL);
          long long v23 = xmmword_C67B0;
          strcpy((char *)__p, "objc_debug_taggedpointer_classes");
          uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v10 + 8))(v10, &__p);
          if (SHIBYTE(v23) < 0) {
            operator delete(__p);
          }
          if (v11)
          {
            *(void *)(a1 + 200) = 0;
            *(void *)(a1 + 192) = v11;
            uint64_t v12 = *(void *)(a1 + 2488);
            std::string __p = operator new(0x28uLL);
            long long v23 = xmmword_C6740;
            strcpy((char *)__p, "objc_debug_taggedpointer_ext_mask");
            uint64_t v13 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v12 + 8))(v12, &__p);
            if (SHIBYTE(v23) < 0) {
              operator delete(__p);
            }
            if (!v13
              || (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v13, a1 + 200, 8))
            {
              *(void *)(a1 + 208) = 0;
              uint64_t v14 = *(void *)(a1 + 2488);
              std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_ext_slot_shift");
              uint64_t v15 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v14 + 8))(v14, &__p);
              if (SHIBYTE(v23) < 0) {
                operator delete(__p);
              }
              if (!v15
                || (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v15, a1 + 208, 8))
              {
                *(void *)(a1 + 216) = 0;
                uint64_t v16 = *(void *)(a1 + 2488);
                std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_ext_slot_mask");
                uint64_t v17 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 8))(v16, &__p);
                if (SHIBYTE(v23) < 0) {
                  operator delete(__p);
                }
                if (!v17
                  || (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v17, a1 + 216, 8))
                {
                  uint64_t v18 = *(void *)(a1 + 2488);
                  std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_ext_classes");
                  uint64_t v19 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v18 + 8))(v18, &__p);
                  if (SHIBYTE(v23) < 0) {
                    operator delete(__p);
                  }
                  if (v19) {
                    *(void *)(a1 + 224) = v19;
                  }
                  *(void *)(a1 + 232) = 0;
                  uint64_t v20 = *(void *)(a1 + 2488);
                  std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_obfuscator");
                  uint64_t v21 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v20 + 8))(v20, &__p);
                  if (SHIBYTE(v23) < 0) {
                    operator delete(__p);
                  }
                  if (!v21
                    || (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488)
                                                                                         + 32))(*(void *)(a1 + 2488), v21, a1 + 232, 8))
                  {
                    uint64_t result = 2;
LABEL_40:
                    *(_DWORD *)(a1 + 160) = result;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_39:
    uint64_t result = 1;
    goto LABEL_40;
  }
  return result;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(uint64_t a1, unint64_t a2)
{
  if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getTaggedPointerEncoding(a1) == 2
    && ((*(void *)(a1 + 232) ^ a2) & *(void *)(a1 + 168)) != 0)
  {
    uint64_t MetadataFromTaggedPointer = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromTaggedPointer(a1, a2);
    unint64_t v5 = MetadataFromTaggedPointer & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    if ((*(unsigned int (**)(void, unint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, &v7, 8))
    {
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(a1);
    }
    LOBYTE(MetadataFromTaggedPointer) = 0;
    unint64_t v5 = 0;
  }
  return v5 & 0xFFFFFFFFFFFFFF00 | MetadataFromTaggedPointer;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(void *a1, unint64_t a2, int a3)
{
  uint64_t v4 = (unint64_t *)a1[320];
  unint64_t v5 = (unint64_t *)a1[321];
  if (v4 == v5)
  {
LABEL_7:
    uint64_t v7 = (unint64_t *)a1[323];
    uint64_t v8 = (unint64_t *)a1[324];
    if (v7 == v8)
    {
LABEL_13:
      if (!a3) {
        return 0;
      }
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata((uint64_t)a1, a2, v15);
      if (!v15[1]) {
        return 0;
      }
      unint64_t AddressOfNominalTypeDescriptor = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, v15, 1);
      if (!AddressOfNominalTypeDescriptor) {
        return 0;
      }
      uint64_t v11 = (unint64_t *)a1[320];
      uint64_t v12 = (unint64_t *)a1[321];
      if (v11 == v12) {
        return 0;
      }
      while (*v11 > AddressOfNominalTypeDescriptor || v11[1] <= AddressOfNominalTypeDescriptor)
      {
        v11 += 2;
        if (v11 == v12) {
          return 0;
        }
      }
    }
    else
    {
      while (*v7 > a2 || v7[1] <= a2)
      {
        v7 += 2;
        if (v7 == v8) {
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    while (*v4 > a2 || v4[1] <= a2)
    {
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_7;
      }
    }
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddress::$_0>(swift_reflection_ownsAddress::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, void **a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(*a2, ****a1, 1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddress::$_0>(swift_reflection_ownsAddress::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, void **a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(*a2, ****a1, 1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddressStrict::$_0>(swift_reflection_ownsAddressStrict::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = ****a1;
  uint64_t v4 = *(unint64_t **)(*a2 + 2560);
  unint64_t v5 = *(unint64_t **)(*a2 + 2568);
  if (v4 == v5)
  {
LABEL_7:
    uint64_t v7 = *(unint64_t **)(v2 + 2584);
    uint64_t v8 = *(unint64_t **)(v2 + 2592);
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      do
      {
        BOOL v9 = *v7 <= v3 && v7[1] > v3;
        uint64_t result = v9;
        if (v9) {
          break;
        }
        v7 += 2;
      }
      while (v7 != v8);
    }
  }
  else
  {
    while (*v4 > v3 || v4[1] <= v3)
    {
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_7;
      }
    }
    return 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddressStrict::$_0>(swift_reflection_ownsAddressStrict::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = ****a1;
  uint64_t v4 = *(unint64_t **)(*a2 + 2560);
  unint64_t v5 = *(unint64_t **)(*a2 + 2568);
  if (v4 == v5)
  {
LABEL_7:
    uint64_t v7 = *(unint64_t **)(v2 + 2584);
    uint64_t v8 = *(unint64_t **)(v2 + 2592);
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      do
      {
        BOOL v9 = *v7 <= v3 && v7[1] > v3;
        uint64_t result = v9;
        if (v9) {
          break;
        }
        v7 += 2;
      }
      while (v7 != v8);
    }
  }
  else
  {
    while (*v4 > v3 || v4[1] <= v3)
    {
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_7;
      }
    }
    return 1;
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long SwiftReflectionContext::withContext<unsigned long,swift_reflection_metadataForObject::$_0>(swift_reflection_metadataForObject::$_0 const&)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (!v3) {
    return 0;
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long SwiftReflectionContext::withContext<unsigned long,swift_reflection_metadataForObject::$_0>(swift_reflection_metadataForObject::$_0 const&)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_metadataNominalTypeDescriptor::$_0>(swift_reflection_metadataNominalTypeDescriptor::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(*a2, ****a1, v4);
  if (v4[1]) {
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(v2, v4, 1);
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_metadataNominalTypeDescriptor::$_0>(swift_reflection_metadataNominalTypeDescriptor::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(*a2, ****a1, v4);
  if (v4[1]) {
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(v2, v4, 1);
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataIsActor::$_0>(swift_reflection_metadataIsActor::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(*a2, ****a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataIsActor::$_0>(swift_reflection_metadataIsActor::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(*a2, ****a1);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(uint64_t a1, uint64_t a2)
{
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v16);
  if (!v17) {
    return 0;
  }
  if (*v17 <= 0x7FFuLL && *v17 != 0) {
    return 0;
  }
  if ((swift_reflection_classIsSwiftMask & v17[4]) == 0) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1 + 2504) & v17[8];
  if (!v4) {
    return 0;
  }
  unint64_t v5 = *(unint64_t **)(a1 + 2560);
  uint64_t v6 = *(unint64_t **)(a1 + 2568);
  if (v5 == v6) {
    return 0;
  }
  while (*v5 > v4 || v5[1] <= v4)
  {
    v5 += 2;
    if (v5 == v6) {
      return 0;
    }
  }
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v13);
  uint64_t v10 = v13;
  if (!v13)
  {
    uint64_t v8 = 0;
    uint64_t v13 = 0;
LABEL_21:
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void *))(*v15 + 40))(v15);
    }
    return v8;
  }
  unsigned int v11 = *v13;
  uint64_t v13 = 0;
  uint64_t v18 = v10;
  if (v15)
  {
    uint64_t v8 = (v11 >> 23) & 1;
    (*(void (**)(void *, _DWORD **))(*v15 + 48))(v15, &v18);
    goto LABEL_21;
  }
  uint64_t v12 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(v12);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(uint64_t a1, uint64_t a2)
{
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v16);
  if (!v17) {
    return 0;
  }
  if (*v17 <= 0x7FFuLL && *v17 != 0) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1 + 2504) & v17[5];
  if (!v4) {
    return 0;
  }
  unint64_t v5 = *(unint64_t **)(a1 + 2560);
  uint64_t v6 = *(unint64_t **)(a1 + 2568);
  if (v5 == v6) {
    return 0;
  }
  while (*v5 > v4 || v5[1] <= v4)
  {
    v5 += 2;
    if (v5 == v6) {
      return 0;
    }
  }
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v13);
  uint64_t v10 = v13;
  if (!v13)
  {
    uint64_t v8 = 0;
    uint64_t v13 = 0;
LABEL_20:
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void *))(*v15 + 40))(v15);
    }
    return v8;
  }
  unsigned int v11 = *v13;
  uint64_t v13 = 0;
  uint64_t v18 = v10;
  if (v15)
  {
    uint64_t v8 = (v11 >> 23) & 1;
    (*(void (**)(void *, _DWORD **))(*v15 + 48))(v15, &v18);
    goto LABEL_20;
  }
  uint64_t v12 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForInstance::$_0>(swift_reflection_typeRefForInstance::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForInstance::$_0>(swift_reflection_typeRefForInstance::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (v4) {
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(v2, MetadataFromInstance, 0, 50);
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForInstance::$_0>(swift_reflection_typeRefForInstance::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (v4) {
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(v2, MetadataFromInstance, 0, 50);
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMangledTypeName::$_0>(swift_reflection_typeRefForMangledTypeName::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_WORD *****a1, uint64_t *a2)
{
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMangledName(*a2, ****a1, (unint64_t)*(**a1)[1], v3);
  if (v4 == 1)
  {
    ((void (*)(void, uint64_t, void))v3[1])(v3[0], 3, 0);
  }
  else if (!v4)
  {
    return v3[0];
  }
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMangledTypeName::$_0>(swift_reflection_typeRefForMangledTypeName::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_WORD *****a1, uint64_t *a2)
{
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMangledName(*a2, ****a1, (unint64_t)*(**a1)[1], v3);
  if (v4 == 1)
  {
    ((void (*)(void, uint64_t, void))v3[1])(v3[0], 3, 0);
  }
  else if (!v4)
  {
    return v3[0];
  }
  return 0;
}

void *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMangledName@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  v10[1] = 0;
  v10[2] = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 2400;
  uint64_t v13 = 0;
  char v14 = 0;
  long long v49 = 0;
  v10[0] = off_C9440;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v47 = 0;
  BOOL v9 = 0;
  uint64_t v6 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v10, a2, a3, v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  uint64_t v50 = a1 + 296;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v50, v6, 0, a4);
  v10[0] = off_C9440;
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
  }
  else if (v49)
  {
    (*(void (**)(void))(*v49 + 40))();
  }
  v10[0] = off_C9418;
  unint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v11);
  if (v13) {
    *(unsigned char *)(v13 + 48) = 0;
  }
  return result;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char * SwiftReflectionContext::withContext<char *,swift_reflection_copyDemangledNameForProtocolDescriptor::$_0>(swift_reflection_copyDemangledNameForProtocolDescriptor::$_0 const&)::{lambda(char *&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  unint64_t v2 = **a1;
  uint64_t v3 = *a2;
  v22[1] = 0;
  v22[2] = 0;
  long long v23 = 0;
  uint64_t v24 = 2400;
  uint64_t v25 = 0;
  char v26 = 0;
  long long v61 = 0;
  v22[0] = off_C9440;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  int v59 = 0;
  DemanglingForContextDescriptor = (uint64_t *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(v3, **v2, (swift::Demangle::__runtime::NodeFactory *)v22);
  char v9 = 0;
  uint64_t v10 = 0x101010101010101;
  char v11 = 1;
  uint64_t v12 = 0x101010100000000;
  char v13 = 1;
  __int16 v14 = 256;
  char v15 = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v18[0] = off_C8B30;
  v18[1] = swift::Demangle::__runtime::genericParameterName;
  long long v19 = v18;
  swift::Demangle::__runtime::nodeToString((uint64_t *)__s1, DemanglingForContextDescriptor, (swift::Demangle::__runtime::Node *)&v9, v5);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v6 = strdup(__s1);
      goto LABEL_8;
    }
  }
  else
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = *(char **)__s1;
  uint64_t v6 = strdup(*(const char **)__s1);
  operator delete(v7);
LABEL_8:
  v22[0] = off_C9440;
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
  }
  else if (v61)
  {
    (*(void (**)(void))(*v61 + 40))();
  }
  v22[0] = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v23);
  if (v25) {
    *(unsigned char *)(v25 + 48) = 0;
  }
  return v6;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char * SwiftReflectionContext::withContext<char *,swift_reflection_copyDemangledNameForProtocolDescriptor::$_0>(swift_reflection_copyDemangledNameForProtocolDescriptor::$_0 const&)::{lambda(char *&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  unint64_t v2 = **a1;
  uint64_t v3 = *a2;
  v22[1] = 0;
  v22[2] = 0;
  long long v23 = 0;
  uint64_t v24 = 2400;
  uint64_t v25 = 0;
  char v26 = 0;
  long long v61 = 0;
  v22[0] = off_C9440;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  int v59 = 0;
  DemanglingForContextDescriptor = (uint64_t *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readDemanglingForContextDescriptor(v3, **v2, (swift::Demangle::__runtime::NodeFactory *)v22);
  char v9 = 0;
  uint64_t v10 = 0x101010101010101;
  char v11 = 1;
  uint64_t v12 = 0x101010100000000;
  char v13 = 1;
  __int16 v14 = 256;
  char v15 = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v18[0] = off_C8B30;
  v18[1] = swift::Demangle::__runtime::genericParameterName;
  long long v19 = v18;
  swift::Demangle::__runtime::nodeToString((uint64_t *)__s1, DemanglingForContextDescriptor, (swift::Demangle::__runtime::Node *)&v9, v5);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v6 = strdup(__s1);
      goto LABEL_8;
    }
  }
  else
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = *(char **)__s1;
  uint64_t v6 = strdup(*(const char **)__s1);
  operator delete(v7);
LABEL_8:
  v22[0] = off_C9440;
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
  }
  else if (v61)
  {
    (*(void (**)(void))(*v61 + 40))();
  }
  v22[0] = off_C9418;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v23);
  if (v25) {
    *(unsigned char *)(v25 + 48) = 0;
  }
  return v6;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForTypeRef::$_0>(swift_reflection_infoForTypeRef::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = ****a1;
  if (v5 && (uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v5, 0)) != 0)
  {
    uint64_t v8 = TypeInfo;
    int v9 = *(_DWORD *)(TypeInfo + 8);
    if (v9 == 1 || v9 == 4) {
      int v10 = -1431655765 * ((*(void *)(TypeInfo + 48) - *(void *)(TypeInfo + 40)) >> 4);
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)a3 = getTypeInfoKind(TypeInfo);
    double result = *(double *)(v8 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v8 + 20);
    *(_DWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForTypeRef::$_0>(swift_reflection_infoForTypeRef::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = ****a1;
  if (v5 && (uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v5, 0)) != 0)
  {
    uint64_t v8 = TypeInfo;
    int v9 = *(_DWORD *)(TypeInfo + 8);
    if (v9 == 1 || v9 == 4) {
      int v10 = -1431655765 * ((*(void *)(TypeInfo + 48) - *(void *)(TypeInfo + 40)) >> 4);
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)a3 = getTypeInfoKind(TypeInfo);
    double result = *(double *)(v8 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v8 + 20);
    *(_DWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfTypeRef::$_0>(swift_reflection_childOfTypeRef::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = **(void **)result;
  uint64_t v6 = **(void **)v5;
  if (v6 && (double result = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v6, 0)) != 0)
  {
    int v7 = *(_DWORD *)(result + 8);
    if (v7 == 1 || v7 == 4)
    {
      unsigned int v9 = **(_DWORD **)(v5 + 8);
      uint64_t v10 = *(void *)(result + 40);
      char v11 = (uint64_t **)(v10 + 48 * v9);
      if (*((char *)v11 + 23) < 0) {
        char v11 = (uint64_t **)*v11;
      }
      *(void *)a3 = v11;
      uint64_t v12 = v10 + 48 * v9;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v12 + 24);
      double result = getTypeInfoKind(*(void *)(v12 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(void *)(a3 + 16) = *(void *)(v12 + 32);
    }
    else
    {
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfTypeRef::$_0>(swift_reflection_childOfTypeRef::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = **(void **)result;
  uint64_t v6 = **(void **)v5;
  if (v6 && (double result = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v6, 0)) != 0)
  {
    int v7 = *(_DWORD *)(result + 8);
    if (v7 == 1 || v7 == 4)
    {
      unsigned int v9 = **(_DWORD **)(v5 + 8);
      uint64_t v10 = *(void *)(result + 40);
      char v11 = (uint64_t **)(v10 + 48 * v9);
      if (*((char *)v11 + 23) < 0) {
        char v11 = (uint64_t **)*v11;
      }
      *(void *)a3 = v11;
      uint64_t v12 = v10 + 48 * v9;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v12 + 24);
      double result = getTypeInfoKind(*(void *)(v12 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(void *)(a3 + 16) = *(void *)(v12 + 32);
    }
    else
    {
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForMetadata::$_0>(swift_reflection_infoForMetadata::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Metadatauint64_t TypeInfo = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
  {
    uint64_t v6 = MetadataTypeInfo;
    int v7 = *(_DWORD *)(MetadataTypeInfo + 8);
    if (v7 == 1 || v7 == 4) {
      int v8 = -1431655765 * ((*(void *)(MetadataTypeInfo + 48) - *(void *)(MetadataTypeInfo + 40)) >> 4);
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)a3 = getTypeInfoKind(MetadataTypeInfo);
    double result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForMetadata::$_0>(swift_reflection_infoForMetadata::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Metadatauint64_t TypeInfo = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
  {
    uint64_t v6 = MetadataTypeInfo;
    int v7 = *(_DWORD *)(MetadataTypeInfo + 8);
    if (v7 == 1 || v7 == 4) {
      int v8 = -1431655765 * ((*(void *)(MetadataTypeInfo + 48) - *(void *)(MetadataTypeInfo + 40)) >> 4);
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)a3 = getTypeInfoKind(MetadataTypeInfo);
    double result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v14 = a2;
  char v15 = (void *)v6;
  uint64_t v16 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16)&& v16 != (void *)(*(void *)(a1 + 2512) + 24 * *(unsigned int *)(a1 + 2528)))
  {
    return v16[2];
  }
  uint64_t TypeFromMetadata = (const swift::reflection::TypeRef *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, a2, 0, 50);
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
  uint64_t v9 = (uint64_t)v15;
  if (v15)
  {
    if (*v15 <= 0x7FFuLL) {
      uint64_t v9 = *v15 | 0x100000000;
    }
    else {
      uint64_t v9 = 0x100000000;
    }
  }
  ClassInstanceuint64_t TypeInfo = 0;
  if (TypeFromMetadata && (v9 & 0x100000000) != 0 && !v9)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
    if (v15
      && (*v15 > 0x7FFuLL || !*v15)
      && (uint64_t ObjCRODataPtr = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, a2)) != 0&& (LODWORD(v16) = 0, (*(unsigned int (**)(void, uint64_t, void **, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), ObjCRODataPtr + 4, &v16, 4)))
    {
      ClassInstanceuint64_t TypeInfo = swift::reflection::TypeConverter::getClassInstanceTypeInfo((swift::reflection::TypeRefBuilder **)(a1 + 920), TypeFromMetadata, (int)v16, a3);
    }
    else
    {
      ClassInstanceuint64_t TypeInfo = 0;
    }
  }
  uint64_t v14 = a2;
  char v15 = (void *)v6;
  uint64_t v16 = 0;
  char v11 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16);
  uint64_t v12 = v16;
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::InsertIntoBucketImpl<std::pair<unsigned long long,void *>>(a1 + 2512, (uint64_t)&v14, &v14, v16);
    *uint64_t v12 = v14;
    v12[1] = v15;
    void v12[2] = 0;
  }
  void v12[2] = ClassInstanceTypeInfo;
  return ClassInstanceTypeInfo;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a2[1];
    unint64_t v6 = ((0x2500000000 * *a2) | (v5 >> 4) ^ (v5 >> 9))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    uint64_t v12 = (void *)(*a1 + 24 * v11);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    if (*a2 == *v12 && v5 == v13)
    {
      uint64_t result = 1;
      *a3 = v12;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v14 != -1 || v13 != -4096)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v13 == -8192;
        }
        if (v19 && v14 == -2) {
          uint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v10;
        uint64_t v12 = (void *)(v4 + 24 * (v21 & v10));
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        if (*a2 == *v12 && v5 == v13)
        {
          *a3 = v12;
          return result;
        }
      }
      uint64_t result = 0;
      if (v16) {
        uint64_t v12 = v16;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

void *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::InsertIntoBucketImpl<std::pair<unsigned long long,void *>>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::grow(a1, v7);
    int v9 = 0;
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (!v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (!v13) {
      return;
    }
    unint64_t v14 = 24 * v13 - 24;
    if (v14 >= 0x18)
    {
      unint64_t v25 = v14 / 0x18 + 1;
      char v15 = (_OWORD *)((char *)buffer + 24 * (v25 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v27 = buffer;
      do
      {
        _OWORD *v27 = xmmword_C67C0;
        *(_OWORD *)((char *)v27 + 24) = xmmword_C67C0;
        v27 += 3;
        v26 -= 2;
      }
      while (v26);
      if (v25 == (v25 & 0x1FFFFFFFFFFFFFFELL)) {
        return;
      }
    }
    else
    {
      char v15 = buffer;
    }
    uint64_t v28 = (_OWORD *)((char *)buffer + 24 * v13);
    do
    {
      *char v15 = xmmword_C67C0;
      char v15 = (_OWORD *)((char *)v15 + 24);
    }
    while (v15 != v28);
    return;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = (_OWORD *)((char *)buffer + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      char v18 = buffer;
      do
      {
        *char v18 = xmmword_C67C0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_C67C0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v12 = buffer;
    }
    BOOL v19 = (_OWORD *)((char *)buffer + 24 * v10);
    do
    {
      *uint64_t v12 = xmmword_C67C0;
      uint64_t v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
  }
LABEL_16:
  if (v3)
  {
    uint64_t v20 = 24 * v3;
    unsigned int v21 = v4;
    do
    {
      uint64_t v24 = *((void *)v21 + 1);
      if ((*(void *)v21 != -1 || v24 != -4096) && (*(void *)v21 != -2 || v24 != -8192))
      {
        uint64_t v29 = 0;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)a1, v21, &v29);
        long long v22 = v29;
        uint64_t v23 = *((void *)v21 + 1);
        *uint64_t v29 = *(void *)v21;
        v22[1] = v23;
        v22[2] = *((void *)v21 + 2);
        ++*(_DWORD *)(a1 + 8);
      }
      unsigned int v21 = (__swift::__runtime::llvm *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
  }
  __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(24 * v3), (std::align_val_t)8uLL);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v14 = a2;
  char v15 = (void *)v6;
  unint64_t v16 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16)&& v16 != (void *)(*(void *)(a1 + 2512) + 24 * *(unsigned int *)(a1 + 2528)))
  {
    return v16[2];
  }
  uint64_t TypeFromMetadata = (const swift::reflection::TypeRef *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, a2, 0, 50);
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
  uint64_t v9 = (uint64_t)v15;
  if (v15)
  {
    if (*v15 <= 0x7FFuLL) {
      uint64_t v9 = *v15 | 0x100000000;
    }
    else {
      uint64_t v9 = 0x100000000;
    }
  }
  ClassInstanceuint64_t TypeInfo = 0;
  if (TypeFromMetadata && (v9 & 0x100000000) != 0 && !v9)
  {
    uint64_t InstanceStartFromClassMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readInstanceStartFromClassMetadata(a1, a2);
    if ((InstanceStartFromClassMetadata & 0xFF00000000) != 0) {
      ClassInstanceuint64_t TypeInfo = swift::reflection::TypeConverter::getClassInstanceTypeInfo((swift::reflection::TypeRefBuilder **)(a1 + 920), TypeFromMetadata, InstanceStartFromClassMetadata, a3);
    }
    else {
      ClassInstanceuint64_t TypeInfo = 0;
    }
  }
  uint64_t v14 = a2;
  char v15 = (void *)v6;
  unint64_t v16 = 0;
  char v11 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16);
  uint64_t v12 = v16;
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::InsertIntoBucketImpl<std::pair<unsigned long long,void *>>(a1 + 2512, (uint64_t)&v14, &v14, v16);
    *uint64_t v12 = v14;
    v12[1] = v15;
    void v12[2] = 0;
  }
  void v12[2] = ClassInstanceTypeInfo;
  return ClassInstanceTypeInfo;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readInstanceStartFromClassMetadata(uint64_t a1, uint64_t a2)
{
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
  unint64_t v3 = (unint64_t)v15;
  if (!v15) {
    goto LABEL_17;
  }
  if (*v15 <= 0x7FFuLL && *v15 != 0)
  {
LABEL_16:
    unint64_t v3 = 0;
LABEL_17:
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    return v9 | v3 | v10;
  }
  uint64_t v5 = v15[1];
  uint64_t v6 = *(void *)(a1 + 2504);
  for (i = 16; (v6 & v5) != 0; uint64_t v6 = *(void *)(a1 + 2504))
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v5 & v6, &v12);
    unint64_t v3 = v13;
    uint64_t v14 = v12;
    char v15 = (void *)v13;
    if (!v13) {
      goto LABEL_17;
    }
    if (*(void *)v13 <= 0x7FFuLL && *(void *)v13 != 0) {
      goto LABEL_16;
    }
    int i = i + *(_DWORD *)(v13 + 24) - 16;
    uint64_t v5 = *(void *)(v13 + 8);
  }
  uint64_t v9 = i & 0xFFFFFF00;
  unint64_t v3 = i;
  uint64_t v10 = 0x100000000;
  return v9 | v3 | v10;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfMetadata::$_0>(swift_reflection_childOfMetadata::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t result = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, **(void **)v4, 0);
  if (result)
  {
    int v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      unsigned int v8 = **(_DWORD **)(v4 + 8);
      uint64_t v9 = *(void *)(result + 40);
      uint64_t v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0) {
        uint64_t v10 = (uint64_t **)*v10;
      }
      *(void *)a3 = v10;
      uint64_t v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      uint64_t result = getTypeInfoKind(*(void *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(void *)(a3 + 16) = *(void *)(v11 + 32);
    }
    else
    {
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfMetadata::$_0>(swift_reflection_childOfMetadata::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t result = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, **(void **)v4, 0);
  if (result)
  {
    int v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      unsigned int v8 = **(_DWORD **)(v4 + 8);
      uint64_t v9 = *(void *)(result + 40);
      uint64_t v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0) {
        uint64_t v10 = (uint64_t **)*v10;
      }
      *(void *)a3 = v10;
      uint64_t v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      uint64_t result = getTypeInfoKind(*(void *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(void *)(a3 + 16) = *(void *)(v11 + 32);
    }
    else
    {
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForInstance::$_0>(swift_reflection_infoForInstance::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(unint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Instanceuint64_t TypeInfo = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
  {
    uint64_t v6 = InstanceTypeInfo;
    int v7 = *(_DWORD *)(InstanceTypeInfo + 8);
    if (v7 == 1 || v7 == 4) {
      int v8 = -1431655765 * ((*(void *)(InstanceTypeInfo + 48) - *(void *)(InstanceTypeInfo + 40)) >> 4);
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)a3 = getTypeInfoKind(InstanceTypeInfo);
    double result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForInstance::$_0>(swift_reflection_infoForInstance::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(unint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Instanceuint64_t TypeInfo = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
  {
    uint64_t v6 = InstanceTypeInfo;
    int v7 = *(_DWORD *)(InstanceTypeInfo + 8);
    if (v7 == 1 || v7 == 4) {
      int v8 = -1431655765 * ((*(void *)(InstanceTypeInfo + 48) - *(void *)(InstanceTypeInfo + 40)) >> 4);
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)a3 = getTypeInfoKind(InstanceTypeInfo);
    double result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = MetadataFromInstance;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v17);
  if (!v18) {
    return 0;
  }
  uint64_t v9 = *v18;
  if ((unint64_t)*v18 > 0x7FF) {
    LODWORD(v9) = 0;
  }
  if (v9 == 1280)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, (uint64_t *)&v17);
    if (v18)
    {
      uint64_t v11 = v18[2];
      unint64_t v10 = a1;
      return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
    }
    return 0;
  }
  if (v9 == 1024)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, &v22);
    if (v23 && *v23 == 1024)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 2488) + 40))(&v17);
      uint64_t v14 = v17;
      unint64_t v13 = (unint64_t)v18;
      int v15 = (char)v19;
      if ((v19 & 0x80u) == 0) {
        unint64_t v13 = v19;
      }
      if (v13
        || (swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getCaptureDescriptor((swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *)(a1 + 1976), v20, v21), !v21[0]))
      {
        uint64_t ClosureContextInfo = 0;
        if ((v15 & 0x80000000) == 0) {
          return ClosureContextInfo;
        }
      }
      else
      {
        uint64_t v22 = v21[0];
        uint64_t v23 = (void *)v21[1];
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo((void *)(a1 + 1976), (const char *)&v22, (uint64_t)&v17);
        uint64_t ClosureContextInfo = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(a1, a2, (uint64_t)&v17, a3);
        swift::reflection::ClosureContextInfo::~ClosureContextInfo((swift::reflection::ClosureContextInfo *)&v17);
        if ((v15 & 0x80000000) == 0) {
          return ClosureContextInfo;
        }
      }
      operator delete(v14);
      return ClosureContextInfo;
    }
    return 0;
  }
  if (v9) {
    return 0;
  }
  unint64_t v10 = a1;
  uint64_t v11 = v8;
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (swift::reflection::TypeConverter *)(a1 + 920);
  v51[0] = a1 + 920;
  v51[1] = 0x100000000;
  int v52 = 0;
  char v53 = 1;
  int v54 = 9;
  long long v56 = 0;
  uint64_t v57 = 0;
  long long v55 = 0;
  __int16 v58 = 1;
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v10
    || (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v48), !v49)|| *v49 != 1024)
  {
    uint64_t v35 = 0;
    long long v36 = (void **)v55;
    if (!v55) {
      return v35;
    }
    goto LABEL_53;
  }
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, *((_DWORD *)v49 + 2), 8u, 0, 1);
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, 8 * *(_DWORD *)(a3 + 48), 8u, 0, 1);
  long long v49 = 0;
  uint64_t v50 = 0;
  long long v48 = (uint64_t *)&v49;
  v46[0] = 0;
  v46[1] = 0;
  unsigned int v47 = 0;
  uint64_t v11 = *(const swift::reflection::TypeRef ***)a3;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (!v12) {
    goto LABEL_51;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  while (1)
  {
    uint64_t v14 = *v11;
    if (!*v11) {
      break;
    }
    uint64_t v43 = v13;
    if (swift::reflection::TypeRef::isConcreteAfterSubstitutions((uint64_t)v14, (uint64_t *)v46))
    {
      uint64_t v14 = (const swift::reflection::TypeRef *)swift::reflection::TypeRef::subst((uint64_t)v14, a1 + 296, (uint64_t *)v46);
      if (v14) {
        goto LABEL_9;
      }
    }
    else if (swift::reflection::TypeConverter::hasFixedSize(v8, v14))
    {
LABEL_9:
      char v45 = 0;
      LOBYTE(__p) = 0;
      swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v51, (uint64_t)&__p, (uint64_t)v14, a4);
      if (v45 < 0) {
        operator delete(__p);
      }
      if (!HIBYTE(v58))
      {
        uint64_t v13 = v43 - 1;
        ++v11;
        goto LABEL_50;
      }
      break;
    }
    long long v42 = v11;
    unint64_t v16 = *(unint64_t **)(a3 + 24);
    int v15 = *(unint64_t **)(a3 + 32);
    if (v16 == v15) {
      break;
    }
    char v17 = 0;
    while (2)
    {
      unint64_t v19 = *v16;
      unint64_t v20 = v16[1];
      for (int i = v49; i; int i = (uint64_t *)*i)
      {
        unint64_t v24 = i[4];
        if (v19 >= v24)
        {
          if (v24 >= v19)
          {
            unint64_t v25 = i[5];
            if (v20 < v25) {
              continue;
            }
            if (v25 >= v20) {
              goto LABEL_19;
            }
          }
          ++i;
        }
      }
      if (!v20) {
        goto LABEL_19;
      }
      unint64_t v22 = v16[1];
      while (1)
      {
        int v23 = *(_DWORD *)(v22 + 8);
        if (v23 != 3) {
          break;
        }
        unint64_t v22 = *(void *)(v22 + 16);
        if (!v22) {
          goto LABEL_19;
        }
      }
      switch(v23)
      {
        case 0:
        case 4:
        case 5:
          goto LABEL_35;
        case 1:
        case 2:
          if (*(_DWORD *)(v22 + 12) >= -1431655765
                                      * ((unint64_t)((char *)v56 - (unsigned char *)v55) >> 4))
            goto LABEL_19;
LABEL_35:
          unint64_t MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, v16[1], (uint64_t)v51);
          if (!v27) {
            goto LABEL_61;
          }
          uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataSource, 0, 50);
          if (!TypeFromMetadata
            || !swift::reflection::TypeRef::deriveSubstitutions((uint64_t)v46, v19, TypeFromMetadata))
          {
            goto LABEL_61;
          }
          uint64_t v29 = v49;
          char v30 = &v49;
          long long v31 = &v49;
          if (!v49) {
            goto LABEL_47;
          }
          break;
        default:
          abort();
      }
      do
      {
        while (1)
        {
          long long v31 = (uint64_t **)v29;
          unint64_t v32 = v29[4];
          if (v19 >= v32)
          {
            if (v32 < v19) {
              goto LABEL_45;
            }
            long long v33 = v31[5];
            if (v20 >= (unint64_t)v33) {
              break;
            }
          }
          uint64_t v29 = *v31;
          char v30 = v31;
          if (!*v31) {
            goto LABEL_47;
          }
        }
        if ((unint64_t)v33 >= v20) {
          goto LABEL_18;
        }
LABEL_45:
        uint64_t v29 = v31[1];
      }
      while (v29);
      char v30 = v31 + 1;
LABEL_47:
      long long v34 = (uint64_t *)operator new(0x30uLL);
      v34[4] = v19;
      v34[5] = v20;
      *long long v34 = 0;
      v34[1] = 0;
      void v34[2] = (uint64_t)v31;
      *char v30 = v34;
      if (*v48)
      {
        long long v48 = (uint64_t *)*v48;
        char v18 = *v30;
      }
      else
      {
        char v18 = v34;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v49, v18);
      ++v50;
LABEL_18:
      char v17 = 1;
LABEL_19:
      v16 += 2;
      if (v16 != v15) {
        continue;
      }
      break;
    }
    a3 = v40;
    a4 = v41;
    uint64_t v11 = v42;
    uint64_t v13 = v43;
    if ((v17 & 1) == 0) {
      break;
    }
LABEL_50:
    if (!v13)
    {
LABEL_51:
      uint64_t v35 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v51);
      goto LABEL_62;
    }
  }
LABEL_61:
  uint64_t v35 = 0;
LABEL_62:
  __swift::__runtime::llvm::deallocate_buffer(v46[0], (void *)(16 * v47), (std::align_val_t)8uLL);
  std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy((uint64_t)&v48, v49);
  long long v36 = (void **)v55;
  if (v55)
  {
LABEL_53:
    long long v37 = v56;
    long long v38 = v36;
    if (v56 != v36)
    {
      do
      {
        if (*((char *)v37 - 25) < 0) {
          operator delete(*(v37 - 6));
        }
        v37 -= 6;
      }
      while (v37 != v36);
      long long v38 = v55;
    }
    long long v56 = v36;
    operator delete(v38);
  }
  return v35;
}

void swift::reflection::ClosureContextInfo::~ClosureContextInfo(swift::reflection::ClosureContextInfo *this)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      uint64_t v6 = (8 * *(_DWORD *)(a3 + 12) + 16);
      goto LABEL_4;
    case 1:
      uint64_t v12 = *(unsigned int *)(*(void *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
      unint64_t v14 = 0;
      if (((*(uint64_t (**)(void, uint64_t, unint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v12 + a2, &v14, 8) & 1) == 0)goto LABEL_12; {
      unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v14);
      }
      unint64_t v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      break;
    case 2:
      uint64_t v6 = *(unsigned int *)(*(void *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
LABEL_4:
      unint64_t v14 = 0;
      if (((*(uint64_t (**)(void, uint64_t, unint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v6 + a2, &v14, 8) & 1) == 0)goto LABEL_12; {
      LOBYTE(MetadataFromInstance) = v14;
      }
      unint64_t v8 = v14 & 0xFFFFFFFFFFFFFF00;
      break;
    case 3:
      uint64_t MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, *(void *)(a3 + 16));
      if (!v10) {
        goto LABEL_12;
      }
      unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(a1, MetadataSource, *(_DWORD *)(a3 + 12));
      unint64_t v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      if (!v11)
      {
        LOBYTE(MetadataFromInstance) = 0;
        unint64_t v8 = 0;
      }
      break;
    default:
LABEL_12:
      LOBYTE(MetadataFromInstance) = 0;
      unint64_t v8 = 0;
      break;
  }
  return v8 | MetadataFromInstance;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(uint64_t a1, uint64_t a2, unsigned int a3)
{
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v18);
  if (!v19) {
    goto LABEL_20;
  }
  unsigned __int8 v5 = 0;
  uint64_t v6 = *v19;
  if ((unint64_t)*v19 > 0x7FF) {
    LODWORD(v6) = 0;
  }
  if ((int)v6 <= 514)
  {
    if ((v6 - 512) >= 3)
    {
      unint64_t GenericContext = 0;
      if (v6) {
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
      if ((swift_reflection_classIsSwiftMask & v19[4]) == 0) {
        goto LABEL_20;
      }
      unint64_t v8 = v19 + 8;
LABEL_12:
      if ((*(void *)(a1 + 2504) & *v8) == 0)
      {
        unsigned __int8 v5 = 0;
        unint64_t GenericContext = 0;
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
      ((void (*)(uint64_t *__return_ptr, uint64_t))swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v16, a1);
      unint64_t GenericContext = (unint64_t)v17;
      if (!v17
        || (unint64_t GenericContext = swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext(v17)) == 0)
      {
        unsigned __int8 v5 = 0;
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
      unint64_t v9 = GenericContext;
      v15[0] = v18;
      v15[1] = v19;
      v14[0] = v16;
      v14[1] = (uint64_t)v17;
      uint64_t GenericArgsOffset = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgsOffset(a1, (uint64_t)v15, v14);
      if ((GenericArgsOffset & 0xFF00000000) != 0 && *(unsigned __int16 *)(v9 + 8) > a3)
      {
        uint64_t v13 = 0;
        int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), 8 * (int)GenericArgsOffset + 8 * a3 + v18, &v13, 8);
        unsigned __int8 v5 = v13;
        if (v11)
        {
          unint64_t GenericContext = v13 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          unsigned __int8 v5 = 0;
          unint64_t GenericContext = 0;
        }
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
LABEL_20:
      unsigned __int8 v5 = 0;
      unint64_t GenericContext = 0;
      return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
    }
LABEL_11:
    unint64_t v8 = v19 + 1;
    goto LABEL_12;
  }
  if (v6 == 515) {
    goto LABEL_11;
  }
  unint64_t GenericContext = 0;
  if (v6 == 516) {
    goto LABEL_11;
  }
  return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = a2[2];
      if (*(unsigned char *)(v2 + 24)) {
        break;
      }
      unint64_t v3 = *(uint64_t **)(v2 + 16);
      uint64_t v4 = *v3;
      if (*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unsigned __int8 v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            unint64_t v9 = (uint64_t *)a2[2];
          }
          else
          {
            unint64_t v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              unint64_t v3 = *(uint64_t **)(v2 + 16);
            }
            void v9[2] = (uint64_t)v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            uint64_t *v9 = v2;
            *(void *)(v2 + 16) = v9;
            unint64_t v3 = (uint64_t *)v9[2];
            uint64_t v2 = *v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v14 = *(void *)(v2 + 8);
          uint64_t *v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          *(void *)(v2 + 16) = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          *(void *)(v2 + 8) = v3;
          void v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), unsigned __int8 v5 = (unsigned char *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          uint64_t v11 = a2[1];
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(void *)(v2 + 16) = a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v12 = (uint64_t *)v3[1];
        uint64_t v13 = *v12;
        v3[1] = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        void v12[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v12;
        *uint64_t v12 = (uint64_t)v3;
        void v3[2] = (uint64_t)v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unsigned __int8 v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy(a1, *a2);
    std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = MetadataFromInstance;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v17);
  if (!v18) {
    return 0;
  }
  uint64_t v9 = *v18;
  if ((unint64_t)*v18 > 0x7FF) {
    LODWORD(v9) = 0;
  }
  if (v9 == 1280)
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, (uint64_t *)&v17);
    if (v18)
    {
      uint64_t v11 = v18[2];
      unint64_t v10 = a1;
      return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
    }
    return 0;
  }
  if (v9 == 1024)
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, &v22);
    if (v23 && *v23 == 1024)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 2488) + 40))(&v17);
      uint64_t v14 = v17;
      unint64_t v13 = (unint64_t)v18;
      int v15 = (char)v19;
      if ((v19 & 0x80u) == 0) {
        unint64_t v13 = v19;
      }
      if (v13
        || (swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getCaptureDescriptor((swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *)(a1 + 1976), v20, v21), !v21[0]))
      {
        uint64_t ClosureContextInfo = 0;
        if ((v15 & 0x80000000) == 0) {
          return ClosureContextInfo;
        }
      }
      else
      {
        uint64_t v22 = v21[0];
        int v23 = (void *)v21[1];
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo((void *)(a1 + 1976), (const char *)&v22, (uint64_t)&v17);
        uint64_t ClosureContextInfo = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(a1, a2, (uint64_t)&v17, a3);
        swift::reflection::ClosureContextInfo::~ClosureContextInfo((swift::reflection::ClosureContextInfo *)&v17);
        if ((v15 & 0x80000000) == 0) {
          return ClosureContextInfo;
        }
      }
      operator delete(v14);
      return ClosureContextInfo;
    }
    return 0;
  }
  if (v9) {
    return 0;
  }
  unint64_t v10 = a1;
  uint64_t v11 = v8;
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (swift::reflection::TypeConverter *)(a1 + 920);
  v51[0] = a1 + 920;
  v51[1] = 0x100000000;
  int v52 = 0;
  char v53 = 1;
  int v54 = 9;
  long long v56 = 0;
  uint64_t v57 = 0;
  long long v55 = 0;
  __int16 v58 = 1;
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v10
    || (swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v48), !v49)|| *v49 != 1024)
  {
    uint64_t v35 = 0;
    long long v36 = (void **)v55;
    if (!v55) {
      return v35;
    }
    goto LABEL_53;
  }
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, *((_DWORD *)v49 + 2), 8u, 0, 1);
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, 8 * *(_DWORD *)(a3 + 48), 8u, 0, 1);
  long long v49 = 0;
  uint64_t v50 = 0;
  long long v48 = (uint64_t *)&v49;
  v46[0] = 0;
  v46[1] = 0;
  unsigned int v47 = 0;
  uint64_t v11 = *(const swift::reflection::TypeRef ***)a3;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (!v12) {
    goto LABEL_51;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  while (1)
  {
    uint64_t v14 = *v11;
    if (!*v11) {
      break;
    }
    uint64_t v43 = v13;
    if (swift::reflection::TypeRef::isConcreteAfterSubstitutions((uint64_t)v14, (uint64_t *)v46))
    {
      uint64_t v14 = (const swift::reflection::TypeRef *)swift::reflection::TypeRef::subst((uint64_t)v14, a1 + 296, (uint64_t *)v46);
      if (v14) {
        goto LABEL_9;
      }
    }
    else if (swift::reflection::TypeConverter::hasFixedSize(v8, v14))
    {
LABEL_9:
      char v45 = 0;
      LOBYTE(__p) = 0;
      swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v51, (uint64_t)&__p, (uint64_t)v14, a4);
      if (v45 < 0) {
        operator delete(__p);
      }
      if (!HIBYTE(v58))
      {
        uint64_t v13 = v43 - 1;
        ++v11;
        goto LABEL_50;
      }
      break;
    }
    long long v42 = v11;
    uint64_t v16 = *(unint64_t **)(a3 + 24);
    int v15 = *(unint64_t **)(a3 + 32);
    if (v16 == v15) {
      break;
    }
    char v17 = 0;
    while (2)
    {
      unint64_t v19 = *v16;
      unint64_t v20 = v16[1];
      for (int i = v49; i; int i = (uint64_t *)*i)
      {
        unint64_t v24 = i[4];
        if (v19 >= v24)
        {
          if (v24 >= v19)
          {
            unint64_t v25 = i[5];
            if (v20 < v25) {
              continue;
            }
            if (v25 >= v20) {
              goto LABEL_19;
            }
          }
          ++i;
        }
      }
      if (!v20) {
        goto LABEL_19;
      }
      unint64_t v22 = v16[1];
      while (1)
      {
        int v23 = *(_DWORD *)(v22 + 8);
        if (v23 != 3) {
          break;
        }
        unint64_t v22 = *(void *)(v22 + 16);
        if (!v22) {
          goto LABEL_19;
        }
      }
      switch(v23)
      {
        case 0:
        case 4:
        case 5:
          goto LABEL_35;
        case 1:
        case 2:
          if (*(_DWORD *)(v22 + 12) >= -1431655765
                                      * ((unint64_t)((char *)v56 - (unsigned char *)v55) >> 4))
            goto LABEL_19;
LABEL_35:
          unint64_t MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, v16[1], (uint64_t)v51);
          if (!v27) {
            goto LABEL_61;
          }
          uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataSource, 0, 50);
          if (!TypeFromMetadata
            || !swift::reflection::TypeRef::deriveSubstitutions((uint64_t)v46, v19, TypeFromMetadata))
          {
            goto LABEL_61;
          }
          uint64_t v29 = v49;
          char v30 = &v49;
          long long v31 = &v49;
          if (!v49) {
            goto LABEL_47;
          }
          break;
        default:
          abort();
      }
      do
      {
        while (1)
        {
          long long v31 = (uint64_t **)v29;
          unint64_t v32 = v29[4];
          if (v19 >= v32)
          {
            if (v32 < v19) {
              goto LABEL_45;
            }
            long long v33 = v31[5];
            if (v20 >= (unint64_t)v33) {
              break;
            }
          }
          uint64_t v29 = *v31;
          char v30 = v31;
          if (!*v31) {
            goto LABEL_47;
          }
        }
        if ((unint64_t)v33 >= v20) {
          goto LABEL_18;
        }
LABEL_45:
        uint64_t v29 = v31[1];
      }
      while (v29);
      char v30 = v31 + 1;
LABEL_47:
      long long v34 = (uint64_t *)operator new(0x30uLL);
      v34[4] = v19;
      v34[5] = v20;
      *long long v34 = 0;
      v34[1] = 0;
      void v34[2] = (uint64_t)v31;
      *char v30 = v34;
      if (*v48)
      {
        long long v48 = (uint64_t *)*v48;
        uint64_t v18 = *v30;
      }
      else
      {
        uint64_t v18 = v34;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v49, v18);
      ++v50;
LABEL_18:
      char v17 = 1;
LABEL_19:
      v16 += 2;
      if (v16 != v15) {
        continue;
      }
      break;
    }
    a3 = v40;
    a4 = v41;
    uint64_t v11 = v42;
    uint64_t v13 = v43;
    if ((v17 & 1) == 0) {
      break;
    }
LABEL_50:
    if (!v13)
    {
LABEL_51:
      uint64_t v35 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v51);
      goto LABEL_62;
    }
  }
LABEL_61:
  uint64_t v35 = 0;
LABEL_62:
  __swift::__runtime::llvm::deallocate_buffer(v46[0], (void *)(16 * v47), (std::align_val_t)8uLL);
  std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy((uint64_t)&v48, v49);
  long long v36 = (void **)v55;
  if (v55)
  {
LABEL_53:
    long long v37 = v56;
    long long v38 = v36;
    if (v56 != v36)
    {
      do
      {
        if (*((char *)v37 - 25) < 0) {
          operator delete(*(v37 - 6));
        }
        v37 -= 6;
      }
      while (v37 != v36);
      long long v38 = v55;
    }
    long long v56 = v36;
    operator delete(v38);
  }
  return v35;
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      uint64_t v6 = (8 * *(_DWORD *)(a3 + 12) + 16);
      goto LABEL_4;
    case 1:
      uint64_t v12 = *(unsigned int *)(*(void *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
      unint64_t v14 = 0;
      if (((*(uint64_t (**)(void, uint64_t, unint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v12 + a2, &v14, 8) & 1) == 0)goto LABEL_12; {
      unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v14);
      }
      unint64_t v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      break;
    case 2:
      uint64_t v6 = *(unsigned int *)(*(void *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
LABEL_4:
      unint64_t v14 = 0;
      if (((*(uint64_t (**)(void, uint64_t, unint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v6 + a2, &v14, 8) & 1) == 0)goto LABEL_12; {
      LOBYTE(MetadataFromInstance) = v14;
      }
      unint64_t v8 = v14 & 0xFFFFFFFFFFFFFF00;
      break;
    case 3:
      uint64_t MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, *(void *)(a3 + 16));
      if (!v10) {
        goto LABEL_12;
      }
      unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(a1, MetadataSource, *(_DWORD *)(a3 + 12));
      unint64_t v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      if (!v11)
      {
        LOBYTE(MetadataFromInstance) = 0;
        unint64_t v8 = 0;
      }
      break;
    default:
LABEL_12:
      LOBYTE(MetadataFromInstance) = 0;
      unint64_t v8 = 0;
      break;
  }
  return v8 | MetadataFromInstance;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(uint64_t a1, uint64_t a2, unsigned int a3)
{
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v18);
  if (!v19) {
    goto LABEL_19;
  }
  unsigned __int8 v5 = 0;
  uint64_t v6 = *v19;
  if ((unint64_t)*v19 > 0x7FF) {
    LODWORD(v6) = 0;
  }
  if ((int)v6 <= 514)
  {
    if ((v6 - 512) >= 3)
    {
      unint64_t GenericContext = 0;
      if (v6) {
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
      unint64_t v8 = v19 + 5;
LABEL_11:
      if ((*(void *)(a1 + 2504) & *v8) == 0)
      {
        unsigned __int8 v5 = 0;
        unint64_t GenericContext = 0;
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
      ((void (*)(uint64_t *__return_ptr, uint64_t))swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor)(&v16, a1);
      unint64_t GenericContext = (unint64_t)v17;
      if (!v17
        || (unint64_t GenericContext = swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getGenericContext(v17)) == 0)
      {
        unsigned __int8 v5 = 0;
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
      unint64_t v9 = GenericContext;
      v15[0] = v18;
      v15[1] = v19;
      v14[0] = v16;
      v14[1] = (uint64_t)v17;
      uint64_t GenericArgsOffset = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgsOffset(a1, (uint64_t)v15, v14);
      if ((GenericArgsOffset & 0xFF00000000) != 0 && *(unsigned __int16 *)(v9 + 8) > a3)
      {
        uint64_t v13 = 0;
        int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), 8 * (int)GenericArgsOffset + 8 * a3 + v18, &v13, 8);
        unsigned __int8 v5 = v13;
        if (v11)
        {
          unint64_t GenericContext = v13 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          unsigned __int8 v5 = 0;
          unint64_t GenericContext = 0;
        }
        return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
      }
LABEL_19:
      unsigned __int8 v5 = 0;
      unint64_t GenericContext = 0;
      return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
    }
LABEL_10:
    unint64_t v8 = v19 + 1;
    goto LABEL_11;
  }
  if (v6 == 515) {
    goto LABEL_10;
  }
  unint64_t GenericContext = 0;
  if (v6 == 516) {
    goto LABEL_10;
  }
  return GenericContext & 0xFFFFFFFFFFFFFF00 | v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfInstance::$_0>(swift_reflection_childOfInstance::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t result = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, **(void **)v4, 0);
  if (result)
  {
    int v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      unsigned int v8 = **(_DWORD **)(v4 + 8);
      uint64_t v9 = *(void *)(result + 40);
      char v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0) {
        char v10 = (uint64_t **)*v10;
      }
      *(void *)a3 = v10;
      uint64_t v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      uint64_t result = getTypeInfoKind(*(void *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(void *)(a3 + 16) = *(void *)(v11 + 32);
    }
    else
    {
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfInstance::$_0>(swift_reflection_childOfInstance::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t result = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, **(void **)v4, 0);
  if (result)
  {
    int v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      unsigned int v8 = **(_DWORD **)(v4 + 8);
      uint64_t v9 = *(void *)(result + 40);
      char v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0) {
        char v10 = (uint64_t **)*v10;
      }
      *(void *)a3 = v10;
      uint64_t v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      uint64_t result = getTypeInfoKind(*(void *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(void *)(a3 + 16) = *(void *)(v11 + 32);
    }
    else
    {
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistential::$_0>(swift_reflection_projectExistential::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2 = **a1;
  unint64_t v3 = *a2;
  uint64_t v4 = **(void **)v2;
  unint64_t v5 = **(void **)(v2 + 8);
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(v3, v5, v4, &v8, &v7, 0);
  if (result)
  {
    ***(void ***)(v2 + 16) = v8;
    ***(void ***)(v2 + 24) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistential::$_0>(swift_reflection_projectExistential::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2 = **a1;
  unint64_t v3 = *a2;
  uint64_t v4 = **(void **)v2;
  unint64_t v5 = **(void **)(v2 + 8);
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(v3, v5, v4, &v8, &v7, 0);
  if (result)
  {
    ***(void ***)(v2 + 16) = v8;
    ***(void ***)(v2 + 24) = v7;
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, a6);
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(result + 8) != 1) {
    return 0;
  }
  int v11 = *(_DWORD *)(result + 32);
  switch(v11)
  {
    case 4:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)v12);
      if (!v13) {
        return 0;
      }
LABEL_10:
      uint64_t result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v12[0], 0, 50);
      if (!result) {
        return result;
      }
      *a4 = result;
      *a5 = v12[1];
      return 1;
    case 7:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, a2, (uint64_t)v12);
      if (!v13) {
        return 0;
      }
      goto LABEL_10;
    case 5:
      *a4 = *(void *)(*(void *)(result + 40) + 32);
      *a5 = a2;
      return 1;
  }
  return 0;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, v13, 32);
  if ((result & 1) != 0
    && (uint64_t v7 = v14,
        result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v14, v12), v12[1])&& (int v17 = 0, result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v7 - 8, &v15, 8), result)&& (result = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), *(void *)(a1 + 2504) & v15, v16, 88), (result & 1) != 0))
  {
    unsigned __int8 v8 = v17;
    if ((v17 & 0x20000) != 0)
    {
      v16[0] = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, v16, 8);
      if (result)
      {
        unint64_t v10 = v16[0] + ((v8 + 16) & ~(unint64_t)v8);
        *(void *)a3 = v7;
        *(void *)(a3 + 8) = v10;
        int v11 = (unsigned char *)(a3 + 16);
        char v9 = 1;
      }
      else
      {
        char v9 = 0;
        int v11 = (unsigned char *)a3;
      }
      unsigned char *v11 = 0;
    }
    else
    {
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = a2;
      *(unsigned char *)(a3 + 16) = 0;
      char v9 = 1;
    }
    *(unsigned char *)(a3 + 24) = v9;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  uint64_t v8 = MetadataFromInstance;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, &v27);
  char v9 = (char)v28;
  if (!v28) {
    goto LABEL_23;
  }
  if (*v28 <= 0x7FFuLL && *v28 != 0) {
    goto LABEL_17;
  }
  if ((swift_reflection_classIsSwiftMask & v28[4]) == 0)
  {
    std::string __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t ObjCRODataPtr = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, v8);
    if (!ObjCRODataPtr
      || ((uint64_t v29 = 0,
           (*(unsigned int (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), ObjCRODataPtr + 24, &v29, 8))? (BOOL v12 = v29 == 0): (BOOL v12 = 1), v12))
    {
LABEL_17:
      uint64_t v13 = 16;
      uint64_t v14 = 16;
LABEL_18:
      unint64_t v15 = v14 + a2;
      unint64_t v16 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v15);
      if (v17)
      {
        unint64_t v18 = v16;
        int v33 = 0;
        if ((*(unsigned int (**)(void, unint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488)
                                                                                          + 32))(*(void *)(a1 + 2488), v16 - 8, &v29, 8))
        {
          if ((*(uint64_t (**)(void, uint64_t, void **, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), *(void *)(a1 + 2504) & v29, &__p, 88))
          {
            unint64_t v19 = (v15 + v13 + v33) & ~(unint64_t)v33;
            *(void *)a3 = v18;
            *(void *)(a3 + 8) = v19;
            *(unsigned char *)(a3 + 16) = 0;
            char v9 = 1;
            goto LABEL_24;
          }
        }
      }
      char v9 = 0;
LABEL_23:
      *(unsigned char *)a3 = 0;
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 2488) + 16))(*(void *)(a1 + 2488)))
    {
      if (SHIBYTE(v32) < 0)
      {
        p_p = __p;
        if (v31 != 20)
        {
          operator delete(__p);
          goto LABEL_9;
        }
      }
      else
      {
        if (SHIBYTE(v32) != 20) {
          goto LABEL_9;
        }
        p_p = &__p;
      }
      unint64_t v24 = 0x5F5F53776966744ELL;
      unint64_t v25 = bswap64(*(void *)p_p);
      if (v25 == 0x5F5F53776966744ELL
        && (unint64_t v24 = 0x61746976654E5345, v25 = bswap64(*((void *)p_p + 1)), v25 == 0x61746976654E5345)
        && (unint64_t v24 = 1920102258, v25 = bswap32(*((_DWORD *)p_p + 4)), v25 == 1920102258))
      {
        int v26 = 0;
      }
      else if (v25 < v24)
      {
        int v26 = -1;
      }
      else
      {
        int v26 = 1;
      }
      BOOL v23 = v26 == 0;
      BOOL v22 = v26 != 0;
    }
    else
    {
      BOOL v22 = 0;
      BOOL v23 = 0;
    }
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__p);
      if (v22) {
        goto LABEL_9;
      }
    }
    else if (v22)
    {
      goto LABEL_9;
    }
    uint64_t v14 = 40;
    if (v23)
    {
      uint64_t v13 = 32;
    }
    else
    {
      uint64_t v14 = 16;
      uint64_t v13 = 16;
    }
    goto LABEL_18;
  }
LABEL_9:
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = a2;
  char v9 = 1;
  *(unsigned char *)(a3 + 16) = 1;
LABEL_24:
  *(unsigned char *)(a3 + 24) = v9;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, a6);
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(result + 8) != 1) {
    return 0;
  }
  int v11 = *(_DWORD *)(result + 32);
  switch(v11)
  {
    case 4:
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)v12);
      if (!v13) {
        return 0;
      }
LABEL_10:
      uint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v12[0], 0, 50);
      if (!result) {
        return result;
      }
      *a4 = result;
      *a5 = v12[1];
      return 1;
    case 7:
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, a2, (uint64_t)v12);
      if (!v13) {
        return 0;
      }
      goto LABEL_10;
    case 5:
      *a4 = *(void *)(*(void *)(result + 40) + 32);
      *a5 = a2;
      return 1;
  }
  return 0;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, v13, 32);
  if ((result & 1) != 0
    && (uint64_t v7 = v14,
        result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v14, v12), v12[1])&& (int v17 = 0, result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v7 - 8, &v15, 8), result)&& (result = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), *(void *)(a1 + 2504) & v15, v16, 88), (result & 1) != 0))
  {
    unsigned __int8 v8 = v17;
    if ((v17 & 0x20000) != 0)
    {
      v16[0] = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), a2, v16, 8);
      if (result)
      {
        unint64_t v10 = v16[0] + ((v8 + 16) & ~(unint64_t)v8);
        *(void *)a3 = v7;
        *(void *)(a3 + 8) = v10;
        int v11 = (unsigned char *)(a3 + 16);
        char v9 = 1;
      }
      else
      {
        char v9 = 0;
        int v11 = (unsigned char *)a3;
      }
      unsigned char *v11 = 0;
    }
    else
    {
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = a2;
      *(unsigned char *)(a3 + 16) = 0;
      char v9 = 1;
    }
    *(unsigned char *)(a3 + 24) = v9;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return result;
  }
  uint64_t v8 = result;
  uint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, result, &v14);
  char v9 = (char)v15;
  if (!v15) {
    goto LABEL_15;
  }
  if (*v15 <= 0x7FFuLL && *v15 != 0)
  {
    uint64_t result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2 + 16);
    if (v11)
    {
      uint64_t v12 = result;
      int v18 = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), result - 8, &v16, 8);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), *(void *)(a1 + 2504) & v16, v17, 88);
        if (result)
        {
          unint64_t v13 = (a2 + v18 + 32) & ~(unint64_t)v18;
          *(void *)a3 = v12;
          *(void *)(a3 + 8) = v13;
          *(unsigned char *)(a3 + 16) = 0;
          char v9 = 1;
          goto LABEL_16;
        }
      }
    }
    char v9 = 0;
LABEL_15:
    *(unsigned char *)a3 = 0;
    goto LABEL_16;
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = a2;
  char v9 = 1;
  *(unsigned char *)(a3 + 16) = 1;
LABEL_16:
  *(unsigned char *)(a3 + 24) = v9;
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistentialAndUnwrapClass::$_0>(swift_reflection_projectExistentialAndUnwrapClass::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(*a2, **(void **)(v2 + 8), **(void **)v2, (uint64_t)v5);
  int v3 = v6;
  if (v6)
  {
    ***(void ***)(v2 + 16) = v5[0];
    ***(void ***)(v2 + 24) = v5[1];
  }
  return v3 != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistentialAndUnwrapClass::$_0>(swift_reflection_projectExistentialAndUnwrapClass::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(*a2, **(void **)(v2 + 8), **(void **)v2, (uint64_t)v5);
  int v3 = v6;
  if (v6)
  {
    ***(void ***)(v2 + 16) = v5[0];
    ***(void ***)(v2 + 24) = v5[1];
  }
  return v3 != 0;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v19 = a1;
  uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, 0);
  if (!TypeInfo || *(_DWORD *)(TypeInfo + 8) != 1) {
    goto LABEL_21;
  }
  int v8 = *(_DWORD *)(TypeInfo + 32);
  if (v8 == 4)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)&__p);
    if (!(_BYTE)v24) {
      goto LABEL_21;
    }
    uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
    if (!TypeFromMetadata) {
      goto LABEL_21;
    }
    uint64_t v10 = TypeFromMetadata;
    uint64_t v11 = v21;
    int v12 = *(_DWORD *)(TypeFromMetadata + 8);
    if ((v12 - 1) > 1)
    {
      if ((v12 - 11) > 1) {
        goto LABEL_37;
      }
    }
    else if (!swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(TypeFromMetadata + 16)))
    {
      goto LABEL_37;
    }
    swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v11, 8u, (uint64_t)&__p);
    if (!v25) {
      goto LABEL_21;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v16 = v23;
    }
    else {
      uint64_t v16 = v21;
    }
    uint64_t v11 = v24;
    if ((char)v23 < 0) {
      operator delete(__p);
    }
    if (v16) {
      goto LABEL_21;
    }
LABEL_37:
    *(void *)a4 = v10;
    *(void *)(a4 + 8) = v11;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  if (v8 == 7)
  {
    swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), a2, 8u, (uint64_t)&__p);
    if (v25)
    {
      if ((v23 & 0x80u) == 0) {
        uint64_t v13 = v23;
      }
      else {
        uint64_t v13 = v21;
      }
      unint64_t v14 = v24;
      if ((char)v23 < 0) {
        operator delete(__p);
      }
      if (!v13)
      {
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, v14, (uint64_t)&__p);
        if ((_BYTE)v24)
        {
          uint64_t v15 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
          if (v15)
          {
            *(void *)&long long v17 = v15;
            *((void *)&v17 + 1) = v21;
            LOBYTE(v18) = 1;
            if (v22
              || !swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::reflection::TypeRef const*)#1}::operator()((uint64_t)&__p, v15)
              || (swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::remote::RemoteAddress&)#1}::operator()((uint64_t)&v19, (uint64_t *)&v17 + 1) & 1) != 0)
            {
              *(_OWORD *)a4 = v17;
              *(void *)(a4 + 16) = v18;
              return;
            }
          }
        }
      }
    }
    goto LABEL_21;
  }
  if (v8 != 5)
  {
LABEL_21:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }

  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(a1, a2, a4);
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), a2, 8u, (uint64_t)__p);
  if (!v14) {
    goto LABEL_12;
  }
  if ((v12 & 0x80u) == 0) {
    unint64_t v5 = v12;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  unint64_t v6 = v13;
  if (((char)v12 & 0x80000000) == 0)
  {
    if (!v5) {
      goto LABEL_9;
    }
LABEL_12:
    char v10 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (v5) {
    goto LABEL_12;
  }
LABEL_9:
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v6);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataFromInstance, 0, 50);
  if (!TypeFromMetadata) {
    goto LABEL_12;
  }
  *(void *)a3 = TypeFromMetadata;
  *(void *)(a3 + 8) = v6;
  char v10 = 1;
LABEL_13:
  *(unsigned char *)(a3 + 16) = v10;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::remote::RemoteAddress&)#1}::operator()(uint64_t a1, uint64_t *a2)
{
  swift::remote::MemoryReader::readPointer(*(void *)(*(void *)a1 + 2488), *a2, 8u, (uint64_t)__p);
  if (!v9) {
    return 0;
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v3 = v7;
  }
  else {
    unint64_t v3 = (unint64_t)__p[1];
  }
  uint64_t v4 = v8;
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  *a2 = v4;
  return 1;
}

BOOL swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::reflection::TypeRef const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (a2 && v2 == 1 || a2 && v2 == 2) {
    return swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(a2 + 16));
  }
  else {
    return (v2 - 11) < 2;
  }
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v19 = a1;
  uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, 0);
  if (!TypeInfo || *(_DWORD *)(TypeInfo + 8) != 1) {
    goto LABEL_21;
  }
  int v8 = *(_DWORD *)(TypeInfo + 32);
  if (v8 == 4)
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)&__p);
    if (!(_BYTE)v24) {
      goto LABEL_21;
    }
    uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
    if (!TypeFromMetadata) {
      goto LABEL_21;
    }
    uint64_t v10 = TypeFromMetadata;
    uint64_t v11 = v21;
    int v12 = *(_DWORD *)(TypeFromMetadata + 8);
    if ((v12 - 1) > 1)
    {
      if ((v12 - 11) > 1) {
        goto LABEL_37;
      }
    }
    else if (!swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(TypeFromMetadata + 16)))
    {
      goto LABEL_37;
    }
    swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v11, 8u, (uint64_t)&__p);
    if (!v25) {
      goto LABEL_21;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v16 = v23;
    }
    else {
      uint64_t v16 = v21;
    }
    uint64_t v11 = v24;
    if ((char)v23 < 0) {
      operator delete(__p);
    }
    if (v16) {
      goto LABEL_21;
    }
LABEL_37:
    *(void *)a4 = v10;
    *(void *)(a4 + 8) = v11;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  if (v8 == 7)
  {
    swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), a2, 8u, (uint64_t)&__p);
    if (v25)
    {
      if ((v23 & 0x80u) == 0) {
        uint64_t v13 = v23;
      }
      else {
        uint64_t v13 = v21;
      }
      unint64_t v14 = v24;
      if ((char)v23 < 0) {
        operator delete(__p);
      }
      if (!v13)
      {
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, v14, (uint64_t)&__p);
        if ((_BYTE)v24)
        {
          uint64_t v15 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
          if (v15)
          {
            *(void *)&long long v17 = v15;
            *((void *)&v17 + 1) = v21;
            LOBYTE(v18) = 1;
            if (v22
              || !swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::reflection::TypeRef const*)#1}::operator()((uint64_t)&__p, v15)
              || (swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::remote::RemoteAddress&)#1}::operator()((uint64_t)&v19, (uint64_t *)&v17 + 1) & 1) != 0)
            {
              *(_OWORD *)a4 = v17;
              *(void *)(a4 + 16) = v18;
              return;
            }
          }
        }
      }
    }
    goto LABEL_21;
  }
  if (v8 != 5)
  {
LABEL_21:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }

  swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(a1, a2, a4);
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), a2, 8u, (uint64_t)__p);
  if (!v14) {
    goto LABEL_12;
  }
  if ((v12 & 0x80u) == 0) {
    unint64_t v5 = v12;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  unint64_t v6 = v13;
  if (((char)v12 & 0x80000000) == 0)
  {
    if (!v5) {
      goto LABEL_9;
    }
LABEL_12:
    char v10 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (v5) {
    goto LABEL_12;
  }
LABEL_9:
  unint64_t MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v6);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataFromInstance, 0, 50);
  if (!TypeFromMetadata) {
    goto LABEL_12;
  }
  *(void *)a3 = TypeFromMetadata;
  *(void *)(a3 + 8) = v6;
  char v10 = 1;
LABEL_13:
  *(unsigned char *)(a3 + 16) = v10;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectEnumValue::$_0>(swift_reflection_projectEnumValue::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  int v2 = **a1;
  uint64_t v3 = **v2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *v2[1];
  uint64_t v6 = *v2[2];
  uint64_t v7 = *a2 + 920;
  uint64_t result = (_DWORD *)swift::reflection::TypeConverter::getTypeInfo(v7, **v2, 0);
  if (!result) {
    return result;
  }
  if (result[2] != 4) {
    return 0;
  }
  uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void, uint64_t, uint64_t))(*(void *)result + 32))(result, *(void *)(v4 + 2488), v5, v6);
  if (result)
  {
    uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(v7, v3, 0);
    if (*(_DWORD *)(TypeInfo + 8) == 4) {
      uint64_t v10 = TypeInfo;
    }
    else {
      uint64_t v10 = 0;
    }
    return (_DWORD *)(-1431655765 * ((*(void *)(v10 + 48) - *(void *)(v10 + 40)) >> 4) > (unint64_t)*(int *)*v2[2]);
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectEnumValue::$_0>(swift_reflection_projectEnumValue::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  int v2 = **a1;
  uint64_t v3 = **v2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *v2[1];
  uint64_t v6 = *v2[2];
  uint64_t v7 = *a2 + 920;
  uint64_t result = (_DWORD *)swift::reflection::TypeConverter::getTypeInfo(v7, **v2, 0);
  if (!result) {
    return result;
  }
  if (result[2] != 4) {
    return 0;
  }
  uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, void, uint64_t, uint64_t))(*(void *)result + 32))(result, *(void *)(v4 + 2488), v5, v6);
  if (result)
  {
    uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(v7, v3, 0);
    if (*(_DWORD *)(TypeInfo + 8) == 4) {
      uint64_t v10 = TypeInfo;
    }
    else {
      uint64_t v10 = 0;
    }
    return (_DWORD *)(-1431655765 * ((*(void *)(v10 + 48) - *(void *)(v10 + 40)) >> 4) > (unint64_t)*(int *)*v2[2]);
  }
  return result;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForTypeRef::$_0>(swift_reflection_dumpInfoForTypeRef::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, void *a2)
{
  int v2 = **a1;
  uint64_t v3 = (swift::reflection::TypeRef *)**v2;
  if (v3)
  {
    uint64_t TypeInfo = (long long **)swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, **v2, 0);
    if (TypeInfo)
    {
      swift::reflection::TypeInfo::dump(TypeInfo, &std::cout, 0);
      v23[1] = 0;
      v23[2] = 0;
      unint64_t v24 = 0;
      uint64_t v25 = 2400;
      uint64_t v26 = 0;
      char v27 = 0;
      long long v62 = 0;
      v23[0] = off_C9440;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      char v31 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      int v60 = 0;
      Demangling = swift::reflection::TypeRef::getDemangling(v3, (swift::Demangle::__runtime::Demangler *)v23);
      swift::Demangle::__runtime::mangleNode(Demangling, v6);
      memset(&v20, 0, sizeof(v20));
      if (v21)
      {
        std::string::assign(&v20, "<failed to mangle name>");
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Failed to get mangled name: Node ", 33);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)" error ", 7);
        char v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
        char v9 = (void *)std::ostream::operator<<();
      }
      else
      {
        std::string::operator=(&v20, &__p);
        uint64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Mangled name: ", 14);
        unsigned __int8 v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"$s", 2);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v13 = &v20;
        }
        else {
          unint64_t v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v20.__r_.__value_.__l.__size_;
        }
        char v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
      }
      uint64_t v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
      uint64_t v16 = swift_reflection_copyNameForTypeRef((uint64_t)v15, (swift::reflection::TypeRef *)**v2, 0);
      long long v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Demangled name: ", 16);
      size_t v18 = strlen(v16);
      unint64_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v16, v18);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
      free(v16);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_17;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        v23[0] = off_C9440;
        if (v62 == v61)
        {
          (*(void (**)(void *))(v61[0] + 32))(v61);
        }
        else if (v62)
        {
          (*(void (**)(void))(*v62 + 40))();
        }
        v23[0] = off_C9418;
        uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v24);
        if (v26) {
          *(unsigned char *)(v26 + 48) = 0;
        }
        return result;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
  }

  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForTypeRef::$_0>(swift_reflection_dumpInfoForTypeRef::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, void *a2)
{
  int v2 = **a1;
  uint64_t v3 = (swift::reflection::TypeRef *)**v2;
  if (v3)
  {
    uint64_t TypeInfo = (long long **)swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, **v2, 0);
    if (TypeInfo)
    {
      swift::reflection::TypeInfo::dump(TypeInfo, &std::cout, 0);
      v23[1] = 0;
      v23[2] = 0;
      unint64_t v24 = 0;
      uint64_t v25 = 2400;
      uint64_t v26 = 0;
      char v27 = 0;
      long long v62 = 0;
      v23[0] = off_C9440;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      char v31 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      int v60 = 0;
      Demangling = swift::reflection::TypeRef::getDemangling(v3, (swift::Demangle::__runtime::Demangler *)v23);
      swift::Demangle::__runtime::mangleNode(Demangling, v6);
      memset(&v20, 0, sizeof(v20));
      if (v21)
      {
        std::string::assign(&v20, "<failed to mangle name>");
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Failed to get mangled name: Node ", 33);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)" error ", 7);
        char v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
        char v9 = (void *)std::ostream::operator<<();
      }
      else
      {
        std::string::operator=(&v20, &__p);
        uint64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Mangled name: ", 14);
        unsigned __int8 v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"$s", 2);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v13 = &v20;
        }
        else {
          unint64_t v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v20.__r_.__value_.__l.__size_;
        }
        char v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
      }
      uint64_t v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
      uint64_t v16 = swift_reflection_copyNameForTypeRef((uint64_t)v15, (swift::reflection::TypeRef *)**v2, 0);
      long long v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Demangled name: ", 16);
      size_t v18 = strlen(v16);
      unint64_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v16, v18);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
      free(v16);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_17;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        v23[0] = off_C9440;
        if (v62 == v61)
        {
          (*(void (**)(void *))(v61[0] + 32))(v61);
        }
        else if (v62)
        {
          (*(void (**)(void))(*v62 + 40))();
        }
        v23[0] = off_C9418;
        uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v24);
        if (v26) {
          *(unsigned char *)(v26 + 48) = 0;
        }
        return result;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
  }

  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
}

void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForMetadata::$_0>(swift_reflection_dumpInfoForMetadata::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  Metadatauint64_t TypeInfo = (long long **)swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
  {
    return swift::reflection::TypeInfo::dump(MetadataTypeInfo, &std::cout, 0);
  }
  else
  {
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  }
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForMetadata::$_0>(swift_reflection_dumpInfoForMetadata::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  Metadatauint64_t TypeInfo = (long long **)swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
  {
    return swift::reflection::TypeInfo::dump(MetadataTypeInfo, &std::cout, 0);
  }
  else
  {
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  }
}

void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForInstance::$_0>(swift_reflection_dumpInfoForInstance::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, unint64_t *a2)
{
  Instanceuint64_t TypeInfo = (long long **)swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
  {
    return swift::reflection::TypeInfo::dump(InstanceTypeInfo, &std::cout, 0);
  }
  else
  {
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  }
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForInstance::$_0>(swift_reflection_dumpInfoForInstance::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, unint64_t *a2)
{
  Instanceuint64_t TypeInfo = (long long **)swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
  {
    return swift::reflection::TypeInfo::dump(InstanceTypeInfo, &std::cout, 0);
  }
  else
  {
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateConformanceCache::$_0>(swift_reflection_iterateConformanceCache::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(long long ***a1, uint64_t *a2)
{
  int v2 = **a1;
  uint64_t v3 = *a2;
  char v9 = off_C8FB8;
  long long v10 = *v2;
  uint64_t v11 = &v9;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateConformances(v3, &v9, (uint64_t)&v12);
  if (v11 == &v9)
  {
    ((void (*)(uint64_t (***)()))v9[4])(&v9);
  }
  else if (v11)
  {
    (*v11)[5]();
  }
  uint64_t v4 = **((void **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (!v13) {
    return 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateConformanceCache::$_0>(swift_reflection_iterateConformanceCache::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(long long ***a1, uint64_t *a2)
{
  int v2 = **a1;
  uint64_t v3 = *a2;
  char v9 = off_C9048;
  long long v10 = *v2;
  uint64_t v11 = &v9;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateConformances(v3, &v9, (uint64_t)&v12);
  if (v11 == &v9)
  {
    ((void (*)(uint64_t (***)()))v9[4])(&v9);
  }
  else if (v11)
  {
    (*v11)[5]();
  }
  uint64_t v4 = **((void **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (!v13) {
    return 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v5;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateConformances(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v17 = (char *)operator new(0x30uLL);
  long long v18 = xmmword_C67D0;
  strcpy(v17, "_swift_debug_protocolConformanceStatePointer");
  uint64_t v6 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v17);
  if (!v6)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = 1;
    goto LABEL_18;
  }
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v6, 8u, (uint64_t)__p);
  if (!v16)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = v11;
    *(void *)(a3 + 16) = v12;
    *(unsigned char *)(a3 + 24) = 1;
    if (!v16) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  uint64_t v7 = v15;
  char v8 = (void *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      long long v10 = v9;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v9);
    }
    else
    {
      long long v10 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
    }
  }
  else
  {
    long long v10 = 0;
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::IterateConformanceTable(a1, v7, (uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  if (v16)
  {
LABEL_16:
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_18:
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::IterateConformanceTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v16);
  if (!v16)
  {
    uint64_t v16 = 0;
    goto LABEL_21;
  }
  uint64_t v5 = *(unsigned int *)(v16 + 4);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v13);
  uint64_t v6 = v13;
  if (v13)
  {
    if (v5)
    {
      uint64_t v7 = (uint64_t *)(v13 + 16);
      while (1)
      {
        uint64_t v8 = *(v7 - 1);
        uint64_t v19 = *v7;
        uint64_t v20 = v8;
        uint64_t v9 = *(void *)(a3 + 24);
        if (!v9) {
          goto LABEL_26;
        }
        v7 += 3;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v9 + 48))(v9, &v20, &v19);
        if (!--v5)
        {
          uint64_t v6 = v13;
          uint64_t v13 = 0;
          if (v6) {
            goto LABEL_12;
          }
          goto LABEL_14;
        }
      }
    }
    uint64_t v13 = 0;
LABEL_12:
    uint64_t v20 = v6;
    if (!v15) {
      goto LABEL_26;
    }
    (*(void (**)(void *, uint64_t *))(*v15 + 48))(v15, &v20);
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_14:
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
  uint64_t v10 = v16;
  uint64_t v16 = 0;
  if (!v10) {
    goto LABEL_21;
  }
  uint64_t v13 = v10;
  if (!v18)
  {
LABEL_26:
    uint64_t v12 = std::__throw_bad_function_call[abi:nn180100]();
    return _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEED1Ev(v12);
  }
  (*(void (**)(void *, uint64_t *))(*v18 + 48))(v18, &v13);
LABEL_21:
  uint64_t result = (uint64_t)v18;
  if (v18 == v17) {
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  if (v18) {
    return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEv(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = off_C8FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C8FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEEclEOySN_(uint64_t a1, void *a2, void *a3)
{
  return (**(uint64_t (***)(void, void, void))(a1 + 8))(*a2, *a3, **(void **)(a1 + 16));
}

uint64_t SwiftReflectionContext::allocateTemporaryObject<std::string>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
    operator new();
  }
  uint64_t v2 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::~__func(v2);
}

void std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_C9000;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C9000;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:nn180100](void *result, void *a2)
{
  if (a2 != result)
  {
    v8[7] = v2;
    v8[8] = v3;
    uint64_t v5 = result;
    uint64_t v6 = (void *)result[3];
    uint64_t v7 = (void *)a2[3];
    if (v6 == result)
    {
      if (v7 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v8);
        (*(void (**)(void))(*(void *)v5[3] + 32))(v5[3]);
        v5[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v5);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v5[3] = v5;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v5[3] + 32))(v5[3]);
        v5[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v7 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v5[3];
      v5[3] = v5;
    }
    else
    {
      result[3] = v7;
      a2[3] = v6;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C9048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C9048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEEclEOySN_(uint64_t a1, void *a2, void *a3)
{
  return (**(uint64_t (***)(void, void, void))(a1 + 8))(*a2, *a3, **(void **)(a1 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocations::$_0>(swift_reflection_iterateMetadataAllocations::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(long long ***a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v9 = off_C90A0;
  long long v10 = *v2;
  long long v11 = &v9;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(v3, (uint64_t)&v9, (uint64_t)&v12);
  if (v11 == &v9)
  {
    ((void (*)(uint64_t (***)()))v9[4])(&v9);
  }
  else if (v11)
  {
    (*v11)[5]();
  }
  uint64_t v4 = **((void **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (!v13) {
    return 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocations::$_0>(swift_reflection_iterateMetadataAllocations::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(long long ***a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v9 = off_C90E8;
  long long v10 = *v2;
  long long v11 = &v9;
  swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(v3, (uint64_t)&v9, (uint64_t)&v12);
  if (v11 == &v9)
  {
    ((void (*)(uint64_t (***)()))v9[4])(&v9);
  }
  else if (v11)
  {
    (*v11)[5]();
  }
  uint64_t v4 = **((void **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (!v13) {
    return 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v5;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v42 = (char *)operator new(0x30uLL);
  long long v43 = xmmword_C67E0;
  strcpy(v42, "_swift_debug_metadataAllocationIterationEnabled");
  long long v40 = (char *)operator new(0x28uLL);
  long long v41 = xmmword_C6750;
  strcpy(v40, "_swift_debug_allocationPoolPointer");
  uint64_t v6 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v42);
  if (!v6) {
    goto LABEL_8;
  }
  char v39 = 0;
  if (((*(uint64_t (**)(void, uint64_t, char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v6, &v39, 1) & 1) == 0)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v37;
    *(unsigned char *)(a3 + 24) = 1;
    goto LABEL_41;
  }
  if (!v39)
  {
    uint64_t v20 = (char *)operator new(0x48uLL);
    strcpy(v20, "remote process does not have metadata allocation iteration enabled");
    *(void *)a3 = v20;
    *(_OWORD *)(a3 + 8) = xmmword_C6800;
    goto LABEL_40;
  }
  uint64_t v7 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v40);
  if (!v7)
  {
LABEL_8:
    std::operator+<char>();
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v37;
LABEL_40:
    *(unsigned char *)(a3 + 24) = 1;
    goto LABEL_41;
  }
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v7, 8u, (uint64_t)__p);
  if (!v38)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = v33;
    *(void *)(a3 + 16) = v34;
    *(unsigned char *)(a3 + 24) = 1;
LABEL_56:
    if (v38)
    {
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_41:
    if (SHIBYTE(v41) < 0)
    {
      operator delete(v40);
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v42);
    return;
  }
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v33);
  if (!(void)v33)
  {
    char v22 = (char *)operator new(0x30uLL);
    strcpy(v22, "failure reading allocation pool contents");
    *(void *)a3 = v22;
    *(_OWORD *)(a3 + 8) = xmmword_C67F0;
    *(unsigned char *)(a3 + 24) = 1;
    *(void *)&long long v33 = 0;
LABEL_52:
    if (v35 == (long long *)((char *)&v33 + 8))
    {
      (*(void (**)(char *))(*((void *)&v33 + 1) + 32))((char *)&v33 + 8);
    }
    else if (v35)
    {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    goto LABEL_56;
  }
  int v8 = 0;
  uint64_t v9 = *(void *)(v33 + 8) + *(void *)v33;
  while (v9 && v8 != 1000000)
  {
    (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v30);
    long long v10 = v30;
    if (v30)
    {
      uint64_t v11 = v9 - v30[1];
      (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v27);
      std::string v12 = v27;
      if (v27)
      {
        if (!v10[1])
        {
          uint64_t v9 = *v10;
          char v27 = 0;
          goto LABEL_26;
        }
        unint64_t v13 = 0;
        uint64_t v14 = v11 + 8;
        do
        {
          uint64_t v15 = (unsigned __int16 *)((char *)v12 + v13);
          int v16 = *(unsigned __int16 *)((char *)v12 + v13);
          if (!*(_WORD *)((char *)v12 + v13)) {
            break;
          }
          unsigned __int16 v24 = v15[1];
          uint64_t v25 = v14 + v13;
          int v26 = v16;
          uint64_t v17 = *(void *)(a2 + 24);
          if (!v17) {
            goto LABEL_59;
          }
          (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)v17 + 48))(v17, &v24);
          v13 += *v15 + 8;
        }
        while (v13 < v10[1]);
        std::string v12 = v27;
        uint64_t v9 = *v10;
        char v27 = 0;
        if (v12)
        {
LABEL_26:
          long long v44 = v12;
          if (!v29) {
            goto LABEL_59;
          }
          (*(void (**)(void *, uint64_t **))(*v29 + 48))(v29, &v44);
          int v18 = 0;
        }
        else
        {
          int v18 = 0;
        }
      }
      else
      {
        char v27 = 0;
        int v18 = 3;
      }
      if (v29 == v28)
      {
        (*(void (**)(void *))(v28[0] + 32))(v28);
      }
      else if (v29)
      {
        (*(void (**)(void))(*v29 + 40))();
      }
      uint64_t v19 = v30;
      uint64_t v30 = 0;
      if (v19)
      {
        char v27 = v19;
        if (!v32) {
          goto LABEL_59;
        }
        (*(void (**)(void *, uint64_t **))(*v32 + 48))(v32, &v27);
      }
      goto LABEL_36;
    }
    uint64_t v30 = 0;
    int v18 = 3;
LABEL_36:
    if (v32 == v31)
    {
      (*(void (**)(void *))(v31[0] + 32))(v31);
    }
    else if (v32)
    {
      (*(void (**)(void))(*v32 + 40))();
    }
    ++v8;
    if (v18) {
      break;
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  int v21 = (uint64_t *)v33;
  *(void *)&long long v33 = 0;
  if (!v21) {
    goto LABEL_52;
  }
  uint64_t v30 = v21;
  if (v35)
  {
    (*(void (**)(_OWORD *, uint64_t **))(*(void *)v35 + 48))(v35, &v30);
    goto LABEL_52;
  }
LABEL_59:
  uint64_t v23 = std::__throw_bad_function_call[abi:nn180100]();
  _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED1Ev(v23);
}

void _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C90A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C90A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEEclEOSL_(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  int v3 = *((_DWORD *)a2 + 4);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = **(uint64_t (***)(int *, void))(a1 + 8);
  int v7 = *a2;
  uint64_t v8 = v2;
  int v9 = v3;
  return v5(&v7, *v4);
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v42 = (char *)operator new(0x30uLL);
  long long v43 = xmmword_C67E0;
  strcpy(v42, "_swift_debug_metadataAllocationIterationEnabled");
  long long v40 = (char *)operator new(0x28uLL);
  long long v41 = xmmword_C6750;
  strcpy(v40, "_swift_debug_allocationPoolPointer");
  uint64_t v6 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v42);
  if (!v6) {
    goto LABEL_8;
  }
  char v39 = 0;
  if (((*(uint64_t (**)(void, uint64_t, char *, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v6, &v39, 1) & 1) == 0)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v37;
    *(unsigned char *)(a3 + 24) = 1;
    goto LABEL_41;
  }
  if (!v39)
  {
    uint64_t v20 = (char *)operator new(0x48uLL);
    strcpy(v20, "remote process does not have metadata allocation iteration enabled");
    *(void *)a3 = v20;
    *(_OWORD *)(a3 + 8) = xmmword_C6800;
    goto LABEL_40;
  }
  uint64_t v7 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v40);
  if (!v7)
  {
LABEL_8:
    std::operator+<char>();
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v37;
LABEL_40:
    *(unsigned char *)(a3 + 24) = 1;
    goto LABEL_41;
  }
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v7, 8u, (uint64_t)__p);
  if (!v38)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = v33;
    *(void *)(a3 + 16) = v34;
    *(unsigned char *)(a3 + 24) = 1;
LABEL_56:
    if (v38)
    {
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_41:
    if (SHIBYTE(v41) < 0)
    {
      operator delete(v40);
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v42);
    return;
  }
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v33);
  if (!(void)v33)
  {
    char v22 = (char *)operator new(0x30uLL);
    strcpy(v22, "failure reading allocation pool contents");
    *(void *)a3 = v22;
    *(_OWORD *)(a3 + 8) = xmmword_C67F0;
    *(unsigned char *)(a3 + 24) = 1;
    *(void *)&long long v33 = 0;
LABEL_52:
    if (v35 == (long long *)((char *)&v33 + 8))
    {
      (*(void (**)(char *))(*((void *)&v33 + 1) + 32))((char *)&v33 + 8);
    }
    else if (v35)
    {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    goto LABEL_56;
  }
  int v8 = 0;
  uint64_t v9 = *(void *)(v33 + 8) + *(void *)v33;
  while (v9 && v8 != 1000000)
  {
    (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v30);
    long long v10 = v30;
    if (v30)
    {
      uint64_t v11 = v9 - v30[1];
      (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v27);
      std::string v12 = v27;
      if (v27)
      {
        if (!v10[1])
        {
          uint64_t v9 = *v10;
          char v27 = 0;
          goto LABEL_26;
        }
        unint64_t v13 = 0;
        uint64_t v14 = v11 + 8;
        do
        {
          uint64_t v15 = (unsigned __int16 *)((char *)v12 + v13);
          int v16 = *(unsigned __int16 *)((char *)v12 + v13);
          if (!*(_WORD *)((char *)v12 + v13)) {
            break;
          }
          unsigned __int16 v24 = v15[1];
          uint64_t v25 = v14 + v13;
          int v26 = v16;
          uint64_t v17 = *(void *)(a2 + 24);
          if (!v17) {
            goto LABEL_59;
          }
          (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)v17 + 48))(v17, &v24);
          v13 += *v15 + 8;
        }
        while (v13 < v10[1]);
        std::string v12 = v27;
        uint64_t v9 = *v10;
        char v27 = 0;
        if (v12)
        {
LABEL_26:
          long long v44 = v12;
          if (!v29) {
            goto LABEL_59;
          }
          (*(void (**)(void *, uint64_t **))(*v29 + 48))(v29, &v44);
          int v18 = 0;
        }
        else
        {
          int v18 = 0;
        }
      }
      else
      {
        char v27 = 0;
        int v18 = 3;
      }
      if (v29 == v28)
      {
        (*(void (**)(void *))(v28[0] + 32))(v28);
      }
      else if (v29)
      {
        (*(void (**)(void))(*v29 + 40))();
      }
      uint64_t v19 = v30;
      uint64_t v30 = 0;
      if (v19)
      {
        char v27 = v19;
        if (!v32) {
          goto LABEL_59;
        }
        (*(void (**)(void *, uint64_t **))(*v32 + 48))(v32, &v27);
      }
      goto LABEL_36;
    }
    uint64_t v30 = 0;
    int v18 = 3;
LABEL_36:
    if (v32 == v31)
    {
      (*(void (**)(void *))(v31[0] + 32))(v31);
    }
    else if (v32)
    {
      (*(void (**)(void))(*v32 + 40))();
    }
    ++v8;
    if (v18) {
      break;
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  int v21 = (uint64_t *)v33;
  *(void *)&long long v33 = 0;
  if (!v21) {
    goto LABEL_52;
  }
  uint64_t v30 = v21;
  if (v35)
  {
    (*(void (**)(_OWORD *, uint64_t **))(*(void *)v35 + 48))(v35, &v30);
    goto LABEL_52;
  }
LABEL_59:
  uint64_t v23 = std::__throw_bad_function_call[abi:nn180100]();
  _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED1Ev(v23);
}

void _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C90E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C90E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEEclEOSL_(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  int v3 = *((_DWORD *)a2 + 4);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = **(uint64_t (***)(int *, void))(a1 + 8);
  int v7 = *a2;
  uint64_t v8 = v2;
  int v9 = v3;
  return v5(&v7, *v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_allocationMetadataPointer::$_0>(swift_reflection_allocationMetadataPointer::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(int ****a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  int v5 = *v4;
  uint64_t v6 = *((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  __int16 v8 = v5;
  int v9 = 0;
  __int16 v10 = 0;
  uint64_t v11 = v6;
  int v12 = (int)v4;
  int v13 = 0;
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::allocationMetadataPointer(v3, &v8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_allocationMetadataPointer::$_0>(swift_reflection_allocationMetadataPointer::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(int ****a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  int v5 = *v4;
  uint64_t v6 = *((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  __int16 v8 = v5;
  int v9 = 0;
  __int16 v10 = 0;
  uint64_t v11 = v6;
  int v12 = (int)v4;
  int v13 = 0;
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::allocationMetadataPointer(v3, &v8);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::allocationMetadataPointer(uint64_t a1, _WORD *a2)
{
  if (*a2 != 14) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v6);
  uint64_t v2 = v6;
  if (!v6)
  {
    uint64_t v3 = 0;
    uint64_t v6 = 0;
LABEL_7:
    if (v8 == v7)
    {
      (*(void (**)(void *))(v7[0] + 32))(v7);
    }
    else if (v8)
    {
      (*(void (**)(void *))(*v8 + 40))(v8);
    }
    return v3;
  }
  uint64_t v3 = *(void *)(v6 + 32);
  uint64_t v6 = 0;
  uint64_t v9 = v2;
  if (v8)
  {
    (*(void (**)(void *, uint64_t *))(*v8 + 48))(v8, &v9);
    goto LABEL_7;
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_metadataAllocationTagName::$_0>(swift_reflection_metadataAllocationTagName::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_metadataAllocationTagName::$_0>(swift_reflection_metadataAllocationTagName::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(**(_DWORD **)v1, (uint64_t)&v7);
  uint64_t v2 = **(void **)(v1 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v6 = 0;
  if (!v8) {
    return 0;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v7;
  }
  char v6 = 1;
  uint64_t v3 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v2);
  std::string::operator=((std::string *)v3, &__p);
  if (*(char *)(v3 + 23) < 0) {
    uint64_t v3 = *(void *)v3;
  }
  if (v6 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_metadataAllocationTagName::$_0>(swift_reflection_metadataAllocationTagName::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(**(_DWORD **)v1, (uint64_t)&v7);
  uint64_t v2 = **(void **)(v1 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v6 = 0;
  if (!v8) {
    return 0;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v7;
  }
  char v6 = 1;
  uint64_t v3 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v2);
  std::string::operator=((std::string *)v3, &__p);
  if (*(char *)(v3 + 23) < 0) {
    uint64_t v3 = *(void *)v3;
  }
  if (v6 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v3;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(void *)a2 = 0x746553746F4ELL;
      char v3 = 6;
      goto LABEL_36;
    case 1:
      *(void *)a2 = 0x7365786F42;
      char v3 = 5;
      goto LABEL_36;
    case 2:
      strcpy((char *)a2, "ObjCClassWrappers");
      char v3 = 17;
      goto LABEL_36;
    case 3:
      uint64_t v5 = 0x6E6F6974636E7546;
      goto LABEL_8;
    case 4:
      uint64_t v5 = 0x657079746174654DLL;
LABEL_8:
      *(void *)a2 = v5;
      strcpy((char *)(a2 + 8), "Types");
      char v3 = 13;
      goto LABEL_36;
    case 5:
      char v6 = (char *)operator new(0x28uLL);
      strcpy(v6, "ExistentialMetatypeValueWitnessTables");
      *(void *)a2 = v6;
      long long v7 = xmmword_C6840;
      goto LABEL_30;
    case 6:
      *(_DWORD *)(a2 + 16) = 1936027769;
      uint64_t v8 = *(void *)"ialMetatypes";
      uint64_t v9 = 0x746E657473697845;
      goto LABEL_23;
    case 7:
      uint64_t v10 = 0x746E657473697845;
      uint64_t v11 = 0x73657079546C6169;
      goto LABEL_33;
    case 8:
      int v12 = (char *)operator new(0x28uLL);
      strcpy(v12, "OpaqueExistentialValueWitnessTables");
      *(void *)a2 = v12;
      long long v7 = xmmword_C67A0;
      goto LABEL_30;
    case 9:
      int v13 = (char *)operator new(0x28uLL);
      strcpy(v13, "ClassExistentialValueWitnessTables");
      *(void *)a2 = v13;
      long long v7 = xmmword_C6750;
      goto LABEL_30;
    case 10:
      *(_DWORD *)(a2 + 16) = 1936026722;
      uint64_t v8 = *(void *)"itnessTables";
      uint64_t v9 = 0x576E676965726F46;
      goto LABEL_23;
    case 11:
      uint64_t v14 = (char *)operator new(0x20uLL);
      strcpy(v14, "ResilientMetadataAllocator");
      *(void *)a2 = v14;
      long long v7 = xmmword_C6830;
      goto LABEL_30;
    case 12:
      strcpy((char *)a2, "Metadata");
      char v3 = 8;
      goto LABEL_36;
    case 13:
      strcpy((char *)a2, "TupleCache");
      char v3 = 10;
      goto LABEL_36;
    case 14:
      *(_DWORD *)(a2 + 16) = 1701340001;
      uint64_t v8 = *(void *)"etadataCache";
      uint64_t v9 = 0x4D636972656E6547;
      goto LABEL_23;
    case 15:
      *(_DWORD *)(a2 + 16) = 1701340001;
      uint64_t v8 = *(void *)"etadataCache";
      uint64_t v9 = 0x4D6E676965726F46;
      goto LABEL_23;
    case 16:
      uint64_t v15 = operator new(0x20uLL);
      int v16 = "GenericWitnessTableCache";
      goto LABEL_28;
    case 17:
      *(_DWORD *)(a2 + 16) = 1635017060;
      uint64_t v8 = *(void *)"lassMetadata";
      uint64_t v9 = 0x43636972656E6547;
      goto LABEL_23;
    case 18:
      *(_DWORD *)(a2 + 16) = 1635017060;
      uint64_t v8 = *(void *)"alueMetadata";
      uint64_t v9 = 0x56636972656E6547;
LABEL_23:
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 20) = 0;
      char v3 = 20;
      goto LABEL_36;
    case 19:
      uint64_t v17 = (char *)operator new(0x28uLL);
      strcpy(v17, "SingletonGenericWitnessTableCache");
      *(void *)a2 = v17;
      long long v7 = xmmword_C6740;
      goto LABEL_30;
    case 20:
      strcpy((char *)a2, "GlobalMetadataCache");
      char v3 = 19;
      goto LABEL_36;
    case 21:
      int v18 = (char *)operator new(0x19uLL);
      strcpy(v18, "GlobalWitnessTableCache");
      *(void *)a2 = v18;
      long long v7 = xmmword_C6820;
      goto LABEL_30;
    case 22:
      uint64_t v15 = operator new(0x20uLL);
      int v16 = "ExtendedExistentialTypes";
LABEL_28:
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      void v15[2] = *((void *)v16 + 2);
      *((unsigned char *)v15 + 24) = 0;
      *(void *)a2 = v15;
      long long v7 = xmmword_C6810;
      goto LABEL_30;
    case 23:
      uint64_t v19 = (char *)operator new(0x20uLL);
      strcpy(v19, "ExtendedExistentialTypeShapes");
      *(void *)a2 = v19;
      long long v7 = xmmword_C6790;
LABEL_30:
      *(_OWORD *)(a2 + 8) = v7;
      goto LABEL_37;
    case 24:
      *(void *)a2 = 0x617461646174654DLL;
      int v20 = 1801675088;
      goto LABEL_35;
    case 25:
      uint64_t v10 = 0x547373656E746957;
      uint64_t v11 = 0x6B636150656C6261;
LABEL_33:
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v11;
      *(unsigned char *)(a2 + 16) = 0;
      char v3 = 16;
      goto LABEL_36;
    case 26:
      *(void *)a2 = 0x745374756F79614CLL;
      int v20 = 1735289202;
LABEL_35:
      *(_DWORD *)(a2 + 8) = v20;
      *(unsigned char *)(a2 + 12) = 0;
      char v3 = 12;
LABEL_36:
      *(unsigned char *)(a2 + 23) = v3;
LABEL_37:
      char v4 = 1;
      break;
    default:
      char v4 = 0;
      *(unsigned char *)a2 = 0;
      break;
  }
  *(unsigned char *)(a2 + 24) = v4;
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(void *)a2 = 0x746553746F4ELL;
      char v3 = 6;
      goto LABEL_36;
    case 1:
      *(void *)a2 = 0x7365786F42;
      char v3 = 5;
      goto LABEL_36;
    case 2:
      strcpy((char *)a2, "ObjCClassWrappers");
      char v3 = 17;
      goto LABEL_36;
    case 3:
      uint64_t v5 = 0x6E6F6974636E7546;
      goto LABEL_8;
    case 4:
      uint64_t v5 = 0x657079746174654DLL;
LABEL_8:
      *(void *)a2 = v5;
      strcpy((char *)(a2 + 8), "Types");
      char v3 = 13;
      goto LABEL_36;
    case 5:
      char v6 = (char *)operator new(0x28uLL);
      strcpy(v6, "ExistentialMetatypeValueWitnessTables");
      *(void *)a2 = v6;
      long long v7 = xmmword_C6840;
      goto LABEL_30;
    case 6:
      *(_DWORD *)(a2 + 16) = 1936027769;
      uint64_t v8 = *(void *)"ialMetatypes";
      uint64_t v9 = 0x746E657473697845;
      goto LABEL_23;
    case 7:
      uint64_t v10 = 0x746E657473697845;
      uint64_t v11 = 0x73657079546C6169;
      goto LABEL_33;
    case 8:
      int v12 = (char *)operator new(0x28uLL);
      strcpy(v12, "OpaqueExistentialValueWitnessTables");
      *(void *)a2 = v12;
      long long v7 = xmmword_C67A0;
      goto LABEL_30;
    case 9:
      int v13 = (char *)operator new(0x28uLL);
      strcpy(v13, "ClassExistentialValueWitnessTables");
      *(void *)a2 = v13;
      long long v7 = xmmword_C6750;
      goto LABEL_30;
    case 10:
      *(_DWORD *)(a2 + 16) = 1936026722;
      uint64_t v8 = *(void *)"itnessTables";
      uint64_t v9 = 0x576E676965726F46;
      goto LABEL_23;
    case 11:
      uint64_t v14 = (char *)operator new(0x20uLL);
      strcpy(v14, "ResilientMetadataAllocator");
      *(void *)a2 = v14;
      long long v7 = xmmword_C6830;
      goto LABEL_30;
    case 12:
      strcpy((char *)a2, "Metadata");
      char v3 = 8;
      goto LABEL_36;
    case 13:
      strcpy((char *)a2, "TupleCache");
      char v3 = 10;
      goto LABEL_36;
    case 14:
      *(_DWORD *)(a2 + 16) = 1701340001;
      uint64_t v8 = *(void *)"etadataCache";
      uint64_t v9 = 0x4D636972656E6547;
      goto LABEL_23;
    case 15:
      *(_DWORD *)(a2 + 16) = 1701340001;
      uint64_t v8 = *(void *)"etadataCache";
      uint64_t v9 = 0x4D6E676965726F46;
      goto LABEL_23;
    case 16:
      uint64_t v15 = operator new(0x20uLL);
      int v16 = "GenericWitnessTableCache";
      goto LABEL_28;
    case 17:
      *(_DWORD *)(a2 + 16) = 1635017060;
      uint64_t v8 = *(void *)"lassMetadata";
      uint64_t v9 = 0x43636972656E6547;
      goto LABEL_23;
    case 18:
      *(_DWORD *)(a2 + 16) = 1635017060;
      uint64_t v8 = *(void *)"alueMetadata";
      uint64_t v9 = 0x56636972656E6547;
LABEL_23:
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 20) = 0;
      char v3 = 20;
      goto LABEL_36;
    case 19:
      uint64_t v17 = (char *)operator new(0x28uLL);
      strcpy(v17, "SingletonGenericWitnessTableCache");
      *(void *)a2 = v17;
      long long v7 = xmmword_C6740;
      goto LABEL_30;
    case 20:
      strcpy((char *)a2, "GlobalMetadataCache");
      char v3 = 19;
      goto LABEL_36;
    case 21:
      int v18 = (char *)operator new(0x19uLL);
      strcpy(v18, "GlobalWitnessTableCache");
      *(void *)a2 = v18;
      long long v7 = xmmword_C6820;
      goto LABEL_30;
    case 22:
      uint64_t v15 = operator new(0x20uLL);
      int v16 = "ExtendedExistentialTypes";
LABEL_28:
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      void v15[2] = *((void *)v16 + 2);
      *((unsigned char *)v15 + 24) = 0;
      *(void *)a2 = v15;
      long long v7 = xmmword_C6810;
      goto LABEL_30;
    case 23:
      uint64_t v19 = (char *)operator new(0x20uLL);
      strcpy(v19, "ExtendedExistentialTypeShapes");
      *(void *)a2 = v19;
      long long v7 = xmmword_C6790;
LABEL_30:
      *(_OWORD *)(a2 + 8) = v7;
      goto LABEL_37;
    case 24:
      *(void *)a2 = 0x617461646174654DLL;
      int v20 = 1801675088;
      goto LABEL_35;
    case 25:
      uint64_t v10 = 0x547373656E746957;
      uint64_t v11 = 0x6B636150656C6261;
LABEL_33:
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v11;
      *(unsigned char *)(a2 + 16) = 0;
      char v3 = 16;
      goto LABEL_36;
    case 26:
      *(void *)a2 = 0x745374756F79614CLL;
      int v20 = 1735289202;
LABEL_35:
      *(_DWORD *)(a2 + 8) = v20;
      *(unsigned char *)(a2 + 12) = 0;
      char v3 = 12;
LABEL_36:
      *(unsigned char *)(a2 + 23) = v3;
LABEL_37:
      char v4 = 1;
      break;
    default:
      char v4 = 0;
      *(unsigned char *)a2 = 0;
      break;
  }
  *(unsigned char *)(a2 + 24) = v4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataAllocationCacheNode::$_0>(swift_reflection_metadataAllocationCacheNode::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(void **a1, uint64_t *a2)
{
  uint64_t v2 = (void **)**a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (*v2)[1];
  int v5 = *((_DWORD *)*v2 + 4);
  unsigned __int16 v7 = *(_DWORD *)*v2;
  int v8 = 0;
  __int16 v9 = 0;
  uint64_t v10 = v4;
  int v11 = v5;
  int v12 = 0;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationCacheNode(v3, &v7, &v13);
  if (!v14) {
    return 0;
  }
  *(_OWORD *)*v2[1] = v13;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataAllocationCacheNode::$_0>(swift_reflection_metadataAllocationCacheNode::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(void **a1, uint64_t *a2)
{
  uint64_t v2 = (void **)**a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (*v2)[1];
  int v5 = *((_DWORD *)*v2 + 4);
  unsigned __int16 v7 = *(_DWORD *)*v2;
  int v8 = 0;
  __int16 v9 = 0;
  uint64_t v10 = v4;
  int v11 = v5;
  int v12 = 0;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationCacheNode(v3, &v7, &v13);
  if (!v14) {
    return 0;
  }
  *(_OWORD *)*v2[1] = v13;
  return 1;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationCacheNode@<X0>(uint64_t result@<X0>, unsigned __int16 *a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned int v4 = *a2;
  BOOL v5 = v4 > 0x17;
  int v6 = (1 << v4) & 0xC1E7FE;
  if (v5 || v6 == 0)
  {
    *a3 = 0;
    a3[16] = 0;
    return result;
  }
  (*(void (**)(_OWORD **__return_ptr))(**(void **)(result + 2488) + 24))(&v10);
  int v8 = v10;
  if (v10)
  {
    *(_OWORD *)a3 = *v10;
    a3[16] = 1;
    uint64_t v10 = 0;
    long long v13 = v8;
    if (!v12)
    {
      uint64_t v9 = std::__throw_bad_function_call[abi:nn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocationBacktraces::$_0>(swift_reflection_iterateMetadataAllocationBacktraces::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v9);
    }
    (*(void (**)(void *, _OWORD **))(*v12 + 48))(v12, &v13);
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
    uint64_t v10 = 0;
  }
  __n128 result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void *))(*v12 + 40))(v12);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocationBacktraces::$_0>(swift_reflection_iterateMetadataAllocationBacktraces::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(long long ***a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v9 = off_C9170;
  long long v10 = *v2;
  int v11 = &v9;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocationBacktraces(v3, (uint64_t)&v9, (uint64_t)&v12);
  if (v11 == &v9)
  {
    ((void (*)(uint64_t (***)()))v9[4])(&v9);
  }
  else if (v11)
  {
    (*v11)[5]();
  }
  uint64_t v4 = **((void **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (!v13) {
    return 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocationBacktraces::$_0>(swift_reflection_iterateMetadataAllocationBacktraces::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(long long ***a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v9 = off_C91B8;
  long long v10 = *v2;
  int v11 = &v9;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocationBacktraces(v3, (uint64_t)&v9, (uint64_t)&v12);
  if (v11 == &v9)
  {
    ((void (*)(uint64_t (***)()))v9[4])(&v9);
  }
  else if (v11)
  {
    (*v11)[5]();
  }
  uint64_t v4 = **((void **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (!v13) {
    return 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v5;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocationBacktraces(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v40 = (char *)operator new(0x30uLL);
  long long v41 = xmmword_C67D0;
  strcpy(v40, "_swift_debug_metadataAllocationBacktraceList");
  uint64_t v6 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v40);
  if (!v6)
  {
    std::operator+<char>();
    *(_OWORD *)a3 = *(_OWORD *)__str;
    *(void *)(a3 + 16) = v31;
    *(unsigned char *)(a3 + 24) = 1;
    if ((SHIBYTE(v41) & 0x80000000) == 0) {
      return;
    }
LABEL_40:
    operator delete(v40);
    return;
  }
  swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v6, 8u, (uint64_t)&v36);
  if (v39)
  {
    uint64_t v7 = v38;
    char v8 = &__str[8];
    uint64_t v9 = &v34;
    int v10 = 1000000001;
    uint64_t v27 = a1;
    while (v7)
    {
      if (!--v10) {
        break;
      }
      (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 2488) + 24))(&v33);
      int v11 = v33;
      if (v33)
      {
        (*(void (**)(char *__return_ptr))(**(void **)(a1 + 2488) + 24))(__str);
        int v12 = *((_DWORD *)v11 + 4);
        *(void *)&long long __dst = v11[1];
        v43[0] = v12;
        uint64_t v42 = *(void *)__str;
        uint64_t v13 = *(void *)(a2 + 24);
        if (!v13) {
          goto LABEL_41;
        }
        (*(void (**)(uint64_t, long long *, int *, uint64_t *))(*(void *)v13 + 48))(v13, &__dst, v43, &v42);
        uint64_t v7 = *v11;
        uint64_t v14 = *(void *)__str;
        *(void *)__str = 0;
        if (v14)
        {
          *(void *)&long long __dst = v14;
          if (!v32) {
            goto LABEL_41;
          }
          (*(void (**)(char *, long long *))(*(void *)v32 + 48))(v32, &__dst);
        }
        if (v32 == v8)
        {
          (*(void (**)(char *))(*(void *)&__str[8] + 32))(v8);
        }
        else if (v32)
        {
          (*(void (**)(void))(*(void *)v32 + 40))();
        }
        goto LABEL_25;
      }
      snprintf(__str, 0x80uLL, "unable to read Next pointer %#llx", v7);
      size_t v15 = strlen(__str);
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_42;
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v18 = v15 | 7;
        }
        uint64_t v19 = v9;
        uint64_t v20 = a3;
        int v21 = v8;
        uint64_t v22 = a2;
        uint64_t v23 = v18 + 1;
        p_dst = (long long *)operator new(v18 + 1);
        unint64_t v24 = v23 | 0x8000000000000000;
        a2 = v22;
        char v8 = v21;
        a3 = v20;
        uint64_t v9 = v19;
        a1 = v27;
        *((void *)&__dst + 1) = v16;
        unint64_t v29 = v24;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v29) = v15;
        p_dst = &__dst;
        if (!v15) {
          goto LABEL_24;
        }
      }
      memcpy(p_dst, __str, v16);
LABEL_24:
      *((unsigned char *)p_dst + v16) = 0;
      *(_OWORD *)a3 = __dst;
      *(void *)(a3 + 16) = v29;
      *(unsigned char *)(a3 + 24) = 1;
LABEL_25:
      uint64_t v25 = v33;
      int v26 = v35;
      long long v33 = 0;
      if (v25)
      {
        *(void *)__str = v25;
        if (!v35)
        {
LABEL_41:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_42:
          abort();
        }
        (*(void (**)(void))(*v35 + 48))();
        int v26 = v35;
      }
      if (v26 == v9)
      {
        (*(void (**)(uint64_t *))(v34 + 32))(v9);
        if (!v11) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v26) {
          (*(void (**)(uint64_t *))(*v26 + 40))(v26);
        }
        if (!v11) {
          goto LABEL_34;
        }
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_34:
  if (v39)
  {
    if (v37 < 0) {
      operator delete(v36);
    }
  }
  if (SHIBYTE(v41) < 0) {
    goto LABEL_40;
  }
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C9170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C9170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEEclEOyOjOSN_(uint64_t a1, uint64_t *a2, unsigned int *a3, const void **a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  if (v6)
  {
    uint64_t v7 = *a4;
    char v8 = operator new(8 * v6);
    memcpy(v8, v7, 8 * v6);
  }
  else
  {
    char v8 = 0;
  }
  (**(void (***)(uint64_t, uint64_t, void *, void))(a1 + 8))(v5, v6, v8, **(void **)(a1 + 16));
  if (v8)
  {
    operator delete(v8);
  }
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_C91B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_C91B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEEclEOyOjOSN_(uint64_t a1, uint64_t *a2, unsigned int *a3, const void **a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  if (v6)
  {
    uint64_t v7 = *a4;
    char v8 = operator new(8 * v6);
    memcpy(v8, v7, 8 * v6);
  }
  else
  {
    char v8 = 0;
  }
  (**(void (***)(uint64_t, uint64_t, void *, void))(a1 + 8))(v5, v6, v8, **(void **)(a1 + 16));
  if (v8)
  {
    operator delete(v8);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_return SwiftReflectionContext::withContext<swift_async_task_slab_return,swift_reflection_asyncTaskSlabPointer::$_0>(swift_reflection_asyncTaskSlabPointer::$_0 const&)::{lambda(swift_async_task_slab_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (!*(unsigned char *)(v3 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
    if (v10) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
  if (!v10) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = **(void **)(v2 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_13:
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
  if (v10 && SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_return SwiftReflectionContext::withContext<swift_async_task_slab_return,swift_reflection_asyncTaskSlabPointer::$_0>(swift_reflection_asyncTaskSlabPointer::$_0 const&)::{lambda(swift_async_task_slab_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (!*(unsigned char *)(v3 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
    if (v10) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
  if (!v10) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = **(void **)(v2 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v8 = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  char v8 = 1;
  uint64_t v5 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v4);
  std::string::operator=((std::string *)v5, &__p);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v5 = *(void *)v5;
  }
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_13:
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
  if (v10 && SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v5;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2608))
  {
    int v12 = operator new(0x30uLL);
    long long v13 = xmmword_C6850;
    strcpy((char *)v12, "_swift_concurrency_debug_non_future_adapter");
    uint64_t v2 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v12);
    if (v2 && (swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v2, 8u, (uint64_t)&__p), v17))
    {
      uint64_t v3 = v16;
      if (SHIBYTE(v15) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    *(void *)(a1 + 2616) = v3;
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
    int v12 = operator new(0x28uLL);
    long long v13 = xmmword_C6860;
    strcpy((char *)v12, "_swift_concurrency_debug_future_adapter");
    uint64_t v4 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v12);
    if (v4 && (swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v4, 8u, (uint64_t)&__p), v17))
    {
      uint64_t v5 = v16;
      if (SHIBYTE(v15) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    *(void *)(a1 + 2624) = v5;
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
    int v12 = operator new(0x40uLL);
    long long v13 = xmmword_C6870;
    strcpy((char *)v12, "_swift_concurrency_debug_task_wait_throwing_resume_adapter");
    uint64_t v6 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v12);
    if (v6 && (swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v6, 8u, (uint64_t)&__p), v17))
    {
      uint64_t v7 = v16;
      if (SHIBYTE(v15) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *(void *)(a1 + 2632) = v7;
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
    int v12 = operator new(0x40uLL);
    long long v13 = xmmword_C6880;
    strcpy((char *)v12, "_swift_concurrency_debug_task_future_wait_resume_adapter");
    uint64_t v8 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 2488) + 8))(*(void *)(a1 + 2488), &v12);
    if (v8 && (swift::remote::MemoryReader::readPointer(*(void *)(a1 + 2488), v8, 8u, (uint64_t)&__p), v17))
    {
      uint64_t v9 = v16;
      if (SHIBYTE(v15) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    *(void *)(a1 + 2640) = v9;
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
    uint64_t v10 = *(void *)(a1 + 2488);
    std::string __p = operator new(0x38uLL);
    long long v15 = xmmword_C6890;
    strcpy((char *)__p, "_swift_concurrency_debug_supportsPriorityEscalation");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v10 + 8))(v10, &__p);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
    if (v11) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2488) + 32))(*(void *)(a1 + 2488), v11, a1 + 2648, 1);
    }
    *(unsigned char *)(a1 + 2608) = 1;
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t v5 = a1;
  swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(void *)(a1 + 2488), &v108);
  if (v108)
  {
    int v89 = a3;
    uint64_t v87 = a4;
    unsigned int v7 = *(_DWORD *)(v108 + 32);
    int v76 = v7;
    int v77 = BYTE1(v7);
    int32x4_t v8 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v7), (uint32x4_t)xmmword_C68A0);
    v8.i64[0] = *(void *)&vmovn_s32(v8) & 0xFF01FF01FF01FF01;
    int16x8_t v75 = (int16x8_t)v8;
    unsigned int v9 = *(_DWORD *)(v108 + 96);
    unsigned int v10 = *(_DWORD *)(v108 + 100);
    int v79 = (v9 >> 8) & 1;
    int v80 = (v9 >> 9) & 1;
    int v86 = (v9 >> 12) & 1;
    int v81 = (v9 >> 10) & 1;
    BOOL v82 = v10 > 3;
    int v11 = v10 | 3;
    unsigned int v88 = v10;
    if (v10 < 4) {
      int v11 = 0;
    }
    int v85 = v11;
    unint64_t v83 = *(unsigned int *)(v108 + 36) | ((unint64_t)*(unsigned int *)(v108 + 144) << 32);
    std::string::size_type v84 = *(void *)(v108 + 120);
    uint64_t v78 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getRunJob<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, v108);
    int v12 = 0;
    long long v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = *(void *)(v108 + 104);
    uint64_t v96 = v5;
    while (1)
    {
      if (!v16 || v15 == a2)
      {
LABEL_67:
        if (v88 > 3)
        {
          long long v40 = 0;
          uint64_t v95 = 0;
LABEL_69:
          v87->__r_.__value_.__s.__data_[0] = 0;
          v87[1].__r_.__value_.__s.__data_[0] = 0;
          LODWORD(v87[1].__r_.__value_.__r.__words[1]) = v76;
          HIDWORD(v87[1].__r_.__value_.__r.__words[1]) = v77;
          v87[1].__r_.__value_.__r.__words[2] = vmovn_s16(v75).u32[0];
          v87[2].__r_.__value_.__s.__data_[0] = v79;
          v87[2].__r_.__value_.__s.__data_[1] = v80;
          v87[2].__r_.__value_.__s.__data_[2] = v81;
          v87[2].__r_.__value_.__s.__data_[3] = 1;
          v87[2].__r_.__value_.__s.__data_[4] = v82;
          v87[2].__r_.__value_.__s.__data_[5] = v86;
          v87[2].__r_.__value_.__s.__data_[6] = 1;
          LODWORD(v87[2].__r_.__value_.__r.__words[1]) = v85;
          v87[2].__r_.__value_.__r.__words[2] = v83;
          v87[3].__r_.__value_.__r.__words[0] = v78;
          v87[3].__r_.__value_.__l.__size_ = v84;
          v87[3].__r_.__value_.__r.__words[2] = 0;
          v87[4].__r_.__value_.__r.__words[0] = 0;
          v87[4].__r_.__value_.__l.__size_ = 0;
          int64_t v41 = v13 - v12;
          if (v13 != v12)
          {
            if ((v41 & 0x8000000000000000) == 0)
            {
              uint64_t v42 = (char *)operator new(v41);
              v87[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v42;
              v87[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
              long long v43 = &v42[8 * (v41 >> 3)];
              v87[4].__r_.__value_.__l.__size_ = (std::string::size_type)v43;
              memcpy(v42, v12, v41);
              v87[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
              goto LABEL_72;
            }
LABEL_138:
            abort();
          }
LABEL_72:
          v87[4].__r_.__value_.__r.__words[2] = 0;
          v87[5].__r_.__value_.__r.__words[0] = 0;
          v87[5].__r_.__value_.__l.__size_ = 0;
          uint64_t v44 = v95 - v40;
          if (v95 != v40)
          {
            if (v44 < 0) {
              goto LABEL_138;
            }
            long long v45 = (char *)operator new(v95 - v40);
            v87[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
            v87[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
            long long v46 = &v45[8 * (v44 >> 3)];
            v87[5].__r_.__value_.__l.__size_ = (std::string::size_type)v46;
            memcpy(v45, v40, v95 - v40);
            v87[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          }
          if (v40) {
            operator delete(v40);
          }
          if (v12)
          {
            long long v47 = v12;
            goto LABEL_86;
          }
          goto LABEL_87;
        }
        uint64_t v92 = 0;
        uint64_t v95 = 0;
        long long v40 = 0;
        int v51 = 0;
        uint64_t v52 = *(void *)(v108 + 64);
        int v53 = v89;
        while (2)
        {
          if (!v52 || v51 == v53) {
            goto LABEL_69;
          }
          swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v5 + 2488), v101);
          long long v54 = *(uint64_t **)v101;
          if (*(void *)v101)
          {
            uint64_t v55 = *(void *)(v5 + 2504) & *(void *)(*(void *)v101 + 8);
            if (v95 < v92)
            {
              *(void *)uint64_t v95 = v55;
              long long v56 = v54;
              unint64_t v90 = v95 + 8;
              goto LABEL_124;
            }
            uint64_t v57 = (v95 - v40) >> 3;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 61) {
              goto LABEL_138;
            }
            if ((v92 - v40) >> 2 > v58) {
              unint64_t v58 = (v92 - v40) >> 2;
            }
            unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v92 - v40) < 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = v58;
            }
            unint64_t v93 = v59;
            if (v59)
            {
              if (v59 >> 61) {
                goto LABEL_139;
              }
              int v60 = operator new(8 * v59);
            }
            else
            {
              int v60 = 0;
            }
            long long v61 = &v60[8 * v57];
            *(void *)long long v61 = v55;
            unint64_t v90 = v61 + 8;
            if (v95 == v40)
            {
              int v53 = v89;
              uint64_t v5 = v96;
              unint64_t v64 = v93;
            }
            else
            {
              unint64_t v62 = v95 - v40 - 8;
              if (v62 < 0x168
                || (unint64_t v68 = (v95 - 8 - v40) & 0xFFFFFFFFFFFFFFF8, &v60[v95 - v40 - 8 - v68] > &v60[v95 - v40 - 8])
                || &v95[-v68 - 8] > v95 - 8)
              {
                long long v63 = v95;
                goto LABEL_116;
              }
              if ((unint64_t)(v40 - v60) >= 0x20)
              {
                uint64_t v69 = (v62 >> 3) + 1;
                uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
                long long v63 = &v95[-v70];
                v61 -= v70;
                unint64_t v71 = &v60[8 * v57 - 16];
                uint64_t v72 = v95 - 16;
                uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                uint64_t v5 = v96;
                do
                {
                  long long v74 = *(_OWORD *)v72;
                  *(v71 - 1) = *((_OWORD *)v72 - 1);
                  *unint64_t v71 = v74;
                  v71 -= 2;
                  v72 -= 32;
                  v73 -= 4;
                }
                while (v73);
                int v53 = v89;
                unint64_t v64 = v93;
                if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_117;
                }
              }
              else
              {
                long long v63 = v95;
LABEL_116:
                int v53 = v89;
                uint64_t v5 = v96;
                unint64_t v64 = v93;
                do
                {
LABEL_117:
                  uint64_t v65 = *((void *)v63 - 1);
                  v63 -= 8;
                  *((void *)v61 - 1) = v65;
                  v61 -= 8;
                }
                while (v63 != v40);
              }
            }
            uint64_t v92 = &v60[8 * v64];
            if (v40)
            {
              operator delete(v40);
              long long v56 = *(uint64_t **)v101;
            }
            else
            {
              long long v56 = v54;
            }
            long long v40 = v61;
LABEL_124:
            uint64_t v66 = *v56;
            uint64_t v67 = *(void *)(v5 + 2504);
            *(void *)unint64_t v101 = 0;
            uint64_t v97 = v56;
            if (!(void)v103) {
              goto LABEL_137;
            }
            uint64_t v52 = v67 & v66;
            (*(void (**)(void, void **))(*(void *)v103 + 48))(v103, &v97);
            uint64_t v95 = v90;
          }
          else
          {
            *(void *)unint64_t v101 = 0;
          }
          if ((unsigned char *)v103 == &v101[8])
          {
            (*(void (**)(unsigned char *))(*(void *)&v101[8] + 32))(&v101[8]);
          }
          else if ((void)v103)
          {
            (*(void (**)(void))(*(void *)v103 + 40))();
          }
          ++v51;
          if (!v54) {
            goto LABEL_69;
          }
          continue;
        }
      }
      swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v5 + 2488), v101);
      uint64_t v18 = *(void *)v101;
      if (!*(void *)v101)
      {
        *(void *)unint64_t v101 = 0;
        goto LABEL_27;
      }
      uint64_t v94 = *(void *)v101;
      int v19 = **(unsigned char **)v101;
      if (v19 == 2)
      {
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v5 + 2488), &v97);
        uint64_t v20 = v97;
        if (!v97) {
          goto LABEL_14;
        }
      }
      else
      {
        if (v19 != 1) {
          goto LABEL_25;
        }
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v5 + 2488), &v97);
        uint64_t v20 = v97;
        if (!v97)
        {
LABEL_14:
          uint64_t v21 = 0;
          uint64_t v97 = 0;
          goto LABEL_19;
        }
      }
      uint64_t v21 = v20[2];
      uint64_t v97 = 0;
      v111[0] = v20;
      if (!v100) {
        goto LABEL_137;
      }
      (*(void (**)(long long *, void *))(*(void *)v100 + 48))(v100, v111);
LABEL_19:
      if (v100 == &v98)
      {
        (*(void (**)(long long *))(v98 + 32))(&v98);
        if (v21) {
          goto LABEL_32;
        }
        goto LABEL_25;
      }
      if (v100) {
        (*(void (**)(void))(*(void *)v100 + 40))();
      }
      if (v21)
      {
LABEL_32:
        while (v13 < v14)
        {
          *(void *)long long v13 = v21;
          v13 += 8;
LABEL_51:
          swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v5 + 2488), &v97);
          long long v32 = v97;
          if (v97)
          {
            uint64_t v21 = *((void *)v97 + 1);
            uint64_t v97 = 0;
            v111[0] = v32;
            if (!v100) {
              goto LABEL_137;
            }
            (*(void (**)(long long *, void *))(*(void *)v100 + 48))(v100, v111);
          }
          else
          {
            uint64_t v21 = 0;
            uint64_t v97 = 0;
          }
          if (v100 == &v98)
          {
            (*(void (**)(long long *))(v98 + 32))(&v98);
          }
          else if (v100)
          {
            (*(void (**)(void))(*(void *)v100 + 40))();
          }
          if (!v21) {
            goto LABEL_25;
          }
        }
        uint64_t v23 = (v13 - v12) >> 3;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61) {
          goto LABEL_138;
        }
        if ((v14 - v12) >> 2 > v24) {
          unint64_t v24 = (v14 - v12) >> 2;
        }
        if ((unint64_t)(v14 - v12) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25)
        {
          if (v25 >> 61) {
LABEL_139:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          int v26 = operator new(8 * v25);
        }
        else
        {
          int v26 = 0;
        }
        uint64_t v27 = &v26[8 * v23];
        *(void *)uint64_t v27 = v21;
        uint64_t v28 = v27 + 8;
        if (v13 != v12)
        {
          unint64_t v29 = v13 - v12 - 8;
          if (v29 < 0x168
            || (unint64_t v33 = (v13 - 8 - v12) & 0xFFFFFFFFFFFFFFF8, &v26[v13 - v12 - 8 - v33] > &v26[v13 - v12 - 8])
            || &v13[-v33 - 8] > v13 - 8
            || (unint64_t)(v12 - v26) < 0x20)
          {
            uint64_t v30 = v13;
            uint64_t v5 = v96;
          }
          else
          {
            uint64_t v34 = (v29 >> 3) + 1;
            uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v30 = &v13[-v35];
            v27 -= v35;
            long long v36 = &v26[8 * v23 - 16];
            char v37 = v13 - 16;
            uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v5 = v96;
            do
            {
              long long v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *long long v36 = v39;
              v36 -= 2;
              v37 -= 32;
              v38 -= 4;
            }
            while (v38);
            if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_48:
              uint64_t v14 = &v26[8 * v25];
              if (v12) {
                goto LABEL_49;
              }
              goto LABEL_50;
            }
          }
          do
          {
            uint64_t v31 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v27 - 1) = v31;
            v27 -= 8;
          }
          while (v30 != v12);
          goto LABEL_48;
        }
        uint64_t v5 = v96;
        uint64_t v14 = &v26[8 * v25];
        if (v12) {
LABEL_49:
        }
          operator delete(v12);
LABEL_50:
        int v12 = v27;
        long long v13 = v28;
        goto LABEL_51;
      }
LABEL_25:
      uint64_t v22 = *(void **)v101;
      uint64_t v16 = *(void *)(*(void *)v101 + 8);
      *(void *)unint64_t v101 = 0;
      uint64_t v97 = v22;
      if (!(void)v103) {
        goto LABEL_137;
      }
      (*(void (**)(void, void **))(*(void *)v103 + 48))(v103, &v97);
      uint64_t v18 = v94;
LABEL_27:
      if ((unsigned char *)v103 == &v101[8])
      {
        uint64_t v17 = v18;
        (*(void (**)(unsigned char *))(*(void *)&v101[8] + 32))(&v101[8]);
      }
      else
      {
        if (!(void)v103) {
          goto LABEL_7;
        }
        uint64_t v17 = v18;
        (*(void (**)(void))(*(void *)v103 + 40))();
      }
      uint64_t v18 = v17;
LABEL_7:
      ++v15;
      if (!v18) {
        goto LABEL_67;
      }
    }
  }
  long long v48 = (char *)operator new(0x20uLL);
  strcpy(v48, "failure reading async task");
  uint64_t v97 = v48;
  long long v98 = xmmword_C6830;
  char v99 = 1;
  int v102 = 0;
  memset(v101, 0, sizeof(v101));
  long long v103 = 0u;
  *(_OWORD *)uint64_t v104 = 0u;
  long long v105 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v107 = 0;
  std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(a4, (long long *)&v97, (long long *)v101);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v104[1])
  {
    *(void **)&long long v105 = v104[1];
    operator delete(v104[1]);
  }
  if (v99 && SHIBYTE(v98) < 0)
  {
    long long v47 = v97;
LABEL_86:
    operator delete(v47);
  }
LABEL_87:
  uint64_t v49 = v108;
  uint64_t v108 = 0;
  if (v49)
  {
    *(void *)unint64_t v101 = v49;
    if (!v110)
    {
LABEL_137:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_138;
    }
    (*(void (**)(void *, unsigned char *))(*v110 + 48))(v110, v101);
  }
  uint64_t result = (uint64_t)v110;
  if (v110 == v109) {
    return (*(uint64_t (**)(void *))(v109[0] + 32))(v109);
  }
  if (v110) {
    return (*(uint64_t (**)(void))(*v110 + 40))();
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t v4 = a1;
  swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(void *)(a1 + 2488), &v102);
  if (v102)
  {
    unint64_t v83 = a4;
    unsigned int v6 = *(_DWORD *)(v102 + 32);
    int v73 = v6;
    int v75 = BYTE1(v6);
    int32x4_t v7 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v6), (uint32x4_t)xmmword_C68A0);
    v7.i64[0] = *(void *)&vmovn_s32(v7) & 0xFF01FF01FF01FF01;
    int16x8_t v74 = (int16x8_t)v7;
    unsigned int v8 = *(_DWORD *)(v102 + 96);
    int v76 = (v8 >> 8) & 1;
    int v77 = (v8 >> 9) & 1;
    int v78 = (v8 >> 10) & 1;
    int v80 = (v8 >> 12) & 1;
    int v84 = (v8 >> 11) & 1;
    unint64_t v81 = *(unsigned int *)(v102 + 36) | ((unint64_t)*(unsigned int *)(v102 + 144) << 32);
    std::string::size_type v82 = *(void *)(v102 + 120);
    uint64_t v79 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getRunJob<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v4, v102);
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = *(void *)(v102 + 104);
    uint64_t v90 = v4;
    while (v13 && v12 != a2)
    {
      swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v4 + 2488), v95);
      uint64_t v15 = *(void *)v95;
      if (!*(void *)v95)
      {
        *(void *)uint64_t v95 = 0;
        goto LABEL_25;
      }
      uint64_t v87 = *(void *)v95;
      int v16 = **(unsigned char **)v95;
      if (v16 == 2)
      {
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v4 + 2488), &v91);
        uint64_t v17 = v91;
        if (!v91) {
          goto LABEL_12;
        }
      }
      else
      {
        if (v16 != 1) {
          goto LABEL_23;
        }
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v4 + 2488), &v91);
        uint64_t v17 = v91;
        if (!v91)
        {
LABEL_12:
          uint64_t v18 = 0;
          unint64_t v91 = 0;
          goto LABEL_17;
        }
      }
      uint64_t v18 = *((void *)v17 + 2);
      unint64_t v91 = 0;
      v105[0] = v17;
      if (!v94) {
        goto LABEL_134;
      }
      (*(void (**)(long long *, void *))(*(void *)v94 + 48))(v94, v105);
LABEL_17:
      if (v94 == &v92)
      {
        (*(void (**)(long long *))(v92 + 32))(&v92);
        if (v18) {
          goto LABEL_30;
        }
        goto LABEL_23;
      }
      if (v94) {
        (*(void (**)(void))(*(void *)v94 + 40))();
      }
      if (v18)
      {
LABEL_30:
        while (v10 < v11)
        {
          *(void *)unsigned int v10 = v18;
          v10 += 8;
LABEL_49:
          swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v4 + 2488), &v91);
          unint64_t v29 = v91;
          if (v91)
          {
            uint64_t v18 = *((void *)v91 + 1);
            unint64_t v91 = 0;
            v105[0] = v29;
            if (!v94) {
              goto LABEL_134;
            }
            (*(void (**)(long long *, void *))(*(void *)v94 + 48))(v94, v105);
          }
          else
          {
            uint64_t v18 = 0;
            unint64_t v91 = 0;
          }
          if (v94 == &v92)
          {
            (*(void (**)(long long *))(v92 + 32))(&v92);
          }
          else if (v94)
          {
            (*(void (**)(void))(*(void *)v94 + 40))();
          }
          if (!v18) {
            goto LABEL_23;
          }
        }
        uint64_t v20 = (v10 - v9) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          goto LABEL_135;
        }
        if ((v11 - v9) >> 2 > v21) {
          unint64_t v21 = (v11 - v9) >> 2;
        }
        if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 >> 61) {
LABEL_136:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          uint64_t v23 = operator new(8 * v22);
        }
        else
        {
          uint64_t v23 = 0;
        }
        unint64_t v24 = &v23[8 * v20];
        *(void *)unint64_t v24 = v18;
        unint64_t v25 = v24 + 8;
        if (v10 != v9)
        {
          unint64_t v26 = v10 - v9 - 8;
          if (v26 < 0x168)
          {
            uint64_t v27 = v10;
            goto LABEL_45;
          }
          unint64_t v30 = (v10 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
          if (&v23[v10 - v9 - 8 - v30] > &v23[v10 - v9 - 8])
          {
            uint64_t v27 = v10;
            goto LABEL_45;
          }
          if (&v10[-v30 - 8] > v10 - 8)
          {
            uint64_t v27 = v10;
            goto LABEL_45;
          }
          if ((unint64_t)(v9 - v23) < 0x20)
          {
            uint64_t v27 = v10;
            goto LABEL_45;
          }
          uint64_t v31 = (v26 >> 3) + 1;
          uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v27 = &v10[-v32];
          v24 -= v32;
          unint64_t v33 = &v23[8 * v20 - 16];
          uint64_t v34 = v10 - 16;
          uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            _OWORD *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 4;
          }
          while (v35);
          if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_45:
              uint64_t v28 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v24 - 1) = v28;
              v24 -= 8;
            }
            while (v27 != v9);
          }
        }
        int v11 = &v23[8 * v22];
        if (v9) {
          operator delete(v9);
        }
        unsigned int v9 = v24;
        unsigned int v10 = v25;
        uint64_t v4 = v90;
        goto LABEL_49;
      }
LABEL_23:
      int v19 = *(char **)v95;
      uint64_t v13 = *(void *)(*(void *)v95 + 8);
      *(void *)uint64_t v95 = 0;
      unint64_t v91 = v19;
      if (!(void)v97) {
        goto LABEL_134;
      }
      (*(void (**)(void, char **))(*(void *)v97 + 48))(v97, &v91);
      uint64_t v15 = v87;
LABEL_25:
      if ((unsigned char *)v97 == &v95[8])
      {
        uint64_t v14 = v15;
        (*(void (**)(unsigned char *))(*(void *)&v95[8] + 32))(&v95[8]);
      }
      else
      {
        if (!(void)v97) {
          goto LABEL_5;
        }
        uint64_t v14 = v15;
        (*(void (**)(void))(*(void *)v97 + 40))();
      }
      uint64_t v15 = v14;
LABEL_5:
      ++v12;
      if (!v15) {
        break;
      }
    }
    if (!v84)
    {
      char v37 = 0;
      uint64_t v38 = 0;
      int v39 = 0;
      uint64_t v40 = *(void *)(v102 + 64);
      unsigned int v88 = 0;
      while (1)
      {
        if (!v40 || v39 == a3) {
          goto LABEL_115;
        }
        swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(void *)(v4 + 2488), v95);
        int64_t v41 = *(char **)v95;
        if (*(void *)v95) {
          break;
        }
        *(void *)uint64_t v95 = 0;
LABEL_97:
        if ((unsigned char *)v97 == &v95[8])
        {
          (*(void (**)(unsigned char *))(*(void *)&v95[8] + 32))(&v95[8]);
        }
        else if ((void)v97)
        {
          (*(void (**)(void))(*(void *)v97 + 40))();
        }
        ++v39;
        if (!v41) {
          goto LABEL_115;
        }
      }
      uint64_t v42 = *(void *)(v4 + 2504) & *(void *)(*(void *)v95 + 8);
      if (v37 < v88)
      {
        *(void *)char v37 = v42;
        v37 += 8;
        long long v43 = v41;
LABEL_95:
        uint64_t v54 = *(void *)v43;
        uint64_t v55 = *(void *)(v4 + 2504);
        *(void *)uint64_t v95 = 0;
        unint64_t v91 = v43;
        if (!(void)v97) {
          goto LABEL_134;
        }
        uint64_t v40 = v55 & v54;
        (*(void (**)(void, char **))(*(void *)v97 + 48))(v97, &v91);
        goto LABEL_97;
      }
      uint64_t v44 = (v37 - v38) >> 3;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61) {
        goto LABEL_135;
      }
      if ((v88 - v38) >> 2 > v45) {
        unint64_t v45 = (v88 - v38) >> 2;
      }
      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      if ((unint64_t)(v88 - v38) < 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = v45;
      }
      unint64_t v89 = v46;
      if (v46)
      {
        if (v46 >> 61) {
          goto LABEL_136;
        }
        long long v47 = operator new(8 * v46);
      }
      else
      {
        long long v47 = 0;
      }
      long long v48 = &v47[8 * v44];
      *(void *)long long v48 = v42;
      uint64_t v49 = v48 + 8;
      if (v37 == v38)
      {
        unint64_t v52 = v89;
        uint64_t v4 = v90;
        char v37 = v48 + 8;
        goto LABEL_91;
      }
      unint64_t v50 = v37 - v38 - 8;
      if (v50 < 0x168
        || (unint64_t v56 = (v37 - 8 - v38) & 0xFFFFFFFFFFFFFFF8, &v47[v37 - v38 - 8 - v56] > &v47[v37 - v38 - 8])
        || &v37[-v56 - 8] > v37 - 8
        || (unint64_t)(v38 - v47) < 0x20)
      {
        int v51 = v37;
        unint64_t v52 = v89;
        uint64_t v4 = v90;
        char v37 = v48 + 8;
      }
      else
      {
        uint64_t v57 = (v50 >> 3) + 1;
        uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
        int v51 = &v37[-v58];
        v48 -= v58;
        unint64_t v59 = &v47[8 * v44 - 16];
        int v60 = v37 - 16;
        uint64_t v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *unint64_t v59 = v62;
          v59 -= 2;
          v60 -= 32;
          v61 -= 4;
        }
        while (v61);
        unint64_t v52 = v89;
        uint64_t v4 = v90;
        char v37 = v49;
        if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_91:
          unsigned int v88 = &v47[8 * v52];
          if (v38)
          {
            operator delete(v38);
            long long v43 = *(char **)v95;
          }
          else
          {
            long long v43 = v41;
          }
          uint64_t v38 = v48;
          goto LABEL_95;
        }
      }
      do
      {
        uint64_t v53 = *((void *)v51 - 1);
        v51 -= 8;
        *((void *)v48 - 1) = v53;
        v48 -= 8;
      }
      while (v51 != v38);
      goto LABEL_91;
    }
    uint64_t v38 = 0;
    char v37 = 0;
LABEL_115:
    v83->__r_.__value_.__s.__data_[0] = 0;
    v83[1].__r_.__value_.__s.__data_[0] = 0;
    LODWORD(v83[1].__r_.__value_.__r.__words[1]) = v73;
    HIDWORD(v83[1].__r_.__value_.__r.__words[1]) = v75;
    v83[1].__r_.__value_.__r.__words[2] = vmovn_s16(v74).u32[0];
    v83[2].__r_.__value_.__s.__data_[0] = v76;
    v83[2].__r_.__value_.__s.__data_[1] = v77;
    v83[2].__r_.__value_.__s.__data_[2] = v78;
    v83[2].__r_.__value_.__s.__data_[3] = 1;
    v83[2].__r_.__value_.__s.__data_[4] = v84;
    v83[2].__r_.__value_.__s.__data_[5] = v80;
    v83[2].__r_.__value_.__s.__data_[6] = 0;
    LODWORD(v83[2].__r_.__value_.__r.__words[1]) = 0;
    v83[2].__r_.__value_.__r.__words[2] = v81;
    v83[3].__r_.__value_.__r.__words[0] = v79;
    v83[3].__r_.__value_.__l.__size_ = v82;
    v83[3].__r_.__value_.__r.__words[2] = 0;
    v83[4].__r_.__value_.__r.__words[0] = 0;
    v83[4].__r_.__value_.__l.__size_ = 0;
    int64_t v65 = v10 - v9;
    if (v65)
    {
      if (v65 < 0) {
        goto LABEL_135;
      }
      uint64_t v66 = (char *)operator new(v65);
      v83[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v66;
      v83[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
      uint64_t v67 = &v66[8 * (v65 >> 3)];
      v83[4].__r_.__value_.__l.__size_ = (std::string::size_type)v67;
      memcpy(v66, v9, v65);
      v83[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    }
    v83[4].__r_.__value_.__r.__words[2] = 0;
    v83[5].__r_.__value_.__r.__words[0] = 0;
    v83[5].__r_.__value_.__l.__size_ = 0;
    uint64_t v68 = v37 - v38;
    if (v37 != v38)
    {
      if (v68 < 0) {
        goto LABEL_135;
      }
      uint64_t v69 = (char *)operator new(v37 - v38);
      v83[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v69;
      v83[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      uint64_t v70 = &v69[8 * (v68 >> 3)];
      v83[5].__r_.__value_.__l.__size_ = (std::string::size_type)v70;
      memcpy(v69, v38, v37 - v38);
      v83[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
    }
    if (v38) {
      operator delete(v38);
    }
    if (v9)
    {
      unint64_t v64 = v9;
      goto LABEL_125;
    }
  }
  else
  {
    long long v63 = (char *)operator new(0x20uLL);
    strcpy(v63, "failure reading async task");
    unint64_t v91 = v63;
    long long v92 = xmmword_C6830;
    char v93 = 1;
    int v96 = 0;
    memset(v95, 0, sizeof(v95));
    long long v97 = 0u;
    *(_OWORD *)long long v98 = 0u;
    long long v99 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v101 = 0;
    std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(a4, (long long *)&v91, (long long *)v95);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v98[1])
    {
      *(void **)&long long v99 = v98[1];
      operator delete(v98[1]);
    }
    if (v93 && SHIBYTE(v92) < 0)
    {
      unint64_t v64 = v91;
LABEL_125:
      operator delete(v64);
    }
  }
  uint64_t v71 = v102;
  uint64_t v102 = 0;
  if (!v71) {
    goto LABEL_129;
  }
  *(void *)uint64_t v95 = v71;
  if (!v104)
  {
LABEL_134:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_135:
    abort();
  }
  (*(void (**)(void *, unsigned char *))(*v104 + 48))(v104, v95);
LABEL_129:
  uint64_t result = (uint64_t)v104;
  if (v104 == v103) {
    return (*(uint64_t (**)(void *))(v103[0] + 32))(v103);
  }
  if (v104) {
    return (*(uint64_t (**)(void))(*v104 + 40))();
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getRunJob<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 2504) & *(void *)(a2 + 56);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(a1);
  uint64_t v4 = *(void *)(v2 + 2616);
  if (v4) {
    BOOL v5 = v3 == v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v2 + 2488) + 24))(&v15);
    unsigned int v10 = v15;
    if (v15)
    {
      uint64_t v11 = *v15;
      goto LABEL_18;
    }
LABEL_20:
    uint64_t v15 = 0;
LABEL_21:
    if (v17 == v16)
    {
      (*(void (**)(void *))(v16[0] + 32))(v16);
      if (v10) {
        return v2;
      }
    }
    else
    {
      if (v17) {
        (*(void (**)(void *))(*v17 + 40))(v17);
      }
      if (v10) {
        return v2;
      }
    }
    return v3;
  }
  uint64_t v6 = *(void *)(v2 + 2624);
  if (v6) {
    BOOL v7 = v3 == v6;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    uint64_t v8 = *(void *)(v2 + 2632);
    if (!v8 || v3 != v8)
    {
      uint64_t v9 = *(void *)(v2 + 2640);
      if (!v9 || v3 != v9) {
        return v3;
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v2 + 2488) + 24))(&v15);
  unsigned int v10 = v15;
  if (!v15) {
    goto LABEL_20;
  }
  uint64_t v11 = v15[1];
LABEL_18:
  uint64_t v12 = *(void *)(v2 + 2504);
  uint64_t v15 = 0;
  uint64_t v18 = v10;
  if (v17)
  {
    uint64_t v2 = v12 & v11;
    (*(void (**)(void *, void **))(*v17 + 48))(v17, &v18);
    goto LABEL_21;
  }
  uint64_t v14 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v14);
}

void *swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v12);
  if (v14)
  {
    if (v14 == v13)
    {
      uint64_t v11 = v10;
      (*(void (**)(void *, void *))(v13[0] + 24))(v13, v10);
      uint64_t v3 = v11;
    }
    else
    {
      uint64_t v3 = (void *)(*(uint64_t (**)(void))(*v14 + 16))();
      uint64_t v11 = v3;
    }
    uint64_t v5 = v12;
    uint64_t v12 = 0;
    *a2 = v5;
    uint64_t v6 = a2 + 1;
    if (v3)
    {
      if (v3 == v10)
      {
        a2[4] = v6;
        (*(void (**)(void *))(v10[0] + 24))(v10);
      }
      else
      {
        a2[4] = (*(uint64_t (**)(void *, void *))(*v3 + 16))(v3, v6);
      }
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
    else
    {
      a2[4] = 0;
    }
  }
  else
  {
    uint64_t v4 = v12;
    uint64_t v12 = 0;
    *a2 = v4;
    a2[4] = 0;
  }
  uint64_t v7 = v12;
  uint64_t result = v14;
  uint64_t v12 = 0;
  if (v7)
  {
    v10[0] = v7;
    if (!v14)
    {
      uint64_t v9 = (std::string *)std::__throw_bad_function_call[abi:nn180100]();
      return (void *)std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(v9);
    }
    (*(void (**)(void))(*v14 + 48))();
    uint64_t result = v14;
  }
  if (result == v13) {
    return (void *)(*(uint64_t (**)(void *))(v13[0] + 32))(v13);
  }
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  return result;
}

std::string *std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v5 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  long long v6 = *a3;
  long long v7 = a3[2];
  std::string::size_type v8 = *((void *)a3 + 6);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a3[1];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  this[3].__r_.__value_.__l.__size_ = v8;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  unsigned int v10 = (unsigned char *)*((void *)a3 + 7);
  uint64_t v9 = (unsigned char *)*((void *)a3 + 8);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      goto LABEL_13;
    }
    uint64_t v12 = operator new(v9 - v10);
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
    this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    std::string::size_type v13 = (std::string::size_type)v12 + 8 * (v11 >> 3);
    this[4].__r_.__value_.__l.__size_ = v13;
    memcpy(v12, v10, v11);
    this[4].__r_.__value_.__r.__words[0] = v13;
  }
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  uint64_t v15 = (unsigned char *)*((void *)a3 + 10);
  uint64_t v14 = (unsigned char *)*((void *)a3 + 11);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = operator new(v14 - v15);
      this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
      this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      std::string::size_type v18 = (std::string::size_type)v17 + 8 * (v16 >> 3);
      this[5].__r_.__value_.__l.__size_ = v18;
      memcpy(v17, v15, v16);
      this[5].__r_.__value_.__r.__words[0] = v18;
      return this;
    }
LABEL_13:
    abort();
  }
  return this;
}

void *swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v12);
  if (v14)
  {
    if (v14 == v13)
    {
      int64_t v11 = v10;
      (*(void (**)(void *, void *))(v13[0] + 24))(v13, v10);
      uint64_t v3 = v11;
    }
    else
    {
      uint64_t v3 = (void *)(*(uint64_t (**)(void))(*v14 + 16))();
      int64_t v11 = v3;
    }
    uint64_t v5 = v12;
    uint64_t v12 = 0;
    *a2 = v5;
    long long v6 = a2 + 1;
    if (v3)
    {
      if (v3 == v10)
      {
        a2[4] = v6;
        (*(void (**)(void *))(v10[0] + 24))(v10);
      }
      else
      {
        a2[4] = (*(uint64_t (**)(void *, void *))(*v3 + 16))(v3, v6);
      }
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
    else
    {
      a2[4] = 0;
    }
  }
  else
  {
    uint64_t v4 = v12;
    uint64_t v12 = 0;
    *a2 = v4;
    a2[4] = 0;
  }
  uint64_t v7 = v12;
  uint64_t result = v14;
  uint64_t v12 = 0;
  if (v7)
  {
    v10[0] = v7;
    if (!v14)
    {
      uint64_t v9 = std::__throw_bad_function_call[abi:nn180100]();
      return (void *)swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(v9);
    }
    (*(void (**)(void))(*v14 + 48))();
    uint64_t result = v14;
  }
  if (result == v13) {
    return (void *)(*(uint64_t (**)(void *))(v13[0] + 32))(v13);
  }
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  return result;
}

void *swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v12);
  if (v14)
  {
    if (v14 == v13)
    {
      int64_t v11 = v10;
      (*(void (**)(void *, void *))(v13[0] + 24))(v13, v10);
      uint64_t v3 = v11;
    }
    else
    {
      uint64_t v3 = (void *)(*(uint64_t (**)(void))(*v14 + 16))();
      int64_t v11 = v3;
    }
    uint64_t v5 = v12;
    uint64_t v12 = 0;
    *a2 = v5;
    long long v6 = a2 + 1;
    if (v3)
    {
      if (v3 == v10)
      {
        a2[4] = v6;
        (*(void (**)(void *))(v10[0] + 24))(v10);
      }
      else
      {
        a2[4] = (*(uint64_t (**)(void *, void *))(*v3 + 16))(v3, v6);
      }
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
    else
    {
      a2[4] = 0;
    }
  }
  else
  {
    uint64_t v4 = v12;
    uint64_t v12 = 0;
    *a2 = v4;
    a2[4] = 0;
  }
  uint64_t v7 = v12;
  uint64_t result = v14;
  uint64_t v12 = 0;
  if (v7)
  {
    v10[0] = v7;
    if (!v14)
    {
      uint64_t v9 = std::__throw_bad_function_call[abi:nn180100]();
      return (void *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v9);
    }
    (*(void (**)(void))(*v14 + 48))();
    uint64_t result = v14;
  }
  if (result == v13) {
    return (void *)(*(uint64_t (**)(void *))(v13[0] + 32))(v13);
  }
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations(*a2, **v4, (uint64_t)&__p);
  uint64_t v5 = v42;
  int v6 = v43;
  uint64_t v7 = SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(*v4[1]);
  size_t v8 = v45 - v44;
  unint64_t v9 = (v45 - v44) >> 4;
  unsigned int v10 = *(char **)v7;
  if (v9 > (uint64_t)(*(void *)(v7 + 16) - *(void *)v7) >> 4)
  {
    if ((v8 & 0x8000000000000000) != 0) {
LABEL_38:
    }
      abort();
    int64_t v11 = *(unsigned char **)(v7 + 8);
    uint64_t v12 = (char *)operator new(v8);
    std::string::size_type v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v14 = v13;
    if (v11 != v10)
    {
      uint64_t v15 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v14 = v15 - 16;
        *((_OWORD *)v15 - 1) = *((_OWORD *)v11 - 1);
        v11 -= 16;
        v15 -= 16;
      }
      while (v11 != v10);
    }
    *(void *)uint64_t v7 = v14;
    *(void *)(v7 + 8) = v13;
    *(void *)(v7 + 16) = &v12[16 * v9];
    if (v10) {
      operator delete(v10);
    }
  }
  int v36 = v6;
  uint64_t v37 = v5;
  uint64_t v38 = a3;
  int64_t v16 = v44;
  uint64_t v17 = v45;
  if (v44 == v45)
  {
    std::string::size_type v18 = *(char **)(v7 + 8);
  }
  else
  {
    do
    {
      int v19 = *((_DWORD *)v16 + 3) - 1;
      if (v19 > 5) {
        int v20 = 0;
      }
      else {
        int v20 = dword_C6AA0[v19];
      }
      uint64_t v21 = *(void *)v16;
      int v22 = *((_DWORD *)v16 + 2);
      unint64_t v24 = *(char **)(v7 + 8);
      unint64_t v23 = *(void *)(v7 + 16);
      if ((unint64_t)v24 < v23)
      {
        *(void *)unint64_t v24 = v21;
        std::string::size_type v18 = v24 + 16;
        *((_DWORD *)v24 + 2) = v22;
        *((_DWORD *)v24 + 3) = v20;
      }
      else
      {
        unint64_t v25 = *(char **)v7;
        uint64_t v26 = (uint64_t)&v24[-*(void *)v7] >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          goto LABEL_38;
        }
        uint64_t v28 = v23 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          if (v29 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v30 = (char *)operator new(16 * v29);
        }
        else
        {
          unint64_t v30 = 0;
        }
        uint64_t v31 = &v30[16 * v26];
        *(void *)uint64_t v31 = v21;
        *((_DWORD *)v31 + 2) = v22;
        *((_DWORD *)v31 + 3) = v20;
        uint64_t v32 = v31;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v24 - 1);
            v32 -= 16;
            v24 -= 16;
          }
          while (v24 != v25);
          unint64_t v24 = *(char **)v7;
        }
        unint64_t v33 = &v30[16 * v29];
        std::string::size_type v18 = v31 + 16;
        *(void *)uint64_t v7 = v32;
        *(void *)(v7 + 8) = v31 + 16;
        *(void *)(v7 + 16) = v33;
        if (v24) {
          operator delete(v24);
        }
      }
      *(void *)(v7 + 8) = v18;
      v16 += 16;
    }
    while (v16 != v17);
    int64_t v16 = v44;
  }
  uint64_t v34 = *(char **)v7;
  unint64_t v35 = (unint64_t)&v18[-*(void *)v7] >> 4;
  *(void *)uint64_t v38 = 0;
  *(void *)(v38 + 8) = v37;
  *(_DWORD *)(v38 + 16) = v36;
  *(_DWORD *)(v38 + 20) = v35;
  *(void *)(v38 + 24) = v34;
  if (v16)
  {
    unint64_t v45 = v16;
    operator delete(v16);
  }
  if (v41)
  {
    if (v40 < 0) {
      operator delete(__p);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations(*a2, **v4, (uint64_t)&__p);
  uint64_t v5 = v42;
  int v6 = v43;
  uint64_t v7 = SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(*v4[1]);
  size_t v8 = v45 - v44;
  unint64_t v9 = (v45 - v44) >> 4;
  unsigned int v10 = *(char **)v7;
  if (v9 > (uint64_t)(*(void *)(v7 + 16) - *(void *)v7) >> 4)
  {
    if ((v8 & 0x8000000000000000) != 0) {
LABEL_38:
    }
      abort();
    int64_t v11 = *(unsigned char **)(v7 + 8);
    uint64_t v12 = (char *)operator new(v8);
    std::string::size_type v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v14 = v13;
    if (v11 != v10)
    {
      uint64_t v15 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v14 = v15 - 16;
        *((_OWORD *)v15 - 1) = *((_OWORD *)v11 - 1);
        v11 -= 16;
        v15 -= 16;
      }
      while (v11 != v10);
    }
    *(void *)uint64_t v7 = v14;
    *(void *)(v7 + 8) = v13;
    *(void *)(v7 + 16) = &v12[16 * v9];
    if (v10) {
      operator delete(v10);
    }
  }
  int v36 = v6;
  uint64_t v37 = v5;
  uint64_t v38 = a3;
  int64_t v16 = v44;
  uint64_t v17 = v45;
  if (v44 == v45)
  {
    std::string::size_type v18 = *(char **)(v7 + 8);
  }
  else
  {
    do
    {
      unsigned int v19 = *((_DWORD *)v16 + 3) - 1;
      if (v19 > 5) {
        int v20 = 0;
      }
      else {
        int v20 = dword_C6AA0[v19];
      }
      uint64_t v21 = *(void *)v16;
      int v22 = *((_DWORD *)v16 + 2);
      unint64_t v24 = *(char **)(v7 + 8);
      unint64_t v23 = *(void *)(v7 + 16);
      if ((unint64_t)v24 < v23)
      {
        *(void *)unint64_t v24 = v21;
        std::string::size_type v18 = v24 + 16;
        *((_DWORD *)v24 + 2) = v22;
        *((_DWORD *)v24 + 3) = v20;
      }
      else
      {
        unint64_t v25 = *(char **)v7;
        uint64_t v26 = (uint64_t)&v24[-*(void *)v7] >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          goto LABEL_38;
        }
        uint64_t v28 = v23 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          if (v29 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v30 = (char *)operator new(16 * v29);
        }
        else
        {
          unint64_t v30 = 0;
        }
        uint64_t v31 = &v30[16 * v26];
        *(void *)uint64_t v31 = v21;
        *((_DWORD *)v31 + 2) = v22;
        *((_DWORD *)v31 + 3) = v20;
        uint64_t v32 = v31;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v24 - 1);
            v32 -= 16;
            v24 -= 16;
          }
          while (v24 != v25);
          unint64_t v24 = *(char **)v7;
        }
        unint64_t v33 = &v30[16 * v29];
        std::string::size_type v18 = v31 + 16;
        *(void *)uint64_t v7 = v32;
        *(void *)(v7 + 8) = v31 + 16;
        *(void *)(v7 + 16) = v33;
        if (v24) {
          operator delete(v24);
        }
      }
      *(void *)(v7 + 8) = v18;
      v16 += 16;
    }
    while (v16 != v17);
    int64_t v16 = v44;
  }
  uint64_t v34 = *(char **)v7;
  unint64_t v35 = (unint64_t)&v18[-*(void *)v7] >> 4;
  *(void *)uint64_t v38 = 0;
  *(void *)(v38 + 8) = v37;
  *(_DWORD *)(v38 + 16) = v36;
  *(_DWORD *)(v38 + 20) = v35;
  *(void *)(v38 + 24) = v34;
  if (v16)
  {
    unint64_t v45 = v16;
    operator delete(v16);
  }
  if (v41)
  {
    if (v40 < 0) {
      operator delete(__p);
    }
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v16);
  if (v16)
  {
    uint64_t v5 = a2 + 32;
    uint64_t v6 = a2 + 8;
    int v7 = *(_DWORD *)(v16 + 20);
    uint64_t v8 = *(unsigned int *)(v16 + 16) + 32;
    uint64_t v9 = *(void *)(v16 + 8);
    unsigned int v10 = operator new(0x20uLL);
    void *v10 = v6;
    v10[1] = 0x200000008;
    v10[2] = v5;
    *((_DWORD *)v10 + 6) = v7;
    *((_DWORD *)v10 + 7) = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = v9;
    *(void *)(a3 + 40) = v8;
    int64_t v11 = operator new(0x20uLL);
    *(void *)(a3 + 56) = v11 + 2;
    *(void *)(a3 + 64) = v11 + 2;
    long long v12 = *((_OWORD *)v10 + 1);
    _OWORD *v11 = *(_OWORD *)v10;
    v11[1] = v12;
    *(void *)(a3 + 48) = v11;
    operator delete(v10);
    uint64_t v13 = v16;
    uint64_t v16 = 0;
    if (v13)
    {
      uint64_t v19 = v13;
      if (!v18)
      {
        uint64_t v15 = std::__throw_bad_function_call[abi:nn180100]();
        return SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(v15);
      }
      (*(void (**)(void *, uint64_t *))(*v18 + 48))(v18, &v19);
    }
  }
  else
  {
    strcpy((char *)a3, "failure reading slab");
    *(_WORD *)(a3 + 23) = 276;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(void *)(a3 + 64) = 0;
    uint64_t v16 = 0;
  }
  uint64_t result = (uint64_t)v18;
  if (v18 == v17) {
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  if (v18) {
    return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
  }
  return result;
}

uint64_t SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
    operator new();
  }
  uint64_t v2 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::~__func(v2);
}

void std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C9220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C9220;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_info SwiftReflectionContext::withContext<swift_async_task_info,swift_reflection_asyncTaskInfo::$_0>(swift_reflection_asyncTaskInfo::$_0 const&)::{lambda(swift_async_task_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t v5 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (*(unsigned char *)(v5 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v13);
    if (v14) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(**(void **)(v4 + 8));
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    __str.__r_.__value_.__r.__words[0] = v7;
    if (v15 != v16)
    {
      do
        std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100]((uint64_t *)&__str, v8++);
      while (v8 != v9);
    }
    SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>();
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v13);
  if (!v14) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = **(void **)(v4 + 8);
  __str.__r_.__value_.__s.__data_[0] = 0;
  char v12 = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v13;
  }
  char v12 = 1;
  uint64_t v10 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v6);
  std::string::operator=((std::string *)v10, &__str);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v10 = *(void *)v10;
  }
  if (v12 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)a3 = v10;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(void *)(a3 + 88) = 0;
  if (__p)
  {
    std::string::size_type v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v14)
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_info SwiftReflectionContext::withContext<swift_async_task_info,swift_reflection_asyncTaskInfo::$_0>(swift_reflection_asyncTaskInfo::$_0 const&)::{lambda(swift_async_task_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t v5 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (*(unsigned char *)(v5 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v13);
    if (v14) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(**(void **)(v4 + 8));
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    __str.__r_.__value_.__r.__words[0] = v7;
    if (v15 != v16)
    {
      do
        std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100]((uint64_t *)&__str, v8++);
      while (v8 != v9);
    }
    SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>();
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v13);
  if (!v14) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = **(void **)(v4 + 8);
  __str.__r_.__value_.__s.__data_[0] = 0;
  char v12 = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v13;
  }
  char v12 = 1;
  uint64_t v10 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v6);
  std::string::operator=((std::string *)v10, &__str);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v10 = *(void *)v10;
  }
  if (v12 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)a3 = v10;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(void *)(a3 + 88) = 0;
  if (__p)
  {
    std::string::size_type v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v14)
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
    operator new();
  }
  uint64_t v2 = std::__throw_bad_function_call[abi:nn180100]();
  return SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(v2);
}

void SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>()
{
}

void std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_C9278;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_C9278;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      abort();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    *uint64_t v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v7 = &v6[-v19];
      uint64_t v16 = (void *)((char *)v16 - v19);
      int v20 = &v15[8 * v11 - 16];
      uint64_t v21 = v6 - 16;
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *int v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--uint64_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v6 = *a2;
    uint64_t v8 = v6 + 8;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

void *std::function<void ()(void)>::operator=<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},void>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v8 = *a2;
  uint64_t v4 = (uint64_t *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      uint64_t v10 = v9;
      (*(void (**)(uint64_t *, void *))(*v4 + 24))(v4, v9);
      uint64_t v3 = v8;
      uint64_t v4 = v10;
    }
    else
    {
      uint64_t v10 = (uint64_t *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v5 = operator new(0x30uLL);
  uint64_t v6 = v5;
  *unint64_t v5 = off_C92C0;
  v5[1] = v3;
  if (v4)
  {
    if (v4 == v9)
    {
      v5[5] = v5 + 2;
      (*(void (**)(void *))(v9[0] + 24))(v9);
    }
    else
    {
      v5[5] = v4;
      uint64_t v10 = 0;
    }
  }
  else
  {
    v5[5] = 0;
  }
  unint64_t v12 = v6;
  std::__function::__value_func<void ()(void)>::swap[abi:nn180100](v11, a1);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return a1;
}

void *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = off_C92C0;
  uint64_t v2 = a1 + 2;
  uint64_t v3 = (void *)a1[5];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = off_C92C0;
  uint64_t v1 = a1 + 2;
  uint64_t v2 = (void *)a1[5];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  operator delete();
}

void *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_C92C0;
  v2[1] = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else
    {
      v2[5] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    v2[5] = 0;
  }
  return v2;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  *a2 = off_C92C0;
  a2[1] = v3;
  uint64_t v4 = *(void *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      unint64_t v5 = *(uint64_t (**)(void))(**(void **)(result + 40) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 16))(*(void *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  uint64_t result = *(void *)(a1 + 40);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v4();
  }
  else
  {
    uint64_t v6 = std::__throw_bad_function_call[abi:nn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_actor_info SwiftReflectionContext::withContext<swift_actor_info,swift_reflection_actorInfo::$_0>(swift_reflection_actorInfo::$_0 const&)::{lambda(swift_actor_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v6);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_actor_info SwiftReflectionContext::withContext<swift_actor_info,swift_reflection_actorInfo::$_0>(swift_reflection_actorInfo::$_0 const&)::{lambda(swift_actor_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t v5 = *a2;
  if (*(unsigned char *)(*a2 + 2648)) {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  }
  else {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  }
  uint64_t v7 = **(void **)(v4 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v14 = 0;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v15;
    }
    char v14 = 1;
    uint64_t v8 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v7);
    std::string::operator=((std::string *)v8, &__p);
    if (*(char *)(v8 + 23) < 0) {
      uint64_t v8 = *(void *)v8;
    }
    if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v17;
  char v10 = v19;
  int v11 = v20;
  *(void *)a3 = v8;
  v6.i32[0] = v18;
  int16x8_t v12 = (int16x8_t)vmovl_u8(v6);
  *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, vrev32_s16(*(int16x4_t *)v12.i8));
  *(void *)(a3 + 8) = vmovn_s16(v12).u32[0];
  *(void *)(a3 + 16) = v9;
  *(unsigned char *)(a3 + 24) = v10;
  *(_WORD *)(a3 + 25) = 0;
  *(unsigned char *)(a3 + 27) = 0;
  *(_DWORD *)(a3 + 28) = v11;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_actor_info SwiftReflectionContext::withContext<swift_actor_info,swift_reflection_actorInfo::$_0>(swift_reflection_actorInfo::$_0 const&)::{lambda(swift_actor_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = **a1;
  uint64_t v5 = *a2;
  if (*(unsigned char *)(*a2 + 2648)) {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  }
  else {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  }
  uint64_t v7 = **(void **)(v4 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v14 = 0;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v15;
    }
    char v14 = 1;
    uint64_t v8 = SwiftReflectionContext::allocateTemporaryObject<std::string>(v7);
    std::string::operator=((std::string *)v8, &__p);
    if (*(char *)(v8 + 23) < 0) {
      uint64_t v8 = *(void *)v8;
    }
    if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v17;
  char v10 = v19;
  int v11 = v20;
  *(void *)a3 = v8;
  v6.i32[0] = v18;
  int16x8_t v12 = (int16x8_t)vmovl_u8(v6);
  *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, vrev32_s16(*(int16x4_t *)v12.i8));
  *(void *)(a3 + 8) = vmovn_s16(v12).u32[0];
  *(void *)(a3 + 16) = v9;
  *(unsigned char *)(a3 + 24) = v10;
  *(_WORD *)(a3 + 25) = 0;
  *(unsigned char *)(a3 + 27) = 0;
  *(_DWORD *)(a3 + 28) = v11;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(void *)(a1 + 2488), &v14);
  uint64_t v3 = v14;
  if (v14)
  {
    unsigned int v4 = *(_DWORD *)(v14 + 80);
    int v5 = (v4 >> 4) & 1;
    char v6 = *(unsigned char *)(v14 + 96);
    char v7 = v4 & 7;
    if ((v4 & 7) != 0) {
      unint64_t v8 = *(void *)(v14 + 88) & 0xFFFFFFFFFFFFFFFCLL;
    }
    else {
      unint64_t v8 = 0;
    }
    unsigned int v9 = *(_DWORD *)(v14 + 84);
    unsigned int v10 = v4 >> 8;
    *(unsigned char *)a2 = 0;
    if (v9 >= 4) {
      int v11 = v9 | 3;
    }
    else {
      int v11 = 0;
    }
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = v8;
    *(unsigned char *)(a2 + 40) = v7;
    *(unsigned char *)(a2 + 41) = v5;
    *(unsigned char *)(a2 + 42) = v6;
    *(unsigned char *)(a2 + 43) = v10;
    *(unsigned char *)(a2 + 44) = 1;
    *(_WORD *)(a2 + 45) = 0;
    *(unsigned char *)(a2 + 47) = 0;
    *(_DWORD *)(a2 + 48) = v11;
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v14 = 0;
    uint64_t v17 = v3;
    if (!v16)
    {
      uint64_t v13 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v13);
    }
    (*(void (**)(void *, uint64_t *))(*v16 + 48))(v16, &v17);
  }
  else
  {
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    strcpy((char *)a2, "failure reading actor");
    *(unsigned char *)(a2 + 22) = 0;
    *(_WORD *)(a2 + 23) = 277;
    uint64_t v14 = 0;
  }
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  if (v16) {
    return (*(uint64_t (**)(void *))(*v16 + 40))(v16);
  }
  return result;
}

void *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(void *)(a1 + 2488), &v10);
  uint64_t v3 = v10;
  if (v10)
  {
    int v4 = *(_DWORD *)(v10 + 80);
    char v5 = *(unsigned char *)(v10 + 96);
    if ((v4 & 7) != 0) {
      unint64_t v6 = *(void *)(v10 + 88) & 0xFFFFFFFFFFFFFFFCLL;
    }
    else {
      unint64_t v6 = 0;
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = v6;
    *(unsigned char *)(a2 + 40) = v4 & 7;
    *(unsigned char *)(a2 + 41) = (v4 & 0x10) != 0;
    *(unsigned char *)(a2 + 42) = v5;
    *(unsigned char *)(a2 + 43) = BYTE1(v4);
    *(void *)(a2 + 44) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v10 = 0;
    uint64_t v13 = v3;
    if (!v12)
    {
      uint64_t v8 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v8, v9);
    }
    (*(void (**)(void *, uint64_t *))(*v12 + 48))(v12, &v13);
  }
  else
  {
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    strcpy((char *)a2, "failure reading actor");
    *(unsigned char *)(a2 + 22) = 0;
    *(_WORD *)(a2 + 23) = 277;
    uint64_t v10 = 0;
  }
  uint64_t result = v12;
  if (v12 == v11) {
    return (void *)(*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (void *)(*(uint64_t (**)(void *))(*v12 + 40))(v12);
  }
  return result;
}

void *swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v12);
  if (v14)
  {
    if (v14 == v13)
    {
      int v11 = v10;
      (*(void (**)(void *, void *))(v13[0] + 24))(v13, v10);
      uint64_t v3 = v11;
    }
    else
    {
      uint64_t v3 = (void *)(*(uint64_t (**)(void))(*v14 + 16))();
      int v11 = v3;
    }
    uint64_t v5 = v12;
    uint64_t v12 = 0;
    *a2 = v5;
    unint64_t v6 = a2 + 1;
    if (v3)
    {
      if (v3 == v10)
      {
        a2[4] = v6;
        (*(void (**)(void *))(v10[0] + 24))(v10);
      }
      else
      {
        a2[4] = (*(uint64_t (**)(void *, void *))(*v3 + 16))(v3, v6);
      }
      if (v11 == v10)
      {
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        (*(void (**)(void))(*v11 + 40))();
      }
    }
    else
    {
      a2[4] = 0;
    }
  }
  else
  {
    uint64_t v4 = v12;
    uint64_t v12 = 0;
    *a2 = v4;
    a2[4] = 0;
  }
  uint64_t v7 = v12;
  uint64_t result = v14;
  uint64_t v12 = 0;
  if (v7)
  {
    v10[0] = v7;
    if (!v14)
    {
      uint64_t v9 = std::__throw_bad_function_call[abi:nn180100]();
      return (void *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v9);
    }
    (*(void (**)(void))(*v14 + 48))();
    uint64_t result = v14;
  }
  if (result == v13) {
    return (void *)(*(uint64_t (**)(void *))(v13[0] + 32))(v13);
  }
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t a1, uint64_t *a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::nextJob(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t a1, uint64_t *a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::nextJob(*a2);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::nextJob(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 2488) + 24))(&v6);
  uint64_t v1 = v6;
  if (v6)
  {
    uint64_t v2 = *(void *)(v6 + 16);
    uint64_t v6 = 0;
    uint64_t v9 = v1;
    if (!v8)
    {
      uint64_t v5 = (swift::Demangle::__runtime::Context *)std::__throw_bad_function_call[abi:nn180100]();
      return swift::Demangle::__runtime::Context::Context(v5);
    }
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    (*(void (**)(void *, uint64_t *))(*v8 + 48))(v8, &v9);
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v6 = 0;
  }
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  return v3;
}

void swift::Demangle::__runtime::Context::Context(swift::Demangle::__runtime::Context *this)
{
}

{
  operator new();
}

void swift::Demangle::__runtime::Context::~Context(swift::Demangle::__runtime::Context *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

uint64_t swift::Demangle::__runtime::Context::clear(swift::Demangle::__runtime::Context *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 16))();
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Context::demangleSymbolAsNode(swift::Demangle::__runtime::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  uint64_t v7 = *a1;
  if (ManglingPrefixLength)
  {
    int v11 = 0;
    unint64_t v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v10);
    if (v11 == v10)
    {
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else if (v11)
    {
      (*(void (**)(void))(*v11 + 40))();
    }
    return (swift::Demangle::__runtime::Node *)v8;
  }
  else
  {
    return swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v7);
  }
}

unint64_t swift::Demangle::__runtime::Context::demangleTypeAsNode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v7 = 0;
  unint64_t v4 = swift::Demangle::__runtime::Demangler::demangleType(v3, a2, a3, v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return v4;
}

void swift::Demangle::__runtime::Context::demangleSymbolAsString(swift::Demangle::__runtime::NodeFactory **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, swift::Demangle::__runtime::Node *a4@<X3>, void *a5@<X8>)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  int v11 = *a1;
  if (!ManglingPrefixLength)
  {
    uint64_t v13 = swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v11);
    goto LABEL_7;
  }
  uint64_t v24 = 0;
  uint64_t v13 = (swift::Demangle::__runtime *)swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v11, a2, a3, __p);
  if (v24 == __p)
  {
    (*((void (**)(void **))__p[0] + 4))(__p);
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (!v24)
  {
LABEL_7:
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  (*((void (**)(void))*v24 + 5))();
  if (!v13)
  {
LABEL_13:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        uint64_t v16 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17) {
          uint64_t v16 = a3 | 7;
        }
        uint64_t v17 = v16 + 1;
        __int32 v18 = operator new(v16 + 1);
        a5[1] = a3;
        a5[2] = v17 | 0x8000000000000000;
        *a5 = v18;
        a5 = v18;
      }
      else
      {
        *((unsigned char *)a5 + 23) = a3;
        if (!a3) {
          goto LABEL_28;
        }
      }
      memmove(a5, a2, a3);
LABEL_28:
      *((unsigned char *)a5 + a3) = 0;
      return;
    }
LABEL_38:
    abort();
  }
LABEL_8:
  swift::Demangle::__runtime::nodeToString((uint64_t *)__p, v13, a4, v12);
  uint64_t v14 = (void *)HIBYTE(v23);
  char v15 = HIBYTE(v23);
  if (v23 < 0) {
    uint64_t v14 = __p[1];
  }
  if (v14)
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    a5[2] = v23;
    return;
  }
  if (a2)
  {
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_38;
    }
    if (a3 >= 0x17)
    {
      uint64_t v19 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v19 = a3 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v21 = operator new(v19 + 1);
      a5[1] = a3;
      a5[2] = v20 | 0x8000000000000000;
      *a5 = v21;
      a5 = v21;
    }
    else
    {
      *((unsigned char *)a5 + 23) = a3;
      if (!a3)
      {
LABEL_35:
        *((unsigned char *)a5 + a3) = 0;
        if ((v23 & 0x8000000000000000) == 0) {
          return;
        }
        goto LABEL_36;
      }
    }
    memmove(a5, a2, a3);
    goto LABEL_35;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v15 & 0x80) == 0) {
    return;
  }
LABEL_36:
  operator delete(__p[0]);
}

void swift::Demangle::__runtime::Context::demangleTypeAsString(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, swift::Demangle::__runtime::Node *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v22 = 0;
  int v11 = (uint64_t *)swift::Demangle::__runtime::Demangler::demangleType(v9, (uint64_t)a2, a3, __p);
  if (v22 == __p)
  {
    (*((void (**)(void **))__p[0] + 4))(__p);
    if (v11) {
      goto LABEL_5;
    }
LABEL_10:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_35;
    }
    if (a3 >= 0x17)
    {
      uint64_t v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v14 = a3 | 7;
      }
      uint64_t v15 = v14 + 1;
      uint64_t v16 = operator new(v14 + 1);
      a5[1] = a3;
      a5[2] = v15 | 0x8000000000000000;
      *a5 = v16;
      a5 = v16;
    }
    else
    {
      *((unsigned char *)a5 + 23) = a3;
      if (!a3) {
        goto LABEL_25;
      }
    }
    memmove(a5, a2, a3);
LABEL_25:
    *((unsigned char *)a5 + a3) = 0;
    return;
  }
  if (v22) {
    (*((void (**)(void))*v22 + 5))();
  }
  if (!v11) {
    goto LABEL_10;
  }
LABEL_5:
  swift::Demangle::__runtime::nodeToString((uint64_t *)__p, v11, a4, v10);
  uint64_t v12 = (void *)HIBYTE(v21);
  char v13 = HIBYTE(v21);
  if (v21 < 0) {
    uint64_t v12 = __p[1];
  }
  if (v12)
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    a5[2] = v21;
    return;
  }
  if (a2)
  {
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        uint64_t v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17) {
          uint64_t v17 = a3 | 7;
        }
        uint64_t v18 = v17 + 1;
        uint64_t v19 = operator new(v17 + 1);
        a5[1] = a3;
        a5[2] = v18 | 0x8000000000000000;
        *a5 = v19;
        a5 = v19;
      }
      else
      {
        *((unsigned char *)a5 + 23) = a3;
        if (!a3)
        {
LABEL_32:
          *((unsigned char *)a5 + a3) = 0;
          if ((v21 & 0x8000000000000000) == 0) {
            return;
          }
          goto LABEL_33;
        }
      }
      memmove(a5, a2, a3);
      goto LABEL_32;
    }
LABEL_35:
    abort();
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v13 & 0x80) == 0) {
    return;
  }
LABEL_33:
  operator delete(__p[0]);
}

BOOL swift::Demangle::__runtime::Context::isThunkSymbol(uint64_t *a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3))
  {
    if (v3 < 2) {
      return 0;
    }
    if (*(_WORD *)a2 != 21599) {
      return 0;
    }
    unint64_t v9 = v3 - 2;
    if (v3 - 2 < 2) {
      return 0;
    }
    uint64_t v10 = a2 + 2;
    if (*((_WORD *)a2 + 1) != 28500 && *v10 != 20308)
    {
      if (v9 < 3) {
        return 0;
      }
      BOOL v11 = *v10 == 16720 && a2[4] == 95;
      if (!v11 && (v9 < 4 || *(_DWORD *)v10 != 1601126736)) {
        return 0;
      }
    }
    return 1;
  }
  if (a2[v3 - 1] - 48 > 9)
  {
LABEL_10:
    if (!v3) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = memchr(a2, 46, v3);
  if (v6)
  {
    size_t v7 = v3 >= v6 - a2 ? v6 - a2 : v3;
    if (v6 - a2 != -1)
    {
      size_t v3 = v7;
      goto LABEL_10;
    }
  }
LABEL_11:
  if (a2[v3 - 1] == 95)
  {
    unint64_t v8 = v3 - 1;
    if (v3 < v3 - 1) {
      unint64_t v8 = v3;
    }
    if (v8)
    {
      while (a2[v8 - 1] - 48 <= 9)
      {
        if (v8 >= v8 - 1) {
          --v8;
        }
        if (!v8) {
          goto LABEL_39;
        }
      }
      if (v8 >= 2 && (*(_WORD *)&a2[v8 - 2] == 20820 || *(_WORD *)&a2[v8 - 2] == 22868))
      {
        if (v8 >= v8 - 2) {
          size_t v3 = v8 - 2;
        }
        else {
          size_t v3 = v8;
        }
      }
    }
  }
LABEL_39:
  if (v3 < 2) {
    return 0;
  }
  uint64_t v12 = &a2[v3];
  if (*(_WORD *)&a2[v3 - 2] != 16724
    && *((_WORD *)v12 - 1) != 24916
    && *((_WORD *)v12 - 1) != 28500
    && *((_WORD *)v12 - 1) != 20308
    && *((_WORD *)v12 - 1) != 21076
    && *((_WORD *)v12 - 1) != 29268
    && *((_WORD *)v12 - 1) != 22356
    && *((_WORD *)v12 - 1) != 17254)
  {
    return 0;
  }
  uint64_t v13 = *a1;
  uint64_t v21 = 0;
  unint64_t v14 = swift::Demangle::__runtime::Demangler::demangleSymbol(v13, a2, v3, v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    if (!v14) {
      return 0;
    }
  }
  if (*(_WORD *)(v14 + 16) == 99)
  {
    int v15 = *(unsigned __int8 *)(v14 + 18);
    if ((v15 - 1) < 2) {
      goto LABEL_59;
    }
    if (v15 == 5 && *(_DWORD *)(v14 + 8))
    {
      unint64_t v14 = *(void *)v14;
LABEL_59:
      int v16 = *(unsigned __int16 *)(*(void *)v14 + 16);
      return (v16 - 160) <= 0x29 && ((1 << (v16 + 96)) & 0x31000000C11) != 0
          || v16 == 0;
    }
  }
  return 0;
}

void swift::Demangle::__runtime::Context::getThunkTarget(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = (char *)a3;
  v42[0] = (const void *)a2;
  if (!swift::Demangle::__runtime::Context::isThunkSymbol(a1, (char *)a2, a3)) {
    goto LABEL_83;
  }
  if (!swift::Demangle::__runtime::getManglingPrefixLength(a2, (unint64_t)v4))
  {
    if ((unint64_t)v4 >= 2) {
      uint64_t v11 = 2;
    }
    else {
      uint64_t v11 = (uint64_t)v4;
    }
    uint64_t v12 = (char *)(a2 + v11);
    unint64_t v13 = (unint64_t)&v4[-v11];
    if (v13 < 3)
    {
LABEL_24:
      *((unsigned char *)&v41.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v41, "_T");
      if (v13 >= 2) {
        uint64_t v15 = 2;
      }
      else {
        uint64_t v15 = v13;
      }
      if (!a2)
      {
        std::string::size_type v19 = 0;
        uint64_t v20 = 0;
        unsigned int v21 = 0;
        std::string __p = 0;
        size_t v39 = 0;
        unint64_t v40 = 0;
LABEL_49:
        if ((v21 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = v20;
        }
        if ((v21 & 0x80u) == 0) {
          std::string::size_type v25 = v21;
        }
        else {
          std::string::size_type v25 = v19;
        }
        uint64_t v26 = std::string::append(&v41, (const std::string::value_type *)p_p, v25);
        std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)a4 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(void *)(a4 + 16) = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v40) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        return;
      }
      size_t v16 = v13 - v15;
      if (v13 - v15 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v16 >= 0x17)
        {
          uint64_t v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17) {
            uint64_t v22 = v16 | 7;
          }
          uint64_t v23 = v22 + 1;
          uint64_t v17 = operator new(v22 + 1);
          size_t v39 = v16;
          unint64_t v40 = v23 | 0x8000000000000000;
          std::string __p = v17;
        }
        else
        {
          HIBYTE(v40) = v13 - v15;
          uint64_t v17 = &__p;
          if (v13 < 3) {
            goto LABEL_48;
          }
        }
        memmove(v17, &v12[v15], v16);
LABEL_48:
        *((unsigned char *)v17 + v16) = 0;
        unsigned int v21 = HIBYTE(v40);
        uint64_t v20 = (void **)__p;
        std::string::size_type v19 = v39;
        goto LABEL_49;
      }
LABEL_94:
      abort();
    }
    if (*(_WORD *)v12 == 16720 && v12[2] == 95)
    {
      uint64_t v28 = 3;
      size_t v29 = v13 - 3;
      if (v13 - 3 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_94;
      }
      if (v29 < 0x17)
      {
        *(unsigned char *)(a4 + 23) = v29;
        if (v13 < 4) {
          goto LABEL_93;
        }
        goto LABEL_92;
      }
    }
    else
    {
      if (v13 < 4 || *(_DWORD *)v12 != 1601126736) {
        goto LABEL_24;
      }
      uint64_t v28 = 4;
      size_t v29 = v13 - 4;
      if (v13 - 4 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_94;
      }
      if (v29 < 0x17)
      {
        *(unsigned char *)(a4 + 23) = v29;
        if (v13 < 5) {
          goto LABEL_93;
        }
        goto LABEL_92;
      }
    }
    uint64_t v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v35 = v29 | 7;
    }
    uint64_t v36 = v35 + 1;
    uint64_t v37 = operator new(v35 + 1);
    *(void *)(a4 + 8) = v29;
    *(void *)(a4 + 16) = v36 | 0x8000000000000000;
    *(void *)a4 = v37;
    a4 = (uint64_t)v37;
LABEL_92:
    memmove((void *)a4, &v12[v28], v29);
LABEL_93:
    *(unsigned char *)(a4 + v29) = 0;
    return;
  }
  int v7 = v4[a2 - 1];
  if ((v7 - 48) <= 9 && v4)
  {
    unint64_t v8 = memchr((void *)a2, 46, (size_t)v4);
    if (!v8) {
      goto LABEL_69;
    }
    if (v4 >= &v8[-a2]) {
      unint64_t v9 = &v8[-a2];
    }
    else {
      unint64_t v9 = v4;
    }
    if (&v8[-a2] == (unsigned char *)-1) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v10 != v4) {
      goto LABEL_83;
    }
  }
  if (!v4)
  {
LABEL_70:
    std::string::size_type v30 = (std::string::size_type)(v4 - 2);
    if (v4 < v4 - 2) {
      std::string::size_type v30 = (std::string::size_type)v4;
    }
    v41.__r_.__value_.__r.__words[0] = a2;
    v41.__r_.__value_.__l.__size_ = v30;
    __swift::__runtime::llvm::StringRef::str((const void **)&v41.__r_.__value_.__l.__data_, a4);
    return;
  }
  if (v4 >= v4 - 1) {
    unint64_t v18 = (unint64_t)(v4 - 1);
  }
  else {
    unint64_t v18 = (unint64_t)v4;
  }
  if (v18 && v7 == 95)
  {
    while (*(unsigned __int8 *)(a2 + v18 - 1) - 48 <= 9)
    {
      if (v18 >= v18 - 1) {
        --v18;
      }
      if (!v18) {
        goto LABEL_69;
      }
    }
    if (v18 >= 2 && (*(_WORD *)(a2 + v18 - 2) == 20820 || *(_WORD *)(a2 + v18 - 2) == 22868))
    {
      if (v18 >= v18 - 2) {
        unint64_t v4 = (char *)(v18 - 2);
      }
      else {
        unint64_t v4 = (char *)v18;
      }
    }
  }
LABEL_69:
  v42[1] = v4;
  if ((unint64_t)v4 < 2) {
    goto LABEL_70;
  }
  uint64_t v31 = &v4[a2];
  if (*(_WORD *)&v4[a2 - 2] == 21076 || *((_WORD *)v31 - 1) == 29268 || *((_WORD *)v31 - 1) == 22356)
  {
LABEL_83:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    return;
  }
  if (*((_WORD *)v31 - 1) != 17254) {
    goto LABEL_70;
  }
  __swift::__runtime::llvm::StringRef::str(v42, a4);
  uint64_t v32 = *(unsigned __int8 *)(a4 + 23);
  BOOL v33 = (v32 & 0x80u) != 0;
  if ((v32 & 0x80u) != 0) {
    uint64_t v32 = *(void *)(a4 + 8);
  }
  if (v33) {
    uint64_t v34 = *(void *)a4;
  }
  else {
    uint64_t v34 = a4;
  }
  *(unsigned char *)(v32 + v34 - 1) = 99;
}

uint64_t swift::Demangle::__runtime::Context::hasSwiftCallingConvention(swift::Demangle::__runtime::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  int v7 = *a1;
  if (ManglingPrefixLength)
  {
    uint64_t v15 = 0;
    unint64_t v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v14);
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
      if (!v8) {
        return 0;
      }
      goto LABEL_8;
    }
    if (v15)
    {
      (*(void (**)(void))(*v15 + 40))();
      if (!v8) {
        return 0;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v7);
  }
  if (!v8) {
    return 0;
  }
LABEL_8:
  if (*(_WORD *)(v8 + 16) != 99) {
    return 0;
  }
  int v9 = *(unsigned __int8 *)(v8 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*(_DWORD *)(v8 + 8)) {
      return 0;
    }
    unint64_t v8 = *(void *)v8;
  }
  uint64_t result = 0;
  unsigned int v11 = *(unsigned __int16 *)(*(void *)v8 + 16);
  if (v11 <= 0x86)
  {
    BOOL v13 = v11 > 0xA || ((1 << v11) & 0x640) == 0;
    if (v13 && v11 != 89) {
      return 1;
    }
  }
  else
  {
    BOOL v12 = v11 - 135 > 0x3F || ((1 << (v11 + 121)) & 0x8000000020000001) == 0;
    if (v12 && v11 != 238 && v11 != 252) {
      return 1;
    }
  }
  return result;
}

uint64_t swift::Demangle::__runtime::Context::getModuleName@<X0>(swift::Demangle::__runtime::Node **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  int v9 = *a1;
  if (!ManglingPrefixLength)
  {
    uint64_t result = (uint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v9);
    unint64_t v11 = result;
    goto LABEL_7;
  }
  std::string::size_type v25 = 0;
  unint64_t v11 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v9, a2, a3, v24);
  uint64_t result = (uint64_t)v25;
  if (v25 != v24)
  {
    if (v25)
    {
      uint64_t result = (*(uint64_t (**)(void))(*v25 + 40))();
      if (v11) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
LABEL_7:
    if (v11) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
  if (!v11)
  {
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  while (1)
  {
LABEL_15:
    unint64_t v15 = v11 + 16;
    unsigned int v14 = *(unsigned __int16 *)(v11 + 16);
    if (v14 > 0xE7)
    {
      if (v14 == 232 || v14 == 236) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }
    if (v14 == 99)
    {
      int v16 = *(unsigned __int8 *)(v11 + 18);
      uint64_t v17 = (unint64_t *)v11;
      if ((v16 - 1) >= 2)
      {
        if (v16 == 5)
        {
          unint64_t v18 = *(void *)v11;
          uint64_t v17 = *(unint64_t **)v11;
          goto LABEL_35;
        }
        uint64_t v17 = 0;
      }
      if (v16 == 1)
      {
        unint64_t v15 = v11 + 8;
        goto LABEL_39;
      }
      if (v16 == 2) {
        goto LABEL_39;
      }
      if (v16 != 5)
      {
        unint64_t v15 = 0;
LABEL_39:
        while (v17 != (unint64_t *)v15)
        {
          unint64_t v11 = *v17;
          uint64_t result = swift::Demangle::__runtime::isFunctionAttr(*(unsigned __int16 *)(*v17 + 16));
          if ((result & 1) == 0) {
            goto LABEL_14;
          }
          ++v17;
        }
        goto LABEL_8;
      }
      unint64_t v18 = *(void *)v11;
LABEL_35:
      unint64_t v15 = v18 + 8 * *(unsigned int *)(v11 + 8);
      goto LABEL_39;
    }
    if (v14 == 153) {
      break;
    }
LABEL_27:
    if (swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v11, v10))
    {
      uint64_t result = swift::Demangle::__runtime::getUnspecialized(v11, *a1, (uint64_t)v24);
      if (LODWORD(v24[0])) {
        goto LABEL_8;
      }
      unint64_t v11 = (unint64_t)v25;
      goto LABEL_14;
    }
    uint64_t result = swift::Demangle::__runtime::isContext();
    if (!result) {
      goto LABEL_8;
    }
LABEL_12:
    int v13 = *(unsigned __int8 *)(v11 + 18);
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*(_DWORD *)(v11 + 8)) {
        goto LABEL_8;
      }
      unint64_t v11 = *(void *)v11;
    }
    unint64_t v11 = *(void *)v11;
LABEL_14:
    if (!v11) {
      goto LABEL_8;
    }
  }
  std::string::size_type v19 = *(const void **)v11;
  if (!*(void *)v11) {
    goto LABEL_8;
  }
  size_t v20 = *(void *)(v11 + 8);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v20 >= 0x17)
  {
    uint64_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v21 = v20 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v23 = operator new(v21 + 1);
    a4[1] = v20;
    a4[2] = v22 | 0x8000000000000000;
    *a4 = v23;
    a4 = v23;
    goto LABEL_50;
  }
  *((unsigned char *)a4 + 23) = v20;
  if (v20) {
LABEL_50:
  }
    uint64_t result = (uint64_t)memmove(a4, v19, v20);
  *((unsigned char *)a4 + v20) = 0;
  return result;
}

void swift::Demangle::__runtime::demangleSymbolAsString(swift::Demangle::__runtime *this, const char *a2, unint64_t a3, const swift::Demangle::__runtime::DemangleOptions *a4)
{
}

void swift::Demangle::__runtime::demangleTypeAsString(swift::Demangle::__runtime *this, const char *a2, unint64_t a3, const swift::Demangle::__runtime::DemangleOptions *a4)
{
}

void swift::Demangle::__runtime::failAssert(swift::Demangle::__runtime *this, const char *a2, swift::Demangle::__runtime *a3, swift::Demangle::__runtime::Node *a4, const char *a5)
{
  double NodeTreeAsString = swift::Demangle::__runtime::getNodeTreeAsString(a3, &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v12 = &v13;
  }
  else {
    BOOL v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  swift::Demangle::__runtime::fatal(0, "%s:%u: assertion failed for Node %p: %s\n%s:%u: Node %p is:\n%s\n", v9, v10, NodeTreeAsString, this, a2, a3, a4, this, a2, a3, v12);
}

uint64_t swift::Demangle::__runtime::isContext()
{
  return 1;
}

uint64_t swift::Demangle::__runtime::isFunctionAttr(int a1)
{
  int v1 = a1 - 53;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 24:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 91:
    case 107:
    case 111:
    case 117:
    case 118:
    case 203:
    case 224:
    case 234:
    case 235:
    case 266:
    case 275:
    case 276:
    case 277:
    case 279:
    case 280:
    case 287:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unsigned char *swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(unsigned char *this, const char *a2)
{
  if (this)
  {
    unsigned int v2 = *this;
    if (*this)
    {
      size_t v3 = this;
      do
      {
        if (v2 >= 0x18) {
          uint64_t v4 = 8 * ((v2 & 0xF8) == 24);
        }
        else {
          uint64_t v4 = 4;
        }
        uint64_t v5 = &v3[v4];
        unsigned int v6 = v5[1];
        size_t v3 = v5 + 1;
        unsigned int v2 = v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t swift::Demangle::__runtime::getManglingPrefixLength(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 21284 && *(_WORD *)a1 != 29476) {
      return 0;
    }
    return 2;
  }
  if (*(_WORD *)a1 == 21599 && *(unsigned char *)(a1 + 2) == 48) {
    return 3;
  }
  if (*(_WORD *)a1 == 21284) {
    return 2;
  }
  if (*(_WORD *)a1 == 9311 && *(unsigned char *)(a1 + 2) == 83) {
    return 3;
  }
  if (*(_WORD *)a1 == 29476) {
    return 2;
  }
  if (*(_WORD *)a1 == 9311 && *(unsigned char *)(a1 + 2) == 115) {
    return 3;
  }
  if (a2 < 0xE) {
    return 0;
  }
  if (*(void *)a1 != 0x74666977735F5F40 || *(void *)(a1 + 6) != 0x5F6F7263616D7466) {
    return 0;
  }
  return 14;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(_WORD *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599
      || swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a1, a2) != 0;
}

BOOL swift::Demangle::__runtime::isOldFunctionTypeMangling(unsigned __int16 *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(swift::Demangle::__runtime *this, const char *a2)
{
  if (this)
  {
    size_t v3 = strlen((const char *)this);
    if (v3 >= 2 && *(_WORD *)this == 21599) {
      return 1;
    }
  }
  else
  {
    size_t v3 = 0;
  }
  return swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)this, v3) != 0;
}

BOOL swift::Demangle::__runtime::isObjCSymbol(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength = (int)swift::Demangle::__runtime::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength) {
    unint64_t ManglingPrefixLength = a2;
  }
  if (a2 - ManglingPrefixLength < 2) {
    return 0;
  }
  if (*(_WORD *)(a1 + ManglingPrefixLength) == 28499) {
    return 1;
  }
  return *(unsigned __int16 *)(a1 + ManglingPrefixLength) == 17235;
}

unint64_t swift::Demangle::__runtime::dropSwiftManglingPrefix(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength = (int)swift::Demangle::__runtime::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength) {
    unint64_t ManglingPrefixLength = a2;
  }
  return a1 + ManglingPrefixLength;
}

BOOL swift::Demangle::__runtime::isAlias(uint64_t a1, uint64_t a2)
{
  v12[1] = 0;
  uint64_t v12[2] = 0;
  std::string v13 = 0;
  uint64_t v14 = 2400;
  uint64_t v15 = 0;
  char v16 = 0;
  int v51 = 0;
  v12[0] = off_C9440;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v49 = 0;
  unint64_t v11 = 0;
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v12, a1, a2, v10);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v6 = v4 == 234;
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  v12[0] = off_C9440;
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  v12[0] = off_C9418;
  int v7 = v13;
  if (v13)
  {
    do
    {
      unint64_t v8 = (void *)*v7;
      free(v7);
      int v7 = v8;
    }
    while (v8);
  }
  if (v15) {
    *(unsigned char *)(v15 + 48) = 0;
  }
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleType(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      uint64_t v15 = v14;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v14);
    }
    else
    {
      uint64_t v15 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)v16, a1, a2, a3, (uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  unint64_t v8 = *(void *)(a1 + 64);
  while (*(void *)(a1 + 72) < v8)
  {
    int v9 = swift::Demangle::__runtime::Demangler::demangleOperator((swift::Demangle::__runtime::Demangler *)a1);
    if (!v9) {
      break;
    }
    uint64_t v17 = v9;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v17, (void *)a1);
  }
  int v10 = *(_DWORD *)(a1 + 96);
  if (!v10 || (unsigned int v11 = v10 - 1, Node = *(void *)(*(void *)(a1 + 88) + 8 * v11), *(_DWORD *)(a1 + 96) = v11, !Node)) {
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode((void *)a1, 221, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII((swift::Demangle::__runtime::Demangler::DemangleInitRAII *)v16);
  return Node;
}

BOOL swift::Demangle::__runtime::isClass(uint64_t a1, uint64_t a2)
{
  v13[1] = 0;
  uint64_t v13[2] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 2400;
  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v52 = 0;
  v13[0] = off_C9440;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  int v50 = 0;
  BOOL v12 = 0;
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v13, a1, a2, v11);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v7 = v4 == 13 || v4 == 24;
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  v13[0] = off_C9440;
  if (v52 == v51)
  {
    (*(void (**)(void *))(v51[0] + 32))(v51);
  }
  else if (v52)
  {
    (*(void (**)(void))(*v52 + 40))();
  }
  v13[0] = off_C9418;
  unint64_t v8 = v14;
  if (v14)
  {
    do
    {
      int v9 = (void *)*v8;
      free(v8);
      unint64_t v8 = v9;
    }
    while (v9);
  }
  if (v16) {
    *(unsigned char *)(v16 + 48) = 0;
  }
  return v7;
}

BOOL swift::Demangle::__runtime::isEnum(uint64_t a1, uint64_t a2)
{
  v12[1] = 0;
  uint64_t v12[2] = 0;
  std::string v13 = 0;
  uint64_t v14 = 2400;
  uint64_t v15 = 0;
  char v16 = 0;
  int v51 = 0;
  v12[0] = off_C9440;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v49 = 0;
  unsigned int v11 = 0;
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v12, a1, a2, v10);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v6 = v4 == 14 || v4 == 61;
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  v12[0] = off_C9440;
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  v12[0] = off_C9418;
  BOOL v7 = v13;
  if (v13)
  {
    do
    {
      unint64_t v8 = (void *)*v7;
      free(v7);
      BOOL v7 = v8;
    }
    while (v8);
  }
  if (v15) {
    *(unsigned char *)(v15 + 48) = 0;
  }
  return v6;
}

BOOL swift::Demangle::__runtime::isProtocol(uint64_t a1, unint64_t a2)
{
  v15[1] = 0;
  void v15[2] = 0;
  char v16 = 0;
  uint64_t v17 = 2400;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v54 = 0;
  v15[0] = off_C9440;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  int v52 = 0;
  unint64_t ManglingPrefixLength = (int)swift::Demangle::__runtime::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength) {
    unint64_t ManglingPrefixLength = a2;
  }
  uint64_t v14 = 0;
  unint64_t v5 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v15, a1 + ManglingPrefixLength, a2 - ManglingPrefixLength, v13);
  while (1)
  {
    int v7 = *(unsigned __int16 *)(v5 + 16);
    if (v7 != 232) {
      break;
    }
    unint64_t v6 = v5;
    int v8 = *(unsigned __int8 *)(v5 + 18);
    if ((v8 - 1) < 2)
    {
LABEL_6:
      unint64_t v5 = *(void *)v6;
    }
    else
    {
      unint64_t v5 = 0;
      if (v8 == 5)
      {
        unint64_t v5 = 0;
        if (*(_DWORD *)(v6 + 8))
        {
          unint64_t v6 = *(void *)v6;
          goto LABEL_6;
        }
      }
    }
  }
  BOOL v9 = (v7 - 180) < 2 || v7 == 347;
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  v15[0] = off_C9440;
  if (v54 == v53)
  {
    (*(void (**)(void *))(v53[0] + 32))(v53);
  }
  else if (v54)
  {
    (*(void (**)(void))(*v54 + 40))();
  }
  v15[0] = off_C9418;
  int v10 = v16;
  if (v16)
  {
    do
    {
      unsigned int v11 = (void *)*v10;
      free(v10);
      int v10 = v11;
    }
    while (v11);
  }
  if (v18) {
    *(unsigned char *)(v18 + 48) = 0;
  }
  return v9;
}

BOOL swift::Demangle::__runtime::isStruct(uint64_t a1, uint64_t a2)
{
  v12[1] = 0;
  uint64_t v12[2] = 0;
  std::string v13 = 0;
  uint64_t v14 = 2400;
  uint64_t v15 = 0;
  char v16 = 0;
  long long v51 = 0;
  v12[0] = off_C9440;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v49 = 0;
  unsigned int v11 = 0;
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v12, a1, a2, v10);
  while (1)
  {
    int v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232) {
      break;
    }
    unint64_t v3 = v2;
    int v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      unint64_t v2 = *(void *)v3;
    }
    else
    {
      unint64_t v2 = 0;
      if (v5 == 5)
      {
        unint64_t v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v3 = *(void *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  BOOL v6 = v4 == 15 || v4 == 219;
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  v12[0] = off_C9440;
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  v12[0] = off_C9418;
  int v7 = v13;
  if (v13)
  {
    do
    {
      int v8 = (void *)*v7;
      free(v7);
      int v7 = v8;
    }
    while (v8);
  }
  if (v15) {
    *(unsigned char *)(v15 + 48) = 0;
  }
  return v6;
}

void *swift::Demangle::__runtime::mangledNameForTypeMetadataAccessor@<X0>(const void *a1@<X0>, size_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, __int16 a5@<W4>, std::string *a6@<X8>)
{
  uint64_t v58 = 0;
  char v59 = 0;
  uint64_t v94 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v63 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  int v92 = 0;
  uint64_t v53 = off_C9440;
  uint64_t v60 = 0;
  uint64_t v57 = 4800;
  unsigned int v11 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  unint64_t v56 = v11;
  void *v11 = 0;
  unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v12 + 24;
  long long __dst = (void *)(v12 + 24);
  unint64_t v55 = (unint64_t)(v11 + 601);
  *(_WORD *)(v12 + 16) = 99;
  *(unsigned char *)(v12 + 18) = 0;
  if (v12 + 48 > v55)
  {
    uint64_t v14 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v14 = 32;
    }
    uint64_t v57 = v14;
    uint64_t v15 = v14 + 8;
    char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *char v16 = v56;
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v16 + v15;
    unint64_t v56 = v16;
  }
  *(_WORD *)(v13 + 16) = 238;
  *(unsigned char *)(v13 + 18) = 0;
  unint64_t v17 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long __dst = (void *)v17;
  if (!v17 || v17 + 24 > v55)
  {
    uint64_t v18 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v18 = 32;
    }
    uint64_t v57 = v18;
    uint64_t v19 = v18 + 8;
    char v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *char v20 = v56;
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v20 + v19;
    unint64_t v56 = v20;
  }
  long long v21 = (char *)(v17 + 24);
  long long __dst = (void *)(v17 + 24);
  *(_WORD *)(v17 + 16) = 232;
  *(unsigned char *)(v17 + 18) = 0;
  if (a2)
  {
    long long v22 = &v21[a2];
    if ((unint64_t)&v21[a2] > v55)
    {
      uint64_t v23 = 2 * v57;
      if (2 * v57 <= a2 + 1) {
        uint64_t v23 = a2 + 1;
      }
      uint64_t v57 = v23;
      uint64_t v24 = v23 + 8;
      long long v25 = (char *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      *(void *)long long v25 = v56;
      long long v21 = v25 + 8;
      unint64_t v55 = (unint64_t)&v25[v24];
      unint64_t v56 = v25;
      long long v22 = &v25[a2 + 8];
    }
    long long v26 = v21;
    long long __dst = v22;
    memmove(v21, a1, a2);
    long long v21 = (char *)__dst;
  }
  else
  {
    long long v26 = 0;
  }
  long long v27 = (void *)((unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long __dst = v27;
  if (!v27 || (unint64_t)(v27 + 3) > v55)
  {
    uint64_t v28 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v28 = 32;
    }
    uint64_t v57 = v28;
    long long v29 = a6;
    long long v30 = a3;
    uint64_t v31 = v28 + 8;
    long long v32 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
    *long long v32 = v56;
    long long v27 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v33 = (char *)v32 + v31;
    a3 = v30;
    a6 = v29;
    unint64_t v55 = (unint64_t)v33;
    unint64_t v56 = v32;
  }
  long long __dst = v27 + 3;
  *((_WORD *)v27 + 8) = 153;
  *((unsigned char *)v27 + 18) = 3;
  void *v27 = v26;
  v27[1] = a2;
  if (a4)
  {
    long long v34 = __dst;
    if (!__dst || (long long v35 = (char *)__dst + a4, (unint64_t)__dst + a4 > v55))
    {
      uint64_t v36 = 2 * v57;
      if (2 * v57 <= a4 + 1) {
        uint64_t v36 = a4 + 1;
      }
      uint64_t v57 = v36;
      uint64_t v37 = v36 + 8;
      long long v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      *long long v38 = v56;
      long long v34 = v38 + 1;
      unint64_t v55 = (unint64_t)v38 + v37;
      unint64_t v56 = v38;
      long long v35 = (char *)v38 + a4 + 8;
    }
    long long __dst = v35;
    memmove(v34, a3, a4);
  }
  else
  {
    long long v34 = 0;
  }
  unint64_t v39 = ((unint64_t)__dst + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v39 || v39 + 24 > v55)
  {
    uint64_t v40 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v40 = 32;
    }
    uint64_t v57 = v40;
    uint64_t v41 = v40 + 8;
    long long v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
    *long long v42 = v56;
    unint64_t v39 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v42 + v41;
    unint64_t v56 = v42;
  }
  long long __dst = (void *)(v39 + 24);
  *(_WORD *)(v39 + 16) = 101;
  *(unsigned char *)(v39 + 18) = 3;
  *(void *)unint64_t v39 = v34;
  *(void *)(v39 + 8) = a4;
  unint64_t v43 = ((unint64_t)__dst + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v43 || v43 + 24 > v55)
  {
    uint64_t v44 = 2 * v57;
    if ((unint64_t)(2 * v57) <= 0x20) {
      uint64_t v44 = 32;
    }
    uint64_t v57 = v44;
    uint64_t v45 = v44 + 8;
    long long v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
    *long long v46 = v56;
    unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (unint64_t)v46 + v45;
    unint64_t v56 = v46;
  }
  long long __dst = (void *)(v43 + 24);
  *(_WORD *)(v43 + 16) = a5;
  *(unsigned char *)(v43 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, (swift::Demangle::__runtime::Node *)v27, (swift::Demangle::__runtime::NodeFactory *)&v53);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, (swift::Demangle::__runtime::Node *)v39, (swift::Demangle::__runtime::NodeFactory *)&v53);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v43, (swift::Demangle::__runtime::NodeFactory *)&v53);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v13, (swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::NodeFactory *)&v53);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, (swift::Demangle::__runtime::Node *)v13, (swift::Demangle::__runtime::NodeFactory *)&v53);
  swift::Demangle::__runtime::mangleNode((swift::Demangle::__runtime *)v12, v47);
  if (SHIBYTE(v52) < 0)
  {
    std::string::__init_copy_ctor_external(a6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = __p;
    a6->__r_.__value_.__r.__words[2] = v52;
  }
  uint64_t v53 = off_C9440;
  if (v94 == v93)
  {
    (*(void (**)(void *))(v93[0] + 32))(v93);
  }
  else if (v94)
  {
    (*(void (**)(void))(*v94 + 40))();
  }
  uint64_t v53 = off_C9418;
  uint64_t result = v56;
  if (v56)
  {
    do
    {
      int v49 = (void *)*result;
      free(result);
      uint64_t result = v49;
    }
    while (v49);
  }
  if (v58) {
    *(unsigned char *)(v58 + 48) = 0;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v5 = 2 * a1[4];
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    a1[4] = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    void *v7 = a1[3];
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v7 + v6;
    a1[3] = v7;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t swift::Demangle::__runtime::Node::removeChildAt(uint64_t this, unsigned int a2)
{
  int v2 = *(unsigned __int8 *)(this + 18);
  switch(v2)
  {
    case 5:
      int v3 = *(_DWORD *)(this + 8) - 1;
      if (v3 != a2)
      {
        do
        {
          *(void *)(*(void *)this + 8 * a2) = *(void *)(*(void *)this + 8 * (a2 + 1));
          ++a2;
        }
        while (v3 != a2);
        int v3 = *(_DWORD *)(this + 8) - 1;
      }
      *(_DWORD *)(this + 8) = v3;
      break;
    case 2:
      if (!a2) {
        *(void *)this = *(void *)(this + 8);
      }
      *(unsigned char *)(this + 18) = 1;
      break;
    case 1:
      *(unsigned char *)(this + 18) = 0;
      break;
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Node::replaceChild(uint64_t this, unsigned int a2, swift::Demangle::__runtime::Node *a3)
{
  int v3 = *(unsigned __int8 *)(this + 18);
  if (v3 != 1)
  {
    if (v3 == 5)
    {
      this = *(void *)this + 8 * a2;
    }
    else
    {
      if (v3 != 2) {
        return this;
      }
      this += 8 * a2;
    }
  }
  *(void *)this = a3;
  return this;
}

int8x16_t *swift::Demangle::__runtime::Node::reverseChildren(int8x16_t *this, uint64_t a2)
{
  int v2 = this[1].u8[2];
  if (v2 == 5)
  {
    unint64_t v4 = this->i64[0] + 8 * a2;
    uint64_t v5 = this->u32[2];
    unint64_t v6 = (void *)(this->i64[0] + 8 * v5 - 8);
    if (v5 != a2 && (unint64_t)v6 > v4)
    {
      unint64_t v8 = v4 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8);
        *(void *)(v8 - 8) = *v6;
        *v6-- = v9;
        BOOL v10 = v8 >= (unint64_t)v6;
        v8 += 8;
      }
      while (!v10);
    }
  }
  else if (v2 == 2 && a2 == 0)
  {
    *this = vextq_s8(*this, *this, 8uLL);
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Node::findByKind(uint64_t result, uint64_t a2, int a3)
{
  int v3 = (void *)(result + 16);
  if (*(unsigned __int16 *)(result + 16) != a2)
  {
    uint64_t v4 = (a3 - 1);
    if (a3 < 1) {
      return 0;
    }
    int v6 = *(unsigned __int8 *)(result + 18);
    int v7 = (void *)result;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        unint64_t v8 = *(void **)result;
        int v7 = *(void **)result;
        goto LABEL_11;
      }
      int v7 = 0;
    }
    switch(v6)
    {
      case 1:
        int v3 = (void *)(result + 8);
        if (v7 != (void *)(result + 8)) {
          goto LABEL_12;
        }
        return 0;
      case 2:
        goto LABEL_12;
      case 5:
        unint64_t v8 = *(void **)result;
LABEL_11:
        int v3 = &v8[*(unsigned int *)(result + 8)];
        if (v7 != v3) {
          goto LABEL_12;
        }
        return 0;
    }
    int v3 = 0;
    if (!v7) {
      return 0;
    }
LABEL_12:
    while (1)
    {
      unint64_t result = swift::Demangle::__runtime::Node::findByKind(*v7, a2, v4);
      if (result) {
        break;
      }
      if (++v7 == v3) {
        return 0;
      }
    }
  }
  return result;
}

void *swift::Demangle::__runtime::NodeFactory::freeSlabs(void *result)
{
  if (result)
  {
    do
    {
      int v1 = (void *)*result;
      free(result);
      unint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

void *swift::Demangle::__runtime::NodeFactory::clear(void *this)
{
  int v1 = (void **)this[3];
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        int v3 = (void *)*this;
        free(this);
        this = v3;
      }
      while (v3);
      int v1 = (void **)v2[3];
    }
    *int v1 = 0;
    v2[1] = v1 + 1;
  }
  return this;
}

__n128 swift::Demangle::__runtime::NodeFactory::pushCheckpoint@<Q0>(swift::Demangle::__runtime::NodeFactory *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *((void *)this + 3);
  __n128 result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 swift::Demangle::__runtime::NodeFactory::popCheckpoint(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  int v6 = *(void **)a2;
  int v7 = *(void ***)(a1 + 24);
  if (*(void ***)a2 != v7)
  {
    if (v7)
    {
      if (*(void *)(a2 + 16) - *(void *)(a2 + 8) >= (unint64_t)(*(void *)(a1 + 16) - (void)v7 - 8) >> 4)
      {
        uint64_t v9 = 0;
        unint64_t v8 = *(void **)(a1 + 24);
LABEL_10:
        while (*(void **)a2 != v8)
        {
          *(void *)(a1 + 24) = *v8;
          free(v8);
          unint64_t v8 = *(void **)(a1 + 24);
          if (!v8)
          {
            int v6 = *(void **)a2;
            int v7 = v9;
            goto LABEL_13;
          }
        }
        int v7 = v9;
        if (v9) {
          goto LABEL_15;
        }
LABEL_17:
        __n128 result = *(__n128 *)(a2 + 8);
        *(__n128 *)(a1 + 8) = result;
        return result;
      }
      unint64_t v8 = *v7;
      *(void *)(a1 + 24) = *v7;
      uint64_t v9 = v7;
      if (v8) {
        goto LABEL_10;
      }
    }
LABEL_13:
    if (v6) {
      swift::Demangle::__runtime::fatal(0, "Popping checkpoint {%p, %p, %p} with slab that is not within the allocator's slab chain.\n", a3, a4, v6, *(void *)(a2 + 8), *(void *)(a2 + 16));
    }
    unint64_t v8 = 0;
    if (v7)
    {
LABEL_15:
      void *v7 = v8;
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 8) = v7 + 1;
      return result;
    }
    goto LABEL_17;
  }
  unint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  if (v10 > *(void *)(a1 + 8)) {
    swift::Demangle::__runtime::fatal(0, "Popping checkpoint {%p, %p, %p} that is after the current pointer.\n", a3, a4, v6, v10, v11);
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (v11 != v12) {
    swift::Demangle::__runtime::fatal(0, "Popping checkpoint {%p, %p, %p} with End that does not match current End %p.\n", a3, a4, v6, v10, v11, v12);
  }
  *(void *)(a1 + 8) = v10;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, uint64_t a3)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v7 = 2 * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    void *v9 = a1[3];
    unint64_t result = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v9 + v8;
    a1[3] = v9;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = a3;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v9 = 2 * a1[4];
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    a1[4] = v9;
    unint64_t v10 = v9 + 8;
    uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    void *v11 = a1[3];
    unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v11 + v10;
    a1[3] = v11;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = a3;
  *(void *)(result + 8) = a4;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v8 = 2 * a1[4];
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    a1[4] = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    void *v10 = a1[3];
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v10 + v9;
    a1[3] = v10;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v5;
  *(void *)(result + 8) = v6;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, char *__s)
{
  unint64_t v6 = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = v6;
  if (!v6 || v6 + 24 > a1[2])
  {
    unint64_t v7 = 2 * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = a1[3];
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = v10;
    a1[3] = v9;
  }
  a1[1] = v6 + 24;
  if (__s) {
    size_t v11 = strlen(__s);
  }
  else {
    size_t v11 = 0;
  }
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 3;
  *(void *)unint64_t v6 = __s;
  *(void *)(v6 + 8) = v11;
  return v6;
}

void *swift::Demangle::__runtime::CharVector::append(char **a1, const void *a2, size_t a3, void *a4)
{
  uint64_t v7 = *((unsigned int *)a1 + 2);
  size_t v8 = *((unsigned int *)a1 + 3);
  unint64_t v9 = *a1;
  if (a3 + v7 > v8)
  {
    size_t v11 = (char *)a4[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = &v9[v8 + a3];
      unint64_t v12 = a4[2];
      if ((unint64_t)v13 <= v12)
      {
        a4[1] = v13;
        LODWORD(v15) = a3;
LABEL_19:
        *((_DWORD *)a1 + 3) = v8 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v12 = a4[2];
    }
    unint64_t v14 = (2 * v8);
    if (a3 > v14) {
      unint64_t v14 = a3;
    }
    if (v14 <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = v14;
    }
    size_t v16 = v15 + v8;
    if (!v11 || (unint64_t)&v11[v16] > v12)
    {
      unint64_t v17 = 2 * a4[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      a4[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      char v20 = (char *)v19 + v18;
      *uint64_t v19 = a4[3];
      size_t v11 = (char *)(v19 + 1);
      a4[2] = v20;
      a4[3] = v19;
    }
    a4[1] = &v11[v16];
    if (v8) {
      memcpy(v11, *a1, v8);
    }
    *a1 = v11;
    unint64_t v9 = v11;
    uint64_t v7 = *((unsigned int *)a1 + 2);
    LODWORD(v8) = *((_DWORD *)a1 + 3);
    goto LABEL_19;
  }
LABEL_20:
  unint64_t result = memcpy(&v9[v7], a2, a3);
  *((_DWORD *)a1 + 2) += a3;
  return result;
}

unsigned int *swift::Demangle::__runtime::CharVector::append(unsigned int *this, unsigned int a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = this[2];
  size_t v6 = this[3];
  uint64_t v7 = *(char **)this;
  if (v5 + 11 > v6)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 11];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 11;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }
    if ((2 * v6) <= 0xB) {
      uint64_t v12 = 11;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }
    *((void *)a3 + 1) = &v9[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    }
    *(void *)uint64_t v4 = v9;
    uint64_t v7 = v9;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v17 = v5;
  unint64_t v18 = &v7[v5];
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v19 = 0;
    *unint64_t v18 = 45;
    unsigned int v25 = -a2;
    do
    {
      v18[++v19] = (v25 % 0xA) | 0x30;
      BOOL v20 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v20);
    v18[v19 + 1] = 0;
    long long v26 = &v18[v19 + 1];
    if (&v18[v19] > v18)
    {
      unint64_t v27 = (unint64_t)&v7[v17 + 2];
      do
      {
        char v28 = *--v26;
        char *v26 = *(unsigned char *)(v27 - 1);
        *(unsigned char *)(v27 - 1) = v28;
        BOOL v24 = v27++ >= (unint64_t)v26;
      }
      while (!v24);
    }
  }
  else if (a2)
  {
    uint64_t v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      BOOL v20 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v20);
    long long v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      unint64_t v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        char v23 = *--v21;
        *long long v21 = *(unsigned char *)(v22 - 1);
        *(unsigned char *)(v22 - 1) = v23;
        BOOL v24 = v22++ >= (unint64_t)v21;
      }
      while (!v24);
    }
  }
  else
  {
    *(_WORD *)unint64_t v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

unsigned int *swift::Demangle::__runtime::CharVector::append(unsigned int *this, unint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = this[2];
  size_t v6 = this[3];
  uint64_t v7 = *(char **)this;
  if (v5 + 21 > v6)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 21];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 21;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }
    if ((2 * v6) <= 0x15) {
      uint64_t v12 = 21;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }
    *((void *)a3 + 1) = &v9[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    }
    *(void *)uint64_t v4 = v9;
    uint64_t v7 = v9;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v17 = v5;
  unint64_t v18 = &v7[v5];
  if (a2)
  {
    uint64_t v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      BOOL v20 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v20);
    long long v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      unint64_t v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        char v23 = *--v21;
        *long long v21 = *(unsigned char *)(v22 - 1);
        *(unsigned char *)(v22 - 1) = v23;
      }
      while (v22++ < (unint64_t)v21);
    }
  }
  else
  {
    *(_WORD *)unint64_t v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

void *swift::Demangle::__runtime::Demangler::clear(void *this)
{
  *((_DWORD *)this + 25) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 13) = 0;
  int v1 = (void **)*((void *)this + 3);
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        int v3 = *(void **)this;
        free(this);
        this = v3;
      }
      while (v3);
      int v1 = (void **)*((void *)v2 + 3);
    }
    *int v1 = 0;
    *((void *)v2 + 1) = v1 + 1;
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  uint64_t v10 = a2 + 544;
  uint64_t v11 = *(void *)(a2 + 568);
  if (v11)
  {
    if (v11 == v10)
    {
      *(void *)(a1 + 96) = a1 + 72;
      (*(void (**)(void))(**(void **)(a2 + 568) + 24))(*(void *)(a2 + 568));
    }
    else
    {
      *(void *)(a1 + 96) = v11;
      *(void *)(a2 + 568) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  unint64_t v12 = (*(void *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a2 + 8) = v12;
  if (!v12 || (unint64_t v13 = *(void *)(a2 + 16), v12 + 128 > v13))
  {
    unint64_t v14 = 2 * *(void *)(a2 + 32);
    if (v14 <= 0x88) {
      unint64_t v14 = 136;
    }
    *(void *)(a2 + 32) = v14;
    unint64_t v15 = v14 + 8;
    size_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (unint64_t)v16 + v15;
    *size_t v16 = *(void *)(a2 + 24);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 16) = (char *)v16 + v15;
    *(void *)(a2 + 24) = v16;
  }
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = 0x1000000000;
  unint64_t v17 = (v12 + 135) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a2 + 8) = v17;
  if (!v17 || v17 + 128 > v13)
  {
    unint64_t v18 = 2 * *(void *)(a2 + 32);
    if (v18 <= 0x88) {
      unint64_t v18 = 136;
    }
    *(void *)(a2 + 32) = v18;
    unint64_t v19 = v18 + 8;
    BOOL v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *BOOL v20 = *(void *)(a2 + 24);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 16) = (char *)v20 + v19;
    *(void *)(a2 + 24) = v20;
  }
  *(void *)(a2 + 8) = v17 + 128;
  *(void *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = 0x1000000000;
  *(_DWORD *)(a2 + 536) = 0;
  *(void *)(a2 + 56) = a3;
  *(void *)(a2 + 64) = a4;
  *(void *)(a2 + 72) = 0;
  uint64_t v21 = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  if (v21 != v10)
  {
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 40))(v21);
    }
    uint64_t v22 = *(void *)(a5 + 24);
    if (v22) {
      goto LABEL_20;
    }
LABEL_23:
    *(void *)(a2 + 568) = 0;
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v22 = *(void *)(a5 + 24);
  if (!v22) {
    goto LABEL_23;
  }
LABEL_20:
  if (v22 == a5)
  {
    *(void *)(a2 + 568) = v10;
    (*(void (**)(void, uint64_t))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), v10);
  }
  else
  {
    *(void *)(a2 + 568) = v22;
    *(void *)(a5 + 24) = 0;
  }
  return a1;
}

void swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII(swift::Demangle::__runtime::Demangler::DemangleInitRAII *this)
{
  *(_OWORD *)(*(void *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(void *)this + 104) = *(_OWORD *)((char *)this + 24);
  uint64_t v2 = *(void *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  uint64_t v3 = *(void *)this;
  *(void *)(v3 + 72) = *((void *)this + 8);
  uint64_t v4 = v3 + 544;
  uint64_t v5 = *(void *)(v3 + 568);
  *(void *)(v3 + 568) = 0;
  if (v5 == v3 + 544)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v3 + 544);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  size_t v6 = (char *)this + 72;
  uint64_t v7 = (char *)*((void *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      *(void *)(v3 + 568) = v7;
      *((void *)this + 12) = 0;
      return;
    }
    *(void *)(v3 + 568) = v4;
    (*(void (**)(void, uint64_t))(**((void **)this + 12) + 24))(*((void *)this + 12), v3 + 544);
  }
  else
  {
    *(void *)(v3 + 568) = 0;
  }
  size_t v8 = (char *)*((void *)this + 12);
  if (v8 == v6)
  {
    (*(void (**)(char *))(*(void *)v6 + 32))((char *)this + 72);
  }
  else if (v8)
  {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSymbol(uint64_t a1, _WORD *a2, unint64_t a3, void *a4)
{
  uint64_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      long long v34 = v33;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v33);
    }
    else
    {
      long long v34 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    long long v34 = 0;
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)v35, a1, (uint64_t)a2, a3, (uint64_t)v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  size_t v8 = *(void *)(a1 + 64);
  size_t v9 = *(void *)(a1 + 72);
  if (v8 >= v9) {
    uint64_t v10 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 64);
  }
  if (v8 - v10 >= 3)
  {
    uint64_t v11 = *(_WORD **)(a1 + 56);
    unint64_t v12 = (_WORD *)((char *)v11 + v10);
    int v13 = *v12;
    int v14 = *((unsigned __int8 *)v12 + 2);
    if (v13 == 21599 && v14 == 116)
    {
      *(void *)(a1 + 72) = v9 + 3;
      unint64_t v20 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(v11, v8, (swift::Demangle::__runtime::NodeFactory *)a1);
      goto LABEL_41;
    }
  }
  unsigned int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  if (!ManglingPrefixLength) {
    goto LABEL_39;
  }
  BOOL v17 = a3 >= 2 && *a2 == 21599;
  *(unsigned char *)(a1 + 80) = v17;
  size_t v18 = v9 + ManglingPrefixLength;
  *(void *)(a1 + 72) = v18;
  while (*(void *)(a1 + 72) < v8)
  {
    unint64_t v19 = swift::Demangle::__runtime::Demangler::demangleOperator((swift::Demangle::__runtime::Demangler *)a1);
    if (!v19) {
      goto LABEL_39;
    }
    uint64_t v36 = v19;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v36, (void *)a1);
  }
  unint64_t v20 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 8) = v20;
  if (!v20 || v20 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v21 = 2 * *(void *)(a1 + 32);
    if (v21 <= 0x20) {
      unint64_t v21 = 32;
    }
    *(void *)(a1 + 32) = v21;
    unint64_t v22 = v21 + 8;
    char v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
    *char v23 = *(void *)(a1 + 24);
    unint64_t v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 16) = (char *)v23 + v22;
    *(void *)(a1 + 24) = v23;
  }
  *(void *)(a1 + 8) = v20 + 24;
  *(_WORD *)(v20 + 16) = 99;
  *(unsigned char *)(v20 + 18) = 0;
  unsigned int v24 = *(_DWORD *)(a1 + 96);
  if (!v24)
  {
LABEL_39:
    unint64_t v20 = 0;
    goto LABEL_41;
  }
  unsigned int v25 = (swift::Demangle::__runtime::Node *)v20;
  do
  {
    long long v26 = *(uint64_t ***)(a1 + 88);
    unint64_t v27 = (unsigned __int16 *)v26[v24 - 1];
    if (!swift::Demangle::__runtime::isFunctionAttr(v27[8]))
    {
      uint64_t v30 = 8 * v24;
      while (1)
      {
        uint64_t v31 = *v26;
        if (*((_WORD *)*v26 + 8) == 232)
        {
          int v32 = *((unsigned __int8 *)v31 + 18);
          if ((v32 - 1) >= 2)
          {
            if (v32 != 5 || !*((_DWORD *)v31 + 2))
            {
              uint64_t v31 = 0;
              goto LABEL_46;
            }
            uint64_t v31 = (uint64_t *)*v31;
          }
          uint64_t v31 = (uint64_t *)*v31;
        }
LABEL_46:
        swift::Demangle::__runtime::Node::addChild(v25, (swift::Demangle::__runtime::Node *)v31, (swift::Demangle::__runtime::NodeFactory *)a1);
        ++v26;
        v30 -= 8;
        if (!v30) {
          goto LABEL_36;
        }
      }
    }
    *(_DWORD *)(a1 + 96) = v24 - 1;
    swift::Demangle::__runtime::Node::addChild(v25, (swift::Demangle::__runtime::Node *)v27, (swift::Demangle::__runtime::NodeFactory *)a1);
    if ((v27[8] & 0xFFFE) == 0xAA) {
      unsigned int v25 = (swift::Demangle::__runtime::Node *)v27;
    }
    unsigned int v24 = *(_DWORD *)(a1 + 96);
  }
  while (v24);
LABEL_36:
  int v28 = *(unsigned __int8 *)(v20 + 18);
  if ((v28 - 1) >= 2 && (v28 != 5 || !*(_DWORD *)(v20 + 8))) {
    goto LABEL_39;
  }
LABEL_41:
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII((swift::Demangle::__runtime::Demangler::DemangleInitRAII *)v35);
  return v20;
}

BOOL swift::Demangle::__runtime::Demangler::parseAndPushNodes(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  if (*((void *)this + 9) >= v1) {
    return 1;
  }
  uint64_t v3 = (const void **)((char *)this + 88);
  do
  {
    uint64_t v4 = swift::Demangle::__runtime::Demangler::demangleOperator(this);
    BOOL v5 = v4 != 0;
    if (!v4) {
      break;
    }
    uint64_t v7 = v4;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v3, (uint64_t *)&v7, this);
  }
  while (*((void *)this + 9) < v1);
  return v5;
}

uint64_t swift::Demangle::__runtime::Demangler::popNode<BOOL (*)(swift::Demangle::__runtime::Node::Kind)>(uint64_t a1, unsigned int (*a2)(void))
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  if (!a2(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8 * (v2 - 1)) + 16))) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 96);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = v4 - 1;
  uint64_t result = *(void *)(*(void *)(a1 + 88) + 8 * v5);
  *(_DWORD *)(a1 + 96) = v5;
  return result;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleOperator(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v3 <= v2) {
    unint64_t v4 = *((void *)this + 9);
  }
  else {
    unint64_t v4 = *((void *)this + 8);
  }
  while (2)
  {
    if (v4 == v2)
    {
      unint64_t v2 = v4;
LABEL_10:
      unint64_t v9 = v2 - 1;
LABEL_11:
      *((void *)this + 9) = v9;
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIdentifier(this);
    }
    else
    {
      uint64_t v5 = v2++;
      *((void *)this + 9) = v2;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(unsigned __int8 *)(v6 + v5);
      switch(*(unsigned char *)(v6 + v5))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSymbolicReference(this, v7);
        case 0x2E:
          unint64_t v10 = v2 - 1;
          if (v3 < v10) {
            unint64_t v10 = v3;
          }
          uint64_t v11 = (char *)(v6 + v10);
          size_t v12 = v3 - v10;
          *((void *)this + 9) = v3;
          __int16 v13 = 221;
          goto LABEL_172;
        case 0x41:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(this);
        case 0x42:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBuiltinType(this);
        case 0x43:
          __int16 v14 = 24;
          goto LABEL_104;
        case 0x44:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleTypeMangling(this);
        case 0x45:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleExtensionContext(this);
        case 0x46:
          return swift::Demangle::__runtime::Demangler::demanglePlainFunction(this);
        case 0x47:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericType(this);
        case 0x48:
          if (v2 < v3)
          {
            unint64_t v15 = v2 + 1;
            *((void *)this + 9) = v2 + 1;
            switch(*(unsigned char *)(v6 + v2))
            {
              case 'A':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(this);
                int v18 = *((_DWORD *)this + 24);
                if (v18
                  && (unsigned int v19 = v18 - 1,
                      unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v19),
                      v20[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v19;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                long long v139 = this;
                __int16 v140 = 49;
                goto LABEL_300;
              case 'C':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this);
                int v91 = *((_DWORD *)this + 24);
                if (v91
                  && ((unsigned int v92 = v91 - 1,
                       BOOL v17 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v92),
                       int v93 = v17[8],
                       v93 == 184)
                   || v93 == 183))
                {
                  *((_DWORD *)this + 24) = v92;
                }
                else
                {
                  BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(this);
                  unsigned int v92 = *((_DWORD *)this + 24);
                }
                if (v92
                  && (v141 = v92 - 1, unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v141), v20[8] == 232))
                {
                  *((_DWORD *)this + 24) = v141;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                long long v139 = this;
                __int16 v140 = 26;
                goto LABEL_300;
              case 'D':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol(this);
                int v94 = *((_DWORD *)this + 24);
                if (v94
                  && (v95 = v94 - 1, unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v95), v20[8] == 232))
                {
                  *((_DWORD *)this + 24) = v95;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                long long v139 = this;
                __int16 v140 = 47;
                goto LABEL_300;
              case 'F':
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v96 = 2 * *((void *)this + 4);
                  if (v96 <= 0x20) {
                    unint64_t v96 = 32;
                  }
                  *((void *)this + 4) = v96;
                  unint64_t v97 = v96 + 8;
                  long long v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
                  long long v99 = (char *)v98 + v97;
                  *long long v98 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v99;
                  *((void *)this + 3) = v98;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v26 = 330;
                goto LABEL_195;
              case 'I':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol(this);
                int v100 = *((_DWORD *)this + 24);
                if (v100
                  && (unsigned int v101 = v100 - 1,
                      unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v101),
                      v20[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v101;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                long long v139 = this;
                __int16 v140 = 48;
LABEL_300:
                return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v139, v140, (swift::Demangle::__runtime::Node *)v20, (swift::Demangle::__runtime::Node *)v17, v16);
              case 'P':
                unint64_t v102 = swift::Demangle::__runtime::Demangler::popProtocol(this);
                if (!v102) {
                  goto LABEL_286;
                }
                unint64_t v29 = v102;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v103 = 2 * *((void *)this + 4);
                  if (v103 <= 0x20) {
                    unint64_t v103 = 32;
                  }
                  *((void *)this + 4) = v103;
                  unint64_t v104 = v103 + 8;
                  long long v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
                  int v106 = (char *)v105 + v104;
                  *long long v105 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v106;
                  *((void *)this + 3) = v105;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 183;
                goto LABEL_216;
              case 'X':
                unint64_t v107 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this);
                if (!v107) {
                  goto LABEL_286;
                }
                unint64_t v29 = v107;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v108 = 2 * *((void *)this + 4);
                  if (v108 <= 0x20) {
                    unint64_t v108 = 32;
                  }
                  *((void *)this + 4) = v108;
                  unint64_t v109 = v108 + 8;
                  unint64_t v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
                  uint64_t v111 = (char *)v110 + v109;
                  *unint64_t v110 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v111;
                  *((void *)this + 3) = v110;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 27;
                goto LABEL_216;
              case 'c':
                uint64_t v112 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
                if (!v112) {
                  goto LABEL_286;
                }
                unint64_t v29 = (unint64_t)v112;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v113 = 2 * *((void *)this + 4);
                  if (v113 <= 0x20) {
                    unint64_t v113 = 32;
                  }
                  *((void *)this + 4) = v113;
                  unint64_t v114 = v113 + 8;
                  uint64_t v115 = malloc_type_malloc(v113 + 8, 0xD0263BC5uLL);
                  unint64_t v116 = (char *)v115 + v114;
                  *uint64_t v115 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v116;
                  *((void *)this + 3) = v115;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 189;
                goto LABEL_216;
              case 'n':
                int v117 = *((_DWORD *)this + 24);
                if (!v117) {
                  goto LABEL_286;
                }
                unsigned int v118 = v117 - 1;
                unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v118);
                if (*(_WORD *)(v29 + 16) != 232) {
                  goto LABEL_286;
                }
                *((_DWORD *)this + 24) = v118;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v119 = 2 * *((void *)this + 4);
                  if (v119 <= 0x20) {
                    unint64_t v119 = 32;
                  }
                  *((void *)this + 4) = v119;
                  unint64_t v120 = v119 + 8;
                  uint64_t v121 = malloc_type_malloc(v119 + 8, 0xD0263BC5uLL);
                  uint64_t v122 = (char *)v121 + v120;
                  void *v121 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v121 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v122;
                  *((void *)this + 3) = v121;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 159;
                goto LABEL_216;
              case 'o':
                int v123 = *((_DWORD *)this + 24);
                if (!v123) {
                  goto LABEL_286;
                }
                unsigned int v124 = v123 - 1;
                unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v124);
                *((_DWORD *)this + 24) = v124;
                if (!v29) {
                  goto LABEL_286;
                }
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v125 = 2 * *((void *)this + 4);
                  if (v125 <= 0x20) {
                    unint64_t v125 = 32;
                  }
                  *((void *)this + 4) = v125;
                  unint64_t v126 = v125 + 8;
                  char v127 = malloc_type_malloc(v125 + 8, 0xD0263BC5uLL);
                  uint64_t v128 = (char *)v127 + v126;
                  *char v127 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v128;
                  *((void *)this + 3) = v127;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 303;
                goto LABEL_216;
              case 'p':
                unint64_t v129 = swift::Demangle::__runtime::Demangler::popProtocol(this);
                if (!v129) {
                  goto LABEL_286;
                }
                unint64_t v29 = v129;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v130 = 2 * *((void *)this + 4);
                  if (v130 <= 0x20) {
                    unint64_t v130 = 32;
                  }
                  *((void *)this + 4) = v130;
                  unint64_t v131 = v130 + 8;
                  long long v132 = malloc_type_malloc(v130 + 8, 0xD0263BC5uLL);
                  long long v133 = (char *)v132 + v131;
                  *long long v132 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v132 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v133;
                  *((void *)this + 3) = v132;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 184;
                goto LABEL_216;
              case 'r':
                unint64_t v134 = swift::Demangle::__runtime::Demangler::popProtocol(this);
                if (!v134) {
                  goto LABEL_286;
                }
                unint64_t v29 = v134;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v135 = 2 * *((void *)this + 4);
                  if (v135 <= 0x20) {
                    unint64_t v135 = 32;
                  }
                  *((void *)this + 4) = v135;
                  unint64_t v136 = v135 + 8;
                  long long v137 = malloc_type_malloc(v135 + 8, 0xD0263BC5uLL);
                  long long v138 = (char *)v137 + v136;
                  void *v137 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v138;
                  *((void *)this + 3) = v137;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 187;
                goto LABEL_216;
              default:
                goto LABEL_218;
            }
          }
          unint64_t v15 = v2;
LABEL_218:
          unint64_t v9 = v15 - 2;
          goto LABEL_11;
        case 0x49:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplFunctionType(this);
        case 0x4B:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v22 = 2 * *((void *)this + 4);
            if (v22 <= 0x20) {
              unint64_t v22 = 32;
            }
            *((void *)this + 4) = v22;
            unint64_t v23 = v22 + 8;
            unsigned int v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
            unsigned int v25 = (char *)v24 + v23;
            *unsigned int v24 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v25;
            *((void *)this + 3) = v24;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 272;
          goto LABEL_195;
        case 0x4C:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(this);
        case 0x4D:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMetatype(this);
        case 0x4E:
          int v27 = *((_DWORD *)this + 24);
          if (!v27) {
            goto LABEL_286;
          }
          unsigned int v28 = v27 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v28);
          if (*(_WORD *)(v29 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v28;
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v30 = 2 * *((void *)this + 4);
            if (v30 <= 0x20) {
              unint64_t v30 = 32;
            }
            *((void *)this + 4) = v30;
            unint64_t v31 = v30 + 8;
            int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
            long long v33 = (char *)v32 + v31;
            *int v32 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v33;
            *((void *)this + 3) = v32;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v34 = 237;
          goto LABEL_216;
        case 0x4F:
          __int16 v14 = 61;
          goto LABEL_104;
        case 0x50:
          __int16 v14 = 180;
          goto LABEL_104;
        case 0x51:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleArchetype(this);
        case 0x52:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericRequirement(this);
        case 0x53:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(this);
        case 0x54:
          return swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(this);
        case 0x56:
          __int16 v14 = 219;
          goto LABEL_104;
        case 0x57:
          return swift::Demangle::__runtime::Demangler::demangleWitness(this);
        case 0x58:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSpecialType(this);
        case 0x59:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(this);
        case 0x5A:
          int v35 = *((_DWORD *)this + 24);
          if (!v35) {
            goto LABEL_286;
          }
          int v36 = v35 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * (v35 - 1));
          if (*(_WORD *)(v29 + 16) != 232 && !swift::Demangle::__runtime::isContext()) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v36;
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v37 = 2 * *((void *)this + 4);
            if (v37 <= 0x20) {
              unint64_t v37 = 32;
            }
            *((void *)this + 4) = v37;
            unint64_t v38 = v37 + 8;
            unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
            uint64_t v40 = (char *)v39 + v38;
            *unint64_t v39 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v40;
            *((void *)this + 3) = v39;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v34 = 218;
          goto LABEL_216;
        case 0x5F:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v41 = 2 * *((void *)this + 4);
            if (v41 <= 0x20) {
              unint64_t v41 = 32;
            }
            *((void *)this + 4) = v41;
            unint64_t v42 = v41 + 8;
            unint64_t v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
            uint64_t v44 = (char *)v43 + v42;
            *unint64_t v43 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v44;
            *((void *)this + 3) = v43;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 275;
          goto LABEL_195;
        case 0x61:
          __int16 v14 = 234;
LABEL_104:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v14);
        case 0x63:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0);
        case 0x64:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v45 = 2 * *((void *)this + 4);
            if (v45 <= 0x20) {
              unint64_t v45 = 32;
            }
            *((void *)this + 4) = v45;
            unint64_t v46 = v45 + 8;
            long long v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
            long long v48 = (char *)v47 + v46;
            *long long v47 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v48;
            *((void *)this + 3) = v47;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 276;
          goto LABEL_195;
        case 0x66:
          return swift::Demangle::__runtime::Demangler::demangleFunctionEntity(this);
        case 0x67:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(this);
        case 0x68:
          int v49 = *((_DWORD *)this + 24);
          if (!v49) {
            goto LABEL_286;
          }
          int v50 = v49 - 1;
          unint64_t v51 = *(void *)(*((void *)this + 11) + 8 * (v49 - 1));
          if (*(_WORD *)(v51 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v50;
          int v52 = *(unsigned __int8 *)(v51 + 18);
          if (v52 == 1) {
            goto LABEL_128;
          }
          if (v52 != 5 || *(_DWORD *)(v51 + 8) != 1) {
            goto LABEL_286;
          }
          unint64_t v51 = *(void *)v51;
LABEL_128:
          unint64_t v21 = *(void *)v51;
          if (!*(void *)v51) {
            goto LABEL_287;
          }
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v53 = 2 * *((void *)this + 4);
            if (v53 <= 0x20) {
              unint64_t v53 = 32;
            }
            *((void *)this + 4) = v53;
            unint64_t v54 = v53 + 8;
            unint64_t v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
            unint64_t v56 = (char *)v55 + v54;
            *unint64_t v55 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v56;
            *((void *)this + 3) = v55;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 208;
          goto LABEL_209;
        case 0x69:
          return swift::Demangle::__runtime::Demangler::demangleSubscript(this);
        case 0x6C:
          int v58 = 0;
          goto LABEL_168;
        case 0x6D:
          int v59 = *((_DWORD *)this + 24);
          if (!v59) {
            goto LABEL_286;
          }
          unsigned int v60 = v59 - 1;
          unint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v60);
          if (*(_WORD *)(v21 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v60;
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v61 = 2 * *((void *)this + 4);
            if (v61 <= 0x20) {
              unint64_t v61 = 32;
            }
            *((void *)this + 4) = v61;
            unint64_t v62 = v61 + 8;
            char v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
            long long v64 = (char *)v63 + v62;
            *char v63 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v64;
            *((void *)this + 3) = v63;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 145;
          goto LABEL_209;
        case 0x6E:
          int v65 = *((_DWORD *)this + 24);
          if (!v65) {
            goto LABEL_286;
          }
          int v66 = v65 - 1;
          unint64_t v67 = *(void *)(*((void *)this + 11) + 8 * (v65 - 1));
          if (*(_WORD *)(v67 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v66;
          int v68 = *(unsigned __int8 *)(v67 + 18);
          if (v68 == 1) {
            goto LABEL_153;
          }
          if (v68 != 5 || *(_DWORD *)(v67 + 8) != 1) {
            goto LABEL_286;
          }
          unint64_t v67 = *(void *)v67;
LABEL_153:
          unint64_t v21 = *(void *)v67;
          if (!*(void *)v67) {
            goto LABEL_287;
          }
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v69 = 2 * *((void *)this + 4);
            if (v69 <= 0x20) {
              unint64_t v69 = 32;
            }
            *((void *)this + 4) = v69;
            unint64_t v70 = v69 + 8;
            long long v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
            long long v72 = (char *)v71 + v70;
            *long long v71 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v72;
            *((void *)this + 3) = v71;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 209;
          goto LABEL_209;
        case 0x6F:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(this);
        case 0x70:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
          goto LABEL_188;
        case 0x71:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
          goto LABEL_188;
        case 0x72:
          int v58 = 1;
LABEL_168:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericSignature(this, v58);
        case 0x73:
          uint64_t v11 = "Swift";
          __int16 v13 = 153;
          size_t v12 = 5;
LABEL_172:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, v13, v11, v12);
        case 0x74:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popTuple(this);
        case 0x75:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericType(this);
        case 0x76:
          long long v74 = swift::Demangle::__runtime::Demangler::demangleEntity(this, 254);
          return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v74);
        case 0x77:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleValueWitness(this);
        case 0x78:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
LABEL_188:
          unint64_t v29 = DependentGenericParamType;
          goto LABEL_210;
        case 0x79:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v75 = 2 * *((void *)this + 4);
            if (v75 <= 0x20) {
              unint64_t v75 = 32;
            }
            *((void *)this + 4) = v75;
            unint64_t v76 = v75 + 8;
            long long v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
            long long v78 = (char *)v77 + v76;
            *long long v77 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v78;
            *((void *)this + 3) = v77;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 274;
LABEL_195:
          *(_WORD *)(v21 + 16) = v26;
          *(unsigned char *)(v21 + 18) = 0;
          goto LABEL_287;
        case 0x7A:
          int v79 = *((_DWORD *)this + 24);
          if (!v79) {
            goto LABEL_286;
          }
          int v80 = v79 - 1;
          unint64_t v81 = *(void *)(*((void *)this + 11) + 8 * (v79 - 1));
          if (*(_WORD *)(v81 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v80;
          int v82 = *(unsigned __int8 *)(v81 + 18);
          if (v82 == 1) {
            goto LABEL_202;
          }
          if (v82 == 5 && *(_DWORD *)(v81 + 8) == 1)
          {
            unint64_t v81 = *(void *)v81;
LABEL_202:
            unint64_t v21 = *(void *)v81;
            if (*(void *)v81)
            {
              unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 1) = v29;
              if (!v29 || v29 + 24 > *((void *)this + 2))
              {
                unint64_t v83 = 2 * *((void *)this + 4);
                if (v83 <= 0x20) {
                  unint64_t v83 = 32;
                }
                *((void *)this + 4) = v83;
                unint64_t v84 = v83 + 8;
                long long v85 = malloc_type_malloc(v83 + 8, 0xD0263BC5uLL);
                long long v86 = (char *)v85 + v84;
                void *v85 = *((void *)this + 3);
                unint64_t v29 = ((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 2) = v86;
                *((void *)this + 3) = v85;
              }
              *((void *)this + 1) = v29 + 24;
              __int16 v57 = 123;
LABEL_209:
              *(_WORD *)(v29 + 16) = v57;
              *(unsigned char *)(v29 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, (swift::Demangle::__runtime::Node *)v21, this);
LABEL_210:
              unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 1) = v21;
              if (!v21 || v21 + 24 > *((void *)this + 2))
              {
                unint64_t v87 = 2 * *((void *)this + 4);
                if (v87 <= 0x20) {
                  unint64_t v87 = 32;
                }
                *((void *)this + 4) = v87;
                unint64_t v88 = v87 + 8;
                long long v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
                long long v90 = (char *)v89 + v88;
                *long long v89 = *((void *)this + 3);
                unint64_t v21 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 2) = v90;
                *((void *)this + 3) = v89;
              }
              *((void *)this + 1) = v21 + 24;
              __int16 v34 = 232;
LABEL_216:
              *(_WORD *)(v21 + 16) = v34;
              *(unsigned char *)(v21 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v21, (swift::Demangle::__runtime::Node *)v29, this);
            }
          }
          else
          {
LABEL_286:
            unint64_t v21 = 0;
          }
LABEL_287:
          uint64_t result = (swift::Demangle::__runtime::Node *)v21;
          break;
        case 0xFF:
          continue;
        default:
          goto LABEL_10;
      }
    }
    return result;
  }
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::addChild(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  uint64_t result = 0;
  if (a2)
  {
    if (a3)
    {
      swift::Demangle::__runtime::Node::addChild(a2, a3, this);
      return a2;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChild(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)a1 + 2))
  {
    unint64_t v7 = 2 * *((void *)a1 + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)a1 + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = *((void *)a1 + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v9;
  }
  *((void *)a1 + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a3, a1);
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::createType(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, a2, this);
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4)
{
  unint64_t v4 = 0;
  if (a3 && a4)
  {
    unint64_t v4 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v4;
    if (!v4 || v4 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      size_t v12 = (char *)v11 + v10;
      void *v11 = *((void *)a1 + 3);
      unint64_t v4 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v4 + 24;
    *(_WORD *)(v4 + 16) = a2;
    *(unsigned char *)(v4 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, a3, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, a4, a1);
  }
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, swift::Demangle::__runtime::Node *a5)
{
  unint64_t v5 = 0;
  if (a3 && a4 && a5)
  {
    unint64_t v5 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2 * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      __int16 v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      __int16 v14 = (char *)v13 + v12;
      *__int16 v13 = *((void *)a1 + 3);
      unint64_t v5 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }
    *((void *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, a3, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, a4, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, a5, a1);
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, swift::Demangle::__runtime::Node *a5, swift::Demangle::__runtime::Node *a6)
{
  unint64_t v6 = 0;
  if (a3 && a4 && a5 && a6)
  {
    unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v6;
    if (!v6 || v6 + 24 > *((void *)a1 + 2))
    {
      unint64_t v13 = 2 * *((void *)a1 + 4);
      if (v13 <= 0x20) {
        unint64_t v13 = 32;
      }
      *((void *)a1 + 4) = v13;
      unint64_t v14 = v13 + 8;
      unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)v15 + v14;
      *unint64_t v15 = *((void *)a1 + 3);
      unint64_t v6 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v16;
      *((void *)a1 + 3) = v15;
    }
    *((void *)a1 + 1) = v6 + 24;
    *(_WORD *)(v6 + 16) = a2;
    *(unsigned char *)(v6 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a3, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a4, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a5, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a6, a1);
  }
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::changeKind(swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node **a2, __int16 a3)
{
  if (!a2) {
    return 0;
  }
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 4)
  {
    unint64_t v13 = *a2;
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v14 = 2 * *((void *)a1 + 4);
      if (v14 <= 0x20) {
        unint64_t v14 = 32;
      }
      *((void *)a1 + 4) = v14;
      unint64_t v15 = v14 + 8;
      size_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      BOOL v17 = (char *)v16 + v15;
      *size_t v16 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v17;
      *((void *)a1 + 3) = v16;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 4;
    *(void *)unint64_t v8 = v13;
  }
  else if (v6 == 3)
  {
    long long v7 = *(_OWORD *)a2;
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      long long v28 = v7;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      long long v7 = v28;
      unint64_t v12 = (char *)v11 + v10;
      void *v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 3;
    *(_OWORD *)unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v18 = 2 * *((void *)a1 + 4);
      if (v18 <= 0x20) {
        unint64_t v18 = 32;
      }
      *((void *)a1 + 4) = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)v20 + v19;
      *unint64_t v20 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v21;
      *((void *)a1 + 3) = v20;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 0;
  }
  int v22 = *((unsigned __int8 *)a2 + 18);
  unint64_t v23 = a2;
  if ((v22 - 1) >= 2)
  {
    if (v22 == 5)
    {
      unsigned int v24 = *a2;
      unint64_t v23 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_31:
      unsigned int v25 = (swift::Demangle::__runtime::Node **)((char *)v24 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_36;
    }
    unint64_t v23 = 0;
  }
  switch(v22)
  {
    case 1:
      unsigned int v25 = a2 + 1;
      break;
    case 2:
      unsigned int v25 = a2 + 2;
      break;
    case 5:
      unsigned int v24 = *a2;
      goto LABEL_31;
    default:
      unsigned int v25 = 0;
      break;
  }
LABEL_36:
  while (v23 != v25)
  {
    __int16 v26 = *v23++;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, v26, a1);
  }
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeMangling(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2
    && (unsigned int v3 = v2 - 1,
        unint64_t v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v3),
        *((_WORD *)v4 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v3;
  }
  else
  {
    unint64_t v4 = 0;
  }
  unint64_t v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v4);
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 236;
  *(unsigned char *)(v6 + 18) = 0;
  if (v5 && v6) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v5, this);
  }
  unint64_t result = 0;
  if (v4)
  {
    if (v6)
    {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v4, this);
      return v6;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParamLabels(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  if (!*((unsigned char *)this + 80))
  {
    int v5 = *((_DWORD *)this + 24);
    if (v5)
    {
      unsigned int v6 = v5 - 1;
      if (*(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v6) + 16) == 274)
      {
        *((_DWORD *)this + 24) = v6;
        unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v8 = 2 * *((void *)this + 4);
          if (v8 <= 0x20) {
            unint64_t v8 = 32;
          }
          *((void *)this + 4) = v8;
          unint64_t v9 = v8 + 8;
          unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
          unint64_t v11 = (char *)v10 + v9;
          void *v10 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v10;
        }
        *((void *)this + 1) = v7 + 24;
        *(_WORD *)(v7 + 16) = 290;
        *(unsigned char *)(v7 + 18) = 0;
        return v7;
      }
    }
  }
  if (!a2 || *((_WORD *)a2 + 8) != 232) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 18);
  if ((v3 - 1) < 2) {
    goto LABEL_8;
  }
  if (v3 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_8:
    unint64_t v4 = *(uint64_t **)a2;
    goto LABEL_18;
  }
  unint64_t v4 = 0;
LABEL_18:
  if (*((_WORD *)v4 + 8) != 44) {
    goto LABEL_31;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      unint64_t v13 = 0;
      goto LABEL_25;
    }
    unint64_t v4 = (uint64_t *)*v4;
  }
  unint64_t v13 = (uint64_t *)v4[1];
LABEL_25:
  int v14 = *((unsigned __int8 *)v13 + 18);
  if ((v14 - 1) >= 2)
  {
    if (v14 != 5 || !*((_DWORD *)v13 + 2))
    {
      unint64_t v4 = 0;
      goto LABEL_31;
    }
    unint64_t v13 = (uint64_t *)*v13;
  }
  unint64_t v4 = (uint64_t *)*v13;
LABEL_31:
  int v15 = *((unsigned __int16 *)v4 + 8);
  if (v15 != 82 && v15 != 65) {
    return 0;
  }
  int v16 = *((unsigned __int8 *)v4 + 18);
  unsigned int v17 = v16 - 1;
  unint64_t v18 = v4;
  if ((v16 - 1) >= 2) {
    unint64_t v18 = (uint64_t *)*v4;
  }
  uint64_t v19 = *(unsigned __int16 *)(*v18 + 16) == 349;
  if (v17 >= 2)
  {
    unint64_t v20 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 67) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
  }
  else
  {
    if (*(_WORD *)(v4[v19] + 16) == 67) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
    unint64_t v20 = v4;
  }
  if (*(_WORD *)(v20[v19] + 16) == 129) {
    uint64_t v19 = (v19 + 1);
  }
  else {
    uint64_t v19 = v19;
  }
  if (v16 == 5)
  {
    unint64_t v21 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 130) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v21[v19] + 16) == 68) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
  }
  else
  {
    if (v16 == 2)
    {
      if (*(_WORD *)(v4[v19] + 16) == 130) {
        uint64_t v19 = (v19 + 1);
      }
      else {
        uint64_t v19 = v19;
      }
    }
    else
    {
      uint64_t v19 = *(unsigned __int16 *)(v4[v19] + 16) == 130;
    }
    if (*(_WORD *)(v4[v19] + 16) == 68) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
    unint64_t v21 = v4;
  }
  if (*(_WORD *)(v21[v19] + 16) == 272) {
    goto LABEL_65;
  }
  int v22 = v4;
  if (v17 >= 2) {
    int v22 = (uint64_t *)*v4;
  }
  if (*(_WORD *)(v22[v19] + 16) == 273) {
LABEL_65:
  }
    uint64_t v19 = (v19 + 1);
  if (v16 == 5)
  {
    unint64_t v24 = *((unsigned int *)v4 + 2);
    unsigned int v25 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 66) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v25[v19] + 16) == 271) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v25[v19] + 16) == 348) {
      LODWORD(v19) = v19 + 1;
    }
  }
  else if (v16 == 2)
  {
    if (*(_WORD *)(v4[v19] + 16) == 66) {
      unsigned int v23 = v19 + 1;
    }
    else {
      unsigned int v23 = v19;
    }
    if (*(_WORD *)(v4[v23] + 16) == 271) {
      ++v23;
    }
    if (*(_WORD *)(v4[v23] + 16) == 348) {
      LODWORD(v19) = v23 + 1;
    }
    else {
      LODWORD(v19) = v23;
    }
    unint64_t v24 = 2;
  }
  else
  {
    if (*(_WORD *)(v4[v19] + 16) == 66) {
      unsigned int v26 = v19 + 1;
    }
    else {
      unsigned int v26 = v19;
    }
    LODWORD(v19) = *(unsigned __int16 *)(v4[*(_WORD *)(v4[v26] + 16) == 271] + 16) == 348;
    unint64_t v24 = 1;
  }
  if (v24 <= v19)
  {
    int v27 = 0;
  }
  else
  {
    if (v17 >= 2) {
      unint64_t v4 = (uint64_t *)*v4;
    }
    int v27 = (uint64_t *)v4[v19];
  }
  int v28 = *((unsigned __int8 *)v27 + 18);
  unint64_t v29 = (uint64_t **)v27;
  if ((v28 - 1) < 2) {
    goto LABEL_97;
  }
  if (v28 == 5 && *((_DWORD *)v27 + 2))
  {
    unint64_t v29 = (uint64_t **)*v27;
LABEL_97:
    unint64_t v30 = *v29;
    goto LABEL_99;
  }
  unint64_t v30 = 0;
LABEL_99:
  int v31 = *((unsigned __int8 *)v30 + 18);
  if ((v31 - 1) < 2)
  {
LABEL_103:
    int v32 = (uint64_t *)*v30;
    goto LABEL_105;
  }
  if (v31 == 5 && *((_DWORD *)v30 + 2))
  {
    unint64_t v30 = (uint64_t *)*v30;
    goto LABEL_103;
  }
  int v32 = 0;
LABEL_105:
  if (*((_WORD *)v32 + 8) == 223)
  {
    int v33 = *((unsigned __int8 *)v32 + 18);
    if (v33 != 1)
    {
      if (v33 == 5)
      {
        int v33 = *((_DWORD *)v32 + 2);
        if (!v33) {
          return 0;
        }
      }
      else if (v33 != 2)
      {
        return 0;
      }
    }
  }
  else
  {
    int v33 = 1;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v34 = 2 * *((void *)this + 4);
    if (v34 <= 0x20) {
      unint64_t v34 = 32;
    }
    *((void *)this + 4) = v34;
    unint64_t v35 = v34 + 8;
    int v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
    unint64_t v37 = (char *)v36 + v35;
    *int v36 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v37;
    *((void *)this + 3) = v36;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 290;
  *(unsigned char *)(v7 + 18) = 0;
  int v38 = *((unsigned __int8 *)v27 + 18);
  if ((v38 - 1) < 2) {
    goto LABEL_120;
  }
  if (v38 == 5 && *((_DWORD *)v27 + 2))
  {
    int v27 = (uint64_t *)*v27;
LABEL_120:
    unint64_t v39 = (uint64_t *)*v27;
    goto LABEL_122;
  }
  unint64_t v39 = 0;
LABEL_122:
  int v40 = *((unsigned __int8 *)v39 + 18);
  if ((v40 - 1) < 2) {
    goto LABEL_126;
  }
  if (v40 == 5 && *((_DWORD *)v39 + 2))
  {
    unint64_t v39 = (uint64_t *)*v39;
LABEL_126:
    unint64_t v41 = (uint64_t *)*v39;
    if (!*((unsigned char *)this + 80)) {
      goto LABEL_131;
    }
LABEL_129:
    if (!v41 || *((_WORD *)v41 + 8) != 223) {
      return v7;
    }
    goto LABEL_131;
  }
  unint64_t v41 = 0;
  if (*((unsigned char *)this + 80)) {
    goto LABEL_129;
  }
LABEL_131:
  unint64_t v42 = 0;
  char v43 = 0;
  do
  {
    if (!*((unsigned char *)this + 80))
    {
      int v53 = *((_DWORD *)this + 24);
      if (v53)
      {
        unsigned int v54 = v53 - 1;
        unint64_t v48 = *(void *)(*((void *)this + 11) + 8 * v54);
        *((_DWORD *)this + 24) = v54;
        if (v48)
        {
          int v55 = *(unsigned __int16 *)(v48 + 16);
          if (v55 == 275 || v55 == 101) {
            goto LABEL_136;
          }
        }
      }
      return 0;
    }
    unint64_t v49 = *((unsigned __int8 *)v41 + 18);
    unsigned int v50 = v49 - 1;
    if (v49 == 1) {
      goto LABEL_142;
    }
    if (v49 != 5)
    {
      if (v49 != 2) {
        goto LABEL_152;
      }
      unint64_t v49 = 2;
LABEL_142:
      if (v49 > v42) {
        goto LABEL_143;
      }
      goto LABEL_152;
    }
    if (*((unsigned int *)v41 + 2) > v42)
    {
LABEL_143:
      unint64_t v51 = v41;
      if (v50 >= 2) {
        unint64_t v51 = (uint64_t *)*v41;
      }
      int v52 = (uint64_t *)v51[v42];
      goto LABEL_153;
    }
LABEL_152:
    int v52 = 0;
LABEL_153:
    int v56 = *((unsigned __int8 *)v52 + 18);
    switch(v56)
    {
      case 1:
        uint64_t v57 = *((unsigned __int8 *)v52 + 18);
        break;
      case 5:
        uint64_t v57 = *((unsigned int *)v52 + 2);
        if (!v57)
        {
LABEL_171:
          unint64_t v48 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v48;
          if (!v48 || v48 + 24 > *((void *)this + 2))
          {
            unint64_t v44 = 2 * *((void *)this + 4);
            if (v44 <= 0x20) {
              unint64_t v44 = 32;
            }
            *((void *)this + 4) = v44;
            unint64_t v45 = v44 + 8;
            unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            long long v47 = (char *)v46 + v45;
            *unint64_t v46 = *((void *)this + 3);
            unint64_t v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v47;
            *((void *)this + 3) = v46;
          }
          *((void *)this + 1) = v48 + 24;
          *(_WORD *)(v48 + 16) = 275;
          *(unsigned char *)(v48 + 18) = 0;
          goto LABEL_136;
        }
        break;
      case 2:
        uint64_t v57 = 2;
        break;
      default:
        goto LABEL_171;
    }
    unint64_t v58 = 0;
    unsigned int v59 = 1;
    while (1)
    {
      unint64_t v60 = *((unsigned __int8 *)v52 + 18);
      if (v56 == 1) {
        goto LABEL_163;
      }
      if (v56 != 5)
      {
        unint64_t v60 = 2;
LABEL_163:
        if (v60 <= v58) {
          goto LABEL_168;
        }
        goto LABEL_164;
      }
      if (*((unsigned int *)v52 + 2) <= v58)
      {
LABEL_168:
        unint64_t v62 = 0;
        goto LABEL_169;
      }
LABEL_164:
      unint64_t v61 = v52;
      if ((v56 - 1) >= 2) {
        unint64_t v61 = (uint64_t *)*v52;
      }
      unint64_t v62 = (long long *)v61[v58];
LABEL_169:
      if (*((_WORD *)v62 + 8) == 225) {
        break;
      }
      ++v58;
      ++v59;
      if (v57 == v58) {
        goto LABEL_171;
      }
    }
    if (v56 == 5)
    {
      int v63 = *((_DWORD *)v52 + 2);
      if (v58 - v63 == -1)
      {
        *((_DWORD *)v52 + 2) = v58;
      }
      else
      {
        do
        {
          *(void *)(*v52 + 8 * (v59 - 1)) = *(void *)(*v52 + 8 * v59);
          ++v59;
        }
        while (v63 != v59);
        --*((_DWORD *)v52 + 2);
      }
    }
    else if (v56 == 2)
    {
      if (!v58) {
        *int v52 = v52[1];
      }
      *((unsigned char *)v52 + 18) = 1;
    }
    else
    {
      *((unsigned char *)v52 + 18) = 0;
    }
    long long v64 = *v62;
    unint64_t v48 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v48;
    if (!v48 || v48 + 24 > *((void *)this + 2))
    {
      unint64_t v65 = 2 * *((void *)this + 4);
      if (v65 <= 0x20) {
        unint64_t v65 = 32;
      }
      *((void *)this + 4) = v65;
      unint64_t v66 = v65 + 8;
      long long v70 = v64;
      unint64_t v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
      long long v64 = v70;
      int v68 = (char *)v67 + v66;
      *unint64_t v67 = *((void *)this + 3);
      unint64_t v48 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v68;
      *((void *)this + 3) = v67;
    }
    *((void *)this + 1) = v48 + 24;
    *(_WORD *)(v48 + 16) = 101;
    *(unsigned char *)(v48 + 18) = 3;
    *(_OWORD *)unint64_t v48 = v64;
LABEL_136:
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v48, this);
    v43 |= *(unsigned __int16 *)(v48 + 16) != 275;
    ++v42;
  }
  while (v42 != v33);
  if (v43)
  {
    if (!*((unsigned char *)this + 80)) {
      swift::Demangle::__runtime::Node::reverseChildren((int8x16_t *)v7, 0);
    }
    return v7;
  }

  return swift::Demangle::__runtime::NodeFactory::createNode(this, 290);
}

uint64_t swift::Demangle::__runtime::Demangler::demangleSymbolicReference(swift::Demangle::__runtime::Demangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = v2 + 4;
  if ((unint64_t)(v2 + 4) > *((void *)this + 8)) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = (_DWORD *)(*((void *)this + 7) + v2);
  int v7 = *v6;
  *((void *)this + 9) = v3;
  int v8 = 0;
  char v9 = 0;
  int v10 = 0;
  int v11 = 1;
  switch(a2)
  {
    case 1:
      goto LABEL_10;
    case 2:
      int v8 = 0;
      char v9 = 0;
      int v10 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 9:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 10:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 2;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 11:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 3;
LABEL_10:
      uint64_t v12 = *((void *)this + 71);
      if (v12) {
        goto LABEL_11;
      }
      return 0;
    case 12:
      int v11 = 0;
      int v10 = 0;
      char v9 = 4;
      int v8 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
LABEL_11:
      char v18 = v9;
      int v16 = v7;
      int v17 = v10;
      uint64_t v19 = v6;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, int *, int *, _DWORD **))(*(void *)v12 + 48))(v12, &v18, &v17, &v16, &v19);
      uint64_t v5 = v13;
      if (v13)
      {
        if ((v11 | v8) == 1)
        {
          int v14 = *(unsigned __int16 *)(v13 + 16);
          if (v14 != 301 && v14 != 309)
          {
            uint64_t v19 = (_DWORD *)v13;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v19, this);
          }
        }
      }
      break;
    default:
      return v5;
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v7 = 2 * *((void *)this + 4);
        if (v7 <= 0x20) {
          unint64_t v7 = 32;
        }
        *((void *)this + 4) = v7;
        unint64_t v8 = v7 + 8;
        char v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
        int v10 = (char *)v9 + v8;
        void *v9 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v10;
        *((void *)this + 3) = v9;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 129;
      goto LABEL_50;
    case 'K':
      int v12 = *((_DWORD *)this + 24);
      if (!v12) {
        return 0;
      }
      int v13 = v12 - 1;
      unint64_t v14 = *(void *)(*((void *)this + 11) + 8 * (v12 - 1));
      if (*(_WORD *)(v14 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      int v15 = *(unsigned __int8 *)(v14 + 18);
      if (v15 == 1) {
        goto LABEL_15;
      }
      if (v15 != 5 || *(_DWORD *)(v14 + 8) != 1) {
        return 0;
      }
      unint64_t v14 = *(void *)v14;
LABEL_15:
      unint64_t v16 = *(void *)v14;
      if (!*(void *)v14) {
        return 0;
      }
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        uint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        unint64_t v20 = (char *)v19 + v18;
        *uint64_t v19 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v21 = 273;
      goto LABEL_128;
    case 'L':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      uint64_t v22 = *(char *)(v6 + v5);
      if (v22 == 115) {
        goto LABEL_26;
      }
      if (v22 != 105) {
        return 0;
      }
      uint64_t v22 = 105;
LABEL_26:
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v23 = 2 * *((void *)this + 4);
        if (v23 <= 0x20) {
          unint64_t v23 = 32;
        }
        *((void *)this + 4) = v23;
        unint64_t v24 = v23 + 8;
        unsigned int v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
        unsigned int v26 = (char *)v25 + v24;
        *unsigned int v25 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v26;
        *((void *)this + 3) = v25;
      }
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 349;
      *(unsigned char *)(v4 + 18) = 4;
      *(void *)unint64_t v4 = v22;
      return v4;
    case 'T':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2 * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        unint64_t v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        unint64_t v30 = (char *)v29 + v28;
        *unint64_t v29 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 130;
      goto LABEL_50;
    case 'a':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2 * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        int v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        unint64_t v34 = (char *)v33 + v32;
        void *v33 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 271;
      goto LABEL_50;
    case 'b':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2 * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        unint64_t v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        int v38 = (char *)v37 + v36;
        void *v37 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 66;
LABEL_50:
      *(_WORD *)(v4 + 16) = v11;
      *(unsigned char *)(v4 + 18) = 0;
      return v4;
    case 'c':
      int v39 = *((_DWORD *)this + 24);
      if (!v39) {
        return 0;
      }
      int v40 = v39 - 1;
      unint64_t v41 = *(void *)(*((void *)this + 11) + 8 * (v39 - 1));
      if (*(_WORD *)(v41 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v40;
      int v42 = *(unsigned __int8 *)(v41 + 18);
      if (v42 == 1) {
        goto LABEL_57;
      }
      if (v42 != 5 || *(_DWORD *)(v41 + 8) != 1) {
        return 0;
      }
      unint64_t v41 = *(void *)v41;
LABEL_57:
      unint64_t v16 = *(void *)v41;
      if (!*(void *)v41) {
        return 0;
      }
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v43 = 2 * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        unint64_t v46 = (char *)v45 + v44;
        *unint64_t v45 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v46;
        *((void *)this + 3) = v45;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v21 = 67;
      goto LABEL_128;
    case 'i':
      int v47 = *((_DWORD *)this + 24);
      if (!v47) {
        return 0;
      }
      int v48 = v47 - 1;
      unint64_t v49 = *(void *)(*((void *)this + 11) + 8 * (v47 - 1));
      if (*(_WORD *)(v49 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v48;
      int v50 = *(unsigned __int8 *)(v49 + 18);
      if (v50 == 1) {
        goto LABEL_70;
      }
      if (v50 != 5 || *(_DWORD *)(v49 + 8) != 1) {
        return 0;
      }
      unint64_t v49 = *(void *)v49;
LABEL_70:
      unint64_t v4 = *(void *)v49;
      if (!*(void *)v49) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v51 = 2 * *((void *)this + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32;
        }
        *((void *)this + 4) = v51;
        unint64_t v52 = v51 + 8;
        int v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unsigned int v54 = (char *)v53 + v52;
        *int v53 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v54;
        *((void *)this + 3) = v53;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 127;
      break;
    case 'j':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(this);
    case 'k':
      int v57 = *((_DWORD *)this + 24);
      if (!v57) {
        return 0;
      }
      int v58 = v57 - 1;
      unint64_t v59 = *(void *)(*((void *)this + 11) + 8 * (v57 - 1));
      if (*(_WORD *)(v59 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v58;
      int v60 = *(unsigned __int8 *)(v59 + 18);
      if (v60 == 1) {
        goto LABEL_86;
      }
      if (v60 != 5 || *(_DWORD *)(v59 + 8) != 1) {
        return 0;
      }
      unint64_t v59 = *(void *)v59;
LABEL_86:
      unint64_t v4 = *(void *)v59;
      if (!*(void *)v59) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v61 = 2 * *((void *)this + 4);
        if (v61 <= 0x20) {
          unint64_t v61 = 32;
        }
        *((void *)this + 4) = v61;
        unint64_t v62 = v61 + 8;
        int v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
        long long v64 = (char *)v63 + v62;
        *int v63 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v64;
        *((void *)this + 3) = v63;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 326;
      break;
    case 'l':
      return swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(this, 0);
    case 't':
      int v65 = *((_DWORD *)this + 24);
      if (!v65) {
        return 0;
      }
      int v66 = v65 - 1;
      unint64_t v67 = *(void *)(*((void *)this + 11) + 8 * (v65 - 1));
      if (*(_WORD *)(v67 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v66;
      int v68 = *(unsigned __int8 *)(v67 + 18);
      if (v68 == 1) {
        goto LABEL_102;
      }
      if (v68 != 5 || *(_DWORD *)(v67 + 8) != 1) {
        return 0;
      }
      unint64_t v67 = *(void *)v67;
LABEL_102:
      unint64_t v4 = *(void *)v67;
      if (!*(void *)v67) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v69 = 2 * *((void *)this + 4);
        if (v69 <= 0x20) {
          unint64_t v69 = 32;
        }
        *((void *)this + 4) = v69;
        unint64_t v70 = v69 + 8;
        long long v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
        long long v72 = (char *)v71 + v70;
        *long long v71 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v72;
        *((void *)this + 3) = v71;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 331;
      break;
    case 'u':
      int v73 = *((_DWORD *)this + 24);
      if (!v73) {
        return 0;
      }
      int v74 = v73 - 1;
      unint64_t v75 = *(void *)(*((void *)this + 11) + 8 * (v73 - 1));
      if (*(_WORD *)(v75 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v74;
      int v76 = *(unsigned __int8 *)(v75 + 18);
      if (v76 == 1) {
        goto LABEL_115;
      }
      if (v76 != 5 || *(_DWORD *)(v75 + 8) != 1) {
        return 0;
      }
      unint64_t v75 = *(void *)v75;
LABEL_115:
      unint64_t v4 = *(void *)v75;
      if (!*(void *)v75) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v77 = 2 * *((void *)this + 4);
        if (v77 <= 0x20) {
          unint64_t v77 = 32;
        }
        *((void *)this + 4) = v77;
        unint64_t v78 = v77 + 8;
        int v79 = malloc_type_malloc(v77 + 8, 0xD0263BC5uLL);
        int v80 = (char *)v79 + v78;
        void *v79 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v80;
        *((void *)this + 3) = v79;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 128;
      break;
    default:
      return v4;
  }
  *(_WORD *)(v16 + 16) = v55;
  *(unsigned char *)(v16 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::Node *)v4, this);
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v81 = 2 * *((void *)this + 4);
    if (v81 <= 0x20) {
      unint64_t v81 = 32;
    }
    *((void *)this + 4) = v81;
    unint64_t v82 = v81 + 8;
    unint64_t v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
    unint64_t v84 = (char *)v83 + v82;
    void *v83 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v84;
    *((void *)this + 3) = v83;
  }
  *((void *)this + 1) = v4 + 24;
  __int16 v21 = 232;
LABEL_128:
  *(_WORD *)(v4 + 16) = v21;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v16, this);
  return v4;
}

uint64_t *swift::Demangle::__runtime::Demangler::popTypeAndGetChild(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (v1)
  {
    int v2 = v1 - 1;
    uint64_t v3 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
    if (*((_WORD *)v3 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v2;
      int v4 = *((unsigned __int8 *)v3 + 18);
      if (v4 == 1) {
        return (uint64_t *)*v3;
      }
      if (v4 == 5 && *((_DWORD *)v3 + 2) == 1)
      {
        uint64_t v3 = (uint64_t *)*v3;
        return (uint64_t *)*v3;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    int v3 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    int v3 = *(char *)(*((void *)this + 7) + v2);
  }
  HIDWORD(v5) = v3;
  LODWORD(v5) = v3 - 100;
  unsigned int v4 = v5 >> 1;
  if (v4 > 7 || ((0x93u >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = qword_C6AC0[v4];
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    int v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    void *v10 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v10 + v9;
    *((void *)this + 3) = v10;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 68;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = v7;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(swift::Demangle::__runtime::Demangler *this, int a2)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v2 + 1;
  uint64_t v4 = *(char *)(*((void *)this + 7) + v2);
  if (v4 != 115)
  {
    if (v4 != 105) {
      return 0;
    }
    uint64_t v4 = 105;
  }
  unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v5;
  if (a2)
  {
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v6 = 2 * *((void *)this + 4);
      if (v6 <= 0x20) {
        unint64_t v6 = 32;
      }
      *((void *)this + 4) = v6;
      unint64_t v7 = v6 + 8;
      unint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
      unint64_t v9 = (char *)v8 + v7;
      *unint64_t v8 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v9;
      *((void *)this + 3) = v8;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 349;
    *(unsigned char *)(v5 + 18) = 4;
    *(void *)unint64_t v5 = v4;
    return v5;
  }
  if (!v5 || v5 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    int v13 = (char *)v12 + v11;
    *int v12 = *((void *)this + 3);
    unint64_t v5 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v5 + 24;
  *(_WORD *)(v5 + 16) = 102;
  *(unsigned char *)(v5 + 18) = 4;
  *(void *)unint64_t v5 = v4;
  int v14 = *((_DWORD *)this + 24);
  if (!v14) {
    return 0;
  }
  int v15 = v14 - 1;
  unint64_t v16 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v14 - 1));
  if (*((_WORD *)v16 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v15;
  int v17 = *((unsigned __int8 *)v16 + 18);
  if (v17 != 1)
  {
    if (v17 != 5 || *((_DWORD *)v16 + 2) != 1) {
      return 0;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v16;
  }
  unint64_t v18 = *(swift::Demangle::__runtime::Node **)v16;
  if (!*(void *)v16) {
    return 0;
  }
  unint64_t v19 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v19;
  if (!v19 || v19 + 24 > *((void *)this + 2))
  {
    unint64_t v20 = 2 * *((void *)this + 4);
    if (v20 <= 0x20) {
      unint64_t v20 = 32;
    }
    *((void *)this + 4) = v20;
    unint64_t v21 = v20 + 8;
    uint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    unint64_t v23 = (char *)v22 + v21;
    void *v22 = *((void *)this + 3);
    unint64_t v19 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v23;
    *((void *)this + 3) = v22;
  }
  *((void *)this + 1) = v19 + 24;
  *(_WORD *)(v19 + 16) = 348;
  *(unsigned char *)(v19 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v19, (swift::Demangle::__runtime::Node *)v5, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v19, v18, this);
  unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v5;
  if (!v5 || v5 + 24 > *((void *)this + 2))
  {
    unint64_t v24 = 2 * *((void *)this + 4);
    if (v24 <= 0x20) {
      unint64_t v24 = 32;
    }
    *((void *)this + 4) = v24;
    unint64_t v25 = v24 + 8;
    unsigned int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
    unint64_t v27 = (char *)v26 + v25;
    void *v26 = *((void *)this + 3);
    unint64_t v5 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v27;
    *((void *)this + 3) = v26;
  }
  *((void *)this + 1) = v5 + 24;
  *(_WORD *)(v5 + 16) = 232;
  *(unsigned char *)(v5 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::Node *)v19, this);
  return v5;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v4 = (const void **)((char *)this + 88);
    int v5 = -1;
    do
    {
      *((void *)this + 9) = v1 + 1;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(char *)(v6 + v1);
      if (!*(unsigned char *)(v6 + v1)) {
        break;
      }
      if ((v7 - 97) > 0x19u)
      {
        if ((v7 - 65) <= 0x19u)
        {
          uint64_t v8 = 0;
          if (v5 <= 2048 && *((unsigned int *)this + 28) > (unint64_t)(*(char *)(v6 + v1) - 65))
          {
            uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 65));
            if (v5 >= 2)
            {
              unsigned int v12 = v5 + 1;
              do
              {
                uint64_t v15 = v8;
                swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
                --v12;
              }
              while (v12 > 2);
            }
          }
          return v8;
        }
        if (v7 == 95)
        {
          unsigned int v13 = v5 + 27;
          if (*((_DWORD *)this + 28) <= v13) {
            return 0;
          }
          return *(void *)(*((void *)this + 13) + 8 * v13);
        }
        *((void *)this + 9) = v1;
        if (v1 >= v2 || *(unsigned __int8 *)(v6 + v1) - 48 > 9) {
          return 0;
        }
        int v5 = 0;
        while (1)
        {
          int v10 = *(unsigned __int8 *)(v6 + v1);
          if ((v10 - 48) > 9) {
            break;
          }
          int v11 = v10 + 10 * v5 - 48;
          if (v11 < v5) {
            return 0;
          }
          *((void *)this + 9) = ++v1;
          int v5 = v11;
          if (v2 == v1)
          {
            unint64_t v1 = v2;
            int v5 = v11;
            break;
          }
        }
        if (v5 < 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v8 = 0;
        if (v5 > 2048 || *((unsigned int *)this + 28) <= (unint64_t)(*(char *)(v6 + v1) - 97)) {
          return v8;
        }
        uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 97));
        if (v5 >= 2)
        {
          unsigned int v9 = v5 + 1;
          do
          {
            uint64_t v15 = v8;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
            --v9;
          }
          while (v9 > 2);
        }
        if (!v8) {
          return v8;
        }
        uint64_t v15 = v8;
        swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
        unint64_t v2 = *((void *)this + 8);
        unint64_t v1 = *((void *)this + 9);
        int v5 = -1;
      }
    }
    while (v1 < v2);
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBuiltinType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'B':
      int v7 = "Builtin.UnsafeValueBuffer";
      size_t v8 = 25;
      goto LABEL_45;
    case 'D':
      int v7 = "Builtin.DefaultActorStorage";
      size_t v8 = 27;
      goto LABEL_45;
    case 'I':
      int v7 = "Builtin.IntLiteral";
      goto LABEL_38;
    case 'O':
      int v7 = "Builtin.UnknownObject";
      size_t v8 = 21;
      goto LABEL_45;
    case 'P':
      int v7 = "Builtin.PackIndex";
      size_t v8 = 17;
      goto LABEL_45;
    case 'T':
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v10 = 2 * *((void *)this + 4);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *((void *)this + 4) = v10;
        unint64_t v11 = v10 + 8;
        unsigned int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        *unsigned int v12 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v12 + v11;
        *((void *)this + 3) = v12;
      }
      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 21;
      *(unsigned char *)(Node + 18) = 0;
      goto LABEL_46;
    case 'b':
      int v7 = "Builtin.BridgeObject";
      goto LABEL_36;
    case 'c':
      int v7 = "Builtin.RawUnsafeContinuation";
      size_t v8 = 29;
      goto LABEL_45;
    case 'd':
      int v7 = "Builtin.NonDefaultDistributedActorStorage";
      size_t v8 = 41;
      goto LABEL_45;
    case 'e':
      int v7 = "Builtin.Executor";
      goto LABEL_40;
    case 'f':
      if (v5 >= v1) {
        return 0;
      }
      int v13 = *(unsigned __int8 *)(v6 + v5);
      if (v13 == 95) {
        goto LABEL_43;
      }
      if ((v13 - 48) > 9) {
        return 0;
      }
      signed int v14 = 0;
      while (1)
      {
        int v15 = *(unsigned __int8 *)(v6 + v5);
        if ((v15 - 48) > 9) {
          break;
        }
        int v16 = v15 + 10 * v14 - 48;
        if (v16 < v14) {
          return 0;
        }
        unint64_t v4 = 0;
        *((void *)this + 9) = ++v5;
        signed int v14 = v16;
        if (v1 == v5) {
          return v4;
        }
      }
      unint64_t v4 = 0;
      if (v14 < 0 || v5 >= v1 || v15 != 95) {
        return v4;
      }
      *((void *)this + 9) = v5 + 1;
      if ((v14 - 1) > 0xFFF) {
        return 0;
      }
      unint64_t v49 = 0;
      unint64_t v27 = (char *)*((void *)this + 1);
      if (!v27 || (unint64_t)(v27 + 14) > *((void *)this + 2))
      {
        unint64_t v28 = 2 * *((void *)this + 4);
        if (v28 <= 0xF) {
          unint64_t v28 = 15;
        }
        *((void *)this + 4) = v28;
        unint64_t v29 = v28 + 8;
        unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
        *unint64_t v30 = *((void *)this + 3);
        unint64_t v27 = (char *)(v30 + 1);
        *((void *)this + 2) = (char *)v30 + v29;
        *((void *)this + 3) = v30;
      }
      *((void *)this + 1) = v27 + 14;
      unint64_t v49 = v27;
      qmemcpy(v27, "Builtin.FPIEEE", 14);
      uint64_t v31 = 0xE0000000ELL;
      goto LABEL_78;
    case 'i':
      if (v5 >= v1) {
        return 0;
      }
      int v17 = *(unsigned __int8 *)(v6 + v5);
      if (v17 == 95) {
        goto LABEL_43;
      }
      if ((v17 - 48) > 9) {
        return 0;
      }
      signed int v14 = 0;
      while (1)
      {
        int v18 = *(unsigned __int8 *)(v6 + v5);
        if ((v18 - 48) > 9) {
          break;
        }
        int v19 = v18 + 10 * v14 - 48;
        if (v19 < v14) {
          return 0;
        }
        unint64_t v4 = 0;
        *((void *)this + 9) = ++v5;
        signed int v14 = v19;
        if (v1 == v5) {
          return v4;
        }
      }
      unint64_t v4 = 0;
      if (v14 < 0 || v5 >= v1 || v18 != 95) {
        return v4;
      }
      *((void *)this + 9) = v5 + 1;
      if ((v14 - 1) > 0xFFF) {
        return 0;
      }
      unint64_t v49 = 0;
      unint64_t v32 = (void *)*((void *)this + 1);
      if (!v32 || (unint64_t)v32 + 11 > *((void *)this + 2))
      {
        unint64_t v33 = 2 * *((void *)this + 4);
        if (v33 <= 0xC) {
          unint64_t v33 = 12;
        }
        *((void *)this + 4) = v33;
        unint64_t v34 = v33 + 8;
        unint64_t v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
        void *v35 = *((void *)this + 3);
        unint64_t v32 = v35 + 1;
        *((void *)this + 2) = (char *)v35 + v34;
        *((void *)this + 3) = v35;
      }
      *((void *)this + 1) = (char *)v32 + 11;
      unint64_t v49 = (char *)v32;
      *(_DWORD *)((char *)v32 + 7) = 1953384750;
      *unint64_t v32 = *(void *)"Builtin.Int";
      uint64_t v31 = 0xB0000000BLL;
LABEL_78:
      uint64_t v50 = v31;
      swift::Demangle::__runtime::CharVector::append((unsigned int *)&v49, v14, this);
      unint64_t v36 = v49;
      uint64_t v37 = v50;
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v38 = 2 * *((void *)this + 4);
        if (v38 <= 0x20) {
          unint64_t v38 = 32;
        }
        *((void *)this + 4) = v38;
        unint64_t v39 = v38 + 8;
        int v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *int v40 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v40 + v39;
        *((void *)this + 3) = v40;
      }
      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 20;
      *(unsigned char *)(Node + 18) = 3;
      *(void *)unint64_t Node = v36;
      *(void *)(Node + 8) = v37;
      goto LABEL_46;
    case 'j':
      int v7 = "Builtin.Job";
      size_t v8 = 11;
      goto LABEL_45;
    case 'o':
      int v7 = "Builtin.NativeObject";
LABEL_36:
      size_t v8 = 20;
      goto LABEL_45;
    case 'p':
      int v7 = "Builtin.RawPointer";
LABEL_38:
      size_t v8 = 18;
      goto LABEL_45;
    case 't':
      int v7 = "Builtin.SILToken";
LABEL_40:
      size_t v8 = 16;
      goto LABEL_45;
    case 'v':
      if (v5 >= v1) {
        return 0;
      }
      int v20 = *(unsigned __int8 *)(v6 + v5);
      if (v20 == 95)
      {
LABEL_43:
        unint64_t v4 = 0;
        *((void *)this + 9) = v2 + 2;
        return v4;
      }
      if ((v20 - 48) > 9) {
        return 0;
      }
      signed int v24 = 0;
      break;
    case 'w':
      int v7 = "Builtin.Word";
      size_t v8 = 12;
LABEL_45:
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, v7, v8);
      if (Node) {
        goto LABEL_46;
      }
      return 0;
    default:
      return v4;
  }
  while (1)
  {
    int v25 = *(unsigned __int8 *)(v6 + v5);
    if ((v25 - 48) > 9) {
      break;
    }
    int v26 = v25 + 10 * v24 - 48;
    if (v26 < v24) {
      return 0;
    }
    unint64_t v4 = 0;
    *((void *)this + 9) = ++v5;
    signed int v24 = v26;
    if (v1 == v5) {
      return v4;
    }
  }
  unint64_t v4 = 0;
  if (v24 < 0 || v5 >= v1 || v25 != 95) {
    return v4;
  }
  *((void *)this + 9) = v5 + 1;
  if ((v24 - 4097) < 0xFFFFF000) {
    return 0;
  }
  int v41 = *((_DWORD *)this + 24);
  if (!v41) {
    return 0;
  }
  int v42 = v41 - 1;
  unint64_t v43 = *(void *)(*((void *)this + 11) + 8 * (v41 - 1));
  if (*(_WORD *)(v43 + 16) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v42;
  int v44 = *(unsigned __int8 *)(v43 + 18);
  if (v44 == 1) {
    goto LABEL_94;
  }
  if (v44 != 5 || *(_DWORD *)(v43 + 8) != 1) {
    return 0;
  }
  unint64_t v43 = *(void *)v43;
LABEL_94:
  unint64_t v4 = *(void *)v43;
  if (*(void *)v43)
  {
    if (*(_WORD *)(v4 + 16) != 20 || *(void *)(v4 + 8) < 8uLL || **(void **)v4 != 0x2E6E69746C697542) {
      return 0;
    }
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    swift::Demangle::__runtime::CharVector::append(&v49, "Builtin.Vec", 0xBuLL, this);
    swift::Demangle::__runtime::CharVector::append((unsigned int *)&v49, v24, this);
    char v48 = 120;
    swift::Demangle::__runtime::Vector<char>::push_back((unsigned int *)&v49, &v48, this);
    unint64_t v45 = *(void *)(v4 + 8);
    uint64_t v46 = 8;
    if (v45 < 8) {
      uint64_t v46 = *(void *)(v4 + 8);
    }
    swift::Demangle::__runtime::CharVector::append(&v49, (const void *)(*(void *)v4 + v46), v45 - v46, this);
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, (uint64_t *)&v49);
    if (!Node) {
      return 0;
    }
LABEL_46:
    unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v4;
    if (!v4 || v4 + 24 > *((void *)this + 2))
    {
      unint64_t v21 = 2 * *((void *)this + 4);
      if (v21 <= 0x20) {
        unint64_t v21 = 32;
      }
      *((void *)this + 4) = v21;
      unint64_t v22 = v21 + 8;
      unint64_t v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *unint64_t v23 = *((void *)this + 3);
      unint64_t v4 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v23 + v22;
      *((void *)this + 3) = v23;
    }
    *((void *)this + 1) = v4 + 24;
    *(_WORD *)(v4 + 16) = 232;
    *(unsigned char *)(v4 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)Node, this);
  }
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAnyGenericType(swift::Demangle::__runtime::Demangler *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 24);
  if (!v4
    || ((unsigned int v5 = v4 - 1,
         uint64_t v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5),
         int v7 = v6[8],
         (v7 - 173) <= 0x3C)
      ? (BOOL v8 = ((1 << (v7 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v8 = 1),
        v8
     && ((v7 - 101) <= 0x24
       ? (BOOL v9 = ((1 << (v7 - 101)) & 0x1000800001) == 0)
       : (BOOL v9 = 1),
         v9 && v7 != 347)))
  {
    uint64_t v6 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v5;
  }
  unint64_t v10 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (!v6) {
    return 0;
  }
  unint64_t v11 = v10;
  if (!v10) {
    return 0;
  }
  unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (!v12 || v12 + 24 > *((void *)this + 2))
  {
    unint64_t v13 = 2 * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    int v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    int v16 = (char *)v15 + v14;
    *int v15 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = a2;
  *(unsigned char *)(v12 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, v11, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, (swift::Demangle::__runtime::Node *)v6, this);
  unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v17;
  if (!v17 || v17 + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2 * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    int v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    unint64_t v21 = (char *)v20 + v19;
    *int v20 = *((void *)this + 3);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v21;
    *((void *)this + 3) = v20;
  }
  *((void *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = 232;
  *(unsigned char *)(v17 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v12, this);
  unint64_t v23 = v17;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v23, this);
  return v17;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtensionContext(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2)
  {
    unsigned int v5 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 11);
  unsigned int v5 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v2 - 1));
  if (*((_WORD *)v5 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v3;
    if (v2 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v3 = *((_DWORD *)this + 24);
  }
  unsigned int v6 = v3 - 1;
  unint64_t v7 = *(void *)(v4 + 8 * v6);
  int v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 == 153)
  {
    *((_DWORD *)this + 24) = v6;
    goto LABEL_12;
  }
  if (v8 != 101) {
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v6;
  unint64_t v7 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v7, 153);
LABEL_12:
  AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
  unint64_t v10 = 0;
  if (v7)
  {
    unint64_t v11 = (swift::Demangle::__runtime::Node *)AnyGeneric;
    if (AnyGeneric)
    {
      unint64_t v10 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v10;
      if (!v10 || v10 + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        int v15 = (char *)v14 + v13;
        *unint64_t v14 = *((void *)this + 3);
        unint64_t v10 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v15;
        *((void *)this + 3) = v14;
      }
      *((void *)this + 1) = v10 + 24;
      *(_WORD *)(v10 + 16) = 71;
      *(unsigned char *)(v10 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v7, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v11, this);
      if (v5) {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v5, this);
      }
    }
  }
  return v10;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demanglePlainFunction(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2
    && (unsigned int v3 = v2 - 1,
        uint64_t v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v3),
        *((_WORD *)v4 + 8) == 43))
  {
    *((_DWORD *)this + 24) = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unint64_t v5 = swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0);
  unsigned int v6 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, (swift::Demangle::__runtime::Node *)v5);
  if (v4 && v5)
  {
    unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v7;
    if (!v7 || v7 + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2 * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      unint64_t v11 = (char *)v10 + v9;
      void *v10 = *((void *)this + 3);
      unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v11;
      *((void *)this + 3) = v10;
    }
    *((void *)this + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = 44;
    *(unsigned char *)(v7 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v4, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v5, this);
    unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      int v15 = (char *)v14 + v13;
      *unint64_t v14 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 232;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::Node *)v7, this);
  }
  int v16 = *((_DWORD *)this + 24);
  if (!v16
    || ((unsigned int v17 = v16 - 1,
         unint64_t v18 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v17),
         int v19 = v18[8],
         (v19 - 173) <= 0x3C)
      ? (BOOL v20 = ((1 << (v19 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v20 = 1),
        v20
     && ((v19 - 101) <= 0x24
       ? (BOOL v21 = ((1 << (v19 - 101)) & 0x1000800001) == 0)
       : (BOOL v21 = 1),
         v21 && v19 != 347)))
  {
    unint64_t v18 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v17;
  }
  unint64_t v22 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (v6) {
    unint64_t v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 76, v22, (swift::Demangle::__runtime::Node *)v18, v6, (swift::Demangle::__runtime::Node *)v5);
  }
  else {
    unint64_t v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 76, v22, (swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::Node *)v5);
  }

  return setParentForOpaqueReturnTypeNodes(this, v23, (swift::Demangle::__runtime::Node *)v5);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 2);
  unsigned int v3 = (char *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v3;
  if (v3) {
    BOOL v4 = (unint64_t)(v3 + 32) > v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x28) {
      unint64_t v5 = 40;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    void *v7 = *((void *)this + 3);
    unsigned int v3 = (char *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }
  unsigned int v17 = 0;
  *((void *)this + 1) = v3 + 32;
  v16[0] = v3;
  v16[1] = (const void *)0x400000000;
  unint64_t v8 = 0;
  if (swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, v16, (unint64_t *)&v17))
  {
    AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
    if (AnyGeneric
      && (unint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(this, (unint64_t)AnyGeneric, (uint64_t)v16, 0)) != 0)
    {
      unint64_t v11 = v10;
      if (v17) {
        swift::Demangle::__runtime::Node::addChild(v10, v17, this);
      }
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        *unint64_t v14 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v14 + v13;
        *((void *)this + 3) = v14;
      }
      *((void *)this + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 232;
      *(unsigned char *)(v8 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, v11, this);
      unint64_t v18 = v8;
      swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v18, this);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentProtocolConformanceAssociated(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
  unsigned int v3 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(this);
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1, v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5), v6[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    unint64_t v6 = 0;
  }

  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 49, (swift::Demangle::__runtime::Node *)v6, v3, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleConcreteProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this);
  int v3 = *((_DWORD *)this + 24);
  if (v3
    && ((unsigned int v4 = v3 - 1, v5 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v4), v6 = v5[8], v6 == 184) || v6 == 183))
  {
    *((_DWORD *)this + 24) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v5 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(this);
    unsigned int v4 = *((_DWORD *)this + 24);
    if (!v4) {
      goto LABEL_9;
    }
  }
  unsigned int v7 = v4 - 1;
  unint64_t v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v7);
  if (*((_WORD *)v8 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v7;
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v8 = 0;
LABEL_10:

  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 26, v8, (swift::Demangle::__runtime::Node *)v5, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentProtocolConformanceRoot(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
  int v3 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1,
        int v6 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v5),
        *((_WORD *)v6 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    int v6 = 0;
  }

  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 47, v6, v3, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentProtocolConformanceInherited(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
  int v3 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1, v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5), v6[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    int v6 = 0;
  }

  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 48, (swift::Demangle::__runtime::Node *)v6, v3, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::popProtocol(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    goto LABEL_21;
  }
  unsigned int v3 = v2 - 1;
  int v4 = *(uint64_t **)(*((void *)this + 11) + 8 * v3);
  int v5 = *((unsigned __int16 *)v4 + 8);
  uint64_t v6 = (v5 - 173);
  if (v6 > 0x3C)
  {
LABEL_14:
    if ((v5 - 101) <= 0x24 && ((1 << (v5 - 101)) & 0x1000800001) != 0) {
      goto LABEL_18;
    }
    if (v5 == 347)
    {
LABEL_20:
      *((_DWORD *)this + 24) = v3;
      return (unint64_t)v4;
    }
LABEL_21:
    int v4 = 0;
    goto LABEL_22;
  }
  if (((1 << (v5 + 83)) & 0x100000010000000DLL) == 0)
  {
    if (v6 == 8) {
      goto LABEL_20;
    }
    if (v6 == 59)
    {
      *((_DWORD *)this + 24) = v3;
      int v7 = *((unsigned __int8 *)v4 + 18);
      if ((v7 - 1) >= 2 && (v7 != 5 || !*((_DWORD *)v4 + 2))) {
        return 0;
      }
      unsigned __int16 v8 = 232;
      unint64_t v9 = v4;
      while (v8 == 232)
      {
        if (*((unsigned __int8 *)v9 + 18) - 1 >= 2) {
          unint64_t v9 = (uint64_t *)*v9;
        }
        unint64_t v9 = (uint64_t *)*v9;
        unsigned __int16 v8 = *((_WORD *)v9 + 8);
      }
      unsigned int v23 = v8 - 180;
      if (v8 == 347) {
        signed int v24 = v4;
      }
      else {
        signed int v24 = 0;
      }
      if (v23 >= 2) {
        return (unint64_t)v24;
      }
      else {
        return (unint64_t)v4;
      }
    }
    goto LABEL_14;
  }
LABEL_18:
  *((_DWORD *)this + 24) = v3;
LABEL_22:
  unint64_t v12 = swift::Demangle::__runtime::Demangler::popContext(this);
  unint64_t v11 = 0;
  if (v4)
  {
    unint64_t v13 = v12;
    if (v12)
    {
      unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v14;
      if (!v14 || v14 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2 * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unsigned int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        unint64_t v18 = (char *)v17 + v16;
        *unsigned int v17 = *((void *)this + 3);
        unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }
      *((void *)this + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 180;
      *(unsigned char *)(v14 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, v13, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v4, this);
      unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v11;
      if (!v11 || v11 + 24 > *((void *)this + 2))
      {
        unint64_t v19 = 2 * *((void *)this + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32;
        }
        *((void *)this + 4) = v19;
        unint64_t v20 = v19 + 8;
        BOOL v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *BOOL v21 = *((void *)this + 3);
        unint64_t v11 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v21 + v20;
        *((void *)this + 3) = v21;
      }
      *((void *)this + 1) = v11 + 24;
      *(_WORD *)(v11 + 16) = 232;
      *(unsigned char *)(v11 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v14, this);
    }
  }
  return v11;
}

unint64_t swift::Demangle::__runtime::Demangler::demanglePackProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = (swift::Demangle::__runtime::Node *)v2;
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned __int16 v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 27;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v3, this);
  return v4;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::popProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2)
  {
    unint64_t v5 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 11);
  unint64_t v5 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v2 - 1));
  if (*((_WORD *)v5 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v3;
    if (v2 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v5 = 0;
    int v3 = *((_DWORD *)this + 24);
  }
  unsigned int v6 = v3 - 1;
  unint64_t v7 = *(void *)(v4 + 8 * v6);
  int v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 != 153)
  {
    if (v8 == 101)
    {
      *((_DWORD *)this + 24) = v6;
      unint64_t v7 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v7, 153);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v6;
LABEL_12:
  unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
  int v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    unint64_t v11 = 0;
    int v12 = v10 - 1;
    uint64_t v13 = *((void *)this + 11);
    unint64_t v14 = *(unsigned __int16 **)(v13 + 8 * (v10 - 1));
    int v15 = v14[8];
    if (v15 == 232) {
      goto LABEL_18;
    }
    if (v15 == 101)
    {
      *((_DWORD *)this + 24) = v12;
      if (v10 == 1)
      {
        unint64_t v16 = 0;
        if (!v5) {
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      unint64_t v11 = v14;
      --v10;
    }
    int v12 = v10 - 1;
    unint64_t v14 = *(unsigned __int16 **)(v13 + 8 * (v10 - 1));
    if (v14[8] == 232)
    {
LABEL_18:
      *((_DWORD *)this + 24) = v12;
      unint64_t v16 = (unint64_t)v14;
      unint64_t v14 = v11;
      if (!v5) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v14 = v11;
      if (!v5) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v14 = 0;
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_25:
  if (v16)
  {
    unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v17;
    if (!v17 || v17 + 24 > *((void *)this + 2))
    {
      unint64_t v18 = 2 * *((void *)this + 4);
      if (v18 <= 0x20) {
        unint64_t v18 = 32;
      }
      *((void *)this + 4) = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v21 = (char *)v20 + v19;
      *unint64_t v20 = *((void *)this + 3);
      unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v21;
      *((void *)this + 3) = v20;
    }
    *((void *)this + 1) = v17 + 24;
    *(_WORD *)(v17 + 16) = 44;
    *(unsigned char *)(v17 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, v5, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v16, this);
    unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v22 = 2 * *((void *)this + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)this + 4) = v22;
      unint64_t v23 = v22 + 8;
      signed int v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *signed int v24 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v24 + v23;
      *((void *)this + 3) = v24;
    }
    *((void *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 232;
    *(unsigned char *)(v16 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::Node *)v17, this);
  }
LABEL_37:
  int v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 182, (swift::Demangle::__runtime::Node *)v16, v9, (swift::Demangle::__runtime::Node *)v7);
  int v26 = v25;
  if (v14 && v25) {
    swift::Demangle::__runtime::Node::addChild(v25, (swift::Demangle::__runtime::Node *)v14, this);
  }
  return v26;
}

_WORD *swift::Demangle::__runtime::Demangler::demangleIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v2);
  if ((v5 - 48) > 9) {
    return 0;
  }
  if (v5 == 48)
  {
    *((void *)this + 9) = v2 + 1;
    if (v2 + 1 < v1 && *(unsigned char *)(v4 + v2 + 1) == 48)
    {
      char v6 = 0;
      v2 += 2;
      *((void *)this + 9) = v2;
      int v75 = 1;
    }
    else
    {
      int v75 = 0;
      char v6 = 1;
      ++v2;
    }
  }
  else
  {
    int v75 = 0;
    char v6 = 0;
  }
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  unint64_t v9 = 0;
  do
  {
    if ((v6 & 1) == 0)
    {
      char v10 = 0;
      goto LABEL_40;
    }
    do
    {
      unint64_t v2 = *((void *)this + 9);
      if (v2 >= *((void *)this + 8) || (uint64_t v11 = *((void *)this + 7), (*(unsigned char *)(v11 + v2) & 0xDFu) - 65 > 0x19))
      {
        char v10 = 1;
        goto LABEL_40;
      }
      *((void *)this + 9) = v2 + 1;
      int v12 = *(char *)(v11 + v2);
      unsigned __int8 v13 = v12 - 97;
      if ((v12 - 97) >= 0x1A) {
        int v14 = -65;
      }
      else {
        int v14 = -97;
      }
      int v15 = v14 + v12;
      if (v15 >= *((_DWORD *)this + 134)) {
        return 0;
      }
      unint64_t v16 = (char *)this + 16 * v15;
      unint64_t v18 = (const void *)*((void *)v16 + 15);
      size_t v17 = *((void *)v16 + 16);
      uint64_t v19 = v8;
      size_t v20 = v7;
      if (v17 + v8 > v7)
      {
        char __src = v9;
        BOOL v21 = &v9[v7];
        unint64_t v9 = (char *)*((void *)this + 1);
        if (v21 == v9)
        {
          unint64_t v23 = &v21[v17];
          unint64_t v22 = *((void *)this + 2);
          if ((unint64_t)v23 <= v22)
          {
            unsigned int v24 = v7;
            *((void *)this + 1) = v23;
            LODWORD(v26) = v17;
            unint64_t v9 = __src;
LABEL_13:
            unsigned int v7 = v24 + v26;
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v22 = *((void *)this + 2);
        }
        unsigned int v81 = v8;
        unsigned int v24 = v7;
        unint64_t v25 = 2 * v7;
        if (v17 > v25) {
          unint64_t v25 = v17;
        }
        if (v25 <= 4) {
          uint64_t v26 = 4;
        }
        else {
          uint64_t v26 = v25;
        }
        size_t v27 = v26 + v20;
        if (!v9 || (unint64_t)&v9[v27] > v22)
        {
          unint64_t v28 = 2 * *((void *)this + 4);
          if (v28 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          *((void *)this + 4) = v28;
          int v76 = v18;
          unint64_t v29 = v28 + 8;
          unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
          *unint64_t v30 = *((void *)this + 3);
          unint64_t v9 = (char *)(v30 + 1);
          uint64_t v31 = (char *)v30 + v29;
          unint64_t v18 = v76;
          *((void *)this + 2) = v31;
          *((void *)this + 3) = v30;
        }
        *((void *)this + 1) = &v9[v27];
        if (v24) {
          memcpy(v9, __src, v20);
        }
        unsigned int v8 = v81;
        goto LABEL_13;
      }
LABEL_14:
      memcpy(&v9[v19], v18, v17);
      v8 += v17;
    }
    while (v13 < 0x1Au);
    char v10 = 0;
    unint64_t v2 = *((void *)this + 9);
LABEL_40:
    unint64_t v32 = *((void *)this + 8);
    if (v2 >= v32) {
      return 0;
    }
    uint64_t v33 = *((void *)this + 7);
    if (*(unsigned char *)(v33 + v2) == 48)
    {
      *((void *)this + 9) = v2 + 1;
      break;
    }
    if (*(unsigned __int8 *)(v33 + v2) - 48 > 9) {
      return 0;
    }
    LODWORD(v34) = 0;
    while (1)
    {
      int v35 = *(unsigned __int8 *)(v33 + v2);
      if ((v35 - 48) > 9) {
        break;
      }
      int v36 = v35 + 10 * v34 - 48;
      if (v36 < (int)v34) {
        return 0;
      }
      *((void *)this + 9) = ++v2;
      LODWORD(v34) = v36;
      if (v32 == v2)
      {
        unint64_t v2 = v32;
        LODWORD(v34) = v36;
        break;
      }
    }
    if ((int)v34 < 1) {
      return 0;
    }
    char v77 = v10;
    if (!v75)
    {
      uint64_t v37 = v34;
      if (v2 + v34 <= v32)
      {
        uint64_t v42 = v8;
        if (v34 + (unint64_t)v8 > v7)
        {
          __srca = v9;
          unint64_t v43 = &v9[v7];
          unint64_t v9 = (char *)*((void *)this + 1);
          if (v43 != v9)
          {
            unint64_t v44 = *((void *)this + 2);
            goto LABEL_70;
          }
          uint64_t v46 = &v43[v34];
          unint64_t v44 = *((void *)this + 2);
          if ((unint64_t)v46 <= v44)
          {
            *((void *)this + 1) = v46;
            int v51 = v34;
            unint64_t v9 = __srca;
          }
          else
          {
LABEL_70:
            unsigned int v82 = v8;
            LODWORD(v47) = 2 * v7;
            if (v34 > 2 * v7) {
              LODWORD(v47) = v34;
            }
            if (v47 <= 4) {
              uint64_t v47 = 4;
            }
            else {
              uint64_t v47 = v47;
            }
            int v74 = v47;
            uint64_t v48 = v47 + v7;
            if (!v9 || (unint64_t)&v9[v48] > v44)
            {
              unint64_t v49 = 2 * *((void *)this + 4);
              if (v49 <= v48 + 1) {
                unint64_t v49 = v48 + 1;
              }
              *((void *)this + 4) = v49;
              unint64_t v73 = v49 + 8;
              uint64_t v50 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
              *uint64_t v50 = *((void *)this + 3);
              unint64_t v9 = (char *)(v50 + 1);
              *((void *)this + 2) = (char *)v50 + v73;
              *((void *)this + 3) = v50;
            }
            *((void *)this + 1) = &v9[v48];
            if (v7) {
              memcpy(v9, __srca, v7);
            }
            unsigned int v8 = v82;
            int v51 = v74;
          }
          v7 += v51;
        }
        uint64_t v52 = v33 + v2;
        memcpy(&v9[v42], (const void *)(v33 + v2), v34);
        unint64_t v53 = 0;
        unsigned int v54 = -1;
        while (2)
        {
          if (v53 >= v34)
          {
            int v57 = 0;
            if ((v54 & 0x80000000) == 0) {
              goto LABEL_99;
            }
LABEL_86:
            if ((v57 - 58) < 0xFFFFFFF6 && v57 != 95 && v57 != 0) {
              unsigned int v54 = v53;
            }
          }
          else
          {
            int v57 = *(unsigned __int8 *)(v52 + v53);
            if ((v54 & 0x80000000) != 0) {
              goto LABEL_86;
            }
LABEL_99:
            if (!v57
              || v57 == 95
              || (v57 - 65) <= 0x19
              && *(unsigned __int8 *)(v52 + v53 - 1) - 91 <= 0xFFFFFFE5)
            {
              if ((int)(v53 - v54) >= 2)
              {
                uint64_t v58 = *((int *)this + 134);
                if ((int)v58 <= 25)
                {
                  *((_DWORD *)this + 134) = v58 + 1;
                  unint64_t v59 = (char *)this + 16 * v58;
                  *((void *)v59 + 15) = v52 + v54;
                  *((void *)v59 + 16) = v53 - v54;
                }
              }
              unsigned int v54 = -1;
              goto LABEL_86;
            }
          }
          if (v34 + 1 == ++v53)
          {
            char v45 = v77;
            goto LABEL_124;
          }
          continue;
        }
      }
      return 0;
    }
    if (v2 < v32 && *(unsigned char *)(v33 + v2) == 95) {
      *((void *)this + 9) = ++v2;
    }
    uint64_t v37 = v34;
    if (v2 + v34 > v32) {
      return 0;
    }
    long long __p = 0;
    size_t v85 = 0;
    uint64_t v86 = 0;
    if (!swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)(v33 + v2), v34, (uint64_t)&__p))
    {
      if (v86 < 0) {
        operator delete(__p);
      }
      return 0;
    }
    if (v86 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v86 >= 0) {
      size_t v34 = HIBYTE(v86);
    }
    else {
      size_t v34 = v85;
    }
    uint64_t v39 = v8;
    if (v34 + v8 <= v7)
    {
      char v45 = v77;
    }
    else
    {
      int v40 = (char *)*((void *)this + 1);
      if (&v9[v7] != v40)
      {
        unint64_t v41 = *((void *)this + 2);
        goto LABEL_108;
      }
      int v60 = &v9[v7 + v34];
      unint64_t v41 = *((void *)this + 2);
      if ((unint64_t)v60 <= v41)
      {
        *((void *)this + 1) = v60;
        LODWORD(v62) = v34;
      }
      else
      {
LABEL_108:
        unsigned int v83 = v8;
        unint64_t v61 = 2 * v7;
        if (v34 > v61) {
          unint64_t v61 = v34;
        }
        if (v61 <= 4) {
          uint64_t v62 = 4;
        }
        else {
          uint64_t v62 = v61;
        }
        uint64_t v63 = v62 + v7;
        if (!v40 || (unint64_t)&v40[v63] > v41)
        {
          unint64_t v64 = 2 * *((void *)this + 4);
          if (v64 <= v63 + 1) {
            unint64_t v64 = v63 + 1;
          }
          *((void *)this + 4) = v64;
          __srcb = (char *)(v64 + 8);
          int v65 = p_p;
          int v66 = malloc_type_malloc(v64 + 8, 0xD0263BC5uLL);
          p_p = v65;
          *(void *)int v66 = *((void *)this + 3);
          int v40 = (char *)v66 + 8;
          *((void *)this + 2) = &__srcb[(void)v66];
          *((void *)this + 3) = v66;
        }
        *((void *)this + 1) = &v40[v63];
        if (v7)
        {
          unint64_t v67 = p_p;
          memcpy(v40, v9, v7);
          p_p = v67;
        }
        unint64_t v9 = v40;
        unsigned int v8 = v83;
      }
      char v45 = v77;
      v7 += v62;
    }
    memcpy(&v9[v39], p_p, v34);
    if (SHIBYTE(v86) < 0) {
      operator delete(__p);
    }
LABEL_124:
    v8 += v34;
    unint64_t v2 = *((void *)this + 9) + v37;
    *((void *)this + 9) = v2;
    char v6 = 1;
  }
  while ((v45 & 1) != 0);
  if (!v8) {
    return 0;
  }
  int v68 = (_WORD *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v68;
  if (!v68 || (unint64_t)(v68 + 12) > *((void *)this + 2))
  {
    unint64_t v69 = 2 * *((void *)this + 4);
    if (v69 <= 0x20) {
      unint64_t v69 = 32;
    }
    *((void *)this + 4) = v69;
    unint64_t v70 = v69 + 8;
    long long v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
    *long long v71 = *((void *)this + 3);
    int v68 = (_WORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = (char *)v71 + v70;
    *((void *)this + 3) = v71;
  }
  *((void *)this + 1) = v68 + 12;
  v68[8] = 101;
  *((unsigned char *)v68 + 18) = 3;
  *(void *)int v68 = v9;
  *((void *)v68 + 1) = v8;
  long long __p = v68;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&__p, this);
  return v68;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplFunctionType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v5 + v4;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 115;
  *(unsigned char *)(v2 + 18) = 0;
  unint64_t v7 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 < v7 && *(unsigned char *)(*((void *)this + 7) + v6) == 115)
  {
    *((void *)this + 9) = v6 + 1;
    long long v137 = 0;
    uint64_t v138 = 0;
    unint64_t v136 = 0;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v137, (unint64_t *)&v136))return 0; {
    int v8 = *((_DWORD *)this + 24);
    }
    if (!v8) {
      return 0;
    }
    unsigned int v9 = v8 - 1;
    char v10 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v9);
    if (*((_WORD *)v10 + 8) != 43) {
      return 0;
    }
    *((_DWORD *)this + 24) = v9;
    unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v11;
    if (!v11 || v11 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *int v14 = *((void *)this + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 119;
    *(unsigned char *)(v11 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v10, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, *v137, this);
    if (v136) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v136, this);
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v11, this);
    unint64_t v7 = *((void *)this + 8);
    unint64_t v6 = *((void *)this + 9);
  }
  if (v6 < v7 && *(unsigned char *)(*((void *)this + 7) + v6) == 73)
  {
    *((void *)this + 9) = v6 + 1;
    long long v137 = 0;
    uint64_t v138 = 0;
    unint64_t v136 = 0;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v137, (unint64_t *)&v136))return 0; {
    unint64_t v15 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 1) = v15;
    if (!v15 || v15 + 24 > *((void *)this + 2))
    {
      unint64_t v16 = 2 * *((void *)this + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32;
      }
      *((void *)this + 4) = v16;
      unint64_t v17 = v16 + 8;
      unint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      *unint64_t v18 = *((void *)this + 3);
      unint64_t v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v18 + v17;
      *((void *)this + 3) = v18;
    }
    *((void *)this + 1) = v15 + 24;
    *(_WORD *)(v15 + 16) = 116;
    *(unsigned char *)(v15 + 18) = 0;
    if (v138 != 1) {
      return 0;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v15, *v137, this);
    if (v136) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v15, v136, this);
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v15, this);
  }
  int v19 = *((_DWORD *)this + 24);
  if (v19 && (unsigned int v20 = v19 - 1, v21 = *(void *)(*((void *)this + 11) + 8 * v20), *(_WORD *)(v21 + 16) == 43))
  {
    *((_DWORD *)this + 24) = v20;
    unint64_t v22 = *((void *)this + 9);
    if (v22 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v22) == 80)
    {
      *((void *)this + 9) = v22 + 1;
      unint64_t v21 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v21, 46);
    }
  }
  else
  {
    unint64_t v21 = 0;
  }
  unint64_t v24 = *((void *)this + 8);
  unint64_t v23 = *((void *)this + 9);
  if (v23 < v24 && *(unsigned char *)(*((void *)this + 7) + v23) == 101)
  {
    *((void *)this + 9) = v23 + 1;
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 105;
    *(unsigned char *)(v25 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v25, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 < v24 && *(unsigned char *)(*((void *)this + 7) + v23) == 65)
  {
    *((void *)this + 9) = v23 + 1;
    unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v29;
    if (!v29 || v29 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2 * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      unint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      *unint64_t v32 = *((void *)this + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v32 + v31;
      *((void *)this + 3) = v32;
    }
    *((void *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 108;
    *(unsigned char *)(v29 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v29, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 >= v24) {
    int v33 = 0;
  }
  else {
    int v33 = *(unsigned __int8 *)(*((void *)this + 7) + v23);
  }
  HIDWORD(v34) = v33;
  LODWORD(v34) = (v33 << 24) - 1677721600;
  unsigned int v35 = (v34 >> 25);
  if (v35 <= 7 && ((1 << v35) & 0x93) != 0)
  {
    if (v23 >= v24)
    {
      char v36 = 0;
    }
    else
    {
      *((void *)this + 9) = v23 + 1;
      char v36 = *(unsigned char *)(*((void *)this + 7) + v23);
    }
    uint64_t v37 = v36;
    unint64_t v38 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v38;
    if (!v38 || v38 + 24 > *((void *)this + 2))
    {
      unint64_t v39 = 2 * *((void *)this + 4);
      if (v39 <= 0x20) {
        unint64_t v39 = 32;
      }
      *((void *)this + 4) = v39;
      unint64_t v40 = v39 + 8;
      unint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      *unint64_t v41 = *((void *)this + 3);
      unint64_t v38 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v41 + v40;
      *((void *)this + 3) = v41;
    }
    *((void *)this + 1) = v38 + 24;
    *(_WORD *)(v38 + 16) = 107;
    *(unsigned char *)(v38 + 18) = 4;
    *(void *)unint64_t v38 = v37;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v38, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 >= v24) {
    return 0;
  }
  unint64_t v42 = 0;
  *((void *)this + 9) = v23 + 1;
  unint64_t v43 = "@callee_unowned";
  switch(*(unsigned char *)(*((void *)this + 7) + v23))
  {
    case 'g':
      unint64_t v43 = "@callee_guaranteed";
      goto LABEL_72;
    case 't':
      unint64_t v43 = "@convention(thin)";
      goto LABEL_72;
    case 'x':
      unint64_t v43 = "@callee_owned";
      goto LABEL_72;
    case 'y':
LABEL_72:
      unint64_t v44 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v44;
      unint64_t v135 = (swift::Demangle::__runtime::Node *)v2;
      if (!v44 || v44 + 24 > *((void *)this + 2))
      {
        unint64_t v45 = 2 * *((void *)this + 4);
        if (v45 <= 0x20) {
          unint64_t v45 = 32;
        }
        *((void *)this + 4) = v45;
        unint64_t v46 = v45 + 8;
        uint64_t v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        *uint64_t v47 = *((void *)this + 3);
        unint64_t v44 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v48 = (char *)v47 + v46;
        unint64_t v2 = (unint64_t)v135;
        *((void *)this + 2) = v48;
        *((void *)this + 3) = v47;
      }
      *((void *)this + 1) = v44 + 24;
      size_t v49 = strlen(v43);
      *(_WORD *)(v44 + 16) = 106;
      *(unsigned char *)(v44 + 18) = 3;
      *(void *)unint64_t v44 = v43;
      *(void *)(v44 + 8) = v49;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v44, this);
      unint64_t v50 = *((void *)this + 8);
      unint64_t v51 = *((void *)this + 9);
      if (v51 < v50)
      {
        unint64_t v52 = v51 + 1;
        *((void *)this + 9) = v51 + 1;
        uint64_t v53 = *((void *)this + 7);
        int v54 = 0;
        __int16 v55 = "block";
        switch(*(unsigned char *)(v53 + v51))
        {
          case 'B':
            goto LABEL_89;
          case 'C':
            int v54 = 0;
            goto LABEL_80;
          case 'K':
            int v54 = 0;
            __int16 v55 = "closure";
            goto LABEL_89;
          case 'M':
            int v54 = 0;
            __int16 v55 = "method";
            goto LABEL_89;
          case 'O':
            int v54 = 0;
            __int16 v55 = "objc_method";
            goto LABEL_89;
          case 'W':
            int v54 = 0;
            __int16 v55 = "witness_method";
            goto LABEL_89;
          case 'z':
            if (v52 >= v50) {
              goto LABEL_220;
            }
            unint64_t v133 = v51 + 2;
            *((void *)this + 9) = v133;
            int v134 = *(char *)(v53 + v52);
            if (v134 == 66)
            {
              int v54 = 1;
            }
            else
            {
              unint64_t v52 = v133;
              if (v134 != 67)
              {
LABEL_220:
                unint64_t v56 = v52 - 2;
                goto LABEL_83;
              }
              int v54 = 1;
LABEL_80:
              __int16 v55 = "c";
            }
LABEL_89:
            unint64_t v57 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v57;
            if (!v57 || (unint64_t v58 = *((void *)this + 2), v57 + 24 > v58))
            {
              unint64_t v59 = 2 * *((void *)this + 4);
              if (v59 <= 0x20) {
                unint64_t v59 = 32;
              }
              *((void *)this + 4) = v59;
              unint64_t v60 = v59 + 8;
              unint64_t v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
              *unint64_t v61 = *((void *)this + 3);
              unint64_t v57 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v58 = (unint64_t)v61 + v60;
              *((void *)this + 2) = (char *)v61 + v60;
              *((void *)this + 3) = v61;
            }
            *(_WORD *)(v57 + 16) = 113;
            *(unsigned char *)(v57 + 18) = 0;
            unint64_t v62 = (v57 + 31) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v62;
            if (!v62 || v62 + 24 > v58)
            {
              unint64_t v63 = 2 * *((void *)this + 4);
              if (v63 <= 0x20) {
                unint64_t v63 = 32;
              }
              *((void *)this + 4) = v63;
              unint64_t v64 = v63 + 8;
              int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
              *int v65 = *((void *)this + 3);
              unint64_t v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v65 + v64;
              *((void *)this + 3) = v65;
            }
            *((void *)this + 1) = v62 + 24;
            size_t v66 = strlen(v55);
            *(_WORD *)(v62 + 16) = 114;
            *(unsigned char *)(v62 + 18) = 3;
            *(void *)unint64_t v62 = v55;
            *(void *)(v62 + 8) = v66;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v57, (swift::Demangle::__runtime::Node *)v62, this);
            if (v54)
            {
              unint64_t v67 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(this);
              if (v67) {
                swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v57, v67, this);
              }
            }
            unint64_t v2 = (unint64_t)v135;
            swift::Demangle::__runtime::Node::addChild(v135, (swift::Demangle::__runtime::Node *)v57, this);
            unint64_t v50 = *((void *)this + 8);
            unint64_t v56 = *((void *)this + 9);
            if (v56 < v50) {
              goto LABEL_103;
            }
            goto LABEL_113;
          default:
            goto LABEL_82;
        }
      }
      unint64_t v52 = *((void *)this + 9);
LABEL_82:
      unint64_t v56 = v52 - 1;
LABEL_83:
      *((void *)this + 9) = v56;
      if (v56 >= v50) {
        goto LABEL_113;
      }
LABEL_103:
      int v68 = *(unsigned __int8 *)(*((void *)this + 7) + v56);
      if (v68 == 65)
      {
        unint64_t v69 = "@yield_once";
      }
      else
      {
        if (v68 != 71) {
          goto LABEL_113;
        }
        unint64_t v69 = "@yield_many";
      }
      *((void *)this + 9) = v56 + 1;
      unint64_t v70 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v70;
      if (!v70 || v70 + 24 > *((void *)this + 2))
      {
        unint64_t v71 = 2 * *((void *)this + 4);
        if (v71 <= 0x20) {
          unint64_t v71 = 32;
        }
        *((void *)this + 4) = v71;
        unint64_t v72 = v71 + 8;
        unint64_t v73 = malloc_type_malloc(v71 + 8, 0xD0263BC5uLL);
        *unint64_t v73 = *((void *)this + 3);
        unint64_t v70 = ((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v73 + v72;
        *((void *)this + 3) = v73;
      }
      *((void *)this + 1) = v70 + 24;
      *(_WORD *)(v70 + 16) = 112;
      *(unsigned char *)(v70 + 18) = 3;
      *(void *)unint64_t v70 = v69;
      *(void *)(v70 + 8) = 11;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v70, this);
      unint64_t v50 = *((void *)this + 8);
      unint64_t v56 = *((void *)this + 9);
LABEL_113:
      if (v56 < v50 && *(unsigned char *)(*((void *)this + 7) + v56) == 104)
      {
        *((void *)this + 9) = v56 + 1;
        unint64_t v74 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v74;
        if (!v74 || v74 + 24 > *((void *)this + 2))
        {
          unint64_t v75 = 2 * *((void *)this + 4);
          if (v75 <= 0x20) {
            unint64_t v75 = 32;
          }
          *((void *)this + 4) = v75;
          unint64_t v76 = v75 + 8;
          char v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
          *char v77 = *((void *)this + 3);
          unint64_t v74 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v77 + v76;
          *((void *)this + 3) = v77;
        }
        *((void *)this + 1) = v74 + 24;
        *(_WORD *)(v74 + 16) = 112;
        *(unsigned char *)(v74 + 18) = 3;
        *(void *)unint64_t v74 = "@Sendable";
        *(void *)(v74 + 8) = 9;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v74, this);
        unint64_t v50 = *((void *)this + 8);
        unint64_t v56 = *((void *)this + 9);
      }
      if (v56 < v50 && *(unsigned char *)(*((void *)this + 7) + v56) == 72)
      {
        *((void *)this + 9) = v56 + 1;
        unint64_t v78 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v78;
        if (!v78 || v78 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2 * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unsigned int v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          *unsigned int v81 = *((void *)this + 3);
          unint64_t v78 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v81 + v80;
          *((void *)this + 3) = v81;
        }
        *((void *)this + 1) = v78 + 24;
        *(_WORD *)(v78 + 16) = 112;
        *(unsigned char *)(v78 + 18) = 3;
        *(void *)unint64_t v78 = "@async";
        *(void *)(v78 + 8) = 6;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v78, this);
      }
      if (v21) {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v21, this);
      }
      unint64_t v82 = swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 118);
      if (v82)
      {
        unsigned int v83 = (swift::Demangle::__runtime::Node *)v82;
        int v84 = 0;
        do
        {
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v83, this);
          unint64_t v89 = *((void *)this + 9);
          long long v90 = (const char *)&unk_BFEA3;
          if (v89 < *((void *)this + 8))
          {
            long long v90 = (const char *)&unk_BFEA3;
            if (*(unsigned char *)(*((void *)this + 7) + v89) == 119)
            {
              *((void *)this + 9) = v89 + 1;
              long long v90 = "@noDerivative";
            }
          }
          unint64_t v91 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v91;
          if (!v91 || v91 + 24 > *((void *)this + 2))
          {
            unint64_t v92 = 2 * *((void *)this + 4);
            if (v92 <= 0x20) {
              unint64_t v92 = 32;
            }
            *((void *)this + 4) = v92;
            unint64_t v93 = v92 + 8;
            int v94 = malloc_type_malloc(v92 + 8, 0xD0263BC5uLL);
            void *v94 = *((void *)this + 3);
            unint64_t v91 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v95 = (char *)v94 + v93;
            unint64_t v2 = (unint64_t)v135;
            *((void *)this + 2) = v95;
            *((void *)this + 3) = v94;
          }
          *((void *)this + 1) = v91 + 24;
          size_t v96 = strlen(v90);
          *(_WORD *)(v91 + 16) = 110;
          *(unsigned char *)(v91 + 18) = 3;
          *(void *)unint64_t v91 = v90;
          *(void *)(v91 + 8) = v96;
          swift::Demangle::__runtime::Node::addChild(v83, (swift::Demangle::__runtime::Node *)v91, this);
          unint64_t v97 = *((void *)this + 9);
          if (v97 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v97) == 84)
          {
            *((void *)this + 9) = v97 + 1;
            unint64_t v88 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v88;
            if (!v88 || v88 + 24 > *((void *)this + 2))
            {
              unint64_t v85 = 2 * *((void *)this + 4);
              if (v85 <= 0x20) {
                unint64_t v85 = 32;
              }
              *((void *)this + 4) = v85;
              unint64_t v86 = v85 + 8;
              unint64_t v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
              *unint64_t v87 = *((void *)this + 3);
              unint64_t v88 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v87 + v86;
              *((void *)this + 3) = v87;
            }
            *((void *)this + 1) = v88 + 24;
            *(_WORD *)(v88 + 16) = 111;
            *(unsigned char *)(v88 + 18) = 3;
            *(void *)unint64_t v88 = "sending";
            *(void *)(v88 + 8) = 7;
            swift::Demangle::__runtime::Node::addChild(v83, (swift::Demangle::__runtime::Node *)v88, this);
          }
          ++v84;
          unsigned int v83 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 118);
        }
        while (v83);
      }
      else
      {
        int v84 = 0;
      }
      unint64_t v98 = *((void *)this + 9);
      if (v98 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v98) == 84)
      {
        *((void *)this + 9) = v98 + 1;
        unint64_t v99 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v99;
        if (!v99 || v99 + 24 > *((void *)this + 2))
        {
          unint64_t v100 = 2 * *((void *)this + 4);
          if (v100 <= 0x20) {
            unint64_t v100 = 32;
          }
          *((void *)this + 4) = v100;
          unint64_t v101 = v100 + 8;
          unint64_t v102 = malloc_type_malloc(v100 + 8, 0xD0263BC5uLL);
          void *v102 = *((void *)this + 3);
          unint64_t v99 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v102 + v101;
          *((void *)this + 3) = v102;
        }
        *((void *)this + 1) = v99 + 24;
        *(_WORD *)(v99 + 16) = 109;
        *(unsigned char *)(v99 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v99, this);
      }
      unint64_t v103 = swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 120);
      if (v103)
      {
        unint64_t v104 = (swift::Demangle::__runtime::Node *)v103;
        do
        {
          if (v2) {
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v104, this);
          }
          unint64_t v111 = *((void *)this + 9);
          uint64_t v112 = (const char *)&unk_BFEA3;
          if (v111 < *((void *)this + 8))
          {
            uint64_t v112 = (const char *)&unk_BFEA3;
            if (*(unsigned char *)(*((void *)this + 7) + v111) == 119)
            {
              *((void *)this + 9) = v111 + 1;
              uint64_t v112 = "@noDerivative";
            }
          }
          unint64_t v108 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v108;
          if (!v108 || v108 + 24 > *((void *)this + 2))
          {
            unint64_t v105 = 2 * *((void *)this + 4);
            if (v105 <= 0x20) {
              unint64_t v105 = 32;
            }
            *((void *)this + 4) = v105;
            unint64_t v106 = v105 + 8;
            unint64_t v107 = malloc_type_malloc(v105 + 8, 0xD0263BC5uLL);
            *unint64_t v107 = *((void *)this + 3);
            unint64_t v108 = ((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v109 = (char *)v107 + v106;
            unint64_t v2 = (unint64_t)v135;
            *((void *)this + 2) = v109;
            *((void *)this + 3) = v107;
          }
          *((void *)this + 1) = v108 + 24;
          size_t v110 = strlen(v112);
          *(_WORD *)(v108 + 16) = 110;
          *(unsigned char *)(v108 + 18) = 3;
          *(void *)unint64_t v108 = v112;
          *(void *)(v108 + 8) = v110;
          swift::Demangle::__runtime::Node::addChild(v104, (swift::Demangle::__runtime::Node *)v108, this);
          ++v84;
          unint64_t v104 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 120);
        }
        while (v104);
      }
      unint64_t v114 = *((void *)this + 8);
      unint64_t v113 = *((void *)this + 9);
      if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 89) {
        goto LABEL_182;
      }
      int v115 = v84 + 1;
      break;
    default:
      return v42;
  }
  do
  {
    int v84 = v115;
    *((void *)this + 9) = v113 + 1;
    unint64_t v116 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 121);
    if (!v116) {
      return 0;
    }
    if (v2) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v116, this);
    }
    unint64_t v114 = *((void *)this + 8);
    unint64_t v113 = *((void *)this + 9);
    if (v113 >= v114) {
      break;
    }
    int v115 = v84 + 1;
  }
  while (*(unsigned char *)(*((void *)this + 7) + v113) == 89);
LABEL_182:
  if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 122) {
    goto LABEL_188;
  }
  *((void *)this + 9) = v113 + 1;
  int v117 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 122);
  if (!v117) {
    return 0;
  }
  if (v2) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v117, this);
  }
  ++v84;
  unint64_t v114 = *((void *)this + 8);
  unint64_t v113 = *((void *)this + 9);
LABEL_188:
  if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 95) {
    return 0;
  }
  *((void *)this + 9) = v113 + 1;
  if (v84 >= 1)
  {
    unint64_t v118 = 0;
    uint64_t v119 = 0;
    do
    {
      int v121 = *((_DWORD *)this + 24);
      if (!v121) {
        return 0;
      }
      unsigned int v122 = v121 - 1;
      int v123 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v122);
      if (*((_WORD *)v123 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v122;
      int v124 = *(unsigned __int8 *)(v2 + 18);
      switch(v124)
      {
        case 5:
          unint64_t v126 = *(unsigned int *)(v2 + 8);
          unint64_t v125 = v126 + ~v119;
          if (v126 > v125) {
            goto LABEL_204;
          }
          break;
        case 2:
          unint64_t v125 = 1 - v119;
          if ((unint64_t)(1 - v119) < 2) {
            goto LABEL_204;
          }
          break;
        case 1:
          unint64_t v125 = v118;
          if (!v118)
          {
LABEL_204:
            unsigned int v127 = v124 - 1;
            unint64_t v128 = v2;
            if (v127 >= 2) {
              unint64_t v128 = *(void *)v2;
            }
            unint64_t v120 = *(swift::Demangle::__runtime::Node **)(v128 + 8 * v125);
            goto LABEL_193;
          }
          break;
      }
      unint64_t v120 = 0;
LABEL_193:
      swift::Demangle::__runtime::Node::addChild(v120, v123, this);
      ++v119;
      --v118;
    }
    while (-(uint64_t)v84 != v118);
  }
  if (!v2) {
    return 0;
  }
  unint64_t v42 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v42;
  if (!v42 || v42 + 24 > *((void *)this + 2))
  {
    unint64_t v129 = 2 * *((void *)this + 4);
    if (v129 <= 0x20) {
      unint64_t v129 = 32;
    }
    *((void *)this + 4) = v129;
    unint64_t v130 = v129 + 8;
    unint64_t v131 = malloc_type_malloc(v129 + 8, 0xD0263BC5uLL);
    *unint64_t v131 = *((void *)this + 3);
    unint64_t v42 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v131 + v130;
    *((void *)this + 3) = v131;
  }
  *((void *)this + 1) = v42 + 24;
  *(_WORD *)(v42 + 16) = 232;
  *(unsigned char *)(v42 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v42, (swift::Demangle::__runtime::Node *)v2, this);
  return v42;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    goto LABEL_18;
  }
  uint64_t v3 = *((void *)this + 7);
  unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
  if (v4 == 108)
  {
    *((void *)this + 9) = v2 + 1;
    int v9 = *((_DWORD *)this + 24);
    if (v9)
    {
      unsigned int v10 = v9 - 1;
      unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
      if (*((_WORD *)v11 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v10;
        unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v12;
        if (!v12 || v12 + 24 > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          unint64_t v16 = (char *)v15 + v14;
          *unint64_t v15 = *((void *)this + 3);
          unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v16;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = v12 + 24;
        *(_WORD *)(v12 + 16) = 176;
        *(unsigned char *)(v12 + 18) = 0;
        unint64_t v17 = (swift::Demangle::__runtime::Node *)v12;
        unint64_t v18 = v11;
        goto LABEL_38;
      }
    }
    return 0;
  }
  if (v4 == 76)
  {
    *((void *)this + 9) = v2 + 1;
    int v5 = *((_DWORD *)this + 24);
    if (v5)
    {
      uint64_t v6 = (v5 - 1);
      uint64_t v7 = *((void *)this + 11);
      int v8 = *(swift::Demangle::__runtime::Node **)(v7 + 8 * v6);
      if (*((_WORD *)v8 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v6;
        if (v5 == 1) {
          return 0;
        }
        uint64_t v6 = (v5 - 2);
      }
      else
      {
        int v8 = 0;
      }
      unint64_t v22 = *(unsigned __int16 **)(v7 + 8 * v6);
      int v35 = v22[8];
      BOOL v36 = (v35 - 173) > 0x3C || ((1 << (v35 + 83)) & 0x100000010000010DLL) == 0;
      if (!v36
        || ((v35 - 101) <= 0x24
          ? (BOOL v37 = ((1 << (v35 - 101)) & 0x1000800001) == 0)
          : (BOOL v37 = 1),
            !v37 || v35 == 347))
      {
        *((_DWORD *)this + 24) = v6;
        if (v8)
        {
          unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v12;
          if (!v12 || v12 + 24 > *((void *)this + 2))
          {
            unint64_t v38 = 2 * *((void *)this + 4);
            if (v38 <= 0x20) {
              unint64_t v38 = 32;
            }
            *((void *)this + 4) = v38;
            unint64_t v39 = v38 + 8;
            unint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
            unint64_t v41 = (char *)v40 + v39;
            *unint64_t v40 = *((void *)this + 3);
            unint64_t v12 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = v40;
          }
          *((void *)this + 1) = v12 + 24;
          __int16 v30 = 176;
LABEL_37:
          *(_WORD *)(v12 + 16) = v30;
          *(unsigned char *)(v12 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, v8, this);
          unint64_t v17 = (swift::Demangle::__runtime::Node *)v12;
          unint64_t v18 = (swift::Demangle::__runtime::Node *)v22;
LABEL_38:
          swift::Demangle::__runtime::Node::addChild(v17, v18, this);
          return v12;
        }
      }
    }
    return 0;
  }
  if ((char)v4 < 97)
  {
    if (v4 - 65 <= 9) {
      goto LABEL_40;
    }
LABEL_18:
    unint64_t v19 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
    int v20 = *((_DWORD *)this + 24);
    if (v20)
    {
      int v8 = (swift::Demangle::__runtime::Node *)v19;
      unsigned int v21 = v20 - 1;
      unint64_t v22 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v21);
      int v23 = v22[8];
      BOOL v24 = (v23 - 173) > 0x3C || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0;
      if (!v24
        || ((v23 - 101) <= 0x24
          ? (BOOL v25 = ((1 << (v23 - 101)) & 0x1000800001) == 0)
          : (BOOL v25 = 1),
            !v25 || v23 == 347))
      {
        *((_DWORD *)this + 24) = v21;
        if (v19)
        {
          unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v12;
          if (!v12 || v12 + 24 > *((void *)this + 2))
          {
            unint64_t v26 = 2 * *((void *)this + 4);
            if (v26 <= 0x20) {
              unint64_t v26 = 32;
            }
            *((void *)this + 4) = v26;
            unint64_t v27 = v26 + 8;
            unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
            unint64_t v29 = (char *)v28 + v27;
            void *v28 = *((void *)this + 3);
            unint64_t v12 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v29;
            *((void *)this + 3) = v28;
          }
          *((void *)this + 1) = v12 + 24;
          __int16 v30 = 137;
          goto LABEL_37;
        }
      }
    }
    return 0;
  }
  if (v4 >= 0x6B) {
    goto LABEL_18;
  }
LABEL_40:
  *((void *)this + 9) = v2 + 1;
  char __src = *(unsigned char *)(v3 + v2);
  unint64_t v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, 101, &__src, 1uLL);
  int v32 = *((_DWORD *)this + 24);
  if (v32)
  {
    unsigned int v33 = v32 - 1;
    unint64_t v34 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v33);
    *((_DWORD *)this + 24) = v33;
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v43;
  if (!v43 || v43 + 24 > *((void *)this + 2))
  {
    unint64_t v44 = 2 * *((void *)this + 4);
    if (v44 <= 0x20) {
      unint64_t v44 = 32;
    }
    *((void *)this + 4) = v44;
    unint64_t v45 = v44 + 8;
    unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
    uint64_t v47 = (char *)v46 + v45;
    *unint64_t v46 = *((void *)this + 3);
    unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v47;
    *((void *)this + 3) = v46;
  }
  *((void *)this + 1) = v43 + 24;
  *(_WORD *)(v43 + 16) = 205;
  *(unsigned char *)(v43 + 18) = 0;
  if (v31 && v43) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, v31, this);
  }
  unint64_t v12 = 0;
  if (v34 && v43)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, v34, this);
    return v43;
  }
  return v12;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatype(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 < *((void *)this + 8))
  {
    unint64_t v3 = 0;
    *((void *)this + 9) = v1 + 1;
    switch(*(unsigned char *)(*((void *)this + 7) + v1))
    {
      case 'A':
        unsigned int v4 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
        if (!v4) {
          return 0;
        }
        int v5 = v4;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v6 = 2 * *((void *)this + 4);
          if (v6 <= 0x20) {
            unint64_t v6 = 32;
          }
          *((void *)this + 4) = v6;
          unint64_t v7 = v6 + 8;
          int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
          int v9 = (char *)v8 + v7;
          *int v8 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v9;
          *((void *)this + 3) = v8;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 260;
        goto LABEL_293;
      case 'B':
        int v11 = *((_DWORD *)this + 24);
        if (!v11) {
          return 0;
        }
        unsigned int v12 = v11 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v12);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v12;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          unint64_t v16 = (char *)v15 + v14;
          *unint64_t v15 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v16;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 258;
        goto LABEL_293;
      case 'C':
        int v17 = *((_DWORD *)this + 24);
        if (!v17) {
          return 0;
        }
        unsigned int v18 = v17 - 1;
        unint64_t v19 = *(uint64_t **)(*((void *)this + 11) + 8 * v18);
        if (*((_WORD *)v19 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v18;
        int v20 = *((unsigned __int8 *)v19 + 18);
        unsigned int v21 = (swift::Demangle::__runtime::Node *)v19;
        if ((v20 - 1) >= 2) {
          unsigned int v21 = (swift::Demangle::__runtime::Node *)*v19;
        }
          return 0;
        if ((v20 - 1) < 2) {
          goto LABEL_27;
        }
        if (v20 == 5 && *((_DWORD *)v19 + 2))
        {
          unint64_t v19 = (uint64_t *)*v19;
LABEL_27:
          unint64_t v22 = (swift::Demangle::__runtime::Node *)*v19;
        }
        else
        {
          unint64_t v22 = 0;
        }
        return swift::Demangle::__runtime::Demangler::createWithChild(this, 261, v22);
      case 'D':
        int v23 = *((_DWORD *)this + 24);
        if (!v23) {
          return 0;
        }
        unsigned int v24 = v23 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v24);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v24;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v25 = 2 * *((void *)this + 4);
          if (v25 <= 0x20) {
            unint64_t v25 = 32;
          }
          *((void *)this + 4) = v25;
          unint64_t v26 = v25 + 8;
          unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
          unint64_t v28 = (char *)v27 + v26;
          void *v27 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v28;
          *((void *)this + 3) = v27;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 243;
        goto LABEL_293;
      case 'F':
        int v29 = *((_DWORD *)this + 24);
        if (!v29) {
          return 0;
        }
        unsigned int v30 = v29 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v30);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v30;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v31 = 2 * *((void *)this + 4);
          if (v31 <= 0x20) {
            unint64_t v31 = 32;
          }
          *((void *)this + 4) = v31;
          unint64_t v32 = v31 + 8;
          unsigned int v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          unint64_t v34 = (char *)v33 + v32;
          void *v33 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v34;
          *((void *)this + 3) = v33;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 259;
        goto LABEL_293;
      case 'I':
        int v35 = *((_DWORD *)this + 24);
        if (!v35) {
          return 0;
        }
        unsigned int v36 = v35 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v36);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v36;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v37 = 2 * *((void *)this + 4);
          if (v37 <= 0x20) {
            unint64_t v37 = 32;
          }
          *((void *)this + 4) = v37;
          unint64_t v38 = v37 + 8;
          unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
          unint64_t v40 = (char *)v39 + v38;
          *unint64_t v39 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v40;
          *((void *)this + 3) = v39;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 240;
        goto LABEL_293;
      case 'J':
        int v41 = *((_DWORD *)this + 24);
        if (!v41) {
          return 0;
        }
        unsigned int v42 = v41 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v42);
        *((_DWORD *)this + 24) = v42;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v43 = 2 * *((void *)this + 4);
          if (v43 <= 0x20) {
            unint64_t v43 = 32;
          }
          *((void *)this + 4) = v43;
          unint64_t v44 = v43 + 8;
          unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
          unint64_t v46 = (char *)v45 + v44;
          *unint64_t v45 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v46;
          *((void *)this + 3) = v45;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 314;
        goto LABEL_293;
      case 'K':
        int v47 = *((_DWORD *)this + 24);
        if (!v47) {
          return 0;
        }
        unsigned int v48 = v47 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v48);
        *((_DWORD *)this + 24) = v48;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v49 = 2 * *((void *)this + 4);
          if (v49 <= 0x20) {
            unint64_t v49 = 32;
          }
          *((void *)this + 4) = v49;
          unint64_t v50 = v49 + 8;
          unint64_t v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
          unint64_t v52 = (char *)v51 + v50;
          *unint64_t v51 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v52;
          *((void *)this + 3) = v51;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 312;
        goto LABEL_293;
      case 'L':
        int v53 = *((_DWORD *)this + 24);
        if (!v53) {
          return 0;
        }
        unsigned int v54 = v53 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v54);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v54;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v55 = 2 * *((void *)this + 4);
          if (v55 <= 0x20) {
            unint64_t v55 = 32;
          }
          *((void *)this + 4) = v55;
          unint64_t v56 = v55 + 8;
          unint64_t v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
          unint64_t v58 = (char *)v57 + v56;
          *unint64_t v57 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v58;
          *((void *)this + 3) = v57;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 244;
        goto LABEL_293;
      case 'M':
        int v59 = *((_DWORD *)this + 24);
        if (!v59) {
          return 0;
        }
        unsigned int v60 = v59 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v60);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v60;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v61 = 2 * *((void *)this + 4);
          if (v61 <= 0x20) {
            unint64_t v61 = 32;
          }
          *((void *)this + 4) = v61;
          unint64_t v62 = v61 + 8;
          unint64_t v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          unint64_t v64 = (char *)v63 + v62;
          *unint64_t v63 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v64;
          *((void *)this + 3) = v63;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 310;
        goto LABEL_293;
      case 'N':
        int v65 = *((_DWORD *)this + 24);
        if (!v65) {
          return 0;
        }
        unsigned int v66 = v65 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v66);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v66;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v67 = 2 * *((void *)this + 4);
          if (v67 <= 0x20) {
            unint64_t v67 = 32;
          }
          *((void *)this + 4) = v67;
          unint64_t v68 = v67 + 8;
          unint64_t v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
          unint64_t v70 = (char *)v69 + v68;
          void *v69 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v70;
          *((void *)this + 3) = v69;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 313;
        goto LABEL_293;
      case 'P':
        int v71 = *((_DWORD *)this + 24);
        if (!v71) {
          return 0;
        }
        unsigned int v72 = v71 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v72);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v72;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v73 = 2 * *((void *)this + 4);
          if (v73 <= 0x20) {
            unint64_t v73 = 32;
          }
          *((void *)this + 4) = v73;
          unint64_t v74 = v73 + 8;
          unint64_t v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
          unint64_t v76 = (char *)v75 + v74;
          void *v75 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v76;
          *((void *)this + 3) = v75;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 97;
        goto LABEL_293;
      case 'Q':
        int v77 = *((_DWORD *)this + 24);
        if (!v77) {
          return 0;
        }
        unsigned int v78 = v77 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v78);
        *((_DWORD *)this + 24) = v78;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2 * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unsigned int v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          unint64_t v82 = (char *)v81 + v80;
          *unsigned int v81 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v82;
          *((void *)this + 3) = v81;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 302;
        goto LABEL_293;
      case 'S':
        unint64_t v83 = swift::Demangle::__runtime::Demangler::popProtocol(this);
        if (!v83) {
          return 0;
        }
        int v5 = (swift::Demangle::__runtime::Node *)v83;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v84 = 2 * *((void *)this + 4);
          if (v84 <= 0x20) {
            unint64_t v84 = 32;
          }
          *((void *)this + 4) = v84;
          unint64_t v85 = v84 + 8;
          unint64_t v86 = malloc_type_malloc(v84 + 8, 0xD0263BC5uLL);
          unint64_t v87 = (char *)v86 + v85;
          *unint64_t v86 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v87;
          *((void *)this + 3) = v86;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 193;
        goto LABEL_293;
      case 'U':
        int v88 = *((_DWORD *)this + 24);
        if (!v88) {
          return 0;
        }
        unsigned int v89 = v88 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v89);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v89;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v90 = 2 * *((void *)this + 4);
          if (v90 <= 0x20) {
            unint64_t v90 = 32;
          }
          *((void *)this + 4) = v90;
          unint64_t v91 = v90 + 8;
          unint64_t v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          unint64_t v93 = (char *)v92 + v91;
          void *v92 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v93;
          *((void *)this + 3) = v92;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 149;
        goto LABEL_293;
      case 'V':
        int v94 = *((_DWORD *)this + 24);
        if (!v94) {
          return 0;
        }
        int v95 = v94 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v94 - 1));
        if (*((_WORD *)v5 + 8) != 232 && !swift::Demangle::__runtime::isContext()) {
          return 0;
        }
        *((_DWORD *)this + 24) = v95;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v96 = 2 * *((void *)this + 4);
          if (v96 <= 0x20) {
            unint64_t v96 = 32;
          }
          *((void *)this + 4) = v96;
          unint64_t v97 = v96 + 8;
          unint64_t v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          unint64_t v99 = (char *)v98 + v97;
          *unint64_t v98 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v99;
          *((void *)this + 3) = v98;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 177;
        goto LABEL_293;
      case 'X':
        return swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(this);
      case 'a':
        int v101 = *((_DWORD *)this + 24);
        if (!v101) {
          return 0;
        }
        unsigned int v102 = v101 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v102);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v102;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v103 = 2 * *((void *)this + 4);
          if (v103 <= 0x20) {
            unint64_t v103 = 32;
          }
          *((void *)this + 4) = v103;
          unint64_t v104 = v103 + 8;
          unint64_t v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
          unint64_t v106 = (char *)v105 + v104;
          *unint64_t v105 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v106;
          *((void *)this + 3) = v105;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 238;
        goto LABEL_293;
      case 'b':
        int v107 = *((_DWORD *)this + 24);
        if (!v107) {
          return 0;
        }
        unsigned int v108 = v107 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v108);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v108;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v109 = 2 * *((void *)this + 4);
          if (v109 <= 0x20) {
            unint64_t v109 = 32;
          }
          *((void *)this + 4) = v109;
          unint64_t v110 = v109 + 8;
          unint64_t v111 = malloc_type_malloc(v109 + 8, 0xD0263BC5uLL);
          uint64_t v112 = (char *)v111 + v110;
          void *v111 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v112;
          *((void *)this + 3) = v111;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 311;
        goto LABEL_293;
      case 'c':
        unint64_t v113 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
        if (!v113) {
          return 0;
        }
        int v5 = v113;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v114 = 2 * *((void *)this + 4);
          if (v114 <= 0x20) {
            unint64_t v114 = 32;
          }
          *((void *)this + 4) = v114;
          unint64_t v115 = v114 + 8;
          unint64_t v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
          int v117 = (char *)v116 + v115;
          *unint64_t v116 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v117;
          *((void *)this + 3) = v116;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 188;
        goto LABEL_293;
      case 'f':
        int v118 = *((_DWORD *)this + 24);
        if (!v118) {
          return 0;
        }
        unsigned int v119 = v118 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v119);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v119;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v120 = 2 * *((void *)this + 4);
          if (v120 <= 0x20) {
            unint64_t v120 = 32;
          }
          *((void *)this + 4) = v120;
          unint64_t v121 = v120 + 8;
          unsigned int v122 = malloc_type_malloc(v120 + 8, 0xD0263BC5uLL);
          int v123 = (char *)v122 + v121;
          *unsigned int v122 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v123;
          *((void *)this + 3) = v122;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 75;
        goto LABEL_293;
      case 'g':
        int v124 = *((_DWORD *)this + 24);
        if (!v124) {
          return 0;
        }
        unsigned int v125 = v124 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v125);
        *((_DWORD *)this + 24) = v125;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v126 = 2 * *((void *)this + 4);
          if (v126 <= 0x20) {
            unint64_t v126 = 32;
          }
          *((void *)this + 4) = v126;
          unint64_t v127 = v126 + 8;
          unint64_t v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
          unint64_t v129 = (char *)v128 + v127;
          *unint64_t v128 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v129;
          *((void *)this + 3) = v128;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 304;
        goto LABEL_293;
      case 'h':
        int v130 = *((_DWORD *)this + 24);
        if (!v130) {
          return 0;
        }
        unsigned int v131 = v130 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v131);
        *((_DWORD *)this + 24) = v131;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v132 = 2 * *((void *)this + 4);
          if (v132 <= 0x20) {
            unint64_t v132 = 32;
          }
          *((void *)this + 4) = v132;
          unint64_t v133 = v132 + 8;
          int v134 = malloc_type_malloc(v132 + 8, 0xD0263BC5uLL);
          unint64_t v135 = (char *)v134 + v133;
          void *v134 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v134 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v135;
          *((void *)this + 3) = v134;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 305;
        goto LABEL_293;
      case 'i':
        int v136 = *((_DWORD *)this + 24);
        if (!v136) {
          return 0;
        }
        unsigned int v137 = v136 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v137);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v137;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v138 = 2 * *((void *)this + 4);
          if (v138 <= 0x20) {
            unint64_t v138 = 32;
          }
          *((void *)this + 4) = v138;
          unint64_t v139 = v138 + 8;
          __int16 v140 = malloc_type_malloc(v138 + 8, 0xD0263BC5uLL);
          unsigned int v141 = (char *)v140 + v139;
          *__int16 v140 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v141;
          *((void *)this + 3) = v140;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 241;
        goto LABEL_293;
      case 'j':
        int v142 = *((_DWORD *)this + 24);
        if (!v142) {
          return 0;
        }
        unsigned int v143 = v142 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v143);
        *((_DWORD *)this + 24) = v143;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v144 = 2 * *((void *)this + 4);
          if (v144 <= 0x20) {
            unint64_t v144 = 32;
          }
          *((void *)this + 4) = v144;
          unint64_t v145 = v144 + 8;
          long long v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
          long long v147 = (char *)v146 + v145;
          void *v146 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v147;
          *((void *)this + 3) = v146;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 306;
        goto LABEL_293;
      case 'k':
        int v148 = *((_DWORD *)this + 24);
        if (!v148) {
          return 0;
        }
        unsigned int v149 = v148 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v149);
        *((_DWORD *)this + 24) = v149;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v150 = 2 * *((void *)this + 4);
          if (v150 <= 0x20) {
            unint64_t v150 = 32;
          }
          *((void *)this + 4) = v150;
          unint64_t v151 = v150 + 8;
          long long v152 = malloc_type_malloc(v150 + 8, 0xD0263BC5uLL);
          long long v153 = (char *)v152 + v151;
          *long long v152 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v153;
          *((void *)this + 3) = v152;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 307;
        goto LABEL_293;
      case 'l':
        int v154 = *((_DWORD *)this + 24);
        if (!v154) {
          return 0;
        }
        unsigned int v155 = v154 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v155);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v155;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v156 = 2 * *((void *)this + 4);
          if (v156 <= 0x20) {
            unint64_t v156 = 32;
          }
          *((void *)this + 4) = v156;
          unint64_t v157 = v156 + 8;
          long long v158 = malloc_type_malloc(v156 + 8, 0xD0263BC5uLL);
          long long v159 = (char *)v158 + v157;
          *long long v158 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v159;
          *((void *)this + 3) = v158;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 242;
        goto LABEL_293;
      case 'm':
        int v160 = *((_DWORD *)this + 24);
        if (!v160) {
          return 0;
        }
        unsigned int v161 = v160 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v161);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v161;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v162 = 2 * *((void *)this + 4);
          if (v162 <= 0x20) {
            unint64_t v162 = 32;
          }
          *((void *)this + 4) = v162;
          unint64_t v163 = v162 + 8;
          unint64_t v164 = malloc_type_malloc(v162 + 8, 0xD0263BC5uLL);
          unint64_t v165 = (char *)v164 + v163;
          void *v164 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v165;
          *((void *)this + 3) = v164;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 147;
        goto LABEL_293;
      case 'n':
        int v166 = *((_DWORD *)this + 24);
        if (!v166) {
          return 0;
        }
        unsigned int v167 = v166 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v167);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v167;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v168 = 2 * *((void *)this + 4);
          if (v168 <= 0x20) {
            unint64_t v168 = 32;
          }
          *((void *)this + 4) = v168;
          unint64_t v169 = v168 + 8;
          uint64_t v170 = malloc_type_malloc(v168 + 8, 0xD0263BC5uLL);
          uint64_t v171 = (char *)v170 + v169;
          *uint64_t v170 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v171;
          *((void *)this + 3) = v170;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 158;
        goto LABEL_293;
      case 'o':
        int v172 = *((_DWORD *)this + 24);
        if (!v172) {
          return 0;
        }
        unsigned int v173 = v172 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v173);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v173;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v174 = 2 * *((void *)this + 4);
          if (v174 <= 0x20) {
            unint64_t v174 = 32;
          }
          *((void *)this + 4) = v174;
          unint64_t v175 = v174 + 8;
          long long v176 = malloc_type_malloc(v174 + 8, 0xD0263BC5uLL);
          long long v177 = (char *)v176 + v175;
          *long long v176 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v177;
          *((void *)this + 3) = v176;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 25;
        goto LABEL_293;
      case 'p':
        unint64_t v178 = swift::Demangle::__runtime::Demangler::popProtocol(this);
        if (!v178) {
          return 0;
        }
        int v5 = (swift::Demangle::__runtime::Node *)v178;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v179 = 2 * *((void *)this + 4);
          if (v179 <= 0x20) {
            unint64_t v179 = 32;
          }
          *((void *)this + 4) = v179;
          unint64_t v180 = v179 + 8;
          long long v181 = malloc_type_malloc(v179 + 8, 0xD0263BC5uLL);
          long long v182 = (char *)v181 + v180;
          *long long v181 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v182;
          *((void *)this + 3) = v181;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 186;
        goto LABEL_293;
      case 'q':
        int v183 = *((_DWORD *)this + 24);
        if (!v183) {
          return 0;
        }
        unsigned int v184 = v183 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v184);
        *((_DWORD *)this + 24) = v184;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v185 = 2 * *((void *)this + 4);
          if (v185 <= 0x20) {
            unint64_t v185 = 32;
          }
          *((void *)this + 4) = v185;
          unint64_t v186 = v185 + 8;
          long long v187 = malloc_type_malloc(v185 + 8, 0xD0263BC5uLL);
          long long v188 = (char *)v187 + v186;
          void *v187 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v187 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v188;
          *((void *)this + 3) = v187;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 335;
        goto LABEL_293;
      case 'r':
        int v189 = *((_DWORD *)this + 24);
        if (!v189) {
          return 0;
        }
        unsigned int v190 = v189 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v190);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v190;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v191 = 2 * *((void *)this + 4);
          if (v191 <= 0x20) {
            unint64_t v191 = 32;
          }
          *((void *)this + 4) = v191;
          unint64_t v192 = v191 + 8;
          long long v193 = malloc_type_malloc(v191 + 8, 0xD0263BC5uLL);
          long long v194 = (char *)v193 + v192;
          void *v193 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v194;
          *((void *)this + 3) = v193;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 239;
        goto LABEL_293;
      case 's':
        int v195 = *((_DWORD *)this + 24);
        if (!v195) {
          return 0;
        }
        unsigned int v196 = v195 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v196);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v196;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v197 = 2 * *((void *)this + 4);
          if (v197 <= 0x20) {
            unint64_t v197 = 32;
          }
          *((void *)this + 4) = v197;
          unint64_t v198 = v197 + 8;
          long long v199 = malloc_type_malloc(v197 + 8, 0xD0263BC5uLL);
          long long v200 = (char *)v199 + v198;
          void *v199 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v200;
          *((void *)this + 3) = v199;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 150;
        goto LABEL_293;
      case 't':
        int v201 = *((_DWORD *)this + 24);
        if (!v201) {
          return 0;
        }
        unsigned int v202 = v201 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v202);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v202;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v203 = 2 * *((void *)this + 4);
          if (v203 <= 0x20) {
            unint64_t v203 = 32;
          }
          *((void *)this + 4) = v203;
          unint64_t v204 = v203 + 8;
          uint64_t v205 = malloc_type_malloc(v203 + 8, 0xD0263BC5uLL);
          long long v206 = (char *)v205 + v204;
          *uint64_t v205 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v206;
          *((void *)this + 3) = v205;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 151;
        goto LABEL_293;
      case 'u':
        int v207 = *((_DWORD *)this + 24);
        if (!v207) {
          return 0;
        }
        unsigned int v208 = v207 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v208);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v208;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v209 = 2 * *((void *)this + 4);
          if (v209 <= 0x20) {
            unint64_t v209 = 32;
          }
          *((void *)this + 4) = v209;
          unint64_t v210 = v209 + 8;
          long long v211 = malloc_type_malloc(v209 + 8, 0xD0263BC5uLL);
          long long v212 = (char *)v211 + v210;
          *long long v211 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v212;
          *((void *)this + 3) = v211;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 148;
        goto LABEL_293;
      case 'z':
        int v213 = *((_DWORD *)this + 24);
        if (!v213) {
          return 0;
        }
        unsigned int v214 = v213 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v214);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v214;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v215 = 2 * *((void *)this + 4);
          if (v215 <= 0x20) {
            unint64_t v215 = 32;
          }
          *((void *)this + 4) = v215;
          unint64_t v216 = v215 + 8;
          uint64_t v217 = malloc_type_malloc(v215 + 8, 0xD0263BC5uLL);
          long long v218 = (char *)v217 + v216;
          *uint64_t v217 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v218;
          *((void *)this + 3) = v217;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 318;
LABEL_293:
        *(_WORD *)(v3 + 16) = v10;
        *(unsigned char *)(v3 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v5, this);
        return v3;
      default:
        return v3;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleArchetype(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t Type = 0;
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'O':
      unint64_t v7 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v7) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v7;
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
        unint64_t v9 = 2 * *((void *)v3 + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)v3 + 4) = v9;
        unint64_t v10 = v9 + 8;
        int v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        void *v11 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v11 + v10;
        *((void *)v3 + 3) = v11;
      }
      *((void *)v3 + 1) = Type + 24;
      __int16 v12 = 309;
      goto LABEL_71;
    case 'P':
      return swift::Demangle::__runtime::Demangler::popPack(this);
    case 'R':
      if (v5 >= v1) {
        return 0;
      }
      int v14 = *(unsigned __int8 *)(v6 + v5);
      if (v14 == 95)
      {
        uint64_t v15 = 0;
        *((void *)this + 9) = v2 + 2;
      }
      else
      {
        if ((v14 - 48) > 9) {
          return 0;
        }
        int v79 = 0;
        while (1)
        {
          int v80 = *(unsigned __int8 *)(v6 + v5);
          if ((v80 - 48) > 9) {
            break;
          }
          int v81 = v80 + 10 * v79 - 48;
          if (v81 < v79) {
            return 0;
          }
          unint64_t Type = 0;
          *((void *)this + 9) = ++v5;
          int v79 = v81;
          if (v1 == v5) {
            return Type;
          }
        }
        unint64_t Type = 0;
        if (v79 < 0 || v5 >= v1 || v80 != 95) {
          return Type;
        }
        *((void *)this + 9) = v5 + 1;
        uint64_t v15 = (v79 + 1);
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        *unint64_t v19 = *((void *)v3 + 3);
        unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v19 + v18;
        *((void *)v3 + 3) = v19;
      }
      *((void *)v3 + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 341;
      *(unsigned char *)(v16 + 18) = 4;
      *(void *)unint64_t v16 = v15;
      unint64_t v8 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)v3 + 2))
      {
        unint64_t v20 = 2 * *((void *)v3 + 4);
        if (v20 <= 0x20) {
          unint64_t v20 = 32;
        }
        *((void *)v3 + 4) = v20;
        unint64_t v21 = v20 + 8;
        unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        void *v22 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v22 + v21;
        *((void *)v3 + 3) = v22;
      }
      *((void *)v3 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 308;
      *(unsigned char *)(v8 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, (swift::Demangle::__runtime::Node *)v16, v3);
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
LABEL_67:
        unint64_t v47 = 2 * *((void *)v3 + 4);
        if (v47 <= 0x20) {
          unint64_t v47 = 32;
        }
        *((void *)v3 + 4) = v47;
        unint64_t v48 = v47 + 8;
        unint64_t v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
        *unint64_t v49 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v49 + v48;
        *((void *)v3 + 3) = v49;
      }
LABEL_70:
      *((void *)v3 + 1) = Type + 24;
      __int16 v12 = 232;
LABEL_71:
      *(_WORD *)(Type + 16) = v12;
      *(unsigned char *)(Type + 18) = 0;
      unint64_t v50 = (swift::Demangle::__runtime::Node *)Type;
      unint64_t v51 = (swift::Demangle::__runtime::Node *)v8;
      goto LABEL_72;
    case 'S':
      return swift::Demangle::__runtime::Demangler::popSILPack(this);
    case 'X':
      int v23 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(this, 0);
      goto LABEL_78;
    case 'Y':
      unint64_t DependentGenericParamType = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
      goto LABEL_35;
    case 'Z':
      unint64_t DependentGenericParamType = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0);
LABEL_35:
      int v23 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(v3, DependentGenericParamType);
      goto LABEL_78;
    case 'a':
      int v25 = *((_DWORD *)this + 24);
      if (!v25) {
        return 0;
      }
      int v26 = v25 - 1;
      uint64_t v27 = *((void *)this + 11);
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * (v25 - 1));
      if (*((_WORD *)v28 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v26;
        if (v25 == 1) {
          return 0;
        }
      }
      else
      {
        unint64_t v28 = 0;
        int v26 = *((_DWORD *)this + 24);
      }
      unsigned int v68 = v26 - 1;
      unint64_t v69 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * v68);
      if (*((_WORD *)v69 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v68;
      int v70 = *((unsigned __int8 *)v69 + 18);
      if (v70 == 1) {
        goto LABEL_103;
      }
      if (v70 != 5 || *((_DWORD *)v69 + 2) != 1) {
        return 0;
      }
      unint64_t v69 = *(swift::Demangle::__runtime::Node **)v69;
LABEL_103:
      if (!v28) {
        return 0;
      }
      int v71 = *(swift::Demangle::__runtime::Node **)v69;
      if (!*(void *)v69) {
        return 0;
      }
      unint64_t v72 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v72;
      if (!v72 || v72 + 24 > *((void *)this + 2))
      {
        unint64_t v73 = 2 * *((void *)this + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32;
        }
        *((void *)this + 4) = v73;
        unint64_t v74 = v73 + 8;
        unint64_t v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        void *v75 = *((void *)v3 + 3);
        unint64_t v72 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v75 + v74;
        *((void *)v3 + 3) = v75;
      }
      *((void *)v3 + 1) = v72 + 24;
      *(_WORD *)(v72 + 16) = 5;
      *(unsigned char *)(v72 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v72, v71, v3);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v72, v28, v3);
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
        unint64_t v76 = 2 * *((void *)v3 + 4);
        if (v76 <= 0x20) {
          unint64_t v76 = 32;
        }
        *((void *)v3 + 4) = v76;
        unint64_t v77 = v76 + 8;
        unsigned int v78 = malloc_type_malloc(v76 + 8, 0xD0263BC5uLL);
        void *v78 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v78 + v77;
        *((void *)v3 + 3) = v78;
      }
      *((void *)v3 + 1) = Type + 24;
      *(_WORD *)(Type + 16) = 232;
      *(unsigned char *)(Type + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Type, (swift::Demangle::__runtime::Node *)v72, v3);
      unint64_t v106 = (swift::Demangle::__runtime::Node **)Type;
LABEL_79:
      unsigned int v54 = (const void **)((char *)v3 + 104);
      unint64_t v55 = (uint64_t *)&v106;
      goto LABEL_80;
    case 'e':
      int v29 = *((_DWORD *)this + 24);
      if (!v29) {
        goto LABEL_81;
      }
      int v30 = v29 - 1;
      unint64_t v31 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v29 - 1));
      if (*((_WORD *)v31 + 8) != 232) {
        goto LABEL_81;
      }
      *((_DWORD *)this + 24) = v30;
      int v32 = *((unsigned __int8 *)v31 + 18);
      if (v32 == 1) {
        goto LABEL_46;
      }
      if (v32 == 5 && *((_DWORD *)v31 + 2) == 1)
      {
        unint64_t v31 = *(swift::Demangle::__runtime::Node **)v31;
LABEL_46:
        unsigned int v33 = *(swift::Demangle::__runtime::Node **)v31;
      }
      else
      {
LABEL_81:
        unsigned int v33 = 0;
      }
      if (v5 >= v1) {
        return 0;
      }
      int v56 = *(unsigned __int8 *)(v6 + v5);
      if (v56 == 95)
      {
        uint64_t v57 = 0;
        *((void *)this + 9) = v2 + 2;
      }
      else
      {
        if ((v56 - 48) > 9) {
          return 0;
        }
        int v92 = 0;
        while (1)
        {
          int v93 = *(unsigned __int8 *)(v6 + v5);
          if ((v93 - 48) > 9) {
            break;
          }
          int v94 = v93 + 10 * v92 - 48;
          if (v94 < v92) {
            return 0;
          }
          unint64_t Type = 0;
          *((void *)this + 9) = ++v5;
          int v92 = v94;
          if (v1 == v5) {
            return Type;
          }
        }
        unint64_t Type = 0;
        if (v92 < 0 || v5 >= v1 || v93 != 95) {
          return Type;
        }
        *((void *)this + 9) = v5 + 1;
        uint64_t v57 = (v92 + 1);
      }
      unint64_t v58 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v58;
      if (!v58 || v58 + 24 > *((void *)this + 2))
      {
        unint64_t v59 = 2 * *((void *)this + 4);
        if (v59 <= 0x20) {
          unint64_t v59 = 32;
        }
        *((void *)this + 4) = v59;
        unint64_t v60 = v59 + 8;
        unint64_t v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
        *unint64_t v61 = *((void *)v3 + 3);
        unint64_t v58 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v61 + v60;
        *((void *)v3 + 3) = v61;
      }
      *((void *)v3 + 1) = v58 + 24;
      *(_WORD *)(v58 + 16) = 231;
      *(unsigned char *)(v58 + 18) = 4;
      *(void *)unint64_t v58 = v57;
      if (v33)
      {
        unint64_t v62 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 1) = v62;
        if (!v62 || v62 + 24 > *((void *)v3 + 2))
        {
          unint64_t v63 = 2 * *((void *)v3 + 4);
          if (v63 <= 0x20) {
            unint64_t v63 = 32;
          }
          *((void *)v3 + 4) = v63;
          unint64_t v64 = v63 + 8;
          int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
          *int v65 = *((void *)v3 + 3);
          unint64_t v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 2) = (char *)v65 + v64;
          *((void *)v3 + 3) = v65;
        }
        *((void *)v3 + 1) = v62 + 24;
        *(_WORD *)(v62 + 16) = 230;
        *(unsigned char *)(v62 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v62, v33, v3);
        unsigned int v66 = (swift::Demangle::__runtime::Node *)v62;
        unint64_t v67 = (swift::Demangle::__runtime::Node *)v58;
        goto LABEL_160;
      }
      return 0;
    case 'o':
      if (v5 >= v1) {
        goto LABEL_128;
      }
      int v34 = *(unsigned __int8 *)(v6 + v5);
      if (v34 == 95)
      {
        uint64_t v35 = 0;
        *((void *)this + 9) = v2 + 2;
        goto LABEL_129;
      }
      if ((v34 - 48) > 9) {
        goto LABEL_128;
      }
      int v82 = 0;
      break;
    case 'p':
      int v36 = *((_DWORD *)this + 24);
      if (!v36) {
        return 0;
      }
      int v37 = v36 - 1;
      uint64_t v38 = *((void *)this + 11);
      unint64_t v39 = *(swift::Demangle::__runtime::Node **)(v38 + 8 * (v36 - 1));
      if (*((_WORD *)v39 + 8) != 232)
      {
        int v41 = 0;
        int v37 = *((_DWORD *)this + 24);
        goto LABEL_147;
      }
      *((_DWORD *)this + 24) = v37;
      int v40 = *((unsigned __int8 *)v39 + 18);
      if (v40 == 1) {
        goto LABEL_56;
      }
      if (v40 == 5 && *((_DWORD *)v39 + 2) == 1)
      {
        unint64_t v39 = *(swift::Demangle::__runtime::Node **)v39;
LABEL_56:
        int v41 = *(swift::Demangle::__runtime::Node **)v39;
      }
      else
      {
        int v41 = 0;
      }
      if (!v37) {
        return 0;
      }
LABEL_147:
      unsigned int v95 = v37 - 1;
      unint64_t v96 = *(swift::Demangle::__runtime::Node **)(v38 + 8 * v95);
      if (*((_WORD *)v96 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v95;
      int v97 = *((unsigned __int8 *)v96 + 18);
      if (v97 == 1) {
        goto LABEL_152;
      }
      if (v97 != 5 || *((_DWORD *)v96 + 2) != 1) {
        return 0;
      }
      unint64_t v96 = *(swift::Demangle::__runtime::Node **)v96;
LABEL_152:
      unint64_t Type = 0;
      if (v41)
      {
        unint64_t v98 = *(swift::Demangle::__runtime::Node **)v96;
        if (*(void *)v96)
        {
          unint64_t v62 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v62;
          if (!v62 || v62 + 24 > *((void *)this + 2))
          {
            unint64_t v99 = 2 * *((void *)this + 4);
            if (v99 <= 0x20) {
              unint64_t v99 = 32;
            }
            *((void *)this + 4) = v99;
            unint64_t v100 = v99 + 8;
            int v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
            *int v101 = *((void *)v3 + 3);
            unint64_t v62 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)v3 + 2) = (char *)v101 + v100;
            *((void *)v3 + 3) = v101;
          }
          *((void *)v3 + 1) = v62 + 24;
          *(_WORD *)(v62 + 16) = 229;
          *(unsigned char *)(v62 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v62, v98, v3);
          unsigned int v66 = (swift::Demangle::__runtime::Node *)v62;
          unint64_t v67 = v41;
LABEL_160:
          swift::Demangle::__runtime::Node::addChild(v66, v67, v3);
          unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 1) = Type;
          if (!Type || Type + 24 > *((void *)v3 + 2))
          {
            unint64_t v102 = 2 * *((void *)v3 + 4);
            if (v102 <= 0x20) {
              unint64_t v102 = 32;
            }
            *((void *)v3 + 4) = v102;
            unint64_t v103 = v102 + 8;
            unint64_t v104 = malloc_type_malloc(v102 + 8, 0xD0263BC5uLL);
            *unint64_t v104 = *((void *)v3 + 3);
            unint64_t Type = ((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)v3 + 2) = (char *)v104 + v103;
            *((void *)v3 + 3) = v104;
          }
          *((void *)v3 + 1) = Type + 24;
          *(_WORD *)(Type + 16) = 232;
          *(unsigned char *)(Type + 18) = 0;
          unint64_t v50 = (swift::Demangle::__runtime::Node *)Type;
          unint64_t v51 = (swift::Demangle::__runtime::Node *)v62;
LABEL_72:
          swift::Demangle::__runtime::Node::addChild(v50, v51, v3);
        }
      }
      return Type;
    case 'r':
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || (unint64_t v42 = *((void *)this + 2), v8 + 24 > v42))
      {
        unint64_t v43 = 2 * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        *unint64_t v45 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v42 = (unint64_t)v45 + v44;
        *((void *)v3 + 2) = (char *)v45 + v44;
        *((void *)v3 + 3) = v45;
      }
      *(_WORD *)(v8 + 16) = 308;
      *(unsigned char *)(v8 + 18) = 0;
      unint64_t Type = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (Type) {
        BOOL v46 = Type + 24 > v42;
      }
      else {
        BOOL v46 = 1;
      }
      if (!v46) {
        goto LABEL_70;
      }
      goto LABEL_67;
    case 'x':
      unint64_t v52 = 0;
      goto LABEL_77;
    case 'y':
      unint64_t v53 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
      goto LABEL_76;
    case 'z':
      unint64_t v53 = swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0);
LABEL_76:
      unint64_t v52 = (swift::Demangle::__runtime::Node *)v53;
      this = v3;
LABEL_77:
      int v23 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(this, v52);
LABEL_78:
      unint64_t Type = (unint64_t)v23;
      unint64_t v106 = v23;
      if (v23) {
        goto LABEL_79;
      }
      return Type;
    default:
      return Type;
  }
  while (1)
  {
    int v83 = *(unsigned __int8 *)(v6 + v5);
    if ((v83 - 48) > 9) {
      break;
    }
    int v84 = v83 + 10 * v82 - 48;
    if (v84 >= v82)
    {
      *((void *)this + 9) = ++v5;
      int v82 = v84;
      if (v1 != v5) {
        continue;
      }
    }
LABEL_128:
    uint64_t v35 = -1000;
    goto LABEL_129;
  }
  uint64_t v35 = -1000;
  if ((v82 & 0x80000000) == 0 && v5 < v1 && v83 == 95)
  {
    *((void *)this + 9) = v5 + 1;
    uint64_t v35 = (v82 + 1);
  }
LABEL_129:
  unint64_t v106 = 0;
  uint64_t v107 = 0;
  unint64_t v105 = 0;
  unint64_t Type = 0;
  if (swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v106, (unint64_t *)&v105))
  {
    int v85 = *((_DWORD *)v3 + 24);
    if (v85)
    {
      unsigned int v86 = v85 - 1;
      unint64_t Type = *(void *)(*((void *)v3 + 11) + 8 * v86);
      *((_DWORD *)v3 + 24) = v86;
      if (Type)
      {
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 102, v35);
        int v88 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v3, 300, (swift::Demangle::__runtime::Node *)Type, Node);
        unsigned int v89 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 235);
        if (v107)
        {
          unsigned int v90 = v107 - 1;
          do
          {
            uint64_t v91 = v90;
            swift::Demangle::__runtime::Node::addChild(v89, v106[v90--], v3);
          }
          while (v91);
        }
        swift::Demangle::__runtime::Node::addChild(v88, v89, v3);
        if (v105) {
          swift::Demangle::__runtime::Node::addChild(v88, v105, v3);
        }
        unint64_t Type = swift::Demangle::__runtime::Demangler::createType(v3, v88);
        unint64_t v108 = Type;
        if (Type)
        {
          unsigned int v54 = (const void **)((char *)v3 + 104);
          unint64_t v55 = (uint64_t *)&v108;
LABEL_80:
          swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v54, v55, v3);
        }
      }
      return Type;
    }
    return 0;
  }
  return Type;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericRequirement(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    unint64_t v3 = *((void *)this + 9);
LABEL_6:
    int v6 = 0;
    unsigned int v4 = 0;
    *((void *)this + 9) = v3 - 1;
LABEL_7:
    uint64_t v8 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
    if (v8)
    {
      unint64_t v9 = (swift::Demangle::__runtime::Node *)v8;
      unint64_t v10 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v10;
      if (!v10 || v10 + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2 * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *unint64_t v13 = *((void *)this + 3);
        unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }
      *((void *)this + 1) = v10 + 24;
      *(_WORD *)(v10 + 16) = 232;
      *(unsigned char *)(v10 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v9, this);
    }
    else
    {
      unint64_t v10 = 0;
    }
LABEL_40:
    switch(v6)
    {
      case 0:
        unint64_t v20 = swift::Demangle::__runtime::Demangler::popProtocol(this);
        unint64_t v21 = 0;
        if (!v10) {
          return v21;
        }
        unsigned int v4 = (swift::Demangle::__runtime::Node *)v20;
        if (!v20) {
          return v21;
        }
        goto LABEL_47;
      case 1:
        int v22 = *((_DWORD *)this + 24);
        if (!v22) {
          goto LABEL_122;
        }
        unsigned int v23 = v22 - 1;
        unsigned int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v23);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v23;
        if (!v10) {
          goto LABEL_122;
        }
LABEL_47:
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v24 = 2 * *((void *)this + 4);
          if (v24 <= 0x20) {
            unint64_t v24 = 32;
          }
          *((void *)this + 4) = v24;
          unint64_t v25 = v24 + 8;
          int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          void *v26 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v26 + v25;
          *((void *)this + 3) = v26;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 36;
        goto LABEL_89;
      case 2:
        int v28 = *((_DWORD *)this + 24);
        if (!v28) {
          goto LABEL_122;
        }
        unsigned int v29 = v28 - 1;
        unsigned int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v29);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v29;
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v30 = 2 * *((void *)this + 4);
          if (v30 <= 0x20) {
            unint64_t v30 = 32;
          }
          *((void *)this + 4) = v30;
          unint64_t v31 = v30 + 8;
          int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
          *int v32 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v32 + v31;
          *((void *)this + 3) = v32;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 39;
        goto LABEL_89;
      case 3:
        int v33 = *((_DWORD *)this + 24);
        if (!v33) {
          goto LABEL_122;
        }
        unsigned int v34 = v33 - 1;
        unsigned int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v34);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v34;
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v35 = 2 * *((void *)this + 4);
          if (v35 <= 0x20) {
            unint64_t v35 = 32;
          }
          *((void *)this + 4) = v35;
          unint64_t v36 = v35 + 8;
          int v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
          void *v37 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v37 + v36;
          *((void *)this + 3) = v37;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 40;
        goto LABEL_89;
      case 4:
        unint64_t v38 = *((void *)this + 9);
        if (v38 >= *((void *)this + 8)) {
          goto LABEL_122;
        }
        unint64_t v21 = 0;
        *((void *)this + 9) = v38 + 1;
        unint64_t v39 = "U";
        int v40 = 0;
        switch(*(unsigned char *)(*((void *)this + 7) + v38))
        {
          case 'B':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "B";
            goto LABEL_106;
          case 'C':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "C";
            goto LABEL_106;
          case 'D':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "D";
            goto LABEL_106;
          case 'E':
            unint64_t v21 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            if (!v21) {
              return v21;
            }
            int v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            unint64_t v39 = "E";
            goto LABEL_106;
          case 'M':
            unint64_t v21 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            if (!v21) {
              return v21;
            }
            int v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            unint64_t v39 = "M";
            goto LABEL_106;
          case 'N':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "N";
            goto LABEL_106;
          case 'R':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "R";
            goto LABEL_106;
          case 'S':
            unint64_t v49 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v49) {
              return 0;
            }
            unint64_t v21 = v49;
            unint64_t v39 = "S";
            goto LABEL_106;
          case 'T':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "T";
            goto LABEL_106;
          case 'U':
            goto LABEL_106;
          case 'e':
            unint64_t v50 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v50) {
              return 0;
            }
            unint64_t v21 = v50;
            unint64_t v39 = "e";
            goto LABEL_106;
          case 'm':
            unint64_t v51 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v51) {
              return 0;
            }
            unint64_t v21 = v51;
            unint64_t v39 = "m";
LABEL_106:
            unint64_t v52 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v52;
            if (!v52 || v52 + 24 > *((void *)this + 2))
            {
              unint64_t v53 = 2 * *((void *)this + 4);
              if (v53 <= 0x20) {
                unint64_t v53 = 32;
              }
              *((void *)this + 4) = v53;
              unint64_t v54 = v53 + 8;
              unint64_t v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
              *unint64_t v55 = *((void *)this + 3);
              unint64_t v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v55 + v54;
              *((void *)this + 3) = v55;
            }
            *((void *)this + 1) = v52 + 24;
            *(_WORD *)(v52 + 16) = 101;
            *(unsigned char *)(v52 + 18) = 3;
            *(void *)unint64_t v52 = v39;
            *(void *)(v52 + 8) = 1;
            if (!v10) {
              goto LABEL_122;
            }
            unint64_t v56 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v56;
            if (!v56 || v56 + 24 > *((void *)this + 2))
            {
              unint64_t v57 = 2 * *((void *)this + 4);
              if (v57 <= 0x20) {
                unint64_t v57 = 32;
              }
              *((void *)this + 4) = v57;
              unint64_t v58 = v57 + 8;
              unint64_t v59 = malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              *unint64_t v59 = *((void *)this + 3);
              unint64_t v56 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v59 + v58;
              *((void *)this + 3) = v59;
            }
            *((void *)this + 1) = v56 + 24;
            *(_WORD *)(v56 + 16) = 41;
            *(unsigned char *)(v56 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, (swift::Demangle::__runtime::Node *)v10, this);
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, (swift::Demangle::__runtime::Node *)v52, this);
            if (v21) {
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, (swift::Demangle::__runtime::Node *)v21, this);
            }
            if (v40) {
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, v40, this);
            }
            unint64_t v21 = v56;
            break;
          default:
            return v21;
        }
        return v21;
      case 5:
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v41 = 2 * *((void *)this + 4);
          if (v41 <= 0x20) {
            unint64_t v41 = 32;
          }
          *((void *)this + 4) = v41;
          unint64_t v42 = v41 + 8;
          unint64_t v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
          *unint64_t v43 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v43 + v42;
          *((void *)this + 3) = v43;
        }
        *((void *)this + 1) = v21 + 24;
        *(_WORD *)(v21 + 16) = 42;
        *(unsigned char *)(v21 + 18) = 0;
        unint64_t v44 = (swift::Demangle::__runtime::Node *)v21;
        unint64_t v45 = (swift::Demangle::__runtime::Node *)v10;
        goto LABEL_90;
      case 6:
        unint64_t v21 = 0;
        if (!v4 || !v10) {
          return v21;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v46 = 2 * *((void *)this + 4);
          if (v46 <= 0x20) {
            unint64_t v46 = 32;
          }
          *((void *)this + 4) = v46;
          unint64_t v47 = v46 + 8;
          unint64_t v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
          *unint64_t v48 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v48 + v47;
          *((void *)this + 3) = v48;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 354;
LABEL_89:
        *(_WORD *)(v21 + 16) = v27;
        *(unsigned char *)(v21 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v21, (swift::Demangle::__runtime::Node *)v10, this);
        unint64_t v44 = (swift::Demangle::__runtime::Node *)v21;
        unint64_t v45 = v4;
LABEL_90:
        swift::Demangle::__runtime::Node::addChild(v44, v45, this);
        break;
      default:
        goto LABEL_122;
    }
  }
  else
  {
    unint64_t v3 = v2 + 1;
    *((void *)this + 9) = v2 + 1;
    unsigned int v4 = 0;
    int v5 = 1;
    int v6 = 5;
    switch(*(unsigned char *)(*((void *)this + 7) + v2))
    {
      case 'B':
        goto LABEL_20;
      case 'C':
        goto LABEL_25;
      case 'I':
        unint64_t v7 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        if (!v7) {
          goto LABEL_122;
        }
        unsigned int v4 = (swift::Demangle::__runtime::Node *)v7;
        int v5 = 6;
LABEL_20:
        int v14 = *((_DWORD *)this + 24);
        if (v14 && (unsigned int v15 = v14 - 1, v10 = *(void *)(*((void *)this + 11) + 8 * v15), *(_WORD *)(v10 + 16) == 232)) {
          *((_DWORD *)this + 24) = v15;
        }
        else {
          unint64_t v10 = 0;
        }
        goto LABEL_39;
      case 'L':
        unsigned int v4 = 0;
        int v5 = 4;
        goto LABEL_20;
      case 'M':
        int v5 = 4;
        goto LABEL_25;
      case 'P':
        int v5 = 0;
        goto LABEL_25;
      case 'Q':
        int v5 = 0;
        unsigned int v4 = 0;
        goto LABEL_20;
      case 'S':
        unsigned int v4 = 0;
        int v5 = 2;
        goto LABEL_20;
      case 'T':
        int v5 = 2;
LABEL_25:
        unint64_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
        unint64_t v17 = swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(this, v16);
        goto LABEL_36;
      case 'b':
        unsigned int v4 = 0;
        int v6 = 1;
        goto LABEL_7;
      case 'c':
        goto LABEL_35;
      case 'h':
        unsigned int v4 = 0;
        int v6 = 3;
        goto LABEL_7;
      case 'i':
        unint64_t v18 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        if (v18)
        {
          unsigned int v4 = (swift::Demangle::__runtime::Node *)v18;
          int v6 = 6;
          goto LABEL_7;
        }
LABEL_122:
        unint64_t v21 = 0;
        break;
      case 'l':
        unsigned int v4 = 0;
        int v6 = 4;
        goto LABEL_7;
      case 'm':
        int v5 = 4;
        goto LABEL_35;
      case 'p':
        int v5 = 0;
        goto LABEL_35;
      case 's':
        unsigned int v4 = 0;
        int v6 = 2;
        goto LABEL_7;
      case 't':
        int v5 = 2;
LABEL_35:
        unint64_t v19 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
        unint64_t v17 = swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(this, v19);
LABEL_36:
        unint64_t v10 = v17;
        unint64_t v61 = v17;
        if (v17) {
          swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v61, this);
        }
        unsigned int v4 = 0;
LABEL_39:
        int v6 = v5;
        goto LABEL_40;
      case 'v':
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  return v21;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= v2) {
    goto LABEL_6;
  }
  *((void *)this + 9) = v3 + 1;
  int v4 = *(char *)(*((void *)this + 7) + v3);
  if (v4 == 67)
  {
    int v5 = "__C_Synthesized";
    size_t v6 = 15;
    goto LABEL_28;
  }
  if (v4 == 103)
  {
    Swiftunint64_t Type = swift::Demangle::__runtime::Demangler::createSwiftType(this, 61, "Optional");
    int v18 = *((_DWORD *)this + 24);
    if (v18)
    {
      unsigned int v19 = v18 - 1;
      unint64_t v20 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v19);
      if (*((_WORD *)v20 + 8) == 232)
      {
        unint64_t v21 = (swift::Demangle::__runtime::Node *)SwiftType;
        *((_DWORD *)this + 24) = v19;
        unint64_t v22 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v22;
        if (!v22 || v22 + 24 > *((void *)this + 2))
        {
          unint64_t v23 = 2 * *((void *)this + 4);
          if (v23 <= 0x20) {
            unint64_t v23 = 32;
          }
          *((void *)this + 4) = v23;
          unint64_t v24 = v23 + 8;
          unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
          *unint64_t v25 = *((void *)this + 3);
          unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v25 + v24;
          *((void *)this + 3) = v25;
        }
        *((void *)this + 1) = v22 + 24;
        *(_WORD *)(v22 + 16) = 235;
        *(unsigned char *)(v22 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v20, this);
        if (v21)
        {
          if (v22)
          {
            unint64_t v26 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v26;
            if (!v26 || v26 + 24 > *((void *)this + 2))
            {
              unint64_t v27 = 2 * *((void *)this + 4);
              if (v27 <= 0x20) {
                unint64_t v27 = 32;
              }
              *((void *)this + 4) = v27;
              unint64_t v28 = v27 + 8;
              unsigned int v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
              *unsigned int v29 = *((void *)this + 3);
              unint64_t v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v29 + v28;
              *((void *)this + 3) = v29;
            }
            *((void *)this + 1) = v26 + 24;
            *(_WORD *)(v26 + 16) = 14;
            *(unsigned char *)(v26 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v26, v21, this);
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v26, (swift::Demangle::__runtime::Node *)v22, this);
            unint64_t StandardSubstitution = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = StandardSubstitution;
            if (!StandardSubstitution || StandardSubstitution + 24 > *((void *)this + 2))
            {
              unint64_t v30 = 2 * *((void *)this + 4);
              if (v30 <= 0x20) {
                unint64_t v30 = 32;
              }
              *((void *)this + 4) = v30;
              unint64_t v31 = v30 + 8;
              int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
              *int v32 = *((void *)this + 3);
              unint64_t StandardSubstitution = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v32 + v31;
              *((void *)this + 3) = v32;
            }
            *((void *)this + 1) = StandardSubstitution + 24;
            *(_WORD *)(StandardSubstitution + 16) = 232;
            *(unsigned char *)(StandardSubstitution + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)StandardSubstitution, (swift::Demangle::__runtime::Node *)v26, this);
            unint64_t v33 = StandardSubstitution;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v33, this);
            return StandardSubstitution;
          }
        }
      }
    }
    return 0;
  }
  ++v3;
  if (v4 != 111)
  {
LABEL_6:
    unint64_t v7 = v3 - 1;
    *((void *)this + 9) = v7;
    if (v7 >= v2 || (uint64_t v8 = *((void *)this + 7), *(unsigned __int8 *)(v8 + v7) - 48 > 9))
    {
LABEL_16:
      int v9 = -1000;
      if (v7 >= v2) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    int v9 = 0;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(v8 + v7);
      if ((v10 - 48) > 9) {
        break;
      }
      int v11 = v10 + 10 * v9 - 48;
      if (v11 < v9) {
        goto LABEL_16;
      }
      *((void *)this + 9) = ++v7;
      int v9 = v11;
      if (v2 == v7)
      {
        unint64_t v7 = v2;
        int v9 = v11;
        break;
      }
    }
    if (v9 <= 2048)
    {
      if (v7 >= v2) {
        goto LABEL_20;
      }
LABEL_17:
      if (*(unsigned char *)(*((void *)this + 7) + v7) == 99)
      {
        *((void *)this + 9) = ++v7;
        int v12 = 1;
        if (v7 >= v2)
        {
LABEL_19:
          char v13 = 0;
LABEL_22:
          unint64_t StandardSubstitution = swift::Demangle::__runtime::Demangler::createStandardSubstitution(this, v13, v12);
          if (StandardSubstitution && v9 >= 2)
          {
            unsigned int v15 = v9 + 1;
            do
            {
              unint64_t v33 = StandardSubstitution;
              swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 11, (uint64_t *)&v33, this);
              --v15;
            }
            while (v15 > 2);
          }
          return StandardSubstitution;
        }
LABEL_21:
        *((void *)this + 9) = v7 + 1;
        char v13 = *(unsigned char *)(*((void *)this + 7) + v7);
        goto LABEL_22;
      }
LABEL_20:
      int v12 = 0;
      if (v7 >= v2) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
    return 0;
  }
  int v5 = "__C";
  size_t v6 = 3;
LABEL_28:

  return swift::Demangle::__runtime::NodeFactory::createNode(this, 153, v5, v6);
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t Node = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  int v7 = *(unsigned __int8 *)(v6 + v1);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      __int16 v65 = 170;
      goto LABEL_187;
    case 'B':
      __int16 v66 = 93;
      goto LABEL_171;
    case 'C':
      int v67 = *((_DWORD *)this + 24);
      if (v67
        && (unsigned int v68 = v67 - 1,
            unint64_t v69 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v68),
            *((_WORD *)v69 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v68;
      }
      else
      {
        unint64_t v69 = 0;
      }
      __int16 v72 = 30;
      goto LABEL_193;
    case 'D':
      __int16 v65 = 55;
      goto LABEL_187;
    case 'E':
      __int16 v65 = 53;
      goto LABEL_187;
    case 'F':
      __int16 v65 = 54;
      goto LABEL_187;
    case 'G':
      __int16 v66 = 92;
      goto LABEL_171;
    case 'H':
    case 'h':
      if (v7 == 72) {
        __int16 v22 = 133;
      }
      else {
        __int16 v22 = 134;
      }
      if (v5 < v2 && *(unsigned char *)(v6 + v5) == 113)
      {
        *((void *)this + 9) = v1 + 2;
        int v23 = 1;
      }
      else
      {
        int v23 = 0;
      }
      memset(&__p, 0, sizeof(__p));
      int v37 = *((_DWORD *)this + 24);
      if (!v37) {
        goto LABEL_267;
      }
      int v38 = v37 - 1;
      unint64_t v39 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * (v37 - 1));
      *((_DWORD *)this + 24) = v37 - 1;
      int v148 = v39;
      if (!v39) {
        goto LABEL_267;
      }
      int v40 = v39[8];
      if (v40 == 43)
      {
        __int16 v145 = v22;
        int v146 = v23;
      }
      else
      {
        if (v40 != 232)
        {
LABEL_267:
          unint64_t Node = 0;
          goto LABEL_268;
        }
        __int16 v145 = v22;
        int v146 = v23;
        std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100]((void **)&__p.__r_.__value_.__l.__data_, &v148);
        unint64_t v39 = 0;
        int v38 = *((_DWORD *)v3 + 24);
      }
      for (; v38; __p.__r_.__value_.__l.__size_ = v120)
      {
        uint64_t v121 = *(void *)(*((void *)v3 + 11) + 8 * --v38);
        *((_DWORD *)v3 + 24) = v38;
        if (!v121) {
          break;
        }
        if (*(_WORD *)(v121 + 16) != 232) {
          goto LABEL_267;
        }
        std::string::size_type size = (unsigned char *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
        {
          *(void *)__p.__r_.__value_.__l.__size_ = v121;
          std::string::size_type v120 = (std::string::size_type)(size + 8);
        }
        else
        {
          std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
          std::string::size_type v124 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          uint64_t v125 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 61) {
            goto LABEL_289;
          }
          int64_t v127 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v126) {
            unint64_t v126 = v127 >> 2;
          }
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v128 = v126;
          }
          if (v128)
          {
            if (v128 >> 61) {
              goto LABEL_290;
            }
            unint64_t v129 = operator new(8 * v128);
          }
          else
          {
            unint64_t v129 = 0;
          }
          int v130 = &v129[8 * v125];
          void *v130 = v121;
          std::string::size_type v120 = (std::string::size_type)(v130 + 1);
          if (size != (unsigned char *)v123)
          {
            unint64_t v131 = (unint64_t)&size[-v123 - 8];
            if (v131 < 0x58) {
              goto LABEL_293;
            }
            if ((unint64_t)(size - &v129[v124]) < 0x20) {
              goto LABEL_293;
            }
            uint64_t v132 = (v131 >> 3) + 1;
            uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
            int v134 = &size[-v133];
            int v130 = (void *)((char *)v130 - v133);
            unint64_t v135 = &v129[8 * v125 - 16];
            int v136 = (long long *)(size - 16);
            uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v138 = *v136;
              *(v135 - 1) = *(v136 - 1);
              *unint64_t v135 = v138;
              v135 -= 2;
              v136 -= 2;
              v137 -= 4;
            }
            while (v137);
            std::string::size_type size = v134;
            if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_293:
              do
              {
                uint64_t v139 = *((void *)size - 1);
                size -= 8;
                *--int v130 = v139;
              }
              while (size != (unsigned char *)v123);
            }
            std::string::size_type size = (unsigned char *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
          __p.__r_.__value_.__l.__size_ = v120;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v129[8 * v128];
          if (size)
          {
            operator delete(size);
            int v38 = *((_DWORD *)v3 + 24);
          }
        }
      }
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v3, v145);
      std::string::size_type v116 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v117 = __p.__r_.__value_.__r.__words[0];
      while (v116 != v117)
      {
        int v118 = *(swift::Demangle::__runtime::Node **)(v116 - 8);
        v116 -= 8;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v118, v3);
      }
      if (v39) {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, (swift::Demangle::__runtime::Node *)v39, v3);
      }
      if (v146)
      {
        unsigned int v119 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 217);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v119, v3);
      }
LABEL_268:
      unint64_t v115 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_270;
    case 'I':
      __int16 v65 = 58;
      goto LABEL_187;
    case 'J':
      if (v5 >= v2) {
        goto LABEL_212;
      }
      int v70 = *(char *)(v6 + v5);
      if (v70 == 79)
      {
        *((void *)this + 9) = v1 + 2;
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(this);
      }
      else
      {
        if (v70 == 86)
        {
          *((void *)this + 9) = v1 + 2;
          __int16 v110 = 324;
        }
        else
        {
          if (v70 == 83)
          {
            *((void *)this + 9) = v1 + 2;
            return swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk(this);
          }
LABEL_212:
          __int16 v110 = 320;
        }
        return swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk(this, v110);
      }
    case 'K':
    case 'k':
      if (v7 == 75) {
        __int16 v24 = 131;
      }
      else {
        __int16 v24 = 132;
      }
      if (v5 < v2 && *(unsigned char *)(v6 + v5) == 113)
      {
        *((void *)this + 9) = v1 + 2;
        char v25 = 1;
      }
      else
      {
        char v25 = 0;
      }
      int v41 = *((_DWORD *)this + 24);
      if (!v41) {
        return 0;
      }
      int v42 = v41 - 1;
      unint64_t Node = *(void *)(*((void *)this + 11) + 8 * (v41 - 1));
      *((_DWORD *)this + 24) = v41 - 1;
      if (!Node) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      if (*(_WORD *)(Node + 16) != 232) {
        return 0;
      }
      char v147 = v25;
      unint64_t v43 = 0;
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      break;
    case 'L':
      unint64_t v69 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      this = v3;
      __int16 v72 = 266;
      goto LABEL_193;
    case 'M':
      unint64_t v69 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
      this = v3;
      __int16 v72 = 7;
      goto LABEL_193;
    case 'N':
      unint64_t v73 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      unint64_t v74 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypePath(v3);
      int v75 = *((_DWORD *)v3 + 24);
      if (v75
        && (unsigned int v76 = v75 - 1,
            unint64_t v77 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v76),
            *((_WORD *)v77 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v76;
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v108 = v3;
      __int16 v109 = 268;
      goto LABEL_205;
    case 'O':
      __int16 v65 = 160;
      goto LABEL_187;
    case 'P':
      __int16 v78 = 87;
      goto LABEL_162;
    case 'Q':
    case 'Y':
      unint64_t v26 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      if (v7 == 81) {
        __int16 v27 = 328;
      }
      else {
        __int16 v27 = 329;
      }
      if (!v26) {
        return 0;
      }
      unint64_t v28 = (swift::Demangle::__runtime::Node *)v26;
      unint64_t Node = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Node;
      if (!Node || Node + 24 > *((void *)v3 + 2))
      {
        unint64_t v29 = 2 * *((void *)v3 + 4);
        if (v29 <= 0x20) {
          unint64_t v29 = 32;
        }
        *((void *)v3 + 4) = v29;
        unint64_t v30 = v29 + 8;
        unint64_t v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *unint64_t v31 = *((void *)v3 + 3);
        unint64_t Node = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v31 + v30;
        *((void *)v3 + 3) = v31;
      }
      *((void *)v3 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v27;
      *(unsigned char *)(Node + 18) = 0;
      goto LABEL_225;
    case 'R':
    case 'r':
    case 'y':
      if (v7 == 121) {
        __int16 v8 = 202;
      }
      else {
        __int16 v8 = 200;
      }
      BOOL v9 = v7 == 82;
      BOOL v10 = v7 != 82 && v7 == 121;
      if (v9) {
        __int16 v11 = 201;
      }
      else {
        __int16 v11 = v8;
      }
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        *int v14 = *((void *)v3 + 3);
        unint64_t Node = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v14 + v13;
        *((void *)v3 + 3) = v14;
      }
      *((void *)v3 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v11;
      *(unsigned char *)(Node + 18) = 0;
      int v15 = *((_DWORD *)v3 + 24);
      if (!v15) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      unint64_t v16 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v16 + 8) == 43)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v16, v3);
        int v15 = *((_DWORD *)v3 + 24);
      }
      if (!v10) {
        goto LABEL_24;
      }
      if (!v15) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      unint64_t v17 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v17 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v17, v3);
        int v15 = *((_DWORD *)v3 + 24);
LABEL_24:
        if (!v15) {
          return (swift::Demangle::__runtime::Node *)Node;
        }
      }
      int v18 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v18 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v18, v3);
        int v15 = *((_DWORD *)v3 + 24);
        if (!v15) {
          return (swift::Demangle::__runtime::Node *)Node;
        }
      }
      unsigned int v19 = v15 - 1;
      unint64_t v20 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v19);
      if (*((_WORD *)v20 + 8) != 232) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      *((_DWORD *)v3 + 24) = v19;
      unint64_t v21 = (swift::Demangle::__runtime::Node *)Node;
      goto LABEL_226;
    case 'S':
      this = v3;
      __int16 v72 = 194;
      goto LABEL_193;
    case 'U':
      int v79 = *((_DWORD *)this + 24);
      if (!v79) {
        return 0;
      }
      uint64_t v80 = *((void *)this + 11);
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v80 + 8 * (v79 - 1));
      if (*((_WORD *)v28 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v79 - 1;
      if (v79 == 1) {
        return 0;
      }
      unsigned int v81 = v79 - 2;
      int v82 = *(swift::Demangle::__runtime::Node **)(v80 + 8 * v81);
      *((_DWORD *)this + 24) = v81;
      if (!v82) {
        return 0;
      }
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 203);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v82, v3);
      goto LABEL_225;
    case 'V':
      int v85 = v3;
      __int16 v86 = 255;
      unint64_t v87 = (swift::Demangle::__runtime::Node *)v83;
      goto LABEL_200;
    case 'W':
      int v84 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v3);
      int v85 = v3;
      __int16 v86 = 196;
      unint64_t v87 = (swift::Demangle::__runtime::Node *)v88;
      goto LABEL_200;
    case 'X':
      __int16 v65 = 60;
      goto LABEL_187;
    case 'Z':
    case 'z':
      int v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      int v33 = *((_DWORD *)v3 + 24);
      if (!v33)
      {
        unint64_t v36 = 0;
        unint64_t v28 = 0;
        goto LABEL_219;
      }
      int v34 = v33 - 1;
      uint64_t v35 = *((void *)v3 + 11);
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v35 + 8 * (v33 - 1));
      if (*((_WORD *)v28 + 8) == 43)
      {
        *((_DWORD *)v3 + 24) = v34;
        if (v33 == 1)
        {
          unint64_t v36 = 0;
          goto LABEL_219;
        }
      }
      else
      {
        unint64_t v28 = 0;
        int v34 = *((_DWORD *)v3 + 24);
      }
      unint64_t v36 = *(swift::Demangle::__runtime::Node **)(v35 + 8 * (v34 - 1));
      if (*((_WORD *)v36 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v34 - 1;
        if (v34 == 1) {
          goto LABEL_219;
        }
        --v34;
      }
      else
      {
        unint64_t v36 = 0;
      }
      unsigned int v111 = v34 - 1;
      uint64_t v112 = *(swift::Demangle::__runtime::Node **)(v35 + 8 * v111);
      if (*((_WORD *)v112 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v111;
        goto LABEL_220;
      }
LABEL_219:
      uint64_t v112 = 0;
LABEL_220:
      if (v7 == 122) {
        __int16 v113 = 162;
      }
      else {
        __int16 v113 = 163;
      }
      unint64_t v114 = swift::Demangle::__runtime::Demangler::createWithChildren(v3, v113, v112, v36, v32);
      unint64_t Node = v114;
      if (v28 && v114)
      {
LABEL_225:
        unint64_t v21 = (swift::Demangle::__runtime::Node *)Node;
        unint64_t v20 = v28;
LABEL_226:
        swift::Demangle::__runtime::Node::addChild(v21, v20, v3);
      }
      return (swift::Demangle::__runtime::Node *)Node;
    case 'a':
      __int16 v65 = 171;
      goto LABEL_187;
    case 'b':
      unint64_t v87 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      int v89 = *((_DWORD *)v3 + 24);
      if (v89
        && (unsigned int v90 = v89 - 1,
            int v84 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v90),
            *((_WORD *)v84 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v90;
      }
      else
      {
        int v84 = 0;
      }
      int v85 = v3;
      __int16 v86 = 269;
LABEL_200:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v85, v86, v84, v87);
    case 'c':
      this = v3;
      __int16 v72 = 263;
      goto LABEL_193;
    case 'd':
      __int16 v65 = 56;
      goto LABEL_187;
    case 'e':
      swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams(this, &__p);
      char v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v92 = __p.__r_.__value_.__l.__size_;
      }
      if (v92)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v3, 277, p_p, v92);
        char v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        unint64_t Node = 0;
      }
      if ((v91 & 0x80) == 0) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      unint64_t v115 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_270;
    case 'f':
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization(this);
    case 'g':
      __int16 v66 = 91;
      goto LABEL_171;
    case 'i':
      __int16 v66 = 96;
      goto LABEL_171;
    case 'j':
      this = v3;
      __int16 v72 = 264;
      goto LABEL_193;
    case 'l':
      unint64_t v94 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
      if (!v94) {
        return 0;
      }
      unint64_t v69 = (swift::Demangle::__runtime::Node *)v94;
      this = v3;
      __int16 v72 = 270;
LABEL_193:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v72, v69);
    case 'm':
      __int16 v65 = 144;
      goto LABEL_187;
    case 'n':
      unint64_t v73 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      unint64_t v74 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypePath(v3);
      int v95 = *((_DWORD *)v3 + 24);
      if (v95
        && (unsigned int v96 = v95 - 1,
            unint64_t v77 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v96),
            *((_WORD *)v77 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v96;
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v108 = v3;
      __int16 v109 = 267;
LABEL_205:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v108, v109, v77, v74, v73);
    case 'o':
      __int16 v65 = 164;
      goto LABEL_187;
    case 'p':
      __int16 v78 = 86;
LABEL_162:
      int v97 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, v78);
      int v98 = *((_DWORD *)v3 + 24);
      if (v98
        && (unsigned int v99 = v98 - 1,
            unint64_t v100 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v99),
            *((_WORD *)v100 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v99;
      }
      else
      {
        unint64_t v100 = 0;
      }
      int v101 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(v3, 94, v100);
      unint64_t Node = 0;
      if (v97 && v101)
      {
        swift::Demangle::__runtime::Node::addChild(v97, v101, v3);
        return v97;
      }
      return (swift::Demangle::__runtime::Node *)Node;
    case 'q':
      this = v3;
      __int16 v72 = 265;
      goto LABEL_193;
    case 's':
      __int16 v66 = 95;
LABEL_171:
      return swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v66);
    case 'u':
      __int16 v65 = 319;
      goto LABEL_187;
    case 'v':
      unsigned int v102 = swift::Demangle::__runtime::Demangler::demangleIndex(this);
      if ((v102 & 0x80000000) != 0) {
        return 0;
      }
      unint64_t v103 = *((void *)v3 + 9);
      if (v103 < *((void *)v3 + 8) && (*((void *)v3 + 9) = v103 + 1, *(unsigned char *)(*((void *)v3 + 7) + v103) == 114))
      {
        uint64_t v104 = v102;
        unint64_t v105 = v3;
        __int16 v106 = 288;
      }
      else
      {
        uint64_t v104 = v102;
        unint64_t v105 = v3;
        __int16 v106 = 287;
      }
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v105, v106, v104);
    case 'w':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v107 = *(char *)(v6 + v5);
      switch(v107)
      {
        case 'B':
          __int16 v65 = 333;
          break;
        case 'S':
          __int16 v65 = 340;
          break;
        case 'b':
          __int16 v65 = 332;
          break;
        default:
          return 0;
      }
LABEL_187:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, v65);
    case 'x':
      __int16 v65 = 59;
      goto LABEL_187;
    default:
      return (swift::Demangle::__runtime::Node *)Node;
  }
  do
  {
    if (v44 < v43)
    {
      *v44++ = Node;
      int v46 = v42;
      goto LABEL_87;
    }
    uint64_t v47 = v44 - v45;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
LABEL_289:
    }
      abort();
    if (((char *)v43 - (char *)v45) >> 2 > v48) {
      unint64_t v48 = ((char *)v43 - (char *)v45) >> 2;
    }
    if ((unint64_t)((char *)v43 - (char *)v45) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      if (v49 >> 61) {
LABEL_290:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      unint64_t v50 = (char *)operator new(8 * v49);
    }
    else
    {
      unint64_t v50 = 0;
    }
    unint64_t v51 = (unint64_t *)&v50[8 * v47];
    *unint64_t v51 = Node;
    unint64_t v52 = v51 + 1;
    if (v44 != v45)
    {
      unint64_t v53 = (char *)v44 - (char *)v45 - 8;
      if (v53 >= 0x168)
      {
        unint64_t v58 = ((char *)(v44 - 1) - (char *)v45) & 0xFFFFFFFFFFFFFFF8;
        if (&v50[(char *)v44 - (char *)v45 - 8 - v58] > &v50[(char *)v44 - (char *)v45 - 8])
        {
          unint64_t v54 = v44;
        }
        else if ((unint64_t *)((char *)v44 - v58 - 8) > v44 - 1)
        {
          unint64_t v54 = v44;
        }
        else if ((unint64_t)((char *)v45 - v50) >= 0x20)
        {
          uint64_t v59 = (v53 >> 3) + 1;
          uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v54 = &v44[v60 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v51 = (unint64_t *)((char *)v51 - v60);
          unint64_t v61 = &v50[8 * v47 - 16];
          unint64_t v62 = v44 - 2;
          uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v64 = *(_OWORD *)v62;
            *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
            *(_OWORD *)unint64_t v61 = v64;
            v61 -= 32;
            v62 -= 4;
            v63 -= 4;
          }
          while (v63);
          if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_82;
          }
        }
        else
        {
          unint64_t v54 = v44;
        }
      }
      else
      {
        unint64_t v54 = v44;
      }
      do
      {
        unint64_t v55 = *--v54;
        *--unint64_t v51 = v55;
      }
      while (v54 != v45);
LABEL_82:
      unint64_t v44 = v45;
    }
    unint64_t v45 = v51;
    unint64_t v43 = (unint64_t *)&v50[8 * v49];
    if (v44)
    {
      operator delete(v44);
      int v46 = *((_DWORD *)v3 + 24);
    }
    else
    {
      int v46 = v42;
    }
    unint64_t v44 = v52;
LABEL_87:
    if (!v46) {
      goto LABEL_275;
    }
    int v42 = v46 - 1;
    uint64_t v56 = *((void *)v3 + 11);
    unint64_t Node = *(void *)(v56 + 8 * (v46 - 1));
    *((_DWORD *)v3 + 24) = v46 - 1;
    if (!Node) {
      goto LABEL_287;
    }
    int v57 = *(unsigned __int16 *)(Node + 16);
  }
  while (v57 == 232);
  if (v57 == 43)
  {
    if (v46 == 1
      || (unsigned int v140 = v46 - 2,
          unsigned int v141 = *(swift::Demangle::__runtime::Node **)(v56 + 8 * v140),
          *((_DWORD *)v3 + 24) = v140,
          !v141))
    {
LABEL_275:
      unint64_t Node = 0;
      goto LABEL_287;
    }
    unint64_t v142 = swift::Demangle::__runtime::Demangler::createWithChildren(v3, v24, v141, (swift::Demangle::__runtime::Node *)Node);
  }
  else
  {
    unint64_t v142 = swift::Demangle::__runtime::Demangler::createWithChild(v3, v24, (swift::Demangle::__runtime::Node *)Node);
  }
  unint64_t Node = v142;
  while (v44 != v45)
  {
    unsigned int v143 = (swift::Demangle::__runtime::Node *)*--v44;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v143, v3);
  }
  if (v147)
  {
    unint64_t v144 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 217);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v144, v3);
  }
LABEL_287:
  if (v45)
  {
    unint64_t v115 = v45;
LABEL_270:
    operator delete(v115);
  }
  return (swift::Demangle::__runtime::Node *)Node;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleWitness(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  char v7 = *(unsigned char *)(v6 + v1);
  switch(v7)
  {
    case 'C':
      int v37 = *((_DWORD *)this + 24);
      if (!v37) {
        return 0;
      }
      int v38 = v37 - 1;
      unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v37 - 1));
      if (*((_WORD *)v39 + 8) != 232 && !swift::Demangle::__runtime::isContext()) {
        return 0;
      }
      *((_DWORD *)v3 + 24) = v38;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v40 = 2 * *((void *)v3 + 4);
        if (v40 <= 0x20) {
          unint64_t v40 = 32;
        }
        *((void *)v3 + 4) = v40;
        unint64_t v41 = v40 + 8;
        int v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
        unint64_t v43 = (char *)v42 + v41;
        *int v42 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v43;
        *((void *)v3 + 3) = v42;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 62;
      goto LABEL_154;
    case 'G':
      unint64_t v45 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v45) {
        return 0;
      }
      unint64_t v39 = v45;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v46 = 2 * *((void *)v3 + 4);
        if (v46 <= 0x20) {
          unint64_t v46 = 32;
        }
        *((void *)v3 + 4) = v46;
        unint64_t v47 = v46 + 8;
        unint64_t v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
        unint64_t v49 = (char *)v48 + v47;
        *unint64_t v48 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v49;
        *((void *)v3 + 3) = v48;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 88;
      goto LABEL_154;
    case 'I':
      unint64_t v50 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v50) {
        return 0;
      }
      unint64_t v39 = v50;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v51 = 2 * *((void *)v3 + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32;
        }
        *((void *)v3 + 4) = v51;
        unint64_t v52 = v51 + 8;
        unint64_t v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unint64_t v54 = (char *)v53 + v52;
        *unint64_t v53 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v54;
        *((void *)v3 + 3) = v53;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 89;
      goto LABEL_154;
    case 'J':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(this);
    case 'L':
      uint64_t v56 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      int v57 = *((_DWORD *)v3 + 24);
      if (!v57) {
        return 0;
      }
      unsigned int v58 = v57 - 1;
      uint64_t v59 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v58);
      if (*((_WORD *)v59 + 8) != 232) {
        return 0;
      }
      unint64_t v39 = v56;
      *((_DWORD *)v3 + 24) = v58;
      if (!v56) {
        return 0;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v60 = 2 * *((void *)v3 + 4);
        if (v60 <= 0x20) {
          unint64_t v60 = 32;
        }
        *((void *)v3 + 4) = v60;
        unint64_t v61 = v60 + 8;
        unint64_t v62 = malloc_type_malloc(v60 + 8, 0xD0263BC5uLL);
        uint64_t v63 = (char *)v62 + v61;
        *unint64_t v62 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v63;
        *((void *)v3 + 3) = v62;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 136;
      goto LABEL_186;
    case 'O':
      if (v5 >= v2) {
        return 0;
      }
      unint64_t v4 = 0;
      *((void *)this + 9) = v1 + 2;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'C':
          int v65 = *((_DWORD *)this + 24);
          if (!v65) {
            goto LABEL_316;
          }
          int v66 = v65 - 1;
          uint64_t v67 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v67 + 8 * (v65 - 1));
          int v69 = v68[8];
          if (v69 == 232)
          {
            *((_DWORD *)this + 24) = v66;
          }
          else
          {
            if (v69 == 43)
            {
              *((_DWORD *)this + 24) = v66;
              if (v65 == 1 || (v70 = v65 - 2, int v71 = *(unsigned __int16 **)(v67 + 8 * v70), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v70;
              }
              __int16 v232 = 350;
LABEL_359:
              return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v232, (swift::Demangle::__runtime::Node *)v71, (swift::Demangle::__runtime::Node *)v68);
            }
LABEL_316:
            unsigned int v68 = 0;
          }
          __int16 v231 = 350;
          goto LABEL_368;
        case 'D':
          int v156 = *((_DWORD *)this + 24);
          if (!v156) {
            goto LABEL_317;
          }
          int v157 = v156 - 1;
          uint64_t v158 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v158 + 8 * (v156 - 1));
          int v159 = v68[8];
          if (v159 == 232)
          {
            *((_DWORD *)this + 24) = v157;
          }
          else
          {
            if (v159 == 43)
            {
              *((_DWORD *)this + 24) = v157;
              if (v156 == 1 || (v160 = v156 - 2, int v71 = *(unsigned __int16 **)(v158 + 8 * v160), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v160;
              }
              __int16 v232 = 351;
              goto LABEL_359;
            }
LABEL_317:
            unsigned int v68 = 0;
          }
          __int16 v231 = 351;
          goto LABEL_368;
        case 'F':
          int v161 = *((_DWORD *)this + 24);
          if (!v161) {
            goto LABEL_318;
          }
          int v162 = v161 - 1;
          uint64_t v163 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v163 + 8 * (v161 - 1));
          int v164 = v68[8];
          if (v164 == 232)
          {
            *((_DWORD *)this + 24) = v162;
          }
          else
          {
            if (v164 == 43)
            {
              *((_DWORD *)this + 24) = v162;
              if (v161 == 1 || (v165 = v161 - 2, int v71 = *(unsigned __int16 **)(v163 + 8 * v165), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v165;
              }
              __int16 v232 = 352;
              goto LABEL_359;
            }
LABEL_318:
            unsigned int v68 = 0;
          }
          __int16 v231 = 352;
          goto LABEL_368;
        case 'H':
          int v166 = *((_DWORD *)this + 24);
          if (!v166) {
            goto LABEL_319;
          }
          int v167 = v166 - 1;
          uint64_t v168 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v168 + 8 * (v166 - 1));
          int v169 = v68[8];
          if (v169 == 232)
          {
            *((_DWORD *)this + 24) = v167;
          }
          else
          {
            if (v169 == 43)
            {
              *((_DWORD *)this + 24) = v167;
              if (v166 == 1 || (v170 = v166 - 2, int v71 = *(unsigned __int16 **)(v168 + 8 * v170), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v170;
              }
              __int16 v232 = 353;
              goto LABEL_359;
            }
LABEL_319:
            unsigned int v68 = 0;
          }
          __int16 v231 = 353;
          goto LABEL_368;
        case 'b':
          int v171 = *((_DWORD *)this + 24);
          if (!v171) {
            goto LABEL_320;
          }
          int v172 = v171 - 1;
          uint64_t v173 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v173 + 8 * (v171 - 1));
          int v174 = v68[8];
          if (v174 == 232)
          {
            *((_DWORD *)this + 24) = v172;
          }
          else
          {
            if (v174 == 43)
            {
              *((_DWORD *)this + 24) = v172;
              if (v171 == 1 || (v175 = v171 - 2, int v71 = *(unsigned __int16 **)(v173 + 8 * v175), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v175;
              }
              __int16 v232 = 282;
              goto LABEL_359;
            }
LABEL_320:
            unsigned int v68 = 0;
          }
          __int16 v231 = 282;
          goto LABEL_368;
        case 'c':
          int v176 = *((_DWORD *)this + 24);
          if (!v176) {
            goto LABEL_321;
          }
          int v177 = v176 - 1;
          uint64_t v178 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v178 + 8 * (v176 - 1));
          int v179 = v68[8];
          if (v179 == 232)
          {
            *((_DWORD *)this + 24) = v177;
          }
          else
          {
            if (v179 == 43)
            {
              *((_DWORD *)this + 24) = v177;
              if (v176 == 1 || (v180 = v176 - 2, int v71 = *(unsigned __int16 **)(v178 + 8 * v180), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v180;
              }
              __int16 v232 = 283;
              goto LABEL_359;
            }
LABEL_321:
            unsigned int v68 = 0;
          }
          __int16 v231 = 283;
          goto LABEL_368;
        case 'd':
          int v181 = *((_DWORD *)this + 24);
          if (!v181) {
            goto LABEL_322;
          }
          int v182 = v181 - 1;
          uint64_t v183 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v183 + 8 * (v181 - 1));
          int v184 = v68[8];
          if (v184 == 232)
          {
            *((_DWORD *)this + 24) = v182;
          }
          else
          {
            if (v184 == 43)
            {
              *((_DWORD *)this + 24) = v182;
              if (v181 == 1 || (v185 = v181 - 2, int v71 = *(unsigned __int16 **)(v183 + 8 * v185), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v185;
              }
              __int16 v232 = 284;
              goto LABEL_359;
            }
LABEL_322:
            unsigned int v68 = 0;
          }
          __int16 v231 = 284;
          goto LABEL_368;
        case 'e':
          int v186 = *((_DWORD *)this + 24);
          if (!v186) {
            goto LABEL_323;
          }
          int v187 = v186 - 1;
          uint64_t v188 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v188 + 8 * (v186 - 1));
          int v189 = v68[8];
          if (v189 == 232)
          {
            *((_DWORD *)this + 24) = v187;
          }
          else
          {
            if (v189 == 43)
            {
              *((_DWORD *)this + 24) = v187;
              if (v186 == 1 || (v190 = v186 - 2, int v71 = *(unsigned __int16 **)(v188 + 8 * v190), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v190;
              }
              __int16 v232 = 279;
              goto LABEL_359;
            }
LABEL_323:
            unsigned int v68 = 0;
          }
          __int16 v231 = 279;
          goto LABEL_368;
        case 'f':
          int v191 = *((_DWORD *)this + 24);
          if (!v191) {
            goto LABEL_324;
          }
          int v192 = v191 - 1;
          uint64_t v193 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v193 + 8 * (v191 - 1));
          int v194 = v68[8];
          if (v194 == 232)
          {
            *((_DWORD *)this + 24) = v192;
          }
          else
          {
            if (v194 == 43)
            {
              *((_DWORD *)this + 24) = v192;
              if (v191 == 1 || (v195 = v191 - 2, int v71 = *(unsigned __int16 **)(v193 + 8 * v195), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v195;
              }
              __int16 v232 = 285;
              goto LABEL_359;
            }
LABEL_324:
            unsigned int v68 = 0;
          }
          __int16 v231 = 285;
          goto LABEL_368;
        case 'g':
          int v196 = *((_DWORD *)this + 24);
          if (!v196) {
            goto LABEL_325;
          }
          int v197 = v196 - 1;
          uint64_t v198 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v198 + 8 * (v196 - 1));
          int v199 = v68[8];
          if (v199 == 232)
          {
            *((_DWORD *)this + 24) = v197;
          }
          else
          {
            if (v199 == 43)
            {
              *((_DWORD *)this + 24) = v197;
              if (v196 == 1 || (v200 = v196 - 2, int v71 = *(unsigned __int16 **)(v198 + 8 * v200), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v200;
              }
              __int16 v232 = 345;
              goto LABEL_359;
            }
LABEL_325:
            unsigned int v68 = 0;
          }
          __int16 v231 = 345;
          goto LABEL_368;
        case 'h':
          int v201 = *((_DWORD *)this + 24);
          if (!v201) {
            goto LABEL_326;
          }
          int v202 = v201 - 1;
          uint64_t v203 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v203 + 8 * (v201 - 1));
          int v204 = v68[8];
          if (v204 == 232)
          {
            *((_DWORD *)this + 24) = v202;
          }
          else
          {
            if (v204 == 43)
            {
              *((_DWORD *)this + 24) = v202;
              if (v201 == 1 || (v205 = v201 - 2, int v71 = *(unsigned __int16 **)(v203 + 8 * v205), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v205;
              }
              __int16 v232 = 286;
              goto LABEL_359;
            }
LABEL_326:
            unsigned int v68 = 0;
          }
          __int16 v231 = 286;
          goto LABEL_368;
        case 'i':
          std::string::size_type v124 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
          int v206 = *((_DWORD *)v3 + 24);
          if (!v206) {
            goto LABEL_327;
          }
          int v207 = v206 - 1;
          uint64_t v208 = *((void *)v3 + 11);
          std::string::size_type v123 = *(unsigned __int16 **)(v208 + 8 * (v206 - 1));
          int v209 = v123[8];
          if (v209 == 232)
          {
            *((_DWORD *)v3 + 24) = v207;
            goto LABEL_355;
          }
          if (v209 != 43)
          {
LABEL_327:
            std::string::size_type v123 = 0;
LABEL_355:
            this = v3;
            __int16 v232 = 343;
            goto LABEL_358;
          }
          *((_DWORD *)v3 + 24) = v207;
          if (v206 == 1
            || (unsigned int v210 = v206 - 2,
                std::string::size_type v120 = *(swift::Demangle::__runtime::Node **)(v208 + 8 * v210),
                *((_WORD *)v120 + 8) != 232))
          {
            std::string::size_type v120 = 0;
          }
          else
          {
            *((_DWORD *)v3 + 24) = v210;
          }
          uint64_t v121 = v3;
          __int16 v122 = 343;
LABEL_165:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v121, v122, v120, (swift::Demangle::__runtime::Node *)v123, v124);
        case 'j':
          std::string::size_type v124 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
          int v211 = *((_DWORD *)v3 + 24);
          if (!v211) {
            goto LABEL_328;
          }
          int v212 = v211 - 1;
          uint64_t v213 = *((void *)v3 + 11);
          std::string::size_type v123 = *(unsigned __int16 **)(v213 + 8 * (v211 - 1));
          int v214 = v123[8];
          if (v214 == 232)
          {
            *((_DWORD *)v3 + 24) = v212;
          }
          else
          {
            if (v214 == 43)
            {
              *((_DWORD *)v3 + 24) = v212;
              if (v211 == 1
                || (unsigned int v215 = v211 - 2,
                    std::string::size_type v120 = *(swift::Demangle::__runtime::Node **)(v213 + 8 * v215),
                    *((_WORD *)v120 + 8) != 232))
              {
                std::string::size_type v120 = 0;
              }
              else
              {
                *((_DWORD *)v3 + 24) = v215;
              }
              uint64_t v121 = v3;
              __int16 v122 = 344;
              goto LABEL_165;
            }
LABEL_328:
            std::string::size_type v123 = 0;
          }
          this = v3;
          __int16 v232 = 344;
LABEL_358:
          int v71 = v123;
          unsigned int v68 = (unsigned __int16 *)v124;
          goto LABEL_359;
        case 'r':
          int v216 = *((_DWORD *)this + 24);
          if (!v216) {
            goto LABEL_329;
          }
          int v217 = v216 - 1;
          uint64_t v218 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v218 + 8 * (v216 - 1));
          int v219 = v68[8];
          if (v219 == 232)
          {
            *((_DWORD *)this + 24) = v217;
          }
          else
          {
            if (v219 == 43)
            {
              *((_DWORD *)this + 24) = v217;
              if (v216 == 1 || (v220 = v216 - 2, int v71 = *(unsigned __int16 **)(v218 + 8 * v220), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v220;
              }
              __int16 v232 = 280;
              goto LABEL_359;
            }
LABEL_329:
            unsigned int v68 = 0;
          }
          __int16 v231 = 280;
          goto LABEL_368;
        case 's':
          int v221 = *((_DWORD *)this + 24);
          if (!v221) {
            goto LABEL_330;
          }
          int v222 = v221 - 1;
          uint64_t v223 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v223 + 8 * (v221 - 1));
          int v224 = v68[8];
          if (v224 == 232)
          {
            *((_DWORD *)this + 24) = v222;
          }
          else
          {
            if (v224 == 43)
            {
              *((_DWORD *)this + 24) = v222;
              if (v221 == 1 || (v225 = v221 - 2, int v71 = *(unsigned __int16 **)(v223 + 8 * v225), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v225;
              }
              __int16 v232 = 281;
              goto LABEL_359;
            }
LABEL_330:
            unsigned int v68 = 0;
          }
          __int16 v231 = 281;
          goto LABEL_368;
        case 'y':
          int v226 = *((_DWORD *)this + 24);
          if (!v226) {
            goto LABEL_331;
          }
          int v227 = v226 - 1;
          uint64_t v228 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v228 + 8 * (v226 - 1));
          int v229 = v68[8];
          if (v229 == 232)
          {
            *((_DWORD *)this + 24) = v227;
          }
          else
          {
            if (v229 == 43)
            {
              *((_DWORD *)this + 24) = v227;
              if (v226 == 1 || (v230 = v226 - 2, int v71 = *(unsigned __int16 **)(v228 + 8 * v230), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v230;
              }
              __int16 v232 = 278;
              goto LABEL_359;
            }
LABEL_331:
            unsigned int v68 = 0;
          }
          __int16 v231 = 278;
LABEL_368:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v231, (swift::Demangle::__runtime::Node *)v68);
        default:
          return (swift::Demangle::__runtime::Node *)v4;
      }
    case 'P':
      __int16 v72 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v72) {
        return 0;
      }
      unint64_t v39 = v72;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v73 = 2 * *((void *)v3 + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32;
        }
        *((void *)v3 + 4) = v73;
        unint64_t v74 = v73 + 8;
        int v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        unsigned int v76 = (char *)v75 + v74;
        void *v75 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v76;
        *((void *)v3 + 3) = v75;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 197;
      goto LABEL_154;
    case 'S':
      unint64_t v77 = swift::Demangle::__runtime::Demangler::popProtocol(this);
      if (!v77) {
        return 0;
      }
      unint64_t v39 = (swift::Demangle::__runtime::Node *)v77;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v78 = 2 * *((void *)v3 + 4);
        if (v78 <= 0x20) {
          unint64_t v78 = 32;
        }
        *((void *)v3 + 4) = v78;
        unint64_t v79 = v78 + 8;
        uint64_t v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
        unsigned int v81 = (char *)v80 + v79;
        *uint64_t v80 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v81;
        *((void *)v3 + 3) = v80;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 195;
      goto LABEL_154;
    case 'T':
      int v82 = *((_DWORD *)this + 24);
      if (v82
        && (unsigned int v83 = v82 - 1,
            int v84 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v83),
            *((_WORD *)v84 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v83;
      }
      else
      {
        int v84 = 0;
      }
      unint64_t v119 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this);
      std::string::size_type v120 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v3);
      uint64_t v121 = v3;
      __int16 v122 = 9;
      std::string::size_type v123 = (unsigned __int16 *)v119;
      std::string::size_type v124 = v84;
      goto LABEL_165;
    case 'V':
      int v85 = *((_DWORD *)this + 24);
      if (!v85) {
        return 0;
      }
      unsigned int v86 = v85 - 1;
      unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v86);
      if (*((_WORD *)v39 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v86;
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v87 = 2 * *((void *)this + 4);
        if (v87 <= 0x20) {
          unint64_t v87 = 32;
        }
        *((void *)this + 4) = v87;
        unint64_t v88 = v87 + 8;
        int v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        unsigned int v90 = (char *)v89 + v88;
        *int v89 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v90;
        *((void *)v3 + 3) = v89;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 253;
      goto LABEL_154;
    case 'Z':
    case 'z':
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        __int16 v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        void *v11 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v11 + v10;
        *((void *)v3 + 3) = v11;
      }
      *((void *)v3 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 317;
      *(unsigned char *)(v8 + 18) = 0;
      unsigned int v12 = *((_DWORD *)v3 + 24);
      if (!v12)
      {
        unint64_t v13 = 0;
        goto LABEL_195;
      }
      char v233 = v7;
      unint64_t v13 = 0;
      int v14 = 0;
      int v15 = 0;
      while (2)
      {
        uint64_t v17 = *((void *)v3 + 11);
        if (*(_WORD *)(*(void *)(v17 + 8 * (v12 - 1)) + 16) == 275)
        {
          *((_DWORD *)v3 + 24) = v12 - 1;
          if (v12 == 1) {
            goto LABEL_207;
          }
          v12 -= 2;
          uint64_t v18 = *(void *)(v17 + 8 * v12);
          int v19 = *(unsigned __int16 *)(v18 + 16);
          if ((v19 - 173) > 0x3C || ((1 << (v19 + 83)) & 0x100000010000010DLL) == 0)
          {
            BOOL v21 = (v19 - 101) > 0x24 || ((1 << (v19 - 101)) & 0x1000800001) == 0;
            if (v21 && v19 != 347) {
              goto LABEL_207;
            }
          }
          *((_DWORD *)v3 + 24) = v12;
          if (v14 < v15)
          {
            *(void *)int v14 = v18;
            unint64_t v16 = v14 + 8;
            v14 += 8;
            if (!v12) {
              goto LABEL_190;
            }
            continue;
          }
          uint64_t v22 = (v14 - v13) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            abort();
          }
          if ((v15 - v13) >> 2 > v23) {
            unint64_t v23 = (v15 - v13) >> 2;
          }
          if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            if (v24 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            char v25 = operator new(8 * v24);
          }
          else
          {
            char v25 = 0;
          }
          unint64_t v26 = &v25[8 * v22];
          *(void *)unint64_t v26 = v18;
          unint64_t v16 = v26 + 8;
          if (v14 == v13) {
            goto LABEL_39;
          }
          unint64_t v27 = v14 - v13 - 8;
          if (v27 < 0x168)
          {
            unint64_t v28 = v14;
            goto LABEL_38;
          }
          unint64_t v30 = (v14 - 8 - v13) & 0xFFFFFFFFFFFFFFF8;
          if (&v25[v14 - v13 - 8 - v30] > &v25[v14 - v13 - 8])
          {
            unint64_t v28 = v14;
          }
          else
          {
            if (&v14[-v30 - 8] <= v14 - 8)
            {
              if ((unint64_t)(v13 - v25) < 0x20)
              {
                unint64_t v28 = v14;
                goto LABEL_38;
              }
              uint64_t v31 = (v27 >> 3) + 1;
              uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v28 = &v14[-v32];
              v26 -= v32;
              int v33 = &v25[8 * v22 - 16];
              int v34 = v14 - 16;
              uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                _OWORD *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_38;
              }
LABEL_39:
              int v15 = &v25[8 * v24];
              if (v13)
              {
                operator delete(v13);
                unsigned int v12 = *((_DWORD *)v3 + 24);
              }
              unint64_t v13 = v26;
              int v14 = v16;
              if (!v12) {
                goto LABEL_190;
              }
              continue;
            }
            unint64_t v28 = v14;
          }
          do
          {
LABEL_38:
            uint64_t v29 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v28 != v13);
          goto LABEL_39;
        }
        break;
      }
      unint64_t v16 = v14;
LABEL_190:
      if (v16 == v13)
      {
        unint64_t v13 = v16;
      }
      else
      {
        do
        {
          uint64_t v137 = (swift::Demangle::__runtime::Node *)*((void *)v16 - 1);
          v16 -= 8;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, v137, v3);
        }
        while (v16 != v13);
      }
      char v7 = v233;
LABEL_195:
      long long v138 = swift::Demangle::__runtime::Demangler::popContext(v3);
      if (v138 && (v7 == 90 ? (__int16 v139 = 315) : (__int16 v139 = 316), v8))
      {
        unsigned int v140 = v138;
        unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 1) = v4;
        if (!v4 || v4 + 24 > *((void *)v3 + 2))
        {
          unint64_t v141 = 2 * *((void *)v3 + 4);
          if (v141 <= 0x20) {
            unint64_t v141 = 32;
          }
          *((void *)v3 + 4) = v141;
          unint64_t v142 = v141 + 8;
          unsigned int v143 = malloc_type_malloc(v141 + 8, 0xD0263BC5uLL);
          unint64_t v144 = (char *)v143 + v142;
          *unsigned int v143 = *((void *)v3 + 3);
          unint64_t v4 = ((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 2) = v144;
          *((void *)v3 + 3) = v143;
        }
        *((void *)v3 + 1) = v4 + 24;
        *(_WORD *)(v4 + 16) = v139;
        *(unsigned char *)(v4 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v140, v3);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v8, v3);
        if (!v13) {
          return (swift::Demangle::__runtime::Node *)v4;
        }
      }
      else
      {
LABEL_207:
        unint64_t v4 = 0;
        if (!v13) {
          return (swift::Demangle::__runtime::Node *)v4;
        }
      }
      operator delete(v13);
      return (swift::Demangle::__runtime::Node *)v4;
    case 'a':
      char v91 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v91) {
        return 0;
      }
      unint64_t v39 = v91;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v92 = 2 * *((void *)v3 + 4);
        if (v92 <= 0x20) {
          unint64_t v92 = 32;
        }
        *((void *)v3 + 4) = v92;
        unint64_t v93 = v92 + 8;
        unint64_t v94 = malloc_type_malloc(v92 + 8, 0xD0263BC5uLL);
        int v95 = (char *)v94 + v93;
        void *v94 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v95;
        *((void *)v3 + 3) = v94;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 198;
      goto LABEL_154;
    case 'b':
      int v96 = *((_DWORD *)this + 24);
      if (v96
        && (unsigned int v97 = v96 - 1,
            unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v97),
            *((_WORD *)v39 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v97;
      }
      else
      {
        unint64_t v39 = 0;
      }
      uint64_t v125 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      unint64_t v4 = 0;
      if (!v39) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      uint64_t v59 = v125;
      if (!v125) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v126 = 2 * *((void *)v3 + 4);
        if (v126 <= 0x20) {
          unint64_t v126 = 32;
        }
        *((void *)v3 + 4) = v126;
        unint64_t v127 = v126 + 8;
        unint64_t v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        unint64_t v129 = (char *)v128 + v127;
        *unint64_t v128 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v129;
        *((void *)v3 + 3) = v128;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 10;
      goto LABEL_186;
    case 'l':
      int v98 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      int v99 = *((_DWORD *)v3 + 24);
      if (!v99) {
        return 0;
      }
      unsigned int v100 = v99 - 1;
      uint64_t v59 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v100);
      if (*((_WORD *)v59 + 8) != 232) {
        return 0;
      }
      unint64_t v39 = v98;
      *((_DWORD *)v3 + 24) = v100;
      if (!v98) {
        return 0;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v101 = 2 * *((void *)v3 + 4);
        if (v101 <= 0x20) {
          unint64_t v101 = 32;
        }
        *((void *)v3 + 4) = v101;
        unint64_t v102 = v101 + 8;
        unint64_t v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
        uint64_t v104 = (char *)v103 + v102;
        *unint64_t v103 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v104;
        *((void *)v3 + 3) = v103;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 135;
      goto LABEL_186;
    case 'p':
      unint64_t v105 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v105) {
        return 0;
      }
      unint64_t v39 = v105;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v106 = 2 * *((void *)v3 + 4);
        if (v106 <= 0x20) {
          unint64_t v106 = 32;
        }
        *((void *)v3 + 4) = v106;
        unint64_t v107 = v106 + 8;
        unint64_t v108 = malloc_type_malloc(v106 + 8, 0xD0263BC5uLL);
        __int16 v109 = (char *)v108 + v107;
        void *v108 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v109;
        *((void *)v3 + 3) = v108;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 199;
      goto LABEL_154;
    case 'r':
      __int16 v110 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v110) {
        return 0;
      }
      unint64_t v39 = v110;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v111 = 2 * *((void *)v3 + 4);
        if (v111 <= 0x20) {
          unint64_t v111 = 32;
        }
        *((void *)v3 + 4) = v111;
        unint64_t v112 = v111 + 8;
        __int16 v113 = malloc_type_malloc(v111 + 8, 0xD0263BC5uLL);
        unint64_t v114 = (char *)v113 + v112;
        *__int16 v113 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v114;
        *((void *)v3 + 3) = v113;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 90;
LABEL_154:
      *(_WORD *)(v4 + 16) = v44;
      *(unsigned char *)(v4 + 18) = 0;
      goto LABEL_187;
    case 't':
      int v115 = *((_DWORD *)this + 24);
      if (v115 {
        && (int v116 = v115 - 1,
      }
            unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v115 - 1)),
      {
        *((_DWORD *)v3 + 24) = v116;
      }
      else
      {
        unint64_t v39 = 0;
      }
      int v130 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v3);
      unint64_t v4 = 0;
      if (!v39) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      uint64_t v59 = v130;
      if (!v130) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v131 = 2 * *((void *)v3 + 4);
        if (v131 <= 0x20) {
          unint64_t v131 = 32;
        }
        *((void *)v3 + 4) = v131;
        unint64_t v132 = v131 + 8;
        uint64_t v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
        int v134 = (char *)v133 + v132;
        *uint64_t v133 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v134;
        *((void *)v3 + 3) = v133;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 6;
LABEL_186:
      *(_WORD *)(v4 + 16) = v64;
      *(unsigned char *)(v4 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v59, v3);
LABEL_187:
      unint64_t v135 = (swift::Demangle::__runtime::Node *)v4;
      int v136 = v39;
      goto LABEL_188;
    case 'v':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v117 = *(char *)(v6 + v5);
      if (v117 == 100)
      {
        uint64_t v118 = 0;
      }
      else
      {
        unint64_t v4 = 0;
        if (v117 != 105) {
          return (swift::Demangle::__runtime::Node *)v4;
        }
        uint64_t v118 = 1;
      }
      unint64_t v145 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v145;
      if (!v145 || v145 + 24 > *((void *)this + 2))
      {
        unint64_t v146 = 2 * *((void *)this + 4);
        if (v146 <= 0x20) {
          unint64_t v146 = 32;
        }
        *((void *)this + 4) = v146;
        unint64_t v147 = v146 + 8;
        int v148 = malloc_type_malloc(v146 + 8, 0xD0263BC5uLL);
        *int v148 = *((void *)v3 + 3);
        unint64_t v145 = ((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v148 + v147;
        *((void *)v3 + 3) = v148;
      }
      *((void *)v3 + 1) = v145 + 24;
      *(_WORD *)(v145 + 16) = 52;
      *(unsigned char *)(v145 + 18) = 4;
      *(void *)unint64_t v145 = v118;
      int v149 = *((_DWORD *)v3 + 24);
      if (!v149) {
        return 0;
      }
      int v150 = v149 - 1;
      unint64_t v151 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v149 - 1));
      if (*((_WORD *)v151 + 8) != 232 && !swift::Demangle::__runtime::isContext()) {
        return 0;
      }
      *((_DWORD *)v3 + 24) = v150;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v152 = 2 * *((void *)v3 + 4);
        if (v152 <= 0x20) {
          unint64_t v152 = 32;
        }
        *((void *)v3 + 4) = v152;
        unint64_t v153 = v152 + 8;
        int v154 = malloc_type_malloc(v152 + 8, 0xD0263BC5uLL);
        unsigned int v155 = (char *)v154 + v153;
        *int v154 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v155;
        *((void *)v3 + 3) = v154;
      }
      *((void *)v3 + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 73;
      *(unsigned char *)(v4 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v145, v3);
      unint64_t v135 = (swift::Demangle::__runtime::Node *)v4;
      int v136 = v151;
LABEL_188:
      swift::Demangle::__runtime::Node::addChild(v135, v136, v3);
      return (swift::Demangle::__runtime::Node *)v4;
    default:
      return (swift::Demangle::__runtime::Node *)v4;
  }
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSpecialType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  int v7 = *(unsigned __int8 *)(v6 + v1);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      __int16 v14 = 64;
      goto LABEL_79;
    case 'B':
      __int16 v14 = 165;
      goto LABEL_79;
    case 'C':
      __int16 v14 = 22;
      goto LABEL_79;
    case 'D':
      int v15 = *((_DWORD *)this + 24);
      if (!v15) {
        return 0;
      }
      unsigned int v16 = v15 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v16);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v16;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v18 = 2 * *((void *)this + 4);
        if (v18 <= 0x20) {
          unint64_t v18 = 32;
        }
        *((void *)this + 4) = v18;
        unint64_t v19 = v18 + 8;
        unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
        BOOL v21 = (char *)v20 + v19;
        *unint64_t v20 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v21;
        *((void *)this + 3) = v20;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 57;
      goto LABEL_135;
    case 'E':
      __int16 v14 = 65;
      goto LABEL_79;
    case 'G':
    case 'g':
      return swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape(this, (char)v7);
    case 'K':
      __int16 v14 = 11;
      goto LABEL_79;
    case 'L':
      __int16 v14 = 166;
      goto LABEL_79;
    case 'M':
      unint64_t v23 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
      int v24 = *((_DWORD *)this + 24);
      if (!v24) {
        return 0;
      }
      unsigned int v25 = v24 - 1;
      unint64_t v26 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v25);
      if (*((_WORD *)v26 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v23;
      *((_DWORD *)this + 24) = v25;
      if (!v23) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2 * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        uint64_t v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        unint64_t v30 = (char *)v29 + v28;
        *uint64_t v29 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v31 = 145;
      goto LABEL_102;
    case 'P':
      unint64_t v32 = swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(this);
      int v33 = *((_DWORD *)this + 24);
      if (!v33) {
        return 0;
      }
      unsigned int v34 = v33 - 1;
      uint64_t v35 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v34);
      if (*((_WORD *)v35 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v32;
      *((_DWORD *)this + 24) = v34;
      if (!v32) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v36 = 2 * *((void *)this + 4);
        if (v36 <= 0x20) {
          unint64_t v36 = 32;
        }
        *((void *)this + 4) = v36;
        unint64_t v37 = v36 + 8;
        int v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
        unint64_t v39 = (char *)v38 + v37;
        *int v38 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v39;
        *((void *)this + 3) = v38;
      }
      *((void *)this + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 83;
      *(unsigned char *)(v17 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, v35, this);
      goto LABEL_136;
    case 'S':
      if (v5 >= v2) {
        return 0;
      }
      unint64_t v4 = 0;
      *((void *)this + 9) = v1 + 2;
      int v40 = *(char *)(v6 + v5);
      if (v40 > 111)
      {
        if (v40 == 112)
        {
          int v166 = *((_DWORD *)this + 24);
          if (v166
            && (unsigned int v167 = v166 - 1,
                unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v167),
                *((_WORD *)v43 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v167;
          }
          else
          {
            unint64_t v43 = 0;
          }
          __int16 v168 = 298;
        }
        else
        {
          if (v40 != 113) {
            return v4;
          }
          int v131 = *((_DWORD *)this + 24);
          if (v131
            && (unsigned int v132 = v131 - 1,
                unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v132),
                *((_WORD *)v43 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v132;
          }
          else
          {
            unint64_t v43 = 0;
          }
          __int16 v168 = 295;
        }
        goto LABEL_261;
      }
      if (v40 != 68)
      {
        if (v40 != 97) {
          return v4;
        }
        int v41 = *((_DWORD *)this + 24);
        if (v41
          && (unsigned int v42 = v41 - 1,
              unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v42),
              *((_WORD *)v43 + 8) == 232))
        {
          *((_DWORD *)this + 24) = v42;
        }
        else
        {
          unint64_t v43 = 0;
        }
        __int16 v168 = 296;
LABEL_261:
        int v169 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v168, v43);
        goto LABEL_268;
      }
      int v162 = *((_DWORD *)this + 24);
      if (v162)
      {
        int v163 = v162 - 1;
        uint64_t v164 = *((void *)this + 11);
        unsigned int v165 = *(swift::Demangle::__runtime::Node **)(v164 + 8 * (v162 - 1));
        if (*((_WORD *)v165 + 8) == 232)
        {
          *((_DWORD *)this + 24) = v163;
          if (v162 == 1) {
            goto LABEL_266;
          }
        }
        else
        {
          unsigned int v165 = 0;
          int v163 = *((_DWORD *)this + 24);
        }
        unsigned int v170 = v163 - 1;
        int v171 = *(swift::Demangle::__runtime::Node **)(v164 + 8 * v170);
        if (*((_WORD *)v171 + 8) == 232)
        {
          *((_DWORD *)this + 24) = v170;
          goto LABEL_267;
        }
      }
      else
      {
        unsigned int v165 = 0;
      }
LABEL_266:
      int v171 = 0;
LABEL_267:
      int v169 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 297, v171, v165);
LABEL_268:
      return swift::Demangle::__runtime::Demangler::createType(this, v169);
    case 'U':
      __int16 v14 = 245;
      goto LABEL_79;
    case 'X':
    case 'x':
      if (v7 == 88)
      {
        int v9 = *((_DWORD *)this + 24);
        if (!v9) {
          return 0;
        }
        unsigned int v10 = v9 - 1;
        __int16 v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
        if (*((_WORD *)v11 + 8) != 43) {
          return 0;
        }
        *((_DWORD *)this + 24) = v10;
        unint64_t v12 = swift::Demangle::__runtime::Demangler::popTypeList(this);
        if (!v12) {
          return 0;
        }
        unint64_t v13 = (swift::Demangle::__runtime::Node *)v12;
      }
      else
      {
        unint64_t v13 = 0;
        __int16 v11 = 0;
      }
      unint64_t v107 = swift::Demangle::__runtime::Demangler::popTypeList(this);
      if (!v107) {
        return 0;
      }
      unint64_t v108 = v107;
      unint64_t v109 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v109;
      if (!v109 || v109 + 24 > *((void *)this + 2))
      {
        unint64_t v110 = 2 * *((void *)this + 4);
        if (v110 <= 0x20) {
          unint64_t v110 = 32;
        }
        *((void *)this + 4) = v110;
        unint64_t v111 = v110 + 8;
        unint64_t v112 = malloc_type_malloc(v110 + 8, 0xD0263BC5uLL);
        __int16 v113 = (char *)v112 + v111;
        void *v112 = *((void *)this + 3);
        unint64_t v109 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v113;
        *((void *)this + 3) = v112;
      }
      unint64_t v114 = v109 + 24;
      *((void *)this + 1) = v109 + 24;
      *(_WORD *)(v109 + 16) = 212;
      *(unsigned char *)(v109 + 18) = 0;
      uint64_t v115 = *(unsigned __int8 *)(v108 + 18);
      switch(v115)
      {
        case 1:
          break;
        case 5:
          uint64_t v115 = *(unsigned int *)(v108 + 8);
          if (!v115) {
            goto LABEL_234;
          }
          break;
        case 2:
          uint64_t v115 = 2;
          break;
        default:
          goto LABEL_234;
      }
      int v172 = v13;
      unint64_t v133 = 0;
      break;
    case 'Y':
      return swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, 167);
    case 'Z':
      __int16 v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popTypeList(this);
      int v45 = *((_DWORD *)this + 24);
      if (v45
        && (unsigned int v46 = v45 - 1,
            unint64_t v47 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v46),
            *((_WORD *)v47 + 8) == 101))
      {
        *((_DWORD *)this + 24) = v46;
      }
      else
      {
        unint64_t v47 = 0;
      }
      int v116 = swift::Demangle::__runtime::Demangler::popContext(this);
      unint64_t v117 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v117;
      if (!v117 || v117 + 24 > *((void *)this + 2))
      {
        unint64_t v118 = 2 * *((void *)this + 4);
        if (v118 <= 0x20) {
          unint64_t v118 = 32;
        }
        *((void *)this + 4) = v118;
        unint64_t v119 = v118 + 8;
        std::string::size_type v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
        void *v120 = *((void *)this + 3);
        unint64_t v117 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v120 + v119;
        *((void *)this + 3) = v120;
      }
      unint64_t v4 = 0;
      *((void *)this + 1) = v117 + 24;
      *(_WORD *)(v117 + 16) = 1;
      *(unsigned char *)(v117 + 18) = 0;
      if (!v47 || !v117) {
        return v4;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v117, v47, this);
      if (!v116) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v117, v116, this);
      if (!v44) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v117, v44, this);
      return v117;
    case 'b':
      int v48 = *((_DWORD *)this + 24);
      if (!v48) {
        return 0;
      }
      unsigned int v49 = v48 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v49);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v49;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v50 = 2 * *((void *)this + 4);
        if (v50 <= 0x20) {
          unint64_t v50 = 32;
        }
        *((void *)this + 4) = v50;
        unint64_t v51 = v50 + 8;
        unint64_t v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
        unint64_t v53 = (char *)v52 + v51;
        *unint64_t v52 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v53;
        *((void *)this + 3) = v52;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 210;
      goto LABEL_135;
    case 'c':
      int v54 = *((_DWORD *)this + 24);
      if (v54
        && (unsigned int v55 = v54 - 1,
            uint64_t v56 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v55),
            *((_WORD *)v56 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v55;
      }
      else
      {
        uint64_t v56 = 0;
      }
      unint64_t v121 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
      unint64_t v4 = 0;
      if (!v56) {
        return v4;
      }
      __int16 v122 = (swift::Demangle::__runtime::Node *)v121;
      if (!v121) {
        return v4;
      }
      unint64_t v123 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v123;
      if (!v123 || v123 + 24 > *((void *)this + 2))
      {
        unint64_t v124 = 2 * *((void *)this + 4);
        if (v124 <= 0x20) {
          unint64_t v124 = 32;
        }
        *((void *)this + 4) = v124;
        unint64_t v125 = v124 + 8;
        unint64_t v126 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
        *unint64_t v126 = *((void *)this + 3);
        unint64_t v123 = ((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v126 + v125;
        *((void *)this + 3) = v126;
      }
      *((void *)this + 1) = v123 + 24;
      *(_WORD *)(v123 + 16) = 191;
      *(unsigned char *)(v123 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v123, v122, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v123, v56, this);
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v127 = 2 * *((void *)this + 4);
        if (v127 <= 0x20) {
          unint64_t v127 = 32;
        }
        *((void *)this + 4) = v127;
        unint64_t v128 = v127 + 8;
        unint64_t v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
        int v130 = (char *)v129 + v128;
        void *v129 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v130;
        *((void *)this + 3) = v129;
      }
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 232;
      *(unsigned char *)(v4 + 18) = 0;
      uint64_t v104 = (swift::Demangle::__runtime::Node *)v4;
      unint64_t v105 = (swift::Demangle::__runtime::Node *)v123;
      goto LABEL_143;
    case 'e':
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || (unint64_t v57 = *((void *)this + 2), v17 + 24 > v57))
      {
        unint64_t v58 = 2 * *((void *)this + 4);
        if (v58 <= 0x20) {
          unint64_t v58 = 32;
        }
        *((void *)this + 4) = v58;
        unint64_t v59 = v58 + 8;
        unint64_t v60 = malloc_type_malloc(v58 + 8, 0xD0263BC5uLL);
        unint64_t v57 = (unint64_t)v60 + v59;
        *unint64_t v60 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v60 + v59;
        *((void *)this + 3) = v60;
      }
      *(_WORD *)(v17 + 16) = 63;
      *(unsigned char *)(v17 + 18) = 0;
      unint64_t v4 = (v17 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (v4) {
        BOOL v61 = v4 + 24 > v57;
      }
      else {
        BOOL v61 = 1;
      }
      if (!v61) {
        goto LABEL_142;
      }
      goto LABEL_139;
    case 'f':
      __int16 v14 = 222;
LABEL_79:
      int v62 = 0;
      goto LABEL_80;
    case 'j':
      return swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType(this);
    case 'l':
      unint64_t v4 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
      if (!v4) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v63 = 2 * *((void *)this + 4);
        if (v63 <= 0x20) {
          unint64_t v63 = 32;
        }
        *((void *)this + 4) = v63;
        unint64_t v64 = v63 + 8;
        int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
        int v66 = (char *)v65 + v64;
        *int v65 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v66;
        *((void *)this + 3) = v65;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 192;
      goto LABEL_135;
    case 'm':
      unint64_t v67 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
      int v68 = *((_DWORD *)this + 24);
      if (!v68) {
        return 0;
      }
      unsigned int v69 = v68 - 1;
      unint64_t v26 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v69);
      if (*((_WORD *)v26 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v67;
      *((_DWORD *)this + 24) = v69;
      if (!v67) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v70 = 2 * *((void *)this + 4);
        if (v70 <= 0x20) {
          unint64_t v70 = 32;
        }
        *((void *)this + 4) = v70;
        unint64_t v71 = v70 + 8;
        __int16 v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
        unint64_t v73 = (char *)v72 + v71;
        *__int16 v72 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v73;
        *((void *)this + 3) = v72;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v31 = 69;
LABEL_102:
      *(_WORD *)(v17 + 16) = v31;
      *(unsigned char *)(v17 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v4, this);
      unint64_t v74 = (swift::Demangle::__runtime::Node *)v17;
      int v75 = v26;
      goto LABEL_137;
    case 'o':
      int v76 = *((_DWORD *)this + 24);
      if (!v76) {
        return 0;
      }
      unsigned int v77 = v76 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v77);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v77;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v78 = 2 * *((void *)this + 4);
        if (v78 <= 0x20) {
          unint64_t v78 = 32;
        }
        *((void *)this + 4) = v78;
        unint64_t v79 = v78 + 8;
        uint64_t v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
        unsigned int v81 = (char *)v80 + v79;
        *uint64_t v80 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v81;
        *((void *)this + 3) = v80;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 248;
      goto LABEL_135;
    case 'p':
      int v82 = *((_DWORD *)this + 24);
      if (!v82) {
        return 0;
      }
      unsigned int v83 = v82 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v83);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v83;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v84 = 2 * *((void *)this + 4);
        if (v84 <= 0x20) {
          unint64_t v84 = 32;
        }
        *((void *)this + 4) = v84;
        unint64_t v85 = v84 + 8;
        unsigned int v86 = malloc_type_malloc(v84 + 8, 0xD0263BC5uLL);
        unint64_t v87 = (char *)v86 + v85;
        *unsigned int v86 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v87;
        *((void *)this + 3) = v86;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 69;
      goto LABEL_135;
    case 'u':
      int v88 = *((_DWORD *)this + 24);
      if (!v88) {
        return 0;
      }
      unsigned int v89 = v88 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v89);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v89;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v90 = 2 * *((void *)this + 4);
        if (v90 <= 0x20) {
          unint64_t v90 = 32;
        }
        *((void *)this + 4) = v90;
        unint64_t v91 = v90 + 8;
        unint64_t v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
        unint64_t v93 = (char *)v92 + v91;
        void *v92 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v93;
        *((void *)this + 3) = v92;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 249;
      goto LABEL_135;
    case 'w':
      int v94 = *((_DWORD *)this + 24);
      if (!v94) {
        return 0;
      }
      unsigned int v95 = v94 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v95);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v95;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v96 = 2 * *((void *)this + 4);
        if (v96 <= 0x20) {
          unint64_t v96 = 32;
        }
        *((void *)this + 4) = v96;
        unint64_t v97 = v96 + 8;
        int v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
        int v99 = (char *)v98 + v97;
        *int v98 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v99;
        *((void *)this + 3) = v98;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 247;
LABEL_135:
      *(_WORD *)(v17 + 16) = v22;
      *(unsigned char *)(v17 + 18) = 0;
LABEL_136:
      unint64_t v74 = (swift::Demangle::__runtime::Node *)v17;
      int v75 = (swift::Demangle::__runtime::Node *)v4;
LABEL_137:
      swift::Demangle::__runtime::Node::addChild(v74, v75, this);
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
LABEL_139:
        unint64_t v100 = 2 * *((void *)this + 4);
        if (v100 <= 0x20) {
          unint64_t v100 = 32;
        }
        *((void *)this + 4) = v100;
        unint64_t v101 = v100 + 8;
        unint64_t v102 = malloc_type_malloc(v100 + 8, 0xD0263BC5uLL);
        unint64_t v103 = (char *)v102 + v101;
        void *v102 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v103;
        *((void *)this + 3) = v102;
      }
LABEL_142:
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 232;
      *(unsigned char *)(v4 + 18) = 0;
      uint64_t v104 = (swift::Demangle::__runtime::Node *)v4;
      unint64_t v105 = (swift::Demangle::__runtime::Node *)v17;
      goto LABEL_143;
    case 'z':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v106 = *(char *)(v6 + v5);
      if (v106 == 67)
      {
        __int16 v14 = 22;
        int v62 = 1;
      }
      else
      {
        if (v106 != 66) {
          return 0;
        }
        __int16 v14 = 165;
        int v62 = 1;
      }
LABEL_80:
      return swift::Demangle::__runtime::Demangler::popFunctionType(this, v14, v62);
    default:
      return v4;
  }
  do
  {
    unint64_t v139 = *(unsigned __int8 *)(v108 + 18);
    unsigned int v140 = v139 - 1;
    if (v139 == 1) {
      goto LABEL_201;
    }
    if (v139 != 5)
    {
      if (v139 != 2) {
        goto LABEL_206;
      }
      unint64_t v139 = 2;
LABEL_201:
      if (v139 <= v133) {
        goto LABEL_206;
      }
      goto LABEL_202;
    }
    if (*(unsigned int *)(v108 + 8) <= v133)
    {
LABEL_206:
      unint64_t v142 = 0;
      goto LABEL_207;
    }
LABEL_202:
    unint64_t v141 = v108;
    if (v140 >= 2) {
      unint64_t v141 = *(void *)v108;
    }
    unint64_t v142 = *(void *)(v141 + 8 * v133);
LABEL_207:
    int v143 = *(unsigned __int8 *)(v142 + 18);
    unint64_t v144 = v142;
    if ((v143 - 1) >= 2) {
      unint64_t v144 = *(void *)v142;
    }
    if (*(_WORD *)(*(void *)v144 + 16) == 123)
    {
      if ((v143 - 1) >= 2)
      {
        if (v143 != 5 || !*(_DWORD *)(v142 + 8))
        {
          unint64_t v145 = 0;
LABEL_217:
          int v147 = *((unsigned __int8 *)v145 + 18);
          if ((v147 - 1) >= 2)
          {
            if (v147 != 5 || !*((_DWORD *)v145 + 2)) {
              goto LABEL_228;
            }
            unint64_t v145 = *(swift::Demangle::__runtime::Node **)v145;
          }
          int v148 = *(swift::Demangle::__runtime::Node **)v145;
          if (*(void *)v145)
          {
            unint64_t v142 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v142;
            if (!v142 || v142 + 24 > *((void *)this + 2))
            {
              unint64_t v149 = 2 * *((void *)this + 4);
              if (v149 <= 0x20) {
                unint64_t v149 = 32;
              }
              *((void *)this + 4) = v149;
              unint64_t v150 = v149 + 8;
              unint64_t v151 = malloc_type_malloc(v149 + 8, 0xD0263BC5uLL);
              unint64_t v152 = (char *)v151 + v150;
              void *v151 = *((void *)this + 3);
              unint64_t v142 = ((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = v152;
              *((void *)this + 3) = v151;
            }
            *((void *)this + 1) = v142 + 24;
            *(_WORD *)(v142 + 16) = 232;
            *(unsigned char *)(v142 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v142, v148, this);
            goto LABEL_229;
          }
LABEL_228:
          unint64_t v142 = 0;
LABEL_229:
          __int16 v146 = 213;
          goto LABEL_230;
        }
        unint64_t v142 = *(void *)v142;
      }
      unint64_t v145 = *(swift::Demangle::__runtime::Node **)v142;
      goto LABEL_217;
    }
    __int16 v146 = 214;
LABEL_230:
    unint64_t v138 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v138;
    if (!v138 || v138 + 24 > *((void *)this + 2))
    {
      unint64_t v134 = 2 * *((void *)this + 4);
      if (v134 <= 0x20) {
        unint64_t v134 = 32;
      }
      *((void *)this + 4) = v134;
      unint64_t v135 = v134 + 8;
      int v136 = malloc_type_malloc(v134 + 8, 0xD0263BC5uLL);
      uint64_t v137 = (char *)v136 + v135;
      *int v136 = *((void *)this + 3);
      unint64_t v138 = ((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v137;
      *((void *)this + 3) = v136;
    }
    *((void *)this + 1) = v138 + 24;
    *(_WORD *)(v138 + 16) = v146;
    *(unsigned char *)(v138 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v138, (swift::Demangle::__runtime::Node *)v142, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v109, (swift::Demangle::__runtime::Node *)v138, this);
    ++v133;
  }
  while (v115 != v133);
  unint64_t v114 = *((void *)this + 1);
  unint64_t v13 = v172;
LABEL_234:
  unint64_t v153 = (v114 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v153;
  if (!v153 || v153 + 24 > *((void *)this + 2))
  {
    unint64_t v154 = 2 * *((void *)this + 4);
    if (v154 <= 0x20) {
      unint64_t v154 = 32;
    }
    *((void *)this + 4) = v154;
    unint64_t v155 = v154 + 8;
    int v156 = malloc_type_malloc(v154 + 8, 0xD0263BC5uLL);
    int v157 = (char *)v156 + v155;
    void *v156 = *((void *)this + 3);
    unint64_t v153 = ((unint64_t)v156 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v157;
    *((void *)this + 3) = v156;
  }
  *((void *)this + 1) = v153 + 24;
  *(_WORD *)(v153 + 16) = 211;
  *(unsigned char *)(v153 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v153, (swift::Demangle::__runtime::Node *)v109, this);
  if (v11)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v153, v11, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v153, v13, this);
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v158 = 2 * *((void *)this + 4);
    if (v158 <= 0x20) {
      unint64_t v158 = 32;
    }
    *((void *)this + 4) = v158;
    unint64_t v159 = v158 + 8;
    unsigned int v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
    int v161 = (char *)v160 + v159;
    void *v160 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v161;
    *((void *)this + 3) = v160;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  uint64_t v104 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t v105 = (swift::Demangle::__runtime::Node *)v153;
LABEL_143:
  swift::Demangle::__runtime::Node::addChild(v104, v105, this);
  return v4;
}

uint64_t anonymous namespace'::isEntity(int a1)
{
  if (a1 == 232) {
    return 1;
  }
  else {
    return swift::Demangle::__runtime::isContext();
  }
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionType(swift::Demangle::__runtime::Demangler *this, __int16 a2, int a3)
{
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    int v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unsigned int v10 = (char *)v9 + v8;
    void *v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 0;
  if (a3)
  {
    __int16 v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(this);
    if (v11) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v11, this);
    }
  }
  int v12 = *((_DWORD *)this + 24);
  if (v12)
  {
    unint64_t v13 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
    if (*((_WORD *)v13 + 8) != 349
      || (*((_DWORD *)this + 24) = v12 - 1,
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v13, this),
          (int v12 = *((_DWORD *)this + 24)) != 0))
    {
      __int16 v14 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
      if (*((_WORD *)v14 + 8) != 67
        || (*((_DWORD *)this + 24) = v12 - 1,
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v14, this),
            (int v12 = *((_DWORD *)this + 24)) != 0))
      {
        int v15 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
        if (*((_WORD *)v15 + 8) != 129
          || (*((_DWORD *)this + 24) = v12 - 1,
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v15, this),
              (int v12 = *((_DWORD *)this + 24)) != 0))
        {
          unsigned int v16 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
          if (*((_WORD *)v16 + 8) != 130
            || (*((_DWORD *)this + 24) = v12 - 1,
                swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v16, this),
                (int v12 = *((_DWORD *)this + 24)) != 0))
          {
            unint64_t v17 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
            if (*((_WORD *)v17 + 8) != 68
              || (*((_DWORD *)this + 24) = v12 - 1,
                  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v17, this),
                  (int v12 = *((_DWORD *)this + 24)) != 0))
            {
              unint64_t v18 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
              if ((*((_WORD *)v18 + 8) & 0xFFFE) != 0x110
                || (*((_DWORD *)this + 24) = v12 - 1,
                    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v18, this),
                    (int v12 = *((_DWORD *)this + 24)) != 0))
              {
                unint64_t v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
                if (*((_WORD *)v19 + 8) != 66
                  || (*((_DWORD *)this + 24) = v12 - 1,
                      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v19, this),
                      (int v12 = *((_DWORD *)this + 24)) != 0))
                {
                  unsigned int v20 = v12 - 1;
                  BOOL v21 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v20);
                  if (*((_WORD *)v21 + 8) == 271)
                  {
                    *((_DWORD *)this + 24) = v20;
                    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v21, this);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __int16 v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams((uint64_t)this, 3);
  if (v22) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v22, this);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams((uint64_t)this, 207);
  unint64_t v24 = 0;
  if (v6 && v23)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v23, this);
    unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v24;
    if (!v24 || v24 + 24 > *((void *)this + 2))
    {
      unint64_t v25 = 2 * *((void *)this + 4);
      if (v25 <= 0x20) {
        unint64_t v25 = 32;
      }
      *((void *)this + 4) = v25;
      unint64_t v26 = v25 + 8;
      unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      unint64_t v28 = (char *)v27 + v26;
      void *v27 = *((void *)this + 3);
      unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v28;
      *((void *)this + 3) = v27;
    }
    *((void *)this + 1) = v24 + 24;
    *(_WORD *)(v24 + 16) = 232;
    *(unsigned char *)(v24 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v24, (swift::Demangle::__runtime::Node *)v6, this);
  }
  return v24;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFunctionEntity(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 < *((void *)this + 8))
  {
    unint64_t v3 = 0;
    *((void *)this + 9) = v1 + 1;
    int v4 = *(char *)(*((void *)this + 7) + v1) - 65;
    __int16 v5 = 0;
    int v6 = 0;
    __int16 v7 = 70;
    __int16 v8 = 31;
    int v9 = 0;
    unsigned int v10 = 0;
    switch(v4)
    {
      case 0:
        unint64_t v3 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        int v9 = 0;
        unsigned int v10 = 0;
        int v6 = 3;
        __int16 v8 = 33;
        goto LABEL_35;
      case 2:
        goto LABEL_11;
      case 3:
        goto LABEL_35;
      case 4:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 104;
        goto LABEL_35;
      case 12:
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMacroExpansion(this);
      case 15:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 178;
        goto LABEL_35;
      case 20:
        goto LABEL_24;
      case 22:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 179;
        goto LABEL_35;
      case 34:
        __int16 v5 = 29;
LABEL_11:
        __int16 v8 = v5;
        int v12 = *((_DWORD *)this + 24);
        if (v12)
        {
          int v13 = v12 - 1;
          uint64_t v14 = *((void *)this + 11);
          unint64_t v3 = *(void *)(v14 + 8 * (v12 - 1));
          if (*(_WORD *)(v3 + 16) == 176)
          {
            *((_DWORD *)this + 24) = v13;
            if (v12 == 1) {
              goto LABEL_33;
            }
          }
          else
          {
            unint64_t v3 = 0;
            int v13 = *((_DWORD *)this + 24);
          }
          unsigned int v18 = v13 - 1;
          int v9 = *(swift::Demangle::__runtime::Node **)(v14 + 8 * v18);
          if (*((_WORD *)v9 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v18;
            goto LABEL_34;
          }
        }
        else
        {
          unint64_t v3 = 0;
        }
LABEL_33:
        int v9 = 0;
LABEL_34:
        unsigned int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v9);
        int v6 = 1;
LABEL_35:
        unint64_t v19 = (swift::Demangle::__runtime::Node *)v3;
        unsigned int v20 = swift::Demangle::__runtime::Demangler::popContext(this);
        if (v20)
        {
          BOOL v21 = v20;
          unint64_t v22 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v22;
          if (!v22 || v22 + 24 > *((void *)this + 2))
          {
            unint64_t v23 = 2 * *((void *)this + 4);
            if (v23 <= 0x20) {
              unint64_t v23 = 32;
            }
            *((void *)this + 4) = v23;
            unint64_t v24 = v23 + 8;
            unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
            unint64_t v26 = (char *)v25 + v24;
            *unint64_t v25 = *((void *)this + 3);
            unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v26;
            *((void *)this + 3) = v25;
          }
          *((void *)this + 1) = v22 + 24;
          *(_WORD *)(v22 + 16) = v8;
          *(unsigned char *)(v22 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v21, this);
          if (v6 != 1)
          {
LABEL_42:
            if (v6 == 2)
            {
              unint64_t v3 = 0;
              if (!v19 || !v22) {
                return (swift::Demangle::__runtime::Node *)v3;
              }
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v19, this);
              if (!v9) {
                return 0;
              }
              unint64_t v27 = (swift::Demangle::__runtime::Node *)v22;
              unint64_t v28 = v9;
              goto LABEL_59;
            }
            if (v6 == 3)
            {
              unint64_t v3 = 0;
              if (!v19 || !v22) {
                return (swift::Demangle::__runtime::Node *)v3;
              }
              goto LABEL_54;
            }
            return (swift::Demangle::__runtime::Node *)v22;
          }
        }
        else
        {
          unint64_t v22 = 0;
          if (v6 != 1) {
            goto LABEL_42;
          }
        }
        if (v10 && v22) {
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v10, this);
        }
        unint64_t v3 = 0;
        if (!v9 || !v22) {
          return (swift::Demangle::__runtime::Node *)v3;
        }
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v9, this);
        if (v19)
        {
LABEL_54:
          unint64_t v27 = (swift::Demangle::__runtime::Node *)v22;
          unint64_t v28 = v19;
LABEL_59:
          swift::Demangle::__runtime::Node::addChild(v27, v28, this);
        }
        return (swift::Demangle::__runtime::Node *)v22;
      case 35:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 50;
        goto LABEL_35;
      case 36:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 103;
        goto LABEL_35;
      case 40:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 125;
        goto LABEL_35;
      case 44:
        __int16 v15 = 138;
        goto LABEL_20;
      case 47:
        __int16 v15 = 262;
LABEL_20:
        return swift::Demangle::__runtime::Demangler::demangleEntity(this, v15);
      case 52:
        __int16 v7 = 117;
LABEL_24:
        unint64_t v3 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        int v16 = *((_DWORD *)this + 24);
        if (v16
          && (unsigned int v17 = v16 - 1,
              int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v17),
              *((_WORD *)v9 + 8) == 232))
        {
          unsigned int v10 = 0;
          *((_DWORD *)this + 24) = v17;
        }
        else
        {
          int v9 = 0;
          unsigned int v10 = 0;
        }
        int v6 = 2;
        __int16 v8 = v7;
        goto LABEL_35;
      default:
        return (swift::Demangle::__runtime::Node *)v3;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
  int v3 = *((_DWORD *)this + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3 - 1;
  __int16 v5 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v4);
  unsigned int v6 = v5[8];
  BOOL v7 = v6 > 0x31;
  uint64_t v8 = (1 << v6) & 0x380000C000000;
  if (v7 || v8 == 0) {
    return 0;
  }
  unsigned int v10 = (swift::Demangle::__runtime::Node *)v2;
  *((_DWORD *)this + 24) = v4;
  if (!v2) {
    return 0;
  }
  unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    uint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    __int16 v15 = (char *)v14 + v13;
    *uint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 206;
  *(unsigned char *)(v11 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v10, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v5, this);
  return v11;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleSubscript(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2)
  {
    int v3 = v2 - 1;
    uint64_t v4 = *((void *)this + 11);
    __int16 v5 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v2 - 1));
    if (*((_WORD *)v5 + 8) == 176)
    {
      *((_DWORD *)this + 24) = v3;
      if (v2 == 1) {
        goto LABEL_9;
      }
    }
    else
    {
      __int16 v5 = 0;
      int v3 = *((_DWORD *)this + 24);
    }
    unsigned int v6 = v3 - 1;
    BOOL v7 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * v6);
    if (*((_WORD *)v7 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v6;
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v5 = 0;
  }
LABEL_9:
  BOOL v7 = 0;
LABEL_10:
  uint64_t v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v7);
  int v9 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (!v7) {
    return 0;
  }
  unsigned int v10 = v9;
  unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    uint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    __int16 v15 = (char *)v14 + v13;
    *uint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  int v16 = 0;
  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 220;
  *(unsigned char *)(v11 + 18) = 0;
  if (v10 && v11)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v10, this);
    if (v8) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v8, this);
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v7, this);
    if (v5) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v5, this);
    }
    int v16 = (swift::Demangle::__runtime::Node *)v11;
  }
  unsigned int v17 = setParentForOpaqueReturnTypeNodes(this, v16, v7);

  return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v17);
}

uint64_t swift::Demangle::__runtime::Demangler::demangleGenericSignature(swift::Demangle::__runtime::Demangler *this, int a2)
{
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || (unint64_t v5 = *((void *)this + 2), v4 + 24 > v5))
  {
    unint64_t v6 = 2 * *((void *)this + 4);
    if (v6 <= 0x20) {
      unint64_t v6 = 32;
    }
    *((void *)this + 4) = v6;
    unint64_t v7 = v6 + 8;
    uint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    unint64_t v5 = (unint64_t)v8 + v7;
    *uint64_t v8 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v5;
    *((void *)this + 3) = v8;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 43;
  *(unsigned char *)(v4 + 18) = 0;
  if (!a2)
  {
    unint64_t v22 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v22;
    if (v22) {
      BOOL v23 = v22 + 24 > v5;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23)
    {
      unint64_t v24 = 2 * *((void *)this + 4);
      if (v24 <= 0x20) {
        unint64_t v24 = 32;
      }
      *((void *)this + 4) = v24;
      unint64_t v25 = v24 + 8;
      unint64_t v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      void *v26 = *((void *)this + 3);
      unint64_t v22 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v26 + v25;
      *((void *)this + 3) = v26;
    }
    *((void *)this + 1) = v22 + 24;
    *(_WORD *)(v22 + 16) = 37;
    *(unsigned char *)(v22 + 18) = 4;
    *(void *)unint64_t v22 = 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v22, this);
LABEL_39:
    uint64_t v27 = *(unsigned __int8 *)(v4 + 18);
    uint64_t v28 = v27;
    if (v27 != 1)
    {
      if (v27 != 5)
      {
        if (v27 == 2)
        {
          uint64_t v28 = 2;
          int v29 = *((_DWORD *)this + 24);
          if (!v29) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v28 = 0;
          int v29 = *((_DWORD *)this + 24);
          if (!v29) {
            goto LABEL_49;
          }
        }
        goto LABEL_54;
      }
      uint64_t v28 = *(unsigned int *)(v4 + 8);
    }
    int v29 = *((_DWORD *)this + 24);
    if (!v29)
    {
LABEL_49:
      if (v27 != 5) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }
    do
    {
LABEL_54:
      int v30 = v29 - 1;
      __int16 v31 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * (v29 - 1));
      int v32 = v31[8];
      if ((v32 - 39) >= 4 && v32 != 354 && v32 != 36) {
        break;
      }
      *((_DWORD *)this + 24) = v30;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v31, this);
      int v29 = *((_DWORD *)this + 24);
    }
    while (v29);
    LODWORD(v27) = *(unsigned __int8 *)(v4 + 18);
    if (v27 != 5)
    {
LABEL_50:
      if (v27 == 2 && !v28) {
        *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
      }
      return v4;
    }
LABEL_58:
    uint64_t v33 = *(unsigned int *)(v4 + 8);
    if (v28 != v33)
    {
      unsigned int v34 = (void *)(*(void *)v4 + 8 * v33 - 8);
      if ((unint64_t)v34 > *(void *)v4 + 8 * v28)
      {
        unint64_t v35 = *(void *)v4 + 8 * v28 + 8;
        do
        {
          uint64_t v36 = *(void *)(v35 - 8);
          *(void *)(v35 - 8) = *v34;
          *v34-- = v36;
          BOOL v37 = v35 >= (unint64_t)v34;
          v35 += 8;
        }
        while (!v37);
      }
    }
    return v4;
  }
  unint64_t v10 = *((void *)this + 8);
  unint64_t v9 = *((void *)this + 9);
  if (v9 < v10)
  {
    while (1)
    {
      uint64_t v11 = *((void *)this + 7);
      int v12 = *(unsigned __int8 *)(v11 + v9);
      switch(v12)
      {
        case '_':
          *((void *)this + 9) = v9 + 1;
          unsigned int v16 = 1;
          break;
        case 'z':
          unsigned int v16 = 0;
          *((void *)this + 9) = v9 + 1;
          break;
        case 'l':
          *((void *)this + 9) = v9 + 1;
          goto LABEL_39;
        default:
          if ((v12 - 48) > 9) {
            return 0;
          }
          int v13 = 0;
          while (1)
          {
            int v14 = *(unsigned __int8 *)(v11 + v9);
            if ((v14 - 48) > 9) {
              break;
            }
            int v15 = v14 + 10 * v13 - 48;
            if (v15 >= v13)
            {
              *((void *)this + 9) = ++v9;
              int v13 = v15;
              if (v10 != v9) {
                continue;
              }
            }
            return 0;
          }
          uint64_t result = 0;
          if (v13 < 0 || v9 >= v10 || v14 != 95) {
            return result;
          }
          *((void *)this + 9) = v9 + 1;
          unsigned int v16 = v13 + 2;
          break;
      }
      unint64_t v18 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v18;
      if (!v18 || v18 + 24 > *((void *)this + 2))
      {
        unint64_t v19 = 2 * *((void *)this + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32;
        }
        *((void *)this + 4) = v19;
        unint64_t v20 = v19 + 8;
        BOOL v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *BOOL v21 = *((void *)this + 3);
        unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v21 + v20;
        *((void *)this + 3) = v21;
      }
      *((void *)this + 1) = v18 + 24;
      *(_WORD *)(v18 + 16) = 37;
      *(unsigned char *)(v18 + 18) = 4;
      *(void *)unint64_t v18 = v16;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v18, this);
      uint64_t result = 0;
      unint64_t v10 = *((void *)this + 8);
      unint64_t v9 = *((void *)this + 9);
      if (v9 >= v10) {
        return result;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  unint64_t v4 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 101) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  uint64_t v5 = v4[1];
  if (!v5)
  {
    uint64_t v21 = 0;
    unint64_t v7 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = *v4;
  uint64_t v41 = *v4;
  do
  {
    uint64_t v10 = *(char *)(v9 + v6);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 - 97) > 0x19 || ((0x17007A2uLL >> (v10 - 97))) {
        return 0;
      }
      LOBYTE(v10) = swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(void)::op_char_table[v10 - 97];
    }
    if (v6 >= v8)
    {
      uint64_t v11 = &v7[v8];
      int v12 = (char *)*((void *)this + 1);
      if (v11 == v12)
      {
        int v14 = v11 + 1;
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v14 <= v13)
        {
          *((void *)this + 1) = v14;
          LODWORD(v15) = 1;
LABEL_6:
          v8 += v15;
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v13 = *((void *)this + 2);
      }
      if (2 * v8 <= 4) {
        uint64_t v15 = 4;
      }
      else {
        uint64_t v15 = 2 * v8;
      }
      uint64_t v16 = v15 + v8;
      if (!v12 || (unint64_t)&v12[v16] > v13)
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        unint64_t v20 = (char *)v19 + v18;
        *unint64_t v19 = *((void *)this + 3);
        int v12 = (char *)(v19 + 1);
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }
      *((void *)this + 1) = &v12[v16];
      if (v8) {
        memcpy(v12, v7, v8);
      }
      unint64_t v7 = v12;
      uint64_t v9 = v41;
      goto LABEL_6;
    }
LABEL_7:
    v7[v6++] = v10;
  }
  while (v5 != v6);
  uint64_t v21 = v6;
LABEL_29:
  unint64_t v22 = *((void *)this + 9);
  if (v22 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v22 + 1;
  int v23 = *(char *)(*((void *)this + 7) + v22);
  if (v23 == 80)
  {
    unint64_t v24 = (void *)((char *)this + 8);
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (result && result + 24 <= *((void *)this + 2))
    {
      __int16 v32 = 173;
      goto LABEL_50;
    }
    unint64_t v33 = 2 * *((void *)this + 4);
    if (v33 <= 0x20) {
      unint64_t v33 = 32;
    }
    *((void *)this + 4) = v33;
    unint64_t v34 = v33 + 8;
    unint64_t v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    uint64_t v36 = *((void *)this + 3);
    *((void *)this + 3) = v35;
    int v30 = (char *)v35 + v34;
    void *v35 = v36;
    __int16 v31 = v35 + 1;
    __int16 v32 = 173;
    goto LABEL_49;
  }
  if (v23 == 112)
  {
    unint64_t v24 = (void *)((char *)this + 8);
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (result && result + 24 <= *((void *)this + 2))
    {
      __int16 v32 = 175;
      goto LABEL_50;
    }
    unint64_t v37 = 2 * *((void *)this + 4);
    if (v37 <= 0x20) {
      unint64_t v37 = 32;
    }
    *((void *)this + 4) = v37;
    unint64_t v38 = v37 + 8;
    unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    uint64_t v40 = *((void *)this + 3);
    *((void *)this + 3) = v39;
    int v30 = (char *)v39 + v38;
    *unint64_t v39 = v40;
    __int16 v31 = v39 + 1;
    __int16 v32 = 175;
LABEL_49:
    unint64_t result = ((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v30;
    goto LABEL_50;
  }
  if (v23 != 105) {
    return 0;
  }
  unint64_t v24 = (void *)((char *)this + 8);
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v26 = 2 * *((void *)this + 4);
    if (v26 <= 0x20) {
      unint64_t v26 = 32;
    }
    *((void *)this + 4) = v26;
    unint64_t v27 = v26 + 8;
    uint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    uint64_t v29 = *((void *)this + 3);
    *((void *)this + 3) = v28;
    int v30 = (char *)v28 + v27;
    void *v28 = v29;
    __int16 v31 = v28 + 1;
    __int16 v32 = 124;
    goto LABEL_49;
  }
  __int16 v32 = 124;
LABEL_50:
  *unint64_t v24 = result + 24;
  *(_WORD *)(result + 16) = v32;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v7;
  *(void *)(result + 8) = v21;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleProtocolListType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
  if (!v2) {
    return 0;
  }
  int v3 = (swift::Demangle::__runtime::Node *)v2;
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned int v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v3, this);
  return v4;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= v2)
  {
LABEL_10:
    unsigned int v5 = -999;
  }
  else
  {
    uint64_t v4 = *((void *)this + 7);
    switch(*(unsigned char *)(v4 + v3))
    {
      case '_':
        *((void *)this + 9) = v3 + 1;
        unsigned int v5 = 1;
        goto LABEL_11;
      case 'd':
        unint64_t v11 = v3 + 1;
        *((void *)this + 9) = v3 + 1;
        if (v3 + 1 >= v2) {
          goto LABEL_31;
        }
        int v12 = *(unsigned __int8 *)(v4 + v11);
        if (v12 == 95)
        {
          unint64_t v11 = v3 + 2;
          *((void *)this + 9) = v3 + 2;
          unsigned int v9 = 1;
          goto LABEL_32;
        }
        if ((v12 - 48) > 9) {
          goto LABEL_31;
        }
        int v16 = 0;
        while (2)
        {
          int v17 = *(unsigned __int8 *)(v4 + v11);
          if ((v17 - 48) > 9)
          {
            unsigned int v9 = -999;
            if ((v16 & 0x80000000) == 0 && v11 < v2 && v17 == 95)
            {
              *((void *)this + 9) = ++v11;
              unsigned int v9 = v16 + 2;
            }
          }
          else
          {
            int v18 = v17 + 10 * v16 - 48;
            if (v18 >= v16)
            {
              *((void *)this + 9) = ++v11;
              int v16 = v18;
              if (v2 == v11)
              {
                unsigned int v5 = -1000;
                unsigned int v9 = -999;
                goto LABEL_12;
              }
              continue;
            }
LABEL_31:
            unsigned int v9 = -999;
          }
          break;
        }
LABEL_32:
        if (v11 >= v2) {
          goto LABEL_40;
        }
        int v19 = *(unsigned __int8 *)(v4 + v11);
        if (v19 == 95)
        {
          unsigned int v5 = 0;
          *((void *)this + 9) = v11 + 1;
          goto LABEL_12;
        }
        if ((v19 - 48) > 9) {
          goto LABEL_40;
        }
        int v20 = 0;
        while (1)
        {
          int v21 = *(unsigned __int8 *)(v4 + v11);
          if ((v21 - 48) > 9) {
            break;
          }
          int v22 = v21 + 10 * v20 - 48;
          if (v22 >= v20)
          {
            *((void *)this + 9) = ++v11;
            int v20 = v22;
            if (v2 != v11) {
              continue;
            }
          }
LABEL_40:
          unsigned int v5 = -1000;
          goto LABEL_12;
        }
        unsigned int v5 = -1000;
        if ((v20 & 0x80000000) == 0 && v11 < v2 && v21 == 95)
        {
          *((void *)this + 9) = v11 + 1;
          unsigned int v5 = v20 + 1;
        }
        goto LABEL_12;
      case 's':
        *((void *)this + 9) = v3 + 1;
        uint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = result;
        if (!result || (unint64_t)(result + 24) > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          uint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          *uint64_t v15 = *((void *)this + 3);
          uint64_t result = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v15 + v14;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = result + 24;
        *(_WORD *)(result + 16) = 85;
        *(unsigned char *)(result + 18) = 0;
        return result;
      case 'z':
        *((void *)this + 9) = v3 + 1;
        unsigned int v9 = 0;
        unsigned int v5 = 0;
        goto LABEL_12;
      default:
        if (*(unsigned __int8 *)(v4 + v3) - 48 > 9) {
          goto LABEL_10;
        }
        int v6 = 0;
        unsigned int v5 = -999;
        break;
    }
    while (1)
    {
      int v7 = *(unsigned __int8 *)(v4 + v3);
      if ((v7 - 48) > 9) {
        break;
      }
      int v8 = v7 + 10 * v6 - 48;
      if (v8 < v6) {
        goto LABEL_10;
      }
      *((void *)this + 9) = ++v3;
      int v6 = v8;
      if (v2 == v3) {
        goto LABEL_11;
      }
    }
    unsigned int v5 = -999;
    if ((v6 & 0x80000000) == 0 && v3 < v2 && v7 == 95)
    {
      *((void *)this + 9) = v3 + 1;
      unsigned int v5 = v6 + 2;
    }
  }
LABEL_11:
  unsigned int v9 = 0;
LABEL_12:

  return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v9, v5);
}

unint64_t swift::Demangle::__runtime::Demangler::popTuple(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unsigned int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *unsigned int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 223;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)this + 24);
      if (v14
        && (uint64_t v15 = *(void *)(*((void *)this + 11) + 8 * (v14 - 1)), *(_WORD *)(v15 + 16) == 275))
      {
        *((_DWORD *)this + 24) = --v14;
      }
      else
      {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        int v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        int v20 = (char *)v19 + v18;
        *int v19 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
        int v14 = *((_DWORD *)this + 24);
      }
      *((void *)this + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 224;
      *(unsigned char *)(v16 + 18) = 0;
      if (!v14) {
        return 0;
      }
      int v21 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v21 + 8) == 276)
      {
        *((_DWORD *)this + 24) = v14 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, v21, this);
        int v14 = *((_DWORD *)this + 24);
        if (!v14) {
          return 0;
        }
      }
      int v22 = *(long long **)(*((void *)this + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v22 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v14 - 1;
        long long v23 = *v22;
        unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v24;
        if (!v24 || v24 + 24 > *((void *)this + 2))
        {
          unint64_t v25 = 2 * *((void *)this + 4);
          if (v25 <= 0x20) {
            unint64_t v25 = 32;
          }
          *((void *)this + 4) = v25;
          unint64_t v26 = v25 + 8;
          long long v37 = v23;
          unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
          long long v23 = v37;
          void *v27 = *((void *)this + 3);
          unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v27 + v26;
          *((void *)this + 3) = v27;
        }
        *((void *)this + 1) = v24 + 24;
        *(_WORD *)(v24 + 16) = 225;
        *(unsigned char *)(v24 + 18) = 3;
        *(_OWORD *)unint64_t v24 = v23;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::Node *)v24, this);
        int v14 = *((_DWORD *)this + 24);
        if (!v14) {
          return 0;
        }
      }
      unsigned int v28 = v14 - 1;
      uint64_t v29 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v28);
      if (*((_WORD *)v29 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v28;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, v29, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v16, this);
    }
    while (!v15);
    int v30 = *(unsigned __int8 *)(v2 + 18);
    if (v30 == 5)
    {
      uint64_t v32 = *(unsigned int *)(v2 + 8);
      if (v32)
      {
        unint64_t v33 = (void *)(*(void *)v2 + 8 * v32 - 8);
        if ((unint64_t)v33 > *(void *)v2)
        {
          unint64_t v34 = *(void *)v2 + 8;
          do
          {
            uint64_t v35 = *(void *)(v34 - 8);
            *(void *)(v34 - 8) = *v33;
            *v33-- = v35;
            BOOL v36 = v34 >= (unint64_t)v33;
            v34 += 8;
          }
          while (!v36);
        }
      }
    }
    else if (v30 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (char *)v12 + v11;
    *int v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 232;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v2, this);
  return v9;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericType(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  uint64_t v4 = *((void *)this + 11);
  unsigned int v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
  int v6 = v5[8];
  if (v6 == 232)
  {
    unint64_t v14 = 0;
    *((_DWORD *)this + 24) = v3;
    return v14;
  }
  if (v6 != 43) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  if (v1 == 1) {
    return 0;
  }
  unsigned int v7 = v1 - 2;
  unsigned int v8 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * v7);
  if (*((_WORD *)v8 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v7;
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (char *)v12 + v11;
    *int v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 44;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v5, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, v8, this);
  unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)this + 2))
  {
    unint64_t v15 = 2 * *((void *)this + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)this + 4) = v15;
    unint64_t v16 = v15 + 8;
    unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    unint64_t v18 = (char *)v17 + v16;
    *unint64_t v17 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v18;
    *((void *)this + 3) = v17;
  }
  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 232;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v9, this);
  return v14;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleVariable(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleEntity(this, 254);

  return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleValueWitness(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v3)
  {
    char v4 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    char v4 = *(unsigned char *)(*((void *)this + 7) + v2++);
  }
  LOBYTE(v21) = v4;
  if (v2 >= v3)
  {
    char v5 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    char v5 = *(unsigned char *)(*((void *)this + 7) + v2);
  }
  HIBYTE(v21) = v5;
  switch(v21)
  {
    case 0x6C61u:
      uint64_t v6 = 0;
      break;
    case 0x6163u:
      uint64_t v6 = 1;
      break;
    case 0x6174u:
      uint64_t v6 = 2;
      break;
    case 0x6564u:
      uint64_t v6 = 3;
      break;
    case 0x7878u:
      uint64_t v6 = 4;
      break;
    case 0x5858u:
      uint64_t v6 = 5;
      break;
    case 0x7858u:
      uint64_t v6 = 6;
      break;
    case 0x5043u:
      uint64_t v6 = 7;
      break;
    case 0x7043u:
      uint64_t v6 = 8;
      break;
    case 0x7063u:
      uint64_t v6 = 9;
      break;
    case 0x6B54u:
      uint64_t v6 = 10;
      break;
    case 0x6B74u:
      uint64_t v6 = 11;
      break;
    case 0x7270u:
      uint64_t v6 = 12;
      break;
    case 0x4B54u:
      uint64_t v6 = 13;
      break;
    case 0x6343u:
      uint64_t v6 = 14;
      break;
    case 0x7454u:
      uint64_t v6 = 15;
      break;
    case 0x5474u:
      uint64_t v6 = 16;
      break;
    case 0x7378u:
      uint64_t v6 = 17;
      break;
    case 0x6778u:
      uint64_t v6 = 18;
      break;
    case 0x6775u:
      uint64_t v6 = 19;
      break;
    case 0x7075u:
      uint64_t v6 = 20;
      break;
    case 0x6975u:
      uint64_t v6 = 21;
      break;
    case 0x7465u:
      uint64_t v6 = 22;
      break;
    default:
      if (bswap32(v21) >> 16 != 29556) {
        return 0;
      }
      uint64_t v6 = 23;
      break;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || (unint64_t v8 = *((void *)this + 2), v7 + 24 > v8))
  {
    unint64_t v9 = 2 * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (unint64_t)v11 + v10;
    void *v11 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v11;
  }
  *(_WORD *)(v7 + 16) = 252;
  *(unsigned char *)(v7 + 18) = 0;
  unint64_t v12 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (v12) {
    BOOL v13 = v12 + 24 > v8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2 * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v16 + v15;
    *((void *)this + 3) = v16;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 102;
  *(unsigned char *)(v12 + 18) = 4;
  *(void *)unint64_t v12 = v6;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v12, this);
  int v17 = *((_DWORD *)this + 24);
  if (!v17) {
    return 0;
  }
  unsigned int v18 = v17 - 1;
  int v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v18);
  if (*((_WORD *)v19 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v18;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v19, this);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::getDependentGenericParamType(swift::Demangle::__runtime::Demangler *this, unsigned int a2, unsigned int a3)
{
  if (((a3 | a2) & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || (unint64_t v7 = *((void *)this + 2), v6 + 24 > v7))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    unint64_t v7 = (unint64_t)v10 + v9;
    void *v10 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v10;
  }
  *(_WORD *)(v6 + 16) = 38;
  *(unsigned char *)(v6 + 18) = 0;
  uint64_t v11 = a2;
  unint64_t v12 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (v12) {
    BOOL v13 = v12 + 24 > v7;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2 * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v16 + v15;
    *((void *)this + 3) = v16;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 102;
  *(unsigned char *)(v12 + 18) = 4;
  *(void *)unint64_t v12 = v11;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::Node *)v12, this);
  uint64_t v17 = a3;
  unint64_t v18 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v18;
  if (!v18 || v18 + 24 > *((void *)this + 2))
  {
    unint64_t v19 = 2 * *((void *)this + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *((void *)this + 4) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    *unsigned __int16 v21 = *((void *)this + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v21 + v20;
    *((void *)this + 3) = v21;
  }
  *((void *)this + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 102;
  *(unsigned char *)(v18 + 18) = 4;
  *(void *)unint64_t v18 = v17;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::Node *)v18, this);
  return v6;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleNatural(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 4294966296;
  }
  uint64_t v3 = *((void *)this + 7);
  if (*(unsigned __int8 *)(v3 + v1) - 48 > 9) {
    return 4294966296;
  }
  uint64_t v4 = 0;
  while (1)
  {
    int v5 = *(unsigned __int8 *)(v3 + v1);
    if ((v5 - 48) > 9) {
      break;
    }
    uint64_t v6 = (v5 + 10 * v4 - 48);
    if ((int)v6 < (int)v4) {
      return 4294966296;
    }
    *((void *)this + 9) = ++v1;
    uint64_t v4 = v6;
    if (v2 == v1) {
      return v6;
    }
  }
  return v4;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v3 = *((void *)this + 7);
    int v4 = *(unsigned __int8 *)(v3 + v1);
    if (v4 == 95)
    {
      *((void *)this + 9) = v1 + 1;
      return 0;
    }
    if ((v4 - 48) <= 9)
    {
      int v6 = 0;
      while (1)
      {
        int v7 = *(unsigned __int8 *)(v3 + v1);
        if ((v7 - 48) > 9) {
          break;
        }
        int v8 = v7 + 10 * v6 - 48;
        if (v8 < v6) {
          return 4294966296;
        }
        *((void *)this + 9) = ++v1;
        int v6 = v8;
        if (v2 == v1)
        {
          unint64_t v1 = v2;
          int v6 = v8;
          break;
        }
      }
      uint64_t v9 = 4294966296;
      if (v6 < 0 || v1 >= v2) {
        return v9;
      }
      if (*(unsigned char *)(v3 + v1) == 95)
      {
        *((void *)this + 9) = v1 + 1;
        return (v6 + 1);
      }
    }
  }
  return 4294966296;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexAsNode(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    uint64_t v6 = 0;
    *((void *)this + 9) = v1 + 1;
    goto LABEL_4;
  }
  if ((v5 - 48) > 9) {
    return 0;
  }
  int v11 = 0;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(v4 + v1);
    if ((v12 - 48) > 9) {
      break;
    }
    int v13 = v12 + 10 * v11 - 48;
    if (v13 >= v11)
    {
      *((void *)this + 9) = ++v1;
      int v11 = v13;
      if (v2 != v1) {
        continue;
      }
    }
    return 0;
  }
  unint64_t result = 0;
  if ((v11 & 0x80000000) == 0 && v1 < v2 && v12 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    uint64_t v6 = (v11 + 1);
LABEL_4:
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2 * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      void *v10 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v10 + v9;
      *((void *)this + 3) = v10;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 161;
    *(unsigned char *)(result + 18) = 4;
    *(void *)unint64_t result = v6;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::Demangler::pushMultiSubstitutions(swift::Demangle::__runtime::Demangler *this, int a2, unint64_t a3)
{
  uint64_t v3 = 0;
  if (a2 <= 2048 && *((unsigned int *)this + 28) > a3)
  {
    uint64_t v3 = *(void *)(*((void *)this + 13) + 8 * a3);
    if (a2 >= 2)
    {
      unsigned int v5 = a2 + 1;
      do
      {
        uint64_t v7 = v3;
        swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 11, &v7, this);
        --v5;
      }
      while (v5 > 2);
    }
  }
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::createSwiftType(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, const char *a3)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 153, "Swift", 5uLL);
  unint64_t v7 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)a1 + 2))
  {
    unint64_t v8 = 2 * *((void *)a1 + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)a1 + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    int v11 = (char *)v10 + v9;
    void *v10 = *((void *)a1 + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v10;
  }
  *((void *)a1 + 1) = v7 + 24;
  if (a3) {
    size_t v12 = strlen(a3);
  }
  else {
    size_t v12 = 0;
  }
  *(_WORD *)(v7 + 16) = 101;
  *(unsigned char *)(v7 + 18) = 3;
  *(void *)unint64_t v7 = a3;
  *(void *)(v7 + 8) = v12;
  if (!Node) {
    return 0;
  }
  unint64_t v13 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v13;
  if (!v13 || v13 + 24 > *((void *)a1 + 2))
  {
    unint64_t v14 = 2 * *((void *)a1 + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)a1 + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    uint64_t v17 = (char *)v16 + v15;
    *unint64_t v16 = *((void *)a1 + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v17;
    *((void *)a1 + 3) = v16;
  }
  *((void *)a1 + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = a2;
  *(unsigned char *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v13, Node, a1);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v13, (swift::Demangle::__runtime::Node *)v7, a1);
  unint64_t v18 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v18;
  if (!v18 || v18 + 24 > *((void *)a1 + 2))
  {
    unint64_t v19 = 2 * *((void *)a1 + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *((void *)a1 + 4) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    int v22 = (char *)v21 + v20;
    *unsigned __int16 v21 = *((void *)a1 + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v22;
    *((void *)a1 + 3) = v21;
  }
  *((void *)a1 + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 232;
  *(unsigned char *)(v18 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::Node *)v13, a1);
  return v18;
}

unint64_t swift::Demangle::__runtime::Demangler::createStandardSubstitution(swift::Demangle::__runtime::Demangler *this, int a2, int a3)
{
  if (a2 == 65 && a3 != 1)
  {
    uint64_t v3 = "AutoreleasingUnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 97 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Array";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 98 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Bool";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 68 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Dictionary";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 100 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Double";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v6 = a3;
  if (a2 == 102) {
    char v7 = a3;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v3 = "Float";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 104) {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v3 = "Set";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v8 = a3;
  if (a2 == 73) {
    char v9 = a3;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v3 = "DefaultIndices";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 105) {
    char v8 = 1;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v3 = "Int";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v10 = a3;
  if (a2 != 74) {
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v3 = "Character";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 78 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ClosedRange";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 110 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Range";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 79 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ObjectIdentifier";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v11 = a3;
  if (a2 != 80) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v3 = "UnsafePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 112 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 82 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 114 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v12 = a3;
  if (a2 == 83) {
    char v13 = a3;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    uint64_t v3 = "String";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 115) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v3 = "Substring";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 117 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UInt";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 86 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 118 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 87 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 119 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 113 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Optional";
    __int16 v4 = 61;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 66 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryFloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v14 = a3;
  if (a2 == 69) {
    char v15 = a3;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    uint64_t v3 = "Encodable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 101) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v3 = "Decodable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v16 = a3;
  if (a2 == 70) {
    char v17 = a3;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0)
  {
    uint64_t v3 = "FloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 71) {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    uint64_t v3 = "RandomNumberGenerator";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 72 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Hashable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 106 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Numeric";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 75 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BidirectionalCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 107 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RandomAccessCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 76 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Comparable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 108 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Collection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v18 = a3;
  if (a2 != 77) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    uint64_t v3 = "MutableCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 109 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeReplaceableCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 81 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Equatable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v19 = a3;
  if (a2 == 84) {
    char v20 = a3;
  }
  else {
    char v20 = 1;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v3 = "Sequence";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 116) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v3 = "IteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 85 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 88 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeExpression";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 120 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Strideable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 89 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RawRepresentable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 121 && (a3 & 1) == 0)
  {
    uint64_t v3 = "StringProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 90 && (a3 & 1) == 0)
  {
    uint64_t v3 = "SignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 122 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 65 && a3)
  {
    uint64_t v3 = "Actor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 67 && a3)
  {
    uint64_t v3 = "CheckedContinuation";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 99 && a3)
  {
    uint64_t v3 = "UnsafeContinuation";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 69 && a3)
  {
    uint64_t v3 = "CancellationError";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 101 && a3)
  {
    uint64_t v3 = "UnownedSerialExecutor";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 70 && a3)
  {
    uint64_t v3 = "Executor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 102 && a3)
  {
    uint64_t v3 = "SerialExecutor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 71 && a3)
  {
    uint64_t v3 = "TaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 103 && a3)
  {
    uint64_t v3 = "ThrowingTaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 104 && a3)
  {
    uint64_t v3 = "TaskExecutor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 73 && a3)
  {
    uint64_t v3 = "AsyncIteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 105 && a3)
  {
    uint64_t v3 = "AsyncSequence";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 74 && a3)
  {
    uint64_t v3 = "UnownedJob";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 77 && a3)
  {
    uint64_t v3 = "MainActor";
    __int16 v4 = 24;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 80 && a3)
  {
    uint64_t v3 = "TaskPriority";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 83 && a3)
  {
    uint64_t v3 = "AsyncStream";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 115 && a3)
  {
    uint64_t v3 = "AsyncThrowingStream";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 84 && a3)
  {
    uint64_t v3 = "Task";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 116 && a3)
  {
    uint64_t v3 = "UnsafeCurrentTask";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  return 0;
}

unsigned int *swift::Demangle::__runtime::Vector<char>::push_back(unsigned int *result, char *a2, void *a3)
{
  __int16 v4 = (const void **)result;
  unsigned int v5 = result[2];
  size_t v6 = result[3];
  char v7 = *(char **)result;
  if (v5 >= v6)
  {
    char v9 = (char *)a3[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = a3[2];
      if (v11 <= v10)
      {
        a3[1] = v11;
        LODWORD(v12) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * a3[4];
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      a3[4] = v14;
      unint64_t v15 = v14 + 8;
      unint64_t result = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      char v16 = (char *)result + v15;
      *(void *)unint64_t result = a3[3];
      char v9 = (char *)(result + 2);
      a3[2] = v16;
      a3[3] = result;
    }
    a3[1] = &v9[v13];
    if (v6) {
      unint64_t result = (unsigned int *)memcpy(v9, *v4, v6);
    }
    *__int16 v4 = v9;
    char v7 = v9;
    unsigned int v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  char v17 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  v7[v5] = v17;
  return result;
}

BOOL anonymous namespace'::isDeclName(int a1)
{
  BOOL result = 1;
  if (((a1 - 173) > 0x3C || ((1 << (a1 + 83)) & 0x100000010000010DLL) == 0)
    && ((a1 - 101) > 0x24 || ((1 << (a1 - 101)) & 0x1000800001) == 0))
  {
    return a1 == 347;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popModule(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = v1 - 1;
  uint64_t v3 = *(void *)(*((void *)this + 11) + 8 * v2);
  int v4 = *(unsigned __int16 *)(v3 + 16);
  if (v4 != 153)
  {
    if (v4 == 101)
    {
      *((_DWORD *)this + 24) = v2;
      return swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v3, 153);
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v2;
  return v3;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::popContext(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v1 - 1));
  int v5 = *((unsigned __int16 *)v4 + 8);
  if (v5 == 101)
  {
    *((_DWORD *)this + 24) = v3;
    int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v4, 153);
    if (v4) {
      return v4;
    }
    int v1 = *((_DWORD *)this + 24);
    if (!v1) {
      return 0;
    }
  }
  else if (v5 == 153)
  {
    *((_DWORD *)this + 24) = v3;
    return v4;
  }
  int v6 = v1 - 1;
  int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 232)
  {
    if (swift::Demangle::__runtime::isContext())
    {
      *((_DWORD *)this + 24) = v6;
      return v4;
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v6;
  int v7 = *((unsigned __int8 *)v4 + 18);
  if (v7 == 1) {
    goto LABEL_12;
  }
  if (v7 != 5 || *((_DWORD *)v4 + 2) != 1) {
    return 0;
  }
  int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
  int v4 = *(swift::Demangle::__runtime::Node **)v4;
  if (!swift::Demangle::__runtime::isContext()) {
    return 0;
  }
  return v4;
}

uint64_t *swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v2 = v1 - 1;
  int v3 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v3 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v2;
  int v4 = *((unsigned __int8 *)v3 + 18);
  if (v4 != 1)
  {
    if (v4 != 5 || *((_DWORD *)v3 + 2) != 1) {
      return 0;
    }
    int v3 = (uint64_t *)*v3;
  }
  int v5 = (uint64_t *)*v3;
  if (!v5) {
    return 0;
  }
  BOOL result = 0;
  unsigned int v7 = *((unsigned __int16 *)v5 + 8);
  if (v7 > 0xB3)
  {
    BOOL v8 = v7 - 180 > 0x36 || ((1 << (v7 + 76)) & 0x60008000000003) == 0;
    if (v8 && v7 != 347) {
      return result;
    }
    return v5;
  }
  BOOL v9 = v7 > 0x3D || ((1 << v7) & 0x2000000001200000) == 0;
  if (!v9 || v7 == 167) {
    return v5;
  }
  return result;
}

uint64_t anonymous namespace'::isAnyGeneric(int a1)
{
  uint64_t result = 1;
  if (a1 <= 179)
  {
    if ((a1 > 0x3D || ((1 << a1) & 0x2000000001200000) == 0) && a1 != 167) {
      return 0;
    }
  }
  else if (((a1 - 180) > 0x36 || ((1 << (a1 + 76)) & 0x60008000000003) == 0) {
         && a1 != 347)
  }
  {
    return 0;
  }
  return result;
}

swift::Demangle::__runtime::Node *setParentForOpaqueReturnTypeNodes(swift::Demangle::__runtime::Demangler *a1, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    unsigned int v7 = *((unsigned __int16 *)a3 + 8);
    if (v7 <= 0xFD)
    {
      if (v7 != 76 && v7 != 220) {
        goto LABEL_14;
      }
      return a2;
    }
    if (v7 == 254) {
      return a2;
    }
    if (v7 != 308)
    {
LABEL_14:
      uint64_t v12 = *((unsigned __int8 *)a3 + 18);
      switch(v12)
      {
        case 1:
LABEL_31:
          unint64_t v17 = 0;
          while (1)
          {
            unint64_t v19 = *((unsigned __int8 *)a3 + 18);
            unsigned int v20 = v19 - 1;
            if (v19 == 1) {
              goto LABEL_38;
            }
            if (v19 != 5) {
              break;
            }
            if (*((unsigned int *)a3 + 2) > v17)
            {
LABEL_41:
              unsigned __int16 v21 = a3;
              if (v20 >= 2) {
                unsigned __int16 v21 = *(swift::Demangle::__runtime::Node **)a3;
              }
              char v18 = (swift::Demangle::__runtime::Node *)*((void *)v21 + v17);
              goto LABEL_33;
            }
LABEL_32:
            char v18 = 0;
LABEL_33:
            setParentForOpaqueReturnTypeNodes(a1, a2, v18);
            if (v12 == ++v17) {
              return a2;
            }
          }
          if (v19 != 2) {
            goto LABEL_32;
          }
          unint64_t v19 = 2;
LABEL_38:
          if (v19 > v17) {
            goto LABEL_41;
          }
          goto LABEL_32;
        case 5:
          uint64_t v12 = *((unsigned int *)a3 + 2);
          if (v12) {
            goto LABEL_31;
          }
          break;
        case 2:
          uint64_t v12 = 2;
          goto LABEL_31;
      }
      return a2;
    }
    int v8 = *((unsigned __int8 *)a3 + 18);
    switch(v8)
    {
      case 1:
        uint64_t v10 = 0;
        break;
      case 2:
        uint64_t v10 = 1;
        break;
      case 5:
        uint64_t v9 = *((unsigned int *)a3 + 2);
        if (!v9) {
          goto LABEL_22;
        }
        uint64_t v10 = v9 - 1;
        unint64_t v11 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_21:
        if (*(_WORD *)(*((void *)v11 + v10) + 16) == 342) {
          return a2;
        }
LABEL_22:
        unint64_t v13 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 1) = v13;
        if (!v13 || v13 + 24 > *((void *)a1 + 2))
        {
          unint64_t v14 = 2 * *((void *)a1 + 4);
          if (v14 <= 0x20) {
            unint64_t v14 = 32;
          }
          *((void *)a1 + 4) = v14;
          unint64_t v15 = v14 + 8;
          char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
          *char v16 = *((void *)a1 + 3);
          unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)a1 + 2) = (char *)v16 + v15;
          *((void *)a1 + 3) = v16;
        }
        *((void *)a1 + 1) = v13 + 24;
        *(_WORD *)(v13 + 16) = 342;
        *(unsigned char *)(v13 + 18) = 4;
        *(void *)unint64_t v13 = a2;
        swift::Demangle::__runtime::Node::addChild(a3, (swift::Demangle::__runtime::Node *)v13, a1);
        return a2;
      default:
        goto LABEL_22;
    }
    unint64_t v11 = a3;
    goto LABEL_21;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleClangType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  if (*(unsigned __int8 *)(v4 + v1) - 48 > 9) {
    return 0;
  }
  unsigned int v5 = 0;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(v4 + v1);
    if ((v6 - 48) > 9) {
      break;
    }
    int v7 = v6 + 10 * v5 - 48;
    if (v7 < (int)v5) {
      return 0;
    }
    *((void *)this + 9) = ++v1;
    unsigned int v5 = v7;
    if (v2 == v1)
    {
      unint64_t v1 = v2;
      unsigned int v5 = v7;
      break;
    }
  }
  if ((int)v5 < 1) {
    return 0;
  }
  size_t v8 = v5;
  if (v1 + v5 > v2) {
    return 0;
  }
  uint64_t v10 = (const void *)(v4 + v1);
  unint64_t v11 = (char *)*((void *)this + 1);
  if (v11)
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v5;
    }
    if ((unint64_t)&v11[v12] <= *((void *)this + 2))
    {
LABEL_24:
      unint64_t v17 = &v11[v12];
      goto LABEL_26;
    }
LABEL_21:
    unint64_t v13 = 2 * *((void *)this + 4);
    if (v13 <= v12 + 1) {
      unint64_t v13 = v12 + 1;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    char v16 = (char *)v15 + v14;
    *unint64_t v15 = *((void *)this + 3);
    unint64_t v11 = (char *)(v15 + 1);
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
    goto LABEL_24;
  }
  if ((unint64_t)v5 > *((void *)this + 2))
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v5;
    }
    goto LABEL_21;
  }
  unint64_t v11 = 0;
  unint64_t v17 = (char *)v5;
LABEL_26:
  *((void *)this + 1) = v17;
  memcpy(v11, v10, v8);
  *((void *)this + 9) += v8;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2 * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    unsigned int v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *unsigned int v20 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v20 + v19;
    *((void *)this + 3) = v20;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 23;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v11;
  *(void *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParams(uint64_t a1, __int16 a2)
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  unsigned int v5 = v2 - 1;
  unint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8 * v5);
  int v7 = *(unsigned __int16 *)(v6 + 16);
  if (v7 != 232)
  {
    if (v7 == 274)
    {
      *(_DWORD *)(a1 + 96) = v5;
      unint64_t v8 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 8) = v8;
      if (!v8 || (unint64_t v9 = *(void *)(a1 + 16), v8 + 24 > v9))
      {
        unint64_t v10 = 2 * *(void *)(a1 + 32);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *(void *)(a1 + 32) = v10;
        unint64_t v11 = v10 + 8;
        uint64_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        unint64_t v9 = (unint64_t)v12 + v11;
        *uint64_t v12 = *(void *)(a1 + 24);
        unint64_t v8 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a1 + 16) = (char *)v12 + v11;
        *(void *)(a1 + 24) = v12;
      }
      *(_WORD *)(v8 + 16) = 223;
      *(unsigned char *)(v8 + 18) = 0;
      unint64_t v6 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 8) = v6;
      if (v6) {
        BOOL v13 = v6 + 24 > v9;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 2 * *(void *)(a1 + 32);
        if (v14 <= 0x20) {
          unint64_t v14 = 32;
        }
        *(void *)(a1 + 32) = v14;
        unint64_t v15 = v14 + 8;
        char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        unint64_t v17 = (char *)v16 + v15;
        *char v16 = *(void *)(a1 + 24);
        unint64_t v6 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
      }
      *(void *)(a1 + 8) = v6 + 24;
      *(_WORD *)(v6 + 16) = 232;
      *(unsigned char *)(v6 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::Node *)v8, (swift::Demangle::__runtime::NodeFactory *)a1);
      goto LABEL_20;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 96) = v5;
LABEL_20:
  unint64_t v18 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 8) = v18;
  if (!v18 || v18 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v19 = 2 * *(void *)(a1 + 32);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *(void *)(a1 + 32) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    int v22 = (char *)v21 + v20;
    *unsigned __int16 v21 = *(void *)(a1 + 24);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 16) = v22;
    *(void *)(a1 + 24) = v21;
  }
  *(void *)(a1 + 8) = v18 + 24;
  *(_WORD *)(v18 + 16) = a2;
  *(unsigned char *)(v18 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::NodeFactory *)a1);
  return v18;
}

unint64_t swift::Demangle::__runtime::Demangler::popPack(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unsigned int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unsigned int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 226;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)this + 24);
      if (!v14) {
        return 0;
      }
      int v15 = v14 - 1;
      uint64_t v16 = *((void *)this + 11);
      int v17 = *(unsigned __int16 *)(*(void *)(v16 + 8 * (v14 - 1)) + 16);
      if (v17 == 275)
      {
        *((_DWORD *)this + 24) = v15;
        --v14;
        if (!v15) {
          return 0;
        }
      }
      unsigned int v18 = v14 - 1;
      unint64_t v19 = *(swift::Demangle::__runtime::Node **)(v16 + 8 * v18);
      if (*((_WORD *)v19 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v18;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v19, this);
    }
    while (v17 != 275);
    int v20 = *(unsigned __int8 *)(v2 + 18);
    if (v20 == 5)
    {
      uint64_t v22 = *(unsigned int *)(v2 + 8);
      if (v22)
      {
        long long v23 = (void *)(*(void *)v2 + 8 * v22 - 8);
        if ((unint64_t)v23 > *(void *)v2)
        {
          unint64_t v24 = *(void *)v2 + 8;
          do
          {
            uint64_t v25 = *(void *)(v24 - 8);
            *(void *)(v24 - 8) = *v23;
            *v23-- = v25;
            BOOL v26 = v24 >= (unint64_t)v23;
            v24 += 8;
          }
          while (!v26);
        }
      }
    }
    else if (v20 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    uint64_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    BOOL v13 = (char *)v12 + v11;
    *uint64_t v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 232;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v2, this);
  return v9;
}

unint64_t swift::Demangle::__runtime::Demangler::popSILPack(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 105)
  {
    unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v4;
    if (v4 && v4 + 24 <= *((void *)this + 2))
    {
      __int16 v9 = 228;
      goto LABEL_15;
    }
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v7 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    void *v7 = *((void *)this + 3);
    *((void *)this + 3) = v7;
    unsigned int v8 = (char *)v7 + v11;
    __int16 v9 = 228;
    goto LABEL_14;
  }
  if (v3 != 100) {
    return 0;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (v4 && v4 + 24 <= *((void *)this + 2))
  {
    __int16 v9 = 227;
    goto LABEL_15;
  }
  unint64_t v5 = 2 * *((void *)this + 4);
  if (v5 <= 0x20) {
    unint64_t v5 = 32;
  }
  *((void *)this + 4) = v5;
  unint64_t v6 = v5 + 8;
  int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
  void *v7 = *((void *)this + 3);
  *((void *)this + 3) = v7;
  unsigned int v8 = (char *)v7 + v6;
  __int16 v9 = 227;
LABEL_14:
  unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 2) = v8;
LABEL_15:
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + 18) = 0;
  int v12 = *((_DWORD *)this + 24);
  if (!v12 || (unsigned int v13 = v12 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v13) + 16) != 274))
  {
    while (1)
    {
      int v19 = *((_DWORD *)this + 24);
      if (!v19) {
        return 0;
      }
      int v20 = v19 - 1;
      uint64_t v21 = *((void *)this + 11);
      int v22 = *(unsigned __int16 *)(*(void *)(v21 + 8 * (v19 - 1)) + 16);
      if (v22 == 275)
      {
        *((_DWORD *)this + 24) = v20;
        --v19;
        if (!v20) {
          return 0;
        }
      }
      unsigned int v23 = v19 - 1;
      unint64_t v24 = *(swift::Demangle::__runtime::Node **)(v21 + 8 * v23);
      if (*((_WORD *)v24 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v23;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v24, this);
      if (v22 == 275)
      {
        int v25 = *(unsigned __int8 *)(v4 + 18);
        if (v25 == 5)
        {
          uint64_t v27 = *(unsigned int *)(v4 + 8);
          if (v27)
          {
            unsigned int v28 = (void *)(*(void *)v4 + 8 * v27 - 8);
            if ((unint64_t)v28 > *(void *)v4)
            {
              unint64_t v29 = *(void *)v4 + 8;
              do
              {
                uint64_t v30 = *(void *)(v29 - 8);
                *(void *)(v29 - 8) = *v28;
                *v28-- = v30;
                BOOL v31 = v29 >= (unint64_t)v28;
                v29 += 8;
              }
              while (!v31);
            }
          }
        }
        else if (v25 == 2)
        {
          *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
        }
        goto LABEL_18;
      }
    }
  }
  *((_DWORD *)this + 24) = v13;
LABEL_18:
  unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)this + 2))
  {
    unint64_t v15 = 2 * *((void *)this + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)this + 4) = v15;
    unint64_t v16 = v15 + 8;
    int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    unsigned int v18 = (char *)v17 + v16;
    *int v17 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v18;
    *((void *)this + 3) = v17;
  }
  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 232;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v4, this);
  return v14;
}

unint64_t swift::Demangle::__runtime::Demangler::popTypeList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 235;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v9 = *((_DWORD *)this + 24);
      if (!v9) {
        return 0;
      }
      int v10 = v9 - 1;
      uint64_t v11 = *((void *)this + 11);
      int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v9 - 1)) + 16);
      if (v12 == 275)
      {
        *((_DWORD *)this + 24) = v10;
        --v9;
        if (!v10) {
          return 0;
        }
      }
      unsigned int v13 = v9 - 1;
      unint64_t v14 = *(swift::Demangle::__runtime::Node **)(v11 + 8 * v13);
      if (*((_WORD *)v14 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v14, this);
    }
    while (v12 != 275);
    int v15 = *(unsigned __int8 *)(v2 + 18);
    if (v15 == 5)
    {
      uint64_t v17 = *(unsigned int *)(v2 + 8);
      if (v17)
      {
        unsigned int v18 = (void *)(*(void *)v2 + 8 * v17 - 8);
        if ((unint64_t)v18 > *(void *)v2)
        {
          unint64_t v19 = *(void *)v2 + 8;
          do
          {
            uint64_t v20 = *(void *)(v19 - 8);
            *(void *)(v19 - 8) = *v18;
            *v18-- = v20;
            BOOL v21 = v19 >= (unint64_t)v18;
            v19 += 8;
          }
          while (!v21);
        }
      }
    }
    else if (v15 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 2;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v9 = *((_DWORD *)this + 24);
      if (!v9) {
        return 0;
      }
      int v10 = v9 - 1;
      uint64_t v11 = *((void *)this + 11);
      int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v9 - 1)) + 16);
      if (v12 == 275)
      {
        *((_DWORD *)this + 24) = v10;
        --v9;
        if (!v10) {
          return 0;
        }
      }
      unsigned int v13 = v9 - 1;
      unint64_t v14 = *(unsigned __int16 **)(v11 + 8 * v13);
      unsigned int v15 = v14[8];
      BOOL v16 = v15 > 0x31;
      uint64_t v17 = (1 << v15) & 0x380000C000000;
      if (v16 || v17 == 0) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v14, this);
    }
    while (v12 != 275);
    int v19 = *(unsigned __int8 *)(v2 + 18);
    if (v19 == 5)
    {
      uint64_t v21 = *(unsigned int *)(v2 + 8);
      if (v21)
      {
        int v22 = (void *)(*(void *)v2 + 8 * v21 - 8);
        if ((unint64_t)v22 > *(void *)v2)
        {
          unint64_t v23 = *(void *)v2 + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v2;
}

uint64_t swift::Demangle::__runtime::Demangler::popAnyProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unsigned int v3 = v1 - 1;
  uint64_t result = *(void *)(*((void *)this + 11) + 8 * v3);
  unsigned int v5 = *(unsigned __int16 *)(result + 16);
  BOOL v6 = v5 > 0x31;
  uint64_t v7 = (1 << v5) & 0x380000C000000;
  if (v6 || v7 == 0) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    goto LABEL_5;
  }
  unsigned int v3 = v2 - 1;
  unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v3);
  int v5 = *(unsigned __int16 *)(v4 + 16);
  if (v5 == 153)
  {
    *((_DWORD *)this + 24) = v3;
    goto LABEL_7;
  }
  if (v5 == 101)
  {
    *((_DWORD *)this + 24) = v3;
    unint64_t v4 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v4, 153);
  }
  else
  {
LABEL_5:
    unint64_t v4 = 0;
  }
LABEL_7:
  unint64_t v6 = swift::Demangle::__runtime::Demangler::popProtocol(this);
  unint64_t v7 = 0;
  if (v4)
  {
    unsigned int v8 = (swift::Demangle::__runtime::Node *)v6;
    if (v6)
    {
      unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        int v12 = (char *)v11 + v10;
        void *v11 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v12;
        *((void *)this + 3) = v11;
      }
      *((void *)this + 1) = v7 + 24;
      *(_WORD *)(v7 + 16) = 185;
      *(unsigned char *)(v7 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v8, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v4, this);
    }
  }
  return v7;
}

uint64_t swift::Demangle::__runtime::Demangler::popDependentProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unsigned int v3 = v1 - 1;
  uint64_t result = *(void *)(*((void *)this + 11) + 8 * v3);
  if (*(unsigned __int16 *)(result + 16) - 47 > 2) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    unint64_t result = 0;
    *((void *)this + 9) = v1 + 1;
    return result;
  }
  if ((v5 - 48) > 9) {
    return 0;
  }
  int v7 = 0;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(v4 + v1);
    if ((v8 - 48) > 9) {
      break;
    }
    int v9 = v8 + 10 * v7 - 48;
    if (v9 >= v7)
    {
      *((void *)this + 9) = ++v1;
      int v7 = v9;
      if (v2 != v1) {
        continue;
      }
    }
    return 0;
  }
  unint64_t result = 0;
  if ((v7 & 0x80000000) == 0 && v1 < v2 && v8 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    if (v7)
    {
      uint64_t v10 = (v7 - 1);
      unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = result;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2 * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unsigned int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *unsigned int v13 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }
      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 102;
      *(unsigned char *)(result + 18) = 4;
      *(void *)unint64_t result = v10;
    }
    else
    {
      unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = result;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v14 = 2 * *((void *)this + 4);
        if (v14 <= 0x20) {
          unint64_t v14 = 32;
        }
        *((void *)this + 4) = v14;
        unint64_t v15 = v14 + 8;
        BOOL v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *BOOL v16 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v16 + v15;
        *((void *)this + 3) = v16;
      }
      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 246;
      *(unsigned char *)(result + 18) = 0;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::popProtocol(this);
  int v3 = *((_DWORD *)this + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3 - 1;
  int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v4);
  if (*((_WORD *)v5 + 8) != 232) {
    return 0;
  }
  unint64_t v6 = (swift::Demangle::__runtime::Node *)v2;
  *((_DWORD *)this + 24) = v4;
  if (!v2) {
    return 0;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    unint64_t v11 = (char *)v10 + v9;
    void *v10 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v11;
    *((void *)this + 3) = v10;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 34;
  *(unsigned char *)(v7 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v5, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v6, this);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::popRetroactiveConformances(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    unsigned int v8 = v1 - 1;
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v8);
    if (*((_WORD *)v9 + 8) != 206) {
      break;
    }
    *((_DWORD *)this + 24) = v8;
    if (!v3)
    {
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v4 = 2 * *((void *)this + 4);
        if (v4 <= 0x20) {
          unint64_t v4 = 32;
        }
        *((void *)this + 4) = v4;
        unint64_t v5 = v4 + 8;
        unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
        unint64_t v7 = (char *)v6 + v5;
        *unint64_t v6 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v7;
        *((void *)this + 3) = v6;
      }
      *((void *)this + 1) = v3 + 24;
      *(_WORD *)(v3 + 16) = 235;
      *(unsigned char *)(v3 + 18) = 0;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v9, this);
    int v1 = *((_DWORD *)this + 24);
    if (!v1) {
      goto LABEL_15;
    }
  }
  if (!v3) {
    return v3;
  }
LABEL_15:
  int v10 = *(unsigned __int8 *)(v3 + 18);
  if (v10 == 5)
  {
    uint64_t v11 = *(unsigned int *)(v3 + 8);
    if (v11)
    {
      unint64_t v12 = (void *)(*(void *)v3 + 8 * v11 - 8);
      if ((unint64_t)v12 > *(void *)v3)
      {
        unint64_t v13 = *(void *)v3 + 8;
        do
        {
          uint64_t v14 = *(void *)(v13 - 8);
          *(void *)(v13 - 8) = *v12;
          *v12-- = v14;
          BOOL v15 = v13 >= (unint64_t)v12;
          v13 += 8;
        }
        while (!v15);
      }
    }
  }
  else if (v10 == 2)
  {
    *(int8x16_t *)unint64_t v3 = vextq_s8(*(int8x16_t *)v3, *(int8x16_t *)v3, 8uLL);
  }
  return v3;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenerics(uint64_t a1, const void **a2, unint64_t *a3)
{
  *a3 = swift::Demangle::__runtime::Demangler::popRetroactiveConformances((swift::Demangle::__runtime::Demangler *)a1);
  while (1)
  {
    int v22 = 0;
    unint64_t v5 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (!v5 || v5 + 24 > *(void *)(a1 + 16))
    {
      unint64_t v6 = 2 * *(void *)(a1 + 32);
      if (v6 <= 0x20) {
        unint64_t v6 = 32;
      }
      *(void *)(a1 + 32) = v6;
      unint64_t v7 = v6 + 8;
      unsigned int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
      *unsigned int v8 = *(void *)(a1 + 24);
      unint64_t v5 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 16) = (char *)v8 + v7;
      *(void *)(a1 + 24) = v8;
    }
    *(void *)(a1 + 8) = v5 + 24;
    *(_WORD *)(v5 + 16) = 235;
    *(unsigned char *)(v5 + 18) = 0;
    int v22 = (swift::Demangle::__runtime::Node *)v5;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(a2, (uint64_t *)&v22, (void *)a1);
    for (int i = *(_DWORD *)(a1 + 96); i; int i = *(_DWORD *)(a1 + 96))
    {
      int v10 = *(swift::Demangle::__runtime::Node **)(*(void *)(a1 + 88) + 8 * (i - 1));
      if (*((_WORD *)v10 + 8) != 232) {
        break;
      }
      *(_DWORD *)(a1 + 96) = i - 1;
      swift::Demangle::__runtime::Node::addChild(v22, v10, (swift::Demangle::__runtime::NodeFactory *)a1);
    }
    int v11 = *((unsigned __int8 *)v22 + 18);
    if (v11 == 5)
    {
      unint64_t v12 = *(void *)v22;
      uint64_t v13 = *((unsigned int *)v22 + 2);
      uint64_t v14 = (void *)(*(void *)v22 + 8 * v13 - 8);
      if (v13 && (unint64_t)v14 > v12)
      {
        unint64_t v16 = v12 + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 8);
          *(void *)(v16 - 8) = *v14;
          *v14-- = v17;
          BOOL v18 = v16 >= (unint64_t)v14;
          v16 += 8;
        }
        while (!v18);
      }
    }
    else if (v11 == 2)
    {
      *(int8x16_t *)int v22 = vextq_s8(*(int8x16_t *)v22, *(int8x16_t *)v22, 8uLL);
    }
    if (!i) {
      break;
    }
    unsigned int v19 = i - 1;
    int v20 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8 * v19) + 16);
    if (v20 != 275)
    {
      if (v20 == 274)
      {
        *(_DWORD *)(a1 + 96) = v19;
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(a1 + 96) = v19;
  }
  return 0;
}

const void **swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(const void **result, uint64_t *a2, void *a3)
{
  unint64_t v4 = result;
  unsigned int v5 = *((_DWORD *)result + 2);
  uint64_t v6 = *((unsigned int *)result + 3);
  unint64_t v7 = (char *)*result;
  if (v5 >= v6)
  {
    unint64_t v9 = &v7[8 * v6];
    int v10 = (char *)a3[1];
    if (v9 == v10)
    {
      unint64_t v12 = v9 + 8;
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v11 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = 8 * (v13 + v6);
    unint64_t v7 = (char *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)&v7[v14] > v11)
    {
      unint64_t v15 = 2 * a3[4];
      if (v15 <= v14 + 8) {
        unint64_t v15 = v14 + 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t result = (const void **)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      uint64_t v17 = (char *)result + v16;
      *unint64_t result = (const void *)a3[3];
      unint64_t v7 = (char *)(((unint64_t)result + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v17;
      a3[3] = result;
    }
    a3[1] = &v7[v14];
    if (v6) {
      unint64_t result = (const void **)memcpy(v7, *v4, 8 * v6);
    }
    *unint64_t v4 = v7;
    unsigned int v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v18 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  *(void *)&v7[8 * v5] = v18;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(swift::Demangle::__runtime::NodeFactory *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = a4;
  unint64_t v6 = *(unsigned int *)(a3 + 8);
  if (v6 <= a4) {
    return 0;
  }
  unint64_t v7 = a2;
  int v9 = *(unsigned __int16 *)(a2 + 16);
  if (v9 == 233 || v9 == 181)
  {
    unint64_t v10 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2 * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      uint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      uint64_t v14 = (char *)v13 + v12;
      *uint64_t v13 = *((void *)a1 + 3);
      unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }
    unint64_t v15 = v10 + 24;
    *((void *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = 235;
    *(unsigned char *)(v10 + 18) = 0;
    unsigned int v16 = *(_DWORD *)(a3 + 8);
    unint64_t v17 = v16 - 1;
    if (v17 >= v4 && v16 != 0)
    {
      while (1)
      {
        uint64_t v20 = *(void *)(*(void *)a3 + 8 * v17);
        int v21 = *(unsigned __int8 *)(v20 + 18);
        int v22 = (swift::Demangle::__runtime::Node **)v20;
        if ((v21 - 1) >= 2)
        {
          if (v21 == 5)
          {
            unint64_t v23 = *(swift::Demangle::__runtime::Node **)v20;
            int v22 = *(swift::Demangle::__runtime::Node ***)v20;
            goto LABEL_29;
          }
          int v22 = 0;
        }
        switch(v21)
        {
          case 1:
            uint64_t v24 = (swift::Demangle::__runtime::Node **)(v20 + 8);
            if (v22 != (swift::Demangle::__runtime::Node **)(v20 + 8)) {
              goto LABEL_36;
            }
            break;
          case 2:
            uint64_t v24 = (swift::Demangle::__runtime::Node **)(v20 + 16);
            if (v22 != (swift::Demangle::__runtime::Node **)(v20 + 16)) {
              goto LABEL_36;
            }
            break;
          case 5:
            unint64_t v23 = *(swift::Demangle::__runtime::Node **)v20;
LABEL_29:
            uint64_t v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *(unsigned int *)(v20 + 8));
            if (v22 != v24) {
              goto LABEL_36;
            }
            break;
          default:
            uint64_t v24 = 0;
            if (v22)
            {
              do
              {
LABEL_36:
                BOOL v25 = *v22++;
                swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v25, a1);
              }
              while (v22 != v24);
              unsigned int v16 = *(_DWORD *)(a3 + 8);
            }
            break;
        }
        unint64_t v17 = (v17 - 1);
        if (v17 < v4 || v16 <= v17)
        {
          unint64_t v15 = *((void *)a1 + 1);
          break;
        }
      }
    }
    unint64_t v29 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v29;
    if (!v29 || v29 + 24 > *((void *)a1 + 2))
    {
      unint64_t v30 = 2 * *((void *)a1 + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32;
      }
      *((void *)a1 + 4) = v30;
      unint64_t v31 = v30 + 8;
      uint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      unint64_t v33 = (char *)v32 + v31;
      *uint64_t v32 = *((void *)a1 + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v33;
      *((void *)a1 + 3) = v32;
    }
    *((void *)a1 + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 232;
    *(unsigned char *)(v29 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, (swift::Demangle::__runtime::Node *)v7, a1);
    unint64_t v34 = 0;
    if (v10 && v29)
    {
      unint64_t v34 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v34;
      if (!v34 || v34 + 24 > *((void *)a1 + 2))
      {
        unint64_t v35 = 2 * *((void *)a1 + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)a1 + 4) = v35;
        unint64_t v36 = v35 + 8;
        long long v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        void *v37 = *((void *)a1 + 3);
        unint64_t v34 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v37 + v36;
        *((void *)a1 + 3) = v37;
      }
      *((void *)a1 + 1) = v34 + 24;
      *(_WORD *)(v34 + 16) = 17;
      *(unsigned char *)(v34 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v34, (swift::Demangle::__runtime::Node *)v29, a1);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v34, (swift::Demangle::__runtime::Node *)v10, a1);
    }
    return v34;
  }
  int v26 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v27 = (void *)a2;
  if ((v26 - 1) >= 2)
  {
    if (v26 == 5 && *(_DWORD *)(a2 + 8))
    {
      uint64_t v27 = *(void **)a2;
      goto LABEL_42;
    }
    return 0;
  }
LABEL_42:
  int v28 = 0;
  if (*(unsigned __int16 *)(a2 + 16) > 0xD9u)
  {
    unsigned int v38 = v9 - 218;
    if (v38 > 0x24 || ((1 << v38) & 0x1000000005) == 0)
    {
LABEL_64:
      ++a4;
      int v28 = 1;
    }
  }
  else if (((v9 - 117) > 0x3E || ((1 << (v9 - 117)) & 0x6000000000000101) == 0) {
         && v9 != 33
  }
         && v9 != 70)
  {
    goto LABEL_64;
  }
  uint64_t v39 = *(void *)(*(void *)a3 + 8 * v4);
  if (a4 < v6)
  {
    uint64_t v40 = *v27;
    if (*(_WORD *)(*v27 + 16) != 71)
    {
      __int16 v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(a1, *v27, a3);
LABEL_85:
      if (v44)
      {
LABEL_86:
        __int16 v51 = *(_WORD *)(v7 + 16);
        unint64_t v52 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 1) = v52;
        if (!v52 || v52 + 24 > *((void *)a1 + 2))
        {
          unint64_t v53 = 2 * *((void *)a1 + 4);
          if (v53 <= 0x20) {
            unint64_t v53 = 32;
          }
          *((void *)a1 + 4) = v53;
          unint64_t v54 = v53 + 8;
          unsigned int v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
          uint64_t v56 = (char *)v55 + v54;
          *unsigned int v55 = *((void *)a1 + 3);
          unint64_t v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)a1 + 2) = v56;
          *((void *)a1 + 3) = v55;
        }
        *((void *)a1 + 1) = v52 + 24;
        *(_WORD *)(v52 + 16) = v51;
        *(unsigned char *)(v52 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v52, v44, a1);
        for (unsigned int i = 1; ; unsigned int i = v61 + 1)
        {
          unint64_t v59 = *(unsigned __int8 *)(v7 + 18);
          switch(v59)
          {
            case 1:
              unint64_t v60 = *(unsigned __int8 *)(v7 + 18);
              break;
            case 5:
              unint64_t v60 = *(unsigned int *)(v7 + 8);
              break;
            case 2:
              unint64_t v60 = 2;
              break;
            default:
              goto LABEL_112;
          }
          unint64_t v61 = i;
          if (v60 <= i)
          {
LABEL_112:
            unint64_t v7 = v52;
            goto LABEL_113;
          }
          unsigned int v62 = v59 - 1;
          if (v59 != 1)
          {
            if (v59 == 5)
            {
              if (*(unsigned int *)(v7 + 8) <= v61) {
                continue;
              }
              goto LABEL_108;
            }
            unint64_t v59 = 2;
          }
          if (v59 <= v61) {
            continue;
          }
LABEL_108:
          unint64_t v63 = v7;
          if (v62 >= 2) {
            unint64_t v63 = *(void *)v7;
          }
          unint64_t v64 = *(swift::Demangle::__runtime::Node **)(v63 + 8 * v61);
          if (v64) {
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v52, v64, a1);
          }
        }
      }
      return 0;
    }
    int v41 = *(unsigned __int8 *)(v40 + 18);
    unsigned int v42 = (swift::Demangle::__runtime::Node *)v40;
    if (v41 != 2)
    {
      if (v41 != 5 || *(_DWORD *)(v40 + 8) < 2u)
      {
        uint64_t v43 = 0;
LABEL_74:
        int v45 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(a1, v43, a3);
        int v46 = *(unsigned __int8 *)(v40 + 18);
        unint64_t v47 = (swift::Demangle::__runtime::Node **)v40;
        if ((v46 - 1) >= 2)
        {
          if (v46 != 5 || !*(_DWORD *)(v40 + 8))
          {
            int v48 = 0;
            goto LABEL_80;
          }
          unint64_t v47 = *(swift::Demangle::__runtime::Node ***)v40;
        }
        int v48 = *v47;
LABEL_80:
        unsigned int v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(a1, 71, v48, v45);
        __int16 v44 = v49;
        if (*(unsigned char *)(v40 + 18) == 5 && *(_DWORD *)(v40 + 8) == 3)
        {
          if (v49)
          {
            unint64_t v50 = *(swift::Demangle::__runtime::Node **)(*(void *)v40 + 16);
            if (v50)
            {
              swift::Demangle::__runtime::Node::addChild(v49, v50, a1);
              goto LABEL_86;
            }
          }
        }
        goto LABEL_85;
      }
      unsigned int v42 = *(swift::Demangle::__runtime::Node **)v40;
    }
    uint64_t v43 = *((void *)v42 + 1);
    goto LABEL_74;
  }
LABEL_113:
  if (!v28) {
    return v7;
  }
  int v65 = *(unsigned __int8 *)(v39 + 18);
  if ((v65 - 1) >= 2 && (v65 != 5 || !*(_DWORD *)(v39 + 8))) {
    return v7;
  }
  unint64_t v34 = 0;
  unsigned int v66 = *(unsigned __int16 *)(v7 + 16);
  if (v66 > 0xA6)
  {
    if (*(unsigned __int16 *)(v7 + 16) > 0xDAu)
    {
      if (v66 == 234)
      {
        __int16 v67 = 18;
      }
      else
      {
        if (v66 != 219) {
          return v34;
        }
        __int16 v67 = 15;
      }
    }
    else if (v66 == 167)
    {
      __int16 v67 = 17;
    }
    else
    {
      if (v66 != 180) {
        return v34;
      }
      __int16 v67 = 16;
    }
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(v7 + 16) > 0x3Cu)
  {
    if (v66 != 61)
    {
      if (v66 != 76) {
        return v34;
      }
      goto LABEL_129;
    }
    __int16 v67 = 14;
LABEL_137:
    unint64_t Type = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createType(a1, (swift::Demangle::__runtime::Node *)v7);
    int v68 = a1;
    __int16 v69 = v67;
    goto LABEL_138;
  }
  if (v66 == 24)
  {
    __int16 v67 = 13;
    goto LABEL_137;
  }
  if (v66 != 29) {
    return v34;
  }
LABEL_129:
  int v68 = a1;
  __int16 v69 = 19;
  unint64_t Type = (swift::Demangle::__runtime::Node *)v7;
LABEL_138:

  return swift::Demangle::__runtime::Demangler::createWithChildren(v68, v69, Type, (swift::Demangle::__runtime::Node *)v39);
}

uint64_t swift::Demangle::__runtime::nodeConsumesGenericArgs(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  uint64_t result = 0;
  int v4 = *((unsigned __int16 *)this + 8);
  if (v4 > 217)
  {
    unsigned int v6 = v4 - 218;
    BOOL v7 = v6 > 0x24;
    uint64_t v8 = (1 << v6) & 0x1000000005;
    if (v7 || v8 == 0) {
      return 1;
    }
  }
  else
  {
    BOOL v5 = (v4 - 117) > 0x3E || ((1 << (v4 - 117)) & 0x6000000000000101) == 0;
    if (v5 && v4 != 33 && v4 != 70) {
      return 1;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParamConvention(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_16:
    unint64_t v14 = 0;
    *((void *)a1 + 9) = v4 - 1;
    return v14;
  }
  unint64_t v4 = v3 + 1;
  *((void *)a1 + 9) = v3 + 1;
  uint64_t v5 = *(char *)(*((void *)a1 + 7) + v3) - 98;
  if (v5 >= 0x18 || ((0xD05CABu >> v5) & 1) == 0) {
    goto LABEL_16;
  }
  BOOL v7 = off_C9458[v5];
  unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2 * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    unint64_t v12 = (char *)v11 + v10;
    void *v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v12;
    *((void *)a1 + 3) = v11;
  }
  *((void *)a1 + 1) = v8 + 24;
  size_t v13 = strlen(v7);
  *(_WORD *)(v8 + 16) = 106;
  *(unsigned char *)(v8 + 18) = 3;
  *(void *)unint64_t v8 = v7;
  *(void *)(v8 + 8) = v13;
  unint64_t v14 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)a1 + 2))
  {
    unint64_t v15 = 2 * *((void *)a1 + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)a1 + 4) = v15;
    unint64_t v16 = v15 + 8;
    unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    uint64_t v18 = (char *)v17 + v16;
    *unint64_t v17 = *((void *)a1 + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v18;
    *((void *)a1 + 3) = v17;
  }
  *((void *)a1 + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = a2;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v8, a1);
  return v14;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplResultConvention(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_5:
    unint64_t v7 = 0;
    *((void *)a1 + 9) = v4 - 1;
  }
  else
  {
    unint64_t v4 = v3 + 1;
    *((void *)a1 + 9) = v3 + 1;
    unsigned int v6 = "@out";
    switch(*(unsigned char *)(*((void *)a1 + 7) + v3))
    {
      case 'a':
        unsigned int v6 = "@autoreleased";
        break;
      case 'd':
        unsigned int v6 = "@unowned";
        break;
      case 'k':
        unsigned int v6 = "@pack_out";
        break;
      case 'o':
        unsigned int v6 = "@owned";
        break;
      case 'r':
        break;
      case 'u':
        unsigned int v6 = "@unowned_inner_pointer";
        break;
      default:
        goto LABEL_5;
    }
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      unint64_t v12 = (char *)v11 + v10;
      void *v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v8 + 24;
    size_t v13 = strlen(v6);
    *(_WORD *)(v8 + 16) = 106;
    *(unsigned char *)(v8 + 18) = 3;
    *(void *)unint64_t v8 = v6;
    *(void *)(v8 + 8) = v13;
    unint64_t v7 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v7;
    if (!v7 || v7 + 24 > *((void *)a1 + 2))
    {
      unint64_t v14 = 2 * *((void *)a1 + 4);
      if (v14 <= 0x20) {
        unint64_t v14 = 32;
      }
      *((void *)a1 + 4) = v14;
      unint64_t v15 = v14 + 8;
      unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)v16 + v15;
      *unint64_t v16 = *((void *)a1 + 3);
      unint64_t v7 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v17;
      *((void *)a1 + 3) = v16;
    }
    *((void *)a1 + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = a2;
    *(unsigned char *)(v7 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v8, a1);
  }
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParameterSending(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v1) != 84) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unsigned int v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    *unsigned int v6 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v6 + v5;
    *((void *)this + 3) = v6;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 111;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = "sending";
  *(void *)(result + 8) = 7;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParameterResultDifferentiability(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v2) == 119)
  {
    *((void *)this + 9) = v2 + 1;
    unint64_t v3 = "@noDerivative";
  }
  else
  {
    unint64_t v3 = (const char *)&unk_BFEA3;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  size_t v9 = strlen(v3);
  *(_WORD *)(v4 + 16) = 110;
  *(unsigned char *)(v4 + 18) = 3;
  *(void *)unint64_t v4 = v3;
  *(void *)(v4 + 8) = v9;
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  unint64_t v3 = 0;
  *((void *)this + 9) = v1 + 1;
  switch(*(unsigned char *)(*((void *)this + 7) + v1))
  {
    case 'A':
      unint64_t v4 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this);
      if (!v4) {
        return 0;
      }
      int v5 = *((_DWORD *)this + 24);
      if (!v5) {
        return 0;
      }
      unsigned int v6 = v5 - 1;
      unint64_t v7 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v6);
      if (*((_WORD *)v7 + 8) != 232) {
        return 0;
      }
      unint64_t v8 = v4;
      *((_DWORD *)this + 24) = v6;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        unint64_t v12 = (char *)v11 + v10;
        void *v11 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v12;
        *((void *)this + 3) = v11;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v13 = 294;
      goto LABEL_39;
    case 'E':
      unint64_t v14 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v14) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v14;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2 * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        uint64_t v18 = (char *)v17 + v16;
        *unint64_t v17 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 292;
      goto LABEL_47;
    case 'M':
      int v20 = *((_DWORD *)this + 24);
      if (!v20) {
        return 0;
      }
      unsigned int v21 = v20 - 1;
      unint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v21);
      int v22 = *(unsigned __int16 *)(v8 + 16);
      if (v22 == 101)
      {
        *((_DWORD *)this + 24) = v21;
        unint64_t v8 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v8, 153);
        if (!v8) {
          return 0;
        }
      }
      else
      {
        if (v22 != 153) {
          return 0;
        }
        *((_DWORD *)this + 24) = v21;
      }
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2 * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        long long v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        unsigned int v38 = (char *)v37 + v36;
        void *v37 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 291;
LABEL_47:
      *(_WORD *)(v3 + 16) = v19;
      *(unsigned char *)(v3 + 18) = 0;
LABEL_48:
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, (swift::Demangle::__runtime::Node *)v8, this);
      break;
    case 'X':
      unint64_t v23 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v23) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v23;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v24 = 2 * *((void *)this + 4);
        if (v24 <= 0x20) {
          unint64_t v24 = 32;
        }
        *((void *)this + 4) = v24;
        unint64_t v25 = v24 + 8;
        int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        uint64_t v27 = (char *)v26 + v25;
        void *v26 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v27;
        *((void *)this + 3) = v26;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 293;
      goto LABEL_47;
    case 'Y':
      int v28 = *((_DWORD *)this + 24);
      if (!v28) {
        return 0;
      }
      unsigned int v29 = v28 - 1;
      unint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v29);
      *((_DWORD *)this + 24) = v29;
      if (!v8) {
        return 0;
      }
      unint64_t v30 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v30) {
        return 0;
      }
      unint64_t v7 = v30;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2 * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        unint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        unint64_t v34 = (char *)v33 + v32;
        void *v33 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v13 = 293;
LABEL_39:
      *(_WORD *)(v3 + 16) = v13;
      *(unsigned char *)(v3 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v7, this);
      goto LABEL_48;
    default:
      return v3;
  }
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::popAssocTypePath(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unsigned int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 289;
  *(unsigned char *)(v2 + 18) = 0;
  do
  {
    int v7 = *((_DWORD *)this + 24);
    if (v7 && (unsigned int v8 = v7 - 1, v9 = *(void *)(*((void *)this + 11) + 8 * v8), *(_WORD *)(v9 + 16) == 275)) {
      *((_DWORD *)this + 24) = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
    if (!v10) {
      return 0;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v10, this);
  }
  while (!v9);
  int v11 = *(unsigned __int8 *)(v2 + 18);
  if (v11 == 5)
  {
    uint64_t v13 = *(unsigned int *)(v2 + 8);
    if (v13)
    {
      unint64_t v14 = (void *)(*(void *)v2 + 8 * v13 - 8);
      if ((unint64_t)v14 > *(void *)v2)
      {
        unint64_t v15 = *(void *)v2 + 8;
        do
        {
          uint64_t v16 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = *v14;
          *v14-- = v16;
          BOOL v17 = v15 >= (unint64_t)v14;
          v15 += 8;
        }
        while (!v17);
      }
    }
  }
  else if (v11 == 2)
  {
    *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v4 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
  unint64_t v5 = v4;
  if (!a2)
  {
    int v20 = *((_DWORD *)this + 24);
    if (!v20) {
      return 0;
    }
    unsigned int v21 = v20 - 1;
    unint64_t v6 = *(void *)(*((void *)this + 11) + 8 * v21);
    if (*(_WORD *)(v6 + 16) != 232) {
      return 0;
    }
    *((_DWORD *)this + 24) = v21;
    if (!v4) {
      return v5;
    }
    goto LABEL_8;
  }
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    void *v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 232;
  *(unsigned char *)(v6 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a2, this);
  if (v5)
  {
LABEL_8:
    unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v11;
    if (!v11 || v11 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      unint64_t v15 = (char *)v14 + v13;
      *unint64_t v14 = *((void *)this + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 45;
    *(unsigned char *)(v11 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v6, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v5, this);
    unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v16 = 2 * *((void *)this + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32;
      }
      *((void *)this + 4) = v16;
      unint64_t v17 = v16 + 8;
      uint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      __int16 v19 = (char *)v18 + v17;
      *uint64_t v18 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v19;
      *((void *)this + 3) = v18;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 232;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::Node *)v11, this);
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (char *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v4;
  if (v4) {
    BOOL v5 = (unint64_t)(v4 + 32) > v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unint64_t v6 = 2 * *((void *)this + 4);
    if (v6 <= 0x28) {
      unint64_t v6 = 40;
    }
    *((void *)this + 4) = v6;
    unint64_t v7 = v6 + 8;
    unint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    uint64_t v9 = (char *)v8 + v7;
    *unint64_t v8 = *((void *)this + 3);
    unint64_t v4 = (char *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v8;
  }
  unsigned int v10 = 0;
  *((void *)this + 1) = v4 + 32;
  unsigned int v11 = 4;
  do
  {
    int v13 = *((_DWORD *)this + 24);
    if (v13 && (unsigned int v14 = v13 - 1, v15 = *(void *)(*((void *)this + 11) + 8 * v14), *(_WORD *)(v15 + 16) == 275)) {
      *((_DWORD *)this + 24) = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
    if (!v16) {
      return 0;
    }
    unint64_t v17 = v16;
    if (v10 >= v11)
    {
      uint64_t v18 = &v4[8 * v11];
      __int16 v19 = (char *)*((void *)this + 1);
      if (v18 == v19)
      {
        unsigned int v21 = v18 + 8;
        unint64_t v20 = *((void *)this + 2);
        if ((unint64_t)v21 <= v20)
        {
          *((void *)this + 1) = v21;
          LODWORD(v22) = 1;
LABEL_11:
          v11 += v22;
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v20 = *((void *)this + 2);
      }
      if (2 * v11 <= 4) {
        uint64_t v22 = 4;
      }
      else {
        uint64_t v22 = 2 * v11;
      }
      uint64_t v23 = 8 * (v22 + v11);
      unint64_t v24 = (char *)((unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)this + 1) = v24;
      if (!v24 || (unint64_t)&v24[v23] > v20)
      {
        unint64_t v25 = 2 * *((void *)this + 4);
        if (v25 <= v23 + 8) {
          unint64_t v25 = v23 + 8;
        }
        *((void *)this + 4) = v25;
        unint64_t v26 = v25 + 8;
        uint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
        int v28 = (char *)v27 + v26;
        void *v27 = *((void *)this + 3);
        unint64_t v24 = (char *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((void *)this + 2) = v28;
        *((void *)this + 3) = v27;
      }
      *((void *)this + 1) = &v24[v23];
      if (v11) {
        memcpy(v24, v4, 8 * v11);
      }
      unint64_t v4 = v24;
      goto LABEL_11;
    }
LABEL_12:
    unsigned int v12 = v10 + 1;
    *(void *)&v4[8 * v10++] = v17;
  }
  while (!v15);
  if (a2)
  {
    unint64_t v30 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v30;
    if (!v30 || v30 + 24 > *((void *)this + 2))
    {
      unint64_t v31 = 2 * *((void *)this + 4);
      if (v31 <= 0x20) {
        unint64_t v31 = 32;
      }
      *((void *)this + 4) = v31;
      unint64_t v32 = v31 + 8;
      unint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      unint64_t v34 = (char *)v33 + v32;
      void *v33 = *((void *)this + 3);
      unint64_t v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v34;
      *((void *)this + 3) = v33;
    }
    *((void *)this + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 232;
    *(unsigned char *)(v30 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v30, a2, this);
    if (!v12) {
      return v30;
    }
LABEL_47:
    uint64_t v37 = 8 * v12;
    unsigned int v38 = v4 - 8;
    while (1)
    {
      unsigned int v42 = *(swift::Demangle::__runtime::Node **)&v38[v37];
      if (!v42) {
        break;
      }
      unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v43;
      if (!v43 || v43 + 24 > *((void *)this + 2))
      {
        unint64_t v44 = 2 * *((void *)this + 4);
        if (v44 <= 0x20) {
          unint64_t v44 = 32;
        }
        *((void *)this + 4) = v44;
        unint64_t v45 = v44 + 8;
        int v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
        unint64_t v47 = (char *)v46 + v45;
        *int v46 = *((void *)this + 3);
        unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v47;
        *((void *)this + 3) = v46;
      }
      unint64_t v29 = 0;
      *((void *)this + 1) = v43 + 24;
      *(_WORD *)(v43 + 16) = 45;
      *(unsigned char *)(v43 + 18) = 0;
      if (v30 && v43)
      {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, (swift::Demangle::__runtime::Node *)v30, this);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, v42, this);
        unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v29;
        if (!v29 || v29 + 24 > *((void *)this + 2))
        {
          unint64_t v39 = 2 * *((void *)this + 4);
          if (v39 <= 0x20) {
            unint64_t v39 = 32;
          }
          *((void *)this + 4) = v39;
          unint64_t v40 = v39 + 8;
          int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
          *int v41 = *((void *)this + 3);
          unint64_t v29 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v41 + v40;
          *((void *)this + 3) = v41;
        }
        *((void *)this + 1) = v29 + 24;
        *(_WORD *)(v29 + 16) = 232;
        *(unsigned char *)(v29 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, (swift::Demangle::__runtime::Node *)v43, this);
      }
      unint64_t v30 = v29;
      v37 -= 8;
      if (!v37) {
        return v29;
      }
    }
    return v30;
  }
  int v35 = *((_DWORD *)this + 24);
  if (v35 && (v36 = v35 - 1, unint64_t v30 = *(void *)(*((void *)this + 11) + 8 * v36), *(_WORD *)(v30 + 16) == 232))
  {
    *((_DWORD *)this + 24) = v36;
    if (v12) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v30 = 0;
    if (v12) {
      goto LABEL_47;
    }
  }
  return v30;
}

unint64_t swift::Demangle::__runtime::Demangler::popAssocTypeName(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  uint64_t v4 = *((void *)this + 11);
  BOOL v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
  int v6 = v5[8];
  if (v6 == 181)
  {
LABEL_16:
    *((_DWORD *)this + 24) = v3;
    int v1 = v3;
    if (!v3) {
      return 0;
    }
    goto LABEL_19;
  }
  if (v6 != 232)
  {
LABEL_15:
    int v3 = v1 - 1;
    BOOL v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
    if (v5[8] != 347)
    {
      BOOL v5 = 0;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *((_DWORD *)this + 24) = v3;
  unint64_t v7 = v5;
  while ((unsigned __int16)v6 == 232)
  {
    if (*((unsigned __int8 *)v7 + 18) - 1 >= 2) {
      unint64_t v7 = *(unsigned __int16 **)v7;
    }
    unint64_t v7 = *(unsigned __int16 **)v7;
    LOWORD(v6) = v7[8];
  }
  if ((unsigned __int16)v6 - 180 >= 2 && (unsigned __int16)v6 != 347) {
    return 0;
  }
  if (!v5)
  {
    int v1 = v3;
    if (!v3) {
      return 0;
    }
    goto LABEL_15;
  }
  int v1 = v3;
  if (!v3) {
    return 0;
  }
LABEL_19:
  unint64_t v8 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v1 - 1));
  if (*((_WORD *)v8 + 8) != 101) {
    return 0;
  }
  *((_DWORD *)this + 24) = v1 - 1;
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    unsigned int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    int v13 = (char *)v12 + v11;
    *unsigned int v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 35;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, v8, this);
  if (v5 && v9) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v5, this);
  }
  return v9;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  int v3 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(a1, a2);
  if (!v3) {
    return v3;
  }
  unint64_t v4 = swift::Demangle::__runtime::Demangler::popTypeList(a1);
  if (!v4) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(v4 + 18);
  int v6 = (swift::Demangle::__runtime::Node **)v4;
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5)
    {
      unint64_t v7 = *(swift::Demangle::__runtime::Node ***)v4;
      int v6 = *(swift::Demangle::__runtime::Node ***)v4;
LABEL_12:
      unint64_t v8 = &v7[*(unsigned int *)(v4 + 8)];
      if (v6 == v8) {
        return v3;
      }
      goto LABEL_22;
    }
    int v6 = 0;
  }
  switch(v5)
  {
    case 1:
      unint64_t v8 = (swift::Demangle::__runtime::Node **)(v4 + 8);
      if (v6 == (swift::Demangle::__runtime::Node **)(v4 + 8)) {
        return v3;
      }
      break;
    case 2:
      unint64_t v8 = (swift::Demangle::__runtime::Node **)(v4 + 16);
      if (v6 == (swift::Demangle::__runtime::Node **)(v4 + 16)) {
        return v3;
      }
      break;
    case 5:
      unint64_t v7 = *(swift::Demangle::__runtime::Node ***)v4;
      goto LABEL_12;
    default:
      unint64_t v8 = 0;
      if (!v6) {
        return v3;
      }
      goto LABEL_22;
  }
  do
  {
LABEL_22:
    unint64_t v10 = *v6;
    if (*v6)
    {
      unint64_t v9 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v9;
      if (!v9 || v9 + 24 > *((void *)a1 + 2))
      {
        unint64_t v11 = 2 * *((void *)a1 + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)a1 + 4) = v11;
        unint64_t v12 = v11 + 8;
        int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        unsigned int v14 = (char *)v13 + v12;
        *int v13 = *((void *)a1 + 3);
        unint64_t v9 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = v14;
        *((void *)a1 + 3) = v13;
      }
      *((void *)a1 + 1) = v9 + 24;
      *(_WORD *)(v9 + 16) = 94;
      *(unsigned char *)(v9 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, v10, a1);
    }
    else
    {
      unint64_t v9 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v3, (swift::Demangle::__runtime::Node *)v9, a1);
    ++v6;
  }
  while (v6 != v8);
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSpecAttributes(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v5 = *((void *)a1 + 8);
  unint64_t v4 = *((void *)a1 + 9);
  if (v4 < v5 && *(unsigned char *)(*((void *)a1 + 7) + v4) == 109)
  {
    *((void *)a1 + 9) = ++v4;
    int v6 = 1;
    if (v4 >= v5) {
      goto LABEL_9;
    }
  }
  else
  {
    int v6 = 0;
    if (v4 >= v5) {
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(*((void *)a1 + 7) + v4) == 113)
  {
    *((void *)a1 + 9) = ++v4;
    int v7 = 1;
    if (v4 >= v5) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_9:
  int v7 = 0;
  if (v4 >= v5) {
    goto LABEL_13;
  }
LABEL_10:
  if (*(unsigned char *)(*((void *)a1 + 7) + v4) != 97)
  {
LABEL_13:
    int v8 = 0;
    if (v4 < v5) {
      goto LABEL_14;
    }
    return 0;
  }
  *((void *)a1 + 9) = ++v4;
  int v8 = 1;
  if (v4 >= v5) {
    return 0;
  }
LABEL_14:
  *((void *)a1 + 9) = v4 + 1;
  int v9 = *(char *)(*((void *)a1 + 7) + v4);
  if ((v9 - 58) < 0xF6u) {
    return 0;
  }
  unint64_t v10 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v10;
  if (!v10 || (unint64_t v11 = *((void *)a1 + 2), v10 + 24 > v11))
  {
    unint64_t v12 = 2 * *((void *)a1 + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)a1 + 4) = v12;
    unint64_t v13 = v12 + 8;
    unsigned int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    unint64_t v11 = (unint64_t)v14 + v13;
    *unsigned int v14 = *((void *)a1 + 3);
    unint64_t v10 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v14;
  }
  unint64_t v15 = v10 + 24;
  *(_WORD *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 18) = 0;
  if (!v6)
  {
    if (!v7) {
      goto LABEL_28;
    }
LABEL_31:
    unint64_t v21 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v21;
    if (!v21 || v21 + 24 > *((void *)a1 + 2))
    {
      unint64_t v22 = 2 * *((void *)a1 + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)a1 + 4) = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *unint64_t v24 = *((void *)a1 + 3);
      unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = (char *)v24 + v23;
      *((void *)a1 + 3) = v24;
    }
    *((void *)a1 + 1) = v21 + 24;
    *(_WORD *)(v21 + 16) = 217;
    *(unsigned char *)(v21 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v21, a1);
    unint64_t v15 = *((void *)a1 + 1);
    unsigned int v20 = v9 - 48;
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  unint64_t v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v16;
  if (!v16 || v16 + 24 > v11)
  {
    unint64_t v17 = 2 * *((void *)a1 + 4);
    if (v17 <= 0x20) {
      unint64_t v17 = 32;
    }
    *((void *)a1 + 4) = v17;
    unint64_t v18 = v17 + 8;
    __int16 v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
    *__int16 v19 = *((void *)a1 + 3);
    unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v19 + v18;
    *((void *)a1 + 3) = v19;
  }
  *((void *)a1 + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = 339;
  *(unsigned char *)(v16 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v16, a1);
  unint64_t v15 = *((void *)a1 + 1);
  if (v7) {
    goto LABEL_31;
  }
LABEL_28:
  unsigned int v20 = v9 - 48;
  if (v8)
  {
LABEL_37:
    unint64_t v25 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)a1 + 2))
    {
      unint64_t v26 = 2 * *((void *)a1 + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)a1 + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)a1 + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = (char *)v28 + v27;
      *((void *)a1 + 3) = v28;
    }
    *((void *)a1 + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 346;
    *(unsigned char *)(v25 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v25, a1);
    unint64_t v15 = *((void *)a1 + 1);
  }
LABEL_43:
  unint64_t v29 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v29;
  if (!v29 || v29 + 24 > *((void *)a1 + 2))
  {
    unint64_t v30 = 2 * *((void *)a1 + 4);
    if (v30 <= 0x20) {
      unint64_t v30 = 32;
    }
    *((void *)a1 + 4) = v30;
    unint64_t v31 = v30 + 8;
    unint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
    *unint64_t v32 = *((void *)a1 + 3);
    unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v32 + v31;
    *((void *)a1 + 3) = v32;
  }
  *((void *)a1 + 1) = v29 + 24;
  *(_WORD *)(v29 + 16) = 216;
  *(unsigned char *)(v29 + 18) = 4;
  *(void *)unint64_t v29 = v20;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v29, a1);
  return v10;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, 77);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = *((void *)this + 9);
      if (v3 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v3) == 95) {
        break;
      }
      unint64_t v4 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 78);
      if (!v4)
      {
        unint64_t v2 = 0;
        goto LABEL_8;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v4, this);
    }
    *((void *)this + 9) = v3 + 1;
  }
LABEL_8:
  unint64_t v5 = *((void *)this + 9);
  if (v5 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v5) == 110)
  {
    *((void *)this + 9) = v5 + 1;
    if (!v2) {
      return 0;
    }
  }
  else
  {
    int v7 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 79);
    uint64_t result = 0;
    if (!v2 || !v7) {
      return result;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v7, this);
  }
  uint64_t v8 = *(unsigned __int8 *)(v2 + 18);
  if (v8 == 1) {
    goto LABEL_20;
  }
  if (v8 == 5)
  {
    uint64_t v8 = *(unsigned int *)(v2 + 8);
    if (v8) {
      goto LABEL_20;
    }
    return v2;
  }
  if (v8 != 2) {
    return v2;
  }
  uint64_t v8 = 2;
LABEL_20:
  uint64_t v9 = 0;
  while (1)
  {
    unint64_t v10 = *(unsigned __int8 *)(v2 + 18);
    unsigned int v11 = v10 - 1;
    if (v10 != 1)
    {
      if (v10 == 5)
      {
        unint64_t v10 = *(unsigned int *)(v2 + 8);
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_31;
        }
        unint64_t v10 = 2;
      }
    }
    unint64_t v12 = v8 + ~v9;
    if (v10 <= v12)
    {
LABEL_31:
      uint64_t v14 = 0;
      goto LABEL_32;
    }
    unint64_t v13 = v2;
    if (v11 >= 2) {
      unint64_t v13 = *(void *)v2;
    }
    uint64_t v14 = *(void *)(v13 + 8 * v12);
LABEL_32:
    if (*(_WORD *)(v14 + 16) != 78) {
      goto LABEL_21;
    }
    uint64_t v15 = *(unsigned __int8 *)(v14 + 18);
    unint64_t v16 = (unsigned int **)v14;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*(_DWORD *)(v14 + 8)) {
        goto LABEL_21;
      }
      unint64_t v16 = *(unsigned int ***)v14;
    }
    unsigned int v17 = **v16;
    if (v17 > 9 || ((1 << v17) & 0x233) == 0) {
      goto LABEL_21;
    }
    if (v15 == 1) {
      goto LABEL_47;
    }
    if (v15 == 5) {
      break;
    }
    if (v15 == 2)
    {
      uint64_t v15 = 2;
      int v19 = *((_DWORD *)this + 24);
      if (v19) {
        goto LABEL_52;
      }
      return 0;
    }
    uint64_t v15 = 0;
    int v19 = *((_DWORD *)this + 24);
    if (!v19) {
      return 0;
    }
LABEL_52:
    while (1)
    {
      unsigned int v20 = v19 - 1;
      uint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v20);
      int v22 = *(unsigned __int16 *)(v21 + 16);
      if (v22 != 232) {
        break;
      }
      *((_DWORD *)this + 24) = v20;
      if (v17 == 9 || v17 == 5)
      {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v21, this);
        int v19 = *((_DWORD *)this + 24);
        if (v19) {
          continue;
        }
      }
      return 0;
    }
    if (v22 != 101) {
      return 0;
    }
    *((_DWORD *)this + 24) = v20;
    unint64_t v24 = *(unsigned char **)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    if (v17 == 4 && v23 && *v24 == 95)
    {
      --v23;
      ++v24;
    }
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 81;
    *(unsigned char *)(v25 + 18) = 3;
    *(void *)unint64_t v25 = v24;
    *(void *)(v25 + 8) = v23;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v25, this);
    int v29 = *(unsigned __int8 *)(v14 + 18);
    if (v29 == 5)
    {
      uint64_t v30 = *(unsigned int *)(v14 + 8);
      if (v15 != v30)
      {
        unint64_t v31 = (void *)(*(void *)v14 + 8 * v30 - 8);
        if ((unint64_t)v31 > *(void *)v14 + 8 * v15)
        {
          unint64_t v32 = *(void *)v14 + 8 * v15 + 8;
          do
          {
            uint64_t v33 = *(void *)(v32 - 8);
            *(void *)(v32 - 8) = *v31;
            *v31-- = v33;
            BOOL v34 = v32 >= (unint64_t)v31;
            v32 += 8;
          }
          while (!v34);
        }
      }
    }
    else if (v29 == 2 && !v15)
    {
      *(int8x16_t *)uint64_t v14 = vextq_s8(*(int8x16_t *)v14, *(int8x16_t *)v14, 8uLL);
    }
LABEL_21:
    if (++v9 == v8) {
      return v2;
    }
  }
  uint64_t v15 = *(unsigned int *)(v14 + 8);
LABEL_47:
  int v19 = *((_DWORD *)this + 24);
  if (v19) {
    goto LABEL_52;
  }
  return 0;
}

void std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100](void **a1, void *a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  int v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      int v19 = &v14[8 * v10 - 16];
      unsigned int v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *int v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
      int v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *a2;
    int v7 = v5 + 8;
  }
  a1[1] = v7;
}

double swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams@<D0>(swift::Demangle::__runtime::Demangler *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= *((void *)this + 8)) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(*((void *)this + 7) + v3) == 95)
  {
    *((void *)this + 9) = v3 + 1;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  memset(&v12, 0, sizeof(v12));
  *((void *)this + 9) = v3 + 1;
  int v5 = *(char *)(*((void *)this + 7) + v3);
  if ((v5 - 97) > 0xF || ((1 << (v5 - 97)) & 0xD001) == 0)
  {
LABEL_22:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  std::string::push_back(&v12, v5);
  do
  {
    unint64_t v8 = *((void *)this + 9);
    if (v8 >= *((void *)this + 8))
    {
      int v10 = 0;
LABEL_17:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      continue;
    }
    int v9 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    *((void *)this + 9) = v8 + 1;
    if (v9 == 95)
    {
      double result = *(double *)&v12.__r_.__value_.__l.__data_;
      *a2 = v12;
      return result;
    }
    int v10 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    if ((v10 - 98) > 0xC || ((1 << (v10 - 98)) & 0x1021) == 0) {
      goto LABEL_17;
    }
    std::string::push_back(&v12, v10);
  }
  while ((v10 - 98) <= 0xC && ((1 << (v10 - 98)) & 0x1021) != 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return result;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 323;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7)
  {
    do
    {
      unsigned int v8 = v7 - 1;
      int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v8);
      *((_DWORD *)this + 24) = v8;
      if (!v9) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v9, this);
      int v7 = *((_DWORD *)this + 24);
    }
    while (v7);
    int v10 = *(unsigned __int8 *)(v2 + 18);
    if (v10 == 5)
    {
      unint64_t v11 = *(void *)v2;
      uint64_t v12 = *(unsigned int *)(v2 + 8);
      unint64_t v13 = (void *)(*(void *)v2 + 8 * v12 - 8);
      if (v12) {
        BOOL v14 = (unint64_t)v13 > v11;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        unint64_t v15 = v11 + 8;
        do
        {
          uint64_t v16 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = *v13;
          *v13-- = v16;
          BOOL v17 = v15 >= (unint64_t)v13;
          v15 += 8;
        }
        while (!v17);
      }
    }
    else if (v10 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v18 = *((void *)this + 9);
  if (v18 >= *((void *)this + 8))
  {
    int v19 = 0;
  }
  else
  {
    *((void *)this + 9) = v18 + 1;
    int v19 = *(unsigned __int8 *)(*((void *)this + 7) + v18);
  }
  HIDWORD(v20) = v19;
  LODWORD(v20) = (v19 << 24) - 1677721600;
  unsigned int v21 = (v20 >> 25);
  BOOL v14 = v21 > 7;
  int v22 = (1 << v21) & 0xC3;
  if (v14 || v22 == 0)
  {
    unint64_t v2 = 0;
  }
  else
  {
    uint64_t v24 = (char)v19;
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 321;
    *(unsigned char *)(v25 + 18) = 4;
    *(void *)unint64_t v25 = v24;
    if (v2) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v25, this);
    }
  }
  int v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  uint64_t v30 = 0;
  if (v2 && v29)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v29, this);
    uint64_t v30 = (swift::Demangle::__runtime::Node *)v2;
  }
  unint64_t v31 = *((void *)this + 9);
  if (v31 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v31) != 112) {
    return 0;
  }
  *((void *)this + 9) = v31 + 1;
  unint64_t v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  uint64_t v33 = 0;
  if (v30 && v32)
  {
    swift::Demangle::__runtime::Node::addChild(v30, v32, this);
    uint64_t v33 = v30;
  }
  unint64_t v34 = *((void *)this + 9);
  if (v34 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v34) != 114) {
    return 0;
  }
  *((void *)this + 9) = v34 + 1;
  int v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  double result = 0;
  if (v33 && v35)
  {
    swift::Demangle::__runtime::Node::addChild(v33, v35, this);
    double result = v33;
  }
  unint64_t v37 = *((void *)this + 9);
  if (v37 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v37) != 80) {
    return 0;
  }
  *((void *)this + 9) = v37 + 1;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 322;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (!v7) {
    goto LABEL_18;
  }
  unsigned int v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v7 - 1));
  if (*((_WORD *)v8 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7 - 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v8, this);
    int v7 = *((_DWORD *)this + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v7 - 1));
  if (*((_WORD *)v9 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v7 - 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v9, this);
    int v7 = *((_DWORD *)this + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  unsigned int v10 = v7 - 1;
  unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
  if (*((_WORD *)v11 + 8) != 232)
  {
LABEL_18:
    unint64_t v2 = 0;
    goto LABEL_19;
  }
  *((_DWORD *)this + 24) = v10;
  if (v2)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v11, this);
    int v12 = *(unsigned __int8 *)(v2 + 18);
    if (v12 == 5)
    {
      uint64_t v26 = *(unsigned int *)(v2 + 8);
      if (v26)
      {
        unint64_t v27 = (void *)(*(void *)v2 + 8 * v26 - 8);
        if ((unint64_t)v27 > *(void *)v2)
        {
          unint64_t v28 = *(void *)v2 + 8;
          do
          {
            uint64_t v29 = *(void *)(v28 - 8);
            *(void *)(v28 - 8) = *v27;
            *v27-- = v29;
            BOOL v30 = v28 >= (unint64_t)v27;
            v28 += 8;
          }
          while (!v30);
        }
      }
    }
    else if (v12 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
LABEL_19:
  unint64_t v13 = *((void *)this + 9);
  if (v13 >= *((void *)this + 8))
  {
    int v14 = 0;
  }
  else
  {
    *((void *)this + 9) = v13 + 1;
    int v14 = *(unsigned __int8 *)(*((void *)this + 7) + v13);
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = (v14 << 24) - 1677721600;
  unsigned int v16 = (v15 >> 25);
  BOOL v17 = v16 > 7;
  int v18 = (1 << v16) & 0xC3;
  if (v17 || v18 == 0) {
    return 0;
  }
  uint64_t v20 = (char)v14;
  unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v21;
  if (!v21 || v21 + 24 > *((void *)this + 2))
  {
    unint64_t v22 = 2 * *((void *)this + 4);
    if (v22 <= 0x20) {
      unint64_t v22 = 32;
    }
    *((void *)this + 4) = v22;
    unint64_t v23 = v22 + 8;
    uint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    *uint64_t v24 = *((void *)this + 3);
    unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v24 + v23;
    *((void *)this + 3) = v24;
  }
  *((void *)this + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = 321;
  *(unsigned char *)(v21 + 18) = 4;
  *(void *)unint64_t v21 = v20;
  if (v2) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v21, this);
  }
  return v2;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk(swift::Demangle::__runtime::Demangler *this, __int16 a2)
{
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned int v8 = (char *)v7 + v6;
    void *v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 18) = 0;
  int v9 = *((_DWORD *)this + 24);
  if (v9)
  {
    do
    {
      unsigned int v10 = v9 - 1;
      unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
      *((_DWORD *)this + 24) = v10;
      if (!v11) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v11, this);
      int v9 = *((_DWORD *)this + 24);
    }
    while (v9);
    int v12 = *(unsigned __int8 *)(v4 + 18);
    if (v12 == 5)
    {
      unint64_t v13 = *(void *)v4;
      uint64_t v14 = *(unsigned int *)(v4 + 8);
      unint64_t v15 = (void *)(*(void *)v4 + 8 * v14 - 8);
      if (v14) {
        BOOL v16 = (unint64_t)v15 > v13;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        unint64_t v17 = v13 + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v15;
          *v15-- = v18;
          BOOL v19 = v17 >= (unint64_t)v15;
          v17 += 8;
        }
        while (!v19);
      }
    }
    else if (v12 == 2)
    {
      *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
    }
  }
  unint64_t v20 = *((void *)this + 9);
  if (v20 >= *((void *)this + 8))
  {
    int v21 = 0;
  }
  else
  {
    *((void *)this + 9) = v20 + 1;
    int v21 = *(unsigned __int8 *)(*((void *)this + 7) + v20);
  }
  HIDWORD(v22) = v21;
  LODWORD(v22) = (v21 << 24) - 1677721600;
  unsigned int v23 = (v22 >> 25);
  BOOL v16 = v23 > 7;
  int v24 = (1 << v23) & 0xC3;
  if (v16 || v24 == 0)
  {
    unint64_t v4 = 0;
  }
  else
  {
    uint64_t v26 = (char)v21;
    unint64_t v27 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v27;
    if (!v27 || v27 + 24 > *((void *)this + 2))
    {
      unint64_t v28 = 2 * *((void *)this + 4);
      if (v28 <= 0x20) {
        unint64_t v28 = 32;
      }
      *((void *)this + 4) = v28;
      unint64_t v29 = v28 + 8;
      BOOL v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      *BOOL v30 = *((void *)this + 3);
      unint64_t v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v30 + v29;
      *((void *)this + 3) = v30;
    }
    *((void *)this + 1) = v27 + 24;
    *(_WORD *)(v27 + 16) = 321;
    *(unsigned char *)(v27 + 18) = 4;
    *(void *)unint64_t v27 = v26;
    if (v4) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v27, this);
    }
  }
  unint64_t v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v32 = 0;
  if (v4 && v31)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v31, this);
    unint64_t v32 = (swift::Demangle::__runtime::Node *)v4;
  }
  unint64_t v33 = *((void *)this + 9);
  if (v33 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v33) != 112) {
    return 0;
  }
  *((void *)this + 9) = v33 + 1;
  unint64_t v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  double result = 0;
  if (v32 && v34)
  {
    swift::Demangle::__runtime::Node::addChild(v32, v34, this);
    double result = v32;
  }
  unint64_t v36 = *((void *)this + 9);
  if (v36 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v36) != 114) {
    return 0;
  }
  *((void *)this + 9) = v36 + 1;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionKind(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    int v3 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    int v3 = *(unsigned __int8 *)(*((void *)this + 7) + v2);
  }
  HIDWORD(v4) = v3;
  LODWORD(v4) = (v3 << 24) - 1677721600;
  unsigned int v5 = (v4 >> 25);
  BOOL v6 = v5 > 7;
  int v7 = (1 << v5) & 0xC3;
  if (v6 || v7 == 0) {
    return 0;
  }
  uint64_t v9 = (char)v3;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v11 = 2 * *((void *)this + 4);
    if (v11 <= 0x20) {
      unint64_t v11 = 32;
    }
    *((void *)this + 4) = v11;
    unint64_t v12 = v11 + 8;
    unint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *unint64_t v13 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v13 + v12;
    *((void *)this + 3) = v13;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 321;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = v9;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexSubset(swift::Demangle::__runtime::Demangler *this)
{
  memset(&v10, 0, sizeof(v10));
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    std::string::value_type v3 = 0;
  }
  else {
    std::string::value_type v3 = *(unsigned char *)(*((void *)this + 7) + v2);
  }
  while (v3 == 83 || v3 == 85)
  {
    std::string::push_back(&v10, v3);
    unint64_t v5 = *((void *)this + 8);
    unint64_t v4 = *((void *)this + 9);
    if (v4 < v5) {
      *((void *)this + 9) = ++v4;
    }
    std::string::value_type v3 = 0;
    if (v4 < v5) {
      std::string::value_type v3 = *(unsigned char *)(*((void *)this + 7) + v4);
    }
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v10.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    unint64_t Node = 0;
    if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) == 0) {
      return Node;
    }
    goto LABEL_18;
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v10;
  }
  else {
    int v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 327, v7, size);
  if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_18:
  }
    operator delete(v10.__r_.__value_.__l.__data_);
  return Node;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v5 + v4;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 325;
  *(unsigned char *)(v2 + 18) = 0;
  int v6 = *((_DWORD *)this + 24);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v6 - 1));
    if (*((_WORD *)v8 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v7;
      if (v6 == 1) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v8 = 0;
      int v7 = *((_DWORD *)this + 24);
    }
    do
    {
      unsigned int v9 = v7 - 1;
      std::string v10 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v9);
      *((_DWORD *)this + 24) = v9;
      if (!v10) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v10, this);
      int v7 = *((_DWORD *)this + 24);
    }
    while (v7);
    int v11 = *(unsigned __int8 *)(v2 + 18);
    if (v11 == 5)
    {
      unint64_t v12 = *(void *)v2;
      uint64_t v13 = *(unsigned int *)(v2 + 8);
      uint64_t v14 = (void *)(*(void *)v2 + 8 * v13 - 8);
      if (v13) {
        BOOL v15 = (unint64_t)v14 > v12;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        unint64_t v16 = v12 + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 8);
          *(void *)(v16 - 8) = *v14;
          *v14-- = v17;
          BOOL v18 = v16 >= (unint64_t)v14;
          v16 += 8;
        }
        while (!v18);
      }
    }
    else if (v11 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_25:
  unint64_t v19 = *((void *)this + 9);
  if (v19 >= *((void *)this + 8))
  {
    int v20 = 0;
  }
  else
  {
    *((void *)this + 9) = v19 + 1;
    int v20 = *(char *)(*((void *)this + 7) + v19);
  }
  HIDWORD(v22) = v20;
  LODWORD(v22) = v20 - 100;
  unsigned int v21 = v22 >> 1;
  if (v21 > 7 || ((0x93u >> v21) & 1) == 0) {
    return 0;
  }
  uint64_t v23 = qword_C6AC0[v21];
  unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v24;
  if (!v24 || v24 + 24 > *((void *)this + 2))
  {
    unint64_t v25 = 2 * *((void *)this + 4);
    if (v25 <= 0x20) {
      unint64_t v25 = 32;
    }
    *((void *)this + 4) = v25;
    unint64_t v26 = v25 + 8;
    unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
    void *v27 = *((void *)this + 3);
    unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v27 + v26;
    *((void *)this + 3) = v27;
  }
  *((void *)this + 1) = v24 + 24;
  *(_WORD *)(v24 + 16) = 102;
  *(unsigned char *)(v24 + 18) = 4;
  *(void *)unint64_t v24 = v23;
  if (v2) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v24, this);
  }
  unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v29 = 0;
  if (v2 && v28)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v28, this);
    unint64_t v29 = (swift::Demangle::__runtime::Node *)v2;
  }
  unint64_t v30 = *((void *)this + 9);
  if (v30 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v30) != 112) {
    return 0;
  }
  *((void *)this + 9) = v30 + 1;
  unint64_t v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v32 = 0;
  if (v29 && v31)
  {
    swift::Demangle::__runtime::Node::addChild(v29, v31, this);
    unint64_t v32 = v29;
  }
  unint64_t v33 = *((void *)this + 9);
  if (v33 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v33) != 114) {
    return 0;
  }
  *((void *)this + 9) = v33 + 1;
  if (v8 && v32) {
    swift::Demangle::__runtime::Node::addChild(v32, v8, this);
  }
  return v32;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v4 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v4;
  if (!v4 || (unint64_t v5 = *((void *)a1 + 2), v4 + 24 > v5))
  {
    unint64_t v6 = 2 * *((void *)a1 + 4);
    if (v6 <= 0x20) {
      unint64_t v6 = 32;
    }
    *((void *)a1 + 4) = v6;
    unint64_t v7 = v6 + 8;
    unsigned int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    unint64_t v5 = (unint64_t)v8 + v7;
    *unsigned int v8 = *((void *)a1 + 3);
    unint64_t v4 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v5;
    *((void *)a1 + 3) = v8;
  }
  *((void *)a1 + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 18) = 0;
  unint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *((void *)a1 + 9);
  if (v10 >= v9) {
    return 0;
  }
  unint64_t v11 = v10 + 1;
  *((void *)a1 + 9) = v10 + 1;
  uint64_t v12 = *((void *)a1 + 7);
  unint64_t result = (swift::Demangle::__runtime::Node *)v4;
  switch(*(unsigned char *)(v12 + v10))
  {
    case 'c':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v15 = v14 + 24 > v5;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        unint64_t v16 = 2 * *((void *)a1 + 4);
        if (v16 <= 0x20) {
          unint64_t v16 = 32;
        }
        *((void *)a1 + 4) = v16;
        unint64_t v17 = v16 + 8;
        BOOL v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
        *BOOL v18 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v18 + v17;
        *((void *)a1 + 3) = v18;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 5;
      break;
    case 'd':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 71)
      {
        unint64_t v11 = v10 + 2;
        *((void *)a1 + 9) = v10 + 2;
        unsigned int v19 = 192;
      }
      else
      {
        unsigned int v19 = 64;
      }
      goto LABEL_74;
    case 'e':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 68)
      {
        unint64_t v11 = v10 + 2;
        *((void *)a1 + 9) = v10 + 2;
        unsigned int v19 = 1088;
      }
      else
      {
        unsigned int v19 = 1024;
      }
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 71)
      {
        *((void *)a1 + 9) = ++v11;
        v19 |= 0x80u;
      }
LABEL_74:
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 79)
      {
        *((void *)a1 + 9) = ++v11;
        v19 |= 0x200u;
      }
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v11 + 1;
        v19 |= 0x100u;
      }
      uint64_t v20 = v19;
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (!v14 || v14 + 24 > v5) {
        goto LABEL_89;
      }
      goto LABEL_92;
    case 'g':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v10 + 2;
        uint64_t v20 = 384;
      }
      else
      {
        uint64_t v20 = 128;
      }
      goto LABEL_84;
    case 'i':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v21 = v14 + 24 > v5;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        unint64_t v22 = 2 * *((void *)a1 + 4);
        if (v22 <= 0x20) {
          unint64_t v22 = 32;
        }
        *((void *)a1 + 4) = v22;
        unint64_t v23 = v22 + 8;
        unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
        *unint64_t v24 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v24 + v23;
        *((void *)a1 + 3) = v24;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 6;
      break;
    case 'n':
      return result;
    case 'o':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v10 + 2;
        uint64_t v20 = 768;
      }
      else
      {
        uint64_t v20 = 512;
      }
LABEL_84:
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v41 = v14 + 24 > v5;
      }
      else {
        BOOL v41 = 1;
      }
      if (v41)
      {
LABEL_89:
        unint64_t v42 = 2 * *((void *)a1 + 4);
        if (v42 <= 0x20) {
          unint64_t v42 = 32;
        }
        *((void *)a1 + 4) = v42;
        unint64_t v43 = v42 + 8;
        unint64_t v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        *unint64_t v44 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v44 + v43;
        *((void *)a1 + 3) = v44;
      }
LABEL_92:
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = v20;
      break;
    case 'p':
      if (v11 >= v9) {
        return 0;
      }
      unint64_t result = 0;
      unint64_t v29 = v10 + 2;
      *((void *)a1 + 9) = v10 + 2;
      switch(*(unsigned char *)(v12 + v11))
      {
        case 'd':
          unint64_t v30 = a1;
          unint64_t v31 = (swift::Demangle::__runtime::Node *)v4;
          unsigned int v32 = 3;
          goto LABEL_104;
        case 'f':
          unint64_t v45 = a1;
          uint64_t v46 = 0;
          goto LABEL_108;
        case 'g':
          unint64_t v45 = a1;
          uint64_t v46 = 1;
          goto LABEL_108;
        case 'i':
          unint64_t v30 = a1;
          unint64_t v31 = (swift::Demangle::__runtime::Node *)v4;
          unsigned int v32 = 2;
LABEL_104:
          return swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(v30, v31, v32);
        case 'k':
          unint64_t v45 = a1;
          uint64_t v46 = 9;
LABEL_108:
          unint64_t result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v45, 80, v46);
          if (result) {
            goto LABEL_109;
          }
          return result;
        case 's':
          if (v29 >= v9) {
            return 0;
          }
          *((void *)a1 + 9) = v10 + 3;
          int v47 = *(char *)(v12 + v29);
          switch(v47)
          {
            case 'b':
              int v48 = "u8";
              break;
            case 'c':
              int v48 = "objc";
              break;
            case 'w':
              int v48 = "u16";
              break;
            default:
              return 0;
          }
          unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 80, 4);
          if (Node) {
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, Node, a1);
          }
          unint64_t result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 81, v48);
          if (!result) {
            return result;
          }
LABEL_109:
          unint64_t v14 = (unint64_t)result;
          break;
        default:
          return result;
      }
      break;
    case 'r':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v33 = v14 + 24 > v5;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33)
      {
        unint64_t v34 = 2 * *((void *)a1 + 4);
        if (v34 <= 0x20) {
          unint64_t v34 = 32;
        }
        *((void *)a1 + 4) = v34;
        unint64_t v35 = v34 + 8;
        unint64_t v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
        *unint64_t v36 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v36 + v35;
        *((void *)a1 + 3) = v36;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 8;
      break;
    case 's':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v37 = v14 + 24 > v5;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37)
      {
        unint64_t v38 = 2 * *((void *)a1 + 4);
        if (v38 <= 0x20) {
          unint64_t v38 = 32;
        }
        *((void *)a1 + 4) = v38;
        unint64_t v39 = v38 + 8;
        unint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *unint64_t v40 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v40 + v39;
        *((void *)a1 + 3) = v40;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 7;
      break;
    case 'x':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v25 = v14 + 24 > v5;
      }
      else {
        BOOL v25 = 1;
      }
      if (v25)
      {
        unint64_t v26 = 2 * *((void *)a1 + 4);
        if (v26 <= 0x20) {
          unint64_t v26 = 32;
        }
        *((void *)a1 + 4) = v26;
        unint64_t v27 = v26 + 8;
        unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        void *v28 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v28 + v27;
        *((void *)a1 + 3) = v28;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 256;
      break;
    default:
      return 0;
  }
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v14, a1);
  return (swift::Demangle::__runtime::Node *)v4;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node *a2, unsigned int a3)
{
  uint64_t v5 = a3;
  unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)a1 + 2))
  {
    unint64_t v7 = 2 * *((void *)a1 + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)a1 + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    void *v9 = *((void *)a1 + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v9 + v8;
    *((void *)a1 + 3) = v9;
  }
  *((void *)a1 + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 80;
  *(unsigned char *)(v6 + 18) = 4;
  *(void *)unint64_t v6 = v5;
  swift::Demangle::__runtime::Node::addChild(a2, (swift::Demangle::__runtime::Node *)v6, a1);
  unint64_t v10 = *((void *)a1 + 9);
  if (v10 >= *((void *)a1 + 8)) {
    return 0;
  }
  BOOL v33 = a2;
  unint64_t v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  while (1)
  {
    uint64_t v15 = *((void *)a1 + 7);
    if (*(unsigned __int8 *)(v15 + v10) - 48 > 9) {
      break;
    }
    *((void *)a1 + 9) = v10 + 1;
    char v16 = *(unsigned char *)(v15 + v10);
    if (v13 < v12) {
      goto LABEL_10;
    }
    unint64_t v17 = &v11[v12];
    BOOL v18 = (char *)*((void *)a1 + 1);
    if (v17 != v18)
    {
      unint64_t v19 = *((void *)a1 + 2);
LABEL_16:
      if (2 * v12 <= 4) {
        uint64_t v21 = 4;
      }
      else {
        uint64_t v21 = 2 * v12;
      }
      uint64_t v22 = v21 + v12;
      if (!v18 || (unint64_t)&v18[v22] > v19)
      {
        unint64_t v23 = 2 * *((void *)a1 + 4);
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        *((void *)a1 + 4) = v23;
        unint64_t v24 = v23 + 8;
        BOOL v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
        unint64_t v26 = (char *)v25 + v24;
        *BOOL v25 = *((void *)a1 + 3);
        BOOL v18 = (char *)(v25 + 1);
        *((void *)a1 + 2) = v26;
        *((void *)a1 + 3) = v25;
      }
      *((void *)a1 + 1) = &v18[v22];
      if (v12) {
        memcpy(v18, v11, v12);
      }
      unint64_t v11 = v18;
      goto LABEL_9;
    }
    uint64_t v20 = v17 + 1;
    unint64_t v19 = *((void *)a1 + 2);
    if ((unint64_t)v20 > v19) {
      goto LABEL_16;
    }
    *((void *)a1 + 1) = v20;
    LODWORD(v21) = 1;
LABEL_9:
    v12 += v21;
LABEL_10:
    unsigned int v14 = v13 + 1;
    v11[v13] = v16;
    unint64_t v10 = *((void *)a1 + 9);
    ++v13;
    if (v10 >= *((void *)a1 + 8)) {
      goto LABEL_28;
    }
  }
  unsigned int v14 = v13;
LABEL_28:
  if (!v14) {
    return 0;
  }
  unint64_t v27 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v27;
  if (!v27 || v27 + 24 > *((void *)a1 + 2))
  {
    unint64_t v28 = 2 * *((void *)a1 + 4);
    if (v28 <= 0x20) {
      unint64_t v28 = 32;
    }
    *((void *)a1 + 4) = v28;
    unint64_t v29 = v28 + 8;
    unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
    *unint64_t v30 = *((void *)a1 + 3);
    unint64_t v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v30 + v29;
    *((void *)a1 + 3) = v30;
  }
  *((void *)a1 + 1) = v27 + 24;
  *(_WORD *)(v27 + 16) = 81;
  *(unsigned char *)(v27 + 18) = 3;
  *(void *)unint64_t v27 = v11;
  *(void *)(v27 + 8) = v14;
  unint64_t v31 = v33;
  if (v33) {
    swift::Demangle::__runtime::Node::addChild(v33, (swift::Demangle::__runtime::Node *)v27, a1);
  }
  return v31;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape(swift::Demangle::__runtime::Demangler *this, int a2)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v2 - 1));
  if (*((_WORD *)v4 + 8) == 232)
  {
    *((_DWORD *)this + 24) = --v2;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v4 = 0;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }
  if (v2)
  {
    unsigned int v5 = v2 - 1;
    unint64_t v6 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v5);
    if (*((_WORD *)v6 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v5;
      if (v4)
      {
        unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v8 = 2 * *((void *)this + 4);
          if (v8 <= 0x20) {
            unint64_t v8 = 32;
          }
          *((void *)this + 4) = v8;
          unint64_t v9 = v8 + 8;
          unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
          unint64_t v11 = (char *)v10 + v9;
          void *v10 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v10;
        }
        *((void *)this + 1) = v7 + 24;
        *(_WORD *)(v7 + 16) = 334;
        *(unsigned char *)(v7 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v6, this);
        goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_15:
  if (!v4) {
    return 0;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    unsigned int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    uint64_t v15 = (char *)v14 + v13;
    *unsigned int v14 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 334;
  *(unsigned char *)(v7 + 18) = 0;
LABEL_22:
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v4, this);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popRetroactiveConformances(this);
  unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v3;
  if (!v3 || v3 + 24 > *((void *)this + 2))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    unint64_t v7 = (char *)v6 + v5;
    *unint64_t v6 = *((void *)this + 3);
    unint64_t v3 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v6;
  }
  *((void *)this + 1) = v3 + 24;
  *(_WORD *)(v3 + 16) = 235;
  *(unsigned char *)(v3 + 18) = 0;
  int v8 = *((_DWORD *)this + 24);
  if (!v8) {
    return 0;
  }
  do
  {
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v8 - 1));
    if (*((_WORD *)v9 + 8) != 232) {
      break;
    }
    *((_DWORD *)this + 24) = v8 - 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v9, this);
    int v8 = *((_DWORD *)this + 24);
  }
  while (v8);
  int v10 = *(unsigned __int8 *)(v3 + 18);
  if (v10 == 5)
  {
    unint64_t v11 = *(void *)v3;
    uint64_t v12 = *(unsigned int *)(v3 + 8);
    unint64_t v13 = (void *)(*(void *)v3 + 8 * v12 - 8);
    if (v12) {
      BOOL v14 = (unint64_t)v13 > v11;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      unint64_t v15 = v11 + 8;
      do
      {
        uint64_t v16 = *(void *)(v15 - 8);
        *(void *)(v15 - 8) = *v13;
        *v13-- = v16;
        BOOL v17 = v15 >= (unint64_t)v13;
        v15 += 8;
      }
      while (!v17);
    }
  }
  else if (v10 == 2)
  {
    *(int8x16_t *)unint64_t v3 = vextq_s8(*(int8x16_t *)v3, *(int8x16_t *)v3, 8uLL);
  }
  if (!v8) {
    return 0;
  }
  unsigned int v18 = v8 - 1;
  unint64_t v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v18);
  *((_DWORD *)this + 24) = v18;
  if (!v19 || (*((_WORD *)v19 + 8) & 0xFFFE) != 0x150) {
    return 0;
  }
  if (v2)
  {
    unint64_t v20 = swift::Demangle::__runtime::Demangler::createWithChildren(this, 338, v19, (swift::Demangle::__runtime::Node *)v3, v2);
    if (!v20) {
      return 0;
    }
  }
  else
  {
    if (!v3) {
      return v3;
    }
    unint64_t v20 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v20;
    if (!v20 || v20 + 24 > *((void *)this + 2))
    {
      unint64_t v22 = 2 * *((void *)this + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)this + 4) = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      BOOL v25 = (char *)v24 + v23;
      *unint64_t v24 = *((void *)this + 3);
      unint64_t v20 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v25;
      *((void *)this + 3) = v24;
    }
    *((void *)this + 1) = v20 + 24;
    *(_WORD *)(v20 + 16) = 338;
    *(unsigned char *)(v20 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v20, v19, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v20, (swift::Demangle::__runtime::Node *)v3, this);
  }
  unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v3;
  if (!v3 || v3 + 24 > *((void *)this + 2))
  {
    unint64_t v26 = 2 * *((void *)this + 4);
    if (v26 <= 0x20) {
      unint64_t v26 = 32;
    }
    *((void *)this + 4) = v26;
    unint64_t v27 = v26 + 8;
    unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    unint64_t v29 = (char *)v28 + v27;
    void *v28 = *((void *)this + 3);
    unint64_t v3 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v29;
    *((void *)this + 3) = v28;
  }
  *((void *)this + 1) = v3 + 24;
  *(_WORD *)(v3 + 16) = 232;
  *(unsigned char *)(v3 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, (swift::Demangle::__runtime::Node *)v20, this);
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 84)
  {
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v9 = 2 * *((void *)this + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)this + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      void *v11 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v11 + v10;
      *((void *)this + 3) = v11;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(unsigned char *)(result + 18) = 3;
    *(void *)unint64_t result = "@thick";
    uint64_t v8 = 6;
    goto LABEL_24;
  }
  if (v3 == 111)
  {
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      BOOL v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *BOOL v14 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(unsigned char *)(result + 18) = 3;
    *(void *)unint64_t result = "@objc_metatype";
    uint64_t v8 = 14;
    goto LABEL_24;
  }
  if (v3 != 116) {
    return 0;
  }
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    void *v7 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 146;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = "@thin";
  uint64_t v8 = 5;
LABEL_24:
  *(void *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 84;
  *(unsigned char *)(v2 + 18) = 0;
  do
  {
    int v9 = *((_DWORD *)this + 24);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = (v9 - 1);
    uint64_t v11 = *((void *)this + 11);
    int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * v10) + 16);
    if (v12 == 275)
    {
      *((_DWORD *)this + 24) = v10;
      if (v9 == 1) {
        return 0;
      }
      uint64_t v10 = (v9 - 2);
    }
    unint64_t v7 = *(unsigned __int16 **)(v11 + 8 * v10);
    int v8 = v7[8];
    if ((v8 - 39) >= 4 && v8 != 354 && v8 != 36) {
      return 0;
    }
    *((_DWORD *)this + 24) = v10;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v7, this);
  }
  while (v12 != 275);
  int v14 = *(unsigned __int8 *)(v2 + 18);
  if (v14 == 5)
  {
    uint64_t v15 = *(unsigned int *)(v2 + 8);
    if (v15)
    {
      uint64_t v16 = (void *)(*(void *)v2 + 8 * v15 - 8);
      if ((unint64_t)v16 > *(void *)v2)
      {
        unint64_t v17 = *(void *)v2 + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v16;
          *v16-- = v18;
          BOOL v19 = v17 >= (unint64_t)v16;
          v17 += 8;
        }
        while (!v19);
      }
    }
  }
  else if (v14 == 2)
  {
    *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleProtocolList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || (unint64_t v3 = *((void *)this + 2), v2 + 24 > v3))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    unint64_t v3 = (unint64_t)v6 + v5;
    *unint64_t v6 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v3;
    *((void *)this + 3) = v6;
  }
  *(_WORD *)(v2 + 16) = 235;
  *(unsigned char *)(v2 + 18) = 0;
  unint64_t v7 = (v2 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (v7) {
    BOOL v8 = v7 + 24 > v3;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = 2 * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    int v12 = (char *)v11 + v10;
    void *v11 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v12;
    *((void *)this + 3) = v11;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 190;
  *(unsigned char *)(v7 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v2, this);
  int v13 = *((_DWORD *)this + 24);
  if (v13 && (unsigned int v14 = v13 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v14) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v14;
  }
  else
  {
    do
    {
      int v15 = *((_DWORD *)this + 24);
      if (v15 && (unsigned int v16 = v15 - 1, v17 = *(void *)(*((void *)this + 11) + 8 * v16), *(_WORD *)(v17 + 16) == 275)) {
        *((_DWORD *)this + 24) = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      if (!v18) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v18, this);
    }
    while (!v17);
    int v19 = *(unsigned __int8 *)(v2 + 18);
    if (v19 == 5)
    {
      uint64_t v21 = *(unsigned int *)(v2 + 8);
      if (v21)
      {
        unint64_t v22 = (void *)(*(void *)v2 + 8 * v21 - 8);
        if ((unint64_t)v22 > *(void *)v2)
        {
          unint64_t v23 = *(void *)v2 + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v7;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAccessor(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v3) {
    return 0;
  }
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  __int16 v8 = 141;
  unint64_t v9 = a2;
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'G':
      __int16 v8 = 100;
      goto LABEL_17;
    case 'M':
      __int16 v8 = 152;
      goto LABEL_17;
    case 'W':
      __int16 v8 = 51;
      goto LABEL_17;
    case 'a':
      if (v5 >= v3) {
        return 0;
      }
      unint64_t v9 = 0;
      *((void *)this + 9) = v2 + 2;
      __int16 v8 = 169;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'O':
          goto LABEL_17;
        case 'P':
          __int16 v8 = 157;
          goto LABEL_17;
        case 'o':
          __int16 v8 = 155;
          goto LABEL_17;
        case 'u':
          __int16 v8 = 251;
          goto LABEL_17;
        default:
          return v9;
      }
      return v9;
    case 'g':
      __int16 v8 = 98;
      goto LABEL_17;
    case 'i':
      __int16 v8 = 126;
      goto LABEL_17;
    case 'l':
      if (v5 >= v3) {
        return 0;
      }
      unint64_t v9 = 0;
      *((void *)this + 9) = v2 + 2;
      __int16 v8 = 168;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'O':
          goto LABEL_17;
        case 'o':
          __int16 v8 = 154;
          goto LABEL_17;
        case 'p':
          __int16 v8 = 156;
          goto LABEL_17;
        case 'u':
          __int16 v8 = 250;
          goto LABEL_17;
        default:
          return v9;
      }
      return v9;
    case 'm':
      goto LABEL_17;
    case 'p':
      return v9;
    case 'r':
      __int16 v8 = 204;
      goto LABEL_17;
    case 's':
      __int16 v8 = 215;
      goto LABEL_17;
    case 'w':
      __int16 v8 = 257;
LABEL_17:
      if (!a2) {
        return 0;
      }
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)this + 1) = v9;
      if (!v9 || (unint64_t)v9 + 24 > *((void *)this + 2))
      {
        unint64_t v10 = 2 * *((void *)this + 4);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *((void *)this + 4) = v10;
        unint64_t v11 = v10 + 8;
        int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        int v13 = (char *)v12 + v11;
        *int v12 = *((void *)this + 3);
        unint64_t v9 = (swift::Demangle::__runtime::Node *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((void *)this + 2) = v13;
        *((void *)this + 3) = v12;
      }
      *((void *)this + 1) = (char *)v9 + 24;
      *((_WORD *)v9 + 8) = v8;
      *((unsigned char *)v9 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild(v9, a2, this);
      break;
    default:
      return 0;
  }
  return v9;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleEntity(swift::Demangle::__runtime::Demangler *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1,
        uint64_t v6 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v5),
        *((_WORD *)v6 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v6);
  int v8 = *((_DWORD *)this + 24);
  if (!v8
    || ((unsigned int v9 = v8 - 1,
         unint64_t v10 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v9),
         int v11 = v10[8],
         (v11 - 173) <= 0x3C)
      ? (BOOL v12 = ((1 << (v11 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v12 = 1),
        v12
     && ((v11 - 101) <= 0x24
       ? (BOOL v13 = ((1 << (v11 - 101)) & 0x1000800001) == 0)
       : (BOOL v13 = 1),
         v13 && v11 != 347)))
  {
    unint64_t v10 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v9;
  }
  unsigned int v14 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (v7) {
    int v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, a2, v14, (swift::Demangle::__runtime::Node *)v10, v7, v6);
  }
  else {
    int v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, a2, v14, (swift::Demangle::__runtime::Node *)v10, v6);
  }

  return setParentForOpaqueReturnTypeNodes(this, v15, v6);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMacroExpansion(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 < v1)
  {
    int v4 = 0;
    unint64_t v5 = v2 + 1;
    *((void *)this + 9) = v2 + 1;
    uint64_t v6 = *((void *)this + 7);
    __int16 v7 = 8;
    int v8 = 1;
    switch(*(unsigned char *)(v6 + v2))
    {
      case 'X':
        if (v5 >= v1) {
          goto LABEL_76;
        }
        int v9 = *(unsigned __int8 *)(v6 + v5);
        if (v9 == 95)
        {
          uint64_t v10 = 0;
          unint64_t v5 = v2 + 2;
          *((void *)this + 9) = v2 + 2;
        }
        else if ((v9 - 48) > 9)
        {
LABEL_76:
          uint64_t v10 = -1000;
        }
        else
        {
          int v30 = 0;
          while (1)
          {
            int v31 = *(unsigned __int8 *)(v6 + v5);
            if ((v31 - 48) > 9) {
              break;
            }
            int v32 = v31 + 10 * v30 - 48;
            if (v32 < v30) {
              goto LABEL_76;
            }
            *((void *)this + 9) = ++v5;
            int v30 = v32;
            if (v1 == v5)
            {
              uint64_t v10 = -1000;
LABEL_85:
              uint64_t v34 = -1000;
              goto LABEL_86;
            }
          }
          uint64_t v10 = -1000;
          if ((v30 & 0x80000000) == 0 && v5 < v1 && v31 == 95)
          {
            *((void *)this + 9) = ++v5;
            uint64_t v10 = (v30 + 1);
          }
        }
        if (v5 >= v1) {
          goto LABEL_85;
        }
        int v33 = *(unsigned __int8 *)(v6 + v5);
        if (v33 == 95)
        {
          uint64_t v34 = 0;
          *((void *)this + 9) = v5 + 1;
          goto LABEL_86;
        }
        if ((v33 - 48) > 9) {
          goto LABEL_85;
        }
        int v35 = 0;
        while (1)
        {
          int v36 = *(unsigned __int8 *)(v6 + v5);
          if ((v36 - 48) > 9) {
            break;
          }
          int v37 = v36 + 10 * v35 - 48;
          if (v37 >= v35)
          {
            *((void *)this + 9) = ++v5;
            int v35 = v37;
            if (v1 != v5) {
              continue;
            }
          }
          goto LABEL_85;
        }
        uint64_t v34 = -1000;
        if ((v35 & 0x80000000) == 0 && v5 < v1 && v36 == 95)
        {
          *((void *)this + 9) = v5 + 1;
          uint64_t v34 = (v35 + 1);
        }
LABEL_86:
        unint64_t v38 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v38;
        if (!v38 || v38 + 24 > *((void *)this + 2))
        {
          unint64_t v39 = 2 * *((void *)this + 4);
          if (v39 <= 0x20) {
            unint64_t v39 = 32;
          }
          *((void *)this + 4) = v39;
          unint64_t v40 = v39 + 8;
          BOOL v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
          unint64_t v42 = (char *)v41 + v40;
          *BOOL v41 = *((void *)this + 3);
          unint64_t v38 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v42;
          *((void *)this + 3) = v41;
        }
        *((void *)this + 1) = v38 + 24;
        *(_WORD *)(v38 + 16) = 102;
        *(unsigned char *)(v38 + 18) = 4;
        *(void *)unint64_t v38 = v10;
        unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v43;
        if (!v43 || v43 + 24 > *((void *)this + 2))
        {
          unint64_t v44 = 2 * *((void *)this + 4);
          if (v44 <= 0x20) {
            unint64_t v44 = 32;
          }
          *((void *)this + 4) = v44;
          unint64_t v45 = v44 + 8;
          uint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
          *uint64_t v46 = *((void *)this + 3);
          unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v46 + v45;
          *((void *)this + 3) = v46;
        }
        *((void *)this + 1) = v43 + 24;
        *(_WORD *)(v43 + 16) = 102;
        *(unsigned char *)(v43 + 18) = 4;
        *(void *)unint64_t v43 = v34;
        int v47 = *((_DWORD *)this + 24);
        if (v47)
        {
          uint64_t v48 = (v47 - 1);
          uint64_t v49 = *((void *)this + 11);
          unint64_t v50 = *(swift::Demangle::__runtime::Node **)(v49 + 8 * v48);
          if (*((_WORD *)v50 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v48;
            if (v47 == 1) {
              goto LABEL_104;
            }
            uint64_t v48 = (v47 - 2);
          }
          else
          {
            unint64_t v50 = 0;
          }
          __int16 v51 = *(swift::Demangle::__runtime::Node **)(v49 + 8 * v48);
          if (*((_WORD *)v51 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v48;
            goto LABEL_105;
          }
        }
        else
        {
          unint64_t v50 = 0;
        }
LABEL_104:
        __int16 v51 = 0;
LABEL_105:
        return swift::Demangle::__runtime::Demangler::createWithChildren(this, 139, v51, v50, (swift::Demangle::__runtime::Node *)v38, (swift::Demangle::__runtime::Node *)v43);
      case 'a':
        goto LABEL_17;
      case 'b':
        __int16 v7 = 12;
        goto LABEL_17;
      case 'c':
        __int16 v7 = 28;
        goto LABEL_17;
      case 'e':
        __int16 v7 = 72;
        goto LABEL_17;
      case 'f':
        int v8 = 0;
        int v11 = (_DWORD *)((char *)this + 96);
        int v12 = *((_DWORD *)this + 24);
        __int16 v7 = 74;
        if (v12)
        {
          int v13 = 1;
          goto LABEL_19;
        }
        uint64_t v17 = 0;
        int v15 = 0;
        uint64_t v18 = 0;
        goto LABEL_64;
      case 'm':
        __int16 v7 = 142;
        goto LABEL_17;
      case 'p':
        __int16 v7 = 172;
        goto LABEL_17;
      case 'q':
        __int16 v7 = 174;
        goto LABEL_17;
      case 'r':
        __int16 v7 = 143;
        goto LABEL_17;
      case 'u':
        int v8 = 0;
        __int16 v7 = 140;
LABEL_17:
        int v11 = (_DWORD *)((char *)this + 96);
        int v12 = *((_DWORD *)this + 24);
        if (v12)
        {
          int v13 = 0;
LABEL_19:
          uint64_t v14 = *((void *)this + 11);
          int v15 = *(swift::Demangle::__runtime::Node **)(v14 + 8 * (v12 - 1));
          if (*((_WORD *)v15 + 8) == 101)
          {
            _DWORD *v11 = --v12;
            if (!v13)
            {
LABEL_44:
              LODWORD(v16) = v12;
              uint64_t v17 = 0;
              if (!v8)
              {
LABEL_45:
                uint64_t v18 = 0;
                if (!v16) {
                  goto LABEL_64;
                }
                goto LABEL_46;
              }
LABEL_30:
              if (!v16)
              {
                uint64_t v18 = 0;
                int v8 = 1;
                goto LABEL_64;
              }
              uint64_t v16 = (v16 - 1);
              uint64_t v19 = *((void *)this + 11);
              uint64_t v18 = *(unsigned __int16 **)(v19 + 8 * v16);
              int v20 = v18[8];
              if ((v20 - 173) > 0x3C
                || ((1 << (v20 + 83)) & 0x100000010000010DLL) == 0)
              {
                BOOL v22 = (v20 - 101) > 0x24 || ((1 << (v20 - 101)) & 0x1000800001) == 0;
                if (v22 && v20 != 347)
                {
                  uint64_t v18 = 0;
                  int v8 = 1;
LABEL_47:
                  unint64_t v23 = *(unsigned __int16 **)(v19 + 8 * v16);
                  int v24 = v23[8];
                  BOOL v25 = (v24 - 139) > 0x21 || ((1 << (v24 + 117)) & 0x200000019) == 0;
                  if (!v25
                    || ((v24 - 28) <= 0x2E
                      ? (BOOL v26 = ((1 << (v24 - 28)) & 0x500000000001) == 0)
                      : (BOOL v26 = 1),
                        v26 ? (BOOL v27 = v24 == 8) : (BOOL v27 = 1),
                        v27))
                  {
                    *((_DWORD *)this + 24) = v16;
                    unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
                    if (v8)
                    {
LABEL_65:
                      int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v7, (swift::Demangle::__runtime::Node *)v23, (swift::Demangle::__runtime::Node *)v18, v15, v28);
                      if (!v17) {
                        return (unint64_t)v4;
                      }
LABEL_66:
                      swift::Demangle::__runtime::Node::addChild(v4, v17, this);
                      return (unint64_t)v4;
                    }
LABEL_61:
                    int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v7, (swift::Demangle::__runtime::Node *)v23, v15, v28);
                    if (!v17) {
                      return (unint64_t)v4;
                    }
                    goto LABEL_66;
                  }
LABEL_64:
                  unint64_t v23 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popContext(this);
                  unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
                  if (v8) {
                    goto LABEL_65;
                  }
                  goto LABEL_61;
                }
              }
              _DWORD *v11 = v16;
              int v8 = 1;
              if (!v16) {
                goto LABEL_64;
              }
LABEL_46:
              uint64_t v19 = *((void *)this + 11);
              uint64_t v16 = (v16 - 1);
              goto LABEL_47;
            }
          }
          else
          {
            int v15 = 0;
            if (!v13) {
              goto LABEL_44;
            }
          }
          if (v12)
          {
            LODWORD(v16) = v12 - 1;
            uint64_t v17 = *(swift::Demangle::__runtime::Node **)(v14 + 8 * (v12 - 1));
            if (*((_WORD *)v17 + 8) == 176)
            {
              _DWORD *v11 = v16;
              if ((v8 & 1) == 0)
              {
                int v8 = 0;
                uint64_t v18 = 0;
                if (v12 == 1) {
                  goto LABEL_64;
                }
                goto LABEL_46;
              }
              goto LABEL_30;
            }
            goto LABEL_44;
          }
        }
        else
        {
          int v15 = 0;
        }
        LODWORD(v16) = 0;
        uint64_t v17 = 0;
        if (!v8) {
          goto LABEL_45;
        }
        goto LABEL_30;
      default:
        return (unint64_t)v4;
    }
  }
  return 0;
}

void swift::Demangle::__runtime::NodeFactory::~NodeFactory(swift::Demangle::__runtime::NodeFactory *this)
{
  *(void *)this = off_C9418;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = off_C9418;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }

  operator delete();
}

BOOL swift::Mangle::__runtime::isNonAscii(char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2 - 1;
  do
  {
    int v3 = *a1++;
    BOOL v4 = v3 < 0;
    if (v3 < 0) {
      break;
    }
  }
  while (v2--);
  return v4;
}

uint64_t swift::Mangle::__runtime::needsPunycodeEncoding(unsigned char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  while (1)
  {
    if ((*a1 - 48) >= 0xAu && ((*a1 & 0xDF) - 65) >= 0x1Au)
    {
      int v4 = *a1;
      if (v4 != 95 && v4 != 36) {
        break;
      }
    }
    ++a1;
    if (!--a2) {
      return 0;
    }
  }
  return 1;
}

swift::Mangle::__runtime *swift::Mangle::__runtime::translateOperatorChar(swift::Mangle::__runtime *this)
{
  int v2 = this - 33;
  unint64_t result = (swift::Mangle::__runtime *)(&stru_20 + 65);
  switch(v2)
  {
    case 0:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 6);
      break;
    case 4:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 10);
      break;
    case 5:
      return result;
    case 9:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 5);
      break;
    case 10:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 8);
      break;
    case 12:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 11);
      break;
    case 13:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 18);
      break;
    case 14:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_20 + 68);
      break;
    case 27:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 4);
      break;
    case 28:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_20 + 69);
      break;
    case 29:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_20 + 71);
      break;
    case 30:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 9);
      break;
    case 31:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_20 + 67);
      break;
    case 61:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 16);
      break;
    case 91:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 7);
      break;
    case 93:
      unint64_t result = (swift::Mangle::__runtime *)(&stru_68 + 12);
      break;
    default:
      unint64_t result = this;
      break;
  }
  return result;
}

void swift::Mangle::__runtime::translateOperator(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v6 = *a1++;
      std::string::value_type v7 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v6);
      std::string::push_back(a3, v7);
      --v3;
    }
    while (v3);
  }
}

void *swift::Mangle::__runtime::getStandardTypeSubst@<X0>(void *result@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  switch(a2)
  {
    case 3uLL:
      unint64_t result = (void *)memcmp(result, "Set", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "Int", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "i";
      }
      else
      {
        int v8 = "h";
      }
      goto LABEL_167;
    case 4uLL:
      unint64_t result = (void *)memcmp(result, "Bool", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "UInt", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "u";
      }
      else
      {
        int v8 = "b";
      }
      goto LABEL_167;
    case 5uLL:
      unint64_t result = (void *)memcmp(result, "Array", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "Float", a2);
        if (result)
        {
          unint64_t result = (void *)memcmp(v6, "Range", a2);
          if (result) {
            goto LABEL_97;
          }
          int v8 = "n";
        }
        else
        {
          int v8 = "f";
        }
      }
      else
      {
        int v8 = "a";
      }
      goto LABEL_167;
    case 6uLL:
      unint64_t result = (void *)memcmp(result, "Double", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "String", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "S";
      }
      else
      {
        int v8 = "d";
      }
      goto LABEL_167;
    case 7uLL:
      unint64_t result = (void *)memcmp(result, "Numeric", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "j";
      goto LABEL_167;
    case 8uLL:
      unint64_t result = (void *)memcmp(result, "Optional", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "Hashable", a2);
        if (result)
        {
          unint64_t result = (void *)memcmp(v6, "Sequence", a2);
          if (result) {
            goto LABEL_97;
          }
          int v8 = "T";
        }
        else
        {
          int v8 = "H";
        }
      }
      else
      {
        int v8 = "q";
      }
      goto LABEL_167;
    case 9uLL:
      unint64_t result = (void *)memcmp(result, "Character", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "Substring", a2);
        if (result)
        {
          unint64_t result = (void *)memcmp(v6, "Encodable", a2);
          if (result)
          {
            if (*v6 == 0x6C6261646F636544 && *((unsigned char *)v6 + 8) == 101)
            {
              int v8 = "e";
            }
            else
            {
              unint64_t result = (void *)memcmp(v6, "Equatable", a2);
              if (result) {
                goto LABEL_97;
              }
              int v8 = "Q";
            }
          }
          else
          {
            int v8 = "E";
          }
        }
        else
        {
          int v8 = "s";
        }
      }
      else
      {
        int v8 = "J";
      }
      goto LABEL_167;
    case 0xAuLL:
      unint64_t result = (void *)memcmp(result, "Dictionary", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "Comparable", a2);
        if (result)
        {
          if (*v6 == 0x697463656C6C6F43 && *((_WORD *)v6 + 4) == 28271)
          {
            int v8 = "l";
          }
          else
          {
            unint64_t result = (void *)memcmp(v6, "Strideable", a2);
            if (result) {
              goto LABEL_97;
            }
            int v8 = "x";
          }
        }
        else
        {
          int v8 = "L";
        }
      }
      else
      {
        int v8 = "D";
      }
      goto LABEL_167;
    case 0xBuLL:
      unint64_t result = (void *)memcmp(result, "ClosedRange", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "N";
      goto LABEL_167;
    case 0xDuLL:
      unint64_t result = (void *)memcmp(result, "UnsafePointer", a2);
      if (!result)
      {
        int v8 = "P";
        goto LABEL_167;
      }
      unint64_t result = (void *)memcmp(v6, "FloatingPoint", a2);
      if (!result)
      {
        int v8 = "F";
        goto LABEL_167;
      }
      unint64_t result = (void *)memcmp(v6, "SignedInteger", a2);
      if (!result)
      {
        int v8 = "Z";
        goto LABEL_167;
      }
      if (*v6 == 0x6E497972616E6942 && *(void *)((char *)v6 + 5) == 0x72656765746E4979)
      {
        int v8 = "z";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0xEuLL:
      unint64_t result = (void *)memcmp(result, "DefaultIndices", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "StringProtocol", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "y";
      }
      else
      {
        int v8 = "I";
      }
      goto LABEL_167;
    case 0xFuLL:
      unint64_t result = (void *)memcmp(result, "UnsignedInteger", a2);
      if (!result)
      {
        int v8 = "U";
        goto LABEL_167;
      }
      if (*v6 == 0x70784565676E6152 && *(void *)((char *)v6 + 7) == 0x6E6F697373657270)
      {
        int v8 = "X";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0x10uLL:
      unint64_t result = (void *)memcmp(result, "ObjectIdentifier", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "UnsafeRawPointer", a2);
        if (result)
        {
          unint64_t result = (void *)memcmp(v6, "IteratorProtocol", a2);
          if (result)
          {
            unint64_t result = (void *)memcmp(v6, "RawRepresentable", a2);
            if (result) {
              goto LABEL_97;
            }
            int v8 = "Y";
          }
          else
          {
            int v8 = "t";
          }
        }
        else
        {
          int v8 = "V";
        }
      }
      else
      {
        int v8 = "O";
      }
      goto LABEL_167;
    case 0x11uLL:
      unint64_t result = (void *)memcmp(result, "MutableCollection", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "M";
      goto LABEL_167;
    case 0x13uLL:
      unint64_t result = (void *)memcmp(result, "UnsafeBufferPointer", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "BinaryFloatingPoint", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "B";
      }
      else
      {
        int v8 = "R";
      }
      goto LABEL_167;
    case 0x14uLL:
      unint64_t result = (void *)memcmp(result, "UnsafeMutablePointer", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "p";
      goto LABEL_167;
    case 0x15uLL:
      unint64_t result = (void *)memcmp(result, "RandomNumberGenerator", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "G";
      goto LABEL_167;
    case 0x16uLL:
      unint64_t result = (void *)memcmp(result, "UnsafeRawBufferPointer", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "RandomAccessCollection", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "k";
      }
      else
      {
        int v8 = "W";
      }
      goto LABEL_167;
    case 0x17uLL:
      unint64_t result = (void *)memcmp(result, "UnsafeMutableRawPointer", a2);
      if (result)
      {
        unint64_t result = (void *)memcmp(v6, "BidirectionalCollection", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "K";
      }
      else
      {
        int v8 = "v";
      }
      goto LABEL_167;
    case 0x1AuLL:
      unint64_t result = (void *)memcmp(result, "UnsafeMutableBufferPointer", a2);
      if (!result)
      {
        int v8 = "r";
        goto LABEL_167;
      }
      unint64_t result = (void *)memcmp(v6, "RangeReplaceableCollection", a2);
      if (!result)
      {
        int v8 = "m";
LABEL_167:
        *(void *)a4 = v8;
        *(void *)(a4 + 8) = 1;
        char v18 = 1;
        goto LABEL_168;
      }
LABEL_97:
      if (a3)
      {
        switch(a2)
        {
          case 4uLL:
            unint64_t result = (void *)memcmp(v6, "Task", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cT";
            goto LABEL_171;
          case 5uLL:
            if (*(_DWORD *)v6 != 1869898561 || *((unsigned char *)v6 + 4) != 114) {
              goto LABEL_150;
            }
            uint64_t v17 = "cA";
            goto LABEL_171;
          case 8uLL:
            unint64_t result = (void *)memcmp(v6, "Executor", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cF";
            goto LABEL_171;
          case 9uLL:
            unint64_t result = (void *)memcmp(v6, "TaskGroup", a2);
            if (result)
            {
              unint64_t result = (void *)memcmp(v6, "MainActor", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cM";
            }
            else
            {
              uint64_t v17 = "cG";
            }
            goto LABEL_171;
          case 0xAuLL:
            unint64_t result = (void *)memcmp(v6, "UnownedJob", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cJ";
            goto LABEL_171;
          case 0xBuLL:
            unint64_t result = (void *)memcmp(v6, "AsyncStream", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cS";
            goto LABEL_171;
          case 0xCuLL:
            unint64_t result = (void *)memcmp(v6, "TaskExecutor", a2);
            if (result)
            {
              unint64_t result = (void *)memcmp(v6, "TaskPriority", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cP";
            }
            else
            {
              uint64_t v17 = "ch";
            }
            goto LABEL_171;
          case 0xDuLL:
            unint64_t result = (void *)memcmp(v6, "AsyncSequence", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "ci";
            goto LABEL_171;
          case 0xEuLL:
            unint64_t result = (void *)memcmp(v6, "SerialExecutor", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cf";
            goto LABEL_171;
          case 0x11uLL:
            unint64_t result = (void *)memcmp(v6, "CancellationError", a2);
            if (result)
            {
              unint64_t result = (void *)memcmp(v6, "ThrowingTaskGroup", a2);
              if (result)
              {
                unint64_t result = (void *)memcmp(v6, "UnsafeCurrentTask", a2);
                if (result) {
                  goto LABEL_150;
                }
                uint64_t v17 = "ct";
              }
              else
              {
                uint64_t v17 = "cg";
              }
            }
            else
            {
              uint64_t v17 = "cE";
            }
            goto LABEL_171;
          case 0x12uLL:
            unint64_t result = (void *)memcmp(v6, "UnsafeContinuation", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cc";
            goto LABEL_171;
          case 0x13uLL:
            unint64_t result = (void *)memcmp(v6, "CheckedContinuation", a2);
            if (result)
            {
              unint64_t result = (void *)memcmp(v6, "AsyncThrowingStream", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cs";
            }
            else
            {
              uint64_t v17 = "cC";
            }
            goto LABEL_171;
          case 0x15uLL:
            unint64_t result = (void *)memcmp(v6, "UnownedSerialExecutor", a2);
            if (result)
            {
              unint64_t result = (void *)memcmp(v6, "AsyncIteratorProtocol", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cI";
            }
            else
            {
              uint64_t v17 = "ce";
            }
LABEL_171:
            *(void *)a4 = v17;
            *(void *)(a4 + 8) = 2;
            char v18 = 1;
            break;
          default:
            goto LABEL_150;
        }
      }
      else
      {
LABEL_150:
        char v18 = 0;
        *(unsigned char *)a4 = 0;
      }
LABEL_168:
      *(unsigned char *)(a4 + 16) = v18;
      return result;
    case 0x1DuLL:
      unint64_t result = (void *)memcmp(result, "UnsafeMutableRawBufferPointer", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "w";
      goto LABEL_167;
    case 0x21uLL:
      if (*result != 0x656C65726F747541
        || result[1] != 0x736E55676E697361
        || result[2] != 0x626174754D656661
        || result[3] != 0x65746E696F50656CLL
        || *((unsigned char *)result + 32) != 114)
      {
        goto LABEL_97;
      }
      char v18 = 1;
      *(void *)a4 = "A";
      *(void *)(a4 + 8) = 1;
      goto LABEL_168;
    default:
      goto LABEL_97;
  }
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

{
  char __str[32];

  snprintf(__str, 0x20uLL, "%lld", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::writeHex(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x20uLL, "%llX", a2);
  std::string::append(a1, __str);
  return a1;
}

double swift::Demangle::__runtime::genericParameterName@<D0>(swift::Demangle::__runtime *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  do
  {
    std::string::push_back(&v8, a2 % 0x1A + 65);
    BOOL v6 = a2 > 0x19;
    a2 /= 0x1AuLL;
  }
  while (v6);
  if (this)
  {
    snprintf(__str, 0x20uLL, "%llu", this);
    std::string::append(&v8, __str);
  }
  double result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

uint64_t **matchSequenceOfKinds(uint64_t **result, void *a2)
{
  if (result)
  {
    uint64_t v2 = ((uint64_t)(a2[1] - *a2) >> 4) + 1;
    for (unsigned int i = (unint64_t *)(*a2 + 8); ; i += 2)
    {
      if (!--v2) {
        return result;
      }
      int v4 = *((unsigned __int16 *)i - 4);
      unint64_t v5 = *i;
      unint64_t v6 = *((unsigned __int8 *)result + 18);
      unsigned int v7 = v6 - 1;
      if (v6 != 1)
      {
        if (v6 == 5)
        {
          if (*((unsigned int *)result + 2) <= v5) {
            return 0;
          }
          goto LABEL_11;
        }
        if (v6 != 2) {
          return 0;
        }
        unint64_t v6 = 2;
      }
      if (v6 <= v5) {
        return 0;
      }
LABEL_11:
      if (v7 >= 2) {
        double result = (uint64_t **)*result;
      }
      double result = (uint64_t **)result[v5];
      if (!result) {
        return result;
      }
      if (*((unsigned __int16 *)result + 8) != v4) {
        return 0;
      }
    }
  }
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(swift::Demangle::__runtime *this, const char *a2)
{
  char v4 = 3;
  LODWORD(v3) = 2112095;
  swift::Demangle::__runtime::Context::Context((swift::Demangle::__runtime::Context *)v2);
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_1::operator()(void *a1@<X0>, char *a2@<X8>)
{
  int v3 = *((unsigned __int16 *)a1 + 8);
  if (v3 != 137)
  {
    if (v3 != 101)
    {
      a2[23] = 9;
      strcpy(a2, "<unknown>");
      return;
    }
    size_t v4 = a1[1];
    if (v4 <= 0x7FFFFFFFFFFFFFF7)
    {
      unint64_t v5 = (void *)*a1;
      if (v4 >= 0x17)
      {
        uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v11 = v4 | 7;
        }
        uint64_t v12 = v11 + 1;
        int v13 = (char *)operator new(v11 + 1);
        *((void *)a2 + 1) = v4;
        *((void *)a2 + 2) = v12 | 0x8000000000000000;
        *(void *)a2 = v13;
        a2 = v13;
      }
      else
      {
        a2[23] = v4;
        if (!v4) {
          goto LABEL_18;
        }
      }
      memmove(a2, v5, v4);
LABEL_18:
      a2[v4] = 0;
      return;
    }
LABEL_36:
    abort();
  }
  if (*((unsigned char *)a1 + 18) == 5) {
    a1 = (void *)*a1;
  }
  uint64_t v6 = a1[1];
  std::string::size_type v7 = *(void *)(v6 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_36;
  }
  std::string v8 = *(const void **)v6;
  unint64_t v9 = *(void *)*a1 + 1;
  if (v7 >= 0x17)
  {
    uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v14 = v7 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v6 + 8);
  p_dst = &__dst;
  if (v7) {
LABEL_22:
  }
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  uint64_t v16 = std::string::append(&__dst, " #");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v20 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  *(std::string *)a2 = *v20;
  v20->__r_.__value_.__r.__words[0] = 0;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::size_type v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_0::operator()(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = **a1;
  if (0xAAAAAAAAAAAAAAABLL * (((*a1)[1] - v3) >> 3) <= a2)
  {
    *(unsigned char *)(a3 + 23) = 9;
    strcpy((char *)a3, "<unknown>");
  }
  else
  {
    int v4 = (long long *)(v3 + 24 * a2);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      *(void *)(a3 + 16) = *((void *)v4 + 2);
      *(_OWORD *)a3 = v5;
    }
  }
}

void *std::string::basic_string<__swift::__runtime::llvm::StringRef,0>(void *__dst, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    void *__dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v2;
    long long v5 = __dst;
    if (!v2) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((unsigned char *)v5 + v2) = 0;
  return __dst;
}

uint64_t *swift::Demangle::__runtime::nodeToString@<X0>(uint64_t *__return_ptr a1@<X8>, uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a3@<X1>, const swift::Demangle::__runtime::DemangleOptions *a4@<X2>)
{
  if (!this)
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return this;
  }
  long long v5 = (swift::Demangle::__runtime::Node *)this;
  long long v9 = *(_OWORD *)a3;
  long long v10 = *((_OWORD *)a3 + 1);
  uint64_t v11 = *((void *)a3 + 4);
  uint64_t v6 = (swift::Demangle::__runtime::Node *)*((void *)a3 + 8);
  if (v6)
  {
    if (v6 == (swift::Demangle::__runtime::Node *)((char *)a3 + 40))
    {
      int v13 = v12;
      (*(void (**)(swift::Demangle::__runtime::Node *, void *, const swift::Demangle::__runtime::DemangleOptions *))(*(void *)v6 + 24))(v6, v12, a4);
      uint64_t v7 = v13;
    }
    else
    {
      uint64_t v7 = (uint64_t *)(*(uint64_t (**)(swift::Demangle::__runtime::Node *))(*(void *)v6 + 16))(v6);
      int v13 = v7;
    }
    memset(&__p, 0, sizeof(__p));
    long long v15 = v9;
    long long v16 = v10;
    uint64_t v17 = v11;
    if (v7)
    {
      if (v7 == v12)
      {
        uint64_t v19 = v18;
        (*(void (**)(void *, void *))(v12[0] + 24))(v12, v18);
      }
      else
      {
        uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    int v13 = 0;
    memset(&__p, 0, sizeof(__p));
    long long v8 = *((_OWORD *)a3 + 1);
    long long v15 = *(_OWORD *)a3;
    long long v16 = v8;
    uint64_t v17 = *((void *)a3 + 4);
    uint64_t v19 = 0;
  }
  __int16 v20 = 256;
  if (HIBYTE(v20))
  {
    *(std::string *)a1 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  if (v19 != v18)
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  (*(void (**)(void *))(v18[0] + 32))(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_21:
  this = v13;
  if (v13 == v12) {
    return (uint64_t *)(*(uint64_t (**)(void *))(v12[0] + 32))(v12);
  }
  if (v13) {
    return (uint64_t *)(*(uint64_t (**)(void))(*v13 + 40))();
  }
  return this;
}

void swift::Demangle::__runtime::DemangleOptions::~DemangleOptions(swift::Demangle::__runtime::DemangleOptions *this)
{
  unint64_t v1 = (char *)this + 40;
  size_t v2 = (char *)*((void *)this + 8);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::print(std::string *this, swift::Demangle::__runtime::Node *a2, const swift::Demangle::__runtime::DemangleOptions *a3, const swift::Demangle::__runtime::DemangleOptions *a4)
{
  uint64_t v5 = a3 < 0x301;
  if (a3 > 0x300)
  {
LABEL_820:
    std::string::append(this, "<<too complex>>", 0xFuLL);
    long long v10 = 0;
    char v8 = v5;
    goto LABEL_824;
  }
  char v6 = (char)a4;
  unsigned int v7 = a3;
  char v8 = 0;
  while (2)
  {
    if (!a2)
    {
      uint64_t v274 = "<null node pointer>";
      uint64_t v275 = this;
      std::string::size_type v276 = 19;
LABEL_822:
      std::string::append(v275, v274, v276);
      goto LABEL_823;
    }
    int v11 = *((unsigned __int16 *)a2 + 8);
    long long v10 = 0;
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        v415 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          v415 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v415 + 16) == 24) {
          size_t v416 = 17;
        }
        else {
          size_t v416 = 4;
        }
        if (*(_WORD *)(*(void *)v415 + 16) == 24) {
          uint64_t v281 = "__allocating_init";
        }
        else {
          uint64_t v281 = "init";
        }
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        goto LABEL_1338;
      case 1:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_823;
        }
        int v366 = *((unsigned __int8 *)a2 + 18);
        uint64_t v367 = a2;
        if (v366 == 2) {
          goto LABEL_979;
        }
        if (v366 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          uint64_t v367 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_979:
          uint64_t v368 = (swift::Demangle::__runtime::Node *)*((void *)v367 + 1);
        }
        else
        {
          uint64_t v368 = 0;
        }
        unsigned int v597 = v7 + 1;
        std::string::append(this, ".(unknown context at ", 0x15uLL);
        int v598 = *((unsigned __int8 *)a2 + 18);
        v599 = (swift::Demangle::__runtime::Node **)a2;
        if ((v598 - 1) < 2) {
          goto LABEL_1757;
        }
        if (v598 == 5 && *((_DWORD *)a2 + 2))
        {
          v599 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1757:
          v600 = *v599;
        }
        else
        {
          v600 = 0;
        }
        std::string::append(this, ")", 1uLL);
        if (*((unsigned char *)a2 + 18) != 5) {
          goto LABEL_823;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        uint64_t v604 = *(void *)(*(void *)a2 + 16);
        int v605 = *(unsigned __int8 *)(v604 + 18);
        if ((v605 - 1) >= 2 && (v605 != 5 || !*(_DWORD *)(v604 + 8))) {
          goto LABEL_823;
        }
        std::string::push_back(this, 60);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v606 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          v606 = 0;
        }
        v586 = this;
        std::string::value_type v587 = 62;
        goto LABEL_1720;
      case 2:
        int v314 = *((unsigned __int8 *)a2 + 18);
        if ((v314 - 1) >= 2 && (v314 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v315 = *((unsigned __int8 *)a2 + 18);
        uint64_t v316 = (swift::Demangle::__runtime::Node **)a2;
        if ((v315 - 1) < 2) {
          goto LABEL_881;
        }
        if (v315 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1489;
        }
        uint64_t v316 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_881:
        unsigned int v317 = v7 + 1;
        unint64_t v318 = 1;
        while (2)
        {
          unint64_t v320 = *((unsigned __int8 *)a2 + 18);
          if (v320 == 2) {
            goto LABEL_887;
          }
          if (v320 != 5) {
            goto LABEL_1489;
          }
          unint64_t v320 = *((unsigned int *)a2 + 2);
LABEL_887:
          if (v320 <= v318) {
            goto LABEL_1489;
          }
          std::string::append(this, ", ", 2uLL);
          int v321 = *((unsigned __int8 *)a2 + 18);
          if (v321 == 2)
          {
            unint64_t v322 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v321 != 5) {
              goto LABEL_882;
            }
            unint64_t v322 = *((unsigned int *)a2 + 2);
          }
          if (v322 > v318)
          {
            unsigned int v323 = v321 - 1;
            char v324 = a2;
            if (v323 >= 2) {
              char v324 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v319 = (swift::Demangle::__runtime::Node *)*((void *)v324 + v318);
            goto LABEL_883;
          }
LABEL_882:
          uint64_t v319 = 0;
LABEL_883:
          ++v318;
          continue;
        }
      case 3:
        goto LABEL_823;
      case 4:
      case 0x72:
      case 0x122:
      case 0x155:
      case 0x156:
        goto LABEL_824;
      case 5:
        int v487 = *((unsigned __int8 *)a2 + 18);
        v488 = (swift::Demangle::__runtime::Node **)a2;
        if ((v487 - 1) < 2) {
          goto LABEL_1373;
        }
        if (v487 == 5 && *((_DWORD *)a2 + 2))
        {
          v488 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1373:
          v489 = *v488;
        }
        else
        {
          v489 = 0;
        }
        std::string::push_back(this, 46);
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v562 = *((void *)a2 + 1);
        uint64_t v274 = *(const std::string::value_type **)v562;
        std::string::size_type v276 = *(void *)(v562 + 8);
        uint64_t v275 = this;
        goto LABEL_822;
      case 6:
        std::string::append(this, "associated type metadata accessor for ", 0x26uLL);
        int v46 = *((unsigned __int8 *)a2 + 18);
        int v47 = a2;
        if (v46 == 2) {
          goto LABEL_91;
        }
        if (v46 != 5) {
          goto LABEL_92;
        }
        goto LABEL_89;
      case 7:
        unint64_t v43 = "default associated type metadata accessor for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 46;
        goto LABEL_318;
      case 8:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          int v346 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          int v346 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v346, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "accessor macro @";
        goto LABEL_1402;
      case 9:
        std::string::append(this, "associated type witness table accessor for ", 0x2BuLL);
        int v133 = *((unsigned __int8 *)a2 + 18);
        unint64_t v134 = a2;
        if (v133 == 2) {
          goto LABEL_341;
        }
        if (v133 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v134 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_341:
          unint64_t v135 = (swift::Demangle::__runtime::Node *)*((void *)v134 + 1);
        }
        else
        {
          unint64_t v135 = 0;
        }
        std::string::append(this, " : ", 3uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v52 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          unint64_t v52 = 0;
        }
        goto LABEL_468;
      case 0xA:
        std::string::append(this, "base witness table accessor for ", 0x20uLL);
        int v51 = *((unsigned __int8 *)a2 + 18);
        int v47 = a2;
        if (v51 == 2) {
          goto LABEL_91;
        }
        if (v51 != 5) {
          goto LABEL_92;
        }
LABEL_89:
        if (*((_DWORD *)a2 + 2) < 2u)
        {
LABEL_92:
          unint64_t v52 = 0;
        }
        else
        {
          int v47 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_91:
          unint64_t v52 = (swift::Demangle::__runtime::Node *)*((void *)v47 + 1);
        }
        ++v7;
LABEL_468:
        unsigned int v180 = " in ";
        int v181 = this;
        std::string::size_type v182 = 4;
        goto LABEL_469;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
      case 0xF5:
        uint64_t v278 = this;
        uint64_t v279 = 0;
        uint64_t v280 = a2;
        goto LABEL_828;
      case 0xC:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v479 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v479 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v479, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "body macro @";
        goto LABEL_1402;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_823;
      case 0x13:
      case 0x4C:
        uint64_t v281 = (std::string::value_type *)&unk_BFEA3;
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        goto LABEL_1476;
      case 0x14:
      case 0x17:
      case 0x65:
      case 0x6A:
      case 0x70:
      case 0x92:
        goto LABEL_1007;
      case 0x15:
        uint64_t v274 = "Builtin.TheTupleType";
        uint64_t v275 = this;
        std::string::size_type v276 = 20;
        goto LABEL_822;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xB4:
      case 0xDB:
      case 0xEA:
      case 0x106:
        uint64_t v281 = (std::string::value_type *)&unk_BFEA3;
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
        goto LABEL_1476;
      case 0x19:
        unint64_t v43 = "class metadata base offset for ";
        goto LABEL_108;
      case 0x1A:
        std::string::append(this, "concrete protocol conformance ", 0x1EuLL);
        int v144 = *((unsigned __int8 *)a2 + 18);
        if (v144 == 4)
        {
          std::string::append(this, "#", 1uLL);
          unint64_t v145 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(void *)a2);
          std::string::append(v145, " ", 1uLL);
          int v144 = *((unsigned __int8 *)a2 + 18);
        }
        __int16 v146 = (swift::Demangle::__runtime::Node **)a2;
        if ((v144 - 1) < 2) {
          goto LABEL_365;
        }
        if (v144 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v146 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_365:
          int v147 = *v146;
        }
        else
        {
          int v147 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        int v193 = *((unsigned __int8 *)a2 + 18);
        int v194 = a2;
        if (v193 == 2) {
          goto LABEL_515;
        }
        if (v193 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v194 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_515:
          unsigned int v195 = (swift::Demangle::__runtime::Node *)*((void *)v194 + 1);
        }
        else
        {
          unsigned int v195 = 0;
        }
        if (*((unsigned char *)a2 + 18) != 5) {
          goto LABEL_823;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        uint64_t v196 = *(void *)(*(void *)a2 + 16);
        int v197 = *(unsigned __int8 *)(v196 + 18);
        if ((v197 - 1) >= 2 && (v197 != 5 || !*(_DWORD *)(v196 + 8))) {
          goto LABEL_823;
        }
        int v157 = " with conditional requirements: ";
        unint64_t v158 = this;
        std::string::size_type v159 = 32;
        goto LABEL_523;
      case 0x1B:
        v372 = "pack protocol conformance ";
        unint64_t v373 = this;
        std::string::size_type v374 = 26;
        goto LABEL_1507;
      case 0x1C:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v377 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v377 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v377, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "conformance macro @";
        goto LABEL_1402;
      case 0x1D:
        int v486 = *((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u;
        goto LABEL_1479;
      case 0x1E:
        unint64_t v28 = "coroutine continuation prototype for ";
        goto LABEL_118;
      case 0x1F:
        v477 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          v477 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v477 + 16) == 24) {
          size_t v416 = 21;
        }
        else {
          size_t v416 = 6;
        }
        if (*(_WORD *)(*(void *)v477 + 16) == 24) {
          uint64_t v281 = "__deallocating_deinit";
        }
        else {
          uint64_t v281 = "deinit";
        }
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
LABEL_1338:
        int v443 = 0;
        goto LABEL_1478;
      case 0x20:
      case 0xE8:
        goto LABEL_311;
      case 0x21:
        uint64_t v360 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          uint64_t v360 = *(swift::Demangle::__runtime::Node **)a2;
        }
        goto LABEL_1479;
      case 0x22:
        v372 = "dependent associated conformance ";
        unint64_t v373 = this;
        std::string::size_type v374 = 33;
        goto LABEL_1507;
      case 0x23:
        int v106 = *((unsigned __int8 *)a2 + 18);
        unint64_t v107 = a2;
        if (v106 == 2) {
          goto LABEL_251;
        }
        if (v106 != 5) {
          goto LABEL_252;
        }
        unsigned int v108 = *((_DWORD *)a2 + 2);
        if (v108 < 2) {
          goto LABEL_255;
        }
        unint64_t v107 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_251:
        std::string::push_back(this, 46);
        int v106 = *((unsigned __int8 *)a2 + 18);
LABEL_252:
        if ((v106 - 1) < 2) {
          goto LABEL_299;
        }
        if (v106 != 5) {
          goto LABEL_496;
        }
        unsigned int v108 = *((_DWORD *)a2 + 2);
LABEL_255:
        if (!v108) {
          goto LABEL_496;
        }
        goto LABEL_298;
      case 0x24:
        int v103 = *((unsigned __int8 *)a2 + 18);
        uint64_t v104 = (swift::Demangle::__runtime::Node **)a2;
        if ((v103 - 1) < 2) {
          goto LABEL_244;
        }
        if (v103 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v105 = 0;
            goto LABEL_801;
          }
          uint64_t v104 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_244:
          unint64_t v105 = *v104;
        }
        else
        {
          unint64_t v105 = 0;
        }
        if (v103 == 2) {
          goto LABEL_631;
        }
        if (v103 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_631:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_802;
        }
LABEL_801:
        long long v10 = 0;
LABEL_802:
        std::string::append(this, ": ", 2uLL);
        goto LABEL_7;
      case 0x25:
      case 0x2A:
        printer_unreachable("should be printed as a child of a DependentGenericSignature");
      case 0x26:
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        std::function<std::string ()(unsigned long long,unsigned long long)>::operator()((uint64_t)&this[2].__r_.__value_.__r.__words[2], **(unsigned int **)a2, **((unsigned int **)a2 + 1));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(this, (const std::string::value_type *)p_str, size);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_823;
      case 0x27:
        int v38 = *((unsigned __int8 *)a2 + 18);
        unint64_t v39 = (swift::Demangle::__runtime::Node **)a2;
        if ((v38 - 1) < 2) {
          goto LABEL_62;
        }
        if (v38 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v40 = 0;
            goto LABEL_733;
          }
          unint64_t v39 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_62:
          unint64_t v40 = *v39;
        }
        else
        {
          unint64_t v40 = 0;
        }
        if (v38 == 2) {
          goto LABEL_600;
        }
        if (v38 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_600:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_734;
        }
LABEL_733:
        long long v10 = 0;
LABEL_734:
        std::string::append(this, " == ", 4uLL);
        goto LABEL_7;
      case 0x28:
        int v356 = *((unsigned __int8 *)a2 + 18);
        uint64_t v357 = (swift::Demangle::__runtime::Node **)a2;
        if ((v356 - 1) < 2) {
          goto LABEL_947;
        }
        if (v356 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v358 = 0;
LABEL_1799:
            v565 = 0;
LABEL_1800:
            unsigned int v607 = v7 + 1;
            std::string::append(this, ".shape == ", 0xAuLL);
            v536 = ".shape";
            v560 = this;
            std::string::size_type v561 = 6;
LABEL_1801:
            std::string::append(v560, v536, v561);
            return 0;
          }
          uint64_t v357 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_947:
          unint64_t v358 = *v357;
        }
        else
        {
          unint64_t v358 = 0;
        }
        if (v356 == 2)
        {
LABEL_1650:
          v565 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_1800;
        }
        if (v356 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1650;
        }
        goto LABEL_1799;
      case 0x29:
        int v483 = *((unsigned __int8 *)a2 + 18);
        v484 = (swift::Demangle::__runtime::Node **)a2;
        if ((v483 - 1) < 2) {
          goto LABEL_1360;
        }
        if (v483 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v485 = 0;
LABEL_1803:
            v575 = 0;
LABEL_1804:
            unsigned int v608 = v7 + 1;
            std::string::append(this, ": ", 2uLL);
            v609 = "_UnknownLayout";
            std::string::size_type v610 = 14;
            switch(**v575)
            {
              case 'C':
                v609 = "AnyObject";
                std::string::size_type v610 = 9;
                break;
              case 'D':
                v609 = "_NativeClass";
                std::string::size_type v610 = 12;
                break;
              case 'N':
                v609 = "_NativeRefCountedObject";
                std::string::size_type v610 = 23;
                break;
              case 'R':
                v609 = "_RefCountedObject";
                std::string::size_type v610 = 17;
                break;
              case 'T':
                goto LABEL_1809;
              case 'U':
                break;
              default:
                int v611 = **v575 & 0xDF;
                if (v611 == 77)
                {
                  v609 = "_TrivialAtMost";
                  std::string::size_type v610 = 14;
                }
                else if (v611 == 69)
                {
LABEL_1809:
                  v609 = "_Trivial";
                  std::string::size_type v610 = 8;
                }
                else
                {
                  std::string::size_type v610 = 0;
                  v609 = 0;
                }
                break;
            }
            std::string::append(this, v609, v610);
            if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
              goto LABEL_823;
            }
            std::string::append(this, "(", 1uLL);
            if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
              v623 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
            }
            else {
              v623 = 0;
            }
            if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
            {
              std::string::append(this, ", ", 2uLL);
              if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u) {
                v403 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 24);
              }
              else {
                v403 = 0;
              }
              char v405 = (_anonymous_namespace_::NodePrinter *)this;
              unsigned int v404 = v608;
LABEL_1116:
            }
            goto LABEL_1489;
          }
          v484 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1360:
          v485 = *v484;
        }
        else
        {
          v485 = 0;
        }
        v574 = a2;
        if (v483 == 2)
        {
LABEL_1691:
          v575 = (unsigned char **)*((void *)v574 + 1);
          goto LABEL_1804;
        }
        if (v483 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v574 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1691;
        }
        goto LABEL_1803;
      case 0x2B:
      case 0x2E:
        goto LABEL_823;
      case 0x2C:
        int v141 = *((unsigned __int8 *)a2 + 18);
        unint64_t v142 = (swift::Demangle::__runtime::Node **)a2;
        if ((v141 - 1) < 2) {
          goto LABEL_358;
        }
        if (v141 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            int v143 = 0;
LABEL_804:
            long long v10 = 0;
LABEL_805:
            long long v269 = v10;
            while (1)
            {
              while (1)
              {
                std::string v270 = v269;
                int v271 = *((unsigned __int16 *)v269 + 8);
                if (v271 != 232)
                {
                  BOOL v273 = (v271 - 44) > 0x26
                      || ((1 << (v271 - 44)) & 0x4000200001) == 0;
                  if (v273 && v271 != 245) {
                    std::string::push_back(this, 32);
                  }
                  goto LABEL_7;
                }
                int v272 = *((unsigned __int8 *)v270 + 18);
                if ((v272 - 1) >= 2) {
                  break;
                }
LABEL_808:
                long long v269 = *(swift::Demangle::__runtime::Node **)v270;
              }
              long long v269 = 0;
              if (v272 == 5)
              {
                long long v269 = 0;
                if (*((_DWORD *)v270 + 2))
                {
                  std::string v270 = *(swift::Demangle::__runtime::Node **)v270;
                  goto LABEL_808;
                }
              }
            }
          }
          unint64_t v142 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_358:
          int v143 = *v142;
        }
        else
        {
          int v143 = 0;
        }
        if (v141 == 2)
        {
LABEL_637:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_805;
        }
        if (v141 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_637;
        }
        goto LABEL_804;
      case 0x2D:
        int v139 = *((unsigned __int8 *)a2 + 18);
        unsigned int v66 = (swift::Demangle::__runtime::Node **)a2;
        if ((v139 - 1) < 2) {
          goto LABEL_353;
        }
        if (v139 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_352;
        }
        goto LABEL_403;
      case 0x2F:
        int v94 = "dependent root protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 36;
        goto LABEL_324;
      case 0x30:
        int v94 = "dependent inherited protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 41;
        goto LABEL_324;
      case 0x31:
        int v94 = "dependent associated protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 42;
LABEL_324:
        std::string::append(v95, v94, v96);
        int v126 = *((unsigned __int8 *)a2 + 18);
        if (v126 == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v127 = *(void *)(*(void *)a2 + 16);
        }
        else {
          uint64_t v127 = 0;
        }
        if (*(unsigned char *)(v127 + 18) == 4)
        {
          std::string::append(this, "#", 1uLL);
          snprintf((char *)&__str, 0x20uLL, "%llu", *(void *)v127);
          std::string::append(this, (const std::string::value_type *)&__str);
          std::string::append(this, " ", 1uLL);
          int v126 = *((unsigned __int8 *)a2 + 18);
        }
        unint64_t v128 = (swift::Demangle::__runtime::Node **)a2;
        if ((v126 - 1) < 2) {
          goto LABEL_334;
        }
        if (v126 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v128 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_334:
          unint64_t v129 = *v128;
        }
        else
        {
          unint64_t v129 = 0;
        }
        int v130 = " to ";
        int v131 = this;
        std::string::size_type v132 = 4;
        goto LABEL_504;
      case 0x32:
        goto LABEL_1479;
      case 0x33:
        int v361 = *((unsigned __int8 *)a2 + 18);
        if ((v361 - 1) < 2) {
          goto LABEL_959;
        }
        if (v361 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_959:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "didset";
        goto LABEL_1536;
      case 0x34:
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 != 1) {
            printer_unreachable("bad directness");
          }
          uint64_t v311 = "indirect";
          std::string::size_type v312 = 8;
        }
        else
        {
          uint64_t v311 = "direct";
          std::string::size_type v312 = 6;
        }
        std::string::append(this, v311, v312);
        uint64_t v274 = " ";
        goto LABEL_1490;
      case 0x35:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "distributed thunk ";
LABEL_1320:
        uint64_t v275 = this;
        std::string::size_type v276 = 18;
        goto LABEL_822;
      case 0x36:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "distributed accessor for ";
LABEL_1291:
        uint64_t v275 = this;
        std::string::size_type v276 = 25;
        goto LABEL_822;
      case 0x37:
        uint64_t v274 = "dynamic ";
        goto LABEL_1749;
      case 0x38:
        uint64_t v274 = "super ";
        goto LABEL_1286;
      case 0x39:
      case 0x55:
        uint64_t v274 = "Self";
        goto LABEL_1032;
      case 0x3A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "dynamically replaceable thunk for ";
        uint64_t v275 = this;
        std::string::size_type v276 = 34;
        goto LABEL_822;
      case 0x3B:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "dynamically replaceable key for ";
        uint64_t v275 = this;
        std::string::size_type v276 = 32;
        goto LABEL_822;
      case 0x3C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "dynamically replaceable variable for ";
        uint64_t v275 = this;
        std::string::size_type v276 = 37;
        goto LABEL_822;
      case 0x3E:
        unint64_t v43 = "enum case for ";
        goto LABEL_208;
      case 0x3F:
        uint64_t v274 = "<ERROR TYPE>";
        goto LABEL_1062;
      case 0x42:
        uint64_t v274 = "@Sendable ";
        goto LABEL_1246;
      case 0x43:
        int v431 = *((unsigned __int8 *)a2 + 18);
        if ((v431 - 1) >= 2 && (v431 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        std::string::push_back(this, 64);
        int v432 = *((unsigned __int8 *)a2 + 18);
        if ((v432 - 1) < 2) {
          goto LABEL_1180;
        }
        if (v432 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1180:
          v433 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v433 = 0;
        }
        v586 = this;
        std::string::value_type v587 = 32;
LABEL_1720:
        std::string::push_back(v586, v587);
        return 0;
      case 0x44:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v359 = *(unsigned __int8 *)a2;
        switch(v359)
        {
          case 'r':
            unint64_t v292 = "(reverse)";
            break;
          case 'l':
            unint64_t v292 = "(_linear)";
            break;
          case 'f':
            unint64_t v292 = "(_forward)";
            uint64_t v293 = this;
            std::string::size_type v291 = 10;
LABEL_1654:
            std::string::append(v293, v292, v291);
LABEL_1655:
            std::string::push_back(this, 32);
            goto LABEL_823;
          default:
            goto LABEL_1655;
        }
        uint64_t v293 = this;
        std::string::size_type v291 = 9;
        goto LABEL_1654;
      case 0x45:
        int v335 = *((unsigned __int8 *)a2 + 18);
        unint64_t v336 = (swift::Demangle::__runtime::Node **)a2;
        if (v335 == 2) {
          goto LABEL_912;
        }
        switch(v335)
        {
          case 5:
            unsigned int v337 = *((_DWORD *)a2 + 2);
            if (v337 != 2)
            {
              unint64_t v338 = 0;
              goto LABEL_1762;
            }
            unint64_t v336 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_912:
            unint64_t v338 = 1;
            std::string::append(this, " ", 1uLL);
            char v339 = 0;
            int v335 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v338 = 0;
            v595 = 0;
            if ((v339 & 1) == 0) {
              goto LABEL_1766;
            }
            goto LABEL_1764;
          case 2:
LABEL_1764:
            v595 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v338);
            goto LABEL_1766;
          default:
            unint64_t v338 = 0;
            char v339 = 1;
            break;
        }
        if (v335 != 5)
        {
LABEL_1765:
          v595 = 0;
LABEL_1766:
          v536 = ".Type";
          v560 = this;
          std::string::size_type v561 = 5;
          goto LABEL_1801;
        }
        unsigned int v337 = *((_DWORD *)a2 + 2);
LABEL_1762:
        if (v338 < v337)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1764;
        }
        goto LABEL_1765;
      case 0x46:
        v490 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v490 = *(swift::Demangle::__runtime::Node **)a2;
        }
        goto LABEL_1479;
      case 0x47:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_709;
        }
        std::string::append(this, "(extension in ", 0xEuLL);
        int v136 = *((unsigned __int8 *)a2 + 18);
        uint64_t v137 = (swift::Demangle::__runtime::Node **)a2;
        if ((v136 - 1) < 2) {
          goto LABEL_348;
        }
        if (v136 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v137 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_348:
          unint64_t v138 = *v137;
        }
        else
        {
          unint64_t v138 = 0;
        }
        std::string::append(this, "):", 2uLL);
LABEL_709:
        int v245 = *((unsigned __int8 *)a2 + 18);
        long long v246 = a2;
        if (v245 == 2) {
          goto LABEL_713;
        }
        if (v245 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          long long v246 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_713:
          long long v247 = (swift::Demangle::__runtime::Node *)*((void *)v246 + 1);
        }
        else
        {
          long long v247 = 0;
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3 && !this[1].__r_.__value_.__s.__data_[19]) {
          goto LABEL_718;
        }
        goto LABEL_823;
      case 0x48:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v428 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v428 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v428, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "extension macro @";
        goto LABEL_1402;
      case 0x49:
        int v35 = *((unsigned __int8 *)a2 + 18);
        int v36 = (swift::Demangle::__runtime::Node **)a2;
        if ((v35 - 1) < 2) {
          goto LABEL_57;
        }
        if (v35 == 5 && *((_DWORD *)a2 + 2))
        {
          int v36 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_57:
          int v37 = *v36;
        }
        else
        {
          int v37 = 0;
        }
        int v130 = "field offset for ";
        goto LABEL_499;
      case 0x4A:
        goto LABEL_1479;
      case 0x4B:
        unint64_t v43 = "full type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 23;
        goto LABEL_318;
      case 0x4D:
        uint64_t v287 = "function signature specialization";
        uint64_t v288 = this;
        unint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 33;
        goto LABEL_1350;
      case 0x4E:
      case 0x4F:
        printer_unreachable("should be handled in printSpecializationPrefix");
      case 0x50:
        uint64_t v313 = *(void *)a2;
        if ((*(void *)a2 & 0x400) != 0)
        {
          std::string::append(this, "Existential To Protocol Constrained Generic", 0x2BuLL);
          if ((v313 & 0x40) == 0)
          {
            if ((v313 & 0x80) == 0) {
              goto LABEL_1638;
            }
LABEL_1636:
            std::string::append(this, " and ", 5uLL);
LABEL_1637:
            std::string::append(this, "Owned To Guaranteed", 0x13uLL);
            goto LABEL_1638;
          }
          std::string::append(this, " and ", 5uLL);
        }
        else if ((v313 & 0x40) == 0)
        {
          if ((v313 & 0x80) == 0)
          {
            if ((v313 & 0x200) == 0)
            {
              if ((v313 & 0x100) == 0)
              {
                long long v10 = 0;
                if ((int)v313 <= 127)
                {
                  switch((int)v313)
                  {
                    case 0:
                      uint64_t v274 = "Constant Propagated Function";
                      uint64_t v275 = this;
                      std::string::size_type v276 = 28;
                      goto LABEL_822;
                    case 1:
                      uint64_t v274 = "Constant Propagated Global";
                      goto LABEL_1051;
                    case 2:
                      uint64_t v274 = "Constant Propagated Integer";
                      goto LABEL_1871;
                    case 3:
                      uint64_t v274 = "Constant Propagated Float";
                      goto LABEL_1291;
                    case 4:
                      uint64_t v274 = "Constant Propagated String";
                      goto LABEL_1051;
                    case 5:
                      uint64_t v274 = "Closure Propagated";
                      goto LABEL_1320;
                    case 6:
                      uint64_t v274 = "Value Promoted from Box";
                      goto LABEL_1751;
                    case 7:
                      uint64_t v274 = "Stack Promoted from Box";
                      goto LABEL_1751;
                    case 8:
                      uint64_t v274 = "InOut Converted to Out";
                      goto LABEL_1023;
                    case 9:
                      uint64_t v274 = "Constant Propagated KeyPath";
LABEL_1871:
                      uint64_t v275 = this;
                      std::string::size_type v276 = 27;
                      goto LABEL_822;
                    case 64:
                      goto LABEL_1878;
                    default:
                      goto LABEL_824;
                  }
                }
                if ((int)v313 > 511)
                {
                  if (v313 != 512 && v313 != 1024) {
                    goto LABEL_824;
                  }
                }
                else if (v313 != 128 && v313 != 256)
                {
                  goto LABEL_824;
                }
LABEL_1878:
                printer_unreachable("option sets should have been handled earlier");
              }
              goto LABEL_1644;
            }
            goto LABEL_1642;
          }
          goto LABEL_1637;
        }
        std::string::append(this, "Dead", 4uLL);
        if ((v313 & 0x80) == 0)
        {
LABEL_1638:
          if ((v313 & 0x200) == 0)
          {
            if ((v313 & 0x100) == 0) {
              goto LABEL_823;
            }
LABEL_1643:
            std::string::append(this, " and ", 5uLL);
LABEL_1644:
            uint64_t v274 = "Exploded";
LABEL_1749:
            uint64_t v275 = this;
            std::string::size_type v276 = 8;
            goto LABEL_822;
          }
          std::string::append(this, " and ", 5uLL);
LABEL_1642:
          std::string::append(this, "Guaranteed To Owned", 0x13uLL);
          if ((v313 & 0x100) == 0) {
            goto LABEL_823;
          }
          goto LABEL_1643;
        }
        goto LABEL_1636;
      case 0x51:
        v474 = *(swift::Demangle::__runtime **)a2;
        v475 = (const char *)*((void *)a2 + 1);
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::demangleSymbolAsString(v474, v475, (unint64_t)&__str, a4);
      case 0x53:
        std::string::append(this, "any ", 4uLL);
        int v480 = *((unsigned __int8 *)a2 + 18);
        v481 = (swift::Demangle::__runtime::Node **)a2;
        if ((v480 - 1) < 2) {
          goto LABEL_1355;
        }
        if (v480 == 5 && *((_DWORD *)a2 + 2))
        {
          v481 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1355:
          v482 = *v481;
        }
        else
        {
          v482 = 0;
        }
        unsigned int v557 = v7 + 1;
        std::string::append(this, "<", 1uLL);
        int v558 = *((unsigned __int8 *)a2 + 18);
        if (v558 == 2) {
          goto LABEL_1603;
        }
        if (v558 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1603:
          v559 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
          v559 = 0;
        }
        v536 = ">";
        goto LABEL_1606;
      case 0x54:
        v434 = ", ";
        goto LABEL_1323;
      case 0x56:
        int v328 = "generic partial specialization";
        std::string::size_type v329 = this;
        uint64_t v330 = (uint64_t *)a2;
        std::string::size_type v331 = 30;
        goto LABEL_1364;
      case 0x57:
        int v328 = "generic not-reabstracted partial specialization";
        std::string::size_type v329 = this;
        uint64_t v330 = (uint64_t *)a2;
        std::string::size_type v331 = 47;
LABEL_1364:
        goto LABEL_823;
      case 0x58:
        unint64_t v43 = "generic protocol witness table for ";
        goto LABEL_317;
      case 0x59:
        unint64_t v43 = "instantiation function for generic protocol witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 62;
        goto LABEL_318;
      case 0x5A:
        unint64_t v43 = "resilient protocol witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 37;
        goto LABEL_318;
      case 0x5B:
      case 0x5D:
        uint64_t v287 = "generic specialization";
        uint64_t v288 = this;
        unint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 22;
        goto LABEL_1350;
      case 0x5C:
        uint64_t v287 = "generic not re-abstracted specialization";
        uint64_t v288 = this;
        unint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 40;
        goto LABEL_1350;
      case 0x5E:
        int v435 = *((unsigned __int8 *)a2 + 18);
        v436 = (swift::Demangle::__runtime::Node **)a2;
        if ((v435 - 1) < 2) {
          goto LABEL_1192;
        }
        if (v435 == 5 && *((_DWORD *)a2 + 2))
        {
          v436 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1192:
          v437 = *v436;
        }
        else
        {
          v437 = 0;
        }
        unsigned int v551 = v7 + 1;
        unsigned int v552 = *((unsigned __int8 *)a2 + 18);
        if (v552 != 2)
        {
          if (v552 != 5) {
            goto LABEL_823;
          }
          unsigned int v552 = *((_DWORD *)a2 + 2);
          if (v552 < 2) {
            goto LABEL_823;
          }
        }
        uint64_t v553 = v552;
        std::string::append(this, " with ", 6uLL);
        int v554 = *((unsigned __int8 *)a2 + 18);
        v555 = a2;
        if (v554 == 2) {
          goto LABEL_1591;
        }
        if (v554 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v555 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1591:
          v556 = (swift::Demangle::__runtime::Node *)*((void *)v555 + 1);
        }
        else
        {
          v556 = 0;
        }
        if (v553 == 2) {
          goto LABEL_823;
        }
        unint64_t v568 = 2;
        while (1)
        {
          std::string::append(this, " and ", 5uLL);
          int v570 = *((unsigned __int8 *)a2 + 18);
          if (v570 == 2)
          {
            unint64_t v571 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v570 != 5) {
              goto LABEL_1668;
            }
            unint64_t v571 = *((unsigned int *)a2 + 2);
          }
          if (v571 > v568)
          {
            unsigned int v572 = v570 - 1;
            v573 = a2;
            if (v572 >= 2) {
              v573 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v569 = (swift::Demangle::__runtime::Node *)*((void *)v573 + v568);
            goto LABEL_1669;
          }
LABEL_1668:
          v569 = 0;
LABEL_1669:
          if (v553 == ++v568) {
            goto LABEL_823;
          }
        }
      case 0x5F:
        uint64_t v287 = "generic pre-specialization";
        uint64_t v288 = this;
        unint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 26;
        goto LABEL_1350;
      case 0x60:
        uint64_t v287 = "inlined generic function";
        uint64_t v288 = this;
        unint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 24;
LABEL_1350:
        goto LABEL_823;
      case 0x61:
        unint64_t v43 = "generic type metadata pattern for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 34;
        goto LABEL_318;
      case 0x62:
        int v447 = *((unsigned __int8 *)a2 + 18);
        if ((v447 - 1) < 2) {
          goto LABEL_1344;
        }
        if (v447 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1440;
        }
        goto LABEL_1343;
      case 0x63:
      case 0xEB:
        goto LABEL_1508;
      case 0x64:
        int v478 = *((unsigned __int8 *)a2 + 18);
        if ((v478 - 1) < 2) {
          goto LABEL_1344;
        }
        if (v478 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_1343:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1344:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
LABEL_1440:
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "getter";
        goto LABEL_1536;
      case 0x66:
      case 0xA1:
      case 0xD8:
        goto LABEL_1155;
      case 0x67:
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        uint64_t v281 = "__ivar_initializer";
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
        goto LABEL_1204;
      case 0x68:
        goto LABEL_1479;
      case 0x69:
        uint64_t v274 = "@escaping";
        goto LABEL_1781;
      case 0x6B:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v464 = *(unsigned __int8 *)a2;
        switch(v464)
        {
          case 'f':
            uint64_t v274 = "(_forward)";
LABEL_1246:
            uint64_t v275 = this;
            std::string::size_type v276 = 10;
            goto LABEL_822;
          case 'r':
            uint64_t v274 = "(reverse)";
            break;
          case 'l':
            uint64_t v274 = "(_linear)";
            break;
          default:
            goto LABEL_823;
        }
        goto LABEL_1781;
      case 0x6C:
        uint64_t v274 = "@isolated(any)";
        goto LABEL_1448;
      case 0x6D:
        uint64_t v274 = "sending";
        goto LABEL_1624;
      case 0x6E:
      case 0x6F:
        std::string::size_type v291 = *((void *)a2 + 1);
        if (!v291) {
          goto LABEL_823;
        }
        unint64_t v292 = *(const std::string::value_type **)a2;
        uint64_t v293 = this;
        goto LABEL_1654;
      case 0x71:
        std::string::append(this, "@convention(", 0xCuLL);
        int v340 = *((unsigned __int8 *)a2 + 18);
        if (v340 == 1) {
          goto LABEL_1685;
        }
        uint64_t v341 = (const std::string::value_type ***)a2;
        if (v340 == 2) {
          goto LABEL_1822;
        }
        if (v340 != 5) {
          goto LABEL_1829;
        }
        int v342 = *((_DWORD *)a2 + 2);
        if (v342 != 2)
        {
          if (v342 == 1) {
            goto LABEL_1684;
          }
          goto LABEL_1829;
        }
        uint64_t v341 = *(const std::string::value_type ****)a2;
LABEL_1822:
        std::string::append(this, **v341, (std::string::size_type)(*v341)[1]);
        std::string::append(this, ", mangledCType: \"", 0x11uLL);
        int v613 = *((unsigned __int8 *)a2 + 18);
        if (v613 == 2) {
          goto LABEL_1826;
        }
        if (v613 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1826:
          v614 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
          v614 = 0;
        }
        std::string::push_back(this, 34);
        goto LABEL_1829;
      case 0x73:
        goto LABEL_823;
      case 0x74:
        std::string::append(this, "for <", 5uLL);
        int v445 = *((unsigned __int8 *)a2 + 18);
        if ((v445 - 1) < 2) {
          goto LABEL_1214;
        }
        if (v445 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1519;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1214:
        v446 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_1520;
      case 0x75:
        int v286 = 2 * this[1].__r_.__value_.__s.__data_[15];
        v442 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v442 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = **((_DWORD **)v442 + 1) + 1;
        int v282 = v6 & 1;
        uint64_t v281 = "implicit closure #";
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
LABEL_1204:
        int v443 = 0;
        size_t v416 = 18;
        goto LABEL_1478;
      case 0x76:
      case 0x78:
        int v12 = *((unsigned __int8 *)a2 + 18);
        int v13 = (swift::Demangle::__runtime::Node **)a2;
        if ((v12 - 1) < 2) {
          goto LABEL_14;
        }
        if (v12 == 5 && *((_DWORD *)a2 + 2))
        {
          int v13 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_14:
          uint64_t v14 = *v13;
        }
        else
        {
          uint64_t v14 = 0;
        }
        std::string::append(this, " ", 1uLL);
        int v151 = *((unsigned __int8 *)a2 + 18);
        if (v151 != 5) {
          goto LABEL_549;
        }
        uint64_t v152 = *((unsigned int *)a2 + 2);
        if (v152 != 3) {
          goto LABEL_384;
        }
        int v151 = *((unsigned __int8 *)a2 + 18);
        if (v151 != 5) {
          goto LABEL_549;
        }
        uint64_t v152 = *((unsigned int *)a2 + 2);
LABEL_384:
        if (v152 != 4) {
          goto LABEL_553;
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v153 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          unint64_t v153 = 0;
        }
        int v151 = *((unsigned __int8 *)a2 + 18);
LABEL_549:
        switch(v151)
        {
          case 1:
            long long v10 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_7;
          case 2:
            long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
            goto LABEL_7;
          case 5:
            uint64_t v152 = *((unsigned int *)a2 + 2);
LABEL_553:
            if (v152)
            {
              long long v10 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * (v152 - 1));
              goto LABEL_7;
            }
            break;
        }
        goto LABEL_799;
      case 0x77:
        std::string::append(this, "@substituted ", 0xDuLL);
        int v353 = *((unsigned __int8 *)a2 + 18);
        uint64_t v354 = (swift::Demangle::__runtime::Node **)a2;
        if ((v353 - 1) < 2) {
          goto LABEL_942;
        }
        if (v353 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v354 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_942:
          uint64_t v355 = *v354;
        }
        else
        {
          uint64_t v355 = 0;
        }
        std::string::append(this, " for <", 6uLL);
        int v535 = *((unsigned __int8 *)a2 + 18);
        if (v535 == 2) {
          goto LABEL_1518;
        }
        if (v535 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1518:
          v446 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
LABEL_1519:
          v446 = 0;
        }
LABEL_1520:
        goto LABEL_1521;
      case 0x79:
        v343 = "@yields ";
        uint64_t v344 = this;
        std::string::size_type v345 = 8;
        goto LABEL_1185;
      case 0x7A:
        v343 = "@error ";
        uint64_t v344 = this;
        std::string::size_type v345 = 7;
LABEL_1185:
        std::string::append(v344, v343, v345);
        v434 = " ";
LABEL_1323:
        v476 = this;
        v457 = a2;
        goto LABEL_1324;
      case 0x7B:
        unint64_t v43 = "inout ";
        unint64_t v44 = this;
        std::string::size_type v45 = 6;
        goto LABEL_318;
      case 0x7C:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = " infix";
        goto LABEL_1286;
      case 0x7D:
        goto LABEL_1479;
      case 0x7E:
        int v379 = *((unsigned __int8 *)a2 + 18);
        if ((v379 - 1) < 2) {
          goto LABEL_1029;
        }
        if (v379 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1029:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "init";
        goto LABEL_1596;
      case 0x7F:
        unint64_t v43 = "isolated ";
        goto LABEL_292;
      case 0x80:
        unint64_t v43 = "sending ";
        goto LABEL_290;
      case 0x81:
        uint64_t v274 = "@isolated(any) ";
        uint64_t v275 = this;
        std::string::size_type v276 = 15;
        goto LABEL_822;
      case 0x82:
        uint64_t v274 = "sending ";
        goto LABEL_1749;
      case 0x83:
      case 0x84:
        if (v11 == 131) {
          uint64_t v299 = "key path getter for ";
        }
        else {
          uint64_t v299 = "key path setter for ";
        }
        std::string::append(this, v299, 0x14uLL);
        int v300 = *((unsigned __int8 *)a2 + 18);
        uint64_t v301 = (swift::Demangle::__runtime::Node **)a2;
        if ((v300 - 1) < 2) {
          goto LABEL_850;
        }
        if (v300 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v301 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_850:
          uint64_t v302 = *v301;
        }
        else
        {
          uint64_t v302 = 0;
        }
        unsigned int v505 = v7 + 1;
        std::string::append(this, " : ", 3uLL);
        int v506 = *((unsigned __int8 *)a2 + 18);
        v507 = a2;
        if (v506 == 2) {
          goto LABEL_1432;
        }
        if (v506 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v507 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1432:
          v508 = (swift::Demangle::__runtime::Node *)*((void *)v507 + 1);
          if (*((_WORD *)v508 + 8) == 217) {
            std::string::append(this, ", ", 2uLL);
          }
          if (*((unsigned char *)a2 + 18) == 5)
          {
            unint64_t v509 = 2;
            do
            {
              if (v509 >= *((unsigned int *)a2 + 2)) {
                break;
              }
              v510 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * v509);
              if (*((_WORD *)v510 + 8) == 217) {
                std::string::append(this, ", ", 2uLL);
              }
              ++v509;
            }
            while (*((unsigned char *)a2 + 18) == 5);
          }
        }
        goto LABEL_823;
      case 0x85:
      case 0x86:
        std::string::append(this, "key path index ", 0xFuLL);
        int v303 = *((unsigned __int16 *)a2 + 8);
        if (v303 == 133) {
          unint64_t v304 = "equality";
        }
        else {
          unint64_t v304 = "hash";
        }
        if (v303 == 133) {
          std::string::size_type v305 = 8;
        }
        else {
          std::string::size_type v305 = 4;
        }
        std::string::append(this, v304, v305);
        std::string::append(this, " operator for ", 0xEuLL);
        int v306 = *((unsigned __int8 *)a2 + 18);
        unsigned int v307 = v306 - 1;
        switch(v306)
        {
          case 1:
            uint64_t v309 = 0;
            int v308 = 1;
            uint64_t v310 = a2;
            goto LABEL_1453;
          case 5:
            int v308 = *((_DWORD *)a2 + 2);
            if (v308)
            {
              uint64_t v309 = (v308 - 1);
              uint64_t v310 = *(swift::Demangle::__runtime::Node **)a2;
              int v306 = *((_DWORD *)a2 + 2);
              goto LABEL_1453;
            }
            break;
          case 2:
            int v308 = 2;
            uint64_t v309 = 1;
            int v306 = 2;
            uint64_t v310 = a2;
LABEL_1453:
            v513 = (unsigned __int16 *)*((void *)v310 + v309);
            goto LABEL_1455;
        }
        int v306 = 0;
        int v308 = 0;
        v513 = 0;
LABEL_1455:
        int v514 = v513[8];
        if (v514 == 217)
        {
          --v306;
          uint64_t v515 = (v308 - 2);
          v516 = a2;
          if (v307 >= 2) {
            v516 = *(swift::Demangle::__runtime::Node **)a2;
          }
          v513 = (unsigned __int16 *)*((void *)v516 + v515);
          int v514 = v513[8];
        }
        if (v514 == 43)
        {
          --v306;
        }
        std::string::append(this, "(", 1uLL);
        if (!v306) {
          goto LABEL_1489;
        }
        unsigned int v517 = v7 + 1;
        int v518 = *((unsigned __int8 *)a2 + 18);
        v519 = (swift::Demangle::__runtime::Node **)a2;
        if ((v518 - 1) < 2) {
          goto LABEL_1466;
        }
        if (v518 == 5 && *((_DWORD *)a2 + 2))
        {
          v519 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1466:
          v520 = *v519;
        }
        else
        {
          v520 = 0;
        }
        if (v306 == 1)
        {
LABEL_1489:
          uint64_t v274 = ")";
LABEL_1490:
          uint64_t v275 = this;
          std::string::size_type v276 = 1;
          goto LABEL_822;
        }
        unint64_t v525 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v527 = *((unsigned __int8 *)a2 + 18);
          if (v527 == 2)
          {
            unint64_t v528 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v527 != 5) {
              goto LABEL_1492;
            }
            unint64_t v528 = *((unsigned int *)a2 + 2);
          }
          if (v528 > v525)
          {
            unsigned int v529 = v527 - 1;
            v530 = a2;
            if (v529 >= 2) {
              v530 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v526 = (swift::Demangle::__runtime::Node *)*((void *)v530 + v525);
            goto LABEL_1493;
          }
LABEL_1492:
          v526 = 0;
LABEL_1493:
          if (v306 == ++v525) {
            goto LABEL_1489;
          }
        }
      case 0x87:
        std::string::append(this, "lazy protocol witness table accessor for type ", 0x2EuLL);
        int v41 = *((unsigned __int8 *)a2 + 18);
        unint64_t v42 = (swift::Demangle::__runtime::Node **)a2;
        if ((v41 - 1) < 2) {
          goto LABEL_261;
        }
        if (v41 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_388;
        }
        goto LABEL_260;
      case 0x88:
        std::string::append(this, "lazy protocol witness table cache variable for type ", 0x34uLL);
        int v109 = *((unsigned __int8 *)a2 + 18);
        unint64_t v42 = (swift::Demangle::__runtime::Node **)a2;
        if ((v109 - 1) < 2) {
          goto LABEL_261;
        }
        if (v109 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_260:
          unint64_t v42 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_261:
          unint64_t v110 = *v42;
        }
        else
        {
LABEL_388:
          unint64_t v110 = 0;
        }
        int v130 = " and conformance ";
LABEL_499:
        int v131 = this;
        std::string::size_type v132 = 17;
        goto LABEL_504;
      case 0x89:
        int v465 = *((unsigned __int8 *)a2 + 18);
        v466 = a2;
        if (v465 == 2) {
          goto LABEL_1284;
        }
        if (v465 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v466 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1284:
          v467 = (swift::Demangle::__runtime::Node *)*((void *)v466 + 1);
        }
        else
        {
          v467 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[9]) {
          goto LABEL_823;
        }
        std::string::append(this, " #", 2uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v425 = **(void **)a2 + 1;
        goto LABEL_1156;
      case 0x8A:
        if (*((unsigned char *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) == 3) {
            int v286 = 1;
          }
          else {
            int v286 = 2;
          }
        }
        else
        {
          int v286 = 2;
        }
        uint64_t v281 = (std::string::value_type *)&unk_BFEA3;
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        goto LABEL_1476;
      case 0x8B:
        int v83 = *((unsigned __int8 *)a2 + 18);
        if ((v83 - 1) < 2) {
          goto LABEL_183;
        }
        if (v83 != 5) {
          goto LABEL_559;
        }
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
LABEL_183:
        std::string::append(this, "module ", 7uLL);
        int v84 = *((unsigned __int8 *)a2 + 18);
        unint64_t v85 = (swift::Demangle::__runtime::Node **)a2;
        if ((v84 - 1) < 2) {
          goto LABEL_187;
        }
        if (v84 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v85 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_187:
          unsigned int v86 = *v85;
        }
        else
        {
          unsigned int v86 = 0;
        }
        int v83 = *((unsigned __int8 *)a2 + 18);
LABEL_559:
        if (v83 == 2) {
          goto LABEL_562;
        }
        if (v83 != 5) {
          goto LABEL_569;
        }
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_823;
        }
LABEL_562:
        std::string::append(this, " file ", 6uLL);
        int v206 = *((unsigned __int8 *)a2 + 18);
        int v207 = a2;
        if (v206 == 2) {
          goto LABEL_566;
        }
        if (v206 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v207 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_566:
          uint64_t v208 = (swift::Demangle::__runtime::Node *)*((void *)v207 + 1);
        }
        else
        {
          uint64_t v208 = 0;
        }
        int v83 = *((unsigned __int8 *)a2 + 18);
LABEL_569:
        if (v83 != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        std::string::append(this, " line ", 6uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          int v209 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          int v209 = 0;
        }
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_823;
        }
        std::string::append(this, " column ", 8uLL);
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_799;
        }
        long long v10 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 24);
        goto LABEL_7;
      case 0x8C:
        goto LABEL_1479;
      case 0x8D:
        int v453 = *((unsigned __int8 *)a2 + 18);
        if ((v453 - 1) < 2) {
          goto LABEL_1244;
        }
        if (v453 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1244:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "materializeForSet";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 17;
        goto LABEL_1597;
      case 0x8E:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v380 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          uint64_t v380 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v380, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "member macro @";
        goto LABEL_1402;
      case 0x8F:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v378 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v378 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v378, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "memberAttribute macro @";
        goto LABEL_1402;
      case 0x90:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "merged ";
        goto LABEL_1624;
      case 0x91:
        int v385 = *((unsigned __int8 *)a2 + 18);
        uint64_t v386 = (swift::Demangle::__runtime::Node **)a2;
        if (v385 == 2) {
          goto LABEL_1067;
        }
        switch(v385)
        {
          case 5:
            unsigned int v387 = *((_DWORD *)a2 + 2);
            if (v387 != 2)
            {
              unint64_t v388 = 0;
              goto LABEL_1768;
            }
            uint64_t v386 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1067:
            unint64_t v388 = 1;
            std::string::append(this, " ", 1uLL);
            char v389 = 0;
            int v385 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v388 = 0;
            v596 = 0;
            if ((v389 & 1) == 0) {
              goto LABEL_1772;
            }
            goto LABEL_1770;
          case 2:
LABEL_1770:
            v596 = (unsigned __int16 *)*((void *)a2 + v388);
            goto LABEL_1772;
          default:
            unint64_t v388 = 0;
            char v389 = 1;
            break;
        }
        if (v385 != 5)
        {
LABEL_1771:
          v596 = 0;
LABEL_1772:
          int v601 = *((unsigned __int8 *)v596 + 18);
          if ((v601 - 1) >= 2)
          {
            if (v601 != 5 || !*((_DWORD *)v596 + 2))
            {
              v602 = 0;
              goto LABEL_1778;
            }
            v596 = *(unsigned __int16 **)v596;
          }
          v602 = *(unsigned __int16 **)v596;
LABEL_1778:
          int v603 = v602[8];
          if ((v603 - 190) < 3 || v603 == 69)
          {
            uint64_t v274 = ".Protocol";
LABEL_1781:
            uint64_t v275 = this;
            std::string::size_type v276 = 9;
          }
          else
          {
            uint64_t v274 = ".Type";
LABEL_1014:
            uint64_t v275 = this;
            std::string::size_type v276 = 5;
          }
          goto LABEL_822;
        }
        unsigned int v387 = *((_DWORD *)a2 + 2);
LABEL_1768:
        if (v388 < v387)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1770;
        }
        goto LABEL_1771;
      case 0x93:
        unint64_t v43 = "metaclass for ";
        goto LABEL_208;
      case 0x94:
        long long v15 = "method lookup function for ";
        goto LABEL_309;
      case 0x95:
        long long v15 = "ObjC metadata update function for ";
        int v31 = this;
        std::string::size_type v32 = 34;
        goto LABEL_310;
      case 0x96:
        long long v15 = "ObjC resilient class stub for ";
        int v31 = this;
        std::string::size_type v32 = 30;
        goto LABEL_310;
      case 0x97:
        long long v15 = "full ObjC resilient class stub for ";
        int v31 = this;
        std::string::size_type v32 = 35;
        goto LABEL_310;
      case 0x98:
        int v370 = *((unsigned __int8 *)a2 + 18);
        if ((v370 - 1) < 2) {
          goto LABEL_989;
        }
        if (v370 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_989:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "modify";
        goto LABEL_1536;
      case 0x99:
        if (!this[1].__r_.__value_.__s.__data_[4]) {
          goto LABEL_823;
        }
        goto LABEL_1007;
      case 0x9A:
        int v347 = *((unsigned __int8 *)a2 + 18);
        if ((v347 - 1) < 2) {
          goto LABEL_930;
        }
        if (v347 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_930:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativeOwningAddressor";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 21;
        goto LABEL_1597;
      case 0x9B:
        int v326 = *((unsigned __int8 *)a2 + 18);
        if ((v326 - 1) < 2) {
          goto LABEL_901;
        }
        if (v326 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_901:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativeOwningMutableAddressor";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 28;
        goto LABEL_1597;
      case 0x9C:
        int v371 = *((unsigned __int8 *)a2 + 18);
        if ((v371 - 1) < 2) {
          goto LABEL_994;
        }
        if (v371 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_994:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativePinningAddressor";
        goto LABEL_1560;
      case 0x9D:
        int v414 = *((unsigned __int8 *)a2 + 18);
        if ((v414 - 1) < 2) {
          goto LABEL_1137;
        }
        if (v414 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1137:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativePinningMutableAddressor";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 29;
        goto LABEL_1597;
      case 0x9E:
        unint64_t v43 = "nominal type descriptor for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 28;
        goto LABEL_318;
      case 0x9F:
        unint64_t v43 = "nominal type descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 43;
        goto LABEL_318;
      case 0xA0:
        uint64_t v274 = "@nonobjc ";
        goto LABEL_1781;
      case 0xA2:
        goto LABEL_961;
      case 0xA3:
        std::string::append(this, "predefined ", 0xBuLL);
LABEL_961:
        std::string::append(this, "@objc completion handler block implementation for ", 0x32uLL);
        int v362 = *((unsigned __int8 *)a2 + 18);
        if (v362 != 5) {
          goto LABEL_964;
        }
        unsigned int v363 = *((_DWORD *)a2 + 2);
        if (v363 < 4) {
          goto LABEL_967;
        }
        int v362 = *((unsigned __int8 *)a2 + 18);
LABEL_964:
        int v364 = (swift::Demangle::__runtime::Node **)a2;
        if ((v362 - 1) < 2) {
          goto LABEL_969;
        }
        if (v362 != 5) {
          goto LABEL_1415;
        }
        unsigned int v363 = *((_DWORD *)a2 + 2);
LABEL_967:
        if (v363)
        {
          int v364 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_969:
          uint64_t v365 = *v364;
        }
        else
        {
LABEL_1415:
          uint64_t v365 = 0;
        }
        unsigned int v500 = v7 + 1;
        std::string::append(this, " with result type ", 0x12uLL);
        int v501 = *((unsigned __int8 *)a2 + 18);
        v502 = a2;
        if (v501 == 2) {
          goto LABEL_1420;
        }
        if (v501 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v502 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1420:
          v503 = (swift::Demangle::__runtime::Node *)*((void *)v502 + 1);
        }
        else
        {
          v503 = 0;
        }
        uint64_t v504 = **(void **)(*(void *)a2 + 16);
        switch(v504)
        {
          case 0:
            goto LABEL_823;
          case 2:
            uint64_t v274 = " zero on error";
LABEL_1448:
            uint64_t v275 = this;
            std::string::size_type v276 = 14;
            break;
          case 1:
            uint64_t v274 = " nonzero on error";
LABEL_1426:
            uint64_t v275 = this;
            std::string::size_type v276 = 17;
            break;
          default:
            uint64_t v274 = " <invalid error flag>";
            uint64_t v275 = this;
            std::string::size_type v276 = 21;
            break;
        }
        goto LABEL_822;
      case 0xA4:
        uint64_t v274 = "@objc ";
        goto LABEL_1286;
      case 0xA8:
        int v390 = *((unsigned __int8 *)a2 + 18);
        if ((v390 - 1) < 2) {
          goto LABEL_1074;
        }
        if (v390 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1074:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "owningAddressor";
        goto LABEL_1539;
      case 0xA9:
        int v375 = *((unsigned __int8 *)a2 + 18);
        if ((v375 - 1) < 2) {
          goto LABEL_1003;
        }
        if (v375 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1003:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "owningMutableAddressor";
        goto LABEL_1560;
      case 0xAA:
        if (this[1].__r_.__value_.__s.__data_[10]) {
          goto LABEL_1039;
        }
        uint64_t v348 = "partial apply forwarder";
        v349 = this;
        std::string::size_type v350 = 23;
        goto LABEL_1503;
      case 0xAB:
        if (this[1].__r_.__value_.__s.__data_[10])
        {
LABEL_1039:
          uint64_t v348 = "partial apply";
          v349 = this;
          std::string::size_type v350 = 13;
        }
        else
        {
          uint64_t v348 = "partial apply ObjC forwarder";
          v349 = this;
          std::string::size_type v350 = 28;
        }
LABEL_1503:
        std::string::append(v349, v348, v350);
        int v531 = *((unsigned __int8 *)a2 + 18);
        if ((v531 - 1) >= 2 && (v531 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        v372 = " for ";
        unint64_t v373 = this;
        std::string::size_type v374 = 5;
        goto LABEL_1507;
      case 0xAC:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v444 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v444 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v444, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "peer macro @";
        goto LABEL_1402;
      case 0xAD:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = " postfix";
        goto LABEL_1749;
      case 0xAE:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v393 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v393 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = off_C8B30;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v393, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "preamble macro @";
LABEL_1402:
        v494 = std::string::insert(&v636, 0, v493);
        std::string::size_type v495 = v494->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = *(_OWORD *)&v494->__r_.__value_.__l.__data_;
        v637.__r_.__value_.__r.__words[2] = v495;
        v494->__r_.__value_.__l.__size_ = 0;
        v494->__r_.__value_.__r.__words[2] = 0;
        v494->__r_.__value_.__r.__words[0] = 0;
        v496 = std::string::append(&v637, " expansion #");
        std::string::size_type v497 = v496->__r_.__value_.__r.__words[2];
        long long v638 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
        uint64_t v639 = v497;
        v496->__r_.__value_.__l.__size_ = 0;
        v496->__r_.__value_.__r.__words[2] = 0;
        v496->__r_.__value_.__r.__words[0] = 0;
        if (v639 >= 0) {
          v498 = (std::string::value_type *)&v638;
        }
        else {
          v498 = (std::string::value_type *)v638;
        }
        if (v639 >= 0) {
          size_t v499 = HIBYTE(v639);
        }
        else {
          size_t v499 = *((void *)&v638 + 1);
        }
        if (SHIBYTE(v639) < 0)
        {
          operator delete((void *)v638);
          if ((SHIBYTE(v637.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_1410:
            if ((SHIBYTE(v636.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_1411;
            }
            goto LABEL_1414;
          }
        }
        else if ((SHIBYTE(v637.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_1410;
        }
        operator delete(v637.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v636.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1411;
        }
LABEL_1414:
        operator delete(v636.__r_.__value_.__l.__data_);
LABEL_1411:
        swift::Demangle::__runtime::DemangleOptions::~DemangleOptions((swift::Demangle::__runtime::DemangleOptions *)&__str);
        goto LABEL_824;
      case 0xAF:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = " prefix";
        goto LABEL_1624;
      case 0xB0:
        int v471 = *((unsigned __int8 *)a2 + 18);
        if (v471 != 2 && (v471 != 5 || *((_DWORD *)a2 + 2) < 2u))
        {
          if (!this[1].__r_.__value_.__s.__data_[14]) {
            goto LABEL_823;
          }
          v521 = "(in ";
          goto LABEL_1683;
        }
        if (this[1].__r_.__value_.__s.__data_[14])
        {
          std::string::push_back(this, 40);
          int v471 = *((unsigned __int8 *)a2 + 18);
        }
        v472 = a2;
        if (v471 == 2) {
          goto LABEL_1316;
        }
        if (v471 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v472 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1316:
          v473 = (swift::Demangle::__runtime::Node *)*((void *)v472 + 1);
        }
        else
        {
          v473 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[14]) {
          goto LABEL_823;
        }
        v521 = " in ";
LABEL_1683:
        std::string::append(this, v521, 4uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
LABEL_1684:
        }
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1685:
        std::string::append(this, **(const std::string::value_type ***)a2, *(void *)(*(void *)a2 + 8));
        goto LABEL_1829;
      case 0xB1:
        unint64_t v43 = "property descriptor for ";
        goto LABEL_305;
      case 0xB2:
        goto LABEL_1479;
      case 0xB3:
        goto LABEL_1479;
      case 0xB5:
        std::string::size_type v332 = "protocol symbolic reference 0x";
        uint64_t v333 = this;
        std::string::size_type v334 = 30;
        goto LABEL_1248;
      case 0xB6:
        int v48 = *((unsigned __int8 *)a2 + 18);
        uint64_t v49 = (swift::Demangle::__runtime::Node **)a2;
        if ((v48 - 1) < 2) {
          goto LABEL_78;
        }
        if (v48 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            long long v10 = 0;
            unint64_t v50 = 0;
            goto LABEL_736;
          }
          uint64_t v49 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_78:
          unint64_t v50 = *v49;
        }
        else
        {
          unint64_t v50 = 0;
        }
        long long v10 = 0;
        if (v48 == 1)
        {
          int v217 = 0;
          goto LABEL_737;
        }
        unsigned int v215 = a2;
        if (v48 == 2) {
          goto LABEL_607;
        }
        if (v48 != 5) {
          goto LABEL_608;
        }
        if (*((_DWORD *)a2 + 2) < 2u)
        {
          long long v10 = 0;
        }
        else
        {
          unsigned int v215 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_607:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)v215 + 1);
LABEL_608:
          if (v48 == 5)
          {
            unsigned int v216 = *((_DWORD *)a2 + 2);
            if (v216 >= 3)
            {
              int v217 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
              if (v216 == 4)
              {
                std::string::append(this, "property behavior storage of ", 0x1DuLL);
                std::string::append(this, " in ", 4uLL);
                std::string::append(this, " : ", 3uLL);
                goto LABEL_7;
              }
LABEL_737:
              if (this[1].__r_.__value_.__s.__data_[6])
              {
                std::string::append(this, " : ", 3uLL);
                std::string::append(this, " in ", 4uLL);
                long long v10 = v217;
                goto LABEL_7;
              }
              goto LABEL_823;
            }
          }
        }
LABEL_736:
        int v217 = 0;
        goto LABEL_737;
      case 0xB7:
        v372 = "protocol conformance ref (type's module) ";
        unint64_t v373 = this;
        std::string::size_type v374 = 41;
        goto LABEL_1507;
      case 0xB8:
        v372 = "protocol conformance ref (protocol's module) ";
        unint64_t v373 = this;
        std::string::size_type v374 = 45;
        goto LABEL_1507;
      case 0xB9:
        v372 = "protocol conformance ref (retroactive) ";
        unint64_t v373 = this;
        std::string::size_type v374 = 39;
        goto LABEL_1507;
      case 0xBA:
        unint64_t v43 = "protocol descriptor for ";
LABEL_305:
        unint64_t v44 = this;
        std::string::size_type v45 = 24;
        goto LABEL_318;
      case 0xBB:
        unint64_t v43 = "protocol descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 39;
        goto LABEL_318;
      case 0xBC:
        unint64_t v43 = "protocol conformance descriptor for ";
        goto LABEL_315;
      case 0xBD:
        unint64_t v43 = "protocol conformance descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 51;
        goto LABEL_318;
      case 0xBE:
        int v456 = *((unsigned __int8 *)a2 + 18);
        if ((v456 - 1) < 2) {
          goto LABEL_1261;
        }
        if (v456 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1261:
        v457 = *(swift::Demangle::__runtime::Node **)a2;
        if (!*(void *)a2) {
          goto LABEL_823;
        }
        int v458 = *((unsigned __int8 *)v457 + 18);
        if ((v458 - 1) < 2 || v458 == 5 && *((_DWORD *)v457 + 2)) {
          goto LABEL_1622;
        }
        uint64_t v274 = "Any";
LABEL_1253:
        uint64_t v275 = this;
        std::string::size_type v276 = 3;
        goto LABEL_822;
      case 0xBF:
        int v351 = *((unsigned __int8 *)a2 + 18);
        if (v351 == 2)
        {
          uint64_t v352 = a2;
        }
        else
        {
          if (v351 != 5 || *((_DWORD *)a2 + 2) < 2u) {
            goto LABEL_823;
          }
          uint64_t v352 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v563 = *(swift::Demangle::__runtime::Node **)v352;
        std::string::append(this, " & ", 3uLL);
        int v564 = *((unsigned __int8 *)v563 + 18);
        if ((v564 - 1) >= 2)
        {
          if (v564 != 5 || !*((_DWORD *)v563 + 2)) {
            goto LABEL_823;
          }
          v563 = *(swift::Demangle::__runtime::Node **)v563;
        }
        v457 = *(swift::Demangle::__runtime::Node **)v563;
LABEL_1622:
        v434 = " & ";
        v476 = this;
LABEL_1324:
        goto LABEL_823;
      case 0xC0:
        int v448 = *((unsigned __int8 *)a2 + 18);
        if ((v448 - 1) < 2) {
          goto LABEL_1227;
        }
        if (v448 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1227:
        v449 = *(_DWORD **)a2;
        int v450 = *(unsigned __int8 *)(*(void *)a2 + 18);
        if ((v450 - 1) < 2) {
          goto LABEL_1231;
        }
        if (v450 != 5 || !v449[2]) {
          goto LABEL_823;
        }
        v449 = *(_DWORD **)v449;
LABEL_1231:
        v451 = *(swift::Demangle::__runtime::Node **)v449;
        int v452 = *(unsigned __int8 *)(*(void *)v449 + 18);
        if ((v452 - 1) < 2 || v452 == 5 && *((_DWORD *)v451 + 2))
        {
          std::string::append(this, " & ", 3uLL);
        }
        if (this[1].__r_.__value_.__s.__data_[1] && this[1].__r_.__value_.__s.__data_[17])
        {
          std::string::append(this, "Swift", 5uLL);
          std::string::append(this, ".", 1uLL);
        }
        uint64_t v274 = "AnyObject";
        goto LABEL_1781;
      case 0xC1:
        unint64_t v43 = "protocol self-conformance descriptor for ";
        goto LABEL_219;
      case 0xC2:
        unint64_t v43 = "protocol self-conformance witness for ";
        goto LABEL_246;
      case 0xC3:
        unint64_t v43 = "protocol self-conformance witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 44;
        goto LABEL_318;
      case 0xC4:
        std::string::append(this, "protocol witness for ", 0x15uLL);
        int v97 = *((unsigned __int8 *)a2 + 18);
        int v98 = a2;
        if (v97 == 2) {
          goto LABEL_225;
        }
        if (v97 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v98 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_225:
          int v99 = (swift::Demangle::__runtime::Node *)*((void *)v98 + 1);
        }
        else
        {
          int v99 = 0;
        }
        unsigned int v180 = " in conformance ";
        goto LABEL_462;
      case 0xC5:
        unint64_t v43 = "protocol witness table for ";
        goto LABEL_145;
      case 0xC6:
        unint64_t v43 = "protocol witness table accessor for ";
        goto LABEL_315;
      case 0xC7:
        unint64_t v43 = "protocol witness table pattern for ";
LABEL_317:
        unint64_t v44 = this;
        std::string::size_type v45 = 35;
        goto LABEL_318;
      case 0xC8:
      case 0xC9:
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "thunk for ", 0xAuLL);
          int v33 = *((unsigned __int8 *)a2 + 18);
          if (v33 == 1)
          {
            uint64_t v34 = 0;
          }
          else if (v33 == 5)
          {
            uint64_t v205 = *((unsigned int *)a2 + 2);
            if (!v205) {
              goto LABEL_544;
            }
            uint64_t v34 = v205 - 1;
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }
          else
          {
            long long v10 = 0;
            if (v33 != 2) {
              goto LABEL_6;
            }
            uint64_t v34 = 1;
          }
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v34);
          goto LABEL_6;
        }
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_WORD *)a2 + 8) == 201) {
          std::string::append(this, "helper ", 7uLL);
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          unint64_t v74 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          unint64_t v74 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        int v161 = *((unsigned __int8 *)a2 + 18);
        if (v161 == 2)
        {
          unint64_t v162 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v161 != 5) {
            goto LABEL_585;
          }
          unint64_t v162 = *((unsigned int *)a2 + 2);
        }
        if (v162 > v74 + 1)
        {
          unsigned int v210 = v161 - 1;
          int v211 = a2;
          if (v210 >= 2) {
            int v211 = *(swift::Demangle::__runtime::Node **)a2;
          }
          int v212 = (swift::Demangle::__runtime::Node *)*((void *)v211 + v74 + 1);
          goto LABEL_586;
        }
LABEL_585:
        int v212 = 0;
LABEL_586:
        int v201 = " to ";
        int v202 = this;
        std::string::size_type v203 = 4;
        goto LABEL_587;
      case 0xCA:
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 4)
        {
          unint64_t v74 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          unint64_t v74 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((unsigned int *)a2 + 2) > (v74 | 2)) {
          int v148 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * (v74 | 2));
        }
        else {
          int v148 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        int v149 = *((unsigned __int8 *)a2 + 18);
        if (v149 == 2)
        {
          unint64_t v150 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v149 != 5) {
            goto LABEL_531;
          }
          unint64_t v150 = *((unsigned int *)a2 + 2);
        }
        if (v150 > v74 + 1)
        {
          unsigned int v198 = v149 - 1;
          int v199 = a2;
          if (v198 >= 2) {
            int v199 = *(swift::Demangle::__runtime::Node **)a2;
          }
          unsigned int v200 = (swift::Demangle::__runtime::Node *)*((void *)v199 + v74 + 1);
LABEL_532:
          int v201 = " self ";
          int v202 = this;
          std::string::size_type v203 = 6;
LABEL_587:
          std::string::append(v202, v201, v203);
          unint64_t v213 = *((unsigned __int8 *)a2 + 18);
          unsigned int v214 = v213 - 1;
          if (v213 != 1)
          {
            if (v213 == 2)
            {
LABEL_594:
              long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v74);
              goto LABEL_7;
            }
            if (v213 != 5)
            {
LABEL_799:
              long long v10 = 0;
              goto LABEL_7;
            }
            unint64_t v213 = *((unsigned int *)a2 + 2);
          }
          if (v213 > v74)
          {
            if (v214 >= 2) {
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            }
            goto LABEL_594;
          }
          goto LABEL_799;
        }
LABEL_531:
        unsigned int v200 = 0;
        goto LABEL_532;
      case 0xCB:
        int v121 = *((unsigned __int8 *)a2 + 18);
        __int16 v122 = (swift::Demangle::__runtime::Node **)a2;
        if ((v121 - 1) < 2) {
          goto LABEL_288;
        }
        if (v121 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v122 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_288:
          unint64_t v123 = *v122;
        }
        else
        {
          unint64_t v123 = 0;
        }
        int v130 = " with global actor constraint ";
        int v131 = this;
        std::string::size_type v132 = 30;
        goto LABEL_504;
      case 0xCC:
        int v468 = *((unsigned __int8 *)a2 + 18);
        if ((v468 - 1) < 2) {
          goto LABEL_1296;
        }
        if (v468 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1296:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "read";
LABEL_1596:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 4;
        goto LABEL_1597;
      case 0xCD:
        std::string::append(this, "related decl '", 0xEuLL);
        unint64_t v54 = (const std::string::value_type ***)a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          unint64_t v54 = *(const std::string::value_type ****)a2;
        }
        std::string::append(this, **v54, (std::string::size_type)(*v54)[1]);
        std::string::append(this, "' for ", 6uLL);
        int v55 = *((unsigned __int8 *)a2 + 18);
        if (v55 == 2) {
          goto LABEL_539;
        }
        if (v55 == 5 && *((_DWORD *)a2 + 2) >= 2u) {
          goto LABEL_538;
        }
        goto LABEL_313;
      case 0xCE:
        int v111 = *((unsigned __int8 *)a2 + 18);
        if (v111 != 2 && (v111 != 5 || *((_DWORD *)a2 + 2) != 2)) {
          goto LABEL_823;
        }
        std::string::append(this, "retroactive @ ", 0xEuLL);
        int v112 = *((unsigned __int8 *)a2 + 18);
        __int16 v113 = (swift::Demangle::__runtime::Node **)a2;
        if ((v112 - 1) < 2) {
          goto LABEL_270;
        }
        if (v112 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v113 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_270:
          unint64_t v114 = *v113;
        }
        else
        {
          unint64_t v114 = 0;
        }
        goto LABEL_505;
      case 0xCF:
        int v376 = *((unsigned __int8 *)a2 + 18);
        if ((v376 - 1) < 2 || v376 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_1508;
        }
LABEL_1007:
        uint64_t v274 = *(const std::string::value_type **)a2;
        std::string::size_type v276 = *((void *)a2 + 1);
        uint64_t v275 = this;
        goto LABEL_822;
      case 0xD0:
        unint64_t v43 = "__shared ";
LABEL_292:
        unint64_t v44 = this;
        std::string::size_type v45 = 9;
        goto LABEL_318;
      case 0xD1:
        unint64_t v43 = "__owned ";
LABEL_290:
        unint64_t v44 = this;
        std::string::size_type v45 = 8;
        goto LABEL_318;
      case 0xD2:
        unint64_t v28 = "@box ";
        unint64_t v29 = this;
        std::string::size_type v30 = 5;
        goto LABEL_295;
      case 0xD3:
        int v67 = *((unsigned __int8 *)a2 + 18);
        int v68 = (swift::Demangle::__runtime::Node **)a2;
        if ((v67 - 1) < 2) {
          goto LABEL_151;
        }
        if (v67 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_496:
            long long v10 = 0;
            goto LABEL_6;
          }
          int v68 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_151:
          long long v10 = *v68;
        }
        else
        {
          long long v10 = 0;
        }
        if (v67 == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          uint64_t v522 = *(void *)(*(void *)a2 + 16);
          unsigned int v523 = v7 + 1;
          std::string::push_back(this, 32);
          if (!v522) {
            goto LABEL_823;
          }
          std::string::append(this, " <", 2uLL);
          int v524 = *(unsigned __int8 *)(v522 + 18);
          if (v524 == 5)
          {
            v615 = (unsigned int *)(v522 + 8);
            uint64_t v616 = *(unsigned int *)(v522 + 8);
            if (!v616
            {
LABEL_1521:
              std::string::push_back(this, 62);
              goto LABEL_823;
            }
          }
          else
          {
            if (v524 != 2)
            {
              if (v524 == 1) {
              goto LABEL_1521;
              }
            }
            v615 = (unsigned int *)(v522 + 8);
            uint64_t v616 = 2;
          }
          unint64_t v617 = 1;
          while (1)
          {
            std::string::append(this, ", ", 2uLL);
            int v619 = *(unsigned __int8 *)(v522 + 18);
            if (v619 == 2)
            {
              unint64_t v620 = *(unsigned __int8 *)(v522 + 18);
            }
            else
            {
              if (v619 != 5) {
                goto LABEL_1835;
              }
              unint64_t v620 = *v615;
            }
            if (v620 > v617)
            {
              unsigned int v621 = v619 - 1;
              v622 = (swift::Demangle::__runtime::Node **)v522;
              if (v621 >= 2) {
                v622 = *(swift::Demangle::__runtime::Node ***)v522;
              }
              v618 = v622[v617];
              goto LABEL_1836;
            }
LABEL_1835:
            v618 = 0;
LABEL_1836:
            if (v616 == ++v617) {
              goto LABEL_1521;
            }
          }
        }
        goto LABEL_6;
      case 0xD4:
        std::string::push_back(this, 123);
        int v459 = *((unsigned __int8 *)a2 + 18);
        if ((v459 - 1) >= 2 && (v459 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_1737;
        }
        unsigned int v460 = v7 + 1;
        std::string::push_back(this, 32);
        int v461 = *((unsigned __int8 *)a2 + 18);
        v462 = (swift::Demangle::__runtime::Node **)a2;
        if ((v461 - 1) < 2) {
          goto LABEL_1275;
        }
        if (v461 == 5 && *((_DWORD *)a2 + 2))
        {
          v462 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1275:
          v463 = *v462;
        }
        else
        {
          v463 = 0;
        }
        unint64_t v588 = 1;
        while (2)
        {
          unint64_t v590 = *((unsigned __int8 *)a2 + 18);
          if (v590 == 2) {
            goto LABEL_1728;
          }
          if (v590 == 5)
          {
            unint64_t v590 = *((unsigned int *)a2 + 2);
LABEL_1728:
            if (v590 > v588)
            {
              std::string::push_back(this, 44);
              std::string::push_back(this, 32);
              int v591 = *((unsigned __int8 *)a2 + 18);
              if (v591 == 2)
              {
                unint64_t v592 = *((unsigned __int8 *)a2 + 18);
              }
              else
              {
                if (v591 != 5) {
                  goto LABEL_1723;
                }
                unint64_t v592 = *((unsigned int *)a2 + 2);
              }
              if (v592 > v588)
              {
                unsigned int v593 = v591 - 1;
                v594 = a2;
                if (v593 >= 2) {
                  v594 = *(swift::Demangle::__runtime::Node **)a2;
                }
                v589 = (swift::Demangle::__runtime::Node *)*((void *)v594 + v588);
                goto LABEL_1724;
              }
LABEL_1723:
              v589 = 0;
LABEL_1724:
              ++v588;
              continue;
            }
          }
          break;
        }
LABEL_1737:
        uint64_t v274 = " }";
LABEL_1738:
        uint64_t v275 = this;
        std::string::size_type v276 = 2;
        goto LABEL_822;
      case 0xD5:
      case 0xD6:
        if (v11 == 214) {
          unint64_t v28 = "let ";
        }
        else {
          unint64_t v28 = "var ";
        }
        unint64_t v29 = this;
        std::string::size_type v30 = 4;
        goto LABEL_295;
      case 0xD7:
        int v383 = *((unsigned __int8 *)a2 + 18);
        if ((v383 - 1) < 2) {
          goto LABEL_1056;
        }
        if (v383 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1056:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "setter";
LABEL_1536:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 6;
        goto LABEL_1597;
      case 0xD9:
        uint64_t v274 = "serialized";
        goto LABEL_1246;
      case 0xDA:
        unint64_t v28 = "static ";
        unint64_t v29 = this;
        std::string::size_type v30 = 7;
        goto LABEL_295;
      case 0xDC:
        v625 = "subscript";
        std::string::size_type v626 = 9;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        uint64_t v281 = (std::string::value_type *)&unk_BFEA3;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        int v443 = 0;
        goto LABEL_1477;
      case 0xDD:
        if (this[1].__r_.__value_.__s.__data_[3])
        {
          std::string::append(this, " with unmangled suffix ", 0x17uLL);
          long long v638 = *(_OWORD *)a2;
          __swift::__runtime::llvm::StringRef::str((const void **)&v638, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = __p;
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_823;
      case 0xDF:
        std::string::append(this, "(", 1uLL);
        goto LABEL_1489;
      case 0xE0:
        if (ChildIf)
        {
          std::string::append(this, *(const std::string::value_type **)ChildIf, *(void *)(ChildIf + 8));
          std::string::append(this, ": ", 2uLL);
        }
          goto LABEL_823;
        uint64_t v274 = "...";
        goto LABEL_1253;
      case 0xE1:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = ": ";
        goto LABEL_1738;
      case 0xE2:
        uint64_t v296 = "Pack{";
        uint64_t v297 = this;
        std::string::size_type v298 = 5;
        goto LABEL_972;
      case 0xE3:
      case 0xE4:
        if (v11 == 227) {
          uint64_t v294 = "@direct";
        }
        else {
          uint64_t v294 = "@indirect";
        }
        if (v11 == 227) {
          std::string::size_type v295 = 7;
        }
        else {
          std::string::size_type v295 = 9;
        }
        std::string::append(this, v294, v295);
        uint64_t v296 = " Pack{";
        uint64_t v297 = this;
        std::string::size_type v298 = 6;
LABEL_972:
        std::string::append(v297, v296, v298);
        uint64_t v274 = "}";
        goto LABEL_1490;
      case 0xE5:
        unint64_t v43 = "repeat ";
        goto LABEL_204;
      case 0xE6:
        std::string::append(this, "/* level: ", 0xAuLL);
        unint64_t v53 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          unint64_t v53 = *(swift::Demangle::__runtime::Node **)a2;
        }
        snprintf((char *)&__str, 0x20uLL, "%llu", **((void **)v53 + 1));
        std::string::append(this, (const std::string::value_type *)&__str);
        std::string::append(this, " */ ", 4uLL);
        unint64_t v43 = "each ";
        unint64_t v44 = this;
        std::string::size_type v45 = 5;
        goto LABEL_318;
      case 0xE7:
        printer_unreachable("should be handled in Node::Kind::PackElement");
      case 0xE9:
        std::string::size_type v332 = "type symbolic reference 0x";
        uint64_t v333 = this;
        std::string::size_type v334 = 26;
        goto LABEL_1248;
      case 0xEC:
        int v118 = *((unsigned __int8 *)a2 + 18);
        unsigned int v119 = v118 - 1;
        std::string::size_type v120 = a2;
        if ((v118 - 1) >= 2) {
          std::string::size_type v120 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v120 + 16) != 290)
        {
          if (v119 >= 2)
          {
LABEL_312:
            if (v118 != 5 || !*((_DWORD *)a2 + 2))
            {
LABEL_313:
              long long v10 = 0;
              goto LABEL_6;
            }
LABEL_4:
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }
LABEL_5:
          long long v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_6:
          ++v7;
          goto LABEL_7;
        }
        v492 = (swift::Demangle::__runtime::Node **)a2;
        if (v119 < 2) {
          goto LABEL_1385;
        }
        if (v118 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            uint64_t v279 = 0;
            goto LABEL_1813;
          }
          v492 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1385:
          uint64_t v279 = *v492;
        }
        else
        {
          uint64_t v279 = 0;
        }
        if (v118 == 2)
        {
LABEL_1712:
          v585 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_1814;
        }
        if (v118 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1712;
        }
LABEL_1813:
        v585 = 0;
LABEL_1814:
        int v612 = *((unsigned __int8 *)v585 + 18);
        if ((v612 - 1) >= 2)
        {
          if (v612 != 5 || !*((_DWORD *)v585 + 2))
          {
            uint64_t v280 = 0;
LABEL_1820:
            uint64_t v278 = this;
LABEL_828:
            goto LABEL_823;
          }
          v585 = *(swift::Demangle::__runtime::Node **)v585;
        }
        uint64_t v280 = *(swift::Demangle::__runtime::Node **)v585;
        goto LABEL_1820;
      case 0xED:
        unint64_t v43 = "type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 18;
        goto LABEL_318;
      case 0xEE:
        unint64_t v43 = "type metadata accessor for ";
        goto LABEL_145;
      case 0xEF:
        unint64_t v43 = "type metadata completion function for ";
        goto LABEL_246;
      case 0xF0:
        unint64_t v43 = "type metadata instantiation cache for ";
LABEL_246:
        unint64_t v44 = this;
        std::string::size_type v45 = 38;
        goto LABEL_318;
      case 0xF1:
        unint64_t v43 = "type metadata instantiation function for ";
        goto LABEL_219;
      case 0xF2:
        unint64_t v43 = "type metadata singleton initialization cache for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 49;
        goto LABEL_318;
      case 0xF3:
        unint64_t v43 = "demangling cache variable for type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 48;
        goto LABEL_318;
      case 0xF4:
        unint64_t v43 = "lazy cache variable for type metadata for ";
        goto LABEL_276;
      case 0xF6:
        uint64_t v274 = "unknown index";
        uint64_t v275 = this;
        std::string::size_type v276 = 13;
        goto LABEL_822;
      case 0xF7:
        uint64_t v115 = "weak";
        int v116 = this;
        std::string::size_type v117 = 4;
        goto LABEL_278;
      case 0xF8:
        uint64_t v115 = "unowned";
        int v116 = this;
        std::string::size_type v117 = 7;
        goto LABEL_278;
      case 0xF9:
        uint64_t v115 = "unowned(unsafe)";
        int v116 = this;
        std::string::size_type v117 = 15;
LABEL_278:
        std::string::append(v116, v115, v117);
        unint64_t v43 = " ";
        unint64_t v44 = this;
        std::string::size_type v45 = 1;
        goto LABEL_318;
      case 0xFA:
        int v369 = *((unsigned __int8 *)a2 + 18);
        if ((v369 - 1) < 2) {
          goto LABEL_984;
        }
        if (v369 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_984:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "unsafeAddressor";
LABEL_1539:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 15;
        goto LABEL_1597;
      case 0xFB:
        int v401 = *((unsigned __int8 *)a2 + 18);
        if ((v401 - 1) < 2) {
          goto LABEL_1107;
        }
        if (v401 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1107:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "unsafeMutableAddressor";
LABEL_1560:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 22;
        goto LABEL_1597;
      case 0xFC:
        __int16 v69 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          __int16 v69 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v70 = **(void **)v69;
        if (v70 >= 0x18) {
          printer_unreachable("bad value witness kind");
        }
        std::string::append(this, off_C9518[(int)v70], qword_C6B10[(int)v70]);
        if (this[1].__r_.__value_.__s.__data_[12])
        {
          unint64_t v71 = " for ";
          __int16 v72 = this;
          std::string::size_type v73 = 5;
        }
        else
        {
          unint64_t v71 = " value witness for ";
          __int16 v72 = this;
          std::string::size_type v73 = 19;
        }
        std::string::append(v72, v71, v73);
        int v191 = *((unsigned __int8 *)a2 + 18);
        if (v191 == 2) {
          goto LABEL_495;
        }
        if (v191 == 5) {
          goto LABEL_493;
        }
        goto LABEL_496;
      case 0xFD:
        unint64_t v28 = "value witness table for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 24;
        goto LABEL_295;
      case 0xFE:
        uint64_t v281 = (std::string::value_type *)&unk_BFEA3;
        v625 = (char *)&unk_BFEA3;
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        int v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 1;
LABEL_1476:
        int v443 = 1;
LABEL_1477:
        size_t v416 = 0;
LABEL_1478:
LABEL_1479:
        long long v10 = v325;
        goto LABEL_824;
      case 0xFF:
        std::string::append(this, "vtable thunk for ", 0x11uLL);
        int v60 = *((unsigned __int8 *)a2 + 18);
        unint64_t v61 = a2;
        if (v60 == 2) {
          goto LABEL_124;
        }
        if (v60 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v61 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_124:
          unsigned int v62 = (swift::Demangle::__runtime::Node *)*((void *)v61 + 1);
        }
        else
        {
          unsigned int v62 = 0;
        }
        unsigned int v180 = " dispatching to ";
LABEL_462:
        int v181 = this;
        std::string::size_type v182 = 16;
LABEL_469:
        std::string::append(v181, v180, v182);
        int v183 = *((unsigned __int8 *)a2 + 18);
        if ((v183 - 1) < 2) {
          goto LABEL_473;
        }
        if (v183 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_799;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_473:
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_7;
      case 0x100:
        uint64_t v274 = "override ";
        goto LABEL_1781;
      case 0x101:
        int v397 = *((unsigned __int8 *)a2 + 18);
        if ((v397 - 1) < 2) {
          goto LABEL_1096;
        }
        if (v397 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1096:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "willset";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 7;
LABEL_1597:
        goto LABEL_824;
      case 0x102:
        unint64_t v28 = "reflection metadata builtin descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 39;
        goto LABEL_295;
      case 0x103:
        unint64_t v28 = "reflection metadata field descriptor ";
LABEL_118:
        unint64_t v29 = this;
        std::string::size_type v30 = 37;
        goto LABEL_295;
      case 0x104:
        unint64_t v28 = "reflection metadata associated type descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 47;
        goto LABEL_295;
      case 0x105:
        unint64_t v28 = "reflection metadata superclass descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 42;
        goto LABEL_295;
      case 0x107:
        long long v15 = "curry thunk of ";
        int v31 = this;
        std::string::size_type v32 = 15;
        goto LABEL_310;
      case 0x108:
        long long v15 = "dispatch thunk of ";
        goto LABEL_272;
      case 0x109:
        long long v15 = "method descriptor for ";
        int v31 = this;
        std::string::size_type v32 = 22;
        goto LABEL_310;
      case 0x10A:
        unint64_t v43 = "protocol requirements base descriptor for ";
        goto LABEL_276;
      case 0x10B:
        std::string::append(this, "associated conformance descriptor for ", 0x26uLL);
        int v58 = *((unsigned __int8 *)a2 + 18);
        unint64_t v59 = (swift::Demangle::__runtime::Node **)a2;
        if ((v58 - 1) < 2) {
          goto LABEL_129;
        }
        if (v58 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_390;
        }
        goto LABEL_128;
      case 0x10C:
        std::string::append(this, "default associated conformance accessor for ", 0x2CuLL);
        int v63 = *((unsigned __int8 *)a2 + 18);
        unint64_t v59 = (swift::Demangle::__runtime::Node **)a2;
        if ((v63 - 1) < 2) {
          goto LABEL_129;
        }
        if (v63 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_128:
          unint64_t v59 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_129:
          unint64_t v64 = *v59;
        }
        else
        {
LABEL_390:
          unint64_t v64 = 0;
        }
        std::string::append(this, ".", 1uLL);
        int v154 = *((unsigned __int8 *)a2 + 18);
        unint64_t v155 = a2;
        if (v154 == 2) {
          goto LABEL_395;
        }
        if (v154 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v155 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_395:
          int v156 = (swift::Demangle::__runtime::Node *)*((void *)v155 + 1);
        }
        else
        {
          int v156 = 0;
        }
        int v157 = ": ";
        unint64_t v158 = this;
        std::string::size_type v159 = 2;
LABEL_523:
        std::string::append(v158, v157, v159);
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_799;
        }
LABEL_718:
        long long v10 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        goto LABEL_7;
      case 0x10D:
        std::string::append(this, "base conformance descriptor for ", 0x20uLL);
        int v100 = *((unsigned __int8 *)a2 + 18);
        unint64_t v101 = (swift::Demangle::__runtime::Node **)a2;
        if ((v100 - 1) < 2) {
          goto LABEL_231;
        }
        if (v100 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v101 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_231:
          unint64_t v102 = *v101;
        }
        else
        {
          unint64_t v102 = 0;
        }
        int v130 = ": ";
        int v131 = this;
        std::string::size_type v132 = 2;
LABEL_504:
        std::string::append(v131, v130, v132);
        goto LABEL_505;
      case 0x10E:
        unint64_t v43 = "associated type descriptor for ";
LABEL_108:
        unint64_t v44 = this;
        std::string::size_type v45 = 31;
        goto LABEL_318;
      case 0x10F:
        uint64_t v274 = " async";
LABEL_1286:
        uint64_t v275 = this;
        std::string::size_type v276 = 6;
        goto LABEL_822;
      case 0x110:
        uint64_t v274 = " throws";
        goto LABEL_1624;
      case 0x111:
        std::string::append(this, " throws(", 8uLL);
        int v402 = *((unsigned __int8 *)a2 + 18);
        if (v402 == 1) {
          goto LABEL_1115;
        }
        if (v402 != 5 || *((_DWORD *)a2 + 2) != 1) {
          goto LABEL_1489;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1115:
        v403 = *(swift::Demangle::__runtime::Node **)a2;
        unsigned int v404 = v7 + 1;
        char v405 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1116;
      case 0x112:
        uint64_t v274 = " empty-list ";
LABEL_1062:
        uint64_t v275 = this;
        std::string::size_type v276 = 12;
        goto LABEL_822;
      case 0x113:
        uint64_t v274 = " first-element-marker ";
        goto LABEL_1023;
      case 0x114:
        uint64_t v274 = " variadic-marker ";
        goto LABEL_1426;
      case 0x115:
        std::string::append(this, "outlined bridged method (", 0x19uLL);
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = ") of ";
        goto LABEL_1014;
      case 0x116:
        std::string::append(this, "outlined copy of ", 0x11uLL);
        int v56 = *((unsigned __int8 *)a2 + 18);
        unint64_t v57 = (swift::Demangle::__runtime::Node **)a2;
        if ((v56 - 1) < 2) {
          goto LABEL_196;
        }
        if (v56 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_398;
        }
        goto LABEL_195;
      case 0x117:
        std::string::append(this, "outlined consume of ", 0x14uLL);
        int v88 = *((unsigned __int8 *)a2 + 18);
        unint64_t v57 = (swift::Demangle::__runtime::Node **)a2;
        if ((v88 - 1) < 2) {
          goto LABEL_196;
        }
        if (v88 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_195:
          unint64_t v57 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_196:
          unsigned int v89 = *v57;
        }
        else
        {
LABEL_398:
          unsigned int v89 = 0;
        }
        int v160 = *((unsigned __int8 *)a2 + 18);
        if (v160 == 2) {
          goto LABEL_509;
        }
        if (v160 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_823;
        }
        goto LABEL_508;
      case 0x118:
        long long v15 = "outlined retain of ";
        int v31 = this;
        std::string::size_type v32 = 19;
        goto LABEL_310;
      case 0x119:
        long long v15 = "outlined release of ";
        goto LABEL_235;
      case 0x11A:
        long long v15 = "outlined init with take of ";
        goto LABEL_309;
      case 0x11B:
      case 0x15E:
        long long v15 = "outlined init with copy of ";
        goto LABEL_309;
      case 0x11C:
      case 0x15F:
        long long v15 = "outlined assign with take of ";
        goto LABEL_46;
      case 0x11D:
      case 0x160:
        long long v15 = "outlined assign with copy of ";
LABEL_46:
        int v31 = this;
        std::string::size_type v32 = 29;
        goto LABEL_310;
      case 0x11E:
      case 0x161:
        long long v15 = "outlined destroy of ";
LABEL_235:
        int v31 = this;
        std::string::size_type v32 = 20;
        goto LABEL_310;
      case 0x11F:
        v417 = "outlined variable #";
        v418 = this;
        std::string::size_type v419 = 19;
        goto LABEL_1182;
      case 0x120:
        v417 = "outlined read-only object #";
        v418 = this;
        std::string::size_type v419 = 27;
LABEL_1182:
        std::string::append(v418, v417, v419);
        uint64_t v275 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(void *)a2);
        uint64_t v274 = " of ";
        std::string::size_type v276 = 4;
        goto LABEL_822;
      case 0x121:
        int v406 = *((unsigned __int8 *)a2 + 18);
        v407 = (swift::Demangle::__runtime::Node *const *)a2;
        if ((v406 - 1) < 2) {
          goto LABEL_1657;
        }
        if (v406 == 5)
        {
          v407 = *(swift::Demangle::__runtime::Node *const **)a2;
        }
        else
        {
          v407 = 0;
LABEL_1657:
          if (v406 != 5)
          {
            v566 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 8);
            if (v406 != 1) {
              v566 = 0;
            }
            if (v406 == 2) {
              v567 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 16);
            }
            else {
              v567 = v566;
            }
LABEL_1664:
            goto LABEL_823;
          }
        }
        v567 = (swift::Demangle::__runtime::Node *const *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_1664;
      case 0x123:
        unint64_t v28 = "module descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 18;
        goto LABEL_295;
      case 0x124:
        unint64_t v28 = "extension descriptor ";
        goto LABEL_239;
      case 0x125:
        unint64_t v28 = "anonymous descriptor ";
LABEL_239:
        unint64_t v29 = this;
        std::string::size_type v30 = 21;
        goto LABEL_295;
      case 0x126:
        v372 = "generic parameter reference for associated type ";
        unint64_t v373 = this;
        std::string::size_type v374 = 48;
LABEL_1507:
        std::string::append(v373, v372, v374);
LABEL_1508:
        goto LABEL_823;
      case 0x127:
        int v429 = *((unsigned __int8 *)a2 + 18);
        if ((v429 - 1) < 2) {
          goto LABEL_1171;
        }
        if (v429 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1171:
          v430 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v430 = 0;
        }
        uint64_t v274 = "?";
        goto LABEL_1490;
      case 0x128:
        std::string::append(this, "[", 1uLL);
        int v408 = *((unsigned __int8 *)a2 + 18);
        if ((v408 - 1) < 2) {
          goto LABEL_1124;
        }
        if (v408 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1124:
          v409 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v409 = 0;
        }
        unsigned int v542 = v7 + 1;
        v541 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1563;
      case 0x129:
        std::string::append(this, "[", 1uLL);
        int v398 = *((unsigned __int8 *)a2 + 18);
        unsigned __int8 v399 = (swift::Demangle::__runtime::Node **)a2;
        if ((v398 - 1) < 2) {
          goto LABEL_1101;
        }
        if (v398 == 5 && *((_DWORD *)a2 + 2))
        {
          unsigned __int8 v399 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1101:
          char v400 = *v399;
        }
        else
        {
          char v400 = 0;
        }
        unsigned int v539 = v7 + 1;
        std::string::append(this, " : ", 3uLL);
        int v540 = *((unsigned __int8 *)a2 + 18);
        if (v540 == 2) {
          goto LABEL_1555;
        }
        if (v540 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1555:
          v409 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
          v409 = 0;
        }
        v541 = (_anonymous_namespace_::NodePrinter *)this;
        unsigned int v542 = v539;
LABEL_1563:
        v536 = "]";
LABEL_1606:
        v560 = this;
        std::string::size_type v561 = 1;
        goto LABEL_1801;
      case 0x12A:
        std::string::append(this, "(", 1uLL);
        int v391 = *((unsigned __int8 *)a2 + 18);
        if ((v391 - 1) < 2) {
          goto LABEL_1079;
        }
        if (v391 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1079:
          char v392 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          char v392 = 0;
        }
        v536 = ")";
        goto LABEL_1606;
      case 0x12B:
        std::string::append(this, "accessor function at ", 0x15uLL);
LABEL_1155:
        uint64_t v425 = *(void *)a2;
LABEL_1156:
        swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v425);
        goto LABEL_823;
      case 0x12C:
        int v65 = *((unsigned __int8 *)a2 + 18);
        unsigned int v66 = (swift::Demangle::__runtime::Node **)a2;
        if ((v65 - 1) < 2) {
          goto LABEL_353;
        }
        if (v65 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_352:
          unsigned int v66 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_353:
          unsigned int v140 = *v66;
        }
        else
        {
LABEL_403:
          unsigned int v140 = 0;
        }
        std::string::push_back(this, 46);
LABEL_505:
        int v192 = *((unsigned __int8 *)a2 + 18);
        if (v192 == 2) {
          goto LABEL_509;
        }
        if (v192 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_799;
        }
LABEL_508:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_509:
        long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_7;
      case 0x12D:
        std::string::size_type v332 = "opaque type symbolic reference 0x";
        uint64_t v333 = this;
        std::string::size_type v334 = 33;
        goto LABEL_1248;
      case 0x12E:
        unint64_t v43 = "opaque type descriptor for ";
LABEL_145:
        unint64_t v44 = this;
        std::string::size_type v45 = 27;
        goto LABEL_318;
      case 0x12F:
        unint64_t v43 = "opaque type descriptor runtime record for ";
LABEL_276:
        unint64_t v44 = this;
        std::string::size_type v45 = 42;
        goto LABEL_318;
      case 0x130:
        unint64_t v43 = "opaque type descriptor accessor for ";
LABEL_315:
        unint64_t v44 = this;
        std::string::size_type v45 = 36;
        goto LABEL_318;
      case 0x131:
        unint64_t v43 = "opaque type descriptor accessor impl for ";
LABEL_219:
        unint64_t v44 = this;
        std::string::size_type v45 = 41;
        goto LABEL_318;
      case 0x132:
        std::string::append(this, "opaque type descriptor accessor key for ", 0x28uLL);
        int v87 = *((unsigned __int8 *)a2 + 18);
        if ((v87 - 1) < 2) {
          goto LABEL_299;
        }
        if (v87 != 5) {
          goto LABEL_544;
        }
        goto LABEL_297;
      case 0x133:
        unint64_t v28 = "opaque type descriptor accessor var for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 40;
        goto LABEL_295;
      case 0x134:
        uint64_t v274 = "some";
LABEL_1032:
        uint64_t v275 = this;
        std::string::size_type v276 = 4;
        goto LABEL_822;
      case 0x135:
        std::string::append(this, "<<opaque return type of ", 0x18uLL);
        uint64_t v274 = ">>";
        goto LABEL_1738;
      case 0x136:
        unint64_t v28 = "specialized generic metaclass for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 34;
        goto LABEL_295;
      case 0x137:
        unint64_t v28 = "canonical specialized generic type metadata accessor for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 57;
        goto LABEL_295;
      case 0x138:
        unint64_t v28 = "metadata instantiation cache for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 33;
        goto LABEL_295;
      case 0x139:
        unint64_t v28 = "noncanonical specialized generic type metadata for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 51;
        goto LABEL_295;
      case 0x13A:
        unint64_t v28 = "cache variable for noncanonical specialized generic type metadata for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 70;
        goto LABEL_295;
      case 0x13B:
      case 0x13C:
        if (v11 == 316) {
          long long v16 = "one-time initialization token for ";
        }
        else {
          long long v16 = "one-time initialization function for ";
        }
        if (v11 == 316) {
          std::string::size_type v17 = 34;
        }
        else {
          std::string::size_type v17 = 37;
        }
        std::string::append(this, v16, v17);
        int v18 = *((unsigned __int8 *)a2 + 18);
        if (v18 == 2) {
          goto LABEL_495;
        }
        if (v18 != 5) {
          goto LABEL_496;
        }
LABEL_493:
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_496;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_495:
        long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_6;
      case 0x13D:
        int v75 = *((unsigned __int8 *)a2 + 18);
        if (v75 == 1) {
          goto LABEL_5;
        }
        if (v75 == 5 && *((_DWORD *)a2 + 2) == 1) {
          goto LABEL_4;
        }
        std::string::push_back(this, 40);
        int v491 = *((unsigned __int8 *)a2 + 18);
        if (v491 == 5)
        {
          v576 = (unsigned int *)((char *)a2 + 8);
          uint64_t v577 = *((unsigned int *)a2 + 2);
          if (!v577 {
            || (unsigned int v578 = v7 + 1,
          }
          {
LABEL_1829:
            std::string::push_back(this, 41);
            goto LABEL_823;
          }
        }
        else
        {
          if (v491 != 2)
          {
            if (v491 == 1) {
            goto LABEL_1829;
            }
          }
          v576 = (unsigned int *)((char *)a2 + 8);
          unsigned int v578 = v7 + 1;
          uint64_t v577 = 2;
        }
        unint64_t v579 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v581 = *((unsigned __int8 *)a2 + 18);
          if (v581 == 2)
          {
            unint64_t v582 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v581 != 5) {
              goto LABEL_1697;
            }
            unint64_t v582 = *v576;
          }
          if (v582 > v579)
          {
            unsigned int v583 = v581 - 1;
            v584 = a2;
            if (v583 >= 2) {
              v584 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v580 = (swift::Demangle::__runtime::Node *)*((void *)v584 + v579);
            goto LABEL_1698;
          }
LABEL_1697:
          v580 = 0;
LABEL_1698:
          if (v577 == ++v579) {
            goto LABEL_1829;
          }
        }
      case 0x13E:
        unint64_t v28 = "flag for loading of canonical specialized generic type metadata for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 68;
        goto LABEL_295;
      case 0x13F:
        uint64_t v274 = "async function pointer to ";
        goto LABEL_1051;
      case 0x140:
      case 0x144:
        unsigned int v628 = v5;
        int v19 = 0;
        unint64_t v20 = 0;
        unint64_t v21 = *((unsigned __int8 *)a2 + 18);
        unint64_t v22 = v21;
        unsigned int v23 = v21 - 1;
        int v24 = -1;
        while (2)
        {
          uint64_t v25 = *((unsigned __int8 *)a2 + 18);
          if (v21 == 1) {
            goto LABEL_30;
          }
          if (v21 == 5)
          {
            if (v20 == *((_DWORD *)a2 + 2)) {
              break;
            }
            goto LABEL_31;
          }
          uint64_t v25 = 2;
          if (v21 != 2) {
            uint64_t v25 = 0;
          }
LABEL_30:
          if (v20 != v25)
          {
LABEL_31:
            BOOL v26 = a2;
            if ((v21 - 1) >= 2) {
              BOOL v26 = *(swift::Demangle::__runtime::Node **)a2;
            }
            if (*(_WORD *)(*((void *)v26 + v20) + 16) != 321)
            {
              ++v20;
              ++v24;
              ++v19;
              continue;
            }
          }
          break;
        }
        unint64_t v27 = *((unsigned __int8 *)a2 + 18);
        switch(v21)
        {
          case 1:
            break;
          case 5:
            unint64_t v27 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v27 = 2;
            break;
          default:
            goto LABEL_414;
        }
        if (v27 > v20)
        {
          int v163 = a2;
          if (v23 >= 2) {
            int v163 = *(swift::Demangle::__runtime::Node **)a2;
          }
          uint64_t v164 = (swift::Demangle::__runtime::Node *)*((void *)v163 + v20);
LABEL_415:
          if (v21 != 1)
          {
            if (v21 == 5)
            {
              unint64_t v22 = *((unsigned int *)a2 + 2);
            }
            else
            {
              if (v21 != 2) {
                goto LABEL_424;
              }
              unint64_t v22 = 2;
            }
          }
          unint64_t v165 = (v20 + 1);
          if (v22 > v165)
          {
            int v166 = a2;
            if (v23 >= 2) {
              int v166 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unsigned int v167 = (swift::Demangle::__runtime::Node *)*((void *)v166 + v165);
LABEL_425:
            if (v21 != 1)
            {
              if (v21 == 5)
              {
                unint64_t v21 = *((unsigned int *)a2 + 2);
              }
              else
              {
                if (v21 != 2) {
                  goto LABEL_434;
                }
                unint64_t v21 = 2;
              }
            }
            unint64_t v168 = (v20 + 2);
            if (v21 > v168)
            {
              int v169 = a2;
              if (v23 >= 2) {
                int v169 = *(swift::Demangle::__runtime::Node **)a2;
              }
              unsigned int v170 = (swift::Demangle::__runtime::Node *)*((void *)v169 + v168);
              goto LABEL_435;
            }
LABEL_434:
            unsigned int v170 = 0;
LABEL_435:
            if (v11 == 324) {
              std::string::append(this, "vtable thunk for ", 0x11uLL);
            }
            std::string::append(this, " of ", 4uLL);
            if (!v20)
            {
              long long v10 = 0;
              uint64_t v5 = v628;
              goto LABEL_728;
            }
            v627 = v170;
            int v171 = v167;
            unint64_t v172 = 0;
            unint64_t v173 = (v20 - 1);
            while (1)
            {
              unint64_t v175 = *((unsigned __int8 *)a2 + 18);
              if (v24 == v172)
              {
                if ((v175 - 1) >= 2)
                {
                  char v176 = 0;
                  int v177 = *(swift::Demangle::__runtime::Node **)a2;
                }
                else
                {
                  char v176 = 1;
                  int v177 = a2;
                }
                if (*(_WORD *)(*((void *)v177 + v173) + 16) == 43)
                {
                  if (v175 == 1)
                  {
                    uint64_t v5 = v628;
                    unsigned int v167 = v171;
                  }
                  else
                  {
                    uint64_t v5 = v628;
                    unsigned int v167 = v171;
                    if (v175 != 5)
                    {
                      unsigned int v170 = v627;
                      if (v175 == 2)
                      {
                        unint64_t v175 = 2;
                        goto LABEL_723;
                      }
                      goto LABEL_727;
                    }
                    unint64_t v175 = *((unsigned int *)a2 + 2);
                  }
                  unsigned int v170 = v627;
LABEL_723:
                  if (v175 <= v173)
                  {
LABEL_727:
                    long long v10 = 0;
                  }
                  else
                  {
                    if ((v176 & 1) == 0) {
                      a2 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v173);
                  }
LABEL_728:
                  if (this[1].__r_.__value_.__s.__data_[11]) {
                    goto LABEL_823;
                  }
                  std::string::append(this, " with respect to parameters ", 0x1CuLL);
                  std::string::append(this, " and results ", 0xDuLL);
                  if (v10)
                  {
                    if (this[1].__r_.__value_.__s.__data_[7])
                    {
LABEL_731:
                      std::string::append(this, " with ", 6uLL);
                      goto LABEL_7;
                    }
                    goto LABEL_823;
                  }
                  goto LABEL_824;
                }
              }
              unsigned int v178 = v175 - 1;
              if (v175 == 1) {
                goto LABEL_450;
              }
              if (v175 != 5) {
                break;
              }
              if (*((unsigned int *)a2 + 2) > v172)
              {
LABEL_453:
                int v179 = a2;
                if (v178 >= 2) {
                  int v179 = *(swift::Demangle::__runtime::Node **)a2;
                }
                int v174 = (swift::Demangle::__runtime::Node *)*((void *)v179 + v172);
                goto LABEL_440;
              }
LABEL_439:
              int v174 = 0;
LABEL_440:
              if (v19 == ++v172)
              {
                long long v10 = 0;
                uint64_t v5 = v628;
                unsigned int v167 = v171;
                unsigned int v170 = v627;
                goto LABEL_728;
              }
            }
            if (v175 != 2) {
              goto LABEL_439;
            }
            unint64_t v175 = 2;
LABEL_450:
            if (v175 > v172) {
              goto LABEL_453;
            }
            goto LABEL_439;
          }
LABEL_424:
          unsigned int v167 = 0;
          goto LABEL_425;
        }
LABEL_414:
        uint64_t v164 = 0;
        goto LABEL_415;
      case 0x141:
        long long v10 = 0;
        HIDWORD(v410) = *(unsigned __int8 *)a2;
        LODWORD(v410) = (HIDWORD(v410) << 24) - 1677721600;
        switch((v410 >> 25))
        {
          case 0u:
            uint64_t v274 = "differential";
            goto LABEL_1062;
          case 1u:
            uint64_t v274 = "forward-mode derivative";
            goto LABEL_1751;
          case 6u:
            uint64_t v274 = "pullback";
            goto LABEL_1749;
          case 7u:
            uint64_t v274 = "reverse-mode derivative";
LABEL_1751:
            uint64_t v275 = this;
            std::string::size_type v276 = 23;
            goto LABEL_822;
          default:
            goto LABEL_824;
        }
      case 0x142:
        std::string::append(this, "autodiff self-reordering reabstraction thunk ", 0x2DuLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "for ", 4uLL);
          goto LABEL_6;
        }
        unsigned int v185 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        int v184 = (unsigned __int16 *)*((void *)a2 + 2);
        int v186 = v184[8];
        if (v186 == 43) {
          uint64_t v187 = 24;
        }
        else {
          uint64_t v187 = 16;
        }
        std::string::append(this, "for ", 4uLL);
        if (v184 && v186 == 43)
        {
          std::string::push_back(this, 32);
        }
        std::string::append(this, " from ", 6uLL);
        std::string::append(this, " to ", 4uLL);
        long long v10 = v185;
        goto LABEL_7;
      case 0x143:
        std::string::append(this, "autodiff subset parameters thunk for ", 0x25uLL);
        unint64_t v90 = *((unsigned __int8 *)a2 + 18);
        switch(v90)
        {
          case 1:
            uint64_t v93 = 0;
            unint64_t v91 = -1;
            uint64_t v92 = *((unsigned __int8 *)a2 + 18);
            goto LABEL_619;
          case 5:
            uint64_t v92 = *((unsigned int *)a2 + 2);
            unint64_t v91 = v92 - 2;
            if (!v92)
            {
              int v219 = 0;
              uint64_t v92 = 0;
              unint64_t v221 = 0;
              unint64_t v220 = -3;
              goto LABEL_740;
            }
            uint64_t v93 = v92 - 1;
            uint64_t v218 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_620;
          case 2:
            unint64_t v91 = 0;
            uint64_t v92 = 2;
            uint64_t v93 = 1;
LABEL_619:
            uint64_t v218 = a2;
LABEL_620:
            int v219 = (swift::Demangle::__runtime::Node *)*((void *)v218 + v93);
            goto LABEL_622;
        }
        uint64_t v92 = 0;
        int v219 = 0;
        unint64_t v91 = -2;
LABEL_622:
        unint64_t v220 = v92 - 3;
        switch(v90)
        {
          case 1:
            unint64_t v221 = *((unsigned __int8 *)a2 + 18);
            break;
          case 2:
            unint64_t v221 = 2;
            break;
          case 5:
            unint64_t v221 = *((unsigned int *)a2 + 2);
            break;
          default:
            goto LABEL_744;
        }
LABEL_740:
        if (v221 <= v91)
        {
LABEL_744:
          long long v249 = 0;
          goto LABEL_745;
        }
        long long v248 = a2;
        if ((v90 - 1) >= 2) {
          long long v248 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v249 = (swift::Demangle::__runtime::Node *)*((void *)v248 + v91);
LABEL_745:
        switch(v90)
        {
          case 1:
            unint64_t v250 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v250 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v250 = 2;
            break;
          default:
            goto LABEL_755;
        }
        if (v250 <= v220)
        {
LABEL_755:
          long long v252 = 0;
          goto LABEL_756;
        }
        long long v251 = a2;
        if ((v90 - 1) >= 2) {
          long long v251 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v252 = (swift::Demangle::__runtime::Node *)*((void *)v251 + v220);
LABEL_756:
        unsigned int v253 = v90 - 1;
        switch(v90)
        {
          case 1:
            break;
          case 5:
            unint64_t v90 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v90 = 2;
            break;
          default:
            goto LABEL_765;
        }
        if (v90 <= v92 - 4)
        {
LABEL_765:
          long long v255 = 0;
          goto LABEL_766;
        }
        long long v254 = a2;
        if (v253 >= 2) {
          long long v254 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v255 = (swift::Demangle::__runtime::Node *)*((void *)v254 + v92 - 4);
LABEL_766:
        unint64_t v256 = v92 - 5;
        std::string::append(this, " from ", 6uLL);
        if (v256)
        {
          uint64_t v257 = v5;
          unint64_t v258 = 0;
          unsigned int v259 = 1;
          while (1)
          {
            unint64_t v261 = *((unsigned __int8 *)a2 + 18);
            unsigned int v262 = v261 - 1;
            if (v261 == 1) {
              goto LABEL_774;
            }
            if (v261 != 5) {
              break;
            }
            if (*((unsigned int *)a2 + 2) > v258)
            {
LABEL_777:
              int v263 = a2;
              if (v262 >= 2) {
                int v263 = *(swift::Demangle::__runtime::Node **)a2;
              }
              long long v260 = (swift::Demangle::__runtime::Node *)*((void *)v263 + v258);
              goto LABEL_769;
            }
LABEL_768:
            long long v260 = 0;
LABEL_769:
            unint64_t v258 = v259++;
            if (v256 <= v258) {
              goto LABEL_787;
            }
          }
          if (v261 != 2) {
            goto LABEL_768;
          }
          unint64_t v261 = 2;
LABEL_774:
          if (v261 > v258) {
            goto LABEL_777;
          }
          goto LABEL_768;
        }
        int v264 = *((unsigned __int8 *)a2 + 18);
        uint64_t v265 = (swift::Demangle::__runtime::Node **)a2;
        if ((v264 - 1) < 2) {
          goto LABEL_784;
        }
        if (v264 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v265 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_784:
          uint64_t v257 = v5;
          uint64_t v266 = *v265;
        }
        else
        {
          uint64_t v257 = v5;
          uint64_t v266 = 0;
        }
LABEL_787:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        std::string::append(this, " and results ", 0xDuLL);
        std::string::append(this, " to parameters ", 0xFuLL);
        if (!v256) {
          goto LABEL_823;
        }
        std::string::append(this, " of type ", 9uLL);
        unint64_t v267 = *((unsigned __int8 *)a2 + 18);
        unsigned int v268 = v267 - 1;
        if (v267 == 1)
        {
          uint64_t v5 = v257;
        }
        else
        {
          uint64_t v5 = v257;
          if (v267 == 5)
          {
            unint64_t v267 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v267 != 2) {
              goto LABEL_799;
            }
            unint64_t v267 = 2;
          }
        }
        if (v267 <= v256) {
          goto LABEL_799;
        }
        if (v268 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v256);
LABEL_7:
        char v6 = 0;
        char v8 = 1;
        a2 = v10;
        if (v7 > 0x300) {
          goto LABEL_820;
        }
        continue;
      case 0x145:
        uint64_t v76 = *((unsigned int *)a2 + 2);
        if (v76) {
          unsigned int v77 = (unsigned __int16 *)(*(void *)(*(void *)a2 + 8 * v76 - 8) + 16);
        }
        else {
          unsigned int v77 = (unsigned __int16 *)&dword_10;
        }
        BOOL v273 = *v77 == 43;
        uint64_t v188 = -4;
        if (!v273) {
          uint64_t v188 = -3;
        }
        HIDWORD(v189) = **(unsigned __int8 **)(*(void *)a2 + 8 * (v188 + v76));
        LODWORD(v189) = (HIDWORD(v189) << 24) - 1677721600;
        switch((v189 >> 25))
        {
          case 0u:
            unsigned int v190 = "normal";
            goto LABEL_642;
          case 1u:
            unsigned int v190 = "forward-mode";
            goto LABEL_645;
          case 4u:
            unsigned int v190 = "linear";
LABEL_642:
            int v222 = this;
            std::string::size_type v223 = 6;
            goto LABEL_646;
          case 7u:
            unsigned int v190 = "reverse-mode";
LABEL_645:
            int v222 = this;
            std::string::size_type v223 = 12;
LABEL_646:
            std::string::append(v222, v190, v223);
            break;
          default:
            break;
        }
        std::string::append(this, " differentiability witness for ", 0x1FuLL);
        uint64_t v224 = *((unsigned __int8 *)a2 + 18);
        if (v224 == 1) {
          goto LABEL_652;
        }
        if (v224 == 5)
        {
          uint64_t v224 = *((unsigned int *)a2 + 2);
          if (v224) {
            goto LABEL_652;
          }
LABEL_669:
          LODWORD(v225) = 0;
          goto LABEL_671;
        }
        if (v224 != 2) {
          goto LABEL_669;
        }
        uint64_t v224 = 2;
LABEL_652:
        unint64_t v225 = 0;
        while (1)
        {
          unint64_t v227 = *((unsigned __int8 *)a2 + 18);
          if ((v227 - 1) >= 2)
          {
            char v228 = 0;
            int v229 = *(swift::Demangle::__runtime::Node **)a2;
          }
          else
          {
            char v228 = 1;
            int v229 = a2;
          }
          if (*(_WORD *)(*((void *)v229 + v225) + 16) == 102) {
            break;
          }
          if (v227 == 1) {
            goto LABEL_663;
          }
          if (v227 != 5)
          {
            if (v227 != 2) {
              goto LABEL_653;
            }
            unint64_t v227 = 2;
LABEL_663:
            if (v227 > v225) {
              goto LABEL_666;
            }
            goto LABEL_653;
          }
          if (*((unsigned int *)a2 + 2) > v225)
          {
LABEL_666:
            unsigned int v230 = a2;
            if ((v228 & 1) == 0) {
              unsigned int v230 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v226 = (swift::Demangle::__runtime::Node *)*((void *)v230 + v225);
            goto LABEL_654;
          }
LABEL_653:
          int v226 = 0;
LABEL_654:
          if (v224 == ++v225)
          {
            LODWORD(v225) = v224;
            break;
          }
        }
LABEL_671:
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        unint64_t v231 = *((unsigned __int8 *)a2 + 18);
        unsigned int v232 = v231 - 1;
        if (v231 == 1) {
          goto LABEL_676;
        }
        if (v231 != 5)
        {
          if (v231 == 2)
          {
            unint64_t v231 = 2;
            goto LABEL_676;
          }
          goto LABEL_680;
        }
        unint64_t v231 = *((unsigned int *)a2 + 2);
LABEL_676:
        unint64_t v233 = (v225 + 1);
        if (v231 <= v233)
        {
LABEL_680:
          long long v235 = 0;
        }
        else
        {
          char v234 = a2;
          if (v232 >= 2) {
            char v234 = *(swift::Demangle::__runtime::Node **)a2;
          }
          long long v235 = (swift::Demangle::__runtime::Node *)*((void *)v234 + v233);
        }
        std::string::append(this, " and results ", 0xDuLL);
        unint64_t v236 = *((unsigned __int8 *)a2 + 18);
        unsigned int v237 = v236 - 1;
        if (v236 != 1)
        {
          if (v236 != 5)
          {
            if (v236 == 2)
            {
              unint64_t v236 = 2;
              goto LABEL_686;
            }
LABEL_690:
            long long v240 = 0;
            goto LABEL_691;
          }
          unint64_t v236 = *((unsigned int *)a2 + 2);
        }
LABEL_686:
        unint64_t v238 = (v225 + 2);
        if (v236 <= v238) {
          goto LABEL_690;
        }
        long long v239 = a2;
        if (v237 >= 2) {
          long long v239 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v240 = (swift::Demangle::__runtime::Node *)*((void *)v239 + v238);
LABEL_691:
        unint64_t v241 = *((unsigned __int8 *)a2 + 18);
        switch(v241)
        {
          case 1:
            unint64_t v242 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v242 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v242 = 2;
            break;
          default:
            goto LABEL_823;
        }
        unint64_t v243 = (v225 + 3);
        if (v242 > v243)
        {
          unsigned int v244 = v241 - 1;
          if (v241 != 1)
          {
            if (v241 == 5) {
              unint64_t v241 = *((unsigned int *)a2 + 2);
            }
            else {
              unint64_t v241 = 2;
            }
          }
          if (v241 <= v243)
          {
            long long v10 = 0;
          }
          else
          {
            if (v244 >= 2) {
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            }
            long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v243);
          }
          goto LABEL_731;
        }
LABEL_823:
        long long v10 = 0;
LABEL_824:
        if (v8) {
          return 0;
        }
        else {
          return v10;
        }
      case 0x146:
        unint64_t v43 = "@noDerivative ";
LABEL_208:
        unint64_t v44 = this;
        std::string::size_type v45 = 14;
        goto LABEL_318;
      case 0x147:
        std::string::push_back(this, 123);
        uint64_t v438 = *((unsigned int *)a2 + 2);
        if (*((_DWORD *)a2 + 2))
        {
          uint64_t v439 = 0;
          char v440 = 0;
          uint64_t v441 = *(void *)a2;
          do
          {
            if (*(unsigned char *)(v441 + v439) == 83)
            {
              if (v440) {
                std::string::append(this, ", ", 2uLL);
              }
              swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v439);
              char v440 = 1;
            }
            ++v439;
          }
          while (v438 != v439);
        }
        std::string::push_back(this, 125);
        goto LABEL_823;
      case 0x148:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v426 = *((unsigned __int8 *)a2 + 18);
        if ((v426 - 1) < 2) {
          goto LABEL_1162;
        }
        if (v426 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1162:
          v427 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v427 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v536 = " await resume partial function for ";
        v560 = this;
        std::string::size_type v561 = 35;
        goto LABEL_1801;
      case 0x149:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v381 = *((unsigned __int8 *)a2 + 18);
        if ((v381 - 1) < 2) {
          goto LABEL_1048;
        }
        if (v381 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1048:
          v382 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v382 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v536 = " suspend resume partial function for ";
        v560 = this;
        std::string::size_type v561 = 37;
        goto LABEL_1801;
      case 0x14A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "accessible function runtime record for ";
        uint64_t v275 = this;
        std::string::size_type v276 = 39;
        goto LABEL_822;
      case 0x14B:
        unint64_t v43 = "_const ";
LABEL_204:
        unint64_t v44 = this;
        std::string::size_type v45 = 7;
LABEL_318:
        std::string::append(v44, v43, v45);
        int v125 = *((unsigned __int8 *)a2 + 18);
        if ((v125 - 1) < 2) {
          goto LABEL_322;
        }
        if (v125 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_544;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_322:
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        ++v7;
        goto LABEL_7;
      case 0x14C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "back deployment thunk for ";
LABEL_1051:
        uint64_t v275 = this;
        std::string::size_type v276 = 26;
        goto LABEL_822;
      case 0x14D:
        uint64_t v274 = "back deployment fallback for ";
        uint64_t v275 = this;
        std::string::size_type v276 = 29;
        goto LABEL_822;
      case 0x14E:
        std::string::value_type v420 = this[1].__r_.__value_.__s.__data_[7];
        this[1].__r_.__value_.__s.__data_[7] = 1;
        int v421 = *((unsigned __int8 *)a2 + 18);
        if (v421 == 2) {
          goto LABEL_1152;
        }
        if (v421 != 5) {
          goto LABEL_1785;
        }
        unsigned int v422 = *((_DWORD *)a2 + 2);
        if (v422 == 2)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1152:
          v423 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          std::string::append(this, "existential shape for ", 0x16uLL);
          if (v423)
          {
            unsigned int v424 = v7 + 1;
            std::string::append(this, " ", 1uLL);
            v423 = 0;
            goto LABEL_1788;
          }
        }
        else
        {
          if (v422 < 2) {
LABEL_1785:
          }
            v423 = 0;
          else {
            v423 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8);
          }
          std::string::append(this, "existential shape for ", 0x16uLL);
        }
        unsigned int v424 = v7 + 1;
LABEL_1788:
        std::string::append(this, "any ", 4uLL);
        __n128 result = 0;
        this[1].__r_.__value_.__s.__data_[7] = v420;
        return result;
      case 0x14F:
        unint64_t v28 = "uniquable ";
        unint64_t v29 = this;
        std::string::size_type v30 = 10;
LABEL_295:
        std::string::append(v29, v28, v30);
        int v124 = *((unsigned __int8 *)a2 + 18);
        if ((v124 - 1) < 2) {
          goto LABEL_299;
        }
        if (v124 != 5) {
          goto LABEL_496;
        }
LABEL_297:
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_496;
        }
LABEL_298:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_299:
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_6;
      case 0x150:
        std::string::size_type v332 = "unique existential shape symbolic reference 0x";
        uint64_t v333 = this;
        std::string::size_type v334 = 46;
        goto LABEL_1248;
      case 0x151:
        std::string::size_type v332 = "non-unique existential shape symbolic reference 0x";
        uint64_t v333 = this;
        std::string::size_type v334 = 50;
        goto LABEL_1248;
      case 0x152:
        int v411 = *((unsigned __int8 *)a2 + 18);
        v412 = a2;
        if ((v411 - 1) < 2) {
          goto LABEL_1132;
        }
        if (v411 == 5 && *((_DWORD *)a2 + 2))
        {
          v412 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1132:
          uint64_t v413 = *(void *)v412;
        }
        else
        {
          uint64_t v413 = 0;
        }
        int v543 = *(unsigned __int16 *)(v413 + 16);
        std::string::append(this, "symbolic existential type (", 0x1BuLL);
        if (v543 == 336) {
          v544 = (const std::string::value_type *)&unk_BFEA3;
        }
        else {
          v544 = "non-";
        }
        std::string::append(this, v544, 4 * (v543 != 336));
        std::string::append(this, "unique) 0x", 0xAuLL);
        v545 = swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(void *)v413);
        std::string::append(v545, " <", 2uLL);
        int v546 = *((unsigned __int8 *)a2 + 18);
        v547 = a2;
        if (v546 == 2) {
          goto LABEL_1572;
        }
        if (v546 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v547 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1572:
          v548 = (swift::Demangle::__runtime::Node *)*((void *)v547 + 1);
        }
        else
        {
          v548 = 0;
        }
        unsigned int v549 = v7 + 1;
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
        {
          std::string::append(this, ", ", 2uLL);
          if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
            v550 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
          }
          else {
            v550 = 0;
          }
        }
        uint64_t v274 = ">";
        goto LABEL_1490;
      case 0x153:
        uint64_t v274 = "metatypes-removed";
        goto LABEL_1426;
      case 0x154:
        uint64_t v274 = "#_hasSymbol query for ";
LABEL_1023:
        uint64_t v275 = this;
        std::string::size_type v276 = 22;
        goto LABEL_822;
      case 0x157:
        long long v15 = "outlined enum tag store of ";
LABEL_309:
        int v31 = this;
        std::string::size_type v32 = 27;
        goto LABEL_310;
      case 0x158:
        long long v15 = "outlined enum project data for load of ";
        int v31 = this;
        std::string::size_type v32 = 39;
        goto LABEL_310;
      case 0x159:
        long long v15 = "outlined enum get tag of ";
        int v31 = this;
        std::string::size_type v32 = 25;
        goto LABEL_310;
      case 0x15A:
        long long v15 = "async demotion of ";
LABEL_272:
        int v31 = this;
        std::string::size_type v32 = 18;
LABEL_310:
        std::string::append(v31, v15, v32);
LABEL_311:
        int v118 = *((unsigned __int8 *)a2 + 18);
        if ((v118 - 1) >= 2) {
          goto LABEL_312;
        }
        goto LABEL_5;
      case 0x15B:
        std::string::size_type v332 = "objective-c protocol symbolic reference 0x";
        uint64_t v333 = this;
        std::string::size_type v334 = 42;
LABEL_1248:
        std::string::append(v333, v332, v334);
        swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(void *)a2);
        goto LABEL_823;
      case 0x15C:
        std::string::append(this, "lifetime dependence: ", 0x15uLL);
        unint64_t v78 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          unint64_t v78 = *(swift::Demangle::__runtime::Node **)a2;
        }
        int v79 = **(unsigned __int8 **)v78;
        if (v79 == 115)
        {
          uint64_t v80 = "scope ";
          unsigned int v81 = this;
          std::string::size_type v82 = 6;
        }
        else
        {
          if (v79 != 105) {
            goto LABEL_535;
          }
          uint64_t v80 = "inherit ";
          unsigned int v81 = this;
          std::string::size_type v82 = 8;
        }
        std::string::append(v81, v80, v82);
LABEL_535:
        int v204 = *((unsigned __int8 *)a2 + 18);
        if (v204 == 2) {
          goto LABEL_539;
        }
        if (v204 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
LABEL_538:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_539:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          ++v7;
        }
        else
        {
LABEL_544:
          long long v10 = 0;
          ++v7;
        }
        goto LABEL_7;
      case 0x15D:
        std::string::append(this, "(self lifetime dependence: ", 0x1BuLL);
        int v384 = *(unsigned __int8 *)a2;
        if (v384 == 115)
        {
          uint64_t v274 = "scope) ";
LABEL_1624:
          uint64_t v275 = this;
          std::string::size_type v276 = 7;
          goto LABEL_822;
        }
        if (v384 != 105) {
          goto LABEL_823;
        }
        uint64_t v274 = "inherit) ";
        goto LABEL_1781;
      case 0x162:
        int v394 = *((unsigned __int8 *)a2 + 18);
        v395 = (swift::Demangle::__runtime::Node **)a2;
        if ((v394 - 1) < 2) {
          goto LABEL_1090;
        }
        if (v394 == 5 && *((_DWORD *)a2 + 2))
        {
          v395 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1090:
          v396 = *v395;
        }
        else
        {
          v396 = 0;
        }
        std::string::append(this, ": ~", 3uLL);
        v537 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v537 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v538 = **((void **)v537 + 1);
        if (v538 == 1)
        {
          std::string::append(this, "Swift.", 6uLL);
          uint64_t v274 = "Escapable";
          goto LABEL_1781;
        }
        if (!v538)
        {
          std::string::append(this, "Swift.", 6uLL);
          uint64_t v274 = "Copyable";
          goto LABEL_1749;
        }
        std::string::append(this, "Swift.<bit ", 0xBuLL);
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v275 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, **((void **)a2 + 1));
        uint64_t v274 = ">";
        std::string::size_type v276 = 1;
        goto LABEL_822;
      default:
        printer_unreachable("bad node kind!");
    }
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::printEntity(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, std::string::value_type *__s, size_t __n, unsigned int a9, std::string::value_type *__sa, std::string::size_type __na)
{
  std::string::size_type v11 = __n;
  int v12 = __s;
  std::string::size_type v17 = a2;
  if (*((_WORD *)a2 + 8) != 19)
  {
    unint64_t v19 = 0;
    if (!__n) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  unint64_t v19 = 0;
  int v20 = *((unsigned __int8 *)a2 + 18);
  if (v20 == 1) {
    goto LABEL_12;
  }
  unint64_t v21 = a2;
  if (v20 != 2)
  {
    if (v20 != 5) {
      goto LABEL_8;
    }
    unsigned int v22 = *((_DWORD *)a2 + 2);
    if (v22 < 2)
    {
      unint64_t v19 = 0;
      if (v22) {
        goto LABEL_11;
      }
LABEL_21:
      std::string::size_type v17 = 0;
      if (!__n) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    unint64_t v21 = (uint64_t *)*a2;
  }
  unint64_t v19 = v21[1];
LABEL_8:
  if (v20 == 2) {
    goto LABEL_12;
  }
  if (v20 != 5 || !*((_DWORD *)a2 + 2)) {
    goto LABEL_21;
  }
LABEL_11:
  std::string::size_type v17 = (uint64_t *)*a2;
LABEL_12:
  std::string::size_type v17 = (uint64_t *)*v17;
  if (!__n)
  {
LABEL_22:
    BOOL v24 = 0;
    if (a6) {
      goto LABEL_23;
    }
LABEL_29:
    int v26 = 0;
    goto LABEL_30;
  }
LABEL_15:
  unsigned int v23 = memchr(__s, 32, __n);
  if (v23) {
    BOOL v24 = v23 - v12 != -1;
  }
  else {
    BOOL v24 = 0;
  }
  if (!a6) {
    goto LABEL_29;
  }
LABEL_23:
  uint64_t v25 = v17;
  if (*((unsigned char *)v17 + 18) == 5) {
    uint64_t v25 = (uint64_t *)*v17;
  }
  if (*(_WORD *)(v25[1] + 16) != 137) {
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 33)) {
    BOOL v24 = 1;
  }
  int v26 = 1;
LABEL_30:
  if (a5) {
    char v27 = 1;
  }
  else {
    char v27 = v24;
  }
  if (a4 && (v27 & 1) != 0) {
    return (swift::Demangle::__runtime::Node *)v17;
  }
  int v28 = *((unsigned __int8 *)v17 + 18);
  unint64_t v29 = v17;
  int v84 = v26;
  unint64_t v87 = v19;
  if ((v28 - 1) < 2) {
    goto LABEL_39;
  }
  if (v28 == 5 && *((_DWORD *)v17 + 2))
  {
    unint64_t v29 = (uint64_t *)*v17;
LABEL_39:
    uint64_t v30 = *v29;
    goto LABEL_41;
  }
  uint64_t v30 = 0;
LABEL_41:
  uint64_t v31 = a9;
  BOOL v85 = v24;
  char v86 = a4;
  if (!*(unsigned char *)(a1 + 25))
  {
    uint64_t v34 = 0;
    std::string::size_type v37 = __na;
    if (a6) {
      goto LABEL_93;
    }
    goto LABEL_90;
  }
  int v32 = a5;
  int v33 = (swift::Demangle::__runtime::Node *)v30;
  if (*(_WORD *)(v30 + 16) == 153)
  {
    int v35 = *(unsigned char **)v30;
    uint64_t v34 = *(swift::Demangle::__runtime::Node **)(v30 + 8);
    if (v34 == (swift::Demangle::__runtime::Node *)((char *)&dword_0 + 3))
    {
      if (*(_WORD *)v35 == 24415 && v35[2] == 67)
      {
        int v41 = *(unsigned __int8 *)(a1 + 42);
        goto LABEL_74;
      }
      if (*(void *)(a1 + 56) != 3) {
        goto LABEL_67;
      }
    }
    else if (v34 == (swift::Demangle::__runtime::Node *)((char *)&dword_4 + 1))
    {
      if (*(_DWORD *)v35 == 1718187859 && v35[4] == 116)
      {
        int v41 = *(unsigned __int8 *)(a1 + 41);
        goto LABEL_74;
      }
      if (*(void *)(a1 + 56) != 5) {
        goto LABEL_67;
      }
    }
    else
    {
      if (v34 != *(swift::Demangle::__runtime::Node **)(a1 + 56))
      {
LABEL_62:
        if ((unint64_t)v34 < 0xC) {
          goto LABEL_67;
        }
        if (*(void *)v35 != 0x655F62646C6C5F5FLL || *((_DWORD *)v35 + 2) != 1601335416) {
          goto LABEL_67;
        }
        int v41 = *(unsigned __int8 *)(a1 + 40);
LABEL_74:
        if (v41) {
          char v42 = v24;
        }
        else {
          char v42 = 1;
        }
        if (v41) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        if (v42) {
          goto LABEL_69;
        }
        goto LABEL_81;
      }
      if (!v34)
      {
LABEL_69:
        a5 = v32;
        goto LABEL_89;
      }
    }
    int v39 = memcmp(*(const void **)v30, *(const void **)(a1 + 48), *(void *)(v30 + 8));
    BOOL v24 = v85;
    if (!v39)
    {
      uint64_t v34 = 0;
      goto LABEL_69;
    }
    goto LABEL_62;
  }
LABEL_67:
  if (v24)
  {
    uint64_t v34 = v33;
    goto LABEL_69;
  }
LABEL_81:
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v43 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v43 = *(void *)(a1 + 8);
  }
  uint64_t v45 = *(unsigned __int8 *)(a1 + 23);
  if ((v45 & 0x80u) != 0) {
    uint64_t v45 = *(void *)(a1 + 8);
  }
  if (v45 != v43) {
    std::string::push_back((std::string *)a1, 46);
  }
  uint64_t v34 = (swift::Demangle::__runtime::Node *)v44;
  a5 = v32;
  BOOL v24 = v85;
LABEL_89:
  uint64_t v31 = a9;
  std::string::size_type v37 = __na;
  if (a6) {
    goto LABEL_93;
  }
LABEL_90:
  if (!v37)
  {
    int v46 = a3;
    unint64_t v47 = v87;
    if (!v11) {
      goto LABEL_114;
    }
    goto LABEL_112;
  }
LABEL_93:
  if (v11) {
    BOOL v48 = v24;
  }
  else {
    BOOL v48 = 0;
  }
  int v49 = a5;
  unint64_t v50 = v34;
  if (v48)
  {
    std::string::append((std::string *)a1, v12, v11);
    if ((v31 & 0x80000000) == 0)
    {
      snprintf(__str, 0x20uLL, "%lld", v31);
      std::string::append((std::string *)a1, __str);
    }
    std::string::append((std::string *)a1, " of ", 4uLL);
    std::string::size_type v11 = 0;
    LODWORD(v31) = -1;
    int v12 = (const std::string::value_type *)&unk_BFEA3;
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v51 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v51 = *(void *)(a1 + 8);
  }
  if (v37)
  {
    std::string::append((std::string *)a1, __sa, v37);
    int v46 = a3;
    unint64_t v47 = v87;
    goto LABEL_105;
  }
  int v56 = *((unsigned __int8 *)v17 + 18);
  unint64_t v57 = v17;
  if (v56 == 5) {
    unint64_t v57 = (uint64_t *)*v17;
  }
  int v58 = (swift::Demangle::__runtime::Node *)v57[1];
  int v46 = a3;
  if (*((_WORD *)v58 + 8) != 176)
  {
    int v56 = *((unsigned __int8 *)v17 + 18);
  }
  unint64_t v59 = (swift::Demangle::__runtime::Node **)v17;
  unint64_t v47 = v87;
  if ((v56 - 1) >= 2)
  {
    if (v56 == 5)
    {
      int v60 = (uint64_t *)*v17;
      unint64_t v59 = (swift::Demangle::__runtime::Node **)*v17;
      goto LABEL_191;
    }
    unint64_t v59 = 0;
  }
  if (v56 == 1)
  {
    unint64_t v74 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    goto LABEL_221;
  }
  if (v56 == 2)
  {
    unint64_t v74 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    goto LABEL_221;
  }
  if (v56 != 5)
  {
    unint64_t v74 = 0;
    goto LABEL_221;
  }
  int v60 = (uint64_t *)*v17;
LABEL_191:
  unint64_t v74 = (swift::Demangle::__runtime::Node **)&v60[*((unsigned int *)v17 + 2)];
LABEL_221:
  if (v59 != v74)
  {
    while (*((_WORD *)*v59 + 8) != 176)
    {
      if (++v59 == v74)
      {
        unint64_t v59 = v74;
        break;
      }
    }
  }
  switch(v56)
  {
    case 5:
      uint64_t v83 = *v17 + 8 * *((unsigned int *)v17 + 2);
      break;
    case 2:
      uint64_t v83 = (uint64_t)(v17 + 2);
      break;
    case 1:
      uint64_t v83 = (uint64_t)(v17 + 1);
      break;
    default:
      uint64_t v83 = 0;
      break;
  }
  if (v59 != (swift::Demangle::__runtime::Node **)v83 && *v59) {
LABEL_105:
  }
  uint64_t v52 = *(unsigned __int8 *)(a1 + 23);
  if ((v52 & 0x80u) != 0) {
    uint64_t v52 = *(void *)(a1 + 8);
  }
  if (v52 == v51)
  {
    uint64_t v34 = v50;
    a5 = v49;
    if (!v11) {
      goto LABEL_114;
    }
  }
  else
  {
    uint64_t v34 = v50;
    a5 = v49;
    if (!v11) {
      goto LABEL_114;
    }
    std::string::push_back((std::string *)a1, 46);
  }
LABEL_112:
  std::string::append((std::string *)a1, v12, v11);
  if ((v31 & 0x80000000) == 0)
  {
    snprintf(__str, 0x20uLL, "%lld", v31);
    std::string::append((std::string *)a1, __str);
  }
LABEL_114:
  if (!a5) {
    goto LABEL_207;
  }
  int v53 = *((unsigned __int8 *)v17 + 18);
  unint64_t v54 = (swift::Demangle::__runtime::Node **)v17;
  if ((v53 - 1) >= 2)
  {
    if (v53 == 5)
    {
      int v55 = (uint64_t *)*v17;
      unint64_t v54 = (swift::Demangle::__runtime::Node **)*v17;
      goto LABEL_130;
    }
    unint64_t v54 = 0;
  }
  switch(v53)
  {
    case 1:
      unint64_t v61 = (swift::Demangle::__runtime::Node **)(v17 + 1);
      if (v54 != (swift::Demangle::__runtime::Node **)(v17 + 1)) {
        goto LABEL_137;
      }
      break;
    case 2:
      unint64_t v61 = (swift::Demangle::__runtime::Node **)(v17 + 2);
      if (v54 != (swift::Demangle::__runtime::Node **)(v17 + 2)) {
        goto LABEL_137;
      }
      break;
    case 5:
      int v55 = (uint64_t *)*v17;
LABEL_130:
      unint64_t v61 = (swift::Demangle::__runtime::Node **)&v55[*((unsigned int *)v17 + 2)];
      if (v54 != v61) {
        goto LABEL_137;
      }
      break;
    default:
      unint64_t v61 = 0;
      if (v54)
      {
LABEL_137:
        while (*((_WORD *)*v54 + 8) != 232)
        {
          if (++v54 == v61)
          {
            unint64_t v54 = v61;
            goto LABEL_140;
          }
        }
      }
      break;
  }
LABEL_140:
  if (v53 == 5)
  {
    if (v54 == (swift::Demangle::__runtime::Node **)(*v17 + 8 * *((unsigned int *)v17 + 2)))
    {
LABEL_156:
      std::string::size_type v17 = 0;
      *(unsigned char *)(a1 + 97) = 0;
      return (swift::Demangle::__runtime::Node *)v17;
    }
  }
  else
  {
    unsigned int v62 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    if (v53 != 1) {
      unsigned int v62 = 0;
    }
    if (v53 == 2) {
      int v63 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    }
    else {
      int v63 = v62;
    }
    if (v54 == v63) {
      goto LABEL_156;
    }
  }
  unint64_t v64 = *v54;
  if (!v64) {
    goto LABEL_156;
  }
  int v65 = *((unsigned __int8 *)v64 + 18);
  if ((v65 - 1) < 2) {
    goto LABEL_154;
  }
  if (v65 == 5 && *((_DWORD *)v64 + 2))
  {
    unint64_t v64 = *(swift::Demangle::__runtime::Node **)v64;
LABEL_154:
    unsigned int v66 = *(swift::Demangle::__runtime::Node **)v64;
    if (a5 != 2) {
      goto LABEL_184;
    }
    goto LABEL_158;
  }
  unsigned int v66 = 0;
  if (a5 != 2) {
    goto LABEL_184;
  }
LABEL_158:
  int v67 = v66;
  while (1)
  {
    int v69 = *((unsigned __int16 *)v67 + 8);
    if (v69 != 44) {
      break;
    }
    int v70 = *((unsigned __int8 *)v67 + 18);
    if (v70 != 2)
    {
      if (v70 != 5 || *((_DWORD *)v67 + 2) < 2u)
      {
        int v68 = 0;
        goto LABEL_169;
      }
      int v67 = *(swift::Demangle::__runtime::Node **)v67;
    }
    int v68 = (swift::Demangle::__runtime::Node *)*((void *)v67 + 1);
LABEL_169:
    int v71 = *((unsigned __int8 *)v68 + 18);
    if ((v71 - 1) < 2)
    {
LABEL_161:
      int v67 = *(swift::Demangle::__runtime::Node **)v68;
    }
    else
    {
      int v67 = 0;
      if (v71 == 5)
      {
        int v67 = 0;
        if (*((_DWORD *)v68 + 2))
        {
          int v68 = *(swift::Demangle::__runtime::Node **)v68;
          goto LABEL_161;
        }
      }
    }
  }
  BOOL v72 = (v69 - 22) > 0x3C || ((1 << (v69 - 22)) & 0x1000080000000001) == 0;
  if (!v72 || v69 == 222 || v69 == 245)
  {
    int v73 = *((unsigned __int16 *)v17 + 8);
    if ((v73 == 117 || v73 == 70) && !*(unsigned char *)(a1 + 45)) {
      goto LABEL_207;
    }
    if (v85) {
      goto LABEL_183;
    }
    int v75 = v66;
    while (1)
    {
LABEL_196:
      uint64_t v76 = v75;
      int v77 = *((unsigned __int16 *)v75 + 8);
      if (v77 != 232)
      {
        BOOL v79 = (v77 - 44) > 0x26 || ((1 << (v77 - 44)) & 0x4000200001) == 0;
        if (!v79 || v77 == 245)
        {
LABEL_206:
          goto LABEL_207;
        }
LABEL_183:
        std::string::push_back((std::string *)a1, 32);
        goto LABEL_206;
      }
      int v78 = *((unsigned __int8 *)v76 + 18);
      if ((v78 - 1) < 2) {
        goto LABEL_195;
      }
      int v75 = 0;
      if (v78 == 5)
      {
        int v75 = 0;
        if (*((_DWORD *)v76 + 2)) {
          break;
        }
      }
    }
    uint64_t v76 = *(swift::Demangle::__runtime::Node **)v76;
LABEL_195:
    int v75 = *(swift::Demangle::__runtime::Node **)v76;
    goto LABEL_196;
  }
LABEL_184:
  if (*(unsigned char *)(a1 + 32))
  {
    std::string::append((std::string *)a1, " : ", 3uLL);
    goto LABEL_206;
  }
LABEL_207:
  if ((v86 & 1) != 0 || !v34 || v84 && !*(unsigned char *)(a1 + 33)) {
    return v34;
  }
  int v80 = *((unsigned __int16 *)v17 + 8);
  unsigned int v81 = " of ";
  if (((v80 - 125) > 0x36 || ((1 << (v80 - 125)) & 0x60000000000001) == 0)
    && v80 != 33)
  {
    unsigned int v81 = " in ";
  }
  std::string::append((std::string *)a1, v81, 4uLL);
  return 0;
}